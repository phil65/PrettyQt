{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PrettyQt: Pythonic layer on top of PyQt6 / PySide6","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>PrettyQt is a Python package that provides a pythonic layer on top of the GUI frameworks PyQt6 / PySide6.</p>"},{"location":"index.html#main-features","title":"Main Features","text":"<ul> <li>Subclasses for a large part of the Qt classes, enriched with helper and __dunder__ methods to give a feel of a native GUI library.</li> <li>more than 80 pre-defined widgets and layouts for common use cases</li> <li>more than 30 ItemModels for different data types</li> <li>more than 25 general-purpose proxy models</li> <li>10 ItemDelegates for different purposes</li> <li>20 different validators</li> <li>Integration with pandas / numpy.</li> <li>much, much more.</li> </ul> <p>PrettyQt basically is a wrapper for the whole Qt API (either on top of PySide6 or PyQt6 bindings). Perhaps it can be seen as a small Python equivalent of the KDE framework.</p> <p>A large part of the library consists of a tree of mixins, with one mixin for each Qt class. These mixins also inherit from each other and are applied to the Qt classes. That way each class gets all helper methods from all sub-mixins.</p> <p>Example: The class \"TreeView\" inherits from original Qt Class \"QTreeView\" and gets helper methods from \"TreeViewMxin\", \"AbstractItemViewMixin\", \"AbstractScrollAreaMixin\", \"FrameMixin\", \"WidgetMixin\" and \"ObjectMixin\".</p> <p>To illustrate this, we will use some of our included models:</p> <p>Class hierarchy example</p> Subclass treeParentclass treeMRO tree <pre><code>from prettyqt import custom_models, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = custom_models.SubClassTreeModel(core.AbstractItemModelMixin)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> AbstractitemModelMixin subclasses </p> <pre><code>from prettyqt import custom_models, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = custom_models.ParentClassTreeModel(widgets.TreeWidget)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> TreeWidget parent classes </p> <pre><code>from prettyqt import custom_models, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = custom_models.ParentClassTreeModel(widgets.TreeWidget, mro=True)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> TreeWidget MRO </p> <p>Main objective is to make Qt feel \"pythonic\". Qt is originally a C++ Framework, and using it can be quite cumbersome for Python developers. (very restrictive when it comes to types, very OOP-centric, lot of enum use, snakeCase naming etc.) PrettyQt aims to improve this by:</p> <ul> <li>adding more powerful methods to the classes, which accept more types and have more options (in form of keyword arguments)</li> <li>doing conversions for method parameters to lessen the strictness for types. (Example: points, sizes and rectangles can also be passed to Qt methods as tuples.)</li> <li>raising Exceptions or returning <code>None</code> instead of returning <code>-1</code> or invalid objects.</li> <li>all enum getters/setters also work with strings. Everything typed with Literals for an excellent IDE experience. (Example: )</li> <li>adding a lot of __dunder__ methods to the classes to make them behave like good python citizens.</li> </ul> <p>The minimum supported python version is 3.10. Since large parts of the library are dealing with type conversions, the match-case statement is essential, therefore makin it impossible to use older Python versions. The minimum supported Qt version is 6.5, since it is the first Qt Version which is up-to-par featurewise with Qt5.</p> <p>The aim is to support the last two released Python versions as well as keeping support for the last Qt LTS release.</p> <p>Apart from the 3D related modules (Qt3D, QtDataVizualization), QtXml and QtSql, almost every class from Qt is covered.</p>"},{"location":"index.html#covered-qt-modules","title":"Covered Qt modules","text":"Qt Module PrettyQt module QtBluetooth prettyqt.bluetooth QtCharts prettyqt.charts QtCore prettyqt.core QtDesigner prettyqt.designer QtGui prettyqt.gui QtLocation prettyqt.location QtMultimedia prettyqt.multimedia QtMultimediaWidgets prettyqt.multimediawidgets QtNetwork prettyqt.network QtOpenGLWidgets prettyqt.openglwidgets QtPdf prettyqt.pdf QtPdfWidgets prettyqt.pdfwidgets QtPositioning prettyqt.positioning QtPrintSupport prettyqt.printsupport QtQml prettyqt.qml QtHelp prettyqt.qthelp QtQuick prettyqt.quick QtQuickWidgets prettyqt.quickwidgets QScintilla prettyqt.scintilla QtScXml prettyqt.scxml QtSpatialAudio prettyqt.spatialaudio QtStateMachine prettyqt.statemachine QtSvg prettyqt.svg QtSvgWidgets prettyqt.svgwidgets QtTest prettyqt.test QtTextToSpeech prettyqt.texttospeech QtWebChannel prettyqt.webchannel QtWebEngineCore prettyqt.webenginecore QtWebEngineWidgets prettyqt.webenginewidgets QtWidgets prettyqt.widgets <p>Read more about the general API design.</p> <p>Apart from the mentioned mixin tree and the corresponding classes, this library also contains a lot of custom widgets, delegates, eventfilters, validators, syntaxhighlighters, layouts, models, proxy models and much more.</p> <p>Converting to PrettyQt should be very straightforward since the original behaviour of the Qt classes didnt change for the largest parts and all methods from base Qt modules are still available. (There might be a few constructors with slightly different behaviour though.)</p> <p>Interested? Take a look at the documentation! (even though it totally sucks in its current state.)</p>"},{"location":"index.html#where-to-get-it","title":"Where to get it","text":"<p>The source code is currently hosted on GitHub at: https://github.com/phil65/PrettyQt</p> <p>The latest released version are available at the Python package index.</p> <pre><code># or PyPI\npip install prettyqt\n</code></pre>"},{"location":"index.html#required-dependencies","title":"Required dependencies","text":"<ul> <li>bidict</li> <li>pygments</li> <li>qstylizer</li> <li>typing_extensions</li> <li>pyside6 or pyqt6*</li> </ul> <p>*Note: Only Qt 6.5+ is supported.</p>"},{"location":"index.html#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>orjson</li> <li>numpy</li> <li>ipython</li> <li>qtconsole</li> <li>pillow</li> <li>fsspec</li> </ul>"},{"location":"index.html#installation-from-sources","title":"Installation from sources","text":"<p>This project uses poetry for dependency management and packaging. Install this first. In the <code>prettyqt</code> directory (same one where you found this file after cloning the git repo), execute:</p> <pre><code>poetry install\n</code></pre>"},{"location":"index.html#license","title":"License","text":"<p>MIT</p>"},{"location":"index.html#contributing-to-prettyqt","title":"Contributing to prettyqt","text":"<p>All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.</p> <p>Or maybe through using PrettyQt you have an idea of your own or are looking for something in the documentation and thinking \u2018this can be improved\u2019...you can do something about it!</p>"},{"location":"SUMMARY.html","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage<ul> <li>General</li> <li>Types</li> <li>Bindings</li> </ul> </li> <li>Features<ul> <li>Models<ul> <li>Builtin types<ul> <li>AstModel</li> <li>ParentClassTreeModel</li> <li>SubClassTreeModel</li> <li>DataClassModel</li> <li>DataClassFieldsModel</li> <li>ImportlibTreeModel</li> <li>FrameInfoModel</li> <li>PythonObjectTreeModel</li> <li>RegexMatchesModel</li> <li>LogRecordModel</li> <li>MappingModel</li> <li>XmlModel</li> </ul> </li> <li>Qt types<ul> <li>ActionsModel</li> <li>ShortcutsModel</li> <li>StorageInfoModel</li> <li>ModelIndexModel</li> </ul> </li> <li>External types<ul> <li>FsSpecModel</li> <li>AttrsModel</li> <li>AttrsFieldsModel</li> <li>PydanticModel</li> <li>PydanticFieldsModel</li> <li>GitPythonTreeModel</li> <li>LxmlModel</li> <li>LazyLxmlModel</li> </ul> </li> </ul> </li> <li>Proxy models<ul> <li>Proxifier</li> <li>Slice proxies<ul> <li>SliceIdentityProxyModel</li> <li>SliceFilterProxyModel</li> <li>SliceChangeFlagsProxyModel</li> <li>SliceChangeIconSizeProxyModel</li> <li>SliceCheckableProxyModel</li> <li>SliceCheckableTreeProxyModel</li> <li>SliceColorValuesProxyModel</li> <li>SliceHighlightCurrentProxyModel</li> <li>SliceValueTransformationProxyModel</li> <li>SliceAppearanceProxyModel</li> <li>SliceDisplayTextProxyModel</li> <li>SliceMapRoleProxyModel</li> </ul> </li> <li>Reshape / Styling proxies<ul> <li>MeltProxyModel</li> <li>FlattenTreeProxyModel</li> <li>ColumnJoinerProxyModel</li> <li>ColumnOrderProxyModel</li> <li>TableToListProxyModel</li> <li>AppearanceProxyModel</li> <li>ChangeHeadersProxymodel</li> </ul> </li> <li>Sort / Filter proxies<ul> <li>FuzzyFilterProxyModel</li> <li>SubsetFilterProxyModel</li> <li>MultiColumnFilterProxyModel</li> <li>RangeFilterProxyModel</li> <li>ValueFilterProxyModel</li> <li>PredicateFilterProxyModel</li> </ul> </li> <li>Pandas proxies<ul> <li>PandasStringColumnFilterProxyModel</li> <li>PandasEvalFilterProxyModel</li> <li>PandasMultiStringColumnFilterProxyModel</li> </ul> </li> <li>Misc proxies<ul> <li>HighlightMouseProxyModel</li> </ul> </li> </ul> </li> <li>Tools<ul> <li>ProxyMapper</li> <li>LinkedSelectionModel</li> </ul> </li> <li>Widgets<ul> <li>AstViewer</li> <li>CommandPalette</li> <li>AnnotatedScrollBar</li> <li>ConfigWidget</li> <li>FilterHeader</li> <li>RegexEditor</li> <li>ScrollAreaTocWidget</li> </ul> </li> <li>Layouts<ul> <li>MultiLineLayout</li> </ul> </li> <li>Delegates<ul> <li>EditorDelegate</li> <li>Editors</li> </ul> </li> <li>Animating</li> <li>Validators</li> <li>Pandas</li> </ul> </li> <li>API Reference<ul> <li>bluetooth</li> <li>charts</li> <li>constants</li> <li>core</li> <li>custom_delegates</li> <li>custom_models</li> <li>custom_validators</li> <li>custom_widgets</li> <li>designer</li> <li>gui</li> <li>location</li> <li>multimedia</li> <li>multimediawidgets</li> <li>network</li> <li>openglwidgets</li> <li>pdf</li> <li>pdfwidgets</li> <li>positioning</li> <li>printsupport</li> <li>qml</li> <li>qthelp</li> <li>quick</li> <li>quickwidgets</li> <li>scintilla</li> <li>scxml</li> <li>spatialaudio</li> <li>statemachine</li> <li>svg</li> <li>svgwidgets</li> <li>syntaxhighlighters</li> <li>test</li> <li>texttospeech</li> <li>webchannel</li> <li>webenginecore</li> <li>webenginewidgets</li> <li>widgets</li> </ul> </li> <li>Changelog</li> </ul>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#v1520-2023-07-05","title":"v1.52.0 (2023-07-05)","text":""},{"location":"changelog.html#feat","title":"Feat","text":"<ul> <li>SliceChangeIconSizeProxyModel: also support QColors and QPixmaps for DecorationRole</li> <li>Slicing support for Image</li> <li>add VerticalLabel</li> <li>WebEnginePage: add insert stylesheet method</li> <li>add TwoListsSelectionWidget</li> <li>add mkdocs gen-pages plugin</li> <li>SliceIdentityProxymodel: also support tuples for indexer_contains</li> <li>add SliceMapRoleProxymodel</li> <li>AbstractItemModel: allow setting parent for index_from_key / get_index_key</li> <li>FileDevice: add some permission getters</li> <li>AbstractItemModel: fetch_more kwarg for iter_tree (no need for prefetch_tree anymore)</li> <li>LinkedSelectionModel: also map selection</li> <li>add SliceDisplayTextProxyModel</li> <li>add BrushEdit</li> <li>IconProvider: for_color supports QBrush</li> <li>ItemSelectionModel: add contains method</li> <li>Proxifer: add map_from / map_to methods</li> <li>add LinkedSelectionModel</li> <li>ProxyMapper: allow more than 2 models for mapping</li> </ul>"},{"location":"changelog.html#fix","title":"Fix","text":"<ul> <li>SliceChangeIconSizeProxyModel: use proper val for caching</li> <li>TableToListProxyModel: fix Verticalheader labelling</li> <li>Allow icons from all charmaps</li> <li>SliceEdit: fix step=None</li> </ul>"},{"location":"changelog.html#v1510-2023-07-01","title":"v1.51.0 (2023-07-01)","text":""},{"location":"changelog.html#feat_1","title":"Feat","text":"<ul> <li>WidgetsDetailsModel: use checkstate role for bool values</li> <li>add PolarsTableModel</li> <li>add GitPythonTreeModel</li> <li>ImportLibTreeModel: add DistributionRole</li> <li>add spatialaudio module</li> <li>SubClassTreeModel: support UnionTypes</li> <li>proxifier: add highlight_current method</li> <li>AnnotatedScrollBar: support horizontal</li> <li>StandardItem: add is_checked / toggle_checkstate methods</li> <li>Properties for IntegerValidator / TextLengthValidator</li> <li>ClassTreeModel: add caching</li> <li>add ChangeHeadersProxyModel</li> </ul>"},{"location":"changelog.html#fix_1","title":"Fix","text":"<ul> <li>MetaObject: fix offsets for MetaProps etc</li> <li>SliceIdentityProxyModel: row, column indexing instead of column, row</li> <li>use checkstate enum instead of True/False</li> </ul>"},{"location":"changelog.html#v1500-2023-06-27","title":"v1.50.0 (2023-06-27)","text":""},{"location":"changelog.html#feat_2","title":"Feat","text":"<ul> <li>TreeView: add expand_all method</li> <li>FilterHeader: use NumFilterWidget for numerical columns</li> <li>MultiColumnFilterProxyModel: add support for callables</li> <li>add NumFilterWidget</li> <li>add ColumnOrderProxyModel</li> <li>Proxifier: add melt method</li> <li>add ProxyMapper</li> <li>add MeltProxyModel</li> <li>PandasIndexFilterProxyModel: add endswith filter mode</li> <li>DateTimeAxis: add some datetime-related methods</li> <li>Object: add bind_property classmethod</li> <li>add FunctionValidator</li> <li>VariantDelegate: add validator kwarg</li> <li>add StringListLineEdit</li> <li>LineEdit: add append kwarg</li> <li>ProgressBarDelegate: support choosing a custom role</li> <li>add RangeEdit and SliceEdit</li> <li>Proxifier: add change_icon_size</li> <li>StandardItemModel: set ItemPrototype to our own subclass</li> <li>StandardItemModel: add from_dict method</li> <li>XmlModel: also support lxml.etree</li> <li>slicing support for Grid/GraphicsGridlayout</li> <li>Object: types.UnionType support for Object.find_child</li> <li>PathValidator: add mode setting (any, file, folder)</li> <li>LineEdit: allow explicitely overriding empty handling for validators</li> <li>Proxifier: change set_read_only to a more general change_flags method</li> </ul>"},{"location":"changelog.html#fix_2","title":"Fix","text":"<ul> <li>Widget: fix map_to/from(\"window\", ...)</li> <li>EnumFlagWidget: fix behaviour for non-power-of-2 flags</li> <li>EventLoop: typo in execute()</li> <li>TableToListProxyModel: emit headerDataChanged signal on header change</li> <li>EnumFlagWidget: filter None to workaround Qt flag bug</li> <li>DoubleValidator: correct default for set_range decimals kwarg</li> </ul>"},{"location":"changelog.html#v1490-2023-06-21","title":"v1.49.0 (2023-06-21)","text":""},{"location":"changelog.html#feat_3","title":"Feat","text":"<ul> <li>ParentClassTreeModel: add mro mode</li> <li>add SliceCheckableTreeProxyModel</li> <li>ScrollAreaTocWidget: show windowIcon</li> <li>ScrollAreaTocWidget: make header property user-settable</li> <li>Proxifier: add to_list method</li> <li>PandasTableWithHeaderModel: make multiindex_separator a property</li> <li>new fast PandasProxyModels</li> <li>BaseIPythonWidget: make completion_mode a property</li> <li>add some multimedia classes</li> <li>add SliceChangeIconSizeProxyModel</li> <li>SortFilterProxyModel: allow re.Pattern for setFilterRegularExpression</li> <li>search box for settings</li> <li>MultiColumnFilterProxyModel: support fuzzy and normal (startswith) mode.</li> <li>MultilineLayout: support different layout types</li> <li>add MultiColumnFilterProxyModel</li> <li>add FilterHeader (replaces FilterContainer)</li> <li>TableToListProxyModel: map headerData and allow setting custom header</li> <li>debugging: add proxy_comparer helper</li> <li>allow negative indexes for Layout.getitem</li> <li>ScrollAreaTocWidget: make highlight_font a property</li> <li>qml: add a helper to quickly expose all widgets to qml</li> <li>PropertyAnimation: add get_property_value method</li> <li>Widget: add map_to/from(\"window\")</li> <li>AbstractAnimation: add toggle_direction method</li> <li>ColorValuesProxyModel: allow setting low/high color</li> <li>helpers: get_color_percentage works with arbitrary number of tuple elements now</li> <li>Layout: allow LayoutItems for add()</li> <li>add SliceFilterProxyModel</li> <li>add HighlightMouseProxyModel</li> <li>TabWidget: allow slicing</li> <li>HeaderView: allow indexing by section name</li> <li>slicing support for TabBar</li> <li>Layout: add get_items method</li> <li>Proxifier: add add_column method</li> <li>Slicing support for StackedWidget</li> <li>HeaderView: add HeaderWrapper</li> <li>PushButton: add set_action method</li> <li>add AutoresizingTextEdit</li> <li>add ConfigWidget</li> <li>Slice proxying</li> <li>add include_column kwarg to get_index_key</li> <li>add ColorValuesProxyModel</li> <li>add ModelIndexModel</li> <li>add DisplayMode setting to FlattenedTreeProxyModel</li> <li>Proxifier: add flatten method</li> <li>Object: add properties_set_to context manager</li> <li>AbstractItemModel: add get_breadcrumbs_path</li> <li>ImportlibTreeModel: show markers</li> <li>TreeModel: support TreeItem subclasses</li> <li>AbstractItemModel: depth kwarg for prefetch_tree</li> <li>Treeview: add set_expanded method (which also takes Iterables)</li> <li>AbstractItemModel: depth kwarg for search/iter_tree</li> <li>Object: add signal_blocked method</li> <li>AbstractItemModel: add get_child_indexes method</li> <li>VariantDelegate: make setting EditRole optional</li> <li>ToolBox: add slicing support</li> <li>GraphicsLayout: add slicing support</li> <li>AnimationGroup: add targetObject method</li> <li>ListWidget: add slice support</li> <li>ToolBar: add getitem including slicing</li> <li>BaseListDelegator: support slicing</li> <li>support slicing for layouts</li> <li>Splitter: allow slicing</li> <li>add listdelegators module</li> <li>TextCursor: add join_previous kwarg for edit_block</li> <li>TextCursor: add contains method</li> <li>add FrameInfoModel class</li> <li>add show method</li> <li>add TextAnimation class</li> <li>PygmentsHighlighter: make style a property</li> <li>add EmojiIconEngine class</li> <li>Locale: add get_flag_unicode method</li> <li>Locale: add get_country method</li> <li>Fx: infer type for transition methods</li> <li>Font: add as_qt kwarg for mono()</li> <li>ListMixin: support slices for getitem</li> <li>add SubClassTreeModel / ParentClassTreeModel</li> <li>add PydanticFieldsModel</li> <li>add PydanticModel</li> <li>Settings: allow nesting settings objects</li> <li>add AstViewer</li> <li>add two models for attrs</li> <li>fx: add transition_to/from methods</li> <li>add OptionsValidator</li> <li>RegularExpression: add to_py_pattern method</li> <li>VariantAnimation: add append_reversed method</li> <li>add MultiComboBox</li> <li>AbstractItemModel: add get_index_key / key_from_index methods</li> <li>Layout: groupbox for ContextLayouts</li> <li>MetaObject: also accept snake case for get_property etc</li> <li>MetaProperty: add get_python_type method</li> <li>SequentialAnimationGroup: add reverse / reversed / append_reversed methods</li> <li>Stalker: work with non-prettyqt widgets</li> <li>QObjectDialog: widget click sets focus on HierarchyView</li> <li>add ZoomAnimation</li> <li>VariantAnimation: add reverse/reversed methods</li> <li>fx delegate for widgets</li> <li>Widget: add data kwarg to add_action</li> <li>add delay kwarg to play_animation</li> <li>ScrollBar: add can_scroll method</li> <li>add some ScXml classes</li> <li>HighlightCurrentProxyModel: make highlight color configurable</li> <li>HighlightCurrentProxyModel: add \"row\" as mode option</li> <li>add XmlModel</li> <li>ScrollArea: make get_visible_widgets work with base QWidgets</li> <li>add AstModel class</li> <li>TextCursor: allow tuples for select_text</li> <li>TextCursor: allow tuples for set_position</li> <li>TabWidget: add create_tab_preview method</li> <li>add two models for displaying dataclasses</li> <li>WidgetPropertiesModel: add Stored column</li> <li>Locale: add get_c_locale method</li> <li>Object: only_nonempty kwarg for get_properties</li> <li>MetaObject: extended get_properties filter functionality</li> <li>MetaObject: added get_all_super_classes method</li> <li>Object: allow predicates for find_children property selector</li> <li>RegularExpression: allow re.Pattern in ctor</li> </ul>"},{"location":"changelog.html#fix_3","title":"Fix","text":"<ul> <li>ColumnItemModel: prevent namespace issues</li> <li>TextDocument: method somehow landed in wrong class</li> <li>MultiColumnFilterProxyModel: fix non-fuzzy str search</li> <li>AstModel: correct has_children check</li> <li>Object: fix check in get_properties</li> <li>ScrollbarTocWidget: highlight rows when shown</li> <li>RenderLinkDelegate: correctly clip text</li> <li>ClassTreeModel: catch another exception</li> <li>KeySequenceEdit: return correct type</li> <li>AnimationGroup: fix slicing support</li> <li>DebugMode: hide frame when menu closed</li> <li>CycleWidget: fixed scroll issue</li> <li>FilterContainer: editor width fix</li> <li>FilterContainer: pass object_name to parent in init</li> <li>AbstractItemView: fix incorrect type in size_hint_for_column</li> <li>Spanslider: qt6 related stuff</li> </ul>"},{"location":"changelog.html#v1480-2023-06-08","title":"v1.48.0 (2023-06-08)","text":""},{"location":"changelog.html#feat_4","title":"Feat","text":"<ul> <li>make ProcessEnvironment a MutableMapping</li> <li>TableView: add margin kwarg to get_visible_section_span / resize_visible_columns_to_contents</li> <li>AbstractItemView: add get_visible_section_span</li> <li>AbstractTableModel: add to_dataframe method</li> <li>AbstractItemModel: add prefetch_tree method</li> <li>checks module</li> <li>Windows contextmenu stuff</li> </ul>"},{"location":"changelog.html#fix_4","title":"Fix","text":"<ul> <li>show_root: properly reset before hiding</li> </ul>"},{"location":"changelog.html#v1470-2023-06-07","title":"v1.47.0 (2023-06-07)","text":""},{"location":"changelog.html#feat_5","title":"Feat","text":"<ul> <li>AbstractScrollArea: add add_scrollbar_widget method</li> <li>add AnnotatedScrollBar</li> <li>TextEditSelecter: add getitem</li> <li>PlainTextEdit: add get_visible_line_span</li> <li>add MonotonicListValidator</li> <li>add some pandas widgets</li> <li>add PrintSupport classes</li> <li>PlainTextEdit: add get_pixel_height method</li> <li>quick shot for a PreviewScrollBar</li> <li>Add ScrollAreaTableOfContentsWidget</li> <li>AbstractItemModel: add max_results kwarg for search_tree</li> <li>Object: property selector kwarg for find_children</li> <li>Widget: add map_to and child_at methods</li> <li>ScrollArea: always use Widget for viewport, add get_visible_widgets</li> <li>return handles for AbstractItemView.sync_with</li> <li>AbstractItemView: always use our subclassed ItemSelectionModel</li> <li>make settings a proper MutableMapping</li> <li>Layout: add item_at method</li> <li>add SectionAutoSpanEventFilter</li> <li>AbstractItemView: add sync_with method</li> <li>add OrientedTableView</li> <li>add AutoSizeColumnsEventFilter</li> <li>allow setting eventfilters by name</li> <li>TextDocument: add get_pixel_height method</li> <li>TableView: add resize_visible_columns_to_contents method</li> <li>getattr for core, gui, widgets modules</li> <li>AbstractProxyModel: add get_source_model method</li> <li>TableView: add get_visible_section_span</li> <li>Pixmap: add save_to_file method</li> <li>VariantDelegate: support numpy integers</li> <li>add DataFrameEvalFilterProxyModel</li> <li>TableView: add auto_span method</li> <li>max colcount by default for resizeColumnsToContents</li> <li>DataFrameViewer: use numpy for span detection</li> <li>MetaObject: add forward_signals kwarg to copy</li> <li>MetaObject: also allow copy for widgets which need orientation</li> <li>bit NumPy support for VariantDelegate</li> <li>add HighlightCurrentProxyModel</li> <li>GuiApplication: add find_window method</li> <li>add UrlLineEdit</li> <li>allow str for RegularExpressionValidator ctor</li> <li>TreeView: add show_root method</li> <li>start with pandas stuff</li> <li>AbstractItemView: add get_size_hint_for_column</li> <li>AbstractProxyModel: add remove method</li> <li>add ReadOnlyProxyModel</li> <li>MessageBox: add get_button method</li> <li>LineEdit: allow QRegularExpressions for set_validator</li> <li>Validator: add strict mode</li> <li>AbstractItemModel: add iter_tree / search_tree methods</li> <li>AbstractItemView: add iter_tree method</li> <li>Stalker: add some event signals</li> <li>add TextLength/AlphaNumericValidator</li> <li>add Hex/QssValidator</li> <li>allow showing different content for show_tooltips</li> <li>add Int/Float LineEdits</li> <li>allow setting validator by str</li> <li>TextEditSelecter: add highlight_matches method</li> <li>MenuBar for QObjectDetailsDialog</li> <li>SidebarWidget: allow Actions for add_action</li> <li>prep some Actions for Mainwindow</li> <li>FilterContainer: add set_filter_mode method</li> <li>Stalker: make log_level a prop</li> <li>add ColumnJoinerProxyModel</li> <li>fuzzy filter support in \"regular\" SortFilterProxyModel</li> <li>add AppearanceProxyModel class</li> <li>add SpanTableView</li> <li>add BackingStore</li> <li>add RectFEdit</li> <li>AbstractItemView: add get_proxies method</li> <li>TableView: add is_cell_visible method</li> <li>HeaderView: add is_in_visual_range method</li> <li>show widget borders in debug mode</li> <li>KeyCombination: add add method</li> <li>AbstractItemModel: add is_checkstate_column method</li> <li>add some proxy models</li> <li>ensure_visible kwarg for (Plain)TextEdit</li> <li>colors: quick access to setting color roles</li> <li>TextEditSelecter: end_pos kwarg for goto_line</li> <li>add qobjectsdetailsdialog</li> <li>AbstractItemView: extend set_model</li> <li>MetaObject: add connect_signals method</li> <li>MetaObject: add only_notifiers kwarg for get_signals</li> <li>TextBrowser: add get_source_type method</li> <li>CommandPalette: add for_path method</li> <li>automatic registration for delegates</li> <li>Widget: add \"border\" as set_layout option</li> <li>move all proxy stuff to Proxifier delegate</li> <li>Widget: allow setting margin in ctor</li> <li>AbstractItemView: make role a kwarg for current_data/selected_data</li> <li>add FlattenedTreeProxyModel</li> <li>add StretchButtonToolBar</li> <li>add CrossFadeWidget</li> <li>add AdjustingBoxLayoutDockWidget</li> </ul>"},{"location":"changelog.html#fix_5","title":"Fix","text":"<ul> <li>Settings: raise KeyError for non-existing keys</li> <li>fix create_char</li> <li>add missing import</li> <li>typo</li> <li>DataFrameEvalFilterProxyModel: always get the root sourcemodel</li> <li>ColorDialog: fix replacing QColorShower stuff</li> <li>SidebarWidget: correct signature for add_action</li> <li>WidgetHierarchyModel: only return direct children</li> <li>HeaderView: fix toggle-vis context menu</li> <li>add workaround for missing parent() methods when using PyQt</li> <li>QAbstractProxyModel is part of QtCore</li> <li>dont mask QObject.parent()</li> <li>StackedWidget: fix fade animation</li> <li>WidgetHierarchyModel: missed to adjust columnCount for extra column</li> </ul>"},{"location":"changelog.html#v1460-2023-05-24","title":"v1.46.0 (2023-05-24)","text":""},{"location":"changelog.html#feat_6","title":"Feat","text":"<ul> <li>add ActionGrid</li> <li>StandardItem: add get/set_text_alignment</li> <li>HeaderView: add get_section_for_label method</li> <li>add DefaultDropdownAction</li> <li>add PredicateFilterProxyModel</li> <li>MetaObject: only_writable kwarg for get_properties</li> <li>add ValueTransformationProxyModel</li> <li>add SubsetFilterProxyModel</li> <li>AbstractItemView: add get/set_state</li> <li>add LineEditFilterContainer</li> <li>add TableToListProxyModel</li> <li>AbstractItemModel: add get_model method</li> <li>add WidgetHierarchyModel</li> <li>add MultiLineLayout</li> <li>AbstractItemView: add get_drop_indicator_position</li> <li>Layout: add clear method</li> <li>Font: add scaled method</li> <li>SignalMapper: add delitem method</li> <li>add ListViewGridResizeEventFilter</li> </ul>"},{"location":"changelog.html#fix_6","title":"Fix","text":"<ul> <li>GraphicsScene: fix _get_viewer_zoom without viewer</li> <li>WaitingSpinner: correctly position on parent</li> </ul>"},{"location":"changelog.html#v1450-2023-05-23","title":"v1.45.0 (2023-05-23)","text":""},{"location":"changelog.html#feat_7","title":"Feat","text":"<ul> <li>ShortcutsModel: parent widget column</li> </ul>"},{"location":"changelog.html#fix_7","title":"Fix","text":"<ul> <li>AbstractItemModel: fix transpose for PySide6</li> <li>MetaType: correctly cast in get_name</li> </ul>"},{"location":"changelog.html#v1440-2023-05-23","title":"v1.44.0 (2023-05-23)","text":""},{"location":"changelog.html#feat_8","title":"Feat","text":"<ul> <li>Widget: add highlight_widget method</li> <li>add FocusWidget</li> <li>add MappingModel</li> <li>DateTime: add from_seconds method</li> <li>add LogRecordModel</li> <li>MetaMethod: add get_parameter_types method</li> <li>MetaObject: add filter_shit kwarg for get_methods</li> <li>animation option for Cursor.set_pos</li> <li>add CursorMoveAnimation</li> <li>Cursor: add click method</li> <li>add SliderMoveToMouseClickEventFilter</li> <li>add test module</li> <li>PopupInfo: add icon support</li> <li>EventCatcher: allow str for eventtselection</li> <li>Object: add copy method</li> <li>for_palette method for Gradient</li> <li>RubberBand: add track widget method</li> <li>add WidgetDelegate</li> <li>Object: add copy method</li> <li>proper LocaleEdit</li> <li>Locale: add get_all_locales method</li> <li>add PainterPath.add</li> <li>Widget: support tuples for position_on</li> <li>Cursor: add set_pos method</li> <li>Object: add start_callback_timer</li> <li>add OrientedScrollArea</li> <li>add OverlayBorder</li> <li>add ScientificValidators</li> <li>rich_text param for set_tooltip</li> <li>DateTimeEdit: add set_to_today method</li> <li>add FuzzyCompleter</li> <li>List interface for ListMixin</li> <li>AbstractItemModel: two more context managers</li> <li>ShortcutsModel</li> <li>set ObjectNames in debugmode</li> <li>add OpenGLwidget</li> <li>WidgetsDetailsModel: automatically populate table based on most common ancestor.</li> <li>add WidgetsDetailsModel</li> <li>AbstractItemModel: make proxies easily available</li> <li>ToolBar: add show_tooltips method</li> <li>first shot for a WidgetPropertiesModel</li> <li>Date: add from_string method</li> <li>add EnumFlagWidget</li> <li>Application: add process_events method</li> <li>MetaProperty: add get_enumerator_type</li> <li>add debugmode eventFilter (WIP)</li> <li>EventCatcher: allow callable for do_filter</li> <li>Object: add connect_events method</li> <li>EventCatcher eventfilter</li> <li>Elision functionality for Label</li> <li>add JsonValidator / PythonCodeValidator / ColorValidator classes</li> </ul>"},{"location":"changelog.html#fix_8","title":"Fix","text":"<ul> <li>Cursor: correct subclass check in set_pos</li> <li>EnumComboBox/EnumFlagWidget: only declare one user prop</li> <li>correctly init Url when arg is PathLike</li> </ul>"},{"location":"changelog.html#v1430-2023-05-18","title":"v1.43.0 (2023-05-18)","text":""},{"location":"changelog.html#feat_9","title":"Feat","text":"<ul> <li>Widget: x/y_offset kwargs for position_on</li> <li>add FlashEffect</li> <li>auto kwarg suppport for Slot decorator</li> <li>MetaMethod: add get_normalized_signature method</li> <li>Widget: add show_tooltip method</li> <li>Widget: tool_tip kwarg for add_action</li> <li>ToolBar: add get_widgets method</li> <li>allow str in PropertyAnimation ctor</li> </ul>"},{"location":"changelog.html#fix_9","title":"Fix","text":"<ul> <li>missed some testing shit</li> <li>correctly map in map_to_global</li> </ul>"},{"location":"changelog.html#v1420-2023-05-17","title":"v1.42.0 (2023-05-17)","text":""},{"location":"changelog.html#feat_10","title":"Feat","text":"<ul> <li>coreApplication: add in_main_thread method</li> <li>MetaObject: add get_user_property method</li> <li>MetaType: add get_meta_object / get_meta_object_for_type</li> <li>add SignalList</li> <li>MetaProperty: add get_notify_signal / get_enumerator</li> <li>Object: keep track of eventfilters</li> <li>GuiApplication: add get_keyboard_modifiers / query_keyboard_modifiers</li> <li>Application: add widgets_at method</li> <li>first quick shot for a WidgetEditor</li> <li>allow initializing SizePolicy with strings</li> <li>NativeEventFilter for windows global hotkeys</li> <li>KeySequence: add get_key_bindings</li> <li>KeySequence: cast in getitem</li> <li>KeySequenceEdit: add get_key_combinations / get_finishing_key_combinations</li> <li>add some more prop-edit widgets</li> <li>Drag: return DropActionStr for main_loop</li> <li>animation feature for StackedWidget</li> <li>Frame: add set_frame_rect</li> <li>MetaType: get_type -&gt; get_type_name and new get_type</li> <li>JsonDocument: add format method</li> <li>embed quickref in RegexEditorWidget</li> <li>IconBrowser: use FuzzyFilter proxy</li> <li>GroupBox: add get_alignment method</li> <li>FormLayout: add get/set_label_alignment, get/set_form_alignment</li> <li>Widget: scale_ratio param for center_on</li> <li>context manager stuff for layouts</li> <li>widgets: add HBoxLayout / VBoxLayout classes</li> <li>ActionsModel: Usage count column</li> <li>add AsyncRunner</li> <li>add IPython stuff</li> <li>some helper stuff for ThreadPool</li> <li>Dir: add get_temp_path method</li> <li>merge widget center methods + rect support for mapToGlobal (map_to_global)</li> <li>FileIconProvider: custom_directory_icons methods</li> <li>prep some QtDesigner stuff</li> <li>Widget: add center_on_parent method</li> <li>some methods for StyleOptionViewItem</li> <li>Action: add usage counter and get_type</li> <li>SortFilterProxyModel: add invalidated signal</li> </ul>"},{"location":"changelog.html#fix_10","title":"Fix","text":"<ul> <li>proper mono font for all platforms</li> <li>ElidedLabel: qt6 fix</li> <li>set_data for StandardItem / ListWidgetItem with wrong arg order</li> <li>CommandPalette: widgets from other sources can have parent as an attribute</li> <li>QtWidgets: fix binding of old methods</li> <li>ButtonDelegate: pass parent via kwarg</li> <li>HtmlItemDelegate: properly draw with icon</li> <li>AbstractItemView: fix some setfocus stuff</li> <li>FuzzyFilterModel: do not check html string for filtering</li> </ul>"},{"location":"changelog.html#v1410-2023-05-10","title":"v1.41.0 (2023-05-10)","text":""},{"location":"changelog.html#feat_11","title":"Feat","text":"<ul> <li>ColumnItemModel: add set_columns method</li> <li>add FuzzyFilterModel</li> <li>add commandpalette</li> <li>SortFilterProxyModel: add setFixedFilterList method</li> <li>SortFilterProxyModel: override lessThan to allow sorting for more types</li> <li>AbstractItemView: add some methods to deal with ItemSelectionModel</li> <li>Widget: add set_focus method</li> <li>add ActionsModel class</li> <li>StandardItem: add set_data method</li> <li>IconDelegate: make item role configurable</li> <li>Completer: added path_updated signal</li> <li>Completer: add set_completion_role method</li> <li>SortFilterProxyModel: add set_filter_role method</li> </ul>"},{"location":"changelog.html#fix_11","title":"Fix","text":"<ul> <li>ColumnItemModel: fix get_sort_value</li> <li>ListWidgetItem: fix set_data method</li> <li>IconDelegate: qt6 porting issue</li> <li>HtmlItemDelegate: qt6 porting bug</li> <li>RenderLinkDelegate: Qt6 fixes</li> </ul>"},{"location":"changelog.html#v1400-2023-05-09","title":"v1.40.0 (2023-05-09)","text":""},{"location":"changelog.html#feat_12","title":"Feat","text":"<ul> <li>Painter: add draw_star, draw_diamond methods</li> <li>PolygonF: scale kwarg for create_star_diamond</li> <li>Constraints column for ImportLib model</li> <li>format for different classes</li> <li>Widget: add set_graphics_effect method</li> <li>core: add LoggingCategory class</li> <li>network: add NetworkReply class</li> <li>add MaterialIconStyle class</li> <li>InputMethod: add query_focus_object method</li> <li>add GoogleCompleter</li> <li>add HTMLItemDelegate</li> </ul>"},{"location":"changelog.html#fix_12","title":"Fix","text":"<ul> <li>NestedItem: set parent in append_child</li> </ul>"},{"location":"changelog.html#v1391-2023-05-08","title":"v1.39.1 (2023-05-08)","text":""},{"location":"changelog.html#fix_13","title":"Fix","text":"<ul> <li>model cleanup</li> </ul>"},{"location":"changelog.html#v1390-2023-05-08","title":"v1.39.0 (2023-05-08)","text":""},{"location":"changelog.html#feat_13","title":"Feat","text":"<ul> <li>re-work JsonModel</li> <li>add update_check</li> <li>some MessageBox work</li> <li>SlideAnimation: add start/end_value kwargs for ctor</li> <li>Widget: add play_animation method</li> <li>PlainTextEdit: extend set_syntaxhighlighter</li> <li>add CycleWidget</li> <li>add SelectedWordHighlighter class</li> <li>PlainTextEdit: better way to color focused line</li> <li>bluetooth: cover some more classes</li> <li>ItemSelectionModel: add set_current_index method</li> <li>scroll_to_item for Table/TreeWidget</li> <li>AbstractScrollArea: add set_viewport_margins method</li> <li>set_size for SvgGenerator and QuickItem</li> </ul>"},{"location":"changelog.html#fix_14","title":"Fix","text":"<ul> <li>Scintilla: fix highlight_current_line</li> <li>Color: also inherit transparency when QColor for ctor</li> <li>typed signals seem to cast to Qt types</li> </ul>"},{"location":"changelog.html#v1381-2023-05-07","title":"v1.38.1 (2023-05-07)","text":""},{"location":"changelog.html#fix_15","title":"Fix","text":"<ul> <li>Chart: used wrong call for setting style</li> </ul>"},{"location":"changelog.html#v1380-2023-05-07","title":"v1.38.0 (2023-05-07)","text":""},{"location":"changelog.html#feat_14","title":"Feat","text":"<ul> <li>TreeWidget: add find_items method</li> <li>recursive and case_sensitive kwarg for ListWidget/StandardItemModel.find_items</li> <li>HeaderView: add set_sort_indicator method</li> <li>VersionNumber: add from_string method</li> <li>auto adjust Chart and PygmentsHighlighter colors to Palette</li> <li>Palette: allow disabling highlight_inactive</li> </ul>"},{"location":"changelog.html#fix_16","title":"Fix","text":"<ul> <li>HierarchicalHeaderView: oops</li> </ul>"},{"location":"changelog.html#v1371-2023-05-06","title":"v1.37.1 (2023-05-06)","text":""},{"location":"changelog.html#fix_17","title":"Fix","text":"<ul> <li>check for None-model in set_sorting_enabled</li> </ul>"},{"location":"changelog.html#v1370-2023-05-06","title":"v1.37.0 (2023-05-06)","text":""},{"location":"changelog.html#feat_15","title":"Feat","text":"<ul> <li>HeaderView: some kwargs for set_resize_mode, add set_sections_movable method</li> <li>TreeView/TableView: add set_sorting_enabled method</li> <li>add HierarchicalHeaderView class</li> <li>SortFilterProxyModel: add get_sort_order method</li> <li>Wizard: add set_custom_button method</li> <li>make some basic types pattern matching compatible</li> <li>SortFilterProxyModel: more pythonic sort() kwargs</li> </ul>"},{"location":"changelog.html#v1360-2023-05-05","title":"v1.36.0 (2023-05-05)","text":""},{"location":"changelog.html#feat_16","title":"Feat","text":"<ul> <li>MimeDatabase: add some new methods</li> <li>SizePolicy: add get_transposed method</li> <li>enable dark mode detection on linux</li> <li>DataWidgetMapper: add setitem, getitem, delitem</li> <li>GuiApplication: add set_progress_value method</li> <li>quick: add SGNode class</li> <li>Window: add some more methods</li> <li>qml: add QmlError / QmlExpression classes</li> <li>qml: add QmlProperty class</li> <li>TreeWidgetItem: add recursive option for get_children</li> <li>TreeWidget: add get_items method</li> </ul>"},{"location":"changelog.html#fix_18","title":"Fix","text":"<ul> <li>Completer: fixed is_case_sensitive method</li> <li>correctly inherit for QuickView</li> </ul>"},{"location":"changelog.html#v1350-2023-05-05","title":"v1.35.0 (2023-05-05)","text":""},{"location":"changelog.html#feat_17","title":"Feat","text":"<ul> <li>Shortcut: allow str for ctor</li> <li>Shortcut: add set_key(s) methods</li> <li>add add_shortcut methods for Window and Widget classes</li> <li>gui: add SurfaceFormat class</li> <li>Locale: add some methods</li> <li>Locale: add get_formatted_data_size</li> </ul>"},{"location":"changelog.html#v1340-2023-05-04","title":"v1.34.0 (2023-05-04)","text":""},{"location":"changelog.html#feat_18","title":"Feat","text":"<ul> <li>qml: add QmlPropertyMap class</li> <li>FsSpecModel: filter columns depending on protocol</li> <li>GraphicsView: add zooming option</li> <li>add AccordionWidget</li> </ul>"},{"location":"changelog.html#v1331-2023-05-04","title":"v1.33.1 (2023-05-04)","text":""},{"location":"changelog.html#fix_19","title":"Fix","text":"<ul> <li>test fixes</li> </ul>"},{"location":"changelog.html#v1330-2023-05-04","title":"v1.33.0 (2023-05-04)","text":""},{"location":"changelog.html#feat_19","title":"Feat","text":"<ul> <li>GraphicsScene: add grid functionality</li> <li>add DebouncedSignal class</li> <li>TabWidget: allow QWidget for remove_tab</li> <li>AbstractNativeEventFilter: add install method</li> <li>add taskbaritem module</li> <li>HoverIconEventFilter: add pressed state</li> <li>VariantDelegate: deal with enums</li> <li>add EnumComboBox</li> <li>Completer: add set_strings method</li> <li>add FsSpecCompleter</li> <li>Widget: add get_win_id() method</li> <li>TtextTableCell: add get_first/last_cursor_position methods</li> <li>LineEdit: add set_completer method</li> <li>Completer: add get_completions() method</li> <li>FsSpecModel: add get_file_content method</li> <li>KeySequence: overload for to_shortcut_str</li> <li>LineEdit: add tab_pressed signal</li> <li>qthelp: add HelpFilterSettingsWidget class</li> <li>Shortcut: add get_keys method</li> <li>TreeWidgetItem: add collapse / expand / get_text_alignment methods</li> <li>TableWidget: allow QModelIndex for closePersistentEditor / isPersistentEditorOpen</li> <li>TableWidgetItem: add set_editable method</li> <li>TreeWidget: add some more methods</li> <li>gui: add TextBlockFormat class</li> <li>TreeWidgetItem: add some methods</li> <li>GraphicsView: add get_view_rect / get_pixel_size</li> <li>GraphicsView: add add_item / remove_item methods</li> <li>GraphicsView: set our own scene subclass by default</li> <li>MimeData: add to_dict and clone methods</li> <li>add VariantDelegate class</li> </ul>"},{"location":"changelog.html#fix_20","title":"Fix","text":"<ul> <li>TabBar: qt6 regression (PointF instead of Point)</li> <li>ColumnItemModel: reset model in set_root_item</li> <li>AwesomeFileIconProvider: missed a case for icon()</li> <li>AudioDevice: fix get_channel_config</li> <li>Charts: dont use axisX / axisY (missing in qt6)</li> <li>ButtonDelegate: only apply to correct column</li> <li>RegexInput: catch exception when regex invalid</li> </ul>"},{"location":"changelog.html#v1320-2023-04-30","title":"v1.32.0 (2023-04-30)","text":""},{"location":"changelog.html#feat_20","title":"Feat","text":"<ul> <li>custom_widgets: add RegexLineEdit class</li> <li>PlainTextEdit: emit text with value_changed signal</li> <li>gui: add TextTable, TextTableCell and TextTableFormat classes</li> <li>ItemEditorFactor: add create_extended method</li> <li>QuickItem: add getitem and contains methods</li> <li>custom_widgets: add ColorComboBox</li> <li>ColorDialog: add get/set_custom_colors methods</li> <li>printsupport: add Printer class</li> <li>GuiApplication: add palette_changed signal</li> <li>add QtPrintSupport to qt module</li> <li>Splitter: override createHandle so that our own subclass is used.</li> <li>SplitterHandle: add clicked signal</li> <li>Palette: add is_dark method</li> <li>add quickwidgets module</li> </ul>"},{"location":"changelog.html#fix_21","title":"Fix","text":"<ul> <li>FontChooserButton: add missing button icon</li> </ul>"},{"location":"changelog.html#v1310-2023-04-29","title":"v1.31.0 (2023-04-29)","text":""},{"location":"changelog.html#feat_21","title":"Feat","text":"<ul> <li>FsSpecModel: allow None for setRootPath</li> <li>core: add SharedMemory class</li> <li>multimedia: add AudioDevice class</li> <li>add delitem for UrlQuery, Timeline and StackedWidget</li> <li>QuickRenderControl: add edit_frame context manager</li> <li>PdfWriter: add get/set_version methods</li> <li>PagedPaintDevice: add get_page_ranges and get_page_layout methods</li> <li>Date: add replace method</li> <li>FileDevice: add get_permissions method</li> <li>gui: add PageRanges class</li> <li>PainterPath: add get_simplified and to_reversed methods</li> <li>Layout: allow None for set_margin</li> <li>GridLayout: add alignment kwarg to add method</li> <li>add KeyCombinationEdit class</li> <li>KeySequenceEdit: allow QKeySequence for set_value</li> <li>ToolBox: add some kwargs to add_widget</li> <li>Splitter: some kwargs for add_widget method</li> <li>Slider: better mouseclick behaviour</li> <li>Date: add add_days, add_months, add_years and get_current_date methods</li> <li>Time: add add_msecs, add_secs and get_current_time methods</li> <li>Label: add clicked signal</li> </ul>"},{"location":"changelog.html#fix_22","title":"Fix","text":"<ul> <li>FsSpecModel: fix root glob call</li> <li>StarDelegate: qt6 fix</li> <li>Timeline: Qt6 fixes</li> <li>PlainTextEdit: wheelEvent fix</li> </ul>"},{"location":"changelog.html#v1300-2023-04-28","title":"v1.30.0 (2023-04-28)","text":""},{"location":"changelog.html#feat_22","title":"Feat","text":"<ul> <li>AbstractScrollArea: add set_scrollbar_smooth method</li> <li>add SmoothScrollBar class</li> <li>AbstractScrollArea: add scroll_by_pixels method</li> <li>Cursor: add fake_mouse_move classmethod</li> <li>Widget: add set_style method</li> </ul>"},{"location":"changelog.html#fix_23","title":"Fix","text":"<ul> <li>PlainTextEdit: correctly propagate wheelEvent</li> </ul>"},{"location":"changelog.html#v1290-2023-04-27","title":"v1.29.0 (2023-04-27)","text":""},{"location":"changelog.html#feat_23","title":"Feat","text":"<ul> <li>CameraDevice: add get_video_formats method</li> <li>re-introduce multimedia module</li> <li>FsSpecModel: add get_protocol_path method</li> <li>Widget: allow int index for insertAction</li> <li>HeaderView: add get_default_alignment and get_orientation methods</li> <li>HeaderView: add get_resize_mode method</li> <li>ColorDialog: some new methods</li> <li>pdf: add PdfSearchModel class</li> </ul>"},{"location":"changelog.html#fix_24","title":"Fix","text":"<ul> <li>Widget: support several QOpenGlWidgets for get_image</li> </ul>"},{"location":"changelog.html#v1281-2023-04-26","title":"v1.28.1 (2023-04-26)","text":""},{"location":"changelog.html#fix_25","title":"Fix","text":"<ul> <li>weird PySide6 issue with Enum val as default kwarg (PyQt works fine..)</li> </ul>"},{"location":"changelog.html#v1280-2023-04-26","title":"v1.28.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_24","title":"Feat","text":"<ul> <li>Drag: add set_drag_cursor and main_loop methods</li> </ul>"},{"location":"changelog.html#v1270-2023-04-26","title":"v1.27.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_25","title":"Feat","text":"<ul> <li>filesystemmodel mixin for FsSpecModel</li> </ul>"},{"location":"changelog.html#fix_26","title":"Fix","text":"<ul> <li>FsSpecModel: always return correct type for permissions()</li> </ul>"},{"location":"changelog.html#v1260-2023-04-26","title":"v1.26.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_26","title":"Feat","text":"<ul> <li>MimeData: add get_urls method</li> <li>MimeData: add set_urls method</li> <li>pdf: add PdfBookmarkModel class</li> <li>AbstractItemModel: add get_role_names method</li> </ul>"},{"location":"changelog.html#fix_27","title":"Fix","text":"<ul> <li>change SORT_ROLE and NAME_ROLE values to not conflict with FileSystemModel enums</li> <li>MimeData: getitem and setitem seem to cause issues?</li> </ul>"},{"location":"changelog.html#v1250-2023-04-26","title":"v1.25.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_27","title":"Feat","text":"<ul> <li>custom_models: add fsspec model</li> <li>FileSystemModel: add get_permissions method</li> </ul>"},{"location":"changelog.html#v1240-2023-04-26","title":"v1.24.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_28","title":"Feat","text":"<ul> <li>Layout: add add_widget method</li> <li>Widget: allow None values for set_min/max_size</li> <li>TextStream: add get/set_number_flags methods</li> </ul>"},{"location":"changelog.html#v1230-2023-04-25","title":"v1.23.0 (2023-04-25)","text":""},{"location":"changelog.html#feat_29","title":"Feat","text":"<ul> <li>core: Add ModelRoleData class</li> <li>add ImportlibTreeModel</li> </ul>"},{"location":"changelog.html#fix_28","title":"Fix","text":"<ul> <li>correctly behaving listmixin</li> </ul>"},{"location":"changelog.html#v1222-2023-04-25","title":"v1.22.2 (2023-04-25)","text":""},{"location":"changelog.html#fix_29","title":"Fix","text":"<ul> <li>NestedModel: add default value for index kwargs</li> <li>correctly behaving RegexMatchesModel</li> </ul>"},{"location":"changelog.html#v1221-2023-04-25","title":"v1.22.1 (2023-04-25)","text":""},{"location":"changelog.html#fix_30","title":"Fix","text":"<ul> <li>NestedModel: rowCount fix</li> </ul>"},{"location":"changelog.html#v1220-2023-04-25","title":"v1.22.0 (2023-04-25)","text":""},{"location":"changelog.html#feat_30","title":"Feat","text":"<ul> <li>LayoutItem: add get_expanding_directions method</li> <li>LayoutItem: add get_control_types method</li> <li>GraphicsLayoutItem: add get/set_size_policy and bool methods</li> </ul>"},{"location":"changelog.html#fix_31","title":"Fix","text":"<ul> <li>Pixmap: fix create_char method</li> </ul>"},{"location":"changelog.html#v1210-2023-04-23","title":"v1.21.0 (2023-04-23)","text":""},{"location":"changelog.html#feat_31","title":"Feat","text":"<ul> <li>NetworkRequest: support some attributes from newer qt versions</li> <li>NetworkRequest: add set_attribute(s) method</li> <li>Object: add set_properties method</li> <li>MimeData: add for_file method</li> <li>TextDocument: add get_bytes method</li> <li>MetaMethod: add get_parameters/get_return_types methods</li> <li>MetaObject: add get_class_info method</li> <li>MetaObject: add get_super_class method</li> <li>UrlQuery: add getitem and setitem methods</li> <li>TextDocumentWriter: add serialize_document method</li> <li>Widget: add toggle_maximized method</li> </ul>"},{"location":"changelog.html#fix_32","title":"Fix","text":"<ul> <li>correct isinstance check for to_json</li> <li>TextDocumentWriter: fix serialization</li> <li>SingleApplication: TextStream.setCodec gone in qt6</li> </ul>"},{"location":"changelog.html#v1200-2023-04-22","title":"v1.20.0 (2023-04-22)","text":""},{"location":"changelog.html#feat_32","title":"Feat","text":"<ul> <li>add some methods for Thread/ThreadPool 81795</li> <li>Pixmap: get rid of flags param for from_image 8fbbf</li> <li>bluetooth: add BluetoothDeviceInfo class 80482</li> </ul>"},{"location":"changelog.html#fix_33","title":"Fix","text":"<ul> <li>BluetoothDeviceDiscoveryAgent: correctly set flags for start_discovery 4f53b</li> </ul>"},{"location":"changelog.html#v1190-2023-04-22","title":"v1.19.0 (2023-04-22)","text":""},{"location":"changelog.html#feat_33","title":"Feat","text":"<ul> <li>MenuBar: add get/set_corner_widget methods a9fc0</li> <li>PdfView: add set_file method c5b79</li> </ul>"},{"location":"changelog.html#v1180-2023-04-21","title":"v1.18.0 (2023-04-21)","text":""},{"location":"changelog.html#feat_34","title":"Feat","text":"<ul> <li>ScrollerMetrics: add get_scroll_metrics method + bit dict interface 838d6</li> <li>WebEngineSettings: more dict interface 903d7</li> <li>GuiApplication: add set_badge_number method 57e9b</li> </ul>"},{"location":"changelog.html#fix_34","title":"Fix","text":"<ul> <li>make sure to correctly set parent for actions added to menus 8ea43</li> <li>HeaderView: context menu fix c71c2</li> </ul>"},{"location":"changelog.html#v1170-2023-04-21","title":"v1.17.0 (2023-04-21)","text":""},{"location":"changelog.html#feat_35","title":"Feat","text":"<ul> <li>Image: add to_ndarray method ea556</li> <li>Widget: add get_cursor method 4dc77</li> <li>Image: add convert_to_format method f36f1</li> </ul>"},{"location":"changelog.html#fix_35","title":"Fix","text":"<ul> <li>ImportlibDistributionModel: avoid duplicates in requirements d27d2</li> </ul>"},{"location":"changelog.html#v1160-2023-04-21","title":"v1.16.0 (2023-04-21)","text":""},{"location":"changelog.html#feat_36","title":"Feat","text":"<ul> <li>AbstractItemView: add get_horizontal/vertical/scroll_mode methods bf664</li> <li>AbstractItemView: added model_changed signal 79b24</li> <li>Scroller: add grabbed_gesture method c3041</li> <li>add pdf and pdfwidgets modules de15b</li> <li>MetaProperty: add get_meta_type method 9242c</li> <li>GeoPolygon: add get_hole_path / get_perimeter methods 8910a</li> </ul>"},{"location":"changelog.html#v1151-2023-04-20","title":"v1.15.1 (2023-04-20)","text":""},{"location":"changelog.html#fix_36","title":"Fix","text":"<ul> <li>IconBrowser: correctly build charmap dict 49e18</li> <li>GraphicsEllipseItem: fix get_rect type issue (got broken with qt6) 69653</li> </ul>"},{"location":"changelog.html#v1150-2023-04-20","title":"v1.15.0 (2023-04-20)","text":""},{"location":"changelog.html#feat_37","title":"Feat","text":"<ul> <li>Object: add get_properties method 2fafb</li> <li>Image: add from/to_pil methods eb342</li> <li>Object: add get_dynamic_properties method 7c82b</li> <li>PropertyAnimation: allow passing the qt property method directly for apply_to 1ca12</li> </ul>"},{"location":"changelog.html#fix_37","title":"Fix","text":"<ul> <li>MetaObject: offsets were off by 1 cecd7</li> </ul>"},{"location":"changelog.html#v1143-2023-04-20","title":"v1.14.3 (2023-04-20)","text":""},{"location":"changelog.html#fix_38","title":"Fix","text":"<ul> <li>another release fix :) af959</li> </ul>"},{"location":"changelog.html#v1142-2023-04-20","title":"v1.14.2 (2023-04-20)","text":""},{"location":"changelog.html#fix_39","title":"Fix","text":"<ul> <li>another release fix bdc10</li> </ul>"},{"location":"changelog.html#v1141-2023-04-20","title":"v1.14.1 (2023-04-20)","text":""},{"location":"changelog.html#fix_40","title":"Fix","text":"<ul> <li>release pipeline fix bcfd8</li> </ul>"},{"location":"changelog.html#v1140-2023-04-20","title":"v1.14.0 (2023-04-20)","text":""},{"location":"changelog.html#feat_38","title":"Feat","text":"<ul> <li>WaitingSpinner: register some attributes as Qt Properties d3b25</li> <li>TableWidget: also support indexes for openPersistentEditor d450d</li> </ul>"},{"location":"changelog.html#fix_41","title":"Fix","text":"<ul> <li>RadioDelegate: property doesnt accept bytes (anymore) 25a96</li> <li>Painter: fix draw_rounded_rect method bb883</li> </ul>"},{"location":"changelog.html#v1131-2023-04-20","title":"v1.13.1 (2023-04-20)","text":""},{"location":"changelog.html#fix_42","title":"Fix","text":"<ul> <li>fix tests... 58c78</li> </ul>"},{"location":"changelog.html#v1130-2023-04-20","title":"v1.13.0 (2023-04-20)","text":""},{"location":"changelog.html#feat_39","title":"Feat","text":"<ul> <li>ButtonDelegate: no need anymore to open persistent editors 78984</li> <li>AbstractTableModel: add getitem method to return indexes 0b9be</li> </ul>"},{"location":"changelog.html#v1121-2023-04-19","title":"v1.12.1 (2023-04-19)","text":""},{"location":"changelog.html#fix_43","title":"Fix","text":"<ul> <li>Widget: missing string cast for set_stylesheet e536b</li> </ul>"},{"location":"changelog.html#v1120-2023-04-19","title":"v1.12.0 (2023-04-19)","text":""},{"location":"changelog.html#feat_40","title":"Feat","text":"<ul> <li>ColumnItemModel: inherit some stuff from ListMixin</li> </ul>"},{"location":"changelog.html#v1110-2023-04-18","title":"v1.11.0 (2023-04-18)","text":""},{"location":"changelog.html#feat_41","title":"Feat","text":"<ul> <li>LineEdit: allow some special values for set_input_mask</li> <li>Locale: add get_measurement_system</li> </ul>"},{"location":"changelog.html#fix_44","title":"Fix","text":"<ul> <li>ColumntItemModel: always return correct rowCount</li> </ul>"},{"location":"changelog.html#v1100-2023-04-18","title":"v1.10.0 (2023-04-18)","text":""},{"location":"changelog.html#feat_42","title":"Feat","text":"<ul> <li>ColumnItemModel: methods for setting data</li> <li>TreeItem: add iter method</li> </ul>"},{"location":"changelog.html#fix_45","title":"Fix","text":"<ul> <li>AttributeModel: checkstate instead of text for is_attribute</li> <li>UndoStack: raise KeyError instead of returning it</li> </ul>"},{"location":"changelog.html#v192-2023-04-17","title":"v1.9.2 (2023-04-17)","text":""},{"location":"changelog.html#fix_46","title":"Fix","text":"<ul> <li>StorageInfoModel: move some stuff to baseclass</li> </ul>"},{"location":"changelog.html#v191-2023-04-17","title":"v1.9.1 (2023-04-17)","text":""},{"location":"changelog.html#fix_47","title":"Fix","text":"<ul> <li>ColumnItemModel: fix wrong value for non-listed roles in data()</li> <li>ObjectBrowser: re-add DEFAULT_ATTR_DETAILS and inspected_node_is_visible</li> </ul>"},{"location":"changelog.html#v190-2023-04-17","title":"v1.9.0 (2023-04-17)","text":""},{"location":"changelog.html#feat_43","title":"Feat","text":"<ul> <li>custom_widgets: add FileTree class</li> <li>AbstractItemModel: add update_all method</li> </ul>"},{"location":"changelog.html#fix_48","title":"Fix","text":"<ul> <li>IconDelegate: fix exception when QIcon is passed</li> </ul>"},{"location":"changelog.html#v181-2023-04-17","title":"v1.8.1 (2023-04-17)","text":""},{"location":"changelog.html#fix_49","title":"Fix","text":"<ul> <li>user_data fix</li> </ul>"},{"location":"changelog.html#v180-2023-04-17","title":"v1.8.0 (2023-04-17)","text":""},{"location":"changelog.html#feat_44","title":"Feat","text":"<ul> <li>ColumnItemModel: add user_data to ColumnItems</li> </ul>"},{"location":"changelog.html#v171-2023-04-17","title":"v1.7.1 (2023-04-17)","text":""},{"location":"changelog.html#fix_50","title":"Fix","text":"<ul> <li>fix docs generation</li> </ul>"},{"location":"changelog.html#v170-2023-04-17","title":"v1.7.0 (2023-04-17)","text":""},{"location":"changelog.html#feat_45","title":"Feat","text":"<ul> <li>ColumnItemModel: add support for sort value and tooltips</li> <li>Widget: add grab_mouse_events / grab_keyboard_events context managers</li> <li>Painter: add some convenience methods</li> </ul>"},{"location":"changelog.html#v160-2023-04-16","title":"v1.6.0 (2023-04-16)","text":""},{"location":"changelog.html#feat_46","title":"Feat","text":"<ul> <li>Widget: add delete_children method</li> <li>Url: add is_special_url and _has_explicit_scheme methods</li> <li>Application: add set_style method</li> <li>Scrollbar: add scroll_to_next/previous_row methods</li> <li>Uuid: add to_string method</li> </ul>"},{"location":"changelog.html#fix_51","title":"Fix","text":"<ul> <li>Application: correct icon colors for new Qt built in dark mode (when using Fusion theme)</li> <li>ChartView: correct cursor shape for dragging movements</li> </ul>"},{"location":"changelog.html#v150-2023-04-13","title":"v1.5.0 (2023-04-13)","text":""},{"location":"changelog.html#feat_47","title":"Feat","text":"<ul> <li>TimeZone: add get_time_spec method</li> <li>TextDocument: add get/set_meta_information methods</li> <li>ListWidgetItem: add set_text_alignment method</li> <li>DirIterator: add get_file_path / get_file_info methods</li> </ul>"},{"location":"changelog.html#fix_52","title":"Fix","text":"<ul> <li>FileSystemModel: fix yield_child_indexes method</li> </ul>"},{"location":"changelog.html#v142-2023-04-12","title":"v1.4.2 (2023-04-12)","text":""},{"location":"changelog.html#fix_53","title":"Fix","text":"<ul> <li>only run tests on linux for now</li> </ul>"},{"location":"changelog.html#v141-2023-04-12","title":"v1.4.1 (2023-04-12)","text":""},{"location":"changelog.html#fix_54","title":"Fix","text":"<ul> <li>remove codecov from deps</li> </ul>"},{"location":"changelog.html#v140-2023-04-12","title":"v1.4.0 (2023-04-12)","text":""},{"location":"changelog.html#feat_48","title":"Feat","text":"<ul> <li>Color: add convert_to method</li> <li>Color: add get_spec method</li> <li>core: add KeyCombination class</li> <li>re-add qthelp module</li> </ul>"},{"location":"changelog.html#fix_55","title":"Fix","text":"<ul> <li>fixed Color.as_qt error with Qt6.5</li> </ul>"},{"location":"changelog.html#v130-2023-04-11","title":"v1.3.0 (2023-04-11)","text":""},{"location":"changelog.html#feat_49","title":"Feat","text":"<ul> <li>add some set_origin methods</li> <li>add some set_transform methods</li> <li>Brush: add set_style method</li> </ul>"},{"location":"changelog.html#v120-2023-04-11","title":"v1.2.0 (2023-04-11)","text":""},{"location":"changelog.html#feat_50","title":"Feat","text":"<ul> <li>re-enable texttospeech module</li> <li>gui: add AbstractFileIconProvider class</li> <li>core: add MetaType class</li> <li>gui: add StyleHints class</li> </ul>"},{"location":"changelog.html#fix_56","title":"Fix","text":"<ul> <li>correct filtering for Dir.get_entry_info_list</li> <li>Dir: explicitely use kwargs for entryList/entryInfoList calls</li> <li>prevent namespace collisions with builtin locale package</li> </ul>"},{"location":"changelog.html#v112-2023-04-10","title":"v1.1.2 (2023-04-10)","text":""},{"location":"changelog.html#fix_57","title":"Fix","text":"<ul> <li>always pass sys.argv to QCoreApplication etc</li> </ul>"},{"location":"changelog.html#v111-2023-04-10","title":"v1.1.1 (2023-04-10)","text":""},{"location":"changelog.html#fix_58","title":"Fix","text":"<ul> <li>Qt6 fixes for Dialog classes</li> </ul>"},{"location":"changelog.html#v110-2023-04-10","title":"v1.1.0 (2023-04-10)","text":""},{"location":"changelog.html#feat_51","title":"Feat","text":"<ul> <li>Image: add as_bytes method</li> </ul>"},{"location":"changelog.html#v100-2023-04-07","title":"v1.0.0 (2023-04-07)","text":""},{"location":"changelog.html#feat_52","title":"Feat","text":"<ul> <li>MultimediaWidgets for Qt6</li> <li>get rid of mro fuckery</li> <li>re-add location module</li> </ul>"},{"location":"changelog.html#fix_59","title":"Fix","text":"<ul> <li>remove title property for widgets</li> </ul>"},{"location":"api/bluetooth.html","title":"bluetooth module","text":""},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothAddress","title":"<code>BluetoothAddress</code>","text":"<p>         Bases: <code>QtBluetooth.QBluetoothAddress</code></p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothaddress.BluetoothAddress.__bool__","title":"<code>__bool__()</code>","text":"<p>True when address is not null.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>def __bool__(self):\n\"\"\"True when address is not null.\"\"\"\nreturn not self.isNull()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothDeviceDiscoveryAgent","title":"<code>BluetoothDeviceDiscoveryAgent(*args, **kwargs)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothDeviceDiscoveryAgent</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.deviceDiscovered.connect(self._on_device_discovered)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error type if available.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error type if available.\"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.get_supported_discovery_methods","title":"<code>get_supported_discovery_methods() -&gt; list[DiscoveryMethodStr]</code>","text":"<p>Return a list of supported discovery methods.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def get_supported_discovery_methods(self) -&gt; list[DiscoveryMethodStr]:\n\"\"\"Return a list of supported discovery methods.\"\"\"\nreturn DISCOVERY_METHODS.get_list(self.supportedDiscoveryMethods())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.start_discovery","title":"<code>start_discovery(classic: bool = True, low_energy: bool = True)</code>","text":"<p>Start discovery of bluetooth devices.</p> <p>Parameters:</p> Name Type Description Default <code>classic</code> <code>bool</code> <p>use classic method</p> <code>True</code> <code>low_energy</code> <code>bool</code> <p>use BLE mode</p> <code>True</code> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def start_discovery(self, classic: bool = True, low_energy: bool = True):\n\"\"\"Start discovery of bluetooth devices.\n    Arguments:\n        classic: use classic method\n        low_energy: use BLE mode\n    \"\"\"\nflag = bluetooth.QBluetoothDeviceDiscoveryAgent.NoMethod\nif classic:\nflag |= bluetooth.QBluetoothDeviceDiscoveryAgent.ClassicMethod\nif low_energy:\nflag |= bluetooth.QBluetoothDeviceDiscoveryAgent.LowEnergyMethod\nself.start(flag)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothDeviceInfo","title":"<code>BluetoothDeviceInfo</code>","text":"<p>         Bases: <code>bluetooth.QBluetoothDeviceInfo</code></p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.__bool__","title":"<code>__bool__()</code>","text":"<p>Return true if device info is valid.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def __bool__(self):\n\"\"\"Return true if device info is valid.\"\"\"\nreturn self.isValid()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_address","title":"<code>get_address() -&gt; bluetooth.BluetoothAddress</code>","text":"<p>Get bluetooth address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Get bluetooth address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_device_ids","title":"<code>get_device_ids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"<p>Get list of device ids.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_device_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of device ids.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.deviceIds()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_major_device_class","title":"<code>get_major_device_class() -&gt; MajorDeviceClassStr</code>","text":"<p>Get major device class.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_major_device_class(self) -&gt; MajorDeviceClassStr:\n\"\"\"Get major device class.\"\"\"\nreturn MAJOR_DEVICE_CLASS.inverse[self.majorDeviceClass()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_minor_device_class","title":"<code>get_minor_device_class() -&gt; str</code>","text":"<p>Get minor device class.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_minor_device_class(self) -&gt; str:\n\"\"\"Get minor device class.\"\"\"\nmajor = self.get_major_device_class()\nmatch major:\ncase \"computer\":\nflag = mod.MinorComputerClass(self.minorDeviceClass())\nreturn MINOR_COMPUTER_CLASS.inverse[flag]\ncase \"phone\":\nflag = mod.MinorPhoneClass(self.minorDeviceClass())\nreturn MINOR_PHONE_CLASS.inverse[flag]\ncase \"network\":\nflag = mod.MinorNetworkClass(self.minorDeviceClass())\nreturn MINOR_NETWORK_CLASS.inverse[flag]\ncase \"audio_video\":\nflag = mod.MinorAudioVideoClass(self.minorDeviceClass())\nreturn MINOR_AUDIO_VIDEO_CLASS.inverse[flag]\ncase \"peripheral\":\nflag = mod.MinorPeripheralClass(self.minorDeviceClass())\nreturn MINOR_PERIPHERAL_CLASS.inverse[flag]\ncase \"imaging\":\nflag = mod.MinorImagingClass(self.minorDeviceClass())\nreturn MINOR_IMAGING_CLASS.inverse[flag]\ncase \"wearable\":\nflag = mod.MinorWearableClass(self.minorDeviceClass())\nreturn MINOR_WEARABLE_CLASS.inverse[flag]\ncase \"toy\":\nflag = mod.MinorToyClass(self.minorDeviceClass())\nreturn MINOR_TOY_CLASS.inverse[flag]\ncase \"health\":\nflag = mod.MinorHealthClass(self.minorDeviceClass())\nreturn MINOR_HEALTH_CLASS.inverse[flag]\ncase \"uncategorized\":\nreturn \"misc\"\ncase _:\nraise ValueError(major)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_classes","title":"<code>get_service_classes() -&gt; list[ServiceClassStr]</code>","text":"<p>Get list of service classes.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_classes(self) -&gt; list[ServiceClassStr]:\n\"\"\"Get list of service classes.\"\"\"\nreturn SERVICE_CLASS.get_list(self.serviceClasses())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_ids","title":"<code>get_service_ids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"<p>Get list of service ids.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of service ids.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceIds()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_uuids","title":"<code>get_service_uuids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"<p>Get list of service UUIDs.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_uuids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of service UUIDs.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceUuids()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothHostInfo","title":"<code>BluetoothHostInfo</code>","text":"<p>         Bases: <code>bluetooth.QBluetoothHostInfo</code></p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothhostinfo.BluetoothHostInfo.get_address","title":"<code>get_address() -&gt; bluetooth.BluetoothAddress</code>","text":"<p>Get address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>def get_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Get address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothhostinfo.BluetoothHostInfo.set_address","title":"<code>set_address(address: bluetooth.QBluetoothAddress | int | str)</code>","text":"<p>Set address to given value.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>def set_address(self, address: bluetooth.QBluetoothAddress | int | str):\n\"\"\"Set address to given value.\"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nself.setAddress(address)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothLocalDevice","title":"<code>BluetoothLocalDevice</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothLocalDevice</code></p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.__bool__","title":"<code>__bool__()</code>","text":"<p>Return True when local device is valid.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def __bool__(self):\n\"\"\"Return True when local device is valid.\"\"\"\nreturn self.isValid()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.for_all_devices","title":"<code>for_all_devices() -&gt; list[bluetooth.BluetoothHostInfo]</code>  <code>classmethod</code>","text":"<p>Get host info for all devices.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>@classmethod\ndef for_all_devices(cls) -&gt; list[bluetooth.BluetoothHostInfo]:\n\"\"\"Get host info for all devices.\"\"\"\nreturn [bluetooth.BluetoothHostInfo(i) for i in cls.allDevices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_connected_devices","title":"<code>get_connected_devices() -&gt; list[bluetooth.BluetoothAddress]</code>","text":"<p>Get addresses for connected devices.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_connected_devices(self) -&gt; list[bluetooth.BluetoothAddress]:\n\"\"\"Get addresses for connected devices.\"\"\"\nreturn [bluetooth.BluetoothAddress(i) for i in self.connectedDevices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error code.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_host_mode","title":"<code>get_host_mode() -&gt; HostModeStr</code>","text":"<p>Return host mode.</p> <p>Returns:</p> Type Description <code>HostModeStr</code> <p>host mode</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_host_mode(self) -&gt; HostModeStr:\n\"\"\"Return host mode.\n    Returns:\n        host mode\n    \"\"\"\nreturn HOST_MODE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_pairing_status","title":"<code>get_pairing_status(address: bluetooth.QBluetoothAddress | int | str) -&gt; PairingStr</code>","text":"<p>Return pairing status.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>bluetooth.QBluetoothAddress | int | str</code> <p>bluetooth address</p> required <p>Returns:</p> Type Description <code>PairingStr</code> <p>pairing status</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_pairing_status(\nself, address: bluetooth.QBluetoothAddress | int | str\n) -&gt; PairingStr:\n\"\"\"Return pairing status.\n    Arguments:\n        address: bluetooth address\n    Returns:\n        pairing status\n    \"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nreturn PAIRING.inverse[self.pairingStatus(address)]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.request_pairing","title":"<code>request_pairing(address: bluetooth.QBluetoothAddress | int | str, pairing: PairingStr | Pairing)</code>","text":"<p>Request a pairing to given bluetooth address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def request_pairing(\nself,\naddress: bluetooth.QBluetoothAddress | int | str,\npairing: PairingStr | Pairing,\n):\n\"\"\"Request a pairing to given bluetooth address.\"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nself.requestPairing(address, PAIRING.get_enum_value(pairing))\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.set_host_mode","title":"<code>set_host_mode(mode: HostModeStr | HostMode)</code>","text":"<p>Set host mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>HostModeStr | HostMode</code> <p>host mode to use</p> required Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def set_host_mode(self, mode: HostModeStr | HostMode):\n\"\"\"Set host mode.\n    Args:\n        mode: host mode to use\n    \"\"\"\nself.setGridStyle(HOST_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothServer","title":"<code>BluetoothServer(protocol: bluetooth.bluetoothserviceinfo.ProtocolStr | bluetooth.QBluetoothServiceInfo.Protocol, parent: core.QObject | None = None)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothServer</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| bluetooth.QBluetoothServiceInfo.Protocol,\nparent: core.QObject | None = None,\n):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL.get_enum_value(protocol)\nsuper().__init__(protocol, parent)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error code.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_server_address","title":"<code>get_server_address() -&gt; bluetooth.BluetoothAddress</code>","text":"<p>Return bluetooth server address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_server_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Return bluetooth server address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.serverAddress())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_server_type","title":"<code>get_server_type() -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr</code>","text":"<p>Get server type.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_server_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\n\"\"\"Get server type.\"\"\"\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.serverType()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothServiceDiscoveryAgent","title":"<code>BluetoothServiceDiscoveryAgent</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothServiceDiscoveryAgent</code></p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.get_discovered_services","title":"<code>get_discovered_services() -&gt; list[bluetooth.BluetoothServiceInfo]</code>","text":"<p>Get list of discovered devices.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def get_discovered_services(self) -&gt; list[bluetooth.BluetoothServiceInfo]:\n\"\"\"Get list of discovered devices.\"\"\"\nreturn [bluetooth.BluetoothServiceInfo(i) for i in self.discoveredServices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error code.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.set_remote_address","title":"<code>set_remote_address(address: str | int | bluetooth.QBluetoothAddress) -&gt; bool</code>","text":"<p>Set remote address.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str | int | bluetooth.QBluetoothAddress</code> <p>address of the remote</p> required Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def set_remote_address(\nself, address: str | int | bluetooth.QBluetoothAddress\n) -&gt; bool:\n\"\"\"Set remote address.\n    Arguments:\n        address: address of the remote\n    \"\"\"\naddress = bluetooth.BluetoothAddress(address)\nreturn self.setRemoteAddress(address)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.start_discovery","title":"<code>start_discovery(full: bool = False)</code>","text":"<p>Start bluetooth service discovery.</p> <p>Parameters:</p> Name Type Description Default <code>full</code> <code>bool</code> <p>full discovery instead of minimal discovery.</p> <code>False</code> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def start_discovery(self, full: bool = False):\n\"\"\"Start bluetooth service discovery.\n    Arguments:\n        full: full discovery instead of minimal discovery.\n    \"\"\"\nif full:\nflag = bluetooth.QBluetoothServiceDiscoveryAgent.FullDiscovery\nelse:\nflag = bluetooth.QBluetoothServiceDiscoveryAgent.MinimalDiscovery\nself.start(flag)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothServiceInfo","title":"<code>BluetoothServiceInfo</code>","text":"<p>         Bases: <code>QtBluetooth.QBluetoothServiceInfo</code>, <code>MutableMapping</code></p> <p>BluetoothServiceInfo class.</p> <p>Also implements MutableMapping interface, can be used as a dicionary.</p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__iter__","title":"<code>__iter__()</code>","text":"<p>Iter the info attributes.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __iter__(self):\n\"\"\"Iter the info attributes.\"\"\"\nreturn iter(self.attributes())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__setitem__","title":"<code>__setitem__(index: str | int | AttributeId, value: str | int | AttributeId)</code>","text":"<p>Set attribute.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __setitem__(self, index: str | int | AttributeId, value):\n\"\"\"Set attribute.\"\"\"\nmatch index:\ncase int():\nflag = index\ncase str():\nflag = ATTRIBUTE_IDS[index].value\ncase AttributeId():\nflag = index.value\nreturn self.setAttribute(flag, value)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothUuid","title":"<code>BluetoothUuid</code>","text":"<p>         Bases: <code>core.UuidMixin</code>, <code>QtBluetooth.QBluetoothUuid</code></p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.characteristic_to_string","title":"<code>characteristic_to_string(characteristic: CharacteristicTypeStr | md) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given characteristic.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef characteristic_to_string(cls, characteristic: CharacteristicTypeStr | md) -&gt; str:\n\"\"\"Return string representation for given characteristic.\"\"\"\nreturn cls.characteristicToString(\nCHARACTERISTIC_TYPES.get_enum_value(characteristic)\n)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.descriptor_to_string","title":"<code>descriptor_to_string(descriptor: DescriptorTypeStr | dt) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given descriptor.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef descriptor_to_string(cls, descriptor: DescriptorTypeStr | dt) -&gt; str:\n\"\"\"Return string representation for given descriptor.\"\"\"\nreturn cls.descriptorToString(DESCRIPTOR_TYPE.get_enum_value(descriptor))\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.protocol_to_string","title":"<code>protocol_to_string(protocol: ProtocolUuidstr | pu) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given protocol.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef protocol_to_string(cls, protocol: ProtocolUuidstr | pu) -&gt; str:\n\"\"\"Return string representation for given protocol.\"\"\"\nreturn cls.protocolToString(PROTOCOL_UUID.get_enum_value(protocol))\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.service_class_to_string","title":"<code>service_class_to_string(service_class: DescriptorTypeStr | su) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given service class.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef service_class_to_string(cls, service_class: DescriptorTypeStr | su) -&gt; str:\n\"\"\"Return string representation for given service class.\"\"\"\nreturn cls.serviceClassToString(SERVICE_CLASS_UUID.get_enum_value(service_class))\n</code></pre>"},{"location":"api/charts.html","title":"charts module","text":""},{"location":"api/charts.html#prettyqt.charts.AbstractAxisMixin","title":"<code>AbstractAxisMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_alignment","title":"<code>get_alignment() -&gt; constants.SideStr | None</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.SideStr | None</code> <p>alignment</p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_alignment(self) -&gt; constants.SideStr | None:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nalignment = self.alignment()\nif alignment == constants.ALIGN_NONE:\nreturn None\nreturn constants.SIDES.inverse[alignment]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr | None</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr | None</code> <p>orientation</p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr | None:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\norientation = self.orientation()\nif orientation == constants.ORIENTATION_NONE:\nreturn None\nreturn constants.ORIENTATION.inverse[orientation]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.AbstractBarSeriesMixin","title":"<code>AbstractBarSeriesMixin</code>","text":"<p>         Bases: <code>charts.AbstractSeriesMixin</code></p>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.__delitem__","title":"<code>__delitem__(item: int | charts.QBarSet)</code>","text":"<p>Implements <code>del series[0]</code>.</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def __delitem__(self, item: int | charts.QBarSet):\n\"\"\"Implements `del series[0]`.\"\"\"\nif isinstance(item, int):\nbarsets = self.barSets()\nitem = barsets[item]\nself.remove(item)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.__getitem__","title":"<code>__getitem__(index: int) -&gt; charts.QBarSet</code>","text":"<p>Implements <code>barset = series[1]</code>.</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def __getitem__(self, index: int) -&gt; charts.QBarSet:\n\"\"\"Implements `barset = series[1]`.\"\"\"\nbarsets = self.barSets()\nreturn barsets[index]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.get_labels_position","title":"<code>get_labels_position() -&gt; LabelsPositionStr</code>","text":"<p>Return current labels position.</p> <p>Returns:</p> Type Description <code>LabelsPositionStr</code> <p>Labels position</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n    Returns:\n        Labels position\n    \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.set_labels_position","title":"<code>set_labels_position(position: LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition)</code>","text":"<p>Set the labels position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition</code> <p>Labels position</p> required Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def set_labels_position(\nself, position: LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition\n):\n\"\"\"Set the labels position.\n    Args:\n        position: Labels position\n    \"\"\"\nself.setLabelsPosition(LABELS_POSITIONS.get_enum_value(position))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BarCategoryAxis","title":"<code>BarCategoryAxis</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code>, <code>charts.QBarCategoryAxis</code></p>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__add__","title":"<code>__add__(other: str) -&gt; BarCategoryAxis</code>","text":"<p>Append another category to axis.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __add__(self, other: str) -&gt; BarCategoryAxis:\n\"\"\"Append another category to axis.\"\"\"\nself.append(other)\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"<p>Remove category.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __delitem__(self, index: str):\n\"\"\"Remove category.\"\"\"\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__getitem__","title":"<code>__getitem__(index: int) -&gt; str</code>","text":"<p>Return category for given index.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __getitem__(self, index: int) -&gt; str:\n\"\"\"Return category for given index.\"\"\"\nreturn self.categories()[index]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"<p>Set category at given index to value.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __setitem__(self, index: str, value: str):\n\"\"\"Set category at given index to value.\"\"\"\nself.replace(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BarSet","title":"<code>BarSet</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QBarSet</code></p>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"<p>Delete bar at given index.</p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __delitem__(self, index: int):\n\"\"\"Delete bar at given index.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__getitem__","title":"<code>__getitem__(index: int) -&gt; float</code>","text":"<p>Get bar from given index.</p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __getitem__(self, index: int) -&gt; float:\n\"\"\"Get bar from given index.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nreturn self.at(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__setitem__","title":"<code>__setitem__(index: int, value: float)</code>","text":"<p>Set bar at given index to value.</p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __setitem__(self, index: int, value: float):\n\"\"\"Set bar at given index to value.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.replace(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BoxSet","title":"<code>BoxSet</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QBoxSet</code></p>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.__getitem__","title":"<code>__getitem__(index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions) -&gt; float</code>","text":"<p>Returns the value of the box-and-whiskers item specified by index.</p> Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __getitem__(\nself, index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions\n) -&gt; float:\n\"\"\"Returns the value of the box-and-whiskers item specified by index.\"\"\"\nif type(index) is not int:\nindex = VALUE_POSITION.get_enum_value(index).value\nif not (0 &lt;= index &lt;= 4):\nraise KeyError(index)\nreturn self.at(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.__setitem__","title":"<code>__setitem__(index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions, value: int)</code>","text":"<p>Sets the value specified by value in the position specified by index.</p> Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __setitem__(\nself, index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions, value: int\n):\n\"\"\"Sets the value specified by value in the position specified by index.\"\"\"\nif type(index) is not int:\nindex = VALUE_POSITION.get_enum_value(index).value\nif not (0 &lt;= index &lt;= 4):\nraise KeyError(index)\nself.setValue(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.CategoryAxis","title":"<code>CategoryAxis</code>","text":"<p>         Bases: <code>charts.ValueAxisMixin</code>, <code>charts.QCategoryAxis</code></p>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__add__","title":"<code>__add__(other: tuple[str, int]) -&gt; CategoryAxis</code>","text":"<p>Append another category.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __add__(self, other: tuple[str, int]) -&gt; CategoryAxis:\n\"\"\"Append another category.\"\"\"\nself.append(*other)\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"<p>Remove category label.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __delitem__(self, index: str):\n\"\"\"Remove category label.\"\"\"\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__getitem__","title":"<code>__getitem__(label: int | slice) -&gt; str | list[str]</code>","text":"<p>Get category label from given index.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __getitem__(self, label: int | slice) -&gt; str | list[str]:\n\"\"\"Get category label from given index.\"\"\"\nreturn self.categoriesLabels()[label]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__iter__","title":"<code>__iter__() -&gt; Iterator[str]</code>","text":"<p>Iterate through all category labels.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __iter__(self) -&gt; Iterator[str]:\n\"\"\"Iterate through all category labels.\"\"\"\nreturn iter(self.categoriesLabels())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__len__","title":"<code>__len__()</code>","text":"<p>Return category label count from axis.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __len__(self):\n\"\"\"Return category label count from axis.\"\"\"\nreturn self.count()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"<p>Set label at given index to value.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __setitem__(self, index: str, value: str):\n\"\"\"Set label at given index to value.\"\"\"\nself.replaceLabel(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.get_labels_position","title":"<code>get_labels_position() -&gt; LabelsPositionStr</code>","text":"<p>Return current labels position.</p> <p>Returns:</p> Type Description <code>LabelsPositionStr</code> <p>labels position</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n    Returns:\n        labels position\n    \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.set_labels_position","title":"<code>set_labels_position(position: LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition)</code>","text":"<p>Set the labels position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition</code> <p>labels position</p> required Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def set_labels_position(\nself, position: LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition\n):\n\"\"\"Set the labels position.\n    Args:\n        position: labels position\n    \"\"\"\nself.setLabelsPosition(LABELS_POSITIONS.get_enum_value(position))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ChartMixin","title":"<code>ChartMixin(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.GraphicsWidgetMixin</code></p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.max_x = 0\nself.max_y = 0\nself.min_x = 0\nself.min_y = 0\nself.adjust_style_to_palette()\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.adjust_style_to_palette","title":"<code>adjust_style_to_palette()</code>","text":"<p>Adjusts the chart theme to current Palette.</p> <p>Checks if palette is dark-ish and applies an appropriate theme to the chart.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def adjust_style_to_palette(self):\n\"\"\"Adjusts the chart theme to current Palette.\n    Checks if palette is dark-ish and applies an appropriate theme to the chart.\n    \"\"\"\npal = gui.GuiApplication.get_palette()\nstyle = \"Dark\" if pal.is_dark() else \"Light\"\nself.set_theme(style)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.apply_nice_numbers","title":"<code>apply_nice_numbers()</code>","text":"<p>Adjust both axis to display nice round numbers.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def apply_nice_numbers(self):\n\"\"\"Adjust both axis to display nice round numbers.\"\"\"\nfor axis in self.get_axes():\naxis.applyNiceNumbers()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_axes","title":"<code>get_axes(orientation: constants.OrientationStr | constants.Orientation | None = None, series: charts.QAbstractBarSeries | None = None) -&gt; list[charts.QAbstractAxis]</code>","text":"<p>Get axes of chart.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation | None</code> <p>Orientation of the axes that should get returned.</p> <code>None</code> <code>series</code> <code>charts.QAbstractBarSeries | None</code> <p>Series to return axes for. Returns all axes if None.</p> <code>None</code> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_axes(\nself,\norientation: constants.OrientationStr | constants.Orientation | None = None,\nseries: charts.QAbstractBarSeries | None = None,\n) -&gt; list[charts.QAbstractAxis]:\n\"\"\"Get axes of chart.\n    Arguments:\n        orientation: Orientation of the axes that should get returned.\n        series: Series to return axes for. Returns all axes if None.\n    \"\"\"\nif orientation is None:\norientation = constants.HORIZONTAL | constants.VERTICAL\nreturn self.axes(constants.ORIENTATION.get_enum_value(orientation), series)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.set_legend_alignment","title":"<code>set_legend_alignment(alignment: constants.SideStr | constants.AlignmentFlag)</code>","text":"<p>Set alignment of the chart legend.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def set_legend_alignment(\nself, alignment: constants.SideStr | constants.AlignmentFlag\n):\n\"\"\"Set alignment of the chart legend.\"\"\"\nself.legend().setAlignment(constants.SIDES.get_enum_value(alignment))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.update_boundaries","title":"<code>update_boundaries()</code>","text":"<p>Set new min/max values based on axis.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def update_boundaries(self):\n\"\"\"Set new min/max values based on axis.\"\"\"\nif axis_x := self.get_axes(\"horizontal\"):\nself.max_x = axis_x[0].max()\nself.min_x = axis_x[0].min()\nif axis_y := self.get_axes(\"vertical\"):\nself.max_y = axis_y[0].max()\nself.min_y = axis_y[0].min()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.zoom_by_factor","title":"<code>zoom_by_factor(factor: float)</code>","text":"<p>Zoom in/out by factor (1.0 = no change).</p> <p>Make sure that we dont zoom out too far</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def zoom_by_factor(self, factor: float):\n\"\"\"Zoom in/out by factor (1.0 = no change).\n    Make sure that we dont zoom out too far\n    \"\"\"\nself.zoom(factor)\nif axis_x := self.get_axes(\"horizontal\"):\nif axis_x[0].min() &lt; self.min_x:\naxis_x[0].setMin(self.min_x)\nif axis_x[0].max() &gt; self.max_x:\naxis_x[0].setMax(self.max_x)\nif axis_y := self.get_axes(\"vertical\"):\nif axis_y[0].max() &gt; self.max_y:\naxis_y[0].setMax(self.max_y)\n# always bottom-align when zooming for now. should perhaps become optional.\n# if axis_y[0].min() &lt; self.min_y:\naxis_y[0].setMin(max(0, self.min_y))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ChartView","title":"<code>ChartView(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.GraphicsViewMixin</code>, <code>charts.QChartView</code></p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], charts.QChart):\nself.setChart(charts.Chart())\nself.setRenderHint(gui.Painter.RenderHint.Antialiasing)\nself.set_rubber_band(\"rectangle\")\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.get_rubber_band","title":"<code>get_rubber_band() -&gt; RubberBandStr</code>","text":"<p>Return current rubber band type.</p> <p>Returns:</p> Type Description <code>RubberBandStr</code> <p>Rubber band type</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def get_rubber_band(self) -&gt; RubberBandStr:\n\"\"\"Return current rubber band type.\n    Returns:\n        Rubber band type\n    \"\"\"\nreturn RUBBER_BAND.inverse[self.rubberBand()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.keyPressEvent","title":"<code>keyPressEvent(event: gui.QKeyEvent)</code>","text":"<p>Handle keypress events to allow navigation via keyboard.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def keyPressEvent(self, event: gui.QKeyEvent):\n\"\"\"Handle keypress events to allow navigation via keyboard.\"\"\"\nmatch event.key():\ncase constants.Key.Key_Escape:\nself.chart().zoomReset()\ncase constants.Key.Key_Plus:\nself.chart().zoom_by_factor(ZOOM_IN_FACTOR)\ncase constants.Key.Key_Minus:\nself.chart().zoom_by_factor(ZOOM_OUT_FACTOR)\ncase constants.Key.Key_Left:\nself.chart().scroll(-SCROLL_STEP_SIZE, 0)\ncase constants.Key.Key_Right:\nself.chart().scroll(SCROLL_STEP_SIZE, 0)\ncase constants.Key.Key_Up:\nself.chart().scroll(0, SCROLL_STEP_SIZE)\ncase constants.Key.Key_Down:\nself.chart().scroll(0, -SCROLL_STEP_SIZE)\ncase constants.Key.Key_0:\nself.chart().apply_nice_numbers()\ncase _:\nsuper().keyPressEvent(event)\nreturn\nevent.accept()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.mouseMoveEvent","title":"<code>mouseMoveEvent(event: gui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mouseMoveEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\n# pan the chart with a middle mouse drag\nif event.buttons() &amp; constants.MouseButton.RightButton:  # type: ignore\nif not self.last_mouse_pos:\nreturn\npos_diff = event.position() - self.last_mouse_pos\nself.chart().scroll(-pos_diff.x(), pos_diff.y())\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mouseMoveEvent(event)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.mousePressEvent","title":"<code>mousePressEvent(event: gui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mousePressEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == constants.MouseButton.RightButton:\nwidgets.Application.set_override_cursor(\"size_all\")\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mousePressEvent(event)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event: gui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mouseReleaseEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == constants.MouseButton.RightButton:\nwidgets.Application.restoreOverrideCursor()\nevent.accept()\nreturn\nsuper().mouseReleaseEvent(event)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.save_as_image","title":"<code>save_as_image()</code>","text":"<p>Let user choose folder and save chart as an image file.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>@core.Slot()\ndef save_as_image(self):\n\"\"\"Let user choose folder and save chart as an image file.\"\"\"\ndlg = widgets.FileDialog(mode=\"save\", caption=\"Save image\")\nfilters = {\"Bmp files\": [\".bmp\"], \"Jpeg files\": [\".jpg\"], \"Png files\": [\".png\"]}\ndlg.set_extension_filter(filters)\nfilename = dlg.open_file()\nif not filename:\nreturn\nself.chart().show_legend()\nimage = self.get_image()\nimage.save(str(filename[0]))\nself.chart().hide_legend()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.set_rubber_band","title":"<code>set_rubber_band(typ: RubberBandStr | charts.QChartView.RubberBand)</code>","text":"<p>Set the rubber band type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>RubberBandStr | charts.QChartView.RubberBand</code> <p>rubber band type</p> required Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def set_rubber_band(self, typ: RubberBandStr | charts.QChartView.RubberBand):\n\"\"\"Set the rubber band type.\n    Args:\n        typ: rubber band type\n    \"\"\"\nself.setRubberBand(RUBBER_BAND.get_enum_value(typ))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.wheelEvent","title":"<code>wheelEvent(event: gui.QWheelEvent)</code>","text":"<p>Handle wheel event for zooming.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def wheelEvent(self, event: gui.QWheelEvent):\n\"\"\"Handle wheel event for zooming.\"\"\"\nfct = ZOOM_IN_FACTOR if event.angleDelta().y() &gt; 0 else ZOOM_OUT_FACTOR\nself.chart().zoom_by_factor(fct)\nevent.accept()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.DateTimeAxis","title":"<code>DateTimeAxis</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code>, <code>charts.QDateTimeAxis</code></p>"},{"location":"api/charts.html#prettyqt.charts.datetimeaxis.DateTimeAxis.set_max","title":"<code>set_max(maximum: datatypes.DateTimeType)</code>","text":"<p>Set maximum value for axis.</p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def set_max(self, maximum: datatypes.DateTimeType):\n\"\"\"Set maximum value for axis.\"\"\"\nmaximum = datatypes.to_datetime(maximum)\nself.setMax(maximum)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.datetimeaxis.DateTimeAxis.set_min","title":"<code>set_min(minimum: datatypes.DateTimeType)</code>","text":"<p>Set minimum value for axis.</p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def set_min(self, minimum: datatypes.DateTimeType):\n\"\"\"Set minimum value for axis.\"\"\"\nminimum = datatypes.to_datetime(minimum)\nself.setMin(minimum)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.datetimeaxis.DateTimeAxis.set_range","title":"<code>set_range(minimum: datatypes.DateTimeType, maximum: datatypes.DateTimeType)</code>","text":"<p>Set value range of datetime axis.</p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def set_range(self, minimum: datatypes.DateTimeType, maximum: datatypes.DateTimeType):\n\"\"\"Set value range of datetime axis.\"\"\"\nself.setRange(datatypes.to_datetime(minimum), datatypes.to_datetime(maximum))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.Legend","title":"<code>Legend(item: QtCharts.QLegend)</code>","text":"<p>         Bases: <code>widgets.GraphicsWidgetMixin</code></p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def __init__(self, item: QtCharts.QLegend):\nself.item = item\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_alignment","title":"<code>get_alignment() -&gt; constants.SideStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.SideStr</code> <p>alignment</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_alignment(self) -&gt; constants.SideStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.SIDES.inverse[self.alignment()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_marker_shape","title":"<code>get_marker_shape() -&gt; MarkerShapeStr</code>","text":"<p>Return current marker shape.</p> <p>Returns:</p> Type Description <code>MarkerShapeStr</code> <p>Marker shape</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_marker_shape(self) -&gt; MarkerShapeStr:\n\"\"\"Return current marker shape.\n    Returns:\n        Marker shape\n    \"\"\"\nreturn MARKER_SHAPES.inverse[self.markerShape()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.set_alignment","title":"<code>set_alignment(alignment: constants.SideStr | QtCharts.QLegend.MarkerShape)</code>","text":"<p>Set the alignment of the legend.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.SideStr | QtCharts.QLegend.MarkerShape</code> <p>alignment for the legend</p> required Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def set_alignment(self, alignment: constants.SideStr | QtCharts.QLegend.MarkerShape):\n\"\"\"Set the alignment of the legend.\n    Args:\n        alignment: alignment for the legend\n    \"\"\"\nself.setAlignment(constants.SIDES.get_enum_value(alignment))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.set_marker_shape","title":"<code>set_marker_shape(shape: MarkerShapeStr)</code>","text":"<p>Set the marker shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>MarkerShapeStr</code> <p>marker shape</p> required Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def set_marker_shape(self, shape: MarkerShapeStr):\n\"\"\"Set the marker shape.\n    Args:\n        shape: marker shape\n    \"\"\"\nself.setMarkerShape(MARKER_SHAPES.get_enum_value(shape))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.LineSeries","title":"<code>LineSeries</code>","text":"<p>         Bases: <code>charts.XYSeriesMixin</code>, <code>charts.QLineSeries</code></p> <p>QLineSeries with some custom properties.</p>"},{"location":"api/charts.html#prettyqt.charts.PieSlice","title":"<code>PieSlice</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QPieSlice</code></p>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_label_position","title":"<code>get_label_position() -&gt; LabelPositionStr</code>","text":"<p>Return current label position.</p> <p>Returns:</p> Type Description <code>LabelPositionStr</code> <p>label position</p> Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_label_position(self) -&gt; LabelPositionStr:\n\"\"\"Return current label position.\n    Returns:\n        label position\n    \"\"\"\nreturn LABEL_POSITION.inverse[self.labelPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.set_label_position","title":"<code>set_label_position(position: LabelPositionStr | QtCharts.QPieSlice.LabelPosition)</code>","text":"<p>Set the label position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelPositionStr | QtCharts.QPieSlice.LabelPosition</code> <p>label position</p> required Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def set_label_position(\nself, position: LabelPositionStr | QtCharts.QPieSlice.LabelPosition\n):\n\"\"\"Set the label position.\n    Args:\n        position: label position\n    \"\"\"\nself.setLabelPosition(LABEL_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.PolarChart","title":"<code>PolarChart</code>","text":"<p>         Bases: <code>charts.ChartMixin</code>, <code>charts.QPolarChart</code></p>"},{"location":"api/charts.html#prettyqt.charts.polarchart.PolarChart.add_axis","title":"<code>add_axis(axis: charts.QAbstractAxis, orientation: PolarOrientationStr | charts.QPolarChart.PolarOrientation)</code>","text":"<p>Add axis with given orientation.</p> Source code in <code>prettyqt\\charts\\polarchart.py</code> <pre><code>def add_axis(\nself,\naxis: charts.QAbstractAxis,\norientation: PolarOrientationStr | charts.QPolarChart.PolarOrientation,\n):\n\"\"\"Add axis with given orientation.\"\"\"\nself.addAxis(axis, POLAR_ORIENTATIONS.get_enum_value(orientation))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ValueAxisMixin","title":"<code>ValueAxisMixin</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code></p>"},{"location":"api/charts.html#prettyqt.charts.valueaxis.ValueAxisMixin.get_tick_type","title":"<code>get_tick_type() -&gt; TickTypeStr</code>","text":"<p>Return current tick type.</p> <p>Returns:</p> Type Description <code>TickTypeStr</code> <p>tick_type</p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>def get_tick_type(self) -&gt; TickTypeStr:\n\"\"\"Return current tick type.\n    Returns:\n        tick_type\n    \"\"\"\nreturn TICK_TYPES.inverse[self.tickType()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.valueaxis.ValueAxisMixin.set_tick_type","title":"<code>set_tick_type(tick_type: TickTypeStr | charts.QValueAxis.TickType)</code>","text":"<p>Set the tick type of the legend.</p> <p>Parameters:</p> Name Type Description Default <code>tick_type</code> <code>TickTypeStr | charts.QValueAxis.TickType</code> <p>tick type for the legend</p> required Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>def set_tick_type(self, tick_type: TickTypeStr | charts.QValueAxis.TickType):\n\"\"\"Set the tick type of the legend.\n    Args:\n        tick_type: tick type for the legend\n    \"\"\"\nself.setTickType(TICK_TYPES.get_enum_value(tick_type))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.XYSeriesMixin","title":"<code>XYSeriesMixin</code>","text":"<p>         Bases: <code>charts.AbstractSeriesMixin</code></p>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__add__","title":"<code>__add__(other: datatypes.PointFType) -&gt; XYSeries</code>","text":"<p>Append a point to the Series.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __add__(self, other: datatypes.PointFType) -&gt; XYSeries:\n\"\"\"Append a point to the Series.\"\"\"\nself.append(datatypes.to_pointf(other))\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"<p>Remove point with given index.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __delitem__(self, index: int):\n\"\"\"Remove point with given index.\"\"\"\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__setitem__","title":"<code>__setitem__(index: int, val: datatypes.PointFType)</code>","text":"<p>Set point at given index to value.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __setitem__(self, index: int, val: datatypes.PointFType):\n\"\"\"Set point at given index to value.\"\"\"\nself.replace(index, datatypes.to_pointf(val))\n</code></pre>"},{"location":"api/constants.html","title":"constants module","text":""},{"location":"api/core.html","title":"core module","text":""},{"location":"api/core.html#prettyqt.core.AbstractAnimationMixin","title":"<code>AbstractAnimationMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.get_direction","title":"<code>get_direction() -&gt; DirectionStr</code>","text":"<p>Get the current animation direction.</p> <p>Returns:</p> Type Description <code>DirectionStr</code> <p>animation direction</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def get_direction(self) -&gt; DirectionStr:\n\"\"\"Get the current animation direction.\n    Returns:\n        animation direction\n    \"\"\"\nreturn DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Get the current animation state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>animation state</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Get the current animation state.\n    Returns:\n        animation state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.restart_animation","title":"<code>restart_animation(policy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = 'keep')</code>","text":"<p>Restart the animation.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy</code> <p>animation policy</p> <code>'keep'</code> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def restart_animation(\nself,\npolicy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = \"keep\",\n):\n\"\"\"Restart the animation.\n    Args:\n        policy: animation policy\n    \"\"\"\nself.stop()\nself.start_animation(policy)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.set_direction","title":"<code>set_direction(direction: DirectionStr | core.QAbstractAnimation.Direction)</code>","text":"<p>Set animation direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>DirectionStr | core.QAbstractAnimation.Direction</code> <p>animation direction</p> required Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def set_direction(self, direction: DirectionStr | core.QAbstractAnimation.Direction):\n\"\"\"Set animation direction.\n    Args:\n        direction: animation direction\n    \"\"\"\nself.setDirection(DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.start_animation","title":"<code>start_animation(policy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = 'keep', interval: int = 0, single_shot: bool = True)</code>","text":"<p>Start the animation.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy</code> <p>animation policy</p> <code>'keep'</code> <code>interval</code> <code>int</code> <p>time interval / delay for timer</p> <code>0</code> <code>single_shot</code> <code>bool</code> <p>whether animation gets triggered once or in intervals</p> <code>True</code> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def start_animation(\nself,\npolicy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = \"keep\",\ninterval: int = 0,\nsingle_shot: bool = True,\n):\n\"\"\"Start the animation.\n    Args:\n        policy: animation policy\n        interval: time interval / delay for timer\n        single_shot: whether animation gets triggered once or in intervals\n    \"\"\"\nif policy in DELETION_POLICY:\npolicy = DELETION_POLICY[policy]\nif interval:\nfn = functools.partial(self.start, policy)\nself.start_callback_timer(fn, interval, single_shot=single_shot)\nelse:\nself.start(policy)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractItemModelMixin","title":"<code>AbstractItemModelMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.change_layout","title":"<code>change_layout()</code>","text":"<p>Context manager to change the layout.</p> <p>wraps calls with correct signals emitted at beginning: layoutAboutToBeChanged emitted at end: layoutChanged</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef change_layout(self):\n\"\"\"Context manager to change the layout.\n    wraps calls with correct signals\n    emitted at beginning: layoutAboutToBeChanged\n    emitted at end: layoutChanged\n    \"\"\"\nself.layoutAboutToBeChanged.emit()\nyield None\nself.layoutChanged.emit()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_breadcrumbs_path","title":"<code>get_breadcrumbs_path(index: core.ModelIndex, role: constants.ItemDataRole = constants.DISPLAY_ROLE) -&gt; list[str]</code>","text":"<p>Get the path for the given index.</p> <p>Returns a list containing data of all indexes up to the root for given role.</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_breadcrumbs_path(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; list[str]:\n\"\"\"Get the path for the given index.\n    Returns a list containing data of all indexes up to the root for given role.\n    \"\"\"\npieces = [index.data(role)]\nwhile (index := index.parent()).isValid():\npieces.insert(0, index.data(role))\nreturn pieces\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_child_indexes","title":"<code>get_child_indexes(index: core.ModelIndex) -&gt; listdelegators.BaseListDelegator[core.ModelIndex]</code>","text":"<p>Get all child indexes for given index (first column only).</p> <p>To get indexes recursively, use iter_tree.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>core.ModelIndex</code> <p>ModelIndex to get children from</p> required Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_child_indexes(\nself, index: core.ModelIndex\n) -&gt; listdelegators.BaseListDelegator[core.ModelIndex]:\n\"\"\"Get all child indexes for given index (first column only).\n    To get indexes recursively, use iter_tree.\n    Arguments:\n        index: ModelIndex to get children from\n    \"\"\"\nindexes = [self.index(i, 0, index) for i in range(self.rowCount(index))]\nreturn listdelegators.BaseListDelegator(indexes)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_column_type","title":"<code>get_column_type(column: int, rows_to_check: int = 10, role: int = constants.DISPLAY_ROLE) -&gt; type | None</code>","text":"<p>Guess column data type by checking values of first rows with given role.</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_column_type(\nself,\ncolumn: int,\nrows_to_check: int = 10,\nrole=constants.DISPLAY_ROLE,\n) -&gt; type | None:\n\"\"\"Guess column data type by checking values of first rows with given role.\"\"\"\nto_check = min(rows_to_check, self.rowCount())\nif to_check == 0:\nreturn None\n# cant combine these or make them a generator, so we do two list comps.\nindexes = [self.index(row, column) for row in range(to_check)]\nvalues = [self.data(i, role=role) for i in indexes]\nif all(isinstance(i, bool) for i in values):\nreturn bool\nif all(isinstance(i, str) for i in values):\nreturn str\nif all(isinstance(i, int) for i in values):\nreturn int\nif all(isinstance(i, float) for i in values):\nreturn float\ncheck_values = [self.data(i, role=constants.CHECKSTATE_ROLE) for i in indexes]\nreturn bool if None not in check_values else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_index_key","title":"<code>get_index_key(index: core.ModelIndex, include_column: bool = False, parent_index: core.ModelIndex | None = None) -&gt; tuple[tuple[int, int], ...]</code>","text":"<p>Return a key tuple for given ModelIndex.</p> <p>The key tuple consists either of row integers or (row, column) indices describing the index position from top to bottom.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>core.ModelIndex</code> <p>ModelIndex to get a key for</p> required <code>include_column</code> <code>bool</code> <p>whether to include the column in the index key.</p> <code>False</code> <code>parent_index</code> <code>core.ModelIndex | None</code> <p>Get key up to given ModelIndex. By default, get key up to root.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_index_key(\nself,\nindex: core.ModelIndex,\ninclude_column: bool = False,\nparent_index: core.ModelIndex | None = None,\n) -&gt; tuple[tuple[int, int], ...]:\n\"\"\"Return a key tuple for given ModelIndex.\n    The key tuple consists either of row integers or (row, column) indices\n    describing the index position from top to bottom.\n    Arguments:\n        index: ModelIndex to get a key for\n        include_column: whether to include the column in the index key.\n        parent_index: Get key up to given ModelIndex. By default, get key up to root.\n    \"\"\"\nkey_path = []\nparent = index\nwhile parent.isValid() and parent != parent_index:\nkey = (parent.row(), parent.column()) if include_column else parent.row()\nkey_path.append(key)\nparent = parent.parent()\nreturn tuple(reversed(key_path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.index_from_key","title":"<code>index_from_key(key_path: Sequence[tuple[int, int] | int], parent_index: core.ModelIndex | None = None) -&gt; core.ModelIndex</code>","text":"<p>Return a source QModelIndex for the given key.</p> <p>Parameters:</p> Name Type Description Default <code>key_path</code> <code>Sequence[tuple[int, int] | int]</code> <p>Key path to get an index for.       Should be a sequence of either (row, column)  or row indices</p> required <code>parent_index</code> <code>core.ModelIndex | None</code> <p>ModelIndex to start indexing from. Defaults to root index.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def index_from_key(\nself,\nkey_path: Sequence[tuple[int, int] | int],\nparent_index: core.ModelIndex | None = None,\n) -&gt; core.ModelIndex:\n\"\"\"Return a source QModelIndex for the given key.\n    Arguments:\n        key_path: Key path to get an index for.\n                  Should be a sequence of either (row, column)  or row indices\n        parent_index: ModelIndex to start indexing from. Defaults to root index.\n    \"\"\"\nmodel = self.sourceModel()\nif model is None:\nreturn core.ModelIndex()\nindex = parent_index or core.ModelIndex()\nfor key in key_path:\nkey = (key, 0) if isinstance(key, int) else key\nindex = model.index(*key, index)\nreturn index\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.iter_tree","title":"<code>iter_tree(parent_index: core.ModelIndex | None = None, depth: int | None = None, fetch_more: bool = False) -&gt; Iterator[core.ModelIndex]</code>","text":"<p>Iter through all indexes of the model tree.</p> <p>Parameters:</p> Name Type Description Default <code>parent_index</code> <code>core.ModelIndex | None</code> <p>parent index</p> <code>None</code> <code>depth</code> <code>int | None</code> <p>maximum iteration depth</p> <code>None</code> <code>fetch_more</code> <code>bool</code> <p>call fetchMore for all indexes until canFetchMore returns False</p> <code>False</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def iter_tree(\nself,\nparent_index: core.ModelIndex | None = None,\ndepth: int | None = None,\nfetch_more: bool = False,\n) -&gt; Iterator[core.ModelIndex]:\n\"\"\"Iter through all indexes of the model tree.\n    Arguments:\n        parent_index: parent index\n        depth: maximum iteration depth\n        fetch_more: call fetchMore for all indexes until canFetchMore returns False\n    \"\"\"\nif parent_index is None:\n# TODO: does this always equal AbstractItemView.rootIndex()?\n# parent_index = self.index(0, 0)\nparent_index = core.ModelIndex()\nif parent_index.isValid():\nyield parent_index\nif fetch_more:\nwhile self.canFetchMore(parent_index):\nself.fetchMore(parent_index)\nif depth is not None and (depth := depth - 1) &lt; 0:\nreturn\nfor i in range(self.rowCount(parent_index)):\nchild_index = self.index(i, 0, parent_index)\nyield from self.iter_tree(child_index, depth, fetch_more=fetch_more)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.reset_model","title":"<code>reset_model()</code>","text":"<p>Context manager to reset the model.</p> <p>wraps calls with correct signals emitted at beginning: beginResetModel emitted at end: endResetModel</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef reset_model(self):\n\"\"\"Context manager to reset the model.\n    wraps calls with correct signals\n    emitted at beginning: beginResetModel\n    emitted at end: endResetModel\n    \"\"\"\nself.beginResetModel()\nyield None\nself.endResetModel()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.search_tree","title":"<code>search_tree(value: Any, role: constants.ItemDataRole = constants.DISPLAY_ROLE, parent_index: core.ModelIndex | None = None, max_results: int | None = None, depth: int | None = None) -&gt; listdelegators.BaseListDelegator[core.ModelIndex]</code>","text":"<p>Search the tree for indexes with a given value in given role.</p> <p>Compared to QAbstractItemModel.match, this method allows to set a maximum search depth and passing several values to search for as a list.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Item or list of items to search for.</p> required <code>role</code> <code>constants.ItemDataRole</code> <p>Index role to search in.</p> <code>constants.DISPLAY_ROLE</code> <code>parent_index</code> <code>core.ModelIndex | None</code> <p>start index for searching. If None, whole tree is searched.</p> <code>None</code> <code>max_results</code> <code>int | None</code> <p>stop searching after x amount of hits. 'None' means no limit.</p> <code>None</code> <code>depth</code> <code>int | None</code> <p>search depth. Search depth. 'None' means no limit.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def search_tree(\nself,\nvalue: Any,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nparent_index: core.ModelIndex | None = None,\nmax_results: int | None = None,\ndepth: int | None = None,\n) -&gt; listdelegators.BaseListDelegator[core.ModelIndex]:\n\"\"\"Search the tree for indexes with a given value in given role.\n    Compared to QAbstractItemModel.match, this method allows to set a maximum\n    search depth and passing several values to search for as a list.\n    Arguments:\n        value: Item or list of items to search for.\n        role: Index role to search in.\n        parent_index: start index for searching. If None, whole tree is searched.\n        max_results: stop searching after x amount of hits. 'None' means no limit.\n        depth: search depth. Search depth. 'None' means no limit.\n    \"\"\"\nresults = []\n# This makes it impossible to search for lists. I think thats fine.\nif not isinstance(value, list):\nvalue = [value]\nfor idx in self.iter_tree(parent_index, depth=depth):\nif self.data(idx, role) in value:\nresults.append(idx)\nif len(results) == max_results:\nbreak\nreturn listdelegators.BaseListDelegator(results)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractProxyModelMixin","title":"<code>AbstractProxyModelMixin</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code></p>"},{"location":"api/core.html#prettyqt.core.abstractproxymodel.AbstractProxyModelMixin.first_item_index","title":"<code>first_item_index() -&gt; core.ModelIndex</code>","text":"<p>Return the first child of the root item.</p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>def first_item_index(self) -&gt; core.ModelIndex:\n\"\"\"Return the first child of the root item.\"\"\"\n# We cannot just call the same function of the source model because the first node\n# there may be hidden.\nproxy_root_index = self.mapFromSource(core.ModelIndex())\nreturn self.index(0, 0, proxy_root_index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AnimationGroupMixin","title":"<code>AnimationGroupMixin</code>","text":"<p>         Bases: <code>core.AbstractAnimationMixin</code></p>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.targetObject","title":"<code>targetObject() -&gt; widgets.QWidget</code>","text":"<p>Return shared targetObject if existing.</p> Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def targetObject(self) -&gt; widgets.QWidget:\n\"\"\"Return shared targetObject if existing.\"\"\"\ntargets = [\nanim.targetObject()\nfor i in range(self.animationCount())\nif isinstance((anim := self.animationAt(i)), core.QPropertyAnimation)\n]\nif len(targets) != self.animationCount() or len(set(targets)) != 1:\nraise RuntimeError(\"Could not find shared targetObject for all animations.\")\nreturn targets[0]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Collator","title":"<code>Collator</code>","text":"<p>         Bases: <code>core.QCollator</code></p>"},{"location":"api/core.html#prettyqt.core.collator.Collator.is_case_sensitive","title":"<code>is_case_sensitive() -&gt; bool</code>","text":"<p>Return case sensitivity.</p> <p>Returns:</p> Type Description <code>bool</code> <p>case sensitivity</p> Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n    Returns:\n        case sensitivity\n    \"\"\"\nreturn bool(self.caseSensitivity())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.collator.Collator.set_case_sensitive","title":"<code>set_case_sensitive(state: bool)</code>","text":"<p>Set case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>case sensitive</p> required Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n    Args:\n        state: case sensitive\n    \"\"\"\nsensitivity = (\nconstants.CaseSensitivity.CaseSensitive\nif state\nelse constants.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CommandLineParser","title":"<code>CommandLineParser</code>","text":"<p>         Bases: <code>core.QCommandLineParser</code></p>"},{"location":"api/core.html#prettyqt.core.commandlineparser.CommandLineParser.set_options_after_positional_arguments_mode","title":"<code>set_options_after_positional_arguments_mode(mode: SingleDashWordStr | mod.SingleDashWordOptionMode)</code>","text":"<p>Set the options after positional arguments mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SingleDashWordStr | mod.SingleDashWordOptionMode</code> <p>options after positional arguments mode</p> required Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def set_options_after_positional_arguments_mode(\nself, mode: SingleDashWordStr | mod.SingleDashWordOptionMode\n):\n\"\"\"Set the options after positional arguments mode.\n    Args:\n        mode: options after positional arguments mode\n    \"\"\"\nval = OPTIONS_AFTER_POS_ARG.get_enum_value(mode)\nself.setOptionsAfterPositionalArgumentsMode(val)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.commandlineparser.CommandLineParser.set_single_dash_word_option_mode","title":"<code>set_single_dash_word_option_mode(mode: SingleDashWordStr)</code>","text":"<p>Set the single dash word option mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SingleDashWordStr</code> <p>single dash word option mode</p> required Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def set_single_dash_word_option_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the single dash word option mode.\n    Args:\n        mode: single dash word option mode\n    \"\"\"\nself.setSingleDashWordOptionMode(SINGLE_DASH_WORD.get_enum_value(mode))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CoreApplicationMixin","title":"<code>CoreApplicationMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.in_main_thread","title":"<code>in_main_thread() -&gt; bool</code>","text":"<p>Check if we are in the thread in which QApplication object was created.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if we are in the main thread, False otherwise.</p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def in_main_thread(self) -&gt; bool:\n\"\"\"Check if we are in the thread in which QApplication object was created.\n    Returns:\n        True if we are in the main thread, False otherwise.\n    \"\"\"\nreturn self.thread() == core.Thread.currentThread()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DataStream","title":"<code>DataStream</code>","text":"<p>         Bases: <code>QtCore.QDataStream</code></p>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.get_byte_order","title":"<code>get_byte_order() -&gt; ByteOrderStr</code>","text":"<p>Return byte order.</p> <p>Returns:</p> Type Description <code>ByteOrderStr</code> <p>byte order</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_byte_order(self) -&gt; ByteOrderStr:\n\"\"\"Return byte order.\n    Returns:\n        byte order\n    \"\"\"\nreturn BYTE_ORDER.inverse[self.byteOrder()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.get_floating_point_precision","title":"<code>get_floating_point_precision() -&gt; FloatingPointPrecisionStr</code>","text":"<p>Return floating point precision.</p> <p>Returns:</p> Type Description <code>FloatingPointPrecisionStr</code> <p>floating point precision</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_floating_point_precision(self) -&gt; FloatingPointPrecisionStr:\n\"\"\"Return floating point precision.\n    Returns:\n        floating point precision\n    \"\"\"\nreturn FLOATING_POINT_PRECISION.inverse[self.floatingPointPrecision()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Return status.</p> <p>Returns:</p> Type Description <code>StatusStr</code> <p>status</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Return status.\n    Returns:\n        status\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.set_byte_order","title":"<code>set_byte_order(order: ByteOrderStr | QtCore.QDataStream.ByteOrder)</code>","text":"<p>Set byte order.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>ByteOrderStr | QtCore.QDataStream.ByteOrder</code> <p>byte order to use</p> required Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_byte_order(self, order: ByteOrderStr | QtCore.QDataStream.ByteOrder):\n\"\"\"Set byte order.\n    Args:\n        order: byte order to use\n    \"\"\"\nself.setByteOrder(BYTE_ORDER.get_enum_value(order))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.set_floating_point_precision","title":"<code>set_floating_point_precision(precision: FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision)</code>","text":"<p>Set floating point precision.</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision</code> <p>floating point precision</p> required Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_floating_point_precision(\nself,\nprecision: FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision,\n):\n\"\"\"Set floating point precision.\n    Args:\n        precision: floating point precision\n    \"\"\"\nself.setFloatingPointPrecision(FLOATING_POINT_PRECISION.get_enum_value(precision))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.set_status","title":"<code>set_status(status: StatusStr)</code>","text":"<p>Set status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>StatusStr</code> <p>status to use</p> required Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_status(self, status: StatusStr):\n\"\"\"Set status.\n    Args:\n        status: status to use\n    \"\"\"\nself.setStatus(STATUS.get_enum_value(status))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DateTime","title":"<code>DateTime</code>","text":"<p>         Bases: <code>core.QDateTime</code></p>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.get_time_spec","title":"<code>get_time_spec() -&gt; constants.TimeSpecStr</code>","text":"<p>Return current time specification.</p> <p>Returns:</p> Type Description <code>constants.TimeSpecStr</code> <p>time specification</p> Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_time_spec(self) -&gt; constants.TimeSpecStr:\n\"\"\"Return current time specification.\n    Returns:\n        time specification\n    \"\"\"\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.set_time_spec","title":"<code>set_time_spec(spec: constants.TimeSpecStr | constants.TimeSpec)</code>","text":"<p>Set the time specification.</p> <p>Parameters:</p> Name Type Description Default <code>spec</code> <code>constants.TimeSpecStr | constants.TimeSpec</code> <p>time specification to use</p> required Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def set_time_spec(self, spec: constants.TimeSpecStr | constants.TimeSpec):\n\"\"\"Set the time specification.\n    Args:\n        spec: time specification to use\n    \"\"\"\nself.setTimeSpec(constants.TIME_SPEC[spec])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DeadlineTimer","title":"<code>DeadlineTimer</code>","text":"<p>         Bases: <code>QtCore.QDeadlineTimer</code></p>"},{"location":"api/core.html#prettyqt.core.deadlinetimer.DeadlineTimer.get_type","title":"<code>get_type() -&gt; constants.TimerTypeStr</code>","text":"<p>Return current timer type.</p> <p>Returns:</p> Type Description <code>constants.TimerTypeStr</code> <p>timer type</p> Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>def get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n    Returns:\n        timer type\n    \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.deadlinetimer.DeadlineTimer.set_type","title":"<code>set_type(typ: constants.TimerTypeStr | constants.TimerType)</code>","text":"<p>Set the timer type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>constants.TimerTypeStr | constants.TimerType</code> <p>timer type</p> required Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>def set_type(self, typ: constants.TimerTypeStr | constants.TimerType):\n\"\"\"Set the timer type.\n    Args:\n        typ: timer type\n    \"\"\"\nself.setTimerType(constants.TIMER_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.EasingCurve","title":"<code>EasingCurve(other_or_type: TypeStr | int | QtCore.QEasingCurve = 'linear')</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QEasingCurve</code></p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def __init__(self, other_or_type: TypeStr | int | QtCore.QEasingCurve = \"linear\"):\nif isinstance(other_or_type, str) and other_or_type in TYPE:\ntyp = TYPE[other_or_type]\nelse:\ntyp = other_or_type\nsuper().__init__(typ)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Get the current easing curve type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>easing curve type</p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Get the current easing curve type.\n    Returns:\n        easing curve type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.set_type","title":"<code>set_type(typ: TypeStr | QtCore.QEasingCurve.Type)</code>","text":"<p>Set easing curve type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>TypeStr | QtCore.QEasingCurve.Type</code> <p>easing curve type</p> required Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def set_type(self, typ: TypeStr | QtCore.QEasingCurve.Type):\n\"\"\"Set easing curve type.\n    Args:\n        typ: easing curve type\n    \"\"\"\nself.setType(TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ElapsedTimer","title":"<code>ElapsedTimer</code>","text":"<p>         Bases: <code>QtCore.QElapsedTimer</code></p>"},{"location":"api/core.html#prettyqt.core.elapsedtimer.ElapsedTimer.get_clock_type","title":"<code>get_clock_type() -&gt; ClockTypeStr</code>","text":"<p>Return current clock type.</p> <p>Returns:</p> Type Description <code>ClockTypeStr</code> <p>clock type</p> Source code in <code>prettyqt\\core\\elapsedtimer.py</code> <pre><code>def get_clock_type(self) -&gt; ClockTypeStr:\n\"\"\"Return current clock type.\n    Returns:\n        clock type\n    \"\"\"\nreturn CLOCK_TYPE.inverse[self.clockType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileDeviceMixin","title":"<code>FileDeviceMixin</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code></p>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.get_error","title":"<code>get_error() -&gt; FileErrorStr</code>","text":"<p>Return file error status.</p> <p>Returns:</p> Type Description <code>FileErrorStr</code> <p>file error status</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n    Returns:\n        file error status\n    \"\"\"\nreturn FILE_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.get_file_time","title":"<code>get_file_time(typ: FileTimeStr | core.QFileDevice.FileTime) -&gt; datetime.datetime | None</code>","text":"<p>Return current file time.</p> <p>Returns:</p> Type Description <code>datetime.datetime | None</code> <p>file time</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_file_time(\nself, typ: FileTimeStr | core.QFileDevice.FileTime\n) -&gt; datetime.datetime | None:\n\"\"\"Return current file time.\n    Returns:\n        file time\n    \"\"\"\nif date := self.fileTime(FILE_TIME.get_enum_value(typ)):\nreturn date.toPython()  # type: ignore\nreturn None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.is_executable","title":"<code>is_executable() -&gt; bool</code>","text":"<p>Returns whether file has ExeUser permission flag.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def is_executable(self) -&gt; bool:\n\"\"\"Returns whether file has ExeUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.ExeUser\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.is_readable","title":"<code>is_readable() -&gt; bool</code>","text":"<p>Returns whether file has ReadUser permission flag.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def is_readable(self) -&gt; bool:\n\"\"\"Returns whether file has ReadUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.ReadUser\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.is_writable","title":"<code>is_writable() -&gt; bool</code>","text":"<p>Returns whether file has WriteUser permission flag.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def is_writable(self) -&gt; bool:\n\"\"\"Returns whether file has WriteUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.WriteUser\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.set_file_time","title":"<code>set_file_time(file_time: datatypes.DateTimeType, typ: FileTimeStr | core.QFileDevice.FileTime) -&gt; bool</code>","text":"<p>Set file time.</p> <p>Parameters:</p> Name Type Description Default <code>file_time</code> <code>datatypes.DateTimeType</code> <p>file time to set</p> required <code>typ</code> <code>FileTimeStr | core.QFileDevice.FileTime</code> <p>file time type</p> required Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def set_file_time(\nself,\nfile_time: datatypes.DateTimeType,\ntyp: FileTimeStr | core.QFileDevice.FileTime,\n) -&gt; bool:\n\"\"\"Set file time.\n    Args:\n        file_time: file time to set\n        typ: file time type\n    \"\"\"\nfile_time = datatypes.to_datetime(file_time)\nreturn self.setFileTime(file_time, FILE_TIME.get_enum_value(typ))  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.KeyCombination","title":"<code>KeyCombination(*args, **kwargs)</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QKeyCombination</code></p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in MODIFIERS.inverse.values():\nmods = args[0].split(\"+\")\nqtmod = functools.reduce(or_, [MODIFIERS[m] for m in mods])\nsuper().__init__(qtmod, Keys.No)\nreturn\ncase (str(),):\n*mods, btn = args[0].split(\"+\")\n# get modifiler\nqtmod = (\nfunctools.reduce(or_, [MODIFIERS[m] for m in mods])\nif mods\nelse Mod.NoModifier\n)\n# get button\nif btn in _SYMBOLS:\nbtn = _SYMBOLS[btn]\nif btn.isalnum():\nbtn = btn.upper()\nqtkey = getattr(Key, f\"Key_{btn}\") if btn != \"{}\" else Keys.Any\nsuper().__init__(qtmod, qtkey)\ncase (QtCore.QEvent(),):\nmodifier = args[0].modifiers()\nmodifier ^= Mod.KeypadModifier\nkey = args[0].key()\nif key in MODIFIER_KEYS:  # modifier only\nkey = Keys.No\nsuper().__init__(key, modifier)\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.has_key","title":"<code>has_key() -&gt; bool</code>","text":"<p>True if non-modifier key is pressed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def has_key(self) -&gt; bool:\n\"\"\"True if non-modifier key is pressed.\"\"\"\nreturn self.key() != Keys.No\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.has_modifier","title":"<code>has_modifier(modifier: constants.KeyboardModifierStr) -&gt; bool</code>","text":"<p>True if keycombo contains modifier.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def has_modifier(self, modifier: constants.KeyboardModifierStr) -&gt; bool:\n\"\"\"True if keycombo contains modifier.\"\"\"\nreturn bool(self.keyboardModifiers() &amp; constants.KEYBOARD_MODIFIERS[modifier])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.is_moving","title":"<code>is_moving() -&gt; bool</code>","text":"<p>True if arrows are pushed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_moving(self) -&gt; bool:\n\"\"\"True if arrows are pushed.\"\"\"\nreturn self.key() in ARROW_KEYS\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.is_moving_func","title":"<code>is_moving_func() -&gt; bool</code>","text":"<p>True if function arrows are pushed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_moving_func(self) -&gt; bool:\n\"\"\"True if function arrows are pushed.\"\"\"\nreturn self.key() in FUNC_ARROW_KEYS\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.is_typing","title":"<code>is_typing() -&gt; bool</code>","text":"<p>True if key is a letter or number.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_typing(self) -&gt; bool:\n\"\"\"True if key is a letter or number.\"\"\"\nmod_ok = self.keyboardModifiers() in (Mod.NoModifier, Mod.ShiftModifier)\nkey = self.key()\nkey_ok = (\nKey.Key_Exclam &lt;= key &lt;= Key.Key_ydiaeresis\nor Keys.ALPHA &lt;= key &lt;= Keys.OMEGA\nor Keys.CYR_A &lt;= key &lt;= Keys.CYR_YA\n)\nreturn mod_ok and key_ok\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaMethod","title":"<code>MetaMethod(metamethod: core.QMetaMethod)</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def __init__(self, metamethod: core.QMetaMethod):\nself.item = metamethod\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_normalized_method_signature","title":"<code>get_normalized_method_signature() -&gt; str</code>","text":"<p>Returns something like 'objectNameChanged(QString)'.</p> Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_normalized_method_signature(self) -&gt; str:\n\"\"\"Returns something like 'objectNameChanged(QString)'.\"\"\"\nsig = self.item.methodSignature()\nnormalized = core.QMetaObject.normalizedSignature(sig.data().decode())\nreturn normalized.data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_parameter_types","title":"<code>get_parameter_types() -&gt; list[str]</code>","text":"<p>Returns sth. like ['QString'].</p> Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_parameter_types(self) -&gt; list[str]:\n\"\"\"Returns sth. like ['QString'].\"\"\"\nreturn [i.data().decode() for i in self.parameterTypes()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaObject","title":"<code>MetaObject(metaobject: core.QMetaObject)</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def __init__(self, metaobject: core.QMetaObject):\nself.item = metaobject\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.connect_signals","title":"<code>connect_signals(source_qobject: core.QObject, fn_or_qobject: Callable | core.QObject, only_notifiers: bool = False) -&gt; list[core.QMetaObject.Connection]</code>","text":"<p>Connect all signals of a given qobject.</p> <p>Either connect all signals to a function or connect each signal to the corresponding signal of the receiver.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def connect_signals(\nself,\nsource_qobject: core.QObject,\nfn_or_qobject: Callable | core.QObject,\nonly_notifiers: bool = False,\n) -&gt; list[core.QMetaObject.Connection]:\n\"\"\"Connect all signals of a given qobject.\n    Either connect all signals to a function or connect each signal\n    to the corresponding signal of the receiver.\n    \"\"\"\nhandles = []\nfor signal in self.get_signals(only_notifiers=only_notifiers):\nsignal_name = signal.get_name()\nsignal_instance = source_qobject.__getattribute__(signal_name)\nslot = (\nfn_or_qobject.__getattribute__(signal_name)\nif isinstance(fn_or_qobject, core.QObject)\nelse fn_or_qobject\n)\nhandle = signal_instance.connect(slot)\nhandles.append(handle)\nlogger.debug(f\"connected {len(handles)} signals to {fn_or_qobject}.\")\nreturn handles\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.copy","title":"<code>copy(qobject: core.QObject, forward_signals: bool = True)</code>","text":"<p>Create a copy of given QObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def copy(self, qobject: core.QObject, forward_signals: bool = True):\n\"\"\"Create a copy of given QObject.\"\"\"\ntry:\nnew = type(qobject)()\nexcept TypeError:\n# this should should cover most cases.\nnew = type(qobject)(qobject.orientation())\nfor prop in self.get_properties(only_writable=True):\nval = prop.read(qobject)\nprop.write(new, val)\nif forward_signals:\nself.connect_signals(new, qobject)\nlogger.debug(f\"copied {qobject!r}\")\nreturn new\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_all_super_classes","title":"<code>get_all_super_classes() -&gt; list[MetaObject]</code>","text":"<p>Get SuperClass MetaObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_all_super_classes(self) -&gt; list[MetaObject]:\n\"\"\"Get SuperClass MetaObject.\"\"\"\nklasses = []\nwhile klass := self.superClass():\nklasses.append(MetaObject(klass))\nreturn klasses\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_class_info","title":"<code>get_class_info(include_super: bool = True) -&gt; dict[str, str]</code>","text":"<p>Get MetaObject class info.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_class_info(self, include_super: bool = True) -&gt; dict[str, str]:\n\"\"\"Get MetaObject class info.\"\"\"\nstart = 0 if include_super else self.item.classInfoOffset()\ncount = self.item.classInfoCount()\nclassinfos = [self.item.classInfo(i) for i in range(start, count)]\nreturn {i.name(): i.value() for i in classinfos}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_constructor","title":"<code>get_constructor(index: int | str) -&gt; core.MetaMethod</code>","text":"<p>Get ctor MetaMethod based on index or name.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_constructor(self, index: int | str) -&gt; core.MetaMethod:\n\"\"\"Get ctor MetaMethod based on index or name.\"\"\"\nif isinstance(index, int):\nmethod = core.MetaMethod(self.item.constructor(index))\nif not method.isValid():\nraise KeyError(index)\nreturn method\nfor method in self.get_constructors():\nif method.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn method\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_constructors","title":"<code>get_constructors() -&gt; list[core.MetaMethod]</code>","text":"<p>Get all ctor MetaMethods.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_constructors(self) -&gt; list[core.MetaMethod]:\n\"\"\"Get all ctor MetaMethods.\"\"\"\ncount = self.item.constructorCount()\nreturn [core.MetaMethod(self.item.constructor(i)) for i in range(count)]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_enum","title":"<code>get_enum(index: int | str) -&gt; core.MetaEnum</code>","text":"<p>Get MetaEnum based on index or name.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_enum(self, index: int | str) -&gt; core.MetaEnum:\n\"\"\"Get MetaEnum based on index or name.\"\"\"\nif isinstance(index, int):\nenum = core.MetaEnum(self.item.enumerator(index))\nif not enum.isValid():\nraise KeyError(index)\nreturn enum\nfor enumerator in self.get_enums():\nif enumerator.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn enumerator\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_enums","title":"<code>get_enums(include_super: bool = True) -&gt; list[core.MetaEnum]</code>","text":"<p>Get all MetaEnums based on given criteria.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_enums(self, include_super: bool = True) -&gt; list[core.MetaEnum]:\n\"\"\"Get all MetaEnums based on given criteria.\"\"\"\nstart = 0 if include_super else self.item.enumeratorOffset()\nreturn [self.get_enum(i) for i in range(start, self.item.enumeratorCount())]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_meta_type","title":"<code>get_meta_type() -&gt; core.MetaType</code>","text":"<p>Get Meta type of this MetaObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_meta_type(self) -&gt; core.MetaType:\n\"\"\"Get Meta type of this MetaObject.\"\"\"\nreturn core.MetaType(self.metaType().id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_method","title":"<code>get_method(index: int | str) -&gt; core.MetaMethod</code>","text":"<p>Get MetaMethod based on index or name.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_method(self, index: int | str) -&gt; core.MetaMethod:\n\"\"\"Get MetaMethod based on index or name.\"\"\"\nif isinstance(index, int):\nmethod = core.MetaMethod(self.item.method(index))\nif not method.isValid():\nraise KeyError(index)\nreturn method\nfor method in self.get_methods():\nif method.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn method\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_methods","title":"<code>get_methods(include_super: bool = True, type_filter: core.metamethod.MethodTypeStr | None = None, filter_shit: bool = True) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all MetaMethods based on given criteria.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_methods(\nself,\ninclude_super: bool = True,\ntype_filter: core.metamethod.MethodTypeStr | None = None,\nfilter_shit: bool = True,\n) -&gt; list[core.MetaMethod]:\n\"\"\"Get all MetaMethods based on given criteria.\"\"\"\nstart = 0 if include_super else self.item.methodOffset()\nmethods = [\nmethod\nfor i in range(start, self.item.methodCount())\nif not (method := self.get_method(i)).get_name().startswith(\"_q_\")\nor not filter_shit\n]\nif type_filter is None:\nreturn methods\nelse:\nreturn [i for i in methods if i.get_method_type() == type_filter]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_name","title":"<code>get_name() -&gt; str</code>","text":"<p>Get MetaObject class name.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_name(self) -&gt; str:\n\"\"\"Get MetaObject class name.\"\"\"\nreturn self.className()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_plain_methods","title":"<code>get_plain_methods(include_super: bool = True) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all plain MetaMethods based on given criteria.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_plain_methods(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\n\"\"\"Get all plain MetaMethods based on given criteria.\"\"\"\nreturn self.get_methods(include_super=include_super, type_filter=\"method\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_properties","title":"<code>get_properties(include_super: bool = True, only_writable: bool = False, only_stored: bool = False, only_bindable: bool = False, only_designable: bool = False, only_final: bool = False, only_required: bool = False, only_enum_type: bool = False, only_flag_type: bool = False, only_with_notifiers: bool = False, only_with_type_name: str = '') -&gt; list[core.MetaProperty]</code>","text":"<p>Get all MetaProperties based on given criteria.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_properties(\nself,\ninclude_super: bool = True,\nonly_writable: bool = False,\nonly_stored: bool = False,\nonly_bindable: bool = False,\nonly_designable: bool = False,\nonly_final: bool = False,\nonly_required: bool = False,\nonly_enum_type: bool = False,\nonly_flag_type: bool = False,\nonly_with_notifiers: bool = False,\nonly_with_type_name: str = \"\",\n) -&gt; list[core.MetaProperty]:\n\"\"\"Get all MetaProperties based on given criteria.\"\"\"\nstart = 0 if include_super else self.item.propertyOffset()\ncount = self.item.propertyCount()\nprop_list = []\nfor i in range(start, count):\nprop = self.item.property(i)\nif (\n(only_writable and not prop.isWritable())\nor (only_stored and not prop.isStored())\nor (only_bindable and not prop.isBindable())\nor (only_designable and not prop.isDesignable())\nor (only_final and not prop.isFinal())\nor (only_required and not prop.isRequired())\nor (only_enum_type and not prop.isEnumType())\nor (only_flag_type and not prop.isFlagType())\nor (only_with_notifiers and not prop.hasNotifier())\nor (only_with_type_name and prop.typeName() != only_with_type_name)\n):\ncontinue\nprop_list.append(core.MetaProperty(prop))\nreturn prop_list\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_property","title":"<code>get_property(index: int | str) -&gt; core.MetaProperty</code>","text":"<p>Get MetaProperty based on index or name.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property(self, index: int | str) -&gt; core.MetaProperty:\n\"\"\"Get MetaProperty based on index or name.\"\"\"\nif isinstance(index, int):\nprop = core.MetaProperty(self.item.property(index))\nif not prop.isValid():\nraise KeyError(index)\nreturn prop\nfor prop in self.get_properties():\nif prop.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn prop\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_property_class_affiliations","title":"<code>get_property_class_affiliations() -&gt; dict[str, list[core.MetaProperty]]</code>","text":"<p>Get a mapping of class -&gt; property affiliations.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property_class_affiliations(self) -&gt; dict[str, list[core.MetaProperty]]:\n\"\"\"Get a mapping of class -&gt; property affiliations.\"\"\"\nmapper = {}\nmetaclass = self\nwhile metaclass is not None:\nmapper[metaclass.get_name()] = [\nmetaclass.get_property(i)\nfor i in range(metaclass.propertyOffset(), metaclass.propertyCount())\n]\nmetaclass = metaclass.get_super_class()\nreturn mapper\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_property_values","title":"<code>get_property_values(qobject: core.QObject, cast_types: bool = False) -&gt; dict[str, Any]</code>","text":"<p>Get a dictionary containing all MetaProperties values from given qobject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property_values(\nself, qobject: core.QObject, cast_types: bool = False\n) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary containing all MetaProperties values from given qobject.\"\"\"\nvals = {prop.get_name(): prop.read(qobject) for prop in self.get_properties()}\nif cast_types:\nreturn {k: datatypes.make_serializable(v) for k, v in vals.items()}\nelse:\nreturn vals\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_signals","title":"<code>get_signals(include_super: bool = True, only_notifiers: bool = False) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all signal MetaMethods based on given criteria.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_signals(\nself, include_super: bool = True, only_notifiers: bool = False\n) -&gt; list[core.MetaMethod]:\n\"\"\"Get all signal MetaMethods based on given criteria.\"\"\"\nif only_notifiers:\nreturn [  # type: ignore\nprop.get_notify_signal()\nfor prop in self.get_properties(include_super)\nif prop.hasNotifySignal()\n]\nelse:\nreturn self.get_methods(include_super=include_super, type_filter=\"signal\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_slots","title":"<code>get_slots(include_super: bool = True) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all slot MetaMethods based on given criteria.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_slots(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\n\"\"\"Get all slot MetaMethods based on given criteria.\"\"\"\nreturn self.get_methods(include_super=include_super, type_filter=\"slot\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_super_class","title":"<code>get_super_class() -&gt; MetaObject | None</code>","text":"<p>Get SuperClass MetaObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_super_class(self) -&gt; MetaObject | None:\n\"\"\"Get SuperClass MetaObject.\"\"\"\nreturn MetaObject(klass) if (klass := self.superClass()) is not None else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_user_property","title":"<code>get_user_property() -&gt; core.MetaProperty | None</code>","text":"<p>Get MetaProperty marked as userprop.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_user_property(self) -&gt; core.MetaProperty | None:\n\"\"\"Get MetaProperty marked as userprop.\"\"\"\nreturn core.MetaProperty(p) if (p := self.userProperty()).isValid() else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ObjectMixin","title":"<code>ObjectMixin(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._eventfilters = set()\n# klass = type(self)\n# if issubclass(klass, core.QObject) and klass not in _properties:\n#     metaobj = core.MetaObject(klass.staticMetaObject)\n#     _properties[klass] = [i.get_name() for i in metaobj.get_properties()]\n#     _signals[klass] = [i.get_name() for i in metaobj.get_signals()]\nnew = {}\nif kwargs:\nmapper = self._get_map()\nprops = get_properties(type(self))\nsignals = get_signals(type(self))\nfor k, v in kwargs.items():\n# this allows snake_case naming.\ncamel_k = helpers.to_lower_camel(k)\nif camel_k != k and camel_k in kwargs:\nlogger.warning(f\"{k} defined twice: {v} / {kwargs[camel_k]}\")\n# allow str values instead of enum\nif camel_k in mapper and isinstance(v, str):\nnew[camel_k] = mapper[camel_k][v]\n# allow str values for common icon kwargs\nelif camel_k in {\"windowIcon\", \"icon\"} and isinstance(v, str):\nfrom prettyqt import iconprovider\nnew[camel_k] = iconprovider.get_icon(v)\n# kwargs which need camel-casing\nelif camel_k in props or camel_k in signals:\nnew[camel_k] = v\nelse:\nnew[k] = v\nsuper().__init__(*args, **new)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.add_callback_for_event","title":"<code>add_callback_for_event(callback: Callable[[core.QEvent], bool], include: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None, exclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None) -&gt; eventfilters.EventCatcher</code>","text":"<p>Connect widget events to a callback.</p> <p>if include is set, it behaves like a whitelist. if exclude is set, it behaves like a blacklist. The QEvent is passed to the callback as an argument, and the callback needs to return True or False to indicate whether the Event should be filtered.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[core.QEvent], bool]</code> <p>Callback to execute when event is triggered</p> required <code>include</code> <code>core.QEvent.Type | Sequence[core.QEvent.Type] | None</code> <p>Events to include</p> <code>None</code> <code>exclude</code> <code>core.QEvent.Type | Sequence[core.QEvent.Type] | None</code> <p>Events to exclude</p> <code>None</code> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def add_callback_for_event(\nself,\ncallback: Callable[[core.QEvent], bool],\ninclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None,\nexclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None,\n) -&gt; eventfilters.EventCatcher:\n\"\"\"Connect widget events to a callback.\n    if include is set, it behaves like a whitelist.\n    if exclude is set, it behaves like a blacklist.\n    The QEvent is passed to the callback as an argument, and the callback\n    needs to return True or False to indicate whether the Event should be filtered.\n    Arguments:\n        callback: Callback to execute when event is triggered\n        include: Events to include\n        exclude: Events to exclude\n    \"\"\"\nfrom prettyqt import eventfilters\neventfilter = eventfilters.EventCatcher(include, exclude, callback, parent=self)\nself.installEventFilter(eventfilter)\nreturn eventfilter\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.find_child","title":"<code>find_child(typ: type[T] = core.QObject, name: str | core.QRegularExpression | None = None, recursive: bool = True) -&gt; T | None</code>","text":"<p>Find a child with given type and name.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_child(\nself,\ntyp: type[T] = core.QObject,\nname: str | core.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; T | None:\n\"\"\"Find a child with given type and name.\"\"\"\nif recursive:\nflag = constants.FindChildOption.FindChildrenRecursively\nelse:\nflag = constants.FindChildOption.FindDirectChildrenOnly\nmatch typ:\ncase types.UnionType():\nreturn next(\n(item for item in self.find_children(typ, name, recursive=recursive)),\nNone,\n)\ncase _:\nreturn self.findChild(typ, name, flag)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.find_children","title":"<code>find_children(typ: type[T] = core.QObject, name: str | datatypes.PatternType | None = None, recursive: bool = True, property_selector: dict[str, datatypes.VariantType | Callable] | None = None, only_prettyqt_classes: bool = False) -&gt; listdelegators.BaseListDelegator[T]</code>","text":"<p>Find children with given type and name.</p> <p>Children can be filtered by passing a property selector dictionary. It must contain the property name for keys and either a value which must be set or a predicate function which gets the property value as an argument and must return True if the child should be included.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>type[T]</code> <p>Subclass of QObject (can also be a UnionType)</p> <code>core.QObject</code> <code>name</code> <code>str | datatypes.PatternType | None</code> <p>ObjectName filter. None includes all.</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>whether to search for children recursively.</p> <code>True</code> <code>property_selector</code> <code>dict[str, datatypes.VariantType | Callable] | None</code> <p>dict containing PropertyName -&gt; Value/Predicate pairs.</p> <code>None</code> <code>only_prettyqt_classes</code> <code>bool</code> <p>only include objects with prettyqt superpowers.</p> <code>False</code> <p>Returns:</p> Type Description <code>listdelegators.BaseListDelegator[T]</code> <p>list of QObjects</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_children(\nself,\ntyp: type[T] = core.QObject,\nname: str | datatypes.PatternType | None = None,\nrecursive: bool = True,\nproperty_selector: dict[str, datatypes.VariantType | Callable] | None = None,\nonly_prettyqt_classes: bool = False,\n) -&gt; listdelegators.BaseListDelegator[T]:\n\"\"\"Find children with given type and name.\n    Children can be filtered by passing a property selector dictionary.\n    It must contain the property name for keys and either a value which must be set\n    or a predicate function which gets the property value as an argument\n    and must return True if the child should be included.\n    Arguments:\n        typ: Subclass of QObject (can also be a UnionType)\n        name: ObjectName filter. None includes all.\n        recursive: whether to search for children recursively.\n        property_selector: dict containing PropertyName -&gt; Value/Predicate pairs.\n        only_prettyqt_classes: only include objects with prettyqt superpowers.\n    Returns:\n        list of QObjects\n    \"\"\"\nif isinstance(name, re.Pattern):\nname = core.RegularExpression(name)\nif recursive:\nflag = constants.FindChildOption.FindChildrenRecursively\nelse:\nflag = constants.FindChildOption.FindDirectChildrenOnly\nmatch typ:\ncase types.UnionType():\nobjects = [\ni\nfor t in get_args(typ)\nfor i in self.findChildren(t, name=name, options=flag)\n]\ncase type():\nobjects = self.findChildren(typ, name=name, options=flag)\ncase _:\nraise TypeError(typ)\nif property_selector:\nobjects = [\no\nfor o in objects\nfor k, v in property_selector.items()\nif (callable(v) and v(o.property(k)))\nor (not callable(v) and o.property(k) == v)\n]\nif only_prettyqt_classes:\nobjects = [i for i in objects if i.__module__.startswith(\"prettyqt\")]\nreturn listdelegators.BaseListDelegator(objects)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.find_parent","title":"<code>find_parent(typ: type[T] = core.QObject, name: str | None = None) -&gt; T | None</code>","text":"<p>Find parent with given type or name.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_parent(\nself, typ: type[T] = core.QObject, name: str | None = None\n) -&gt; T | None:\n\"\"\"Find parent with given type or name.\"\"\"\nnode = self\nwhile node:\nnode = node.parent()\nif isinstance(node, typ) and (name is None or node.objectName() == name):\nreturn node\nreturn None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_dynamic_properties","title":"<code>get_dynamic_properties() -&gt; dict[str, Any]</code>","text":"<p>Get a dictionary with all dynamic properties.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_dynamic_properties(self) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary with all dynamic properties.\"\"\"\nreturn {\n(k := i.data().decode()): self.property(k)\nfor i in self.dynamicPropertyNames()\n}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_properties","title":"<code>get_properties(include_super: bool = True, cast: bool = True, only_writable: bool = False, only_nonempty: bool = False) -&gt; dict[str, Any]</code>","text":"<p>Get a dictionary containing all properties and their values.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_properties(\nself,\ninclude_super: bool = True,\ncast: bool = True,\nonly_writable: bool = False,\nonly_nonempty: bool = False,\n) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary containing all properties and their values.\"\"\"\nmetaobj = self.get_metaobject()\nprops = metaobj.get_properties(\ninclude_super=include_super, only_writable=only_writable\n)\ndct = {}\nfor i in props:\nif i.get_name() in [\"children\", \"frameShadow\", \"state\"]:\ncontinue\nval = i.read(self)\nif only_nonempty:\nmatch val:\ncase _ if hasattr(val, \"isNull\"):\ninclude = not val.isNull()\ncase _ if hasattr(val, \"isEmpty\"):\ninclude = not val.isEmpty()\ncase _ if hasattr(val, \"isValid\"):\ninclude = val.isValid()\ncase _:\ninclude = bool(val)\nelse:\ninclude = True\nif not include:\ncontinue\ndct[i.name()] = datatypes.make_serializable(val) if cast else val\nreturn dct\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.installEventFilter","title":"<code>installEventFilter(filter_: core.QObject | str, **kwargs: core.QObject | str)</code>","text":"<p>Override to also allow setting eventfilters by name.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def installEventFilter(self, filter_: core.QObject | str, **kwargs):\n\"\"\"Override to also allow setting eventfilters by name.\"\"\"\nif filter_ in self._eventfilters:\nlogger.warning(f\"Installing same EventFilter multiple times to {self}.\")\nreturn\nmatch filter_:\ncase core.QObject():\npass\ncase str():\nfrom prettyqt import eventfilters\nKlass = helpers.get_class_for_id(eventfilters.BaseEventFilter, filter_)\nfilter_ = Klass(parent=self, **kwargs)\ncase _:\nraise ValueError(filter_)\nself._eventfilters.add(filter_)\nsuper().installEventFilter(filter_)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.properties_set_to","title":"<code>properties_set_to(**kwargs)</code>","text":"<p>Context manager to temporarily set properties to different values.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef properties_set_to(self, **kwargs):\n\"\"\"Context manager to temporarily set properties to different values.\"\"\"\nprops = {k: self.property(k) for k in kwargs}\nfor k, v in kwargs.items():\nself.setProperty(k, v)\nyield self\nfor k, v in props.items():\nself.setProperty(k, v)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.set_properties","title":"<code>set_properties(props: dict[str, Any], include_super: bool = True)</code>","text":"<p>Set properties from a dictionary.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_properties(self, props: dict[str, Any], include_super: bool = True):\n\"\"\"Set properties from a dictionary.\"\"\"\nmetaobj = self.get_metaobject()\nmetaprops = metaobj.get_properties(include_super=include_super)\nfor metaprop in metaprops:\nif (name := metaprop.name()) in props:\nvalue = props[name]\nmetaprop.write(self, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.set_unique_id","title":"<code>set_unique_id()</code>","text":"<p>Set unique objectName.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_unique_id(self):\n\"\"\"Set unique objectName.\"\"\"\nclass_name = type(self).__name__\ncount = next(counter_dict[class_name])\nself.setObjectName(f\"{class_name}_{count}\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.signal_blocked","title":"<code>signal_blocked(signal: core.SignalInstance, receiver: Callable | core.SignalInstance)</code>","text":"<p>Context manager to temporarily disconnect specific signal.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef signal_blocked(\nself, signal: core.SignalInstance, receiver: Callable | core.SignalInstance\n):\n\"\"\"Context manager to temporarily disconnect specific signal.\"\"\"\nsignal.disconnect(receiver)\nyield self\nsignal.connect(receiver)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.signals_blocked","title":"<code>signals_blocked()</code>","text":"<p>Context manager to temporarily block emitting signals.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef signals_blocked(self):\n\"\"\"Context manager to temporarily block emitting signals.\"\"\"\nblocked = self.blockSignals(True)\nyield self\nself.blockSignals(blocked)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.start_callback_timer","title":"<code>start_callback_timer(callback: Callable, interval: int | str, single_shot: bool = False, timer_type: constants.TimerTypeStr = 'coarse') -&gt; core.Timer</code>","text":"<p>Start timer and execute callback when timeout reached.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def start_callback_timer(\nself,\ncallback: Callable,\ninterval: int | str,\nsingle_shot: bool = False,\ntimer_type: constants.TimerTypeStr = \"coarse\",\n) -&gt; core.Timer:\n\"\"\"Start timer and execute callback when timeout reached.\"\"\"\ninterval = helpers.parse_time(interval) if isinstance(interval, str) else interval\ntimer = core.Timer(\nself,\nsingle_shot=single_shot,\ninterval=interval,\ntimer_type=timer_type,\ntimeout=callback,\n)\ntimer.start()\nreturn timer\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.start_timer","title":"<code>start_timer(interval: int | str, timer_type: constants.TimerTypeStr = 'coarse') -&gt; int | None</code>","text":"<p>Start a timer and return the timer id, to be used in timerEvent.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def start_timer(\nself,\ninterval: int | str,\ntimer_type: constants.TimerTypeStr = \"coarse\",\n) -&gt; int | None:\n\"\"\"Start a timer and return the timer id, to be used in timerEvent.\"\"\"\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nresult = self.startTimer(interval, constants.TIMER_TYPE[timer_type])\nreturn None if result == 0 else result\n</code></pre>"},{"location":"api/core.html#prettyqt.core.OperatingSystemVersion","title":"<code>OperatingSystemVersion(typ: core.QOperatingSystemVersion.OSType | str, major: int, minor: int | None = None, micro: int | None = None)</code>","text":"<p>         Bases: <code>core.QOperatingSystemVersion</code></p> Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def __init__(\nself,\ntyp: core.QOperatingSystemVersion.OSType | str,\nmajor: int,\nminor: int | None = None,\nmicro: int | None = None,\n):\nos_type = OS_TYPE[typ] if isinstance(typ, str) else typ\nif minor is None:\nminor = -1\nif micro is None:\nmicro = -1\nsuper().__init__(os_type, major, minor, micro)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.get_type","title":"<code>get_type() -&gt; OsTypeStr</code>","text":"<p>Get current os type.</p> <p>Returns:</p> Type Description <code>OsTypeStr</code> <p>current os type</p> Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def get_type(self) -&gt; OsTypeStr:\n\"\"\"Get current os type.\n    Returns:\n        current os type\n    \"\"\"\nreturn OS_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Process","title":"<code>Process</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code>, <code>core.QProcess</code></p>"},{"location":"api/core.html#prettyqt.core.process.Process.set_input_channel_mode","title":"<code>set_input_channel_mode(mode: InputChannelModeStr | core.QProcess.InputChannelMode)</code>","text":"<p>Set the input channel mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InputChannelModeStr | core.QProcess.InputChannelMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_input_channel_mode(\nself, mode: InputChannelModeStr | core.QProcess.InputChannelMode\n):\n\"\"\"Set the input channel mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setInputChannelMode(INPUT_CHANNEL_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_process_channel_mode","title":"<code>set_process_channel_mode(mode: ProcessChannelModeStr | core.QProcess.ProcessChannelMode)</code>","text":"<p>Set the process channel mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ProcessChannelModeStr | core.QProcess.ProcessChannelMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_process_channel_mode(\nself, mode: ProcessChannelModeStr | core.QProcess.ProcessChannelMode\n):\n\"\"\"Set the process channel mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setProcessChannelMode(PROCESS_CHANNEL_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_read_channel","title":"<code>set_read_channel(channel: ProcessChannelStr | core.QProcess.ProcessChannelMode)</code>","text":"<p>Set the input channel channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>ProcessChannelStr | core.QProcess.ProcessChannelMode</code> <p>channel to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_read_channel(\nself, channel: ProcessChannelStr | core.QProcess.ProcessChannelMode\n):\n\"\"\"Set the input channel channel.\n    Args:\n        channel: channel to set\n    \"\"\"\nself.setReadChannel(PROCESS_CHANNELS.get_enum_value(channel))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_state","title":"<code>set_state(state: ProcessStateStr | core.QProcess.ProcessState)</code>","text":"<p>Set the process state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>ProcessStateStr | core.QProcess.ProcessState</code> <p>state to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_state(self, state: ProcessStateStr | core.QProcess.ProcessState):\n\"\"\"Set the process state.\n    Args:\n        state: state to set\n    \"\"\"\nself.setProcessState(PROCESS_STATES.get_enum_value(state))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.PropertyAnimation","title":"<code>PropertyAnimation(*args, **kwargs)</code>","text":"<p>         Bases: <code>core.VariantAnimationMixin</code>, <code>core.QPropertyAnimation</code></p> Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (core.QObject(), str(), *rest):\nsuper().__init__(args[0], bytes(args[1]), *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.propertyanimation.PropertyAnimation.get_property_value","title":"<code>get_property_value() -&gt; Any</code>","text":"<p>Return the value of the property which should get animated.</p> Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>def get_property_value(self) -&gt; Any:\n\"\"\"Return the value of the property which should get animated.\"\"\"\nprop_name = self.get_property_name()\nobj = self.targetObject()\nreturn obj.property(prop_name)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Settings","title":"<code>Settings</code>","text":"<p>         Bases: <code>Settings_</code></p> <p>Settings class which wraps everything into a dict to preserve data types.</p>"},{"location":"api/core.html#prettyqt.core.SocketNotifier","title":"<code>SocketNotifier</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>core.QSocketNotifier</code></p>"},{"location":"api/core.html#prettyqt.core.socketnotifier.SocketNotifier.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return socket event type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>socket event type</p> Source code in <code>prettyqt\\core\\socketnotifier.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return socket event type.\n    Returns:\n        socket event type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SortFilterProxyModel","title":"<code>SortFilterProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>core.AbstractProxyModelMixin</code>, <code>core.QSortFilterProxyModel</code></p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._filter_mode: FilterModeStr = \"wildcard\"\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.get_filter_case_sensitivity","title":"<code>get_filter_case_sensitivity() -&gt; constants.CaseSensitivityStr</code>","text":"<p>Return current filter case sensitivity.</p> <p>Returns:</p> Type Description <code>constants.CaseSensitivityStr</code> <p>filter case sensitivity</p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def get_filter_case_sensitivity(self) -&gt; constants.CaseSensitivityStr:\n\"\"\"Return current filter case sensitivity.\n    Returns:\n        filter case sensitivity\n    \"\"\"\nreturn constants.CASE_SENSITIVITY.inverse[super().filterCaseSensitivity()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_filter_case_sensitivity","title":"<code>set_filter_case_sensitivity(sensitivity: constants.CaseSensitivityStr | constants.CaseSensitivity)</code>","text":"<p>Set the filter case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>sensitivity</code> <code>constants.CaseSensitivityStr | constants.CaseSensitivity</code> <p>filter case sensitivity</p> required Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_filter_case_sensitivity(\nself, sensitivity: constants.CaseSensitivityStr | constants.CaseSensitivity\n):\n\"\"\"Set the filter case sensitivity.\n    Args:\n        sensitivity: filter case sensitivity\n    \"\"\"\nvalue = constants.CASE_SENSITIVITY.get_enum_value(sensitivity)\nsuper().setFilterCaseSensitivity(value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TextStream","title":"<code>TextStream</code>","text":"<p>         Bases: <code>QtCore.QTextStream</code></p>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_field_alignment","title":"<code>get_field_alignment() -&gt; FieldAlignmentStr</code>","text":"<p>Get current field alignment.</p> <p>Returns:</p> Type Description <code>FieldAlignmentStr</code> <p>current field alignment</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_field_alignment(self) -&gt; FieldAlignmentStr:\n\"\"\"Get current field alignment.\n    Returns:\n        current field alignment\n    \"\"\"\nreturn FIELD_ALIGNMENT.inverse[self.fieldAlignment()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_real_number_notation","title":"<code>get_real_number_notation() -&gt; RealNumberNotationStr</code>","text":"<p>Get current real number notation.</p> <p>Returns:</p> Type Description <code>RealNumberNotationStr</code> <p>current real number notation</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_real_number_notation(self) -&gt; RealNumberNotationStr:\n\"\"\"Get current real number notation.\n    Returns:\n        current real number notation\n    \"\"\"\nreturn REAL_NUMBER_NOTATION.inverse[self.realNumberNotation()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Get current status.</p> <p>Returns:</p> Type Description <code>StatusStr</code> <p>current status</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Get current status.\n    Returns:\n        current status\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_field_alignment","title":"<code>set_field_alignment(alignment: FieldAlignmentStr | QtCore.QTextStream.FieldAlignment)</code>","text":"<p>Set the field alignment.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>FieldAlignmentStr | QtCore.QTextStream.FieldAlignment</code> <p>field alignment</p> required Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_field_alignment(\nself, alignment: FieldAlignmentStr | QtCore.QTextStream.FieldAlignment\n):\n\"\"\"Set the field alignment.\n    Args:\n        alignment: field alignment\n    \"\"\"\nself.setFieldAlignment(FIELD_ALIGNMENT.get_enum_value(alignment))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_real_number_notation","title":"<code>set_real_number_notation(notation: RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation)</code>","text":"<p>Set the real number notation.</p> <p>Parameters:</p> Name Type Description Default <code>notation</code> <code>RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation</code> <p>real number notation</p> required Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_real_number_notation(\nself, notation: RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation\n):\n\"\"\"Set the real number notation.\n    Args:\n        notation: real number notation\n    \"\"\"\nself.setRealNumberNotation(REAL_NUMBER_NOTATION.get_enum_value(notation))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_status","title":"<code>set_status(status: StatusStr | QtCore.QTextStream.Status)</code>","text":"<p>Set the status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>StatusStr | QtCore.QTextStream.Status</code> <p>status</p> required Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_status(self, status: StatusStr | QtCore.QTextStream.Status):\n\"\"\"Set the status.\n    Args:\n        status: status\n    \"\"\"\nself.setStatus(STATUS.get_enum_value(status))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ThreadPool","title":"<code>ThreadPool</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>core.QThreadPool</code></p> <p>Note: signals only work correctly when exclusively using start_worker method.</p>"},{"location":"api/core.html#prettyqt.core.threadpool.ThreadPool.instance","title":"<code>instance() -&gt; Self</code>  <code>classmethod</code>","text":"<p>Return global ThreadPool singleton. (globalInstance always returns Qt type).</p> Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>@classmethod\ndef instance(cls) -&gt; Self:\n\"\"\"Return global ThreadPool singleton. (globalInstance always returns Qt type).\"\"\"\nif cls.__instance is None:\ncls.__instance = cls()\nreturn cls.__instance\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TimeLine","title":"<code>TimeLine</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>core.QTimeLine</code></p>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.get_direction","title":"<code>get_direction() -&gt; DirectionStr</code>","text":"<p>Return current direction.</p> <p>Returns:</p> Type Description <code>DirectionStr</code> <p>direction</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_direction(self) -&gt; DirectionStr:\n\"\"\"Return current direction.\n    Returns:\n        direction\n    \"\"\"\nreturn DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>state</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.set_direction","title":"<code>set_direction(direction: DirectionStr | core.QTimeLine.Direction)</code>","text":"<p>Set the direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>DirectionStr | core.QTimeLine.Direction</code> <p>direction</p> required Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def set_direction(self, direction: DirectionStr | core.QTimeLine.Direction):\n\"\"\"Set the direction.\n    Args:\n        direction: direction\n    \"\"\"\nself.setDirection(DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Timer","title":"<code>Timer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>core.QTimer</code></p>"},{"location":"api/core.html#prettyqt.core.timer.Timer.get_type","title":"<code>get_type() -&gt; constants.TimerTypeStr</code>","text":"<p>Return current timer type.</p> <p>Returns:</p> Type Description <code>constants.TimerTypeStr</code> <p>timer type</p> Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n    Returns:\n        timer type\n    \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.set_type","title":"<code>set_type(typ: constants.TimerTypeStr | constants.TimerType)</code>","text":"<p>Set the timer type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>constants.TimerTypeStr | constants.TimerType</code> <p>timer type</p> required Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def set_type(self, typ: constants.TimerTypeStr | constants.TimerType):\n\"\"\"Set the timer type.\n    Args:\n        typ: timer type\n    \"\"\"\nself.setTimerType(constants.TIMER_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Url","title":"<code>Url(*args, **kwargs)</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QUrl</code></p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (os.PathLike(), *rest):\npath = os.fspath(args[0])\nif pathlib.Path(path).exists():\npath = self.fromLocalFile(path)\nsuper().__init__(path, *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.is_special_url","title":"<code>is_special_url() -&gt; bool</code>","text":"<p>Return True if url is an about:... or other special URL.</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def is_special_url(self) -&gt; bool:\n\"\"\"Return True if url is an about:... or other special URL.\"\"\"\nreturn self.scheme() in (\"about\", \"file\") if self.isValid() else False\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.to_path","title":"<code>to_path() -&gt; pathlib.Path</code>","text":"<p>Get pathlib object from the URL.</p> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Path</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def to_path(self) -&gt; pathlib.Path:\n\"\"\"Get pathlib object from the URL.\n    Returns:\n        Path\n    \"\"\"\nreturn pathlib.Path(str(self))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.UuidMixin","title":"<code>UuidMixin</code>","text":""},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.to_string","title":"<code>to_string(fmt: StringFormatStr | QtCore.QUuid.StringFormat = 'with_braces') -&gt; str</code>","text":"<p>Return string representation of the Uuid.</p> <p>Allowed values are \"with_braces\", \"without_braces\", \"id_128\"</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>StringFormatStr | QtCore.QUuid.StringFormat</code> <p>Uuid format to use</p> <code>'with_braces'</code> Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def to_string(\nself, fmt: StringFormatStr | QtCore.QUuid.StringFormat = \"with_braces\"\n) -&gt; str:\n\"\"\"Return string representation of the Uuid.\n    Allowed values are \"with_braces\", \"without_braces\", \"id_128\"\n    Args:\n        fmt: Uuid format to use\n    \"\"\"\nreturn self.toString(STRING_FORMATS.get_enum_value(fmt))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.VariantAnimationMixin","title":"<code>VariantAnimationMixin</code>","text":"<p>         Bases: <code>core.AbstractAnimationMixin</code></p>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.append_reversed","title":"<code>append_reversed() -&gt; Self</code>","text":"<p>Append the reversed animation, effectively doubling the duration.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def append_reversed(self) -&gt; Self:\n\"\"\"Append the reversed animation, effectively doubling the duration.\"\"\"\nself.setDuration(self.duration() * 2)\nfirst_part = [(k / 2, v) for k, v in self.keyValues()]\nsecond_part = [(1 - (k / 2), v) for k, v in self.keyValues()]\nkeys = first_part + list(reversed(second_part))[1:]\nself.setKeyValues(keys)\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.reverse","title":"<code>reverse()</code>","text":"<p>True reverse instead of just setting direction.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def reverse(self):\n\"\"\"True reverse instead of just setting direction.\"\"\"\nself.setKeyValues(list(reversed(self.keyValues())))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.reversed","title":"<code>reversed() -&gt; VariantAnimation</code>","text":"<p>Return a reversed copy of the animation.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def reversed(self) -&gt; VariantAnimation:\n\"\"\"Return a reversed copy of the animation.\"\"\"\nnew = self.get_metaobject().copy(self)\nnew.reverse()\nreturn new\n</code></pre>"},{"location":"api/core.html#prettyqt.core.VersionNumber","title":"<code>VersionNumber(*args, **kwargs)</code>","text":"<p>         Bases: <code>QtCore.QVersionNumber</code></p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),):\nargs = [int(i) for i in args[0].split(\".\")][:3]\ncase (tuple(),):\nargs = args[0]\n# PySide6 Workaround:\ncase (QtCore.QVersionNumber(),):\nargs = (\nargs[0].majorVersion(),\nargs[0].minorVersion(),\nargs[0].microVersion(),\n)\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.major","title":"<code>major() -&gt; int</code>","text":"<p>An integer representing the major version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def major(self) -&gt; int:\n\"\"\"An integer representing the major version.\"\"\"\nreturn self.majorVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.micro","title":"<code>micro() -&gt; int</code>","text":"<p>An integer representing the micro version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def micro(self) -&gt; int:\n\"\"\"An integer representing the micro version.\"\"\"\nreturn self.microVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.minor","title":"<code>minor() -&gt; int</code>","text":"<p>An integer representing the minor version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def minor(self) -&gt; int:\n\"\"\"An integer representing the minor version.\"\"\"\nreturn self.minorVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.XmlStreamReader","title":"<code>XmlStreamReader</code>","text":"<p>         Bases: <code>QtCore.QXmlStreamReader</code></p>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return file error status.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>file error status</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return file error status.\n    Returns:\n        file error status\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.get_token_type","title":"<code>get_token_type() -&gt; TokenTypeStr</code>","text":"<p>Get the current token type.</p> <p>Returns:</p> Type Description <code>TokenTypeStr</code> <p>token type</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def get_token_type(self) -&gt; TokenTypeStr:\n\"\"\"Get the current token type.\n    Returns:\n        token type\n    \"\"\"\nreturn TOKEN_TYPE.inverse[self.tokenType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.read_next","title":"<code>read_next() -&gt; TokenTypeStr</code>","text":"<p>Read the next token and returns its type.</p> <p>Returns:</p> Type Description <code>TokenTypeStr</code> <p>token type</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def read_next(self) -&gt; TokenTypeStr:\n\"\"\"Read the next token and returns its type.\n    Returns:\n        token type\n    \"\"\"\nreturn TOKEN_TYPE.inverse[self.readNext()]\n</code></pre>"},{"location":"api/custom_delegates.html","title":"custom_delegates module","text":"<p>Module containing custom delegate classes.</p>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.EditorDelegate","title":"<code>EditorDelegate(*args, role: constants.ItemDataRole = constants.EDIT_ROLE, validator: gui.QValidator | widgets.lineedit.ValidatorStr | datatypes.PatternType | None = None, **kwargs: gui.QValidator | widgets.lineedit.ValidatorStr | datatypes.PatternType | None)</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate which supports editing a large range of data types.</p> <p>Allows editing a large range of different types from Qt, builtin libraries as well as some Numpy types.</p> <p>The Delegate also has an extended displayText method to show a repr-like string for different data types.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul> Source code in <code>prettyqt\\custom_delegates\\editordelegate.py</code> <pre><code>def __init__(\nself,\n*args,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\nvalidator: gui.QValidator\n| widgets.lineedit.ValidatorStr\n| datatypes.PatternType\n| None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._role = role\nself._validator = validator\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.HtmlItemDelegate","title":"<code>HtmlItemDelegate(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\htmlitemdelegate.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.doc = gui.TextDocument()\nself.text_option = gui.TextOption()\nself.text_option.setWrapMode(gui.TextOption.WrapMode.NoWrap)\nself.doc.setDefaultTextOption(self.text_option)\nself.doc.setDocumentMargin(0)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.ID","title":"<code>ID = 'html'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Delegate do display HTML text.</p> <p>An alternative approach would be go grab a pixmal from a QLabel for painting. (see ButtonDelegate)</p>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.IconDelegate","title":"<code>IconDelegate(role: constants.ItemDataRole = constants.USER_ROLE, **kwargs: constants.ItemDataRole)</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\icondelegate.py</code> <pre><code>def __init__(self, role: constants.ItemDataRole = constants.USER_ROLE, **kwargs):\nself._role = role\nself.margin = 10\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.icondelegate.IconDelegate.paint","title":"<code>paint(painter: gui.QPainter, option: widgets.QStyleOptionViewItem, index: core.ModelIndex)</code>","text":"<p>Override to paint an icon based on given Pixmap / Color / Icon.</p> <p>Pixmap / Color / Icon must be set to '_role'</p> <p>Parameters:</p> Name Type Description Default <code>painter</code> <code>gui.QPainter</code> <p>painter to paint the icon</p> required <code>option</code> <code>widgets.QStyleOptionViewItem</code> <p>state of the item to be displayed</p> required <code>index</code> <code>core.ModelIndex</code> <p>index which gets decorated</p> required Source code in <code>prettyqt\\custom_delegates\\icondelegate.py</code> <pre><code>def paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n\"\"\"Override to paint an icon based on given Pixmap / Color / Icon.\n    Pixmap / Color / Icon must be set to '_role'\n    Args:\n        painter (gui.QPainter): painter to paint the icon\n        option (widgets.QStyleOptionViewItem): state of the item to be displayed\n        index (core.ModelIndex): index which gets decorated\n    \"\"\"\nsuper().paint(painter, option, index)\nvalue = index.data(self._role)\nif not value:\nreturn\nmode = gui.Icon.Mode.Normal\nif not option.state &amp; widgets.Style.StateFlag.State_Enabled:\nmode = gui.Icon.Mode.Disabled\nelif option.state &amp; widgets.Style.StateFlag.State_Selected:\nmode = gui.Icon.Mode.Selected\nmatch value:\ncase gui.QPixmap():\nicon = gui.QIcon(value)\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase gui.QColor():\npixmap = gui.QPixmap(option.decorationSize)\npixmap.fill(value)\nicon = gui.QIcon(pixmap)\ncase gui.QImage():\nicon = gui.QIcon(gui.QPixmap.fromImage(value))\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase gui.QIcon():\nicon = value\nis_on = option.state &amp; widgets.Style.StateFlag.State_Open\nstate = gui.Icon.State.On if is_on else gui.Icon.State.Off\nactual_size = option.icon.actualSize(option.decorationSize, mode, state)\noption.decorationSize.boundedTo(actual_size)\ncase _:\nraise ValueError(value)\nr = core.Rect(core.Point(), option.decorationSize)\nr.moveCenter(option.rect.center())\nr.setRight(option.rect.right() - self.margin)\nstate = (\ngui.Icon.State.On\nif option.state &amp; widgets.Style.StateFlag.State_Open\nelse gui.Icon.State.Off\n)\nalignment = constants.ALIGN_RIGHT | constants.ALIGN_V_CENTER\nicon.paint(painter, r, alignment, mode, state)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.StarDelegate","title":"<code>StarDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> <p>A delegate class that allows us to render our star ratings.</p>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.createEditor","title":"<code>createEditor(parent: widgets.QWidget, option: widgets.QStyleOptionViewItem, index: core.ModelIndex)</code>","text":"<p>Create and return the StarEditor object we'll use to edit the StarRating.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n\"\"\"Create and return the StarEditor object we'll use to edit the StarRating.\"\"\"\neditor = StarEditor(parent)\neditor.editing_finished.connect(self.commitAndCloseEditor)\nreturn editor\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.setEditorData","title":"<code>setEditorData(editor: StarEditor, index: core.ModelIndex)</code>","text":"<p>Set the data to be displayed and edited by our custom editor.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def setEditorData(self, editor: StarEditor, index: core.ModelIndex):\n\"\"\"Set the data to be displayed and edited by our custom editor.\"\"\"\neditor.set_star_rating(index.data())\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.setModelData","title":"<code>setModelData(editor: widgets.QWidget, model: core.QAbstractItemModel, index: core.ModelIndex)</code>","text":"<p>Get the data from our custom editor and stuffs it into the model.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\n\"\"\"Get the data from our custom editor and stuffs it into the model.\"\"\"\nmodel.setData(index, editor.star_rating.star_count)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.sizeHint","title":"<code>sizeHint(option: widgets.QStyleOptionViewItem, index: core.ModelIndex)</code>","text":"<p>Return the size needed to display the item in a QSize object.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def sizeHint(self, option: widgets.QStyleOptionViewItem, index: core.ModelIndex):\n\"\"\"Return the size needed to display the item in a QSize object.\"\"\"\nstar_rating = StarRating(index.data())\nreturn star_rating.sizeHint()\n</code></pre>"},{"location":"api/custom_models.html","title":"custom_models module","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.ActionsModel","title":"<code>ActionsModel(actions: list[gui.QAction], parent: widgets.QWidget | None = None)</code>","text":"<p>         Bases: <code>custom_models.ColumnTableModel</code></p> <p>Table model to display a list of QActions.</p> <p>All properties of the Action can be edited.</p> Source code in <code>prettyqt\\custom_models\\actionsmodel.py</code> <pre><code>def __init__(self, actions: list[gui.QAction], parent: widgets.QWidget | None = None):\nsuper().__init__(actions, self.COLUMNS, parent=parent)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.AppearanceProxyModel","title":"<code>AppearanceProxyModel(foreground_default = None, background_default = None, font_default = None, alignment_default = None, **kwargs)</code>","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the \"style roles\" of the source model.</p> <p>In contrast to SliceAppearanceProxyModel, this one works in a more \"static\" way, meaning that you can change the color / font / alignment of indexes via model.setData even when the source model is not item-based (like a StandardItemModel).</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.AppearanceProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\nproxy = custom_models.AppearanceProxyModel()\nproxy.set_source_model(model)\nproxy.setData(proxy.index(0, 0), gui.QColor(\"red\"), role=constants.FOREGROUND_ROLE)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\appearanceproxymodel.py</code> <pre><code>def __init__(\nself,\nforeground_default=None,\nbackground_default=None,\nfont_default=None,\nalignment_default=None,\n**kwargs,\n):\nself._foregrounds = collections.defaultdict(lambda: None)\nself._backgrounds = collections.defaultdict(lambda: None)\nself._alignments = collections.defaultdict(lambda: None)\nself._fonts = collections.defaultdict(lambda: None)\nself._foreground_default = foreground_default\nself._background_default = background_default\nself._font_default = font_default\nself._alignment_default = alignment_default\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.AstModel","title":"<code>AstModel(ast_tree, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.TreeModel</code></p> <p>Tree model to display an Abstract syntax tree.</p> <p>The model shows a tree of all nodes from an abstract syntax tree They are part of the builtin <code>ast</code> module.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.AstModel--example","title":"Example:","text":"<pre><code>import ast\nview = TreeView()\ncode = pathlib.Path(__file__).read_text()\ntree = ast.parse(code)\nmodel = AstModel(tree)\nview.set_model(model)\n</code></pre> Source code in <code>prettyqt\\custom_models\\astmodel.py</code> <pre><code>def __init__(self, ast_tree, **kwargs):\nsuper().__init__(None, **kwargs)\nself.ast_tree = None\nself.code = \"\"\nself.set_ast(ast_tree)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.BaseDataclassModel","title":"<code>BaseDataclassModel(items: Sequence, **kwargs: Sequence)</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\basedataclassmodel.py</code> <pre><code>def __init__(self, items: Sequence, **kwargs):\nsuper().__init__(**kwargs)\nself.items = items\nklasses = [type(i) for i in items]\nself.Class = lca_type(klasses)\nlogger.debug(f\"{type(self).__name__}: found common ancestor {self.Class}\")\nself._fields = self.get_fields()\nself._field_names = list(self._fields.keys())\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.basedataclassmodel.BaseDataclassModel.flags","title":"<code>flags(parent: core.ModelIndex) -&gt; constants.ItemFlag</code>","text":"<p>Override.</p> <p>BaseClass implementation just tries to set attribute with same value to test if field is writable. If possible, subclasses should find a more efficient way.</p> Source code in <code>prettyqt\\custom_models\\basedataclassmodel.py</code> <pre><code>def flags(self, parent: core.ModelIndex) -&gt; constants.ItemFlag:\n\"\"\"Override.\n    BaseClass implementation just tries to set attribute with same value to test\n    if field is writable. If possible, subclasses should find a more efficient way.\n    \"\"\"\nif not parent.isValid():\nreturn super().flags(parent)\nfield_name = self._field_names[parent.column()]\ninstance = self.items[parent.row()]\n# need to cover not parent.isValid()?\nval = getattr(instance, field_name)\nwith contextlib.suppress(Exception):\nsetattr(instance, field_name, val)\nif isinstance(val, bool):\nreturn super().flags(parent) | constants.IS_CHECKABLE\nelse:\nreturn super().flags(parent) | constants.IS_EDITABLE\nreturn super().flags(parent)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.basedataclassmodel.BaseDataclassModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\basedataclassmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.items)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.BaseFieldsModel","title":"<code>BaseFieldsModel(instance, **kwargs)</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\basefieldsmodel.py</code> <pre><code>def __init__(self, instance, **kwargs):\nself._instance = instance\nself._fields = self.get_fields(instance)\nself._field_names = list(self._fields.keys())\nsuper().__init__(**kwargs)\nself.set_instance(instance)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.basefieldsmodel.BaseFieldsModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\basefieldsmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self._field_names)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ChangeHeadersProxyModel","title":"<code>ChangeHeadersProxyModel(header: list[Any] | dict[int, Any], orientation: constants.Orientation | constants.OrientationStr = constants.HORIZONTAL, role: constants.ItemDataRole = constants.DISPLAY_ROLE, **kwargs: constants.ItemDataRole)</code>","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the header data (either horizontal or vertical).</p> <p>Header data can either be changed by passing a list with same length as source length or by passing a dictionary with index as key and new value as value (Example: {1: \"abc\", 3: \"def\"} changes section 1 to \"abc\" and section 3 to \"def\") Apart from the regular use case of changing the text, the other roles can be changed, too.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.ChangeHeadersProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.change_headers(header=[\"x\", \"y\", \"z\"],\norientation=constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE\n)\ntable.show()\n# or\nmodel = MyModel()\nproxy = ChangeHeadersProxyModel(\nheader=[\"x\", \"y\", \"z\"], orientation=constants.VERTICAL\n)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\changeheadersproxymodel.py</code> <pre><code>def __init__(\nself,\nheader: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself._header = header\nself._role = role\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnItem","title":"<code>ColumnItem(model: core.QAbstractItemModel)</code>","text":"<p>Determines how an object attribute is shown.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def __init__(self, model: core.QAbstractItemModel):\nself.model = model\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnJoinerProxyModel","title":"<code>ColumnJoinerProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model which joins the contents of several columns.</p> <p>The columns are joined based on a formatter and appended to the end of the model as a new column.</p> <p>The formatter must look like <code>{0} - {1}: {4}</code>. The format codes are then populated with the content of given columns, in this case it would be <code>{Text of column 0} - {Text of Column 1}: {Text of Column 4}</code></p>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnJoinerProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.join_columns(formatter=\"{0} - {2}\", header=\"New column\")\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnJoinerProxyModel()\nproxy.set_source_model(model)\nproxy.add_column(formatter=\"{0} - {2}\", header=\"New column\")\nproxy.add_column(formatter=\"{4}: {5}\", header=\"Another column\")\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\columnjoinerproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.mapping = []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.columnjoinerproxymodel.ColumnJoinerProxyModel.add_mapping","title":"<code>add_mapping(header: str, formatter: str, flags: constants.ItemFlag | None = None)</code>","text":"<p>Add a new column to the table.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Label used for the section header.</p> required <code>formatter</code> <code>str</code> <p>String formatter (example \"{0}: {1}\")</p> required <code>flags</code> <code>constants.ItemFlag | None</code> <p>ItemFlags for new column</p> <code>None</code> Source code in <code>prettyqt\\custom_models\\proxies\\columnjoinerproxymodel.py</code> <pre><code>def add_mapping(\nself, header: str, formatter: str, flags: constants.ItemFlag | None = None\n):\n\"\"\"Add a new column to the table.\n    Arguments:\n        header: Label used for the section header.\n        formatter: String formatter (example \"{0}: {1}\")\n        flags: ItemFlags for new column\n    \"\"\"\nself.mapping.append(ColumnMapping(formatter, header, flags))\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnOrderProxyModel","title":"<code>ColumnOrderProxyModel(order: list[int], **kwargs: list[int])</code>","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which reorders the columns of the source model.</p> <p>Proxy model which reorders / hides the columns of the source model by passing a list containing the new order. If not all indexes are part of the list, then the missing sections will be hidden.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnOrderProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.reorder_columns(order=[3, 2, 0])\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnOrderProxyModel(order=[3, 2, 0])\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\columnorderproxymodel.py</code> <pre><code>def __init__(self, order: list[int], **kwargs):\nself._column_order = order\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnTableModel","title":"<code>ColumnTableModel(items: Sequence, columns: Sequence[ColumnItem], mime_type: str | None = None, **kwargs: str | None)</code>","text":"<p>         Bases: <code>ColumnItemModelMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def __init__(\nself,\nitems: Sequence,\ncolumns: Sequence[ColumnItem],\nmime_type: str | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.items = items\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.add","title":"<code>add(item: Any, position: int | None = None)</code>","text":"<p>Append provided item to the list.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.add_items","title":"<code>add_items(items: Iterable[Any], position: int | None = None)</code>","text":"<p>Append a list of items to the list.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i, _ in enumerate(items):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.sort","title":"<code>sort(ncol: int, order: int)</code>","text":"<p>Sort table by given column number.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self._attr_cols[ncol].label:\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.DataClassFieldsModel","title":"<code>DataClassFieldsModel(instance: datatypes.IsDataclass, **kwargs: datatypes.IsDataclass)</code>","text":"<p>         Bases: <code>custom_models.BaseFieldsModel</code></p> <p>Table model to display the fields and their metadata of an dataclass.</p> <p>Frozen dataclasses are read-only, otherwise the data can be modified.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\dataclassfieldsmodel.py</code> <pre><code>def __init__(self, instance: datatypes.IsDataclass, **kwargs):\nsuper().__init__(instance, **kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.DataClassModel","title":"<code>DataClassModel(items: Sequence[datatypes.IsDataclass], **kwargs: Sequence[datatypes.IsDataclass])</code>","text":"<p>         Bases: <code>custom_models.BaseDataclassModel</code></p> <p>Table model to display a list of dataclasses.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\dataclassmodel.py</code> <pre><code>def __init__(self, items: Sequence[datatypes.IsDataclass], **kwargs):\nsuper().__init__(items, **kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.FuzzyFilterProxyModel","title":"<code>FuzzyFilterProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel which sorts the results based on a matching score.</p> <p>The matching score evaluates metrics like upper/lower casing, distance of filter character to match character and some more. Best matches are shown at the top.</p> <p>The matching score is exposed as a custom UserRole (FuzzyFilterProxyModel.Roles.SortRole) The proxymodel replaces the text from the display role in the given filter column with HTML code in order to color the letter matches. A backup from the original text is made available in the BackupRole. Based on the original text, the proxy calculates a score for the match and makes it available via the SortRole. To display the html code properly, a HtmlItemDelegate is needed.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.FuzzyFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = custom_models.FuzzyFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\fuzzyfilterproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, filter_mode=\"fuzzy\", **kwargs)\nself._search_term = \"\"\nself._match_color: gui.QColor = gui.Color(\"blue\")\nself.sort(0, constants.DESCENDING)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.fuzzyfilterproxymodel.FuzzyFilterProxyModel.Roles","title":"<code>Roles</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Addional roles.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.HighlightMouseProxyModel","title":"<code>HighlightMouseProxyModel(parent: widgets.QAbstractItemView, role: constants.ItemDataRole = constants.DISPLAY_ROLE, mode: HighlightModeStr = 'both', highlight_color: datatypes.ColorType = 'red', **kwargs: datatypes.ColorType)</code>","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same row / column as mouse position.</p> <p>The proxy can work in four different modes.</p> <ul> <li>column: The column the mouse is currently hovering over is highlighted.</li> <li>row: The row the mouse is currently hovering over is highlighted.</li> <li>both: Combination of column and row mode.</li> <li>single: only the hovered cell is highlighted.</li> </ul> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def __init__(\nself,\nparent: widgets.QAbstractItemView,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"both\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(parent, **kwargs)\nparent.setMouseTracking(True)\nparent.entered.connect(self.cell_entered)\nparent.installEventFilter(self)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ImportlibTreeModel","title":"<code>ImportlibTreeModel(obj: metadata.Distribution | str, show_root: bool = False, parent: core.QObject | None = None)</code>","text":"<p>         Bases: <code>custom_models.ColumnItemModel</code></p> <p>Model showing the dependency tree of a distribution.</p> <p>Attention: Model can be recursive, so be careful with iterating whole tree.</p> Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def __init__(\nself,\nobj: metadata.Distribution | str,\nshow_root: bool = False,\nparent: core.QObject | None = None,\n):\nif isinstance(obj, str):\nobj = metadata.distribution(obj)\nsuper().__init__(\nobj=obj, columns=self.COLUMNS, parent=parent, show_root=show_root\n)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.JsonModel","title":"<code>JsonModel(obj: Any, show_root: bool = True, **kwargs: bool)</code>","text":"<p>         Bases: <code>custom_models.ColumnItemModel</code></p> Source code in <code>prettyqt\\custom_models\\jsonmodel.py</code> <pre><code>def __init__(\nself,\nobj: Any,\nshow_root: bool = True,\n**kwargs,\n):\nsuper().__init__(\nobj=JsonItem(key=\"\", value=obj, typ=type(obj)),\ncolumns=self.COLUMNS,\nshow_root=show_root,\n**kwargs,\n)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ListMixin","title":"<code>ListMixin(*args, items = None, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def __init__(self, *args, items=None, **kwargs):\nsuper().__init__(*args, **kwargs)  # type: ignore\nself.items = items or []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.add","title":"<code>add(item: Any, position: int | None = None)</code>","text":"<p>Append provided item to the list.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.add_items","title":"<code>add_items(items: Iterable[Any], position: int | None = None)</code>","text":"<p>Append a list of items to the list.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i in range(len(items)):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.mimeData","title":"<code>mimeData(indexes)</code>","text":"<p>AbstractItemModel override, defines the data used for drag and drop.</p> <p>atm this just returns the positions (not sure if this is perfect)</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def mimeData(self, indexes):\n\"\"\"AbstractItemModel override, defines the data used for drag and drop.\n    atm this just returns the positions (not sure if this is perfect)\n    \"\"\"\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Required override for AbstractitemModels.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Required override for AbstractitemModels.\"\"\"\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.items)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.set_list","title":"<code>set_list(values)</code>","text":"<p>Set the model to a new list.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def set_list(self, values):\n\"\"\"Set the model to a new list.\"\"\"\nwith self.reset_model():\nself.items = values\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.sort","title":"<code>sort(ncol: int, order: int)</code>","text":"<p>Sort table by given column number.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self.SORT_METHODS.get(ncol):\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.MeltProxyModel","title":"<code>MeltProxyModel(id_columns: list[int], var_name: str = 'Variable', value_name: str = 'Value', **kwargs: str)</code>","text":"<p>         Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model to unpivot a table from wide format to long format.</p> <p>Works same way as pandas.melt.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def __init__(\nself,\nid_columns: list[int],\nvar_name: str = \"Variable\",\nvalue_name: str = \"Value\",\n**kwargs,\n):\nself._id_columns = id_columns\nself._var_name = var_name\nself._value_name = value_name\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.get_id_columns","title":"<code>get_id_columns() -&gt; list[int]</code>","text":"<p>Get list of identifier columns.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def get_id_columns(self) -&gt; list[int]:\n\"\"\"Get list of identifier columns.\"\"\"\nreturn self._id_columns\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.get_value_name","title":"<code>get_value_name() -&gt; str</code>","text":"<p>Get value column header.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def get_value_name(self) -&gt; str:\n\"\"\"Get value column header.\"\"\"\nreturn self._value_name\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.get_var_name","title":"<code>get_var_name() -&gt; str</code>","text":"<p>Get variable column header.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def get_var_name(self) -&gt; str:\n\"\"\"Get variable column header.\"\"\"\nreturn self._var_name\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.set_id_columns","title":"<code>set_id_columns(columns: list[int])</code>","text":"<p>Set identifier variable columns.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def set_id_columns(self, columns: list[int]):\n\"\"\"Set identifier variable columns.\"\"\"\nself._id_columns = columns\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.set_value_name","title":"<code>set_value_name(name: str)</code>","text":"<p>Set header for value column.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def set_value_name(self, name: str):\n\"\"\"Set header for value column.\"\"\"\nself._value_name = name\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.set_var_name","title":"<code>set_var_name(name: str)</code>","text":"<p>Set header for variable column.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def set_var_name(self, name: str):\n\"\"\"Set header for variable column.\"\"\"\nself._var_name = name\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ModelIndexModel","title":"<code>ModelIndexModel(indexes: list[core.ModelIndex], **kwargs: list[core.ModelIndex])</code>","text":"<p>         Bases: <code>custom_models.ListMixin</code>, <code>core.AbstractTableModel</code></p> <p>Table model for displaying a the data of a list of ModelIndexes.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.ModelIndexModel--example","title":"Example:","text":"<pre><code># get indexes from some random model\nmy_model = ParentClassTreeModel(widgets.QWidget, show_mro=True)\nindexes = list(my_model.iter_tree(fetch_more=True))\nmodel = ModelIndexModel(indexes=indexes)\n</code></pre> Source code in <code>prettyqt\\custom_models\\modelindexmodel.py</code> <pre><code>def __init__(\nself,\nindexes: list[core.ModelIndex],\n**kwargs,\n):\nself._use_model_roles = False\nsuper().__init__(**kwargs)\nself.items = indexes\nself._update_columns()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ModelMixin","title":"<code>ModelMixin</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.flags","title":"<code>flags(index: core.ModelIndex) -&gt; constants.ItemFlag</code>","text":"<p>Override for AbstractitemModel base method.</p> <p>returns corresponding flags for cell of supplied index</p> Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>def flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\n\"\"\"Override for AbstractitemModel base method.\n    returns corresponding flags for cell of supplied index\n    \"\"\"\nif not index.isValid():\nreturn constants.DROP_ENABLED\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.MultiColumnFilterProxyModel","title":"<code>MultiColumnFilterProxyModel(parent = None, **kwargs)</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A SortFilterProxyModel which filters based on multiple columns in one go.</p> <p>This proxy uses seperate search term / values for each column in order to filter the source model, thus avoiding to layer proxy models in case you want to filter based on several columns. That way it is less demanding since filtering for all columns is done in one go.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.MultiColumnFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = custom_models.MultiColumnFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\multicolumnfilterproxymodel.py</code> <pre><code>def __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: dict[int, Filter] = {}\nself.setRecursiveFilteringEnabled(True)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.NestedItem","title":"<code>NestedItem(parent: Self | None = None, dynamic_name: str | None = None, count: int | None = None, children: Sequence[Self] | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def __init__(\nself,\nparent: Self | None = None,\ndynamic_name: str | None = None,\ncount: int | None = None,\nchildren: Sequence[Self] | None = None,\n):\nself.parent = parent\nself.dynamic_name = dynamic_name or self.item_name\nself.count = count\n# self.timestamp = kwargs.pop(\"timestamp\", time.time())\nself.children: Sequence[Self] = []\nif children:\nself.add_children(children)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.iter_tree","title":"<code>iter_tree(name: str | None = None, yield_self: bool = True, recursive: bool = True, level: int = 0, count: int = 0, assign_names: bool = True)</code>","text":"<p>Yield children from bottom to top, yield self at end.</p> <p>assigns dynamic vars count, level and dynamic name</p> Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def iter_tree(\nself,\nname: str | None = None,\nyield_self: bool = True,\nrecursive: bool = True,\nlevel: int = 0,\ncount: int = 0,\nassign_names: bool = True,\n):\n\"\"\"Yield children from bottom to top, yield self at end.\n    assigns dynamic vars count, level and dynamic name\n    \"\"\"\nif name is None:\nname = self.item_name\nfor i, c in enumerate(self.children, start=1):\ncount += 1\nlevel += 1\nwith_suffix = f\"{name}_{i}\" if len(self.children) &gt; 1 else name\nif recursive:\nyield from c.iter_tree(\nwith_suffix, yield_self=False, level=level, count=count\n)\nif assign_names:\nc.dynamic_name, c.count = with_suffix, count\nyield c\nlevel -= 1\nif yield_self:\nif assign_names:\nself.dynamic_name, self.count = name, 0\nyield self\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.row","title":"<code>row() -&gt; int</code>","text":"<p>Return row number.</p> <p>returns row position of item inside parent`s children returns 0 if no parent available</p> <p>Returns:</p> Type Description <code>int</code> <p>row number</p> Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def row(self) -&gt; int:\n\"\"\"Return row number.\n    returns row position of item inside parent`s children\n    returns 0 if no parent available\n    Returns:\n        row number\n    \"\"\"\nreturn self.parent.children.index(self) if self.parent else 0\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.NestedModel","title":"<code>NestedModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.ListMixin</code>, <code>custom_models.ModelMixin</code>, <code>core.AbstractItemModel</code></p> Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.root = Root()\nself.items = self.root.children\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.json","title":"<code>json(root = None) -&gt; dict</code>","text":"<p>Serialise model as JSON-compliant dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>JsonTreeItem</code> <p>Serialise from here defaults to the the top-level item</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>model as dict</p> Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def json(self, root=None) -&gt; dict:\n\"\"\"Serialise model as JSON-compliant dictionary.\n    Arguments:\n        root (JsonTreeItem, optional): Serialise from here\n            defaults to the the top-level item\n    Returns:\n        model as dict\n    \"\"\"\nroot = root or self.root\nreturn root.as_json()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ParentClassTreeModel","title":"<code>ParentClassTreeModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>BaseClassTreeModel</code></p> <p>Tree model to display the parent class tree of a python class.</p> Source code in <code>prettyqt\\custom_models\\classtreemodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._show_mro = False\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.PredicateFilterProxyModel","title":"<code>PredicateFilterProxyModel(parent = None, **kwargs)</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A simple filter proxy model with settable filter predicates.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.PredicateFilterProxyModel--example","title":"Example:","text":"<pre><code>proxy = PredicateFilterProxyModel()\nproxy.add_filter(lambda value: value &lt; 1)\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\predicatefilterproxymodel.py</code> <pre><code>def __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: list[Callable[[Any], bool]] = []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ProxyMapper","title":"<code>ProxyMapper(*proxies: core.QAbstractItemModel, **kwargs: core.QAbstractItemModel)</code>","text":"<p>         Bases: <code>core.Object</code></p> <p>Class to map indexes / ItemSelections from one proxy to another.</p> <p>Also handles cases like: <pre><code>            Root model\n                |\n           shared proxy\n           /                      Proxy_1_1     Proxy_2_1\n          |            |\n        Proxy_1_2     Proxy_2_2\n</code></pre> When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then mapFromSource / mapSelectionFromSource to get down to 2_2.</p> Source code in <code>prettyqt\\custom_models\\proxies\\proxymapper.py</code> <pre><code>def __init__(\nself,\n*proxies: core.QAbstractItemModel,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nchains = [self.get_proxy_chain(proxy) for proxy in proxies]\ncommon_list = [\nelement\nfor element in chains[0]\nif all(element in sublist for sublist in chains[1:])\n]\nif not common_list:\nraise RuntimeError(\"No common source model\")\ncommon_source = common_list[0]\nlogger.debug(f\"Common source: {common_source}\")\nself._chains = [chain[: chain.index(common_source)] for chain in chains]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.PythonObjectTreeModel","title":"<code>PythonObjectTreeModel(obj, parent = None)</code>","text":"<p>         Bases: <code>custom_models.ColumnItemModel</code></p> Source code in <code>prettyqt\\custom_models\\pythonobjecttreemodel.py</code> <pre><code>def __init__(self, obj, parent=None):\nsuper().__init__(obj, self.COLUMNS, show_root=False, parent=parent)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.pythonobjecttreemodel.PythonObjectTreeModel.get_path_for_index","title":"<code>get_path_for_index(index: core.ModelIndex) -&gt; str</code>","text":"<p>Get the path for the object referenced by index.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.pythonobjecttreemodel.PythonObjectTreeModel.get_path_for_index--example","title":"Example:","text":"<pre><code>An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n</code></pre> Source code in <code>prettyqt\\custom_models\\pythonobjecttreemodel.py</code> <pre><code>def get_path_for_index(self, index: core.ModelIndex) -&gt; str:\n\"\"\"Get the path for the object referenced by index.\n    ### Example:\n    ```\n    An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n    ```\n    \"\"\"\n# TODO: not used yet, better rework ColumnItemModel first\ntreeitem = index.data(constants.USER_ROLE)\nif treeitem is None:\nreturn\nprev_data = treeitem.obj\npieces = []\nwhile (index := index.parent()).isValid():\ntreeitem = index.data(constants.USER_ROLE)\ndata = treeitem.obj\nmatch data:\ncase Mapping():\nfor k, v in data.items():\nif v is prev_data:\npieces.append(f\"[{k!r}]\")\nbreak\ncase Iterable():\npieces.append(f\"[{data.index(prev_data)}]\")\ncase _:\n# or should this be treeitem.obj_name?\npieces.append(f\".{prev_data.__name__}\")\nprev_data = data\npieces.append(treeitem.obj_name)\nlogger.info(pieces)\nreturn \"\".join(reversed(pieces))\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.RegexMatchesModel","title":"<code>RegexMatchesModel(matches: list | None = None, **kwargs: list | None)</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def __init__(self, matches: list | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.matches = matches or []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.matches)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceChangeFlagsProxyModel","title":"<code>SliceChangeFlagsProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to selectively change the ItemFlags of the source model.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicechangeflagsproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._flags_to_remove: constants.ItemFlag = constants.ItemFlag(0)\nself._flags_to_add: constants.ItemFlag = constants.ItemFlag(0)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceChangeIconSizeProxyModel","title":"<code>SliceChangeIconSizeProxyModel(size: datatypes.SizeType, **kwargs: datatypes.SizeType)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model which changes the icon size of the Decoration role.</p> <p>Supports QColors, QPixmaps and QIcons in DecorationRole.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicechangeiconsizeproxymodel.py</code> <pre><code>def __init__(self, size: datatypes.SizeType, **kwargs):\nsuper().__init__(**kwargs)\nself._size = datatypes.to_size(size)\nself._cache = {}\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceCheckableProxyModel","title":"<code>SliceCheckableProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to make a model checkable.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceCheckableProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceCheckableProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicecheckableproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: set[tuple[int, int]] = set()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceCheckableTreeProxyModel","title":"<code>SliceCheckableTreeProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to make a tree model checkable.</p> <p>In contrast to SliceCheckableProxyModel, any checkstate change is propagated to parent and child indexes. (child indexes will also get the new checkstate, parent indexes will become partially checked if needed.)</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceCheckableTreeProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TreeView()\ntable.set_model(model)\ntable.proxifier[:, 0].set_checkable(tree=True)\ntable.show()\n# or\nproxy = custom_models.SliceCheckableTreeProxyModel(indexer=0)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicecheckableproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: dict[tuple[int, int], constants.CheckState] = {}\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceColorValuesProxyModel","title":"<code>SliceColorValuesProxyModel(*args, mode: ColorMode = ColorMode.Visible, **kwargs: ColorMode)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Model to color cells of a numerical table based on their value.</p> <p>By default, \"high\" numbers are colored red, \"low\" are colored green.</p> <p>Possible modes are: * All: Highlight all cells within given slice * Column: Highlight all cells of same column as current if cell is within given slice. * Row: Highlight all cells of same row as current if cell is within given slice.</p> <p>The last two modes have the advantage that nothing needs to be computed in advance, min/max values are calculated on-the fly.</p> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceColorValuesProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.color_values(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = custom_models.SliceColorValuesProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicecolorvaluesproxymodel.py</code> <pre><code>def __init__(self, *args, mode: ColorMode = ColorMode.Visible, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._mode = mode\nself._max = 0.0\nself._role = constants.USER_ROLE\nself._last_span = ((-1, -1), (-1, -1))\nself._low_color = gui.QColor(\"green\")\nself._high_color = gui.QColor(\"red\")\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceDisplayTextProxyModel","title":"<code>SliceDisplayTextProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to convert and format non-str values for the DisplayRole.</p> <p>Usually, formatting of numbers etc is done by the ItemDelegate. By moving the formatting into a proxy layer instead, we can keep the ItemDelegate spot free for other stuff.</p> <p>Information about string formatting:</p> <p>https://docs.python.org/3/library/string.html#format-specification-mini-language</p> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceDisplayTextProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.format_text(int_format=\"{:0&gt;2d}\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = SliceDisplayTextProxyModel(indexer=indexer, float_format=\"{:.4f}\")\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicedisplaytextproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._int_format = \"{:.4f}\"\nself._float_format = \"{:.4f}\"\nself._datetime_format = \"%m/%d/%Y, %H:%M:%S\"\nself._date_format = \"%m/%d/%Y\"\nself._time_format = \"%H:%M:%S\"\n# self._force_override = False\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceFilterProxyModel","title":"<code>SliceFilterProxyModel</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to filter an item view based on python slicing syntax.</p> <p>Since slicing operations are bijective, this model can filter without looping through rows or columns. Thus, this should perform much better than a SortFilterProxyModel with a column filter. (O(1) instead of O(n))</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceFilterProxyModel--example","title":"Example","text":"<p>To filter out every second row, and cut off the the first two columns:</p> <pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].filter()\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicefilterproxymodel.SliceFilterProxyModel.headerData","title":"<code>headerData(section: int, orientation: constants.Orientation, role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Map header data to proxy by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicefilterproxymodel.py</code> <pre><code>def headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Map header data to proxy by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nis_horizontal = orientation == constants.HORIZONTAL\nrng = self.get_column_range() if is_horizontal else self.get_row_range()\npos = rng.start + section * rng.step\nreturn super().headerData(pos, orientation, role)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapFromSource","title":"<code>mapFromSource(source_index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source by calculating position based on slice values.</p> <p>proxy pos = source pos - slice start / slice step</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index from source by calculating position based on slice values.\n    proxy pos = source pos - slice start / slice step\n    \"\"\"\nif self.sourceModel() is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow_pos = self.position_in_row_slice(source_index.row())\ncol_pos = self.position_in_column_slice(source_index.column())\nreturn self.createIndex(row_pos, col_pos, source_index.internalPointer())\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapToSource","title":"<code>mapToSource(proxy_idx: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index to source by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index to source by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * proxy_idx.column())\nrow_pos = row_range.start + (row_range.step * proxy_idx.row())\nreturn source.index(row_pos, col_pos)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceHighlightCurrentProxyModel","title":"<code>SliceHighlightCurrentProxyModel(role = constants.DISPLAY_ROLE, mode: HighlightModeStr = 'column', highlight_color: datatypes.ColorType = 'red', **kwargs: datatypes.ColorType)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same data as current index.</p> <p>Highlights all cells with same content in given role as currently focused cell with a user-specified color.</p> <p>Possible modes are:</p> <ul> <li><code>all</code>: Highlight all cells with same value.</li> <li><code>column</code>: Highlight all cells with same value and same column as current.</li> <li><code>row</code>: Highlight all cells with same value and same row as current.</li> </ul> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceHighlightCurrentProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.highlight_current(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = custom_models.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def __init__(\nself,\nrole=constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"column\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(**kwargs)\nparent: widgets.AbstractItemView = self.parent()  # type: ignore\nparent.model_changed.connect(self._on_model_change)\nif sel_model := parent.selectionModel():\nsel_model.currentChanged.connect(self._on_current_change)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_role","title":"<code>get_highlight_role() -&gt; constants.ItemDataRole</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_role(self) -&gt; constants.ItemDataRole:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._data_role\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_role","title":"<code>set_highlight_role(mode: constants.ItemDataRole)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_role(self, mode: constants.ItemDataRole):\n\"\"\"Set highlight mode.\"\"\"\nself._data_role = mode\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceIdentityProxyModel","title":"<code>SliceIdentityProxyModel(indexer = None, **kwargs)</code>","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Base model for slice proxy models.</p> <p>By itself, this proxy does nothing. It just provides all needed helper functions to deal with slices. <code>indexer_contains</code> should be just by subclasses in order to check whether the proxy should be applied.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def __init__(self, indexer=None, **kwargs):\nsuper().__init__(**kwargs)\nself._indexer = (slice(None), slice(None))\nself.set_indexer(indexer)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_range","title":"<code>get_column_range() -&gt; range</code>","text":"<p>Return a range for the column slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_range(self) -&gt; range:\n\"\"\"Return a range for the column slice with valid start / stop / step values.\"\"\"\nsl = self.get_column_slice()\ncol_count = self.sourceModel().columnCount()\nreturn range(sl.start or 0, sl.stop or col_count, sl.step or 1)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_tuple","title":"<code>get_column_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the column slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the column slice.\"\"\"\nsl = self.get_column_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_range","title":"<code>get_row_range() -&gt; range</code>","text":"<p>Return a range for the row slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_range(self) -&gt; range:\n\"\"\"Return a range for the row slice with valid start / stop / step values.\"\"\"\nsl = self.get_row_slice()\nrow_count = self.sourceModel().rowCount()\nreturn range(sl.start or 0, sl.stop or row_count, sl.step or 1)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_tuple","title":"<code>get_row_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the row slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the row slice.\"\"\"\nsl = self.get_row_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.indexer_contains","title":"<code>indexer_contains(index: core.ModelIndex | tuple[int, int]) -&gt; bool</code>","text":"<p>Check whether given ModelIndex is included in our Indexer.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def indexer_contains(self, index: core.ModelIndex | tuple[int, int]) -&gt; bool:\n\"\"\"Check whether given ModelIndex is included in our Indexer.\"\"\"\nif isinstance(index, core.ModelIndex):\nindex = (index.row(), index.column())\ncol_slice = self.get_column_slice()\nrow_slice = self.get_row_slice()\nsource = self.sourceModel()\ncol_slice = self.update_slice_boundaries(col_slice, count=source.columnCount())\nrow_slice = self.update_slice_boundaries(row_slice, count=source.rowCount())\n# logger.info(f\"{col_slice=} {row_slice=}\")\nto_check = (row_slice, col_slice)  # instead of _indexer, for negative indexes.\nreturn helpers.is_position_in_index(*index, to_check)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_column_slice","title":"<code>position_in_column_slice(col: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(col) if slice would be a list.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_column_slice(self, col: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(col) if slice would be a list.\"\"\"\nsl = self.get_column_slice()\nreturn int((col - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_row_slice","title":"<code>position_in_row_slice(row: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(row) if slice would be a list.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_row_slice(self, row: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(row) if slice would be a list.\"\"\"\nsl = self.get_row_slice()\nreturn int((row - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_column_slice","title":"<code>set_column_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the column slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_column_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the column slice.\"\"\"\nmatch value:\ncase slice() as col_slice:\nsl = col_slice\ncase int() as col:\nsl = slice(col, col + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (self.get_row_slice(), sl)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_indexer","title":"<code>set_indexer(indexer)</code>","text":"<p>Takes basically anything which is common to use for getitem.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_indexer(self, indexer):\n\"\"\"Takes basically anything which is common to use for __getitem__.\"\"\"\nmatch indexer:\ncase None:\nself._indexer = (slice(None), slice(None))\ncase int() as column:\nself.set_column_slice(column)\ncase slice() as col_slice:\nself._indexer = (col_slice, slice(None))\ncase row_slice, col_slice:\nself.set_column_slice(col_slice)\nself.set_row_slice(row_slice)\ncase _:\nraise TypeError(indexer)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_row_slice","title":"<code>set_row_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the row slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_row_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the row slice.\"\"\"\nmatch value:\ncase slice() as row_slice:\nsl = row_slice\ncase int() as row:\nsl = slice(row, row + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (sl, self.get_column_slice())\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.update_slice_boundaries","title":"<code>update_slice_boundaries(sl: slice, count: int) -&gt; slice</code>","text":"<p>Update slice boundaries by resolving negative indexes.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def update_slice_boundaries(self, sl: slice, count: int) -&gt; slice:\n\"\"\"Update slice boundaries by resolving negative indexes.\"\"\"\n# Not sure yet whats the best approach here and which cases I should support...\n# if sl.end is larger than count, clip it (or perhaps throw exception?)\n# if sl.stop is not None and sl.stop &gt;= count:\n#     sl = slice(sl.start, count, sl.step)\n# resolve negative start value\nif sl.start is not None and sl.start &lt; 0:\nstart = count + sl.start\nend = count + sl.stop\n# end = start + (sl.stop - sl.start)\nif start &lt; 0:\nraise IndexError(sl.start)\nsl = slice(start, end, sl.step)\n# if sl.stop is not None and sl.stop &lt; 0:\n#     stop = source.columnCount() + sl.stop\n#     if stop &lt; 0:\n#         raise IndexError(sl.stop)\n#     sl = slice(sl.start, stop, sl.step)\nreturn sl\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceMapRoleProxyModel","title":"<code>SliceMapRoleProxyModel(mapping: Mapping[constants.ItemDataRole, constants.ItemDataRole], converter: Callable | None = None, **kwargs: Callable | None)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model for mapping one role to another.</p> <p>Mapping can be changed by passing a dictionary with source role as key and target_role as value. Py passing an optional converter function, values which are mapped can be modified.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceMapRoleProxyModel--example","title":"Example","text":"<pre><code>source_model = FsSpecTreemodel(\"file\")\ntable = widgets.TableView()\nmapping = {source_model.Roles.ProtocolPathRole: constants.DISPLAY_ROLE}\nmodel = SliceMapRoleProxyModel(mapping, indexer=0, parent=table)\nmodel.setSourceModel(source_model)\ntable.set_model(model)\ntable.show()\n# or\ntable.proxifier.map_role(source_model.Roles.ProtocolPathRole, constants.DISPLAY_ROLE)\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicemaproleproxymodel.py</code> <pre><code>def __init__(\nself,\nmapping: Mapping[constants.ItemDataRole, constants.ItemDataRole],\nconverter: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._mapping = bidict(mapping)\nself._converter = converter\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceValueTransformationProxyModel","title":"<code>SliceValueTransformationProxyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>A proxy model which transforms cell contents based on a Callable.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SliceValueTransformationProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n</code></pre> <p>or</p> <pre><code>indexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceValueTransformationProxyModel(indexer=indexer)\nproxy.set_source_model(model)\nproxy.add_transformer(lambda x: x + \"something\", selector=lambda x: \"abc\" in x)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._transformers: list[Transformer] = []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.add_transformer","title":"<code>add_transformer(fn: Callable[[Any], Any], role: constants.ItemDataRole = constants.DISPLAY_ROLE, selector: Callable[[Any], bool] | None = None, selector_role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Add a transformer for given role.</p> <p>If a selector callable is given, the transformer will only be applied if the selector returns True. The selector receives the content of given data role as an argument.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Any], Any]</code> <p>Callable to transform data of given role</p> required <code>role</code> <code>constants.ItemDataRole</code> <p>Data role to transform</p> <code>constants.DISPLAY_ROLE</code> <code>selector</code> <code>Callable[[Any], bool] | None</code> <p>Callable to filter the indexes which should be transformed</p> <code>None</code> <code>selector_role</code> <code>constants.ItemDataRole</code> <p>Role to use for the selector callable</p> <code>constants.DISPLAY_ROLE</code> Source code in <code>prettyqt\\custom_models\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def add_transformer(\nself,\nfn: Callable[[Any], Any],\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nselector: Callable[[Any], bool] | None = None,\nselector_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Add a transformer for given role.\n    If a selector callable is given, the transformer will only be applied if the\n    selector returns True.\n    The selector receives the content of given data role as an argument.\n    Arguments:\n        fn: Callable to transform data of given role\n        role: Data role to transform\n        selector: Callable to filter the indexes which should be transformed\n        selector_role: Role to use for the selector callable\n    \"\"\"\ntr = Transformer(\nfn=fn,\nrole=role,\nselector=selector,\nselector_role=selector_role,\n)\nself._transformers.append(tr)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.clear","title":"<code>clear()</code>","text":"<p>Clear all transformers.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def clear(self):\n\"\"\"Clear all transformers.\"\"\"\nself._transformers = []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SubClassTreeModel","title":"<code>SubClassTreeModel</code>","text":"<p>         Bases: <code>BaseClassTreeModel</code></p> <p>Model to display the subclass tree of a python class.</p> <p>Also supports <code>types.UnionType</code>.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SubsetFilterProxyModel","title":"<code>SubsetFilterProxyModel(row_filter: slice | range | int | Container[int] | Callable | None, column_filter: slice | range | int | Container[int] | Callable | None, **kwargs: slice | range | int | Container[int] | Callable | None)</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel to filter based on slices, ranges, indexes or Callables.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.SubsetFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = custom_models.SubsetFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\subsetfilterproxymodel.py</code> <pre><code>def __init__(\nself,\nrow_filter: slice | range | int | Container[int] | Callable | None,\ncolumn_filter: slice | range | int | Container[int] | Callable | None,\n**kwargs,\n):\nself.row_filter = row_filter\nself.column_filter = column_filter\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.TableToListProxyModel","title":"<code>TableToListProxyModel(*args, header_title: str = '', **kwargs: str)</code>","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model to flatten a table to a list.</p> <p>Reshapes a table by concatenating all columns into one large column, so that the new rowCount equals to sourceModel rowCount * sourceModel columnCount. If a verticalHeader is available, it will show the original position of the cell.</p> Source code in <code>prettyqt\\custom_models\\proxies\\tabletolistproxymodel.py</code> <pre><code>def __init__(self, *args, header_title: str = \"\", **kwargs):\nsuper().__init__(*args, **kwargs)\nself._header_title = header_title\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.TreeModel","title":"<code>TreeModel(obj = None, show_root: bool = True, **kwargs: bool)</code>","text":"<p>         Bases: <code>core.AbstractItemModel</code></p> Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def __init__(self, obj=None, show_root: bool = True, **kwargs):\nsuper().__init__(**kwargs)\nself._root_item = self.TreeItem(obj=obj)\nself._show_root = show_root\nself.set_root_item(obj)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.show_root","title":"<code>show_root: bool</code>  <code>property</code>","text":"<p>Return True if the inspected node is visible.</p> <p>In that case an invisible root node has been added.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.fetchMore","title":"<code>fetchMore(parent: core.ModelIndex | None = None)</code>","text":"<p>Fetch the children given the model index of a parent node.</p> <p>Adds the children to the parent.</p> Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def fetchMore(self, parent: core.ModelIndex | None = None):\n\"\"\"Fetch the children given the model index of a parent node.\n    Adds the children to the parent.\n    \"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn\nparent_item = self.data_by_index(parent)\nif parent_item.children_fetched:\nreturn\ntree_items = self._fetch_object_children(parent_item)\nwith self.insert_rows(0, len(tree_items) - 1, parent):\nfor tree_item in tree_items:\nparent_item.append_child(tree_item)\nparent_item.children_fetched = True\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ValueFilterProxyModel","title":"<code>ValueFilterProxyModel(filter_value = None, **kwargs)</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>Proxy model for filtering based on non-str values.</p> <p>Sometimes it is needed to filter for non-str values, especially when it is required to filter based on a different role than DisplayRole.</p> <p>Same as the Qt QSortFilterProxyModel, this proxy respects the filterRole and filterKeyColumn properties.</p> Source code in <code>prettyqt\\custom_models\\proxies\\valuefilterproxymodel.py</code> <pre><code>def __init__(self, filter_value=None, **kwargs):\nself._filter_value = filter_value\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.valuefilterproxymodel.ValueFilterProxyModel.get_filter_value","title":"<code>get_filter_value()</code>","text":"<p>Get the filter value.</p> Source code in <code>prettyqt\\custom_models\\proxies\\valuefilterproxymodel.py</code> <pre><code>def get_filter_value(self):\n\"\"\"Get the filter value.\"\"\"\nreturn self._filter_value\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.proxies.valuefilterproxymodel.ValueFilterProxyModel.set_filter_value","title":"<code>set_filter_value(value)</code>","text":"<p>Set the filter value.</p> Source code in <code>prettyqt\\custom_models\\proxies\\valuefilterproxymodel.py</code> <pre><code>def set_filter_value(self, value):\n\"\"\"Set the filter value.\"\"\"\nself._filter_value = value\nself.invalidateRowsFilter()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.WidgetHierarchyModel","title":"<code>WidgetHierarchyModel(*args, **kwargs)</code>","text":"<p>         Bases: <code>custom_models.TreeModel</code></p> Source code in <code>prettyqt\\custom_models\\widgethierarchymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.BaseClass = QtWidgets.QWidget\nself.props = core.MetaObject(self.BaseClass.staticMetaObject).get_properties(\nonly_stored=True\n)\nself.props.insert(0, FakeClassNameProp())\nself.props.insert(1, FakeLayoutProp())\nself.props.insert(1, FakeUserPropertyNameProp())\nself.props.insert(1, FakeUserPropertyValueProp())\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.widgethierarchymodel.WidgetHierarchyModel.Roles","title":"<code>Roles</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Custom roles.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.WidgetPropertiesModel","title":"<code>WidgetPropertiesModel(widget: QtWidgets.QWidget, **kwargs: QtWidgets.QWidget)</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\widgetpropertiesmodel.py</code> <pre><code>def __init__(self, widget: QtWidgets.QWidget, **kwargs):\nself._widget = None\nself._metaobj = None\nself.event_catcher = None\nself._handles: list[core.QMetaObject.Connection] = []\nsuper().__init__(**kwargs)\nself.set_widget(widget)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.widgetpropertiesmodel.WidgetPropertiesModel.rowCount","title":"<code>rowCount(parent: core.QModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\widgetpropertiesmodel.py</code> <pre><code>def rowCount(self, parent: core.QModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else self._metaobj.propertyCount()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.WidgetsDetailsModel","title":"<code>WidgetsDetailsModel(items: Sequence[QtWidgets.QWidget], **kwargs: Sequence[QtWidgets.QWidget])</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\widgetsdetailsmodel.py</code> <pre><code>def __init__(self, items: Sequence[QtWidgets.QWidget], **kwargs):\nsuper().__init__(**kwargs)\nself.items = items\ncommon_ancestor = helpers.find_common_ancestor([type(i) for i in self.items])\nlogger.debug(f\"{type(self).__name__}: found common ancestor {common_ancestor}\")\nself.props = core.MetaObject(common_ancestor.staticMetaObject).get_properties(\nonly_stored=True\n)\nself.props.sort(key=lambda x: x.get_name())\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.widgetsdetailsmodel.WidgetsDetailsModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\widgetsdetailsmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.items)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.XmlModel","title":"<code>XmlModel(obj: str | datatypes.IsTreeIterator | ET.ElementTree, show_root: bool = True, **kwargs: bool)</code>","text":"<p>         Bases: <code>BaseXmlModel</code></p> <p>Semi-lazy xml model. Fetches all direct child nodes when needed.</p> <p>Model cant be modified, that only really makes sense for a full DOM implementation.</p> Source code in <code>prettyqt\\custom_models\\xmlmodel.py</code> <pre><code>def __init__(\nself,\nobj: str | datatypes.IsTreeIterator | ET.ElementTree,\nshow_root: bool = True,\n**kwargs,\n):\nmatch obj:\ncase io.StringIO():\ncontext = ET.iterparse(obj, events=(\"start\",))\n_, root = next(context)\ncase str():\ncontext = ET.iterparse(io.StringIO(obj), events=(\"start\",))\n_, root = next(context)\ncase datatypes.IsTreeIterator():\n_, root = next(obj)\ncase ET.ElementTree():\nxml_str = ET.tostring(obj._root, encoding=\"unicode\")\ncontext = ET.iterparse(io.StringIO(xml_str), events=(\"start\",))\n_, root = next(context)\ncase _:\nraise TypeError(obj)\nsuper().__init__(obj=root, **kwargs)\n</code></pre>"},{"location":"api/custom_validators.html","title":"custom_validators module","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.AlphaNumericValidator","title":"<code>AlphaNumericValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether only alphanumeric characters are included.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.AndValidator","title":"<code>AndValidator</code>","text":"<p>         Bases: <code>CompositeValidator</code></p> <p>Validator to AND-combine other validators.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.BlacklistValidator","title":"<code>BlacklistValidator(options: list[str] | None = None, parent: QtCore.QObject | None = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which excludes a fixed list of strings.</p> Source code in <code>prettyqt\\custom_validators\\blacklistvalidator.py</code> <pre><code>def __init__(\nself,\noptions: list[str] | None = None,\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself._options = options\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.ColorValidator","title":"<code>ColorValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks for strings representing a color.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.FloatListValidator","title":"<code>FloatListValidator(allow_single: bool = True, parent: QtCore.QObject | None = None)</code>","text":"<p>         Bases: <code>BaseRegexValidator</code></p> <p>Validator which checks whether given string is a comma-separated list of floats.</p> Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\")\nelse:\nself.set_regex(\nr\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\"\n)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.FunctionValidator","title":"<code>FunctionValidator(fn: Callable[[str], bool], parent: Callable[[str], bool] = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks based on a given Callable.</p> <p>Allows for quickly creating a validator without subclassing.</p> Source code in <code>prettyqt\\custom_validators\\functionvalidator.py</code> <pre><code>def __init__(self, fn: Callable[[str], bool], parent=None):\nsuper().__init__(parent)\nself._fn = fn\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.HexValidator","title":"<code>HexValidator(maximum: int | None = None, parent: int | None = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks for hexadecimal values.</p> Source code in <code>prettyqt\\custom_validators\\hexvalidator.py</code> <pre><code>def __init__(self, maximum: int | None = None, parent=None):\nsuper().__init__(parent)\nself._maximum = maximum\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.IntListValidator","title":"<code>IntListValidator(allow_single: bool = True, parent: QtCore.QObject | None = None)</code>","text":"<p>         Bases: <code>BaseRegexValidator</code></p> <p>Validator which checks whether given string is a comma-separated list of ints.</p> Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\d+)(,\\s*\\d+)*$\")\nelse:\nself.set_regex(r\"^[0-9][0-9\\,]+[0-9]$\")\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.IntegerValidator","title":"<code>IntegerValidator(bottom: int | None = None, top: int | None = None, parent: core.QObject | None = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator to check for integer values.</p> <p>In contrast to IntValidator provided by Qt, this validator is not bound to a restricted value range.</p> Source code in <code>prettyqt\\custom_validators\\integervalidator.py</code> <pre><code>def __init__(\nself,\nbottom: int | None = None,\ntop: int | None = None,\nparent: core.QObject | None = None,\n):\nsuper().__init__(parent)\nself._bottom = -sys.maxsize if bottom is None else bottom\nself._top = sys.maxsize if top is None else top\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.JsonValidator","title":"<code>JsonValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks for strings which can be parsed as JSON.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.MonotonicListValidator","title":"<code>MonotonicListValidator(kind: str = 'increasing', parent: str = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string contains a monotonic list.</p> Source code in <code>prettyqt\\custom_validators\\monotoniclistvalidator.py</code> <pre><code>def __init__(self, kind: str = \"increasing\", parent=None):\nsuper().__init__(parent)\nself._kind = kind\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.NotStrictValidator","title":"<code>NotStrictValidator(validator: gui.QValidator | None = None, **kwargs: gui.QValidator | None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which turns Invalid state into Intermediate state.</p> Source code in <code>prettyqt\\custom_validators\\notstrictvalidator.py</code> <pre><code>def __init__(self, validator: gui.QValidator | None = None, **kwargs):\nself._validator = validator\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.OrValidator","title":"<code>OrValidator</code>","text":"<p>         Bases: <code>CompositeValidator</code></p> <p>Validator to OR-combine other validators.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.PathValidator","title":"<code>PathValidator(*args, **kwargs)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is a valid path.</p> Source code in <code>prettyqt\\custom_validators\\pathvalidator.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._mode = \"any\"\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.PythonCodeValidator","title":"<code>PythonCodeValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is valid Python code.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.QssValidator","title":"<code>QssValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is a parseable css string.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.RegexPatternValidator","title":"<code>RegexPatternValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is a parseable regex pattern.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.ScientificFloatValidator","title":"<code>ScientificFloatValidator</code>","text":"<p>         Bases: <code>BaseScientificValidator</code></p> <p>This is a validator for float values represented as strings in scientific notation.</p> <p>(i.e. \"1.35e-9\", \".24E+8\", \"14e3\" etc.) Also supports SI unit prefix like 'M', 'n' etc.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.ScientificIntegerValidator","title":"<code>ScientificIntegerValidator</code>","text":"<p>         Bases: <code>BaseScientificValidator</code></p> <p>This is a validator for int values represented as strings in scientific notation.</p> <p>Using engineering notation only positive exponents are allowed (i.e. \"1e9\", \"2E+8\", \"14e+3\" etc.) Also supports non-fractional SI unit prefix like 'M', 'k' etc.</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.TextLengthValidator","title":"<code>TextLengthValidator(minimum: int | None = None, maximum: int | None = None, parent: core.QObject | None = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given text has a specific length.</p> Source code in <code>prettyqt\\custom_validators\\textlengthvalidator.py</code> <pre><code>def __init__(\nself,\nminimum: int | None = None,\nmaximum: int | None = None,\nparent: core.QObject | None = None,\n):\nsuper().__init__(parent)\nself._minimum = 0 if minimum is None else minimum\nself._maximum = sys.maxsize if maximum is None else maximum\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.WhitelistValidator","title":"<code>WhitelistValidator(options: list[str] | None = None, parent: QtCore.QObject | None = None)</code>","text":"<p>         Bases: <code>gui.Validator</code></p> <p>Validator which allows a fixed list of strings.</p> Source code in <code>prettyqt\\custom_validators\\whitelistvalidator.py</code> <pre><code>def __init__(\nself,\noptions: list[str] | None = None,\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself._options = options\n</code></pre>"},{"location":"api/custom_widgets.html","title":"custom_widgets module","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.AnnotatedScrollBar","title":"<code>AnnotatedScrollBar(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.ScrollBar</code></p> <p>ScrollBar which can highlight user-defined ranges.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\annotatedscrollbar.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._annotation_color = gui.QColor(\"gold\")\nself._annotations = []\nself._document_length = 100\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.BorderLayout","title":"<code>BorderLayout(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.Layout</code></p> Source code in <code>prettyqt\\custom_widgets\\layouts\\borderlayout.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.items: list[ItemWrapper] = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.layouts.borderlayout.BorderLayout.Position","title":"<code>Position</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Item position.</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ClickableLabel","title":"<code>ClickableLabel(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.Label</code></p> <p>A label widget that behaves like a button.</p> Source code in <code>prettyqt\\custom_widgets\\labels\\clickablelabel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs, alignment=\"left\")\nself.setFont(gui.QFont(\"Arial\"))\nself.setFixedHeight(24)\nself.set_size_policy(\"minimum\", \"expanding\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.CommandPalette","title":"<code>CommandPalette(parent: widgets.QWidget | None = None)</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> <p>A Qt command palette widget.</p> Source code in <code>prettyqt\\custom_widgets\\commandpalette.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nself.setWindowFlags(\nconstants.WindowType.WindowStaysOnTopHint\n| constants.WindowType.FramelessWindowHint\n# | constants.WindowType.ToolTip\n)\nself.set_focus_policy(\"strong\")\nself.setMinimumWidth(700)\nself._line = widgets.LineEdit()\nself.setFocusProxy(self._line)\nself._table = CommandTable()\n# self._line.value_changed.connect(self._table.select_first_row)\nself._line.value_changed.connect(self._table._proxy.set_search_term)\nlayout = self.set_layout(\"vertical\")\nlayout.addWidget(self._line)\nlayout.addWidget(self._table)\nself.add_shortcut(\"Ctrl+P\", self.close)\nself._line.installEventFilter(self)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.commandpalette.CommandPalette.match_color","title":"<code>match_color() -&gt; str</code>","text":"<p>The color used for the matched characters.</p> Source code in <code>prettyqt\\custom_widgets\\commandpalette.py</code> <pre><code>def match_color(self) -&gt; str:\n\"\"\"The color used for the matched characters.\"\"\"\nreturn self._table.match_color\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.commandpalette.CommandPalette.set_match_color","title":"<code>set_match_color(color)</code>","text":"<p>Set the color used for the matched characters.</p> Source code in <code>prettyqt\\custom_widgets\\commandpalette.py</code> <pre><code>def set_match_color(self, color):\n\"\"\"Set the color used for the matched characters.\"\"\"\nself._table.match_color = colors.get_color(color).name()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.EnumComboBox","title":"<code>EnumComboBox(value = None, object_name: str = 'enum_combobox', **kwargs: str)</code>","text":"<p>         Bases: <code>widgets.ComboBox</code></p> <p>ComboBox presenting options from a python Enum.</p> <p>If the Enum class does not implement <code>__str__</code> then a human readable name is created from the name of the enum member, replacing underscores with spaces.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def __init__(self, value=None, object_name: str = \"enum_combobox\", **kwargs):\nself._enum_class = None\nself._allow_none = False\nsuper().__init__(object_name=object_name, **kwargs)\nif value is not None:\nself.set_value(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.get_enum_class","title":"<code>get_enum_class() -&gt; enum.EnumMeta | None</code>","text":"<p>Return current Enum class.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.get_value","title":"<code>get_value() -&gt; EnumType | None</code>","text":"<p>Current value as Enum member.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def get_value(self) -&gt; EnumType | None:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nclass_members = list(self._enum_class.__members__.values())\nif not self._allow_none:\nreturn class_members[self.currentIndex()]\nis_none = self.currentText() == NONE_STRING\nreturn None if is_none else class_members[self.currentIndex() - 1]\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.is_optional","title":"<code>is_optional() -&gt; bool</code>","text":"<p>Return if current enum is with optional annotation.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def is_optional(self) -&gt; bool:\n\"\"\"Return if current enum is with optional annotation.\"\"\"\nreturn self._allow_none\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.set_value","title":"<code>set_value(value: EnumType | None) -&gt; None</code>","text":"<p>Set value with Enum.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def set_value(self, value: EnumType | None) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif value is None:\nif not self._allow_none:\nraise ValueError(value)\nself.setCurrentIndex(0)\nreturn\nif not isinstance(value, enum.Enum):\nvalue = self._enum_class(value)\nself._set_enum_class(value.__class__)\nself.setCurrentText(value.name.replace(\"_\", \" \"))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.EnumFlagWidget","title":"<code>EnumFlagWidget(*args, object_name: str = 'enum_flag_widget', **kwargs: str)</code>","text":"<p>         Bases: <code>widgets.ToolButton</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def __init__(self, *args, object_name: str = \"enum_flag_widget\", **kwargs):\nself._enum_class = None\nself._action_map = {}\nself.button_menu = widgets.Menu(triggered=self._on_menu_click)\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.setMenu(self.button_menu)\nself.set_popup_mode(\"instant\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumflagwidget.EnumFlagWidget.get_enum_class","title":"<code>get_enum_class() -&gt; enum.EnumMeta | None</code>","text":"<p>Return current Enum class.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumflagwidget.EnumFlagWidget.get_value","title":"<code>get_value() -&gt; enum.Flag</code>","text":"<p>Current value as Enum member.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def get_value(self) -&gt; enum.Flag:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nflag = self._enum_class(0)\nfor k, v in self._action_map.items():\nif v.isChecked():\nflag |= k\nreturn flag\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.enumflagwidget.EnumFlagWidget.set_value","title":"<code>set_value(value: enum.Flag) -&gt; None</code>","text":"<p>Set value with Enum.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def set_value(self, value: enum.Flag) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif not isinstance(value, enum.Flag):\nvalue = self._enum_class(value)\nself._set_enum_class(value.__class__)\nif not isinstance(value, self._enum_class):\nraise TypeError(\n\"setValue(self, Enum): argument 1 has unexpected type \"\nf\"{type(value).__name__!r}\"\n)\n# this filter shouldnt be needed, see https://bugreports.qt.io/browse/PYSIDE-2369\nvalues = []\nfor i in self._enum_class.__members__.values():\nif i.value == 0:\ncontinue\nif value &amp; i == i:\nself._action_map[i].setChecked(True)\nvalues.append(i)\ntext = \" | \".join(i.name for i in values) if values else self._enum_class(0).name\nself.set_text(text)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FileChooserButton","title":"<code>FileChooserButton(extensions: dict[str, list[str]] | None = None, mode: widgets.filedialog.AcceptModeStr = 'save', file_mode: widgets.filedialog.FileModeStr = 'existing_files', root: None | str | pathlib.Path = None, object_name: str = 'file_chooser_button', **kwargs: Any)</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> <p>Initialize FileChooserButton.</p> <p>Parameters:</p> Name Type Description Default <code>extensions</code> <code>dict[str, list[str]] | None</code> <p>dict allowed extensions         form: \"'name': ['.ext1', '.ext2']\"</p> <code>None</code> <code>mode</code> <code>widgets.filedialog.AcceptModeStr</code> <p>Accept mode (\"save\" or \"load\")</p> <code>'save'</code> <code>file_mode</code> <code>widgets.filedialog.FileModeStr</code> <p>File mode (\"existing_files\", \"existing_file\", \"any_file\",                   or \"directory\")</p> <code>'existing_files'</code> <code>root</code> <code>None | str | pathlib.Path</code> <p>Root path</p> <code>None</code> <code>object_name</code> <code>str</code> <p>Object name</p> <code>'file_chooser_button'</code> <code>kwargs</code> <code>Any</code> <p>kwargs passed to parent</p> <code>{}</code> Source code in <code>prettyqt\\custom_widgets\\editors\\filechooserbutton.py</code> <pre><code>def __init__(\nself,\nextensions: dict[str, list[str]] | None = None,\nmode: widgets.filedialog.AcceptModeStr = \"save\",\nfile_mode: widgets.filedialog.FileModeStr = \"existing_files\",\nroot: None | str | pathlib.Path = None,\nobject_name: str = \"file_chooser_button\",\n**kwargs: Any,\n):\n\"\"\"Initialize FileChooserButton.\n    Args:\n        extensions: dict allowed extensions\n                    form: \"'name': ['.ext1', '.ext2']\"\n        mode: Accept mode (\"save\" or \"load\")\n        file_mode: File mode (\"existing_files\", \"existing_file\", \"any_file\",\n                              or \"directory\")\n        root: Root path\n        object_name: Object name\n        kwargs: kwargs passed to parent\n    \"\"\"\nsuper().__init__(object_name=object_name, **kwargs)\nself._path: pathlib.Path | None = None\nself._extensions = extensions or []\nself.mode = mode\nself.file_mode = file_mode\nself.root = root\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_read_only()\nlayout.add(self.lineedit)\naction = gui.Action(triggered=self.open_file)\nif self.file_mode == \"directory\":\naction.set_icon(\"mdi.folder-outline\")\nelse:\naction.set_icon(\"mdi.file-outline\")\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FileTree","title":"<code>FileTree(*args, filters: list[str] | None = None, **kwargs: list[str] | None)</code>","text":"<p>         Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def __init__(self, *args, filters: list[str] | None = None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setRootIsDecorated(True)\nself.setup_dragdrop_move()\nmodel = widgets.FileSystemModel()\nmodel.resolve_sym_links(False)\nif filters:\nmodel.set_name_filters(filters, hide=False)\nself.set_model(model)\nself._expanded_ids = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.itemviews.filetree.FileTree.get_expanded_state","title":"<code>get_expanded_state(root_index: core.ModelIndex | None = None) -&gt; list[str]</code>","text":"<p>Get a list of all expanded paths.</p> <p>Can be used to re-expand to the same state.</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def get_expanded_state(self, root_index: core.ModelIndex | None = None) -&gt; list[str]:\n\"\"\"Get a list of all expanded paths.\n    Can be used to re-expand to the same state.\n    \"\"\"\nroot = root_index or self.rootIndex()\nmodel = self.model()\nself._expanded_ids = []\ndef _save_expanded_on_level(index: core.ModelIndex):\nif not self.isExpanded(index):\nreturn None\nmodel = self.model()\nif index.isValid():\npath = model.data(index, model.Roles.FilePathRole)\nself._expanded_ids.append(path)\nfor i in range(model.rowCount(index)):\nval = model.index(i, 0, index)\n_save_expanded_on_level(val)\nfor i in range(model.rowCount(root)):\n_save_expanded_on_level(model.index(i, 0, root))\nreturn self._expanded_ids\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.itemviews.filetree.FileTree.set_expanded_state","title":"<code>set_expanded_state(state: list[str], root_index: core.ModelIndex | None = None)</code>","text":"<p>Set all indexes which correspond to given paths to expanded.</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def set_expanded_state(\nself, state: list[str], root_index: core.ModelIndex | None = None\n):\n\"\"\"Set all indexes which correspond to given paths to expanded.\"\"\"\nroot = root_index or self.rootIndex()\nmodel = self.model()\nself._expanded_ids = state\ndef _restore_expanded_on_level(index: core.ModelIndex):\nmodel = self.model()\npath = model.data(index, model.Roles.FilePathRole)\nif path not in self._expanded_ids:\nreturn None\nself.setExpanded(index, True)\nif not model.hasChildren(index):\nreturn None\npath = pathlib.Path(path)\nfor it in path.iterdir():\nchild_index = model.index(str(path / it))\n_restore_expanded_on_level(child_index)\nwith self.updates_off():\nfor i in range(model.rowCount(root)):\n_restore_expanded_on_level(model.index(i, 0))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.itemviews.filetree.FileTree.set_root_path","title":"<code>set_root_path(path: datatypes.PathType)</code>","text":"<p>Set tree rootpath to given path.</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def set_root_path(self, path: datatypes.PathType):\n\"\"\"Set tree rootpath to given path.\"\"\"\npath = os.fspath(path)\nself.model().set_root_path(path)\nindex = self.model().index(path)\nself.setRootIndex(index)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.HierarchicalHeaderView","title":"<code>HierarchicalHeaderView(orientation: constants.Orientation | constants.OrientationStr, parent: widgets.QWidget)</code>","text":"<p>         Bases: <code>widgets.HeaderView</code></p> <p>Hierarchical header view.</p> <p>This class is a Python port of http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\hierarchicalheaderview.py</code> <pre><code>def __init__(\nself,\norientation: constants.Orientation | constants.OrientationStr,\nparent: widgets.QWidget,\n):\nsuper().__init__(orientation, parent, highlight_sections=True)\nself.setSectionsClickable(True)\nself.sectionResized.connect(self.on_section_resized)\nself.show()  # force to be visible\nif orientation in {constants.HORIZONTAL, \"horizontal\"}:\nparent.setHorizontalHeader(self)\nelse:\nparent.setVerticalHeader(self)\nself.sectionMoved.connect(self._on_section_moved)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.IconBrowser","title":"<code>IconBrowser()</code>","text":"<p>         Bases: <code>widgets.MainWindow</code></p> <p>A small browser window that allows the user to search through all icons.</p> <p>You can also copy the name and python code for the currently selected icon.</p> Source code in <code>prettyqt\\custom_widgets\\iconbrowser.py</code> <pre><code>def __init__(self):\nsuper().__init__()\nself.setMinimumSize(500, 500)\nself.set_title(\"Icon Browser\")\nfont_maps = {k: v.charmap for k, v in iconprovider._instance().fonts.items()}\nicon_names = [\nf\"{font_collection}.{icon_name}\"\nfor font_collection, font_data in font_maps.items()\nfor icon_name in font_data\n]\nmodel = IconModel(icon_color=\"text_role\")\nmodel.setStringList(sorted(icon_names))\nself._proxy_model = custom_models.FuzzyFilterProxyModel()\nself._proxy_model.setSourceModel(model)\nself._proxy_model.set_filter_case_sensitive(True)\nself._proxy_model.set_match_color(None)\nself._listview = widgets.ListView(\nself,\nuniform_item_sizes=True,\nview_mode=\"icon\",\ncontext_menu_policy=\"custom\",\ndouble_clicked=self._copy_icon_text,\nvertical_scroll_bar_policy=\"always_on\",\n)\neventfilter = listviewgridresizeeventfilter.ListViewGridResizeEventFilter(\nparent=self._listview\n)\nself._listview.installEventFilter(eventfilter)\nself._listview.set_model(self._proxy_model)\nself._lineedit = widgets.LineEdit(\nparent=self, text_changed=self._trigger_instant_update\n)\nself._combobox = widgets.ComboBox(\nparent=self,\nminimum_width=75,\ncurrent_index_changed=self._trigger_instant_update,\n)\nself._combobox.addItems([ALL_COLLECTIONS, *sorted(font_maps.keys())])\nsearch_bar_frame = widgets.Frame(self)\nlayout = search_bar_frame.set_layout(\"horizontal\", margin=0)\nlayout.add(self._combobox)\nlayout.add(self._lineedit)\nself._copy_button = widgets.PushButton(\"Copy Name\", clicked=self._copy_icon_text)\nframe = widgets.Frame(self)\nlayout = frame.set_layout(\"vertical\")\nlayout.add(search_bar_frame)\nlayout.add(self._listview)\nlayout.add(self._copy_button)\nself.setCentralWidget(frame)\nself.add_shortcut(\"return\", self._copy_icon_text)\nself._lineedit.setFocus()\nself.position_on(\"screen\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.IconWidget","title":"<code>IconWidget(*names, parent: widgets.QWidget | None = None, **kwargs: widgets.QWidget | None)</code>","text":"<p>         Bases: <code>widgets.Label</code></p> Source code in <code>prettyqt\\custom_widgets\\labels\\iconwidget.py</code> <pre><code>def __init__(self, *names, parent: widgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent=parent)\nself._icon: gui.QIcon | None = None\nself._size = core.Size(16, 16)\nself.set_icon(iconprovider._icon(*names, **kwargs))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labels.iconwidget.IconWidget.set_icon","title":"<code>set_icon(_icon: datatypes.IconType)</code>","text":"<p>Set a new icon().</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labels.iconwidget.IconWidget.set_icon--parameters","title":"Parameters","text":"qtawesome.icon <p>icon to set</p> Source code in <code>prettyqt\\custom_widgets\\labels\\iconwidget.py</code> <pre><code>def set_icon(self, _icon: datatypes.IconType):\n\"\"\"Set a new icon().\n    Parameters\n    ----------\n    _icon: qtawesome.icon\n        icon to set\n    \"\"\"\nself._icon = iconprovider.get_icon(_icon)\nself.setPixmap(self._icon.pixmap(self._size))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.MultiLineLayout","title":"<code>MultiLineLayout(vertical: bool = True, row_number: int = 3, **kwargs: int)</code>","text":"<p>         Bases: <code>widgets.BoxLayout</code></p> <p>Nested Boxlayout.</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\multilinelayout.py</code> <pre><code>def __init__(self, vertical: bool = True, row_number: int = 3, **kwargs):\nself.row_nb = row_number\nself.layouts = []\nself._sub_layout_type = \"box\"\ndirection = self.Direction.TopToBottom if vertical else self.Direction.LeftToRight\nsuper().__init__(direction, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ObjectBrowser","title":"<code>ObjectBrowser(obj, stack = None, name: str = '')</code>","text":"<p>         Bases: <code>widgets.MainWindow</code></p> <p>Object browser main application window.</p> Source code in <code>prettyqt\\custom_widgets\\objectbrowser.py</code> <pre><code>def __init__(self, obj, stack=None, name: str = \"\"):\nsuper().__init__()\nself.set_title(\"Object browser\")\nself.set_icon(\"mdi.language-python\")\nself._auto_refresh = False\nself._refresh_rate = 2\nself._tree_model = custom_models.PythonObjectTreeModel(obj)\nself._attr_details = [\nKlass(model=self._tree_model) for Klass in DEFAULT_ATTR_DETAILS\n]\n# Toggle auto-refresh on/off\nself.toggle_auto_refresh_action = gui.Action(\ntext=\"Auto-refresh\",\nparent=self,\ncheckable=True,\nstatus_tip=f\"Auto refresh every {self._refresh_rate} seconds\",\n)\nself.toggle_auto_refresh_action.toggled.connect(self.toggle_auto_refresh)\n# Add another refresh action with a different shortcut. An action must be added to\n# a visible widget for it to receive events. It is added to the main windows to\n# prevent it from being displayed again in the menu\nself.refresh_action_f5 = self.add_action(\ntext=\"&amp;Refresh2\", shortcut=\"F5\", triggered=self._tree_model.refresh_tree\n)\nself.central_splitter = widgets.Splitter(\nparent=self, orientation=constants.VERTICAL\n)\nself.setCentralWidget(self.central_splitter)\n# Tree widget\nself.obj_tree = widgets.TreeView(\nroot_is_decorated=True, selection_behavior=\"rows\"\n)\nself.obj_tree.set_model(self._tree_model)\nself.obj_tree.h_header = custom_widgets.FilterHeader(self.obj_tree)\n# Stretch last column?\n# It doesn't play nice when columns are hidden and then shown again.\nself.obj_tree.h_header.setObjectName(\"table_header\")\nself.obj_tree.h_header.setSectionsMovable(True)\nself.obj_tree.h_header.setStretchLastSection(False)\nself.central_splitter.addWidget(self.obj_tree)\n# Bottom pane\nbottom_pane_widget = widgets.Widget()\nbottom_pane_widget.set_layout(\"horizontal\", spacing=0, margin=5)\nself.central_splitter.addWidget(bottom_pane_widget)\ngroup_box = widgets.GroupBox(\"Details\")\nbottom_pane_widget.box.addWidget(group_box)\ngroup_box.set_layout(\"horizontal\", margin=2)\n# Radio buttons\nradio_widget = widgets.Widget()\nradio_widget.set_layout(\"vertical\", margin=0)\nself.button_group = widgets.ButtonGroup(\nself, button_clicked=self._change_details_field\n)\nfor button_id, attr_detail in enumerate(self._attr_details):\nradio_button = widgets.RadioButton(attr_detail.name)\nradio_widget.box.addWidget(radio_button)\nself.button_group.addButton(radio_button, button_id)\nself.button_group.button(0).setChecked(True)\nradio_widget.box.addStretch(1)\ngroup_box.box.addWidget(radio_widget)\nself.editor = widgets.PlainTextEdit(read_only=True, font=gui.Font.mono())\ngroup_box.box.addWidget(self.editor)\n# Splitter parameters\nself.central_splitter.setCollapsible(0, False)\nself.central_splitter.setCollapsible(1, True)\nself.central_splitter.setSizes([400, 200])\nself.central_splitter.setStretchFactor(0, 10)\nself.central_splitter.setStretchFactor(1, 0)\nselection_model = self.obj_tree.selectionModel()\nselection_model.currentRowChanged.connect(self._update_details)\nmenubar = self.menuBar()\nfile_menu = menubar.add_menu(\"&amp;File\")\nfile_menu.add_action(text=\"C&amp;lose\", triggered=self.close, shortcut=\"Ctrl+W\")\nfile_menu.add_action(\ntext=\"E&amp;xit\",\ntriggered=lambda: widgets.app().closeAllWindows(),\nshortcut=\"Ctrl+Q\",\n)\nview_menu = menubar.add_menu(\"&amp;View\")\nview_menu.add_action(\ntext=\"&amp;Refresh\", triggered=self._tree_model.refresh_tree, shortcut=\"Ctrl+R\"\n)\nview_menu.addAction(self.toggle_auto_refresh_action)\nview_menu.addSeparator()\nself.show_cols_submenu = self.obj_tree.h_header.createPopupMenu()\nself.show_cols_submenu.setTitle(\"Table columns\")\nview_menu.add_menu(self.show_cols_submenu)\nview_menu.addSeparator()\nassert self._refresh_rate &gt; 0\nself._refresh_timer = core.Timer(self)\nself._refresh_timer.setInterval(self._refresh_rate * 1000)\nself._refresh_timer.timeout.connect(self._tree_model.refresh_tree)\nself.toggle_auto_refresh_action.setChecked(self._auto_refresh)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.objectbrowser.ObjectBrowser.closeEvent","title":"<code>closeEvent(event)</code>","text":"<p>Called when the window is closed.</p> Source code in <code>prettyqt\\custom_widgets\\objectbrowser.py</code> <pre><code>def closeEvent(self, event):\n\"\"\"Called when the window is closed.\"\"\"\nself._refresh_timer.stop()\nself._refresh_timer.timeout.disconnect(self._tree_model.refresh_tree)\nself.toggle_auto_refresh_action.toggled.disconnect(self.toggle_auto_refresh)\nself.refresh_action_f5.triggered.disconnect(self._tree_model.refresh_tree)\nself.button_group.buttonClicked.disconnect(self._change_details_field)\nselection_model = self.obj_tree.selectionModel()\nselection_model.currentRowChanged.disconnect(self._update_details)\nself.close()\nevent.accept()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.objectbrowser.ObjectBrowser.toggle_auto_refresh","title":"<code>toggle_auto_refresh(checked)</code>","text":"<p>Toggle auto-refresh on/off.</p> Source code in <code>prettyqt\\custom_widgets\\objectbrowser.py</code> <pre><code>def toggle_auto_refresh(self, checked):\n\"\"\"Toggle auto-refresh on/off.\"\"\"\nif checked:\nlogger.info(\"Auto-refresh on. Rate %g seconds\", self._refresh_rate)\nself._refresh_timer.start()\nelse:\nlogger.info(\"Auto-refresh off\")\nself._refresh_timer.stop()\nself._auto_refresh = checked\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.OrientedTableView","title":"<code>OrientedTableView(orientation: constants.Orientation, **kwargs: constants.Orientation)</code>","text":"<p>         Bases: <code>widgets.TableView</code></p> <p>TableView class with some convenience methods for oriented tables.</p> Source code in <code>prettyqt\\custom_widgets\\orientedtableview.py</code> <pre><code>def __init__(self, orientation: constants.Orientation, **kwargs):\nsuper().__init__(**kwargs)\nself.orientation = orientation\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.PopupInfo","title":"<code>PopupInfo(parent: widgets.QWidget | None = None, text: str | None = None)</code>","text":"<p>         Bases: <code>widgets.Dialog</code></p> <p>Dialog overlay to show some info to user.</p> Source code in <code>prettyqt\\custom_widgets\\popupinfo.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None, text: str | None = None):\nsuper().__init__(parent=parent)\nself.timer = core.Timer(single_shot=True, timeout=self.close)\nself.label = widgets.Label(alignment=\"center\")\nself.iconlabel = widgets.Label()\nself.set_icon(\"mdi.information\")\nself.set_flags(stay_on_top=True, frameless=True, tooltip=True)\nlayout = self.set_layout(\"horizontal\", margin=20, size_constraint=\"minimum\")\nself.set_background_color(\"black\")\nself.label.set_color(\"white\")\nlayout.add(self.iconlabel)\nlayout.add(self.label)\nself.hide()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.RoundProgressBar","title":"<code>RoundProgressBar(parent: widgets.QWidget | None = None)</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent)\nself._min_value = 0.0\nself._max_value = 100.0\nself.current_value = 0.0\nself.null_pos = self.Position.Top\nself.bar_style: RoundProgressBar.BarStyle = self.BarStyle.Donut\nself.outline_pen_width = 1.0\nself.data_pen_width = 1.0\nself._rebuild_brush = False\nself.number_format = \"%p%\"\nself.decimals = 1\nself._update_flags: ValueTypeStr = \"percent\"\nself.gradient_data: Sequence[gui.QColor] = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.BarStyle","title":"<code>BarStyle</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Progress bar style.</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.Position","title":"<code>Position</code>","text":"<p>         Bases: <code>float</code>, <code>enum.Enum</code></p> <p>Start position of progress bar in degrees.</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.ValueType","title":"<code>ValueType</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Value type.</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ScrollAreaTocWidget","title":"<code>ScrollAreaTocWidget(scrollarea: widgets.QScrollArea, orientation: constants.Orientation | constants.OrientationStr = constants.VERTICAL, widget_class: type = widgets.QWidget, **kwargs: type) -&gt; None</code>","text":"<p>         Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>def __init__(\nself,\nscrollarea: widgets.QScrollArea,\norientation: constants.Orientation\n| constants.OrientationStr = constants.VERTICAL,\nwidget_class: type = widgets.QWidget,\n**kwargs,\n) -&gt; None:\n# TODO: not sure if parent should always equal scrollarea...\"\"\"\nself._WidgetClass = widget_class\nself._scroll_mode = ScrollMode.Single\nself._always_expanded = False\nself._last_visible = None\nself.scrollarea = scrollarea\nsuper().__init__(scrollarea, **kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself.setFixedWidth(200)\nself.h_header.hide()\nself.h_header.setStretchLastSection(True)\nself.setAlternatingRowColors(False)\nself.setRootIsDecorated(False)\n# self.setStyleSheet(\n#     \"\"\"::item:hover {background: transparent; border-color:transparent}\n#     ::item:selected { border-color:transparent;\n#     border-style:outset; border-width:2px; color:black; }\"\"\"\n# )\nif self._orientation == constants.VERTICAL:\nscrollarea.v_scrollbar.valueChanged.connect(self._on_scroll)\nelse:\nscrollarea.h_scrollbar.valueChanged.connect(self._on_scroll)\nself.set_widget(scrollarea)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.scrollareatocwidget.ScrollAreaTocWidget.set_widget","title":"<code>set_widget(widget: widgets.QScrollArea)</code>","text":"<p>Set the ScrollArea widget to follow.</p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>def set_widget(self, widget: widgets.QScrollArea):\n\"\"\"Set the ScrollArea widget to follow.\"\"\"\nif widget.widget() is None:\nraise RuntimeError(\"No widget set on ScrollArea.\")\nself.scrollarea = widget\nmodel = ScrollAreaTocModel(\nwidget.widget(),\nshow_root=True,\nparent=self.scrollarea,\nwidget_class=self._WidgetClass,\n)\nself.set_model(model)\nself.proxy = self.proxifier.set_sort_filter_proxy(\nrecursive_filtering_enabled=True\n)\nself.proxy.set_filter_case_sensitive(False)\nself.show_root(False)\nwidget.widget().installEventFilter(self)\nself.selectionModel().currentRowChanged.connect(self._on_current_change)\nself.selectionModel().selectionChanged.connect(self._on_selection_change)\n# if self._always_expanded:\nself.expandAll()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SidebarWidget","title":"<code>SidebarWidget(*args, show_settings: bool = False, main_layout: widgets.widget.LayoutStr | widgets.QLayout = 'vertical', **kwargs: widgets.widget.LayoutStr | widgets.QLayout)</code>","text":"<p>         Bases: <code>widgets.MainWindow</code></p> Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def __init__(\nself,\n*args,\nshow_settings: bool = False,\nmain_layout: widgets.widget.LayoutStr | widgets.QLayout = \"vertical\",\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._button_width = 100\nself._style: constants.ToolButtonStyleStr = \"text_below_icon\"\nself.button_map: dict[widgets.QWidget, widgets.QToolButton] = {}\nself.icon_map: dict[widgets.QWidget, gui.Icon] = {}\nself.sidebar = widgets.ToolBar(\ncontext_menu_policy=\"prevent\",\nfloatable=True,\nobject_name=\"SidebarWidget\",\nwindow_title=\"Sidebar\",\n)\nself.sidebar.set_style(self._style)\nself.sidebar.set_allowed_areas(\"all\")\nself.settings_menu = widgets.Menu()\nself.sidebar.set_icon_size(int(self._button_width * 0.7))\nif show_settings:\nself.settings_btn = self.sidebar.add_menu_button(\n\"\", icon=\"mdi.wrench\", menu=self.settings_menu\n)\nself.settings_btn.setFixedSize(\nself._button_width, self.SETTINGS_BUTTON_HEIGHT\n)\nself.settings_btn.set_style(\"icon\")\nself.sidebar.orientationChanged.connect(self._on_orientation_change)\nself.sidebar.add_separator()\nself.spacer_action = self.sidebar.add_spacer()\nself.add_toolbar(self.sidebar, \"left\")\nself.area = widgets.Widget()\nself.area.set_layout(\"stacked\")\nw = widgets.Widget()\nw.set_layout(main_layout)\nself.main_layout = w.box\nself.main_layout.set_margin(0)\nself.main_layout += self.area\nself.setCentralWidget(w)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SmoothScrollBar","title":"<code>SmoothScrollBar(orientation: constants.Orientation | constants.OrientationStr = 'horizontal', parent: widgets.QAbstractScrollArea | None = None, animation_duration: int = 500, easing: core.easingcurve.TypeStr | core.QEasingCurve.Type = 'out_cubic', trigger: bool = False)</code>","text":"<p>         Bases: <code>widgets.ScrollBar</code></p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\smoothscrollbar.py</code> <pre><code>def __init__(\nself,\norientation: constants.Orientation | constants.OrientationStr = \"horizontal\",\nparent: widgets.QAbstractScrollArea | None = None,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr | core.QEasingCurve.Type = \"out_cubic\",\ntrigger: bool = False,\n):\nsuper().__init__(orientation, parent)\nself._value = self.value()\nself.widget = parent\nself.animation = core.PropertyAnimation()\nself.animation.apply_to(self.value)\nself.animation.set_easing(easing)\nself.animation.setDuration(animation_duration)\nself.animation.finished.connect(self.scroll_ended)\nself.widget.viewport().installEventFilter(self)\nif trigger:\nself.widget.h_scrollbar.valueChanged.connect(gui.Cursor.fake_mouse_move)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.scrollbars.smoothscrollbar.SmoothScrollBar.scroll_by_value","title":"<code>scroll_by_value(value: int)</code>","text":"<p>Scroll by given distance.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\smoothscrollbar.py</code> <pre><code>def scroll_by_value(self, value: int):\n\"\"\"Scroll by given distance.\"\"\"\nself._value += value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.scrollbars.smoothscrollbar.SmoothScrollBar.scroll_to","title":"<code>scroll_to(value: int)</code>","text":"<p>Scroll to given position.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\smoothscrollbar.py</code> <pre><code>def scroll_to(self, value: int):\n\"\"\"Scroll to given position.\"\"\"\nself._value = value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SpanSlider","title":"<code>SpanSlider(*args, object_name: str = 'span_slider', **kwargs: str)</code>","text":"<p>         Bases: <code>widgets.Slider</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\spanslider.py</code> <pre><code>def __init__(self, *args, object_name: str = \"span_slider\", **kwargs):\nsuper().__init__(\"horizontal\", *args, object_name=object_name, **kwargs)\nself.rangeChanged.connect(self.update_range)\nself.sliderReleased.connect(self._move_pressed_handle)\nself.lower_val = 0.0\nself.upper_val = 0.0\nself.lower_pos = 0.0\nself.upper_pos = 0.0\nself.offset = 0\nself.position = 0.0\nself.last_pressed: str | None = None\nself.upper_pressed = widgets.Style.SubControl.SC_None\nself.lower_pressed = widgets.Style.SubControl.SC_None\nself.movement: MovementModeStr = \"no_crossing\"\nself._main_control: Literal[\"lower\", \"upper\"] = \"lower\"\nself._first_movement = False\nself._block_tracking = False\ndark_color = self.palette().color(gui.Palette.ColorRole.Dark)\nself.gradient_left = dark_color.lighter(110)\nself.gradient_right = dark_color.lighter(110)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.editors.spanslider.SpanSlider.set_movement_mode","title":"<code>set_movement_mode(mode: MovementModeStr)</code>","text":"<p>Set movement mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>MovementModeStr</code> <p>movement mode for the main window</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>movement mode type does not exist</p> Source code in <code>prettyqt\\custom_widgets\\editors\\spanslider.py</code> <pre><code>def set_movement_mode(self, mode: MovementModeStr):\n\"\"\"Set movement mode.\n    Args:\n        mode: movement mode for the main window\n    Raises:\n        ValueError: movement mode type does not exist\n    \"\"\"\nif mode not in MOVEMENT_MODE:\nraise ValueError(\"Invalid movement mode\")\nself.movement = mode\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.StandardIconsWidget","title":"<code>StandardIconsWidget(parent: widgets.QWidget | None = None)</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> <p>Dialog showing standard icons.</p> Source code in <code>prettyqt\\custom_widgets\\standardiconswidget.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent)\nlayout = custom_widgets.MultiLineLayout(parent=self)\nfor k in widgets.style.STANDARD_PIXMAP:\nicon_layout = widgets.HBoxLayout()\nicon = widgets.Application.get_style_icon(k)\nlabel = widgets.Label(pixmap=icon.pixmap(32, 32))\nicon_layout.addWidget(label)\nicon_layout.addWidget(widgets.LineEdit(k))\nlayout.addLayout(icon_layout)\nself.set_layout(layout)\nself.set_title(\"Standard Platform Icons\")\nicon = widgets.Application.get_style_icon(\"titlebar_menu_button\")\nself.set_icon(icon)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SubsequenceCompleter","title":"<code>SubsequenceCompleter(*args)</code>","text":"<p>         Bases: <code>widgets.Completer</code></p> <p>QCompleter specialised for subsequence matching.</p> Source code in <code>prettyqt\\custom_widgets\\subsequencecompleter.py</code> <pre><code>def __init__(self, *args):\nsuper().__init__(*args)\nself.completion_search_term = \"\"\nself.source_model = None\nself.set_completion_mode(\"unfiltered_popup\")\nself.proxy_model = custom_models.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.set_case_sensitive(False)\nself._force_next_update = True\nself.path_updated.connect(self._on_path_updated)\nself.setCompletionRole(constants.DISPLAY_ROLE)\n</code></pre>"},{"location":"api/designer.html","title":"designer module","text":""},{"location":"api/gui.html","title":"gui module","text":""},{"location":"api/gui.html#prettyqt.gui.ActionGroup","title":"<code>ActionGroup(parent: core.QObject | None = None, **kwargs: core.QObject | None)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtGui.QActionGroup</code></p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def __init__(self, parent: core.QObject | None = None, **kwargs):\nsuper().__init__(parent, **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.get_exclusion_policy","title":"<code>get_exclusion_policy() -&gt; ExclusionPolicyStr</code>","text":"<p>Return current exclusion policy.</p> <p>Returns:</p> Type Description <code>ExclusionPolicyStr</code> <p>exclusion policy</p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def get_exclusion_policy(self) -&gt; ExclusionPolicyStr:\n\"\"\"Return current exclusion policy.\n    Returns:\n        exclusion policy\n    \"\"\"\nreturn EXCLUSION_POLICY.inverse[self.exclusionPolicy()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.set_exclusion_policy","title":"<code>set_exclusion_policy(policy: ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None)</code>","text":"<p>Set exclusion policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None</code> <p>exclusion policy to use</p> required Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def set_exclusion_policy(\nself, policy: ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None\n):\n\"\"\"Set exclusion policy to use.\n    Args:\n        policy: exclusion policy to use\n    \"\"\"\nif policy is None:\npolicy = \"none\"\nself.setExclusionPolicy(EXCLUSION_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ActionMixin","title":"<code>ActionMixin(*args, text: str | None = None, icon: datatypes.IconType = None, callback: Callable | None = None, **kwargs: Callable | None)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def __init__(\nself,\n*args,\ntext: str | None = None,\nicon: datatypes.IconType = None,\ncallback: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nif callback is not None:\nself.triggered.connect(callback)\nself._usage_count = 0\nif text:\nself.setText(text)\nif icon:\nself.set_icon(icon)\nself.triggered.connect(self._increase_usage_counter)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_menu_role","title":"<code>get_menu_role() -&gt; MenuRoleStr</code>","text":"<p>Return menu role.</p> <p>Returns:</p> Type Description <code>MenuRoleStr</code> <p>menu role</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_menu_role(self) -&gt; MenuRoleStr:\n\"\"\"Return menu role.\n    Returns:\n        menu role\n    \"\"\"\nreturn MENU_ROLE.inverse[super().menuRole()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"<p>Return current priority.</p> <p>Returns:</p> Type Description <code>PriorityStr</code> <p>priority</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\n\"\"\"Return current priority.\n    Returns:\n        priority\n    \"\"\"\nreturn PRIORITIES.inverse[self.priority()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_shortcut_context","title":"<code>get_shortcut_context() -&gt; constants.ShortcutContextStr</code>","text":"<p>Return shortcut context.</p> <p>Returns:</p> Type Description <code>constants.ShortcutContextStr</code> <p>shortcut context</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_shortcut_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n    Returns:\n        shortcut context\n    \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[super().shortcutContext()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nsuper().setIcon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_menu_role","title":"<code>set_menu_role(role: MenuRoleStr | gui.QAction.MenuRole)</code>","text":"<p>Set menu role.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>MenuRoleStr | gui.QAction.MenuRole</code> <p>menu role</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_menu_role(self, role: MenuRoleStr | gui.QAction.MenuRole):\n\"\"\"Set menu role.\n    Args:\n        role: menu role\n    \"\"\"\nsuper().setMenuRole(MENU_ROLE.get_enum_value(role))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_priority","title":"<code>set_priority(priority: PriorityStr | gui.QAction.Priority)</code>","text":"<p>Set priority of the action.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>PriorityStr | gui.QAction.Priority</code> <p>priority for the action</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_priority(self, priority: PriorityStr | gui.QAction.Priority):\n\"\"\"Set priority of the action.\n    Args:\n        priority: priority for the action\n    \"\"\"\nsuper().setPriority(PRIORITIES.get_enum_value(priority))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_shortcut_context","title":"<code>set_shortcut_context(context: constants.ShortcutContextStr | constants.ShortcutContext)</code>","text":"<p>Set shortcut context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>constants.ShortcutContextStr | constants.ShortcutContext</code> <p>shortcut context</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_shortcut_context(\nself, context: constants.ShortcutContextStr | constants.ShortcutContext\n):\n\"\"\"Set shortcut context.\n    Args:\n        context: shortcut context\n    \"\"\"\nsuper().setShortcutContext(constants.SHORTCUT_CONTEXT.get_enum_value(context))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Color","title":"<code>Color(*args)</code>","text":"<p>         Bases: <code>QtGui.QColor</code></p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def __init__(self, *args):\nmatch args:\ncase (QtGui.QColor(),):\nsuper().__init__()\nself.setRgba(args[0].rgba())\ncase (str(),):\nif not is_valid_color(args[0]):\nraise ValueError(args[0])\nsuper().__init__(args[0])\ncase _:\nsuper().__init__(*args)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.drift","title":"<code>drift(factor: int = 1.0) -&gt; Self</code>","text":"<p>Return color that is lighter or darker than the base color.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def drift(self, factor: int = 1.0) -&gt; Self:\n\"\"\"Return color that is lighter or darker than the base color.\"\"\"\nCls = type(self)\nif self == Color(\"#000000\"):\nreturn Cls(Color(\"#050505\").lighter(int(factor * 100)))\nelif self.lightness() &gt; 128:\nreturn Cls(self.darker(int(factor * 100)))\nelse:\nreturn Cls(self.lighter(int(factor * 100)))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.interpolate_color","title":"<code>interpolate_color(start: QtGui.QColor, end: QtGui.QColor, percent: int, colorspace: SpecStr | None = 'rgb') -&gt; Self</code>  <code>classmethod</code>","text":"<p>Get an interpolated color value.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>QtGui.QColor</code> <p>The start color.</p> required <code>end</code> <code>QtGui.QColor</code> <p>The end color.</p> required <code>percent</code> <code>int</code> <p>Which value to get (0 - 100)</p> required <code>colorspace</code> <code>SpecStr | None</code> <p>The desired interpolation color system,         QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)         If None, start is used except when percent is 100.</p> <code>'rgb'</code> Return <p>The interpolated QColor, with the same spec as the given start color.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>@classmethod\ndef interpolate_color(\ncls,\nstart: QtGui.QColor,\nend: QtGui.QColor,\npercent: int,\ncolorspace: SpecStr | None = \"rgb\",\n) -&gt; Self:\n\"\"\"Get an interpolated color value.\n    Args:\n        start: The start color.\n        end: The end color.\n        percent: Which value to get (0 - 100)\n        colorspace: The desired interpolation color system,\n                    QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)\n                    If None, start is used except when percent is 100.\n    Return:\n        The interpolated QColor, with the same spec as the given start color.\n    \"\"\"\nif colorspace is None:\nreturn cls(*end.getRgb()) if percent == 100 else cls(*start.getRgb())\nout = cls()\nmatch colorspace:\ncase \"rgb\":\ncomponents = helpers.get_color_percentage(\nstart.getRgb(), end.getRgb(), percent  # type: ignore\n)\nout.setRgb(*components)\ncase \"hsv\":\ncomponents = helpers.get_color_percentage(\nstart.getHsv(), end.getHsv(), percent  # type: ignore\n)\nout.setHsv(*components)\ncase \"hsl\":\ncomponents = helpers.get_color_percentage(\nstart.getHsl(), end.getHsl(), percent  # type: ignore\n)\nout.setHsl(*components)\ncase _:\nraise ValueError(\"Invalid colorspace!\")\nreturn cls(out.convertTo(start.spec()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.is_dark","title":"<code>is_dark() -&gt; bool</code>","text":"<p>Check whether a color is 'dark'.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def is_dark(self) -&gt; bool:\n\"\"\"Check whether a color is 'dark'.\"\"\"\nreturn self.lightness() &lt; 128\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ColorSpace","title":"<code>ColorSpace</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QColorSpace</code></p>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.get_primaries","title":"<code>get_primaries() -&gt; PrimariesStr</code>","text":"<p>Return current primaries.</p> <p>Returns:</p> Type Description <code>PrimariesStr</code> <p>primaries</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def get_primaries(self) -&gt; PrimariesStr:\n\"\"\"Return current primaries.\n    Returns:\n        primaries\n    \"\"\"\nreturn PRIMARIES.inverse[self.primaries()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.get_transfer_function","title":"<code>get_transfer_function() -&gt; TransformFunctionStr</code>","text":"<p>Return current transfer function.</p> <p>Returns:</p> Type Description <code>TransformFunctionStr</code> <p>transfer function</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def get_transfer_function(self) -&gt; TransformFunctionStr:\n\"\"\"Return current transfer function.\n    Returns:\n        transfer function\n    \"\"\"\nreturn TRANSFER_FUNCTION.inverse[self.transferFunction()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.set_primaries","title":"<code>set_primaries(primaries: PrimariesStr | QtGui.QColorSpace.Primaries)</code>","text":"<p>Set primaries.</p> <p>Parameters:</p> Name Type Description Default <code>primaries</code> <code>PrimariesStr | QtGui.QColorSpace.Primaries</code> <p>primaries to use</p> required Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def set_primaries(self, primaries: PrimariesStr | QtGui.QColorSpace.Primaries):\n\"\"\"Set primaries.\n    Args:\n        primaries: primaries to use\n    \"\"\"\nself.setPrimaries(PRIMARIES.get_enum_value(primaries))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.set_transfer_function","title":"<code>set_transfer_function(fn: TransformFunctionStr | QtGui.QColorSpace.TransferFunction, gamma: float = 0.0)</code>","text":"<p>Set transfer function.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>TransformFunctionStr | QtGui.QColorSpace.TransferFunction</code> <p>transfer function to use</p> required <code>gamma</code> <code>float</code> <p>gamma value</p> <code>0.0</code> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def set_transfer_function(\nself,\nfn: TransformFunctionStr | QtGui.QColorSpace.TransferFunction,\ngamma: float = 0.0,\n):\n\"\"\"Set transfer function.\n    Args:\n        fn: transfer function to use\n        gamma: gamma value\n    \"\"\"\nself.setTransferFunction(TRANSFER_FUNCTION.get_enum_value(fn), gamma)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Cursor","title":"<code>Cursor</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QCursor</code></p>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.get_shape","title":"<code>get_shape() -&gt; constants.CursorShapeStr</code>","text":"<p>Return current cursor shape.</p> <p>Returns:</p> Type Description <code>constants.CursorShapeStr</code> <p>cursor shape</p> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>def get_shape(self) -&gt; constants.CursorShapeStr:\n\"\"\"Return current cursor shape.\n    Returns:\n        cursor shape\n    \"\"\"\nreturn constants.CURSOR_SHAPE.inverse[self.shape()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.set_pos","title":"<code>set_pos(where: Literal['screen', 'current'] | gui.QScreen | core.QRect | core.QPoint | tuple[int, int] | tuple[int, int, int, int], how: Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right'] = 'center', x_offset: int = 0, y_offset: int = 0, duration: int = 0)</code>  <code>classmethod</code>","text":"<p>Position cursor onto screen position / widget / window / screen.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>Literal['screen', 'current'] | gui.QScreen | core.QRect | core.QPoint | tuple[int, int] | tuple[int, int, int, int]</code> <p>where to position on</p> required <code>how</code> <code>Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right']</code> <p>How to align</p> <code>'center'</code> <code>x_offset</code> <code>int</code> <p>additional x offset for final position</p> <code>0</code> <code>y_offset</code> <code>int</code> <p>additional y offset for final position</p> <code>0</code> <code>duration</code> <code>int</code> <p>movement time</p> <code>0</code> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>@classmethod\ndef set_pos(\ncls,\nwhere: Literal[\"screen\", \"current\"] | gui.QScreen\n# | QtWidgets.QWidget\n| core.QRect | core.QPoint | tuple[int, int] | tuple[int, int, int, int],\nhow: Literal[\n\"center\",\n\"top\",\n\"left\",\n\"bottom\",\n\"right\",\n\"top_left\",\n\"top_right\",\n\"bottom_left\",\n\"bottom_right\",\n] = \"center\",\nx_offset: int = 0,\ny_offset: int = 0,\nduration: int = 0,\n):\n\"\"\"Position cursor onto screen position / widget / window / screen.\n    Arguments:\n        where: where to position on\n        how: How to align\n        x_offset: additional x offset for final position\n        y_offset: additional y offset for final position\n        duration: movement time\n    \"\"\"\nmatch where:\ncase \"current\":\np = cls.pos()\ngeom = core.Rect(p, p)\ncase core.QPoint():\ngeom = core.Rect(where, where)\ncase (int(), int()):\np = core.Point(*where)\ngeom = core.Rect(p, p)\ncase (int(), int(), int(), int()):\ngeom = core.Rect(*where)\ncase core.QRect():\ngeom = where\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\ncase gui.QScreen():\ngeom = where.geometry()\ncase _:  # not wanting to import QtWidgets here... perhaps create a protocol.\ngeom = where.frameGeometry()\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top())\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom())\ncase \"left\":\nnew = core.Point(geom.left(), geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right(), geom.center().y())\ncase \"top_right\":\nnew = geom.topRight()\ncase \"top_left\":\nnew = geom.topLeft()\ncase \"bottom_right\":\nnew = geom.bottomRight()\ncase \"bottom_left\":\nnew = geom.bottomLeft()\nnew_pos = core.Point(new.x() + x_offset, new.y() + y_offset)\nif duration &gt; 0:\nfrom prettyqt.custom_animations import cursormoveanimation\ncls._cursor_animation = cursormoveanimation.CursorMoveAnimation(\nduration=duration, end=new_pos\n)\ncls._cursor_animation.start()\nelse:\ncls.setPos(new_pos)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.set_shape","title":"<code>set_shape(shape: constants.CursorShapeStr)</code>","text":"<p>Set cursor shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>constants.CursorShapeStr</code> <p>shape to use</p> required Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>def set_shape(self, shape: constants.CursorShapeStr):\n\"\"\"Set cursor shape.\n    Args:\n        shape: shape to use\n    \"\"\"\nself.setShape(constants.CURSOR_SHAPE.get_enum_value(shape))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Font","title":"<code>Font</code>","text":"<p>         Bases: <code>gui.QFont</code></p>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_capitalization","title":"<code>get_capitalization() -&gt; CapitalizationStr</code>","text":"<p>Get current font capitalization.</p> <p>Returns:</p> Type Description <code>CapitalizationStr</code> <p>current font capitalization</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_capitalization(self) -&gt; CapitalizationStr:\n\"\"\"Get current font capitalization.\n    Returns:\n        current font capitalization\n    \"\"\"\nreturn CAPITALIZATION.inverse[self.capitalization()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_hinting_preference","title":"<code>get_hinting_preference() -&gt; HintingPreferenceStr</code>","text":"<p>Get current hinting preference.</p> <p>Returns:</p> Type Description <code>HintingPreferenceStr</code> <p>current hinting preference</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_hinting_preference(self) -&gt; HintingPreferenceStr:\n\"\"\"Get current hinting preference.\n    Returns:\n        current hinting preference\n    \"\"\"\nreturn HINTING_PREFERENCE.inverse[self.hintingPreference()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_letter_spacing_type","title":"<code>get_letter_spacing_type() -&gt; SpacingTypeStr</code>","text":"<p>Get current letter spacing type.</p> <p>Returns:</p> Type Description <code>SpacingTypeStr</code> <p>current letter spacing type</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_letter_spacing_type(self) -&gt; SpacingTypeStr:\n\"\"\"Get current letter spacing type.\n    Returns:\n        current letter spacing type\n    \"\"\"\nreturn SPACING_TYPE.inverse[self.letterSpacingType()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_style","title":"<code>get_style() -&gt; StyleStr</code>","text":"<p>Get current font style.</p> <p>Returns:</p> Type Description <code>StyleStr</code> <p>current font style</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_style(self) -&gt; StyleStr:\n\"\"\"Get current font style.\n    Returns:\n        current font style\n    \"\"\"\nreturn STYLE.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_weight","title":"<code>get_weight() -&gt; WeightStr</code>","text":"<p>Get current font weight.</p> <p>Returns:</p> Type Description <code>WeightStr</code> <p>current font weight</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_weight(self) -&gt; WeightStr:\n\"\"\"Get current font weight.\n    Returns:\n        current font weight\n    \"\"\"\nreturn WEIGHT.inverse[self.weight()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_capitalization","title":"<code>set_capitalization(capitalization: CapitalizationStr | gui.Font.Capitalization)</code>","text":"<p>Set the font capitalization.</p> <p>Parameters:</p> Name Type Description Default <code>capitalization</code> <code>CapitalizationStr | gui.Font.Capitalization</code> <p>font capitalization</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_capitalization(\nself, capitalization: CapitalizationStr | gui.Font.Capitalization\n):\n\"\"\"Set the font capitalization.\n    Args:\n        capitalization: font capitalization\n    \"\"\"\nself.setCapitalization(CAPITALIZATION.get_enum_value(capitalization))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_family","title":"<code>set_family(family: str, fallback: str | None = None)</code>","text":"<p>Set the font family.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>str</code> <p>font family</p> required <code>fallback</code> <code>str | None</code> <p>fallback font family</p> <code>None</code> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_family(self, family: str, fallback: str | None = None):\n\"\"\"Set the font family.\n    Args:\n        family: font family\n        fallback: fallback font family\n    \"\"\"\nself.setFamily(family)\nfont_info = gui.FontInfo(self)\nif fallback is not None and font_info.family() != family:\nself.setFamily(fallback)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_hinting_preference","title":"<code>set_hinting_preference(preference: HintingPreferenceStr | gui.Font.HintingPreference)</code>","text":"<p>Set the hinting preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>HintingPreferenceStr | gui.Font.HintingPreference</code> <p>hinting preference</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_hinting_preference(\nself, preference: HintingPreferenceStr | gui.Font.HintingPreference\n):\n\"\"\"Set the hinting preference.\n    Args:\n        preference: hinting preference\n    \"\"\"\nself.setHintingPreference(HINTING_PREFERENCE.get_enum_value(preference))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_letter_spacing","title":"<code>set_letter_spacing(typ: SpacingTypeStr | gui.Font.SpacingType, spacing: float)</code>","text":"<p>Set the letter spacing.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>SpacingTypeStr | gui.Font.SpacingType</code> <p>letter spacing type</p> required <code>spacing</code> <code>float</code> <p>spacing</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_letter_spacing(\nself, typ: SpacingTypeStr | gui.Font.SpacingType, spacing: float\n):\n\"\"\"Set the letter spacing.\n    Args:\n        typ: letter spacing type\n        spacing: spacing\n    \"\"\"\nself.setLetterSpacing(SPACING_TYPE.get_enum_value(typ), spacing)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_style","title":"<code>set_style(style: StyleStr | gui.Font.Style)</code>","text":"<p>Set the font style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>StyleStr | gui.Font.Style</code> <p>font style</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_style(self, style: StyleStr | gui.Font.Style):\n\"\"\"Set the font style.\n    Args:\n        style: font style\n    \"\"\"\nself.setStyle(STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_style_hint","title":"<code>set_style_hint(hint: StyleHintStr | gui.QFont.StyleHint)</code>","text":"<p>Set the style hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>StyleHintStr | gui.QFont.StyleHint</code> <p>style hint</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_style_hint(self, hint: StyleHintStr | gui.QFont.StyleHint):\n\"\"\"Set the style hint.\n    Args:\n        hint: style hint\n    \"\"\"\nself.setStyleHint(STYLE_HINTS.get_enum_value(hint))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_weight","title":"<code>set_weight(weight: WeightStr | gui.QFont.Weight)</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>WeightStr | gui.QFont.Weight</code> <p>font weight</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_weight(self, weight: WeightStr | gui.QFont.Weight):\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    \"\"\"\nself.setWeight(WEIGHT.get_enum_value(weight))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.GradientMixin","title":"<code>GradientMixin</code>","text":""},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_coordinate_mode","title":"<code>get_coordinate_mode() -&gt; CoordinateModeStr</code>","text":"<p>Return current coordinate mode.</p> <p>Returns:</p> Type Description <code>CoordinateModeStr</code> <p>coordinate mode</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_coordinate_mode(self) -&gt; CoordinateModeStr:\n\"\"\"Return current coordinate mode.\n    Returns:\n        coordinate mode\n    \"\"\"\nreturn COORDINATE_MODE.inverse[self.coordinateMode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_spread","title":"<code>get_spread() -&gt; SpreadStr</code>","text":"<p>Return current spread method.</p> <p>Returns:</p> Type Description <code>SpreadStr</code> <p>spread method</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_spread(self) -&gt; SpreadStr:\n\"\"\"Return current spread method.\n    Returns:\n        spread method\n    \"\"\"\nreturn SPREAD.inverse[self.spread()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return current gradient type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>gradient type</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return current gradient type.\n    Returns:\n        gradient type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.set_coordinate_mode","title":"<code>set_coordinate_mode(mode: CoordinateModeStr | gui.QGradient.CoordinateMode)</code>","text":"<p>Set the coordinate mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CoordinateModeStr | gui.QGradient.CoordinateMode</code> <p>coordinate mode</p> required Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def set_coordinate_mode(self, mode: CoordinateModeStr | gui.QGradient.CoordinateMode):\n\"\"\"Set the coordinate mode.\n    Args:\n        mode: coordinate mode\n    \"\"\"\nself.setCoordinateMode(COORDINATE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.set_spread","title":"<code>set_spread(method: SpreadStr | gui.QGradient.Spread)</code>","text":"<p>Set the spread method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>SpreadStr | gui.QGradient.Spread</code> <p>spread method</p> required Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def set_spread(self, method: SpreadStr | gui.QGradient.Spread):\n\"\"\"Set the spread method.\n    Args:\n        method: spread method\n    \"\"\"\nself.setSpread(SPREAD.get_enum_value(method))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.GuiApplicationMixin","title":"<code>GuiApplicationMixin</code>","text":"<p>         Bases: <code>core.CoreApplicationMixin</code></p>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.copy_to_clipboard","title":"<code>copy_to_clipboard(text: str)</code>  <code>classmethod</code>","text":"<p>Sets clipboard to supplied text.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef copy_to_clipboard(cls, text: str):\n\"\"\"Sets clipboard to supplied text.\"\"\"\ncb = cls.clipboard()\ncb.clear(mode=cb.Mode.Clipboard)\ncb.setText(text, mode=cb.Mode.Clipboard)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_application_state","title":"<code>get_application_state() -&gt; list[constants.ApplicationStateStr]</code>  <code>classmethod</code>","text":"<p>Get the current application state.</p> <p>Returns:</p> Type Description <code>list[constants.ApplicationStateStr]</code> <p>application state</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_application_state(cls) -&gt; list[constants.ApplicationStateStr]:\n\"\"\"Get the current application state.\n    Returns:\n        application state\n    \"\"\"\nreturn [\nk\nfor k, v in constants.APPLICATION_STATES.items()\nif v &amp; cls.applicationState()  # type: ignore\n]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_high_dpi_scale_factor_rounding_policy","title":"<code>get_high_dpi_scale_factor_rounding_policy() -&gt; constants.HighDpiScaleFactorRoundingPolicyStr</code>  <code>classmethod</code>","text":"<p>Get the current high dpi scale factor rounding policy.</p> <p>Returns:</p> Type Description <code>constants.HighDpiScaleFactorRoundingPolicyStr</code> <p>rounding policy</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_high_dpi_scale_factor_rounding_policy(\ncls,\n) -&gt; constants.HighDpiScaleFactorRoundingPolicyStr:\n\"\"\"Get the current high dpi scale factor rounding policy.\n    Returns:\n        rounding policy\n    \"\"\"\nreturn constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.inverse[\ncls.highDpiScaleFactorRoundingPolicy()\n]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> <p>Returns:</p> Type Description <code>constants.LayoutDirectionStr</code> <p>layout direction</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_high_dpi_scale_factor_rounding_policy","title":"<code>set_high_dpi_scale_factor_rounding_policy(policy: constants.HighDpiScaleFactorRoundingPolicyStr | constants.HighDpiScaleFactorRoundingPolicy)</code>  <code>classmethod</code>","text":"<p>Set high dpi scale factor rounding policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.HighDpiScaleFactorRoundingPolicyStr | constants.HighDpiScaleFactorRoundingPolicy</code> <p>rounding policy</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef set_high_dpi_scale_factor_rounding_policy(\ncls,\npolicy: constants.HighDpiScaleFactorRoundingPolicyStr\n| constants.HighDpiScaleFactorRoundingPolicy,\n):\n\"\"\"Set high dpi scale factor rounding policy.\n    Args:\n        policy: rounding policy\n    \"\"\"\ncls.setHighDpiScaleFactorRoundingPolicy(\nconstants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the default window icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the default window icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon, color=colors.WINDOW_ICON_COLOR)\nself.setWindowIcon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr | constants.LayoutDirection)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr | constants.LayoutDirection</code> <p>layout direction</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection\n):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    \"\"\"\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Icon","title":"<code>Icon</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QIcon</code></p>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.from_char","title":"<code>from_char(char: str, background: str = 'black', color: str = 'white') -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a QIcon with a given character.</p> Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>@classmethod\ndef from_char(cls, char: str, background=\"black\", color=\"white\") -&gt; Self:\n\"\"\"Create a QIcon with a given character.\"\"\"\nicon = cls()\nfor size in (16, 32, 64):\npx = gui.Pixmap.create_char(\nchar, background=background, color=color, size=size\n)\nicon.addPixmap(px)\nreturn icon\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Image","title":"<code>Image</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code>, <code>gui.QImage</code></p>"},{"location":"api/gui.html#prettyqt.gui.image.Image.for_mimetype","title":"<code>for_mimetype(path: os.PathLike) -&gt; Self | None</code>  <code>classmethod</code>","text":"<p>Try to create an icon from theme using the file mimetype.</p> <p>E.g.::</p> <pre><code>return self.mimetype_icon(\npath, fallback=':/icons/text-x-python.png')\n</code></pre> <p>:param path: file path for which the icon must be created :param fallback: fallback icon path (qrc or file system) :returns: QIcon or None if the file mimetype icon could not be found.</p> Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>@classmethod\ndef for_mimetype(cls, path: os.PathLike) -&gt; Self | None:\n\"\"\"Try to create an icon from theme using the file mimetype.\n    E.g.::\n        return self.mimetype_icon(\n            path, fallback=':/icons/text-x-python.png')\n    :param path: file path for which the icon must be created\n    :param fallback: fallback icon path (qrc or file system)\n    :returns: QIcon or None if the file mimetype icon could not be found.\n    \"\"\"\npath = os.fspath(path)\nif mime := mimetypes.guess_type(path)[0]:\nicon = mime.replace(\"/\", \"-\")\n# if system.WINDOWS:\n#     return icons.file()\nif cls.hasThemeIcon(icon):\nicon = cls(cls.fromTheme(icon))\nif not icon.isNull():\nreturn icon\nreturn None  #  gui.Icon.fromTheme(\"text-x-generic\")\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ImageIOHandler","title":"<code>ImageIOHandler</code>","text":"<p>         Bases: <code>mod</code></p>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.get_option","title":"<code>get_option(option: ImageOptionStr | mod.ImageOption) -&gt; datatypes.Variant</code>","text":"<p>Return the value assigned to option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr | mod.ImageOption</code> <p>option to get</p> required <p>Returns:</p> Type Description <code>datatypes.Variant</code> <p>option</p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def get_option(self, option: ImageOptionStr | mod.ImageOption) -&gt; datatypes.Variant:\n\"\"\"Return the value assigned to option.\n    Args:\n        option: option to get\n    Returns:\n        option\n    \"\"\"\nreturn self.option(IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.set_option","title":"<code>set_option(option: ImageOptionStr | mod.ImageOption, value: datatypes.Variant)</code>","text":"<p>Set option to given value.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr | mod.ImageOption</code> <p>option to use</p> required <code>value</code> <code>datatypes.Variant</code> <p>value to set</p> required Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def set_option(\nself, option: ImageOptionStr | mod.ImageOption, value: datatypes.Variant\n):\n\"\"\"Set option to given value.\n    Args:\n        option: option to use\n        value: value to set\n    \"\"\"\nself.setOption(IMAGE_OPTION.get_enum_value(option), value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.supports_option","title":"<code>supports_option(option: ImageOptionStr | mod.ImageOption) -&gt; bool</code>","text":"<p>Return whether the image handler supports given option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr | mod.ImageOption</code> <p>option to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>option</p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def supports_option(self, option: ImageOptionStr | mod.ImageOption) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n    Args:\n        option: option to check\n    Returns:\n        option\n    \"\"\"\nreturn self.supportsOption(IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ImageReader","title":"<code>ImageReader</code>","text":"<p>         Bases: <code>gui.QImageReader</code></p>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_error","title":"<code>get_error() -&gt; ImageReaderErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ImageReaderErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_error(self) -&gt; ImageReaderErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn IMAGE_READER_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_transformation","title":"<code>get_transformation() -&gt; gui.imageiohandler.TransformationStr</code>","text":"<p>Return the transformation and orientation the image has been set to.</p> <p>Returns:</p> Type Description <code>gui.imageiohandler.TransformationStr</code> <p>transformation</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n    Returns:\n        transformation\n    \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.supports_option","title":"<code>supports_option(option: gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption) -&gt; bool</code>","text":"<p>Return whether the image handler supports given option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption</code> <p>option to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>option</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def supports_option(\nself, option: gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption\n) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n    Args:\n        option: option to check\n    Returns:\n        option\n    \"\"\"\nreturn self.supportsOption(gui.imageiohandler.IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ImageWriter","title":"<code>ImageWriter</code>","text":"<p>         Bases: <code>gui.QImageWriter</code></p>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_error","title":"<code>get_error() -&gt; ImageWriterErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ImageWriterErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_error(self) -&gt; ImageWriterErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn IMAGE_WRITER_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_transformation","title":"<code>get_transformation() -&gt; gui.imageiohandler.TransformationStr</code>","text":"<p>Return the transformation and orientation the image has been set to.</p> <p>Returns:</p> Type Description <code>gui.imageiohandler.TransformationStr</code> <p>transformation</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n    Returns:\n        transformation\n    \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.set_transformation","title":"<code>set_transformation(origin: gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation)</code>","text":"<p>Set the image transformations metadata including orientation.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation</code> <p>transformation to use</p> required Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def set_transformation(\nself,\norigin: gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation,\n):\n\"\"\"Set the image transformations metadata including orientation.\n    Args:\n        origin: transformation to use\n    \"\"\"\nself.setTransformation(gui.imageiohandler.TRANSFORMATION.get_enum_value(origin))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Movie","title":"<code>Movie</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtGui.QMovie</code></p>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Get the current cache mode.</p> <p>Returns:</p> Type Description <code>CacheModeStr</code> <p>cache mode</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current cache mode.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.get_state","title":"<code>get_state() -&gt; MovieStateStr</code>","text":"<p>Get the current state.</p> <p>Returns:</p> Type Description <code>MovieStateStr</code> <p>state</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_state(self) -&gt; MovieStateStr:\n\"\"\"Get the current state.\n    Returns:\n        state\n    \"\"\"\nreturn MOVIE_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr | QtGui.QMovie.CacheMode)</code>","text":"<p>Set cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr | QtGui.QMovie.CacheMode</code> <p>cache mode</p> required Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr | QtGui.QMovie.CacheMode):\n\"\"\"Set cache mode.\n    Args:\n        mode: cache mode\n    \"\"\"\nself.setCacheMode(CACHE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PageLayout","title":"<code>PageLayout</code>","text":"<p>         Bases: <code>gui.QPageLayout</code></p>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"<p>Get the current mode.</p> <p>Returns:</p> Type Description <code>ModeStr</code> <p>mode</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\n\"\"\"Get the current mode.\n    Returns:\n        mode\n    \"\"\"\nreturn MODES.inverse[self.mode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_orientation","title":"<code>get_orientation() -&gt; OrientationStr</code>","text":"<p>Get the current orientation.</p> <p>Returns:</p> Type Description <code>OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_orientation(self) -&gt; OrientationStr:\n\"\"\"Get the current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn ORIENTATIONS.inverse[self.orientation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_units","title":"<code>get_units() -&gt; UnitStr</code>","text":"<p>Get the current unit.</p> <p>Returns:</p> Type Description <code>UnitStr</code> <p>unit</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_units(self) -&gt; UnitStr:\n\"\"\"Get the current unit.\n    Returns:\n        unit\n    \"\"\"\nreturn UNITS.inverse[self.units()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.set_mode","title":"<code>set_mode(mode: ModeStr | gui.QPageLayout.Mode)</code>","text":"<p>Set mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ModeStr | gui.QPageLayout.Mode</code> <p>mode</p> required Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_mode(self, mode: ModeStr | gui.QPageLayout.Mode):\n\"\"\"Set mode.\n    Args:\n        mode: mode\n    \"\"\"\nself.setMode(MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.set_orientation","title":"<code>set_orientation(orientation: OrientationStr | gui.QPageLayout.Orientation)</code>","text":"<p>Set orientation.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>OrientationStr | gui.QPageLayout.Orientation</code> <p>orientation</p> required Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_orientation(self, orientation: OrientationStr | gui.QPageLayout.Orientation):\n\"\"\"Set orientation.\n    Args:\n        orientation: orientation\n    \"\"\"\nself.setOrientation(ORIENTATIONS.get_enum_value(orientation))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.set_units","title":"<code>set_units(unit: UnitStr | gui.QPageLayout.Unit)</code>","text":"<p>Set unit.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>UnitStr | gui.QPageLayout.Unit</code> <p>unit</p> required Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_units(self, unit: UnitStr | gui.QPageLayout.Unit):\n\"\"\"Set unit.\n    Args:\n        unit: unit\n    \"\"\"\nself.setUnits(UNITS.get_enum_value(unit))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PageSize","title":"<code>PageSize</code>","text":"<p>         Bases: <code>QtGui.QPageSize</code></p>"},{"location":"api/gui.html#prettyqt.gui.pagesize.PageSize.get_definition_units","title":"<code>get_definition_units() -&gt; UnitStr</code>","text":"<p>Get the definition unit.</p> <p>Returns:</p> Type Description <code>UnitStr</code> <p>unit</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def get_definition_units(self) -&gt; UnitStr:\n\"\"\"Get the definition unit.\n    Returns:\n        unit\n    \"\"\"\nunits = self.definitionUnits()\nif units.value == -1:\nraise ValueError(\"Invalid page size\")\nreturn UNITS.inverse[units]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagesize.PageSize.get_id","title":"<code>get_id() -&gt; str</code>","text":"<p>Get the standard page size id.</p> <p>Returns:</p> Type Description <code>str</code> <p>page size id</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def get_id(self) -&gt; str:\n\"\"\"Get the standard page size id.\n    Returns:\n        page size id\n    \"\"\"\nreturn PAGE_SIZE_ID.inverse[self.id()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PaintDeviceMixin","title":"<code>PaintDeviceMixin</code>","text":""},{"location":"api/gui.html#prettyqt.gui.paintdevice.PaintDeviceMixin.get_metric","title":"<code>get_metric(metric: MetricStr | QtGui.QPaintDevice.PaintDeviceMetric) -&gt; int</code>","text":"<p>Return metric information.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>MetricStr | QtGui.QPaintDevice.PaintDeviceMetric</code> <p>metric information to get</p> required <p>Returns:</p> Type Description <code>int</code> <p>metric information</p> Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>def get_metric(self, metric: MetricStr | QtGui.QPaintDevice.PaintDeviceMetric) -&gt; int:\n\"\"\"Return metric information.\n    Args:\n        metric: metric information to get\n    Returns:\n        metric information\n    \"\"\"\nreturn self.metric(METRICS.get_enum_value(metric))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PainterMixin","title":"<code>PainterMixin</code>","text":""},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.get_composition_mode","title":"<code>get_composition_mode() -&gt; CompositionModeStr</code>","text":"<p>Get the current composition mode.</p> <p>Returns:</p> Type Description <code>CompositionModeStr</code> <p>composition mode</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_composition_mode(self) -&gt; CompositionModeStr:\n\"\"\"Get the current composition mode.\n    Returns:\n        composition mode\n    \"\"\"\nreturn COMPOSITION_MODE.inverse[self.compositionMode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"<p>Return current pen.</p> <p>Returns:</p> Type Description <code>gui.Pen</code> <p>current pen</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\n\"\"\"Return current pen.\n    Returns:\n        current pen\n    \"\"\"\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_composition_mode","title":"<code>set_composition_mode(mode: CompositionModeStr | gui.QPainter.CompositionMode)</code>","text":"<p>Set the current composition mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CompositionModeStr | gui.QPainter.CompositionMode</code> <p>composition mode</p> required Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_composition_mode(\nself, mode: CompositionModeStr | gui.QPainter.CompositionMode\n):\n\"\"\"Set the current composition mode.\n    Arguments:\n        mode: composition mode\n    \"\"\"\nself.setCompositionMode(COMPOSITION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_pen","title":"<code>set_pen(style: constants.PenStyleStr | None = 'solid', width: float = 1.0, color: datatypes.ColorType = 'black', brush: gui.QBrush | None = None, miter_limit: float = 2.0, join_style: constants.JoinStyleStr = 'bevel', cap_style: constants.CapStyleStr = 'square') -&gt; gui.Pen</code>","text":"<p>Set pen to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | None</code> <p>pen style</p> <code>'solid'</code> <code>width</code> <code>float</code> <p>pen width</p> <code>1.0</code> <code>color</code> <code>datatypes.ColorType</code> <p>pen color</p> <code>'black'</code> <code>brush</code> <code>gui.QBrush | None</code> <p>pen brush</p> <code>None</code> <code>miter_limit</code> <code>float</code> <p>miter limit</p> <code>2.0</code> <code>join_style</code> <code>constants.JoinStyleStr</code> <p>pen join style</p> <code>'bevel'</code> <code>cap_style</code> <code>constants.CapStyleStr</code> <p>pen cap style</p> <code>'square'</code> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_pen(\nself,\nstyle: constants.PenStyleStr | None = \"solid\",\nwidth: float = 1.0,\ncolor: datatypes.ColorType = \"black\",\nbrush: gui.QBrush | None = None,\nmiter_limit: float = 2.0,\njoin_style: constants.JoinStyleStr = \"bevel\",\ncap_style: constants.CapStyleStr = \"square\",\n) -&gt; gui.Pen:\n\"\"\"Set pen to use.\n    Args:\n        style: pen style\n        width: pen width\n        color: pen color\n        brush: pen brush\n        miter_limit: miter limit\n        join_style: pen join style\n        cap_style: pen cap style\n    \"\"\"\npen = gui.Pen()\npen.set_style(style)\nif style in [\"none\", None]:\nself.setPen(pen)\nreturn pen\npen.set_cap_style(cap_style)\npen.set_join_style(join_style)\npen.setMiterLimit(miter_limit)\npen.setWidthF(width)\nif brush is not None:\npen.setBrush(brush)\npen.set_color(color)\nself.setPen(pen)\nreturn pen\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PainterPath","title":"<code>PainterPath</code>","text":"<p>         Bases: <code>QtGui.QPainterPath</code></p>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.get_fill_rule","title":"<code>get_fill_rule() -&gt; constants.FillRuleStr</code>","text":"<p>Return current fill rule.</p> <p>Returns:</p> Type Description <code>constants.FillRuleStr</code> <p>fill rule</p> Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def get_fill_rule(self) -&gt; constants.FillRuleStr:\n\"\"\"Return current fill rule.\n    Returns:\n        fill rule\n    \"\"\"\nreturn constants.FILL_RULE.inverse[self.fillRule()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.set_fill_rule","title":"<code>set_fill_rule(rule: constants.FillRuleStr)</code>","text":"<p>Set fill rule.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>constants.FillRuleStr</code> <p>fill rule to use</p> required Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def set_fill_rule(self, rule: constants.FillRuleStr):\n\"\"\"Set fill rule.\n    Args:\n        rule: fill rule to use\n    \"\"\"\nself.setFillRule(constants.FILL_RULE[rule])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PainterPathStroker","title":"<code>PainterPathStroker</code>","text":"<p>         Bases: <code>gui.QPainterPathStroker</code></p>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.get_cap_style","title":"<code>get_cap_style() -&gt; constants.CapStyleStr | constants.PenCapStyle</code>","text":"<p>Return current cap style.</p> <p>Returns:</p> Type Description <code>constants.CapStyleStr | constants.PenCapStyle</code> <p>cap style</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def get_cap_style(self) -&gt; constants.CapStyleStr | constants.PenCapStyle:\n\"\"\"Return current cap style.\n    Returns:\n        cap style\n    \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.get_join_style","title":"<code>get_join_style() -&gt; constants.JoinStyleStr</code>","text":"<p>Return current join style.</p> <p>Returns:</p> Type Description <code>constants.JoinStyleStr</code> <p>join style</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n    Returns:\n        join style\n    \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.set_cap_style","title":"<code>set_cap_style(style: constants.CapStyleStr | constants.PenCapStyle)</code>","text":"<p>Set cap style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CapStyleStr | constants.PenCapStyle</code> <p>cap style to use</p> required Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def set_cap_style(self, style: constants.CapStyleStr | constants.PenCapStyle):\n\"\"\"Set cap style to use.\n    Args:\n        style: cap style to use\n    \"\"\"\nself.setCapStyle(constants.CAP_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.set_join_style","title":"<code>set_join_style(style: constants.JoinStyleStr | constants.PenJoinStyle)</code>","text":"<p>Set join style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.JoinStyleStr | constants.PenJoinStyle</code> <p>join style to use</p> required Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def set_join_style(self, style: constants.JoinStyleStr | constants.PenJoinStyle):\n\"\"\"Set join style to use.\n    Args:\n        style: join style to use\n    \"\"\"\nself.setJoinStyle(constants.JOIN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Palette","title":"<code>Palette</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QPalette</code></p>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.get_color_group","title":"<code>get_color_group() -&gt; GroupStr</code>","text":"<p>Return color group.</p> <p>Returns:</p> Type Description <code>GroupStr</code> <p>color group</p> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_color_group(self) -&gt; GroupStr:\n\"\"\"Return color group.\n    Returns:\n        color group\n    \"\"\"\nreturn GROUP.inverse[self.colorGroup()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.set_color_group","title":"<code>set_color_group(group: GroupStr | gui.QPalette.ColorGroup, **kwargs: gui.QBrush)</code>","text":"<p>Set the color group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>GroupStr | gui.QPalette.ColorGroup</code> <p>color group to use</p> required <code>kwargs</code> <code>gui.QBrush</code> <p>keyword arguments passed to setColorGroup</p> <code>{}</code> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def set_color_group(\nself, group: GroupStr | gui.QPalette.ColorGroup, **kwargs: gui.QBrush\n):\n\"\"\"Set the color group.\n    Args:\n        group: color group to use\n        kwargs: keyword arguments passed to setColorGroup\n    \"\"\"\nself.setColorGroup(GROUP.get_enum_value(group), **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PdfWriter","title":"<code>PdfWriter</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>gui.PagedPaintDeviceMixin</code>, <code>gui.QPdfWriter</code></p>"},{"location":"api/gui.html#prettyqt.gui.pdfwriter.PdfWriter.set_pdf_version","title":"<code>set_pdf_version(version: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion)</code>","text":"<p>Set pdf version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion</code> <p>pdf version</p> required Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>def set_pdf_version(\nself,\nversion: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion,\n):\n\"\"\"Set pdf version.\n    Args:\n        version: pdf version\n    \"\"\"\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION.get_enum_value(version))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Pen","title":"<code>Pen</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QPen</code></p>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_cap_style","title":"<code>get_cap_style() -&gt; constants.CapStyleStr</code>","text":"<p>Return current cap style.</p> <p>Returns:</p> Type Description <code>constants.CapStyleStr</code> <p>cap style</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n    Returns:\n        cap style\n    \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_join_style","title":"<code>get_join_style() -&gt; constants.JoinStyleStr</code>","text":"<p>Return current join style.</p> <p>Returns:</p> Type Description <code>constants.JoinStyleStr</code> <p>join style</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n    Returns:\n        join style\n    \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_style","title":"<code>get_style() -&gt; constants.PenStyleStr</code>","text":"<p>Return current pen style.</p> <p>Returns:</p> Type Description <code>constants.PenStyleStr</code> <p>pen style</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return current pen style.\n    Returns:\n        pen style\n    \"\"\"\nreturn constants.PEN_STYLE.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_cap_style","title":"<code>set_cap_style(style: constants.CapStyleStr | constants.PenCapStyle)</code>","text":"<p>Set cap style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CapStyleStr | constants.PenCapStyle</code> <p>cap style to use</p> required Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_cap_style(self, style: constants.CapStyleStr | constants.PenCapStyle):\n\"\"\"Set cap style to use.\n    Args:\n        style: cap style to use\n    \"\"\"\nself.setCapStyle(constants.CAP_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_join_style","title":"<code>set_join_style(style: constants.JoinStyleStr | constants.PenJoinStyle)</code>","text":"<p>Set join style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.JoinStyleStr | constants.PenJoinStyle</code> <p>join style to use</p> required Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_join_style(self, style: constants.JoinStyleStr | constants.PenJoinStyle):\n\"\"\"Set join style to use.\n    Args:\n        style: join style to use\n    \"\"\"\nself.setJoinStyle(constants.JOIN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_style","title":"<code>set_style(style: constants.PenStyleStr | constants.PenStyle | list[float] | None)</code>","text":"<p>Set pen style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | constants.PenStyle | list[float] | None</code> <p>pen style to use</p> required Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_style(\nself, style: constants.PenStyleStr | constants.PenStyle | list[float] | None\n):\n\"\"\"Set pen style to use.\n    Args:\n        style: pen style to use\n    \"\"\"\nif isinstance(style, list):\nself.setDashPattern(style)\nelse:\nif style is None:\nstyle = \"none\"\nself.setStyle(constants.PEN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PixmapMixin","title":"<code>PixmapMixin</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code></p>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.create_checkerboard_pattern","title":"<code>create_checkerboard_pattern(n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Construct tileable checkerboard pattern for paint events.</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef create_checkerboard_pattern(\ncls, n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType\n) -&gt; Self:\n\"\"\"Construct tileable checkerboard pattern for paint events.\"\"\"\n# Brush will be an nxn checkerboard pattern\npat = cls(2 * n, 2 * n)\nbg0 = colors.get_color(color_1)\nbg1 = colors.get_color(color_2)\nwith gui.Painter(pat) as p:\np.setPen(constants.PenStyle.NoPen)\n# Paint a checkerboard pattern for the color to be overlaid on\np.fillRect(pat.rect(), bg0)\np.fillRect(0, 0, n, n, bg1)\np.fillRect(n, n, 2 * n, 2 * n, bg1)\nreturn pat\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.get_image_data_url","title":"<code>get_image_data_url() -&gt; str</code>","text":"<p>Render the contents of the pixmap as a data URL (RFC-2397).</p> <p>Returns:</p> Name Type Description <code>datauri</code> <code>str</code> <p>str</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def get_image_data_url(self) -&gt; str:\n\"\"\"Render the contents of the pixmap as a data URL (RFC-2397).\n    Returns:\n        datauri : str\n    \"\"\"\ndevice = core.Buffer()\nassert device.open_file(\"read_write\")\nself.save(device, b\"png\")\ndevice.close()\ndata = bytes(device.data())\npayload = base64.b64encode(data).decode(\"ascii\")\nreturn f\"data:image/png;base64,{payload}\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.SessionManager","title":"<code>SessionManager(item: QtGui.QSessionManager)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def __init__(self, item: QtGui.QSessionManager):\nself.item = item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.get_restart_hint","title":"<code>get_restart_hint() -&gt; RestartHintStr</code>","text":"<p>Return current restart hint.</p> <p>Returns:</p> Type Description <code>RestartHintStr</code> <p>restart hint</p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def get_restart_hint(self) -&gt; RestartHintStr:\n\"\"\"Return current restart hint.\n    Returns:\n        restart hint\n    \"\"\"\nreturn RESTART_HINT.inverse[self.restartHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.set_restart_hint","title":"<code>set_restart_hint(style: RestartHintStr | QtGui.QSessionManager.RestartHint)</code>","text":"<p>Set the restart hint.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>RestartHintStr | QtGui.QSessionManager.RestartHint</code> <p>restart hint</p> required Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def set_restart_hint(self, style: RestartHintStr | QtGui.QSessionManager.RestartHint):\n\"\"\"Set the restart hint.\n    Args:\n        style: restart hint\n    \"\"\"\nself.setRestartHint(RESTART_HINT.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Shortcut","title":"<code>Shortcut(*args, **kwargs)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>gui.QShortcut</code></p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nargs = (gui.KeySequence(args[0]), *rest)\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.get_context","title":"<code>get_context() -&gt; constants.ShortcutContextStr</code>","text":"<p>Return shortcut context.</p> <p>Returns:</p> Type Description <code>constants.ShortcutContextStr</code> <p>shortcut context</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n    Returns:\n        shortcut context\n    \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[self.context()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.get_key","title":"<code>get_key() -&gt; gui.KeySequence</code>","text":"<p>Return the shortcut's key sequence.</p> <p>Returns:</p> Type Description <code>gui.KeySequence</code> <p>Key sequence</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_key(self) -&gt; gui.KeySequence:\n\"\"\"Return the shortcut's key sequence.\n    Returns:\n        Key sequence\n    \"\"\"\nreturn gui.KeySequence(self.key())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.set_context","title":"<code>set_context(context: constants.ShortcutContextStr | constants.ShortcutContext)</code>","text":"<p>Set shortcut context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>constants.ShortcutContextStr | constants.ShortcutContext</code> <p>shortcut context</p> required Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def set_context(\nself, context: constants.ShortcutContextStr | constants.ShortcutContext\n):\n\"\"\"Set shortcut context.\n    Args:\n        context: shortcut context\n    \"\"\"\nself.setContext(constants.SHORTCUT_CONTEXT.get_enum_value(context))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.StandardItem","title":"<code>StandardItem</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QStandardItem</code></p>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.CheckStateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_text_alignment","title":"<code>get_text_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current text alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_text_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current text alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.textAlignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState | bool)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState | bool</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_checkstate(\nself, state: constants.CheckStateStr | constants.CheckState | bool\n):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nif isinstance(state, bool):\nstate = (\nconstants.CheckState.Checked if state else constants.CheckState.Unchecked\n)\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_text_alignment","title":"<code>set_text_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the text.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the format</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_text_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the text.\n    Args:\n        alignment: alignment for the format\n    \"\"\"\nself.setTextAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.StaticText","title":"<code>StaticText</code>","text":"<p>         Bases: <code>QtGui.QStaticText</code></p>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.get_performance_hint","title":"<code>get_performance_hint() -&gt; PerformanceHintStr</code>","text":"<p>Return current performance hint.</p> <p>Returns:</p> Type Description <code>PerformanceHintStr</code> <p>performance hint</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_performance_hint(self) -&gt; PerformanceHintStr:\n\"\"\"Return current performance hint.\n    Returns:\n        performance hint\n    \"\"\"\nreturn PERFORMANCE_HINT.inverse[self.performanceHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.get_text_format","title":"<code>get_text_format() -&gt; constants.TextFormatStr</code>","text":"<p>Return current text format.</p> <p>Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"</p> <p>Returns:</p> Type Description <code>constants.TextFormatStr</code> <p>text format</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n    Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"\n    Returns:\n        text format\n    \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.set_performance_hint","title":"<code>set_performance_hint(hint: PerformanceHintStr | QtGui.QStaticText.PerformanceHint)</code>","text":"<p>Set the performance hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>PerformanceHintStr | QtGui.QStaticText.PerformanceHint</code> <p>performance hint to use</p> required Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def set_performance_hint(\nself, hint: PerformanceHintStr | QtGui.QStaticText.PerformanceHint\n):\n\"\"\"Set the performance hint.\n    Args:\n        hint: performance hint to use\n    \"\"\"\nself.setPerformanceHint(PERFORMANCE_HINT.get_enum_value(hint))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.set_text_format","title":"<code>set_text_format(text_format: constants.TextFormatStr | constants.TextFormat)</code>","text":"<p>Set the text format.</p> <p>Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>constants.TextFormatStr | constants.TextFormat</code> <p>text format to use</p> required Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n):\n\"\"\"Set the text format.\n    Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"\n    Args:\n        text_format: text format to use\n    \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.SurfaceMixin","title":"<code>SurfaceMixin</code>","text":""},{"location":"api/gui.html#prettyqt.gui.surface.SurfaceMixin.get_surface_class","title":"<code>get_surface_class() -&gt; SurfaceClassStr</code>","text":"<p>Get the current surface class.</p> <p>Returns:</p> Type Description <code>SurfaceClassStr</code> <p>surface class</p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def get_surface_class(self) -&gt; SurfaceClassStr:\n\"\"\"Get the current surface class.\n    Returns:\n        surface class\n    \"\"\"\nreturn SURFACE_CLASS.inverse[self.surfaceClass()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.surface.SurfaceMixin.get_surface_type","title":"<code>get_surface_type() -&gt; SurfaceTypeStr</code>","text":"<p>Get the current surface type.</p> <p>Returns:</p> Type Description <code>SurfaceTypeStr</code> <p>surface type</p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def get_surface_type(self) -&gt; SurfaceTypeStr:\n\"\"\"Get the current surface type.\n    Returns:\n        surface type\n    \"\"\"\nreturn SURFACE_TYPES.inverse[self.surfaceType()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlock","title":"<code>TextBlock</code>","text":"<p>         Bases: <code>QtGui.QTextBlock</code></p>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.find_parent_scope","title":"<code>find_parent_scope(limit: int = 5000) -&gt; TextBlock | None</code>","text":"<p>Find parent scope, if the block is not a fold trigger.</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def find_parent_scope(self, limit: int = 5000) -&gt; TextBlock | None:\n\"\"\"Find parent scope, if the block is not a fold trigger.\"\"\"\n# if we moved up for more than n lines, just give up otherwise this\n# would take too much time.\ncounter = 0\noriginal = TextBlock(self)\nstart = TextBlock(self)\nif not self.is_fold_trigger():\n# search level of next non blank line\nwhile start.text().strip() == \"\" and start.isValid():\nstart = start.next()\nref_level = self.get_fold_level() - 1\nstart = original\nwhile (\nstart.blockNumber()\nand counter &lt; limit\nand (not self.is_fold_trigger() or self.get_fold_level() &gt; ref_level)\n):\ncounter += 1\nstart = start.previous()\nreturn TextBlock(start) if counter &lt; limit else None\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_fold_level","title":"<code>get_fold_level() -&gt; int</code>","text":"<p>Get the block fold level.</p> <p>:return: The block fold level</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_fold_level(self) -&gt; int:\n\"\"\"Get the block fold level.\n    :return: The block fold level\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn (state &amp; 0x03FF0000) &gt;&gt; 16\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_state","title":"<code>get_state() -&gt; int</code>","text":"<p>Get the user state, generally used for syntax highlighting.</p> <p>:return: The block state</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_state(self) -&gt; int:\n\"\"\"Get the user state, generally used for syntax highlighting.\n    :return: The block state\n    \"\"\"\nstate = self.userState()\nreturn state if state == -1 else state &amp; 0x0000FFFF\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.is_collapsed","title":"<code>is_collapsed() -&gt; bool</code>","text":"<p>Check if the block is expanded or collased.</p> <p>:return: False for an open trigger, True for for closed trigger</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def is_collapsed(self) -&gt; bool:\n\"\"\"Check if the block is expanded or collased.\n    :return: False for an open trigger, True for for closed trigger\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x08000000)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.is_fold_trigger","title":"<code>is_fold_trigger() -&gt; bool</code>","text":"<p>Check if the block is a fold trigger.</p> <p>:return: True if the block is a fold trigger (represented as a node in     the fold panel)</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def is_fold_trigger(self) -&gt; bool:\n\"\"\"Check if the block is a fold trigger.\n    :return: True if the block is a fold trigger (represented as a node in\n        the fold panel)\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x04000000)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_collapsed","title":"<code>set_collapsed(val: int)</code>","text":"<p>Set the fold trigger state (collapsed or expanded).</p> <p>:param val: The new trigger state (True=collapsed, False=expanded)</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_collapsed(self, val: int):\n\"\"\"Set the fold trigger state (collapsed or expanded).\n    :param val: The new trigger state (True=collapsed, False=expanded)\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x77FFFFFF\nstate |= val &lt;&lt; 27\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_fold_level","title":"<code>set_fold_level(val: int)</code>","text":"<p>Set the block fold level.</p> <p>:param val: The new fold level [0-7]</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_fold_level(self, val: int):\n\"\"\"Set the block fold level.\n    :param val: The new fold level [0-7]\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nval = min(val, 0x3FF)\nstate &amp;= 0x7C00FFFF\nstate |= val &lt;&lt; 16\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_fold_trigger","title":"<code>set_fold_trigger(val: int)</code>","text":"<p>Set the block fold trigger flag (True means the block is a fold trigger).</p> <p>:param val: value to set</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_fold_trigger(self, val: int):\n\"\"\"Set the block fold trigger flag (True means the block is a fold trigger).\n    :param val: value to set\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x7BFFFFFF\nstate |= val &lt;&lt; 26\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_state","title":"<code>set_state(state: int)</code>","text":"<p>Set the user state, generally used for syntax highlighting.</p> <p>:param state: new state value.</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_state(self, state: int):\n\"\"\"Set the user state, generally used for syntax highlighting.\n    :param state: new state value.\n    \"\"\"\nuser_state = self.userState()\nif user_state == -1:\nuser_state = 0\nhigher_part = user_state &amp; 0x7FFF0000\nstate &amp;= 0x0000FFFF\nstate |= higher_part\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlockFormat","title":"<code>TextBlockFormat</code>","text":"<p>         Bases: <code>gui.TextFormatMixin</code>, <code>gui.QTextBlockFormat</code></p>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.get_marker","title":"<code>get_marker() -&gt; MarkerTypeStr</code>","text":"<p>Get current marker.</p> <p>Returns:</p> Type Description <code>MarkerTypeStr</code> <p>current marker</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_marker(self) -&gt; MarkerTypeStr:\n\"\"\"Get current marker.\n    Returns:\n        current marker\n    \"\"\"\nreturn MARKER_TYPE.inverse[self.marker()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.get_page_break_policy","title":"<code>get_page_break_policy() -&gt; gui.textformat.PageBreakFlagStr</code>","text":"<p>Get the current page break policy.</p> <p>Returns:</p> Type Description <code>gui.textformat.PageBreakFlagStr</code> <p>page break policy</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_page_break_policy(self) -&gt; gui.textformat.PageBreakFlagStr:\n\"\"\"Get the current page break policy.\n    Returns:\n        page break policy\n    \"\"\"\nreturn gui.textformat.PAGE_BREAK_FLAG.inverse[self.pageBreakPolicy()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the format.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the format</p> required Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the format.\n    Args:\n        alignment: alignment for the format\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.set_marker","title":"<code>set_marker(marker: MarkerTypeStr | gui.QTextBlockFormat.MarkerType)</code>","text":"<p>Set the marker.</p> <p>Parameters:</p> Name Type Description Default <code>marker</code> <code>MarkerTypeStr | gui.QTextBlockFormat.MarkerType</code> <p>marker</p> required Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_marker(self, marker: MarkerTypeStr | gui.QTextBlockFormat.MarkerType):\n\"\"\"Set the marker.\n    Args:\n        marker: marker\n    \"\"\"\nself.setMarker(MARKER_TYPE.get_enum_value(marker))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.set_page_break_policy","title":"<code>set_page_break_policy(policy: gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag)</code>","text":"<p>Set page break policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag</code> <p>page break policy</p> required Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_page_break_policy(\nself, policy: gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag\n):\n\"\"\"Set page break policy.\n    Args:\n        policy: page break policy\n    \"\"\"\nself.setPageBreakPolicy(gui.textformat.PAGE_BREAK_FLAG.get_enum_value(policy))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlockUserData","title":"<code>TextBlockUserData(**kwds)</code>","text":"<p>         Bases: <code>QtGui.QTextBlockUserData</code></p> <p>Storage for the user data associated with each line.</p> Source code in <code>prettyqt\\gui\\textblockuserdata.py</code> <pre><code>def __init__(self, **kwds):\nfor key, value in kwds.items():\nsetattr(self, key, value)\nsuper().__init__()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextCharFormatMixin","title":"<code>TextCharFormatMixin(text_color: datatypes.ColorType | gui.QBrush = None, bold: bool = False, italic: bool = False)</code>","text":"<p>         Bases: <code>gui.TextFormatMixin</code></p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def __init__(\nself,\ntext_color: datatypes.ColorType | gui.QBrush = None,\nbold: bool = False,\nitalic: bool = False,\n):\nsuper().__init__()\nif text_color is not None:\nself.set_foreground_color(text_color)\nif bold:\nself.set_font_weight(\"bold\")\nself.setFontItalic(italic)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_font_weight","title":"<code>get_font_weight() -&gt; gui.font.WeightStr</code>","text":"<p>Get current font weight.</p> <p>Returns:</p> Type Description <code>gui.font.WeightStr</code> <p>current font weight</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_font_weight(self) -&gt; gui.font.WeightStr:\n\"\"\"Get current font weight.\n    Returns:\n        current font weight\n    \"\"\"\nreturn gui.font.WEIGHT.inverse[self.fontWeight()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_underline_style","title":"<code>get_underline_style() -&gt; UnderlineStyleStr</code>","text":"<p>Get current underline style.</p> <p>Returns:</p> Type Description <code>UnderlineStyleStr</code> <p>current underline style</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_underline_style(self) -&gt; UnderlineStyleStr:\n\"\"\"Get current underline style.\n    Returns:\n        current underline style\n    \"\"\"\nreturn UNDERLINE_STYLE.inverse[self.underlineStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_vertical_alignment","title":"<code>get_vertical_alignment() -&gt; VerticalAlignmentStr</code>","text":"<p>Get current vertical alignment.</p> <p>Returns:</p> Type Description <code>VerticalAlignmentStr</code> <p>current vertical alignment</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_vertical_alignment(self) -&gt; VerticalAlignmentStr:\n\"\"\"Get current vertical alignment.\n    Returns:\n        current vertical alignment\n    \"\"\"\nreturn VERTICAL_ALIGNMENT.inverse[self.verticalAlignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_font_style_hint","title":"<code>set_font_style_hint(hint: gui.font.StyleHintStr | gui.Font.StyleHint)</code>","text":"<p>Set the font style hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>gui.font.StyleHintStr | gui.Font.StyleHint</code> <p>font style hint</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_font_style_hint(self, hint: gui.font.StyleHintStr | gui.Font.StyleHint):\n\"\"\"Set the font style hint.\n    Args:\n        hint: font style hint\n    \"\"\"\nself.setFontStyleHint(gui.font.STYLE_HINTS.get_enum_value(hint))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_font_weight","title":"<code>set_font_weight(weight: gui.font.WeightStr | gui.Font.Weight)</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>gui.font.WeightStr | gui.Font.Weight</code> <p>font weight</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_font_weight(self, weight: gui.font.WeightStr | gui.Font.Weight):\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    \"\"\"\nself.setFontWeight(gui.font.WEIGHT.get_enum_value(weight))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_underline_style","title":"<code>set_underline_style(style: UnderlineStyleStr | mod.UnderlineStyle)</code>","text":"<p>Set the underline style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>UnderlineStyleStr | mod.UnderlineStyle</code> <p>underline style</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_underline_style(self, style: UnderlineStyleStr | mod.UnderlineStyle):\n\"\"\"Set the underline style.\n    Args:\n        style: underline style\n    \"\"\"\nself.setUnderlineStyle(UNDERLINE_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_vertical_alignment","title":"<code>set_vertical_alignment(alignment: VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment)</code>","text":"<p>Set the vertical alignment.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment</code> <p>vertical alignment</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_vertical_alignment(\nself, alignment: VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment\n):\n\"\"\"Set the vertical alignment.\n    Args:\n        alignment: vertical alignment\n    \"\"\"\nself.setVerticalAlignment(VERTICAL_ALIGNMENT.get_enum_value(alignment))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextCursor","title":"<code>TextCursor</code>","text":"<p>         Bases: <code>gui.QTextCursor</code></p>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.edit_block","title":"<code>edit_block(join_previous: bool = False)</code>","text":"<p>Context manager for edit blocks. Can be used for undo actions.</p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>@contextlib.contextmanager\ndef edit_block(self, join_previous: bool = False):\n\"\"\"Context manager for edit blocks. Can be used for undo actions.\"\"\"\nself.joinPreviousEditBlock() if join_previous else self.beginEditBlock()\nyield\nself.endEditBlock()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.get_cursor_position","title":"<code>get_cursor_position() -&gt; tuple[int, int]</code>","text":"<p>Return the QTextCursor position.</p> <p>The position is a tuple made up of the line number (0 based) and the column number (0 based). :return: tuple(line, column)</p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def get_cursor_position(self) -&gt; tuple[int, int]:\n\"\"\"Return the QTextCursor position.\n    The position is a tuple made up of\n    the line number (0 based) and the column number (0 based).\n    :return: tuple(line, column)\n    \"\"\"\nreturn (self.blockNumber(), self.positionInBlock())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.select_text","title":"<code>select_text(start_pos: int | tuple[int, int] | MoveOperationStr, end_pos: int | tuple[int, int] | MoveOperationStr) -&gt; str</code>","text":"<p>Select text from start position to end position.</p> <p>Positions can be either an integer index or a move operation</p> <p>Parameters:</p> Name Type Description Default <code>start_pos</code> <code>int | tuple[int, int] | MoveOperationStr</code> <p>Start position</p> required <code>end_pos</code> <code>int | tuple[int, int] | MoveOperationStr</code> <p>End position</p> required Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def select_text(\nself,\nstart_pos: int | tuple[int, int] | MoveOperationStr,\nend_pos: int | tuple[int, int] | MoveOperationStr,\n) -&gt; str:\n\"\"\"Select text from start position to end position.\n    Positions can be either an integer index or a move operation\n    Args:\n        start_pos: Start position\n        end_pos: End position\n    \"\"\"\nmatch start_pos:\ncase int() | (int(), int()):\nself.set_position(start_pos)\ncase str():\nself.move_position(start_pos)\ncase _:\nraise TypeError(start_pos)\nmatch end_pos:\ncase int() | (int(), int()):\nself.set_position(end_pos, mode=\"keep\")\ncase str():\nself.move_position(end_pos, mode=\"keep\")\ncase _:\nraise TypeError(end_pos)\nreturn self.selectedText()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.set_position","title":"<code>set_position(pos: int | tuple[int, int], mode: MoveModeStr = 'move')</code>","text":"<p>Set cursor to given position.</p> <p>0-indexed.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>int | tuple[int, int]</code> <p>Cursor position</p> required <code>mode</code> <code>MoveModeStr</code> <p>Move mode</p> <code>'move'</code> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def set_position(self, pos: int | tuple[int, int], mode: MoveModeStr = \"move\"):\n\"\"\"Set cursor to given position.\n    0-indexed.\n    Args:\n        pos: Cursor position\n        mode: Move mode\n    \"\"\"\nmatch pos:\ncase int():\nself.setPosition(pos, MOVE_MODE[mode])\ncase (int() as row, int() as col):\nposition = self.document().find_block_by_number(row).position()\nposition += col\nself.set_position(position, mode=mode)\ncase _:\nraise TypeError(pos)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextFormatMixin","title":"<code>TextFormatMixin</code>","text":""},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> <p>Returns:</p> Type Description <code>constants.LayoutDirectionStr</code> <p>layout direction</p> Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr | constants.LayoutDirection)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr | constants.LayoutDirection</code> <p>layout direction</p> required Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection\n):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    \"\"\"\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextLength","title":"<code>TextLength</code>","text":"<p>         Bases: <code>QtGui.QTextLength</code></p>"},{"location":"api/gui.html#prettyqt.gui.textlength.TextLength.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return type of this length object.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>timer type</p> Source code in <code>prettyqt\\gui\\textlength.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return type of this length object.\n    Returns:\n        timer type\n    \"\"\"\nreturn TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextListFormat","title":"<code>TextListFormat</code>","text":"<p>         Bases: <code>gui.TextFormatMixin</code>, <code>gui.QTextListFormat</code></p>"},{"location":"api/gui.html#prettyqt.gui.textlistformat.TextListFormat.get_style","title":"<code>get_style() -&gt; StyleStr</code>","text":"<p>Get current style.</p> <p>Returns:</p> Type Description <code>StyleStr</code> <p>current style</p> Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>def get_style(self) -&gt; StyleStr:\n\"\"\"Get current style.\n    Returns:\n        current style\n    \"\"\"\nreturn STYLES.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlistformat.TextListFormat.set_style","title":"<code>set_style(style: StyleStr | gui.QTextListFormat.Style)</code>","text":"<p>Set the style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>StyleStr | gui.QTextListFormat.Style</code> <p>style</p> required Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>def set_style(self, style: StyleStr | gui.QTextListFormat.Style):\n\"\"\"Set the style.\n    Args:\n        style: style\n    \"\"\"\nself.setStyle(STYLES.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextTableCellFormat","title":"<code>TextTableCellFormat</code>","text":"<p>         Bases: <code>gui.TextCharFormatMixin</code>, <code>gui.QTextTableCellFormat</code></p>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_bottom_border_style","title":"<code>get_bottom_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current bottom border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>bottom border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_bottom_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current bottom border style.\n    Returns:\n        bottom border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.bottomBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_left_border_style","title":"<code>get_left_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current left border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>left border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_left_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current left border style.\n    Returns:\n        left border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.leftBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_right_border_style","title":"<code>get_right_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current right border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>right border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_right_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current right border style.\n    Returns:\n        right border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.rightBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_top_border_style","title":"<code>get_top_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current top border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>top border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_top_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current top border style.\n    Returns:\n        top border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.topBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_border_style","title":"<code>set_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set border style.\n    Args:\n        style: border style\n    \"\"\"\nself.setBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_bottom_border_style","title":"<code>set_bottom_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set bottom border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>bottom border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_bottom_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set bottom border style.\n    Args:\n        style: bottom border style\n    \"\"\"\nself.setBottomBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_left_border_style","title":"<code>set_left_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set left border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>left border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_left_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set left border style.\n    Args:\n        style: left border style\n    \"\"\"\nself.setLeftBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_right_border_style","title":"<code>set_right_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set right border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>right border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_right_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set right border style.\n    Args:\n        style: right border style\n    \"\"\"\nself.setRightBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_top_border_style","title":"<code>set_top_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set top border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>top border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_top_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set top border style.\n    Args:\n        style: top border style\n    \"\"\"\nself.setTopBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextTableFormat","title":"<code>TextTableFormat</code>","text":"<p>         Bases: <code>gui.textframeformat.TextFrameFormatMixin</code>, <code>gui.QTextTableFormat</code></p>"},{"location":"api/gui.html#prettyqt.gui.texttableformat.TextTableFormat.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttableformat.TextTableFormat.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the format.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the format</p> required Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the format.\n    Args:\n        alignment: alignment for the format\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.WindowMixin","title":"<code>WindowMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>gui.SurfaceMixin</code></p>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_visibility","title":"<code>get_visibility() -&gt; VisibilityStr</code>","text":"<p>Get the current window visibility.</p> <p>Returns:</p> Type Description <code>VisibilityStr</code> <p>window visibility</p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_visibility(self) -&gt; VisibilityStr:\n\"\"\"Get the current window visibility.\n    Returns:\n        window visibility\n    \"\"\"\nreturn VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.set_modality","title":"<code>set_modality(modality: constants.WindowModalityStr | constants.WindowModality) -&gt; None</code>","text":"<p>Set modality for the window.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>constants.WindowModalityStr | constants.WindowModality</code> <p>modality for the window</p> required Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_modality(\nself, modality: constants.WindowModalityStr | constants.WindowModality\n) -&gt; None:\n\"\"\"Set modality for the window.\n    Args:\n        modality: modality for the window\n    \"\"\"\nself.setModality(constants.WINDOW_MODALITY.get_enum_value(modality))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.set_visibility","title":"<code>set_visibility(visibility: VisibilityStr | gui.QWindow.Visibility)</code>","text":"<p>Set window visibility.</p> <p>Parameters:</p> Name Type Description Default <code>visibility</code> <code>VisibilityStr | gui.QWindow.Visibility</code> <p>window visibility</p> required Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_visibility(self, visibility: VisibilityStr | gui.QWindow.Visibility):\n\"\"\"Set window visibility.\n    Args:\n        visibility: window visibility\n    \"\"\"\nself.setVisibility(VISIBILITY.get_enum_value(visibility))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.start_system_resize","title":"<code>start_system_resize(edge: constants.EdgeStr | constants.Edge) -&gt; bool</code>","text":"<p>Start system resize.</p> <p>Parameters:</p> Name Type Description Default <code>edge</code> <code>constants.EdgeStr | constants.Edge</code> <p>edge to resize</p> required Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def start_system_resize(self, edge: constants.EdgeStr | constants.Edge) -&gt; bool:\n\"\"\"Start system resize.\n    Args:\n        edge: edge to resize\n    \"\"\"\nreturn self.startSystemResize(constants.EDGES.get_enum_value(edge))\n</code></pre>"},{"location":"api/location.html","title":"location module","text":""},{"location":"api/location.html#prettyqt.location.GeoManeuver","title":"<code>GeoManeuver</code>","text":"<p>         Bases: <code>QtLocation.QGeoManeuver</code></p>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.get_direction","title":"<code>get_direction() -&gt; InstructionDirectionStr</code>","text":"<p>Return current direction.</p> <p>Returns:</p> Type Description <code>InstructionDirectionStr</code> <p>Direction</p> Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def get_direction(self) -&gt; InstructionDirectionStr:\n\"\"\"Return current direction.\n    Returns:\n        Direction\n    \"\"\"\nreturn INSTRUCTION_DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.set_direction","title":"<code>set_direction(direction: InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection)</code>","text":"<p>Set the direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection</code> <p>Direction</p> required Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def set_direction(\nself,\ndirection: InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection,\n):\n\"\"\"Set the direction.\n    Args:\n        direction: Direction\n    \"\"\"\nself.setDirection(INSTRUCTION_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoRouteRequest","title":"<code>GeoRouteRequest</code>","text":"<p>         Bases: <code>QtLocation.QGeoRouteRequest</code></p>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_feature_weight","title":"<code>get_feature_weight(feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType) -&gt; FeatureWeightStr</code>","text":"<p>Return current feature weight.</p> <p>Returns:</p> Type Description <code>FeatureWeightStr</code> <p>Feature weight</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_feature_weight(\nself, feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType\n) -&gt; FeatureWeightStr:\n\"\"\"Return current feature weight.\n    Returns:\n        Feature weight\n    \"\"\"\nreturn FEATURE_WEIGHTS.inverse[\nself.featureWeight(FEATURE_TYPES.get_enum_value(feature))\n]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_route_optimization","title":"<code>get_route_optimization() -&gt; RouteOptimizationStr</code>","text":"<p>Return current route optimization.</p> <p>Returns:</p> Type Description <code>RouteOptimizationStr</code> <p>Route optimization</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_route_optimization(self) -&gt; RouteOptimizationStr:\n\"\"\"Return current route optimization.\n    Returns:\n        Route optimization\n    \"\"\"\nreturn ROUTE_OPTIMIZATION.inverse[self.routeOptimization()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.set_feature_weight","title":"<code>set_feature_weight(feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType, weight: FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight)</code>","text":"<p>Set the feature weight.</p> <p>Parameters:</p> Name Type Description Default <code>feature</code> <code>FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType</code> <p>Feature type</p> required <code>weight</code> <code>FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight</code> <p>Feature weight</p> required Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_feature_weight(\nself,\nfeature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType,\nweight: FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight,\n):\n\"\"\"Set the feature weight.\n    Args:\n        feature: Feature type\n        weight: Feature weight\n    \"\"\"\nself.setFeatureWeight(\nFEATURE_TYPES.get_enum_value(feature), FEATURE_WEIGHTS.get_enum_value(weight)\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.set_route_optimization","title":"<code>set_route_optimization(optimization: RouteOptimizationStr | QtLocation.QGeoRouteRequest.RouteOptimization)</code>","text":"<p>Set the route optimization.</p> <p>Parameters:</p> Name Type Description Default <code>optimization</code> <code>RouteOptimizationStr | QtLocation.QGeoRouteRequest.RouteOptimization</code> <p>Route optimization</p> required Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_route_optimization(\nself,\noptimization: RouteOptimizationStr\n| QtLocation.QGeoRouteRequest.RouteOptimization,\n):\n\"\"\"Set the route optimization.\n    Args:\n        optimization: Route optimization\n    \"\"\"\nself.setRouteOptimization(ROUTE_OPTIMIZATION.get_enum_value(optimization))\n</code></pre>"},{"location":"api/location.html#prettyqt.location.Place","title":"<code>Place</code>","text":"<p>         Bases: <code>location.QPlace</code></p>"},{"location":"api/location.html#prettyqt.location.place.Place.get_visibility","title":"<code>get_visibility() -&gt; location.VisibilityStr</code>","text":"<p>Return visibility.</p> <p>Returns:</p> Type Description <code>location.VisibilityStr</code> <p>Visibility</p> Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return visibility.\n    Returns:\n        Visibility\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceCategory","title":"<code>PlaceCategory</code>","text":"<p>         Bases: <code>location.QPlaceCategory</code></p>"},{"location":"api/location.html#prettyqt.location.placecategory.PlaceCategory.get_visibility","title":"<code>get_visibility() -&gt; location.VisibilityStr</code>","text":"<p>Return the visibility of the place.</p> <p>Returns:</p> Type Description <code>location.VisibilityStr</code> <p>Visibility</p> Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>def get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return the visibility of the place.\n    Returns:\n        Visibility\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContentMixin","title":"<code>PlaceContentMixin</code>","text":""},{"location":"api/location.html#prettyqt.location.placecontent.PlaceContentMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return the visibility of the place.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>Place type</p> Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return the visibility of the place.\n    Returns:\n        Place type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContentRequest","title":"<code>PlaceContentRequest</code>","text":"<p>         Bases: <code>location.QPlaceContentRequest</code></p>"},{"location":"api/location.html#prettyqt.location.placecontentrequest.PlaceContentRequest.get_content_type","title":"<code>get_content_type() -&gt; location.placecontent.TypeStr</code>","text":"<p>Return current content type.</p> <p>Returns:</p> Type Description <code>location.placecontent.TypeStr</code> <p>Relevance type</p> Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>def get_content_type(self) -&gt; location.placecontent.TypeStr:\n\"\"\"Return current content type.\n    Returns:\n        Relevance type\n    \"\"\"\nreturn location.placecontent.TYPE.inverse[self.contentType()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentrequest.PlaceContentRequest.set_content_type","title":"<code>set_content_type(typ: location.placecontent.TypeStr | location.PlaceContent.Type)</code>","text":"<p>Set the content type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>location.placecontent.TypeStr | location.PlaceContent.Type</code> <p>Relevance type</p> required Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>def set_content_type(\nself, typ: location.placecontent.TypeStr | location.PlaceContent.Type\n):\n\"\"\"Set the content type.\n    Args:\n        typ: Relevance type\n    \"\"\"\nself.setContentType(location.placecontent.TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceIdReply","title":"<code>PlaceIdReply</code>","text":"<p>         Bases: <code>location.PlaceReplyMixin</code>, <code>location.QPlaceIdReply</code></p>"},{"location":"api/location.html#prettyqt.location.placeidreply.PlaceIdReply.get_operation_type","title":"<code>get_operation_type() -&gt; OperationTypeStr</code>","text":"<p>Get current operation_type.</p> <p>Returns:</p> Type Description <code>OperationTypeStr</code> <p>current operation_type</p> Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>def get_operation_type(self) -&gt; OperationTypeStr:\n\"\"\"Get current operation_type.\n    Returns:\n        current operation_type\n    \"\"\"\nreturn OPERATION_TYPES.inverse[self.operationType()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceReplyMixin","title":"<code>PlaceReplyMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/location.html#prettyqt.location.placereply.PlaceReplyMixin.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>Error type</p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        Error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placereply.PlaceReplyMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>Type</p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return type.\n    Returns:\n        Type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSearchRequest","title":"<code>PlaceSearchRequest</code>","text":"<p>         Bases: <code>location.QPlaceSearchRequest</code></p>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_relevance_hint","title":"<code>get_relevance_hint() -&gt; RelevanceHintStr</code>","text":"<p>Return current relevance hint.</p> <p>Returns:</p> Type Description <code>RelevanceHintStr</code> <p>Relevance hint</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_relevance_hint(self) -&gt; RelevanceHintStr:\n\"\"\"Return current relevance hint.\n    Returns:\n        Relevance hint\n    \"\"\"\nreturn RELEVANCE_HINT.inverse[self.relevanceHint()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_visibility_scope","title":"<code>get_visibility_scope() -&gt; location.VisibilityStr</code>","text":"<p>Return the scope of the visibility.</p> <p>Returns:</p> Type Description <code>location.VisibilityStr</code> <p>Visibility scope</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_visibility_scope(self) -&gt; location.VisibilityStr:\n\"\"\"Return the scope of the visibility.\n    Returns:\n        Visibility scope\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibilityScope()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.set_relevance_hint","title":"<code>set_relevance_hint(hint: RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint)</code>","text":"<p>Set the relevance hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint</code> <p>Relevance hint</p> required Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def set_relevance_hint(\nself, hint: RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint\n):\n\"\"\"Set the relevance hint.\n    Args:\n        hint: Relevance hint\n    \"\"\"\nself.setRelevanceHint(RELEVANCE_HINT.get_enum_value(hint))\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSearchResultMixin","title":"<code>PlaceSearchResultMixin</code>","text":""},{"location":"api/location.html#prettyqt.location.placesearchresult.PlaceSearchResultMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return result type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>Result type</p> Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return result type.\n    Returns:\n        Result type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/multimedia.html","title":"multimedia module","text":""},{"location":"api/multimedia.html#prettyqt.multimedia.Camera","title":"<code>Camera</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>multimedia.QCamera</code></p>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return current error state.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error state</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error state.\n    Returns:\n        error state\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_exposure_mode","title":"<code>get_exposure_mode() -&gt; ExposureModeStr</code>","text":"<p>Return current exposure mode.</p> <p>Returns:</p> Type Description <code>ExposureModeStr</code> <p>exposure mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_exposure_mode(self) -&gt; ExposureModeStr:\n\"\"\"Return current exposure mode.\n    Returns:\n        exposure mode\n    \"\"\"\nreturn EXPOSURE_MODE.inverse[self.exposureMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_flash_mode","title":"<code>get_flash_mode() -&gt; FlashModeStr</code>","text":"<p>Return current flash mode.</p> <p>Returns:</p> Type Description <code>FlashModeStr</code> <p>flash mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_flash_mode(self) -&gt; FlashModeStr:\n\"\"\"Return current flash mode.\n    Returns:\n        flash mode\n    \"\"\"\nreturn FLASH_MODE.inverse[self.flashMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_torch_mode","title":"<code>get_torch_mode() -&gt; TorchModeStr</code>","text":"<p>Return current torch mode.</p> <p>Returns:</p> Type Description <code>TorchModeStr</code> <p>torch mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_torch_mode(self) -&gt; TorchModeStr:\n\"\"\"Return current torch mode.\n    Returns:\n        torch mode\n    \"\"\"\nreturn TORCH_MODE.inverse[self.torchMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_white_balance_mode","title":"<code>get_white_balance_mode() -&gt; WhiteBalanceModeStr</code>","text":"<p>Return current white balance mode.</p> <p>Returns:</p> Type Description <code>WhiteBalanceModeStr</code> <p>white balance mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_white_balance_mode(self) -&gt; WhiteBalanceModeStr:\n\"\"\"Return current white balance mode.\n    Returns:\n        white balance mode\n    \"\"\"\nreturn WHITE_BALANCE.inverse[self.whiteBalanceMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_exposure_mode","title":"<code>set_exposure_mode(mode: ExposureModeStr | multimedia.QCamera.ExposureMode)</code>","text":"<p>Set the exposure mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ExposureModeStr | multimedia.QCamera.ExposureMode</code> <p>exposure mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_exposure_mode(self, mode: ExposureModeStr | multimedia.QCamera.ExposureMode):\n\"\"\"Set the exposure mode.\n    Args:\n        mode: exposure mode\n    \"\"\"\nself.setExposureMode(EXPOSURE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_flash_mode","title":"<code>set_flash_mode(mode: FlashModeStr | multimedia.QCamera.FlashMode)</code>","text":"<p>Set the flash mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FlashModeStr | multimedia.QCamera.FlashMode</code> <p>flash mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_flash_mode(self, mode: FlashModeStr | multimedia.QCamera.FlashMode):\n\"\"\"Set the flash mode.\n    Args:\n        mode: flash mode\n    \"\"\"\nself.setFlashMode(FLASH_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_torch_mode","title":"<code>set_torch_mode(mode: TorchModeStr | multimedia.QCamera.TorchMode)</code>","text":"<p>Set the torch mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>TorchModeStr | multimedia.QCamera.TorchMode</code> <p>torch mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_torch_mode(self, mode: TorchModeStr | multimedia.QCamera.TorchMode):\n\"\"\"Set the torch mode.\n    Args:\n        mode: torch mode\n    \"\"\"\nself.setTorchMode(TORCH_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_white_balance_mode","title":"<code>set_white_balance_mode(mode: WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode)</code>","text":"<p>Set the white balance mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode</code> <p>white balance mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_white_balance_mode(\nself, mode: WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode\n):\n\"\"\"Set the white balance mode.\n    Args:\n        mode: white balance mode\n    \"\"\"\nself.setWhiteBalanceMode(WHITE_BALANCE.get_enum_value(mode))\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.MediaPlayer","title":"<code>MediaPlayer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QMediaPlayer</code></p>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_media_status","title":"<code>get_media_status() -&gt; MediaStatusStr</code>","text":"<p>Return current media status.</p> <p>Returns:</p> Type Description <code>MediaStatusStr</code> <p>media status</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_media_status(self) -&gt; MediaStatusStr:\n\"\"\"Return current media status.\n    Returns:\n        media status\n    \"\"\"\nreturn MEDIA_STATUS.inverse[self.mediaStatus()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_playback_state","title":"<code>get_playback_state() -&gt; PlaybackStateStr</code>","text":"<p>Return current playback state.</p> <p>Returns:</p> Type Description <code>PlaybackStateStr</code> <p>playback state</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_playback_state(self) -&gt; PlaybackStateStr:\n\"\"\"Return current playback state.\n    Returns:\n        playback state\n    \"\"\"\nreturn PLAYBACK_STATE.inverse[self.playbackState()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.MediaRecorder","title":"<code>MediaRecorder</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QMediaRecorder</code></p>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_encoding_mode","title":"<code>get_encoding_mode() -&gt; EncodingModeStr</code>","text":"<p>Return current encoding mode.</p> <p>Returns:</p> Type Description <code>EncodingModeStr</code> <p>encoding mode</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_encoding_mode(self) -&gt; EncodingModeStr:\n\"\"\"Return current encoding mode.\n    Returns:\n        encoding mode\n    \"\"\"\nreturn ENCODING_MODE.inverse[self.encodingMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_quality","title":"<code>get_quality() -&gt; QualityStr</code>","text":"<p>Return current quality setting.</p> <p>Returns:</p> Type Description <code>QualityStr</code> <p>quality setting</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_quality(self) -&gt; QualityStr:\n\"\"\"Return current quality setting.\n    Returns:\n        quality setting\n    \"\"\"\nreturn QUALITY.inverse[self.quality()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_recorder_state","title":"<code>get_recorder_state() -&gt; RecorderStateStr</code>","text":"<p>Return current recorder state.</p> <p>Returns:</p> Type Description <code>RecorderStateStr</code> <p>recorder state</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_recorder_state(self) -&gt; RecorderStateStr:\n\"\"\"Return current recorder state.\n    Returns:\n        recorder state\n    \"\"\"\nreturn RECORDER_STATE.inverse[self.recorderState()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediarecorder.MediaRecorder.set_encoding_mode","title":"<code>set_encoding_mode(mode: EncodingModeStr)</code>","text":"<p>Set encoding mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>EncodingModeStr</code> <p>encoding mode to use</p> required Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def set_encoding_mode(self, mode: EncodingModeStr):\n\"\"\"Set encoding mode.\n    Args:\n        mode: encoding mode to use\n    \"\"\"\nself.setEncodingMode(ENCODING_MODE[mode])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediarecorder.MediaRecorder.set_quality","title":"<code>set_quality(quality: QualityStr)</code>","text":"<p>Set quality.</p> <p>Parameters:</p> Name Type Description Default <code>quality</code> <code>QualityStr</code> <p>quality to use</p> required Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def set_quality(self, quality: QualityStr):\n\"\"\"Set quality.\n    Args:\n        quality: quality to use\n    \"\"\"\nself.setQuality(QUALITY[quality])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.ScreenCapture","title":"<code>ScreenCapture</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QScreenCapture</code></p>"},{"location":"api/multimedia.html#prettyqt.multimedia.screencapture.ScreenCapture.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\multimedia\\screencapture.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimediawidgets.html","title":"multimediawidgets module","text":""},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.GraphicsVideoItem","title":"<code>GraphicsVideoItem</code>","text":"<p>         Bases: <code>widgets.GraphicsObjectMixin</code>, <code>QtMultimediaWidgets.QGraphicsVideoItem</code></p>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.get_aspect_ratio_mode","title":"<code>get_aspect_ratio_mode() -&gt; constants.AspectRatioModeStr</code>","text":"<p>Return current aspect ratio mode.</p> <p>Returns:</p> Type Description <code>constants.AspectRatioModeStr</code> <p>aspect ratio mode</p> Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n    Returns:\n        aspect ratio mode\n    \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.set_aspect_ratio_mode","title":"<code>set_aspect_ratio_mode(mode: constants.AspectRatioModeStr | constants.AspectRatioMode)</code>","text":"<p>Set the aspect ratio mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.AspectRatioModeStr | constants.AspectRatioMode</code> <p>aspect ratio mode</p> required Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def set_aspect_ratio_mode(\nself, mode: constants.AspectRatioModeStr | constants.AspectRatioMode\n):\n\"\"\"Set the aspect ratio mode.\n    Args:\n        mode: aspect ratio mode\n    \"\"\"\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/network.html","title":"network module","text":""},{"location":"api/network.html#prettyqt.network.AbstractSocketMixin","title":"<code>AbstractSocketMixin</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code></p>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.set_pause_mode","title":"<code>set_pause_mode(mode: PauseModeStr | mod.PauseMode)</code>","text":"<p>Set pause mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PauseModeStr | mod.PauseMode</code> <p>pause mode</p> required Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def set_pause_mode(self, mode: PauseModeStr | mod.PauseMode):\n\"\"\"Set pause mode.\n    Args:\n        mode: pause mode\n    \"\"\"\nself.setPauseMode(PAUSE_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.HttpMultiPart","title":"<code>HttpMultiPart</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QHttpMultiPart</code></p>"},{"location":"api/network.html#prettyqt.network.httpmultipart.HttpMultiPart.set_content_type","title":"<code>set_content_type(typ: ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType)</code>","text":"<p>Set content type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType</code> <p>content type</p> required Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>def set_content_type(\nself, typ: ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType\n):\n\"\"\"Set content type.\n    Args:\n        typ: content type\n    \"\"\"\nself.setContentType(CONTENT_TYPES.get_enum_value(typ))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkAccessManager","title":"<code>NetworkAccessManager</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>network.QNetworkAccessManager</code></p>"},{"location":"api/network.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.get_redirect_policy","title":"<code>get_redirect_policy() -&gt; network.networkrequest.RedirectPolicyStr</code>","text":"<p>Get the current redirect policy.</p> <p>Returns:</p> Type Description <code>network.networkrequest.RedirectPolicyStr</code> <p>redirect policy</p> Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def get_redirect_policy(self) -&gt; network.networkrequest.RedirectPolicyStr:\n\"\"\"Get the current redirect policy.\n    Returns:\n        redirect policy\n    \"\"\"\nreturn network.networkrequest.REDIRECT_POLICIES.inverse[self.redirectPolicy()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.set_redirect_policy","title":"<code>set_redirect_policy(policy: network.networkrequest.RedirectPolicyStr | network.NetworkRequest.RedirectPolicy)</code>","text":"<p>Set redirect policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>network.networkrequest.RedirectPolicyStr | network.NetworkRequest.RedirectPolicy</code> <p>redirect policy</p> required Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def set_redirect_policy(\nself,\npolicy: network.networkrequest.RedirectPolicyStr\n| network.NetworkRequest.RedirectPolicy,\n):\n\"\"\"Set redirect policy.\n    Args:\n        policy: redirect policy\n    \"\"\"\nself.setRedirectPolicy(\nnetwork.networkrequest.REDIRECT_POLICIES.get_enum_value(policy)\n)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkAddressEntry","title":"<code>NetworkAddressEntry</code>","text":"<p>         Bases: <code>network.QNetworkAddressEntry</code></p>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_dns_eligibility","title":"<code>get_dns_eligibility() -&gt; DnsEligibilityStatusStr</code>","text":"<p>Return whether this address is eligible for publication in the DNS.</p> <p>Returns:</p> Type Description <code>DnsEligibilityStatusStr</code> <p>DNS eligibility</p> Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_dns_eligibility(self) -&gt; DnsEligibilityStatusStr:\n\"\"\"Return whether this address is eligible for publication in the DNS.\n    Returns:\n        DNS eligibility\n    \"\"\"\nreturn DNS_ELIGIBILITY_STATUS.inverse[self.dnsEligibility()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.set_dns_eligibility","title":"<code>set_dns_eligibility(status: DnsEligibilityStatusStr | network.QNetworkAddressEntry.DnsEligibilityStatus)</code>","text":"<p>Set the DNS eligibility flag for this address to status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>DnsEligibilityStatusStr | network.QNetworkAddressEntry.DnsEligibilityStatus</code> <p>DNS eligibility status</p> required Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def set_dns_eligibility(\nself,\nstatus: DnsEligibilityStatusStr\n| network.QNetworkAddressEntry.DnsEligibilityStatus,\n):\n\"\"\"Set the DNS eligibility flag for this address to status.\n    Args:\n        status: DNS eligibility status\n    \"\"\"\nself.setDnsEligibility(DNS_ELIGIBILITY_STATUS.get_enum_value(status))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkInterface","title":"<code>NetworkInterface</code>","text":"<p>         Bases: <code>network.QNetworkInterface</code></p>"},{"location":"api/network.html#prettyqt.network.networkinterface.NetworkInterface.get_type","title":"<code>get_type() -&gt; InterfaceTypeStr</code>","text":"<p>Get the interface type.</p> <p>Returns:</p> Type Description <code>InterfaceTypeStr</code> <p>interface type</p> Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>def get_type(self) -&gt; InterfaceTypeStr:\n\"\"\"Get the interface type.\n    Returns:\n        interface type\n    \"\"\"\nreturn INTERFACE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkProxy","title":"<code>NetworkProxy</code>","text":"<p>         Bases: <code>network.QNetworkProxy</code></p>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.get_type","title":"<code>get_type() -&gt; ProxyTypeStr</code>","text":"<p>Get the proxy type.</p> <p>Returns:</p> Type Description <code>ProxyTypeStr</code> <p>type</p> Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def get_type(self) -&gt; ProxyTypeStr:\n\"\"\"Get the proxy type.\n    Returns:\n        type\n    \"\"\"\nreturn PROXY_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.set_type","title":"<code>set_type(typ: ProxyTypeStr | network.QNetworkProxy.ProxyType)</code>","text":"<p>Set proxy type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ProxyTypeStr | network.QNetworkProxy.ProxyType</code> <p>proxy type</p> required Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def set_type(self, typ: ProxyTypeStr | network.QNetworkProxy.ProxyType):\n\"\"\"Set proxy type.\n    Args:\n        typ: proxy type\n    \"\"\"\nself.setType(PROXY_TYPES.get_enum_value(typ))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkReply","title":"<code>NetworkReply(reply: QtNetwork.QNetworkReply)</code>","text":"Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def __init__(self, reply: QtNetwork.QNetworkReply):\nself.item = reply\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.get_error","title":"<code>get_error() -&gt; NetworkErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>NetworkErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def get_error(self) -&gt; NetworkErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn NETWORK_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkRequest","title":"<code>NetworkRequest(obj: datatypes.UrlType | QtNetwork.QNetworkRequest | None = None)</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkRequest</code></p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def __init__(self, obj: datatypes.UrlType | QtNetwork.QNetworkRequest | None = None):\nif isinstance(obj, QtNetwork.QNetworkRequest):\nsuper().__init__(obj)\nelse:\nsuper().__init__()\nif obj is not None:\nself.set_url(obj)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"<p>Get the current priority.</p> <p>Returns:</p> Type Description <code>PriorityStr</code> <p>priority</p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\n\"\"\"Get the current priority.\n    Returns:\n        priority\n    \"\"\"\nreturn PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_priority","title":"<code>set_priority(priority: PriorityStr | Req.Priority)</code>","text":"<p>Set priority.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>PriorityStr | Req.Priority</code> <p>priority</p> required Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_priority(self, priority: PriorityStr | Req.Priority):\n\"\"\"Set priority.\n    Args:\n        priority: priority\n    \"\"\"\nself.setPriority(PRIORITY.get_enum_value(priority))\n</code></pre>"},{"location":"api/openglwidgets.html","title":"openglwidgets module","text":""},{"location":"api/openglwidgets.html#prettyqt.openglwidgets.OpenGLWidget","title":"<code>OpenGLWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtOpenGLWidgets.QOpenGLWidget</code></p>"},{"location":"api/openglwidgets.html#prettyqt.openglwidgets.openglwidget.OpenGLWidget.get_current_target_buffer","title":"<code>get_current_target_buffer() -&gt; TargetBufferStr</code>","text":"<p>Return current target buffer.</p> <p>Returns:</p> Type Description <code>TargetBufferStr</code> <p>target buffer</p> Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>def get_current_target_buffer(self) -&gt; TargetBufferStr:\n\"\"\"Return current target buffer.\n    Returns:\n        target buffer\n    \"\"\"\nreturn TARGET_BUFFER.inverse[self.currentTargetBuffer()]\n</code></pre>"},{"location":"api/openglwidgets.html#prettyqt.openglwidgets.openglwidget.OpenGLWidget.get_update_behavior","title":"<code>get_update_behavior() -&gt; UpdateBehaviorStr | None</code>","text":"<p>Return current update behavior.</p> <p>Returns:</p> Type Description <code>UpdateBehaviorStr | None</code> <p>update behavior</p> Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>def get_update_behavior(self) -&gt; UpdateBehaviorStr | None:\n\"\"\"Return current update behavior.\n    Returns:\n        update behavior\n    \"\"\"\nreturn UPDATE_BEHAVIOR.inverse[self.updateBehavior()]\n</code></pre>"},{"location":"api/openglwidgets.html#prettyqt.openglwidgets.openglwidget.OpenGLWidget.set_update_behavior","title":"<code>set_update_behavior(behavior: UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior)</code>","text":"<p>Set update behavior.</p> <p>Parameters:</p> Name Type Description Default <code>behavior</code> <code>UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior</code> <p>update behavior to use</p> required Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>def set_update_behavior(\nself, behavior: UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior\n):\n\"\"\"Set update behavior.\n    Args:\n        behavior: update behavior to use\n    \"\"\"\nself.setUpdateBehavior(UPDATE_BEHAVIOR.get_enum_value(behavior))\n</code></pre>"},{"location":"api/pdf.html","title":"pdf module","text":""},{"location":"api/pdf.html#prettyqt.pdf.PdfBookmarkModel","title":"<code>PdfBookmarkModel(parent: core.QObject | None = None)</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code>, <code>pdf.QPdfBookmarkModel</code></p> Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>def __init__(self, parent: core.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfbookmarkmodel.PdfBookmarkModel.set_document","title":"<code>set_document(document: datatypes.PathType | pdf.QPdfDocument)</code>","text":"<p>Set document for model.</p> Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>def set_document(self, document: datatypes.PathType | pdf.QPdfDocument):\n\"\"\"Set document for model.\"\"\"\nif not isinstance(document, pdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.PdfDocument","title":"<code>PdfDocument</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtPdf.QPdfDocument</code></p>"},{"location":"api/pdf.html#prettyqt.pdf.pdfdocument.PdfDocument.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return current error.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>page mode</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error.\n    Returns:\n        page mode\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfdocument.PdfDocument.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Return current status.</p> <p>Returns:</p> Type Description <code>StatusStr</code> <p>zoom mode</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Return current status.\n    Returns:\n        zoom mode\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.PdfSearchModel","title":"<code>PdfSearchModel(parent: core.QObject | None = None)</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code>, <code>pdf.QPdfSearchModel</code></p> Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>def __init__(self, parent: core.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfsearchmodel.PdfSearchModel.set_document","title":"<code>set_document(document: datatypes.PathType | pdf.QPdfDocument)</code>","text":"<p>Set document for model.</p> Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>def set_document(self, document: datatypes.PathType | pdf.QPdfDocument):\n\"\"\"Set document for model.\"\"\"\nif not isinstance(document, pdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"api/pdfwidgets.html","title":"pdfwidgets module","text":""},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.PdfView","title":"<code>PdfView(parent: widgets.QWidget | None = None, **kwargs: widgets.QWidget | None)</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>QtPdfWidgets.QPdfView</code></p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself.setDocument(pdf.PdfDocument(self))\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.get_page_mode","title":"<code>get_page_mode() -&gt; PageModeStr</code>","text":"<p>Return current page mode.</p> <p>Returns:</p> Type Description <code>PageModeStr</code> <p>page mode</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_page_mode(self) -&gt; PageModeStr:\n\"\"\"Return current page mode.\n    Returns:\n        page mode\n    \"\"\"\nreturn PAGE_MODE.inverse[self.pageMode()]\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.get_zoom_mode","title":"<code>get_zoom_mode() -&gt; ZoomModeStr</code>","text":"<p>Return current zoom mode.</p> <p>Returns:</p> Type Description <code>ZoomModeStr</code> <p>zoom mode</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_zoom_mode(self) -&gt; ZoomModeStr:\n\"\"\"Return current zoom mode.\n    Returns:\n        zoom mode\n    \"\"\"\nreturn ZOOM_MODE.inverse[self.zoomMode()]\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.set_page_mode","title":"<code>set_page_mode(mode: PageModeStr | QtPdfWidgets.QPdfView.PageMode)</code>","text":"<p>Set the page mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PageModeStr | QtPdfWidgets.QPdfView.PageMode</code> <p>page mode</p> required Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_page_mode(self, mode: PageModeStr | QtPdfWidgets.QPdfView.PageMode):\n\"\"\"Set the page mode.\n    Args:\n        mode: page mode\n    \"\"\"\nself.setPageMode(PAGE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.set_zoom_mode","title":"<code>set_zoom_mode(mode: ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode)</code>","text":"<p>Set the zoom mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode</code> <p>zoom mode</p> required Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_zoom_mode(self, mode: ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode):\n\"\"\"Set the zoom mode.\n    Args:\n        mode: zoom mode\n    \"\"\"\nself.setZoomMode(ZOOM_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/positioning.html","title":"positioning module","text":""},{"location":"api/positioning.html#prettyqt.positioning.GeoAreaMonitorSource","title":"<code>GeoAreaMonitorSource</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtPositioning.QGeoAreaMonitorSource</code></p>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorsource.GeoAreaMonitorSource.get_error","title":"<code>get_error() -&gt; AreaMonitorFeatureStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>AreaMonitorFeatureStr</code> <p>error type</p> Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>def get_error(self) -&gt; AreaMonitorFeatureStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoPositionInfoSourceMixin","title":"<code>GeoPositionInfoSourceMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_preferred_positioning_methods","title":"<code>get_preferred_positioning_methods() -&gt; list[PositioningMethodStr]</code>","text":"<p>Return list of preferred positioning methods.</p> <p>Returns:</p> Type Description <code>list[PositioningMethodStr]</code> <p>list of preferred positioning methods</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_preferred_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of preferred positioning methods.\n    Returns:\n        list of preferred positioning methods\n    \"\"\"\nreturn POSITIONING_METHODS.get_list(self.preferredPositioningMethods())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_supported_positioning_methods","title":"<code>get_supported_positioning_methods() -&gt; list[PositioningMethodStr]</code>","text":"<p>Return list of supported positioning methods.</p> <p>Returns:</p> Type Description <code>list[PositioningMethodStr]</code> <p>list of supported positioning methods</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_supported_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of supported positioning methods.\n    Returns:\n        list of supported positioning methods\n    \"\"\"\nreturn POSITIONING_METHODS.get_list(self.supportedPositioningMethods())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.set_preferred_positioning_methods","title":"<code>set_preferred_positioning_methods(*methods: PositioningMethodStr)</code>","text":"<p>Set preferred positioning methods.</p> <p>Parameters:</p> Name Type Description Default <code>methods</code> <code>PositioningMethodStr</code> <p>positioning methods to use</p> <code>()</code> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def set_preferred_positioning_methods(self, *methods: PositioningMethodStr):\n\"\"\"Set preferred positioning methods.\n    Args:\n        methods: positioning methods to use\n    \"\"\"\nflags = POSITIONING_METHODS.merge_flags(methods)\nself.setPreferredPositioningMethods(flags)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoSatelliteInfo","title":"<code>GeoSatelliteInfo</code>","text":"<p>         Bases: <code>QtPositioning.QGeoSatelliteInfo</code></p>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.get_satellite_system","title":"<code>get_satellite_system() -&gt; SatelliteSystemStr</code>","text":"<p>Return satellite system.</p> <p>Returns:</p> Type Description <code>SatelliteSystemStr</code> <p>satellite system</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def get_satellite_system(self) -&gt; SatelliteSystemStr:\n\"\"\"Return satellite system.\n    Returns:\n        satellite system\n    \"\"\"\nreturn SATELLITE_SYSTEMS.inverse[self.satelliteSystem()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.set_satellite_system","title":"<code>set_satellite_system(system: SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem)</code>","text":"<p>Set satellite system.</p> <p>Parameters:</p> Name Type Description Default <code>system</code> <code>SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem</code> <p>satellite system to use</p> required Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def set_satellite_system(\nself, system: SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem\n):\n\"\"\"Set satellite system.\n    Args:\n        system: satellite system to use\n    \"\"\"\nself.setSatelliteSystem(SATELLITE_SYSTEMS.get_enum_value(system))\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoSatelliteInfoSource","title":"<code>GeoSatelliteInfoSource</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtPositioning.QGeoSatelliteInfoSource</code></p>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfosource.GeoSatelliteInfoSource.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/printsupport.html","title":"printsupport module","text":""},{"location":"api/printsupport.html#prettyqt.printsupport.AbstractPrintDialogMixin","title":"<code>AbstractPrintDialogMixin</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code></p>"},{"location":"api/printsupport.html#prettyqt.printsupport.abstractprintdialog.AbstractPrintDialogMixin.set_print_range","title":"<code>set_print_range(print_range: PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange)</code>","text":"<p>Set print range.</p> <p>Parameters:</p> Name Type Description Default <code>print_range</code> <code>PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange</code> <p>print range</p> required Source code in <code>prettyqt\\printsupport\\abstractprintdialog.py</code> <pre><code>def set_print_range(\nself, print_range: PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange\n):\n\"\"\"Set print range.\n    Args:\n        print_range: print range\n    \"\"\"\nself.setPrintRange(PRINT_RANGE.get_enum_value(print_range))\n</code></pre>"},{"location":"api/printsupport.html#prettyqt.printsupport.PrintPreviewWidget","title":"<code>PrintPreviewWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtPrintSupport.QPrintPreviewWidget</code></p>"},{"location":"api/printsupport.html#prettyqt.printsupport.printpreviewwidget.PrintPreviewWidget.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode</code> <p>view mode</p> required Source code in <code>prettyqt\\printsupport\\printpreviewwidget.py</code> <pre><code>def set_view_mode(\nself, mode: ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode\n):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/printsupport.html#prettyqt.printsupport.printpreviewwidget.PrintPreviewWidget.set_zoom_mode","title":"<code>set_zoom_mode(mode: ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode)</code>","text":"<p>Set zoom mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode</code> <p>zoom mode</p> required Source code in <code>prettyqt\\printsupport\\printpreviewwidget.py</code> <pre><code>def set_zoom_mode(\nself, mode: ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode\n):\n\"\"\"Set zoom mode.\n    Args:\n        mode: zoom mode\n    \"\"\"\nself.setZoomMode(ZOOM_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/printsupport.html#prettyqt.printsupport.Printer","title":"<code>Printer</code>","text":"<p>         Bases: <code>gui.PagedPaintDeviceMixin</code>, <code>QtPrintSupport.QPrinter</code></p>"},{"location":"api/printsupport.html#prettyqt.printsupport.printer.Printer.set_pdf_version","title":"<code>set_pdf_version(version: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion)</code>","text":"<p>Set pdf version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion</code> <p>pdf version</p> required Source code in <code>prettyqt\\printsupport\\printer.py</code> <pre><code>def set_pdf_version(\nself,\nversion: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion,\n):\n\"\"\"Set pdf version.\n    Args:\n        version: pdf version\n    \"\"\"\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION.get_enum_value(version))\n</code></pre>"},{"location":"api/qml.html","title":"qml module","text":""},{"location":"api/qml.html#prettyqt.qml.JSValue","title":"<code>JSValue</code>","text":"<p>         Bases: <code>qml.QJSValue</code></p>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.from_object","title":"<code>from_object(obj, jsengine: qml.QJSEngine) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert any python object into a QJSValue (must happen in GUI thread).</p> Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>@classmethod\ndef from_object(cls, obj, jsengine: qml.QJSEngine) -&gt; Self:\n\"\"\"Convert any python object into a QJSValue (must happen in GUI thread).\"\"\"\nmatch obj:\ncase None:\nreturn cls()\ncase list() | tuple():\nlength = len(obj)\narray = cls(jsengine.newArray(length))\nfor i, v in enumerate(obj):\narray.setProperty(i, cls.from_object(v, jsengine))\nreturn array\ncase dict():\narray = cls(jsengine.newArray())\nfor k, v in obj.items():\narray.setProperty(k, cls.from_object(v, jsengine))\nreturn array\ncase _:\ntry:\nreturn cls(obj)\nexcept TypeError:\nlogger.debug(f\"unknown type: {obj}\")\nreturn cls()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlEngineMixin","title":"<code>QmlEngineMixin</code>","text":"<p>         Bases: <code>qml.JSEngineMixin</code></p>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.get_object_ownership","title":"<code>get_object_ownership(obj: core.QObject) -&gt; ObjectOwnershipStr</code>","text":"<p>Return object ownership.</p> <p>Returns:</p> Type Description <code>ObjectOwnershipStr</code> <p>object ownership</p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def get_object_ownership(self, obj: core.QObject) -&gt; ObjectOwnershipStr:\n\"\"\"Return object ownership.\n    Returns:\n        object ownership\n    \"\"\"\nreturn OBJECT_OWNERSHIP.inverse[self.objectOwnership(obj)]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.set_object_ownership","title":"<code>set_object_ownership(obj: core.QObject, mode: ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership)</code>","text":"<p>Set the object ownership.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>core.QObject</code> <p>object to set ownership for</p> required <code>mode</code> <code>ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership</code> <p>object ownership to use</p> required Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def set_object_ownership(\nself,\nobj: core.QObject,\nmode: ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership,\n):\n\"\"\"Set the object ownership.\n    Args:\n        obj: object to set ownership for\n        mode: object ownership to use\n    \"\"\"\nself.setObjectOwnership(obj, OBJECT_OWNERSHIP.get_enum_value(mode))\n</code></pre>"},{"location":"api/qthelp.html","title":"qthelp module","text":""},{"location":"api/quick.html","title":"quick module","text":""},{"location":"api/quick.html#prettyqt.quick.QuickItemMixin","title":"<code>QuickItemMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>qml.QmlParserStatusMixin</code></p>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.get_transform_origin","title":"<code>get_transform_origin() -&gt; TransformOriginStr</code>","text":"<p>Return the render type of text-like elements in Qt Quick.</p> <p>Returns:</p> Type Description <code>TransformOriginStr</code> <p>transform origin</p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def get_transform_origin(self) -&gt; TransformOriginStr:\n\"\"\"Return the render type of text-like elements in Qt Quick.\n    Returns:\n        transform origin\n    \"\"\"\nreturn TRANSFORM_ORIGIN.inverse[self.transformOrigin()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.set_transform_origin","title":"<code>set_transform_origin(origin: TransformOriginStr | QtQuick.QQuickItem.TransformOrigin)</code>","text":"<p>Set the origin point around which scale and rotation transform.</p> <p>The default is \"center\".</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>TransformOriginStr | QtQuick.QQuickItem.TransformOrigin</code> <p>transform origin to use</p> required Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def set_transform_origin(\nself, origin: TransformOriginStr | QtQuick.QQuickItem.TransformOrigin\n):\n\"\"\"Set the origin point around which scale and rotation transform.\n    The default is \"center\".\n    Args:\n        origin: transform origin to use\n    \"\"\"\nself.setTransformOrigin(TRANSFORM_ORIGIN.get_enum_value(origin))\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickPaintedItem","title":"<code>QuickPaintedItem</code>","text":"<p>         Bases: <code>quick.QuickItemMixin</code>, <code>quick.QQuickPaintedItem</code></p>"},{"location":"api/quick.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.get_render_target","title":"<code>get_render_target() -&gt; RenderTargetStr</code>","text":"<p>Return the render target.</p> <p>Returns:</p> Type Description <code>RenderTargetStr</code> <p>render target</p> Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def get_render_target(self) -&gt; RenderTargetStr:\n\"\"\"Return the render target.\n    Returns:\n        render target\n    \"\"\"\nreturn RENDER_TARGET.inverse[self.renderTarget()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.set_render_target","title":"<code>set_render_target(target: RenderTargetStr | mod.RenderTarget)</code>","text":"<p>Set the render target.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>RenderTargetStr | mod.RenderTarget</code> <p>render target to use</p> required Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def set_render_target(self, target: RenderTargetStr | mod.RenderTarget):\n\"\"\"Set the render target.\n    Args:\n        target: render target to use\n    \"\"\"\nself.setRenderTarget(RENDER_TARGET[target])\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.SGNode","title":"<code>SGNode</code>","text":"<p>         Bases: <code>QtQuick.QSGNode</code></p>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.get_children","title":"<code>get_children(recursive: bool = False) -&gt; list[SGNode]</code>","text":"<p>Get children of this item.</p> <p>recursive option is written iteratively to also support original QTreeWidgetItems.</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_children(self, recursive: bool = False) -&gt; list[SGNode]:\n\"\"\"Get children of this item.\n    recursive option is written iteratively to also support original QTreeWidgetItems.\n    \"\"\"\nif not recursive:\nreturn [self.childAtIndex(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.childAtIndex(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.get_type","title":"<code>get_type() -&gt; NodeTypeStr</code>","text":"<p>Get the type of the node.</p> <p>Returns:</p> Type Description <code>NodeTypeStr</code> <p>Node type</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_type(self) -&gt; NodeTypeStr:\n\"\"\"Get the type of the node.\n    Returns:\n        Node type\n    \"\"\"\nreturn NODE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/quickwidgets.html","title":"quickwidgets module","text":""},{"location":"api/scintilla.html","title":"scintilla module","text":""},{"location":"api/scxml.html","title":"scxml module","text":""},{"location":"api/spatialaudio.html","title":"spatialaudio module","text":""},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.AudioEngine","title":"<code>AudioEngine</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QAudioEngine</code></p>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.audioengine.AudioEngine.get_output_mode","title":"<code>get_output_mode() -&gt; OutputModeStr</code>","text":"<p>Return current output mode.</p> <p>Returns:</p> Type Description <code>OutputModeStr</code> <p>output mode</p> Source code in <code>prettyqt\\spatialaudio\\audioengine.py</code> <pre><code>def get_output_mode(self) -&gt; OutputModeStr:\n\"\"\"Return current output mode.\n    Returns:\n        output mode\n    \"\"\"\nreturn OUTPUT_MODE.inverse[self.outputMode()]\n</code></pre>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.audioengine.AudioEngine.set_output_mode","title":"<code>set_output_mode(mode: OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode)</code>","text":"<p>Set the output mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode</code> <p>output mode</p> required Source code in <code>prettyqt\\spatialaudio\\audioengine.py</code> <pre><code>def set_output_mode(\nself, mode: OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode\n):\n\"\"\"Set the output mode.\n    Args:\n        mode: output mode\n    \"\"\"\nself.setOutputMode(OUTPUT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.AudioRoom","title":"<code>AudioRoom</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QAudioRoom</code></p>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.audioroom.AudioRoom.get_wall_material","title":"<code>get_wall_material(wall: WallStr | QtSpatialAudio.QAudioRoom.Wall) -&gt; MaterialStr</code>","text":"<p>Return wall material.</p> <p>Parameters:</p> Name Type Description Default <code>wall</code> <code>WallStr | QtSpatialAudio.QAudioRoom.Wall</code> <p>wall to get material for</p> required Source code in <code>prettyqt\\spatialaudio\\audioroom.py</code> <pre><code>def get_wall_material(\nself, wall: WallStr | QtSpatialAudio.QAudioRoom.Wall\n) -&gt; MaterialStr:\n\"\"\"Return wall material.\n    Arguments:\n        wall: wall to get material for\n    \"\"\"\nreturn MATERIAL.inverse[self.wallMaterial(WALL.get_enum_value(wall))]\n</code></pre>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.audioroom.AudioRoom.set_wall_material","title":"<code>set_wall_material(wall: WallStr | QtSpatialAudio.QAudioRoom.Wall, material: MaterialStr | QtSpatialAudio.QAudioRoom.Material)</code>","text":"<p>Set the wall material.</p> <p>Parameters:</p> Name Type Description Default <code>wall</code> <code>WallStr | QtSpatialAudio.QAudioRoom.Wall</code> <p>Wall to set</p> required <code>material</code> <code>MaterialStr | QtSpatialAudio.QAudioRoom.Material</code> <p>material type</p> required Source code in <code>prettyqt\\spatialaudio\\audioroom.py</code> <pre><code>def set_wall_material(\nself,\nwall: WallStr | QtSpatialAudio.QAudioRoom.Wall,\nmaterial: MaterialStr | QtSpatialAudio.QAudioRoom.Material,\n):\n\"\"\"Set the wall material.\n    Args:\n        wall: Wall to set\n        material: material type\n    \"\"\"\nself.setWallMaterial(WALL.get_enum_value(wall), MATERIAL.get_enum_value(material))\n</code></pre>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.SpatialSound","title":"<code>SpatialSound</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QSpatialSound</code></p>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.spatialsound.SpatialSound.get_distance_model","title":"<code>get_distance_model() -&gt; DistanceModelStr</code>","text":"<p>Return current distance model.</p> <p>Returns:</p> Type Description <code>DistanceModelStr</code> <p>distance model</p> Source code in <code>prettyqt\\spatialaudio\\spatialsound.py</code> <pre><code>def get_distance_model(self) -&gt; DistanceModelStr:\n\"\"\"Return current distance model.\n    Returns:\n        distance model\n    \"\"\"\nreturn DISTANCE_MODEL.inverse[self.distanceModel()]\n</code></pre>"},{"location":"api/spatialaudio.html#prettyqt.spatialaudio.spatialsound.SpatialSound.set_distance_model","title":"<code>set_distance_model(model: DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel)</code>","text":"<p>Set the distance model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel</code> <p>distance model</p> required Source code in <code>prettyqt\\spatialaudio\\spatialsound.py</code> <pre><code>def set_distance_model(\nself, model: DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel\n):\n\"\"\"Set the distance model.\n    Args:\n        model: distance model\n    \"\"\"\nself.setDistanceModel(DISTANCE_MODEL.get_enum_value(model))\n</code></pre>"},{"location":"api/statemachine.html","title":"statemachine module","text":""},{"location":"api/statemachine.html#prettyqt.statemachine.AbstractTransitionMixin","title":"<code>AbstractTransitionMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/statemachine.html#prettyqt.statemachine.abstracttransition.AbstractTransitionMixin.get_transition_type","title":"<code>get_transition_type() -&gt; TransitionTypeStr</code>","text":"<p>Return current transition type.</p> <p>Returns:</p> Type Description <code>TransitionTypeStr</code> <p>transition type</p> Source code in <code>prettyqt\\statemachine\\abstracttransition.py</code> <pre><code>def get_transition_type(self) -&gt; TransitionTypeStr:\n\"\"\"Return current transition type.\n    Returns:\n        transition type\n    \"\"\"\nreturn TRANSITION_TYPE.inverse[self.transitionType()]\n</code></pre>"},{"location":"api/statemachine.html#prettyqt.statemachine.abstracttransition.AbstractTransitionMixin.set_transition_type","title":"<code>set_transition_type(typ: TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType)</code>","text":"<p>Set transition type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType</code> <p>transition type to use</p> required Source code in <code>prettyqt\\statemachine\\abstracttransition.py</code> <pre><code>def set_transition_type(\nself, typ: TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType\n):\n\"\"\"Set transition type.\n    Args:\n        typ: transition type to use\n    \"\"\"\nself.setTransitionType(TRANSITION_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/statemachine.html#prettyqt.statemachine.HistoryState","title":"<code>HistoryState</code>","text":"<p>         Bases: <code>statemachine.AbstractStateMixin</code>, <code>statemachine.QHistoryState</code></p>"},{"location":"api/statemachine.html#prettyqt.statemachine.historystate.HistoryState.get_history_type","title":"<code>get_history_type() -&gt; HistoryTypeStr</code>","text":"<p>Return current history type.</p> <p>Returns:</p> Type Description <code>HistoryTypeStr</code> <p>history type</p> Source code in <code>prettyqt\\statemachine\\historystate.py</code> <pre><code>def get_history_type(self) -&gt; HistoryTypeStr:\n\"\"\"Return current history type.\n    Returns:\n        history type\n    \"\"\"\nreturn HISTORY_TYPE.inverse[self.historyType()]\n</code></pre>"},{"location":"api/statemachine.html#prettyqt.statemachine.historystate.HistoryState.set_history_type","title":"<code>set_history_type(typ: HistoryTypeStr | statemachine.QHistoryState.HistoryType)</code>","text":"<p>Set history type to use.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>HistoryTypeStr | statemachine.QHistoryState.HistoryType</code> <p>history type to use</p> required Source code in <code>prettyqt\\statemachine\\historystate.py</code> <pre><code>def set_history_type(\nself, typ: HistoryTypeStr | statemachine.QHistoryState.HistoryType\n):\n\"\"\"Set history type to use.\n    Args:\n        typ: history type to use\n    \"\"\"\nself.setHistoryType(HISTORY_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/statemachine.html#prettyqt.statemachine.StateMachine","title":"<code>StateMachine</code>","text":"<p>         Bases: <code>statemachine.state.StateMixin</code>, <code>statemachine.QStateMachine</code></p>"},{"location":"api/statemachine.html#prettyqt.statemachine.statemachine.StateMachine.get_global_restore_policy","title":"<code>get_global_restore_policy() -&gt; statemachine.state.RestorePolicyStr</code>","text":"<p>Return current restore policy.</p> <p>Returns:</p> Type Description <code>statemachine.state.RestorePolicyStr</code> <p>restore policy</p> Source code in <code>prettyqt\\statemachine\\statemachine.py</code> <pre><code>def get_global_restore_policy(self) -&gt; statemachine.state.RestorePolicyStr:\n\"\"\"Return current restore policy.\n    Returns:\n        restore policy\n    \"\"\"\nreturn statemachine.state.RESTORE_POLICY.inverse[self.globalRestorePolicy()]\n</code></pre>"},{"location":"api/statemachine.html#prettyqt.statemachine.statemachine.StateMachine.set_global_restore_policy","title":"<code>set_global_restore_policy(policy: statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy)</code>","text":"<p>Set restore policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy</code> <p>restore policy to use</p> required Source code in <code>prettyqt\\statemachine\\statemachine.py</code> <pre><code>def set_global_restore_policy(\nself,\npolicy: statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy,\n):\n\"\"\"Set restore policy to use.\n    Args:\n        policy: restore policy to use\n    \"\"\"\nself.setGlobalRestorePolicy(\nstatemachine.state.RESTORE_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"api/svg.html","title":"svg module","text":"<p>svg module.</p> <p>contains QtSvg-based classes</p>"},{"location":"api/svg.html#prettyqt.svg.SvgRenderer","title":"<code>SvgRenderer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtSvg.QSvgRenderer</code></p>"},{"location":"api/svg.html#prettyqt.svg.svgrenderer.SvgRenderer.get_aspect_ratio_mode","title":"<code>get_aspect_ratio_mode() -&gt; constants.AspectRatioModeStr</code>","text":"<p>Return current aspect ratio mode.</p> <p>Returns:</p> Type Description <code>constants.AspectRatioModeStr</code> <p>aspect ratio mode</p> Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n    Returns:\n        aspect ratio mode\n    \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svgrenderer.SvgRenderer.set_aspect_ratio_mode","title":"<code>set_aspect_ratio_mode(mode: constants.AspectRatioModeStr | constants.AspectRatioMode)</code>","text":"<p>Set the aspect ratio mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.AspectRatioModeStr | constants.AspectRatioMode</code> <p>aspect ratio mode</p> required Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def set_aspect_ratio_mode(\nself, mode: constants.AspectRatioModeStr | constants.AspectRatioMode\n):\n\"\"\"Set the aspect ratio mode.\n    Args:\n        mode: aspect ratio mode\n    \"\"\"\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/svgwidgets.html","title":"svgwidgets module","text":"<p>svg module.</p> <p>contains QtSvgWidgets-based classes</p>"},{"location":"api/syntaxhighlighters.html","title":"syntaxhighlighters module","text":"<p>syntaxhighlighters module.</p> <p>contains some custom syntax highlighers</p>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.JsonHighlighter","title":"<code>JsonHighlighter</code>","text":"<p>         Bases: <code>gui.SyntaxHighlighter</code></p>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.jsonhighlighter.JsonHighlighter.highlightBlock","title":"<code>highlightBlock(text: str)</code>","text":"<p>Highlight a block of code using the rules outlined in the Constructor.</p> Source code in <code>prettyqt\\syntaxhighlighters\\jsonhighlighter.py</code> <pre><code>def highlightBlock(self, text: str):\n\"\"\"Highlight a block of code using the rules outlined in the Constructor.\"\"\"\nfor m in BRACKETS.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], SYMBOL_FORMAT)\ntext.replace('\\\\\"', \"  \")\nfor m in REGEXP1.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], NAME_FORMAT)\nfor m in REGEXP2.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], VALUE_FORMAT)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.PygmentsHighlighter","title":"<code>PygmentsHighlighter(parent: gui.QTextDocument, lexer: str, style: None | StyleStr = None)</code>","text":"<p>         Bases: <code>gui.SyntaxHighlighter</code></p> <p>Syntax highlighter that uses Pygments for parsing.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def __init__(\nself,\nparent: gui.QTextDocument,\nlexer: str,\nstyle: None | StyleStr = None,\n):\nsuper().__init__(parent)\nself._document = self.document()\nself._formatter = html.HtmlFormatter(nowrap=True)\nself._style = None\nself._stylename = \"\"\nif style is None:\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\nself.set_style(style)\nif lexer == \"regex\":\nself._lexer = lexers.load_lexer_from_file(str(paths.RE_LEXER_PATH))\nelse:\nself._lexer = lexers.get_lexer_by_name(lexer)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.highlightBlock","title":"<code>highlightBlock(string)</code>","text":"<p>Highlight a block of text.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def highlightBlock(self, string):\n\"\"\"Highlight a block of text.\"\"\"\nif (prev_data := self.currentBlock().previous().userData()) is not None:\nself._lexer._saved_state_stack = prev_data.syntax_stack\nelif hasattr(self._lexer, \"_saved_state_stack\"):\ndel self._lexer._saved_state_stack\n# Lex the text using Pygments\nindex = 0\nfor token, text in self._lexer.get_tokens(string):\nlength = qstring_length(text)\nself.setFormat(index, length, self._get_format(token))\nindex += length\nif hasattr(self._lexer, \"_saved_state_stack\"):\ndata = gui.TextBlockUserData(syntax_stack=self._lexer._saved_state_stack)\nself.currentBlock().setUserData(data)\n# Clean up for the next go-round.\ndel self._lexer._saved_state_stack\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.set_style_sheet","title":"<code>set_style_sheet(stylesheet: str)</code>","text":"<p>Sets a CSS stylesheet.</p> The classes in the stylesheet should correspond to those generated by <p>pygmentize -S"},{"location":"api/test.html","title":"test module","text":"<p>test module.</p> <p>contains QtTest-based classes</p>"},{"location":"api/texttospeech.html","title":"texttospeech module","text":"<p>TextToSpeech module.</p> <p>Contains QtTextToSpeech-based classes</p>"},{"location":"api/webchannel.html","title":"webchannel module","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineCore-based classes</p>"},{"location":"api/webenginecore.html","title":"webenginecore module","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineCore-based classes</p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineContextMenuRequest","title":"<code>WebEngineContextMenuRequest</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineContextMenuRequest</code></p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_copy","title":"<code>can_copy() -&gt; bool</code>","text":"<p>Returns whether copy is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_copy(self) -&gt; bool:\n\"\"\"Returns whether copy is possible.\"\"\"\nreturn bool(mod.EditFlag.CanCopy &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_cut","title":"<code>can_cut() -&gt; bool</code>","text":"<p>Returns whether cut is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_cut(self) -&gt; bool:\n\"\"\"Returns whether cut is possible.\"\"\"\nreturn bool(mod.EditFlag.CanCut &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_delete","title":"<code>can_delete() -&gt; bool</code>","text":"<p>Returns whether delete is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_delete(self) -&gt; bool:\n\"\"\"Returns whether delete is possible.\"\"\"\nreturn bool(mod.EditFlag.CanDelete &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_edit_richly","title":"<code>can_edit_richly() -&gt; bool</code>","text":"<p>Returns whether edit_richly is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_edit_richly(self) -&gt; bool:\n\"\"\"Returns whether edit_richly is possible.\"\"\"\nreturn bool(mod.EditFlag.CanEditRichly &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_paste","title":"<code>can_paste() -&gt; bool</code>","text":"<p>Returns whether paste is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_paste(self) -&gt; bool:\n\"\"\"Returns whether paste is possible.\"\"\"\nreturn bool(mod.EditFlag.CanPaste &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_redo","title":"<code>can_redo() -&gt; bool</code>","text":"<p>Returns whether redo is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_redo(self) -&gt; bool:\n\"\"\"Returns whether redo is possible.\"\"\"\nreturn bool(mod.EditFlag.CanRedo &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_select_all","title":"<code>can_select_all() -&gt; bool</code>","text":"<p>Returns whether select_all is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_select_all(self) -&gt; bool:\n\"\"\"Returns whether select_all is possible.\"\"\"\nreturn bool(mod.EditFlag.CanSelectAll &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_translate","title":"<code>can_translate() -&gt; bool</code>","text":"<p>Returns whether translate is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_translate(self) -&gt; bool:\n\"\"\"Returns whether translate is possible.\"\"\"\nreturn bool(mod.EditFlag.CanTranslate &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_undo","title":"<code>can_undo() -&gt; bool</code>","text":"<p>Returns whether undo is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_undo(self) -&gt; bool:\n\"\"\"Returns whether undo is possible.\"\"\"\nreturn bool(mod.EditFlag.CanUndo &amp; self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_edit_flags","title":"<code>get_edit_flags() -&gt; list[MediaFlagStr]</code>","text":"<p>Get edit flags.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_edit_flags(self) -&gt; list[MediaFlagStr]:\n\"\"\"Get edit flags.\"\"\"\nreturn EDIT_FLAGS.get_list(self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_flags","title":"<code>get_media_flags() -&gt; list[MediaFlagStr]</code>","text":"<p>Get media flags.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_flags(self) -&gt; list[MediaFlagStr]:\n\"\"\"Get media flags.\"\"\"\nreturn MEDIA_FLAGS.get_list(self.mediaFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_type","title":"<code>get_media_type() -&gt; MediaTypeStr</code>","text":"<p>Get media type.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_type(self) -&gt; MediaTypeStr:\n\"\"\"Get media type.\"\"\"\nreturn MEDIA_TYPES.inverse[self.mediaType()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineDownloadRequest","title":"<code>WebEngineDownloadRequest(item: QtWebEngineCore.QWebEngineDownloadRequest)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def __init__(self, item: QtWebEngineCore.QWebEngineDownloadRequest):\nself.item = item\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_interrupt_reason","title":"<code>get_interrupt_reason() -&gt; DownloadInterruptReasonStr</code>","text":"<p>Get reason for download interruption.</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_interrupt_reason(self) -&gt; DownloadInterruptReasonStr:\n\"\"\"Get reason for download interruption.\"\"\"\nreturn DOWNLOAD_INTERRUPT_REASONS.inverse[self.item.interruptReason()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_save_page_format","title":"<code>get_save_page_format() -&gt; SavePageFormatStr</code>","text":"<p>Return current save page format.</p> <p>Returns:</p> Type Description <code>SavePageFormatStr</code> <p>Save page format</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_save_page_format(self) -&gt; SavePageFormatStr:\n\"\"\"Return current save page format.\n    Returns:\n        Save page format\n    \"\"\"\nreturn SAVE_PAGE_FORMAT.inverse[self.item.savePageFormat()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_state","title":"<code>get_state() -&gt; DownloadStateStr</code>","text":"<p>Get current state.</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_state(self) -&gt; DownloadStateStr:\n\"\"\"Get current state.\"\"\"\nreturn DOWNLOAD_STATE.inverse[self.item.state()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.set_save_page_format","title":"<code>set_save_page_format(fmt: SavePageFormatStr | Item.SavePageFormat)</code>","text":"<p>Set the save page format.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>SavePageFormatStr | Item.SavePageFormat</code> <p>save page format for the layout</p> required Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def set_save_page_format(self, fmt: SavePageFormatStr | Item.SavePageFormat):\n\"\"\"Set the save page format.\n    Args:\n        fmt: save page format for the layout\n    \"\"\"\nself.item.setSavePageFormat(SAVE_PAGE_FORMAT.get_enum_value(fmt))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineHistory","title":"<code>WebEngineHistory(history: webenginecore.QWebEngineHistory)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def __init__(self, history: webenginecore.QWebEngineHistory):\nself.history = history\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.get_items","title":"<code>get_items() -&gt; list[webenginecore.WebEngineHistoryItem]</code>","text":"<p>Get history items.</p> Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def get_items(self) -&gt; list[webenginecore.WebEngineHistoryItem]:\n\"\"\"Get history items.\"\"\"\nreturn [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineHttpRequest","title":"<code>WebEngineHttpRequest</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineHttpRequest</code></p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.get_method","title":"<code>get_method() -&gt; MethodStr</code>","text":"<p>Get the method this WebEngine request is using.</p> <p>Returns:</p> Type Description <code>MethodStr</code> <p>method</p> Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def get_method(self) -&gt; MethodStr:\n\"\"\"Get the method this WebEngine request is using.\n    Returns:\n        method\n    \"\"\"\nreturn METHODS.inverse[self.method()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.set_method","title":"<code>set_method(method: MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method)</code>","text":"<p>Set method this WebEngine request is using.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method</code> <p>method</p> required Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def set_method(\nself, method: MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method\n):\n\"\"\"Set method this WebEngine request is using.\n    Args:\n        method: method\n    \"\"\"\nself.setMethod(METHODS.get_enum_value(method))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEnginePage","title":"<code>WebEnginePage</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>webenginecore.QWebEnginePage</code></p> <p>A web engine page holds the HTML document contents, link history + actions.</p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.find_text","title":"<code>find_text(string: str, backward: bool = False, case_sensitive: bool = False, callback: Callable[[bool], None] | None = None)</code>","text":"<p>Find text in the current page.</p> <p>Finds the specified string, subString, in the page, using the given options. The findTextFinished() signal is emitted when a string search is completed.</p> <p>To clear the search highlight, just pass an empty string.</p> <p>The resultCallback must take a boolean parameter. It will be called with a value of true if the subString was found; otherwise the callback value will be false.</p> <p>Warning: It is guaranteed that the callback is always called, but it might be done during page destruction. When WebEnginePage is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding QWebEnginePage or QWebEnginePage instance inside it.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string to search for</p> required <code>backward</code> <code>bool</code> <p>search backwards</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>case-sensitive search</p> <code>False</code> <code>callback</code> <code>Callable[[bool], None] | None</code> <p>result callback</p> <code>None</code> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n    Finds the specified string, subString, in the page, using the given options.\n    The findTextFinished() signal is emitted when a string search is completed.\n    To clear the search highlight, just pass an empty string.\n    The resultCallback must take a boolean parameter.\n    It will be called with a value of true if the subString was found;\n    otherwise the callback value will be false.\n    Warning: It is guaranteed that the callback is always called,\n    but it might be done during page destruction. When WebEnginePage is deleted,\n    the callback is triggered with an invalid value and it is not safe to use\n    the corresponding QWebEnginePage or QWebEnginePage instance inside it.\n    Args:\n        string: string to search for\n        backward: search backwards\n        case_sensitive: case-sensitive search\n        callback: result callback\n    \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.QWebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= self.FindFlag.FindCaseSensitively\nif backward:\nflag |= self.FindFlag.FindBackward\nself.findText(string, flag, callback)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"<p>Return icon. If icon is Null, return None.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\n\"\"\"Return icon. If icon is Null, return None.\"\"\"\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_lifecycle_state","title":"<code>get_lifecycle_state() -&gt; LifecycleStateStr</code>","text":"<p>Get the current lifecycle state.</p> <p>Returns:</p> Type Description <code>LifecycleStateStr</code> <p>lifecycle state</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_lifecycle_state(self) -&gt; LifecycleStateStr:\n\"\"\"Get the current lifecycle state.\n    Returns:\n        lifecycle state\n    \"\"\"\nreturn LIFECYCLE_STATE.inverse[self.lifecycleState()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_scripts","title":"<code>get_scripts() -&gt; webenginecore.WebEngineScriptCollection</code>","text":"<p>Get script collection.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\n\"\"\"Get script collection.\"\"\"\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_setting","title":"<code>get_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr) -&gt; bool</code>","text":"<p>Return value of given WebEngine setting.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\n) -&gt; bool:\n\"\"\"Return value of given WebEngine setting.\"\"\"\nreturn self.get_settings()[setting_name]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_settings","title":"<code>get_settings() -&gt; webenginecore.WebEngineSettings</code>","text":"<p>Get WebEngineSettings (a MutableMapping).</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_settings(self) -&gt; webenginecore.WebEngineSettings:\n\"\"\"Get WebEngineSettings (a MutableMapping).\"\"\"\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.insert_stylesheet","title":"<code>insert_stylesheet(name: str, css: str | os.PathLike, immediately: bool = True)</code>","text":"<p>Load css using JavaScript.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>CSS id</p> required <code>css</code> <code>str | os.PathLike</code> <p>CSS stylesheet, either a string or a PathLike object.</p> required <code>immediately</code> <code>bool</code> <p>whther to run javascript immediately</p> <code>True</code> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def insert_stylesheet(\nself, name: str, css: str | os.PathLike, immediately: bool = True\n):\n\"\"\"Load css using JavaScript.\n    Arguments:\n        name: CSS id\n        css: CSS stylesheet, either a string or a PathLike object.\n        immediately: whther to run javascript immediately\n    \"\"\"\nif isinstance(css, os.PathLike):\npath = core.File(os.fspath(css))\nif not path.open(\ncore.File.OpenModeFlag.ReadOnly | core.File.OpenModeFlag.Text\n):\nreturn\ncss = path.readAll().data().decode(\"utf-8\")\nscript = webenginecore.WebEngineScript()\ns = \"\"\"\n    (function() {\n    css = document.createElement('style');\n    css.type = 'text/css';\n    css.id = \"{}\";\n    document.head.appendChild(css);\n    css.innerText = `{}`;\n    })()\n    \"\"\"\ns = s.format(name, css)\nscript = webenginecore.WebEngineScript()\nif immediately:\nself.runJavaScript(s, script.ScriptWorldId.ApplicationWorld)\nscript.setName(name)\nscript.setSourceCode(s)\nscript.setInjectionPoint(script.InjectionPoint.DocumentReady)\nscript.setRunsOnSubFrames(True)\nscript.setWorldId(script.ScriptWorldId.ApplicationWorld)\nself.scripts().insert(script)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.load_url","title":"<code>load_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Load the URL.</p> <p>Loads the specified url and displays it.</p> <p>Note: The Page remains the same until enough data has arrived to display the new URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to load</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n    Loads the specified url and displays it.\n    Note: The Page remains the same until enough data has arrived\n    to display the new URL.\n    Args:\n        url: URL to load\n    \"\"\"\nself.load(datatypes.to_url(url))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.mousedown","title":"<code>mousedown(selector: str, btn: Literal['left', 'middle', 'right'])</code>","text":"<p>Simulate a mousedown event on the targeted element.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str</code> <p>A CSS3 selector to targeted element</p> required <code>btn</code> <code>Literal['left', 'middle', 'right']</code> <p>Mouse button</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def mousedown(self, selector: str, btn: Literal[\"left\", \"middle\", \"right\"]):\n\"\"\"Simulate a mousedown event on the targeted element.\n    Arguments:\n        selector: A CSS3 selector to targeted element\n        btn: Mouse button\n    \"\"\"\nbtn_id = dict(left=0, middle=1, right=2)[btn]\nreturn self.runJavaScript(\nf\"\"\"\n        (function () {{\n            var element = document.querySelector({selector!r});\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"mousedown\", true, true, window,\n                               1, 1, 1, 1, 1, false, false, false, false,\n{btn_id!r}, element);\n            return element.dispatchEvent(evt);\n}})();\n    \"\"\"\n)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.open_in_browser","title":"<code>open_in_browser()</code>","text":"<p>Open page URL in default system browser.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def open_in_browser(self):\n\"\"\"Open page URL in default system browser.\"\"\"\ntry:\nwebbrowser.open(self.getUrl().toString())\nexcept ValueError as e:\nlogger.exception(e)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_feature_permission","title":"<code>set_feature_permission(url: datatypes.UrlType, feature: FeatureStr | mod.Feature, policy: PermissionPolicyStr | mod.PermissionPolicy)</code>","text":"<p>Set permission of feature for given URL.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_feature_permission(\nself,\nurl: datatypes.UrlType,\nfeature: FeatureStr | mod.Feature,\npolicy: PermissionPolicyStr | mod.PermissionPolicy,\n):\n\"\"\"Set permission of feature for given URL.\"\"\"\nurl = core.Url(url)\nself.setFeaturePermission(\nurl, FEATURE.get_enum_value(feature), PERMISSION_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_input_value","title":"<code>set_input_value(selector: str, value: str)</code>","text":"<p>Set the value of the input matched by given selector.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_input_value(self, selector: str, value):\n\"\"\"Set the value of the input matched by given selector.\"\"\"\nscript = f'document.querySelector({selector!r}).setAttribute(\"value\", \"{value}\")'\nself.runJavaScript(script)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_lifecycle_state","title":"<code>set_lifecycle_state(state: LifecycleStateStr | mod.LifecycleState)</code>","text":"<p>Set lifecycle state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>LifecycleStateStr | mod.LifecycleState</code> <p>lifecycle state</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_lifecycle_state(self, state: LifecycleStateStr | mod.LifecycleState):\n\"\"\"Set lifecycle state.\n    Args:\n        state: lifecycle state\n    \"\"\"\nself.setLifecycleState(LIFECYCLE_STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_setting","title":"<code>set_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr, value: bool)</code>","text":"<p>Set WebEngine setting to value.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\n\"\"\"Set WebEngine setting to value.\"\"\"\nself.get_settings()[setting_name] = value\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_url","title":"<code>set_url(url: datatypes.PathType | datatypes.UrlType)</code>","text":"<p>Set the url of the WebEnginePage.</p> <p>Clears the Page and loads the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.PathType | datatypes.UrlType</code> <p>URL to set</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_url(self, url: datatypes.PathType | datatypes.UrlType):\n\"\"\"Set the url of the WebEnginePage.\n    Clears the Page and loads the URL.\n    Args:\n        url: URL to set\n    \"\"\"\nself.setUrl(datatypes.to_url(url))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_zoom","title":"<code>set_zoom(zoom: float)</code>","text":"<p>Set the zoom factor for the Page.</p> <p>Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom factor</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the Page.\n    Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n    Args:\n        zoom: Zoom factor\n    \"\"\"\nself.setZoomFactor(zoom)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.trigger_action","title":"<code>trigger_action(action: WebActionStr | mod.WebAction, checked: bool = False)</code>","text":"<p>Trigger action.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def trigger_action(self, action: WebActionStr | mod.WebAction, checked: bool = False):\n\"\"\"Trigger action.\"\"\"\nself.triggerAction(WEB_ACTION.get_enum_value(action), checked)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineProfile","title":"<code>WebEngineProfile</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>webenginecore.QWebEngineProfile</code></p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_http_cache_type","title":"<code>get_http_cache_type() -&gt; HttpCacheTypeStr</code>","text":"<p>Return current http cache type.</p> <p>Returns:</p> Type Description <code>HttpCacheTypeStr</code> <p>Http cache type</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_http_cache_type(self) -&gt; HttpCacheTypeStr:\n\"\"\"Return current http cache type.\n    Returns:\n        Http cache type\n    \"\"\"\nreturn HTTP_CACHE_TYPE.inverse[self.httpCacheType()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_persistent_cookie_policy","title":"<code>get_persistent_cookie_policy() -&gt; PersistentCookiePolicyStr</code>","text":"<p>Return current persistent cookie policy.</p> <p>Returns:</p> Type Description <code>PersistentCookiePolicyStr</code> <p>Persistent cookie policy</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_persistent_cookie_policy(self) -&gt; PersistentCookiePolicyStr:\n\"\"\"Return current persistent cookie policy.\n    Returns:\n        Persistent cookie policy\n    \"\"\"\nreturn PERSISTENT_COOKIE_POLICY.inverse[self.persistentCookiesPolicy()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.set_http_cache_type","title":"<code>set_http_cache_type(typ: HttpCacheTypeStr | mod.PersistentCookiesPolicy)</code>","text":"<p>Set the http cache type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>HttpCacheTypeStr | mod.PersistentCookiesPolicy</code> <p>http cache type</p> required Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def set_http_cache_type(self, typ: HttpCacheTypeStr | mod.PersistentCookiesPolicy):\n\"\"\"Set the http cache type.\n    Args:\n        typ: http cache type\n    \"\"\"\nself.setHttpCacheType(HTTP_CACHE_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.set_persistent_cookie_policy","title":"<code>set_persistent_cookie_policy(policy: PersistentCookiePolicyStr | mod.PersistentCookiesPolicy)</code>","text":"<p>Set the persistent cookie policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>PersistentCookiePolicyStr | mod.PersistentCookiesPolicy</code> <p>persistent cookie policy</p> required Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def set_persistent_cookie_policy(\nself, policy: PersistentCookiePolicyStr | mod.PersistentCookiesPolicy\n):\n\"\"\"Set the persistent cookie policy.\n    Args:\n        policy: persistent cookie policy\n    \"\"\"\nself.setPersistentCookiesPolicy(PERSISTENT_COOKIE_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineScript","title":"<code>WebEngineScript</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineScript</code></p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescript.WebEngineScript.get_injection_point","title":"<code>get_injection_point() -&gt; InjectionPointStr</code>","text":"<p>Return injection point.</p> <p>Returns:</p> Type Description <code>InjectionPointStr</code> <p>injection point</p> Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>def get_injection_point(self) -&gt; InjectionPointStr:\n\"\"\"Return injection point.\n    Returns:\n        injection point\n    \"\"\"\nreturn INJECTION_POINT.inverse[self.injectionPoint()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescript.WebEngineScript.set_injection_point","title":"<code>set_injection_point(point: InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint)</code>","text":"<p>Set injection point.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint</code> <p>injection point to use</p> required Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>def set_injection_point(\nself, point: InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint\n):\n\"\"\"Set injection point.\n    Args:\n        point: injection point to use\n    \"\"\"\nself.setInjectionPoint(INJECTION_POINT.get_enum_value(point))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineSettings","title":"<code>WebEngineSettings(item: QtWebEngineCore.QWebEngineSettings)</code>","text":"<p>         Bases: <code>MutableMapping</code></p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __init__(self, item: QtWebEngineCore.QWebEngineSettings):\nself.item = item\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_font_family","title":"<code>get_font_family(family: FontFamilyStr) -&gt; str</code>","text":"<p>Return the actual font family for the specified generic font family.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>FontFamilyStr</code> <p>generic font family</p> required <p>Returns:</p> Type Description <code>str</code> <p>Font family</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_font_family(self, family: FontFamilyStr) -&gt; str:\n\"\"\"Return the actual font family for the specified generic font family.\n    Args:\n        family: generic font family\n    Returns:\n        Font family\n    \"\"\"\nreturn self.item.fontFamily(FONT_FAMILY[family])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_font_size","title":"<code>get_font_size(typ: FontSizeStr) -&gt; int</code>","text":"<p>Return the default font size for type in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>FontSizeStr</code> <p>font size type</p> required <p>Returns:</p> Type Description <code>int</code> <p>Font size</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_font_size(self, typ: FontSizeStr) -&gt; int:\n\"\"\"Return the default font size for type in pixels.\n    Args:\n        typ: font size type\n    Returns:\n        Font size\n    \"\"\"\nreturn self.item.fontSize(FONT_SIZE[typ])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_unknown_url_scheme_policy","title":"<code>get_unknown_url_scheme_policy() -&gt; UnknownUrlSchemePolicyStr</code>","text":"<p>Return current unknown url scheme policy.</p> <p>Returns:</p> Type Description <code>UnknownUrlSchemePolicyStr</code> <p>Unknown url scheme policy</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_unknown_url_scheme_policy(self) -&gt; UnknownUrlSchemePolicyStr:\n\"\"\"Return current unknown url scheme policy.\n    Returns:\n        Unknown url scheme policy\n    \"\"\"\nreturn UNKNOWN_URL_SCHEME_POLICY.inverse[self.item.unknownUrlSchemePolicy()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_font_family","title":"<code>set_font_family(which: FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily, family: str)</code>","text":"<p>Set the actual font family to family for the specified generic family, which.</p> <p>Parameters:</p> Name Type Description Default <code>which</code> <code>FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily</code> <p>family to set</p> required <code>family</code> <code>str</code> <p>generic family</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_font_family(\nself,\nwhich: FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily,\nfamily: str,\n):\n\"\"\"Set the actual font family to family for the specified generic family, which.\n    Args:\n        which: family to set\n        family: generic family\n    \"\"\"\nself.item.setFontFamily(FONT_FAMILY.get_enum_value(which), family)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_font_size","title":"<code>set_font_size(typ: FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize, size: int)</code>","text":"<p>Set the font size for type to size in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize</code> <p>font size type</p> required <code>size</code> <code>int</code> <p>size in pixels</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_font_size(\nself, typ: FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize, size: int\n):\n\"\"\"Set the font size for type to size in pixels.\n    Args:\n        typ: font size type\n        size: size in pixels\n    \"\"\"\nself.item.setFontSize(FONT_SIZE.get_enum_value(typ), size)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_unknown_url_scheme_policy","title":"<code>set_unknown_url_scheme_policy(policy: UnknownUrlSchemePolicyStr | pol)</code>","text":"<p>Set the unknown url scheme policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>UnknownUrlSchemePolicyStr | pol</code> <p>unknown url scheme policy</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_unknown_url_scheme_policy(self, policy: UnknownUrlSchemePolicyStr | pol):\n\"\"\"Set the unknown url scheme policy.\n    Args:\n        policy: unknown url scheme policy\n    \"\"\"\nself.item.setUnknownUrlSchemePolicy(\nUNKNOWN_URL_SCHEME_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineUrlScheme","title":"<code>WebEngineUrlScheme</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineUrlScheme</code></p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.get_syntax","title":"<code>get_syntax() -&gt; SyntaxStr</code>","text":"<p>Return syntax.</p> <p>Returns:</p> Type Description <code>SyntaxStr</code> <p>syntax</p> Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def get_syntax(self) -&gt; SyntaxStr:\n\"\"\"Return syntax.\n    Returns:\n        syntax\n    \"\"\"\nreturn SYNTAX.inverse[self.syntax()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.set_syntax","title":"<code>set_syntax(syntax: SyntaxStr | QWebEngineUrlScheme.Syntax)</code>","text":"<p>Set syntax.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>SyntaxStr | QWebEngineUrlScheme.Syntax</code> <p>syntax to use</p> required Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def set_syntax(self, syntax: SyntaxStr | QWebEngineUrlScheme.Syntax):\n\"\"\"Set syntax.\n    Args:\n        syntax: syntax to use\n    \"\"\"\nself.setSyntax(SYNTAX.get_enum_value(syntax))\n</code></pre>"},{"location":"api/webenginewidgets.html","title":"webenginewidgets module","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineWidgets-based classes</p>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.WebEngineView","title":"<code>WebEngineView(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWebEngineWidgets.QWebEngineView</code></p> Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setPage(webenginecore.WebEnginePage(self))\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.find_text","title":"<code>find_text(string: str, backward: bool = False, case_sensitive: bool = False, callback: Callable[[bool], None] | None = None)</code>","text":"<p>Find text in the current page.</p> <p>Finds the specified string, subString, in the page, using the given options. The findTextFinished() signal is emitted when a string search is completed.</p> <p>To clear the search highlight, just pass an empty string.</p> <p>The resultCallback must take a boolean parameter. It will be called with a value of true if the subString was found; otherwise the callback value will be false.</p> <p>Warning: It is guaranteed that the callback is always called, but it might be done during page destruction. When WebEnginePage is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding QWebEnginePage or QWebEngineView instance inside it.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string to search for</p> required <code>backward</code> <code>bool</code> <p>search backwards</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>case-sensitive search</p> <code>False</code> <code>callback</code> <code>Callable[[bool], None] | None</code> <p>result callback</p> <code>None</code> Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n    Finds the specified string, subString, in the page, using the given options.\n    The findTextFinished() signal is emitted when a string search is completed.\n    To clear the search highlight, just pass an empty string.\n    The resultCallback must take a boolean parameter.\n    It will be called with a value of true if the subString was found;\n    otherwise the callback value will be false.\n    Warning: It is guaranteed that the callback is always called,\n    but it might be done during page destruction. When WebEnginePage is deleted,\n    the callback is triggered with an invalid value and it is not safe to use\n    the corresponding QWebEnginePage or QWebEngineView instance inside it.\n    Args:\n        string: string to search for\n        backward: search backwards\n        case_sensitive: case-sensitive search\n        callback: result callback\n    \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.WebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= webenginecore.WebEnginePage.FindFlag.FindCaseSensitively\nif backward:\nflag |= webenginecore.WebEnginePage.FindFlag.FindBackward\nself.findText(string, flag, callback)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.load_url","title":"<code>load_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Load the URL.</p> <p>Loads the specified url and displays it.</p> <p>Note: The view remains the same until enough data has arrived to display the new URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to load</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n    Loads the specified url and displays it.\n    Note: The view remains the same until enough data has arrived\n    to display the new URL.\n    Args:\n        url: URL to load\n    \"\"\"\nurl = datatypes.to_url(url)\nself.load(url)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_url","title":"<code>set_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Set the url of the WebEngineView.</p> <p>Clears the view and loads the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to set</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Set the url of the WebEngineView.\n    Clears the view and loads the URL.\n    Args:\n        url: URL to set\n    \"\"\"\nurl = datatypes.to_url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_zoom","title":"<code>set_zoom(zoom: float)</code>","text":"<p>Set the zoom factor for the view.</p> <p>Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom factor</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the view.\n    Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n    Args:\n        zoom: Zoom factor\n    \"\"\"\nself.setZoomFactor(zoom)\n</code></pre>"},{"location":"api/widgets.html","title":"widgets module","text":""},{"location":"api/widgets.html#prettyqt.widgets.AbstractButtonMixin","title":"<code>AbstractButtonMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the button.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_icon_size","title":"<code>set_icon_size(size: datatypes.SizeType)</code>","text":"<p>Set size of the icon.</p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icon.\"\"\"\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_style_icon","title":"<code>set_style_icon(icon: widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap, size: datatypes.SizeType = 15)</code>","text":"<p>Set theme icon for the button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap</code> <p>icon to use</p> required <code>size</code> <code>datatypes.SizeType</code> <p>icon size</p> <code>15</code> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_style_icon(\nself,\nicon: widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap,\nsize: datatypes.SizeType = 15,\n):\n\"\"\"Set theme icon for the button.\n    Args:\n        icon: icon to use\n        size: icon size\n    \"\"\"\nqicon = self.style().standardIcon(\nwidgets.style.STANDARD_PIXMAP.get_enum_value(icon), None, self\n)\nself.set_icon(qicon)\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractItemViewMixin","title":"<code>AbstractItemViewMixin(*args, horizontal_scroll_mode = 'pixel', vertical_scroll_mode = 'pixel', **kwargs)</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def __init__(\nself,\n*args,\nhorizontal_scroll_mode=\"pixel\",\nvertical_scroll_mode=\"pixel\",\n**kwargs,\n):\nsuper().__init__(\n*args,\nhorizontal_scroll_mode=horizontal_scroll_mode,\nvertical_scroll_mode=vertical_scroll_mode,\n**kwargs,\n)\nfrom prettyqt.utils import proxifier\nself.proxifier = proxifier.Proxifier(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_drag_drop_mode","title":"<code>get_drag_drop_mode() -&gt; DragDropModeStr</code>","text":"<p>Return current drag-drop mode.</p> <p>Returns:</p> Type Description <code>DragDropModeStr</code> <p>drag-drop mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_drag_drop_mode(self) -&gt; DragDropModeStr:\n\"\"\"Return current drag-drop mode.\n    Returns:\n        drag-drop mode\n    \"\"\"\nreturn DRAG_DROP_MODE.inverse[self.dragDropMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_drop_indicator_position","title":"<code>get_drop_indicator_position() -&gt; DropIndicatorPositionStr</code>","text":"<p>Return position of the drop indicator in relation to the closest item.</p> <p>Returns:</p> Type Description <code>DropIndicatorPositionStr</code> <p>drop indicator position</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_drop_indicator_position(self) -&gt; DropIndicatorPositionStr:\n\"\"\"Return position of the drop indicator in relation to the closest item.\n    Returns:\n        drop indicator position\n    \"\"\"\nreturn DROP_INDICATOR_POSITION.inverse[self.dropIndicatorPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_horizontal_scroll_mode","title":"<code>get_horizontal_scroll_mode() -&gt; ScrollModeStr</code>","text":"<p>Return current horizontal scroll mode.</p> <p>Returns:</p> Type Description <code>ScrollModeStr</code> <p>horizontal scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_horizontal_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current horizontal scroll mode.\n    Returns:\n        horizontal scroll mode\n    \"\"\"\nreturn SCROLL_MODE.inverse[self.horizontalScrollMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_model","title":"<code>get_model(skip_proxies: bool = False) -&gt; core.QAbstractItemModel</code>","text":"<p>Get current model of the ItemView.</p> <p>Parameters:</p> Name Type Description Default <code>skip_proxies</code> <code>bool</code> <p>Whether to get current model or the non-proxy sourceModel.</p> <code>False</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_model(self, skip_proxies: bool = False) -&gt; core.QAbstractItemModel:\n\"\"\"Get current model of the ItemView.\n    Arguments:\n        skip_proxies: Whether to get current model or the non-proxy sourceModel.\n    \"\"\"\nmodel = self.model()\nif skip_proxies:\nwhile isinstance(model, core.QAbstractProxyModel):\nmodel = model.sourceModel()\nreturn model\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_models","title":"<code>get_models(proxies_only: bool = False) -&gt; listdelegators.BaseListDelegator[core.QAbstractProxyModel]</code>","text":"<p>Get a list of all (proxy) models connected to this view.</p> <p>Parameters:</p> Name Type Description Default <code>proxies_only</code> <code>bool</code> <p>whether the non-proxy sourceModel should be included.</p> <code>False</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_models(\nself, proxies_only: bool = False\n) -&gt; listdelegators.BaseListDelegator[core.QAbstractProxyModel]:\n\"\"\"Get a list of all (proxy) models connected to this view.\n    Arguments:\n        proxies_only: whether the non-proxy sourceModel should be included.\n    \"\"\"\nmodel = self.model()\nmodels = []\nwhile isinstance(model, core.QAbstractProxyModel):\nmodels.append(model)\nmodel = model.sourceModel()\nif (not proxies_only) and model is not None:\nmodels.append(model)\nreturn listdelegators.BaseListDelegator(models)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_selection_behavior","title":"<code>get_selection_behavior() -&gt; SelectionBehaviourStr</code>","text":"<p>Return current selection behaviour.</p> <p>Returns:</p> Type Description <code>SelectionBehaviourStr</code> <p>selection behaviour</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_selection_behavior(self) -&gt; SelectionBehaviourStr:\n\"\"\"Return current selection behaviour.\n    Returns:\n        selection behaviour\n    \"\"\"\nreturn SELECTION_BEHAVIOR.inverse[self.selectionBehavior()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_selection_mode","title":"<code>get_selection_mode() -&gt; SelectionModeStr</code>","text":"<p>Return current selection mode.</p> <p>Returns:</p> Type Description <code>SelectionModeStr</code> <p>selection mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n    Returns:\n        selection mode\n    \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_size_hint_for_column","title":"<code>get_size_hint_for_column(col: int, row_limit: int = 25) -&gt; int</code>","text":"<p>Get a size hint for given column by finding widest cell.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_size_hint_for_column(self, col: int, row_limit: int = 25) -&gt; int:\n\"\"\"Get a size hint for given column by finding widest cell.\"\"\"\nto_check = min(row_limit, self.model().rowCount())\nreturn max(\nself.sizeHintForIndex(self.model().index(row, col)).width()\nfor row in range(to_check)\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>state</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_vertical_scroll_mode","title":"<code>get_vertical_scroll_mode() -&gt; ScrollModeStr</code>","text":"<p>Return current vertical scroll mode.</p> <p>Returns:</p> Type Description <code>ScrollModeStr</code> <p>vertical scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_vertical_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current vertical scroll mode.\n    Returns:\n        vertical scroll mode\n    \"\"\"\nreturn SCROLL_MODE.inverse[self.verticalScrollMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.highlight_when_inactive","title":"<code>highlight_when_inactive()</code>","text":"<p>Highlight items when widget does not have focus.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def highlight_when_inactive(self):\n\"\"\"Highlight items when widget does not have focus.\"\"\"\np = self.get_palette()\np.highlight_inactive()\nself.setPalette(p)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.jump_to_column","title":"<code>jump_to_column(col_num: int)</code>","text":"<p>Make sure column at given index is visible.</p> <p>scrolls to column at given index</p> <p>Parameters:</p> Name Type Description Default <code>col_num</code> <code>int</code> <p>column to scroll to</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n    scrolls to column at given index\n    Args:\n        col_num: column to scroll to\n    \"\"\"\nif (model := self.model()) is not None:\nidx = model.index(0, col_num)\nself.scrollTo(idx)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.num_selected","title":"<code>num_selected() -&gt; int</code>","text":"<p>Return amount of selected rows.</p> <p>Returns:</p> Type Description <code>int</code> <p>amount of selected rows</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def num_selected(self) -&gt; int:\n\"\"\"Return amount of selected rows.\n    Returns:\n        amount of selected rows\n    \"\"\"\nif (model := self.selectionModel()) is not None:\nreturn len(model.selectedRows())\nreturn 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to_bottom","title":"<code>scroll_to_bottom()</code>","text":"<p>Override to use abstractitemview-way of scrolling to bottom.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to_bottom(self):\n\"\"\"Override to use abstractitemview-way of scrolling to bottom.\"\"\"\nself.scrollToBottom()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to_top","title":"<code>scroll_to_top()</code>","text":"<p>Override to use abstractitemview-way of scrolling to top.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to_top(self):\n\"\"\"Override to use abstractitemview-way of scrolling to top.\"\"\"\nself.scrollToTop()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selectAll","title":"<code>selectAll()</code>","text":"<p>Override, we dont want to selectAll for too many items bc of performance.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selectAll(self):\n\"\"\"Override, we dont want to selectAll for too many items bc of performance.\"\"\"\nif self.model() is None:\nreturn\nif self.model().rowCount() * self.model().columnCount() &gt; 1_000_000:\nlogger.warning(\"Too many cells to select.\")\nreturn\nsuper().selectAll()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_data","title":"<code>selected_data(role = constants.USER_ROLE) -&gt; Generator[Any, None, None]</code>","text":"<p>Return generator yielding selected userData.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_data(self, role=constants.USER_ROLE) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding selected userData.\"\"\"\nreturn (x.data(role) for x in self.selected_indexes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_indexes","title":"<code>selected_indexes() -&gt; listdelegators.BaseListDelegator[core.QModelIndex]</code>","text":"<p>Return list of selected indexes in first row.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_indexes(self) -&gt; listdelegators.BaseListDelegator[core.QModelIndex]:\n\"\"\"Return list of selected indexes in first row.\"\"\"\nindexes = (x for x in self.selectedIndexes() if x.column() == 0)\nindexes = sorted(indexes, key=lambda x: x.row())\nreturn listdelegators.BaseListDelegator(indexes)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_names","title":"<code>selected_names() -&gt; Generator[Any, None, None]</code>","text":"<p>Return generator yielding item names.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_names(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding item names.\"\"\"\nreturn (x.data(constants.NAME_ROLE) for x in self.selected_indexes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_rows","title":"<code>selected_rows() -&gt; Generator[int, None, None]</code>","text":"<p>Return generator yielding row nums.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_rows(self) -&gt; Generator[int, None, None]:\n\"\"\"Return generator yielding row nums.\"\"\"\nreturn (x.row() for x in self.selected_indexes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_current_index","title":"<code>set_current_index(index: core.QModelIndex | tuple | None, operation: Literal['select', 'deselect', 'toggle'] = 'select', clear: bool = True, current: bool = False, expand: Literal['rows', 'columns'] | None = None)</code>","text":"<p>Set current index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>core.QModelIndex | tuple | None</code> <p>Index to set.</p> required <code>operation</code> <code>Literal['select', 'deselect', 'toggle']</code> <p>Whether to select, deselect or toggle the current state.</p> <code>'select'</code> <code>clear</code> <code>bool</code> <p>Clear Whether to clear previously selected indexes.</p> <code>True</code> <code>current</code> <code>bool</code> <p>Current selection will be updated.</p> <code>False</code> <code>expand</code> <code>Literal['rows', 'columns'] | None</code> <p>Whether to expand selection to whole column / row.</p> <code>None</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_current_index(\nself,\nindex: core.QModelIndex | tuple | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n\"\"\"Set current index.\n    Arguments:\n        index: Index to set.\n        operation: Whether to select, deselect or toggle the current state.\n        clear: Clear Whether to clear previously selected indexes.\n        current: Current selection will be updated.\n        expand: Whether to expand selection to whole column / row.\n    \"\"\"\nmatch index:\ncase None:\nself.selectionModel().setCurrentIndex(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\ncase tuple():\nindex = self.model().index(*index)\ncase core.QModelIndex():\npass\ncase _:\nraise ValueError(index)\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().setCurrentIndex(index, flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_delegate","title":"<code>set_delegate(delegate: widgets.QAbstractItemDelegate | DelegateStr, *, column: int | None = None, row: int | None = None, persistent: bool = False, **kwargs: bool)</code>","text":"<p>Set a delegate. Delegates can also be set by Id.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_delegate(\nself,\ndelegate: widgets.QAbstractItemDelegate | DelegateStr,\n*,\ncolumn: int | None = None,\nrow: int | None = None,\npersistent: bool = False,\n**kwargs,\n):\n\"\"\"Set a delegate. Delegates can also be set by Id.\"\"\"\nmatch delegate:\ncase widgets.QAbstractItemDelegate():\ndlg = delegate\n# case \"editor\":\n#     delegate = custom_delegates.EditorDelegate(parent=self, **kwargs)\n# case \"widget\":\n#     delegate = custom_delegates.WidgetDelegate(parent=self, **kwargs)\n# case \"html\":\n#     delegate = custom_delegates.HtmlItemDelegate(parent=self, **kwargs)\n# case \"button\":\n#     delegate = custom_delegates.ButtonDelegate(parent=self, **kwargs)\ncase str():\nKlass = helpers.get_class_for_id(widgets.StyledItemDelegate, delegate)\ndlg = Klass(parent=self, **kwargs)\ncase _:\nraise ValueError(delegate)\nmatch column, row:\ncase int(), int():\nraise ValueError(\"Only set column or row, not both.\")\ncase int(), None:\nself.setItemDelegateForColumn(column, dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nindex = model.index(i, column)\nself.openPersistentEditor(index)\ncase None, int():\nself.setItemDelegateForRow(row, dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.columnCount()):\nself.openPersistentEditor(model.index(row, i))\ncase None, None:\nself.setItemDelegate(dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nfor j in range(model.columnCount()):\nself.openPersistentEditor(model.index(i, j))\nreturn dlg\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_drag_drop_mode","title":"<code>set_drag_drop_mode(mode: DragDropModeStr | widgets.QAbstractItemView.DragDropMode)</code>","text":"<p>Set drag-drop mode for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>DragDropModeStr | widgets.QAbstractItemView.DragDropMode</code> <p>drag-drop mode to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_drag_drop_mode(\nself, mode: DragDropModeStr | widgets.QAbstractItemView.DragDropMode\n):\n\"\"\"Set drag-drop mode for given item view.\n    Args:\n        mode: drag-drop mode to use\n    \"\"\"\nself.setDragDropMode(DRAG_DROP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_horizontal_scroll_mode","title":"<code>set_horizontal_scroll_mode(mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode)</code>","text":"<p>Set the horizontal scroll mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr | widgets.QAbstractItemView.ScrollMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_horizontal_scroll_mode(\nself, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode\n):\n\"\"\"Set the horizontal scroll mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setHorizontalScrollMode(SCROLL_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_model","title":"<code>set_model(model: core.QAbstractItemModel | None)</code>","text":"<p>Set the model of this View.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_model(self, model: core.QAbstractItemModel | None):\n\"\"\"Set the model of this View.\"\"\"\n# Delete old selection model explicitely, seems to help with memory usage.\nold_model = self.model()\nold_sel_model = self.selectionModel()\nif old_model is not None or model is not None:\nself.setModel(model)\nif model is not None:\n# always set a parent. PySide6 needs one for proxying.\nmodel.setParent(self)\nself.setSelectionModel(core.ItemSelectionModel(model))\nself.model_changed.emit(model)\n# if old_model:\n#     old_model.deleteLater()\n#     del old_model\nif old_sel_model:\nold_sel_model.deleteLater()\ndel old_sel_model\nreturn model\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_model_for","title":"<code>set_model_for(data: Any)</code>","text":"<p>Set model for given data type.</p> <p>Pass any data structure and an appropriate model will be chosen automatically.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>data to choose model for.</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_model_for(self, data: Any):\n\"\"\"Set model for given data type.\n    Pass any data structure and an appropriate model will be chosen automatically.\n    Args:\n        data: data to choose model for.\n    \"\"\"\n# we import to collect the models\nfrom prettyqt import custom_models  # noqa: F401\n# TODO: probably better to check models from external modules later\n# so we dont have to import everything even if not needed.\nif importlib.util.find_spec(\"pandas\") is not None:\nfrom prettyqt.qtpandas import pandasmodels  # noqa: F401\nfor Klass in helpers.get_subclasses(core.QAbstractItemModel):\nif (\n\"supports\" in Klass.__dict__\nand callable(Klass.supports)\nand Klass.supports(data)\nand Klass.__name__ != \"PythonObjectTreeModel\"\n):\nlogger.debug(f\"found model for data structure {data!r}\")\nbreak\nelse:\nraise TypeError(\"No suiting model found.\")\nmodel = Klass(data, parent=self)\nself.set_model(model)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_scroll_mode","title":"<code>set_scroll_mode(mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode)</code>","text":"<p>Set the scroll mode for both directions.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr | widgets.QAbstractItemView.ScrollMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_scroll_mode(self, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode):\n\"\"\"Set the scroll mode for both directions.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setHorizontalScrollMode(SCROLL_MODE.get_enum_value(mode))\nself.setVerticalScrollMode(SCROLL_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_selection_behavior","title":"<code>set_selection_behavior(behaviour: SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior)</code>","text":"<p>Set selection behaviour for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>behaviour</code> <code>SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior</code> <p>selection behaviour to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_selection_behavior(\nself,\nbehaviour: SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior,\n):\n\"\"\"Set selection behaviour for given item view.\n    Args:\n        behaviour: selection behaviour to use\n    \"\"\"\nself.setSelectionBehavior(SELECTION_BEHAVIOR.get_enum_value(behaviour))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_selection_mode","title":"<code>set_selection_mode(mode: SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None)</code>","text":"<p>Set selection mode for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None</code> <p>selection mode to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_selection_mode(\nself, mode: SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None\n):\n\"\"\"Set selection mode for given item view.\n    Args:\n        mode: selection mode to use\n    \"\"\"\nif mode is None:\nmode = \"none\"\nself.setSelectionMode(SELECTION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_state","title":"<code>set_state(state: StateStr | widgets.QAbstractItemView.State)</code>","text":"<p>Set state for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>StateStr | widgets.QAbstractItemView.State</code> <p>state to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_state(self, state: StateStr | widgets.QAbstractItemView.State):\n\"\"\"Set state for given item view.\n    Args:\n        state: state to use\n    \"\"\"\nself.setState(STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_vertical_scroll_mode","title":"<code>set_vertical_scroll_mode(mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode)</code>","text":"<p>Set the vertical scroll mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr | widgets.QAbstractItemView.ScrollMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_vertical_scroll_mode(\nself, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode\n):\n\"\"\"Set the vertical scroll mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setVerticalScrollMode(SCROLL_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.toggle_select_all","title":"<code>toggle_select_all()</code>","text":"<p>Select all items from list (deselect when all selected).</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def toggle_select_all(self):\n\"\"\"Select all items from list (deselect when all selected).\"\"\"\nif self.selectionModel() is None:\nreturn\nif self.selectionModel().hasSelection():\nself.clearSelection()\nelse:\nself.selectAll()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractScrollAreaMixin","title":"<code>AbstractScrollAreaMixin(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setHorizontalScrollBar(widgets.ScrollBar(parent=self))\nself.setVerticalScrollBar(widgets.ScrollBar(parent=self))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.get_size_adjust_policy","title":"<code>get_size_adjust_policy() -&gt; SizeAdjustPolicyStr</code>","text":"<p>Return size adjust policy.</p> <p>Returns:</p> Type Description <code>SizeAdjustPolicyStr</code> <p>size adjust policy</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n    Returns:\n        size adjust policy\n    \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_to_bottom","title":"<code>scroll_to_bottom()</code>","text":"<p>Scroll to the bottom of the scroll area.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_to_bottom(self):\n\"\"\"Scroll to the bottom of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_max()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_to_top","title":"<code>scroll_to_top()</code>","text":"<p>Scroll to the top of the scroll area.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_to_top(self):\n\"\"\"Scroll to the top of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_min()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_horizontal_scrollbar_policy","title":"<code>set_horizontal_scrollbar_policy(mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy)</code>","text":"<p>Set the horizontal scrollbar visibility.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr | constants.ScrollBarPolicy</code> <p>visibilty to set</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_horizontal_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the horizontal scrollbar visibility.\n    Args:\n        mode: visibilty to set\n    \"\"\"\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_horizontal_scrollbar_width","title":"<code>set_horizontal_scrollbar_width(width: int)</code>","text":"<p>Set the horizontal scrollbar width.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_horizontal_scrollbar_width(self, width: int):\n\"\"\"Set the horizontal scrollbar width.\n    Args:\n        width: width in pixels\n    \"\"\"\nwith self.h_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_policy","title":"<code>set_scrollbar_policy(mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy)</code>","text":"<p>Set the policy for both scrollbars.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr | constants.ScrollBarPolicy</code> <p>visibilty to set</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the policy for both scrollbars.\n    Args:\n        mode: visibilty to set\n    \"\"\"\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_width","title":"<code>set_scrollbar_width(width: int)</code>","text":"<p>Set the width for both scrollbars.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_width(self, width: int):\n\"\"\"Set the width for both scrollbars.\n    Args:\n        width: width in pixels\n    \"\"\"\nself.set_horizontal_scrollbar_width(width)\nself.set_vertical_scrollbar_width(width)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_size_adjust_policy","title":"<code>set_size_adjust_policy(policy: SizeAdjustPolicyStr | area.SizeAdjustPolicy)</code>","text":"<p>Set size adjust policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizeAdjustPolicyStr | area.SizeAdjustPolicy</code> <p>size adjust policy to use</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_size_adjust_policy(self, policy: SizeAdjustPolicyStr | area.SizeAdjustPolicy):\n\"\"\"Set size adjust policy.\n    Args:\n        policy: size adjust policy to use\n    \"\"\"\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_vertical_scrollbar_policy","title":"<code>set_vertical_scrollbar_policy(mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy)</code>","text":"<p>Set the vertical scrollbar visibility.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr | constants.ScrollBarPolicy</code> <p>visibilty to set</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_vertical_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the vertical scrollbar visibility.\n    Args:\n        mode: visibilty to set\n    \"\"\"\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_vertical_scrollbar_width","title":"<code>set_vertical_scrollbar_width(width: int)</code>","text":"<p>Set the vertical scrollbar width.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_vertical_scrollbar_width(self, width: int):\n\"\"\"Set the vertical scrollbar width.\n    Args:\n        width: width in pixels\n    \"\"\"\nwith self.v_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractSliderMixin","title":"<code>AbstractSliderMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_repeat_action","title":"<code>get_repeat_action() -&gt; SliderActionStr</code>","text":"<p>Get current repeat action.</p> <p>Returns:</p> Type Description <code>SliderActionStr</code> <p>current repeat action</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_repeat_action(self) -&gt; SliderActionStr:\n\"\"\"Get current repeat action.\n    Returns:\n        current repeat action\n    \"\"\"\nreturn SLIDER_ACTION.inverse[self.repeatAction()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.is_horizontal","title":"<code>is_horizontal() -&gt; bool</code>","text":"<p>Check if silder is horizontal.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if horizontal, else False</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n    Returns:\n        True if horizontal, else False\n    \"\"\"\nreturn self.orientation() == constants.HORIZONTAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.is_vertical","title":"<code>is_vertical() -&gt; bool</code>","text":"<p>Check if silder is vertical.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if vertical, else False</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n    Returns:\n        True if vertical, else False\n    \"\"\"\nreturn self.orientation() == constants.VERTICAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.scroll_to_max","title":"<code>scroll_to_max()</code>","text":"<p>Scroll to the maximum value of the slider.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def scroll_to_max(self):\n\"\"\"Scroll to the maximum value of the slider.\"\"\"\nself.setValue(self.maximum())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.scroll_to_min","title":"<code>scroll_to_min()</code>","text":"<p>Scroll to the minimum value of the slider.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def scroll_to_min(self):\n\"\"\"Scroll to the minimum value of the slider.\"\"\"\nself.setValue(self.minimum())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_auto_scroll_to_end","title":"<code>set_auto_scroll_to_end(scroll: bool = True)</code>","text":"<p>Set to always scroll to the end when range changes.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_auto_scroll_to_end(self, scroll: bool = True):\n\"\"\"Set to always scroll to the end when range changes.\"\"\"\nif scroll:\nself.rangeChanged.connect(self.on_scrollbar_range_changed)\nelse:\nself.rangeChanged.disconnect(self.on_scrollbar_range_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_horizontal","title":"<code>set_horizontal()</code>","text":"<p>Set slider orientation to horizontal.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_horizontal(self):\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.setOrientation(constants.HORIZONTAL)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the slider.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the slider</p> required Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the slider.\n    Args:\n        orientation: orientation for the slider\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_repeat_action","title":"<code>set_repeat_action(action: SliderActionStr | widgets.QAbstractSlider.SliderAction, threshold: int = 500, repeat_time: int = 50)</code>","text":"<p>Set the repeat action.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>SliderActionStr | widgets.QAbstractSlider.SliderAction</code> <p>repeat action</p> required <code>threshold</code> <code>int</code> <p>initial delay in ms</p> <code>500</code> <code>repeat_time</code> <code>int</code> <p>repeat time in ms</p> <code>50</code> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_repeat_action(\nself,\naction: SliderActionStr | widgets.QAbstractSlider.SliderAction,\nthreshold: int = 500,\nrepeat_time: int = 50,\n):\n\"\"\"Set the repeat action.\n    Args:\n        action: repeat action\n        threshold: initial delay in ms\n        repeat_time: repeat time in ms\n    \"\"\"\nself.setRepeatAction(SLIDER_ACTION.get_enum_value(action), threshold, repeat_time)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_vertical","title":"<code>set_vertical()</code>","text":"<p>Set slider orientation to vertical.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_vertical(self):\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.setOrientation(constants.VERTICAL)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.trigger_action","title":"<code>trigger_action(action: SliderActionStr | widgets.QAbstractSlider.SliderAction)</code>","text":"<p>Trigger slider action.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def trigger_action(\nself, action: SliderActionStr | widgets.QAbstractSlider.SliderAction\n):\n\"\"\"Trigger slider action.\"\"\"\nself.triggerAction(SLIDER_ACTION.get_enum_value(action))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractSpinBoxMixin","title":"<code>AbstractSpinBoxMixin(*args, show_group_separator: bool = True, **kwargs: bool)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def __init__(self, *args, show_group_separator: bool = True, **kwargs):\nsuper().__init__(*args, show_group_separator=show_group_separator, **kwargs)\nself.setLineEdit(widgets.LineEdit(parent=self))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_button_symbols","title":"<code>get_button_symbols() -&gt; SymbolStr</code>","text":"<p>Return button symbol type.</p> <p>Returns:</p> Type Description <code>SymbolStr</code> <p>button symbol type</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_button_symbols(self) -&gt; SymbolStr:\n\"\"\"Return button symbol type.\n    Returns:\n        button symbol type\n    \"\"\"\nreturn SYMBOLS.inverse[self.buttonSymbols()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_correction_mode","title":"<code>get_correction_mode() -&gt; CorrectionModeStr</code>","text":"<p>Return correction mode.</p> <p>Returns:</p> Type Description <code>CorrectionModeStr</code> <p>correction mode</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_correction_mode(self) -&gt; CorrectionModeStr:\n\"\"\"Return correction mode.\n    Returns:\n        correction mode\n    \"\"\"\nreturn CORRECTION_MODES.inverse[self.correctionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_step_type","title":"<code>get_step_type() -&gt; StepTypeStr</code>","text":"<p>Return step type.</p> <p>Returns:</p> Type Description <code>StepTypeStr</code> <p>step type</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_step_type(self) -&gt; StepTypeStr:\n\"\"\"Return step type.\n    Returns:\n        step type\n    \"\"\"\nreturn STEP_TYPES.inverse[self.stepType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_button_symbols","title":"<code>set_button_symbols(mode: SymbolStr | QtWidgets.QSpinBox.ButtonSymbols)</code>","text":"<p>Set button symbol type.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SymbolStr | QtWidgets.QSpinBox.ButtonSymbols</code> <p>button symbol type to use</p> required Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_button_symbols(self, mode: SymbolStr | QtWidgets.QSpinBox.ButtonSymbols):\n\"\"\"Set button symbol type.\n    Args:\n        mode: button symbol type to use\n    \"\"\"\nself.setButtonSymbols(SYMBOLS.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_correction_mode","title":"<code>set_correction_mode(mode: CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode)</code>","text":"<p>Set correction mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode</code> <p>correction mode to use</p> required Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_correction_mode(\nself, mode: CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode\n):\n\"\"\"Set correction mode.\n    Args:\n        mode: correction mode to use\n    \"\"\"\nself.setCorrectionMode(CORRECTION_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_step_type","title":"<code>set_step_type(mode: StepTypeStr | QtWidgets.QSpinBox.StepType)</code>","text":"<p>Set step type.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>StepTypeStr | QtWidgets.QSpinBox.StepType</code> <p>step type to use</p> required Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_step_type(self, mode: StepTypeStr | QtWidgets.QSpinBox.StepType):\n\"\"\"Set step type.\n    Args:\n        mode: step type to use\n    \"\"\"\nself.setStepType(STEP_TYPES.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.CalendarWidget","title":"<code>CalendarWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QCalendarWidget</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.get_selection_mode","title":"<code>get_selection_mode() -&gt; SelectionModeStr</code>","text":"<p>Return current selection mode.</p> <p>Returns:</p> Type Description <code>SelectionModeStr</code> <p>selection mode</p> Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n    Returns:\n        selection mode\n    \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.set_selection_mode","title":"<code>set_selection_mode(mode: SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None)</code>","text":"<p>Set selection mode for given calendar widget.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None</code> <p>selection mode to use</p> required Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def set_selection_mode(\nself, mode: SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None\n):\n\"\"\"Set selection mode for given calendar widget.\n    Args:\n        mode: selection mode to use\n    \"\"\"\nif mode is None:\nmode = \"none\"\nself.setSelectionMode(SELECTION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.CheckBox","title":"<code>CheckBox(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.AbstractButtonMixin</code>, <code>widgets.QCheckBox</code></p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.stateChanged.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.checkbox.CheckBox.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.CheckStateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.checkbox.CheckBox.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ComboBoxMixin","title":"<code>ComboBoxMixin(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.currentIndexChanged.connect(self._index_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_insert_policy","title":"<code>get_insert_policy() -&gt; InsertPolicyStr</code>","text":"<p>Return insert policy.</p> <p>Returns:</p> Type Description <code>InsertPolicyStr</code> <p>insert policy</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_insert_policy(self) -&gt; InsertPolicyStr:\n\"\"\"Return insert policy.\n    Returns:\n        insert policy\n    \"\"\"\nreturn INSERT_POLICY.inverse[self.insertPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_size_adjust_policy","title":"<code>get_size_adjust_policy() -&gt; SizeAdjustPolicyStr</code>","text":"<p>Return size adjust policy.</p> <p>Returns:</p> Type Description <code>SizeAdjustPolicyStr</code> <p>size adjust policy</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n    Returns:\n        size adjust policy\n    \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.hide_completer","title":"<code>hide_completer()</code>","text":"<p>Hides the completion widget.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def hide_completer(self):\n\"\"\"Hides the completion widget.\"\"\"\ncompleter = widgets.Completer(self)\nself.setCompleter(completer)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_icon_size","title":"<code>set_icon_size(size: datatypes.SizeType)</code>","text":"<p>Set size of the icons.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_insert_policy","title":"<code>set_insert_policy(policy: InsertPolicyStr | mod.InsertPolicy)</code>","text":"<p>Set insert policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>InsertPolicyStr | mod.InsertPolicy</code> <p>insert policy to use</p> required Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_insert_policy(self, policy: InsertPolicyStr | mod.InsertPolicy):\n\"\"\"Set insert policy.\n    Args:\n        policy: insert policy to use\n    \"\"\"\nself.setInsertPolicy(INSERT_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_size_adjust_policy","title":"<code>set_size_adjust_policy(policy: SizeAdjustPolicyStr | mod.SizeAdjustPolicy)</code>","text":"<p>Set size adjust policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizeAdjustPolicyStr | mod.SizeAdjustPolicy</code> <p>size adjust policy to use</p> required Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_size_adjust_policy(self, policy: SizeAdjustPolicyStr | mod.SizeAdjustPolicy):\n\"\"\"Set size adjust policy.\n    Args:\n        policy: size adjust policy to use\n    \"\"\"\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Completer","title":"<code>Completer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>widgets.QCompleter</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_completion_mode","title":"<code>get_completion_mode() -&gt; CompletionModeStr</code>","text":"<p>Return current completion mode.</p> <p>Returns:</p> Type Description <code>CompletionModeStr</code> <p>completion mode</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_completion_mode(self) -&gt; CompletionModeStr:\n\"\"\"Return current completion mode.\n    Returns:\n        completion mode\n    \"\"\"\nreturn COMPLETION_MODE.inverse[self.completionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_filter_mode","title":"<code>get_filter_mode() -&gt; constants.FilterModeStr</code>","text":"<p>Return current filter mode.</p> <p>Returns:</p> Type Description <code>constants.FilterModeStr</code> <p>filter mode</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_filter_mode(self) -&gt; constants.FilterModeStr:\n\"\"\"Return current filter mode.\n    Returns:\n        filter mode\n    \"\"\"\nreturn constants.FILTER_MODES.inverse[self.filterMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_sort_mode","title":"<code>get_sort_mode() -&gt; SortModeStr</code>","text":"<p>Return current sort mode.</p> <p>Returns:</p> Type Description <code>SortModeStr</code> <p>sort mode</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_sort_mode(self) -&gt; SortModeStr:\n\"\"\"Return current sort mode.\n    Returns:\n        sort mode\n    \"\"\"\nreturn SORT_MODE.inverse[self.modelSorting()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.is_case_sensitive","title":"<code>is_case_sensitive() -&gt; bool</code>","text":"<p>Return case sensitivity.</p> <p>Returns:</p> Type Description <code>bool</code> <p>case sensitivity</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n    Returns:\n        case sensitivity\n    \"\"\"\nreturn self.caseSensitivity() == constants.CaseSensitivity.CaseSensitive\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_case_sensitive","title":"<code>set_case_sensitive(state: bool)</code>","text":"<p>Set case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>case sensitive</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n    Args:\n        state: case sensitive\n    \"\"\"\nsensitivity = (\nconstants.CaseSensitivity.CaseSensitive\nif state\nelse constants.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_completion_mode","title":"<code>set_completion_mode(mode: CompletionModeStr | widgets.QCompleter.CompletionMode)</code>","text":"<p>Set completion mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CompletionModeStr | widgets.QCompleter.CompletionMode</code> <p>completion mode to use</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_completion_mode(\nself, mode: CompletionModeStr | widgets.QCompleter.CompletionMode\n):\n\"\"\"Set completion mode to use.\n    Args:\n        mode: completion mode to use\n    \"\"\"\nself.setCompletionMode(COMPLETION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_filter_mode","title":"<code>set_filter_mode(mode: constants.FilterModeStr | constants.MatchFlag)</code>","text":"<p>Set filter mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.FilterModeStr | constants.MatchFlag</code> <p>filter mode to use</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_filter_mode(self, mode: constants.FilterModeStr | constants.MatchFlag):\n\"\"\"Set filter mode to use.\n    Args:\n        mode: filter mode to use\n    \"\"\"\nself.setFilterMode(constants.FILTER_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_sort_mode","title":"<code>set_sort_mode(mode: SortModeStr | widgets.QCompleter.ModelSorting | None)</code>","text":"<p>Set sort mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SortModeStr | widgets.QCompleter.ModelSorting | None</code> <p>sort mode to use</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_sort_mode(self, mode: SortModeStr | widgets.QCompleter.ModelSorting | None):\n\"\"\"Set sort mode to use.\n    Args:\n        mode: sort mode to use\n    \"\"\"\nif mode is None:\nmode = \"unsorted\"\nself.setModelSorting(SORT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DataWidgetMapper","title":"<code>DataWidgetMapper</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>widgets.QDataWidgetMapper</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_submit_policy","title":"<code>get_submit_policy() -&gt; SubmitPolicyStr</code>","text":"<p>Return current submit policy.</p> <p>Returns:</p> Type Description <code>SubmitPolicyStr</code> <p>submit policy</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_submit_policy(self) -&gt; SubmitPolicyStr:\n\"\"\"Return current submit policy.\n    Returns:\n        submit policy\n    \"\"\"\nreturn SUBMIT_POLICY.inverse[self.submitPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the data widget mapper.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the data widget mapper</p> required Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the data widget mapper.\n    Args:\n        orientation: orientation for the data widget mapper\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.set_submit_policy","title":"<code>set_submit_policy(policy: SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy)</code>","text":"<p>Set the submit policy of the mapper.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy</code> <p>submit_policy for the data widget mapper</p> required Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def set_submit_policy(\nself, policy: SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy\n):\n\"\"\"Set the submit policy of the mapper.\n    Args:\n        policy: submit_policy for the data widget mapper\n    \"\"\"\nself.setSubmitPolicy(SUBMIT_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DialogButtonBox","title":"<code>DialogButtonBox(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QDialogButtonBox</code></p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.clicked.connect(self.on_click)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_button","title":"<code>add_button(button: widgets.QPushButton | str, role: RoleStr | widgets.QDialogButtonBox.ButtonRole = 'accept', callback: Callable | None = None) -&gt; widgets.QPushButton</code>","text":"<p>Add a button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>widgets.QPushButton | str</code> <p>button to add</p> required <code>role</code> <code>RoleStr | widgets.QDialogButtonBox.ButtonRole</code> <p>role of the button</p> <code>'accept'</code> <code>callback</code> <code>Callable | None</code> <p>function to call when button gets clicked</p> <code>None</code> <p>Returns:</p> Type Description <code>widgets.QPushButton</code> <p>created button</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_button(\nself,\nbutton: widgets.QPushButton | str,\nrole: RoleStr | widgets.QDialogButtonBox.ButtonRole = \"accept\",\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\n\"\"\"Add a button.\n    Args:\n        button: button to add\n        role: role of the button\n        callback: function to call when button gets clicked\n    Returns:\n        created button\n    \"\"\"\nif isinstance(button, str):\nbutton = widgets.PushButton(button)\nself.addButton(button, ROLES.get_enum_value(role))\nif callback:\nbutton.clicked.connect(callback)\nreturn button\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_default_button","title":"<code>add_default_button(button: StandardButtonStr | widgets.QDialogButtonBox.StandardButton, callback: Callable | None = None) -&gt; widgets.QPushButton</code>","text":"<p>Add a default button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>StandardButtonStr | widgets.QDialogButtonBox.StandardButton</code> <p>button to add</p> required <code>callback</code> <code>Callable | None</code> <p>function to call when button gets clicked</p> <code>None</code> <p>Returns:</p> Type Description <code>widgets.QPushButton</code> <p>created button</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_default_button(\nself,\nbutton: StandardButtonStr | widgets.QDialogButtonBox.StandardButton,\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\n\"\"\"Add a default button.\n    Args:\n        button: button to add\n        callback: function to call when button gets clicked\n    Returns:\n        created button\n    \"\"\"\nbtn = super().addButton(STANDARD_BUTTON.get_enum_value(button))\nbtn.setObjectName(button)\nif callback:\nbtn.clicked.connect(callback)\nreturn btn\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the button box.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the button box</p> required Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the button box.\n    Args:\n        orientation: orientation for the button box\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FileDialog","title":"<code>FileDialog(path: None | datatypes.PathType = None, mode: AcceptModeStr = 'open', caption: str | None = None, path_id: str | None = None, extension_filter: dict | None = None, file_mode: FileModeStr = 'existing_files', **kwargs: FileModeStr)</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>widgets.QFileDialog</code></p> <p>Simple dialog used to display some widget.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def __init__(\nself,\npath: None | datatypes.PathType = None,\nmode: AcceptModeStr = \"open\",\ncaption: str | None = None,\npath_id: str | None = None,\nextension_filter: dict | None = None,\nfile_mode: FileModeStr = \"existing_files\",\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_title(caption)\nself.path_id = path_id\nif extension_filter:\nself.set_extension_filter(extension_filter)\nif path_id is not None and path is None:\nsettings = core.Settings()\npath = settings.get(path_id, \"\")\nif path is not None:\nself.set_directory(path)\nself.set_file_mode(file_mode)\nself.set_accept_mode(mode)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_accept_mode","title":"<code>get_accept_mode() -&gt; AcceptModeStr</code>","text":"<p>Return accept mode.</p> <p>Returns:</p> Type Description <code>AcceptModeStr</code> <p>accept mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_accept_mode(self) -&gt; AcceptModeStr:\n\"\"\"Return accept mode.\n    Returns:\n        accept mode\n    \"\"\"\nreturn ACCEPT_MODE.inverse[self.acceptMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_directory","title":"<code>get_directory() -&gt; pathlib.Path</code>","text":"<p>Return current directory.</p> <p>returns current directory level as a Pathlib object</p> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Pathlib object</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_directory(self) -&gt; pathlib.Path:\n\"\"\"Return current directory.\n    returns current directory level as a Pathlib object\n    Returns:\n        Pathlib object\n    \"\"\"\nreturn pathlib.Path(self.directory().absolutePath())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_file_mode","title":"<code>get_file_mode() -&gt; FileModeStr</code>","text":"<p>Return file mode.</p> <p>Returns:</p> Type Description <code>FileModeStr</code> <p>file mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_file_mode(self) -&gt; FileModeStr:\n\"\"\"Return file mode.\n    Returns:\n        file mode\n    \"\"\"\nreturn FILE_MODE.inverse[self.fileMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_label_text","title":"<code>get_label_text(label: LabelStr | widgets.QFileDialog.DialogLabel) -&gt; str</code>","text":"<p>Return label text.</p> <p>Returns:</p> Type Description <code>str</code> <p>label text</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_label_text(self, label: LabelStr | widgets.QFileDialog.DialogLabel) -&gt; str:\n\"\"\"Return label text.\n    Returns:\n        label text\n    \"\"\"\nreturn self.labelText(LABEL.get_enum_value(label))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return view mode.</p> <p>Returns:</p> Type Description <code>ViewModeStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_accept_mode","title":"<code>set_accept_mode(mode: AcceptModeStr | widgets.QFileDialog.AcceptMode)</code>","text":"<p>Set accept mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AcceptModeStr | widgets.QFileDialog.AcceptMode</code> <p>accept mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_accept_mode(self, mode: AcceptModeStr | widgets.QFileDialog.AcceptMode):\n\"\"\"Set accept mode.\n    Args:\n        mode: accept mode to use\n    \"\"\"\nself.setAcceptMode(ACCEPT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_directory","title":"<code>set_directory(path: datatypes.PathType)</code>","text":"<p>Set start directory.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_directory(self, path: datatypes.PathType):\n\"\"\"Set start directory.\"\"\"\npath = os.fspath(path)\nself.setDirectory(path)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_extension_filter","title":"<code>set_extension_filter(extension_dict: dict[str, list[str]])</code>","text":"<p>Set filter based on given dictionary.</p> <p>dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs</p> <p>Parameters:</p> Name Type Description Default <code>extension_dict</code> <code>dict[str, list[str]]</code> <p>filter dictionary</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_extension_filter(self, extension_dict: dict[str, list[str]]):\n\"\"\"Set filter based on given dictionary.\n    dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs\n    Args:\n        extension_dict: filter dictionary\n    \"\"\"\nitems = [\nf\"{k} ({' '.join(f'*{ext}' for ext in v)})\" for k, v in extension_dict.items()\n]\nfilter_str = \";;\".join(items)\nself.setNameFilter(filter_str)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_file_mode","title":"<code>set_file_mode(mode: FileModeStr | widgets.QFileDialog.FileMode)</code>","text":"<p>Set the file mode of the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FileModeStr | widgets.QFileDialog.FileMode</code> <p>mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_file_mode(self, mode: FileModeStr | widgets.QFileDialog.FileMode):\n\"\"\"Set the file mode of the dialog.\n    Args:\n        mode: mode to use\n    \"\"\"\nself.setFileMode(FILE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_label_text","title":"<code>set_label_text(label: LabelStr | widgets.QFileDialog.DialogLabel, text: str)</code>","text":"<p>Set the label text for button label.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>LabelStr | widgets.QFileDialog.DialogLabel</code> <p>button to set text for</p> required <code>text</code> <code>str</code> <p>text to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_label_text(\nself, label: LabelStr | widgets.QFileDialog.DialogLabel, text: str\n):\n\"\"\"Set the label text for button label.\n    Args:\n        label: button to set text for\n        text: text to use\n    \"\"\"\nself.setLabelText(LABEL.get_enum_value(label), text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | widgets.QFileDialog.ViewMode)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | widgets.QFileDialog.ViewMode</code> <p>view mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr | widgets.QFileDialog.ViewMode):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode to use\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FontComboBox","title":"<code>FontComboBox</code>","text":"<p>         Bases: <code>widgets.ComboBoxMixin</code>, <code>widgets.QFontComboBox</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.get_font_filters","title":"<code>get_font_filters() -&gt; list[FontFilterStr]</code>","text":"<p>Return list of font filters.</p> <p>Returns:</p> Type Description <code>list[FontFilterStr]</code> <p>font filter list</p> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def get_font_filters(self) -&gt; list[FontFilterStr]:\n\"\"\"Return list of font filters.\n    Returns:\n        font filter list\n    \"\"\"\nreturn FONT_FILTERS.get_list(self.fontFilters())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.set_font_filters","title":"<code>set_font_filters(*filters: FontFilterStr)</code>","text":"<p>Set font filters.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>FontFilterStr</code> <p>font filters to use</p> <code>()</code> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def set_font_filters(self, *filters: FontFilterStr):\n\"\"\"Set font filters.\n    Args:\n        filters: font filters to use\n    \"\"\"\nif not filters:\nfilters = (\"all\",)\nflags = FONT_FILTERS.merge_flags(filters)\nself.setFontFilters(flags)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FormLayout","title":"<code>FormLayout(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.LayoutMixin</code>, <code>widgets.QFormLayout</code></p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_size_constraint(\"maximum\")\nself.setVerticalSpacing(8)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Needed for PySide2.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __len__(self) -&gt; int:\n\"\"\"Needed for PySide2.\"\"\"\nreturn self.rowCount()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_field_growth_policy","title":"<code>get_field_growth_policy() -&gt; FieldGrowthPolicyStr</code>","text":"<p>Return current field growth policy.</p> <p>Returns:</p> Type Description <code>FieldGrowthPolicyStr</code> <p>field growth policy</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_field_growth_policy(self) -&gt; FieldGrowthPolicyStr:\n\"\"\"Return current field growth policy.\n    Returns:\n        field growth policy\n    \"\"\"\nreturn FIELD_GROWTH_POLICY.inverse[self.fieldGrowthPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_form_alignment","title":"<code>get_form_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current form alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>form alignment</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_form_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current form alignment.\n    Returns:\n        form alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.formAlignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_label_alignment","title":"<code>get_label_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current label alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>label alignment</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_label_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current label alignment.\n    Returns:\n        label alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.labelAlignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_row_wrap_policy","title":"<code>get_row_wrap_policy() -&gt; RowWrapPolicyStr</code>","text":"<p>Return current row wrap policy.</p> <p>Returns:</p> Type Description <code>RowWrapPolicyStr</code> <p>row wrap policy</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_row_wrap_policy(self) -&gt; RowWrapPolicyStr:\n\"\"\"Return current row wrap policy.\n    Returns:\n        row wrap policy\n    \"\"\"\nreturn ROW_WRAP_POLICY.inverse[self.rowWrapPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_field_growth_policy","title":"<code>set_field_growth_policy(policy: FieldGrowthPolicyStr | mod.FieldGrowthPolicy)</code>","text":"<p>Set field growth policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>FieldGrowthPolicyStr | mod.FieldGrowthPolicy</code> <p>field growth policy to use</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_field_growth_policy(\nself, policy: FieldGrowthPolicyStr | mod.FieldGrowthPolicy\n):\n\"\"\"Set field growth policy to use.\n    Args:\n        policy: field growth policy to use\n    \"\"\"\nself.setFieldGrowthPolicy(FIELD_GROWTH_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_form_alignment","title":"<code>set_form_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the form.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the form</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_form_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the form.\n    Args:\n        alignment: alignment for the form\n    \"\"\"\nself.setFormAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_label_alignment","title":"<code>set_label_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the label.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the label</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_label_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the label.\n    Args:\n        alignment: alignment for the label\n    \"\"\"\nself.setFormAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_row_wrap_policy","title":"<code>set_row_wrap_policy(policy: RowWrapPolicyStr | mod.RowWrapPolicy)</code>","text":"<p>Set row wrap policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>RowWrapPolicyStr | mod.RowWrapPolicy</code> <p>row wrap policy to use</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_row_wrap_policy(self, policy: RowWrapPolicyStr | mod.RowWrapPolicy):\n\"\"\"Set row wrap policy to use.\n    Args:\n        policy: row wrap policy to use\n    \"\"\"\nself.setRowWrapPolicy(ROW_WRAP_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FrameMixin","title":"<code>FrameMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.get_frame_shadow","title":"<code>get_frame_shadow() -&gt; ShadowStr | None</code>","text":"<p>Return current frame shadow.</p> <p>Returns:</p> Type Description <code>ShadowStr | None</code> <p>frame style</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def get_frame_shadow(self) -&gt; ShadowStr | None:\n\"\"\"Return current frame shadow.\n    Returns:\n        frame style\n    \"\"\"\nif (frame_shadow := self.frameShadow()) == 0:\nreturn None\nreturn SHADOW.inverse[frame_shadow]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.get_frame_shape","title":"<code>get_frame_shape() -&gt; FrameShapeStr</code>","text":"<p>Return current frame shape.</p> <p>Returns:</p> Type Description <code>FrameShapeStr</code> <p>frame shape</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def get_frame_shape(self) -&gt; FrameShapeStr:\n\"\"\"Return current frame shape.\n    Returns:\n        frame shape\n    \"\"\"\nreturn FRAME_SHAPE.inverse[self.frameShape()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.set_frame_shadow","title":"<code>set_frame_shadow(style: ShadowStr | widgets.QFrame.Shadow)</code>","text":"<p>Set frame shadow.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>ShadowStr | widgets.QFrame.Shadow</code> <p>frame style to use</p> required Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_shadow(self, style: ShadowStr | widgets.QFrame.Shadow):\n\"\"\"Set frame shadow.\n    Args:\n        style: frame style to use\n    \"\"\"\nself.setFrameShadow(SHADOW.get_enum_value(style))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.set_frame_shape","title":"<code>set_frame_shape(shape: FrameShapeStr | widgets.QFrame.Shape)</code>","text":"<p>Set frame shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>FrameShapeStr | widgets.QFrame.Shape</code> <p>frame shape to use</p> required Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_shape(self, shape: FrameShapeStr | widgets.QFrame.Shape):\n\"\"\"Set frame shape.\n    Args:\n        shape: frame shape to use\n    \"\"\"\nself.setFrameShape(FRAME_SHAPE.get_enum_value(shape))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GestureMixin","title":"<code>GestureMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_gesture_cancel_policy","title":"<code>get_gesture_cancel_policy() -&gt; GestureCancelPolicyStr</code>","text":"<p>Return current gesture cancel policy.</p> <p>Returns:</p> Type Description <code>GestureCancelPolicyStr</code> <p>gesture cancel policy</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_gesture_cancel_policy(self) -&gt; GestureCancelPolicyStr:\n\"\"\"Return current gesture cancel policy.\n    Returns:\n        gesture cancel policy\n    \"\"\"\nreturn GESTURE_CANCEL_POLICY.inverse[self.gestureCancelPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_gesture_type","title":"<code>get_gesture_type() -&gt; constants.GestureTypeStr</code>","text":"<p>Return current gesture type.</p> <p>Returns:</p> Type Description <code>constants.GestureTypeStr</code> <p>gesture type</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_gesture_type(self) -&gt; constants.GestureTypeStr:\n\"\"\"Return current gesture type.\n    Returns:\n        gesture type\n    \"\"\"\nreturn constants.GESTURE_TYPE.inverse[self.gestureType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_state","title":"<code>get_state() -&gt; constants.GestureStateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>constants.GestureStateStr</code> <p>state</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_state(self) -&gt; constants.GestureStateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn constants.GESTURE_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.set_gesture_cancel_policy","title":"<code>set_gesture_cancel_policy(policy: GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy)</code>","text":"<p>Set gesture cancel policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy</code> <p>gesture cancel policy to use</p> required Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def set_gesture_cancel_policy(\nself, policy: GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy\n):\n\"\"\"Set gesture cancel policy.\n    Args:\n        policy: gesture cancel policy to use\n    \"\"\"\nself.setGestureCancelPolicy(GESTURE_CANCEL_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsItemMixin","title":"<code>GraphicsItemMixin</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Get the current mode modes as a string.</p> <p>Returns:</p> Type Description <code>CacheModeStr</code> <p>cache mode</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current mode modes as a string.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_panel_modality","title":"<code>get_panel_modality() -&gt; PanelModalityStr</code>","text":"<p>Get the current modality modes as a string.</p> <p>Returns:</p> Type Description <code>PanelModalityStr</code> <p>panel modality</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_panel_modality(self) -&gt; PanelModalityStr:\n\"\"\"Get the current modality modes as a string.\n    Returns:\n        panel modality\n    \"\"\"\nreturn PANEL_MODALITY.inverse[self.panelModality()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr | QtWidgets.QGraphicsItem.CacheMode)</code>","text":"<p>Set cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr | QtWidgets.QGraphicsItem.CacheMode</code> <p>cache mode</p> required Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr | QtWidgets.QGraphicsItem.CacheMode):\n\"\"\"Set cache mode.\n    Args:\n        mode: cache mode\n    \"\"\"\nself.setCacheMode(CACHE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_panel_modality","title":"<code>set_panel_modality(modality: PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality)</code>","text":"<p>Set panel modality.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality</code> <p>panel modality</p> required Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_panel_modality(\nself, modality: PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality\n):\n\"\"\"Set panel modality.\n    Args:\n        modality: panel modality\n    \"\"\"\nself.setPanelModality(PANEL_MODALITY.get_enum_value(modality))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLayoutItemMixin","title":"<code>GraphicsLayoutItemMixin</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin.set_size_policy","title":"<code>set_size_policy(horizontal: widgets.sizepolicy.SizePolicyStr, vertical: widgets.sizepolicy.SizePolicyStr, control_type: widgets.sizepolicy.ControlTypeStr = 'default')</code>","text":"<p>Set the size policy.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>widgets.sizepolicy.SizePolicyStr</code> <p>horizontal size policy</p> required <code>vertical</code> <code>widgets.sizepolicy.SizePolicyStr</code> <p>vertical size policy</p> required <code>control_type</code> <code>widgets.sizepolicy.ControlTypeStr</code> <p>control type associated with the widget</p> <code>'default'</code> Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>@functools.singledispatchmethod\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr,\nvertical: widgets.sizepolicy.SizePolicyStr,\ncontrol_type: widgets.sizepolicy.ControlTypeStr = \"default\",\n):\n\"\"\"Set the size policy.\n    Args:\n        horizontal: horizontal size policy\n        vertical: vertical size policy\n        control_type: control type associated with the widget\n    \"\"\"\nh_policy = widgets.sizepolicy.SIZE_POLICY[horizontal]\nv_policy = widgets.sizepolicy.SIZE_POLICY[vertical]\nc = widgets.sizepolicy.CONTROL_TYPE[control_type]\nself.setSizePolicy(h_policy, v_policy, c)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsPixmapItem","title":"<code>GraphicsPixmapItem</code>","text":"<p>         Bases: <code>widgets.GraphicsItemMixin</code>, <code>widgets.QGraphicsPixmapItem</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_shape_mode","title":"<code>get_shape_mode() -&gt; ShapeModeStr</code>","text":"<p>Return current shape mode.</p> <p>Returns:</p> Type Description <code>ShapeModeStr</code> <p>shape mode</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_shape_mode(self) -&gt; ShapeModeStr:\n\"\"\"Return current shape mode.\n    Returns:\n        shape mode\n    \"\"\"\nreturn SHAPE_MODE.inverse[self.shapeMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_transformation_mode","title":"<code>get_transformation_mode() -&gt; constants.TransformationModeStr</code>","text":"<p>Return current transformation mode.</p> <p>Returns:</p> Type Description <code>constants.TransformationModeStr</code> <p>transformation mode</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_transformation_mode(self) -&gt; constants.TransformationModeStr:\n\"\"\"Return current transformation mode.\n    Returns:\n        transformation mode\n    \"\"\"\nreturn constants.TRANSFORMATION_MODE.inverse[self.transformationMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.set_shape_mode","title":"<code>set_shape_mode(mode: ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode)</code>","text":"<p>Set shape mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode</code> <p>shape mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def set_shape_mode(self, mode: ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode):\n\"\"\"Set shape mode.\n    Args:\n        mode: shape mode to use\n    \"\"\"\nself.setShapeMode(SHAPE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.set_transformation_mode","title":"<code>set_transformation_mode(mode: constants.TransformationModeStr | constants.TransformationMode)</code>","text":"<p>Set transformation mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.TransformationModeStr | constants.TransformationMode</code> <p>transformation mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def set_transformation_mode(\nself, mode: constants.TransformationModeStr | constants.TransformationMode\n):\n\"\"\"Set transformation mode.\n    Args:\n        mode: transformation mode to use\n    \"\"\"\nself.setTransformationMode(constants.TRANSFORMATION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsScene","title":"<code>GraphicsScene(parent = None)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>widgets.QGraphicsScene</code></p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def __init__(self, parent=None):\nsuper().__init__(parent)\nself._grid_mode = self.GridType.LineGrid\nself._grid_size = 50\nself._pen_width = 0.65\nself._grid_color = self.get_palette().get_color(\"text\")\nself._bg_color = self.get_palette().get_color(\"window\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.GridType","title":"<code>GridType</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Grid type for background.</p>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_item_index_method","title":"<code>get_item_index_method() -&gt; ItemIndexMethodStr</code>","text":"<p>Return item index method.</p> <p>Returns:</p> Type Description <code>ItemIndexMethodStr</code> <p>item index method</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_item_index_method(self) -&gt; ItemIndexMethodStr:\n\"\"\"Return item index method.\n    Returns:\n        item index method\n    \"\"\"\nreturn ITEM_INDEX_METHOD.inverse[self.itemIndexMethod()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.set_item_index_method","title":"<code>set_item_index_method(method: ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod)</code>","text":"<p>Set item index method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod</code> <p>item index method to use</p> required Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def set_item_index_method(\nself, method: ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod\n):\n\"\"\"Set item index method.\n    Args:\n        method: item index method to use\n    \"\"\"\nself.setItemIndexMethod(ITEM_INDEX_METHOD.get_enum_value(method))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsViewMixin","title":"<code>GraphicsViewMixin(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], widgets.QGraphicsScene):\nself.setScene(widgets.GraphicsScene())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Return current cache mode.</p> <p>Returns:</p> Type Description <code>CacheModeStr</code> <p>cache mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Return current cache mode.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODES.inverse[self.cacheMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_drag_mode","title":"<code>get_drag_mode() -&gt; DragModeStr</code>","text":"<p>Return current drag mode.</p> <p>Returns:</p> Type Description <code>DragModeStr</code> <p>drag mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_drag_mode(self) -&gt; DragModeStr:\n\"\"\"Return current drag mode.\n    Returns:\n        drag mode\n    \"\"\"\nreturn DRAG_MODE.inverse[self.dragMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_pixel_size","title":"<code>get_pixel_size()</code>","text":"<p>Return vector with length and width of one view pixel in scene coordinates.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_pixel_size(self):\n\"\"\"Return vector with length and width of one view pixel in scene coordinates.\"\"\"\np0 = core.PointF(0, 0)\np1 = core.PointF(1, 1)\ntr = self.transform().inverted()[0]\np01 = tr.map(p0)\np11 = tr.map(p1)\nreturn core.PointF(p11 - p01)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_resize_anchor","title":"<code>get_resize_anchor() -&gt; ViewportAnchorStr</code>","text":"<p>Return current resize anchor.</p> <p>Returns:</p> Type Description <code>ViewportAnchorStr</code> <p>resize anchor</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_resize_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current resize anchor.\n    Returns:\n        resize anchor\n    \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.resizeAnchor()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_rubberband_selection_mode","title":"<code>get_rubberband_selection_mode() -&gt; constants.ItemSelectionModeStr</code>","text":"<p>Return current rubberband selection mode.</p> <p>Returns:</p> Type Description <code>constants.ItemSelectionModeStr</code> <p>rubberband selection mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_rubberband_selection_mode(self) -&gt; constants.ItemSelectionModeStr:\n\"\"\"Return current rubberband selection mode.\n    Returns:\n        rubberband selection mode\n    \"\"\"\nreturn constants.ITEM_SELECTION_MODE.inverse[self.rubberBandSelectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_transformation_anchor","title":"<code>get_transformation_anchor() -&gt; ViewportAnchorStr</code>","text":"<p>Return current transformation anchor.</p> <p>Returns:</p> Type Description <code>ViewportAnchorStr</code> <p>viewport anchor</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_transformation_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current transformation anchor.\n    Returns:\n        viewport anchor\n    \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.transformationAnchor()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_view_rect","title":"<code>get_view_rect() -&gt; core.QRect</code>","text":"<p>Return the boundaries of the view in scene coordinates.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_view_rect(self) -&gt; core.QRect:\n\"\"\"Return the boundaries of the view in scene coordinates.\"\"\"\nr = core.QRectF(self.rect())\nreturn self.viewportTransform().inverted()[0].mapRect(r)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_viewport_update_mode","title":"<code>get_viewport_update_mode() -&gt; ViewportUpdateModeStr</code>","text":"<p>Return current viewport update mode.</p> <p>Returns:</p> Type Description <code>ViewportUpdateModeStr</code> <p>viewport update mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_viewport_update_mode(self) -&gt; ViewportUpdateModeStr:\n\"\"\"Return current viewport update mode.\n    Returns:\n        viewport update mode\n    \"\"\"\nreturn VIEWPORT_UPDATE_MODE.inverse[self.viewportUpdateMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_zoom","title":"<code>get_zoom() -&gt; float</code>","text":"<p>Return the viewer zoom level.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>zoom level.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_zoom(self) -&gt; float:\n\"\"\"Return the viewer zoom level.\n    Returns:\n        float: zoom level.\n    \"\"\"\ntransform = self.transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr | mod.CacheModeFlag)</code>","text":"<p>Set the cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr | mod.CacheModeFlag</code> <p>cache mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr | mod.CacheModeFlag):\n\"\"\"Set the cache mode.\n    Args:\n        mode: cache mode to use\n    \"\"\"\nself.setCacheMode(CACHE_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_drag_mode","title":"<code>set_drag_mode(mode: DragModeStr | mod.DragMode)</code>","text":"<p>Set the behavior for dragging the mouse while the left mouse button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>DragModeStr | mod.DragMode</code> <p>drag mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_drag_mode(self, mode: DragModeStr | mod.DragMode):\n\"\"\"Set the behavior for dragging the mouse while the left mouse button is pressed.\n    Args:\n        mode: drag mode to use\n    \"\"\"\nself.setDragMode(DRAG_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_resize_anchor","title":"<code>set_resize_anchor(mode: ViewportAnchorStr | mod.ViewportAnchor)</code>","text":"<p>Set how the view should position the scene during resizes.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportAnchorStr | mod.ViewportAnchor</code> <p>resize anchor to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_resize_anchor(self, mode: ViewportAnchorStr | mod.ViewportAnchor):\n\"\"\"Set how the view should position the scene during resizes.\n    Args:\n        mode: resize anchor to use\n    \"\"\"\nself.setResizeAnchor(VIEWPORT_ANCHOR.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_rubberband_selection_mode","title":"<code>set_rubberband_selection_mode(mode: constants.ItemSelectionModeStr | constants.ItemSelectionMode)</code>","text":"<p>Set the behavior for selecting items with a rubber band selection rectangle.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ItemSelectionModeStr | constants.ItemSelectionMode</code> <p>rubberband selection mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_rubberband_selection_mode(\nself, mode: constants.ItemSelectionModeStr | constants.ItemSelectionMode\n):\n\"\"\"Set the behavior for selecting items with a rubber band selection rectangle.\n    Args:\n        mode: rubberband selection mode to use\n    \"\"\"\nself.setRubberBandSelectionMode(\nconstants.ITEM_SELECTION_MODE.get_enum_value(mode)\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_transformation_anchor","title":"<code>set_transformation_anchor(mode: ViewportAnchorStr | mod.ViewportAnchor)</code>","text":"<p>Set how the view should position the scene during transformations.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportAnchorStr | mod.ViewportAnchor</code> <p>transformation anchor to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_transformation_anchor(self, mode: ViewportAnchorStr | mod.ViewportAnchor):\n\"\"\"Set how the view should position the scene during transformations.\n    Args:\n        mode: transformation anchor to use\n    \"\"\"\nself.setTransformationAnchor(VIEWPORT_ANCHOR.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_viewport_update_mode","title":"<code>set_viewport_update_mode(mode: ViewportUpdateModeStr | mod.ViewportUpdateMode)</code>","text":"<p>Set how the viewport should update its contents.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportUpdateModeStr | mod.ViewportUpdateMode</code> <p>viewport update mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_viewport_update_mode(\nself, mode: ViewportUpdateModeStr | mod.ViewportUpdateMode\n):\n\"\"\"Set how the viewport should update its contents.\n    Args:\n        mode: viewport update mode to use\n    \"\"\"\nself.setViewportUpdateMode(VIEWPORT_UPDATE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsWidgetMixin","title":"<code>GraphicsWidgetMixin</code>","text":"<p>         Bases: <code>widgets.GraphicsObjectMixin</code>, <code>widgets.GraphicsLayoutItemMixin</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.get_focus_policy","title":"<code>get_focus_policy() -&gt; constants.FocusPolicyStr</code>","text":"<p>Return way the widget accepts keyboard focus.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>constants.FocusPolicyStr</code> <p>Focus policy</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return way the widget accepts keyboard focus.\n    Returns:\n        str: Focus policy\n    \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.set_focus_policy","title":"<code>set_focus_policy(policy: constants.FocusPolicyStr | constants.FocusPolicy)</code>","text":"<p>Set the way the widget accepts keyboard focus.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.FocusPolicyStr | constants.FocusPolicy</code> <p>Focus policy</p> required Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def set_focus_policy(self, policy: constants.FocusPolicyStr | constants.FocusPolicy):\n\"\"\"Set the way the widget accepts keyboard focus.\n    Args:\n        policy: Focus policy\n    \"\"\"\nself.setFocusPolicy(constants.FOCUS_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.window_frame_section_at","title":"<code>window_frame_section_at(point: datatypes.PointType) -&gt; constants.WindowFrameSectionStr</code>","text":"<p>Return the window frame section at given position.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>constants.WindowFrameSectionStr</code> <p>Window frame section</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def window_frame_section_at(\nself, point: datatypes.PointType\n) -&gt; constants.WindowFrameSectionStr:\n\"\"\"Return the window frame section at given position.\n    Returns:\n        str: Window frame section\n    \"\"\"\nsection = self.windowFrameSectionAt(datatypes.to_point(point))\nreturn constants.WINDOW_FRAME_SECTION.inverse[section]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GridLayout","title":"<code>GridLayout</code>","text":"<p>         Bases: <code>widgets.LayoutMixin</code>, <code>widgets.QGridLayout</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.get_origin_corner","title":"<code>get_origin_corner() -&gt; constants.CornerStr</code>","text":"<p>Return current origin corner.</p> <p>Returns:</p> Type Description <code>constants.CornerStr</code> <p>origin corner</p> Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def get_origin_corner(self) -&gt; constants.CornerStr:\n\"\"\"Return current origin corner.\n    Returns:\n        origin corner\n    \"\"\"\nreturn constants.CORNER.inverse[self.originCorner()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.set_origin_corner","title":"<code>set_origin_corner(corner: constants.CornerStr | constants.Corner)</code>","text":"<p>Set the origin corner.</p> <p>Parameters:</p> Name Type Description Default <code>corner</code> <code>constants.CornerStr | constants.Corner</code> <p>origin corner</p> required Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def set_origin_corner(self, corner: constants.CornerStr | constants.Corner):\n\"\"\"Set the origin corner.\n    Args:\n        corner: origin corner\n    \"\"\"\nself.setOriginCorner(constants.CORNER.get_enum_value(corner))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GroupBox","title":"<code>GroupBox</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QGroupBox</code></p> <p>GroupBox widget.</p> <p>A group box provides a frame, a title on top, a keyboard shortcut, and displays various other widgets inside itself. The keyboard shortcut moves keyboard focus to one of the group box's child widgets.</p>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.get_alignment","title":"<code>get_alignment() -&gt; constants.HorizontalAlignmentStr</code>","text":"<p>Return current title alignment.</p> <p>Returns:</p> Type Description <code>constants.HorizontalAlignmentStr</code> <p>title alignment</p> Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def get_alignment(self) -&gt; constants.HorizontalAlignmentStr:\n\"\"\"Return current title alignment.\n    Returns:\n        title alignment\n    \"\"\"\nreturn constants.H_ALIGNMENT.inverse[self.alignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.set_alignment","title":"<code>set_alignment(alignment: constants.HorizontalAlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the title alignment of the groupbox.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.HorizontalAlignmentStr | constants.AlignmentFlag</code> <p>title alignment for the groupbox</p> required Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def set_alignment(\nself, alignment: constants.HorizontalAlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the title alignment of the groupbox.\n    Args:\n        alignment: title alignment for the groupbox\n    \"\"\"\nself.setAlignment(constants.H_ALIGNMENT.get_enum_value(alignment))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.InputDialog","title":"<code>InputDialog</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>widgets.QInputDialog</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_input_mode","title":"<code>get_input_mode() -&gt; InputModeStr</code>","text":"<p>Return input mode.</p> <p>Returns:</p> Type Description <code>InputModeStr</code> <p>input mode</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def get_input_mode(self) -&gt; InputModeStr:\n\"\"\"Return input mode.\n    Returns:\n        input mode\n    \"\"\"\nreturn INPUT_MODE.inverse[self.inputMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_text_echo_mode","title":"<code>get_text_echo_mode() -&gt; widgets.lineedit.EchoModeStr</code>","text":"<p>Return text echo mode.</p> <p>Returns:</p> Type Description <code>widgets.lineedit.EchoModeStr</code> <p>echo mode</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def get_text_echo_mode(self) -&gt; widgets.lineedit.EchoModeStr:\n\"\"\"Return text echo mode.\n    Returns:\n        echo mode\n    \"\"\"\nreturn widgets.lineedit.ECHO_MODE.inverse[self.textEchoMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.set_input_mode","title":"<code>set_input_mode(mode: InputModeStr | mod.InputMode)</code>","text":"<p>Set input mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InputModeStr | mod.InputMode</code> <p>input mode to use</p> required Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def set_input_mode(self, mode: InputModeStr | mod.InputMode):\n\"\"\"Set input mode.\n    Args:\n        mode: input mode to use\n    \"\"\"\nself.setInputMode(INPUT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.set_text_echo_mode","title":"<code>set_text_echo_mode(mode: widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode)</code>","text":"<p>Set text echo mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode</code> <p>echo mode to use</p> required Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def set_text_echo_mode(\nself, mode: widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode\n):\n\"\"\"Set text echo mode.\n    Args:\n        mode: echo mode to use\n    \"\"\"\nself.setTextEchoMode(widgets.lineedit.ECHO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LCDNumber","title":"<code>LCDNumber</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code>, <code>widgets.QLCDNumber</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"<p>Return current lcd mode.</p> <p>Returns:</p> Type Description <code>ModeStr</code> <p>lcd mode</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\n\"\"\"Return current lcd mode.\n    Returns:\n        lcd mode\n    \"\"\"\nreturn MODE.inverse[self.mode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.get_segment_style","title":"<code>get_segment_style() -&gt; SegmentStyleStr</code>","text":"<p>Return current segment style.</p> <p>Returns:</p> Type Description <code>SegmentStyleStr</code> <p>segment style</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_segment_style(self) -&gt; SegmentStyleStr:\n\"\"\"Return current segment style.\n    Returns:\n        segment style\n    \"\"\"\nreturn SEGMENT_STYLE.inverse[self.segmentStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.set_mode","title":"<code>set_mode(mode: ModeStr | widgets.QLCDNumber.Mode)</code>","text":"<p>Set the lcd mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ModeStr | widgets.QLCDNumber.Mode</code> <p>lcd mode to use</p> required Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_mode(self, mode: ModeStr | widgets.QLCDNumber.Mode):\n\"\"\"Set the lcd mode.\n    Args:\n        mode: lcd mode to use\n    \"\"\"\nself.setMode(MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.set_segment_style","title":"<code>set_segment_style(style: SegmentStyleStr | widgets.QLCDNumber.SegmentStyle)</code>","text":"<p>Set the segment style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>SegmentStyleStr | widgets.QLCDNumber.SegmentStyle</code> <p>segment style to use</p> required Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_segment_style(self, style: SegmentStyleStr | widgets.QLCDNumber.SegmentStyle):\n\"\"\"Set the segment style.\n    Args:\n        style: segment style to use\n    \"\"\"\nself.setSegmentStyle(SEGMENT_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Label","title":"<code>Label(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code>, <code>widgets.QLabel</code></p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._elide_mode = constants.TextElideMode.ElideNone\nsuper().__init__(*args, **kwargs)\nself.openExternalLinks()\nself._is_elided = False\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.get_text_format","title":"<code>get_text_format() -&gt; constants.TextFormatStr</code>","text":"<p>Return current text format.</p> <p>Returns:</p> Type Description <code>constants.TextFormatStr</code> <p>text format</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n    Returns:\n        text format\n    \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.get_text_interaction","title":"<code>get_text_interaction() -&gt; list[constants.TextInteractionStr]</code>","text":"<p>Return current text interaction mode.</p> <p>Returns:</p> Type Description <code>list[constants.TextInteractionStr]</code> <p>list of text interaction modes</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_text_interaction(self) -&gt; list[constants.TextInteractionStr]:\n\"\"\"Return current text interaction mode.\n    Returns:\n        list of text interaction modes\n    \"\"\"\nreturn constants.TEXT_INTERACTION.get_list(self.textInteractionFlags())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_alignment","title":"<code>set_alignment(horizontal: constants.HorizontalAlignmentStr | None = None, vertical: constants.VerticalAlignmentStr | None = None)</code>","text":"<p>Set the alignment of the label's contents.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set the alignment of the label's contents.\"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn self\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setAlignment(flag)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_indent","title":"<code>set_indent(indent: int) -&gt; Label</code>","text":"<p>Set the label's text indent in pixels.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_indent(self, indent: int) -&gt; Label:\n\"\"\"Set the label's text indent in pixels.\"\"\"\nself.setIndent(indent)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_text","title":"<code>set_text(text: str) -&gt; Label</code>","text":"<p>Set the label's text.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text(self, text: str) -&gt; Label:\n\"\"\"Set the label's text.\"\"\"\nself.setText(text)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_text_format","title":"<code>set_text_format(text_format: constants.TextFormatStr | constants.TextFormat) -&gt; Label</code>","text":"<p>Set the text format.</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>constants.TextFormatStr | constants.TextFormat</code> <p>text format to use</p> required Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n) -&gt; Label:\n\"\"\"Set the text format.\n    Args:\n        text_format: text format to use\n    \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_text_interaction","title":"<code>set_text_interaction(*types: constants.TextInteractionStr) -&gt; Label</code>","text":"<p>Set the text interaction mode.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>constants.TextInteractionStr</code> <p>text interaction mode to use</p> <code>()</code> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text_interaction(self, *types: constants.TextInteractionStr) -&gt; Label:\n\"\"\"Set the text interaction mode.\n    Args:\n        types: text interaction mode to use\n    \"\"\"\nflags = constants.TEXT_INTERACTION.merge_flags(types)\nself.setTextInteractionFlags(flags)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_weight","title":"<code>set_weight(weight: gui.font.WeightStr | gui.QFont.Weight) -&gt; Label</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>gui.font.WeightStr | gui.QFont.Weight</code> <p>font weight</p> required Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_weight(self, weight: gui.font.WeightStr | gui.QFont.Weight) -&gt; Label:\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    \"\"\"\nfont = self.font()\nfont.setWeight(gui.font.WEIGHT.get_enum_value(weight))\nself.setFont(font)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LayoutItemMixin","title":"<code>LayoutItemMixin</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the layout</p> required Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n    Args:\n        alignment: alignment for the layout\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LayoutMixin","title":"<code>LayoutMixin(*args, margin = None, **kwargs)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>widgets.LayoutItemMixin</code></p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __init__(self, *args, margin=None, **kwargs):\nself._next_container = None\nself._stack = []\nsuper().__init__(*args, **kwargs)\nif margin is not None:\nself.set_margin(margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.get_size_constraint","title":"<code>get_size_constraint() -&gt; SizeConstraintStr</code>","text":"<p>Return current size mode.</p> <p>Returns:</p> Type Description <code>SizeConstraintStr</code> <p>size mode</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def get_size_constraint(self) -&gt; SizeConstraintStr:\n\"\"\"Return current size mode.\n    Returns:\n        size mode\n    \"\"\"\nreturn SIZE_CONSTRAINT.inverse[self.sizeConstraint()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag, item: widgets.QWidget | widgets.QLayout | None = None) -&gt; bool</code>","text":"<p>Set the alignment for widget / layout to alignment.</p> <p>Returns true if w is found in this layout (not including child layouts).</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the layout</p> required <code>item</code> <code>widgets.QWidget | widgets.QLayout | None</code> <p>set alignment for specific child only</p> <code>None</code> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_alignment(\nself,\nalignment: constants.AlignmentStr | constants.AlignmentFlag,\nitem: widgets.QWidget | widgets.QLayout | None = None,\n) -&gt; bool:\n\"\"\"Set the alignment for widget / layout to alignment.\n    Returns true if w is found in this layout (not including child layouts).\n    Args:\n        alignment: alignment for the layout\n        item: set alignment for specific child only\n    \"\"\"\nif item is not None:\nreturn self.setAlignment(item, constants.ALIGNMENTS.get_enum_value(alignment))\nelse:\nreturn self.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_size_constraint","title":"<code>set_size_constraint(mode: SizeConstraintStr | widgets.QLayout.SizeConstraint)</code>","text":"<p>Set the size mode of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SizeConstraintStr | widgets.QLayout.SizeConstraint</code> <p>size mode for the layout</p> required Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_size_constraint(\nself, mode: SizeConstraintStr | widgets.QLayout.SizeConstraint\n):\n\"\"\"Set the size mode of the layout.\n    Args:\n        mode: size mode for the layout\n    \"\"\"\nself.setSizeConstraint(SIZE_CONSTRAINT.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LineEdit","title":"<code>LineEdit(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QLineEdit</code></p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self._on_value_change)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.get_cursor_move_style","title":"<code>get_cursor_move_style() -&gt; constants.CursorMoveStyleStr</code>","text":"<p>Return cursor move style.</p> <p>Returns:</p> Type Description <code>constants.CursorMoveStyleStr</code> <p>cursor move style</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_cursor_move_style(self) -&gt; constants.CursorMoveStyleStr:\n\"\"\"Return cursor move style.\n    Returns:\n        cursor move style\n    \"\"\"\nreturn constants.CURSOR_MOVE_STYLE.inverse[self.cursorMoveStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.get_echo_mode","title":"<code>get_echo_mode() -&gt; EchoModeStr</code>","text":"<p>Return echo mode.</p> <p>Returns:</p> Type Description <code>EchoModeStr</code> <p>echo mode</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_echo_mode(self) -&gt; EchoModeStr:\n\"\"\"Return echo mode.\n    Returns:\n        echo mode\n    \"\"\"\nreturn ECHO_MODE.inverse[self.echoMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_cursor_move_style","title":"<code>set_cursor_move_style(style: constants.CursorMoveStyleStr | constants.CursorMoveStyle)</code>","text":"<p>Set cursor move style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CursorMoveStyleStr | constants.CursorMoveStyle</code> <p>cursor move style to use</p> required Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_cursor_move_style(\nself, style: constants.CursorMoveStyleStr | constants.CursorMoveStyle\n):\n\"\"\"Set cursor move style.\n    Args:\n        style: cursor move style to use\n    \"\"\"\nself.setCursorMoveStyle(constants.CURSOR_MOVE_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_echo_mode","title":"<code>set_echo_mode(mode: EchoModeStr | widgets.QLineEdit.EchoMode)</code>","text":"<p>Set echo mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>EchoModeStr | widgets.QLineEdit.EchoMode</code> <p>echo mode to use</p> required Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_echo_mode(self, mode: EchoModeStr | widgets.QLineEdit.EchoMode):\n\"\"\"Set echo mode.\n    Args:\n        mode: echo mode to use\n    \"\"\"\nself.setEchoMode(ECHO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_read_only","title":"<code>set_read_only(value: bool = True)</code>","text":"<p>Set text to read-only.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True, for read-only, otherwise False</p> <code>True</code> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_read_only(self, value: bool = True):\n\"\"\"Set text to read-only.\n    Args:\n        value: True, for read-only, otherwise False\n    \"\"\"\nself.setReadOnly(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ListViewMixin","title":"<code>ListViewMixin</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_flow","title":"<code>get_flow() -&gt; FlowStr</code>","text":"<p>Return flow mode.</p> <p>Returns:</p> Type Description <code>FlowStr</code> <p>flow mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_flow(self) -&gt; FlowStr:\n\"\"\"Return flow mode.\n    Returns:\n        flow mode\n    \"\"\"\nreturn FLOW.inverse[self.flow()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_layout_mode","title":"<code>get_layout_mode() -&gt; LayoutModeStr</code>","text":"<p>Return layout mode.</p> <p>Returns:</p> Type Description <code>LayoutModeStr</code> <p>layout mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_layout_mode(self) -&gt; LayoutModeStr:\n\"\"\"Return layout mode.\n    Returns:\n        layout mode\n    \"\"\"\nreturn LAYOUT_MODE.inverse[self.layoutMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_movement","title":"<code>get_movement() -&gt; MovementStr</code>","text":"<p>Return movement mode.</p> <p>Returns:</p> Type Description <code>MovementStr</code> <p>movement mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_movement(self) -&gt; MovementStr:\n\"\"\"Return movement mode.\n    Returns:\n        movement mode\n    \"\"\"\nreturn MOVEMENT.inverse[self.movement()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_resize_mode","title":"<code>get_resize_mode() -&gt; ResizeModeStr</code>","text":"<p>Return resize mode.</p> <p>Returns:</p> Type Description <code>ResizeModeStr</code> <p>resize mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_resize_mode(self) -&gt; ResizeModeStr:\n\"\"\"Return resize mode.\n    Returns:\n        resize mode\n    \"\"\"\nreturn RESIZE_MODE.inverse[self.resizeMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return view mode.</p> <p>Returns:</p> Type Description <code>ViewModeStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_flow","title":"<code>set_flow(mode: FlowStr | widgets.QListView.Flow)</code>","text":"<p>Set flow mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FlowStr | widgets.QListView.Flow</code> <p>flow mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_flow(self, mode: FlowStr | widgets.QListView.Flow):\n\"\"\"Set flow mode.\n    Args:\n        mode: flow mode to use\n    \"\"\"\nself.setFlow(FLOW.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_layout_mode","title":"<code>set_layout_mode(mode: LayoutModeStr | widgets.QListView.LayoutMode)</code>","text":"<p>Set layout mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LayoutModeStr | widgets.QListView.LayoutMode</code> <p>layout mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_layout_mode(self, mode: LayoutModeStr | widgets.QListView.LayoutMode):\n\"\"\"Set layout mode.\n    Args:\n        mode: layout mode to use\n    \"\"\"\nself.setLayoutMode(LAYOUT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_movement","title":"<code>set_movement(mode: MovementStr | widgets.QListView.Movement)</code>","text":"<p>Set movement mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>MovementStr | widgets.QListView.Movement</code> <p>movement mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_movement(self, mode: MovementStr | widgets.QListView.Movement):\n\"\"\"Set movement mode.\n    Args:\n        mode: movement mode to use\n    \"\"\"\nself.setMovement(MOVEMENT.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_resize_mode","title":"<code>set_resize_mode(mode: ResizeModeStr | widgets.QListView.ResizeMode)</code>","text":"<p>Set resize mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ResizeModeStr | widgets.QListView.ResizeMode</code> <p>resize mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_resize_mode(self, mode: ResizeModeStr | widgets.QListView.ResizeMode):\n\"\"\"Set resize mode.\n    Args:\n        mode: resize mode to use\n    \"\"\"\nself.setResizeMode(RESIZE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | widgets.QListView.ViewMode)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | widgets.QListView.ViewMode</code> <p>view mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr | widgets.QListView.ViewMode):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode to use\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ListWidgetItem","title":"<code>ListWidgetItem</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtWidgets.QListWidgetItem</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.CheckStateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_text_alignment","title":"<code>set_text_alignment(horizontal: constants.HorizontalAlignmentStr | constants.AlignmentFlag | None = None, vertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None)</code>","text":"<p>Set text alignment of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>constants.HorizontalAlignmentStr | constants.AlignmentFlag | None</code> <p>horizontal text alignment to use</p> <code>None</code> <code>vertical</code> <code>constants.VerticalAlignmentStr | constants.AlignmentFlag | None</code> <p>vertical text alignment to use</p> <code>None</code> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr\n| constants.AlignmentFlag\n| None = None,\nvertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n    Args:\n        horizontal: horizontal text alignment to use\n        vertical: vertical text alignment to use\n    \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT.get_enum_value(vertical)\ncase _, None:\nflag = constants.H_ALIGNMENT.get_enum_value(horizontal)\ncase _, _:\nflag = constants.V_ALIGNMENT.get_enum_value(\nvertical\n) | constants.H_ALIGNMENT.get_enum_value(horizontal)\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MainWindow","title":"<code>MainWindow(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QMainWindow</code></p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, dock_options=DEFAULT_OPTS, **kwargs)\nself.setMenuBar(widgets.MenuBar())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.add_toolbar","title":"<code>add_toolbar(toolbar: widgets.QToolBar, area: constants.ToolbarAreaStr | constants.ToolBarArea | Literal['auto'] = 'auto')</code>","text":"<p>Adds a toolbar to the mainmenu at specified area.</p> <p>Parameters:</p> Name Type Description Default <code>toolbar</code> <code>widgets.QToolBar</code> <p>toolbar to use</p> required <code>area</code> <code>constants.ToolbarAreaStr | constants.ToolBarArea | Literal['auto']</code> <p>area of the toolbar</p> <code>'auto'</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_toolbar(\nself,\ntoolbar: widgets.QToolBar,\narea: constants.ToolbarAreaStr | constants.ToolBarArea | Literal[\"auto\"] = \"auto\",\n):\n\"\"\"Adds a toolbar to the mainmenu at specified area.\n    Args:\n        toolbar: toolbar to use\n        area: area of the toolbar\n    \"\"\"\nif area == \"auto\":\narea = self._get_preferred_toolbar_position()\nself.addToolBar(constants.TOOLBAR_AREA.get_enum_value(area), toolbar)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.add_toolbar_break","title":"<code>add_toolbar_break(position: constants.ToolbarAreaStr | constants.ToolBarArea = 'top')</code>","text":"<p>Adds a toolbar break to the given area behind the last item.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>constants.ToolbarAreaStr | constants.ToolBarArea</code> <p>position of the toolbar</p> <code>'top'</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_toolbar_break(\nself, position: constants.ToolbarAreaStr | constants.ToolBarArea = \"top\"\n):\n\"\"\"Adds a toolbar break to the given area behind the last item.\n    Args:\n        position: position of the toolbar\n    \"\"\"\nself.addToolBarBreak(constants.TOOLBAR_AREA.get_enum_value(position))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.get_tab_shape","title":"<code>get_tab_shape() -&gt; widgets.tabwidget.TabShapeStr</code>","text":"<p>Return tab shape.</p> <p>Returns:</p> Type Description <code>widgets.tabwidget.TabShapeStr</code> <p>tab shape</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def get_tab_shape(self) -&gt; widgets.tabwidget.TabShapeStr:\n\"\"\"Return tab shape.\n    Returns:\n        tab shape\n    \"\"\"\nreturn widgets.tabwidget.TAB_SHAPES.inverse[self.tabShape()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.get_tool_button_style","title":"<code>get_tool_button_style() -&gt; constants.ToolButtonStyleStr</code>","text":"<p>Return current tool button style.</p> <p>Returns:</p> Type Description <code>constants.ToolButtonStyleStr</code> <p>tool button style</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def get_tool_button_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return current tool button style.\n    Returns:\n        tool button style\n    \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.save_window_state","title":"<code>save_window_state(recursive: bool = False)</code>","text":"<p>Save current window state as QSetting.</p> <p>Parameters:</p> Name Type Description Default <code>recursive</code> <code>bool</code> <p>Description</p> <code>False</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def save_window_state(self, recursive: bool = False):\n\"\"\"Save current window state as QSetting.\n    Args:\n        recursive (bool, optional): Description\n    \"\"\"\nsettings = core.Settings()\nname = self.objectName()\nlogger.debug(f\"Saving window state for {self.windowTitle()!r}...\")\nsettings[f\"{name}.geometry\"] = self.saveGeometry()\nsettings[f\"{name}.state\"] = self.saveState()\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.objectName():\nwindow.save_window_state()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.set_tab_shape","title":"<code>set_tab_shape(shape: widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape)</code>","text":"<p>Set tab shape for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape</code> <p>tab shape to use</p> required Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def set_tab_shape(\nself, shape: widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape\n):\n\"\"\"Set tab shape for the tabwidget.\n    Args:\n        shape: tab shape to use\n    \"\"\"\nself.setTabShape(widgets.tabwidget.TAB_SHAPES.get_enum_value(shape))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.set_widget","title":"<code>set_widget(widget: widgets.QWidget | None) -&gt; widgets.QWidget | None</code>","text":"<p>Set widget and return previous one if existing.</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def set_widget(self, widget: widgets.QWidget | None) -&gt; widgets.QWidget | None:\n\"\"\"Set widget and return previous one if existing.\"\"\"\nprevious = self.takeCentralWidget()\nif widget:\nself.setCentralWidget(widget)\nreturn previous\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MdiArea","title":"<code>MdiArea</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>widgets.QMdiArea</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_tab_position","title":"<code>get_tab_position() -&gt; TabPositionStr</code>","text":"<p>Return current tab position.</p> <p>Returns:</p> Type Description <code>TabPositionStr</code> <p>tab position</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return current tab position.\n    Returns:\n        tab position\n    \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return current view mode.</p> <p>Returns:</p> Type Description <code>ViewModeStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return current view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_window_order","title":"<code>get_window_order() -&gt; WindowOrderStr</code>","text":"<p>Return current window order.</p> <p>Returns:</p> Type Description <code>WindowOrderStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_window_order(self) -&gt; WindowOrderStr:\n\"\"\"Return current window order.\n    Returns:\n        view mode\n    \"\"\"\nreturn WINDOW_ORDER.inverse[self.activationOrder()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_tab_position","title":"<code>set_tab_position(position: TabPositionStr | widgets.QTabWidget.TabPosition)</code>","text":"<p>Set tab position for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TabPositionStr | widgets.QTabWidget.TabPosition</code> <p>tabs position to use</p> required Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_tab_position(self, position: TabPositionStr | widgets.QTabWidget.TabPosition):\n\"\"\"Set tab position for the MDI area.\n    Args:\n        position: tabs position to use\n    \"\"\"\nself.setTabPosition(TAB_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | widgets.QMdiArea.ViewMode)</code>","text":"<p>Set view mode for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | widgets.QMdiArea.ViewMode</code> <p>view mode to use</p> required Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr | widgets.QMdiArea.ViewMode):\n\"\"\"Set view mode for the MDI area.\n    Args:\n        mode: view mode to use\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_window_order","title":"<code>set_window_order(mode: WindowOrderStr | widgets.QMdiArea.WindowOrder)</code>","text":"<p>Set the window order behaviour for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>WindowOrderStr | widgets.QMdiArea.WindowOrder</code> <p>window order behaviour to use</p> required Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_window_order(self, mode: WindowOrderStr | widgets.QMdiArea.WindowOrder):\n\"\"\"Set the window order behaviour for the MDI area.\n    Args:\n        mode: window order behaviour to use\n    \"\"\"\nself.setActivationOrder(WINDOW_ORDER.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MessageBox","title":"<code>MessageBox(icon: datatypes.IconType | IconStr = None, buttons: list[StandardButtonStr | widgets.QMessageBox.StandardButton] | None = None, **kwargs: list[StandardButtonStr | widgets.QMessageBox.StandardButton] | None)</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>widgets.QMessageBox</code></p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def __init__(\nself,\nicon: datatypes.IconType | IconStr = None,\nbuttons: list[StandardButtonStr | widgets.QMessageBox.StandardButton]\n| None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_icon(icon)\nself.setWindowFlags(\nconstants.WindowType.Dialog\n| constants.WindowType.WindowTitleHint\n| constants.WindowType.CustomizeWindowHint\n)\nif isinstance(buttons, list):\nfor b in buttons:\nself.add_button(b)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.add_button","title":"<code>add_button(button: StandardButtonStr | widgets.QMessageBox.StandardButton) -&gt; widgets.QPushButton</code>","text":"<p>Add a default button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>StandardButtonStr | widgets.QMessageBox.StandardButton</code> <p>button to add</p> required <p>Returns:</p> Type Description <code>widgets.QPushButton</code> <p>created button</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def add_button(\nself, button: StandardButtonStr | widgets.QMessageBox.StandardButton\n) -&gt; widgets.QPushButton:\n\"\"\"Add a default button.\n    Args:\n        button: button to add\n    Returns:\n        created button\n    \"\"\"\nreturn self.addButton(STANDARD_BUTTON.get_enum_value(button))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.get_text_format","title":"<code>get_text_format() -&gt; constants.TextFormatStr</code>","text":"<p>Return current text format.</p> <p>Returns:</p> Type Description <code>constants.TextFormatStr</code> <p>text format</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n    Returns:\n        text format\n    \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.set_text_format","title":"<code>set_text_format(text_format: constants.TextFormatStr | constants.TextFormat)</code>","text":"<p>Set the text format.</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>constants.TextFormatStr | constants.TextFormat</code> <p>text format to use</p> required Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n):\n\"\"\"Set the text format.\n    Args:\n        text_format: text format to use\n    \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PlainTextEditMixin","title":"<code>PlainTextEditMixin(text: str = '', **kwargs: str)</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(**kwargs)\nself._allow_wheel_zoom = False\nself._hl = None\nself._current_line_color = gui.Color(0, 0, 0, 0)\nself.selecter = texteditselecter.TextEditSelecter(self)\nself.validator: gui.QValidator | None = None\nself.textChanged.connect(self._on_value_change)\ndoc = gui.TextDocument(self)\nlayout = widgets.PlainTextDocumentLayout(doc)\ndoc.setDocumentLayout(layout)\nself.setDocument(doc)\nself.set_text(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_line_wrap_mode","title":"<code>get_line_wrap_mode() -&gt; LineWrapModeStr</code>","text":"<p>Get the current wrap mode.</p> <p>Returns:</p> Type Description <code>LineWrapModeStr</code> <p>Wrap mode</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n    Returns:\n        Wrap mode\n    \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_pixel_height","title":"<code>get_pixel_height(exact: bool = True) -&gt; int</code>","text":"<p>Returns the pixel height of the text area.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_pixel_height(self, exact: bool = True) -&gt; int:\n\"\"\"Returns the pixel height of the text area.\"\"\"\nwidget_margins = self.contentsMargins()\ndoc_height = self.document().get_pixel_height(exact=exact)\nreturn widget_margins.top() + doc_height + widget_margins.bottom()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_word_wrap_mode","title":"<code>get_word_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"<p>Get the current word wrap mode.</p> <p>Returns:</p> Type Description <code>gui.textoption.WordWrapModeStr</code> <p>Word wrap mode</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n    Returns:\n        Word wrap mode\n    \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_line_wrap_mode","title":"<code>set_line_wrap_mode(mode: LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode)</code>","text":"<p>Set line wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode</code> <p>line wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_line_wrap_mode(\nself, mode: LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode\n):\n\"\"\"Set line wrap mode.\n    Args:\n        mode: line wrap mode to use\n    \"\"\"\nself.setLineWrapMode(LINE_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_read_only","title":"<code>set_read_only(value: bool = True)</code>","text":"<p>Make the PlainTextEdit read-only.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True, for read-only, otherwise False</p> <code>True</code> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_read_only(self, value: bool = True):\n\"\"\"Make the PlainTextEdit read-only.\n    Args:\n        value: True, for read-only, otherwise False\n    \"\"\"\nself.setReadOnly(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_word_wrap_mode","title":"<code>set_word_wrap_mode(mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode)</code>","text":"<p>Set word wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode</code> <p>word wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_word_wrap_mode(\nself, mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode\n):\n\"\"\"Set word wrap mode.\n    Args:\n        mode: word wrap mode to use\n    \"\"\"\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.show_whitespace_and_tabs","title":"<code>show_whitespace_and_tabs(show: bool)</code>","text":"<p>Set show white spaces flag.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def show_whitespace_and_tabs(self, show: bool):\n\"\"\"Set show white spaces flag.\"\"\"\ndoc = self.document()\noptions = doc.defaultTextOption()\nflag = gui.QTextOption.Flag.ShowTabsAndSpaces\nif show:\noptions.setFlags(options.flags() | flag)  # type: ignore\nelse:\noptions.setFlags(options.flags() &amp; ~flag)  # type: ignore\ndoc.setDefaultTextOption(options)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.wheelEvent","title":"<code>wheelEvent(event)</code>","text":"<p>Handle wheel event for zooming.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def wheelEvent(self, event):\n\"\"\"Handle wheel event for zooming.\"\"\"\nif not self._allow_wheel_zoom:\nreturn super().wheelEvent(event)\nif event.modifiers() &amp; constants.CTRL_MOD:\nself.zoomIn() if event.angleDelta().y() &gt; 0 else self.zoomOut()\nevent.accept()\nelse:\nsuper().wheelEvent(event)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ProgressBar","title":"<code>ProgressBar(*args, text_visible: bool = True, **kwargs: bool)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QProgressBar</code></p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def __init__(self, *args, text_visible: bool = True, **kwargs):\nsuper().__init__(*args, text_visible=text_visible, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_text_direction","title":"<code>get_text_direction() -&gt; TextDirectionStr</code>","text":"<p>Return current text direction.</p> <p>Returns:</p> Type Description <code>TextDirectionStr</code> <p>Text direction</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_text_direction(self) -&gt; TextDirectionStr:\n\"\"\"Return current text direction.\n    Returns:\n        Text direction\n    \"\"\"\nreturn TEXT_DIRECTIONS.inverse[self.textDirection()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the layout</p> required Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the layout.\n    Args:\n        alignment: alignment for the layout\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the progress bar</p> required Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the progress bar.\n    Args:\n        orientation: orientation for the progress bar\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_text_direction","title":"<code>set_text_direction(text_direction: TextDirectionStr | widgets.QProgressBar.Direction)</code>","text":"<p>Set the text direction of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>text_direction</code> <code>TextDirectionStr | widgets.QProgressBar.Direction</code> <p>text direction for the layout</p> required Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_text_direction(\nself, text_direction: TextDirectionStr | widgets.QProgressBar.Direction\n):\n\"\"\"Set the text direction of the layout.\n    Args:\n        text_direction: text direction for the layout\n    \"\"\"\nself.setTextDirection(TEXT_DIRECTIONS.get_enum_value(text_direction))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ProgressDialog","title":"<code>ProgressDialog(parent: widgets.QWidget | None = None)</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>widgets.QProgressDialog</code></p> <p>Progress dialog.</p> <p>Wrapper for widgets.QProgressDialog</p> Source code in <code>prettyqt\\widgets\\progressdialog.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nprogress_bar = widgets.ProgressBar()\nprogress_bar.setRange(0, 0)\nprogress_bar.setTextVisible(False)\nself.setBar(progress_bar)\nself.set_icon(\"mdi.timer-sand-empty\")\nself.set_modality(\"application\")\nself.set_flags(\nminimize=False, maximize=False, close=False, stay_on_top=True, window=True\n)\nself.setCancelButton(None)  # type: ignore\nself.cancel()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ScrollArea","title":"<code>ScrollArea(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>widgets.QScrollArea</code></p> Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nviewport = widgets.Widget(self, object_name=f\"{type(self).__name__}_viewport\")\nself.setViewport(viewport)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.get_visible_widgets","title":"<code>get_visible_widgets(typ: type[T] = widgets.QWidget, partial_allowed: bool = True, margin: int = 10, recursive: bool = True) -&gt; listdelegators.BaseListDelegator[T]</code>","text":"<p>Return all widgets which are visible in the viewport.</p> <p>Results can be filtered by type and whether widget is fully or partially visible. A positive margin increases the area to search for widgets, a negative margin decreases it.</p> Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def get_visible_widgets(\nself,\ntyp: type[T] = widgets.QWidget,\npartial_allowed: bool = True,\nmargin: int = 10,\nrecursive: bool = True,\n) -&gt; listdelegators.BaseListDelegator[T]:\n\"\"\"Return all widgets which are visible in the viewport.\n    Results can be filtered by type and whether widget is fully or partially visible.\n    A positive margin increases the area to search for widgets, a negative margin\n    decreases it.\n    \"\"\"\nwidget = self.widget()\nviewport = self.viewport()\nrect = viewport.rect().adjusted(-margin, -margin, margin, margin)\nfound = []\nfor w in widget.find_children(typ, recursive=recursive):\ntop_left = w.mapTo(viewport, w.rect().topLeft())\nbottom_right = w.mapTo(viewport, w.rect().bottomRight())\nmapped = core.Rect(top_left, bottom_right)\nif partial_allowed and rect.intersects(mapped):\nfound.append(w)\nelif not partial_allowed and rect.contains(mapped):\nfound.append(w)\nreturn listdelegators.BaseListDelegator(found)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Scroller","title":"<code>Scroller(item: widgets.QScroller)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def __init__(self, item: widgets.QScroller):\nself.item = item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>state</p> Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ScrollerProperties","title":"<code>ScrollerProperties</code>","text":"<p>         Bases: <code>QtWidgets.QScrollerProperties</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.get_scroll_metric","title":"<code>get_scroll_metric(metric: ScrollmetricStr | mod.ScrollMetric) -&gt; Any</code>","text":"<p>Return scroll metric.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>ScrollmetricStr | mod.ScrollMetric</code> <p>Scroll metric to get</p> required <p>Returns:</p> Type Description <code>Any</code> <p>state</p> Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def get_scroll_metric(self, metric: ScrollmetricStr | mod.ScrollMetric) -&gt; Any:\n\"\"\"Return scroll metric.\n    Args:\n        metric: Scroll metric to get\n    Returns:\n        state\n    \"\"\"\nreturn self.scrollMetric(SCROLL_METRIC.get_enum_value(metric))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.set_scroll_metric","title":"<code>set_scroll_metric(metric: ScrollmetricStr | mod.ScrollMetric, value: Any)</code>","text":"<p>Set scroll metric.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>ScrollmetricStr | mod.ScrollMetric</code> <p>Scroll metric to set</p> required <code>value</code> <code>Any</code> <p>Value to set</p> required Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def set_scroll_metric(self, metric: ScrollmetricStr | mod.ScrollMetric, value: Any):\n\"\"\"Set scroll metric.\n    Args:\n        metric: Scroll metric to set\n        value: Value to set\n    \"\"\"\nself.setScrollMetric(SCROLL_METRIC.get_enum_value(metric), value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SizePolicy","title":"<code>SizePolicy(*args, **kwargs)</code>","text":"<p>         Bases: <code>QtWidgets.QSizePolicy</code></p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), str()):\nsuper().__init__(SIZE_POLICY[args[0]], SIZE_POLICY[args[1]])\ncase (str(), str(), str()):\nsuper().__init__(\nSIZE_POLICY[args[0]], SIZE_POLICY[args[1]], CONTROL_TYPE[args[2]]\n)\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_control_type","title":"<code>get_control_type() -&gt; ControlTypeStr</code>","text":"<p>Return control type.</p> <p>Returns:</p> Type Description <code>ControlTypeStr</code> <p>control type</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_control_type(self) -&gt; ControlTypeStr:\n\"\"\"Return control type.\n    Returns:\n        control type\n    \"\"\"\nreturn CONTROL_TYPE.inverse[self.controlType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_horizontal_policy","title":"<code>get_horizontal_policy() -&gt; SizePolicyStr</code>","text":"<p>Return size policy.</p> <p>Returns:</p> Type Description <code>SizePolicyStr</code> <p>horizontal size policy</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_horizontal_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n    Returns:\n        horizontal size policy\n    \"\"\"\nreturn SIZE_POLICY.inverse[self.horizontalPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_vertical_policy","title":"<code>get_vertical_policy() -&gt; SizePolicyStr</code>","text":"<p>Return size policy.</p> <p>Returns:</p> Type Description <code>SizePolicyStr</code> <p>vertical size policy</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_vertical_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n    Returns:\n        vertical size policy\n    \"\"\"\nreturn SIZE_POLICY.inverse[self.verticalPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.set_control_type","title":"<code>set_control_type(typ: ControlTypeStr | QtWidgets.QSizePolicy.ControlType)</code>","text":"<p>Set the control type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ControlTypeStr | QtWidgets.QSizePolicy.ControlType</code> <p>control type to set</p> required Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_control_type(self, typ: ControlTypeStr | QtWidgets.QSizePolicy.ControlType):\n\"\"\"Set the control type.\n    Args:\n        typ: control type to set\n    \"\"\"\nself.setControlType(CONTROL_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.set_horizontal_policy","title":"<code>set_horizontal_policy(policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy)</code>","text":"<p>Set the horizontal policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizePolicyStr | QtWidgets.QSizePolicy.Policy</code> <p>policy to set</p> required Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_horizontal_policy(self, policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy):\n\"\"\"Set the horizontal policy.\n    Args:\n        policy: policy to set\n    \"\"\"\nself.setHorizontalPolicy(SIZE_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.set_vertical_policy","title":"<code>set_vertical_policy(policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy)</code>","text":"<p>Set the horizontal policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizePolicyStr | QtWidgets.QSizePolicy.Policy</code> <p>policy to set</p> required Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_vertical_policy(self, policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy):\n\"\"\"Set the horizontal policy.\n    Args:\n        policy: policy to set\n    \"\"\"\nself.setVerticalPolicy(SIZE_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Slider","title":"<code>Slider(*args, **kwargs)</code>","text":"<p>         Bases: <code>widgets.AbstractSliderMixin</code>, <code>widgets.QSlider</code></p> Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nsuper().__init__(constants.ORIENTATION[args[0]], *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.get_tick_position","title":"<code>get_tick_position() -&gt; TickPositionStr</code>","text":"<p>Return tick position.</p> <p>Returns:</p> Type Description <code>TickPositionStr</code> <p>tick position</p> Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def get_tick_position(self) -&gt; TickPositionStr:\n\"\"\"Return tick position.\n    Returns:\n        tick position\n    \"\"\"\nreturn TICK_POSITION.inverse[self.tickPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.set_tick_position","title":"<code>set_tick_position(position: TickPositionAllStr | widgets.QSlider.TickPosition)</code>","text":"<p>Set the tick position for the slider.</p> <p>For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TickPositionAllStr | widgets.QSlider.TickPosition</code> <p>position for the ticks</p> required Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def set_tick_position(\nself, position: TickPositionAllStr | widgets.QSlider.TickPosition\n):\n\"\"\"Set the tick position for the slider.\n    For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".\n    Args:\n        position: position for the ticks\n    \"\"\"\nif position == \"left\":\nposition = \"above\"\nelif position == \"right\":\nposition = \"below\"\nself.setTickPosition(TICK_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SplitterHandle","title":"<code>SplitterHandle(orientation: constants.OrientationStr | constants.Orientation, parent: widgets.QSplitter, **kwargs: widgets.QSplitter)</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QSplitterHandle</code></p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def __init__(\nself,\norientation: constants.OrientationStr | constants.Orientation,\nparent: widgets.QSplitter,\n**kwargs,\n):\nori = constants.ORIENTATION.get_enum_value(orientation)\nsuper().__init__(ori, parent, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the slider.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the slider</p> required Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the slider.\n    Args:\n        orientation: orientation for the slider\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionSlider","title":"<code>StyleOptionSlider</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>widgets.QStyleOptionSlider</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.is_horizontal","title":"<code>is_horizontal() -&gt; bool</code>","text":"<p>Check if silder is horizontal.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if horizontal, else False</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n    Returns:\n        True if horizontal, else False\n    \"\"\"\nreturn self.orientation == constants.HORIZONTAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.is_vertical","title":"<code>is_vertical() -&gt; bool</code>","text":"<p>Check if silder is vertical.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if vertical, else False</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n    Returns:\n        True if vertical, else False\n    \"\"\"\nreturn self.orientation == constants.VERTICAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.set_horizontal","title":"<code>set_horizontal() -&gt; None</code>","text":"<p>Set slider orientation to horizontal.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def set_horizontal(self) -&gt; None:\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.orientation = constants.HORIZONTAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.set_vertical","title":"<code>set_vertical() -&gt; None</code>","text":"<p>Set slider orientation to vertical.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def set_vertical(self) -&gt; None:\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.orientation = constants.VERTICAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SystemTrayIcon","title":"<code>SystemTrayIcon</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QSystemTrayIcon</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.systemtrayicon.SystemTrayIcon.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the system tray icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\systemtrayicon.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the system tray icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TabWidget","title":"<code>TabWidget(closable: bool = False, detachable: bool = False, **kwargs: bool) -&gt; None</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QTabWidget</code></p> <p>Widget for managing the tabs section.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def __init__(\nself, closable: bool = False, detachable: bool = False, **kwargs\n) -&gt; None:\n# Basic initalization\nsuper().__init__(**kwargs)\nself.animator = animator.Animator(self)\nself.tabCloseRequested.connect(self.remove_tab)\nself.tab_bar = widgets.TabBar(self)\nself.setTabBar(self.tab_bar)\n# Used to keep a reference to detached tabs since their QMainWindow\n# does not have a parent\nself.detached_tabs: dict[str, DetachedTab] = {}\nif detachable:\nself.set_detachable()\nself.set_closable(closable)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.attach_tab","title":"<code>attach_tab(widget: widgets.QWidget | widgets.QLayout, name: str, icon: datatypes.IconType = None, insert_at: int | None = None)</code>","text":"<p>Re-attach tab.</p> <p>Re-attach the tab by removing the content from the DetachedTab window, closing it, and placing the content back into the DetachableTabWidget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Union[widgets.QWidget, widgets.QLayout]</code> <p>the content widget from the DetachedTab window</p> required <code>name</code> <code>str</code> <p>the name of the detached tab</p> required <code>icon</code> <code>datatypes.IconType</code> <p>the window icon for the detached tab</p> <code>None</code> <code>insert_at</code> <code>Optional[int]</code> <p>insert the re-attached tab at the given index</p> <code>None</code> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def attach_tab(\nself,\nwidget: widgets.QWidget | widgets.QLayout,\nname: str,\nicon: datatypes.IconType = None,\ninsert_at: int | None = None,\n):\n\"\"\"Re-attach tab.\n    Re-attach the tab by removing the content from the DetachedTab window,\n    closing it, and placing the content back into the DetachableTabWidget.\n    Args:\n        widget (Union[widgets.QWidget, widgets.QLayout]): the content widget\n            from the DetachedTab window\n        name (str): the name of the detached tab\n        icon (datatypes.IconType, optional): the window icon for the detached tab\n        insert_at (Optional[int], optional): insert the re-attached tab at the\n            given index\n    \"\"\"\nwidget.setParent(self)\n# Remove the reference\ndel self.detached_tabs[name]\n# Determine if the given image and the main window icon are the same.\n# If they are, then do not add the icon to the tab\nself.add_tab(widget, name, icon=icon, position=insert_at, show=True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.close_detached_tabs","title":"<code>close_detached_tabs()</code>","text":"<p>Close all tabs that are currently detached.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def close_detached_tabs(self):\n\"\"\"Close all tabs that are currently detached.\"\"\"\ntabs = list(self.detached_tabs.values())\nfor tab in tabs:\ntab.close()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.detach_tab","title":"<code>detach_tab(index: int, point: datatypes.PointType)</code>","text":"<p>Detach tab by removing its contents and placing them in a DetachedTab window.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index location of the tab to be detached</p> required <code>point</code> <code>core.QPoint</code> <p>screen pos for creating the new DetachedTab window</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(int, core.QPoint)\ndef detach_tab(self, index: int, point: datatypes.PointType):\n\"\"\"Detach tab by removing its contents and placing them in a DetachedTab window.\n    Args:\n        index (int): index location of the tab to be detached\n        point (core.QPoint): screen pos for creating the new DetachedTab window\n    \"\"\"\n# Get the tab content\nname = self.tabText(index)\nicon = self.tab_icon(index) or self.window().windowIcon()\nwidget = self.widget(index)\ntry:\nwidget_rect = widget.frameGeometry()\nexcept AttributeError:\nreturn\n# Create a new detached tab window\ndetached_tab = DetachedTab(name, widget)\ndetached_tab.set_modality(\"none\")\ndetached_tab.set_icon(icon)\ndetached_tab.setGeometry(widget_rect)\ndetached_tab.on_close.connect(self.attach_tab)\ndetached_tab.move(datatypes.to_point(point))\ndetached_tab.show()\n# Create a reference to maintain access to the detached tab\nself.detached_tabs[name] = detached_tab\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.get_tab_position","title":"<code>get_tab_position() -&gt; TabPositionStr</code>","text":"<p>Return tab position.</p> <p>Returns:</p> Type Description <code>TabPositionStr</code> <p>tab position</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return tab position.\n    Returns:\n        tab position\n    \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.get_tab_shape","title":"<code>get_tab_shape() -&gt; TabShapeStr</code>","text":"<p>Return tab shape.</p> <p>Returns:</p> Type Description <code>TabShapeStr</code> <p>tab shape</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_tab_shape(self) -&gt; TabShapeStr:\n\"\"\"Return tab shape.\n    Returns:\n        tab shape\n    \"\"\"\nreturn TAB_SHAPES.inverse[self.tabShape()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.open_widget","title":"<code>open_widget(widget: widgets.QWidget, title: str = 'Unnamed')</code>","text":"<p>Create a tab containing delivered widget.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(widgets.QWidget, str)\ndef open_widget(self, widget: widgets.QWidget, title: str = \"Unnamed\"):\n\"\"\"Create a tab containing delivered widget.\"\"\"\nself.add_tab(widget, title, icon=\"mdi.widgets\", show=True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_icon_size","title":"<code>set_icon_size(size: datatypes.SizeType)</code>","text":"<p>Set size of the icons.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_tab_position","title":"<code>set_tab_position(position: TabPositionStr | widgets.QTabWidget.TabPosition)</code>","text":"<p>Set tab position for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TabPositionStr | widgets.QTabWidget.TabPosition</code> <p>tab position to use</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab_position(self, position: TabPositionStr | widgets.QTabWidget.TabPosition):\n\"\"\"Set tab position for the tabwidget.\n    Args:\n        position: tab position to use\n    \"\"\"\nself.setTabPosition(TAB_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_tab_shape","title":"<code>set_tab_shape(shape: TabShapeStr | widgets.QTabWidget.TabShape)</code>","text":"<p>Set tab shape for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>TabShapeStr | widgets.QTabWidget.TabShape</code> <p>tab shape to use</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab_shape(self, shape: TabShapeStr | widgets.QTabWidget.TabShape):\n\"\"\"Set tab shape for the tabwidget.\n    Args:\n        shape: tab shape to use\n    \"\"\"\nself.setTabShape(TAB_SHAPES.get_enum_value(shape))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.update_tab_bar_visibility","title":"<code>update_tab_bar_visibility()</code>","text":"<p>Update visibility of the tabBar depending of the number of tabs.</p> <p>0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible need to be called explicitly, or be connected to tabInserted/tabRemoved</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def update_tab_bar_visibility(self):\n\"\"\"Update visibility of the tabBar depending of the number of tabs.\n    0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible\n    need to be called explicitly, or be connected to tabInserted/tabRemoved\n    \"\"\"\nself.tabBar().setVisible(self.count() &gt; 1)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableViewMixin","title":"<code>TableViewMixin(*args, alternating_row_colors: bool = True, word_wrap: bool = False, **kwargs: bool)</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def __init__(\nself,\n*args,\nalternating_row_colors: bool = True,\nword_wrap: bool = False,\n**kwargs,\n):\nsuper().__init__(\n*args,\nalternating_row_colors=alternating_row_colors,\nword_wrap=word_wrap,\n**kwargs,\n)\nclass_name = type(self).__name__\nself.setObjectName(class_name)\nself.setHorizontalHeader(widgets.HeaderView(\"horizontal\", parent=self))\nself.setVerticalHeader(widgets.HeaderView(\"vertical\", parent=self))\nself.setAlternatingRowColors(True)\nself.setWordWrap(False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.auto_span","title":"<code>auto_span(orientation: constants.OrientationStr | constants.Orientation = constants.HORIZONTAL, role: constants.OrientationStr | constants.Orientation = constants.DISPLAY_ROLE, start: tuple[int, int] = (0, 0), end: tuple[int, int] | None = None) -&gt; list[tuple[int, int, int, int]]</code>","text":"<p>Set spans in given direction based on same content in given role.</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def auto_span(\nself,\norientation: constants.OrientationStr\n| constants.Orientation = constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE,\nstart: tuple[int, int] = (0, 0),\nend: tuple[int, int] | None = None,\n) -&gt; list[tuple[int, int, int, int]]:\n\"\"\"Set spans in given direction based on same content in given role.\"\"\"\nis_horizontal = orientation in [constants.HORIZONTAL, \"horizontal\"]\nmodel = self.model()\nspans = []\n# figure out the ranges\nif is_horizontal:\nstart_level = max(0, start[0])\nstart_section = max(0, start[1])\nend_level = model.rowCount()\nend_section = model.columnCount()\nif end:\nend_level = min(max(0, end[0]), end_level)\nend_section = min(max(0, end[1]), end_section)\nelse:\nstart_level = max(0, start[1])\nstart_section = max(0, start[0])\nend_level = model.columnCount()\nend_section = model.rowCount()\nif end:\nend_level = min(max(0, end[1]), end_level)\nend_section = min(max(0, end[0]), end_section)\n# adjust the spans.\nfor level in range(start_level, end_level):\nmatch_start = None\nif is_horizontal:\narr = [\nmodel.index(level, i).data(role)\nfor i in range(start_section, end_section + 1)\n]\nlogger.debug(f\"{type(self).__name__}: spanning horizontal {arr}\")\nelse:\narr = [\nmodel.index(i, level).data(role)\nfor i in range(start_section, end_section + 1)\n]\nlogger.debug(f\"{type(self).__name__}: spanning vertical {arr}\")\nfor section in range(1, len(arr)):\nif arr[section] == arr[section - 1]:\nif match_start is None:\nmatch_start = section - 1\n# If this is the last cell, need to end it\nif section == end_section - start_section:\nmatch_end = section\nspan_size = match_end - match_start + 1\nbegin = match_start + start_section\nif is_horizontal:\nself.setSpan(level, begin, 1, span_size)\nspans.append((level, begin, 1, span_size))\nelse:\nspans.append((begin, level, span_size, 1))\nself.setSpan(begin, level, span_size, 1)\nelif match_start is not None:\nmatch_end = section - 1\nspan_size = match_end - match_start + 1\nbegin = match_start + start_section\nif is_horizontal:\nself.setSpan(level, begin, 1, span_size)\nspans.append((level, begin, 1, span_size))\nelse:\nself.setSpan(begin, level, span_size, 1)\nspans.append((begin, level, span_size, 1))\nmatch_start = None\nreturn spans\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.get_grid_style","title":"<code>get_grid_style() -&gt; constants.PenStyleStr</code>","text":"<p>Return grid style.</p> <p>Returns:</p> Type Description <code>constants.PenStyleStr</code> <p>grid style</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def get_grid_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return grid style.\n    Returns:\n        grid style\n    \"\"\"\nreturn constants.PEN_STYLE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.get_visible_section_span","title":"<code>get_visible_section_span(orientation: constants.OrientationStr | constants.Orientation, margin: int = 0) -&gt; tuple[int, int]</code>","text":"<p>Get a tuple containing the visible start/end indexes.</p> <p>if there are no items visible, return -1, -1</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def get_visible_section_span(\nself,\norientation: constants.OrientationStr | constants.Orientation,\nmargin: int = 0,\n) -&gt; tuple[int, int]:\n\"\"\"Get a tuple containing the visible start/end indexes.\n    if there are no items visible, return -1, -1\n    \"\"\"\nrect = self.viewport().rect()\nif orientation in [\"horizontal\", constants.HORIZONTAL]:\nstart = self.columnAt(rect.left())\ncount = self.model().columnCount()\nend = self.columnAt(rect.right())\nelse:\nstart = self.rowAt(rect.top())\ncount = self.model().rowCount()\nend = self.rowAt(rect.bottom())\nif count == 0:\nreturn (-1, -1)\nstart = max(0, start - margin)\nend = count if end == -1 else min(end + margin, count)\nreturn (start, end)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.set_grid_style","title":"<code>set_grid_style(style: constants.PenStyleStr | constants.PenStyle)</code>","text":"<p>Set grid style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | constants.PenStyle</code> <p>grid style to use</p> required Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def set_grid_style(self, style: constants.PenStyleStr | constants.PenStyle):\n\"\"\"Set grid style.\n    Args:\n        style: grid style to use\n    \"\"\"\nself.setGridStyle(constants.PEN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.set_sorting_enabled","title":"<code>set_sorting_enabled(enabled: bool, do_sort: bool = False)</code>","text":"<p>Hack to avoid direct sort when setting sorting enabled.</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\n\"\"\"Hack to avoid direct sort when setting sorting enabled.\"\"\"\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableWidgetItem","title":"<code>TableWidgetItem</code>","text":"<p>         Bases: <code>QtWidgets.QTableWidgetItem</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.CheckStateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_editable","title":"<code>set_editable(editable: bool)</code>","text":"<p>Set whether this item is user-editable.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_editable(self, editable: bool):\n\"\"\"Set whether this item is user-editable.\"\"\"\nself.set_flag(\"editable\", editable)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_flag","title":"<code>set_flag(flag_name: constants.ItemFlagStr | constants.ItemFlag, value: bool)</code>","text":"<p>Set a flag based on str name.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_flag(\nself, flag_name: constants.ItemFlagStr | constants.ItemFlag, value: bool\n):\n\"\"\"Set a flag based on str name.\"\"\"\nflag = constants.ITEM_FLAG.get_enum_value(flag_name)\nif value:\nself.setFlags(self.flags() | flag)\nelse:\nself.setFlags(self.flags() &amp; ~flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_text_alignment","title":"<code>set_text_alignment(horizontal: constants.HorizontalAlignmentStr | constants.AlignmentFlag | None = None, vertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None)</code>","text":"<p>Set text alignment of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>constants.HorizontalAlignmentStr | constants.AlignmentFlag | None</code> <p>horizontal text alignment to use</p> <code>None</code> <code>vertical</code> <code>constants.VerticalAlignmentStr | constants.AlignmentFlag | None</code> <p>vertical text alignment to use</p> <code>None</code> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr\n| constants.AlignmentFlag\n| None = None,\nvertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n    Args:\n        horizontal: horizontal text alignment to use\n        vertical: vertical text alignment to use\n    \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT.get_enum_value(vertical)\ncase _, None:\nflag = constants.H_ALIGNMENT.get_enum_value(horizontal)\ncase _, _:\nflag = constants.V_ALIGNMENT.get_enum_value(\nvertical\n) | constants.H_ALIGNMENT.get_enum_value(horizontal)\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TextEditMixin","title":"<code>TextEditMixin(*args, **kwargs) -&gt; None</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self.on_value_change)\nself.selecter = texteditselecter.TextEditSelecter(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_auto_formatting","title":"<code>get_auto_formatting() -&gt; AutoFormattingStr</code>","text":"<p>Get the current auto formatting mode.</p> <p>Returns:</p> Type Description <code>AutoFormattingStr</code> <p>Auto formatting mode</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_auto_formatting(self) -&gt; AutoFormattingStr:\n\"\"\"Get the current auto formatting mode.\n    Returns:\n        Auto formatting mode\n    \"\"\"\nreturn AUTO_FORMATTING.inverse[self.autoFormatting()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_line_wrap_mode","title":"<code>get_line_wrap_mode() -&gt; LineWrapModeStr</code>","text":"<p>Get the current wrap mode.</p> <p>Returns:</p> Type Description <code>LineWrapModeStr</code> <p>Wrap mode</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n    Returns:\n        Wrap mode\n    \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_word_wrap_mode","title":"<code>get_word_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"<p>Get the current word wrap mode.</p> <p>Returns:</p> Type Description <code>gui.textoption.WordWrapModeStr</code> <p>Word wrap mode</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n    Returns:\n        Word wrap mode\n    \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_auto_formatting","title":"<code>set_auto_formatting(mode: AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag)</code>","text":"<p>Set auto formatting mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag</code> <p>auto formatting mode to use</p> required Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_auto_formatting(\nself, mode: AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag\n):\n\"\"\"Set auto formatting mode.\n    Args:\n        mode: auto formatting mode to use\n    \"\"\"\nself.setAutoFormatting(AUTO_FORMATTING.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_line_wrap_mode","title":"<code>set_line_wrap_mode(mode: LineWrapModeStr | widgets.QTextEdit.LineWrapMode)</code>","text":"<p>Set line wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LineWrapModeStr | widgets.QTextEdit.LineWrapMode</code> <p>line wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_line_wrap_mode(self, mode: LineWrapModeStr | widgets.QTextEdit.LineWrapMode):\n\"\"\"Set line wrap mode.\n    Args:\n        mode: line wrap mode to use\n    \"\"\"\nself.setLineWrapMode(LINE_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_word_wrap_mode","title":"<code>set_word_wrap_mode(mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode)</code>","text":"<p>Set word wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode</code> <p>word wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_word_wrap_mode(\nself, mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode\n):\n\"\"\"Set word wrap mode.\n    Args:\n        mode: word wrap mode to use\n    \"\"\"\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ToolButton","title":"<code>ToolButton</code>","text":"<p>         Bases: <code>widgets.AbstractButtonMixin</code>, <code>widgets.QToolButton</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.get_arrow_type","title":"<code>get_arrow_type() -&gt; constants.ArrowTypeStr</code>","text":"<p>Return arrow type.</p> <p>Returns:</p> Type Description <code>constants.ArrowTypeStr</code> <p>arrow type</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_arrow_type(self) -&gt; constants.ArrowTypeStr:\n\"\"\"Return arrow type.\n    Returns:\n        arrow type\n    \"\"\"\nreturn constants.ARROW_TYPE.inverse[self.arrowType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.get_popup_mode","title":"<code>get_popup_mode() -&gt; PopupModeStr</code>","text":"<p>Return popup mode.</p> <p>Returns:</p> Type Description <code>PopupModeStr</code> <p>popup mode</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_popup_mode(self) -&gt; PopupModeStr:\n\"\"\"Return popup mode.\n    Returns:\n        popup mode\n    \"\"\"\nreturn POPUP_MODE.inverse[self.popupMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.get_style","title":"<code>get_style() -&gt; constants.ToolButtonStyleStr</code>","text":"<p>Return toolbutton style.</p> <p>Returns:</p> Type Description <code>constants.ToolButtonStyleStr</code> <p>toolbutton style</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return toolbutton style.\n    Returns:\n        toolbutton style\n    \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_arrow_type","title":"<code>set_arrow_type(mode: constants.ArrowTypeStr | constants.ArrowType)</code>","text":"<p>Set the arrow type of the toolbutton.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ArrowTypeStr | constants.ArrowType</code> <p>arrow type to use</p> required Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_arrow_type(self, mode: constants.ArrowTypeStr | constants.ArrowType):\n\"\"\"Set the arrow type of the toolbutton.\n    Args:\n        mode: arrow type to use\n    \"\"\"\nself.setArrowType(constants.ARROW_TYPE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_popup_mode","title":"<code>set_popup_mode(mode: PopupModeStr | widgets.QToolButton.ToolButtonPopupMode)</code>","text":"<p>Set the popup mode of the toolbutton.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PopupModeStr | widgets.QToolButton.ToolButtonPopupMode</code> <p>popup mode to use</p> required Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_popup_mode(\nself, mode: PopupModeStr | widgets.QToolButton.ToolButtonPopupMode\n):\n\"\"\"Set the popup mode of the toolbutton.\n    Args:\n        mode: popup mode to use\n    \"\"\"\nself.setPopupMode(POPUP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_style","title":"<code>set_style(style: constants.ToolButtonStyleStr | constants.ToolButtonStyle)</code>","text":"<p>Set the toolbutton style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.ToolButtonStyleStr | constants.ToolButtonStyle</code> <p>style to use</p> required Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_style(self, style: constants.ToolButtonStyleStr | constants.ToolButtonStyle):\n\"\"\"Set the toolbutton style.\n    Args:\n        style: style to use\n    \"\"\"\nself.setToolButtonStyle(constants.TOOLBUTTON_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeViewMixin","title":"<code>TreeViewMixin(*args, root_is_decorated: bool = True, all_columns_show_focus: bool = True, uniform_row_heights: bool = True, alternating_row_colors: bool = True, selection_mode: str = 'extended', **kwargs: str)</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def __init__(\nself,\n*args,\nroot_is_decorated: bool = True,\nall_columns_show_focus: bool = True,\nuniform_row_heights: bool = True,\nalternating_row_colors: bool = True,\nselection_mode: str = \"extended\",\n**kwargs,\n):\nsuper().__init__(\n*args,\nroot_is_decorated=root_is_decorated,\nall_columns_show_focus=all_columns_show_focus,\nuniform_row_heights=uniform_row_heights,\nalternating_row_colors=alternating_row_colors,\nselection_mode=selection_mode,\n**kwargs,\n)\nself.setStyleSheet(\"QTreeView::item { padding: 5px }\")\nself.h_header = widgets.HeaderView(\"horizontal\", parent=self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.set_expanded","title":"<code>set_expanded(index: core.ModelIndex | Iterable[core.ModelIndex], expanded: bool = True)</code>","text":"<p>Set expaned state of an index or an Iterable of indexes.</p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def set_expanded(\nself, index: core.ModelIndex | Iterable[core.ModelIndex], expanded: bool = True\n):\n\"\"\"Set expaned state of an index or an Iterable of indexes.\"\"\"\nmatch index:\ncase Iterable():\nfor idx in index:\nself.setExpanded(idx, expanded)\ncase _:\nself.setExpanded(index, expanded)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.set_sorting_enabled","title":"<code>set_sorting_enabled(enabled: bool, do_sort: bool = False)</code>","text":"<p>Hack to avoid direct sort when setting sorting enabled.</p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\n\"\"\"Hack to avoid direct sort when setting sorting enabled.\"\"\"\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeWidgetItem","title":"<code>TreeWidgetItem</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtWidgets.QTreeWidgetItem</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_checkstate","title":"<code>get_checkstate(column: int = 0) -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>column</p> <code>0</code> <p>Returns:</p> Type Description <code>constants.CheckStateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_checkstate(self, column: int = 0) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Args:\n        column: column\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState(column)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_child_indicator_policy","title":"<code>get_child_indicator_policy() -&gt; ChildIndicatorPolicyStr</code>","text":"<p>Return current child indicator policy.</p> <p>Returns:</p> Type Description <code>ChildIndicatorPolicyStr</code> <p>child indicator policy</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_child_indicator_policy(self) -&gt; ChildIndicatorPolicyStr:\n\"\"\"Return current child indicator policy.\n    Returns:\n        child indicator policy\n    \"\"\"\nreturn CHILD_INDICATOR_POLICY.inverse[self.childIndicatorPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_children","title":"<code>get_children(recursive: bool = False) -&gt; listdelegators.BaseListDelegator[QtWidgets.QTreeWidgetItem]</code>","text":"<p>Get children of this item.</p> <p>recursive option is written iteratively to also support original QTreeWidgetItems.</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_children(\nself, recursive: bool = False\n) -&gt; listdelegators.BaseListDelegator[QtWidgets.QTreeWidgetItem]:\n\"\"\"Get children of this item.\n    recursive option is written iteratively to also support original QTreeWidgetItems.\n    \"\"\"\nif not recursive:\nreturn [self.child(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.child(i) for i in range(node.childCount()))\nnodes = items\nreturn listdelegators.BaseListDelegator(results[1:])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState, column: int = 0)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required <code>column</code> <code>int</code> <p>column</p> <code>0</code> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_checkstate(\nself, state: constants.CheckStateStr | constants.CheckState, column: int = 0\n):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n        column: column\n    \"\"\"\nself.setCheckState(column, constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_child_indicator_policy","title":"<code>set_child_indicator_policy(policy: ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy)</code>","text":"<p>Set the child indicator policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy</code> <p>child indicator policy</p> required Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_child_indicator_policy(\nself, policy: ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy\n):\n\"\"\"Set the child indicator policy.\n    Args:\n        policy: child indicator policy\n    \"\"\"\nself.setChildIndicatorPolicy(CHILD_INDICATOR_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType, column: int = 0)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required <code>column</code> <code>int</code> <p>column</p> <code>0</code> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType, column: int = 0):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n        column: column\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(column, icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.UndoView","title":"<code>UndoView</code>","text":"<p>         Bases: <code>widgets.ListViewMixin</code>, <code>widgets.QUndoView</code></p>"},{"location":"api/widgets.html#prettyqt.widgets.undoview.UndoView.set_clean_icon","title":"<code>set_clean_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the clean button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>def set_clean_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the clean button.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setCleanIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.WidgetMixin","title":"<code>WidgetMixin(*args, margin: int | None = None, **kwargs: int | None)</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def __init__(self, *args, margin: int | None = None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fx = fx.Fx(self)\nif margin is not None:\nself.set_margin(margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.add_action","title":"<code>add_action(text: str | gui.Action, parent: widgets.QWidget | None = None, data: Any = None, **kwargs: datatypes.VariantType) -&gt; gui.Action</code>","text":"<p>Add an action to the menu.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | gui.Action</code> <p>Label for the action</p> required <code>parent</code> <code>widgets.QWidget | None</code> <p>parent</p> <code>None</code> <code>data</code> <code>Any</code> <p>data for the Action</p> <code>None</code> <code>kwargs</code> <code>datatypes.VariantType</code> <p>kwargs passed to action ctor</p> <code>{}</code> <p>Returns:</p> Type Description <code>gui.Action</code> <p>Action added to menu</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_action(\nself,\ntext: str | gui.Action,\nparent: widgets.QWidget | None = None,\ndata: Any = None,\n**kwargs: datatypes.VariantType,\n) -&gt; gui.Action:\n\"\"\"Add an action to the menu.\n    Args:\n        text: Label for the action\n        parent: parent\n        data: data for the Action\n        kwargs: kwargs passed to action ctor\n    Returns:\n        Action added to menu\n    \"\"\"\nif isinstance(text, str):\naction = gui.Action(parent=parent or self, text=text, **kwargs)\nelse:\naction = text\naction.setParent(self)\nself.addAction(action)\naction.setData(data)\nreturn action\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.add_shortcut","title":"<code>add_shortcut(keysequence: datatypes.KeyCombinationType, callback: Callable | None = None, context: constants.ShortcutContextStr = 'window') -&gt; gui.Shortcut</code>","text":"<p>Add shortcut to widget.</p> <p>Adds as shortcut for given callback and context to this widget.</p> <p>Parameters:</p> Name Type Description Default <code>keysequence</code> <code>datatypes.KeyCombinationType</code> <p>Key sequence</p> required <code>callback</code> <code>Callable | None</code> <p>Callback for the shortcut</p> <code>None</code> <code>context</code> <code>constants.ShortcutContextStr</code> <p>context for this shortcut</p> <code>'window'</code> <p>Returns:</p> Type Description <code>gui.Shortcut</code> <p>shortcut object</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\n\"\"\"Add shortcut to widget.\n    Adds as shortcut for given callback and context to this widget.\n    Args:\n        keysequence: Key sequence\n        callback: Callback for the shortcut\n        context: context for this shortcut\n    Returns:\n        shortcut object\n    \"\"\"\nreturn gui.Shortcut(\ndatatypes.to_keysequence(keysequence),\nself,\ncallback,\ncontext=constants.SHORTCUT_CONTEXT.get_enum_value(context),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.child_at","title":"<code>child_at(*args, typ: type[widgets.QWidget] | None = None)</code>","text":"<p>Get child widget at position. If type is given, search parents recursively.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def child_at(self, *args, typ: type[widgets.QWidget] | None = None):\n\"\"\"Get child widget at position. If type is given, search parents recursively.\"\"\"\nchild = super().childAt(*args)\nif typ is None or isinstance(child, typ):\nreturn child\nwhile child := child.parent():\nif isinstance(child, typ):\nreturn child\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.delete_children","title":"<code>delete_children()</code>","text":"<p>Delete all children of the specified QObject.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def delete_children(self):\n\"\"\"Delete all children of the specified QObject.\"\"\"\nif hasattr(self, \"clear\"):\nreturn self.clear()\nlayout = self.layout()\nwhile layout.count():\nitem = layout.takeAt(0)\nif widget := item.widget():\nwidget.deleteLater()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_background_role","title":"<code>get_background_role() -&gt; gui.palette.RoleStr</code>","text":"<p>Get background role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_background_role(self) -&gt; gui.palette.RoleStr:\n\"\"\"Get background role for this widget.\"\"\"\nreturn gui.palette.ROLE.inverse[self.backgroundRole()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_context_menu_policy","title":"<code>get_context_menu_policy() -&gt; constants.ContextPolicyStr</code>","text":"<p>Return current contextmenu policy.</p> <p>Returns:</p> Type Description <code>constants.ContextPolicyStr</code> <p>contextmenu policy</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_context_menu_policy(self) -&gt; constants.ContextPolicyStr:\n\"\"\"Return current contextmenu policy.\n    Returns:\n        contextmenu policy\n    \"\"\"\nreturn constants.CONTEXT_POLICY.inverse[self.contextMenuPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_focus_policy","title":"<code>get_focus_policy() -&gt; constants.FocusPolicyStr</code>","text":"<p>Return waay the widget accepts keyboard focus.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>constants.FocusPolicyStr</code> <p>Focus policy</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return waay the widget accepts keyboard focus.\n    Returns:\n        str: Focus policy\n    \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_foreground_role","title":"<code>get_foreground_role() -&gt; gui.palette.RoleStr</code>","text":"<p>Set foreground role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_foreground_role(self) -&gt; gui.palette.RoleStr:\n\"\"\"Set foreground role for this widget.\"\"\"\nreturn gui.palette.ROLE.inverse[self.foregroundRole()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"<p>Get the window icon (returns None if not existing).</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\n\"\"\"Get the window icon (returns None if not existing).\"\"\"\nicon = super().windowIcon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_modality","title":"<code>get_modality() -&gt; constants.WindowModalityStr</code>","text":"<p>Get the current modality modes as a string.</p> <p>Returns:</p> Type Description <code>constants.WindowModalityStr</code> <p>modality mode</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_modality(self) -&gt; constants.WindowModalityStr:\n\"\"\"Get the current modality modes as a string.\n    Returns:\n        modality mode\n    \"\"\"\nreturn constants.WINDOW_MODALITY.inverse[self.windowModality()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_size_policy","title":"<code>get_size_policy() -&gt; widgets.SizePolicy</code>","text":"<p>Get size policy.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_size_policy(self) -&gt; widgets.SizePolicy:\n\"\"\"Get size policy.\"\"\"\nqpol = self.sizePolicy()\nif isinstance(qpol, widgets.SizePolicy):\nreturn qpol\nreturn widgets.SizePolicy.clone(qpol)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_window_state","title":"<code>get_window_state() -&gt; constants.WindowStateStr</code>","text":"<p>Return current window state.</p> <p>Returns:</p> Type Description <code>constants.WindowStateStr</code> <p>window state</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_window_state(self) -&gt; constants.WindowStateStr:\n\"\"\"Return current window state.\n    Returns:\n        window state\n    \"\"\"\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.grab_keyboard_events","title":"<code>grab_keyboard_events() -&gt; Iterator[None]</code>","text":"<p>Context manager to grab keyboard events.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef grab_keyboard_events(self) -&gt; Iterator[None]:\n\"\"\"Context manager to grab keyboard events.\"\"\"\nself.grabKeyboard()\nyield None\nself.releaseKeyboard()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.grab_mouse_events","title":"<code>grab_mouse_events(cursor_shape: constants.CursorShapeStr | None = None) -&gt; Iterator[None]</code>","text":"<p>Context manager to grab mouse events.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef grab_mouse_events(\nself, cursor_shape: constants.CursorShapeStr | None = None\n) -&gt; Iterator[None]:\n\"\"\"Context manager to grab mouse events.\"\"\"\nif cursor_shape is not None:\nself.grabMouse(constants.CURSOR_SHAPE[cursor_shape])\nelse:\nself.grabMouse()\nyield None\nself.releaseMouse()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.insertAction","title":"<code>insertAction(position_or_action: int | gui.QAction, action: gui.QAction)</code>","text":"<p>Extend insertAction to also allow int index.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def insertAction(self, position_or_action: int | gui.QAction, action: gui.QAction):\n\"\"\"Extend insertAction to also allow int index.\"\"\"\nif isinstance(position_or_action, int):\nactions = self.actions()\nif len(actions) == 0 or position_or_action &gt;= len(actions):\n# Insert as the first action or the last action.\nreturn super().addAction(action)\nposition_or_action = actions[position_or_action]\nsuper().insertAction(position_or_action, action)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.map_from","title":"<code>map_from(widget: widgets.QWidget | Literal['global', 'parent', 'window'], pos_or_rect: widgets.QWidget | Literal['global', 'parent', 'window']) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF</code>","text":"<p>Map a point or rect from a widget, global position or parent.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def map_from(\nself,\nwidget: widgets.QWidget | Literal[\"global\", \"parent\", \"window\"],\npos_or_rect,\n) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF:\n\"\"\"Map a point or rect from a widget, global position or parent.\"\"\"\nmatch pos_or_rect:\ncase int(), int():\npos_or_rect = core.QPoint(*pos_or_rect)\ncase float(), float():\npos_or_rect = core.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\npos_or_rect = core.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\npos_or_rect = core.QRectF(*pos_or_rect)\nmatch pos_or_rect, widget:\ncase core.QRect() | core.QRectF(), widgets.QWidget():\ntop_left = super().mapFrom(widget, pos_or_rect.topLeft())\nbottom_right = super().mapFrom(widget, pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), widgets.QWidget():\nreturn super().mapFrom(widget, pos_or_rect)\ncase core.QRect() | core.QRectF(), \"parent\":\ntop_left = super().mapFromParent(pos_or_rect.topLeft())\nbottom_right = super().mapFromParent(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"parent\":\nreturn super().mapFromParent(pos_or_rect)\ncase core.QRect() | core.QRectF(), \"window\":\ntop_left = super().mapFrom(self.window(), pos_or_rect.topLeft())\nbottom_right = super().mapFrom(self.window(), pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"window\":\nreturn super().mapFrom(self.window(), pos_or_rect)\ncase core.QRect() | core.QRectF(), \"global\":\ntop_left = super().mapFromGlobal(pos_or_rect.topLeft())\nbottom_right = super().mapFromGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"global\":\nreturn super().mapFromGlobal(pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.map_to","title":"<code>map_to(widget: widgets.QWidget | Literal['global', 'parent', 'window'], pos_or_rect: widgets.QWidget | Literal['global', 'parent', 'window']) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF</code>","text":"<p>Map a point or rect to a widget, global position or parent.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def map_to(\nself,\nwidget: widgets.QWidget | Literal[\"global\", \"parent\", \"window\"],\npos_or_rect,\n) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF:\n\"\"\"Map a point or rect to a widget, global position or parent.\"\"\"\nmatch pos_or_rect:\ncase int(), int():\npos_or_rect = core.QPoint(*pos_or_rect)\ncase float(), float():\npos_or_rect = core.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\npos_or_rect = core.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\npos_or_rect = core.QRectF(*pos_or_rect)\nmatch pos_or_rect, widget:\ncase core.QRect() | core.QRectF(), widgets.QWidget():\ntop_left = super().mapTo(widget, pos_or_rect.topLeft())\nbottom_right = super().mapTo(widget, pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), widgets.QWidget():\nreturn super().mapTo(widget, pos_or_rect)\ncase core.QRect() | core.QRectF(), \"parent\":\ntop_left = super().mapToParent(pos_or_rect.topLeft())\nbottom_right = super().mapToParent(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"parent\":\nreturn super().mapToParent(pos_or_rect)\ncase core.QRect() | core.QRectF(), \"window\":\ntop_left = super().mapTo(self.window(), pos_or_rect.topLeft())\nbottom_right = super().mapTo(self.window(), pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"window\":\nreturn super().mapTo(self.window(), pos_or_rect)\ncase core.QRect() | core.QRectF(), \"global\":\ntop_left = super().mapToGlobal(pos_or_rect.topLeft())\nbottom_right = super().mapToGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"global\":\nreturn super().mapToGlobal(pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.position_on","title":"<code>position_on(where: PositionPossibilityType, how: Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right'] = 'center', scale_ratio: int | None = None, x_offset: int = 0, y_offset: int = 0)</code>","text":"<p>Position widget on another widget / window / screen.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>PositionPossibilityType</code> <p>where to positin on</p> required <code>how</code> <code>Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right']</code> <p>How to align</p> <code>'center'</code> <code>scale_ratio</code> <code>int | None</code> <p>Resize to scale_ratio * target size</p> <code>None</code> <code>x_offset</code> <code>int</code> <p>additional x offset for final position</p> <code>0</code> <code>y_offset</code> <code>int</code> <p>additional y offset for final position</p> <code>0</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def position_on(\nself,\nwhere: PositionPossibilityType,\nhow: Literal[\n\"center\",\n\"top\",\n\"left\",\n\"bottom\",\n\"right\",\n\"top_left\",\n\"top_right\",\n\"bottom_left\",\n\"bottom_right\",\n] = \"center\",\nscale_ratio: int | None = None,\nx_offset: int = 0,\ny_offset: int = 0,\n):\n\"\"\"Position widget on another widget / window / screen.\n    Arguments:\n        where: where to positin on\n        how: How to align\n        scale_ratio: Resize to scale_ratio * target size\n        x_offset: additional x offset for final position\n        y_offset: additional y offset for final position\n    \"\"\"\ndo_scale = True\nmatch where:\ncase \"mouse\":\ngeom = core.Rect(gui.Cursor.pos(), gui.Cursor.pos())\ndo_scale = False\ncase core.QPoint():\ngeom = core.Rect(where, where)\ndo_scale = False\ncase (int(), int()):\np = core.Point(*where)\ngeom = core.Rect(p, p)\ndo_scale = False\ncase (int(), int(), int(), int()):\ngeom = core.Rect(*where)\ncase \"parent\":\ngeom = self.parent().frameGeometry()\ncase \"window\":\ngeom = self.window().frameGeometry()\ncase widgets.QWidget():\ngeom = where.frameGeometry()\ncase core.QRect():\ngeom = where\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\ncase _:\nraise ValueError(where)\nif scale_ratio is not None and do_scale:\nself.resize(\nint(geom.width() * scale_ratio),\nint(geom.height() * scale_ratio),\n)\nown_geo = self.frameGeometry()\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top() + own_geo.height() // 2)\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom() - own_geo.height() // 2)\ncase \"left\":\nnew = core.Point(geom.left() + own_geo.width() // 2, geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right() - own_geo.width() // 2, geom.center().y())\ncase \"top_right\":\nnew = core.Point(\ngeom.right() - own_geo.width() // 2,\ngeom.top() + own_geo.height() // 2,\n)\ncase \"top_left\":\nnew = core.Point(\ngeom.left() + own_geo.width() // 2,\ngeom.top() + own_geo.height() // 2,\n)\ncase \"bottom_right\":\nnew = core.Point(\ngeom.right() - own_geo.width() // 2,\ngeom.bottom() - own_geo.height() // 2,\n)\ncase \"bottom_left\":\nnew = core.Point(\ngeom.left() + own_geo.width() // 2,\ngeom.bottom() - own_geo.height() // 2,\n)\ncase _:\nraise ValueError(how)\nnew = core.Point(new.x() + x_offset, new.y() + y_offset)\nown_geo.moveCenter(new)\nself.move(own_geo.topLeft())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.raise_to_top","title":"<code>raise_to_top()</code>","text":"<p>Brings a widget to top with all means available.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def raise_to_top(self):\n\"\"\"Brings a widget to top with all means available.\"\"\"\nif sys.platform.startswith(\"win\"):\nfrom prettyqt.utils.platforms.windows import misc\nmisc.raise_to_top()\n# state = (self.windowState() &amp; ~Qt.WindowMinimized) | Qt.WindowActive\n# self.setWindowState(state)\nself.raise_()\nself.show()\nself.activateWindow()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_background_role","title":"<code>set_background_role(role: gui.palette.RoleStr | gui.Palette.ColorRole)</code>","text":"<p>Get foreground role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_background_role(self, role: gui.palette.RoleStr | gui.Palette.ColorRole):\n\"\"\"Get foreground role for this widget.\"\"\"\nself.setBackgroundRole(gui.palette.ROLE.get_enum_value(role))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_context_menu_policy","title":"<code>set_context_menu_policy(policy: constants.ContextPolicyStr | constants.ContextMenuPolicy)</code>","text":"<p>Set contextmenu policy for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.ContextPolicyStr | constants.ContextMenuPolicy</code> <p>contextmenu policy to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_context_menu_policy(\nself, policy: constants.ContextPolicyStr | constants.ContextMenuPolicy\n):\n\"\"\"Set contextmenu policy for given item view.\n    Args:\n        policy: contextmenu policy to use\n    \"\"\"\nself.setContextMenuPolicy(constants.CONTEXT_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_focus_policy","title":"<code>set_focus_policy(policy: constants.FocusPolicyStr | constants.FocusPolicy)</code>","text":"<p>Set the way the widget accepts keyboard focus.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>str</code> <p>Focus policy</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_focus_policy(self, policy: constants.FocusPolicyStr | constants.FocusPolicy):\n\"\"\"Set the way the widget accepts keyboard focus.\n    Args:\n        policy (str): Focus policy\n    \"\"\"\nself.setFocusPolicy(constants.FOCUS_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_font","title":"<code>set_font(font_name: gui.QFont | str | None = None, font_size: int | None = None, weight: int | None = None, italic: bool = False) -&gt; gui.QFont</code>","text":"<p>Set the font for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_font(\nself,\nfont_name: gui.QFont | str | None = None,\nfont_size: int | None = None,\nweight: int | None = None,\nitalic: bool = False,\n) -&gt; gui.QFont:\n\"\"\"Set the font for this widget.\"\"\"\nif isinstance(font_name, gui.QFont):\nsuper().setFont(font_name)\nreturn font_name\nif font_size is None:\nfont_size = -1\nif weight is None:\nweight = -1\nif font_name is None:\nfont_name = self.font().family()\nfont = gui.Font(font_name, font_size, weight, italic)\nsuper().setFont(font)\nreturn font\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_foreground_role","title":"<code>set_foreground_role(role: gui.palette.RoleStr | gui.Palette.ColorRole)</code>","text":"<p>Set foreground role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_foreground_role(self, role: gui.palette.RoleStr | gui.Palette.ColorRole):\n\"\"\"Set foreground role for this widget.\"\"\"\nself.setForegroundRole(gui.palette.ROLE.get_enum_value(role))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the window icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the window icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon, color=colors.WINDOW_ICON_COLOR)\nsuper().setWindowIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_layout","title":"<code>set_layout(layout: LayoutStr | widgets.QLayout, margin: int | None = None, **kwargs: datatypes.VariantType) -&gt; widgets.QLayout</code>","text":"<p>Quick way to set a layout.</p> <p>Sets layout to given layout, also allows setting margin and spacing.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>LayoutStr | widgets.QLayout</code> <p>Layout to set</p> required <code>margin</code> <code>int | None</code> <p>margin to use in pixels</p> <code>None</code> <code>kwargs</code> <code>datatypes.VariantType</code> <p>keyword arguments passed to layout</p> <code>{}</code> <p>Returns:</p> Type Description <code>widgets.QLayout</code> <p>Layout</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_layout(\nself,\nlayout: LayoutStr | widgets.QLayout,\nmargin: int | None = None,\n**kwargs: datatypes.VariantType,\n) -&gt; widgets.QLayout:\n\"\"\"Quick way to set a layout.\n    Sets layout to given layout, also allows setting margin and spacing.\n    Args:\n        layout: Layout to set\n        margin: margin to use in pixels\n        kwargs: keyword arguments passed to layout\n    Returns:\n        Layout\n    \"\"\"\nfrom prettyqt import custom_widgets\nmatch layout:\ncase \"horizontal\":\nlayout = widgets.HBoxLayout(**kwargs)\ncase \"vertical\":\nlayout = widgets.VBoxLayout(**kwargs)\ncase \"grid\":\nlayout = widgets.GridLayout(**kwargs)\ncase \"form\":\nlayout = widgets.FormLayout(**kwargs)\ncase \"stacked\":\nlayout = widgets.StackedLayout(**kwargs)\ncase \"flow\":\nlayout = custom_widgets.FlowLayout(**kwargs)\ncase \"border\":\nlayout = custom_widgets.BorderLayout(**kwargs)\ncase widgets.QLayout():\nlayout = layout\ncase _:\nraise ValueError(f\"Invalid Layout {layout}\")\nself.setLayout(layout)\nif margin is not None:\nlayout.set_margin(margin)\nreturn layout\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_modality","title":"<code>set_modality(modality: constants.WindowModalityStr | constants.WindowModality)</code>","text":"<p>Set modality for the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>constants.WindowModalityStr | constants.WindowModality</code> <p>modality for the main window</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_modality(\nself, modality: constants.WindowModalityStr | constants.WindowModality\n):\n\"\"\"Set modality for the dialog.\n    Args:\n        modality: modality for the main window\n    \"\"\"\nself.setWindowModality(constants.WINDOW_MODALITY.get_enum_value(modality))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_size_policy","title":"<code>set_size_policy(horizontal: widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None = None, vertical: widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None = None)</code>","text":"<p>Set the size policy.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None</code> <p>horizontal size policy</p> <code>None</code> <code>vertical</code> <code>widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None</code> <p>vertical size policy</p> <code>None</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr\n| widgets.QSizePolicy.Policy\n| None = None,\nvertical: widgets.sizepolicy.SizePolicyStr\n| widgets.QSizePolicy.Policy\n| None = None,\n):\n\"\"\"Set the size policy.\n    Args:\n        horizontal: horizontal size policy\n        vertical: vertical size policy\n    \"\"\"\nsp = self.get_size_policy()\nif horizontal is not None:\nsp.set_horizontal_policy(horizontal)\nif vertical is not None:\nsp.set_vertical_policy(vertical)\nself.setSizePolicy(sp)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_tooltip","title":"<code>set_tooltip(tooltip: str | datatypes.PathType, size: datatypes.SizeType | None = None, rich_text: bool = False)</code>","text":"<p>Set a tooltip for this widget.</p> <p>In image can get displayed by passing a PathLike object.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\nrich_text: bool = False,\n):\n\"\"\"Set a tooltip for this widget.\n    In image can get displayed by passing a PathLike object.\n    \"\"\"\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, core.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nif rich_text:\ntooltip = f\"&lt;html&gt;{html.escape(tooltip)}&lt;/html&gt;\"\nsuper().setToolTip(tooltip)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_window_state","title":"<code>set_window_state(state: constants.WindowStateStr | constants.WindowState)</code>","text":"<p>Set window state for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.WindowStateStr | constants.WindowState</code> <p>window state to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_window_state(self, state: constants.WindowStateStr | constants.WindowState):\n\"\"\"Set window state for given item view.\n    Args:\n        state: window state to use\n    \"\"\"\nself.setWindowState(constants.WINDOW_STATES.get_enum_value(state))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.show_tooltip","title":"<code>show_tooltip(duration: int | None = None)</code>","text":"<p>Show the tooltip of this widget for given time.</p> <p>When no duration is given, it will get calculated based on length.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def show_tooltip(self, duration: int | None = None):\n\"\"\"Show the tooltip of this widget for given time.\n    When no duration is given, it will get calculated based on length.\n    \"\"\"\nif duration is None:\nduration = -1  # automatic\npos = self.map_to(\"global\", (0, 0))\nwidgets.ToolTip.showText(pos, self.toolTip(), msecShowTime=duration)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.toggle_fullscreen","title":"<code>toggle_fullscreen() -&gt; bool</code>","text":"<p>Toggle between fullscreen and regular size.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def toggle_fullscreen(self) -&gt; bool:\n\"\"\"Toggle between fullscreen and regular size.\"\"\"\nif self.isFullScreen():\nself.showNormal()\nreturn False\nelse:\nself.showFullScreen()\nreturn True\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.toggle_maximized","title":"<code>toggle_maximized() -&gt; bool</code>","text":"<p>Toggle between maximized and regular size.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def toggle_maximized(self) -&gt; bool:\n\"\"\"Toggle between maximized and regular size.\"\"\"\nif self.isMaximized():\nself.showNormal()\nreturn False\nelse:\nself.showMaximized()\nreturn True\n</code></pre>"},{"location":"api_guidelines/bindings.html","title":"Bindings","text":"<p>PrettyQt includes its own layer to both support PySide6 and PyQt6. The logic for choosing one of these frameworks mirrors the one from QtPy, which is the most widely used package for supporting multiple Qt bindings. That should ensure that this framework can be used in conjunction with other packages which build on QtPy.</p> <p>The logic for choosing one the bindings basically works like this:</p> <ol> <li>If one of the two bindings was already imported, use that binding.</li> <li>Check the environment variable QT_API and try to import that binding.</li> <li>If that binding is not installed, try the other one.</li> </ol> <p>PrettyQt only supports the most recent versions (LTS 6.5) of these bindings. Reason for that is that these are the first versions which are basically on par feature-wise with Qt5. For the future, PrettyQt will at least support Qt Verions back to the last LTS version.</p> <p>For a long time, PyQt was the only really usable binding. Especially PySide2 was buggy to an extent that it was almost unusable for more complex applications. That changed greatly in recent months up to a point where it is today at least on par with PyQt6.</p> <p>Starting with 6.5.2, my personal recommendation would be to use PySide6, mainly for excellent support and for pushing features which go beyond just generating a 1:1 binding. (__feature__ imports, opaque containers, PyPy compatibility, ...)</p>"},{"location":"api_guidelines/general.html","title":"General","text":"<p>To allow for an easy switch, the API layer provided by PrettyQt should be consistent and predictable. When knowing the following guidelines, it should be easy to guess how PrettyQt can be used:</p> <ul> <li>Every Qt namespace has an equivalent module, named lowerase and with the \"Qt\"-prefix removed.</li> </ul> <p><pre><code>from prettyqt import core, widgets, svg\n</code></pre> (There\u00b4s one exception: QtHelp becomes qthelp in order to not shadow the builtin \"help\" method.)</p> <ul> <li>Every Qt class has an equivalent class with the Q-prefix removed, placed in the corresponding namespace mentioned above. This class derives from the Qt class and a mixin from this framework. The \"original\" Qt classes are still available in the same module.</li> </ul> <pre><code>widget = widgets.Widget()  # our enriched class\nqwidget = widgets.QWidget()  # the original Qt class\ncurve = core.EasingCurve()\nqcurve = core.QEasingCurve()\n</code></pre> <ul> <li>The Qt-inherited API should still work as-is. If any method is overriden by this framework (only very few cases where this happens), it should still be allowed to call it with the original Qt signature.</li> </ul> <pre><code>widget = widgets.Widget()\nwidget.setMinimumSize(core.QSize(10, 10))\n</code></pre> <ul> <li>Naming of the equivalent PrettyQt methods should follow a consistent scheme. Setters are lower-cased and snake-cased, getters are lower-cased, snake-cased and have a get_ prepended to avoid name clashes. If any lower-cased, snake-cased method name is not provided by PrettyQt, it will call the original method via <code>__getattr__</code>. (The last point only applies to classes which inherit from QObject.)</li> </ul> <pre><code>from prettyqt import constants, widgets\nwidget = widgets.Widget()\nwidget.set_modality(\"window\")\n# constants namespace contains, among other things, everything from QtCore.Qt\nwidget.set_modality(constants.WindowModality.WindowModal)\nassert widget.get_modality() == \"window\"\nassert widget.modality() == constants.WindowModality.WindowModal  # original method still available\n</code></pre> <ul> <li>Using strings instead of Enums is also possible for setting properties via the constructor.</li> </ul> <pre><code>widget = widgets.Widget(modality=\"window\")\n</code></pre> <ul> <li> <p>The layer aims to be thin, with no significant overhead. Developers should still use common sense when it comes to using the subclasses vs the original Qt classes though. In loops which get called very often (like paintEvent), it probably still makes sense in lot of cases to not use any subclasses for performance reasons. It should also be mentioned that Qt does not accept derived classes in some places. (for example as a return value for QAbstractItemModel.data())</p> </li> <li> <p>PrettyQt tries to align with Qt\u00b4s module hierarchy, meaning that <code>core</code> module does not import stuff from <code>QtGui / gui</code>, <code>gui</code> module does not import <code>QtWidgets / widgets</code> etc. In cases where it is not possible,</p> </li> </ul>"},{"location":"api_guidelines/types.html","title":"Types","text":"<p>PrettyQt loosens type restrictions for the Qt API calls. Here is a short list how support for types is extended:</p> <p>QtGui.QColor</p> <ul> <li><code>Sequence[int, int, int]</code></li> <li><code>Sequence[int, int, int, int]</code></li> <li><code>str</code> (Color name or #color hex value)</li> <li><code>str</code> (Color role from palette. Example* \"window_role\", \"highlight_role\")</li> </ul> <p>Example: <pre><code>effect = widgets.GraphicsColorizeEffect()\neffect.set_color(\"window_role\")\neffect.set_color((30, 30, 50))\neffect.set_color(\"green\")\n</code></pre></p> <p>QtGui.QIcon</p> <ul> <li><code>pathlib.Path</code> (path to an icon)</li> <li><code>str</code> (icon name, like \"mdi.information\")</li> </ul> <p>Example: <pre><code>button = widgets.PushButton()\nbutton.set_icon(\"mdi.information\")\nbutton.set_icon(pathlib.Path(\"path/to/icon.png\"))\n</code></pre></p> <p>QtCore.QTime</p> <ul> <li><code>datetime.time</code> (https://docs.python.org/3/library/datetime.html#datetime.time)</li> <li><code>str</code> (which can be parsed from dat)</li> </ul> <p>Example: <pre><code>widget = widgets.TimeEdit()\nwidget.set_time(\"02:04:00\")\n</code></pre></p> <p>QtCore.QRegularExpression</p> <ul> <li><code>str</code> (containing the regex pattern)</li> <li><code>re.Pattern</code></li> </ul> <p>Example: <pre><code>proxy = core.SortFilterProxyModel()\npattern = re.complile(\"[a-z]\")\nproxy.set_filter_regular_expression(pattern)\n</code></pre></p> <p>QtCore.QUrl</p> <ul> <li><code>str</code></li> <li><code>os.PathLike</code> (when appropriate)</li> <li><code>urllib.parse.ParseResult</code></li> </ul> <p>Example: <pre><code>page = webenginecore.WebEnginePage()\npage.set_url(\"http://www.github.com/phil65/prettyqt\")\n</code></pre></p> <p>QtCore.QByteArray</p> <ul> <li><code>str</code></li> <li><code>bytes</code></li> </ul> <p>Example: <pre><code>animation = core.PropertyAnimation()\nanimation.set_property_animation(\"pos\")\n</code></pre></p> <p>QtCore.QMargins</p> <ul> <li><code>tuple[int, int, int, int]</code> (left, top, right, bottom)</li> <li><code>tuple[int, int]</code> (left/right, top/bottom)</li> <li><code>int</code></li> <li><code>None</code> (same as 0)</li> <li><code>QtCore.QMarginsF</code></li> </ul> <p>Example: <pre><code>chart = charts.Chart()\nchart.set_margins((4, 2, 0, 0))\nchart.set_margins((1, 2))\nchart.set_margins(5)\nchart.set_margins(None)\n</code></pre></p> <p>QtCore.QPoint</p> <ul> <li><code>tuple[int, int]</code></li> <li><code>QtCore.QPointF</code></li> </ul> <p>Example: <pre><code>point = core.Line()\npoint.set_p1((4, 2))\n</code></pre></p> <p>QtCore.QPointF</p> <ul> <li><code>tuple[float, float]</code></li> <li><code>tuple[int, int]</code></li> <li><code>QtCore.QPoint</code></li> </ul> <p>QtCore.QSize</p> <ul> <li><code>tuple[int, int]</code></li> <li><code>QtCore.QSizeF</code></li> </ul> <p>QtCore.QSizeF</p> <ul> <li><code>tuple[float, float]</code></li> <li><code>QtCore.QSize</code></li> </ul>"},{"location":"features/animating.html","title":"Animating","text":"<p>PrettyQt makes it easy to animate your widgets. All animation-related methods are available via the Widget.fx attribute. Easy one-liners to bring</p>"},{"location":"features/animating.html#some-examples","title":"some Examples:","text":"<pre><code># a lot of animations depend on current geometry.\n# It\u00b4s advisable to show widget first so that it gets layouted.\nwidget = widget.Label(\"I will get animated.\")\nwidget.show()\n# start a general fade animation with fixed start/end\nwidget.fx[\"windowOpacity\"].animate(start=0, end=1, duration=1000)\n# Transition widget size from current value to (500, 500)\nwidget.fx[\"size\"].transition_to((500, 500), duration=1000)\n# Transition widget size from current value to (500, 500)\nwidget.fx[\"pos\"].transition_from((0, -100), duration=1000)\n# fade-in when widget gets clicked\nwidget.fx[\"windowOpacity\"].animate_on_event(\"mouse_button_press\", start=0, end=1)\n# convenience method for mentioned fade-in\nwidget.fx.fade_in(start=0, end=1, start=500)\n# start a zoom animation\nwidget.fx.zoom(start=1, end=1.5, duration=400)\n# start a slide animation 100px to the right\nwidget.fx.slide(start=(0, 0), end=(100, 0), duration=400)\n</code></pre> <p>Animating stylesheet values is also possible easily:</p> <p>TODO.</p>"},{"location":"features/delegates.html","title":"Delegates","text":"<p>Several additional delegates are supplied by PrettyQt.</p> Delegate Description EditorDelegate regular delegate supporting many data types HtmlItemDelegate supports HTML for text IconDelegate NoFocusDelegate hides focus frame ProgressBarDelegate displays a percentage value as a progress bar RadioDelegate RenderLinkDelegate renders a string as link and makes it clickable StarDelegate WidgetDelegate <p>The most important one is the \"EditorDelegate\", which basically works like the default delegate, but supports editing a larger amount of datatypes.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul>"},{"location":"features/layouts.html","title":"Layouts","text":""},{"location":"features/layouts.html#context-manager-to-build-layouts","title":"Context manager to build layouts","text":"<pre><code>from prettyqt import widgets\nwidget = widgets.Widget()\nlayout = widget.set_layout(\"horizontal\")\nwith layout.get_sub_layout(\"splitter\", orientation=\"horizontal\") as layout:\nwith layout.get_sub_layout(\"flow\") as layout:\nlayout += widgets.PushButton(\"Flow 1\")\nlayout += widgets.RadioButton(\"Flow 2\")\nlayout += widgets.PushButton(\"Flow 3\")\nlayout += widgets.RadioButton(\"Flow 4\")\nlayout += widgets.PlainTextEdit(\"Splitter middle\")\nlayout += widgets.PlainTextEdit(\"Splitter right\")\nwith layout.get_sub_layout(\"splitter\", orientation=\"vertical\") as layout:\nlayout += widgets.PlainTextEdit(\"Splitter top\")\nlayout += widgets.PlainTextEdit(\"Splitter middle\")\nwith layout.get_sub_layout(\"scroll\", orientation=\"vertical\") as layout:\nlayout += widgets.PlainTextEdit(\"ScrollArea top\")\nlayout += widgets.PlainTextEdit(\"ScrollArea middle\")\nbutton = layout.add(widgets.PushButton(\"ScrollArea Bottom\"))\nwith layout.get_sub_layout(\"horizontal\") as layout:\nlayout += widgets.PlainTextEdit(\"HorizontalLayout left\")\nlayout += widgets.PlainTextEdit(\"HorizontalLayout right\")\nwith layout.get_sub_layout(\"grid\") as layout:\nlayout[0, 0] = widgets.PushButton(\"Grid topleft\")\nlayout[0, 1] = widgets.RadioButton(\"Grid topright\")\nlayout[1, 0:1] = widgets.PushButton(\"Grid bottom\")\nlayout += widgets.RadioButton(\"Flow 4\")\n</code></pre>"},{"location":"features/layouts.html#setting-a-layout","title":"Setting a layout","text":"<p>Layouts can be also be set by an identifier:</p> <p><pre><code>layout = widget.set_layout(\"horizontal\")\n# equals\nlayout = widgets.HBoxLayout()\nwidget.set_layout(layout)\n</code></pre> Available layouts:</p> <ul> <li> <p>Qt layouts:</p> <ul> <li>\"horizontal\"</li> <li>\"vertical\"</li> <li>\"grid\"</li> <li>\"form\"</li> <li>\"stacked\"</li> </ul> </li> <li> <p>custom layouts:</p> <ul> <li>\"multiline\"</li> <li>\"border\"</li> <li>\"flow\"</li> </ul> </li> </ul> <p>Info</p> <p>Any layout which inherits from widgets.LayoutMixin can be set using an identifier.</p> <pre><code>class MyLayoutSubClass(widgets.BoxLayout):  # BoxLayout inherits from LayoutMixin\nID = \"some_identifier\"   # this one will be usable for set_layout.\n</code></pre>"},{"location":"features/layouts.html#accessing-widgets-inside-a-layout","title":"Accessing widgets inside a layout","text":"<p>All layouts support slicing, including the possibility to apply batch operations:</p> <pre><code>widgets = layout[:4]  # take the first 4 widgets\nwidgets = layout[::2] # take every second widget\nwidgets[2:8:2].set_visible(False)  # hide widgets with index 2, 4, 6, 8\nsizes = widgets[5:].size()  # returns a list with the sizes of widget with index 5 and following.\n</code></pre> <p>As shown, operations on slices are forwarded to each widget which is part of the slice. No need to loop over the whole layout.</p> <p>The same principles also apply to splitters, toolboxes and TabWidgets.</p> <pre><code>splitter[2:5].set_font(\"Consolas\")\n</code></pre>"},{"location":"features/models.html","title":"Models","text":"<p>PrettyQt includes a large amount of ItemModels for Qt-based types, Python built-in types as well as for different data structures of external libraries.</p> <ul> <li>All models are proper views on data structures, not populated StandardItemModels.</li> <li>Boolean values are always handled via CheckState role, both for editing and displaying.</li> <li>Some of the models should be used in conjunction with the EditorDelegate. That delegate supports editing a large amount of different datatypes and should be the preferred choice for most models.</li> <li>In general, the models are unstyled (with some few exceptions. Styling should be done via the extensive proxy system which is baked into PrettyQt.</li> </ul>"},{"location":"features/models.html#builtin-type-models","title":"Builtin-Type models","text":"Type Model Description <code>list[dict]</code> MappingModel xyz <code>type, types.UnionType</code> SubClassTreeModel Tree showing all subclasses <code>type</code> ParentClassTreeModel Tree showing all Parent classes <code>importlib.metadata.distribution</code> ImportLibTreeModel Tree model showing a dependency tree of given package <code>inspect.Traceback</code> FrameInfoModel Table model showing Traceback <code>inspect.FrameInfo</code> FrameInfoModel Table model showing FrameInfo <code>DataClass</code> DataclassFieldsModel Table showing all fields + metadata of a dataclass <code>Sequence[DataClass]</code> DataclassModel Table showing a list of dataclasses and their field values <code>ast.AST</code> AstModel Tree model to show an abstract syntax tree <code>list[logging.LogRecord]</code> LogRecordModel Table showing a list of LogRecords <code>list[re.Match]</code> RegexMatchesModel Table do display list of regex matches <code>object</code> PythonObjectTreeModel Tree model showing all attributes of an object. <code>xml.etree.ElementTree, ElementTreeIterator</code> XmlModel Tree view for an xml ElementTree"},{"location":"features/models.html#qt-type-models","title":"Qt-Type models","text":"Type Model Description <code>list[QtGui.QAction]</code> ActionsModel Table displaying all available info for a QAction. Supports editing QAction properties. <code>list[QtGui.QShortcut]</code> ShortcutsModel Table displaying a list of shortcuts. Supports editing Shortcut properties. <code>list[QtCore.QStorageInfo]</code> StorageInfoModel Read-only list of available drives <code>list[QtWidgets.QWidget]</code> xyz Table displaying a list of QWidgets and their properties <code>list[QtCore.QModelIndex]</code> ModelIndexModel Model displaying all roles of a list of ModelIndexes. <code>QtCore.QObject</code> xyz Table model to display all available Properties of a QObject."},{"location":"features/models.html#external-type-models","title":"External type models","text":"Type Package Model Description <code>AttrsDataclass</code> attrs AttrsFieldsModel Detail table containing all relevant information for each Attrs dataclass. <code>list[AttrsDataclass]</code> attrs AttrsModel Comparison view for a list of Pydantic models. <code>pydantic.BaseModel</code> pydantic PydanticFieldsModel Table containing all relevant information for each BaseModel field. <code>list[pydantic.BaseModel]</code> pydantic PydanticModel Comparison view for a list of Pydantic models. <code>fsspec.FileSystem</code> fsspec FsSpecModel Model with same interface as QFileSystemModel <code>pandas.DataFrame</code> fsspec PandasDataFrameModel Model to show a pandas DataFrame <code>pandas.Index</code> pandas PandasIndexModel Model to show a pandas (Multi)Index <code>polars.DataFrame</code> polars PolarsDataFrameModel Model to display a polars DataFrame <code>git.Repo, git.Tree</code> gitpython GitPythonTreeModel Model to display a polars DataFrame <code>lxml.etree.Element, lxml.etree.iterparse</code> lxml LazyLxmlModel Tree view for an lxml iterparse iterator (lazy) <code>lxml.etree.ElementTree</code> lxml LxmlModel Tree view for an lxml ElementTree (full DOM)"},{"location":"features/pandas.html","title":"Pandas","text":"<p>Pandas is a very popular python library for working with tabular data.</p> <p>PrettyQt contains a range of tools to work with pandas data structures.</p>"},{"location":"features/pandas.html#models","title":"Models","text":"<p>PrettyQt includes multiple models to display Pandas dataframes. One of the key \"issues\" is that in contrast to QAbstractTableModels, a pandas DataFrame can have MultiIndexes. PrettyQt offers several approaches to display these MultiIndexes.</p> <p>PandasDataFrameModel is a very simple model which is displaying MultiIndexes by joining the multiple index levels using a separator. (the separator value is exposed as a Qt Property)</p> <p>In addition, two composed widgets are included which consist of three different tables (one for data, one for the index, one for the headers) which are synced on scrolling / resizing.</p> <p>There is also a model to get a detailed view on an index and another one to display the categories of a pandas category column.</p>"},{"location":"features/pandas.html#proxies","title":"Proxies","text":"<p>Since working with pandas often means working with tables containing several hundred thousands of rows, the default QSortFilterProxyModel does not work that well.</p> <p>PrettyQt includes several proxy models which try to improve this.</p> <p>PandasStringColumnFilterProxyModel can be used to filter a column based on a search string. Instead of looping over the cells, a filter index is built using NumPy operations. This makes filtering super fast, even with several thousands of rows. A quick benchmark showed an almost 100x (!!) performance increase compared to QSortFilterProxyModel.</p> <p>PandasEvalFilterProxyModel works in a similar way, but filtering is done by a Python statement. (example: '\"a\" &gt; 10' would show all rows where the value of column \"a\" is greater than 10.)</p> <p>To display heatmaps, PrettyQt also includes a proxy model to color the cells according to their values. That proxy model includes several modes, also including modes which dont need to pre-compute min-max values,</p>"},{"location":"features/pandas.html#eventfilters","title":"EventFilters","text":"<p>To prettify the mentioned composed widgets, an EventFilter is included which sets row / column spans on-the-fly.</p>"},{"location":"features/pandas.html#scikit-learn","title":"Scikit-learn","text":"<p>Lastly, there are also models included to display Scikit-Learn estimators and their characteristics.</p>"},{"location":"features/pandasproxies.html","title":"Pandas proxies","text":"Proxy Description PandasStringColumnFilterProxyModel A fast FilterProxyModel for pandas DataFrame str columns. PandasEvalFilterProxyModel A pandas.eval based FilterProxyModel. PandasMultiStringColumnFilterModel A ProxyModel to filter based on contents of multiple columns."},{"location":"features/proxies.html","title":"Proxy models","text":"<p>Every class containing the AbstractItemViewMixin (<code>widgets.TreeView</code>, <code>widgets.TableView</code>, ...) has quick access to proxy superpowers hidden behind the \"proxifier\" attribute. The following section will give an overview about the included proxies and how to apply them.</p>"},{"location":"features/proxies.html#slice-proxies","title":"Slice proxies","text":"<p>PrettyQt introduces a base proxy model which allows its subclasses to be selectively applied to the source model by using python slicing syntax. They can get quickly set up via our Proxifier.</p> <p>Example:</p> <pre><code>model = MyTableModel()\ntable = widgets.TableView()\ntable.set_model(model)\n# lets change the appearance a bit.\n# Set the font color of column 2 and 3 to red and font to Courier.\ntable.proxifier[:, 2:4].style(foreground=\"red\", font=\"Courier\")\n# Cut off last column and only show last 50 lines.\ntable.proxifier[:50, :-1].filter()\n# Set first 20 lines of these 50 lines to read_only\ntable.proxifier[:20, :].change_flags(editable=False)\n# Make first column checkable and trigger callback on checkstate change.\ntable.proxifier[0].make_checkable(callback=my_callback)\n</code></pre> <p>Every call here basically adds another ProxyModel layer (all based on SliceIdentityProxyModel). The proxy models should all perform very well with large tables since they never need to loop over the whole column / row range.</p> <p>The proxifier attribute basically gives quick access to set up these proxies.</p> <p><pre><code>table.proxifier[:-1, 5::2].filter()\n</code></pre> basically equals something like:</p> <pre><code>proxy = SliceFilterProxyModel(indexer=(slice(None, -1, 1), slice(5, None, 2)))\nproxy.setSourceModel(table.model())\ntable.set_model(proxy)\n</code></pre> <p>If you want to apply a slice proxy to all cells of the model, use slices without start and stop values:</p> <pre><code>table.proxifier[:, :].style(background=\"green\")\n</code></pre> <p>Here is a short overview of the included slice proxies:</p> Proxy Description SliceFilterProxyModel Show only selected slice of given source model. SliceAppearanceProxyModel Applies styling to given slice by overriding font, color and alignment roles. SliceChangeFlagsProxyModel Selectively change the ItemFlags of the model SliceChangeIconSizeProxymodel Allows to change the size of the Icon / Pixmap shown for DecorationRole. SliceCheckableProxyModel Makes an area of the table checkable and triggers a callback on checkstate change. SliceCheckableTreeProxyModel Makes an area of a tree checkable and triggers a callback on checkstate change. SliceColorValuesProxyModel Color an area with numerical values based on their value. SliceDisplayTextProxyModel Format non-str DisplayRole values according to formatter strings. SliceMapRoleProxyModel Map an ItemDataRole to another. SliceValueTransformationProxyModel Changes the values of any data role of given slice area based on a callback."},{"location":"features/proxies.html#sortfilter-proxies","title":"Sort/Filter proxies.","text":"<p>In addition to the mentioned SliceFilterProxyModel, PrettyQt also contains several proxies based on QSortFilterProxyModel. These can be more powerful than the mentioned SliceFilterProxyModel, but scale with O(1) in respect to row / column count. (meaning that things might get slower for very large tables or when several proxies are layered on top of each other.) Some of these proxies might partly overlap in functionality, but theres always a best one one for each use case to pick.</p> Proxy Description FuzzyFilterProxyModel Model for implementing a CommandPalette a la SubimeText. ValueFilterProxymodel Similar to QSortFilterProxyModel, but also works with non-str values. SubsetFilterProxyModel Filter based on slices, index, a filter function, a list of indexes (like columns [0, 3, 7]) PredicateFilterProxyModel Filter based on predicates. RangeFilterProxyModel Filter based on min/max values of a numerical column. MulticolumnFilterProxyModel can take a seperate search term / value for each column."},{"location":"features/proxies.html#reshape-styling-proxies","title":"Reshape / Styling proxies","text":"Proxy Description TableToListProxyModel Stack all columns into one single column FlattenTreeProxyModel Moves all rows up to the root level. MeltProxyModel Unpivot a Table from wide to long format. ColumnOrderProxyModel Reorder columns and hide columns. ChangeHeadersProxyModel Change horizontal / vertical headers. AppearanceProxyModel Proxy model to change styling."},{"location":"features/proxies.html#proxies-for-pandas-models","title":"Proxies for pandas models","text":"Proxy Description PandasStringColumnFilterProxyModel A fast FilterProxyModel for pandas DataFrame str columns. PandasEvalFilterProxyModel A pandas.eval based FilterProxyModel. PandasMultiStringColumnFilterModel A ProxyModel to filter based on contents of multiple columns."},{"location":"features/proxies.html#other-proxies","title":"Other Proxies","text":"Proxy Description HighlightMouseProxymodel Highlight regions the mouse cursor is hovering over."},{"location":"features/proxies.html#miscellaneous","title":"Miscellaneous","text":"Class Description ProxyMapper A helper for mapping indexes between proxies in any proxy tree. LinkedSelectionModel A SelectionModel which keeps indexes of any amount of proxies / source models in sync. ProxyComparerWidget A widget to compare a proxy chain, useful for debugging."},{"location":"features/reshapeproxies.html","title":"Reshape / Styling proxies","text":"Proxy Description TableToListProxyModel Stack all columns into one single column FlattenTreeProxyModel Moves all rows up to the root level. MeltProxyModel Unpivot a Table from wide to long format. ColumnOrderProxyModel Reorder columns and hide columns. ChangeHeadersProxyModel Change horizontal / vertical headers. AppearanceProxyModel Proxy model to change styling."},{"location":"features/sliceproxies.html","title":"Slice proxies","text":"<p>PrettyQt introduces a base proxy model which allows its subclasses to be selectively applied to the source model by using python slicing syntax. They can get quickly set up via our Proxifier.</p> <p>Example:</p> <pre><code>model = MyTableModel()\ntable = widgets.TableView()\ntable.set_model(model)\n# lets change the appearance a bit.\n# Set the font color of column 2 and 3 to red and font to Courier.\ntable.proxifier[:, 2:4].style(foreground=\"red\", font=\"Courier\")\n# Cut off last column and only show last 50 lines.\ntable.proxifier[:50, :-1].filter()\n# Set first 20 lines of these 50 lines to read_only\ntable.proxifier[:20, :].change_flags(editable=False)\n# Make first column checkable and trigger callback on checkstate change.\ntable.proxifier[0].make_checkable(callback=my_callback)\n</code></pre> <p>Every call here basically adds another ProxyModel layer (all based on SliceIdentityProxyModel). The proxy models should all perform very well with large tables since they never need to loop over the whole column / row range.</p> <p>The proxifier attribute basically gives quick access to set up these proxies.</p> <p><pre><code>table.proxifier[:-1, 5::2].filter()\n</code></pre> basically equals something like:</p> <pre><code>proxy = SliceFilterProxyModel(indexer=(slice(None, -1, 1), slice(5, None, 2)))\nproxy.setSourceModel(table.model())\ntable.set_model(proxy)\n</code></pre> <p>If you want to apply a slice proxy to all cells of the model, use slices without start and stop values:</p> <pre><code>table.proxifier[:, :].style(background=\"green\")\n</code></pre> <p>Here is a short overview of the included slice proxies:</p> Proxy Description SliceFilterProxyModel Show only selected slice of given source model. SliceAppearanceProxyModel Applies styling to given slice by overriding font, color and alignment roles. SliceChangeFlagsProxyModel Selectively change the ItemFlags of the model SliceChangeIconSizeProxymodel Allows to change the size of the Icon / Pixmap shown for DecorationRole. SliceCheckableProxyModel Makes an area of the table checkable and triggers a callback on checkstate change. SliceCheckableTreeProxyModel Makes an area of a tree checkable and triggers a callback on checkstate change. SliceColorValuesProxyModel Color an area with numerical values based on their value. SliceDisplayTextProxyModel Format non-str DisplayRole values according to formatter strings. SliceMapRoleProxyModel Map an ItemDataRole to another. SliceValueTransformationProxyModel Changes the values of any data role of given slice area based on a callback."},{"location":"features/sortfilterproxies.html","title":"Sort / Filter proxies","text":"<p>In addition to the mentioned SliceFilterProxyModel, PrettyQt also contains several proxies based on QSortFilterProxyModel. These can be more powerful than the mentioned SliceFilterProxyModel, but scale with O(1) in respect to row / column count. (meaning that things might get slower for very large tables or when several proxies are layered on top of each other.) Some of these proxies might partly overlap in functionality, but theres always a best one one for each use case to pick.</p> Proxy Description FuzzyFilterProxyModel Model for implementing a CommandPalette a la SubimeText. ValueFilterProxymodel Similar to QSortFilterProxyModel, but also works with non-str values. SubsetFilterProxyModel Filter based on slices, index, a filter function, a list of indexes (like columns [0, 3, 7]) PredicateFilterProxyModel Filter based on predicates. RangeFilterProxyModel Filter based on min/max values of a numerical column. MulticolumnFilterProxyModel can take a seperate search term / value for each column."},{"location":"features/tools.html","title":"Tools","text":""},{"location":"features/tools.html#tools","title":"Tools","text":"Class Description ProxyMapper A helper for mapping indexes between proxies in any proxy tree. LinkedSelectionModel A SelectionModel which keeps indexes of any amount of proxies / source models in sync. ProxyComparerWidget A widget to compare a proxy chain, useful for debugging."},{"location":"features/validators.html","title":"Validators","text":"<p>PrettyQt includes a range of pre-defined validators.</p> <p>The following validators are included:</p> Validator Description <code>AlphanumericValidator</code> Allows alphanumeric chars <code>BlacklistValidator</code> Forbid a list of strings as input <code>ColorValidator</code> Allows strings which can be parsed as a color <code>HexValidator</code> <code>IntegerValidator</code> <code>JsonValidator</code> Allows strings which can be parsed by json.loads. <code>MonotonicListValidator</code> Allows strings representing a monotonic list. <code>PathValidator</code> allows strings which represent an existing path. Can be set to either accept files, folders or both <code>PythonCodeValidator</code> Allows a string which can be parsed by ast.parse <code>QssValidator</code> Allows a string which can be parsed as CSS <code>RegexPatternValidator</code> Allows a string which can be parsed as a regular expression <code>IntListValidator</code> Allows a comma separated list of integers <code>FloatListValidator</code> Allows a comma separated list of floats <code>ScientificIntegerValidator</code> For integers in scientific annotation. also allows SI unit prefix like 'M', 'n' etc. <code>ScientificFloatValidator</code> For floats in scientific annotation. also allows SI unit prefix like 'M', 'n' etc. <code>TextLengthValidator</code> Allows limiting textlength to a given minimum / maximum <code>WhitelistValidator</code> Whitelist specific strings <code>FunctionValidator</code> Validate string based on a Callable (Signature: Callable[[str], bool]) <code>NotStrictValidator</code> Validator which takes other validators and converts Invalid State to Intermediate State <code>AndValidator</code> Validator which can be used to AND-combine other validators <code>AndValidator</code> Validator which can be used to OR-combine other validators <p>Apart from LineEdits, ComboBoxes and SpinBoxes, PlainTextEdits also gained the ability to take a validator.</p> <p>The set_validator method also gained a \"strict\" keyword argument, which wraps the passed validator into a NotStrictValidator, effectively removing the \"Invalid\" state. That way there never is a situation where the user input is ignored, which might be preferred in a lot of situations.</p> <p>The acceptance of \"\" may also be overriden explicitely by setting the \"allow_empty\" keyword argument.</p> <p>Validators which inherit from gui.Validator also can be combined.</p> <p>Example: <pre><code>val_1 = BlackListValidator([\"Blacklisted word\"])\nval_2 = AlphanumericValidator()\nand_validator = val_1 &amp; val_2  # returns an AndValidator\nval_1 = AlphanumericValidator()\nval_2 = RegularExpressionValidator(\"some_regex\")\nor_val = val_1 | val_2 # returns an OrValidator\n</code></pre> Validators can also be set by an id. Since everything is typed with Literals, the possible ids should be shown by your IDE. <pre><code>lineedit.set_validator(\"float\")\n</code></pre></p>"},{"location":"features/widgets.html","title":"Widgets","text":"<p>Since this library is huge, I will try to give an overview about some modules and mention some of the included \"highlights\".</p> <ul> <li>All setters and getters for Enum properties have an equivalent method taking a string:</li> </ul> <p><pre><code>widget = QtWidgets.QWidget()\nwidget.setSizeAdjustPolicy(widget.SizeAdjustPolicy.AdjustToContents)\n</code></pre> becomes:</p> <pre><code>widgets = widgets.Widget()\nwidget.set_size_adjust_policy(\"adjust_to_contents\")\n</code></pre> <p>Everything is fully typed with Literals, so you should get a very nice IDE experience.</p> <p>The same also applies to getters, with the rule that everything is prefixed with \"get_\" in order to avoid name collisions.</p> <p><pre><code>assert widget.sizeAdjustPolicy() == widget.SizeAdjustPolicy.AdjustToContents\n</code></pre> becomes <pre><code>assert widget.get_size_adjust_policy() == \"adjust_to_contents\"\n</code></pre></p> <p>Note that these new setters and getters are \"optional\" to use. The \"old\" methods are still fully accessible. As a general rule, the library tries to be 100% \"backwards-compatible\".</p> <p>Slicing:</p> <p>A lot of QObjects fully support slicing via getitem. To allow easy batch manipulation, the returned list can delegate method calls to all of its members.</p>"},{"location":"features/widgets.html#some-examples","title":"Some Examples:","text":"<pre><code>model = AVeryNiceTableModel()\n# get indexes of first row:\nindexes = model[:, 0]\n# get indexes of very second column\nindexes = model[:, ::2]\n# batch operations:\n# return list containing data from UserRole for given slice.\ndata = model[2:5, 1:10:2].data(constants.USER_ROLE)\n# now we check out the same for widgets.\n# lets say we have a HBoxLayout containing many items.\nlayout = widgets.HBoxLayout()\n... # populate it with many widgets.\n# Only show first 5 widgets.\nlayout[5:].set_visible(False)\n# get a list containing the width of every 2nd widget in the layout.\nwidths = layout[::2].width()\n# trigger a fade-in animation for first 3 widgets\nlayout[:3].fx.fade_in(duration=1000)\n</code></pre> <p>Validators:</p> <p>PrettyQt ships a large number of predefined validators.</p> <pre><code># Validators can also be combined. The resulting CompositeValidator checks if all containing validators accept the input.\n\n# set_validator also gained a non-strict mode.\n# That way the \"lowest\" result of the validator becomes \"Intermediate\", since the Qt behaviour of ignoring keypresses when state goes to invalid might not be wanted.\n</code></pre>"},{"location":"features/delegates/editordelegate.html","title":"EditorDelegate","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate which supports editing a large range of data types.</p> <p>Allows editing a large range of different types from Qt, builtin libraries as well as some Numpy types.</p> <p>The Delegate also has an extended displayText method to show a repr-like string for different data types.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul> Source code in <code>prettyqt\\custom_delegates\\editordelegate.py</code> <pre><code>def __init__(\nself,\n*args,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\nvalidator: gui.QValidator\n| widgets.lineedit.ValidatorStr\n| datatypes.PatternType\n| None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._role = role\nself._validator = validator\n</code></pre>"},{"location":"features/layouts/multilinelayout.html","title":"MultiLineLayout","text":"<p>         Bases: <code>widgets.BoxLayout</code></p> <p>Nested Boxlayout.</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\multilinelayout.py</code> <pre><code>def __init__(self, vertical: bool = True, row_number: int = 3, **kwargs):\nself.row_nb = row_number\nself.layouts = []\nself._sub_layout_type = \"box\"\ndirection = self.Direction.TopToBottom if vertical else self.Direction.LeftToRight\nsuper().__init__(direction, **kwargs)\n</code></pre>"},{"location":"features/models/actionsmodel.html","title":"ActionsModel","text":"<p>         Bases: <code>custom_models.ColumnTableModel</code></p> <p>Table model to display a list of QActions.</p> <p>All properties of the Action can be edited.</p> Source code in <code>prettyqt\\custom_models\\actionsmodel.py</code> <pre><code>def __init__(self, actions: list[gui.QAction], parent: widgets.QWidget | None = None):\nsuper().__init__(actions, self.COLUMNS, parent=parent)\n</code></pre>"},{"location":"features/models/actionsmodel.html#supports","title":"Supports","text":"<p><code>list[gui.QAction]</code></p>"},{"location":"features/models/astmodel.html","title":"AstModel","text":"<p>         Bases: <code>custom_models.TreeModel</code></p> <p>Tree model to display an Abstract syntax tree.</p> <p>The model shows a tree of all nodes from an abstract syntax tree They are part of the builtin <code>ast</code> module.</p> <p> </p> AST model"},{"location":"features/models/astmodel.html#prettyqt.custom_models.AstModel--example","title":"Example:","text":"<pre><code>import ast\nview = TreeView()\ncode = pathlib.Path(__file__).read_text()\ntree = ast.parse(code)\nmodel = AstModel(tree)\nview.set_model(model)\n</code></pre> Source code in <code>prettyqt\\custom_models\\astmodel.py</code> <pre><code>def __init__(self, ast_tree, **kwargs):\nsuper().__init__(None, **kwargs)\nself.ast_tree = None\nself.code = \"\"\nself.set_ast(ast_tree)\n</code></pre>"},{"location":"features/models/astmodel.html#supports","title":"Supports","text":"<p><code>ast.AST</code></p>"},{"location":"features/models/astmodel.html#additional-roles","title":"Additional roles","text":"Role Data AstModel.Roles.NodeRole Ast Node"},{"location":"features/models/attrsfieldsmodel.html","title":"AttrsFieldsModel","text":"<p>         Bases: <code>custom_models.BaseFieldsModel</code></p> <p>Table model to display the fields and their metadata of an dataclass.</p> <p>More information about attrs can be found here.</p> <p>Frozen dataclasses are read-only, otherwise the data can be modified.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\attrsfieldsmodel.py</code> <pre><code>def __init__(self, instance: datatypes.IsAttrs, **kwargs):\nsuper().__init__(instance, **kwargs)\n</code></pre>"},{"location":"features/models/attrsfieldsmodel.html#supports","title":"Supports","text":"<p><code>attrs dataclass</code></p>"},{"location":"features/models/attrsmodel.html","title":"AttrsModel","text":"<p>         Bases: <code>custom_models.BaseDataclassModel</code></p> <p>Table model to display a list of attrs dataclasses.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\attrsmodel.py</code> <pre><code>def __init__(self, items: Sequence[datatypes.IsAttrs], **kwargs):\nsuper().__init__(items, **kwargs)\n</code></pre>"},{"location":"features/models/attrsmodel.html#supports","title":"Supports","text":"<p><code>list[attrs dataclass]</code></p>"},{"location":"features/models/dataclassfieldsmodel.html","title":"DataClassFieldsModel","text":"<p>         Bases: <code>custom_models.BaseFieldsModel</code></p> <p>Table model to display the fields and their metadata of an dataclass.</p> <p>Frozen dataclasses are read-only, otherwise the data can be modified.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\dataclassfieldsmodel.py</code> <pre><code>def __init__(self, instance: datatypes.IsDataclass, **kwargs):\nsuper().__init__(instance, **kwargs)\n</code></pre>"},{"location":"features/models/dataclassfieldsmodel.html#supports","title":"Supports","text":"<p><code>dataclass</code></p>"},{"location":"features/models/dataclassmodel.html","title":"DataClassModel","text":"<p>         Bases: <code>custom_models.BaseDataclassModel</code></p> <p>Table model to display a list of dataclasses.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\dataclassmodel.py</code> <pre><code>def __init__(self, items: Sequence[datatypes.IsDataclass], **kwargs):\nsuper().__init__(items, **kwargs)\n</code></pre>"},{"location":"features/models/dataclassmodel.html#supports","title":"Supports","text":"<p><code>list[DataClass]</code></p>"},{"location":"features/models/frameinfomodel.html","title":"FrameInfoModel","text":"<p>         Bases: <code>custom_models.ListMixin</code>, <code>core.AbstractTableModel</code></p>"},{"location":"features/models/frameinfomodel.html#supports","title":"Supports","text":"<p><code>list[inspect.FrameInfo | inspect.Traceback]</code></p>"},{"location":"features/models/fsspecmodel.html","title":"FsSpecModel","text":"<p>         Bases: <code>BaseXmlModel</code></p> <p>Semi-lazy xml model. Fetches all direct child nodes when needed.</p> <p>Model cant be modified, that only really makes sense for a full DOM implementation.</p> Source code in <code>prettyqt\\custom_models\\xmlmodel.py</code> <pre><code>def __init__(\nself,\nobj: str | datatypes.IsTreeIterator | ET.ElementTree,\nshow_root: bool = True,\n**kwargs,\n):\nmatch obj:\ncase io.StringIO():\ncontext = ET.iterparse(obj, events=(\"start\",))\n_, root = next(context)\ncase str():\ncontext = ET.iterparse(io.StringIO(obj), events=(\"start\",))\n_, root = next(context)\ncase datatypes.IsTreeIterator():\n_, root = next(obj)\ncase ET.ElementTree():\nxml_str = ET.tostring(obj._root, encoding=\"unicode\")\ncontext = ET.iterparse(io.StringIO(xml_str), events=(\"start\",))\n_, root = next(context)\ncase _:\nraise TypeError(obj)\nsuper().__init__(obj=root, **kwargs)\n</code></pre>"},{"location":"features/models/fsspecmodel.html#supports","title":"Supports","text":"<p><code>fsspec.filesystem</code></p>"},{"location":"features/models/fsspecmodel.html#additional-roles","title":"Additional roles","text":"<p>The model supports the same roles as QFileSystemModel.</p>"},{"location":"features/models/gitpythontreemodel.html","title":"GitPythonTreeModel","text":"<p>         Bases: <code>custom_models.TreeModel</code></p> <p>Base Tree Model to display a file tree combined with Git information.</p> <pre><code>model = GitPythonTreeModel(PATH_TO_GIT_FOLDER)\ntable = widgets.TreeView()\ntable.set_model(model)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\gitpythontreemodel.py</code> <pre><code>def __init__(self, path: os.PathLike | str | git.Tree | git.Repo, **kwargs):\nmatch path:\ncase os.PathLike() | str():\ntree = git.Repo(path).tree()\ncase git.Tree():\ntree = path\ncase git.Repo():\ntree = path.tree()\ncase _:\nraise TypeError(path)\nsuper().__init__(tree, **kwargs)\n</code></pre>"},{"location":"features/models/gitpythontreemodel.html#supports","title":"Supports","text":"<p><code>git.Tree | git.Repo</code></p>"},{"location":"features/models/importlibtreemodel.html","title":"ImportlibTreeModel","text":"<p>         Bases: <code>custom_models.ColumnItemModel</code></p> <p>Model showing the dependency tree of a distribution.</p> <p>Attention: Model can be recursive, so be careful with iterating whole tree.</p> Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def __init__(\nself,\nobj: metadata.Distribution | str,\nshow_root: bool = False,\nparent: core.QObject | None = None,\n):\nif isinstance(obj, str):\nobj = metadata.distribution(obj)\nsuper().__init__(\nobj=obj, columns=self.COLUMNS, parent=parent, show_root=show_root\n)\n</code></pre> <p>Tree model to display a python distribution and its dependencies.</p>"},{"location":"features/models/importlibtreemodel.html#supports","title":"Supports","text":"<p><code>importlib.metadata.distribution</code></p>"},{"location":"features/models/importlibtreemodel.html#additional-roles","title":"Additional roles","text":"Role Data ImportlibTreeModel.Roles.DistributionRole Distribution instance"},{"location":"features/models/lazylxmlmodel.html","title":"LazyLxmlModel","text":"<p>         Bases: <code>custom_models.BaseXmlModel</code></p> <p>Semi-lazy xml model based on lxml. Fetches all direct child nodes when needed.</p> <p>Model cant be modified, that only really makes sense for a full DOM implementation.</p> Source code in <code>prettyqt\\custom_models\\lxmlmodel.py</code> <pre><code>def __init__(\nself,\nobj: str | bytes | io.BytesIO | etree.ElementTree,\ntag: str | None = None,\n**kwargs,\n):\nmatch obj:\ncase io.BytesIO():\ncontext = etree.iterparse(obj, events=(\"start\",), tag=tag)\n_, root = next(context)\ncase bytes():\ncontext = etree.iterparse(io.BytesIO(obj), events=(\"start\",), tag=tag)\n_, root = next(context)\ncase str():\ncontext = etree.iterparse(\nio.BytesIO(obj.encode()), events=(\"start\",), tag=tag\n)\n_, root = next(context)\ncase etree.iterparse():\n_, root = next(obj)\ncase etree.Element():\nroot = obj\ncase _:\nraise TypeError(obj)\nsuper().__init__(obj=root, **kwargs)\n</code></pre>"},{"location":"features/models/lazylxmlmodel.html#supports","title":"Supports","text":"<p><code>lxml.etree.Element | lxml.etree.iterparse</code></p>"},{"location":"features/models/lazylxmlmodel.html#additional-roles","title":"Additional roles","text":"Role Data LazyLxmlModel.Roles.NodeRole Lxml Element Node"},{"location":"features/models/logrecordmodel.html","title":"LogRecordModel","text":"<p>         Bases: <code>custom_models.ColumnTableModel</code></p> Source code in <code>prettyqt\\custom_models\\logrecordmodel.py</code> <pre><code>def __init__(self, logger, level=logging.DEBUG, *args, **kwargs):\nsuper().__init__(items=[], columns=self.COLUMNS, **kwargs)\nself.handler = signallogger.SignalLogger()\nself.handler.signals.log_record.connect(self.add)\ncore.CoreApplication.call_on_exit(lambda: logger.removeHandler(self.handler))\nself.handler.setLevel(level)\nlogger.addHandler(self.handler)\n</code></pre>"},{"location":"features/models/logrecordmodel.html#supports","title":"Supports","text":"<p><code>Sequence[logging.LogRecord]</code></p>"},{"location":"features/models/lxmlmodel.html","title":"LxmlModel","text":"<p>         Bases: <code>custom_models.BaseXmlModel</code></p> <p>DOM xml model based on lxml. Parses full xml.</p> <p>Covers more features than the lazy models. (modifying the tree, xpath, ..)</p> Source code in <code>prettyqt\\custom_models\\lxmlmodel.py</code> <pre><code>def __init__(\nself,\nobj: str | bytes | etree.ElementTree,\n**kwargs,\n):\nmatch obj:\ncase bytes():\nxml_str = etree.XML(obj.decode())\ntree = etree.ElementTree(xml_str)\ncase str():\ntree = etree.ElementTree(etree.XML(obj))\ncase etree.ElementTree():\ntree = obj\ncase _:\nraise TypeError(obj)\nself.tree = tree\nsuper().__init__(obj=self.tree.getroot(), **kwargs)\n</code></pre>"},{"location":"features/models/lxmlmodel.html#supports","title":"Supports","text":"<p><code>lxml.etree.ElementTree</code></p>"},{"location":"features/models/lxmlmodel.html#additional-roles","title":"Additional roles","text":"Role Data LxmlModel.Roles.NodeRole Lxml Element Node"},{"location":"features/models/mappingmodel.html","title":"MappingModel","text":"<p>         Bases: <code>custom_models.ListMixin</code>, <code>core.AbstractTableModel</code></p>"},{"location":"features/models/mappingmodel.html#supports","title":"Supports","text":"<p><code>Sequence[dict]</code></p>"},{"location":"features/models/modelindexmodel.html","title":"ModelIndexModel","text":"<p>         Bases: <code>custom_models.ListMixin</code>, <code>core.AbstractTableModel</code></p> <p>Table model for displaying a the data of a list of ModelIndexes.</p>"},{"location":"features/models/modelindexmodel.html#prettyqt.custom_models.ModelIndexModel--example","title":"Example:","text":"<pre><code># get indexes from some random model\nmy_model = ParentClassTreeModel(widgets.QWidget, show_mro=True)\nindexes = list(my_model.iter_tree(fetch_more=True))\nmodel = ModelIndexModel(indexes=indexes)\n</code></pre> Source code in <code>prettyqt\\custom_models\\modelindexmodel.py</code> <pre><code>def __init__(\nself,\nindexes: list[core.ModelIndex],\n**kwargs,\n):\nself._use_model_roles = False\nsuper().__init__(**kwargs)\nself.items = indexes\nself._update_columns()\n</code></pre>"},{"location":"features/models/modelindexmodel.html#supports","title":"Supports","text":"<p><code>list[core.QModelIndex]</code></p>"},{"location":"features/models/modelindexmodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description use_model_roles <code>bool</code> Use QAbstractItemModel.roleNames() for columns"},{"location":"features/models/pandasindexmodel.html","title":"Pandasindexmodel","text":""},{"location":"features/models/pandasindexmodel.html#supports","title":"Supports","text":"<p><code>pandas.Index</code></p>"},{"location":"features/models/parentclasstreemodel.html","title":"ParentClassTreeModel","text":"<p>Class hierarchy example</p> Parentclass treeMRO tree <pre><code>from prettyqt import custom_models, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = custom_models.ParentClassTreeModel(widgets.TreeWidget)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> </p> <pre><code>from prettyqt import custom_models, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = custom_models.ParentClassTreeModel(widgets.TreeWidget, mro=True)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> </p> <p>         Bases: <code>BaseClassTreeModel</code></p> <p>Tree model to display the parent class tree of a python class.</p> Source code in <code>prettyqt\\custom_models\\classtreemodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._show_mro = False\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"features/models/parentclasstreemodel.html#supports","title":"Supports","text":"<p><code>type</code></p>"},{"location":"features/models/parentclasstreemodel.html#additional-roles","title":"Additional roles","text":"Role Data ParentClassTreeModel.Roles.SourceRole Source code of the class"},{"location":"features/models/polarsdataframemodel.html","title":"Polarsdataframemodel","text":""},{"location":"features/models/polarsdataframemodel.html#supports","title":"Supports","text":"<p><code>polars.DataFrame</code></p>"},{"location":"features/models/pydanticfieldsmodel.html","title":"PydanticFieldsModel","text":"<p>         Bases: <code>custom_models.BaseFieldsModel</code></p> <p>Table model to display the fields and their metadata of a pydantic model.</p> <p>More information about pydantic can be found [here][https://www.pydantic.dev/].</p> <p>Frozen BaseModels / frozen fields read-only.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\pydanticfieldsmodel.py</code> <pre><code>def __init__(self, instance: pydantic.BaseModel, **kwargs):\nsuper().__init__(instance, **kwargs)\n</code></pre> <p>Note</p> <p>This ItemModel only supports Pydantic v2 BaseModels.</p>"},{"location":"features/models/pydanticfieldsmodel.html#supports","title":"Supports","text":"<p><code>pydantic.BaseModel</code></p>"},{"location":"features/models/pydanticmodel.html","title":"PydanticModel","text":"<p>         Bases: <code>custom_models.BaseDataclassModel</code></p> <p>Table model to display a list of pydantic BaseModels.</p> <p>Non-frozen fields can be edited.</p> <p>Info</p> <p>For being able to edit more types, using the EditorDelegate is recommended.</p> Source code in <code>prettyqt\\custom_models\\pydanticmodel.py</code> <pre><code>def __init__(self, items: Sequence[pydantic.BaseModel], **kwargs):\nsuper().__init__(items, **kwargs)\n</code></pre> <p>Note</p> <p>This ItemModel only supports lists containing Pydantic v2 BaseModels.</p>"},{"location":"features/models/pydanticmodel.html#supports","title":"Supports","text":"<p><code>list[pydantic.BaseModel]</code></p>"},{"location":"features/models/pythonobjecttreemodel.html","title":"PythonObjectTreeModel","text":"<p>         Bases: <code>custom_models.ColumnItemModel</code></p> Source code in <code>prettyqt\\custom_models\\pythonobjecttreemodel.py</code> <pre><code>def __init__(self, obj, parent=None):\nsuper().__init__(obj, self.COLUMNS, show_root=False, parent=parent)\n</code></pre>"},{"location":"features/models/pythonobjecttreemodel.html#prettyqt.custom_models.pythonobjecttreemodel.PythonObjectTreeModel.get_path_for_index","title":"<code>get_path_for_index(index: core.ModelIndex) -&gt; str</code>","text":"<p>Get the path for the object referenced by index.</p>"},{"location":"features/models/pythonobjecttreemodel.html#prettyqt.custom_models.pythonobjecttreemodel.PythonObjectTreeModel.get_path_for_index--example","title":"Example:","text":"<pre><code>An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n</code></pre> Source code in <code>prettyqt\\custom_models\\pythonobjecttreemodel.py</code> <pre><code>def get_path_for_index(self, index: core.ModelIndex) -&gt; str:\n\"\"\"Get the path for the object referenced by index.\n    ### Example:\n    ```\n    An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n    ```\n    \"\"\"\n# TODO: not used yet, better rework ColumnItemModel first\ntreeitem = index.data(constants.USER_ROLE)\nif treeitem is None:\nreturn\nprev_data = treeitem.obj\npieces = []\nwhile (index := index.parent()).isValid():\ntreeitem = index.data(constants.USER_ROLE)\ndata = treeitem.obj\nmatch data:\ncase Mapping():\nfor k, v in data.items():\nif v is prev_data:\npieces.append(f\"[{k!r}]\")\nbreak\ncase Iterable():\npieces.append(f\"[{data.index(prev_data)}]\")\ncase _:\n# or should this be treeitem.obj_name?\npieces.append(f\".{prev_data.__name__}\")\nprev_data = data\npieces.append(treeitem.obj_name)\nlogger.info(pieces)\nreturn \"\".join(reversed(pieces))\n</code></pre>"},{"location":"features/models/pythonobjecttreemodel.html#supports","title":"Supports","text":"<p><code>object</code></p>"},{"location":"features/models/regexmatchesmodel.html","title":"RegexMatchesModel","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def __init__(self, matches: list | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.matches = matches or []\n</code></pre>"},{"location":"features/models/regexmatchesmodel.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.matches)\n</code></pre>"},{"location":"features/models/regexmatchesmodel.html#supports","title":"Supports","text":"<p><code>list[re.Match]</code></p>"},{"location":"features/models/shortcutsmodel.html","title":"ShortcutsModel","text":"<p>         Bases: <code>custom_models.ColumnTableModel</code></p> Source code in <code>prettyqt\\custom_models\\shortcutsmodel.py</code> <pre><code>def __init__(self, shortcuts: Sequence[gui.QShortcut], parent=None):\nsuper().__init__(shortcuts, self.COLUMNS, parent=parent)\n</code></pre>"},{"location":"features/models/shortcutsmodel.html#supports","title":"Supports","text":"<p><code>list[gui.QShortcut]</code></p>"},{"location":"features/models/storageinfomodel.html","title":"StorageInfoModel","text":"<p>         Bases: <code>custom_models.ColumnTableModel</code></p> Source code in <code>prettyqt\\custom_models\\storageinfomodel.py</code> <pre><code>def __init__(self, volumes: list[core.QStorageInfo], parent=None):\nsuper().__init__(volumes, self.COLUMNS, parent=parent)\n</code></pre>"},{"location":"features/models/storageinfomodel.html#supports","title":"Supports","text":"<p><code>list[core.QStorageInfo]</code></p>"},{"location":"features/models/subclasstreemodel.html","title":"SubClassTreeModel","text":"<pre><code>from prettyqt import custom_models, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = custom_models.SubClassTreeModel(core.AbstractItemModelMixin)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p>         Bases: <code>BaseClassTreeModel</code></p> <p>Model to display the subclass tree of a python class.</p> <p>Also supports <code>types.UnionType</code>.</p>"},{"location":"features/models/subclasstreemodel.html#supports","title":"Supports","text":"<p><code>type</code> | <code>types.UnionType</code></p>"},{"location":"features/models/subclasstreemodel.html#additional-roles","title":"Additional roles","text":"Role Data SubClassTreeModel.Roles.SourceRole Source code of the class"},{"location":"features/models/subclasstreemodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description show_mro <code>bool</code> List complete mro as children instead of just direct subclasses"},{"location":"features/models/xmlmodel.html","title":"XmlModel","text":"<p>         Bases: <code>BaseXmlModel</code></p> <p>Semi-lazy xml model. Fetches all direct child nodes when needed.</p> <p>Model cant be modified, that only really makes sense for a full DOM implementation.</p> Source code in <code>prettyqt\\custom_models\\xmlmodel.py</code> <pre><code>def __init__(\nself,\nobj: str | datatypes.IsTreeIterator | ET.ElementTree,\nshow_root: bool = True,\n**kwargs,\n):\nmatch obj:\ncase io.StringIO():\ncontext = ET.iterparse(obj, events=(\"start\",))\n_, root = next(context)\ncase str():\ncontext = ET.iterparse(io.StringIO(obj), events=(\"start\",))\n_, root = next(context)\ncase datatypes.IsTreeIterator():\n_, root = next(obj)\ncase ET.ElementTree():\nxml_str = ET.tostring(obj._root, encoding=\"unicode\")\ncontext = ET.iterparse(io.StringIO(xml_str), events=(\"start\",))\n_, root = next(context)\ncase _:\nraise TypeError(obj)\nsuper().__init__(obj=root, **kwargs)\n</code></pre>"},{"location":"features/models/xmlmodel.html#supports","title":"Supports","text":"<p><code>ET.ElementTree | ET.Element | xml TreeIterator</code></p>"},{"location":"features/models/xmlmodel.html#additional-roles","title":"Additional roles","text":"Role Data XmlModel.Roles.NodeRole Element Node"},{"location":"features/proxymodels/appearanceproxymodel.html","title":"AppearanceProxyModel","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the \"style roles\" of the source model.</p> <p>In contrast to SliceAppearanceProxyModel, this one works in a more \"static\" way, meaning that you can change the color / font / alignment of indexes via model.setData even when the source model is not item-based (like a StandardItemModel).</p>"},{"location":"features/proxymodels/appearanceproxymodel.html#prettyqt.custom_models.AppearanceProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\nproxy = custom_models.AppearanceProxyModel()\nproxy.set_source_model(model)\nproxy.setData(proxy.index(0, 0), gui.QColor(\"red\"), role=constants.FOREGROUND_ROLE)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\appearanceproxymodel.py</code> <pre><code>def __init__(\nself,\nforeground_default=None,\nbackground_default=None,\nfont_default=None,\nalignment_default=None,\n**kwargs,\n):\nself._foregrounds = collections.defaultdict(lambda: None)\nself._backgrounds = collections.defaultdict(lambda: None)\nself._alignments = collections.defaultdict(lambda: None)\nself._fonts = collections.defaultdict(lambda: None)\nself._foreground_default = foreground_default\nself._background_default = background_default\nself._font_default = font_default\nself._alignment_default = alignment_default\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"features/proxymodels/appearanceproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description font_default <code>QFont</code> Default font for whole table foreground_default <code>QColor</code> or <code>QBrush</code> Default foureground for whole table background_default <code>QColor</code> or <code>QBrush</code> Default background for whole table alignment_default <code>AlignmentFlag</code> Default alignment for whole table"},{"location":"features/proxymodels/changeheadersproxymodel.html","title":"ChangeHeadersProxymodel","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the header data (either horizontal or vertical).</p> <p>Header data can either be changed by passing a list with same length as source length or by passing a dictionary with index as key and new value as value (Example: {1: \"abc\", 3: \"def\"} changes section 1 to \"abc\" and section 3 to \"def\") Apart from the regular use case of changing the text, the other roles can be changed, too.</p>"},{"location":"features/proxymodels/changeheadersproxymodel.html#prettyqt.custom_models.ChangeHeadersProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.change_headers(header=[\"x\", \"y\", \"z\"],\norientation=constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE\n)\ntable.show()\n# or\nmodel = MyModel()\nproxy = ChangeHeadersProxyModel(\nheader=[\"x\", \"y\", \"z\"], orientation=constants.VERTICAL\n)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\changeheadersproxymodel.py</code> <pre><code>def __init__(\nself,\nheader: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself._header = header\nself._role = role\n</code></pre>"},{"location":"features/proxymodels/changeheadersproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description header <code>dict</code> or <code>list</code> Default font for whole table"},{"location":"features/proxymodels/columnjoinerproxymodel.html","title":"ColumnJoinerProxyModel","text":"<p>ColumnJoinerProxyModel</p> Without proxyWith proxy <p><pre><code>data = dict(first=[\"John\", \"Mary\"], last=[\"Doe\", \"Bo\"])\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier.add_column(header=\"Full name\", formatter=\"{1}, {0}\")\ntable.show()\n</code></pre> </p> <p><pre><code>data = dict(first=[\"John\", \"Mary\"], last=[\"Doe\", \"Bo\"])\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier.add_column(header=\"Full name\", formatter=\"{1}, {0}\")\ntable.show()\n</code></pre> </p> <p>         Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model which joins the contents of several columns.</p> <p>The columns are joined based on a formatter and appended to the end of the model as a new column.</p> <p>The formatter must look like <code>{0} - {1}: {4}</code>. The format codes are then populated with the content of given columns, in this case it would be <code>{Text of column 0} - {Text of Column 1}: {Text of Column 4}</code></p>"},{"location":"features/proxymodels/columnjoinerproxymodel.html#prettyqt.custom_models.ColumnJoinerProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.join_columns(formatter=\"{0} - {2}\", header=\"New column\")\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnJoinerProxyModel()\nproxy.set_source_model(model)\nproxy.add_column(formatter=\"{0} - {2}\", header=\"New column\")\nproxy.add_column(formatter=\"{4}: {5}\", header=\"Another column\")\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\columnjoinerproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.mapping = []\n</code></pre>"},{"location":"features/proxymodels/columnjoinerproxymodel.html#prettyqt.custom_models.proxies.columnjoinerproxymodel.ColumnJoinerProxyModel.add_mapping","title":"<code>add_mapping(header: str, formatter: str, flags: constants.ItemFlag | None = None)</code>","text":"<p>Add a new column to the table.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Label used for the section header.</p> required <code>formatter</code> <code>str</code> <p>String formatter (example \"{0}: {1}\")</p> required <code>flags</code> <code>constants.ItemFlag | None</code> <p>ItemFlags for new column</p> <code>None</code> Source code in <code>prettyqt\\custom_models\\proxies\\columnjoinerproxymodel.py</code> <pre><code>def add_mapping(\nself, header: str, formatter: str, flags: constants.ItemFlag | None = None\n):\n\"\"\"Add a new column to the table.\n    Arguments:\n        header: Label used for the section header.\n        formatter: String formatter (example \"{0}: {1}\")\n        flags: ItemFlags for new column\n    \"\"\"\nself.mapping.append(ColumnMapping(formatter, header, flags))\n</code></pre>"},{"location":"features/proxymodels/columnorderproxymodel.html","title":"ColumnOrderProxyModel","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which reorders the columns of the source model.</p> <p>Proxy model which reorders / hides the columns of the source model by passing a list containing the new order. If not all indexes are part of the list, then the missing sections will be hidden.</p>"},{"location":"features/proxymodels/columnorderproxymodel.html#prettyqt.custom_models.ColumnOrderProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.reorder_columns(order=[3, 2, 0])\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnOrderProxyModel(order=[3, 2, 0])\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\columnorderproxymodel.py</code> <pre><code>def __init__(self, order: list[int], **kwargs):\nself._column_order = order\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"features/proxymodels/columnorderproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode"},{"location":"features/proxymodels/flattentreeproxymodel.html","title":"FlattenTreeProxyModel","text":"<p>Proxy model to flatten a tree to appear like a table.</p>"},{"location":"features/proxymodels/flattentreeproxymodel.html#example","title":"Example","text":"<p>Original model:</p> <p>MeltProxyModel</p> Without proxyWith proxyPath modeLeaves only mode <p><pre><code>table = widgets.TreeView()\nsource_model = custom_models.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\n# table.proxifier.flatten()\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = custom_models.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\ntable.proxifier.flatten()\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = custom_models.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\ntable.proxifier.flatten(show_path=True)\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = custom_models.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\ntable.proxifier.flatten(leaves_only=True)\n</code></pre> </p> <pre><code>table.proxifier.flatten()\n# or\nproxy = custom_models.FlattenTreeProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\n</code></pre>"},{"location":"features/proxymodels/flattentreeproxymodel.html#api","title":"API","text":"<p>         Bases: <code>core.AbstractProxyModel</code></p> Source code in <code>prettyqt\\custom_models\\proxies\\flattentreeproxymodel.py</code> <pre><code>def __init__(self, parent: widgets.QWidget | None = None, **kwargs):\nself._leaves_only = False\nself._show_path = False\nself._source_column = 0\nself.PATH_SEPARATOR = \" / \"\nself._source_root_index = core.ModelIndex()\nself._source_key: list[tuple[int, ...]] = []\nself._source_offset: dict[tuple[int, ...], int] = {}\nsuper().__init__(parent, **kwargs)\n</code></pre>"},{"location":"features/proxymodels/flattentreeproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description show_path <code>bool</code> Show full path in first column leaves_only <code>bool</code> Only include tree leaves"},{"location":"features/proxymodels/fuzzyfilterproxymodel.html","title":"FuzzyFilterProxyModel","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel which sorts the results based on a matching score.</p> <p>The matching score evaluates metrics like upper/lower casing, distance of filter character to match character and some more. Best matches are shown at the top.</p> <p>The matching score is exposed as a custom UserRole (FuzzyFilterProxyModel.Roles.SortRole) The proxymodel replaces the text from the display role in the given filter column with HTML code in order to color the letter matches. A backup from the original text is made available in the BackupRole. Based on the original text, the proxy calculates a score for the match and makes it available via the SortRole. To display the html code properly, a HtmlItemDelegate is needed.</p>"},{"location":"features/proxymodels/fuzzyfilterproxymodel.html#prettyqt.custom_models.FuzzyFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = custom_models.FuzzyFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\fuzzyfilterproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, filter_mode=\"fuzzy\", **kwargs)\nself._search_term = \"\"\nself._match_color: gui.QColor = gui.Color(\"blue\")\nself.sort(0, constants.DESCENDING)\n</code></pre>"},{"location":"features/proxymodels/fuzzyfilterproxymodel.html#prettyqt.custom_models.proxies.fuzzyfilterproxymodel.FuzzyFilterProxyModel.Roles","title":"<code>Roles</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Addional roles.</p>"},{"location":"features/proxymodels/highlightmouseproxymodel.html","title":"HighlightMouseProxyModel","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same row / column as mouse position.</p> <p>The proxy can work in four different modes.</p> <ul> <li>column: The column the mouse is currently hovering over is highlighted.</li> <li>row: The row the mouse is currently hovering over is highlighted.</li> <li>both: Combination of column and row mode.</li> <li>single: only the hovered cell is highlighted.</li> </ul> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def __init__(\nself,\nparent: widgets.QAbstractItemView,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"both\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(parent, **kwargs)\nparent.setMouseTracking(True)\nparent.entered.connect(self.cell_entered)\nparent.installEventFilter(self)\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.custom_models.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlight mode highlight_color <code>gui.QColor</code> Color to use for highlighting"},{"location":"features/proxymodels/meltproxymodel.html","title":"MeltProxyModel","text":"<p>MeltProxyModel</p> Without proxyWith proxy <p><pre><code>app = widgets.app()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier.melt(id_columns=[0, 1])\ntable.show()\n</code></pre> </p> <p><pre><code>app = widgets.app()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier.melt(id_columns=[0, 1])\ntable.show()\n</code></pre> </p> <p>         Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model to unpivot a table from wide format to long format.</p> <p>Works same way as pandas.melt.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def __init__(\nself,\nid_columns: list[int],\nvar_name: str = \"Variable\",\nvalue_name: str = \"Value\",\n**kwargs,\n):\nself._id_columns = id_columns\nself._var_name = var_name\nself._value_name = value_name\nsuper().__init__(**kwargs)\n</code></pre> <pre><code>table.proxifier.melt(id_columns=[0, 1])\n# equals\nproxy = custom_models.MeltProxyModel(id_columns=[0, 1])\nproxy.set_source_model(table.model())\ntable.set_model(proxy)\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.get_id_columns","title":"<code>get_id_columns() -&gt; list[int]</code>","text":"<p>Get list of identifier columns.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def get_id_columns(self) -&gt; list[int]:\n\"\"\"Get list of identifier columns.\"\"\"\nreturn self._id_columns\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.get_value_name","title":"<code>get_value_name() -&gt; str</code>","text":"<p>Get value column header.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def get_value_name(self) -&gt; str:\n\"\"\"Get value column header.\"\"\"\nreturn self._value_name\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.get_var_name","title":"<code>get_var_name() -&gt; str</code>","text":"<p>Get variable column header.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def get_var_name(self) -&gt; str:\n\"\"\"Get variable column header.\"\"\"\nreturn self._var_name\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.set_id_columns","title":"<code>set_id_columns(columns: list[int])</code>","text":"<p>Set identifier variable columns.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def set_id_columns(self, columns: list[int]):\n\"\"\"Set identifier variable columns.\"\"\"\nself._id_columns = columns\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.set_value_name","title":"<code>set_value_name(name: str)</code>","text":"<p>Set header for value column.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def set_value_name(self, name: str):\n\"\"\"Set header for value column.\"\"\"\nself._value_name = name\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.custom_models.proxies.meltproxymodel.MeltProxyModel.set_var_name","title":"<code>set_var_name(name: str)</code>","text":"<p>Set header for variable column.</p> Source code in <code>prettyqt\\custom_models\\proxies\\meltproxymodel.py</code> <pre><code>def set_var_name(self, name: str):\n\"\"\"Set header for variable column.\"\"\"\nself._var_name = name\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description id_columns <code>list[int]</code> Columns to use as identifier variables var_name <code>str</code> Header for variable column value_name <code>str</code> Header for value column"},{"location":"features/proxymodels/multicolumnfilterproxymodel.html","title":"MultiColumnFilterProxyModel","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A SortFilterProxyModel which filters based on multiple columns in one go.</p> <p>This proxy uses seperate search term / values for each column in order to filter the source model, thus avoiding to layer proxy models in case you want to filter based on several columns. That way it is less demanding since filtering for all columns is done in one go.</p> <p>This model is used by the FilterHeader widget in order to filter a table in one go, avoiding the need to layer multiple proxy models.</p>"},{"location":"features/proxymodels/multicolumnfilterproxymodel.html#prettyqt.custom_models.MultiColumnFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = custom_models.MultiColumnFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\multicolumnfilterproxymodel.py</code> <pre><code>def __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: dict[int, Filter] = {}\nself.setRecursiveFilteringEnabled(True)\n</code></pre>"},{"location":"features/proxymodels/pandasevalfilterproxymodel.html","title":"PandasEvalFilterProxyModel","text":"<p>         Bases: <code>BasePandasIndexFilterProxyModel</code></p> Source code in <code>prettyqt\\qtpandas\\pandasmodels\\pandasindexfilterproxymodel.py</code> <pre><code>def __init__(self, **kwargs):\nself._expression = \"\"\nsuper().__init__(**kwargs)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/pandasmultistringcolumnfilterproxymodel.html","title":"PandasMultiStringColumnFilterProxyModel","text":"<p>         Bases: <code>BasePandasIndexFilterProxyModel</code></p> Source code in <code>prettyqt\\qtpandas\\pandasmodels\\pandasindexfilterproxymodel.py</code> <pre><code>def __init__(self, **kwargs):\nself._filters: dict[str, str] = {}\nsuper().__init__(**kwargs)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/pandasstringcolumnfilterproxymodel.html","title":"PandasStringColumnFilterProxyModel","text":"<p>         Bases: <code>BasePandasIndexFilterProxyModel</code></p> <p>Basically filters a dataframe based on df.iloc[:, column].str.somemethod(term).</p> Source code in <code>prettyqt\\qtpandas\\pandasmodels\\pandasindexfilterproxymodel.py</code> <pre><code>def __init__(self, **kwargs):\nself._filter_column = 0\nself._filter_mode = \"startswith\"\nself._case_sensitive = True\nself._flags = 0\nself._search_term = \"\"\nself._na_value = False\nsuper().__init__(**kwargs)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/predicatefilterproxymodel.html","title":"PredicateFilterProxyModel","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A simple filter proxy model with settable filter predicates.</p>"},{"location":"features/proxymodels/predicatefilterproxymodel.html#prettyqt.custom_models.PredicateFilterProxyModel--example","title":"Example:","text":"<pre><code>proxy = PredicateFilterProxyModel()\nproxy.add_filter(lambda value: value &lt; 1)\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\predicatefilterproxymodel.py</code> <pre><code>def __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: list[Callable[[Any], bool]] = []\n</code></pre>"},{"location":"features/proxymodels/proxifier.html","title":"Proxifier","text":"<p>The proxifier object offers a more declarative way to set up proxy models.</p> <pre><code>model = MyTableModel()\ntable = widgets.TableView()\ntable.set_model(model)\n# lets change the appearance a bit.\n# Set the font color of column 2 and 3 to red and font to Courier.\ntable.proxifier[:, 2:4].style(foreground=\"red\", font=\"Courier\")\n# Cut off last column and only show last 50 lines.\ntable.proxifier[:50, :-1].filter()\n# Set first 20 lines of these 50 lines to read_only\ntable.proxifier[:20, :].change_flags(editable=False)\n# Make first column checkable and trigger callback on checkstate change.\ntable.proxifier[0].make_checkable(callback=my_callback)\n</code></pre> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def __init__(self, widget: widgets.QAbstractItemView):\nself._widget = widget\nself._wrapper = None\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.__getitem__","title":"<code>__getitem__(value: slice) -&gt; Sliced</code>","text":"<p>Return a Sliced Object.</p> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def __getitem__(self, value: slice) -&gt; Sliced:\n\"\"\"Return a Sliced Object.\"\"\"\nlogger.debug(f\"Building {value!r} ProxyModel for {self._widget!r}\")\nself._wrapper = Sliced(indexer=value, widget=self._widget, proxifier=self)\nreturn self._wrapper\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.add_column","title":"<code>add_column(header: str, formatter: str, flags: constants.ItemFlag | None = None) -&gt; custom_models.ColumnJoinerProxyModel</code>","text":"<p>Add a new column with given header to the table.</p> <p>Column content can be defined by a formatter.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Title for section header</p> required <code>formatter</code> <code>str</code> <p>String formatter (Example: \"{2} - {4}\" would result in         -  required <code>flags</code> <code>constants.ItemFlag | None</code> <p>ItemFlags for new column (default: Enabled and selectable)</p> <code>None</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def add_column(\nself,\nheader: str,\nformatter: str,\nflags: constants.ItemFlag | None = None,\n) -&gt; custom_models.ColumnJoinerProxyModel:\n\"\"\"Add a new column with given header to the table.\n    Column content can be defined by a formatter.\n    Arguments:\n        header: Title for section header\n        formatter: String formatter (Example: \"{2} - {4}\" would result in\n                   &lt;displayRole of column 2&gt; - &lt;displayRole of column4&gt;\n        flags: ItemFlags for new column (default: Enabled and selectable)\n    \"\"\"\nfrom prettyqt import custom_models\nproxy = custom_models.ColumnJoinerProxyModel(parent=self._widget)\nproxy.add_mapping(header=header, formatter=formatter, flags=flags)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.change_headers","title":"<code>change_headers(headers: list[Any] | dict[int, Any], orientation: constants.Orientation | constants.OrientationStr = constants.HORIZONTAL, role: constants.ItemDataRole = constants.DISPLAY_ROLE) -&gt; custom_models.ChangeHeadersProxyModel</code>","text":"<p>Change headers of source model.</p> <p>Wraps current model with a ChangeHeadersProxyModel.</p> <p>Parameters:</p> Name Type Description Default <code>headers</code> <code>list[Any] | dict[int, Any]</code> <p>new headers to use</p> required <code>orientation</code> <code>constants.Orientation | constants.OrientationStr</code> <p>orientation of the header which should be modified.</p> <code>constants.HORIZONTAL</code> <code>role</code> <code>constants.ItemDataRole</code> <p>Header role to change</p> <code>constants.DISPLAY_ROLE</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def change_headers(\nself,\nheaders: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; custom_models.ChangeHeadersProxyModel:\n\"\"\"Change headers of source model.\n    Wraps current model with a ChangeHeadersProxyModel.\n    Arguments:\n        headers: new headers to use\n        orientation: orientation of the header which should be modified.\n        role: Header role to change\n    \"\"\"\nfrom prettyqt import custom_models\nproxy = custom_models.ChangeHeadersProxyModel(\nheader=headers, role=role, orientation=orientation, parent=self._widget\n)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.flatten","title":"<code>flatten(show_path: bool = False, leaves_only: bool = False) -&gt; custom_models.FlattenTreeProxyModel</code>","text":"<p>Wraps model in a Proxy which flattens tree to one column.</p> <p>Parameters:</p> Name Type Description Default <code>show_path</code> <code>bool</code> <p>Whether the first column should show the full tree path.</p> <code>False</code> <code>leaves_only</code> <code>bool</code> <p>whether the proxied model should return only tree leaves.</p> <code>False</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def flatten(\nself, show_path: bool = False, leaves_only: bool = False\n) -&gt; custom_models.FlattenTreeProxyModel:\n\"\"\"Wraps model in a Proxy which flattens tree to one column.\n    Arguments:\n        show_path: Whether the first column should show the full tree path.\n        leaves_only: whether the proxied model should return only tree leaves.\n    \"\"\"\n# ss = \"\"\"QTreeView::branch{border-image: url(none.png);}\"\"\"\n# self._widget.set_stylesheet(ss)\nfrom prettyqt import custom_models\nproxy = custom_models.FlattenTreeProxyModel(\nparent=self._widget, show_path=show_path, leaves_only=leaves_only\n)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.map_from","title":"<code>map_from(index_or_selection: core.ModelIndex | core.QItemSelection, source: widgets.QAbstractItemView | core.QAbstractItemModel) -&gt; core.ModelIndex | core.QItemSelection</code>","text":"<p>Map index or selection from given source.</p> <p>Parameters:</p> Name Type Description Default <code>index_or_selection</code> <code>core.ModelIndex | core.QItemSelection</code> <p>What should be mapped.</p> required <code>source</code> <code>widgets.QAbstractItemView | core.QAbstractItemModel</code> <p>Either an ItemView or a (proxy) model which is linked to our current     model.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def map_from(\nself,\nindex_or_selection: core.ModelIndex | core.QItemSelection,\nsource: widgets.QAbstractItemView | core.QAbstractItemModel,\n) -&gt; core.ModelIndex | core.QItemSelection:\n\"\"\"Map index or selection from given source.\n    Arguments:\n        index_or_selection: What should be mapped.\n        source: Either an ItemView or a (proxy) model which is linked to our current\n                model.\n    \"\"\"\nif isinstance(source, widgets.QAbstractItemView):\nsource = source.model()\nmapper = custom_models.ProxyMapper(self._widget.model(), source)\nmatch index_or_selection:\ncase core.ModelIndex():\nreturn mapper.map_index(from_=1, to=0, index=index_or_selection)\ncase core.QItemSelection():\nreturn mapper.map_selection(from_=1, to=0, selection=index_or_selection)\ncase _:\nraise TypeError(index_or_selection)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.map_to","title":"<code>map_to(index_or_selection: core.ModelIndex | core.QItemSelection, target: widgets.QAbstractItemView | core.QAbstractItemModel) -&gt; core.ModelIndex | core.QItemSelection</code>","text":"<p>Map index or selection to given target.</p> <p>Parameters:</p> Name Type Description Default <code>index_or_selection</code> <code>core.ModelIndex | core.QItemSelection</code> <p>What should be mapped.</p> required <code>target</code> <code>widgets.QAbstractItemView | core.QAbstractItemModel</code> <p>Either an ItemView or a (proxy) model which is linked to our current     model.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def map_to(\nself,\nindex_or_selection: core.ModelIndex | core.QItemSelection,\ntarget: widgets.QAbstractItemView | core.QAbstractItemModel,\n) -&gt; core.ModelIndex | core.QItemSelection:\n\"\"\"Map index or selection to given target.\n    Arguments:\n        index_or_selection: What should be mapped.\n        target: Either an ItemView or a (proxy) model which is linked to our current\n                model.\n    \"\"\"\nif isinstance(target, widgets.QAbstractItemView):\ntarget = target.model()\nmapper = custom_models.ProxyMapper(self._widget.model(), target)\nmatch index_or_selection:\ncase core.ModelIndex():\nreturn mapper.map_index(from_=0, to=1, index=index_or_selection)\ncase core.QItemSelection():\nreturn mapper.map_selection(from_=0, to=1, selection=index_or_selection)\ncase _:\nraise TypeError(index_or_selection)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.melt","title":"<code>melt(id_columns: list[int], var_name: str = 'Variable', value_name: str = 'Value') -&gt; custom_models.MeltProxyModel</code>","text":"<p>Wraps model in a Proxy which unpivots the table to a long format.</p> <p>Parameters:</p> Name Type Description Default <code>id_columns</code> <code>list[int]</code> <p>Identifier variables</p> required <code>var_name</code> <code>str</code> <p>header to use for variable column</p> <code>'Variable'</code> <code>value_name</code> <code>str</code> <p>header to use for value_name</p> <code>'Value'</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def melt(\nself, id_columns: list[int], var_name: str = \"Variable\", value_name: str = \"Value\"\n) -&gt; custom_models.MeltProxyModel:\n\"\"\"Wraps model in a Proxy which unpivots the table to a long format.\n    Arguments:\n        id_columns: Identifier variables\n        var_name: header to use for variable column\n        value_name: header to use for value_name\n    \"\"\"\nfrom prettyqt import custom_models\nproxy = custom_models.MeltProxyModel(\nid_columns=id_columns,\nvar_name=var_name,\nvalue_name=value_name,\nparent=self._widget,\n)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.reorder_columns","title":"<code>reorder_columns(order: list[int]) -&gt; custom_models.ColumnOrderProxyModel</code>","text":"<p>Reorder columns to given order.</p> <p>Wraps current model with a ColumnOrderProxyModel which rearranges columns to given order.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>list[int]</code> <p>list of indexes. Does not need to include all column indexes,   missing ones will be hidden.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def reorder_columns(self, order: list[int]) -&gt; custom_models.ColumnOrderProxyModel:\n\"\"\"Reorder columns to given order.\n    Wraps current model with a ColumnOrderProxyModel which rearranges columns to given\n    order.\n    Arguments:\n        order: list of indexes. Does not need to include all column indexes,\n              missing ones will be hidden.\n    \"\"\"\nfrom prettyqt import custom_models\nproxy = custom_models.ColumnOrderProxyModel(order=order, parent=self._widget)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.sync_current_selection_with","title":"<code>sync_current_selection_with(target: widgets.QAbstractItemView | core.QAbstractItemModel)</code>","text":"<p>Map index or selection from given source.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>widgets.QAbstractItemView | core.QAbstractItemModel</code> <p>Either an ItemView or a (proxy) model which is linked to our current     model.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def sync_current_selection_with(\nself,\ntarget: widgets.QAbstractItemView | core.QAbstractItemModel,\n):\n\"\"\"Map index or selection from given source.\n    Arguments:\n        target: Either an ItemView or a (proxy) model which is linked to our current\n                model.\n    \"\"\"\nif isinstance(target, widgets.QAbstractItemView):\ntarget = target.model()\ncustom_models.ProxyMapper(self._widget.model(), target)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.to_list","title":"<code>to_list() -&gt; custom_models.TableToListProxyModel</code>","text":"<p>Convert table to a list.</p> <p>Wraps model with a TableToListProxyModel which reshapes table to one column by concatenating the seperatate columns into a one-columned list.</p> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def to_list(self) -&gt; custom_models.TableToListProxyModel:\n\"\"\"Convert table to a list.\n    Wraps model with a TableToListProxyModel which reshapes table to one column\n    by concatenating the seperatate columns into a one-columned list.\n    \"\"\"\nfrom prettyqt import custom_models\nproxy = custom_models.TableToListProxyModel(parent=self._widget)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.transpose","title":"<code>transpose() -&gt; core.TransposeProxyModel</code>","text":"<p>Transpose rows/columns.</p> <p>Wraps current model with a TransposeProxyModel.</p> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def transpose(self) -&gt; core.TransposeProxyModel:\n\"\"\"Transpose rows/columns.\n    Wraps current model with a TransposeProxyModel.\n    \"\"\"\nproxy = core.TransposeProxyModel(parent=self._widget)\nproxy.setSourceModel(self._widget.model())\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/rangefilterproxymodel.html","title":"RangeFilterProxyModel","text":"<p>         Bases: <code>core.Object</code></p> <p>Class to map indexes / ItemSelections from one proxy to another.</p> <p>Also handles cases like: <pre><code>            Root model\n                |\n           shared proxy\n           /                      Proxy_1_1     Proxy_2_1\n          |            |\n        Proxy_1_2     Proxy_2_2\n</code></pre> When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then mapFromSource / mapSelectionFromSource to get down to 2_2.</p> Source code in <code>prettyqt\\custom_models\\proxies\\proxymapper.py</code> <pre><code>def __init__(\nself,\n*proxies: core.QAbstractItemModel,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nchains = [self.get_proxy_chain(proxy) for proxy in proxies]\ncommon_list = [\nelement\nfor element in chains[0]\nif all(element in sublist for sublist in chains[1:])\n]\nif not common_list:\nraise RuntimeError(\"No common source model\")\ncommon_source = common_list[0]\nlogger.debug(f\"Common source: {common_source}\")\nself._chains = [chain[: chain.index(common_source)] for chain in chains]\n</code></pre>"},{"location":"features/proxymodels/sliceappearanceproxymodel.html","title":"SliceAppearanceProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceappearanceproxymodel.py</code> <pre><code>def __init__(\nself,\nforeground: gui.QColor | gui.QBrush | str | None = None,\nbackground: gui.QColor | gui.QBrush | str | None = None,\nfont: str | gui.QFont | None = None,\nalignment: constants.AlignmentFlag | constants.AlignmentStr | None = None,\noverride: bool = True,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._foreground = gui.QColor()\nself.set_foreground(foreground)\nself._background = gui.QColor()\nself.set_background(background)\nself._font = gui.QFont()\nself.set_font(font)\nself._alignment = constants.ALIGN_CENTER_LEFT\nself.set_alignment(alignment)\nself._override = override\n</code></pre>"},{"location":"features/proxymodels/sliceappearanceproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows font_value <code>gui.QFont</code> Font to use foreground_value <code>gui.QColor</code>, <code>gui.QBrush</code> Foreground to use background_value <code>gui.QColor</code>, <code>gui.QBrush</code> Background to use alignment_value constants.AlignmentFlag Alignment to use <p>Note</p> <p>Due to Qt limitations, slice properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html","title":"SliceChangeFlagsProxyModel","text":"<p>SliceChangeFlagsProxyModel</p> Without proxyWith proxy <p><pre><code>table = widgets.TreeView()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nsource_model = gui.StandardItemModel.from_dict(data)\ntable.set_model(source_model)\n# table.proxifier.change_flags(enabled=False)\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nsource_model = gui.StandardItemModel.from_dict(data)\ntable.set_model(source_model)\ntable.proxifier.change_flags(enabled=False)\n</code></pre> </p> <p>Supports changing all ItemRoles by passing keyword arguments.</p> <p>Possible keyword arguments:</p> <ul> <li><code>selectable</code>: ItemFlag.ItemIsSelectable,</li> <li><code>editable</code>: ItemFlag.ItemIsEditable,</li> <li><code>drag_enabled</code>: ItemFlag.ItemIsDragEnabled,</li> <li><code>drop_enabled</code>: ItemFlag.ItemIsDropEnabled,</li> <li><code>user_checkable</code>: ItemFlag.ItemIsUserCheckable,</li> <li><code>enabled</code>: ItemFlag.ItemIsEnabled,</li> <li><code>auto_tristate</code>: ItemFlag.ItemIsAutoTristate,</li> <li><code>never_has_children</code>: ItemFlag.ItemNeverHasChildren,</li> <li><code>user_tristate</code>: ItemFlag.ItemIsUserTristate,</li> </ul>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html#example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].change_flags(readable=False)\ntable.show()\n</code></pre> <p>or</p> <pre><code>indexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceChangeFlagsProxyModel(indexer=indexer, readable=False)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html#api","title":"API","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to selectively change the ItemFlags of the source model.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicechangeflagsproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._flags_to_remove: constants.ItemFlag = constants.ItemFlag(0)\nself._flags_to_add: constants.ItemFlag = constants.ItemFlag(0)\n</code></pre>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows flags_to_add <code>ItemFlag</code> Flags which are set to True flags_to_remove <code>ItemFlag</code> Flags which are set to False <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicechangeiconsizeproxymodel.html","title":"SliceChangeIconSizeProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model which changes the icon size of the Decoration role.</p> <p>Supports QColors, QPixmaps and QIcons in DecorationRole.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicechangeiconsizeproxymodel.py</code> <pre><code>def __init__(self, size: datatypes.SizeType, **kwargs):\nsuper().__init__(**kwargs)\nself._size = datatypes.to_size(size)\nself._cache = {}\n</code></pre> <p>SliceChangeIconSizeProxyModel</p> Without proxyWith proxy <p><pre><code>table = widgets.TreeView()\nsource_model = widgets.FileSystemModel()\n...\ntable.set_model(source_model)\n# table.proxifier.change_icon_size(size=(30, 30))\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = widgets.FileSystemModel()\n...\ntable.set_model(source_model)\ntable.proxifier.change_icon_size(size=(30, 30))\n</code></pre> </p> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"features/proxymodels/slicechangeiconsizeproxymodel.html#example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TreeView()\ntable.set_model(model)\ntable[0].proxify.change_icon_size(size=20)\ntable.show()\n# or\nproxy = custom_models.SliceFilterProxyModel(indexer=0, size=20)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre>"},{"location":"features/proxymodels/slicechangeiconsizeproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows icon_size <code>core.QSize</code> Icon size for DecorationRole <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicecheckableproxymodel.html","title":"SliceCheckableProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to make a model checkable.</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicecheckableproxymodel.html#prettyqt.custom_models.SliceCheckableProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceCheckableProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicecheckableproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: set[tuple[int, int]] = set()\n</code></pre>"},{"location":"features/proxymodels/slicecheckableproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicecheckabletreeproxymodel.html","title":"SliceCheckableTreeProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to make a tree model checkable.</p> <p>In contrast to SliceCheckableProxyModel, any checkstate change is propagated to parent and child indexes. (child indexes will also get the new checkstate, parent indexes will become partially checked if needed.)</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicecheckabletreeproxymodel.html#prettyqt.custom_models.SliceCheckableTreeProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TreeView()\ntable.set_model(model)\ntable.proxifier[:, 0].set_checkable(tree=True)\ntable.show()\n# or\nproxy = custom_models.SliceCheckableTreeProxyModel(indexer=0)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicecheckableproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: dict[tuple[int, int], constants.CheckState] = {}\n</code></pre>"},{"location":"features/proxymodels/slicecheckabletreeproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicecolorvaluesproxymodel.html","title":"SliceColorValuesProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Model to color cells of a numerical table based on their value.</p> <p>By default, \"high\" numbers are colored red, \"low\" are colored green.</p> <p>Possible modes are: * All: Highlight all cells within given slice * Column: Highlight all cells of same column as current if cell is within given slice. * Row: Highlight all cells of same row as current if cell is within given slice.</p> <p>The last two modes have the advantage that nothing needs to be computed in advance, min/max values are calculated on-the fly.</p> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p> <p> </p> Mode: all <p> </p> Mode: column <p> </p> Mode: row"},{"location":"features/proxymodels/slicecolorvaluesproxymodel.html#prettyqt.custom_models.SliceColorValuesProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.color_values(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = custom_models.SliceColorValuesProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicecolorvaluesproxymodel.py</code> <pre><code>def __init__(self, *args, mode: ColorMode = ColorMode.Visible, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._mode = mode\nself._max = 0.0\nself._role = constants.USER_ROLE\nself._last_span = ((-1, -1), (-1, -1))\nself._low_color = gui.QColor(\"green\")\nself._high_color = gui.QColor(\"red\")\n</code></pre>"},{"location":"features/proxymodels/slicecolorvaluesproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode highlight_color <code>gui.QColor</code> Color to use for highlighted cells highlight_role <code>constants.ItemDataRole</code> Role to use for comparing"},{"location":"features/proxymodels/slicedisplaytextproxymodel.html","title":"SliceDisplayTextProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to convert and format non-str values for the DisplayRole.</p> <p>Usually, formatting of numbers etc is done by the ItemDelegate. By moving the formatting into a proxy layer instead, we can keep the ItemDelegate spot free for other stuff.</p> <p>Information about string formatting:</p> <p>https://docs.python.org/3/library/string.html#format-specification-mini-language</p> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"features/proxymodels/slicedisplaytextproxymodel.html#prettyqt.custom_models.SliceDisplayTextProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.format_text(int_format=\"{:0&gt;2d}\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = SliceDisplayTextProxyModel(indexer=indexer, float_format=\"{:.4f}\")\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicedisplaytextproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._int_format = \"{:.4f}\"\nself._float_format = \"{:.4f}\"\nself._datetime_format = \"%m/%d/%Y, %H:%M:%S\"\nself._date_format = \"%m/%d/%Y\"\nself._time_format = \"%H:%M:%S\"\n# self._force_override = False\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"features/proxymodels/slicedisplaytextproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows int_format <code>str</code> String format for integers float_format <code>str</code> String format for floats datetime_format <code>str</code> String format for datetime objects date_format <code>str</code> String format for date objects time_format <code>str</code> String format for time objects <p>Note</p> <p>Due to Qt limitations, slice properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicefilterproxymodel.html","title":"SliceFilterProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model to filter an item view based on python slicing syntax.</p> <p>Since slicing operations are bijective, this model can filter without looping through rows or columns. Thus, this should perform much better than a SortFilterProxyModel with a column filter. (O(1) instead of O(n))</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.custom_models.SliceFilterProxyModel--example","title":"Example","text":"<p>To filter out every second row, and cut off the the first two columns:</p> <pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].filter()\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.custom_models.proxies.slicefilterproxymodel.SliceFilterProxyModel.headerData","title":"<code>headerData(section: int, orientation: constants.Orientation, role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Map header data to proxy by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicefilterproxymodel.py</code> <pre><code>def headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Map header data to proxy by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nis_horizontal = orientation == constants.HORIZONTAL\nrng = self.get_column_range() if is_horizontal else self.get_row_range()\npos = rng.start + section * rng.step\nreturn super().headerData(pos, orientation, role)\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.custom_models.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapFromSource","title":"<code>mapFromSource(source_index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source by calculating position based on slice values.</p> <p>proxy pos = source pos - slice start / slice step</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index from source by calculating position based on slice values.\n    proxy pos = source pos - slice start / slice step\n    \"\"\"\nif self.sourceModel() is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow_pos = self.position_in_row_slice(source_index.row())\ncol_pos = self.position_in_column_slice(source_index.column())\nreturn self.createIndex(row_pos, col_pos, source_index.internalPointer())\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.custom_models.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapToSource","title":"<code>mapToSource(proxy_idx: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index to source by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index to source by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * proxy_idx.column())\nrow_pos = row_range.start + (row_range.step * proxy_idx.row())\nreturn source.index(row_pos, col_pos)\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html","title":"SliceHighlightCurrentProxyModel","text":"<p>ColumnJoinerProxyModel</p> Without proxyRow modeColumn modeAll mode <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\n# table.proxifier[:, ::2].highlight_current(mode=\"column\")\n</code></pre> </p> <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\ntable.proxifier[:, ::2].highlight_current(mode=\"row\")\n</code></pre> </p> <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\ntable.proxifier[:, ::2].highlight_current(mode=\"column\")\n</code></pre> </p> <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\ntable.proxifier[:, ::2].highlight_current(mode=\"all\")\n</code></pre> </p>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#api","title":"API","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same data as current index.</p> <p>Highlights all cells with same content in given role as currently focused cell with a user-specified color.</p> <p>Possible modes are:</p> <ul> <li><code>all</code>: Highlight all cells with same value.</li> <li><code>column</code>: Highlight all cells with same value and same column as current.</li> <li><code>row</code>: Highlight all cells with same value and same row as current.</li> </ul> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.SliceHighlightCurrentProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.highlight_current(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = custom_models.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def __init__(\nself,\nrole=constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"column\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(**kwargs)\nparent: widgets.AbstractItemView = self.parent()  # type: ignore\nparent.model_changed.connect(self._on_model_change)\nif sel_model := parent.selectionModel():\nsel_model.currentChanged.connect(self._on_current_change)\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_role","title":"<code>get_highlight_role() -&gt; constants.ItemDataRole</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_role(self) -&gt; constants.ItemDataRole:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._data_role\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.custom_models.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_role","title":"<code>set_highlight_role(mode: constants.ItemDataRole)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_role(self, mode: constants.ItemDataRole):\n\"\"\"Set highlight mode.\"\"\"\nself._data_role = mode\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode highlight_color <code>gui.QColor</code> Color to use for highlighted cells highlight_role <code>constants.ItemDataRole</code> Role to use for comparing"},{"location":"features/proxymodels/sliceidentityproxymodel.html","title":"SliceIdentityProxyModel","text":"<p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Base model for slice proxy models.</p> <p>By itself, this proxy does nothing. It just provides all needed helper functions to deal with slices. <code>indexer_contains</code> should be just by subclasses in order to check whether the proxy should be applied.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def __init__(self, indexer=None, **kwargs):\nsuper().__init__(**kwargs)\nself._indexer = (slice(None), slice(None))\nself.set_indexer(indexer)\n</code></pre> <p>Read more about slices.</p>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_range","title":"<code>get_column_range() -&gt; range</code>","text":"<p>Return a range for the column slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_range(self) -&gt; range:\n\"\"\"Return a range for the column slice with valid start / stop / step values.\"\"\"\nsl = self.get_column_slice()\ncol_count = self.sourceModel().columnCount()\nreturn range(sl.start or 0, sl.stop or col_count, sl.step or 1)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_tuple","title":"<code>get_column_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the column slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the column slice.\"\"\"\nsl = self.get_column_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_range","title":"<code>get_row_range() -&gt; range</code>","text":"<p>Return a range for the row slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_range(self) -&gt; range:\n\"\"\"Return a range for the row slice with valid start / stop / step values.\"\"\"\nsl = self.get_row_slice()\nrow_count = self.sourceModel().rowCount()\nreturn range(sl.start or 0, sl.stop or row_count, sl.step or 1)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_tuple","title":"<code>get_row_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the row slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the row slice.\"\"\"\nsl = self.get_row_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.indexer_contains","title":"<code>indexer_contains(index: core.ModelIndex | tuple[int, int]) -&gt; bool</code>","text":"<p>Check whether given ModelIndex is included in our Indexer.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def indexer_contains(self, index: core.ModelIndex | tuple[int, int]) -&gt; bool:\n\"\"\"Check whether given ModelIndex is included in our Indexer.\"\"\"\nif isinstance(index, core.ModelIndex):\nindex = (index.row(), index.column())\ncol_slice = self.get_column_slice()\nrow_slice = self.get_row_slice()\nsource = self.sourceModel()\ncol_slice = self.update_slice_boundaries(col_slice, count=source.columnCount())\nrow_slice = self.update_slice_boundaries(row_slice, count=source.rowCount())\n# logger.info(f\"{col_slice=} {row_slice=}\")\nto_check = (row_slice, col_slice)  # instead of _indexer, for negative indexes.\nreturn helpers.is_position_in_index(*index, to_check)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_column_slice","title":"<code>position_in_column_slice(col: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(col) if slice would be a list.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_column_slice(self, col: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(col) if slice would be a list.\"\"\"\nsl = self.get_column_slice()\nreturn int((col - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_row_slice","title":"<code>position_in_row_slice(row: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(row) if slice would be a list.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_row_slice(self, row: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(row) if slice would be a list.\"\"\"\nsl = self.get_row_slice()\nreturn int((row - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_column_slice","title":"<code>set_column_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the column slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_column_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the column slice.\"\"\"\nmatch value:\ncase slice() as col_slice:\nsl = col_slice\ncase int() as col:\nsl = slice(col, col + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (self.get_row_slice(), sl)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_indexer","title":"<code>set_indexer(indexer)</code>","text":"<p>Takes basically anything which is common to use for getitem.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_indexer(self, indexer):\n\"\"\"Takes basically anything which is common to use for __getitem__.\"\"\"\nmatch indexer:\ncase None:\nself._indexer = (slice(None), slice(None))\ncase int() as column:\nself.set_column_slice(column)\ncase slice() as col_slice:\nself._indexer = (col_slice, slice(None))\ncase row_slice, col_slice:\nself.set_column_slice(col_slice)\nself.set_row_slice(row_slice)\ncase _:\nraise TypeError(indexer)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_row_slice","title":"<code>set_row_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the row slice.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_row_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the row slice.\"\"\"\nmatch value:\ncase slice() as row_slice:\nsl = row_slice\ncase int() as row:\nsl = slice(row, row + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (sl, self.get_column_slice())\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.custom_models.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.update_slice_boundaries","title":"<code>update_slice_boundaries(sl: slice, count: int) -&gt; slice</code>","text":"<p>Update slice boundaries by resolving negative indexes.</p> Source code in <code>prettyqt\\custom_models\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def update_slice_boundaries(self, sl: slice, count: int) -&gt; slice:\n\"\"\"Update slice boundaries by resolving negative indexes.\"\"\"\n# Not sure yet whats the best approach here and which cases I should support...\n# if sl.end is larger than count, clip it (or perhaps throw exception?)\n# if sl.stop is not None and sl.stop &gt;= count:\n#     sl = slice(sl.start, count, sl.step)\n# resolve negative start value\nif sl.start is not None and sl.start &lt; 0:\nstart = count + sl.start\nend = count + sl.stop\n# end = start + (sl.stop - sl.start)\nif start &lt; 0:\nraise IndexError(sl.start)\nsl = slice(start, end, sl.step)\n# if sl.stop is not None and sl.stop &lt; 0:\n#     stop = source.columnCount() + sl.stop\n#     if stop &lt; 0:\n#         raise IndexError(sl.stop)\n#     sl = slice(sl.start, stop, sl.step)\nreturn sl\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicemaproleproxymodel.html","title":"SliceMapRoleProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>Proxy model for mapping one role to another.</p> <p>Mapping can be changed by passing a dictionary with source role as key and target_role as value. Py passing an optional converter function, values which are mapped can be modified.</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicemaproleproxymodel.html#prettyqt.custom_models.SliceMapRoleProxyModel--example","title":"Example","text":"<pre><code>source_model = FsSpecTreemodel(\"file\")\ntable = widgets.TableView()\nmapping = {source_model.Roles.ProtocolPathRole: constants.DISPLAY_ROLE}\nmodel = SliceMapRoleProxyModel(mapping, indexer=0, parent=table)\nmodel.setSourceModel(source_model)\ntable.set_model(model)\ntable.show()\n# or\ntable.proxifier.map_role(source_model.Roles.ProtocolPathRole, constants.DISPLAY_ROLE)\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicemaproleproxymodel.py</code> <pre><code>def __init__(\nself,\nmapping: Mapping[constants.ItemDataRole, constants.ItemDataRole],\nconverter: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._mapping = bidict(mapping)\nself._converter = converter\n</code></pre>"},{"location":"features/proxymodels/slicemaproleproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows mapping <code>dict</code> Flags which are set to True <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html","title":"SliceValueTransformationProxyModel","text":"<p>         Bases: <code>custom_models.SliceIdentityProxyModel</code></p> <p>A proxy model which transforms cell contents based on a Callable.</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#prettyqt.custom_models.SliceValueTransformationProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n</code></pre> <p>or</p> <pre><code>indexer = (slice(None, None, 2), slice(2, None))\nproxy = custom_models.SliceValueTransformationProxyModel(indexer=indexer)\nproxy.set_source_model(model)\nproxy.add_transformer(lambda x: x + \"something\", selector=lambda x: \"abc\" in x)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._transformers: list[Transformer] = []\n</code></pre>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#prettyqt.custom_models.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.add_transformer","title":"<code>add_transformer(fn: Callable[[Any], Any], role: constants.ItemDataRole = constants.DISPLAY_ROLE, selector: Callable[[Any], bool] | None = None, selector_role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Add a transformer for given role.</p> <p>If a selector callable is given, the transformer will only be applied if the selector returns True. The selector receives the content of given data role as an argument.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Any], Any]</code> <p>Callable to transform data of given role</p> required <code>role</code> <code>constants.ItemDataRole</code> <p>Data role to transform</p> <code>constants.DISPLAY_ROLE</code> <code>selector</code> <code>Callable[[Any], bool] | None</code> <p>Callable to filter the indexes which should be transformed</p> <code>None</code> <code>selector_role</code> <code>constants.ItemDataRole</code> <p>Role to use for the selector callable</p> <code>constants.DISPLAY_ROLE</code> Source code in <code>prettyqt\\custom_models\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def add_transformer(\nself,\nfn: Callable[[Any], Any],\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nselector: Callable[[Any], bool] | None = None,\nselector_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Add a transformer for given role.\n    If a selector callable is given, the transformer will only be applied if the\n    selector returns True.\n    The selector receives the content of given data role as an argument.\n    Arguments:\n        fn: Callable to transform data of given role\n        role: Data role to transform\n        selector: Callable to filter the indexes which should be transformed\n        selector_role: Role to use for the selector callable\n    \"\"\"\ntr = Transformer(\nfn=fn,\nrole=role,\nselector=selector,\nselector_role=selector_role,\n)\nself._transformers.append(tr)\n</code></pre>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#prettyqt.custom_models.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.clear","title":"<code>clear()</code>","text":"<p>Clear all transformers.</p> Source code in <code>prettyqt\\custom_models\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def clear(self):\n\"\"\"Clear all transformers.\"\"\"\nself._transformers = []\n</code></pre>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/subsetfilterproxymodel.html","title":"SubsetFilterProxyModel","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel to filter based on slices, ranges, indexes or Callables.</p> <p>Note</p> <p>If you only need filtering based on slices or a single column / row, the SliceFilterProxymodel should be preferred for performance reasons.</p>"},{"location":"features/proxymodels/subsetfilterproxymodel.html#prettyqt.custom_models.SubsetFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = custom_models.SubsetFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\custom_models\\proxies\\subsetfilterproxymodel.py</code> <pre><code>def __init__(\nself,\nrow_filter: slice | range | int | Container[int] | Callable | None,\ncolumn_filter: slice | range | int | Container[int] | Callable | None,\n**kwargs,\n):\nself.row_filter = row_filter\nself.column_filter = column_filter\nsuper().__init__(**kwargs)\n</code></pre>"},{"location":"features/proxymodels/tabletolistproxymodel.html","title":"TableToListProxyModel","text":"<p>TableToListProxyModel</p> Without proxyWith proxy <p><pre><code>data = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier.to_list()\ntable.show()\n</code></pre> </p> <p><pre><code>data = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier.to_list()\ntable.show()\n</code></pre> </p> <p>         Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model to flatten a table to a list.</p> <p>Reshapes a table by concatenating all columns into one large column, so that the new rowCount equals to sourceModel rowCount * sourceModel columnCount. If a verticalHeader is available, it will show the original position of the cell.</p> Source code in <code>prettyqt\\custom_models\\proxies\\tabletolistproxymodel.py</code> <pre><code>def __init__(self, *args, header_title: str = \"\", **kwargs):\nsuper().__init__(*args, **kwargs)\nself._header_title = header_title\n</code></pre>"},{"location":"features/proxymodels/tabletolistproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description header_title <code>str</code> Header for the resulting column"},{"location":"features/proxymodels/valuefilterproxymodel.html","title":"ValueFilterProxyModel","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>Proxy model for filtering based on non-str values.</p> <p>Sometimes it is needed to filter for non-str values, especially when it is required to filter based on a different role than DisplayRole.</p> <p>Same as the Qt QSortFilterProxyModel, this proxy respects the filterRole and filterKeyColumn properties.</p> Source code in <code>prettyqt\\custom_models\\proxies\\valuefilterproxymodel.py</code> <pre><code>def __init__(self, filter_value=None, **kwargs):\nself._filter_value = filter_value\nsuper().__init__(**kwargs)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/valuefilterproxymodel.html#prettyqt.custom_models.proxies.valuefilterproxymodel.ValueFilterProxyModel.get_filter_value","title":"<code>get_filter_value()</code>","text":"<p>Get the filter value.</p> Source code in <code>prettyqt\\custom_models\\proxies\\valuefilterproxymodel.py</code> <pre><code>def get_filter_value(self):\n\"\"\"Get the filter value.\"\"\"\nreturn self._filter_value\n</code></pre>"},{"location":"features/proxymodels/valuefilterproxymodel.html#prettyqt.custom_models.proxies.valuefilterproxymodel.ValueFilterProxyModel.set_filter_value","title":"<code>set_filter_value(value)</code>","text":"<p>Set the filter value.</p> Source code in <code>prettyqt\\custom_models\\proxies\\valuefilterproxymodel.py</code> <pre><code>def set_filter_value(self, value):\n\"\"\"Set the filter value.\"\"\"\nself._filter_value = value\nself.invalidateRowsFilter()\n</code></pre>"},{"location":"features/tools/linkedselectionmodel.html","title":"LinkedSelectionModel","text":"<p>         Bases: <code>core.ItemSelectionModel</code></p> Source code in <code>prettyqt\\custom_models\\proxies\\linkedselectionmodel.py</code> <pre><code>def __init__(\nself,\n*itemviews,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._itemviews = itemviews\nself._models = [w.model() for w in itemviews]\nself._mapper = custom_models.ProxyMapper(*self._models)\nfor w in itemviews:\nw.selectionModel().currentChanged.connect(self._on_current_change)\nw.selectionModel().selectionChanged.connect(self._on_selection_change)\n</code></pre> <p>An ItemSelectionModel which keeps indexes of any amount of proxies / source models in sync.</p>"},{"location":"features/tools/proxymapper.html","title":"ProxyMapper","text":"<p>         Bases: <code>core.Object</code></p> <p>Class to map indexes / ItemSelections from one proxy to another.</p> <p>Also handles cases like: <pre><code>            Root model\n                |\n           shared proxy\n           /                      Proxy_1_1     Proxy_2_1\n          |            |\n        Proxy_1_2     Proxy_2_2\n</code></pre> When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then mapFromSource / mapSelectionFromSource to get down to 2_2.</p> Source code in <code>prettyqt\\custom_models\\proxies\\proxymapper.py</code> <pre><code>def __init__(\nself,\n*proxies: core.QAbstractItemModel,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nchains = [self.get_proxy_chain(proxy) for proxy in proxies]\ncommon_list = [\nelement\nfor element in chains[0]\nif all(element in sublist for sublist in chains[1:])\n]\nif not common_list:\nraise RuntimeError(\"No common source model\")\ncommon_source = common_list[0]\nlogger.debug(f\"Common source: {common_source}\")\nself._chains = [chain[: chain.index(common_source)] for chain in chains]\n</code></pre> <p>When having a complex proxy tree like:</p> <pre><code>classDiagram\n  Shared_proxy &lt;|-- Proxy_1_1\n  Shared_proxy &lt;|-- Proxy_2_1\n  Proxy_1_1 &lt;|-- Proxy_1_2\n  Proxy_2_1 &lt;|-- Proxy_2_2\n  Root_model &lt;-- Shared_proxy\n  class Proxy_1_1{\n  }\n  class Proxy_2_1{\n  }\n  class Root_model{\n  }</code></pre> <p>then the ProxyMapper can be used to map indexes and ItemSelections easily between any of the proxies.</p> <pre><code>mapper = ProxyMapper(proxy_1_2, proxy_2_1)\nindex = proxy_1_2.index(0, 0)\nmapped_index = mapper.map_index(from_=0, to=1, index)\n</code></pre> <p>The mapper will find the closest parent (\"shared_proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then use mapFromSource / mapSelectionFromSource to get down to 2_1.</p>"},{"location":"features/widgets/annotatedscrollbar.html","title":"AnnotatedScrollBar","text":"<p>ScrollBar which can highlight user-chosen segments.</p> <pre><code>    widget = widgets.PlainTextEdit(\"\\n\".join(str(i) for i in range(1000)))\nwidget.v_scrollbar = AnnotatedScrollBar(constants.VERTICAL)\nwidget.v_scrollbar.set_annotations([(10, 20), (50, 60), (82, 85)])\n</code></pre> <p> </p> Annotated ScrollBar"},{"location":"features/widgets/annotatedscrollbar.html#api","title":"API","text":"<p>         Bases: <code>widgets.ScrollBar</code></p> <p>ScrollBar which can highlight user-defined ranges.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\annotatedscrollbar.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._annotation_color = gui.QColor(\"gold\")\nself._annotations = []\nself._document_length = 100\n</code></pre>"},{"location":"features/widgets/annotatedscrollbar.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description annotation_color <code>gui.QColor</code> Highlight color to use annotations <code>list[tuple[int, int]]</code> List of segments to highlight document_length <code>int</code> Base length for the segments (default 100)"},{"location":"features/widgets/astviewer.html","title":"AstViewer","text":"<p>Widget which displays an AST Tree next to the corresponding source code. Selecting a node in the tree will highlight the corresponing text section in source.</p> <pre><code>    widget = custom_widgets.AstViewer()\nwidget.show()\n</code></pre> <p> </p> AstViewer widget"},{"location":"features/widgets/filterheader.html","title":"FilterHeader","text":"<p>A HeaderView subclass which includes LineEdits / Dropdowns with filter possibilities. When setting the header view on an ItemView, a proxy model will be created which is linked to the filter widgets. The correct filter widget is automatically inferred from the content of the columns.</p> <p>So basically everything that needs to be done is the following:</p> <pre><code>model = MyModel()\nwidget = widgets.TableView()\nwidget.set_model(model)\nwidget.h_header = custom_widgets.FilterHeader() # same as setHorizontalHeader()\n</code></pre> <p>and you will get filter capabilities for your table.</p> <p>Note</p> <p>Since the FilterHeader will infer the column content type based on the first few rows, it will only work correctly for tables with homogenous data.</p> <p> </p> FilterHeader widget"},{"location":"features/widgets/proxycomparerwidget.html","title":"Proxycomparerwidget","text":"<p>Widget to compare a proxy model chain. Useful for debugging.</p> <p> </p> ProxyComparerWidget"},{"location":"features/widgets/proxycomparerwidget.html#api","title":"API","text":"<p>         Bases: <code>widgets.Splitter</code></p> Source code in <code>prettyqt\\debugging\\proxycomparerwidget.py</code> <pre><code>def __init__(self, proxy: core.QAbstractProxyModel, **kwargs):\nsuper().__init__(**kwargs)\nself.proxy_tables = []\nwhile isinstance(proxy, core.QAbstractProxyModel):\ncontainer = widgets.Widget()\nlayout = container.set_layout(\"vertical\")\ntable = widgets.TableView()\ntable.set_model(proxy)\ntable.set_delegate(\"editor\")\nself.proxy_tables.append(table)\nprop_table = widgets.TableView()\nprop_table.set_delegate(\"editor\")\nmodel = custom_models.WidgetPropertiesModel(proxy)\nprop_table.set_model(model)\nlayout.add(widgets.Label(type(proxy).__name__))\ncol_splitter = widgets.Splitter(\"vertical\")\ncol_splitter.add(prop_table)\ncol_splitter.add(table)\nlayout.add(col_splitter)\nself.add(container)\nproxy = proxy.sourceModel()\ncontainer = widgets.Widget()\nlayout = container.set_layout(\"vertical\")\ntable = widgets.TableView()\ntable.set_model(proxy)\ntable.set_delegate(\"editor\")\nself.proxy_tables.append(table)\nlayout.add(widgets.Label(type(proxy).__name__))\nlayout.add(table)\nself.add(container)\n</code></pre>"},{"location":"features/widgets/scrollareatocwidget.html","title":"ScrollAreaTocWidget","text":"<p>A TreeView subclass which can show a Table-of-contents list based on a given ScrollArea.</p> <p>With default settings, it will scan the widgets contained in the scrollArea for a windowTitle. These widgets will be shown in the TreeView, and the TreeView selection will be synced to what is currently visible in the ScrollArea. This basically emulates the behaviour of many websites (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html]) or from VS code settings.</p> <p>You can set up the Toc Tree by passing a ScrollArea instance:</p> <pre><code>widget = widgets.Widget()\nlayout = widget.set_layout(\"horizontal\")\nscrollarea = widgets.ScrollArea()\n# add some widgets to the ScrollArea here\n# ...\ntoc = ScrollAreaTocWidget(scrollarea)\nlayout.add(toc)\nlayout.add(scrollarea)\n</code></pre> <p>The Toc tree can be configured to use other properties for populating than windowTitle. You can also set a widget class filter if you only want a specific widget class to be shown.</p> <p>The widget supports 3 different scroll modes:</p> <p>1) Single: Only one row in the Tree will be highlighted. (the one which equals the topmost one from the scrollArea) 2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown. 3) HeadersOnly: like Single, but only highlights top-level widgets from the ScrollArea.</p> <p>There are also two different expand modes to choose from:</p> <p>1) ExpandAll: All subsections are always expanded. 2) on_focus: Only the section containing the focused item is expanded.</p> <p>This widget is used by ConfigWidget.</p>"},{"location":"features/widgets/scrollareatocwidget.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description scroll_mode <code>Enum</code> Scroll mode (see above) expand_mode <code>Enum</code> Expand mode (see above)"}]}