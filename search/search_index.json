{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"prettyqt: Pythonic layer on top of PyQt5 / PyQt6 / PySide6","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>PrettyQt is a Python package that provides a pythonic layer on top of the GUI frameworks PyQt6 / PySide6.</p>"},{"location":"index.html#main-features","title":"Main Features","text":"<p>Here are just a few of the things that PrettyQt does well:</p> <ul> <li>Large parts of the Qt API are available in a PEP-8-compliant way.</li> <li>Several predefined widgets, validators, models, syntax highlighters are included.</li> <li>A regex module based on QRegularExpression with the same API as Pythons core re module.</li> </ul>"},{"location":"index.html#where-to-get-it","title":"Where to get it","text":"<p>The source code is currently hosted on GitHub at: https://github.com/phil65/PrettyQt</p> <p>The latest released version are available at the Python package index.</p> <pre><code># or PyPI\npip install prettyqt\n</code></pre>"},{"location":"index.html#dependencies","title":"Dependencies","text":"<ul> <li>bidict</li> <li>orjson</li> <li>regex</li> <li>docutils</li> </ul>"},{"location":"index.html#installation-from-sources","title":"Installation from sources","text":"<p>This project uses poetry for dependency management and packaging. Install this first. In the <code>prettyqt</code> directory (same one where you found this file after cloning the git repo), execute:</p> <pre><code>poetry install\n</code></pre>"},{"location":"index.html#license","title":"License","text":"<p>MIT</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>The official documentation is hosted on Github Pages: https://phil65.github.io/PrettyQt/</p>"},{"location":"index.html#contributing-to-prettyqt","title":"Contributing to prettyqt","text":"<p>All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.</p> <p>Or maybe through using PrettyQt you have an idea of your own or are looking for something in the documentation and thinking \u2018this can be improved\u2019...you can do something about it!</p>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#v1420-2023-05-17","title":"v1.42.0 (2023-05-17)","text":""},{"location":"changelog.html#feat","title":"Feat","text":"<ul> <li>coreApplication: add in_main_thread method</li> <li>MetaObject: add get_user_property method</li> <li>MetaType: add get_meta_object / get_meta_object_for_type</li> <li>add SignalList</li> <li>MetaProperty: add get_notify_signal / get_enumerator</li> <li>Object: keep track of eventfilters</li> <li>GuiApplication: add get_keyboard_modifiers / query_keyboard_modifiers</li> <li>Application: add widgets_at method</li> <li>first quick shot for a WidgetEditor</li> <li>allow initializing SizePolicy with strings</li> <li>NativeEventFilter for windows global hotkeys</li> <li>KeySequence: add get_key_bindings</li> <li>KeySequence: cast in getitem</li> <li>KeySequenceEdit: add get_key_combinations / get_finishing_key_combinations</li> <li>add some more prop-edit widgets</li> <li>Drag: return DropActionStr for main_loop</li> <li>animation feature for StackedWidget</li> <li>Frame: add set_frame_rect</li> <li>MetaType: get_type -&gt; get_type_name and new get_type</li> <li>JsonDocument: add format method</li> <li>embed quickref in RegexEditorWidget</li> <li>IconBrowser: use FuzzyFilter proxy</li> <li>GroupBox: add get_alignment method</li> <li>FormLayout: add get/set_label_alignment, get/set_form_alignment</li> <li>Widget: scale_ratio param for center_on</li> <li>context manager stuff for layouts</li> <li>widgets: add HBoxLayout / VBoxLayout classes</li> <li>ActionsModel: Usage count column</li> <li>add AsyncRunner</li> <li>add IPython stuff</li> <li>some helper stuff for ThreadPool</li> <li>Dir: add get_temp_path method</li> <li>merge widget center methods + rect support for mapToGlobal (map_to_global)</li> <li>FileIconProvider: custom_directory_icons methods</li> <li>prep some QtDesigner stuff</li> <li>Widget: add center_on_parent method</li> <li>some methods for StyleOptionViewItem</li> <li>Action: add usage counter and get_type</li> <li>SortFilterProxyModel: add invalidated signal</li> </ul>"},{"location":"changelog.html#fix","title":"Fix","text":"<ul> <li>proper mono font for all platforms</li> <li>ElidedLabel: qt6 fix</li> <li>set_data for StandardItem / ListWidgetItem with wrong arg order</li> <li>CommandPalette: widgets from other sources can have parent as an attribute</li> <li>QtWidgets: fix binding of old methods</li> <li>ButtonDelegate: pass parent via kwarg</li> <li>HtmlItemDelegate: properly draw with icon</li> <li>AbstractItemView: fix some setfocus stuff</li> <li>FuzzyFilterModel: do not check html string for filtering</li> </ul>"},{"location":"changelog.html#v1410-2023-05-10","title":"v1.41.0 (2023-05-10)","text":""},{"location":"changelog.html#feat_1","title":"Feat","text":"<ul> <li>ColumnItemModel: add set_columns method</li> <li>add FuzzyFilterModel</li> <li>add commandpalette</li> <li>SortFilterProxyModel: add setFixedFilterList method</li> <li>SortFilterProxyModel: override lessThan to allow sorting for more types</li> <li>AbstractItemView: add some methods to deal with ItemSelectionModel</li> <li>Widget: add set_focus method</li> <li>add ActionsModel class</li> <li>StandardItem: add set_data method</li> <li>IconDelegate: make item role configurable</li> <li>Completer: added path_updated signal</li> <li>Completer: add set_completion_role method</li> <li>SortFilterProxyModel: add set_filter_role method</li> </ul>"},{"location":"changelog.html#fix_1","title":"Fix","text":"<ul> <li>ColumnItemModel: fix get_sort_value</li> <li>ListWidgetItem: fix set_data method</li> <li>IconDelegate: qt6 porting issue</li> <li>HtmlItemDelegate: qt6 porting bug</li> <li>RenderLinkDelegate: Qt6 fixes</li> </ul>"},{"location":"changelog.html#v1400-2023-05-09","title":"v1.40.0 (2023-05-09)","text":""},{"location":"changelog.html#feat_2","title":"Feat","text":"<ul> <li>Painter: add draw_star, draw_diamond methods</li> <li>PolygonF: scale kwarg for create_star_diamond</li> <li>Constraints column for ImportLib model</li> <li>format for different classes</li> <li>Widget: add set_graphics_effect method</li> <li>core: add LoggingCategory class</li> <li>network: add NetworkReply class</li> <li>add MaterialIconStyle class</li> <li>InputMethod: add query_focus_object method</li> <li>add GoogleCompleter</li> <li>add HTMLItemDelegate</li> </ul>"},{"location":"changelog.html#fix_2","title":"Fix","text":"<ul> <li>NestedItem: set parent in append_child</li> </ul>"},{"location":"changelog.html#v1391-2023-05-08","title":"v1.39.1 (2023-05-08)","text":""},{"location":"changelog.html#fix_3","title":"Fix","text":"<ul> <li>model cleanup</li> </ul>"},{"location":"changelog.html#v1390-2023-05-08","title":"v1.39.0 (2023-05-08)","text":""},{"location":"changelog.html#feat_3","title":"Feat","text":"<ul> <li>re-work JsonModel</li> <li>add update_check</li> <li>some MessageBox work</li> <li>SlideAnimation: add start/end_value kwargs for ctor</li> <li>Widget: add play_animation method</li> <li>PlainTextEdit: extend set_syntaxhighlighter</li> <li>add CycleWidget</li> <li>add SelectedWordHighlighter class</li> <li>PlainTextEdit: better way to color focused line</li> <li>bluetooth: cover some more classes</li> <li>ItemSelectionModel: add set_current_index method</li> <li>scroll_to_item for Table/TreeWidget</li> <li>AbstractScrollArea: add set_viewport_margins method</li> <li>set_size for SvgGenerator and QuickItem</li> </ul>"},{"location":"changelog.html#fix_4","title":"Fix","text":"<ul> <li>Scintilla: fix highlight_current_line</li> <li>Color: also inherit transparency when QColor for ctor</li> <li>typed signals seem to cast to Qt types</li> </ul>"},{"location":"changelog.html#v1381-2023-05-07","title":"v1.38.1 (2023-05-07)","text":""},{"location":"changelog.html#fix_5","title":"Fix","text":"<ul> <li>Chart: used wrong call for setting style</li> </ul>"},{"location":"changelog.html#v1380-2023-05-07","title":"v1.38.0 (2023-05-07)","text":""},{"location":"changelog.html#feat_4","title":"Feat","text":"<ul> <li>TreeWidget: add find_items method</li> <li>recursive and case_sensitive kwarg for ListWidget/StandardItemModel.find_items</li> <li>HeaderView: add set_sort_indicator method</li> <li>VersionNumber: add from_string method</li> <li>auto adjust Chart and PygmentsHighlighter colors to Palette</li> <li>Palette: allow disabling highlight_inactive</li> </ul>"},{"location":"changelog.html#fix_6","title":"Fix","text":"<ul> <li>HierarchicalHeaderView: oops</li> </ul>"},{"location":"changelog.html#v1371-2023-05-06","title":"v1.37.1 (2023-05-06)","text":""},{"location":"changelog.html#fix_7","title":"Fix","text":"<ul> <li>check for None-model in set_sorting_enabled</li> </ul>"},{"location":"changelog.html#v1370-2023-05-06","title":"v1.37.0 (2023-05-06)","text":""},{"location":"changelog.html#feat_5","title":"Feat","text":"<ul> <li>HeaderView: some kwargs for set_resize_mode, add set_sections_movable method</li> <li>TreeView/TableView: add set_sorting_enabled method</li> <li>add HierarchicalHeaderView class</li> <li>SortFilterProxyModel: add get_sort_order method</li> <li>Wizard: add set_custom_button method</li> <li>make some basic types pattern matching compatible</li> <li>SortFilterProxyModel: more pythonic sort() kwargs</li> </ul>"},{"location":"changelog.html#v1360-2023-05-05","title":"v1.36.0 (2023-05-05)","text":""},{"location":"changelog.html#feat_6","title":"Feat","text":"<ul> <li>MimeDatabase: add some new methods</li> <li>SizePolicy: add get_transposed method</li> <li>enable dark mode detection on linux</li> <li>DataWidgetMapper: add setitem, getitem, delitem</li> <li>GuiApplication: add set_progress_value method</li> <li>quick: add SGNode class</li> <li>Window: add some more methods</li> <li>qml: add QmlError / QmlExpression classes</li> <li>qml: add QmlProperty class</li> <li>TreeWidgetItem: add recursive option for get_children</li> <li>TreeWidget: add get_items method</li> </ul>"},{"location":"changelog.html#fix_8","title":"Fix","text":"<ul> <li>Completer: fixed is_case_sensitive method</li> <li>correctly inherit for QuickView</li> </ul>"},{"location":"changelog.html#v1350-2023-05-05","title":"v1.35.0 (2023-05-05)","text":""},{"location":"changelog.html#feat_7","title":"Feat","text":"<ul> <li>Shortcut: allow str for ctor</li> <li>Shortcut: add set_key(s) methods</li> <li>add add_shortcut methods for Window and Widget classes</li> <li>gui: add SurfaceFormat class</li> <li>Locale: add some methods</li> <li>Locale: add get_formatted_data_size</li> </ul>"},{"location":"changelog.html#v1340-2023-05-04","title":"v1.34.0 (2023-05-04)","text":""},{"location":"changelog.html#feat_8","title":"Feat","text":"<ul> <li>qml: add QmlPropertyMap class</li> <li>FsSpecModel: filter columns depending on protocol</li> <li>GraphicsView: add zooming option</li> <li>add AccordionWidget</li> </ul>"},{"location":"changelog.html#v1331-2023-05-04","title":"v1.33.1 (2023-05-04)","text":""},{"location":"changelog.html#fix_9","title":"Fix","text":"<ul> <li>test fixes</li> </ul>"},{"location":"changelog.html#v1330-2023-05-04","title":"v1.33.0 (2023-05-04)","text":""},{"location":"changelog.html#feat_9","title":"Feat","text":"<ul> <li>GraphicsScene: add grid functionality</li> <li>add DebouncedSignal class</li> <li>TabWidget: allow QWidget for remove_tab</li> <li>AbstractNativeEventFilter: add install method</li> <li>add taskbaritem module</li> <li>HoverIconEventFilter: add pressed state</li> <li>VariantDelegate: deal with enums</li> <li>add EnumComboBox</li> <li>Completer: add set_strings method</li> <li>add FsSpecCompleter</li> <li>Widget: add get_win_id() method</li> <li>TtextTableCell: add get_first/last_cursor_position methods</li> <li>LineEdit: add set_completer method</li> <li>Completer: add get_completions() method</li> <li>FsSpecModel: add get_file_content method</li> <li>KeySequence: overload for to_shortcut_str</li> <li>LineEdit: add tab_pressed signal</li> <li>qthelp: add HelpFilterSettingsWidget class</li> <li>Shortcut: add get_keys method</li> <li>TreeWidgetItem: add collapse / expand / get_text_alignment methods</li> <li>TableWidget: allow QModelIndex for closePersistentEditor / isPersistentEditorOpen</li> <li>TableWidgetItem: add set_editable method</li> <li>TreeWidget: add some more methods</li> <li>gui: add TextBlockFormat class</li> <li>TreeWidgetItem: add some methods</li> <li>GraphicsView: add get_view_rect / get_pixel_size</li> <li>GraphicsView: add add_item / remove_item methods</li> <li>GraphicsView: set our own scene subclass by default</li> <li>MimeData: add to_dict and clone methods</li> <li>add VariantDelegate class</li> </ul>"},{"location":"changelog.html#fix_10","title":"Fix","text":"<ul> <li>TabBar: qt6 regression (PointF instead of Point)</li> <li>ColumnItemModel: reset model in set_root_item</li> <li>AwesomeFileIconProvider: missed a case for icon()</li> <li>AudioDevice: fix get_channel_config</li> <li>Charts: dont use axisX / axisY (missing in qt6)</li> <li>ButtonDelegate: only apply to correct column</li> <li>RegexInput: catch exception when regex invalid</li> </ul>"},{"location":"changelog.html#v1320-2023-04-30","title":"v1.32.0 (2023-04-30)","text":""},{"location":"changelog.html#feat_10","title":"Feat","text":"<ul> <li>custom_widgets: add RegexLineEdit class</li> <li>PlainTextEdit: emit text with value_changed signal</li> <li>gui: add TextTable, TextTableCell and TextTableFormat classes</li> <li>ItemEditorFactor: add create_extended method</li> <li>QuickItem: add getitem and contains methods</li> <li>custom_widgets: add ColorComboBox</li> <li>ColorDialog: add get/set_custom_colors methods</li> <li>printsupport: add Printer class</li> <li>GuiApplication: add palette_changed signal</li> <li>add QtPrintSupport to qt module</li> <li>Splitter: override createHandle so that our own subclass is used.</li> <li>SplitterHandle: add clicked signal</li> <li>Palette: add is_dark method</li> <li>add quickwidgets module</li> </ul>"},{"location":"changelog.html#fix_11","title":"Fix","text":"<ul> <li>FontChooserButton: add missing button icon</li> </ul>"},{"location":"changelog.html#v1310-2023-04-29","title":"v1.31.0 (2023-04-29)","text":""},{"location":"changelog.html#feat_11","title":"Feat","text":"<ul> <li>FsSpecModel: allow None for setRootPath</li> <li>core: add SharedMemory class</li> <li>multimedia: add AudioDevice class</li> <li>add delitem for UrlQuery, Timeline and StackedWidget</li> <li>QuickRenderControl: add edit_frame context manager</li> <li>PdfWriter: add get/set_version methods</li> <li>PagedPaintDevice: add get_page_ranges and get_page_layout methods</li> <li>Date: add replace method</li> <li>FileDevice: add get_permissions method</li> <li>gui: add PageRanges class</li> <li>PainterPath: add get_simplified and to_reversed methods</li> <li>Layout: allow None for set_margin</li> <li>GridLayout: add alignment kwarg to add method</li> <li>add KeyCombinationEdit class</li> <li>KeySequenceEdit: allow QKeySequence for set_value</li> <li>ToolBox: add some kwargs to add_widget</li> <li>Splitter: some kwargs for add_widget method</li> <li>Slider: better mouseclick behaviour</li> <li>Date: add add_days, add_months, add_years and get_current_date methods</li> <li>Time: add add_msecs, add_secs and get_current_time methods</li> <li>Label: add clicked signal</li> </ul>"},{"location":"changelog.html#fix_12","title":"Fix","text":"<ul> <li>FsSpecModel: fix root glob call</li> <li>StarDelegate: qt6 fix</li> <li>Timeline: Qt6 fixes</li> <li>PlainTextEdit: wheelEvent fix</li> </ul>"},{"location":"changelog.html#v1300-2023-04-28","title":"v1.30.0 (2023-04-28)","text":""},{"location":"changelog.html#feat_12","title":"Feat","text":"<ul> <li>AbstractScrollArea: add set_scrollbar_smooth method</li> <li>add SmoothScrollBar class</li> <li>AbstractScrollArea: add scroll_by_pixels method</li> <li>Cursor: add fake_mouse_move classmethod</li> <li>Widget: add set_style method</li> </ul>"},{"location":"changelog.html#fix_13","title":"Fix","text":"<ul> <li>PlainTextEdit: correctly propagate wheelEvent</li> </ul>"},{"location":"changelog.html#v1290-2023-04-27","title":"v1.29.0 (2023-04-27)","text":""},{"location":"changelog.html#feat_13","title":"Feat","text":"<ul> <li>CameraDevice: add get_video_formats method</li> <li>re-introduce multimedia module</li> <li>FsSpecModel: add get_protocol_path method</li> <li>Widget: allow int index for insertAction</li> <li>HeaderView: add get_default_alignment and get_orientation methods</li> <li>HeaderView: add get_resize_mode method</li> <li>ColorDialog: some new methods</li> <li>pdf: add PdfSearchModel class</li> </ul>"},{"location":"changelog.html#fix_14","title":"Fix","text":"<ul> <li>Widget: support several QOpenGlWidgets for get_image</li> </ul>"},{"location":"changelog.html#v1281-2023-04-26","title":"v1.28.1 (2023-04-26)","text":""},{"location":"changelog.html#fix_15","title":"Fix","text":"<ul> <li>weird PySide6 issue with Enum val as default kwarg (PyQt works fine..)</li> </ul>"},{"location":"changelog.html#v1280-2023-04-26","title":"v1.28.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_14","title":"Feat","text":"<ul> <li>Drag: add set_drag_cursor and main_loop methods</li> </ul>"},{"location":"changelog.html#v1270-2023-04-26","title":"v1.27.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_15","title":"Feat","text":"<ul> <li>filesystemmodel mixin for FsSpecModel</li> </ul>"},{"location":"changelog.html#fix_16","title":"Fix","text":"<ul> <li>FsSpecModel: always return correct type for permissions()</li> </ul>"},{"location":"changelog.html#v1260-2023-04-26","title":"v1.26.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_16","title":"Feat","text":"<ul> <li>MimeData: add get_urls method</li> <li>MimeData: add set_urls method</li> <li>pdf: add PdfBookmarkModel class</li> <li>AbstractItemModel: add get_role_names method</li> </ul>"},{"location":"changelog.html#fix_17","title":"Fix","text":"<ul> <li>change SORT_ROLE and NAME_ROLE values to not conflict with FileSystemModel enums</li> <li>MimeData: getitem and setitem seem to cause issues?</li> </ul>"},{"location":"changelog.html#v1250-2023-04-26","title":"v1.25.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_17","title":"Feat","text":"<ul> <li>custom_models: add fsspec model</li> <li>FileSystemModel: add get_permissions method</li> </ul>"},{"location":"changelog.html#v1240-2023-04-26","title":"v1.24.0 (2023-04-26)","text":""},{"location":"changelog.html#feat_18","title":"Feat","text":"<ul> <li>Layout: add add_widget method</li> <li>Widget: allow None values for set_min/max_size</li> <li>TextStream: add get/set_number_flags methods</li> </ul>"},{"location":"changelog.html#v1230-2023-04-25","title":"v1.23.0 (2023-04-25)","text":""},{"location":"changelog.html#feat_19","title":"Feat","text":"<ul> <li>core: Add ModelRoleData class</li> <li>add ImportlibTreeModel</li> </ul>"},{"location":"changelog.html#fix_18","title":"Fix","text":"<ul> <li>correctly behaving listmixin</li> </ul>"},{"location":"changelog.html#v1222-2023-04-25","title":"v1.22.2 (2023-04-25)","text":""},{"location":"changelog.html#fix_19","title":"Fix","text":"<ul> <li>NestedModel: add default value for index kwargs</li> <li>correctly behaving RegexMatchesModel</li> </ul>"},{"location":"changelog.html#v1221-2023-04-25","title":"v1.22.1 (2023-04-25)","text":""},{"location":"changelog.html#fix_20","title":"Fix","text":"<ul> <li>NestedModel: rowCount fix</li> </ul>"},{"location":"changelog.html#v1220-2023-04-25","title":"v1.22.0 (2023-04-25)","text":""},{"location":"changelog.html#feat_20","title":"Feat","text":"<ul> <li>LayoutItem: add get_expanding_directions method</li> <li>LayoutItem: add get_control_types method</li> <li>GraphicsLayoutItem: add get/set_size_policy and bool methods</li> </ul>"},{"location":"changelog.html#fix_21","title":"Fix","text":"<ul> <li>Pixmap: fix create_char method</li> </ul>"},{"location":"changelog.html#v1210-2023-04-23","title":"v1.21.0 (2023-04-23)","text":""},{"location":"changelog.html#feat_21","title":"Feat","text":"<ul> <li>NetworkRequest: support some attributes from newer qt versions</li> <li>NetworkRequest: add set_attribute(s) method</li> <li>Object: add set_properties method</li> <li>MimeData: add for_file method</li> <li>TextDocument: add get_bytes method</li> <li>MetaMethod: add get_parameters/get_return_types methods</li> <li>MetaObject: add get_class_info method</li> <li>MetaObject: add get_super_class method</li> <li>UrlQuery: add getitem and setitem methods</li> <li>TextDocumentWriter: add serialize_document method</li> <li>Widget: add toggle_maximized method</li> </ul>"},{"location":"changelog.html#fix_22","title":"Fix","text":"<ul> <li>correct isinstance check for to_json</li> <li>TextDocumentWriter: fix serialization</li> <li>SingleApplication: TextStream.setCodec gone in qt6</li> </ul>"},{"location":"changelog.html#v1200-2023-04-22","title":"v1.20.0 (2023-04-22)","text":""},{"location":"changelog.html#feat_22","title":"Feat","text":"<ul> <li>add some methods for Thread/ThreadPool 81795</li> <li>Pixmap: get rid of flags param for from_image 8fbbf</li> <li>bluetooth: add BluetoothDeviceInfo class 80482</li> </ul>"},{"location":"changelog.html#fix_23","title":"Fix","text":"<ul> <li>BluetoothDeviceDiscoveryAgent: correctly set flags for start_discovery 4f53b</li> </ul>"},{"location":"changelog.html#v1190-2023-04-22","title":"v1.19.0 (2023-04-22)","text":""},{"location":"changelog.html#feat_23","title":"Feat","text":"<ul> <li>MenuBar: add get/set_corner_widget methods a9fc0</li> <li>PdfView: add set_file method c5b79</li> </ul>"},{"location":"changelog.html#v1180-2023-04-21","title":"v1.18.0 (2023-04-21)","text":""},{"location":"changelog.html#feat_24","title":"Feat","text":"<ul> <li>ScrollerMetrics: add get_scroll_metrics method + bit dict interface 838d6</li> <li>WebEngineSettings: more dict interface 903d7</li> <li>GuiApplication: add set_badge_number method 57e9b</li> </ul>"},{"location":"changelog.html#fix_24","title":"Fix","text":"<ul> <li>make sure to correctly set parent for actions added to menus 8ea43</li> <li>HeaderView: context menu fix c71c2</li> </ul>"},{"location":"changelog.html#v1170-2023-04-21","title":"v1.17.0 (2023-04-21)","text":""},{"location":"changelog.html#feat_25","title":"Feat","text":"<ul> <li>Image: add to_ndarray method ea556</li> <li>Widget: add get_cursor method 4dc77</li> <li>Image: add convert_to_format method f36f1</li> </ul>"},{"location":"changelog.html#fix_25","title":"Fix","text":"<ul> <li>ImportlibDistributionModel: avoid duplicates in requirements d27d2</li> </ul>"},{"location":"changelog.html#v1160-2023-04-21","title":"v1.16.0 (2023-04-21)","text":""},{"location":"changelog.html#feat_26","title":"Feat","text":"<ul> <li>AbstractItemView: add get_horizontal/vertical/scroll_mode methods bf664</li> <li>AbstractItemView: added model_changed signal 79b24</li> <li>Scroller: add grabbed_gesture method c3041</li> <li>add pdf and pdfwidgets modules de15b</li> <li>MetaProperty: add get_meta_type method 9242c</li> <li>GeoPolygon: add get_hole_path / get_perimeter methods 8910a</li> </ul>"},{"location":"changelog.html#v1151-2023-04-20","title":"v1.15.1 (2023-04-20)","text":""},{"location":"changelog.html#fix_26","title":"Fix","text":"<ul> <li>IconBrowser: correctly build charmap dict 49e18</li> <li>GraphicsEllipseItem: fix get_rect type issue (got broken with qt6) 69653</li> </ul>"},{"location":"changelog.html#v1150-2023-04-20","title":"v1.15.0 (2023-04-20)","text":""},{"location":"changelog.html#feat_27","title":"Feat","text":"<ul> <li>Object: add get_properties method 2fafb</li> <li>Image: add from/to_pil methods eb342</li> <li>Object: add get_dynamic_properties method 7c82b</li> <li>PropertyAnimation: allow passing the qt property method directly for apply_to 1ca12</li> </ul>"},{"location":"changelog.html#fix_27","title":"Fix","text":"<ul> <li>MetaObject: offsets were off by 1 cecd7</li> </ul>"},{"location":"changelog.html#v1143-2023-04-20","title":"v1.14.3 (2023-04-20)","text":""},{"location":"changelog.html#fix_28","title":"Fix","text":"<ul> <li>another release fix :) af959</li> </ul>"},{"location":"changelog.html#v1142-2023-04-20","title":"v1.14.2 (2023-04-20)","text":""},{"location":"changelog.html#fix_29","title":"Fix","text":"<ul> <li>another release fix bdc10</li> </ul>"},{"location":"changelog.html#v1141-2023-04-20","title":"v1.14.1 (2023-04-20)","text":""},{"location":"changelog.html#fix_30","title":"Fix","text":"<ul> <li>release pipeline fix bcfd8</li> </ul>"},{"location":"changelog.html#v1140-2023-04-20","title":"v1.14.0 (2023-04-20)","text":""},{"location":"changelog.html#feat_28","title":"Feat","text":"<ul> <li>WaitingSpinner: register some attributes as Qt Properties d3b25</li> <li>TableWidget: also support indexes for openPersistentEditor d450d</li> </ul>"},{"location":"changelog.html#fix_31","title":"Fix","text":"<ul> <li>RadioDelegate: property doesnt accept bytes (anymore) 25a96</li> <li>Painter: fix draw_rounded_rect method bb883</li> </ul>"},{"location":"changelog.html#v1131-2023-04-20","title":"v1.13.1 (2023-04-20)","text":""},{"location":"changelog.html#fix_32","title":"Fix","text":"<ul> <li>fix tests... 58c78</li> </ul>"},{"location":"changelog.html#v1130-2023-04-20","title":"v1.13.0 (2023-04-20)","text":""},{"location":"changelog.html#feat_29","title":"Feat","text":"<ul> <li>ButtonDelegate: no need anymore to open persistent editors 78984</li> <li>AbstractTableModel: add getitem method to return indexes 0b9be</li> </ul>"},{"location":"changelog.html#v1121-2023-04-19","title":"v1.12.1 (2023-04-19)","text":""},{"location":"changelog.html#fix_33","title":"Fix","text":"<ul> <li>Widget: missing string cast for set_stylesheet e536b</li> </ul>"},{"location":"changelog.html#v1120-2023-04-19","title":"v1.12.0 (2023-04-19)","text":""},{"location":"changelog.html#feat_30","title":"Feat","text":"<ul> <li>ColumnItemModel: inherit some stuff from ListMixin</li> </ul>"},{"location":"changelog.html#v1110-2023-04-18","title":"v1.11.0 (2023-04-18)","text":""},{"location":"changelog.html#feat_31","title":"Feat","text":"<ul> <li>LineEdit: allow some special values for set_input_mask</li> <li>Locale: add get_measurement_system</li> </ul>"},{"location":"changelog.html#fix_34","title":"Fix","text":"<ul> <li>ColumntItemModel: always return correct rowCount</li> </ul>"},{"location":"changelog.html#v1100-2023-04-18","title":"v1.10.0 (2023-04-18)","text":""},{"location":"changelog.html#feat_32","title":"Feat","text":"<ul> <li>ColumnItemModel: methods for setting data</li> <li>TreeItem: add iter method</li> </ul>"},{"location":"changelog.html#fix_35","title":"Fix","text":"<ul> <li>AttributeModel: checkstate instead of text for is_attribute</li> <li>UndoStack: raise KeyError instead of returning it</li> </ul>"},{"location":"changelog.html#v192-2023-04-17","title":"v1.9.2 (2023-04-17)","text":""},{"location":"changelog.html#fix_36","title":"Fix","text":"<ul> <li>StorageInfoModel: move some stuff to baseclass</li> </ul>"},{"location":"changelog.html#v191-2023-04-17","title":"v1.9.1 (2023-04-17)","text":""},{"location":"changelog.html#fix_37","title":"Fix","text":"<ul> <li>ColumnItemModel: fix wrong value for non-listed roles in data()</li> <li>ObjectBrowser: re-add DEFAULT_ATTR_DETAILS and inspected_node_is_visible</li> </ul>"},{"location":"changelog.html#v190-2023-04-17","title":"v1.9.0 (2023-04-17)","text":""},{"location":"changelog.html#feat_33","title":"Feat","text":"<ul> <li>custom_widgets: add FileTree class</li> <li>AbstractItemModel: add update_all method</li> </ul>"},{"location":"changelog.html#fix_38","title":"Fix","text":"<ul> <li>IconDelegate: fix exception when QIcon is passed</li> </ul>"},{"location":"changelog.html#v181-2023-04-17","title":"v1.8.1 (2023-04-17)","text":""},{"location":"changelog.html#fix_39","title":"Fix","text":"<ul> <li>user_data fix</li> </ul>"},{"location":"changelog.html#v180-2023-04-17","title":"v1.8.0 (2023-04-17)","text":""},{"location":"changelog.html#feat_34","title":"Feat","text":"<ul> <li>ColumnItemModel: add user_data to ColumnItems</li> </ul>"},{"location":"changelog.html#v171-2023-04-17","title":"v1.7.1 (2023-04-17)","text":""},{"location":"changelog.html#fix_40","title":"Fix","text":"<ul> <li>fix docs generation</li> </ul>"},{"location":"changelog.html#v170-2023-04-17","title":"v1.7.0 (2023-04-17)","text":""},{"location":"changelog.html#feat_35","title":"Feat","text":"<ul> <li>ColumnItemModel: add support for sort value and tooltips</li> <li>Widget: add grab_mouse_events / grab_keyboard_events context managers</li> <li>Painter: add some convenience methods</li> </ul>"},{"location":"changelog.html#v160-2023-04-16","title":"v1.6.0 (2023-04-16)","text":""},{"location":"changelog.html#feat_36","title":"Feat","text":"<ul> <li>Widget: add delete_children method</li> <li>Url: add is_special_url and _has_explicit_scheme methods</li> <li>Application: add set_style method</li> <li>Scrollbar: add scroll_to_next/previous_row methods</li> <li>Uuid: add to_string method</li> </ul>"},{"location":"changelog.html#fix_41","title":"Fix","text":"<ul> <li>Application: correct icon colors for new Qt built in dark mode (when using Fusion theme)</li> <li>ChartView: correct cursor shape for dragging movements</li> </ul>"},{"location":"changelog.html#v150-2023-04-13","title":"v1.5.0 (2023-04-13)","text":""},{"location":"changelog.html#feat_37","title":"Feat","text":"<ul> <li>TimeZone: add get_time_spec method</li> <li>TextDocument: add get/set_meta_information methods</li> <li>ListWidgetItem: add set_text_alignment method</li> <li>DirIterator: add get_file_path / get_file_info methods</li> </ul>"},{"location":"changelog.html#fix_42","title":"Fix","text":"<ul> <li>FileSystemModel: fix yield_child_indexes method</li> </ul>"},{"location":"changelog.html#v142-2023-04-12","title":"v1.4.2 (2023-04-12)","text":""},{"location":"changelog.html#fix_43","title":"Fix","text":"<ul> <li>only run tests on linux for now</li> </ul>"},{"location":"changelog.html#v141-2023-04-12","title":"v1.4.1 (2023-04-12)","text":""},{"location":"changelog.html#fix_44","title":"Fix","text":"<ul> <li>remove codecov from deps</li> </ul>"},{"location":"changelog.html#v140-2023-04-12","title":"v1.4.0 (2023-04-12)","text":""},{"location":"changelog.html#feat_38","title":"Feat","text":"<ul> <li>Color: add convert_to method</li> <li>Color: add get_spec method</li> <li>core: add KeyCombination class</li> <li>re-add qthelp module</li> </ul>"},{"location":"changelog.html#fix_45","title":"Fix","text":"<ul> <li>fixed Color.as_qt error with Qt6.5</li> </ul>"},{"location":"changelog.html#v130-2023-04-11","title":"v1.3.0 (2023-04-11)","text":""},{"location":"changelog.html#feat_39","title":"Feat","text":"<ul> <li>add some set_origin methods</li> <li>add some set_transform methods</li> <li>Brush: add set_style method</li> </ul>"},{"location":"changelog.html#v120-2023-04-11","title":"v1.2.0 (2023-04-11)","text":""},{"location":"changelog.html#feat_40","title":"Feat","text":"<ul> <li>re-enable texttospeech module</li> <li>gui: add AbstractFileIconProvider class</li> <li>core: add MetaType class</li> <li>gui: add StyleHints class</li> </ul>"},{"location":"changelog.html#fix_46","title":"Fix","text":"<ul> <li>correct filtering for Dir.get_entry_info_list</li> <li>Dir: explicitely use kwargs for entryList/entryInfoList calls</li> <li>prevent namespace collisions with builtin locale package</li> </ul>"},{"location":"changelog.html#v112-2023-04-10","title":"v1.1.2 (2023-04-10)","text":""},{"location":"changelog.html#fix_47","title":"Fix","text":"<ul> <li>always pass sys.argv to QCoreApplication etc</li> </ul>"},{"location":"changelog.html#v111-2023-04-10","title":"v1.1.1 (2023-04-10)","text":""},{"location":"changelog.html#fix_48","title":"Fix","text":"<ul> <li>Qt6 fixes for Dialog classes</li> </ul>"},{"location":"changelog.html#v110-2023-04-10","title":"v1.1.0 (2023-04-10)","text":""},{"location":"changelog.html#feat_41","title":"Feat","text":"<ul> <li>Image: add as_bytes method</li> </ul>"},{"location":"changelog.html#v100-2023-04-07","title":"v1.0.0 (2023-04-07)","text":""},{"location":"changelog.html#feat_42","title":"Feat","text":"<ul> <li>MultimediaWidgets for Qt6</li> <li>get rid of mro fuckery</li> <li>re-add location module</li> </ul>"},{"location":"changelog.html#fix_49","title":"Fix","text":"<ul> <li>remove title property for widgets</li> </ul>"},{"location":"changelog.html#v01933-2023-04-04","title":"v0.193.3 (2023-04-04)","text":""},{"location":"changelog.html#fix_50","title":"Fix","text":"<ul> <li>get rid of sre_constants warnings</li> </ul>"},{"location":"changelog.html#v01932-2023-02-04","title":"v0.193.2 (2023-02-04)","text":""},{"location":"changelog.html#fix_51","title":"Fix","text":"<ul> <li>correctly init dataclass for py3.11</li> <li>proper QDialog exec fix</li> </ul>"},{"location":"changelog.html#v01931-2022-11-18","title":"v0.193.1 (2022-11-18)","text":""},{"location":"changelog.html#fix_52","title":"Fix","text":"<ul> <li>exec_ fix for PyQt6</li> </ul>"},{"location":"changelog.html#v01930-2022-11-12","title":"v0.193.0 (2022-11-12)","text":""},{"location":"changelog.html#feat_43","title":"Feat","text":"<ul> <li>custom_models: add BaseNestedModel class</li> </ul>"},{"location":"changelog.html#v01921-2022-11-12","title":"v0.192.1 (2022-11-12)","text":""},{"location":"changelog.html#fix_53","title":"Fix","text":"<ul> <li>disable BaseModelMixin test for now</li> </ul>"},{"location":"changelog.html#v01920-2022-11-12","title":"v0.192.0 (2022-11-12)","text":""},{"location":"changelog.html#feat_44","title":"Feat","text":"<ul> <li>custom_models: add BaseListMixin class</li> </ul>"},{"location":"changelog.html#v01910-2022-11-10","title":"v0.191.0 (2022-11-10)","text":""},{"location":"changelog.html#feat_45","title":"Feat","text":"<ul> <li>custom_models: add BaseModelMixin class</li> </ul>"},{"location":"changelog.html#v01908-2022-11-09","title":"v0.190.8 (2022-11-09)","text":""},{"location":"changelog.html#fix_54","title":"Fix","text":"<ul> <li>better check for combobox set_editable method</li> </ul>"},{"location":"changelog.html#v01907-2022-11-08","title":"v0.190.7 (2022-11-08)","text":""},{"location":"changelog.html#fix_55","title":"Fix","text":"<ul> <li>Combobox: set Completer only when calling set_editable to avoid error message</li> </ul>"},{"location":"changelog.html#v01906-2022-11-03","title":"v0.190.6 (2022-11-03)","text":""},{"location":"changelog.html#fix_56","title":"Fix","text":"<ul> <li>proper fix for restoreState</li> </ul>"},{"location":"changelog.html#v01905-2022-11-03","title":"v0.190.5 (2022-11-03)","text":""},{"location":"changelog.html#fix_57","title":"Fix","text":"<ul> <li>allow str for restoreState</li> </ul>"},{"location":"changelog.html#v01904-2022-11-03","title":"v0.190.4 (2022-11-03)","text":""},{"location":"changelog.html#fix_58","title":"Fix","text":"<ul> <li>qt compat</li> <li>some compat fixes</li> <li>qt6 flag compat</li> <li>qt6 compat</li> </ul>"},{"location":"changelog.html#v01903-2022-06-30","title":"v0.190.3 (2022-06-30)","text":""},{"location":"changelog.html#fix_59","title":"Fix","text":"<ul> <li>bump regex dep</li> </ul>"},{"location":"changelog.html#v01902-2022-04-07","title":"v0.190.2 (2022-04-07)","text":""},{"location":"changelog.html#fix_60","title":"Fix","text":"<ul> <li>scxml not available for PyQt5</li> </ul>"},{"location":"changelog.html#v01901-2022-04-06","title":"v0.190.1 (2022-04-06)","text":""},{"location":"changelog.html#fix_61","title":"Fix","text":"<ul> <li>regex fix</li> </ul>"},{"location":"changelog.html#v01900-2022-04-06","title":"v0.190.0 (2022-04-06)","text":""},{"location":"changelog.html#feat_46","title":"Feat","text":"<ul> <li>Application: add sleep method</li> <li>add scxml module</li> </ul>"},{"location":"changelog.html#v01890-2021-12-31","title":"v0.189.0 (2021-12-31)","text":""},{"location":"changelog.html#feat_47","title":"Feat","text":"<ul> <li>XmlStreamReader: add get_token_type / read_next methods</li> <li>Rect: add margins_added / margins_removed methods</li> <li>TextDocument: add show_whitespaces_and_tabs method</li> <li>Chart: add set_margins method</li> <li>core: add XmlStreamReader class</li> <li>Size/SizeF: add shrunk_by / grown_by methods</li> <li>StandardItem/ListWidgetItem/TreeWidgetItem: add set_size_hint method</li> <li>Polygon/PolygonF: add get_data_buffer method</li> <li>ListWidgetItem: add set_data method</li> <li>Window/Widget: add get_screen method</li> </ul>"},{"location":"changelog.html#fix_62","title":"Fix","text":"<ul> <li>typo for DateType</li> <li>CompletionWidget: correctly cast to int for SetY</li> </ul>"},{"location":"changelog.html#v01880-2021-12-14","title":"v0.188.0 (2021-12-14)","text":""},{"location":"changelog.html#feat_48","title":"Feat","text":"<ul> <li>add JsonModel class</li> <li>Translator: add for_system_language method</li> <li>StyleOptionToolBox: add get/set_selected_position methods</li> <li>Widget: add screen param to center method</li> <li>Url: add from_local_file method</li> <li>custom_widgets: add CompletionWidget class</li> <li>TextDocument/TextDocumentFragment: add write_to_file method</li> <li>Font: add set_family method</li> <li>gui: add TextDocumentWriter class</li> <li>TextCursor: add get_selection method</li> <li>Mimedata: add set_svg_data / set_path_data</li> <li>gui: add TextDocumentFragment class</li> <li>ListWidet: add find_items method</li> <li>SpacerItem: add get_size_policy method</li> <li>custom_validators: add IntegerValidator class</li> </ul>"},{"location":"changelog.html#v01872-2021-11-18","title":"v0.187.2 (2021-11-18)","text":""},{"location":"changelog.html#fix_63","title":"Fix","text":"<ul> <li>fix import for non-windows</li> </ul>"},{"location":"changelog.html#v01871-2021-11-18","title":"v0.187.1 (2021-11-18)","text":""},{"location":"changelog.html#fix_64","title":"Fix","text":"<ul> <li>add FramelessWindow to init.py</li> </ul>"},{"location":"changelog.html#v01870-2021-11-18","title":"v0.187.0 (2021-11-18)","text":""},{"location":"changelog.html#feat_49","title":"Feat","text":"<ul> <li>Pixmap: add get_image_data_url method</li> <li>FramelessWindow: make AeroSnap work</li> <li>custom_widgets: add JoystickButton class</li> <li>Add SvgBufferIconEngine class</li> <li>FontDatabase: keep track of font paths</li> <li>Style: add draw_control method</li> <li>Icon: add from_char method</li> <li>Pixmap: add create_char method</li> </ul>"},{"location":"changelog.html#fix_65","title":"Fix","text":"<ul> <li>fix ProgressBarDelegate orientation for Qt6</li> </ul>"},{"location":"changelog.html#v01860-2021-11-11","title":"v0.186.0 (2021-11-11)","text":""},{"location":"changelog.html#feat_50","title":"Feat","text":"<ul> <li>WebEnginePage: add some more methods</li> <li>Color: add get_name method</li> <li>iconprovider: add dir and getattr methods to iconsets</li> <li>TextDocument: add some more methods</li> <li>TextBlock: add str method</li> <li>Process: add get_process_environment method</li> <li>qml: add clear_type_registrations method</li> <li>FileIconProvider: support os.PathLike for get_icon</li> <li>custom_widgets: add SubsequenceCompleter class</li> <li>Completer: add set/is_case_sensitive methods</li> <li>custom_models: add SubsequenceSortFilterProxyModel class</li> <li>SortFilterProxyModel: add set_sort_role method</li> </ul>"},{"location":"changelog.html#v01850-2021-11-04","title":"v0.185.0 (2021-11-04)","text":""},{"location":"changelog.html#feat_51","title":"Feat","text":"<ul> <li>add QT_VERSION var to qt module</li> </ul>"},{"location":"changelog.html#fix_66","title":"Fix","text":"<ul> <li>core: dont shadow builtin libraries</li> </ul>"},{"location":"changelog.html#v01840-2021-10-30","title":"v0.184.0 (2021-10-30)","text":""},{"location":"changelog.html#feat_52","title":"Feat","text":"<ul> <li>qt: add flag_to_int method</li> <li>debugging: add is_deleted fn</li> <li>TextEdit: add get_text_cursor method</li> <li>PlainTextEdit: add get_text_cursor method</li> <li>better package support by using importlib.resources for resource files</li> <li>add qt.set_env_vars</li> <li>fallback to installed qt package in case environment var QT_API is invalid / empty</li> <li>TextBlock: add some methods related to syntax highlighting</li> <li>HeaderView: add section_resized_by_user signal</li> <li>Widget: add resized signal</li> <li>add StandardIconsWidget class</li> <li>TextCursor: add get_cursor_position method</li> <li>SyntaxHighlighter: add get_current_block / get_format</li> <li>Process: add edit_environment method</li> <li>Widget: rename get/set_context_menu_policy methods</li> <li>TextLayout: add get_text_option method</li> <li>TextDocument: add some more methods</li> <li>TextCursor: add str method</li> <li>StandardItemModel: add create_single_item_model classmethod</li> <li>ProcessEnvironment: add update() / items() methods</li> <li>Color: add drift_color classmethod</li> <li>PlaintextEdit: TextDocument by default</li> <li>PlainTextEdit: add show_whitespace_and_tabs method</li> <li>add mimetype_icon fn for FileIconProvider</li> <li>Add MenuRecentFiles class</li> <li>update iconsets</li> </ul>"},{"location":"changelog.html#fix_67","title":"Fix","text":"<ul> <li>TextCursor: correctly convert EOL in str</li> <li>qt6 flag fix</li> <li>typo in AwesomeFileIconProvider</li> </ul>"},{"location":"changelog.html#v01836-2021-10-26","title":"v0.183.6 (2021-10-26)","text":""},{"location":"changelog.html#fix_68","title":"Fix","text":"<ul> <li>more qt compat stuff</li> <li>generate docs on py3.9</li> </ul>"},{"location":"changelog.html#v01835-2021-10-12","title":"v0.183.5 (2021-10-12)","text":""},{"location":"changelog.html#fix_69","title":"Fix","text":"<ul> <li>only test on 3.9 / macos10</li> </ul>"},{"location":"changelog.html#v01834-2021-10-12","title":"v0.183.4 (2021-10-12)","text":""},{"location":"changelog.html#fix_70","title":"Fix","text":"<ul> <li>dont use poetry pre version</li> </ul>"},{"location":"changelog.html#v01833-2021-10-12","title":"v0.183.3 (2021-10-12)","text":""},{"location":"changelog.html#fix_71","title":"Fix","text":"<ul> <li>qt6 compat</li> <li>some flag fixes</li> </ul>"},{"location":"changelog.html#v01832-2021-02-05","title":"v0.183.2 (2021-02-05)","text":""},{"location":"changelog.html#fix_72","title":"Fix","text":"<ul> <li>another try to fix docs generation</li> </ul>"},{"location":"changelog.html#v01831-2021-02-05","title":"v0.183.1 (2021-02-05)","text":""},{"location":"changelog.html#fix_73","title":"Fix","text":"<ul> <li>fix docs generation</li> </ul>"},{"location":"changelog.html#v01830-2021-02-05","title":"v0.183.0 (2021-02-05)","text":""},{"location":"changelog.html#feat_53","title":"Feat","text":"<ul> <li>JSEngine: add eval method</li> <li>Pixmap: add rotated method</li> <li>ColorDialog: add replace_qcolorshowlabel</li> <li>JSValue: add call method</li> <li>PlainTextEdit: add some more methods</li> <li>core: add Slot method</li> <li>core: add Mutex/Semaphore classes</li> <li>LineEdit: add some signals</li> <li>svg: add SvgWidget class</li> </ul>"},{"location":"changelog.html#fix_74","title":"Fix","text":"<ul> <li>correctly keep state when using block_signals / updates_off context managers</li> </ul>"},{"location":"changelog.html#v01821-2021-01-26","title":"v0.182.1 (2021-01-26)","text":""},{"location":"changelog.html#fix_75","title":"Fix","text":"<ul> <li>colors fix</li> </ul>"},{"location":"changelog.html#v01820-2021-01-26","title":"v0.182.0 (2021-01-26)","text":""},{"location":"changelog.html#feat_54","title":"Feat","text":"<ul> <li>Image: add invert_pixels method</li> <li>Color: invert_alpha param for inverted method</li> <li>MetaObject: type_filter kwarg for get_methods</li> <li>core: add MetaProperty class</li> <li>MetaObject: include_super param for get_ methods</li> <li>ItemEditorFactory: add property_name kwarg to register_editor method</li> <li>TabWidget: add update_tab_bar_visibility method</li> <li>Pixmap: add from_image method</li> <li>MessageBox: add some constants</li> <li>MessageBox: add set_escape/default_button methods</li> <li>MessageBox: add get_icon_pixmap method</li> <li>svg: add SvgRenderer class</li> <li>Image: add from_ndarray method</li> </ul>"},{"location":"changelog.html#v01810-2021-01-23","title":"v0.181.0 (2021-01-23)","text":""},{"location":"changelog.html#feat_55","title":"Feat","text":"<ul> <li>Color: add is_dark and inverted methods</li> <li>Dir: add set_search_paths method</li> <li>Palette: add inverted method</li> <li>Dir: add add_search_path method</li> <li>core: add AbstractNativeEventFilter</li> </ul>"},{"location":"changelog.html#v01800-2021-01-20","title":"v0.180.0 (2021-01-20)","text":""},{"location":"changelog.html#feat_56","title":"Feat","text":"<ul> <li>TextDocument: add some methods related to default stylesheet editing</li> <li>PygmentsHighlighter: add repr method</li> <li>PygmentsHighlighter: add style kwarg</li> <li>QtCore: add QClassInfo for PyQt5/6</li> <li>colors: add interpolate_text_colors fn</li> <li>Color: add from_hsv method</li> <li>gui: add Drag class</li> <li>DataWidgetMapper: add get_mapped_property_name method</li> <li>DataWidgetMapper: add add_mapping method</li> </ul>"},{"location":"changelog.html#v01790-2021-01-18","title":"v0.179.0 (2021-01-18)","text":""},{"location":"changelog.html#fix_76","title":"Fix","text":"<ul> <li>RegexInput flags fix</li> <li>ModelTester: correctly disconnect model</li> </ul>"},{"location":"changelog.html#feat_57","title":"Feat","text":"<ul> <li>Painter: more kwargs for set_pen method</li> <li>Pen: allow custom dash pattern for set_style</li> <li>ItemEditorFactory: add register_default_editor method</li> <li>GraphicsItem: add set_scale method</li> <li>Pixmap: add create_checkerboard_pattern method</li> <li>ColorDialog: add get_qcolorshower/get_qcolorshowlabel methods</li> <li>TableWidgetItem: add set_tooltip method</li> </ul>"},{"location":"changelog.html#v01780-2021-01-14","title":"v0.178.0 (2021-01-14)","text":""},{"location":"changelog.html#feat_58","title":"Feat","text":"<ul> <li>IODevice: add len method</li> <li>EventLoop: throw exception when running twice</li> <li>Color: add to_qsscolor method</li> <li>Color: add interpolate_color method</li> <li>Locale: add get_system_locale / get_system_language methods</li> <li>use subclassed ItemEditorFactory as default factory</li> </ul>"},{"location":"changelog.html#v01771-2021-01-13","title":"v0.177.1 (2021-01-13)","text":""},{"location":"changelog.html#fix_77","title":"Fix","text":"<ul> <li>test fix</li> </ul>"},{"location":"changelog.html#v01770-2021-01-13","title":"v0.177.0 (2021-01-13)","text":""},{"location":"changelog.html#feat_59","title":"Feat","text":"<ul> <li>allow args for app() methods</li> </ul>"},{"location":"changelog.html#v01760-2021-01-13","title":"v0.176.0 (2021-01-13)","text":""},{"location":"changelog.html#feat_60","title":"Feat","text":"<ul> <li>Timer: add start_timer method</li> <li>Timer: add set_interval method</li> <li>allow os.PathLike for using images in set_tooltip methods</li> <li>Movie: add get_supported_formats method</li> <li>iconprovider: add AwesomeQuickImageProvider class</li> <li>iconprovider: add AwesomeFileIconProvider class</li> </ul>"},{"location":"changelog.html#v01750-2021-01-12","title":"v0.175.0 (2021-01-12)","text":""},{"location":"changelog.html#feat_61","title":"Feat","text":"<ul> <li>add prettyqtest</li> <li>qml: add register_qml_type method</li> <li>AbstractSlider: add set_auto_scroll_to_end method</li> <li>GuiApplication: add edit_palette context manager</li> <li>Dir: add get_entry_list method</li> </ul>"},{"location":"changelog.html#v01740-2021-01-11","title":"v0.174.0 (2021-01-11)","text":""},{"location":"changelog.html#feat_62","title":"Feat","text":"<ul> <li>core: add FileSelector class</li> <li>Dir: add get_entry_info_list method</li> <li>Resource: add set/get_file_name and register_resource methods</li> <li>Application: add get_available_themes method</li> </ul>"},{"location":"changelog.html#v01730-2021-01-10","title":"v0.173.0 (2021-01-10)","text":""},{"location":"changelog.html#fix_78","title":"Fix","text":"<ul> <li>correct icon color for dark mode</li> </ul>"},{"location":"changelog.html#feat_63","title":"Feat","text":"<ul> <li>custom_models: add StorageInfoModel class</li> <li>DataStream: add get/set_status methods</li> <li>custom_widgets: add ElidedLabel class</li> <li>Painter: add get_font_metrics method</li> <li>gui: add TextLayout class</li> <li>add SyncedProperty class</li> <li>Widget: add get/set_window_file_path methods</li> <li>widgets: add SplitterHandle class</li> </ul>"},{"location":"changelog.html#v01720-2021-01-09","title":"v0.172.0 (2021-01-09)","text":""},{"location":"changelog.html#feat_64","title":"Feat","text":"<ul> <li>Application: add set_theme method</li> <li>gui: add TextObjectInterface class</li> <li>PyQt5: import QEnum and QFlag classes</li> <li>core: add MetaMethod/MetaObject classes</li> <li>widgets: add FocusFrame class</li> <li>quick: add Quick(Async)ImageProvider classes</li> <li>QmlEngine: add some more methods</li> <li>QmlApplicationEngine: add load_file method</li> </ul>"},{"location":"changelog.html#v01711-2021-01-07","title":"v0.171.1 (2021-01-07)","text":""},{"location":"changelog.html#fix_79","title":"Fix","text":"<ul> <li>comment out some event constants</li> </ul>"},{"location":"changelog.html#v01710-2021-01-07","title":"v0.171.0 (2021-01-07)","text":""},{"location":"changelog.html#feat_65","title":"Feat","text":"<ul> <li>GraphicsItem: add get/set_cache_mode methods</li> <li>GraphicsPixmapItem: some additional methods</li> <li>custom_widgets: add BorderLayout class</li> <li>widgets: add WidgetItem class</li> <li>LayoutItem: add get_item method</li> <li>LayoutItem: add get/set_alignment methods</li> <li>Style: add draw_primitive method</li> <li>StyleOption: add based_on method</li> </ul>"},{"location":"changelog.html#fix_80","title":"Fix","text":"<ul> <li>AutoSlot: use typing.get_type_hints</li> </ul>"},{"location":"changelog.html#v01700-2021-01-05","title":"v0.170.0 (2021-01-05)","text":""},{"location":"changelog.html#feat_66","title":"Feat","text":"<ul> <li>Validators: also allow Pattern for set_regex</li> <li>add tile rule constant</li> <li>add SingleApplication class</li> <li>custom_widgets: add Notification class</li> <li>TreeWidget: add contains method</li> <li>HelpContentWidget: add index_of method</li> <li>add contains method to some widgets</li> <li>ItemEditorFactory: add register_editor method</li> <li>widgets: add ItemEditorCreatorBase / ItemEditorFactory</li> <li>types: add Variant(Type)</li> <li>VariantAnimation: add set_range method</li> <li>TextStream: add read_lines method</li> <li>TextStream: add set_codec method</li> </ul>"},{"location":"changelog.html#v01690-2021-01-04","title":"v0.169.0 (2021-01-04)","text":""},{"location":"changelog.html#feat_67","title":"Feat","text":"<ul> <li>RegularExpressionMatch: add get_match_type method</li> <li>CoreApplication: allow more types for version metadata</li> <li>Windows: add workaround for raising window</li> <li>network: add LocalSocket class</li> </ul>"},{"location":"changelog.html#fix_81","title":"Fix","text":"<ul> <li>CoreApplication: fix setting metadata</li> </ul>"},{"location":"changelog.html#v01680-2021-01-03","title":"v0.168.0 (2021-01-03)","text":""},{"location":"changelog.html#feat_68","title":"Feat","text":"<ul> <li>eventfilters: add AnimatedToolTipEventFilter class</li> <li>Widget: tooltip kwarg for set_flags method</li> <li>AbstractAnimation: add restart_animation method</li> <li>add custom_animations module</li> <li>AbstractAnimation: implement and and or</li> <li>Dir: some additional methods</li> </ul>"},{"location":"changelog.html#v01670-2021-01-02","title":"v0.167.0 (2021-01-02)","text":""},{"location":"changelog.html#feat_69","title":"Feat","text":"<ul> <li>FileSystemModel: add get_file_info and get_file_path methods</li> <li>add fspath to Dir and FileInfo classes</li> </ul>"},{"location":"changelog.html#v01661-2021-01-01","title":"v0.166.1 (2021-01-01)","text":""},{"location":"changelog.html#fix_82","title":"Fix","text":"<ul> <li>localization fixups</li> </ul>"},{"location":"changelog.html#v01660-2020-12-31","title":"v0.166.0 (2020-12-31)","text":""},{"location":"changelog.html#feat_70","title":"Feat","text":"<ul> <li>CoreApplication: add get_available_languages and load_language methods</li> </ul>"},{"location":"changelog.html#v01650-2020-12-31","title":"v0.165.0 (2020-12-31)","text":""},{"location":"changelog.html#feat_71","title":"Feat","text":"<ul> <li>WebEngineView: add register_as_browser method</li> <li>WebEngineView: ass some settings-related methods</li> <li>Translator: add load_file method</li> <li>add FramelessWindow class</li> <li>add webchannel module</li> <li>qt: add QtWebchannel module</li> <li>widgets: add FileIconProvider class</li> <li>add prettyqt.qt.QtUiTools module</li> </ul>"},{"location":"changelog.html#v01640-2020-12-29","title":"v0.164.0 (2020-12-29)","text":""},{"location":"changelog.html#feat_72","title":"Feat","text":"<ul> <li>CoreApplication: add restart method</li> </ul>"},{"location":"changelog.html#fix_83","title":"Fix","text":"<ul> <li>FontDatabase: make get_system_font a classmethod</li> <li>ObjectBrowser signal fix for Qt6</li> <li>PdfWriter: correctly inherit from Object and PagedPaintDevice</li> </ul>"},{"location":"changelog.html#v01630-2020-12-27","title":"v0.163.0 (2020-12-27)","text":""},{"location":"changelog.html#feat_73","title":"Feat","text":"<ul> <li>OperatingsystemVersion: add eq and hash methods</li> <li>VersionNumber: add hash method</li> <li>FontDatabase: add optional md5 check for add_font</li> </ul>"},{"location":"changelog.html#fix_84","title":"Fix","text":"<ul> <li>revert CharIconPainter paint method for now</li> </ul>"},{"location":"changelog.html#v01620-2020-12-27","title":"v0.162.0 (2020-12-27)","text":""},{"location":"changelog.html#feat_74","title":"Feat","text":"<ul> <li>FontDatabase: add additional check in add_font</li> <li>Painter: add offset_by and apply_transform context managers</li> </ul>"},{"location":"changelog.html#fix_85","title":"Fix","text":"<ul> <li>IconWidget: update when setting size</li> </ul>"},{"location":"changelog.html#v01610-2020-12-26","title":"v0.161.0 (2020-12-26)","text":""},{"location":"changelog.html#feat_75","title":"Feat","text":"<ul> <li>LineEdit: add add_action method</li> <li>ListView/TableView: add some more setters / getters</li> <li>Painter: add edit_pen context manager</li> <li>PolygonF: alternative ctors for diamond / star creation</li> </ul>"},{"location":"changelog.html#fix_86","title":"Fix","text":"<ul> <li>LabeledSlider: call adjust_margins on correct object</li> <li>correct IconProvider init</li> </ul>"},{"location":"changelog.html#v01600-2020-12-25","title":"v0.160.0 (2020-12-25)","text":""},{"location":"changelog.html#feat_76","title":"Feat","text":"<ul> <li>gui: add TextLine module</li> <li>Doublevalidator: add set_range method</li> <li>IntValidator: add set_range method</li> <li>Pixmap: add eq method</li> </ul>"},{"location":"changelog.html#v01590-2020-12-24","title":"v0.159.0 (2020-12-24)","text":""},{"location":"changelog.html#feat_77","title":"Feat","text":"<ul> <li>LineEdit: add set/get_cursor_move_style methods</li> </ul>"},{"location":"changelog.html#v01580-2020-12-22","title":"v0.158.0 (2020-12-22)","text":""},{"location":"changelog.html#feat_78","title":"Feat","text":"<ul> <li>iconprovider: add reset_cache method</li> <li>Widget: add set/get_foreground/background_role methods</li> <li>Application/Widget: add set/get_stylesheet methods</li> <li>Application: add edit_stylesheet context manager</li> </ul>"},{"location":"changelog.html#v01571-2020-12-22","title":"v0.157.1 (2020-12-22)","text":""},{"location":"changelog.html#fix_87","title":"Fix","text":"<ul> <li>SpanSlider fix</li> </ul>"},{"location":"changelog.html#v01570-2020-12-22","title":"v0.157.0 (2020-12-22)","text":""},{"location":"changelog.html#feat_79","title":"Feat","text":"<ul> <li>Painter: add native_mode context manager</li> <li>FontDatabase: add add_font method</li> <li>gui: add IconEngine class</li> <li>TabWidget: add set_icon_size method</li> <li>Icon: allow more types for size param</li> </ul>"},{"location":"changelog.html#v01560-2020-12-21","title":"v0.156.0 (2020-12-21)","text":""},{"location":"changelog.html#feat_80","title":"Feat","text":"<ul> <li>RegularExpressionMatch: add bool method</li> <li>custom_widgets: add ObjectBrowser class</li> <li>Timer: add restart method</li> <li>ListView: add set_grid_size method</li> <li>SortFilterProxyModel: add is/set_filter_case_sensitive methods</li> <li>AbstractItemView: add set_icon_size method</li> </ul>"},{"location":"changelog.html#v01550-2020-12-20","title":"v0.155.0 (2020-12-20)","text":""},{"location":"changelog.html#feat_81","title":"Feat","text":"<ul> <li>Label: add get_horizontal/vertical_alignment methods</li> <li>GraphicsWidget: add window_frame_section_at method</li> </ul>"},{"location":"changelog.html#v01540-2020-12-18","title":"v0.154.0 (2020-12-18)","text":""},{"location":"changelog.html#feat_82","title":"Feat","text":"<ul> <li>add QtLocation and QtHelp to qt submodule</li> <li>Dir/FileDialog: add get/set_filter methods</li> <li>InputDialog: add get/set_input_mode and get/set_text_echo_mode methods</li> </ul>"},{"location":"changelog.html#fix_88","title":"Fix","text":"<ul> <li>correct StarDelegate setModelData call</li> </ul>"},{"location":"changelog.html#v01530-2020-12-17","title":"v0.153.0 (2020-12-17)","text":""},{"location":"changelog.html#feat_83","title":"Feat","text":"<ul> <li>MediaPlayer: add get_error method</li> </ul>"},{"location":"changelog.html#v01521-2020-12-17","title":"v0.152.1 (2020-12-17)","text":""},{"location":"changelog.html#fix_89","title":"Fix","text":"<ul> <li>PySide2 workaround for non-recursive Object.findChild(ren)</li> </ul>"},{"location":"changelog.html#v01520-2020-12-16","title":"v0.152.0 (2020-12-16)","text":""},{"location":"changelog.html#feat_84","title":"Feat","text":"<ul> <li>Standarditem/StandardItemModel: add enabled and editable kwarg to add_item methods</li> <li>AbstractItemView: add get/set_drag_drop_mode methods</li> </ul>"},{"location":"changelog.html#v01510-2020-12-16","title":"v0.151.0 (2020-12-16)","text":""},{"location":"changelog.html#feat_85","title":"Feat","text":"<ul> <li>ToolBar: add add method</li> <li>Icon: add get_actual_size method</li> <li>winextras: add WinThumbnailToolButton class</li> <li>ToolButton: add set_menu method</li> <li>Uuid: add str method</li> </ul>"},{"location":"changelog.html#fix_90","title":"Fix","text":"<ul> <li>PySide2 find_child(ren) fix</li> </ul>"},{"location":"changelog.html#v01500-2020-12-15","title":"v0.150.0 (2020-12-15)","text":""},{"location":"changelog.html#feat_86","title":"Feat","text":"<ul> <li>Movie: add get_state method</li> </ul>"},{"location":"changelog.html#v01490-2020-12-15","title":"v0.149.0 (2020-12-15)","text":""},{"location":"changelog.html#feat_87","title":"Feat","text":"<ul> <li>add HoverIconEventFilter class</li> <li>positioning: add GeoPositionInfo class</li> <li>Icon: add mode and state kwarg for add/get_pixmap</li> <li>widget: add set_mask method</li> <li>core: add FileSystemWatcher class</li> <li>Palette: add get/set_color_group methods</li> <li>Brush: add some addtional methods</li> <li>Region: add some additional methods</li> <li>custom_delegates: add RenderLinkDelegate class</li> <li>TableWidgetItem: add set_text_alignment method</li> <li>Gradients: add repr and some helper methods to gradient classes</li> </ul>"},{"location":"changelog.html#fix_91","title":"Fix","text":"<ul> <li>PySide2 workaround for missing recursive param in findChild(ren)</li> <li>WebEngineHistory len fix for PySide2</li> <li>CategoryAxis len fix for PySide2</li> <li>correctly inherit LCDNumber</li> </ul>"},{"location":"changelog.html#v01480-2020-12-14","title":"v0.148.0 (2020-12-14)","text":""},{"location":"changelog.html#feat_88","title":"Feat","text":"<ul> <li>Widget: add get/set_window_state methods</li> <li>AbstractTextDocumentLayout: add tuple support for hit_test point arg</li> <li>TimeZone: add get_display_name method</li> <li>GuiApplication: add get/set_high_dpi_scale_factor_rounding_policy methods</li> <li>StandardItem: add some new methods</li> <li>AbstractButton: add get_icon method</li> <li>StandardItemModel: add add_item method</li> <li>StandardItem: add get/set_checkstate methods</li> <li>Window: add start_system_resize method</li> </ul>"},{"location":"changelog.html#v01472-2020-12-14","title":"v0.147.2 (2020-12-14)","text":""},{"location":"changelog.html#fix_92","title":"Fix","text":"<ul> <li>MacOs test fix</li> </ul>"},{"location":"changelog.html#v01471-2020-12-14","title":"v0.147.1 (2020-12-14)","text":""},{"location":"changelog.html#fix_93","title":"Fix","text":"<ul> <li>MacOs test fix</li> </ul>"},{"location":"changelog.html#v01470-2020-12-13","title":"v0.147.0 (2020-12-13)","text":""},{"location":"changelog.html#feat_89","title":"Feat","text":"<ul> <li>ToolBar: add get_allowed_areas method</li> <li>WebEnginePage: add some additional methods</li> <li>WebEngineSettings: add delitem method</li> <li>Application: add send/post_event methods</li> </ul>"},{"location":"changelog.html#v01460-2020-12-13","title":"v0.146.0 (2020-12-13)","text":""},{"location":"changelog.html#fix_94","title":"Fix","text":"<ul> <li>correctly serialize AbstractGraphicsShapeItem</li> </ul>"},{"location":"changelog.html#feat_90","title":"Feat","text":"<ul> <li>GuiApplication: add get_icon method</li> <li>PlainTextEdit: add get(_line)_wrap_mode methods</li> <li>GuiApplication: add get_application_state method</li> </ul>"},{"location":"changelog.html#v01450-2020-12-11","title":"v0.145.0 (2020-12-11)","text":""},{"location":"changelog.html#fix_95","title":"Fix","text":"<ul> <li>GraphicsGridLayout: serialize correctly</li> <li>MediaRecorder: use correct module in set_video/audio_settings</li> <li>correct constant naming</li> <li>install_exceptionhook fix</li> </ul>"},{"location":"changelog.html#feat_91","title":"Feat","text":"<ul> <li>GridLayout: add get/set_origin_corner methods</li> <li>BoxLayout: add get/set_direction methods</li> <li>NetworkCookieJar: add add and set_cookies_from_url methods</li> <li>NetworkCookie: add set_expiration_date method</li> <li>Translator: add bool method</li> <li>custom_widgets: add RoundProgressBar class</li> <li>DateTimeEdit: add some more methods related to sections</li> <li>get/set_icon_size work for some widgets</li> <li>CalendarWidget: add set_range method</li> <li>HeaderView: add generate_header_id method</li> <li>Widget: add edit_palette contextmanager and get_font method</li> <li>Palette: add brush methods</li> <li>custom_models: add ImportlibDistributionModel class</li> </ul>"},{"location":"changelog.html#v01440-2020-12-09","title":"v0.144.0 (2020-12-09)","text":""},{"location":"changelog.html#fix_96","title":"Fix","text":"<ul> <li>Settings: iter through key-value pairs</li> <li>correct inheritance for QuickItem</li> <li>ColumnItemModel: correct get_width signature</li> </ul>"},{"location":"changelog.html#feat_92","title":"Feat","text":"<ul> <li>qml: add QmlImageProviderbase class</li> <li>widgets: add TreeWidgetItemIterator class</li> <li>quick: add some more classes</li> <li>qml: add QmlParserStatus class</li> <li>Widget: add get_title method</li> <li>Painter: add get_text_rect method</li> <li>ListWidget: add add_item method</li> </ul>"},{"location":"changelog.html#v01430-2020-12-08","title":"v0.143.0 (2020-12-08)","text":""},{"location":"changelog.html#fix_97","title":"Fix","text":"<ul> <li>ObjectBrowser fix</li> </ul>"},{"location":"changelog.html#feat_93","title":"Feat","text":"<ul> <li>implement eq method for some more validator classes</li> </ul>"},{"location":"changelog.html#v01421-2020-12-07","title":"v0.142.1 (2020-12-07)","text":""},{"location":"changelog.html#fix_98","title":"Fix","text":"<ul> <li>use our own SizeF class</li> </ul>"},{"location":"changelog.html#v01420-2020-12-07","title":"v0.142.0 (2020-12-07)","text":""},{"location":"changelog.html#feat_94","title":"Feat","text":"<ul> <li>SizeF: add some methods to be on par with Size</li> <li>Size: add expanded_to method</li> <li>CompositeValidator: add some additional methods</li> <li>custom_validators: add eq method to validator classes</li> <li>TreeWidgetItem: add some more methods</li> <li>widgets: add TableWidgetSelectionRange class</li> <li>core: add Calendar class</li> <li>core: add SignalMapper class</li> <li>core: add StateMachine class</li> <li>core: add LockFile class</li> <li>core: add JsonDocument/JsonValue classes</li> <li>GeoCircle: allow tuple in ctor</li> <li>core: add SocketNotifier class</li> <li>widgets: add Shortcut class</li> </ul>"},{"location":"changelog.html#fix_99","title":"Fix","text":"<ul> <li>Correctly inherit StyleItemDelegate</li> </ul>"},{"location":"changelog.html#v01410-2020-12-03","title":"v0.141.0 (2020-12-03)","text":""},{"location":"changelog.html#feat_95","title":"Feat","text":"<ul> <li>core: add Collator(SortKey) classes</li> </ul>"},{"location":"changelog.html#fix_100","title":"Fix","text":"<ul> <li>github actions fix</li> </ul>"},{"location":"changelog.html#v01404-2020-12-02","title":"v0.140.4 (2020-12-02)","text":""},{"location":"changelog.html#fix_101","title":"Fix","text":"<ul> <li>docs build fix</li> </ul>"},{"location":"changelog.html#v01403-2020-12-02","title":"v0.140.3 (2020-12-02)","text":""},{"location":"changelog.html#fix_102","title":"Fix","text":"<ul> <li>docs deployment</li> </ul>"},{"location":"changelog.html#v01402-2020-12-02","title":"v0.140.2 (2020-12-02)","text":""},{"location":"changelog.html#fix_103","title":"Fix","text":"<ul> <li>deploy check for github actions</li> </ul>"},{"location":"changelog.html#v01401-2020-12-02","title":"v0.140.1 (2020-12-02)","text":""},{"location":"changelog.html#fix_104","title":"Fix","text":"<ul> <li>github actions: conditional deploy step</li> </ul>"},{"location":"changelog.html#v01400-2020-12-02","title":"v0.140.0 (2020-12-02)","text":""},{"location":"changelog.html#feat_96","title":"Feat","text":"<ul> <li>gui: add ColorSpace class</li> </ul>"},{"location":"changelog.html#v01390-2020-12-02","title":"v0.139.0 (2020-12-02)","text":""},{"location":"changelog.html#feat_97","title":"Feat","text":"<ul> <li>FileInfo/Dir: fallback to pathlib.Path methods</li> <li>widgets: add Proxy/CommonStyle classes</li> <li>widgets: add Gesture classes</li> <li>core: add TemporaryDir class</li> <li>widgets: add WhatsThis class</li> <li>core: add ItemSelectionRange class</li> <li>FormLayout: add some more methods</li> <li>core: add ProcessEnvironment class</li> <li>gui: add StaticText class</li> <li>core: add PauseAnimation class</li> </ul>"},{"location":"changelog.html#v01380-2020-12-01","title":"v0.138.0 (2020-12-01)","text":""},{"location":"changelog.html#feat_98","title":"Feat","text":"<ul> <li>core: add ChildEvent / TimerEvent classes</li> <li>core: add IdentityProxyModel class</li> <li>gui: add SessionManager class</li> <li>gui: add InputMethod class</li> <li>core: add AbstractEventDispatcher class</li> <li>widgets: add StackedWidget class</li> <li>widgets: add some events</li> <li>FileInfo: add some additional methods</li> <li>gui: add Vector3D class</li> <li>core: add MimeType / MimeDatabase classes</li> <li>core: add SaveFile class</li> <li>core: add SignalBlocker class</li> <li>core: add TimeLine class</li> <li>gui: add Bitmap class</li> <li>core: add RandomGenerator class</li> <li>FileDevice: add get_error method</li> <li>widgets: add Dial class</li> <li>widgets: add RubberBand class</li> <li>Wizard/WizardPage: add some more methods</li> <li>widgets: add GraphicsRotation / GraphicsScale classes</li> <li>widgets: add GraphicsTransform class</li> <li>widgets: add LCDNumber class</li> <li>widgets: add Scroller(Properties) classes</li> <li>core: add CommandLineParser/Option classes</li> <li>Pixmap: add some more methods</li> <li>gui: add Screen class</li> <li>Transform: add some more methods</li> <li>add Abstract/PlainTextTextDocumentLayout classes</li> <li>core: add BasicTimer class</li> <li>core: add Resource class</li> <li>core: add StorageInfo class</li> <li>core: add ElapsedTimer class</li> <li>core: add CryptographicHash class</li> </ul>"},{"location":"changelog.html#v01371-2020-11-27","title":"v0.137.1 (2020-11-27)","text":""},{"location":"changelog.html#fix_105","title":"Fix","text":"<ul> <li>doc build fix</li> </ul>"},{"location":"changelog.html#v01370-2020-11-27","title":"v0.137.0 (2020-11-27)","text":""},{"location":"changelog.html#feat_99","title":"Feat","text":"<ul> <li>core: add OperatingSystemVersion class</li> <li>PdfWriter: add set_page_margins method</li> <li>core: add MarginsF class</li> <li>core: Add TextStream class</li> <li>core: add ByteArrayMatcher</li> <li>AbstractItemModel: add check_index method</li> <li>PlaceManager: add search_place method</li> <li>core: add app method</li> <li>add bytes method to some classes</li> <li>utils: add Singleton metaclass</li> <li>icon: add add_pixmap method</li> <li>gui: Add PixmapCache</li> <li>Font: add some more methods</li> </ul>"},{"location":"changelog.html#v01360-2020-11-26","title":"v0.136.0 (2020-11-26)","text":""},{"location":"changelog.html#feat_100","title":"Feat","text":"<ul> <li>location: add PlaceResult class</li> <li>location: add PlaceProposedSearchResult class</li> <li>location: add clone_from method to reply classes</li> <li>Object: add has_id method</li> </ul>"},{"location":"changelog.html#fix_106","title":"Fix","text":"<ul> <li>emit inputandslider signal correctly on value change</li> <li>correct flag for constants.NO_CHILDREN</li> </ul>"},{"location":"changelog.html#v01350-2020-11-26","title":"v0.135.0 (2020-11-26)","text":""},{"location":"changelog.html#feat_101","title":"Feat","text":"<ul> <li>WebEngineHistoryItem: add get_icon_url method</li> <li>location: add PlaceMatchReply / PlaceIdReply classes</li> <li>PlaceContentReply/PlaceSearchReply: add request methods</li> <li>gui: add TextListFormat class</li> <li>gui: add TextImageFormat class</li> <li>location: add some reply/result classes</li> <li>gui: add TextTableCellFormat class</li> <li>gui: add app method</li> <li>gui: add TextFrameFormat class</li> <li>Application: add get_font method</li> <li>add qthelp module</li> <li>quick: add QuickPaintedItem class</li> <li>gui: add TextBlockGroup class</li> <li>TextCharFormat: add get/set_vertical_alignment methods</li> <li>TextBlock: add contains method</li> <li>PaintDevice: add get_metric method</li> <li>GuiApplication: add get/set_layout_direction methods</li> <li>gui: add TextObject / TextLength / TextFrame / TextFormat classes</li> <li>core: add ItemSelection class</li> <li>GraphicsLayout: add set_margin method</li> </ul>"},{"location":"changelog.html#fix_107","title":"Fix","text":"<ul> <li>correctly add items for GraphicsGridLayout</li> </ul>"},{"location":"changelog.html#v01340-2020-11-23","title":"v0.134.0 (2020-11-23)","text":""},{"location":"changelog.html#feat_102","title":"Feat","text":"<ul> <li>core: add PersistentModelIndex class</li> <li>core: add PluginLoader class</li> <li>core: add Library class</li> <li>gui: add PainterPathStroker class</li> <li>gui: add ImageWriter / ImageReader / ImageIOHandler classes</li> <li>quick: add QuickItem / QuickWindow classes</li> <li>core: add install_message_handler method</li> <li>gui: add RasterWindow / PaintDeviceWindow / OpenGLWindow classes</li> <li>svg: add SvgGenerator class</li> <li>SplashScreen: allow pixmap for ctor</li> <li>icon: add get_available_sizes method</li> <li>widget: add set_attributes method</li> <li>gui: add Vector4D / Matrix4x4 classes</li> <li>custom_widgets: add StarDelegate class</li> <li>custom_delegates: add ProgressBarDelegate class</li> <li>widgets: add missing StyleOption classes</li> <li>WidgetItems: some more methods</li> <li>Painter: add backup_state contextmanager</li> </ul>"},{"location":"changelog.html#fix_108","title":"Fix","text":"<ul> <li>KeySequenceEdit: correct repr</li> <li>correct coloring for WaitingSpinner</li> </ul>"},{"location":"changelog.html#v01331-2020-11-16","title":"v0.133.1 (2020-11-16)","text":""},{"location":"changelog.html#fix_109","title":"Fix","text":"<ul> <li>test fix</li> </ul>"},{"location":"changelog.html#v01330-2020-11-16","title":"v0.133.0 (2020-11-16)","text":""},{"location":"changelog.html#feat_103","title":"Feat","text":"<ul> <li>ComboBox: default param for add_items</li> <li>AbstractItemModel: add force_reset/force_layoutchange methods</li> <li>add location module</li> <li>gui: add FontMetricsF class</li> <li>GeoCoordinate: add bool method</li> <li>FontMetrics: add get_(tight_)bounding_rect methods</li> <li>Url: add to_string method</li> <li>network: add LocalServer / TcpServer classes</li> <li>multimediawidgets: add GraphicsVideoItem class</li> <li>mediaobject: add get_availability method</li> <li>add qt module</li> </ul>"},{"location":"changelog.html#v01321-2020-11-07","title":"v0.132.1 (2020-11-07)","text":""},{"location":"changelog.html#fix_110","title":"Fix","text":"<ul> <li>import fix</li> </ul>"},{"location":"changelog.html#v01320-2020-11-07","title":"v0.132.0 (2020-11-07)","text":""},{"location":"changelog.html#feat_104","title":"Feat","text":"<ul> <li>NetworkAccessManager: allow str for request</li> <li>network: add UdpSocket</li> <li>network: add NetworkAddressEntry / NetworkInterface classes</li> <li>add texttospeech module</li> <li>network: add NetworkDatagram class</li> <li>core: add DeadlineTimer class</li> <li>network: add HostAddress/AbstractSocket/TcpSocket classes</li> <li>network: add NetworkProxy class</li> <li>network: add HttpMultiPart class</li> <li>network: add HttpPart class</li> <li>NetworkRequest: add set/get_header methods</li> </ul>"},{"location":"changelog.html#v01310-2020-11-04","title":"v0.131.0 (2020-11-04)","text":""},{"location":"changelog.html#feat_105","title":"Feat","text":"<ul> <li>webenginecore: add WebEngineHttpRequest class</li> <li>webenginewidgets: add WebEngineContextMenuData class</li> <li>webenginewidgets: add WebEngineScriptCollection class</li> <li>multimedia: add CameraExposure/CameraImageProcessing classes</li> <li>multimedia: add CameraFocus(Zone) classes</li> <li>webenginecore: add WebEngineUrlSchemeHandler</li> </ul>"},{"location":"changelog.html#v01300-2020-11-04","title":"v0.130.0 (2020-11-04)","text":""},{"location":"changelog.html#feat_106","title":"Feat","text":"<ul> <li>WebEnginePage: add some settings methods</li> <li>webenginewidgets: add WebEngineSettings class</li> <li>add bluetooth module</li> <li>core: add Uuid class</li> <li>add quick module</li> <li>gui: add Surface and Window class</li> <li>multimedia: add ImageEncoderSettings</li> <li>multimedia: add MediaTimeRange and MediaTimeInterval classes</li> </ul>"},{"location":"changelog.html#v01291-2020-10-29","title":"v0.129.1 (2020-10-29)","text":""},{"location":"changelog.html#fix_111","title":"Fix","text":"<ul> <li>fix tests</li> <li>fix multimedia tests for Travis</li> </ul>"},{"location":"changelog.html#feat_107","title":"Feat","text":"<ul> <li>charts: add Legend class</li> <li>WebEnginePage: add get_history method</li> <li>qml: add JSValue(Iterator) class</li> <li>VideoWidget: option for fullscreen toggling via double click</li> <li>multimedia: add CameraViewFinderSettings</li> <li>multimedia: add VideoFrame class</li> <li>multimedia: add AbstractPlanarVideoBuffer class</li> <li>multimedia: add AbstractVideoBuffer class</li> <li>multimedia: add Camera class</li> <li>multimedia: add CameraInfo class</li> <li>gui: add Clipboard class</li> <li>multimedia: add AudioFormat class</li> <li>multimedia: add SoundEffect class</li> <li>charts: add PieSlice class</li> <li>charts: add BoxSet and CandlestickSet classes</li> <li>charts: add Axis-related classes</li> <li>charts: add BarSeries-related classes</li> </ul>"},{"location":"changelog.html#v01281-2020-10-25","title":"v0.128.1 (2020-10-25)","text":""},{"location":"changelog.html#fix_112","title":"Fix","text":"<ul> <li>import fix</li> </ul>"},{"location":"changelog.html#v01280-2020-10-25","title":"v0.128.0 (2020-10-25)","text":""},{"location":"changelog.html#feat_108","title":"Feat","text":"<ul> <li>custom_widgets: add ExpandableLine class</li> <li>ParallelAnimationGroup: add set_duration method</li> <li>charts: add Abstract/ValueAxis and PolarChart classes</li> <li>core: add SequentialAnimationGroup class</li> <li>AnimationGroup: allow slicing for indexing</li> <li>AnimationGroup: add add_property_animation method</li> <li>ChartView: add get/set_rubber_band methods</li> <li>Chart: add some more methods</li> <li>core: add Locale class</li> <li>core: add Margins class</li> <li>webenginewidgets: add some more modules</li> </ul>"},{"location":"changelog.html#fix_113","title":"Fix","text":"<ul> <li>Chart: properly inherit from GraphicsWidget</li> </ul>"},{"location":"changelog.html#v01271-2020-10-20","title":"v0.127.1 (2020-10-20)","text":""},{"location":"changelog.html#fix_114","title":"Fix","text":"<ul> <li>fix tests</li> </ul>"},{"location":"changelog.html#v01270-2020-10-20","title":"v0.127.0 (2020-10-20)","text":""},{"location":"changelog.html#fix_115","title":"Fix","text":"<ul> <li>always import correct bindings for winextras module</li> <li>Url: allow initializing without arg</li> </ul>"},{"location":"changelog.html#feat_109","title":"Feat","text":"<ul> <li>PainterPath: add set_fill_rule method</li> <li>PainterPath: add get_bounding_rect method</li> <li>GraphicsItem: add get_shape method</li> <li>MediaPlaylist: add get_media_url method</li> <li>start with webenginecore module</li> <li>core: add EventLoop class</li> <li>Widget: add get_font_info method</li> <li>custom_models: add PlaylistModel</li> <li>Translator: add get_file_path method</li> <li>add positioning module</li> <li>add some first QtQml classes</li> <li>core: add LibraryInfo class</li> <li>Application: add iter method</li> <li>Application: add get/set_navigation_mode methods</li> <li>Application: add get/is_effect_enabled methods</li> <li>custom_widgets: add Player class</li> </ul>"},{"location":"changelog.html#v01260-2020-10-08","title":"v0.126.0 (2020-10-08)","text":""},{"location":"changelog.html#feat_110","title":"Feat","text":"<ul> <li>core: add Process class</li> <li>DateTime: add get/set_time_spec and get_date/time methods</li> <li>core: add Time class</li> <li>DateTime: add timezone methods</li> <li>core: add TimeZone class</li> <li>Pixmap: add create_dot classmethod</li> </ul>"},{"location":"changelog.html#v01251-2020-10-07","title":"v0.125.1 (2020-10-07)","text":""},{"location":"changelog.html#fix_116","title":"Fix","text":"<ul> <li>import fix</li> </ul>"},{"location":"changelog.html#v01250-2020-10-07","title":"v0.125.0 (2020-10-07)","text":""},{"location":"changelog.html#feat_111","title":"Feat","text":"<ul> <li>widgets: add Transition classes</li> <li>core: add Transition classes</li> </ul>"},{"location":"changelog.html#fix_117","title":"Fix","text":"<ul> <li>fix Action.get_shortcut for NoneValue</li> </ul>"},{"location":"changelog.html#v01240-2020-10-05","title":"v0.124.0 (2020-10-05)","text":""},{"location":"changelog.html#feat_112","title":"Feat","text":"<ul> <li>IODevice: add get_open_mode method</li> <li>Improve repr and add str method for Date and DateTime</li> <li>core: add TemporaryFile class</li> <li>FileDevice: add set/get_file_time methods</li> <li>MainWindow: allow setting central widget to None</li> <li>AbstractButton: add get_shortcut method</li> <li>Url: add from_user_input method</li> <li>WebEngineView: add get_url method</li> <li>FileInfo: support pathlib + add proper repr</li> <li>KeySequence: allow initializing with standard keys</li> </ul>"},{"location":"changelog.html#v01231-2020-09-29","title":"v0.123.1 (2020-09-29)","text":""},{"location":"changelog.html#fix_118","title":"Fix","text":"<ul> <li>add missing State import in core module</li> </ul>"},{"location":"changelog.html#v01230-2020-09-29","title":"v0.123.0 (2020-09-29)","text":""},{"location":"changelog.html#feat_113","title":"Feat","text":"<ul> <li>core: add State classes</li> <li>core: add TextBoundaryFinder class</li> <li>ProgressBar: add get/set_orientation methods + serialize work</li> <li>Action: allow setting callback with ctor</li> <li>WebEngineView: set subclassed WebEnginePage by default</li> <li>WebEnginePage: add some more methods and constants</li> <li>AbstractSlider: add get/set_orientation methods</li> <li>core: add FileInfo class</li> <li>webenginewidgets: add WebEngineProfile class</li> </ul>"},{"location":"changelog.html#v01221-2020-09-27","title":"v0.122.1 (2020-09-27)","text":""},{"location":"changelog.html#fix_119","title":"Fix","text":"<ul> <li>use correct icon names</li> </ul>"},{"location":"changelog.html#v01220-2020-09-27","title":"v0.122.0 (2020-09-27)","text":""},{"location":"changelog.html#feat_114","title":"Feat","text":"<ul> <li>gui: add PageLayout</li> <li>gui: add Movie class</li> <li>gui: add PageSize class</li> <li>gui: add FontInfo class</li> <li>core: add UrlQuery class</li> <li>add network module</li> <li>PropertyAnimation: add get/set_property_name methods</li> <li>core: add ParallelAnimationGroup</li> <li>widgets: add SizeGrip class</li> <li>widgets: add DataWidgetMapper class</li> <li>core: add StringListModel</li> <li>VersionNumber: add get_python_version</li> <li>gui: add Transform class</li> <li>Painter: add draw_polygon method</li> <li>add core.ByteArray</li> </ul>"},{"location":"changelog.html#v01210-2020-09-10","title":"v0.121.0 (2020-09-10)","text":""},{"location":"changelog.html#feat_115","title":"Feat","text":"<ul> <li>Image: add setitem / getitem methods</li> <li>Line/LineF: add reversed and abs methods</li> <li>GraphicsScene: add get/set_item_index_method method</li> </ul>"},{"location":"changelog.html#fix_120","title":"Fix","text":"<ul> <li>serialization fixes</li> </ul>"},{"location":"changelog.html#v01200-2020-08-27","title":"v0.120.0 (2020-08-27)","text":""},{"location":"changelog.html#feat_116","title":"Feat","text":"<ul> <li>GraphicsWidget: add set_layout method</li> <li>GraphicsLayout: add some magic methods</li> <li>GraphicsScene: add add_item_group method</li> <li>widgets: add GraphicsAnchorLayout / GraphicsGridLayout / GraphicsLinearLayout</li> <li>widgets: add GraphicsItemGroup</li> <li>Layout: add delitem method</li> <li>Polygon/PolygonF: add repr and iter methods</li> <li>PainterPath: some additional methods</li> <li>GraphicsItems: add repr methods</li> <li>Line/LineF: add repr and iter</li> <li>Application: allow loading included language files via load_language_file</li> <li>widgets: add GraphicsView class</li> </ul>"},{"location":"changelog.html#refactor","title":"Refactor","text":"<ul> <li>PromptLineEdit rework</li> </ul>"},{"location":"changelog.html#v01191-2020-08-24","title":"v0.119.1 (2020-08-24)","text":""},{"location":"changelog.html#fix_121","title":"Fix","text":"<ul> <li>add missing StyleOptionComplex class</li> </ul>"},{"location":"changelog.html#v01190-2020-08-24","title":"v0.119.0 (2020-08-24)","text":""},{"location":"changelog.html#feat_117","title":"Feat","text":"<ul> <li>GraphicsScene: add some convenience methods</li> <li>widgets: add graphicsitem classes</li> <li>StylePainter: add draw_complex_control method</li> <li>gui: allow pickling some more classes</li> <li>core: add LineF class</li> <li>Widget: add get_palette() method</li> <li>widgets: add GraphicsPixmapItem / GraphicsScene</li> <li>GraphicsItem: add getitem and setitem methods</li> <li>widgets: add Blur/Colorize/DropShadowEffect</li> </ul>"},{"location":"changelog.html#fix_122","title":"Fix","text":"<ul> <li>Graphicsitem collides methods fix</li> <li>KeySequence: pickling</li> </ul>"},{"location":"changelog.html#v01182-2020-08-17","title":"v0.118.2 (2020-08-17)","text":""},{"location":"changelog.html#fix_123","title":"Fix","text":"<ul> <li>Fix tests</li> </ul>"},{"location":"changelog.html#v01181-2020-08-17","title":"v0.118.1 (2020-08-17)","text":""},{"location":"changelog.html#fix_124","title":"Fix","text":"<ul> <li>MenuBar: fix add method</li> </ul>"},{"location":"changelog.html#v01180-2020-08-17","title":"v0.118.0 (2020-08-17)","text":""},{"location":"changelog.html#refactor_1","title":"Refactor","text":"<ul> <li>MenuBar: return subclassed types instead of qt classes</li> </ul>"},{"location":"changelog.html#feat_118","title":"Feat","text":"<ul> <li>gui: add TextDocument / TextBlock / TextOption</li> <li>gui: add ConicalGradient / RadialGradient</li> <li>custom_widgets: add CollapsibleFrame</li> <li>GraphicsItem: add some more methods</li> </ul>"},{"location":"changelog.html#v01170-2020-08-16","title":"v0.117.0 (2020-08-16)","text":""},{"location":"changelog.html#feat_119","title":"Feat","text":"<ul> <li>MimeData: add dict-like interface</li> <li>Timer: add get/set_type methods</li> <li>File: add repr and str methods</li> <li>Dir: add repr and truediv methods</li> <li>Frame: set/get_frame_shape, set/get_frame_shadow</li> <li>Splitter: add setitem method, and some more typing</li> <li>Polygon/PolygonF: pythonize</li> <li>core: add Abstract/Variant/PropertyAnimation and AnimationGroup</li> <li>core: add EasingCurve</li> <li>StyleOptionSlider: add get_orientation method</li> </ul>"},{"location":"changelog.html#refactor_2","title":"Refactor","text":"<ul> <li>SpanSlider: clean up code</li> </ul>"},{"location":"changelog.html#v01160-2020-08-13","title":"v0.116.0 (2020-08-13)","text":""},{"location":"changelog.html#feat_120","title":"Feat","text":"<ul> <li>gui: add LinearGradient</li> <li>AbstractSlider: add get/set_repeat_action and trigger_action methods</li> <li>TabWidget: add get/set_tab_position methods</li> <li>Image/Pixmap: add bool method</li> <li>MenuBar: serialize stuff</li> <li>MdiArea: serialize stuff</li> <li>Brush: allow pickling + add get_texture_image method</li> <li>custom_widgets: add Timeline</li> <li>Pen: add methods for setting and getting style / join style / cap style</li> </ul>"},{"location":"changelog.html#refactor_3","title":"Refactor","text":"<ul> <li>Painter: rework set_pen / get_pen</li> </ul>"},{"location":"changelog.html#v01150-2020-08-12","title":"v0.115.0 (2020-08-12)","text":""},{"location":"changelog.html#feat_121","title":"Feat","text":"<ul> <li>Polygon: add add_points method</li> <li>Object: add store_widget_states / restore_widget_states</li> <li>Painter: add paint_on, set_transparent_background, set_brush</li> <li>PainterPath: add add_rect method</li> <li>Application: add class_getitem</li> </ul>"},{"location":"changelog.html#fix_125","title":"Fix","text":"<ul> <li>RegexEditor: correctly initialize dialog</li> </ul>"},{"location":"changelog.html#v01141-2020-08-12","title":"v0.114.1 (2020-08-12)","text":""},{"location":"changelog.html#fix_126","title":"Fix","text":"<ul> <li>HeaderView: fix saving state</li> </ul>"},{"location":"changelog.html#v01140-2020-08-12","title":"v0.114.0 (2020-08-12)","text":""},{"location":"changelog.html#refactor_4","title":"Refactor","text":"<ul> <li>use AutoSlot decorator</li> </ul>"},{"location":"changelog.html#feat_122","title":"Feat","text":"<ul> <li>add autoslot decorator</li> <li>add prettyqt.debug</li> </ul>"},{"location":"changelog.html#v01130-2020-08-10","title":"v0.113.0 (2020-08-10)","text":""},{"location":"changelog.html#feat_123","title":"Feat","text":"<ul> <li>gui: add PainterPath class</li> <li>gui: add Polygon class</li> <li>gui: palette improvements</li> <li>core: add Line class</li> <li>core: add TransposeProxyModel / ConcatenateTablesProxyModel</li> <li>add ObjectBrowser</li> <li>widgets: add GraphicsEffect / GraphicsObject / GraphicsOpacityEffect</li> <li>Action: \"checked\" param for ctor</li> <li>gui: some magic methods + get_matches for KeySequence</li> <li>core: allow pickling VersionNumber / Size / Dir</li> <li>gui: add Gradient class</li> <li>add ColumnItemModel / ColumnItem</li> <li>Settings: add set_values method</li> <li>Widget: spacing kwarg for set_layout</li> </ul>"},{"location":"changelog.html#refactor_5","title":"Refactor","text":"<ul> <li>add serialization stuff</li> <li>improve some repr methods</li> </ul>"},{"location":"changelog.html#v01120-2020-08-04","title":"v0.112.0 (2020-08-04)","text":""},{"location":"changelog.html#feat_124","title":"Feat","text":"<ul> <li>utils: add install_exceptionhook method</li> <li>FileSystemModel: add some more shortcuts for set_root_path</li> <li>core: add VersionNumber class</li> <li>Application: add get_icon method</li> <li>MessageBox: add show_exception method</li> </ul>"},{"location":"changelog.html#refactor_6","title":"Refactor","text":"<ul> <li>improve compat with older Qt Versions</li> </ul>"},{"location":"changelog.html#fix_127","title":"Fix","text":"<ul> <li>another test fix</li> </ul>"},{"location":"changelog.html#v01111-2020-08-03","title":"v0.111.1 (2020-08-03)","text":""},{"location":"changelog.html#fix_128","title":"Fix","text":"<ul> <li>fix tests for Linux</li> </ul>"},{"location":"changelog.html#v01110-2020-08-03","title":"v0.111.0 (2020-08-03)","text":""},{"location":"changelog.html#feat_125","title":"Feat","text":"<ul> <li>widgets: add FontComboBox</li> <li>StandardPaths: add class_getitem method</li> <li>Action: some more ctor kwargs</li> <li>Action: add get/set_menu_role methods, some pickle work</li> </ul>"},{"location":"changelog.html#refactor_7","title":"Refactor","text":"<ul> <li>custom Exception for wrong params</li> </ul>"},{"location":"changelog.html#fix_129","title":"Fix","text":"<ul> <li>Menu: disable separator widgetAction</li> </ul>"},{"location":"changelog.html#v01102-2020-08-03","title":"v0.110.2 (2020-08-03)","text":""},{"location":"changelog.html#fix_130","title":"Fix","text":"<ul> <li>fix broken LogTextEdit</li> </ul>"},{"location":"changelog.html#v01101-2020-08-03","title":"v0.110.1 (2020-08-03)","text":""},{"location":"changelog.html#fix_131","title":"Fix","text":"<ul> <li>LogTextEdit: improve exception handling</li> <li>SidebarWidget: some fixes related to set_marker</li> </ul>"},{"location":"changelog.html#v01100-2020-08-02","title":"v0.110.0 (2020-08-02)","text":""},{"location":"changelog.html#refactor_8","title":"Refactor","text":"<ul> <li>improve serialization for listitems</li> <li>Validator pickle work</li> </ul>"},{"location":"changelog.html#feat_126","title":"Feat","text":"<ul> <li>Image: allow pickling</li> <li>DataStream: add create_bytearray / write_bytearray / copy_data methods</li> <li>core: add DataStream class</li> </ul>"},{"location":"changelog.html#v01090-2020-08-02","title":"v0.109.0 (2020-08-02)","text":""},{"location":"changelog.html#feat_127","title":"Feat","text":"<ul> <li>widget: add pretty method for devtools</li> <li>GridLayout: allow adding tuples/lists</li> </ul>"},{"location":"changelog.html#refactor_9","title":"Refactor","text":"<ul> <li>rework widget pickling</li> <li>move CheckboxDelegate to custom_delegates</li> <li>pickle stuff for undocommand</li> </ul>"},{"location":"changelog.html#v01080-2020-07-31","title":"v0.108.0 (2020-07-31)","text":""},{"location":"changelog.html#feat_128","title":"Feat","text":"<ul> <li>custom_delegates: add IconDelegate and NoFocusDelegate</li> <li>TableWidet: add getitem and setitem methods</li> <li>Icon: add from_image method</li> <li>allow str for layout.getitem (uses objectName)</li> <li>SidebarWidget: add set_marker method</li> </ul>"},{"location":"changelog.html#refactor_10","title":"Refactor","text":"<ul> <li>move delegates to separate module</li> </ul>"},{"location":"changelog.html#v01070-2020-07-29","title":"v0.107.0 (2020-07-29)","text":""},{"location":"changelog.html#feat_129","title":"Feat","text":"<ul> <li>GridLayout: also allow adding LayoutItems via add method</li> </ul>"},{"location":"changelog.html#v01061-2020-07-29","title":"v0.106.1 (2020-07-29)","text":""},{"location":"changelog.html#fix_132","title":"Fix","text":"<ul> <li>TabWidget: correctly close detached tabs on app close</li> <li>pickle fixes for toolbar and dockwidget</li> <li>PygmentsHighlighter: catch pygments KeyError</li> </ul>"},{"location":"changelog.html#v01060-2020-07-26","title":"v0.106.0 (2020-07-26)","text":""},{"location":"changelog.html#feat_130","title":"Feat","text":"<ul> <li>gui: add DesktopServices class</li> <li>multimedia: add AudioRecorder class</li> <li>core: add StandardPaths class</li> <li>widgets: add Undo classes</li> </ul>"},{"location":"changelog.html#v01050-2020-07-24","title":"v0.105.0 (2020-07-24)","text":""},{"location":"changelog.html#feat_131","title":"Feat","text":"<ul> <li>MediaRecorder: some new methods</li> <li>sort_by_column for tableview and treeview</li> <li>multimedia: dict-setter and getter for encodersettings</li> </ul>"},{"location":"changelog.html#refactor_11","title":"Refactor","text":"<ul> <li>improve Url-Pathlib interoperability</li> </ul>"},{"location":"changelog.html#fix_133","title":"Fix","text":"<ul> <li>PopupInfo: use PrimaryScreen geometry instead of screens[0] for positioning</li> </ul>"},{"location":"changelog.html#v01040-2020-07-23","title":"v0.104.0 (2020-07-23)","text":""},{"location":"changelog.html#feat_132","title":"Feat","text":"<ul> <li>multimedia: add MediaRecorder</li> <li>AbstractItemModel: add getitem method</li> <li>multimedia: add VideoEncoderSettings / AudioEncoderSettings</li> </ul>"},{"location":"changelog.html#refactor_12","title":"Refactor","text":"<ul> <li>use subclassed core.Size</li> </ul>"},{"location":"changelog.html#v01030-2020-07-22","title":"v0.103.0 (2020-07-22)","text":""},{"location":"changelog.html#feat_133","title":"Feat","text":"<ul> <li>ActionGroup: add getitem method</li> <li>MediaContent: add get_url method</li> <li>add multimediawidgets module</li> <li>add multimedia module</li> <li>PlainTextEdit: add allow_wheel_zoom method</li> <li>Object: name kwarg for find_parent method</li> </ul>"},{"location":"changelog.html#v01020-2020-07-21","title":"v0.102.0 (2020-07-21)","text":""},{"location":"changelog.html#refactor_13","title":"Refactor","text":"<ul> <li>move raise_dock to from Widget to Object</li> <li>SidebarWidget: some code cleanup, make settings button size configurable</li> <li>Widget: default state to True for set_attribute</li> <li>MainWindow: add return value for load_window_state</li> </ul>"},{"location":"changelog.html#feat_134","title":"Feat","text":"<ul> <li>Object: add find_parent method</li> <li>PlainTextEdit: add style kwarg to set_syntaxhighlighter</li> </ul>"},{"location":"changelog.html#v01011-2020-07-20","title":"v0.101.1 (2020-07-20)","text":""},{"location":"changelog.html#fix_134","title":"Fix","text":"<ul> <li>LogTextEdit: better integrate with custom qstylesheets</li> </ul>"},{"location":"changelog.html#v01010-2020-07-20","title":"v0.101.0 (2020-07-20)","text":""},{"location":"changelog.html#feat_135","title":"Feat","text":"<ul> <li>MessageBox: add detail_text keyword argument to message method</li> </ul>"},{"location":"changelog.html#fix_135","title":"Fix","text":"<ul> <li>correct return type for gui.icon.get_icon</li> </ul>"},{"location":"changelog.html#v01000-2020-07-20","title":"v0.100.0 (2020-07-20)","text":""},{"location":"changelog.html#feat_136","title":"Feat","text":"<ul> <li>ToolTip: add show_text method</li> <li>GuiApplication: add set_override_cursor / restore_override_cursor methods</li> <li>GuiApplication: add override_cursor context manager</li> </ul>"},{"location":"changelog.html#v0990-2020-07-18","title":"v0.99.0 (2020-07-18)","text":""},{"location":"changelog.html#refactor_14","title":"Refactor","text":"<ul> <li>FileChooserButton: typing and fixes</li> <li>Dataset: typing and fixes</li> <li>SidebarWidget: use button map instead of attaching button to widget</li> </ul>"},{"location":"changelog.html#feat_137","title":"Feat","text":"<ul> <li>AbstractItemView: add scroll_to method</li> </ul>"},{"location":"changelog.html#v0985-2020-07-17","title":"v0.98.5 (2020-07-17)","text":""},{"location":"changelog.html#perf","title":"Perf","text":"<ul> <li>add icon cache</li> </ul>"},{"location":"changelog.html#refactor_15","title":"Refactor","text":"<ul> <li>use core.Settings for windows dark mode detection</li> </ul>"},{"location":"changelog.html#v0984-2020-07-15","title":"v0.98.4 (2020-07-15)","text":""},{"location":"changelog.html#fix_136","title":"Fix","text":"<ul> <li>use qta default icon color instead of black for default</li> </ul>"},{"location":"changelog.html#v0983-2020-07-15","title":"v0.98.3 (2020-07-15)","text":""},{"location":"changelog.html#refactor_16","title":"Refactor","text":"<ul> <li>properly set stylesheets by using contextmanager</li> <li>FontDialog: do not override current_font contextmanager</li> <li>move current_font context manager to Widget class</li> </ul>"},{"location":"changelog.html#v0982-2020-07-15","title":"v0.98.2 (2020-07-15)","text":""},{"location":"changelog.html#fix_137","title":"Fix","text":"<ul> <li>package name</li> </ul>"},{"location":"changelog.html#v0981-2020-07-15","title":"v0.98.1 (2020-07-15)","text":""},{"location":"changelog.html#fix_138","title":"Fix","text":"<ul> <li>correctly reset stylesheet for widget validation background</li> </ul>"},{"location":"changelog.html#refactor_17","title":"Refactor","text":"<ul> <li>use qstylizer for stylesheet editing</li> </ul>"},{"location":"changelog.html#v0980-2020-07-15","title":"v0.98.0 (2020-07-15)","text":""},{"location":"changelog.html#feat_138","title":"Feat","text":"<ul> <li>widgets: add StyleFactory</li> </ul>"},{"location":"changelog.html#refactor_18","title":"Refactor","text":"<ul> <li>FontDatabase: make add_fonts_from_folder a classmethod</li> </ul>"},{"location":"changelog.html#v0970-2020-07-15","title":"v0.97.0 (2020-07-15)","text":""},{"location":"changelog.html#feat_139","title":"Feat","text":"<ul> <li>gui: add FontDatabase</li> <li>widgets: add Completer</li> <li>widgets: add ActionGroup</li> </ul>"},{"location":"changelog.html#v0960-2020-07-14","title":"v0.96.0 (2020-07-14)","text":""},{"location":"changelog.html#feat_140","title":"Feat","text":"<ul> <li>SelectionWidget: default keyword argument for add_custom</li> </ul>"},{"location":"changelog.html#v0950-2020-07-14","title":"v0.95.0 (2020-07-14)","text":""},{"location":"changelog.html#feat_141","title":"Feat","text":"<ul> <li>SelectionWidget: different options for custom type</li> <li>add PagedPaintDevice</li> <li>Widget: add set_margin method</li> </ul>"},{"location":"changelog.html#v0940-2020-07-14","title":"v0.94.0 (2020-07-14)","text":""},{"location":"changelog.html#feat_142","title":"Feat","text":"<ul> <li>Widget: add Widget.font_metrics()</li> <li>SpacerItem: allow strings for size policy in ctor</li> <li>allow Mapping for listwidget.add_items</li> </ul>"},{"location":"changelog.html#refactor_19","title":"Refactor","text":"<ul> <li>change to {value: label} dicts for FlagSelectionWidget.add_items</li> </ul>"},{"location":"changelog.html#v0931-2020-07-14","title":"v0.93.1 (2020-07-14)","text":""},{"location":"changelog.html#refactor_20","title":"Refactor","text":"<ul> <li>typecheck for Mapping instead of dict for combobox / selectionwidget add_items method</li> </ul>"},{"location":"changelog.html#v0930-2020-07-14","title":"v0.93.0 (2020-07-14)","text":""},{"location":"changelog.html#feat_143","title":"Feat","text":"<ul> <li>add register_extensions function to settings module</li> </ul>"},{"location":"changelog.html#refactor_21","title":"Refactor","text":"<ul> <li>Settings: do not override value method</li> </ul>"},{"location":"changelog.html#v0921-2020-07-14","title":"v0.92.1 (2020-07-14)","text":""},{"location":"changelog.html#fix_139","title":"Fix","text":"<ul> <li>winextras test fix</li> </ul>"},{"location":"changelog.html#v0920-2020-07-14","title":"v0.92.0 (2020-07-14)","text":""},{"location":"changelog.html#feat_144","title":"Feat","text":"<ul> <li>add widgets.SystemTrayIcon</li> <li>add winextras module</li> <li>Label: set_indent method</li> </ul>"},{"location":"changelog.html#v0910-2020-07-13","title":"v0.91.0 (2020-07-13)","text":""},{"location":"changelog.html#feat_145","title":"Feat","text":"<ul> <li>SidebarWidget: allow choosing layout</li> <li>MainWindow: add show_blocking method</li> </ul>"},{"location":"changelog.html#v0900-2020-07-13","title":"v0.90.0 (2020-07-13)","text":""},{"location":"changelog.html#feat_146","title":"Feat","text":"<ul> <li>Toolbar: allow combinations of allowed areas for set_allowed_areas</li> <li>SidebarWidget: add optional settings menu</li> </ul>"},{"location":"changelog.html#v0891-2020-07-13","title":"v0.89.1 (2020-07-13)","text":""},{"location":"changelog.html#refactor_22","title":"Refactor","text":"<ul> <li>SelectionWidget: switch to {data: label} dicts for add_items to be in line with RadioButton</li> </ul>"},{"location":"changelog.html#v0890-2020-07-13","title":"v0.89.0 (2020-07-13)","text":""},{"location":"changelog.html#feat_147","title":"Feat","text":"<ul> <li>SidebarWidget: make button width configurable</li> </ul>"},{"location":"changelog.html#v0881-2020-07-13","title":"v0.88.1 (2020-07-13)","text":""},{"location":"changelog.html#refactor_23","title":"Refactor","text":"<ul> <li>ComboBox: use set_data for set_value</li> </ul>"},{"location":"changelog.html#fix_140","title":"Fix","text":"<ul> <li>ComboBox: fix add_items method</li> </ul>"},{"location":"changelog.html#v0880-2020-07-13","title":"v0.88.0 (2020-07-13)","text":""},{"location":"changelog.html#feat_148","title":"Feat","text":"<ul> <li>ComboBox: set_data method</li> </ul>"},{"location":"changelog.html#v0870-2020-07-13","title":"v0.87.0 (2020-07-13)","text":""},{"location":"changelog.html#feat_149","title":"Feat","text":"<ul> <li>ComboBox: allow dict for add_items</li> </ul>"},{"location":"changelog.html#v0863-2020-07-12","title":"v0.86.3 (2020-07-12)","text":""},{"location":"changelog.html#refactor_24","title":"Refactor","text":"<ul> <li>RegexEditor: code cleanup</li> </ul>"},{"location":"changelog.html#v0862-2020-07-12","title":"v0.86.2 (2020-07-12)","text":""},{"location":"changelog.html#fix_141","title":"Fix","text":"<ul> <li>another deployment fix</li> </ul>"},{"location":"changelog.html#v0861-2020-07-12","title":"v0.86.1 (2020-07-12)","text":""},{"location":"changelog.html#fix_142","title":"Fix","text":"<ul> <li>deployment fix</li> </ul>"},{"location":"changelog.html#v0860-2020-07-12","title":"v0.86.0 (2020-07-12)","text":""},{"location":"changelog.html#feat_150","title":"Feat","text":"<ul> <li>add Scintilla CodeEditor</li> <li>PlainTextEdit: add color argument for highlight_current_line</li> </ul>"},{"location":"changelog.html#v0851-2020-07-10","title":"v0.85.1 (2020-07-10)","text":""},{"location":"changelog.html#fix_143","title":"Fix","text":"<ul> <li>add missing pygments requirement</li> </ul>"},{"location":"changelog.html#v0850-2020-07-10","title":"v0.85.0 (2020-07-10)","text":""},{"location":"changelog.html#feat_151","title":"Feat","text":"<ul> <li>dataset: add RegexPattern DataItem</li> <li>RegexEditor: use syntaxhighlighter for pattern</li> <li>RegexInput: use syntaxhighlighter for pattern</li> <li>PlainTextEdit: add set_syntaxhighlighter method</li> <li>Label: add set_color method</li> </ul>"},{"location":"changelog.html#refactor_25","title":"Refactor","text":"<ul> <li>CodeEditor: use pygments for syntax highlighting</li> </ul>"},{"location":"changelog.html#v0840-2020-07-10","title":"v0.84.0 (2020-07-10)","text":""},{"location":"changelog.html#feat_152","title":"Feat","text":"<ul> <li>sidebarwidget: allow setting tab by object id</li> <li>Object: name kwarg for Object.find_children, add Object.find_child</li> </ul>"},{"location":"changelog.html#v0831-2020-07-09","title":"v0.83.1 (2020-07-09)","text":""},{"location":"changelog.html#refactor_26","title":"Refactor","text":"<ul> <li>move set_icon from window classes to widget class</li> </ul>"},{"location":"changelog.html#v0830-2020-07-09","title":"v0.83.0 (2020-07-09)","text":""},{"location":"changelog.html#feat_153","title":"Feat","text":"<ul> <li>add Label.set_point_size</li> <li>add self for label methods to allow chaining</li> <li>Font.current_font context manager</li> </ul>"},{"location":"changelog.html#v0820-2020-07-09","title":"v0.82.0 (2020-07-09)","text":""},{"location":"changelog.html#feat_154","title":"Feat","text":"<ul> <li>add Label.set_bold / set_italic / set_weight</li> <li>added Font.set_weight</li> </ul>"},{"location":"changelog.html#v0810-2020-07-08","title":"v0.81.0 (2020-07-08)","text":""},{"location":"changelog.html#feat_155","title":"Feat","text":"<ul> <li>allow setting window icon color</li> <li>os dark mode detection</li> </ul>"},{"location":"changelog.html#v0801-2020-07-08","title":"v0.80.1 (2020-07-08)","text":""},{"location":"changelog.html#fix_144","title":"Fix","text":"<ul> <li>Settings.value() returned wrong type</li> </ul>"},{"location":"changelog.html#v0800-2020-07-08","title":"v0.80.0 (2020-07-08)","text":""},{"location":"changelog.html#feat_156","title":"Feat","text":"<ul> <li>add Widget.set_attribute</li> <li>add margin keyword argument to Widget.set_layout</li> </ul>"},{"location":"changelog.html#v0791-2020-07-08","title":"v0.79.1 (2020-07-08)","text":""},{"location":"changelog.html#fix_145","title":"Fix","text":"<ul> <li>remove Qt logger on Application exit</li> </ul>"},{"location":"changelog.html#v0790-2020-07-08","title":"v0.79.0 (2020-07-08)","text":""},{"location":"changelog.html#feat_157","title":"Feat","text":"<ul> <li>add widgets.Application.get_widget</li> </ul>"},{"location":"changelog.html#v0780-2020-07-08","title":"v0.78.0 (2020-07-08)","text":""},{"location":"changelog.html#feat_158","title":"Feat","text":"<ul> <li>allow to save/load window state recursively. Saving needs to be done explicitely now.</li> </ul>"},{"location":"changelog.html#fix_146","title":"Fix","text":"<ul> <li>some fixes for core.Settings dict interface</li> <li>properly preserve types in core.Settings</li> </ul>"},{"location":"changelog.html#v0771-2020-07-07","title":"v0.77.1 (2020-07-07)","text":""},{"location":"changelog.html#refactor_27","title":"Refactor","text":"<ul> <li>also allow qt flag for Splitter ctor</li> </ul>"},{"location":"changelog.html#fix_147","title":"Fix","text":"<ul> <li>return correct types for re.groupdict / re.groups</li> <li>Fixed an issue which prevented saving an image from chartview</li> </ul>"},{"location":"changelog.html#0770-2020-07-06","title":"0.77.0 (2020-07-06)","text":""},{"location":"changelog.html#feat_159","title":"Feat","text":"<ul> <li>allow custom icons for Messagebox</li> <li>add Icon.get_pixmap</li> <li>add Object.set_unique_id / Object.get_id</li> <li>allow None for set_max_height/width widget setters</li> <li>add checkboxdelegate</li> <li>add regexinput</li> <li>add pre-commit-hook for commit messages</li> </ul>"},{"location":"changelog.html#fix_148","title":"Fix","text":"<ul> <li>fix Messagebox.message call</li> </ul>"},{"location":"changelog.html#refactor_28","title":"Refactor","text":"<ul> <li>dont use property setter widget.id</li> <li>dont use property setter widget.title</li> <li>add child classes in re module</li> <li>radiodelegate stuff</li> <li>no props for abstractscrollarea scrollbars</li> </ul>"},{"location":"changelog.html#v0759-2020-07-05","title":"v0.75.9 (2020-07-05)","text":""},{"location":"changelog.html#v0758-2020-07-05","title":"v0.75.8 (2020-07-05)","text":""},{"location":"changelog.html#v0757-2020-07-05","title":"v0.75.7 (2020-07-05)","text":""},{"location":"changelog.html#v0756-2020-07-05","title":"v0.75.6 (2020-07-05)","text":""},{"location":"changelog.html#v0755-2020-07-05","title":"v0.75.5 (2020-07-05)","text":""},{"location":"changelog.html#v0754-2020-07-05","title":"v0.75.4 (2020-07-05)","text":""},{"location":"changelog.html#v0753-2020-07-05","title":"v0.75.3 (2020-07-05)","text":""},{"location":"changelog.html#v0752-2020-07-05","title":"v0.75.2 (2020-07-05)","text":""},{"location":"changelog.html#v0751-2020-07-05","title":"v0.75.1 (2020-07-05)","text":""},{"location":"changelog.html#v0750-2020-07-05","title":"v0.75.0 (2020-07-05)","text":""},{"location":"changelog.html#v0743-2020-07-05","title":"v0.74.3 (2020-07-05)","text":""},{"location":"changelog.html#v0742-2020-07-05","title":"v0.74.2 (2020-07-05)","text":""},{"location":"changelog.html#v0741-2020-07-05","title":"v0.74.1 (2020-07-05)","text":""},{"location":"changelog.html#v0740-2020-07-05","title":"v0.74.0 (2020-07-05)","text":""},{"location":"changelog.html#v0734-2020-07-04","title":"v0.73.4 (2020-07-04)","text":""},{"location":"changelog.html#v0733-2020-07-04","title":"v0.73.3 (2020-07-04)","text":""},{"location":"changelog.html#v0732-2020-07-04","title":"v0.73.2 (2020-07-04)","text":""},{"location":"changelog.html#v0731-2020-07-04","title":"v0.73.1 (2020-07-04)","text":""},{"location":"changelog.html#v0730-2020-07-02","title":"v0.73.0 (2020-07-02)","text":""},{"location":"changelog.html#v0723-2020-07-01","title":"v0.72.3 (2020-07-01)","text":""},{"location":"changelog.html#v0722-2020-07-01","title":"v0.72.2 (2020-07-01)","text":""},{"location":"changelog.html#v0721-2020-07-01","title":"v0.72.1 (2020-07-01)","text":""},{"location":"changelog.html#v0720-2020-07-01","title":"v0.72.0 (2020-07-01)","text":""},{"location":"changelog.html#v0710-2020-06-30","title":"v0.71.0 (2020-06-30)","text":""},{"location":"changelog.html#v0700-2020-06-30","title":"v0.70.0 (2020-06-30)","text":""},{"location":"changelog.html#v0690-2020-06-29","title":"v0.69.0 (2020-06-29)","text":""},{"location":"changelog.html#v0680-2020-06-29","title":"v0.68.0 (2020-06-29)","text":""},{"location":"changelog.html#v0671-2020-06-28","title":"v0.67.1 (2020-06-28)","text":""},{"location":"changelog.html#v0651-2020-06-24","title":"v0.65.1 (2020-06-24)","text":""},{"location":"changelog.html#v0650-2020-06-24","title":"v0.65.0 (2020-06-24)","text":""},{"location":"changelog.html#v0640-2020-06-24","title":"v0.64.0 (2020-06-24)","text":""},{"location":"changelog.html#v0630-2020-06-22","title":"v0.63.0 (2020-06-22)","text":""},{"location":"changelog.html#v0620-2020-06-21","title":"v0.62.0 (2020-06-21)","text":""},{"location":"changelog.html#v0610-2020-06-21","title":"v0.61.0 (2020-06-21)","text":""},{"location":"changelog.html#v0601-2020-06-21","title":"v0.60.1 (2020-06-21)","text":""},{"location":"changelog.html#v0600-2020-06-20","title":"v0.60.0 (2020-06-20)","text":""},{"location":"changelog.html#v0590-2020-06-20","title":"v0.59.0 (2020-06-20)","text":""},{"location":"changelog.html#v0581-2020-06-19","title":"v0.58.1 (2020-06-19)","text":""},{"location":"changelog.html#v0571-2020-06-15","title":"v0.57.1 (2020-06-15)","text":""},{"location":"changelog.html#v0570-2020-06-14","title":"v0.57.0 (2020-06-14)","text":""},{"location":"changelog.html#v0561-2020-06-10","title":"v0.56.1 (2020-06-10)","text":""},{"location":"changelog.html#v0560-2020-06-10","title":"v0.56.0 (2020-06-10)","text":""},{"location":"changelog.html#v0550-2020-06-09","title":"v0.55.0 (2020-06-09)","text":""},{"location":"changelog.html#v0540-2020-06-08","title":"v0.54.0 (2020-06-08)","text":""},{"location":"api/bluetooth.html","title":"bluetooth module","text":"<p>bluetooth module.</p> <p>contains QtBluetooth-based classes</p>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.__all__","title":"<code>__all__ = ['BluetoothHostInfo', 'BluetoothLocalDevice', 'BluetoothDeviceInfo', 'BluetoothUuid', 'BluetoothSocket', 'BluetoothServer', 'BluetoothAddress', 'BluetoothServiceInfo', 'BluetoothDeviceDiscoveryAgent', 'BluetoothServiceDiscoveryAgent']</code>  <code>module-attribute</code>","text":""},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothAddress","title":"<code>BluetoothAddress</code>","text":"<p>         Bases: <code>QtBluetooth.QBluetoothAddress</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>class BluetoothAddress(QtBluetooth.QBluetoothAddress):\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothaddress.BluetoothAddress.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothaddress.BluetoothAddress.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothaddress.BluetoothAddress.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothDeviceDiscoveryAgent","title":"<code>BluetoothDeviceDiscoveryAgent</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtBluetooth.QBluetoothDeviceDiscoveryAgent</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>class BluetoothDeviceDiscoveryAgent(\ncore.ObjectMixin, QtBluetooth.QBluetoothDeviceDiscoveryAgent\n):\ndevice_discovered = core.Signal(object)  # bluetooth.BluetoothDeviceInfo casts signal.\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.deviceDiscovered.connect(self._on_device_discovered)\ndef _on_device_discovered(self, info):\ninfo = bluetooth.BluetoothDeviceInfo(info)\nself.device_discovered.emit(info)\n# def set_inquiry_type(self, typ: InquiryTypeStr):\n#     \"\"\"Set inquiry type.\n#     Args:\n#         typ: inquiry type\n#     Raises:\n#         InvalidParamError: inquiry type does not exist\n#     \"\"\"\n#     if typ not in INQUIRY_TYPES:\n#         raise InvalidParamError(typ, INQUIRY_TYPES)\n#     self.setInquiryType(INQUIRY_TYPES[typ])\n# def get_inquiry_type(self) -&gt; InquiryTypeStr:\n#     \"\"\"Get the current inquiry type.\n#     Returns:\n#         inquiry type\n#     \"\"\"\n#     return INQUIRY_TYPES.inverse[self.inquiryType()]\ndef start_discovery(self, classic: bool = True, low_energy: bool = True):\nflag = QtBluetooth.QBluetoothDeviceDiscoveryAgent.NoMethod\nif classic:\nflag |= QtBluetooth.QBluetoothDeviceDiscoveryAgent.ClassicMethod\nif low_energy:\nflag |= QtBluetooth.QBluetoothDeviceDiscoveryAgent.LowEnergyMethod\nself.start(flag)\ndef get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\ndef get_supported_discovery_methods(self) -&gt; list[DiscoveryMethodStr]:\nreturn DISCOVERY_METHODS.get_list(self.supportedDiscoveryMethods())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.device_discovered","title":"<code>device_discovered = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.deviceDiscovered.connect(self._on_device_discovered)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.get_supported_discovery_methods","title":"<code>get_supported_discovery_methods() -&gt; list[DiscoveryMethodStr]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def get_supported_discovery_methods(self) -&gt; list[DiscoveryMethodStr]:\nreturn DISCOVERY_METHODS.get_list(self.supportedDiscoveryMethods())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.start_discovery","title":"<code>start_discovery(classic: bool = True, low_energy: bool = True)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def start_discovery(self, classic: bool = True, low_energy: bool = True):\nflag = QtBluetooth.QBluetoothDeviceDiscoveryAgent.NoMethod\nif classic:\nflag |= QtBluetooth.QBluetoothDeviceDiscoveryAgent.ClassicMethod\nif low_energy:\nflag |= QtBluetooth.QBluetoothDeviceDiscoveryAgent.LowEnergyMethod\nself.start(flag)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothDeviceInfo","title":"<code>BluetoothDeviceInfo</code>","text":"<p>         Bases: <code>QtBluetooth.QBluetoothDeviceInfo</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>class BluetoothDeviceInfo(QtBluetooth.QBluetoothDeviceInfo):\ndef __repr__(self):\nreturn get_repr(self, self.get_address(), self.name())\ndef __bool__(self):\nreturn self.isValid()\ndef get_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.address())\ndef get_device_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\nreturn [bluetooth.BluetoothUuid(i) for i in self.deviceIds()]\ndef get_service_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceIds()]\ndef get_service_uuids(self) -&gt; list[bluetooth.BluetoothUuid]:\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceUuids()]\ndef get_major_device_class(self) -&gt; MajorDeviceClassStr:\nreturn MAJOR_DEVICE_CLASS.inverse[self.majorDeviceClass()]\ndef get_minor_device_class(self) -&gt; str:\nmajor = self.get_major_device_class()\nmatch major:\ncase \"computer\":\nflag = mod.MinorComputerClass(self.minorDeviceClass())\nreturn MINOR_COMPUTER_CLASS.inverse[flag]\ncase \"phone\":\nflag = mod.MinorPhoneClass(self.minorDeviceClass())\nreturn MINOR_PHONE_CLASS.inverse[flag]\ncase \"network\":\nflag = mod.MinorNetworkClass(self.minorDeviceClass())\nreturn MINOR_NETWORK_CLASS.inverse[flag]\ncase \"audio_video\":\nflag = mod.MinorAudioVideoClass(self.minorDeviceClass())\nreturn MINOR_AUDIO_VIDEO_CLASS.inverse[flag]\ncase \"peripheral\":\nflag = mod.MinorPeripheralClass(self.minorDeviceClass())\nreturn MINOR_PERIPHERAL_CLASS.inverse[flag]\ncase \"imaging\":\nflag = mod.MinorImagingClass(self.minorDeviceClass())\nreturn MINOR_IMAGING_CLASS.inverse[flag]\ncase \"wearable\":\nflag = mod.MinorWearableClass(self.minorDeviceClass())\nreturn MINOR_WEARABLE_CLASS.inverse[flag]\ncase \"toy\":\nflag = mod.MinorToyClass(self.minorDeviceClass())\nreturn MINOR_TOY_CLASS.inverse[flag]\ncase \"health\":\nflag = mod.MinorHealthClass(self.minorDeviceClass())\nreturn MINOR_HEALTH_CLASS.inverse[flag]\ncase \"uncategorized\":\nreturn \"misc\"\ncase _:\nraise ValueError(major)\ndef get_service_classes(self) -&gt; list[ServiceClassStr]:\nreturn SERVICE_CLASS.get_list(self.serviceClasses())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_address(), self.name())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_address","title":"<code>get_address() -&gt; bluetooth.BluetoothAddress</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_device_ids","title":"<code>get_device_ids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_device_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\nreturn [bluetooth.BluetoothUuid(i) for i in self.deviceIds()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_major_device_class","title":"<code>get_major_device_class() -&gt; MajorDeviceClassStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_major_device_class(self) -&gt; MajorDeviceClassStr:\nreturn MAJOR_DEVICE_CLASS.inverse[self.majorDeviceClass()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_minor_device_class","title":"<code>get_minor_device_class() -&gt; str</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_minor_device_class(self) -&gt; str:\nmajor = self.get_major_device_class()\nmatch major:\ncase \"computer\":\nflag = mod.MinorComputerClass(self.minorDeviceClass())\nreturn MINOR_COMPUTER_CLASS.inverse[flag]\ncase \"phone\":\nflag = mod.MinorPhoneClass(self.minorDeviceClass())\nreturn MINOR_PHONE_CLASS.inverse[flag]\ncase \"network\":\nflag = mod.MinorNetworkClass(self.minorDeviceClass())\nreturn MINOR_NETWORK_CLASS.inverse[flag]\ncase \"audio_video\":\nflag = mod.MinorAudioVideoClass(self.minorDeviceClass())\nreturn MINOR_AUDIO_VIDEO_CLASS.inverse[flag]\ncase \"peripheral\":\nflag = mod.MinorPeripheralClass(self.minorDeviceClass())\nreturn MINOR_PERIPHERAL_CLASS.inverse[flag]\ncase \"imaging\":\nflag = mod.MinorImagingClass(self.minorDeviceClass())\nreturn MINOR_IMAGING_CLASS.inverse[flag]\ncase \"wearable\":\nflag = mod.MinorWearableClass(self.minorDeviceClass())\nreturn MINOR_WEARABLE_CLASS.inverse[flag]\ncase \"toy\":\nflag = mod.MinorToyClass(self.minorDeviceClass())\nreturn MINOR_TOY_CLASS.inverse[flag]\ncase \"health\":\nflag = mod.MinorHealthClass(self.minorDeviceClass())\nreturn MINOR_HEALTH_CLASS.inverse[flag]\ncase \"uncategorized\":\nreturn \"misc\"\ncase _:\nraise ValueError(major)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_classes","title":"<code>get_service_classes() -&gt; list[ServiceClassStr]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_classes(self) -&gt; list[ServiceClassStr]:\nreturn SERVICE_CLASS.get_list(self.serviceClasses())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_ids","title":"<code>get_service_ids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceIds()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_uuids","title":"<code>get_service_uuids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_uuids(self) -&gt; list[bluetooth.BluetoothUuid]:\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceUuids()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothHostInfo","title":"<code>BluetoothHostInfo</code>","text":"<p>         Bases: <code>QtBluetooth.QBluetoothHostInfo</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>class BluetoothHostInfo(QtBluetooth.QBluetoothHostInfo):\ndef set_address(self, address: QtBluetooth.QBluetoothAddress | int | str):\nif isinstance(address, int | str):\naddress = QtBluetooth.QBluetoothAddress(address)\nself.setAddress(address)\ndef get_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothhostinfo.BluetoothHostInfo.get_address","title":"<code>get_address() -&gt; bluetooth.BluetoothAddress</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>def get_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothhostinfo.BluetoothHostInfo.set_address","title":"<code>set_address(address: QtBluetooth.QBluetoothAddress | int | str)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>def set_address(self, address: QtBluetooth.QBluetoothAddress | int | str):\nif isinstance(address, int | str):\naddress = QtBluetooth.QBluetoothAddress(address)\nself.setAddress(address)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothLocalDevice","title":"<code>BluetoothLocalDevice</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtBluetooth.QBluetoothLocalDevice</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>class BluetoothLocalDevice(core.ObjectMixin, QtBluetooth.QBluetoothLocalDevice):\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.address())\ndef get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\ndef set_host_mode(self, mode: HostModeStr):\n\"\"\"Set host mode.\n        Args:\n            mode: host mode to use\n        Raises:\n            InvalidParamError: invalid host mode\n        \"\"\"\nif mode not in HOST_MODE:\nraise InvalidParamError(mode, HOST_MODE)\nself.setGridStyle(HOST_MODE[mode])\ndef get_host_mode(self) -&gt; HostModeStr:\n\"\"\"Return host mode.\n        Returns:\n            host mode\n        \"\"\"\nreturn HOST_MODE.inverse[self.gridStyle()]\ndef get_pairing_status(\nself, address: QtBluetooth.QBluetoothAddress | int | str\n) -&gt; PairingStr:\n\"\"\"Return pairing status.\n        Arguments:\n            address: bluetooth address\n        Returns:\n            pairing status\n        \"\"\"\nif isinstance(address, int | str):\naddress = QtBluetooth.QBluetoothAddress(address)\nreturn PAIRING.inverse[self.pairingStatus(address)]\ndef request_pairing(\nself, address: QtBluetooth.QBluetoothAddress | int | str, pairing: PairingStr\n):\nif isinstance(address, int | str):\naddress = QtBluetooth.QBluetoothAddress(address)\nself.requestPairing(address, PAIRING[pairing])\ndef get_connected_devices(self) -&gt; list[bluetooth.BluetoothAddress]:\nreturn [bluetooth.BluetoothAddress(i) for i in self.connectedDevices()]\n@classmethod\ndef get_all_devices(cls) -&gt; list[bluetooth.BluetoothHostInfo]:\nreturn [bluetooth.BluetoothHostInfo(i) for i in cls.allDevices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.address())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_all_devices","title":"<code>get_all_devices() -&gt; list[bluetooth.BluetoothHostInfo]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>@classmethod\ndef get_all_devices(cls) -&gt; list[bluetooth.BluetoothHostInfo]:\nreturn [bluetooth.BluetoothHostInfo(i) for i in cls.allDevices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_connected_devices","title":"<code>get_connected_devices() -&gt; list[bluetooth.BluetoothAddress]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_connected_devices(self) -&gt; list[bluetooth.BluetoothAddress]:\nreturn [bluetooth.BluetoothAddress(i) for i in self.connectedDevices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_host_mode","title":"<code>get_host_mode() -&gt; HostModeStr</code>","text":"<p>Return host mode.</p> <p>Returns:</p> Type Description <code>HostModeStr</code> <p>host mode</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_host_mode(self) -&gt; HostModeStr:\n\"\"\"Return host mode.\n    Returns:\n        host mode\n    \"\"\"\nreturn HOST_MODE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_pairing_status","title":"<code>get_pairing_status(address: QtBluetooth.QBluetoothAddress | int | str) -&gt; PairingStr</code>","text":"<p>Return pairing status.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>QtBluetooth.QBluetoothAddress | int | str</code> <p>bluetooth address</p> required <p>Returns:</p> Type Description <code>PairingStr</code> <p>pairing status</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_pairing_status(\nself, address: QtBluetooth.QBluetoothAddress | int | str\n) -&gt; PairingStr:\n\"\"\"Return pairing status.\n    Arguments:\n        address: bluetooth address\n    Returns:\n        pairing status\n    \"\"\"\nif isinstance(address, int | str):\naddress = QtBluetooth.QBluetoothAddress(address)\nreturn PAIRING.inverse[self.pairingStatus(address)]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.request_pairing","title":"<code>request_pairing(address: QtBluetooth.QBluetoothAddress | int | str, pairing: PairingStr)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def request_pairing(\nself, address: QtBluetooth.QBluetoothAddress | int | str, pairing: PairingStr\n):\nif isinstance(address, int | str):\naddress = QtBluetooth.QBluetoothAddress(address)\nself.requestPairing(address, PAIRING[pairing])\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.set_host_mode","title":"<code>set_host_mode(mode: HostModeStr)</code>","text":"<p>Set host mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>HostModeStr</code> <p>host mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid host mode</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def set_host_mode(self, mode: HostModeStr):\n\"\"\"Set host mode.\n    Args:\n        mode: host mode to use\n    Raises:\n        InvalidParamError: invalid host mode\n    \"\"\"\nif mode not in HOST_MODE:\nraise InvalidParamError(mode, HOST_MODE)\nself.setGridStyle(HOST_MODE[mode])\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothServer","title":"<code>BluetoothServer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtBluetooth.QBluetoothServer</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>class BluetoothServer(core.ObjectMixin, QtBluetooth.QBluetoothServer):\ndef __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| QtBluetooth.QBluetoothServiceInfo.Protocol,\nparent: QtCore.QObject | None = None,\n):\nif isinstance(protocol, str):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL[protocol]\nsuper().__init__(protocol, parent)\ndef get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\ndef get_server_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.serverType()]\ndef get_server_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.serverAddress())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.__init__","title":"<code>__init__(protocol: bluetooth.bluetoothserviceinfo.ProtocolStr | QtBluetooth.QBluetoothServiceInfo.Protocol, parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| QtBluetooth.QBluetoothServiceInfo.Protocol,\nparent: QtCore.QObject | None = None,\n):\nif isinstance(protocol, str):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL[protocol]\nsuper().__init__(protocol, parent)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_server_address","title":"<code>get_server_address() -&gt; bluetooth.BluetoothAddress</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_server_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.serverAddress())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_server_type","title":"<code>get_server_type() -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_server_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.serverType()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothServiceDiscoveryAgent","title":"<code>BluetoothServiceDiscoveryAgent</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtBluetooth.QBluetoothServiceDiscoveryAgent</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>class BluetoothServiceDiscoveryAgent(\ncore.ObjectMixin, QtBluetooth.QBluetoothServiceDiscoveryAgent\n):\ndef start_discovery(self, full: bool = False):\nif full:\nflag = QtBluetooth.QBluetoothServiceDiscoveryAgent.FullDiscovery\nelse:\nflag = QtBluetooth.QBluetoothServiceDiscoveryAgent.MinimalDiscovery\nself.start(flag)\ndef get_error(self) -&gt; str:\nreturn ERRORS.inverse[self.error()]\ndef set_remote_address(\nself, address: str | int | QtBluetooth.QBluetoothAddress\n) -&gt; bool:\naddress = bluetooth.BluetoothAddress(address)\nreturn self.setRemoteAddress(address)\ndef get_discovered_services(self) -&gt; list[bluetooth.BluetoothServiceInfo]:\nreturn [bluetooth.BluetoothServiceInfo(i) for i in self.discoveredServices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.get_discovered_services","title":"<code>get_discovered_services() -&gt; list[bluetooth.BluetoothServiceInfo]</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def get_discovered_services(self) -&gt; list[bluetooth.BluetoothServiceInfo]:\nreturn [bluetooth.BluetoothServiceInfo(i) for i in self.discoveredServices()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.get_error","title":"<code>get_error() -&gt; str</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def get_error(self) -&gt; str:\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.set_remote_address","title":"<code>set_remote_address(address: str | int | QtBluetooth.QBluetoothAddress) -&gt; bool</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def set_remote_address(\nself, address: str | int | QtBluetooth.QBluetoothAddress\n) -&gt; bool:\naddress = bluetooth.BluetoothAddress(address)\nreturn self.setRemoteAddress(address)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.start_discovery","title":"<code>start_discovery(full: bool = False)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def start_discovery(self, full: bool = False):\nif full:\nflag = QtBluetooth.QBluetoothServiceDiscoveryAgent.FullDiscovery\nelse:\nflag = QtBluetooth.QBluetoothServiceDiscoveryAgent.MinimalDiscovery\nself.start(flag)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothServiceInfo","title":"<code>BluetoothServiceInfo</code>","text":"<p>         Bases: <code>QtBluetooth.QBluetoothServiceInfo</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>class BluetoothServiceInfo(QtBluetooth.QBluetoothServiceInfo):\ndef __getitem__(self, value: str):\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.attribute(attr)\ndef __delitem__(self, value: str):\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.removeAttribute(attr)\ndef __setitem__(self, index: str, value):\nattr = ATTRIBUTE_IDS.inverse[index]\nreturn self.setAttribute(attr, value)\ndef __contains__(self, value: int) -&gt; bool:\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.contains(attr)\ndef __iter__(self):\nreturn iter(self.attributes())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__contains__","title":"<code>__contains__(value: int) -&gt; bool</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __contains__(self, value: int) -&gt; bool:\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.contains(attr)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__delitem__","title":"<code>__delitem__(value: str)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __delitem__(self, value: str):\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.removeAttribute(attr)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__getitem__","title":"<code>__getitem__(value: str)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __getitem__(self, value: str):\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.attribute(attr)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __iter__(self):\nreturn iter(self.attributes())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __setitem__(self, index: str, value):\nattr = ATTRIBUTE_IDS.inverse[index]\nreturn self.setAttribute(attr, value)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothSocket","title":"<code>BluetoothSocket</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code>, <code>QtBluetooth.QBluetoothSocket</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>class BluetoothSocket(core.IODeviceMixin, QtBluetooth.QBluetoothSocket):\ndef __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| QtBluetooth.QBluetoothServiceInfo.Protocol,\nparent: QtCore.QObject | None = None,\n):\nif isinstance(protocol, str):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL[protocol]\nsuper().__init__(protocol, parent)\ndef get_error(self) -&gt; SocketErrorStr:\nreturn SOCKET_ERROR.inverse[self.error()]\ndef get_state(self) -&gt; SocketStateStr:\nreturn SOCKET_STATE.inverse[self.state()]\ndef get_local_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.localAddress())\ndef get_peer_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.peerAddress())\ndef get_socket_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.socketType()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothsocket.BluetoothSocket.__init__","title":"<code>__init__(protocol: bluetooth.bluetoothserviceinfo.ProtocolStr | QtBluetooth.QBluetoothServiceInfo.Protocol, parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>def __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| QtBluetooth.QBluetoothServiceInfo.Protocol,\nparent: QtCore.QObject | None = None,\n):\nif isinstance(protocol, str):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL[protocol]\nsuper().__init__(protocol, parent)\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothsocket.BluetoothSocket.get_error","title":"<code>get_error() -&gt; SocketErrorStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>def get_error(self) -&gt; SocketErrorStr:\nreturn SOCKET_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothsocket.BluetoothSocket.get_local_address","title":"<code>get_local_address() -&gt; bluetooth.BluetoothAddress</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>def get_local_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.localAddress())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothsocket.BluetoothSocket.get_peer_address","title":"<code>get_peer_address() -&gt; bluetooth.BluetoothAddress</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>def get_peer_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.peerAddress())\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothsocket.BluetoothSocket.get_socket_type","title":"<code>get_socket_type() -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>def get_socket_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.socketType()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.bluetoothsocket.BluetoothSocket.get_state","title":"<code>get_state() -&gt; SocketStateStr</code>","text":"Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>def get_state(self) -&gt; SocketStateStr:\nreturn SOCKET_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/bluetooth.html#prettyqt.bluetooth.BluetoothUuid","title":"<code>BluetoothUuid</code>","text":"<p>         Bases: <code>core.UuidMixin</code>, <code>QtBluetooth.QBluetoothUuid</code></p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>class BluetoothUuid(core.UuidMixin, QtBluetooth.QBluetoothUuid):\npass\n</code></pre>"},{"location":"api/charts.html","title":"charts module","text":"<p>Charts module.</p>"},{"location":"api/charts.html#prettyqt.charts.__all__","title":"<code>__all__ = ['BarSet', 'BoxSet', 'CandlestickSet', 'PieSlice', 'Legend', 'AbstractSeries', 'AbstractSeriesMixin', 'AbstractBarSeries', 'AbstractBarSeriesMixin', 'BarSeries', 'PercentBarSeries', 'HorizontalBarSeries', 'HorizontalPercentBarSeries', 'StackedBarSeries', 'HorizontalStackedBarSeries', 'XYSeries', 'XYSeriesMixin', 'AbstractAxis', 'AbstractAxisMixin', 'ValueAxis', 'ValueAxisMixin', 'DateTimeAxis', 'CategoryAxis', 'LogValueAxis', 'BarCategoryAxis', 'ChartView', 'Chart', 'ChartMixin', 'PolarChart', 'LineSeries', 'ScatterSeries']</code>  <code>module-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.AbstractAxis","title":"<code>AbstractAxis</code>","text":"<p>         Bases: <code>AbstractAxisMixin</code>, <code>QtCharts.QAbstractAxis</code></p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>class AbstractAxis(AbstractAxisMixin, QtCharts.QAbstractAxis):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.AbstractAxisMixin","title":"<code>AbstractAxisMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>class AbstractAxisMixin(core.ObjectMixin):\ndef get_alignment(self) -&gt; constants.SideStr | None:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nalignment = self.alignment()\nif alignment == constants.ALIGN_NONE:\nreturn None\nreturn constants.SIDES.inverse[alignment]\ndef get_orientation(self) -&gt; constants.OrientationStr | None:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\norientation = self.orientation()\nif orientation == constants.ORIENTATION_NONE:\nreturn None\nreturn constants.ORIENTATION.inverse[orientation]\ndef get_grid_line_color(self) -&gt; gui.Color:\nreturn gui.Color(self.gridLineColor())\ndef get_grid_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.gridLinePen())\ndef get_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.linePen())\ndef get_line_pen_color(self) -&gt; gui.Color:\nreturn gui.Color(self.linePenColor())\ndef get_labels_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelsColor())\ndef get_labels_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.labelsBrush())\ndef get_labels_font(self) -&gt; gui.Font:\nreturn gui.Font(self.labelsFont())\ndef get_title_font(self) -&gt; gui.Font:\nreturn gui.Font(self.titleFont())\ndef get_title_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.titleBrush())\ndef get_shades_color(self) -&gt; gui.Color:\nreturn gui.Color(self.shadesColor())\ndef get_shades_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.shadesBrush())\ndef get_shades_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.shadesPen())\ndef get_shades_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.shadesBorderColor())\ndef get_minor_grid_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.minorGridLinePen())\ndef get_minor_grid_line_color(self) -&gt; gui.Color:\nreturn gui.Color(self.minorGridLineColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_alignment","title":"<code>get_alignment() -&gt; constants.SideStr | None</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.SideStr | None</code> <p>alignment</p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_alignment(self) -&gt; constants.SideStr | None:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nalignment = self.alignment()\nif alignment == constants.ALIGN_NONE:\nreturn None\nreturn constants.SIDES.inverse[alignment]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_grid_line_color","title":"<code>get_grid_line_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_grid_line_color(self) -&gt; gui.Color:\nreturn gui.Color(self.gridLineColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_grid_line_pen","title":"<code>get_grid_line_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_grid_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.gridLinePen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_labels_brush","title":"<code>get_labels_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_labels_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.labelsBrush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_labels_color","title":"<code>get_labels_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_labels_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelsColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_labels_font","title":"<code>get_labels_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_labels_font(self) -&gt; gui.Font:\nreturn gui.Font(self.labelsFont())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_line_pen","title":"<code>get_line_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.linePen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_line_pen_color","title":"<code>get_line_pen_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_line_pen_color(self) -&gt; gui.Color:\nreturn gui.Color(self.linePenColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_minor_grid_line_color","title":"<code>get_minor_grid_line_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_minor_grid_line_color(self) -&gt; gui.Color:\nreturn gui.Color(self.minorGridLineColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_minor_grid_line_pen","title":"<code>get_minor_grid_line_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_minor_grid_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.minorGridLinePen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr | None</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr | None</code> <p>orientation</p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr | None:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\norientation = self.orientation()\nif orientation == constants.ORIENTATION_NONE:\nreturn None\nreturn constants.ORIENTATION.inverse[orientation]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_shades_border_color","title":"<code>get_shades_border_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_shades_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.shadesBorderColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_shades_brush","title":"<code>get_shades_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_shades_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.shadesBrush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_shades_color","title":"<code>get_shades_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_shades_color(self) -&gt; gui.Color:\nreturn gui.Color(self.shadesColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_shades_pen","title":"<code>get_shades_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_shades_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.shadesPen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_title_brush","title":"<code>get_title_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_title_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.titleBrush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_title_font","title":"<code>get_title_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_title_font(self) -&gt; gui.Font:\nreturn gui.Font(self.titleFont())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.AbstractBarSeries","title":"<code>AbstractBarSeries</code>","text":"<p>         Bases: <code>AbstractBarSeriesMixin</code>, <code>QtCharts.QAbstractBarSeries</code></p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>class AbstractBarSeries(AbstractBarSeriesMixin, QtCharts.QAbstractBarSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.AbstractBarSeriesMixin","title":"<code>AbstractBarSeriesMixin</code>","text":"<p>         Bases: <code>charts.AbstractSeriesMixin</code></p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>class AbstractBarSeriesMixin(charts.AbstractSeriesMixin):\ndef __delitem__(self, index: int):\nbarsets = self.barSets()\nself.remove(barsets[index])\ndef __getitem__(self, index: int) -&gt; QtCharts.QBarSet:\nbarsets = self.barSets()\nreturn barsets[index]\ndef set_labels_position(self, position: LabelsPositionStr):\n\"\"\"Set the labels position.\n        Args:\n            position: labels position\n        Raises:\n            InvalidParamError: labels position does not exist\n        \"\"\"\nif position not in LABELS_POSITIONS:\nraise InvalidParamError(position, LABELS_POSITIONS)\nself.setLabelsPosition(LABELS_POSITIONS[position])\ndef get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n        Returns:\n            labels position\n        \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def __delitem__(self, index: int):\nbarsets = self.barSets()\nself.remove(barsets[index])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtCharts.QBarSet</code>","text":"Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtCharts.QBarSet:\nbarsets = self.barSets()\nreturn barsets[index]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.get_labels_position","title":"<code>get_labels_position() -&gt; LabelsPositionStr</code>","text":"<p>Return current labels position.</p> <p>Returns:</p> Type Description <code>LabelsPositionStr</code> <p>labels position</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n    Returns:\n        labels position\n    \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.set_labels_position","title":"<code>set_labels_position(position: LabelsPositionStr)</code>","text":"<p>Set the labels position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelsPositionStr</code> <p>labels position</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>labels position does not exist</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def set_labels_position(self, position: LabelsPositionStr):\n\"\"\"Set the labels position.\n    Args:\n        position: labels position\n    Raises:\n        InvalidParamError: labels position does not exist\n    \"\"\"\nif position not in LABELS_POSITIONS:\nraise InvalidParamError(position, LABELS_POSITIONS)\nself.setLabelsPosition(LABELS_POSITIONS[position])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.AbstractSeries","title":"<code>AbstractSeries</code>","text":"<p>         Bases: <code>AbstractSeriesMixin</code>, <code>QtCharts.QAbstractSeries</code></p> Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>class AbstractSeries(AbstractSeriesMixin, QtCharts.QAbstractSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.AbstractSeriesMixin","title":"<code>AbstractSeriesMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> <p>QAbstractSeries with some custom properties.</p> Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>class AbstractSeriesMixin(core.ObjectMixin):\n\"\"\"QAbstractSeries with some custom properties.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._group = \"\"\ndef get_group(self):\nreturn self._group\ndef set_group(self, value):\nself._group = value\ngroup = core.Property(str, get_group, set_group)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractseries.AbstractSeriesMixin.group","title":"<code>group = core.Property(str, get_group, set_group)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.abstractseries.AbstractSeriesMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._group = \"\"\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractseries.AbstractSeriesMixin.get_group","title":"<code>get_group()</code>","text":"Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>def get_group(self):\nreturn self._group\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.abstractseries.AbstractSeriesMixin.set_group","title":"<code>set_group(value)</code>","text":"Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>def set_group(self, value):\nself._group = value\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BarCategoryAxis","title":"<code>BarCategoryAxis</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code>, <code>QtCharts.QBarCategoryAxis</code></p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>class BarCategoryAxis(charts.AbstractAxisMixin, QtCharts.QBarCategoryAxis):\ndef __delitem__(self, index: str):\nself.remove(index)\ndef __getitem__(self, index: int) -&gt; str:\nreturn self.categories()[index]\ndef __setitem__(self, index: str, value: str):\nself.replace(index, value)\ndef __add__(self, other: str) -&gt; BarCategoryAxis:\nself.append(other)\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__add__","title":"<code>__add__(other: str) -&gt; BarCategoryAxis</code>","text":"Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __add__(self, other: str) -&gt; BarCategoryAxis:\nself.append(other)\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __delitem__(self, index: str):\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__getitem__","title":"<code>__getitem__(index: int) -&gt; str</code>","text":"Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __getitem__(self, index: int) -&gt; str:\nreturn self.categories()[index]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __setitem__(self, index: str, value: str):\nself.replace(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BarSeries","title":"<code>BarSeries</code>","text":"<p>         Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>QtCharts.QBarSeries</code></p> Source code in <code>prettyqt\\charts\\barseries.py</code> <pre><code>class BarSeries(charts.AbstractBarSeriesMixin, QtCharts.QBarSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BarSet","title":"<code>BarSet</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QBarSet</code></p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>class BarSet(core.ObjectMixin, QtCharts.QBarSet):\ndef __delitem__(self, index: int):\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.remove(index)\ndef __getitem__(self, index: int) -&gt; float:\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nreturn self.at(index)\ndef __setitem__(self, index: int, value: float):\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.replace(index, value)\ndef __repr__(self):\nreturn get_repr(self, self.label())\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __delitem__(self, index: int):\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__getitem__","title":"<code>__getitem__(index: int) -&gt; float</code>","text":"Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __getitem__(self, index: int) -&gt; float:\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nreturn self.at(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.label())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.__setitem__","title":"<code>__setitem__(index: int, value: float)</code>","text":"Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __setitem__(self, index: int, value: float):\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.replace(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.get_brush","title":"<code>get_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.barset.BarSet.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.BoxSet","title":"<code>BoxSet</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QBoxSet</code></p> Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>class BoxSet(core.ObjectMixin, QtCharts.QBoxSet):\ndef __repr__(self):\nreturn get_repr(\nself,\nself[\"lower_extreme\"],\nself[\"lower_quartile\"],\nself[\"median\"],\nself[\"upper_quartile\"],\nself[\"upper_extreme\"],\nself.label(),\n)\ndef __getitem__(self, index: int | ValuePositionStr) -&gt; float:\nval = VALUE_POSITION[index] if isinstance(index, str) else index\nif not (0 &lt;= val.value &lt;= 4):\nraise KeyError(val)\nreturn self.at(val.value)\ndef __setitem__(self, index: int | ValuePositionStr, value: int):\nval = VALUE_POSITION[index] if isinstance(index, str) else index\nif not (0 &lt;= val.value &lt;= 4):\nraise KeyError(val)\nself.setValue(val.value, value)\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.__getitem__","title":"<code>__getitem__(index: int | ValuePositionStr) -&gt; float</code>","text":"Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __getitem__(self, index: int | ValuePositionStr) -&gt; float:\nval = VALUE_POSITION[index] if isinstance(index, str) else index\nif not (0 &lt;= val.value &lt;= 4):\nraise KeyError(val)\nreturn self.at(val.value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself,\nself[\"lower_extreme\"],\nself[\"lower_quartile\"],\nself[\"median\"],\nself[\"upper_quartile\"],\nself[\"upper_extreme\"],\nself.label(),\n)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.__setitem__","title":"<code>__setitem__(index: int | ValuePositionStr, value: int)</code>","text":"Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __setitem__(self, index: int | ValuePositionStr, value: int):\nval = VALUE_POSITION[index] if isinstance(index, str) else index\nif not (0 &lt;= val.value &lt;= 4):\nraise KeyError(val)\nself.setValue(val.value, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.get_brush","title":"<code>get_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.boxset.BoxSet.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.CandlestickSet","title":"<code>CandlestickSet</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QCandlestickSet</code></p> Source code in <code>prettyqt\\charts\\candlestickset.py</code> <pre><code>class CandlestickSet(core.ObjectMixin, QtCharts.QCandlestickSet):\ndef __repr__(self):\nreturn get_repr(\nself, self.open(), self.high(), self.low(), self.close(), self.timestamp()\n)\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.candlestickset.CandlestickSet.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\charts\\candlestickset.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself, self.open(), self.high(), self.low(), self.close(), self.timestamp()\n)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.candlestickset.CandlestickSet.get_brush","title":"<code>get_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\candlestickset.py</code> <pre><code>def get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.candlestickset.CandlestickSet.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\candlestickset.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.CategoryAxis","title":"<code>CategoryAxis</code>","text":"<p>         Bases: <code>charts.ValueAxisMixin</code>, <code>QtCharts.QCategoryAxis</code></p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>class CategoryAxis(charts.ValueAxisMixin, QtCharts.QCategoryAxis):\ndef __delitem__(self, index: str):\nself.remove(index)\ndef __getitem__(self, label: int | slice) -&gt; str | list[str]:\nreturn self.categoriesLabels()[label]\ndef __setitem__(self, index: str, value: str):\nself.replaceLabel(index, value)\ndef __iter__(self) -&gt; Iterator[str]:\nreturn iter(self.categoriesLabels())\ndef __add__(self, other: tuple[str, int]) -&gt; CategoryAxis:\nself.append(*other)\nreturn self\ndef __len__(self):\n# needed for PySide6\nreturn self.count()\ndef set_labels_position(self, position: LabelsPositionStr):\n\"\"\"Set the labels position.\n        Args:\n            position: labels position\n        Raises:\n            InvalidParamError: labels position does not exist\n        \"\"\"\nif position not in LABELS_POSITIONS:\nraise InvalidParamError(position, LABELS_POSITIONS)\nself.setLabelsPosition(LABELS_POSITIONS[position])\ndef get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n        Returns:\n            labels position\n        \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__add__","title":"<code>__add__(other: tuple[str, int]) -&gt; CategoryAxis</code>","text":"Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __add__(self, other: tuple[str, int]) -&gt; CategoryAxis:\nself.append(*other)\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __delitem__(self, index: str):\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__getitem__","title":"<code>__getitem__(label: int | slice) -&gt; str | list[str]</code>","text":"Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __getitem__(self, label: int | slice) -&gt; str | list[str]:\nreturn self.categoriesLabels()[label]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__iter__","title":"<code>__iter__() -&gt; Iterator[str]</code>","text":"Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __iter__(self) -&gt; Iterator[str]:\nreturn iter(self.categoriesLabels())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __len__(self):\n# needed for PySide6\nreturn self.count()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __setitem__(self, index: str, value: str):\nself.replaceLabel(index, value)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.get_labels_position","title":"<code>get_labels_position() -&gt; LabelsPositionStr</code>","text":"<p>Return current labels position.</p> <p>Returns:</p> Type Description <code>LabelsPositionStr</code> <p>labels position</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n    Returns:\n        labels position\n    \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.categoryaxis.CategoryAxis.set_labels_position","title":"<code>set_labels_position(position: LabelsPositionStr)</code>","text":"<p>Set the labels position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelsPositionStr</code> <p>labels position</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>labels position does not exist</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def set_labels_position(self, position: LabelsPositionStr):\n\"\"\"Set the labels position.\n    Args:\n        position: labels position\n    Raises:\n        InvalidParamError: labels position does not exist\n    \"\"\"\nif position not in LABELS_POSITIONS:\nraise InvalidParamError(position, LABELS_POSITIONS)\nself.setLabelsPosition(LABELS_POSITIONS[position])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.Chart","title":"<code>Chart</code>","text":"<p>         Bases: <code>ChartMixin</code>, <code>QtCharts.QChart</code></p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>class Chart(ChartMixin, QtCharts.QChart):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ChartMixin","title":"<code>ChartMixin</code>","text":"<p>         Bases: <code>widgets.GraphicsWidgetMixin</code></p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>class ChartMixin(widgets.GraphicsWidgetMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.max_x = 0\nself.max_y = 0\nself.min_x = 0\nself.min_y = 0\nself.adjust_style_to_palette()\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\ndef adjust_style_to_palette(self):\npal = gui.GuiApplication.get_palette()\nstyle = \"Dark\" if pal.is_dark() else \"Light\"\nself.set_theme(style)\ndef get_axes(\nself,\norientation: constants.OrientationStr | None = None,\nseries: QtCharts.QAbstractBarSeries | None = None,\n) -&gt; list[QtCharts.QAbstractAxis]:\nif orientation is None:\norientation = constants.HORIZONTAL | constants.VERTICAL\nreturn self.axes(constants.ORIENTATION[orientation], series)\ndef update_boundaries(self):\n\"\"\"Set new min/max values based on axis.\"\"\"\nif axis_x := self.get_axes(\"horizontal\"):\nself.max_x = axis_x[0].max()\nself.min_x = axis_x[0].min()\nif axis_y := self.get_axes(\"vertical\"):\nself.max_y = axis_y[0].max()\nself.min_y = axis_y[0].min()\ndef hide_legend(self):\nself.legend().hide()\ndef show_legend(self):\nself.legend().show()\ndef get_legend(self) -&gt; charts.Legend:\nreturn charts.Legend(self.legend())\ndef set_legend_alignment(self, alignment: constants.SideStr):\nif alignment not in constants.SIDES:\nraise InvalidParamError(alignment, constants.SIDES)\nself.legend().setAlignment(constants.SIDES[alignment])\ndef set_theme(self, theme_name: ThemeStr):\nself.setTheme(THEMES[theme_name])\ndef set_margins(self, margins: datatypes.MarginsType):\nif isinstance(margins, tuple):\nmargins = QtCore.QMargins(*margins)\nself.setMargins(margins)\ndef set_animation_options(self, option: AnimationOptionStr):\nself.setAnimationOptions(ANIMATION_OPTIONS[option])\ndef apply_nice_numbers(self):\n\"\"\"Adjust both axis to display nice round numbers.\"\"\"\nfor axis in self.get_axes():\naxis.applyNiceNumbers()\ndef zoom_by_factor(self, factor: float):\n\"\"\"Zoom in/out by factor (1.0 = no change).\n        Make sure that we dont zoom out too far\n        \"\"\"\nself.zoom(factor)\nif axis_x := self.get_axes(\"horizontal\"):\nif axis_x[0].min() &lt; self.min_x:\naxis_x[0].setMin(self.min_x)\nif axis_x[0].max() &gt; self.max_x:\naxis_x[0].setMax(self.max_x)\nif axis_y := self.get_axes(\"vertical\"):\nif axis_y[0].max() &gt; self.max_y:\naxis_y[0].setMax(self.max_y)\n# always bottom-align when zooming for now. should perhaps become optional.\n# if axis_y[0].min() &lt; self.min_y:\naxis_y[0].setMin(max(0, self.min_y))\ndef get_chart_type(self) -&gt; ChartTypeStr:\nreturn CHART_TYPES.inverse[self.chartType()]\ndef get_margins(self) -&gt; core.Margins:\nreturn core.Margins(self.margins())\ndef get_plot_area(self) -&gt; core.RectF:\nreturn core.RectF(self.plotArea())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_theme(self) -&gt; ThemeStr:\nreturn THEMES.inverse[self.theme()]\ndef get_animation_options(self) -&gt; list[AnimationOptionStr]:\nreturn ANIMATION_OPTIONS.get_list(self.animationOptions())\ndef get_animation_easing_curve(self) -&gt; core.EasingCurve:\nreturn core.EasingCurve(self.animationEasingCurve())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.max_x","title":"<code>max_x = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.max_y","title":"<code>max_y = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.min_x","title":"<code>min_x = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.min_y","title":"<code>min_y = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.max_x = 0\nself.max_y = 0\nself.min_x = 0\nself.min_y = 0\nself.adjust_style_to_palette()\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.adjust_style_to_palette","title":"<code>adjust_style_to_palette()</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def adjust_style_to_palette(self):\npal = gui.GuiApplication.get_palette()\nstyle = \"Dark\" if pal.is_dark() else \"Light\"\nself.set_theme(style)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.apply_nice_numbers","title":"<code>apply_nice_numbers()</code>","text":"<p>Adjust both axis to display nice round numbers.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def apply_nice_numbers(self):\n\"\"\"Adjust both axis to display nice round numbers.\"\"\"\nfor axis in self.get_axes():\naxis.applyNiceNumbers()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_animation_easing_curve","title":"<code>get_animation_easing_curve() -&gt; core.EasingCurve</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_animation_easing_curve(self) -&gt; core.EasingCurve:\nreturn core.EasingCurve(self.animationEasingCurve())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_animation_options","title":"<code>get_animation_options() -&gt; list[AnimationOptionStr]</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_animation_options(self) -&gt; list[AnimationOptionStr]:\nreturn ANIMATION_OPTIONS.get_list(self.animationOptions())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_axes","title":"<code>get_axes(orientation: constants.OrientationStr | None = None, series: QtCharts.QAbstractBarSeries | None = None) -&gt; list[QtCharts.QAbstractAxis]</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_axes(\nself,\norientation: constants.OrientationStr | None = None,\nseries: QtCharts.QAbstractBarSeries | None = None,\n) -&gt; list[QtCharts.QAbstractAxis]:\nif orientation is None:\norientation = constants.HORIZONTAL | constants.VERTICAL\nreturn self.axes(constants.ORIENTATION[orientation], series)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_chart_type","title":"<code>get_chart_type() -&gt; ChartTypeStr</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_chart_type(self) -&gt; ChartTypeStr:\nreturn CHART_TYPES.inverse[self.chartType()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_legend","title":"<code>get_legend() -&gt; charts.Legend</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_legend(self) -&gt; charts.Legend:\nreturn charts.Legend(self.legend())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_margins","title":"<code>get_margins() -&gt; core.Margins</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_margins(self) -&gt; core.Margins:\nreturn core.Margins(self.margins())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_plot_area","title":"<code>get_plot_area() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_plot_area(self) -&gt; core.RectF:\nreturn core.RectF(self.plotArea())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.get_theme","title":"<code>get_theme() -&gt; ThemeStr</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_theme(self) -&gt; ThemeStr:\nreturn THEMES.inverse[self.theme()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.hide_legend","title":"<code>hide_legend()</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def hide_legend(self):\nself.legend().hide()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.set_animation_options","title":"<code>set_animation_options(option: AnimationOptionStr)</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def set_animation_options(self, option: AnimationOptionStr):\nself.setAnimationOptions(ANIMATION_OPTIONS[option])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.set_legend_alignment","title":"<code>set_legend_alignment(alignment: constants.SideStr)</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def set_legend_alignment(self, alignment: constants.SideStr):\nif alignment not in constants.SIDES:\nraise InvalidParamError(alignment, constants.SIDES)\nself.legend().setAlignment(constants.SIDES[alignment])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.set_margins","title":"<code>set_margins(margins: datatypes.MarginsType)</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def set_margins(self, margins: datatypes.MarginsType):\nif isinstance(margins, tuple):\nmargins = QtCore.QMargins(*margins)\nself.setMargins(margins)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.set_theme","title":"<code>set_theme(theme_name: ThemeStr)</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def set_theme(self, theme_name: ThemeStr):\nself.setTheme(THEMES[theme_name])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.show_legend","title":"<code>show_legend()</code>","text":"Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def show_legend(self):\nself.legend().show()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.update_boundaries","title":"<code>update_boundaries()</code>","text":"<p>Set new min/max values based on axis.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def update_boundaries(self):\n\"\"\"Set new min/max values based on axis.\"\"\"\nif axis_x := self.get_axes(\"horizontal\"):\nself.max_x = axis_x[0].max()\nself.min_x = axis_x[0].min()\nif axis_y := self.get_axes(\"vertical\"):\nself.max_y = axis_y[0].max()\nself.min_y = axis_y[0].min()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chart.ChartMixin.zoom_by_factor","title":"<code>zoom_by_factor(factor: float)</code>","text":"<p>Zoom in/out by factor (1.0 = no change).</p> <p>Make sure that we dont zoom out too far</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def zoom_by_factor(self, factor: float):\n\"\"\"Zoom in/out by factor (1.0 = no change).\n    Make sure that we dont zoom out too far\n    \"\"\"\nself.zoom(factor)\nif axis_x := self.get_axes(\"horizontal\"):\nif axis_x[0].min() &lt; self.min_x:\naxis_x[0].setMin(self.min_x)\nif axis_x[0].max() &gt; self.max_x:\naxis_x[0].setMax(self.max_x)\nif axis_y := self.get_axes(\"vertical\"):\nif axis_y[0].max() &gt; self.max_y:\naxis_y[0].setMax(self.max_y)\n# always bottom-align when zooming for now. should perhaps become optional.\n# if axis_y[0].min() &lt; self.min_y:\naxis_y[0].setMin(max(0, self.min_y))\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ChartView","title":"<code>ChartView</code>","text":"<p>         Bases: <code>widgets.GraphicsViewMixin</code>, <code>QtCharts.QChartView</code></p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>class ChartView(widgets.GraphicsViewMixin, QtCharts.QChartView):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], QtCharts.QChart):\nself.setChart(charts.Chart())\nself.setRenderHint(gui.Painter.RenderHint.Antialiasing)\nself.set_rubber_band(\"rectangle\")\n# self.setDragMode(self.RubberBandDrag)\ndef keyPressEvent(self, event: QtGui.QKeyEvent):\n\"\"\"Handle keypress events to allow navigation via keyboard.\"\"\"\nmatch event.key():\ncase QtCore.Qt.Key.Key_Escape:\nself.chart().zoomReset()\ncase QtCore.Qt.Key.Key_Plus:\nself.chart().zoom_by_factor(ZOOM_IN_FACTOR)\ncase QtCore.Qt.Key.Key_Minus:\nself.chart().zoom_by_factor(ZOOM_OUT_FACTOR)\ncase QtCore.Qt.Key.Key_Left:\nself.chart().scroll(-SCROLL_STEP_SIZE, 0)\ncase QtCore.Qt.Key.Key_Right:\nself.chart().scroll(SCROLL_STEP_SIZE, 0)\ncase QtCore.Qt.Key.Key_Up:\nself.chart().scroll(0, SCROLL_STEP_SIZE)\ncase QtCore.Qt.Key.Key_Down:\nself.chart().scroll(0, -SCROLL_STEP_SIZE)\ncase QtCore.Qt.Key.Key_0:\nself.chart().apply_nice_numbers()\ncase _:\nsuper().keyPressEvent(event)\nreturn\nevent.accept()\ndef wheelEvent(self, event: QtGui.QWheelEvent):\n\"\"\"Handle wheel event for zooming.\"\"\"\nfct = ZOOM_IN_FACTOR if event.angleDelta().y() &gt; 0 else ZOOM_OUT_FACTOR\nself.chart().zoom_by_factor(fct)\nevent.accept()\ndef mouseReleaseEvent(self, event: QtGui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == QtCore.Qt.MouseButton.RightButton:\nwidgets.Application.restoreOverrideCursor()\nevent.accept()\nreturn\nsuper().mouseReleaseEvent(event)\ndef mousePressEvent(self, event: QtGui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == QtCore.Qt.MouseButton.RightButton:\nwidgets.Application.set_override_cursor(\"size_all\")\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mousePressEvent(event)\ndef mouseMoveEvent(self, event: QtGui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\n# pan the chart with a middle mouse drag\nif event.buttons() &amp; QtCore.Qt.MouseButton.RightButton:  # type: ignore\nif not self.last_mouse_pos:\nreturn\npos_diff = event.position() - self.last_mouse_pos\nself.chart().scroll(-pos_diff.x(), pos_diff.y())\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mouseMoveEvent(event)\n@core.Slot()\ndef save_as_image(self):\n\"\"\"Let user choose folder and save chart as an image file.\"\"\"\ndlg = widgets.FileDialog(mode=\"save\", caption=\"Save image\")\nfilters = {\"Bmp files\": [\".bmp\"], \"Jpeg files\": [\".jpg\"], \"Png files\": [\".png\"]}\ndlg.set_extension_filter(filters)\nfilename = dlg.open_file()\nif not filename:\nreturn\nself.chart().show_legend()\nimage = self.get_image()\nimage.save(str(filename[0]))\nself.chart().hide_legend()\ndef set_rubber_band(self, typ: RubberBandStr):\n\"\"\"Set the rubber band type.\n        Args:\n            typ: rubber band type\n        Raises:\n            InvalidParamError: rubber band type does not exist\n        \"\"\"\nif typ not in RUBBER_BAND:\nraise InvalidParamError(typ, RUBBER_BAND)\nself.setRubberBand(RUBBER_BAND[typ])\ndef get_rubber_band(self) -&gt; RubberBandStr:\n\"\"\"Return current rubber band type.\n        Returns:\n            Rubber band type\n        \"\"\"\nreturn RUBBER_BAND.inverse[self.rubberBand()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], QtCharts.QChart):\nself.setChart(charts.Chart())\nself.setRenderHint(gui.Painter.RenderHint.Antialiasing)\nself.set_rubber_band(\"rectangle\")\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.get_rubber_band","title":"<code>get_rubber_band() -&gt; RubberBandStr</code>","text":"<p>Return current rubber band type.</p> <p>Returns:</p> Type Description <code>RubberBandStr</code> <p>Rubber band type</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def get_rubber_band(self) -&gt; RubberBandStr:\n\"\"\"Return current rubber band type.\n    Returns:\n        Rubber band type\n    \"\"\"\nreturn RUBBER_BAND.inverse[self.rubberBand()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.keyPressEvent","title":"<code>keyPressEvent(event: QtGui.QKeyEvent)</code>","text":"<p>Handle keypress events to allow navigation via keyboard.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def keyPressEvent(self, event: QtGui.QKeyEvent):\n\"\"\"Handle keypress events to allow navigation via keyboard.\"\"\"\nmatch event.key():\ncase QtCore.Qt.Key.Key_Escape:\nself.chart().zoomReset()\ncase QtCore.Qt.Key.Key_Plus:\nself.chart().zoom_by_factor(ZOOM_IN_FACTOR)\ncase QtCore.Qt.Key.Key_Minus:\nself.chart().zoom_by_factor(ZOOM_OUT_FACTOR)\ncase QtCore.Qt.Key.Key_Left:\nself.chart().scroll(-SCROLL_STEP_SIZE, 0)\ncase QtCore.Qt.Key.Key_Right:\nself.chart().scroll(SCROLL_STEP_SIZE, 0)\ncase QtCore.Qt.Key.Key_Up:\nself.chart().scroll(0, SCROLL_STEP_SIZE)\ncase QtCore.Qt.Key.Key_Down:\nself.chart().scroll(0, -SCROLL_STEP_SIZE)\ncase QtCore.Qt.Key.Key_0:\nself.chart().apply_nice_numbers()\ncase _:\nsuper().keyPressEvent(event)\nreturn\nevent.accept()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.mouseMoveEvent","title":"<code>mouseMoveEvent(event: QtGui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mouseMoveEvent(self, event: QtGui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\n# pan the chart with a middle mouse drag\nif event.buttons() &amp; QtCore.Qt.MouseButton.RightButton:  # type: ignore\nif not self.last_mouse_pos:\nreturn\npos_diff = event.position() - self.last_mouse_pos\nself.chart().scroll(-pos_diff.x(), pos_diff.y())\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mouseMoveEvent(event)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.mousePressEvent","title":"<code>mousePressEvent(event: QtGui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mousePressEvent(self, event: QtGui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == QtCore.Qt.MouseButton.RightButton:\nwidgets.Application.set_override_cursor(\"size_all\")\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mousePressEvent(event)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event: QtGui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mouseReleaseEvent(self, event: QtGui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == QtCore.Qt.MouseButton.RightButton:\nwidgets.Application.restoreOverrideCursor()\nevent.accept()\nreturn\nsuper().mouseReleaseEvent(event)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.save_as_image","title":"<code>save_as_image()</code>","text":"<p>Let user choose folder and save chart as an image file.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>@core.Slot()\ndef save_as_image(self):\n\"\"\"Let user choose folder and save chart as an image file.\"\"\"\ndlg = widgets.FileDialog(mode=\"save\", caption=\"Save image\")\nfilters = {\"Bmp files\": [\".bmp\"], \"Jpeg files\": [\".jpg\"], \"Png files\": [\".png\"]}\ndlg.set_extension_filter(filters)\nfilename = dlg.open_file()\nif not filename:\nreturn\nself.chart().show_legend()\nimage = self.get_image()\nimage.save(str(filename[0]))\nself.chart().hide_legend()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.set_rubber_band","title":"<code>set_rubber_band(typ: RubberBandStr)</code>","text":"<p>Set the rubber band type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>RubberBandStr</code> <p>rubber band type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>rubber band type does not exist</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def set_rubber_band(self, typ: RubberBandStr):\n\"\"\"Set the rubber band type.\n    Args:\n        typ: rubber band type\n    Raises:\n        InvalidParamError: rubber band type does not exist\n    \"\"\"\nif typ not in RUBBER_BAND:\nraise InvalidParamError(typ, RUBBER_BAND)\nself.setRubberBand(RUBBER_BAND[typ])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.chartview.ChartView.wheelEvent","title":"<code>wheelEvent(event: QtGui.QWheelEvent)</code>","text":"<p>Handle wheel event for zooming.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def wheelEvent(self, event: QtGui.QWheelEvent):\n\"\"\"Handle wheel event for zooming.\"\"\"\nfct = ZOOM_IN_FACTOR if event.angleDelta().y() &gt; 0 else ZOOM_OUT_FACTOR\nself.chart().zoom_by_factor(fct)\nevent.accept()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.DateTimeAxis","title":"<code>DateTimeAxis</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code>, <code>QtCharts.QDateTimeAxis</code></p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>class DateTimeAxis(charts.AbstractAxisMixin, QtCharts.QDateTimeAxis):\ndef get_min(self) -&gt; datetime.datetime:\nreturn self.min().toPython()\ndef get_max(self) -&gt; datetime.datetime:\nreturn self.max().toPython()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.datetimeaxis.DateTimeAxis.get_max","title":"<code>get_max() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def get_max(self) -&gt; datetime.datetime:\nreturn self.max().toPython()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.datetimeaxis.DateTimeAxis.get_min","title":"<code>get_min() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def get_min(self) -&gt; datetime.datetime:\nreturn self.min().toPython()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.HorizontalBarSeries","title":"<code>HorizontalBarSeries</code>","text":"<p>         Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>QtCharts.QHorizontalBarSeries</code></p> Source code in <code>prettyqt\\charts\\horizontalbarseries.py</code> <pre><code>class HorizontalBarSeries(charts.AbstractBarSeriesMixin, QtCharts.QHorizontalBarSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.HorizontalPercentBarSeries","title":"<code>HorizontalPercentBarSeries</code>","text":"<p>         Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>QtCharts.QHorizontalPercentBarSeries</code></p> Source code in <code>prettyqt\\charts\\horizontalpercentbarseries.py</code> <pre><code>class HorizontalPercentBarSeries(\ncharts.AbstractBarSeriesMixin, QtCharts.QHorizontalPercentBarSeries\n):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.HorizontalStackedBarSeries","title":"<code>HorizontalStackedBarSeries</code>","text":"<p>         Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>QtCharts.QHorizontalStackedBarSeries</code></p> Source code in <code>prettyqt\\charts\\horizontalstackedbarseries.py</code> <pre><code>class HorizontalStackedBarSeries(\ncharts.AbstractBarSeriesMixin, QtCharts.QHorizontalStackedBarSeries\n):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.Legend","title":"<code>Legend</code>","text":"<p>         Bases: <code>widgets.GraphicsWidgetMixin</code></p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>class Legend(widgets.GraphicsWidgetMixin):\ndef __init__(self, item: QtCharts.QLegend):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef serialize_fields(self):\nreturn dict(\nalignment=self.get_alignment(),\nbackground_visible=self.isBackgroundVisible(),\nborder_color=self.get_border_color(),\ncolor=self.get_color(),\nfont=self.get_font(),\nlabel_color=self.get_label_color(),\nmarker_shape=self.get_marker_shape(),\nreverse_markers=self.reverseMarkers(),\nshow_tooltips=self.showToolTips(),\n)\ndef set_alignment(self, alignment: constants.SideStr):\n\"\"\"Set the alignment of the legend.\n        Args:\n            alignment: alignment for the legend\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.SIDES:\nraise InvalidParamError(alignment, constants.SIDES)\nself.setAlignment(constants.SIDES[alignment])\ndef get_alignment(self) -&gt; constants.SideStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.SIDES.inverse[self.alignment()]\ndef set_marker_shape(self, shape: MarkerShapeStr):\n\"\"\"Set the marker shape.\n        Args:\n            shape: marker shape\n        Raises:\n            InvalidParamError: marker shape does not exist\n        \"\"\"\nif shape not in MARKER_SHAPES:\nraise InvalidParamError(shape, MARKER_SHAPES)\nself.setMarkerShape(MARKER_SHAPES[shape])\ndef get_marker_shape(self) -&gt; MarkerShapeStr:\n\"\"\"Return current marker shape.\n        Returns:\n            Marker shape\n        \"\"\"\nreturn MARKER_SHAPES.inverse[self.markerShape()]\ndef get_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.borderColor())\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_label_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelColor())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.legend.Legend.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.__init__","title":"<code>__init__(item: QtCharts.QLegend)</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def __init__(self, item: QtCharts.QLegend):\nself.item = item\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_alignment","title":"<code>get_alignment() -&gt; constants.SideStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.SideStr</code> <p>alignment</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_alignment(self) -&gt; constants.SideStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.SIDES.inverse[self.alignment()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_border_color","title":"<code>get_border_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.borderColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_color","title":"<code>get_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_label_color","title":"<code>get_label_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_label_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.get_marker_shape","title":"<code>get_marker_shape() -&gt; MarkerShapeStr</code>","text":"<p>Return current marker shape.</p> <p>Returns:</p> Type Description <code>MarkerShapeStr</code> <p>Marker shape</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_marker_shape(self) -&gt; MarkerShapeStr:\n\"\"\"Return current marker shape.\n    Returns:\n        Marker shape\n    \"\"\"\nreturn MARKER_SHAPES.inverse[self.markerShape()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nalignment=self.get_alignment(),\nbackground_visible=self.isBackgroundVisible(),\nborder_color=self.get_border_color(),\ncolor=self.get_color(),\nfont=self.get_font(),\nlabel_color=self.get_label_color(),\nmarker_shape=self.get_marker_shape(),\nreverse_markers=self.reverseMarkers(),\nshow_tooltips=self.showToolTips(),\n)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.set_alignment","title":"<code>set_alignment(alignment: constants.SideStr)</code>","text":"<p>Set the alignment of the legend.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.SideStr</code> <p>alignment for the legend</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def set_alignment(self, alignment: constants.SideStr):\n\"\"\"Set the alignment of the legend.\n    Args:\n        alignment: alignment for the legend\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.SIDES:\nraise InvalidParamError(alignment, constants.SIDES)\nself.setAlignment(constants.SIDES[alignment])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.legend.Legend.set_marker_shape","title":"<code>set_marker_shape(shape: MarkerShapeStr)</code>","text":"<p>Set the marker shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>MarkerShapeStr</code> <p>marker shape</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>marker shape does not exist</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def set_marker_shape(self, shape: MarkerShapeStr):\n\"\"\"Set the marker shape.\n    Args:\n        shape: marker shape\n    Raises:\n        InvalidParamError: marker shape does not exist\n    \"\"\"\nif shape not in MARKER_SHAPES:\nraise InvalidParamError(shape, MARKER_SHAPES)\nself.setMarkerShape(MARKER_SHAPES[shape])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.LineSeries","title":"<code>LineSeries</code>","text":"<p>         Bases: <code>charts.XYSeriesMixin</code>, <code>QtCharts.QLineSeries</code></p> <p>QLineSeries with some custom properties.</p> Source code in <code>prettyqt\\charts\\lineseries.py</code> <pre><code>class LineSeries(charts.XYSeriesMixin, QtCharts.QLineSeries):\n\"\"\"QLineSeries with some custom properties.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._process_name = \"\"\ndef get_process_name(self):\nreturn self._process_name\ndef set_process_name(self, value):\nself._process_name = value\nprocess_name = core.Property(str, get_process_name, set_process_name)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.lineseries.LineSeries.process_name","title":"<code>process_name = core.Property(str, get_process_name, set_process_name)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/charts.html#prettyqt.charts.lineseries.LineSeries.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\charts\\lineseries.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._process_name = \"\"\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.lineseries.LineSeries.get_process_name","title":"<code>get_process_name()</code>","text":"Source code in <code>prettyqt\\charts\\lineseries.py</code> <pre><code>def get_process_name(self):\nreturn self._process_name\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.lineseries.LineSeries.set_process_name","title":"<code>set_process_name(value)</code>","text":"Source code in <code>prettyqt\\charts\\lineseries.py</code> <pre><code>def set_process_name(self, value):\nself._process_name = value\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.LogValueAxis","title":"<code>LogValueAxis</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code>, <code>QtCharts.QLogValueAxis</code></p> Source code in <code>prettyqt\\charts\\logvalueaxis.py</code> <pre><code>class LogValueAxis(charts.AbstractAxisMixin, QtCharts.QLogValueAxis):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.PercentBarSeries","title":"<code>PercentBarSeries</code>","text":"<p>         Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>QtCharts.QPercentBarSeries</code></p> Source code in <code>prettyqt\\charts\\percentbarseries.py</code> <pre><code>class PercentBarSeries(charts.AbstractBarSeriesMixin, QtCharts.QPercentBarSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.PieSlice","title":"<code>PieSlice</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QPieSlice</code></p> Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>class PieSlice(core.ObjectMixin, QtCharts.QPieSlice):\ndef __repr__(self):\nreturn get_repr(self, self.label(), self.value())\ndef set_label_position(self, position: LabelPositionStr):\n\"\"\"Set the label position.\n        Args:\n            position: label position\n        Raises:\n            InvalidParamError: label position does not exist\n        \"\"\"\nif position not in LABEL_POSITION:\nraise InvalidParamError(position, LABEL_POSITION)\nself.setLabelPosition(LABEL_POSITION[position])\ndef get_label_position(self) -&gt; LabelPositionStr:\n\"\"\"Return current label position.\n        Returns:\n            label position\n        \"\"\"\nreturn LABEL_POSITION.inverse[self.labelPosition()]\ndef get_label_font(self) -&gt; gui.Font:\nreturn gui.Font(self.labelFont())\ndef get_label_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.labelBrush())\ndef get_label_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelColor())\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.borderColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.label(), self.value())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_border_color","title":"<code>get_border_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.borderColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_brush","title":"<code>get_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_color","title":"<code>get_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_label_brush","title":"<code>get_label_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_label_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.labelBrush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_label_color","title":"<code>get_label_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_label_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelColor())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_label_font","title":"<code>get_label_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_label_font(self) -&gt; gui.Font:\nreturn gui.Font(self.labelFont())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_label_position","title":"<code>get_label_position() -&gt; LabelPositionStr</code>","text":"<p>Return current label position.</p> <p>Returns:</p> Type Description <code>LabelPositionStr</code> <p>label position</p> Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_label_position(self) -&gt; LabelPositionStr:\n\"\"\"Return current label position.\n    Returns:\n        label position\n    \"\"\"\nreturn LABEL_POSITION.inverse[self.labelPosition()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.pieslice.PieSlice.set_label_position","title":"<code>set_label_position(position: LabelPositionStr)</code>","text":"<p>Set the label position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelPositionStr</code> <p>label position</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>label position does not exist</p> Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def set_label_position(self, position: LabelPositionStr):\n\"\"\"Set the label position.\n    Args:\n        position: label position\n    Raises:\n        InvalidParamError: label position does not exist\n    \"\"\"\nif position not in LABEL_POSITION:\nraise InvalidParamError(position, LABEL_POSITION)\nself.setLabelPosition(LABEL_POSITION[position])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.PolarChart","title":"<code>PolarChart</code>","text":"<p>         Bases: <code>charts.ChartMixin</code>, <code>QtCharts.QPolarChart</code></p> Source code in <code>prettyqt\\charts\\polarchart.py</code> <pre><code>class PolarChart(charts.ChartMixin, QtCharts.QPolarChart):\ndef add_axis(self, axis: QtCharts.QAbstractAxis, orientation: PolarOrientationStr):\nif orientation not in POLAR_ORIENTATIONS:\nraise InvalidParamError(orientation, POLAR_ORIENTATIONS)\nself.addAxis(axis, POLAR_ORIENTATIONS[orientation])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.polarchart.PolarChart.add_axis","title":"<code>add_axis(axis: QtCharts.QAbstractAxis, orientation: PolarOrientationStr)</code>","text":"Source code in <code>prettyqt\\charts\\polarchart.py</code> <pre><code>def add_axis(self, axis: QtCharts.QAbstractAxis, orientation: PolarOrientationStr):\nif orientation not in POLAR_ORIENTATIONS:\nraise InvalidParamError(orientation, POLAR_ORIENTATIONS)\nself.addAxis(axis, POLAR_ORIENTATIONS[orientation])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ScatterSeries","title":"<code>ScatterSeries</code>","text":"<p>         Bases: <code>charts.XYSeriesMixin</code>, <code>QtCharts.QScatterSeries</code></p> Source code in <code>prettyqt\\charts\\scatterseries.py</code> <pre><code>class ScatterSeries(charts.XYSeriesMixin, QtCharts.QScatterSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.StackedBarSeries","title":"<code>StackedBarSeries</code>","text":"<p>         Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>QtCharts.QStackedBarSeries</code></p> Source code in <code>prettyqt\\charts\\stackedbarseries.py</code> <pre><code>class StackedBarSeries(charts.AbstractBarSeriesMixin, QtCharts.QStackedBarSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ValueAxis","title":"<code>ValueAxis</code>","text":"<p>         Bases: <code>ValueAxisMixin</code>, <code>QtCharts.QValueAxis</code></p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>class ValueAxis(ValueAxisMixin, QtCharts.QValueAxis):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.ValueAxisMixin","title":"<code>ValueAxisMixin</code>","text":"<p>         Bases: <code>charts.AbstractAxisMixin</code></p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>class ValueAxisMixin(charts.AbstractAxisMixin):\ndef set_tick_type(self, tick_type: TickTypeStr):\n\"\"\"Set the tick type of the legend.\n        Args:\n            tick_type: tick type for the legend\n        Raises:\n            InvalidParamError: tick type does not exist\n        \"\"\"\nif tick_type not in TICK_TYPES:\nraise InvalidParamError(tick_type, TICK_TYPES)\nself.setTickType(TICK_TYPES[tick_type])\ndef get_tick_type(self) -&gt; TickTypeStr:\n\"\"\"Return current tick type.\n        Returns:\n            tick_type\n        \"\"\"\nreturn TICK_TYPES.inverse[self.tickType()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.valueaxis.ValueAxisMixin.get_tick_type","title":"<code>get_tick_type() -&gt; TickTypeStr</code>","text":"<p>Return current tick type.</p> <p>Returns:</p> Type Description <code>TickTypeStr</code> <p>tick_type</p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>def get_tick_type(self) -&gt; TickTypeStr:\n\"\"\"Return current tick type.\n    Returns:\n        tick_type\n    \"\"\"\nreturn TICK_TYPES.inverse[self.tickType()]\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.valueaxis.ValueAxisMixin.set_tick_type","title":"<code>set_tick_type(tick_type: TickTypeStr)</code>","text":"<p>Set the tick type of the legend.</p> <p>Parameters:</p> Name Type Description Default <code>tick_type</code> <code>TickTypeStr</code> <p>tick type for the legend</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>tick type does not exist</p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>def set_tick_type(self, tick_type: TickTypeStr):\n\"\"\"Set the tick type of the legend.\n    Args:\n        tick_type: tick type for the legend\n    Raises:\n        InvalidParamError: tick type does not exist\n    \"\"\"\nif tick_type not in TICK_TYPES:\nraise InvalidParamError(tick_type, TICK_TYPES)\nself.setTickType(TICK_TYPES[tick_type])\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.XYSeries","title":"<code>XYSeries</code>","text":"<p>         Bases: <code>XYSeriesMixin</code>, <code>QtCharts.QXYSeries</code></p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>class XYSeries(XYSeriesMixin, QtCharts.QXYSeries):\npass\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.XYSeriesMixin","title":"<code>XYSeriesMixin</code>","text":"<p>         Bases: <code>charts.AbstractSeriesMixin</code></p> <p>QXYSeries with some custom properties.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>class XYSeriesMixin(charts.AbstractSeriesMixin):\n\"\"\"QXYSeries with some custom properties.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# self._process_name = \"\"\nself.setUseOpenGL()\ndef __setitem__(self, index: int, val: QtCore.QPointF):\nself.replace(index, val)\ndef __delitem__(self, index: int):\nself.remove(index)\n# def __setstate__(self, state):\n#     self.append(state[\"points\"])\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __add__(self, other: QtCore.QPointF) -&gt; XYSeries:\nself.append(other)\nreturn self\ndef serialize_fields(self):\nif prettyqt.qt.API == \"pyqt6\":\npoints = [self.at(i) for i in range(self.count())]\nelse:\npoints = self.points()\nreturn dict(points=points)\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__add__","title":"<code>__add__(other: QtCore.QPointF) -&gt; XYSeries</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __add__(self, other: QtCore.QPointF) -&gt; XYSeries:\nself.append(other)\nreturn self\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __delitem__(self, index: int):\nself.remove(index)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# self._process_name = \"\"\nself.setUseOpenGL()\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.__setitem__","title":"<code>__setitem__(index: int, val: QtCore.QPointF)</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __setitem__(self, index: int, val: QtCore.QPointF):\nself.replace(index, val)\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.get_brush","title":"<code>get_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/charts.html#prettyqt.charts.xyseries.XYSeriesMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def serialize_fields(self):\nif prettyqt.qt.API == \"pyqt6\":\npoints = [self.at(i) for i in range(self.count())]\nelse:\npoints = self.points()\nreturn dict(points=points)\n</code></pre>"},{"location":"api/constants.html","title":"constants module","text":"<p>Constants module.</p>"},{"location":"api/constants.html#prettyqt.constants.ALIGNMENTS","title":"<code>ALIGNMENTS = bidict(none=Qt.AlignmentFlag(0), left=ALIGN_LEFT, center_left=ALIGN_CENTER_LEFT, right=ALIGN_RIGHT, center_right=ALIGN_CENTER_RIGHT, top_center=ALIGN_TOP_CENTER, top=ALIGN_TOP, bottom=ALIGN_BOTTOM, bottom_center=ALIGN_BOTTOM_CENTER, top_left=ALIGN_TOP_LEFT, top_right=ALIGN_TOP_RIGHT, bottom_left=ALIGN_BOTTOM_LEFT, bottom_right=ALIGN_BOTTOM_RIGHT, center=ALIGN_CENTER)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGNMENT_ROLE","title":"<code>ALIGNMENT_ROLE = Qt.ItemDataRole.TextAlignmentRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_BASELINE","title":"<code>ALIGN_BASELINE = Qt.AlignmentFlag.AlignBaseline</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_BOTTOM","title":"<code>ALIGN_BOTTOM = Qt.AlignmentFlag.AlignBottom</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_BOTTOM_CENTER","title":"<code>ALIGN_BOTTOM_CENTER = Flag.AlignBottom | Flag.AlignHCenter</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_BOTTOM_LEFT","title":"<code>ALIGN_BOTTOM_LEFT = Flag.AlignBottom | Flag.AlignLeft</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_BOTTOM_RIGHT","title":"<code>ALIGN_BOTTOM_RIGHT = Flag.AlignBottom | Flag.AlignRight</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_CENTER","title":"<code>ALIGN_CENTER = Flag.AlignCenter</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_CENTER_LEFT","title":"<code>ALIGN_CENTER_LEFT = Flag.AlignVCenter | Flag.AlignLeft</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_CENTER_RIGHT","title":"<code>ALIGN_CENTER_RIGHT = Flag.AlignVCenter | Flag.AlignRight</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_H_CENTER","title":"<code>ALIGN_H_CENTER = Qt.AlignmentFlag.AlignHCenter</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_JUSTIFY","title":"<code>ALIGN_JUSTIFY = Qt.AlignmentFlag.AlignJustify</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_LEFT","title":"<code>ALIGN_LEFT = Qt.AlignmentFlag.AlignLeft</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_NONE","title":"<code>ALIGN_NONE = Qt.AlignmentFlag(0)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_RIGHT","title":"<code>ALIGN_RIGHT = Qt.AlignmentFlag.AlignRight</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_TOP","title":"<code>ALIGN_TOP = Qt.AlignmentFlag.AlignTop</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_TOP_CENTER","title":"<code>ALIGN_TOP_CENTER = Flag.AlignTop | Flag.AlignHCenter</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_TOP_LEFT","title":"<code>ALIGN_TOP_LEFT = Flag.AlignTop | Flag.AlignLeft</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_TOP_RIGHT","title":"<code>ALIGN_TOP_RIGHT = Flag.AlignTop | Flag.AlignRight</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALIGN_V_CENTER","title":"<code>ALIGN_V_CENTER = Qt.AlignmentFlag.AlignVCenter</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ALPHA_DITHER_PREFERENCE","title":"<code>ALPHA_DITHER_PREFERENCE: bidict[ImageConversionFlagStr, Qt.ImageConversionFlag] = bidict(threshold=Qt.ImageConversionFlag.ThresholdAlphaDither, ordered=Qt.ImageConversionFlag.OrderedAlphaDither, diffuse=Qt.ImageConversionFlag.DiffuseAlphaDither)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ANCHOR_POINT","title":"<code>ANCHOR_POINT = bidict[AnchorPointStr, Qt.AnchorPoint](left=QtCore.Qt.AnchorPoint.AnchorLeft, horizontal_center=QtCore.Qt.AnchorPoint.AnchorHorizontalCenter, right=QtCore.Qt.AnchorPoint.AnchorRight, top=QtCore.Qt.AnchorPoint.AnchorTop, vertical_center=QtCore.Qt.AnchorPoint.AnchorVerticalCenter, bottom=QtCore.Qt.AnchorPoint.AnchorBottom)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.APPLICATION_ATTRIBUTE","title":"<code>APPLICATION_ATTRIBUTE: bidict[ApplicationAttributeStr, Qt.ApplicationAttribute] = bidict(dont_show_icons_in_menus=Att.AA_DontShowIconsInMenus, dont_show_shortcuts_in_context_menus=Att.AA_DontShowShortcutsInContextMenus, native_windows=Att.AA_NativeWindows, dont_create_native_widget_siblings=Att.AA_DontCreateNativeWidgetSiblings, plugin_application=Att.AA_PluginApplication, dont_use_native_menu_bar=Att.AA_DontUseNativeMenuBar, mac_dont_swap_ctrl_and_meta=Att.AA_MacDontSwapCtrlAndMeta, use_96_dpi=Att.AA_Use96Dpi, synthesize_touch_for_mouse_events=Att.AA_SynthesizeTouchForUnhandledMouseEvents, synthesize_touch_for_touch_events=Att.AA_SynthesizeMouseForUnhandledTouchEvents, force_raster_widgets=Att.AA_ForceRasterWidgets, use_desktop_open_gl=Att.AA_UseDesktopOpenGL, use_open_gl_es=Att.AA_UseOpenGLES, use_software_open_gl=Att.AA_UseSoftwareOpenGL, share_open_gl_contexts=Att.AA_ShareOpenGLContexts, set_palette=Att.AA_SetPalette, use_style_sheet_propagation_in_styles=Att.AA_UseStyleSheetPropagationInWidgetStyles, dont_use_native_dialogs=Att.AA_DontUseNativeDialogs, synthesize_mouse_for_tablet_events=Att.AA_SynthesizeMouseForUnhandledTabletEvents, compress_tablet_events=Att.AA_CompressTabletEvents, dont_check_open_gl_context_thread=Att.AA_DontCheckOpenGLContextThreadAffinity, disable_shader_disk_cache=Att.AA_DisableShaderDiskCache, disable_session_manager=Att.AA_DisableSessionManager, disable_native_virtual_keyboard=Att.AA_DisableNativeVirtualKeyboard)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.APPLICATION_STATES","title":"<code>APPLICATION_STATES: bidict[ApplicationStateStr, Qt.ApplicationState] = bidict(suspended=Qt.ApplicationState.ApplicationSuspended, hidden=Qt.ApplicationState.ApplicationHidden, inactive=Qt.ApplicationState.ApplicationInactive, active=Qt.ApplicationState.ApplicationActive)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ARROW_TYPE","title":"<code>ARROW_TYPE: bidict[ArrowTypeStr, Qt.ArrowType] = bidict(none=Qt.ArrowType.NoArrow, up=Qt.ArrowType.UpArrow, down=Qt.ArrowType.DownArrow, left=Qt.ArrowType.LeftArrow, right=Qt.ArrowType.RightArrow)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ASCENDING","title":"<code>ASCENDING = Qt.SortOrder.AscendingOrder</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ASPECT_RATIO_MODE","title":"<code>ASPECT_RATIO_MODE: bidict[AspectRatioModeStr, Qt.AspectRatioMode] = bidict(ignore=Qt.AspectRatioMode.IgnoreAspectRatio, keep=Qt.AspectRatioMode.KeepAspectRatio, keep_by_expanding=Qt.AspectRatioMode.KeepAspectRatioByExpanding)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.AXIS","title":"<code>AXIS: bidict[AxisStr, Qt.Axis] = bidict(x=Qt.Axis.XAxis, y=Qt.Axis.YAxis, z=Qt.Axis.ZAxis)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.AlignmentStr","title":"<code>AlignmentStr = Literal['none', 'left', 'right', 'top', 'bottom', 'top_left', 'top_right', 'bottom_left', 'bottom_right', 'center']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.AlphaDitherPreferenceStr","title":"<code>AlphaDitherPreferenceStr = Literal['diffuse', 'ordered', 'threshold']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.AnchorPointStr","title":"<code>AnchorPointStr = Literal['left', 'horizontal_center', 'right', 'top', 'vertical_center', 'bottom']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ApplicationAttributeStr","title":"<code>ApplicationAttributeStr = Literal['dont_show_icons_in_menus', 'dont_show_shortcuts_in_context_menus', 'native_windows', 'dont_create_native_widget_siblings', 'plugin_application', 'dont_use_native_menu_bar', 'mac_dont_swap_ctrl_and_meta', 'use_96_dpi', 'synthesize_touch_for_mouse_events', 'synthesize_touch_for_touch_events', 'use_high_dpi_pixmaps', 'force_raster_widgets', 'use_desktop_open_gl', 'use_open_gl_es', 'use_software_open_gl', 'share_open_gl_contexts', 'set_palette', 'enable_high_dpi_scaling', 'disable_high_dpi_scaling', 'use_style_sheet_propagation_in_styles', 'dont_use_native_dialogs', 'synthesize_mouse_for_tablet_events', 'compress_tablet_events', 'dont_check_open_gl_context_thread', 'disable_shader_disk_cache', 'disable_window_context_help_button', 'disable_session_manager', 'disable_native_virtual_keyboard']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ApplicationStateStr","title":"<code>ApplicationStateStr = Literal['suspended', 'hidden', 'inactive', 'active']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ArrowTypeStr","title":"<code>ArrowTypeStr = Literal['none', 'up', 'down', 'left', 'right']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.AspectRatioModeStr","title":"<code>AspectRatioModeStr = Literal['ignore', 'keep', 'keep_by_expanding']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.Att","title":"<code>Att = Qt.ApplicationAttribute</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.Attr","title":"<code>Attr = Qt.WidgetAttribute</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.AxisStr","title":"<code>AxisStr = Literal['x', 'y', 'z']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.BACKGROUND_ROLE","title":"<code>BACKGROUND_ROLE = Qt.ItemDataRole.BackgroundRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.BRUSH_STYLE","title":"<code>BRUSH_STYLE: bidict[BrushStyleStr, Qt.BrushStyle] = bidict(none=Qt.BrushStyle.NoBrush, solid=Qt.BrushStyle.SolidPattern, dense_1=Qt.BrushStyle.Dense1Pattern, dense_2=Qt.BrushStyle.Dense2Pattern, dense_3=Qt.BrushStyle.Dense3Pattern, dense_4=Qt.BrushStyle.Dense4Pattern, dense_5=Qt.BrushStyle.Dense5Pattern, dense_6=Qt.BrushStyle.Dense6Pattern, dense_7=Qt.BrushStyle.Dense7Pattern, horizontal=Qt.BrushStyle.HorPattern, vertical=Qt.BrushStyle.VerPattern, cross=Qt.BrushStyle.CrossPattern, backward_diagonal=Qt.BrushStyle.BDiagPattern, forward_diagonal=Qt.BrushStyle.FDiagPattern, crossing_diagonal=Qt.BrushStyle.DiagCrossPattern, linear_gradient=Qt.BrushStyle.LinearGradientPattern, conical_gradient=Qt.BrushStyle.ConicalGradientPattern, radial_gradient=Qt.BrushStyle.RadialGradientPattern, texture=Qt.BrushStyle.TexturePattern)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.BrushStyleStr","title":"<code>BrushStyleStr = Literal['none', 'solid', 'dense_1', 'dense_2', 'dense_3', 'dense_4', 'dense_5', 'dense_6', 'dense_7', 'horizontal', 'vertical', 'cross', 'backward_diagonal', 'forward_diagonal', 'crossing_diagonal', 'linear_gradient', 'conical_gradient', 'radial_gradient', 'texture']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CAP_STYLE","title":"<code>CAP_STYLE: bidict[CapStyleStr, Qt.PenCapStyle] = bidict(flat=Qt.PenCapStyle.FlatCap, square=Qt.PenCapStyle.SquareCap, round=Qt.PenCapStyle.RoundCap)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CASE_SENSITIVITY","title":"<code>CASE_SENSITIVITY: bidict[CaseSensitivityStr, Qt.CaseSensitivity] = bidict(case_insensitive=Qt.CaseSensitivity.CaseInsensitive, case_sensitive=Qt.CaseSensitivity.CaseSensitive)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CHECKSTATE_ROLE","title":"<code>CHECKSTATE_ROLE = Qt.ItemDataRole.CheckStateRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CLIP_OPERATION","title":"<code>CLIP_OPERATION: bidict[ClipOperationStr, Qt.ClipOperation] = bidict(none=Qt.ClipOperation.NoClip, replace=Qt.ClipOperation.ReplaceClip, intersect=Qt.ClipOperation.IntersectClip)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.COLOR_PREFERENCE","title":"<code>COLOR_PREFERENCE: bidict[ColorPreferenceStr, Qt.ImageConversionFlag] = bidict(auto=Qt.ImageConversionFlag.AutoColor, color_only=Qt.ImageConversionFlag.ColorOnly, mono_only=Qt.ImageConversionFlag.MonoOnly)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.COLOR_SCHEME","title":"<code>COLOR_SCHEME: bidict[ColorSchemeStr, Qt.ColorScheme] = bidict(unknown=Qt.ColorScheme.Unknown, light=Qt.ColorScheme.Light, dark=Qt.ColorScheme.Dark)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CONTEXT_POLICY","title":"<code>CONTEXT_POLICY: bidict[ContextPolicyStr, Qt.ContextMenuPolicy] = bidict(none=Qt.ContextMenuPolicy.NoContextMenu, prevent=Qt.ContextMenuPolicy.PreventContextMenu, default=Qt.ContextMenuPolicy.DefaultContextMenu, actions=Qt.ContextMenuPolicy.ActionsContextMenu, custom=Qt.ContextMenuPolicy.CustomContextMenu)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.COPY_ACTION","title":"<code>COPY_ACTION = Qt.DropAction.CopyAction</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CORNER","title":"<code>CORNER: bidict[CornerStr, Qt.Corner] = bidict(top_left=Qt.Corner.TopLeftCorner, top_right=Qt.Corner.TopRightCorner, bottom_left=Qt.Corner.BottomLeftCorner, bottom_right=Qt.Corner.BottomRightCorner)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CTRL_MOD","title":"<code>CTRL_MOD = Qt.KeyboardModifier.ControlModifier</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CURSOR_MOVE_STYLE","title":"<code>CURSOR_MOVE_STYLE: bidict[CursorMoveStyleStr, Qt.CursorMoveStyle] = bidict(logical=Qt.CursorMoveStyle.LogicalMoveStyle, visual=Qt.CursorMoveStyle.VisualMoveStyle)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CURSOR_SHAPE","title":"<code>CURSOR_SHAPE: bidict[CursorShapeStr, Qt.CursorShape] = bidict(arrow=Qt.CursorShape.ArrowCursor, uparrow=Qt.CursorShape.UpArrowCursor, cross=Qt.CursorShape.CrossCursor, wait=Qt.CursorShape.WaitCursor, caret=Qt.CursorShape.IBeamCursor, size_vertical=Qt.CursorShape.SizeVerCursor, size_horizontal=Qt.CursorShape.SizeHorCursor, size_topright=Qt.CursorShape.SizeBDiagCursor, size_topleft=Qt.CursorShape.SizeFDiagCursor, size_all=Qt.CursorShape.SizeAllCursor, blank=Qt.CursorShape.BlankCursor, split_vertical=Qt.CursorShape.SplitVCursor, split_horizontal=Qt.CursorShape.SplitHCursor, pointing_hand=Qt.CursorShape.PointingHandCursor, forbidden=Qt.CursorShape.ForbiddenCursor, open_hand=Qt.CursorShape.OpenHandCursor, closed_hand=Qt.CursorShape.ClosedHandCursor, whats_this=Qt.CursorShape.WhatsThisCursor, busy=Qt.CursorShape.BusyCursor, drag_move=Qt.CursorShape.DragMoveCursor, drag_copy=Qt.CursorShape.DragCopyCursor, drag_link=Qt.CursorShape.DragLinkCursor, bitmap=Qt.CursorShape.BitmapCursor)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CapStyleStr","title":"<code>CapStyleStr = Literal['flat', 'square', 'round']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CaseSensitivityStr","title":"<code>CaseSensitivityStr = Literal['case_sensitive', 'case_insensitive']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ClipOperationStr","title":"<code>ClipOperationStr = Literal['none', 'replace', 'intersect']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ColorPreferenceStr","title":"<code>ColorPreferenceStr = Literal['auto', 'color_only', 'mono_only']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ColorSchemeStr","title":"<code>ColorSchemeStr = Literal['unknown', 'light', 'dark']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ContextPolicyStr","title":"<code>ContextPolicyStr = Literal['none', 'prevent', 'default', 'actions', 'custom']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CornerStr","title":"<code>CornerStr = Literal['top_left', 'top_right', 'bottom_left', 'bottom_right']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CursorMoveStyleStr","title":"<code>CursorMoveStyleStr = Literal['logical', 'visual']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.CursorShapeStr","title":"<code>CursorShapeStr = Literal['arrow', 'uparrow', 'cross', 'wait', 'caret', 'size_vertical', 'size_horizontal', 'size_topright', 'size_topleft', 'size_all', 'blank', 'split_vertical', 'split_horizontal', 'pointing_hand', 'forbidden', 'open_hand', 'closed_hand', 'whats_this', 'busy', 'drag_move', 'drag_copy', 'drag_link', 'bitmap']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DATE_FORMAT","title":"<code>DATE_FORMAT: bidict[DateFormatStr, Qt.DateFormat] = bidict(text=Qt.DateFormat.TextDate, iso=Qt.DateFormat.ISODate, iso_with_ms=Qt.DateFormat.ISODateWithMs, rfc_2822=Qt.DateFormat.RFC2822Date)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DAY_OF_WEEK","title":"<code>DAY_OF_WEEK: bidict[DayOfWeekStr, Qt.DayOfWeek] = bidict(monday=Qt.DayOfWeek.Monday, tuesday=Qt.DayOfWeek.Tuesday, wednesday=Qt.DayOfWeek.Wednesday, thursday=Qt.DayOfWeek.Thursday, friday=Qt.DayOfWeek.Friday, saturday=Qt.DayOfWeek.Saturday, sunday=Qt.DayOfWeek.Sunday)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DECORATION_ROLE","title":"<code>DECORATION_ROLE = Qt.ItemDataRole.DecorationRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DESCENDING","title":"<code>DESCENDING = Qt.SortOrder.DescendingOrder</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DISPLAY_ROLE","title":"<code>DISPLAY_ROLE = Qt.ItemDataRole.DisplayRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DITHER_PREFERENCE","title":"<code>DITHER_PREFERENCE: bidict[ImageConversionFlagStr, Qt.ImageConversionFlag] = bidict(diffuse=Qt.ImageConversionFlag.DiffuseDither, ordered=Qt.ImageConversionFlag.OrderedDither, threshold=Qt.ImageConversionFlag.ThresholdDither)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DOCK_POSITION","title":"<code>DOCK_POSITION: bidict[DockPositionStr, Qt.DockWidgetArea] = bidict(top=Qt.DockWidgetArea.TopDockWidgetArea, bottom=Qt.DockWidgetArea.BottomDockWidgetArea, left=Qt.DockWidgetArea.LeftDockWidgetArea, right=Qt.DockWidgetArea.RightDockWidgetArea)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DOCK_POSITIONS","title":"<code>DOCK_POSITIONS: bidict[DockPositionsStr, Qt.DockWidgetArea] = bidict(top=Qt.DockWidgetArea.TopDockWidgetArea, bottom=Qt.DockWidgetArea.BottomDockWidgetArea, left=Qt.DockWidgetArea.LeftDockWidgetArea, right=Qt.DockWidgetArea.RightDockWidgetArea, all=Qt.DockWidgetArea.AllDockWidgetAreas)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DRAG_ENABLED","title":"<code>DRAG_ENABLED = Qt.ItemFlag.ItemIsDragEnabled</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DROP_ACTION","title":"<code>DROP_ACTION: bidict[DropActionStr, Qt.DropAction] = bidict(copy=Qt.DropAction.CopyAction, move=Qt.DropAction.MoveAction, link=Qt.DropAction.LinkAction, action_mask=Qt.DropAction.ActionMask, ignore=Qt.DropAction.IgnoreAction, target_move=Qt.DropAction.TargetMoveAction)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DROP_ENABLED","title":"<code>DROP_ENABLED = Qt.ItemFlag.ItemIsDropEnabled</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DateFormatStr","title":"<code>DateFormatStr = Literal['text', 'iso', 'iso_with_ms', 'rfc_2822']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DayOfWeekStr","title":"<code>DayOfWeekStr = Literal['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DitherPreferenceStr","title":"<code>DitherPreferenceStr = Literal['diffuse', 'ordered', 'threshold']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DockPositionStr","title":"<code>DockPositionStr = Literal['top', 'bottom', 'left', 'right']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DockPositionsStr","title":"<code>DockPositionsStr = Literal['top', 'bottom', 'left', 'right', 'all']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.DropActionStr","title":"<code>DropActionStr = Literal['copy', 'move', 'link', 'action_mask', 'ignore', 'target_move']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.EDGES","title":"<code>EDGES = bidict(top=Qt.Edge.TopEdge, left=Qt.Edge.LeftEdge, right=Qt.Edge.RightEdge, bottom=Qt.Edge.BottomEdge, top_left=Qt.Edge.TopEdge | Qt.Edge.LeftEdge, top_right=Qt.Edge.TopEdge | Qt.Edge.RightEdge, bottom_left=Qt.Edge.BottomEdge | Qt.Edge.LeftEdge, bottom_right=Qt.Edge.BottomEdge | Qt.Edge.RightEdge)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.EDIT_ROLE","title":"<code>EDIT_ROLE = Qt.ItemDataRole.EditRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ELIDE_MODE","title":"<code>ELIDE_MODE: bidict[ElideModeStr, Qt.TextElideMode] = bidict(left=Qt.TextElideMode.ElideLeft, right=Qt.TextElideMode.ElideRight, middle=Qt.TextElideMode.ElideMiddle, none=Qt.TextElideMode.ElideNone)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.EVENT_PRIORITY","title":"<code>EVENT_PRIORITY: bidict[EventPriorityStr, int] = bidict(high=1, normal=0, low=-1)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.EdgeStr","title":"<code>EdgeStr = Literal['top', 'left', 'right', 'bottom', 'top_left', 'top_right', 'bottom_left', 'bottom_right']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ElideModeStr","title":"<code>ElideModeStr = Literal['left', 'right', 'middle', 'none']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.EventPriorityStr","title":"<code>EventPriorityStr = Literal['high', 'normal', 'low']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FILL_RULE","title":"<code>FILL_RULE: bidict[FillRuleStr, Qt.FillRule] = bidict(odd_even=Qt.FillRule.OddEvenFill, winding=Qt.FillRule.WindingFill)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FILTER_MODES","title":"<code>FILTER_MODES = bidict(starts_with=Qt.MatchFlag.MatchStartsWith, contains=Qt.MatchFlag.MatchContains, ends_with=Qt.MatchFlag.MatchEndsWith)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FOCUS_POLICY","title":"<code>FOCUS_POLICY: bidict[FocusPolicyStr, Qt.FocusPolicy] = bidict(tab=Qt.FocusPolicy.TabFocus, click=Qt.FocusPolicy.ClickFocus, strong=Qt.FocusPolicy.StrongFocus, wheel=Qt.FocusPolicy.WheelFocus, none=Qt.FocusPolicy.NoFocus)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FOCUS_REASONS","title":"<code>FOCUS_REASONS: bidict[FocusReasonStr, Qt.FocusReason] = bidict(mouse=Qt.FocusReason.MouseFocusReason, tab=Qt.FocusReason.TabFocusReason, backtab=Qt.FocusReason.BacktabFocusReason, active_window=Qt.FocusReason.ActiveWindowFocusReason, popup=Qt.FocusReason.PopupFocusReason, shortcut=Qt.FocusReason.ShortcutFocusReason, menu_bar=Qt.FocusReason.MenuBarFocusReason, other=Qt.FocusReason.OtherFocusReason)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FONT_ROLE","title":"<code>FONT_ROLE = Qt.ItemDataRole.FontRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FOREGROUND_ROLE","title":"<code>FOREGROUND_ROLE = Qt.ItemDataRole.ForegroundRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FillRuleStr","title":"<code>FillRuleStr = Literal['odd_even', 'winding']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FilterModeStr","title":"<code>FilterModeStr = Literal['starts_with', 'contains', 'ends_with']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.Flag","title":"<code>Flag = Qt.AlignmentFlag</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FocusPolicyStr","title":"<code>FocusPolicyStr = Literal['tab', 'click', 'strong', 'wheel', 'none']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.FocusReasonStr","title":"<code>FocusReasonStr = Literal['mouse', 'tab', 'backtab', 'active_window', 'popup', 'shortcut', 'menu_bar', 'other']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.GESTURE_STATE","title":"<code>GESTURE_STATE: bidict[GestureStateStr, Qt.GestureState] = bidict(none=Qt.GestureState(0), started=Qt.GestureState.GestureStarted, updated=Qt.GestureState.GestureUpdated, finished=Qt.GestureState.GestureFinished, canceled=Qt.GestureState.GestureCanceled)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.GESTURE_TYPE","title":"<code>GESTURE_TYPE: bidict[GestureTypeStr, Qt.GestureType] = bidict(tap=Qt.GestureType.TapGesture, tap_and_hold=Qt.GestureType.TapAndHoldGesture, pan=Qt.GestureType.PanGesture, pinch=Qt.GestureType.PinchGesture, swipe=Qt.GestureType.SwipeGesture, custom=Qt.GestureType.CustomGesture)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.GestureStateStr","title":"<code>GestureStateStr = Literal['none', 'started', 'updated', 'finished', 'canceled']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.GestureTypeStr","title":"<code>GestureTypeStr = Literal['tap', 'tap_and_hold', 'pan', 'pinch', 'swipe', 'custom']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY","title":"<code>HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY: bidict[HighDpiScaleFactorRoundingPolicyStr, Qt.HighDpiScaleFactorRoundingPolicy] = bidict(round=Qt.HighDpiScaleFactorRoundingPolicy.Round, ceil=Qt.HighDpiScaleFactorRoundingPolicy.Ceil, floor=Qt.HighDpiScaleFactorRoundingPolicy.Floor, round_prefer_floor=Qt.HighDpiScaleFactorRoundingPolicy.RoundPreferFloor, pass_through=Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.HORIZONTAL","title":"<code>HORIZONTAL = Qt.Orientation.Horizontal</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.H_ALIGNMENT","title":"<code>H_ALIGNMENT = bidict(left=Qt.AlignmentFlag.AlignLeft, right=Qt.AlignmentFlag.AlignRight, center=Qt.AlignmentFlag.AlignHCenter, justify=Qt.AlignmentFlag.AlignJustify)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.HighDpiScaleFactorRoundingPolicyStr","title":"<code>HighDpiScaleFactorRoundingPolicyStr = Literal['round', 'ceil', 'floor', 'round_prefer_floor', 'pass_through']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.HorizontalAlignmentStr","title":"<code>HorizontalAlignmentStr = Literal['left', 'right', 'center', 'justify']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IMAGE_CONVERSION_FLAGS","title":"<code>IMAGE_CONVERSION_FLAGS: bidict[ImageConversionFlagStr, Qt.ImageConversionFlag] = bidict(auto=Qt.ImageConversionFlag.AutoColor, color_only=Qt.ImageConversionFlag.ColorOnly, mono_only=Qt.ImageConversionFlag.MonoOnly, ordered_dither=Qt.ImageConversionFlag.OrderedDither, threshold_dither=Qt.ImageConversionFlag.ThresholdDither, ordered_alpha_dither=Qt.ImageConversionFlag.OrderedAlphaDither, diffuse_alpha_filter=Qt.ImageConversionFlag.DiffuseAlphaDither, prefer_dither=Qt.ImageConversionFlag.PreferDither, avoid_dither=Qt.ImageConversionFlag.AvoidDither, no_opaque_detection=Qt.ImageConversionFlag.NoOpaqueDetection, no_format_conversion=Qt.ImageConversionFlag.NoFormatConversion)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.INPUT_METHOD_QUERY","title":"<code>INPUT_METHOD_QUERY: bidict[InputMethodQueryStr, Qt.InputMethodQuery] = bidict(enabled=Qt.InputMethodQuery.ImEnabled, cursor_rectangle=Qt.InputMethodQuery.ImCursorRectangle, font=Qt.InputMethodQuery.ImFont, cursor_position=Qt.InputMethodQuery.ImCursorPosition, surrounding_text=Qt.InputMethodQuery.ImSurroundingText, current_selection=Qt.InputMethodQuery.ImCurrentSelection, maximum_text_length=Qt.InputMethodQuery.ImMaximumTextLength, anchor_position=Qt.InputMethodQuery.ImAnchorPosition, hints=Qt.InputMethodQuery.ImHints, preferred_language=Qt.InputMethodQuery.ImPreferredLanguage, platform_data=Qt.InputMethodQuery.ImPlatformData, absolute_position=Qt.InputMethodQuery.ImAbsolutePosition, text_before_cursor=Qt.InputMethodQuery.ImTextBeforeCursor, text_after_cursor=Qt.InputMethodQuery.ImTextAfterCursor, enter_key_type=Qt.InputMethodQuery.ImEnterKeyType, anchor_rectangle=Qt.InputMethodQuery.ImAnchorRectangle, input_item_clip_rectangle=Qt.InputMethodQuery.ImInputItemClipRectangle, read_only=Qt.InputMethodQuery.ImReadOnly)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IS_AUTO_TRISTATE","title":"<code>IS_AUTO_TRISTATE = Qt.ItemFlag.ItemIsAutoTristate</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IS_CHECKABLE","title":"<code>IS_CHECKABLE = Qt.ItemFlag.ItemIsUserCheckable</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IS_EDITABLE","title":"<code>IS_EDITABLE = Qt.ItemFlag.ItemIsEditable</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IS_ENABLED","title":"<code>IS_ENABLED = Qt.ItemFlag.ItemIsEnabled</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IS_SELECTABLE","title":"<code>IS_SELECTABLE = Qt.ItemFlag.ItemIsSelectable</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.IS_USER_TRISTATE","title":"<code>IS_USER_TRISTATE = Qt.ItemFlag.ItemIsUserTristate</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ITEM_DATA_ROLE","title":"<code>ITEM_DATA_ROLE: bidict[ItemDataRoleStr, QtCore.Qt.ItemDataRole | int] = bidict(display=DISPLAY_ROLE, user=USER_ROLE, sort=SORT_ROLE, edit=EDIT_ROLE, tooltip=TOOLTIP_ROLE, statustip=STATUSTIP_ROLE, decoration=DECORATION_ROLE, checkstate=CHECKSTATE_ROLE, alignment=ALIGNMENT_ROLE, font=FONT_ROLE, foreground=FOREGROUND_ROLE, background=BACKGROUND_ROLE)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ITEM_SELECTION_MODE","title":"<code>ITEM_SELECTION_MODE: bidict[ItemSelectionModeStr, Qt.ItemSelectionMode] = bidict(contains_shape=Qt.ItemSelectionMode.ContainsItemShape, intersects_shape=Qt.ItemSelectionMode.IntersectsItemShape, contains_bounding_rect=Qt.ItemSelectionMode.ContainsItemBoundingRect, intersects_bounding_rect=Qt.ItemSelectionMode.IntersectsItemBoundingRect)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ImageConversionFlagStr","title":"<code>ImageConversionFlagStr = Literal['auto', 'color_only', 'mono_only', 'ordered_dither', 'threshold_dither', 'ordered_alpha_dither', 'diffuse_alpha_filter', 'prefer_dither', 'avoid_dither', 'no_opaque_detection', 'no_format_conversion']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.InputMethodQueryStr","title":"<code>InputMethodQueryStr = Literal['enabled', 'cursor_rectangle', 'font', 'cursor_position', 'surrounding_text', 'current_selection', 'maximum_text_length', 'anchor_position', 'hints', 'preferred_language', 'platform_data', 'absolute_position', 'text_before_cursor', 'text_after_cursor', 'enter_key_type', 'anchor_rectangle', 'input_item_clip_rectangle', 'read_only']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ItemDataRoleStr","title":"<code>ItemDataRoleStr = Literal['display', 'user', 'sort', 'edit', 'tooltip', 'statustip', 'decoration', 'checkstate', 'alignment', 'font', 'foreground', 'background']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ItemSelectionModeStr","title":"<code>ItemSelectionModeStr = Literal['contains_shape', 'intersects_shape', 'contains_bounding_rect', 'intersects_bounding_rect']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.JOIN_STYLE","title":"<code>JOIN_STYLE: bidict[JoinStyleStr, Qt.PenJoinStyle] = bidict(miter=Qt.PenJoinStyle.MiterJoin, bevel=Qt.PenJoinStyle.BevelJoin, round=Qt.PenJoinStyle.RoundJoin, svg_miter=Qt.PenJoinStyle.SvgMiterJoin)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.JoinStyleStr","title":"<code>JoinStyleStr = Literal['miter', 'bevel', 'round', 'svg_miter']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.KEY","title":"<code>KEY: bidict[KeyStr, Qt.Key] = bidict(escape=Qt.Key.Key_Escape, backtab=Qt.Key.Key_Backtab, backspace=Qt.Key.Key_Backspace, insert=Qt.Key.Key_Insert, delete=Qt.Key.Key_Delete, print=Qt.Key.Key_Print, sys_req=Qt.Key.Key_SysReq, left=Qt.Key.Key_Left, right=Qt.Key.Key_Right, page_up=Qt.Key.Key_PageUp, page_down=Qt.Key.Key_PageDown, control=Qt.Key.Key_Control, alt_gr=Qt.Key.Key_AltGr, caps_lock=Qt.Key.Key_CapsLock, scroll_lock=Qt.Key.Key_ScrollLock, f2=Qt.Key.Key_F2, f3=Qt.Key.Key_F3, f4=Qt.Key.Key_F4, f5=Qt.Key.Key_F5, f6=Qt.Key.Key_F6, f7=Qt.Key.Key_F7, f8=Qt.Key.Key_F8, f9=Qt.Key.Key_F9, f10=Qt.Key.Key_F10, f11=Qt.Key.Key_F11, f12=Qt.Key.Key_F12, f13=Qt.Key.Key_F13, f14=Qt.Key.Key_F14, f15=Qt.Key.Key_F15, f16=Qt.Key.Key_F16, f17=Qt.Key.Key_F17, f18=Qt.Key.Key_F18, f19=Qt.Key.Key_F19, f20=Qt.Key.Key_F20, f21=Qt.Key.Key_F21, f22=Qt.Key.Key_F22, f23=Qt.Key.Key_F23, f24=Qt.Key.Key_F24, f25=Qt.Key.Key_F25, f26=Qt.Key.Key_F26, f27=Qt.Key.Key_F27, f28=Qt.Key.Key_F28, f29=Qt.Key.Key_F29, f30=Qt.Key.Key_F30, f31=Qt.Key.Key_F31, f32=Qt.Key.Key_F32, f33=Qt.Key.Key_F33, f34=Qt.Key.Key_F34, f35=Qt.Key.Key_F35, super_l=Qt.Key.Key_Super_L, super_r=Qt.Key.Key_Super_R, hyper_l=Qt.Key.Key_Hyper_L, hyper_r=Qt.Key.Key_Hyper_R, direction_l=Qt.Key.Key_Direction_L, direction_r=Qt.Key.Key_Direction_R, exclam=Qt.Key.Key_Exclam, quote_dbl=Qt.Key.Key_QuoteDbl, number_sign=Qt.Key.Key_NumberSign, percent=Qt.Key.Key_Percent, ampersand=Qt.Key.Key_Ampersand, apostrophe=Qt.Key.Key_Apostrophe, paren_right=Qt.Key.Key_ParenRight, comma=Qt.Key.Key_Comma, minus=Qt.Key.Key_Minus, period=Qt.Key.Key_Period, num_1=Qt.Key.Key_1, num_2=Qt.Key.Key_2, num_3=Qt.Key.Key_3, num_4=Qt.Key.Key_4, num_5=Qt.Key.Key_5, num_6=Qt.Key.Key_6, num_7=Qt.Key.Key_7, num_8=Qt.Key.Key_8, num_9=Qt.Key.Key_9, colon=Qt.Key.Key_Colon, semicolon=Qt.Key.Key_Semicolon, equal=Qt.Key.Key_Equal, greater=Qt.Key.Key_Greater, question=Qt.Key.Key_Question, at=Qt.Key.Key_At, a=Qt.Key.Key_A, b=Qt.Key.Key_B, c=Qt.Key.Key_C, d=Qt.Key.Key_D, e=Qt.Key.Key_E, f=Qt.Key.Key_F, g=Qt.Key.Key_G, h=Qt.Key.Key_H, i=Qt.Key.Key_I, j=Qt.Key.Key_J, k=Qt.Key.Key_K, l=Qt.Key.Key_L, m=Qt.Key.Key_M, n=Qt.Key.Key_N, o=Qt.Key.Key_O, p=Qt.Key.Key_P, q=Qt.Key.Key_Q, r=Qt.Key.Key_R, s=Qt.Key.Key_S, t=Qt.Key.Key_T, u=Qt.Key.Key_U, v=Qt.Key.Key_V, w=Qt.Key.Key_W, x=Qt.Key.Key_X, y=Qt.Key.Key_Y, z=Qt.Key.Key_Z, bracket_left=Qt.Key.Key_BracketLeft, bracket_right=Qt.Key.Key_BracketRight, brace_left=Qt.Key.Key_BraceLeft, brace_right=Qt.Key.Key_BraceRight, ascii_tilde=Qt.Key.Key_AsciiTilde, nobreakspace=Qt.Key.Key_nobreakspace, sterling=Qt.Key.Key_sterling, currency=Qt.Key.Key_currency, brokenbar=Qt.Key.Key_brokenbar, diaeresis=Qt.Key.Key_diaeresis, copyright=Qt.Key.Key_copyright, ordfeminine=Qt.Key.Key_ordfeminine, guillemotleft=Qt.Key.Key_guillemotleft, registered=Qt.Key.Key_registered, degree=Qt.Key.Key_degree, plusminus=Qt.Key.Key_plusminus, twosuperior=Qt.Key.Key_twosuperior, threesuperior=Qt.Key.Key_threesuperior, paragraph=Qt.Key.Key_paragraph, periodcentered=Qt.Key.Key_periodcentered, onesuperior=Qt.Key.Key_onesuperior, guillemotright=Qt.Key.Key_guillemotright, threequarters=Qt.Key.Key_threequarters, aacute=Qt.Key.Key_Aacute, acircumflex=Qt.Key.Key_Acircumflex, adiaeresis=Qt.Key.Key_Adiaeresis, ccedilla=Qt.Key.Key_Ccedilla, eacute=Qt.Key.Key_Eacute, ecircumflex=Qt.Key.Key_Ecircumflex, iacute=Qt.Key.Key_Iacute, icircumflex=Qt.Key.Key_Icircumflex, ntilde=Qt.Key.Key_Ntilde, ograve=Qt.Key.Key_Ograve, oacute=Qt.Key.Key_Oacute, ocircumflex=Qt.Key.Key_Ocircumflex, odiaeresis=Qt.Key.Key_Odiaeresis, ooblique=Qt.Key.Key_Ooblique, uacute=Qt.Key.Key_Uacute, ucircumflex=Qt.Key.Key_Ucircumflex, ssharp=Qt.Key.Key_ssharp, division=Qt.Key.Key_division, ydiaeresis=Qt.Key.Key_ydiaeresis, codeinput=Qt.Key.Key_Codeinput, single_candidate=Qt.Key.Key_SingleCandidate, multiple_candidate=Qt.Key.Key_MultipleCandidate, previous_candidate=Qt.Key.Key_PreviousCandidate, muhenkan=Qt.Key.Key_Muhenkan, romaji=Qt.Key.Key_Romaji, hiragana=Qt.Key.Key_Hiragana, katakana=Qt.Key.Key_Katakana, hiragana_katakana=Qt.Key.Key_Hiragana_Katakana, hankaku=Qt.Key.Key_Hankaku, zenkaku_hankaku=Qt.Key.Key_Zenkaku_Hankaku, kana_lock=Qt.Key.Key_Kana_Lock, kana_shift=Qt.Key.Key_Kana_Shift, eisu_shift=Qt.Key.Key_Eisu_Shift, eisu_toggle=Qt.Key.Key_Eisu_toggle, hangul_start=Qt.Key.Key_Hangul_Start, hangul_hanja=Qt.Key.Key_Hangul_Hanja, hangul_romaja=Qt.Key.Key_Hangul_Romaja, hangul_jeonja=Qt.Key.Key_Hangul_Jeonja, hangul_prehanja=Qt.Key.Key_Hangul_PreHanja, hangul_posthanja=Qt.Key.Key_Hangul_PostHanja, dead_acute=Qt.Key.Key_Dead_Acute, dead_circumflex=Qt.Key.Key_Dead_Circumflex, dead_macron=Qt.Key.Key_Dead_Macron, dead_abovedot=Qt.Key.Key_Dead_Abovedot, dead_diaeresis=Qt.Key.Key_Dead_Diaeresis, dead_abovering=Qt.Key.Key_Dead_Abovering, dead_doubleacute=Qt.Key.Key_Dead_Doubleacute, dead_cedilla=Qt.Key.Key_Dead_Cedilla, dead_voiced_sound=Qt.Key.Key_Dead_Voiced_Sound, dead_semivoiced_sound=Qt.Key.Key_Dead_Semivoiced_Sound, dead_horn=Qt.Key.Key_Dead_Horn, dead_stroke=Qt.Key.Key_Dead_Stroke, dead_abovecomma=Qt.Key.Key_Dead_Abovecomma, dead_abovereversedcomma=Qt.Key.Key_Dead_Abovereversedcomma, dead_belowmacron=Qt.Key.Key_Dead_Belowmacron, dead_belowcircumflex=Qt.Key.Key_Dead_Belowcircumflex, dead_belowbreve=Qt.Key.Key_Dead_Belowbreve, dead_belowdiaeresis=Qt.Key.Key_Dead_Belowdiaeresis, dead_A=Qt.Key.Key_Dead_A, dead_e=Qt.Key.Key_Dead_e, dead_E=Qt.Key.Key_Dead_E, dead_i=Qt.Key.Key_Dead_i, dead_I=Qt.Key.Key_Dead_I, dead_o=Qt.Key.Key_Dead_o, dead_O=Qt.Key.Key_Dead_O, dead_u=Qt.Key.Key_Dead_u, dead_U=Qt.Key.Key_Dead_U, dead_small_schwa=Qt.Key.Key_Dead_Small_Schwa, dead_capital_schwa=Qt.Key.Key_Dead_Capital_Schwa, dead_lowline=Qt.Key.Key_Dead_Lowline, dead_aboveverticalline=Qt.Key.Key_Dead_Aboveverticalline, dead_belowverticalline=Qt.Key.Key_Dead_Belowverticalline, dead_longsolidusoverlay=Qt.Key.Key_Dead_Longsolidusoverlay, forward=Qt.Key.Key_Forward, refresh=Qt.Key.Key_Refresh, volume_down=Qt.Key.Key_VolumeDown, volume_mute=Qt.Key.Key_VolumeMute, bass_boost=Qt.Key.Key_BassBoost, bass_down=Qt.Key.Key_BassDown, treble_up=Qt.Key.Key_TrebleUp, treble_down=Qt.Key.Key_TrebleDown, media_stop=Qt.Key.Key_MediaStop, media_previous=Qt.Key.Key_MediaPrevious, media_record=Qt.Key.Key_MediaRecord, media_toggle_play_pause=Qt.Key.Key_MediaTogglePlayPause, favorites=Qt.Key.Key_Favorites, standby=Qt.Key.Key_Standby, open_url=Qt.Key.Key_OpenUrl, launch_mail=Qt.Key.Key_LaunchMail, launch_media=Qt.Key.Key_LaunchMedia, launch_1=Qt.Key.Key_Launch1, launch_2=Qt.Key.Key_Launch2, launch_3=Qt.Key.Key_Launch3, launch_4=Qt.Key.Key_Launch4, launch_5=Qt.Key.Key_Launch5, launch_6=Qt.Key.Key_Launch6, launch_7=Qt.Key.Key_Launch7, launch_8=Qt.Key.Key_Launch8, launch_9=Qt.Key.Key_Launch9, launch_a=Qt.Key.Key_LaunchA, launch_b=Qt.Key.Key_LaunchB, launch_c=Qt.Key.Key_LaunchC, launch_d=Qt.Key.Key_LaunchD, launch_e=Qt.Key.Key_LaunchE, launch_f=Qt.Key.Key_LaunchF, launch_g=Qt.Key.Key_LaunchG, launch_h=Qt.Key.Key_LaunchH, mon_brightness_up=Qt.Key.Key_MonBrightnessUp, mon_brightness_down=Qt.Key.Key_MonBrightnessDown, keyboard_light_on_off=Qt.Key.Key_KeyboardLightOnOff, keyboard_brightness_up=Qt.Key.Key_KeyboardBrightnessUp, keyboard_brightness_down=Qt.Key.Key_KeyboardBrightnessDown, screen_saver=Qt.Key.Key_ScreenSaver, memo=Qt.Key.Key_Memo, light_bulb=Qt.Key.Key_LightBulb, history=Qt.Key.Key_History, add_favorite=Qt.Key.Key_AddFavorite, brightness_adjust=Qt.Key.Key_BrightnessAdjust, community=Qt.Key.Key_Community, audio_rewind=Qt.Key.Key_AudioRewind, back_forward=Qt.Key.Key_BackForward, application_left=Qt.Key.Key_ApplicationLeft, application_right=Qt.Key.Key_ApplicationRight, calculator=Qt.Key.Key_Calculator, clear_grab=Qt.Key.Key_ClearGrab, display=Qt.Key.Key_Display, documents=Qt.Key.Key_Documents, explorer=Qt.Key.Key_Explorer, i_touch=Qt.Key.Key_iTouch, log_off=Qt.Key.Key_LogOff, market=Qt.Key.Key_Market, meeting=Qt.Key.Key_Meeting, menu_pb=Qt.Key.Key_MenuPB, my_sites=Qt.Key.Key_MySites, office_home=Qt.Key.Key_OfficeHome, phone=Qt.Key.Key_Phone, calendar=Qt.Key.Key_Calendar, reload=Qt.Key.Key_Reload, rotate_windows=Qt.Key.Key_RotateWindows, rotation_kb=Qt.Key.Key_RotationKB, send=Qt.Key.Key_Send, spell=Qt.Key.Key_Spell, split_screen=Qt.Key.Key_SplitScreen, task_pane=Qt.Key.Key_TaskPane, terminal=Qt.Key.Key_Terminal, travel=Qt.Key.Key_Travel, xfer=Qt.Key.Key_Xfer, zoom_in=Qt.Key.Key_ZoomIn, zoom_out=Qt.Key.Key_ZoomOut, messenger=Qt.Key.Key_Messenger, mail_forward=Qt.Key.Key_MailForward, battery=Qt.Key.Key_Battery, bluetooth=Qt.Key.Key_Bluetooth, audio_forward=Qt.Key.Key_AudioForward, audio_random_play=Qt.Key.Key_AudioRandomPlay, audio_cycle_track=Qt.Key.Key_AudioCycleTrack, hibernate=Qt.Key.Key_Hibernate, top_menu=Qt.Key.Key_TopMenu, power_down=Qt.Key.Key_PowerDown, contrast_adjust=Qt.Key.Key_ContrastAdjust, touchpad_toggle=Qt.Key.Key_TouchpadToggle, touchpad_off=Qt.Key.Key_TouchpadOff, green=Qt.Key.Key_Green, yellow=Qt.Key.Key_Yellow, channel_up=Qt.Key.Key_ChannelUp, channel_down=Qt.Key.Key_ChannelDown, settings=Qt.Key.Key_Settings, mic_volume_up=Qt.Key.Key_MicVolumeUp, mic_volume_down=Qt.Key.Key_MicVolumeDown, open=Qt.Key.Key_Open, find=Qt.Key.Key_Find, undo=Qt.Key.Key_Undo, redo=Qt.Key.Key_Redo, media_last=Qt.Key.Key_MediaLast, camera_focus=Qt.Key.Key_CameraFocus, context_2=Qt.Key.Key_Context2, context_3=Qt.Key.Key_Context3, context_4=Qt.Key.Key_Context4, hangup=Qt.Key.Key_Hangup, select=Qt.Key.Key_Select, toggle_call_hangup=Qt.Key.Key_ToggleCallHangup, last_number_redial=Qt.Key.Key_LastNumberRedial, printer=Qt.Key.Key_Printer, sleep=Qt.Key.Key_Sleep, exit=Qt.Key.Key_Exit)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.KEYBOARD_MODIFIERS","title":"<code>KEYBOARD_MODIFIERS: bidict[KeyboardModifierStr, Qt.KeyboardModifier] = bidict(none=Qt.KeyboardModifier.NoModifier, shift=Qt.KeyboardModifier.ShiftModifier, ctrl=Qt.KeyboardModifier.ControlModifier, alt=Qt.KeyboardModifier.AltModifier, meta=Qt.KeyboardModifier.MetaModifier, keypad=Qt.KeyboardModifier.KeypadModifier, group_switch=Qt.KeyboardModifier.GroupSwitchModifier)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.KEY_DELETE","title":"<code>KEY_DELETE = Qt.Key.Key_Delete</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.KEY_F11","title":"<code>KEY_F11 = Qt.Key.Key_F11</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.KeyStr","title":"<code>KeyStr = Literal['escape', 'backtab', 'backspace', 'insert', 'delete', 'print', 'sysreq', 'left', 'right', 'pageup', 'pagedown', 'control', 'altgr', 'capslock', 'scrolllock', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'super_l', 'super_r', 'hyper_l', 'hyper_r', 'direction_l', 'direction_r', 'exclam', 'quotedbl', 'numbersign', 'percent', 'ampersand', 'apostrophe', 'parenright', 'comma', 'minus', 'period', 'num_1', 'num_2', 'num_3', 'num_4', 'num_5', 'num_6', 'num_7', 'num_8', 'num_9', 'colon', 'semicolon', 'equal', 'greater', 'question', 'at', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'bracketleft', 'bracketright', 'braceleft', 'braceright', 'asciitilde', 'nobreakspace', 'sterling', 'currency', 'brokenbar', 'diaeresis', 'copyright', 'ordfeminine', 'guillemotleft', 'registered', 'degree', 'plusminus', 'twosuperior', 'threesuperior', 'paragraph', 'periodcentered', 'onesuperior', 'guillemotright', 'threequarters', 'aacute', 'acircumflex', 'adiaeresis', 'ccedilla', 'eacute', 'ecircumflex', 'iacute', 'icircumflex', 'ntilde', 'ograve', 'oacute', 'ocircumflex', 'odiaeresis', 'ooblique', 'uacute', 'ucircumflex', 'ssharp', 'division', 'ydiaeresis', 'codeinput', 'singlecandidate', 'multiplecandidate', 'previouscandidate', 'muhenkan', 'romaji', 'hiragana', 'katakana', 'hiragana_katakana', 'hankaku', 'zenkaku_hankaku', 'kana_lock', 'kana_shift', 'eisu_shift', 'eisu_toggle', 'hangul_start', 'hangul_hanja', 'hangul_romaja', 'hangul_jeonja', 'hangul_prehanja', 'hangul_posthanja', 'dead_acute', 'dead_circumflex', 'dead_macron', 'dead_abovedot', 'dead_diaeresis', 'dead_abovering', 'dead_doubleacute', 'dead_cedilla', 'dead_voiced_sound', 'dead_semivoiced_sound', 'dead_horn', 'dead_stroke', 'dead_abovecomma', 'dead_abovereversedcomma', 'dead_belowmacron', 'dead_belowcircumflex', 'dead_belowbreve', 'dead_belowdiaeresis', 'dead_A', 'dead_e', 'dead_E', 'dead_i', 'dead_I', 'dead_o', 'dead_O', 'dead_u', 'dead_U', 'dead_small_schwa', 'dead_capital_schwa', 'dead_lowline', 'dead_aboveverticalline', 'dead_belowverticalline', 'dead_longsolidusoverlay', 'forward', 'refresh', 'volumedown', 'volumemute', 'bassboost', 'bassdown', 'trebleup', 'trebledown', 'mediastop', 'mediaprevious', 'mediarecord', 'mediatoggleplaypause', 'favorites', 'standby', 'openurl', 'launchmail', 'launchmedia', 'launch1', 'launch2', 'launch3', 'launch4', 'launch5', 'launch6', 'launch7', 'launch8', 'launch9', 'launcha', 'launchb', 'launchc', 'launchd', 'launche', 'launchf', 'launchg', 'launchh', 'monbrightnessup', 'monbrightnessdown', 'keyboardlightonoff', 'keyboardbrightnessup', 'keyboardbrightnessdown', 'screensaver', 'memo', 'lightbulb', 'history', 'addfavorite', 'brightnessadjust', 'community', 'audiorewind', 'backforward', 'applicationleft', 'applicationright', 'calculator', 'cleargrab', 'display', 'documents', 'explorer', 'itouch', 'logoff', 'market', 'meeting', 'menupb', 'mysites', 'officehome', 'phone', 'calendar', 'reload', 'rotatewindows', 'rotationkb', 'send', 'spell', 'splitscreen', 'taskpane', 'terminal', 'travel', 'xfer', 'zoomin', 'zoomout', 'messenger', 'mailforward', 'battery', 'bluetooth', 'audioforward', 'audiorandomplay', 'audiocycletrack', 'hibernate', 'topmenu', 'powerdown', 'contrastadjust', 'touchpadtoggle', 'touchpadoff', 'green', 'yellow', 'channelup', 'channeldown', 'settings', 'micvolumeup', 'micvolumedown', 'open', 'find', 'undo', 'redo', 'medialast', 'camerafocus', 'context2', 'context3', 'context4', 'hangup', 'select', 'togglecallhangup', 'lastnumberredial', 'printer', 'sleep', 'exit']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.KeyboardModifierStr","title":"<code>KeyboardModifierStr = Literal['none', 'shift', 'ctrl', 'alt', 'meta', 'keypad', 'group_switch']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.LAYOUT_DIRECTION","title":"<code>LAYOUT_DIRECTION: bidict[LayoutDirectionStr, Qt.LayoutDirection] = bidict(left_to_right=Qt.LayoutDirection.LeftToRight, right_to_left=Qt.LayoutDirection.RightToLeft, auto=Qt.LayoutDirection.LayoutDirectionAuto)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.LayoutDirectionStr","title":"<code>LayoutDirectionStr = Literal['left_to_right', 'right_to_left', 'auto']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.MATCH_FLAGS","title":"<code>MATCH_FLAGS = dict(exact=Qt.MatchFlag.MatchExactly, fixed_string=Qt.MatchFlag.MatchFixedString, contains=Qt.MatchFlag.MatchContains, starts_with=Qt.MatchFlag.MatchStartsWith, ends_with=Qt.MatchFlag.MatchEndsWith, case_sensitive=Qt.MatchFlag.MatchCaseSensitive, regex=Qt.MatchFlag.MatchRegularExpression, wildcard=Qt.MatchFlag.MatchWildcard, wrap=Qt.MatchFlag.MatchWrap, recursive=Qt.MatchFlag.MatchRecursive)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.MODE_PREFERENCE","title":"<code>MODE_PREFERENCE: bidict[ImageConversionFlagStr, Qt.ImageConversionFlag] = bidict(prefer_dither=Qt.ImageConversionFlag.PreferDither, avoid_dither=Qt.ImageConversionFlag.AvoidDither, auto_dither=Qt.ImageConversionFlag.AutoDither, no_opaque_detection=Qt.ImageConversionFlag.NoOpaqueDetection, no_format_conversion=Qt.ImageConversionFlag.NoFormatConversion)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.MODIFIER_TO_KEY","title":"<code>MODIFIER_TO_KEY = {QtCore.Qt.KeyboardModifier.ShiftModifier: QtCore.Qt.Modifier.SHIFT, QtCore.Qt.KeyboardModifier.ControlModifier: QtCore.Qt.Modifier.CTRL, QtCore.Qt.KeyboardModifier.AltModifier: QtCore.Qt.Modifier.ALT, QtCore.Qt.KeyboardModifier.MetaModifier: QtCore.Qt.Modifier.META}</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.MOVE_ACTION","title":"<code>MOVE_ACTION = Qt.DropAction.MoveAction</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.MatchFlagStr","title":"<code>MatchFlagStr = Literal['exact', 'fixed_string', 'contains', 'starts_with', 'ends_with', 'case_sensitive', 'regex', 'wildcard', 'wrap', 'recursive']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ModePreferenceStr","title":"<code>ModePreferenceStr = Literal['prefer_dither', 'avoid_dither', 'auto_dither', 'no_opaque_detection', 'no_format_conversion']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.NAME_ROLE","title":"<code>NAME_ROLE = Qt.ItemDataRole(Qt.ItemDataRole.UserRole + 101)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.NAVIGATION_MODES","title":"<code>NAVIGATION_MODES: bidict[NavigationModeStr, Qt.NavigationMode] = bidict(none=Qt.NavigationMode.NavigationModeNone, keypad_tab_order=Qt.NavigationMode.NavigationModeKeypadTabOrder, keypad_directional=Qt.NavigationMode.NavigationModeKeypadDirectional, cursor_auto=Qt.NavigationMode.NavigationModeCursorAuto, cursor_force_visible=Qt.NavigationMode.NavigationModeCursorForceVisible)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.NO_CHILDREN","title":"<code>NO_CHILDREN = Qt.ItemFlag.ItemNeverHasChildren</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.NO_FLAGS","title":"<code>NO_FLAGS = Qt.ItemFlag.NoItemFlags</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.NavigationModeStr","title":"<code>NavigationModeStr = Literal['none', 'keypad_tab_order', 'keypad_directional', 'cursor_auto', 'cursor_force_visible']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ORIENTATION","title":"<code>ORIENTATION: bidict[OrientationStr, Qt.Orientation] = bidict(horizontal=Qt.Orientation.Horizontal, vertical=Qt.Orientation.Vertical)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ORIENTATION_NONE","title":"<code>ORIENTATION_NONE = Qt.Orientation(0)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.OrientationStr","title":"<code>OrientationStr = Literal['horizontal', 'vertical']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.PEN_STYLE","title":"<code>PEN_STYLE: bidict[PenStyleStr, Qt.PenStyle] = bidict(none=Qt.PenStyle.NoPen, solid=Qt.PenStyle.SolidLine, dash=Qt.PenStyle.DashLine, dot=Qt.PenStyle.DotLine, dash_dot=Qt.PenStyle.DashDotLine, dash_dot_dot=Qt.PenStyle.DashDotDotLine, custom_dash=Qt.PenStyle.CustomDashLine)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.PenStyleStr","title":"<code>PenStyleStr = Literal['none', 'solid', 'dash', 'dot', 'dash_dot', 'dash_dot_dot', 'custom_dash']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.Qt","title":"<code>Qt = QtCore.Qt</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SCREEN_ORIENTATION","title":"<code>SCREEN_ORIENTATION: bidict[ScreenOrientationStr, Qt.ScreenOrientation] = bidict(primary=Qt.ScreenOrientation.PrimaryOrientation, landscape=Qt.ScreenOrientation.LandscapeOrientation, portrait=Qt.ScreenOrientation.PortraitOrientation, inverted_landscape=Qt.ScreenOrientation.InvertedLandscapeOrientation, inverted_portrait=Qt.ScreenOrientation.InvertedPortraitOrientation)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SCROLLBAR_POLICY","title":"<code>SCROLLBAR_POLICY: bidict[ScrollBarPolicyStr, Qt.ScrollBarPolicy] = bidict(always_on=Qt.ScrollBarPolicy.ScrollBarAlwaysOn, always_off=Qt.ScrollBarPolicy.ScrollBarAlwaysOff, as_needed=Qt.ScrollBarPolicy.ScrollBarAsNeeded)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SHORTCUT_CONTEXT","title":"<code>SHORTCUT_CONTEXT: bidict[ShortcutContextStr, Qt.ShortcutContext] = bidict(widget=Qt.ShortcutContext.WidgetShortcut, widget_with_children=Qt.ShortcutContext.WidgetWithChildrenShortcut, window=Qt.ShortcutContext.WindowShortcut, application=Qt.ShortcutContext.ApplicationShortcut)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SIDES","title":"<code>SIDES = bidict(left=Qt.AlignmentFlag.AlignLeft, right=Qt.AlignmentFlag.AlignRight, top=Qt.AlignmentFlag.AlignTop, bottom=Qt.AlignmentFlag.AlignBottom)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SIZE_HINT_ROLE","title":"<code>SIZE_HINT_ROLE = Qt.ItemDataRole.SizeHintRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SORT_ROLE","title":"<code>SORT_ROLE = Qt.ItemDataRole(Qt.ItemDataRole.UserRole + 100)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.STATE","title":"<code>STATE: bidict[StateStr, Qt.CheckState] = bidict(unchecked=Qt.CheckState.Unchecked, partial=Qt.CheckState.PartiallyChecked, checked=Qt.CheckState.Checked)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.STATUSTIP_ROLE","title":"<code>STATUSTIP_ROLE = Qt.ItemDataRole.StatusTipRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ScreenOrientationStr","title":"<code>ScreenOrientationStr = Literal['primary', 'landscape', 'portrait', 'inverted_landscape', 'inverted_portrait']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ScrollBarPolicyStr","title":"<code>ScrollBarPolicyStr = Literal['always_on', 'always_off', 'as_needed']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ShortcutContextStr","title":"<code>ShortcutContextStr = Literal['widget', 'widget_with_children', 'window', 'application']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.SideStr","title":"<code>SideStr = Literal['left', 'right', 'top', 'bottom']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.StateStr","title":"<code>StateStr = Literal['unchecked', 'partial', 'checked']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TAB_FOCUS_BEHAVIOR","title":"<code>TAB_FOCUS_BEHAVIOR: bidict[TabFocusBehaviorStr, Qt.TabFocusBehavior] = bidict(none=Qt.TabFocusBehavior.NoTabFocus, text_controls=Qt.TabFocusBehavior.TabFocusTextControls, list_controls=Qt.TabFocusBehavior.TabFocusListControls, all_controls=Qt.TabFocusBehavior.TabFocusAllControls)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TEXT_WORD_WRAP","title":"<code>TEXT_WORD_WRAP = Qt.TextFlag.TextWordWrap</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TILE_RULE","title":"<code>TILE_RULE: bidict[TileRuleStr, Qt.TileRule] = bidict(stretch=Qt.TileRule.StretchTile, repeat=Qt.TileRule.RepeatTile, round=Qt.TileRule.RoundTile)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TIMER_TYPE","title":"<code>TIMER_TYPE: bidict[TimerTypeStr, Qt.TimerType] = bidict(precise=Qt.TimerType.PreciseTimer, coarse=Qt.TimerType.CoarseTimer, very_coarse=Qt.TimerType.VeryCoarseTimer)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TIME_SPEC","title":"<code>TIME_SPEC: bidict[TimeSpecStr, Qt.TimeSpec] = bidict(local_time=Qt.TimeSpec.LocalTime, utc=Qt.TimeSpec.UTC, offset_from_utc=Qt.TimeSpec.OffsetFromUTC, timezone=Qt.TimeSpec.TimeZone)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TOOLBAR_AREA","title":"<code>TOOLBAR_AREA: bidict[ToolbarAreaStr, Qt.ToolBarArea] = bidict(left=Qt.ToolBarArea.LeftToolBarArea, right=Qt.ToolBarArea.RightToolBarArea, top=Qt.ToolBarArea.TopToolBarArea, bottom=Qt.ToolBarArea.BottomToolBarArea, all=Qt.ToolBarArea.AllToolBarAreas, none=Qt.ToolBarArea.NoToolBarArea)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TOOLBUTTON_STYLE","title":"<code>TOOLBUTTON_STYLE: bidict[ToolButtonStyleStr, Qt.ToolButtonStyle] = bidict(icon=Qt.ToolButtonStyle.ToolButtonIconOnly, text=Qt.ToolButtonStyle.ToolButtonTextOnly, text_beside_icon=Qt.ToolButtonStyle.ToolButtonTextBesideIcon, text_below_icon=Qt.ToolButtonStyle.ToolButtonTextUnderIcon)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TOOLTIP_ROLE","title":"<code>TOOLTIP_ROLE = Qt.ItemDataRole.ToolTipRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TRANSFORMATION_MODE","title":"<code>TRANSFORMATION_MODE: bidict[TransformationModeStr, Qt.TransformationMode] = bidict(fast=Qt.TransformationMode.FastTransformation, smooth=Qt.TransformationMode.SmoothTransformation)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TabFocusBehaviorStr","title":"<code>TabFocusBehaviorStr = Literal['none', 'text_controls', 'list_controls', 'all_controls']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ThemeStr","title":"<code>ThemeStr = Literal['default', 'dark']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TileRuleStr","title":"<code>TileRuleStr = Literal['stretch', 'repeat', 'round']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TimeSpecStr","title":"<code>TimeSpecStr = Literal['local_time', 'utc', 'offset_from_utc', 'timezone']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TimerTypeStr","title":"<code>TimerTypeStr = Literal['precise', 'coarse', 'very_coarse']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ToolButtonStyleStr","title":"<code>ToolButtonStyleStr = Literal['icon', 'text', 'text_beside_icon', 'text_below_icon']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.ToolbarAreaStr","title":"<code>ToolbarAreaStr = Literal['top', 'bottom', 'left', 'right', 'all', 'none']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.TransformationModeStr","title":"<code>TransformationModeStr = Literal['fast', 'smooth']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.UI_EFFECTS","title":"<code>UI_EFFECTS: bidict[UiEffectStr, Qt.UIEffect] = bidict(animate_menu=Qt.UIEffect.UI_AnimateMenu, fade_menu=Qt.UIEffect.UI_FadeMenu, animate_combo=Qt.UIEffect.UI_AnimateCombo, animate_tooltip=Qt.UIEffect.UI_AnimateTooltip, fade_tooltip=Qt.UIEffect.UI_FadeTooltip, animate_toolbox=Qt.UIEffect.UI_AnimateToolBox)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.USER_ROLE","title":"<code>USER_ROLE = Qt.ItemDataRole.UserRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.UiEffectStr","title":"<code>UiEffectStr = Literal['animate_menu', 'fade_menu', 'animate_combo', 'animate_tooltip', 'fade_tooltip', 'animate_toolbox']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.VERTICAL","title":"<code>VERTICAL = Qt.Orientation.Vertical</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.V_ALIGNMENT","title":"<code>V_ALIGNMENT = bidict(top=Qt.AlignmentFlag.AlignTop, bottom=Qt.AlignmentFlag.AlignBottom, center=Qt.AlignmentFlag.AlignVCenter, baseline=Qt.AlignmentFlag.AlignBaseline)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.VerticalAlignmentStr","title":"<code>VerticalAlignmentStr = Literal['top', 'bottom', 'center', 'baseline']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WHATS_THIS_ROLE","title":"<code>WHATS_THIS_ROLE = Qt.ItemDataRole.WhatsThisRole</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WIDGET_ATTRIBUTE","title":"<code>WIDGET_ATTRIBUTE: bidict[WidgetAttributeStr, Qt.WidgetAttribute] = bidict(accept_drops=Attr.WA_AcceptDrops, always_show_tooltips=Attr.WA_AlwaysShowToolTips, custom_whats_this=Attr.WA_CustomWhatsThis, delete_on_close=Attr.WA_DeleteOnClose, disabled=Attr.WA_Disabled, dont_show_on_screen=Attr.WA_DontShowOnScreen, force_disabled=Attr.WA_ForceDisabled, force_updates_disabled=Attr.WA_ForceUpdatesDisabled, hover=Attr.WA_Hover, input_method_enabled=Attr.WA_InputMethodEnabled, keyboard_focus_change=Attr.WA_KeyboardFocusChange, key_compression=Attr.WA_KeyCompression, layout_on_entire_rect=Attr.WA_LayoutOnEntireRect, layout_uses_widget_rect=Attr.WA_LayoutUsesWidgetRect, mac_opaque_size_grip=Attr.WA_MacOpaqueSizeGrip, mac_show_focus_rect=Attr.WA_MacShowFocusRect, mac_normal_size=Attr.WA_MacNormalSize, mac_small_size=Attr.WA_MacSmallSize, mac_mini_size=Attr.WA_MacMiniSize, mapped=Attr.WA_Mapped, mouse_no_mask=Attr.WA_MouseNoMask, mouse_tracking=Attr.WA_MouseTracking, moved=Attr.WA_Moved, no_child_events_for_parent=Attr.WA_NoChildEventsForParent, no_child_events_from_children=Attr.WA_NoChildEventsFromChildren, no_mouse_replay=Attr.WA_NoMouseReplay, no_mouse_propagation=Attr.WA_NoMousePropagation, transparent_for_mouse_events=Attr.WA_TransparentForMouseEvents, no_system_background=Attr.WA_NoSystemBackground, opaque_paint_event=Attr.WA_OpaquePaintEvent, outside_ws_range=Attr.WA_OutsideWSRange, paint_on_screen=Attr.WA_PaintOnScreen, paint_unclipped=Attr.WA_PaintUnclipped, pending_move_event=Attr.WA_PendingMoveEvent, pending_resize_egent=Attr.WA_PendingResizeEvent, quit_on_close=Attr.WA_QuitOnClose, resized=Attr.WA_Resized, right_to_left=Attr.WA_RightToLeft, set_cursor=Attr.WA_SetCursor, set_font=Attr.WA_SetFont, set_palette=Attr.WA_SetPalette, set_style=Attr.WA_SetStyle, static_contents=Attr.WA_StaticContents, style_sheet=Attr.WA_StyleSheet, style_sheet_target=Attr.WA_StyleSheetTarget, tablet_tracking=Attr.WA_TabletTracking, translucent_background=Attr.WA_TranslucentBackground, under_mouse=Attr.WA_UnderMouse, updates_disabled=Attr.WA_UpdatesDisabled, window_modified=Attr.WA_WindowModified, window_propagation=Attr.WA_WindowPropagation, mac_always_show_tool_window=Attr.WA_MacAlwaysShowToolWindow, set_locale=Attr.WA_SetLocale, styled_background=Attr.WA_StyledBackground, show_without_activating=Attr.WA_ShowWithoutActivating, native_window=Attr.WA_NativeWindow, dont_create_native_ancestors=Attr.WA_DontCreateNativeAncestors, x11_net_wm_window_type_desktop=Attr.WA_X11NetWmWindowTypeDesktop, x11_net_wm_window_type_dock=Attr.WA_X11NetWmWindowTypeDock, x11_net_wm_window_type_toolbar=Attr.WA_X11NetWmWindowTypeToolBar, x11_net_wm_window_type_menu=Attr.WA_X11NetWmWindowTypeMenu, x11_net_wm_window_type_utility=Attr.WA_X11NetWmWindowTypeUtility, x11_net_wm_window_type_splash=Attr.WA_X11NetWmWindowTypeSplash, x11_net_wm_window_type_dialog=Attr.WA_X11NetWmWindowTypeDialog, x11_net_wm_window_type_dropdown_menu=Attr.WA_X11NetWmWindowTypeDropDownMenu, x11_net_wm_window_type_popup_menu=Attr.WA_X11NetWmWindowTypePopupMenu, x11_net_wm_window_type_tooltip=Attr.WA_X11NetWmWindowTypeToolTip, x11_net_wm_window_type_notification=Attr.WA_X11NetWmWindowTypeNotification, x11_net_wm_window_type_combo=Attr.WA_X11NetWmWindowTypeCombo, x11_net_wm_window_type_dnd=Attr.WA_X11NetWmWindowTypeDND, accept_touch_events=Attr.WA_AcceptTouchEvents, touch_pad_single_touch_events=Attr.WA_TouchPadAcceptSingleTouchEvents, x11_do_not_accept_focus=Attr.WA_X11DoNotAcceptFocus, always_stack_on_top=Attr.WA_AlwaysStackOnTop, contents_margins_respects_safe_area=Attr.WA_ContentsMarginsRespectsSafeArea)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WINDOW_FRAME_SECTION","title":"<code>WINDOW_FRAME_SECTION: bidict[WindowFrameSectionStr, Qt.WindowFrameSection] = bidict(none=Qt.WindowFrameSection.NoSection, left=Qt.WindowFrameSection.LeftSection, top_left=Qt.WindowFrameSection.TopLeftSection, top=Qt.WindowFrameSection.TopSection, top_right=Qt.WindowFrameSection.TopRightSection, right=Qt.WindowFrameSection.RightSection, bottom_right=Qt.WindowFrameSection.BottomRightSection, bottom=Qt.WindowFrameSection.BottomSection, bottom_left=Qt.WindowFrameSection.BottomLeftSection, title_bar=Qt.WindowFrameSection.TitleBarArea)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WINDOW_MODALITY","title":"<code>WINDOW_MODALITY: bidict[WindowModalityStr, Qt.WindowModality] = bidict(window=Qt.WindowModality.WindowModal, application=Qt.WindowModality.ApplicationModal, none=Qt.WindowModality.NonModal)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WINDOW_STATES","title":"<code>WINDOW_STATES = bidict(none=Qt.WindowState.WindowNoState, minimized=Qt.WindowState.WindowMinimized, maximized=Qt.WindowState.WindowMaximized, fullscreen=Qt.WindowState.WindowFullScreen, active=Qt.WindowState.WindowActive)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WINDOW_TYPE","title":"<code>WINDOW_TYPE: bidict[WindowTypeStr, Qt.WindowType] = bidict(frameless=Qt.WindowType.FramelessWindowHint, popup=Qt.WindowType.Popup, stay_on_top=Qt.WindowType.WindowStaysOnTopHint, tool=Qt.WindowType.Tool, window_title=Qt.WindowType.WindowTitleHint, customize_window=Qt.WindowType.CustomizeWindowHint)</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WidgetAttributeStr","title":"<code>WidgetAttributeStr = Literal['accept_drops', 'always_show_tooltips', 'custom_whats_this', 'delete_on_close', 'disabled', 'dont_show_on_screen', 'force_disabled', 'force_updates_disabled', 'hover', 'input_method_enabled', 'keyboard_focus_change', 'key_compression', 'layout_on_entire_rect', 'layout_uses_widget_rect', 'mac_opaque_size_grip', 'mac_show_focus_rect', 'mac_normal_size', 'mac_small_size', 'mac_mini_size', 'mapped', 'mouse_no_mask', 'mouse_tracking', 'moved', 'no_child_events_for_parent', 'no_child_events_from_children', 'no_mouse_replay', 'no_mouse_propagation', 'transparent_for_mouse_events', 'no_system_background', 'opaque_paint_event', 'outside_ws_range', 'paint_on_screen', 'paint_unclipped', 'pending_move_event', 'pending_resize_egent', 'quit_on_close', 'resized', 'right_to_left', 'set_cursor', 'set_font', 'set_palette', 'set_style', 'show_modal', 'static_contents', 'style_sheet', 'style_sheet_target', 'tablet_tracking', 'translucent_background', 'under_mouse', 'updates_disabled', 'window_modified', 'window_propagation', 'mac_always_show_tool_window', 'set_locale', 'styled_background', 'show_without_activating', 'native_window', 'dont_create_native_ancestors', 'x11_net_wm_window_type_desktop', 'x11_net_wm_window_type_dock', 'x11_net_wm_window_type_toolbar', 'x11_net_wm_window_type_menu', 'x11_net_wm_window_type_utility', 'x11_net_wm_window_type_splash', 'x11_net_wm_window_type_dialog', 'x11_net_wm_window_type_dropdown_menu', 'x11_net_wm_window_type_popup_menu', 'x11_net_wm_window_type_tooltip', 'x11_net_wm_window_type_notification', 'x11_net_wm_window_type_combo', 'x11_net_wm_window_type_dnd', 'accept_touch_events', 'touch_pad_single_touch_events', 'x11_do_not_accept_focus', 'always_stack_on_top', 'contents_margins_respects_safe_area']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WindowFrameSectionStr","title":"<code>WindowFrameSectionStr = Literal['none', 'text', 'text_beside_icon', 'text_below_icon']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WindowModalityStr","title":"<code>WindowModalityStr = Literal['window', 'application', 'none']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WindowStateStr","title":"<code>WindowStateStr = Literal['none', 'minimized', 'maximized', 'fullscreen', 'active']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.WindowTypeStr","title":"<code>WindowTypeStr = Literal['frameless', 'popup', 'stay_on_top', 'tool', 'window_title', 'customize_window']</code>  <code>module-attribute</code>","text":""},{"location":"api/constants.html#prettyqt.constants.__getattr__","title":"<code>__getattr__(name: str)</code>","text":"Source code in <code>prettyqt\\constants\\__init__.py</code> <pre><code>def __getattr__(name: str):\nreturn getattr(Qt, name)\n</code></pre>"},{"location":"api/core.html","title":"core module","text":"<p>Core module.</p> <p>Contains QtCore-based classes</p>"},{"location":"api/core.html#prettyqt.core.__all__","title":"<code>__all__ = ['app', 'Event', 'ChildEvent', 'TimerEvent', 'Enum', 'ClassInfo', 'Q_ARG', 'Q_RETURN_ARG', 'DynamicPropertyChangeEvent', 'MetaEnum', 'LoggingCategory', 'MetaMethod', 'MetaProperty', 'MetaType', 'MetaObject', 'Object', 'ObjectMixin', 'CryptographicHash', 'Uuid', 'UuidMixin', 'SignalBlocker', 'AbstractNativeEventFilter', 'SignalMapper', 'SocketNotifier', 'DeadlineTimer', 'ElapsedTimer', 'BasicTimer', 'Margins', 'MarginsF', 'Locale', 'AbstractEventDispatcher', 'Resource', 'TextStream', 'EventLoop', 'DataStream', 'VersionNumber', 'OperatingSystemVersion', 'LibraryInfo', 'ModelRoleData', 'PersistentModelIndex', 'ByteArray', 'ByteArrayMatcher', 'Url', 'Library', 'PluginLoader', 'UrlQuery', 'CoreApplication', 'CoreApplicationMixin', 'FileSystemWatcher', 'FileSelector', 'IODevice', 'IODeviceMixin', 'FileDevice', 'FileDeviceMixin', 'File', 'FileMixin', 'SaveFile', 'LockFile', 'TemporaryFile', 'Buffer', 'Settings', 'TimeZone', 'Date', 'Time', 'DateTime', 'Calendar', 'Size', 'SizeF', 'FileInfo', 'StorageInfo', 'Point', 'PointF', 'Line', 'LineF', 'EasingCurve', 'ProcessEnvironment', 'TimeLine', 'RandomGenerator', 'AbstractAnimation', 'AbstractAnimationMixin', 'AnimationGroup', 'AnimationGroupMixin', 'ParallelAnimationGroup', 'SequentialAnimationGroup', 'VariantAnimation', 'VariantAnimationMixin', 'PropertyAnimation', 'PauseAnimation', 'TextBoundaryFinder', 'Timer', 'Translator', 'Thread', 'Process', 'Rect', 'RectF', 'MimeType', 'MimeData', 'MimeDatabase', 'Dir', 'TemporaryDir', 'KeyCombination', 'DirIterator', 'ItemSelectionModel', 'ItemSelection', 'ItemSelectionRange', 'Slot', 'Property', 'RegularExpressionMatch', 'RegularExpressionMatchIterator', 'RegularExpression', 'Runnable', 'ModelIndex', 'ThreadPool', 'Signal', 'AbstractItemModel', 'AbstractItemModelMixin', 'AbstractProxyModel', 'AbstractProxyModelMixin', 'IdentityProxyModel', 'AbstractListModel', 'AbstractListModelMixin', 'StringListModel', 'StringListModelMixin', 'SortFilterProxyModel', 'ConcatenateTablesProxyModel', 'TransposeProxyModel', 'AbstractTableModel', 'AbstractTableModelMixin', 'StandardPaths', 'XmlStreamReader', 'AbstractState', 'FinalState', 'HistoryState', 'State', 'StateMachine', 'AbstractTransition', 'SignalTransition', 'EventTransition', 'CommandLineOption', 'CommandLineParser', 'install_message_handler', 'CollatorSortKey', 'Collator', 'JsonValue', 'JsonDocument', 'CriticalMsg', 'DebugMsg', 'FatalMsg', 'InfoMsg', 'MsgType', 'SystemMsg', 'WarningMsg', 'Semaphore', 'Mutex', 'SharedMemory']</code>  <code>module-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.AbstractAnimation","title":"<code>AbstractAnimation</code>","text":"<p>         Bases: <code>AbstractAnimationMixin</code>, <code>QtCore.QAbstractAnimation</code></p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>class AbstractAnimation(AbstractAnimationMixin, QtCore.QAbstractAnimation):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractAnimationMixin","title":"<code>AbstractAnimationMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>class AbstractAnimationMixin(core.ObjectMixin):\ndef __len__(self):\nreturn self.duration()\ndef __and__(self, other: QtCore.QAbstractAnimation) -&gt; core.SequentialAnimationGroup:\ngroup = core.SequentialAnimationGroup()\ngroup.addAnimation(self)\ngroup.addAnimation(other)\nreturn group\ndef __or__(self, other: QtCore.QAbstractAnimation) -&gt; core.ParallelAnimationGroup:\ngroup = core.ParallelAnimationGroup()\ngroup.addAnimation(self)\ngroup.addAnimation(other)\nreturn group\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"direction\": DIRECTION, \"state\": STATE}\nreturn maps\ndef set_direction(self, direction: DirectionStr):\n\"\"\"Set animation direction.\n        Args:\n            direction: animation direction\n        Raises:\n            InvalidParamError: animation direction does not exist\n        \"\"\"\nif direction not in DIRECTION:\nraise InvalidParamError(direction, DIRECTION)\nself.setDirection(DIRECTION[direction])\ndef get_direction(self) -&gt; DirectionStr:\n\"\"\"Get the current animation direction.\n        Returns:\n            animation direction\n        \"\"\"\nreturn DIRECTION.inverse[self.direction()]\ndef get_state(self) -&gt; StateStr:\n\"\"\"Get the current animation state.\n        Returns:\n            animation state\n        \"\"\"\nreturn STATE.inverse[self.state()]\ndef start_animation(self, policy: DeletionPolicyStr = \"keep\"):\n\"\"\"Start the animation.\n        Args:\n            policy: animation policy\n        Raises:\n            InvalidParamError: animation policy does not exist\n        \"\"\"\nif policy not in DELETION_POLICY:\nraise InvalidParamError(policy, DELETION_POLICY)\nself.start(DELETION_POLICY[policy])\ndef restart_animation(self, policy: DeletionPolicyStr = \"keep\"):\n\"\"\"Restart the animation.\n        Args:\n            policy: animation policy\n        Raises:\n            InvalidParamError: animation policy does not exist\n        \"\"\"\nself.stop()\nself.start_animation(policy)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.__and__","title":"<code>__and__(other: QtCore.QAbstractAnimation) -&gt; core.SequentialAnimationGroup</code>","text":"Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def __and__(self, other: QtCore.QAbstractAnimation) -&gt; core.SequentialAnimationGroup:\ngroup = core.SequentialAnimationGroup()\ngroup.addAnimation(self)\ngroup.addAnimation(other)\nreturn group\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def __len__(self):\nreturn self.duration()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.__or__","title":"<code>__or__(other: QtCore.QAbstractAnimation) -&gt; core.ParallelAnimationGroup</code>","text":"Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def __or__(self, other: QtCore.QAbstractAnimation) -&gt; core.ParallelAnimationGroup:\ngroup = core.ParallelAnimationGroup()\ngroup.addAnimation(self)\ngroup.addAnimation(other)\nreturn group\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.get_direction","title":"<code>get_direction() -&gt; DirectionStr</code>","text":"<p>Get the current animation direction.</p> <p>Returns:</p> Type Description <code>DirectionStr</code> <p>animation direction</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def get_direction(self) -&gt; DirectionStr:\n\"\"\"Get the current animation direction.\n    Returns:\n        animation direction\n    \"\"\"\nreturn DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Get the current animation state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>animation state</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Get the current animation state.\n    Returns:\n        animation state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.restart_animation","title":"<code>restart_animation(policy: DeletionPolicyStr = 'keep')</code>","text":"<p>Restart the animation.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>DeletionPolicyStr</code> <p>animation policy</p> <code>'keep'</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>animation policy does not exist</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def restart_animation(self, policy: DeletionPolicyStr = \"keep\"):\n\"\"\"Restart the animation.\n    Args:\n        policy: animation policy\n    Raises:\n        InvalidParamError: animation policy does not exist\n    \"\"\"\nself.stop()\nself.start_animation(policy)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.set_direction","title":"<code>set_direction(direction: DirectionStr)</code>","text":"<p>Set animation direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>DirectionStr</code> <p>animation direction</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>animation direction does not exist</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def set_direction(self, direction: DirectionStr):\n\"\"\"Set animation direction.\n    Args:\n        direction: animation direction\n    Raises:\n        InvalidParamError: animation direction does not exist\n    \"\"\"\nif direction not in DIRECTION:\nraise InvalidParamError(direction, DIRECTION)\nself.setDirection(DIRECTION[direction])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.start_animation","title":"<code>start_animation(policy: DeletionPolicyStr = 'keep')</code>","text":"<p>Start the animation.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>DeletionPolicyStr</code> <p>animation policy</p> <code>'keep'</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>animation policy does not exist</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def start_animation(self, policy: DeletionPolicyStr = \"keep\"):\n\"\"\"Start the animation.\n    Args:\n        policy: animation policy\n    Raises:\n        InvalidParamError: animation policy does not exist\n    \"\"\"\nif policy not in DELETION_POLICY:\nraise InvalidParamError(policy, DELETION_POLICY)\nself.start(DELETION_POLICY[policy])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractEventDispatcher","title":"<code>AbstractEventDispatcher</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QAbstractEventDispatcher</code></p> Source code in <code>prettyqt\\core\\abstracteventdispatcher.py</code> <pre><code>class AbstractEventDispatcher(core.ObjectMixin, QtCore.QAbstractEventDispatcher):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractItemModel","title":"<code>AbstractItemModel</code>","text":"<p>         Bases: <code>AbstractItemModelMixin</code>, <code>QtCore.QAbstractItemModel</code></p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>class AbstractItemModel(AbstractItemModelMixin, QtCore.QAbstractItemModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractItemModelMixin","title":"<code>AbstractItemModelMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>class AbstractItemModelMixin(core.ObjectMixin):\nDEFAULT_FLAGS = (\nconstants.DRAG_ENABLED | constants.IS_ENABLED | constants.IS_SELECTABLE\n)\ndef __repr__(self):\nreturn f\"{type(self).__name__}: {self.rowCount()} rows\"\ndef __len__(self) -&gt; int:\n\"\"\"Return amount of rows.\"\"\"\nreturn self.rowCount()\n@classmethod\ndef ci(\ncls,\nindex_is_valid: bool = False,\ndo_not_use_parent: bool = False,\nparent_is_invalid: bool = False,\n):\ndef inner(method):\ndef wrapper(\nref: AbstractItemModelMixin, index: QtCore.QModelIndex, *args, **kwargs\n):\nif ref.check_index(\nindex, index_is_valid, do_not_use_parent, parent_is_invalid\n):\nreturn method(ref, index, *args, **kwargs)\nelse:\nraise TypeError(\"Invalid index\")\nreturn wrapper\nreturn inner\ndef check_index(\nself,\nindex: QtCore.QModelIndex,\nindex_is_valid: bool = False,\ndo_not_use_parent: bool = False,\nparent_is_invalid: bool = False,\n) -&gt; bool:\nflag = QtCore.QAbstractItemModel.CheckIndexOption.NoOption\nif index_is_valid:\nflag |= CHECK_INDEX_OPTIONS[\"index_is_valid\"]  # type: ignore\nif do_not_use_parent:\nflag |= CHECK_INDEX_OPTIONS[\"do_not_use_parent\"]  # type: ignore\nif parent_is_invalid:\nflag |= CHECK_INDEX_OPTIONS[\"parent_is_invalid\"]  # type: ignore\ncheck_flag = QtCore.QAbstractItemModel.CheckIndexOption(0) | flag  # type: ignore\nreturn self.checkIndex(index, check_flag)  # type: ignore\n@contextlib.contextmanager\ndef change_layout(self):\n\"\"\"Context manager to change the layout.\n        wraps calls with correct signals\n        emitted at beginning: layoutAboutToBeChanged\n        emitted at end: layoutChanged\n        \"\"\"\nself.layoutAboutToBeChanged.emit()\nyield None\nself.layoutChanged.emit()\n@contextlib.contextmanager\ndef reset_model(self):\n\"\"\"Context manager to reset the model.\n        wraps calls with correct signals\n        emitted at beginning: beginResetModel\n        emitted at end: endResetModel\n        \"\"\"\nself.beginResetModel()\nyield None\nself.endResetModel()\ndef update_row(self, row: int):\nstart_index = self.index(row, 0)\nend_index = self.index(row, self.columnCount() - 1)\nself.dataChanged.emit(start_index, end_index)\ndef update_all(self):\ntop_left = self.index(0, 0)\nbottom_right = self.index(self.rowCount() - 1, self.columnCount() - 1)\nself.dataChanged.emit(top_left, bottom_right)\n@contextlib.contextmanager\ndef remove_rows(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginRemoveRows(parent, first, last)\nyield None\nself.endRemoveRows()\n@contextlib.contextmanager\ndef remove_columns(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginRemoveColumns(parent, first, last)\nyield None\nself.endRemoveColumns()\n@contextlib.contextmanager\ndef insert_rows(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginInsertRows(parent, first, last)\nyield None\nself.endInsertRows()\n@contextlib.contextmanager\ndef append_rows(self, num_rows: int, parent: QtCore.QModelIndex | None = None):\nparent = QtCore.QModelIndex() if parent is None else parent\nrow_count = self.rowCount()\nself.beginInsertRows(parent, row_count, row_count + num_rows - 1)\nyield None\nself.endInsertRows()\n@contextlib.contextmanager\ndef insert_columns(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginInsertColumns(parent, first, last)\nyield None\nself.endInsertColumns()\ndef force_reset(self):\nself.beginResetModel()\nself.endResetModel()\ndef force_layoutchange(self):\nself.layoutAboutToBeChanged.emit()\nself.layoutChanged.emit()\ndef get_role_names(self) -&gt; dict[int, str]:\nreturn {i: v.data().decode() for i, v in self.roleNames().items()}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.DEFAULT_FLAGS","title":"<code>DEFAULT_FLAGS = constants.DRAG_ENABLED | constants.IS_ENABLED | constants.IS_SELECTABLE</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return amount of rows.</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def __len__(self) -&gt; int:\n\"\"\"Return amount of rows.\"\"\"\nreturn self.rowCount()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}: {self.rowCount()} rows\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.append_rows","title":"<code>append_rows(num_rows: int, parent: QtCore.QModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef append_rows(self, num_rows: int, parent: QtCore.QModelIndex | None = None):\nparent = QtCore.QModelIndex() if parent is None else parent\nrow_count = self.rowCount()\nself.beginInsertRows(parent, row_count, row_count + num_rows - 1)\nyield None\nself.endInsertRows()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.change_layout","title":"<code>change_layout()</code>","text":"<p>Context manager to change the layout.</p> <p>wraps calls with correct signals emitted at beginning: layoutAboutToBeChanged emitted at end: layoutChanged</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef change_layout(self):\n\"\"\"Context manager to change the layout.\n    wraps calls with correct signals\n    emitted at beginning: layoutAboutToBeChanged\n    emitted at end: layoutChanged\n    \"\"\"\nself.layoutAboutToBeChanged.emit()\nyield None\nself.layoutChanged.emit()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.check_index","title":"<code>check_index(index: QtCore.QModelIndex, index_is_valid: bool = False, do_not_use_parent: bool = False, parent_is_invalid: bool = False) -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def check_index(\nself,\nindex: QtCore.QModelIndex,\nindex_is_valid: bool = False,\ndo_not_use_parent: bool = False,\nparent_is_invalid: bool = False,\n) -&gt; bool:\nflag = QtCore.QAbstractItemModel.CheckIndexOption.NoOption\nif index_is_valid:\nflag |= CHECK_INDEX_OPTIONS[\"index_is_valid\"]  # type: ignore\nif do_not_use_parent:\nflag |= CHECK_INDEX_OPTIONS[\"do_not_use_parent\"]  # type: ignore\nif parent_is_invalid:\nflag |= CHECK_INDEX_OPTIONS[\"parent_is_invalid\"]  # type: ignore\ncheck_flag = QtCore.QAbstractItemModel.CheckIndexOption(0) | flag  # type: ignore\nreturn self.checkIndex(index, check_flag)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.ci","title":"<code>ci(index_is_valid: bool = False, do_not_use_parent: bool = False, parent_is_invalid: bool = False)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@classmethod\ndef ci(\ncls,\nindex_is_valid: bool = False,\ndo_not_use_parent: bool = False,\nparent_is_invalid: bool = False,\n):\ndef inner(method):\ndef wrapper(\nref: AbstractItemModelMixin, index: QtCore.QModelIndex, *args, **kwargs\n):\nif ref.check_index(\nindex, index_is_valid, do_not_use_parent, parent_is_invalid\n):\nreturn method(ref, index, *args, **kwargs)\nelse:\nraise TypeError(\"Invalid index\")\nreturn wrapper\nreturn inner\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.force_layoutchange","title":"<code>force_layoutchange()</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def force_layoutchange(self):\nself.layoutAboutToBeChanged.emit()\nself.layoutChanged.emit()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.force_reset","title":"<code>force_reset()</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def force_reset(self):\nself.beginResetModel()\nself.endResetModel()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_role_names","title":"<code>get_role_names() -&gt; dict[int, str]</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_role_names(self) -&gt; dict[int, str]:\nreturn {i: v.data().decode() for i, v in self.roleNames().items()}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.insert_columns","title":"<code>insert_columns(first: int | None = None, last: int | None = None, parent: QtCore.QModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef insert_columns(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginInsertColumns(parent, first, last)\nyield None\nself.endInsertColumns()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.insert_rows","title":"<code>insert_rows(first: int | None = None, last: int | None = None, parent: QtCore.QModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef insert_rows(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginInsertRows(parent, first, last)\nyield None\nself.endInsertRows()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.remove_columns","title":"<code>remove_columns(first: int | None = None, last: int | None = None, parent: QtCore.QModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef remove_columns(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginRemoveColumns(parent, first, last)\nyield None\nself.endRemoveColumns()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.remove_rows","title":"<code>remove_rows(first: int | None = None, last: int | None = None, parent: QtCore.QModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef remove_rows(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: QtCore.QModelIndex | None = None,\n):\nparent = QtCore.QModelIndex() if parent is None else parent\nfirst = first if first is not None else 0\nlast = last if last is not None else self.rowCount()\nself.beginRemoveRows(parent, first, last)\nyield None\nself.endRemoveRows()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.reset_model","title":"<code>reset_model()</code>","text":"<p>Context manager to reset the model.</p> <p>wraps calls with correct signals emitted at beginning: beginResetModel emitted at end: endResetModel</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef reset_model(self):\n\"\"\"Context manager to reset the model.\n    wraps calls with correct signals\n    emitted at beginning: beginResetModel\n    emitted at end: endResetModel\n    \"\"\"\nself.beginResetModel()\nyield None\nself.endResetModel()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.update_all","title":"<code>update_all()</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def update_all(self):\ntop_left = self.index(0, 0)\nbottom_right = self.index(self.rowCount() - 1, self.columnCount() - 1)\nself.dataChanged.emit(top_left, bottom_right)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.update_row","title":"<code>update_row(row: int)</code>","text":"Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def update_row(self, row: int):\nstart_index = self.index(row, 0)\nend_index = self.index(row, self.columnCount() - 1)\nself.dataChanged.emit(start_index, end_index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractListModel","title":"<code>AbstractListModel</code>","text":"<p>         Bases: <code>AbstractListModelMixin</code>, <code>QtCore.QAbstractListModel</code></p> Source code in <code>prettyqt\\core\\abstractlistmodel.py</code> <pre><code>class AbstractListModel(AbstractListModelMixin, QtCore.QAbstractListModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractListModelMixin","title":"<code>AbstractListModelMixin</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\core\\abstractlistmodel.py</code> <pre><code>class AbstractListModelMixin(core.AbstractItemModelMixin):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractNativeEventFilter","title":"<code>AbstractNativeEventFilter</code>","text":"<p>         Bases: <code>QtCore.QAbstractNativeEventFilter</code></p> Source code in <code>prettyqt\\core\\abstractnativeeventfilter.py</code> <pre><code>class AbstractNativeEventFilter(QtCore.QAbstractNativeEventFilter):\ndef install(self):\n# theres also QCoreApplication::installNativeEventFilter. Not sure abt difference\nQtCore.QAbstractEventDispatcher.instance().installNativeEventFilter(self)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractnativeeventfilter.AbstractNativeEventFilter.install","title":"<code>install()</code>","text":"Source code in <code>prettyqt\\core\\abstractnativeeventfilter.py</code> <pre><code>def install(self):\n# theres also QCoreApplication::installNativeEventFilter. Not sure abt difference\nQtCore.QAbstractEventDispatcher.instance().installNativeEventFilter(self)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractProxyModel","title":"<code>AbstractProxyModel</code>","text":"<p>         Bases: <code>AbstractProxyModelMixin</code>, <code>QtCore.QAbstractProxyModel</code></p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>class AbstractProxyModel(AbstractProxyModelMixin, QtCore.QAbstractProxyModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractProxyModelMixin","title":"<code>AbstractProxyModelMixin</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>class AbstractProxyModelMixin(core.AbstractItemModelMixin):\ndef first_item_index(self) -&gt; core.ModelIndex:\n\"\"\"Return the first child of the root item.\"\"\"\n# We cannot just call the same function of the source model because the first node\n# there may be hidden.\nproxy_root_index = self.mapFromSource(core.ModelIndex())\nreturn self.index(0, 0, proxy_root_index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstractproxymodel.AbstractProxyModelMixin.first_item_index","title":"<code>first_item_index() -&gt; core.ModelIndex</code>","text":"<p>Return the first child of the root item.</p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>def first_item_index(self) -&gt; core.ModelIndex:\n\"\"\"Return the first child of the root item.\"\"\"\n# We cannot just call the same function of the source model because the first node\n# there may be hidden.\nproxy_root_index = self.mapFromSource(core.ModelIndex())\nreturn self.index(0, 0, proxy_root_index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractTableModel","title":"<code>AbstractTableModel</code>","text":"<p>         Bases: <code>AbstractTableModelMixin</code>, <code>QtCore.QAbstractTableModel</code></p> Source code in <code>prettyqt\\core\\abstracttablemodel.py</code> <pre><code>class AbstractTableModel(AbstractTableModelMixin, QtCore.QAbstractTableModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AbstractTableModelMixin","title":"<code>AbstractTableModelMixin</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\core\\abstracttablemodel.py</code> <pre><code>class AbstractTableModelMixin(core.AbstractItemModelMixin):\nDEFAULT_FLAGS = (\nconstants.DRAG_ENABLED\n| constants.IS_ENABLED\n| constants.IS_SELECTABLE\n| constants.NO_CHILDREN\n)\n@overload\ndef __getitem__(self, index: tuple[int, int]) -&gt; QtCore.QModelIndex:\n...\n@overload\ndef __getitem__(\nself, index: tuple[slice, int] | tuple[int, slice]\n) -&gt; list[QtCore.QModelIndex]:\n...\ndef __getitem__(\nself, index: tuple[int | slice, int | slice]\n) -&gt; QtCore.QModelIndex | list[QtCore.QModelIndex]:\nrow, col = index\nmatch row, col:\ncase slice(), slice():\nraise ValueError(\"Only one of indexes can be a slice\")\ncase slice(), int():\ncount = self.rowCount() if row.stop is None else row.stop\nvalues = list(range(count)[row])\nreturn [self.index(i, col) for i in values]\ncase int(), slice():\ncount = self.columnCount() if col.stop is None else col.stop\nvalues = list(range(col.stop)[col])\nreturn [self.index(row, i) for i in values]\ncase int(), int():\nreturn self.index(row, col)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.abstracttablemodel.AbstractTableModelMixin.DEFAULT_FLAGS","title":"<code>DEFAULT_FLAGS = constants.DRAG_ENABLED | constants.IS_ENABLED | constants.IS_SELECTABLE | constants.NO_CHILDREN</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.abstracttablemodel.AbstractTableModelMixin.__getitem__","title":"<code>__getitem__(index: tuple[int | slice, int | slice]) -&gt; QtCore.QModelIndex | list[QtCore.QModelIndex]</code>","text":"Source code in <code>prettyqt\\core\\abstracttablemodel.py</code> <pre><code>def __getitem__(\nself, index: tuple[int | slice, int | slice]\n) -&gt; QtCore.QModelIndex | list[QtCore.QModelIndex]:\nrow, col = index\nmatch row, col:\ncase slice(), slice():\nraise ValueError(\"Only one of indexes can be a slice\")\ncase slice(), int():\ncount = self.rowCount() if row.stop is None else row.stop\nvalues = list(range(count)[row])\nreturn [self.index(i, col) for i in values]\ncase int(), slice():\ncount = self.columnCount() if col.stop is None else col.stop\nvalues = list(range(col.stop)[col])\nreturn [self.index(row, i) for i in values]\ncase int(), int():\nreturn self.index(row, col)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AnimationGroup","title":"<code>AnimationGroup</code>","text":"<p>         Bases: <code>AnimationGroupMixin</code>, <code>QtCore.QAnimationGroup</code></p> Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>class AnimationGroup(AnimationGroupMixin, QtCore.QAnimationGroup):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.AnimationGroupMixin","title":"<code>AnimationGroupMixin</code>","text":"<p>         Bases: <code>core.AbstractAnimationMixin</code></p> Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>class AnimationGroupMixin(core.AbstractAnimationMixin):\n@overload\ndef __getitem__(self, index: int) -&gt; QtCore.QAbstractAnimation:\n...\n@overload\ndef __getitem__(self, index: slice) -&gt; list[QtCore.QAbstractAnimation]:\n...\ndef __getitem__(self, index: int | slice):\nif isinstance(index, int):\nif index &lt; 0:\nindex = self.animationCount() + index\nanim = self.animationAt(index)\nif anim is None:\nraise KeyError(index)\nreturn anim\nelse:\nanims = [self.animationAt(i) for i in range(len(self))]\nreturn anims[index]\ndef __setitem__(self, index: int, value: QtCore.QAbstractAnimation):\nif not (0 &lt;= index &lt; self.animationCount()):\nraise KeyError(index)\nself.takeAnimation(index)\nself.insertAnimation(index, value)\ndef __len__(self):\nreturn self.animationCount()\ndef __delitem__(self, index: int):\nif not (0 &lt;= index &lt; self.animationCount()):\nraise KeyError(index)\nself.takeAnimation(index)\ndef __add__(self, other: QtCore.QAbstractAnimation):\nself.addAnimation(other)\nreturn self\ndef add_property_animation(self, obj: Callable) -&gt; core.PropertyAnimation:\nanim = core.PropertyAnimation()\nanim.apply_to(obj)\nself.addAnimation(anim)\nreturn anim\n</code></pre>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.__add__","title":"<code>__add__(other: QtCore.QAbstractAnimation)</code>","text":"Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def __add__(self, other: QtCore.QAbstractAnimation):\nself.addAnimation(other)\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def __delitem__(self, index: int):\nif not (0 &lt;= index &lt; self.animationCount()):\nraise KeyError(index)\nself.takeAnimation(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.__getitem__","title":"<code>__getitem__(index: int | slice)</code>","text":"Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def __getitem__(self, index: int | slice):\nif isinstance(index, int):\nif index &lt; 0:\nindex = self.animationCount() + index\nanim = self.animationAt(index)\nif anim is None:\nraise KeyError(index)\nreturn anim\nelse:\nanims = [self.animationAt(i) for i in range(len(self))]\nreturn anims[index]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def __len__(self):\nreturn self.animationCount()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.__setitem__","title":"<code>__setitem__(index: int, value: QtCore.QAbstractAnimation)</code>","text":"Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def __setitem__(self, index: int, value: QtCore.QAbstractAnimation):\nif not (0 &lt;= index &lt; self.animationCount()):\nraise KeyError(index)\nself.takeAnimation(index)\nself.insertAnimation(index, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.animationgroup.AnimationGroupMixin.add_property_animation","title":"<code>add_property_animation(obj: Callable) -&gt; core.PropertyAnimation</code>","text":"Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def add_property_animation(self, obj: Callable) -&gt; core.PropertyAnimation:\nanim = core.PropertyAnimation()\nanim.apply_to(obj)\nself.addAnimation(anim)\nreturn anim\n</code></pre>"},{"location":"api/core.html#prettyqt.core.BasicTimer","title":"<code>BasicTimer</code>","text":"<p>         Bases: <code>QtCore.QBasicTimer</code></p> Source code in <code>prettyqt\\core\\basictimer.py</code> <pre><code>class BasicTimer(QtCore.QBasicTimer):\ndef __bool__(self):\nreturn self.isActive()\ndef start_timer(\nself, msec: int, obj: QtCore.QObject, timer_type: constants.TimerTypeStr\n):\nif timer_type not in constants.TIMER_TYPE:\nraise InvalidParamError(timer_type, constants.TIMER_TYPE)\nself.start(msec, constants.TIMER_TYPE[timer_type], obj)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.basictimer.BasicTimer.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\basictimer.py</code> <pre><code>def __bool__(self):\nreturn self.isActive()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.basictimer.BasicTimer.start_timer","title":"<code>start_timer(msec: int, obj: QtCore.QObject, timer_type: constants.TimerTypeStr)</code>","text":"Source code in <code>prettyqt\\core\\basictimer.py</code> <pre><code>def start_timer(\nself, msec: int, obj: QtCore.QObject, timer_type: constants.TimerTypeStr\n):\nif timer_type not in constants.TIMER_TYPE:\nraise InvalidParamError(timer_type, constants.TIMER_TYPE)\nself.start(msec, constants.TIMER_TYPE[timer_type], obj)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Buffer","title":"<code>Buffer</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code>, <code>QtCore.QBuffer</code></p> Source code in <code>prettyqt\\core\\buffer.py</code> <pre><code>class Buffer(core.IODeviceMixin, QtCore.QBuffer):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ByteArray","title":"<code>ByteArray</code>","text":"<p>         Bases: <code>QtCore.QByteArray</code></p> Source code in <code>prettyqt\\core\\bytearray.py</code> <pre><code>class ByteArray(QtCore.QByteArray):\ndef __reduce__(self):\nreturn type(self), (bytes(self),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.bytearray.ByteArray.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\bytearray.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (bytes(self),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ByteArrayMatcher","title":"<code>ByteArrayMatcher</code>","text":"<p>         Bases: <code>QtCore.QByteArrayMatcher</code></p> Source code in <code>prettyqt\\core\\bytearraymatcher.py</code> <pre><code>class ByteArrayMatcher(QtCore.QByteArrayMatcher):\ndef __repr__(self):\nreturn get_repr(self, self.get_pattern())\ndef get_pattern(self) -&gt; bytes:\nreturn bytes(self.pattern())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.bytearraymatcher.ByteArrayMatcher.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\bytearraymatcher.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_pattern())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.bytearraymatcher.ByteArrayMatcher.get_pattern","title":"<code>get_pattern() -&gt; bytes</code>","text":"Source code in <code>prettyqt\\core\\bytearraymatcher.py</code> <pre><code>def get_pattern(self) -&gt; bytes:\nreturn bytes(self.pattern())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Calendar","title":"<code>Calendar</code>","text":"<p>         Bases: <code>QtCore.QCalendar</code></p> Source code in <code>prettyqt\\core\\_calendar.py</code> <pre><code>class Calendar(QtCore.QCalendar):\ndef __init__(self, system: str | QtCore.QCalendar.System = \"gregorian\"):\ntyp = system if isinstance(system, QtCore.QCalendar.System) else SYSTEM[system]\nsuper().__init__(typ)\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef __reduce__(self):\nreturn type(self), (self.name(),)\n# def __bool__(self):\n#     return self.isValid()\ndef get_date_from_parts(self, year: int, month: int, day: int) -&gt; core.Date:\nreturn core.Date(self.dateFromParts(year, month, day))\n</code></pre>"},{"location":"api/core.html#prettyqt.core._calendar.Calendar.__init__","title":"<code>__init__(system: str | QtCore.QCalendar.System = 'gregorian')</code>","text":"Source code in <code>prettyqt\\core\\_calendar.py</code> <pre><code>def __init__(self, system: str | QtCore.QCalendar.System = \"gregorian\"):\ntyp = system if isinstance(system, QtCore.QCalendar.System) else SYSTEM[system]\nsuper().__init__(typ)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._calendar.Calendar.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\_calendar.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.name(),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._calendar.Calendar.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\_calendar.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._calendar.Calendar.get_date_from_parts","title":"<code>get_date_from_parts(year: int, month: int, day: int) -&gt; core.Date</code>","text":"Source code in <code>prettyqt\\core\\_calendar.py</code> <pre><code>def get_date_from_parts(self, year: int, month: int, day: int) -&gt; core.Date:\nreturn core.Date(self.dateFromParts(year, month, day))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Collator","title":"<code>Collator</code>","text":"<p>         Bases: <code>QtCore.QCollator</code></p> Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>class Collator(QtCore.QCollator):\ndef __repr__(self):\nreturn get_repr(self, self.get_locale())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n        Args:\n            state: case sensitive\n        \"\"\"\nsensitivity = (\nQtCore.Qt.CaseSensitivity.CaseSensitive\nif state\nelse QtCore.Qt.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\ndef is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n        Returns:\n            case sensitivity\n        \"\"\"\nreturn bool(self.caseSensitivity())\ndef get_sort_key(self, string: str) -&gt; core.CollatorSortKey:\nreturn core.CollatorSortKey(self.sortKey(string))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.collator.Collator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_locale())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.collator.Collator.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.collator.Collator.get_sort_key","title":"<code>get_sort_key(string: str) -&gt; core.CollatorSortKey</code>","text":"Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def get_sort_key(self, string: str) -&gt; core.CollatorSortKey:\nreturn core.CollatorSortKey(self.sortKey(string))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.collator.Collator.is_case_sensitive","title":"<code>is_case_sensitive() -&gt; bool</code>","text":"<p>Return case sensitivity.</p> <p>Returns:</p> Type Description <code>bool</code> <p>case sensitivity</p> Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n    Returns:\n        case sensitivity\n    \"\"\"\nreturn bool(self.caseSensitivity())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.collator.Collator.set_case_sensitive","title":"<code>set_case_sensitive(state: bool)</code>","text":"<p>Set case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>case sensitive</p> required Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n    Args:\n        state: case sensitive\n    \"\"\"\nsensitivity = (\nQtCore.Qt.CaseSensitivity.CaseSensitive\nif state\nelse QtCore.Qt.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CollatorSortKey","title":"<code>CollatorSortKey</code>","text":"<p>         Bases: <code>QtCore.QCollatorSortKey</code></p> Source code in <code>prettyqt\\core\\collatorsortkey.py</code> <pre><code>class CollatorSortKey(QtCore.QCollatorSortKey):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CommandLineOption","title":"<code>CommandLineOption</code>","text":"<p>         Bases: <code>QtCore.QCommandLineOption</code></p> Source code in <code>prettyqt\\core\\commandlineoption.py</code> <pre><code>class CommandLineOption(QtCore.QCommandLineOption):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CommandLineParser","title":"<code>CommandLineParser</code>","text":"<p>         Bases: <code>QtCore.QCommandLineParser</code></p> Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>class CommandLineParser(QtCore.QCommandLineParser):\ndef set_single_dash_word_option_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the single dash word option mode.\n        Args:\n            mode: single dash word option mode\n        Raises:\n            InvalidParamError: single dash word option mode does not exist\n        \"\"\"\nif mode not in SINGLE_DASH_WORD:\nraise InvalidParamError(mode, SINGLE_DASH_WORD)\nself.setSingleDashWordOptionMode(SINGLE_DASH_WORD[mode])\ndef set_options_after_positional_arguments_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the options after positional arguments mode.\n        Args:\n            mode: options after positional arguments mode\n        Raises:\n            InvalidParamError: options after positional arguments mode does not exist\n        \"\"\"\nif mode not in OPTIONS_AFTER_POS_ARG:\nraise InvalidParamError(mode, OPTIONS_AFTER_POS_ARG)\nself.setOptionsAfterPositionalArgumentsMode(OPTIONS_AFTER_POS_ARG[mode])\ndef add_option(\nself,\nname: str,\ndescription: str | None = None,\nvalue_name: str | None = None,\ndefault_value: str | None = None,\n) -&gt; core.CommandLineOption:\nif description is None:\ndescription = \"\"\nif value_name is None:\nvalue_name = \"\"\nif default_value is None:\ndefault_value = \"\"\noption = core.CommandLineOption(name, description, value_name, default_value)\nself.addOption(option)\nreturn option\n</code></pre>"},{"location":"api/core.html#prettyqt.core.commandlineparser.CommandLineParser.add_option","title":"<code>add_option(name: str, description: str | None = None, value_name: str | None = None, default_value: str | None = None) -&gt; core.CommandLineOption</code>","text":"Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def add_option(\nself,\nname: str,\ndescription: str | None = None,\nvalue_name: str | None = None,\ndefault_value: str | None = None,\n) -&gt; core.CommandLineOption:\nif description is None:\ndescription = \"\"\nif value_name is None:\nvalue_name = \"\"\nif default_value is None:\ndefault_value = \"\"\noption = core.CommandLineOption(name, description, value_name, default_value)\nself.addOption(option)\nreturn option\n</code></pre>"},{"location":"api/core.html#prettyqt.core.commandlineparser.CommandLineParser.set_options_after_positional_arguments_mode","title":"<code>set_options_after_positional_arguments_mode(mode: SingleDashWordStr)</code>","text":"<p>Set the options after positional arguments mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SingleDashWordStr</code> <p>options after positional arguments mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>options after positional arguments mode does not exist</p> Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def set_options_after_positional_arguments_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the options after positional arguments mode.\n    Args:\n        mode: options after positional arguments mode\n    Raises:\n        InvalidParamError: options after positional arguments mode does not exist\n    \"\"\"\nif mode not in OPTIONS_AFTER_POS_ARG:\nraise InvalidParamError(mode, OPTIONS_AFTER_POS_ARG)\nself.setOptionsAfterPositionalArgumentsMode(OPTIONS_AFTER_POS_ARG[mode])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.commandlineparser.CommandLineParser.set_single_dash_word_option_mode","title":"<code>set_single_dash_word_option_mode(mode: SingleDashWordStr)</code>","text":"<p>Set the single dash word option mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SingleDashWordStr</code> <p>single dash word option mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>single dash word option mode does not exist</p> Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def set_single_dash_word_option_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the single dash word option mode.\n    Args:\n        mode: single dash word option mode\n    Raises:\n        InvalidParamError: single dash word option mode does not exist\n    \"\"\"\nif mode not in SINGLE_DASH_WORD:\nraise InvalidParamError(mode, SINGLE_DASH_WORD)\nself.setSingleDashWordOptionMode(SINGLE_DASH_WORD[mode])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ConcatenateTablesProxyModel","title":"<code>ConcatenateTablesProxyModel</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code>, <code>QtCore.QConcatenateTablesProxyModel</code></p> Source code in <code>prettyqt\\core\\concatenatetablesproxymodel.py</code> <pre><code>class ConcatenateTablesProxyModel(\ncore.AbstractItemModelMixin, QtCore.QConcatenateTablesProxyModel\n):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CoreApplication","title":"<code>CoreApplication</code>","text":"<p>         Bases: <code>CoreApplicationMixin</code>, <code>QtCore.QCoreApplication</code></p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>class CoreApplication(CoreApplicationMixin, QtCore.QCoreApplication):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CoreApplicationMixin","title":"<code>CoreApplicationMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>class CoreApplicationMixin(core.ObjectMixin):\ntranslators: dict[str, core.Translator] = {}\n@classmethod\ndef call_on_exit(cls, func: Callable):\ninstance = cls.instance()\nif instance is None:\nraise RuntimeError(\"No QApplication running\")\ninstance.aboutToQuit.connect(func)\n@classmethod\ndef get_application_file_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.applicationFilePath())\n@classmethod\ndef get_application_dir_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.applicationDirPath())\n@classmethod\ndef add_library_path(cls, path: datatypes.PathType):\ncls.addLibraryPath(os.fspath(path))\n@classmethod\ndef get_library_paths(cls) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(i) for i in cls.libraryPaths()]\ndef set_application_name(self, name: str):\nif os.name == \"nt\" and name and not getattr(sys, \"frozen\", False):\nimport ctypes\nctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(name)\nself.setApplicationName(name)\ndef set_metadata(\nself,\napp_name: str | None = None,\napp_version: None | datatypes.SemanticVersionType = None,\norg_name: str | None = None,\norg_domain: str | None = None,\n):\nif app_name is not None:\nself.setApplicationName(app_name)\nif app_version is not None:\nif isinstance(app_version, QtCore.QVersionNumber):\napp_version = app_version.toString()\nelif isinstance(app_version, tuple):\napp_version = \".\".join(str(i) for i in app_version)\nself.setApplicationVersion(app_version)\nif org_name is not None:\nself.setOrganizationName(org_name)\nif org_domain is not None:\nself.setOrganizationDomain(org_domain)\n@classmethod\ndef load_language_file(cls, file: datatypes.PathType) -&gt; core.Translator:\ntranslator = core.Translator()\ntranslator.load_file(file)\ncls.installTranslator(translator)\ncls.translators[str(file)] = translator\nreturn translator\n@classmethod\ndef load_language(cls, language: str) -&gt; core.Translator:\ntranslator = core.Translator.for_language(language)\ncls.installTranslator(translator)\ncls.translators[language] = translator\nreturn translator\ndef post_event(\nself,\nobj: QtCore.QObject,\nevent: QtCore.QEvent,\npriority: int | constants.EventPriorityStr = \"normal\",\n):\nif isinstance(priority, int):\nprio = priority\nelif priority in constants.EVENT_PRIORITY:\nprio = constants.EVENT_PRIORITY[priority]\nelse:\nraise InvalidParamError(priority, constants.EVENT_PRIORITY)\nreturn self.postEvent(obj, event, prio)\ndef in_main_thread(self):\n\"\"\"Check if we are in the thread in which QApplication object was created.\n        Returns:\n            True if we are in the main thread, False otherwise.\n        \"\"\"\nreturn self.thread() == core.Thread.currentThread()\ndef main_loop(self) -&gt; int:\nreturn self.exec()\n@staticmethod\ndef restart():\nos.execl(sys.executable, sys.executable, *sys.argv)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.translators","title":"<code>translators: dict[str, core.Translator] = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.add_library_path","title":"<code>add_library_path(path: datatypes.PathType)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef add_library_path(cls, path: datatypes.PathType):\ncls.addLibraryPath(os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.call_on_exit","title":"<code>call_on_exit(func: Callable)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef call_on_exit(cls, func: Callable):\ninstance = cls.instance()\nif instance is None:\nraise RuntimeError(\"No QApplication running\")\ninstance.aboutToQuit.connect(func)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.get_application_dir_path","title":"<code>get_application_dir_path() -&gt; pathlib.Path</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef get_application_dir_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.applicationDirPath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.get_application_file_path","title":"<code>get_application_file_path() -&gt; pathlib.Path</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef get_application_file_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.applicationFilePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.get_library_paths","title":"<code>get_library_paths() -&gt; list[pathlib.Path]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef get_library_paths(cls) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(i) for i in cls.libraryPaths()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.in_main_thread","title":"<code>in_main_thread()</code>","text":"<p>Check if we are in the thread in which QApplication object was created.</p> <p>Returns:</p> Type Description <p>True if we are in the main thread, False otherwise.</p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def in_main_thread(self):\n\"\"\"Check if we are in the thread in which QApplication object was created.\n    Returns:\n        True if we are in the main thread, False otherwise.\n    \"\"\"\nreturn self.thread() == core.Thread.currentThread()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.load_language","title":"<code>load_language(language: str) -&gt; core.Translator</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef load_language(cls, language: str) -&gt; core.Translator:\ntranslator = core.Translator.for_language(language)\ncls.installTranslator(translator)\ncls.translators[language] = translator\nreturn translator\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.load_language_file","title":"<code>load_language_file(file: datatypes.PathType) -&gt; core.Translator</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@classmethod\ndef load_language_file(cls, file: datatypes.PathType) -&gt; core.Translator:\ntranslator = core.Translator()\ntranslator.load_file(file)\ncls.installTranslator(translator)\ncls.translators[str(file)] = translator\nreturn translator\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.main_loop","title":"<code>main_loop() -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def main_loop(self) -&gt; int:\nreturn self.exec()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.post_event","title":"<code>post_event(obj: QtCore.QObject, event: QtCore.QEvent, priority: int | constants.EventPriorityStr = 'normal')</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def post_event(\nself,\nobj: QtCore.QObject,\nevent: QtCore.QEvent,\npriority: int | constants.EventPriorityStr = \"normal\",\n):\nif isinstance(priority, int):\nprio = priority\nelif priority in constants.EVENT_PRIORITY:\nprio = constants.EVENT_PRIORITY[priority]\nelse:\nraise InvalidParamError(priority, constants.EVENT_PRIORITY)\nreturn self.postEvent(obj, event, prio)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.restart","title":"<code>restart()</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>@staticmethod\ndef restart():\nos.execl(sys.executable, sys.executable, *sys.argv)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.set_application_name","title":"<code>set_application_name(name: str)</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def set_application_name(self, name: str):\nif os.name == \"nt\" and name and not getattr(sys, \"frozen\", False):\nimport ctypes\nctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(name)\nself.setApplicationName(name)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.coreapplication.CoreApplicationMixin.set_metadata","title":"<code>set_metadata(app_name: str | None = None, app_version: None | datatypes.SemanticVersionType = None, org_name: str | None = None, org_domain: str | None = None)</code>","text":"Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def set_metadata(\nself,\napp_name: str | None = None,\napp_version: None | datatypes.SemanticVersionType = None,\norg_name: str | None = None,\norg_domain: str | None = None,\n):\nif app_name is not None:\nself.setApplicationName(app_name)\nif app_version is not None:\nif isinstance(app_version, QtCore.QVersionNumber):\napp_version = app_version.toString()\nelif isinstance(app_version, tuple):\napp_version = \".\".join(str(i) for i in app_version)\nself.setApplicationVersion(app_version)\nif org_name is not None:\nself.setOrganizationName(org_name)\nif org_domain is not None:\nself.setOrganizationDomain(org_domain)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.CryptographicHash","title":"<code>CryptographicHash</code>","text":"<p>         Bases: <code>QtCore.QCryptographicHash</code></p> Source code in <code>prettyqt\\core\\cryptographichash.py</code> <pre><code>class CryptographicHash(QtCore.QCryptographicHash):\ndef __init__(self, method: QtCore.QCryptographicHash.Algorithm | AlgorithmStr):\nif isinstance(method, QtCore.QCryptographicHash.Algorithm):\narg = method\nelse:\narg = ALGORITHM[method]\nsuper().__init__(arg)\n# def __str__(self):\n#     return bytes(self.result()).decode()\ndef __bytes__(self):\nreturn self.get_result()\ndef get_result(self) -&gt; bytes:\nreturn bytes(self.result())\n@staticmethod\ndef get_hash_length(method: AlgorithmStr) -&gt; int:\nif method not in ALGORITHM:\nraise InvalidParamError(method, ALGORITHM)\nreturn CryptographicHash.hashLength(ALGORITHM[method])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.cryptographichash.CryptographicHash.__bytes__","title":"<code>__bytes__()</code>","text":"Source code in <code>prettyqt\\core\\cryptographichash.py</code> <pre><code>def __bytes__(self):\nreturn self.get_result()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.cryptographichash.CryptographicHash.__init__","title":"<code>__init__(method: QtCore.QCryptographicHash.Algorithm | AlgorithmStr)</code>","text":"Source code in <code>prettyqt\\core\\cryptographichash.py</code> <pre><code>def __init__(self, method: QtCore.QCryptographicHash.Algorithm | AlgorithmStr):\nif isinstance(method, QtCore.QCryptographicHash.Algorithm):\narg = method\nelse:\narg = ALGORITHM[method]\nsuper().__init__(arg)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.cryptographichash.CryptographicHash.get_hash_length","title":"<code>get_hash_length(method: AlgorithmStr) -&gt; int</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\core\\cryptographichash.py</code> <pre><code>@staticmethod\ndef get_hash_length(method: AlgorithmStr) -&gt; int:\nif method not in ALGORITHM:\nraise InvalidParamError(method, ALGORITHM)\nreturn CryptographicHash.hashLength(ALGORITHM[method])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.cryptographichash.CryptographicHash.get_result","title":"<code>get_result() -&gt; bytes</code>","text":"Source code in <code>prettyqt\\core\\cryptographichash.py</code> <pre><code>def get_result(self) -&gt; bytes:\nreturn bytes(self.result())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DataStream","title":"<code>DataStream</code>","text":"<p>         Bases: <code>QtCore.QDataStream</code></p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>class DataStream(QtCore.QDataStream):\ndef set_byte_order(self, order: ByteOrderStr):\n\"\"\"Set byte order.\n        Args:\n            order: byte order to use\n        Raises:\n            InvalidParamError: invalid order\n        \"\"\"\nif order not in BYTE_ORDER:\nraise InvalidParamError(order, BYTE_ORDER)\nself.setByteOrder(BYTE_ORDER[order])\ndef get_byte_order(self) -&gt; ByteOrderStr:\n\"\"\"Return byte order.\n        Returns:\n            byte order\n        \"\"\"\nreturn BYTE_ORDER.inverse[self.byteOrder()]\ndef set_status(self, status: StatusStr):\n\"\"\"Set status.\n        Args:\n            status: status to use\n        Raises:\n            InvalidParamError: invalid status\n        \"\"\"\nif status not in STATUS:\nraise InvalidParamError(status, STATUS)\nself.setStatus(STATUS[status])\ndef get_status(self) -&gt; StatusStr:\n\"\"\"Return status.\n        Returns:\n            status\n        \"\"\"\nreturn STATUS.inverse[self.status()]\ndef set_floating_point_precision(self, precision: FloatingPointPrecisionStr):\n\"\"\"Set floating point precision.\n        Args:\n            precision: floating point precision\n        Raises:\n            InvalidParamError: invalid precision\n        \"\"\"\nif precision not in FLOATING_POINT_PRECISION:\nraise InvalidParamError(precision, FLOATING_POINT_PRECISION)\nself.setFloatingPointPrecision(FLOATING_POINT_PRECISION[precision])\ndef get_floating_point_precision(self) -&gt; FloatingPointPrecisionStr:\n\"\"\"Return floating point precision.\n        Returns:\n            floating point precision\n        \"\"\"\nreturn FLOATING_POINT_PRECISION.inverse[self.floatingPointPrecision()]\n@classmethod\ndef create_bytearray(cls, data: datatypes.QtSerializableType) -&gt; QtCore.QByteArray:\nba = QtCore.QByteArray()\nstream = cls(ba, QtCore.QIODeviceBase.OpenModeFlag.WriteOnly)\nstream &lt;&lt; data\nreturn ba\n@classmethod\ndef write_bytearray(\ncls, ba: datatypes.ByteArrayType, write_to: datatypes.QtSerializableType\n):\nif isinstance(ba, str):\nba = ba.encode()\nif not isinstance(ba, QtCore.QByteArray):\nba = QtCore.QByteArray(ba)\nstream = cls(ba, QtCore.QIODeviceBase.OpenModeFlag.ReadOnly)\nstream &gt;&gt; write_to\n@classmethod\ndef copy_data(\ncls, source: datatypes.QtSerializableType, dest: datatypes.QtSerializableType\n):\nba = cls.create_bytearray(source)\ncls.write_bytearray(ba, dest)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.copy_data","title":"<code>copy_data(source: datatypes.QtSerializableType, dest: datatypes.QtSerializableType)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>@classmethod\ndef copy_data(\ncls, source: datatypes.QtSerializableType, dest: datatypes.QtSerializableType\n):\nba = cls.create_bytearray(source)\ncls.write_bytearray(ba, dest)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.create_bytearray","title":"<code>create_bytearray(data: datatypes.QtSerializableType) -&gt; QtCore.QByteArray</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>@classmethod\ndef create_bytearray(cls, data: datatypes.QtSerializableType) -&gt; QtCore.QByteArray:\nba = QtCore.QByteArray()\nstream = cls(ba, QtCore.QIODeviceBase.OpenModeFlag.WriteOnly)\nstream &lt;&lt; data\nreturn ba\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.get_byte_order","title":"<code>get_byte_order() -&gt; ByteOrderStr</code>","text":"<p>Return byte order.</p> <p>Returns:</p> Type Description <code>ByteOrderStr</code> <p>byte order</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_byte_order(self) -&gt; ByteOrderStr:\n\"\"\"Return byte order.\n    Returns:\n        byte order\n    \"\"\"\nreturn BYTE_ORDER.inverse[self.byteOrder()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.get_floating_point_precision","title":"<code>get_floating_point_precision() -&gt; FloatingPointPrecisionStr</code>","text":"<p>Return floating point precision.</p> <p>Returns:</p> Type Description <code>FloatingPointPrecisionStr</code> <p>floating point precision</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_floating_point_precision(self) -&gt; FloatingPointPrecisionStr:\n\"\"\"Return floating point precision.\n    Returns:\n        floating point precision\n    \"\"\"\nreturn FLOATING_POINT_PRECISION.inverse[self.floatingPointPrecision()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Return status.</p> <p>Returns:</p> Type Description <code>StatusStr</code> <p>status</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Return status.\n    Returns:\n        status\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.set_byte_order","title":"<code>set_byte_order(order: ByteOrderStr)</code>","text":"<p>Set byte order.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>ByteOrderStr</code> <p>byte order to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid order</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_byte_order(self, order: ByteOrderStr):\n\"\"\"Set byte order.\n    Args:\n        order: byte order to use\n    Raises:\n        InvalidParamError: invalid order\n    \"\"\"\nif order not in BYTE_ORDER:\nraise InvalidParamError(order, BYTE_ORDER)\nself.setByteOrder(BYTE_ORDER[order])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.set_floating_point_precision","title":"<code>set_floating_point_precision(precision: FloatingPointPrecisionStr)</code>","text":"<p>Set floating point precision.</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>FloatingPointPrecisionStr</code> <p>floating point precision</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid precision</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_floating_point_precision(self, precision: FloatingPointPrecisionStr):\n\"\"\"Set floating point precision.\n    Args:\n        precision: floating point precision\n    Raises:\n        InvalidParamError: invalid precision\n    \"\"\"\nif precision not in FLOATING_POINT_PRECISION:\nraise InvalidParamError(precision, FLOATING_POINT_PRECISION)\nself.setFloatingPointPrecision(FLOATING_POINT_PRECISION[precision])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.set_status","title":"<code>set_status(status: StatusStr)</code>","text":"<p>Set status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>StatusStr</code> <p>status to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid status</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_status(self, status: StatusStr):\n\"\"\"Set status.\n    Args:\n        status: status to use\n    Raises:\n        InvalidParamError: invalid status\n    \"\"\"\nif status not in STATUS:\nraise InvalidParamError(status, STATUS)\nself.setStatus(STATUS[status])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.datastream.DataStream.write_bytearray","title":"<code>write_bytearray(ba: datatypes.ByteArrayType, write_to: datatypes.QtSerializableType)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>@classmethod\ndef write_bytearray(\ncls, ba: datatypes.ByteArrayType, write_to: datatypes.QtSerializableType\n):\nif isinstance(ba, str):\nba = ba.encode()\nif not isinstance(ba, QtCore.QByteArray):\nba = QtCore.QByteArray(ba)\nstream = cls(ba, QtCore.QIODeviceBase.OpenModeFlag.ReadOnly)\nstream &gt;&gt; write_to\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Date","title":"<code>Date</code>","text":"<p>         Bases: <code>QtCore.QDate</code></p> Source code in <code>prettyqt\\core\\date.py</code> <pre><code>class Date(QtCore.QDate):\ndef __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]  # type: ignore\nreturn f\"{type(self).__name__}({template}\"\ndef __str__(self):\nreturn self.toString(\"yyyy-MM-dd\")\ndef __format__(self, format_spec: str):\nreturn self.toString(format_spec)\n@property\ndef _year(self):\nreturn self.year()\n@property\ndef _month(self):\nreturn self.month()\n@property\ndef _day(self):\nreturn self.day()\n__match_args__ = (\"_year\", \"_month\", \"_day\")\ndef __reduce__(self):\nreturn type(self), (self.year(), self.month(), self.day())\ndef add_days(self, days: int) -&gt; Self:\nreturn type(self)(self.addDays(days))\ndef add_months(self, months: int, calendar: QtCore.QCalendar | None = None) -&gt; Self:\nif calendar:\nreturn type(self)(self.addMonths(months, calendar))\nelse:\nreturn type(self)(self.addMonths(months))\ndef add_years(self, years: int, calendar: QtCore.QCalendar | None = None) -&gt; Self:\nif calendar:\nreturn type(self)(self.addYears(years, calendar))\nelse:\nreturn type(self)(self.addYears(years))\n@classmethod\ndef get_current_date(cls) -&gt; Self:\nreturn cls(cls.currentDate())\ndef replace(\nself, year: int | None = None, month: int | None = None, day: int | None = None\n):\nself.setDate(\nyear if year is not None else self.year(),\nmonth if month is not None else self.month(),\nday if day is not None else self.day(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.__match_args__","title":"<code>__match_args__ = ('_year', '_month', '_day')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.date.Date.__format__","title":"<code>__format__(format_spec: str)</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def __format__(self, format_spec: str):\nreturn self.toString(format_spec)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.year(), self.month(), self.day())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]  # type: ignore\nreturn f\"{type(self).__name__}({template}\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def __str__(self):\nreturn self.toString(\"yyyy-MM-dd\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.add_days","title":"<code>add_days(days: int) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def add_days(self, days: int) -&gt; Self:\nreturn type(self)(self.addDays(days))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.add_months","title":"<code>add_months(months: int, calendar: QtCore.QCalendar | None = None) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def add_months(self, months: int, calendar: QtCore.QCalendar | None = None) -&gt; Self:\nif calendar:\nreturn type(self)(self.addMonths(months, calendar))\nelse:\nreturn type(self)(self.addMonths(months))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.add_years","title":"<code>add_years(years: int, calendar: QtCore.QCalendar | None = None) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def add_years(self, years: int, calendar: QtCore.QCalendar | None = None) -&gt; Self:\nif calendar:\nreturn type(self)(self.addYears(years, calendar))\nelse:\nreturn type(self)(self.addYears(years))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.get_current_date","title":"<code>get_current_date() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>@classmethod\ndef get_current_date(cls) -&gt; Self:\nreturn cls(cls.currentDate())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.date.Date.replace","title":"<code>replace(year: int | None = None, month: int | None = None, day: int | None = None)</code>","text":"Source code in <code>prettyqt\\core\\date.py</code> <pre><code>def replace(\nself, year: int | None = None, month: int | None = None, day: int | None = None\n):\nself.setDate(\nyear if year is not None else self.year(),\nmonth if month is not None else self.month(),\nday if day is not None else self.day(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DateTime","title":"<code>DateTime</code>","text":"<p>         Bases: <code>QtCore.QDateTime</code></p> Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>class DateTime(QtCore.QDateTime):\ndef __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]\nreturn f\"{type(self).__name__}({template}\"\ndef __str__(self):\nreturn self.toString(\"yyyy-MM-dd hh:mm:ss.zzzzzz\")\ndef __reduce__(self):\nreturn type(self), (self.date(), self.time(), self.get_timezone())\ndef __format__(self, format_spec: constants.DateFormatStr):\nif format_spec in constants.DATE_FORMAT:\nreturn self.to_format(format_spec)\nreturn self.toString(format_spec)\ndef get_value(self) -&gt; datetime.datetime:\nreturn self.toPython()\ndef get_date(self) -&gt; core.Date:\nreturn core.Date(self.date())\ndef get_time(self) -&gt; core.Time:\nreturn core.Time(self.time())\ndef get_timezone(self) -&gt; core.TimeZone:\nreturn core.TimeZone(self.timeZone())\ndef set_timezone(self, zone: str | QtCore.QTimeZone):\nif isinstance(zone, str):\nself.setTimeZone(core.TimeZone(zone))\nelse:\nself.setTimeZone(zone)\ndef set_time_spec(self, spec: constants.TimeSpecStr):\n\"\"\"Set the time specification.\n        Args:\n            spec: time specification to use\n        Raises:\n            InvalidParamError: time specification does not exist\n        \"\"\"\nif spec not in constants.TIME_SPEC:\nraise InvalidParamError(spec, constants.TIME_SPEC)\nself.setTimeSpec(constants.TIME_SPEC[spec])\ndef get_time_spec(self) -&gt; constants.TimeSpecStr:\n\"\"\"Return current time specification.\n        Returns:\n            time specification\n        \"\"\"\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\ndef to_format(self, fmt: constants.DateFormatStr):\nreturn self.toString(constants.DATE_FORMAT[fmt])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.__format__","title":"<code>__format__(format_spec: constants.DateFormatStr)</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def __format__(self, format_spec: constants.DateFormatStr):\nif format_spec in constants.DATE_FORMAT:\nreturn self.to_format(format_spec)\nreturn self.toString(format_spec)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.date(), self.time(), self.get_timezone())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]\nreturn f\"{type(self).__name__}({template}\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def __str__(self):\nreturn self.toString(\"yyyy-MM-dd hh:mm:ss.zzzzzz\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.get_date","title":"<code>get_date() -&gt; core.Date</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_date(self) -&gt; core.Date:\nreturn core.Date(self.date())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.get_time","title":"<code>get_time() -&gt; core.Time</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_time(self) -&gt; core.Time:\nreturn core.Time(self.time())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.get_time_spec","title":"<code>get_time_spec() -&gt; constants.TimeSpecStr</code>","text":"<p>Return current time specification.</p> <p>Returns:</p> Type Description <code>constants.TimeSpecStr</code> <p>time specification</p> Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_time_spec(self) -&gt; constants.TimeSpecStr:\n\"\"\"Return current time specification.\n    Returns:\n        time specification\n    \"\"\"\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.get_timezone","title":"<code>get_timezone() -&gt; core.TimeZone</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_timezone(self) -&gt; core.TimeZone:\nreturn core.TimeZone(self.timeZone())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.get_value","title":"<code>get_value() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_value(self) -&gt; datetime.datetime:\nreturn self.toPython()\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.set_time_spec","title":"<code>set_time_spec(spec: constants.TimeSpecStr)</code>","text":"<p>Set the time specification.</p> <p>Parameters:</p> Name Type Description Default <code>spec</code> <code>constants.TimeSpecStr</code> <p>time specification to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>time specification does not exist</p> Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def set_time_spec(self, spec: constants.TimeSpecStr):\n\"\"\"Set the time specification.\n    Args:\n        spec: time specification to use\n    Raises:\n        InvalidParamError: time specification does not exist\n    \"\"\"\nif spec not in constants.TIME_SPEC:\nraise InvalidParamError(spec, constants.TIME_SPEC)\nself.setTimeSpec(constants.TIME_SPEC[spec])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.set_timezone","title":"<code>set_timezone(zone: str | QtCore.QTimeZone)</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def set_timezone(self, zone: str | QtCore.QTimeZone):\nif isinstance(zone, str):\nself.setTimeZone(core.TimeZone(zone))\nelse:\nself.setTimeZone(zone)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._datetime.DateTime.to_format","title":"<code>to_format(fmt: constants.DateFormatStr)</code>","text":"Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def to_format(self, fmt: constants.DateFormatStr):\nreturn self.toString(constants.DATE_FORMAT[fmt])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DeadlineTimer","title":"<code>DeadlineTimer</code>","text":"<p>         Bases: <code>QtCore.QDeadlineTimer</code></p> Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>class DeadlineTimer(QtCore.QDeadlineTimer):\ndef set_type(self, typ: constants.TimerTypeStr):\n\"\"\"Set the timer type.\n        Args:\n            typ: timer type\n        Raises:\n            InvalidParamError: timer type does not exist\n        \"\"\"\nif typ not in constants.TIMER_TYPE:\nraise InvalidParamError(typ, constants.TIMER_TYPE)\nself.setTimerType(constants.TIMER_TYPE[typ])\ndef get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n        Returns:\n            timer type\n        \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.deadlinetimer.DeadlineTimer.get_type","title":"<code>get_type() -&gt; constants.TimerTypeStr</code>","text":"<p>Return current timer type.</p> <p>Returns:</p> Type Description <code>constants.TimerTypeStr</code> <p>timer type</p> Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>def get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n    Returns:\n        timer type\n    \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.deadlinetimer.DeadlineTimer.set_type","title":"<code>set_type(typ: constants.TimerTypeStr)</code>","text":"<p>Set the timer type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>constants.TimerTypeStr</code> <p>timer type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>timer type does not exist</p> Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>def set_type(self, typ: constants.TimerTypeStr):\n\"\"\"Set the timer type.\n    Args:\n        typ: timer type\n    Raises:\n        InvalidParamError: timer type does not exist\n    \"\"\"\nif typ not in constants.TIMER_TYPE:\nraise InvalidParamError(typ, constants.TIMER_TYPE)\nself.setTimerType(constants.TIMER_TYPE[typ])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Dir","title":"<code>Dir</code>","text":"<p>         Bases: <code>QtCore.QDir</code></p> Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>class Dir(QtCore.QDir):\ndef __getattr__(self, attr: str):\nreturn getattr(self.to_path(), attr)\ndef __repr__(self):\nreturn get_repr(self, self.absolutePath())\ndef __str__(self):\nreturn self.absolutePath()\ndef __reduce__(self):\nreturn type(self), (self.absolutePath(),)\ndef __truediv__(self, other: datatypes.PathType) -&gt; pathlib.Path:\nreturn self.to_path() / os.fspath(other)\ndef __fspath__(self) -&gt; str:\nreturn self.absolutePath()\ndef __bool__(self):\nreturn self.exists()\ndef __abs__(self) -&gt; str:\nreturn self.absolutePath()\n@property\ndef _absolutePath(self):\nreturn self.absolutePath()\n__match_args__ = (\"_absolutePath\",)\ndef to_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absolutePath())\ndef set_filter(self, *filters: FilterStr):\nfor item in filters:\nif item not in FILTERS:\nraise InvalidParamError(item, FILTERS)\nflags = FILTERS.merge_flags(filters)\nself.setFilter(flags)\ndef get_filter(self) -&gt; list[FilterStr]:\nreturn FILTERS.get_list(self.filter())\ndef get_entry_info_list(\nself, sort_mode: SortFlagStr = \"no_sort\", filters: FilterStr = \"none\"\n) -&gt; list[core.FileInfo]:\nreturn [\ncore.FileInfo(i)\nfor i in self.entryInfoList(\nsort=SORT_FLAG[sort_mode],\nfilters=self.Filter.AllEntries | FILTERS[filters],\n)\n]\ndef get_entry_list(\nself, sort_mode: SortFlagStr = \"no_sort\", filters: FilterStr = \"none\"\n) -&gt; list[pathlib.Path]:\nreturn [\npathlib.Path(i)\nfor i in self.entryList(sort=SORT_FLAG[sort_mode], filters=FILTERS[filters])\n]\n@classmethod\ndef get_current(cls) -&gt; Self:\nreturn cls(cls.current())\n@classmethod\ndef get_home(cls) -&gt; Self:\nreturn cls(cls.home())\n@classmethod\ndef get_current_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.currentPath())\n@classmethod\ndef get_home_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.homePath())\n@classmethod\ndef get_temp_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.tempPath())\n@classmethod\ndef get_drives(cls) -&gt; list[core.FileInfo]:\nreturn [core.FileInfo(i) for i in cls.drives()]\n@classmethod\ndef add_search_path(cls, prefix: str, path: datatypes.PathType):\ncls.addSearchPath(prefix, os.fspath(path))\n@classmethod\ndef set_search_paths(cls, prefix: str, paths: list[datatypes.PathType]):\ncls.setSearchPaths(prefix, [os.fspath(p) for p in paths])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__match_args__","title":"<code>__match_args__ = ('_absolutePath')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.dir.Dir.__abs__","title":"<code>__abs__() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __abs__(self) -&gt; str:\nreturn self.absolutePath()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __bool__(self):\nreturn self.exists()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__fspath__","title":"<code>__fspath__() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __fspath__(self) -&gt; str:\nreturn self.absolutePath()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__getattr__","title":"<code>__getattr__(attr: str)</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __getattr__(self, attr: str):\nreturn getattr(self.to_path(), attr)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.absolutePath(),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.absolutePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __str__(self):\nreturn self.absolutePath()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.__truediv__","title":"<code>__truediv__(other: datatypes.PathType) -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def __truediv__(self, other: datatypes.PathType) -&gt; pathlib.Path:\nreturn self.to_path() / os.fspath(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.add_search_path","title":"<code>add_search_path(prefix: str, path: datatypes.PathType)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef add_search_path(cls, prefix: str, path: datatypes.PathType):\ncls.addSearchPath(prefix, os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_current","title":"<code>get_current() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef get_current(cls) -&gt; Self:\nreturn cls(cls.current())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_current_path","title":"<code>get_current_path() -&gt; pathlib.Path</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef get_current_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.currentPath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_drives","title":"<code>get_drives() -&gt; list[core.FileInfo]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef get_drives(cls) -&gt; list[core.FileInfo]:\nreturn [core.FileInfo(i) for i in cls.drives()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_entry_info_list","title":"<code>get_entry_info_list(sort_mode: SortFlagStr = 'no_sort', filters: FilterStr = 'none') -&gt; list[core.FileInfo]</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def get_entry_info_list(\nself, sort_mode: SortFlagStr = \"no_sort\", filters: FilterStr = \"none\"\n) -&gt; list[core.FileInfo]:\nreturn [\ncore.FileInfo(i)\nfor i in self.entryInfoList(\nsort=SORT_FLAG[sort_mode],\nfilters=self.Filter.AllEntries | FILTERS[filters],\n)\n]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_entry_list","title":"<code>get_entry_list(sort_mode: SortFlagStr = 'no_sort', filters: FilterStr = 'none') -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def get_entry_list(\nself, sort_mode: SortFlagStr = \"no_sort\", filters: FilterStr = \"none\"\n) -&gt; list[pathlib.Path]:\nreturn [\npathlib.Path(i)\nfor i in self.entryList(sort=SORT_FLAG[sort_mode], filters=FILTERS[filters])\n]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_filter","title":"<code>get_filter() -&gt; list[FilterStr]</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def get_filter(self) -&gt; list[FilterStr]:\nreturn FILTERS.get_list(self.filter())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_home","title":"<code>get_home() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef get_home(cls) -&gt; Self:\nreturn cls(cls.home())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_home_path","title":"<code>get_home_path() -&gt; pathlib.Path</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef get_home_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.homePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.get_temp_path","title":"<code>get_temp_path() -&gt; pathlib.Path</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef get_temp_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.tempPath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.set_filter","title":"<code>set_filter(*filters: FilterStr)</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def set_filter(self, *filters: FilterStr):\nfor item in filters:\nif item not in FILTERS:\nraise InvalidParamError(item, FILTERS)\nflags = FILTERS.merge_flags(filters)\nself.setFilter(flags)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.set_search_paths","title":"<code>set_search_paths(prefix: str, paths: list[datatypes.PathType])</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>@classmethod\ndef set_search_paths(cls, prefix: str, paths: list[datatypes.PathType]):\ncls.setSearchPaths(prefix, [os.fspath(p) for p in paths])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.dir.Dir.to_path","title":"<code>to_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>def to_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absolutePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.DirIterator","title":"<code>DirIterator</code>","text":"<p>         Bases: <code>QtCore.QDirIterator</code></p> Source code in <code>prettyqt\\core\\diriterator.py</code> <pre><code>class DirIterator(QtCore.QDirIterator):\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.hasNext():\nreturn self.next()\nraise StopIteration\ndef get_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.filePath())\ndef get_file_info(self) -&gt; core.FileInfo:\nreturn core.FileInfo(self.fileInfo())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.diriterator.DirIterator.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\core\\diriterator.py</code> <pre><code>def __iter__(self):\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.diriterator.DirIterator.__next__","title":"<code>__next__()</code>","text":"Source code in <code>prettyqt\\core\\diriterator.py</code> <pre><code>def __next__(self):\nif self.hasNext():\nreturn self.next()\nraise StopIteration\n</code></pre>"},{"location":"api/core.html#prettyqt.core.diriterator.DirIterator.get_file_info","title":"<code>get_file_info() -&gt; core.FileInfo</code>","text":"Source code in <code>prettyqt\\core\\diriterator.py</code> <pre><code>def get_file_info(self) -&gt; core.FileInfo:\nreturn core.FileInfo(self.fileInfo())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.diriterator.DirIterator.get_file_path","title":"<code>get_file_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\diriterator.py</code> <pre><code>def get_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.filePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.EasingCurve","title":"<code>EasingCurve</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QEasingCurve</code></p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>class EasingCurve(serializemixin.SerializeMixin, QtCore.QEasingCurve):\ndef __init__(self, other_or_type: TypeStr | int | QtCore.QEasingCurve = \"linear\"):\nif isinstance(other_or_type, str) and other_or_type in TYPE:\ntyp = TYPE[other_or_type]\nelse:\ntyp = other_or_type\nsuper().__init__(typ)\ndef __getitem__(self, value: float) -&gt; float:\nreturn self.valueForProgress(value)\ndef __repr__(self):\nreturn get_repr(self, self.get_type())\ndef set_custom_type(self, method: CurveMethod):\nself.setCustomType(method)\ndef get_custom_type(self) -&gt; CurveMethod:\nreturn self.customType()  # type: ignore\ndef set_type(self, typ: TypeStr):\n\"\"\"Set easing curve type.\n        Args:\n            typ: easing curve type\n        Raises:\n            InvalidParamError: easing curve type does not exist\n        \"\"\"\nif typ not in TYPE:\nraise InvalidParamError(typ, TYPE)\nself.setType(TYPE[typ])\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Get the current easing curve type.\n        Returns:\n            easing curve type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.__getitem__","title":"<code>__getitem__(value: float) -&gt; float</code>","text":"Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def __getitem__(self, value: float) -&gt; float:\nreturn self.valueForProgress(value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.__init__","title":"<code>__init__(other_or_type: TypeStr | int | QtCore.QEasingCurve = 'linear')</code>","text":"Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def __init__(self, other_or_type: TypeStr | int | QtCore.QEasingCurve = \"linear\"):\nif isinstance(other_or_type, str) and other_or_type in TYPE:\ntyp = TYPE[other_or_type]\nelse:\ntyp = other_or_type\nsuper().__init__(typ)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_type())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.get_custom_type","title":"<code>get_custom_type() -&gt; CurveMethod</code>","text":"Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def get_custom_type(self) -&gt; CurveMethod:\nreturn self.customType()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Get the current easing curve type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>easing curve type</p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Get the current easing curve type.\n    Returns:\n        easing curve type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.set_custom_type","title":"<code>set_custom_type(method: CurveMethod)</code>","text":"Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def set_custom_type(self, method: CurveMethod):\nself.setCustomType(method)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.easingcurve.EasingCurve.set_type","title":"<code>set_type(typ: TypeStr)</code>","text":"<p>Set easing curve type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>TypeStr</code> <p>easing curve type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>easing curve type does not exist</p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def set_type(self, typ: TypeStr):\n\"\"\"Set easing curve type.\n    Args:\n        typ: easing curve type\n    Raises:\n        InvalidParamError: easing curve type does not exist\n    \"\"\"\nif typ not in TYPE:\nraise InvalidParamError(typ, TYPE)\nself.setType(TYPE[typ])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ElapsedTimer","title":"<code>ElapsedTimer</code>","text":"<p>         Bases: <code>QtCore.QElapsedTimer</code></p> Source code in <code>prettyqt\\core\\elapsedtimer.py</code> <pre><code>class ElapsedTimer(QtCore.QElapsedTimer):\ndef __bool__(self):\nreturn self.isValid()\ndef get_clock_type(self) -&gt; ClockTypeStr:\n\"\"\"Return current clock type.\n        Returns:\n            clock type\n        \"\"\"\nreturn CLOCK_TYPE.inverse[self.clockType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.elapsedtimer.ElapsedTimer.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\elapsedtimer.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.elapsedtimer.ElapsedTimer.get_clock_type","title":"<code>get_clock_type() -&gt; ClockTypeStr</code>","text":"<p>Return current clock type.</p> <p>Returns:</p> Type Description <code>ClockTypeStr</code> <p>clock type</p> Source code in <code>prettyqt\\core\\elapsedtimer.py</code> <pre><code>def get_clock_type(self) -&gt; ClockTypeStr:\n\"\"\"Return current clock type.\n    Returns:\n        clock type\n    \"\"\"\nreturn CLOCK_TYPE.inverse[self.clockType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.EventLoop","title":"<code>EventLoop</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QEventLoop</code></p> Source code in <code>prettyqt\\core\\eventloop.py</code> <pre><code>class EventLoop(core.ObjectMixin, QtCore.QEventLoop):\ndef __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself._executing = False\ndef execute(\nself,\nuser_input: bool = True,\nsocket_notifiers: bool = True,\nwait_for_more: bool = False,\n) -&gt; int:\nif self._executing:\nraise AssertionError(\"Eventloop is already running!\")\nself._executing = True\nflag = QtCore.QEventLoop.ProcessEventFlag(0)\nif not user_input:\nflag |= 1\nif not socket_notifiers:\nflag |= 2\nif wait_for_more:\nflag |= 4\nstatus = self.exec(flag)\nself._executing = False\nreturn status\n</code></pre>"},{"location":"api/core.html#prettyqt.core.eventloop.EventLoop.__init__","title":"<code>__init__(*args, **kwargs) -&gt; None</code>","text":"Source code in <code>prettyqt\\core\\eventloop.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself._executing = False\n</code></pre>"},{"location":"api/core.html#prettyqt.core.eventloop.EventLoop.execute","title":"<code>execute(user_input: bool = True, socket_notifiers: bool = True, wait_for_more: bool = False) -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\eventloop.py</code> <pre><code>def execute(\nself,\nuser_input: bool = True,\nsocket_notifiers: bool = True,\nwait_for_more: bool = False,\n) -&gt; int:\nif self._executing:\nraise AssertionError(\"Eventloop is already running!\")\nself._executing = True\nflag = QtCore.QEventLoop.ProcessEventFlag(0)\nif not user_input:\nflag |= 1\nif not socket_notifiers:\nflag |= 2\nif wait_for_more:\nflag |= 4\nstatus = self.exec(flag)\nself._executing = False\nreturn status\n</code></pre>"},{"location":"api/core.html#prettyqt.core.File","title":"<code>File</code>","text":"<p>         Bases: <code>FileMixin</code>, <code>QtCore.QFile</code></p> Source code in <code>prettyqt\\core\\file.py</code> <pre><code>class File(FileMixin, QtCore.QFile):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileDevice","title":"<code>FileDevice</code>","text":"<p>         Bases: <code>FileDeviceMixin</code>, <code>QtCore.QFileDevice</code></p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>class FileDevice(FileDeviceMixin, QtCore.QFileDevice):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileDeviceMixin","title":"<code>FileDeviceMixin</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code></p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>class FileDeviceMixin(core.IODeviceMixin):\ndef __repr__(self):\nreturn get_repr(self, self.fileName())\ndef __str__(self):\nreturn self.fileName()\ndef get_permissions(self) -&gt; list[PermissionStr]:\nreturn PERMISSIONS.get_list(self.permissions())\ndef set_file_time(self, file_time: datatypes.DateTimeType, typ: FileTimeStr) -&gt; bool:\n\"\"\"Set file time.\n        Args:\n            file_time: file time to set\n            typ: file time type\n        Raises:\n            InvalidParamError: file time does not exist\n        \"\"\"\nif isinstance(file_time, str):\nfile_time = dateutil.parser.parse(file_time)\nif typ not in FILE_TIME:\nraise InvalidParamError(typ, FILE_TIME)\nreturn self.setFileTime(file_time, FILE_TIME[typ])  # type: ignore\ndef get_file_time(self, typ: FileTimeStr) -&gt; datetime.datetime | None:\n\"\"\"Return current file time.\n        Returns:\n            file time\n        \"\"\"\nif typ not in FILE_TIME:\nraise InvalidParamError(typ, FILE_TIME)\nif date := self.fileTime(FILE_TIME[typ]):\nreturn date.toPython()  # type: ignore\ndef get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n        Returns:\n            file error status\n        \"\"\"\nreturn FILE_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.fileName())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def __str__(self):\nreturn self.fileName()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.get_error","title":"<code>get_error() -&gt; FileErrorStr</code>","text":"<p>Return file error status.</p> <p>Returns:</p> Type Description <code>FileErrorStr</code> <p>file error status</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n    Returns:\n        file error status\n    \"\"\"\nreturn FILE_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.get_file_time","title":"<code>get_file_time(typ: FileTimeStr) -&gt; datetime.datetime | None</code>","text":"<p>Return current file time.</p> <p>Returns:</p> Type Description <code>datetime.datetime | None</code> <p>file time</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_file_time(self, typ: FileTimeStr) -&gt; datetime.datetime | None:\n\"\"\"Return current file time.\n    Returns:\n        file time\n    \"\"\"\nif typ not in FILE_TIME:\nraise InvalidParamError(typ, FILE_TIME)\nif date := self.fileTime(FILE_TIME[typ]):\nreturn date.toPython()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.get_permissions","title":"<code>get_permissions() -&gt; list[PermissionStr]</code>","text":"Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_permissions(self) -&gt; list[PermissionStr]:\nreturn PERMISSIONS.get_list(self.permissions())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filedevice.FileDeviceMixin.set_file_time","title":"<code>set_file_time(file_time: datatypes.DateTimeType, typ: FileTimeStr) -&gt; bool</code>","text":"<p>Set file time.</p> <p>Parameters:</p> Name Type Description Default <code>file_time</code> <code>datatypes.DateTimeType</code> <p>file time to set</p> required <code>typ</code> <code>FileTimeStr</code> <p>file time type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>file time does not exist</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def set_file_time(self, file_time: datatypes.DateTimeType, typ: FileTimeStr) -&gt; bool:\n\"\"\"Set file time.\n    Args:\n        file_time: file time to set\n        typ: file time type\n    Raises:\n        InvalidParamError: file time does not exist\n    \"\"\"\nif isinstance(file_time, str):\nfile_time = dateutil.parser.parse(file_time)\nif typ not in FILE_TIME:\nraise InvalidParamError(typ, FILE_TIME)\nreturn self.setFileTime(file_time, FILE_TIME[typ])  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileInfo","title":"<code>FileInfo</code>","text":"<p>         Bases: <code>QtCore.QFileInfo</code></p> Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>class FileInfo(QtCore.QFileInfo):\ndef __init__(self, *args, **kwargs):\nif len(args) == 1 and isinstance(args[0], os.PathLike):\nsuper().__init__(os.fspath(args[0]))\nelse:\nsuper().__init__(*args, **kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.absoluteFilePath())\n@property\ndef _absoluteFilePath(self):\nreturn self.absoluteFilePath()\n__match_args__ = (\"_absoluteFilePath\",)\ndef __str__(self):\nreturn self.absoluteFilePath()\ndef __fspath__(self) -&gt; str:\nreturn self.absoluteFilePath()\ndef __getattr__(self, attr: str) -&gt; Any:\nreturn getattr(self.get_absolute_file_path(), attr)\ndef __reduce__(self):\nreturn type(self), (self.absoluteFilePath(),)\ndef get_dir(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.dir().absolutePath())\ndef get_absolute_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absoluteFilePath())\ndef get_birth_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.birthTime())\ndef get_metadata_change_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.metadataChangeTime())\ndef get_last_modified(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastModified())\ndef get_last_read(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastRead())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__match_args__","title":"<code>__match_args__ = ('_absoluteFilePath')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__fspath__","title":"<code>__fspath__() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def __fspath__(self) -&gt; str:\nreturn self.absoluteFilePath()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__getattr__","title":"<code>__getattr__(attr: str) -&gt; Any</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def __getattr__(self, attr: str) -&gt; Any:\nreturn getattr(self.get_absolute_file_path(), attr)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def __init__(self, *args, **kwargs):\nif len(args) == 1 and isinstance(args[0], os.PathLike):\nsuper().__init__(os.fspath(args[0]))\nelse:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.absoluteFilePath(),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.absoluteFilePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def __str__(self):\nreturn self.absoluteFilePath()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.get_absolute_file_path","title":"<code>get_absolute_file_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def get_absolute_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absoluteFilePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.get_birth_time","title":"<code>get_birth_time() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def get_birth_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.birthTime())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.get_dir","title":"<code>get_dir() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def get_dir(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.dir().absolutePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.get_last_modified","title":"<code>get_last_modified() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def get_last_modified(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastModified())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.get_last_read","title":"<code>get_last_read() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def get_last_read(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastRead())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileinfo.FileInfo.get_metadata_change_time","title":"<code>get_metadata_change_time() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>def get_metadata_change_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.metadataChangeTime())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileMixin","title":"<code>FileMixin</code>","text":"<p>         Bases: <code>core.FileDeviceMixin</code></p> Source code in <code>prettyqt\\core\\file.py</code> <pre><code>class FileMixin(core.FileDeviceMixin):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileSelector","title":"<code>FileSelector</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QFileSelector</code></p> Source code in <code>prettyqt\\core\\fileselector.py</code> <pre><code>class FileSelector(core.ObjectMixin, QtCore.QFileSelector):\ndef serialize_fields(self):\nreturn dict(extra_selectors=self.extraSelectors())\ndef select_path(self, path: datatypes.PathType) -&gt; str:\nreturn self.select(os.fspath(path))\ndef select_url(self, url: datatypes.UrlType) -&gt; core.Url:\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nreturn core.Url(self.select(url))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileselector.FileSelector.select_path","title":"<code>select_path(path: datatypes.PathType) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\fileselector.py</code> <pre><code>def select_path(self, path: datatypes.PathType) -&gt; str:\nreturn self.select(os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileselector.FileSelector.select_url","title":"<code>select_url(url: datatypes.UrlType) -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\core\\fileselector.py</code> <pre><code>def select_url(self, url: datatypes.UrlType) -&gt; core.Url:\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nreturn core.Url(self.select(url))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.fileselector.FileSelector.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\core\\fileselector.py</code> <pre><code>def serialize_fields(self):\nreturn dict(extra_selectors=self.extraSelectors())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.FileSystemWatcher","title":"<code>FileSystemWatcher</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QFileSystemWatcher</code></p> Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>class FileSystemWatcher(core.ObjectMixin, QtCore.QFileSystemWatcher):\ndef __repr__(self):\nreturn get_repr(self, self.directories() + self.files())\ndef get_directories(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.directories()]\ndef get_files(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.files()]\ndef get_paths(self) -&gt; list[pathlib.Path]:\nreturn self.get_directories() + self.get_files()\ndef add_path(self, path: datatypes.PathType) -&gt; bool:\nreturn self.addPath(os.fspath(path))\ndef add_paths(self, paths: list[datatypes.PathType]):\nself.addPaths([os.fspath(p) for p in paths])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filesystemwatcher.FileSystemWatcher.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.directories() + self.files())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filesystemwatcher.FileSystemWatcher.add_path","title":"<code>add_path(path: datatypes.PathType) -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>def add_path(self, path: datatypes.PathType) -&gt; bool:\nreturn self.addPath(os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filesystemwatcher.FileSystemWatcher.add_paths","title":"<code>add_paths(paths: list[datatypes.PathType])</code>","text":"Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>def add_paths(self, paths: list[datatypes.PathType]):\nself.addPaths([os.fspath(p) for p in paths])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filesystemwatcher.FileSystemWatcher.get_directories","title":"<code>get_directories() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>def get_directories(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.directories()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filesystemwatcher.FileSystemWatcher.get_files","title":"<code>get_files() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>def get_files(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.files()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.filesystemwatcher.FileSystemWatcher.get_paths","title":"<code>get_paths() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>def get_paths(self) -&gt; list[pathlib.Path]:\nreturn self.get_directories() + self.get_files()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.IODevice","title":"<code>IODevice</code>","text":"<p>         Bases: <code>IODeviceMixin</code>, <code>QtCore.QIODevice</code></p> Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>class IODevice(IODeviceMixin, QtCore.QIODevice):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.IODeviceMixin","title":"<code>IODeviceMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>class IODeviceMixin(core.ObjectMixin):\ndef __len__(self):\nreturn self.size()\n@contextlib.contextmanager\ndef open_file(self, mode: OpenModeStr):\nif mode not in OPEN_MODES:\nraise InvalidParamError(mode, OPEN_MODES)\nself.open(OPEN_MODES[mode])\nyield self\nself.close()\ndef get_open_mode(self) -&gt; OpenModeStr:\nreturn OPEN_MODES.inverse[self.openMode()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.iodevice.IODeviceMixin.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>def __len__(self):\nreturn self.size()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.iodevice.IODeviceMixin.get_open_mode","title":"<code>get_open_mode() -&gt; OpenModeStr</code>","text":"Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>def get_open_mode(self) -&gt; OpenModeStr:\nreturn OPEN_MODES.inverse[self.openMode()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.iodevice.IODeviceMixin.open_file","title":"<code>open_file(mode: OpenModeStr)</code>","text":"Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>@contextlib.contextmanager\ndef open_file(self, mode: OpenModeStr):\nif mode not in OPEN_MODES:\nraise InvalidParamError(mode, OPEN_MODES)\nself.open(OPEN_MODES[mode])\nyield self\nself.close()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.IdentityProxyModel","title":"<code>IdentityProxyModel</code>","text":"<p>         Bases: <code>core.AbstractProxyModelMixin</code>, <code>QtCore.QIdentityProxyModel</code></p> Source code in <code>prettyqt\\core\\identityproxymodel.py</code> <pre><code>class IdentityProxyModel(core.AbstractProxyModelMixin, QtCore.QIdentityProxyModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ItemSelection","title":"<code>ItemSelection</code>","text":"<p>         Bases: <code>QtCore.QItemSelection</code></p> Source code in <code>prettyqt\\core\\itemselection.py</code> <pre><code>class ItemSelection(QtCore.QItemSelection):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ItemSelectionModel","title":"<code>ItemSelectionModel</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QItemSelectionModel</code></p> Source code in <code>prettyqt\\core\\itemselectionmodel.py</code> <pre><code>class ItemSelectionModel(core.ObjectMixin, QtCore.QItemSelectionModel):\ndef set_current_index(self, index, flag: SelectionFlagStr):\nself.setCurrentIndex(index, SELECTION_FLAG[flag])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.itemselectionmodel.ItemSelectionModel.set_current_index","title":"<code>set_current_index(index, flag: SelectionFlagStr)</code>","text":"Source code in <code>prettyqt\\core\\itemselectionmodel.py</code> <pre><code>def set_current_index(self, index, flag: SelectionFlagStr):\nself.setCurrentIndex(index, SELECTION_FLAG[flag])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ItemSelectionRange","title":"<code>ItemSelectionRange</code>","text":"<p>         Bases: <code>QtCore.QItemSelectionRange</code></p> Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>class ItemSelectionRange(QtCore.QItemSelectionRange):\ndef __contains__(self, other: QtCore.QModelIndex):\nreturn self.contains(other)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __iter__(self) -&gt; Iterator[QtCore.QModelIndex]:\nreturn iter(self.indexes())  # type: ignore\ndef __len__(self):\nreturn len(self.indexes())\ndef __and__(self, other: QtCore.QItemSelectionRange):\nreturn self.intersected(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.itemselectionrange.ItemSelectionRange.__and__","title":"<code>__and__(other: QtCore.QItemSelectionRange)</code>","text":"Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>def __and__(self, other: QtCore.QItemSelectionRange):\nreturn self.intersected(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.itemselectionrange.ItemSelectionRange.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.itemselectionrange.ItemSelectionRange.__contains__","title":"<code>__contains__(other: QtCore.QModelIndex)</code>","text":"Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>def __contains__(self, other: QtCore.QModelIndex):\nreturn self.contains(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.itemselectionrange.ItemSelectionRange.__iter__","title":"<code>__iter__() -&gt; Iterator[QtCore.QModelIndex]</code>","text":"Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtCore.QModelIndex]:\nreturn iter(self.indexes())  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.itemselectionrange.ItemSelectionRange.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>def __len__(self):\nreturn len(self.indexes())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.JsonDocument","title":"<code>JsonDocument</code>","text":"<p>         Bases: <code>QtCore.QJsonDocument</code></p> Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>class JsonDocument(QtCore.QJsonDocument):\ndef __str__(self):\nreturn str(self.toVariant())\ndef __format__(self, fmt):\nif fmt in JSON_FORMAT:\nreturn self.to_string(fmt == \"indented\")\nreturn super().__format__(fmt)\ndef __repr__(self):\nreturn get_repr(self, self.toVariant())\ndef __getitem__(self, index: int | str):\nval = self.array() if self.isArray() else self.object()\nreturn core.JsonValue(val[index])  # type: ignore\ndef __setitem__(self, index: int | str, value):\nif self.isArray():\nif not isinstance(index, int):\nraise TypeError()\narray = self.array()\narray[index] = value\nself.setArray(array)\nelif self.isObject():\nif not isinstance(index, str):\nraise TypeError()\nobj = self.object()\nobj[index] = value\nself.setObject(obj)\ndef to_string(self, indented: bool = False) -&gt; str:\nflag = self.JsonFormat.Indented if indented else self.JsonFormat.Compact\nreturn self.toJson(flag).data().decode()\n@classmethod\ndef from_variant(cls, obj) -&gt; Self:\ndoc = cls.fromVariant(obj)\nnew = cls()\nif doc.isArray():\nnew.setArray(doc.array())\nelse:\nnew.setObject(doc.object())\nreturn new\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.__format__","title":"<code>__format__(fmt)</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>def __format__(self, fmt):\nif fmt in JSON_FORMAT:\nreturn self.to_string(fmt == \"indented\")\nreturn super().__format__(fmt)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.__getitem__","title":"<code>__getitem__(index: int | str)</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>def __getitem__(self, index: int | str):\nval = self.array() if self.isArray() else self.object()\nreturn core.JsonValue(val[index])  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toVariant())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.__setitem__","title":"<code>__setitem__(index: int | str, value: int | str)</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>def __setitem__(self, index: int | str, value):\nif self.isArray():\nif not isinstance(index, int):\nraise TypeError()\narray = self.array()\narray[index] = value\nself.setArray(array)\nelif self.isObject():\nif not isinstance(index, str):\nraise TypeError()\nobj = self.object()\nobj[index] = value\nself.setObject(obj)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>def __str__(self):\nreturn str(self.toVariant())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.from_variant","title":"<code>from_variant(obj) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>@classmethod\ndef from_variant(cls, obj) -&gt; Self:\ndoc = cls.fromVariant(obj)\nnew = cls()\nif doc.isArray():\nnew.setArray(doc.array())\nelse:\nnew.setObject(doc.object())\nreturn new\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsondocument.JsonDocument.to_string","title":"<code>to_string(indented: bool = False) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>def to_string(self, indented: bool = False) -&gt; str:\nflag = self.JsonFormat.Indented if indented else self.JsonFormat.Compact\nreturn self.toJson(flag).data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.JsonValue","title":"<code>JsonValue</code>","text":"<p>         Bases: <code>QtCore.QJsonValue</code></p> Source code in <code>prettyqt\\core\\jsonvalue.py</code> <pre><code>class JsonValue(QtCore.QJsonValue):\ndef __str__(self):\nreturn str(self.toVariant())\ndef __repr__(self):\nreturn get_repr(self, self.toVariant())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsonvalue.JsonValue.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\jsonvalue.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toVariant())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.jsonvalue.JsonValue.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\jsonvalue.py</code> <pre><code>def __str__(self):\nreturn str(self.toVariant())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.KeyCombination","title":"<code>KeyCombination</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QKeyCombination</code></p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>class KeyCombination(serializemixin.SerializeMixin, QtCore.QKeyCombination):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in MODIFIERS.inverse.values():\nmods = args[0].split(\"+\")\nqtmod = functools.reduce(or_, [MODIFIERS[m] for m in mods])\nsuper().__init__(qtmod, Keys.No)\nreturn\ncase (str(),):\n*mods, btn = args[0].split(\"+\")\n# get modifiler\nqtmod = (\nfunctools.reduce(or_, [MODIFIERS[m] for m in mods])\nif mods\nelse Mod.NoModifier\n)\n# get button\nif btn in _SYMBOLS:\nbtn = _SYMBOLS[btn]\nif btn.isalnum():\nbtn = btn.upper()\nqtkey = getattr(Key, f\"Key_{btn}\") if btn != \"{}\" else Keys.Any\nsuper().__init__(qtmod, qtkey)\ncase (QtCore.QEvent(),):\nmodifier = args[0].modifiers()\nmodifier ^= Mod.KeypadModifier\nkey = args[0].key()\nif key in MODIFIER_KEYS:  # modifier only\nkey = Keys.No\nsuper().__init__(key, modifier)\ncase _:\nsuper().__init__(*args, **kwargs)\ndef __eq__(self, other):\nif isinstance(other, str | Key):\nother = KeyCombination(other)\nreturn super().__eq__(other)\ndef __repr__(self):\nreturn get_repr(self, self.key(), self.keyboardModifiers())\ndef is_typing(self) -&gt; bool:\n\"\"\"True if key is a letter or number.\"\"\"\nmod_ok = self.keyboardModifiers() in (Mod.NoModifier, Mod.ShiftModifier)\nkey = self.key()\nkey_ok = (\nKey.Key_Exclam &lt;= key &lt;= Key.Key_ydiaeresis\nor Keys.ALPHA &lt;= key &lt;= Keys.OMEGA\nor Keys.CYR_A &lt;= key &lt;= Keys.CYR_YA\n)\nreturn mod_ok and key_ok\ndef is_moving(self) -&gt; bool:\n\"\"\"True if arrows are pushed.\"\"\"\nreturn self.key() in ARROW_KEYS\ndef is_moving_func(self) -&gt; bool:\n\"\"\"True if function arrows are pushed.\"\"\"\nreturn self.key() in FUNC_ARROW_KEYS\ndef has_modifier(self, modifier: constants.KeyboardModifierStr) -&gt; bool:\n\"\"\"True if Ctrl is pressed.\"\"\"\nreturn bool(self.keyboardModifiers() &amp; constants.KEYBOARD_MODIFIERS[modifier])\ndef has_key(self) -&gt; bool:\n\"\"\"True if non-modifier key is pressed.\"\"\"\nreturn self.key() != Keys.No\ndef get_key(self) -&gt; constants.KeyStr:\nreturn constants.KEY.inverse[self.key()]\ndef get_modifiers(self) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(self.keyboardModifiers())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.__eq__","title":"<code>__eq__(other)</code>","text":"Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def __eq__(self, other):\nif isinstance(other, str | Key):\nother = KeyCombination(other)\nreturn super().__eq__(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in MODIFIERS.inverse.values():\nmods = args[0].split(\"+\")\nqtmod = functools.reduce(or_, [MODIFIERS[m] for m in mods])\nsuper().__init__(qtmod, Keys.No)\nreturn\ncase (str(),):\n*mods, btn = args[0].split(\"+\")\n# get modifiler\nqtmod = (\nfunctools.reduce(or_, [MODIFIERS[m] for m in mods])\nif mods\nelse Mod.NoModifier\n)\n# get button\nif btn in _SYMBOLS:\nbtn = _SYMBOLS[btn]\nif btn.isalnum():\nbtn = btn.upper()\nqtkey = getattr(Key, f\"Key_{btn}\") if btn != \"{}\" else Keys.Any\nsuper().__init__(qtmod, qtkey)\ncase (QtCore.QEvent(),):\nmodifier = args[0].modifiers()\nmodifier ^= Mod.KeypadModifier\nkey = args[0].key()\nif key in MODIFIER_KEYS:  # modifier only\nkey = Keys.No\nsuper().__init__(key, modifier)\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.key(), self.keyboardModifiers())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.get_key","title":"<code>get_key() -&gt; constants.KeyStr</code>","text":"Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def get_key(self) -&gt; constants.KeyStr:\nreturn constants.KEY.inverse[self.key()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.get_modifiers","title":"<code>get_modifiers() -&gt; list[constants.KeyboardModifierStr]</code>","text":"Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def get_modifiers(self) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(self.keyboardModifiers())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.has_key","title":"<code>has_key() -&gt; bool</code>","text":"<p>True if non-modifier key is pressed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def has_key(self) -&gt; bool:\n\"\"\"True if non-modifier key is pressed.\"\"\"\nreturn self.key() != Keys.No\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.has_modifier","title":"<code>has_modifier(modifier: constants.KeyboardModifierStr) -&gt; bool</code>","text":"<p>True if Ctrl is pressed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def has_modifier(self, modifier: constants.KeyboardModifierStr) -&gt; bool:\n\"\"\"True if Ctrl is pressed.\"\"\"\nreturn bool(self.keyboardModifiers() &amp; constants.KEYBOARD_MODIFIERS[modifier])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.is_moving","title":"<code>is_moving() -&gt; bool</code>","text":"<p>True if arrows are pushed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_moving(self) -&gt; bool:\n\"\"\"True if arrows are pushed.\"\"\"\nreturn self.key() in ARROW_KEYS\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.is_moving_func","title":"<code>is_moving_func() -&gt; bool</code>","text":"<p>True if function arrows are pushed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_moving_func(self) -&gt; bool:\n\"\"\"True if function arrows are pushed.\"\"\"\nreturn self.key() in FUNC_ARROW_KEYS\n</code></pre>"},{"location":"api/core.html#prettyqt.core.keycombination.KeyCombination.is_typing","title":"<code>is_typing() -&gt; bool</code>","text":"<p>True if key is a letter or number.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_typing(self) -&gt; bool:\n\"\"\"True if key is a letter or number.\"\"\"\nmod_ok = self.keyboardModifiers() in (Mod.NoModifier, Mod.ShiftModifier)\nkey = self.key()\nkey_ok = (\nKey.Key_Exclam &lt;= key &lt;= Key.Key_ydiaeresis\nor Keys.ALPHA &lt;= key &lt;= Keys.OMEGA\nor Keys.CYR_A &lt;= key &lt;= Keys.CYR_YA\n)\nreturn mod_ok and key_ok\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Library","title":"<code>Library</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QLibrary</code></p> Source code in <code>prettyqt\\core\\library.py</code> <pre><code>class Library(core.ObjectMixin, QtCore.QLibrary):\ndef __bool__(self):\nreturn self.isLoaded()\ndef __repr__(self):\nreturn get_repr(self, self.fileName())\ndef get_load_hints(self) -&gt; list[LoadHintStr]:\nreturn LOAD_HINTS.get_list(self.loadHints())\ndef set_load_hints(self, **kwargs):\nflag = QtCore.QLibrary.LoadHint(0)\nfor k, v in kwargs.items():\nif v is True:\nflag |= LOAD_HINTS[k]\nself.setLoadHints(flag)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.library.Library.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\library.py</code> <pre><code>def __bool__(self):\nreturn self.isLoaded()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.library.Library.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\library.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.fileName())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.library.Library.get_load_hints","title":"<code>get_load_hints() -&gt; list[LoadHintStr]</code>","text":"Source code in <code>prettyqt\\core\\library.py</code> <pre><code>def get_load_hints(self) -&gt; list[LoadHintStr]:\nreturn LOAD_HINTS.get_list(self.loadHints())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.library.Library.set_load_hints","title":"<code>set_load_hints(**kwargs)</code>","text":"Source code in <code>prettyqt\\core\\library.py</code> <pre><code>def set_load_hints(self, **kwargs):\nflag = QtCore.QLibrary.LoadHint(0)\nfor k, v in kwargs.items():\nif v is True:\nflag |= LOAD_HINTS[k]\nself.setLoadHints(flag)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.LibraryInfo","title":"<code>LibraryInfo</code>","text":"<p>         Bases: <code>QtCore.QLibraryInfo</code></p> Source code in <code>prettyqt\\core\\libraryinfo.py</code> <pre><code>class LibraryInfo(QtCore.QLibraryInfo):\ndef __class_getitem__(cls, name: LocationStr) -&gt; pathlib.Path:\nreturn cls.get_location(name)\n@classmethod\ndef get_location(cls, location: LocationStr) -&gt; pathlib.Path:\nif location not in LOCATION:\nraise InvalidParamError(location, LOCATION)\npath = cls.path(LOCATION[location])\nreturn pathlib.Path(path)\n@classmethod\ndef get_version(cls) -&gt; core.VersionNumber:\nreturn core.VersionNumber(cls.version())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.libraryinfo.LibraryInfo.__class_getitem__","title":"<code>__class_getitem__(name: LocationStr) -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\libraryinfo.py</code> <pre><code>def __class_getitem__(cls, name: LocationStr) -&gt; pathlib.Path:\nreturn cls.get_location(name)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.libraryinfo.LibraryInfo.get_location","title":"<code>get_location(location: LocationStr) -&gt; pathlib.Path</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\libraryinfo.py</code> <pre><code>@classmethod\ndef get_location(cls, location: LocationStr) -&gt; pathlib.Path:\nif location not in LOCATION:\nraise InvalidParamError(location, LOCATION)\npath = cls.path(LOCATION[location])\nreturn pathlib.Path(path)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.libraryinfo.LibraryInfo.get_version","title":"<code>get_version() -&gt; core.VersionNumber</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\libraryinfo.py</code> <pre><code>@classmethod\ndef get_version(cls) -&gt; core.VersionNumber:\nreturn core.VersionNumber(cls.version())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Line","title":"<code>Line</code>","text":"<p>         Bases: <code>QtCore.QLine</code></p> Source code in <code>prettyqt\\core\\line.py</code> <pre><code>class Line(QtCore.QLine):\ndef __repr__(self):\nreturn get_repr(self, self.get_p1(), self.get_p2())\n@property\ndef _x1(self):\nreturn self.get_x1()\n@property\ndef _y1(self):\nreturn self.y1()\n@property\ndef _x2(self):\nreturn self.x2()\n@property\ndef _y2(self):\nreturn self.y2()\n__match_args__ = (\"_x1\", \"_y1\", \"_x2\", \"_y2\")\ndef __reduce__(self):\nreturn type(self), (self.get_p1(), self.get_p1())\ndef __abs__(self) -&gt; float:\np = self.get_p2() - self.get_p1()\nreturn math.sqrt((p.x() * p.x()) + (p.y() * p.y()))\ndef __reversed__(self) -&gt; Self:\nreturn type(self)(self.get_p2(), self.get_p1())\ndef __iter__(self) -&gt; Iterator[core.Point]:\nyield self.get_p1()\nyield self.get_p2()\ndef __getitem__(self, index: Literal[0, 1]) -&gt; core.Point:\nif index == 0:\nreturn self.get_p1()\nelif index == 1:\nreturn self.get_p2()\nelse:\nraise KeyError(index)\ndef __setitem__(self, index: Literal[0, 1], value: datatypes.PointType):\nif index == 0:\nself.set_p1(value)\nelif index == 1:\nself.set_p2(value)\nelse:\nraise KeyError(index)\ndef get_p1(self) -&gt; core.Point:\nreturn core.Point(self.p1())\ndef set_p1(self, point: datatypes.PointType):\nif isinstance(point, tuple):\npoint = core.Point(*point)\nself.setP1(point)\ndef get_p2(self) -&gt; core.Point:\nreturn core.Point(self.p2())\ndef set_p2(self, point: datatypes.PointType):\nif isinstance(point, tuple):\npoint = core.Point(*point)\nself.setP2(point)\ndef get_center(self) -&gt; core.Point:\nreturn core.Point(self.center())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__match_args__","title":"<code>__match_args__ = ('_x1', '_y1', '_x2', '_y2')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.line.Line.__abs__","title":"<code>__abs__() -&gt; float</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __abs__(self) -&gt; float:\np = self.get_p2() - self.get_p1()\nreturn math.sqrt((p.x() * p.x()) + (p.y() * p.y()))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__getitem__","title":"<code>__getitem__(index: Literal[0, 1]) -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __getitem__(self, index: Literal[0, 1]) -&gt; core.Point:\nif index == 0:\nreturn self.get_p1()\nelif index == 1:\nreturn self.get_p2()\nelse:\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__iter__","title":"<code>__iter__() -&gt; Iterator[core.Point]</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __iter__(self) -&gt; Iterator[core.Point]:\nyield self.get_p1()\nyield self.get_p2()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.get_p1(), self.get_p1())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_p1(), self.get_p2())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__reversed__","title":"<code>__reversed__() -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __reversed__(self) -&gt; Self:\nreturn type(self)(self.get_p2(), self.get_p1())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.__setitem__","title":"<code>__setitem__(index: Literal[0, 1], value: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def __setitem__(self, index: Literal[0, 1], value: datatypes.PointType):\nif index == 0:\nself.set_p1(value)\nelif index == 1:\nself.set_p2(value)\nelse:\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.get_center","title":"<code>get_center() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def get_center(self) -&gt; core.Point:\nreturn core.Point(self.center())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.get_p1","title":"<code>get_p1() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def get_p1(self) -&gt; core.Point:\nreturn core.Point(self.p1())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.get_p2","title":"<code>get_p2() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def get_p2(self) -&gt; core.Point:\nreturn core.Point(self.p2())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.set_p1","title":"<code>set_p1(point: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def set_p1(self, point: datatypes.PointType):\nif isinstance(point, tuple):\npoint = core.Point(*point)\nself.setP1(point)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.line.Line.set_p2","title":"<code>set_p2(point: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\core\\line.py</code> <pre><code>def set_p2(self, point: datatypes.PointType):\nif isinstance(point, tuple):\npoint = core.Point(*point)\nself.setP2(point)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.LineF","title":"<code>LineF</code>","text":"<p>         Bases: <code>QtCore.QLineF</code></p> Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>class LineF(QtCore.QLineF):\ndef __repr__(self):\nreturn get_repr(self, self.get_p1(), self.get_p2())\n@property\ndef _x1(self):\nreturn self.get_x1()\n@property\ndef _y1(self):\nreturn self.y1()\n@property\ndef _x2(self):\nreturn self.x2()\n@property\ndef _y2(self):\nreturn self.y2()\n__match_args__ = (\"_x1\", \"_y1\", \"_x2\", \"_y2\")\ndef __reduce__(self):\nreturn type(self), (self.get_p1(), self.get_p1())\ndef __reversed__(self):\nreturn LineF(self.get_p2(), self.get_p1())\ndef __abs__(self) -&gt; float:\nreturn self.length()\ndef __iter__(self) -&gt; Iterator[core.PointF]:\nyield self.get_p1()\nyield self.get_p2()\ndef __getitem__(self, index: Literal[0, 1]) -&gt; core.PointF:\nif index == 0:\nreturn self.get_p1()\nelif index == 1:\nreturn self.get_p2()\nelse:\nraise KeyError(index)\ndef __setitem__(self, index: Literal[0, 1], value: datatypes.PointFType):\nif index == 0:\nself.set_p1(value)\nelif index == 1:\nself.set_p2(value)\nelse:\nraise KeyError(index)\ndef set_p1(self, point: datatypes.PointFType):\nself.setP1(core.PointF(*point) if isinstance(point, tuple) else point)\ndef get_p1(self) -&gt; core.PointF:\nreturn core.PointF(self.p1())\ndef set_p2(self, point: datatypes.PointFType):\nself.setP2(core.PointF(*point) if isinstance(point, tuple) else point)\ndef get_p2(self) -&gt; core.PointF:\nreturn core.PointF(self.p2())\ndef get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\ndef get_normal_vector(self) -&gt; Self:\nreturn type(self)(self.normalVector())\ndef get_unit_vector(self) -&gt; Self:\nreturn type(self)(self.unitVector())\ndef to_line(self) -&gt; core.Line:\nreturn core.Line(self.toLine())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__match_args__","title":"<code>__match_args__ = ('_x1', '_y1', '_x2', '_y2')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.linef.LineF.__abs__","title":"<code>__abs__() -&gt; float</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __abs__(self) -&gt; float:\nreturn self.length()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__getitem__","title":"<code>__getitem__(index: Literal[0, 1]) -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __getitem__(self, index: Literal[0, 1]) -&gt; core.PointF:\nif index == 0:\nreturn self.get_p1()\nelif index == 1:\nreturn self.get_p2()\nelse:\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__iter__","title":"<code>__iter__() -&gt; Iterator[core.PointF]</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __iter__(self) -&gt; Iterator[core.PointF]:\nyield self.get_p1()\nyield self.get_p2()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.get_p1(), self.get_p1())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_p1(), self.get_p2())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__reversed__","title":"<code>__reversed__()</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __reversed__(self):\nreturn LineF(self.get_p2(), self.get_p1())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.__setitem__","title":"<code>__setitem__(index: Literal[0, 1], value: datatypes.PointFType)</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def __setitem__(self, index: Literal[0, 1], value: datatypes.PointFType):\nif index == 0:\nself.set_p1(value)\nelif index == 1:\nself.set_p2(value)\nelse:\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.get_center","title":"<code>get_center() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.get_normal_vector","title":"<code>get_normal_vector() -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def get_normal_vector(self) -&gt; Self:\nreturn type(self)(self.normalVector())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.get_p1","title":"<code>get_p1() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def get_p1(self) -&gt; core.PointF:\nreturn core.PointF(self.p1())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.get_p2","title":"<code>get_p2() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def get_p2(self) -&gt; core.PointF:\nreturn core.PointF(self.p2())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.get_unit_vector","title":"<code>get_unit_vector() -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def get_unit_vector(self) -&gt; Self:\nreturn type(self)(self.unitVector())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.set_p1","title":"<code>set_p1(point: datatypes.PointFType)</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def set_p1(self, point: datatypes.PointFType):\nself.setP1(core.PointF(*point) if isinstance(point, tuple) else point)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.set_p2","title":"<code>set_p2(point: datatypes.PointFType)</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def set_p2(self, point: datatypes.PointFType):\nself.setP2(core.PointF(*point) if isinstance(point, tuple) else point)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.linef.LineF.to_line","title":"<code>to_line() -&gt; core.Line</code>","text":"Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>def to_line(self) -&gt; core.Line:\nreturn core.Line(self.toLine())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Locale","title":"<code>Locale</code>","text":"<p>         Bases: <code>QtCore.QLocale</code></p> Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>class Locale(QtCore.QLocale):\ndef __repr__(self):\nreturn get_repr(self, self.bcp47Name())\ndef __reduce__(self):\nreturn type(self), (self.bcp47Name(),)\n@classmethod\ndef get_system_locale(cls) -&gt; Self:\nreturn cls(cls.system())\n@classmethod\ndef get_system_language(cls) -&gt; str:\nreturn cls.get_system_locale().uiLanguages()[0]\ndef get_measurement_system(self) -&gt; MeasurementSystemStr:\nreturn MEASUREMENT_SYSTEM.inverse[self.measurementSystem()]\ndef get_formatted_data_size(\nself, size: int, precision: int = 2, fmt: DataSizeFormatStr = \"iec\"\n) -&gt; str:\nreturn self.formattedDataSize(size, precision, DATA_SIZE_FORMAT[fmt])\ndef get_first_day_of_week(self) -&gt; constants.DayOfWeekStr:\nreturn constants.DAY_OF_WEEK.inverse[self.firstDayOfWeek()]\ndef get_text_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.textDirection()]\ndef get_weekdays(self) -&gt; list[constants.DayOfWeekStr]:\nreturn constants.DAY_OF_WEEK.get_list(self.weekdays())\ndef get_day_name(self, day: int, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dayName(day, FORMAT_TYPE[format_type])\ndef get_month_name(self, month: int, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.monthName(month, FORMAT_TYPE[format_type])\ndef get_standalone_day_name(\nself, day: int, format_type: FormatTypeStr = \"long\"\n) -&gt; str:\nreturn self.standaloneDayName(day, FORMAT_TYPE[format_type])\ndef get_time_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.timeFormat(FORMAT_TYPE[format_type])\ndef get_date_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dateFormat(FORMAT_TYPE[format_type])\ndef get_datetime_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dateTimeFormat(FORMAT_TYPE[format_type])\ndef to_datetime(self, text: str, format_type: FormatTypeStr | str = \"long\") -&gt; str:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.toDateTime(text, format_type)\ndef to_date(self, text: str, format_type: FormatTypeStr | str = \"long\") -&gt; str:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.toDate(text, format_type)\ndef to_time(self, text: str, format_type: FormatTypeStr | str = \"long\") -&gt; str:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.to_time(text, format_type)\ndef get_standalone_month_name(\nself, month: int, format_type: FormatTypeStr = \"long\"\n) -&gt; str:\nreturn self.standaloneMonthName(month, FORMAT_TYPE[format_type])\ndef quote_string(self, string: str, alternate_style: bool = False) -&gt; str:\nflag = (\nself.QuotationStyle.AlternateQuotation\nif alternate_style\nelse self.QuotationStyle.StandardQuotation\n)\nreturn self.quoteString(string, flag)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.bcp47Name(),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.bcp47Name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_date_format","title":"<code>get_date_format(format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_date_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dateFormat(FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_datetime_format","title":"<code>get_datetime_format(format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_datetime_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dateTimeFormat(FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_day_name","title":"<code>get_day_name(day: int, format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_day_name(self, day: int, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dayName(day, FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_first_day_of_week","title":"<code>get_first_day_of_week() -&gt; constants.DayOfWeekStr</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_first_day_of_week(self) -&gt; constants.DayOfWeekStr:\nreturn constants.DAY_OF_WEEK.inverse[self.firstDayOfWeek()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_formatted_data_size","title":"<code>get_formatted_data_size(size: int, precision: int = 2, fmt: DataSizeFormatStr = 'iec') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_formatted_data_size(\nself, size: int, precision: int = 2, fmt: DataSizeFormatStr = \"iec\"\n) -&gt; str:\nreturn self.formattedDataSize(size, precision, DATA_SIZE_FORMAT[fmt])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_measurement_system","title":"<code>get_measurement_system() -&gt; MeasurementSystemStr</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_measurement_system(self) -&gt; MeasurementSystemStr:\nreturn MEASUREMENT_SYSTEM.inverse[self.measurementSystem()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_month_name","title":"<code>get_month_name(month: int, format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_month_name(self, month: int, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.monthName(month, FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_standalone_day_name","title":"<code>get_standalone_day_name(day: int, format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_standalone_day_name(\nself, day: int, format_type: FormatTypeStr = \"long\"\n) -&gt; str:\nreturn self.standaloneDayName(day, FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_standalone_month_name","title":"<code>get_standalone_month_name(month: int, format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_standalone_month_name(\nself, month: int, format_type: FormatTypeStr = \"long\"\n) -&gt; str:\nreturn self.standaloneMonthName(month, FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_system_language","title":"<code>get_system_language() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>@classmethod\ndef get_system_language(cls) -&gt; str:\nreturn cls.get_system_locale().uiLanguages()[0]\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_system_locale","title":"<code>get_system_locale() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>@classmethod\ndef get_system_locale(cls) -&gt; Self:\nreturn cls(cls.system())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_text_direction","title":"<code>get_text_direction() -&gt; constants.LayoutDirectionStr</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_text_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.textDirection()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_time_format","title":"<code>get_time_format(format_type: FormatTypeStr = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_time_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.timeFormat(FORMAT_TYPE[format_type])\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.get_weekdays","title":"<code>get_weekdays() -&gt; list[constants.DayOfWeekStr]</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def get_weekdays(self) -&gt; list[constants.DayOfWeekStr]:\nreturn constants.DAY_OF_WEEK.get_list(self.weekdays())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.quote_string","title":"<code>quote_string(string: str, alternate_style: bool = False) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def quote_string(self, string: str, alternate_style: bool = False) -&gt; str:\nflag = (\nself.QuotationStyle.AlternateQuotation\nif alternate_style\nelse self.QuotationStyle.StandardQuotation\n)\nreturn self.quoteString(string, flag)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.to_date","title":"<code>to_date(text: str, format_type: FormatTypeStr | str = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def to_date(self, text: str, format_type: FormatTypeStr | str = \"long\") -&gt; str:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.toDate(text, format_type)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.to_datetime","title":"<code>to_datetime(text: str, format_type: FormatTypeStr | str = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def to_datetime(self, text: str, format_type: FormatTypeStr | str = \"long\") -&gt; str:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.toDateTime(text, format_type)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._locale.Locale.to_time","title":"<code>to_time(text: str, format_type: FormatTypeStr | str = 'long') -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>def to_time(self, text: str, format_type: FormatTypeStr | str = \"long\") -&gt; str:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.to_time(text, format_type)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.LockFile","title":"<code>LockFile</code>","text":"<p>         Bases: <code>QtCore.QLockFile</code></p> Source code in <code>prettyqt\\core\\lockfile.py</code> <pre><code>class LockFile(QtCore.QLockFile):\ndef __init__(self, path: datatypes.PathType):\nsuper().__init__(os.fspath(path))\ndef get_error(self) -&gt; LockErrorStr:\nreturn LOCK_ERROR.inverse[self.error()]\n@contextlib.contextmanager\ndef lock_file(self):\nself.lock()\nyield self\nself.unlock()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.lockfile.LockFile.__init__","title":"<code>__init__(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\core\\lockfile.py</code> <pre><code>def __init__(self, path: datatypes.PathType):\nsuper().__init__(os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.lockfile.LockFile.get_error","title":"<code>get_error() -&gt; LockErrorStr</code>","text":"Source code in <code>prettyqt\\core\\lockfile.py</code> <pre><code>def get_error(self) -&gt; LockErrorStr:\nreturn LOCK_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.lockfile.LockFile.lock_file","title":"<code>lock_file()</code>","text":"Source code in <code>prettyqt\\core\\lockfile.py</code> <pre><code>@contextlib.contextmanager\ndef lock_file(self):\nself.lock()\nyield self\nself.unlock()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.LoggingCategory","title":"<code>LoggingCategory</code>","text":"<p>         Bases: <code>QtCore.QLoggingCategory</code></p> Source code in <code>prettyqt\\core\\loggingcategory.py</code> <pre><code>class LoggingCategory(QtCore.QLoggingCategory):\ndef get_level(self) -&gt; MsgTypeStr:\nif self.isDebugEnabled():\nreturn \"debug\"\nelif self.isInfoEnabled():\nreturn \"info\"\nelif self.isWarningEnabled():\nreturn \"warning\"\nelif self.isCriticalEnabled():\nreturn \"critical\"\nelse:\nreturn None\ndef set_enabled(\nself,\nlevel: MsgTypeStr,\n):\nself.setEnabled(MSG_TYPE[level], True)\ndef set_disabled(self, level: MsgTypeStr):\nself.setEnabled(MSG_TYPE[level], False)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.loggingcategory.LoggingCategory.get_level","title":"<code>get_level() -&gt; MsgTypeStr</code>","text":"Source code in <code>prettyqt\\core\\loggingcategory.py</code> <pre><code>def get_level(self) -&gt; MsgTypeStr:\nif self.isDebugEnabled():\nreturn \"debug\"\nelif self.isInfoEnabled():\nreturn \"info\"\nelif self.isWarningEnabled():\nreturn \"warning\"\nelif self.isCriticalEnabled():\nreturn \"critical\"\nelse:\nreturn None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.loggingcategory.LoggingCategory.set_disabled","title":"<code>set_disabled(level: MsgTypeStr)</code>","text":"Source code in <code>prettyqt\\core\\loggingcategory.py</code> <pre><code>def set_disabled(self, level: MsgTypeStr):\nself.setEnabled(MSG_TYPE[level], False)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.loggingcategory.LoggingCategory.set_enabled","title":"<code>set_enabled(level: MsgTypeStr)</code>","text":"Source code in <code>prettyqt\\core\\loggingcategory.py</code> <pre><code>def set_enabled(\nself,\nlevel: MsgTypeStr,\n):\nself.setEnabled(MSG_TYPE[level], True)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Margins","title":"<code>Margins</code>","text":"<p>         Bases: <code>QtCore.QMargins</code></p> Source code in <code>prettyqt\\core\\margins.py</code> <pre><code>class Margins(QtCore.QMargins):\ndef __repr__(self):\nreturn get_repr(self, self.left(), self.top(), self.right(), self.bottom())\ndef __reduce__(self):\nreturn type(self), (self.left(), self.top(), self.right(), self.bottom())\n@property\ndef _left(self):\nreturn self.left()\n@property\ndef _top(self):\nreturn self.top()\n@property\ndef _right(self):\nreturn self.right()\n@property\ndef _bottom(self):\nreturn self.bottom()\n__match_args__ = (\"_left\", \"_top\", \"_right\", \"_bottom\")\ndef __bool__(self):\nreturn not self.isNull()\ndef __iter__(self) -&gt; Iterator[int]:\nyield self.left()\nyield self.top()\nyield self.right()\nyield self.bottom()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.margins.Margins.__match_args__","title":"<code>__match_args__ = ('_left', '_top', '_right', '_bottom')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.margins.Margins.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\margins.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.margins.Margins.__iter__","title":"<code>__iter__() -&gt; Iterator[int]</code>","text":"Source code in <code>prettyqt\\core\\margins.py</code> <pre><code>def __iter__(self) -&gt; Iterator[int]:\nyield self.left()\nyield self.top()\nyield self.right()\nyield self.bottom()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.margins.Margins.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\margins.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.left(), self.top(), self.right(), self.bottom())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.margins.Margins.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\margins.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.left(), self.top(), self.right(), self.bottom())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MarginsF","title":"<code>MarginsF</code>","text":"<p>         Bases: <code>QtCore.QMarginsF</code></p> Source code in <code>prettyqt\\core\\marginsf.py</code> <pre><code>class MarginsF(QtCore.QMarginsF):\ndef __repr__(self):\nreturn get_repr(self, self.left(), self.top(), self.right(), self.bottom())\n@property\ndef _left(self):\nreturn self.left()\n@property\ndef _top(self):\nreturn self.top()\n@property\ndef _right(self):\nreturn self.right()\n@property\ndef _bottom(self):\nreturn self.bottom()\n__match_args__ = (\"_left\", \"_top\", \"_right\", \"_bottom\")\ndef __reduce__(self):\nreturn type(self), (self.left(), self.top(), self.right(), self.bottom())\ndef __bool__(self):\nreturn not self.isNull()\ndef __iter__(self) -&gt; Iterator[float]:\nyield self.left()\nyield self.top()\nyield self.right()\nyield self.bottom()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.marginsf.MarginsF.__match_args__","title":"<code>__match_args__ = ('_left', '_top', '_right', '_bottom')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.marginsf.MarginsF.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\marginsf.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.marginsf.MarginsF.__iter__","title":"<code>__iter__() -&gt; Iterator[float]</code>","text":"Source code in <code>prettyqt\\core\\marginsf.py</code> <pre><code>def __iter__(self) -&gt; Iterator[float]:\nyield self.left()\nyield self.top()\nyield self.right()\nyield self.bottom()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.marginsf.MarginsF.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\marginsf.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.left(), self.top(), self.right(), self.bottom())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.marginsf.MarginsF.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\marginsf.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.left(), self.top(), self.right(), self.bottom())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaEnum","title":"<code>MetaEnum</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>class MetaEnum:\ndef __init__(self, metaenum: QtCore.QMetaEnum):\nself.item = metaenum\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __bool__(self):\nreturn self.item.isValid()\ndef __getitem__(self, index: str | tuple[str, str]) -&gt; int:\nif isinstance(index, str):\nresult = self.item.keyToValue(index)[0]  # type: ignore\nelse:\nval = \"|\".join(index)\nresult = self.item.keysToValue(val)[0]  # type: ignore\nif result == -1:\nraise KeyError(index)\nreturn result  # type: ignore\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef __len__(self):\nreturn self.item.keyCount()\ndef get_enum_name(self) -&gt; str:\nreturn self.item.enumName()  # type: ignore\ndef get_scope(self) -&gt; str:\nreturn self.item.scope()  # type: ignore\ndef get_name(self) -&gt; str:\nreturn self.item.name()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.item","title":"<code>item = metaenum</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def __bool__(self):\nreturn self.item.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.__getitem__","title":"<code>__getitem__(index: str | tuple[str, str]) -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def __getitem__(self, index: str | tuple[str, str]) -&gt; int:\nif isinstance(index, str):\nresult = self.item.keyToValue(index)[0]  # type: ignore\nelse:\nval = \"|\".join(index)\nresult = self.item.keysToValue(val)[0]  # type: ignore\nif result == -1:\nraise KeyError(index)\nreturn result  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.__init__","title":"<code>__init__(metaenum: QtCore.QMetaEnum)</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def __init__(self, metaenum: QtCore.QMetaEnum):\nself.item = metaenum\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def __len__(self):\nreturn self.item.keyCount()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.get_enum_name","title":"<code>get_enum_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def get_enum_name(self) -&gt; str:\nreturn self.item.enumName()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.get_name","title":"<code>get_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def get_name(self) -&gt; str:\nreturn self.item.name()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaenum.MetaEnum.get_scope","title":"<code>get_scope() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>def get_scope(self) -&gt; str:\nreturn self.item.scope()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaMethod","title":"<code>MetaMethod</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>class MetaMethod:\ndef __init__(self, metamethod: QtCore.QMetaMethod):\nself.item = metamethod\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __bool__(self):\nreturn self.item.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef get_access(self) -&gt; AccessStr:\nreturn ACCESS.inverse[self.item.access()]\ndef get_method_type(self) -&gt; MethodTypeStr:\nreturn METHOD_TYPE.inverse[self.item.methodType()]\ndef get_method_signature(self) -&gt; str:\nreturn self.item.methodSignature().data().decode()\ndef get_name(self) -&gt; str:\nreturn self.item.name().data().decode()\ndef get_parameters(self) -&gt; list[core.MetaType]:\ncount = self.parameterCount()\nreturn [core.MetaType(self.parameterMetaType(i).id()) for i in range(count)]\ndef get_return_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.returnMetaType().id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.item","title":"<code>item = metamethod</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def __bool__(self):\nreturn self.item.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.__init__","title":"<code>__init__(metamethod: QtCore.QMetaMethod)</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def __init__(self, metamethod: QtCore.QMetaMethod):\nself.item = metamethod\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_access","title":"<code>get_access() -&gt; AccessStr</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_access(self) -&gt; AccessStr:\nreturn ACCESS.inverse[self.item.access()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_method_signature","title":"<code>get_method_signature() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_method_signature(self) -&gt; str:\nreturn self.item.methodSignature().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_method_type","title":"<code>get_method_type() -&gt; MethodTypeStr</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_method_type(self) -&gt; MethodTypeStr:\nreturn METHOD_TYPE.inverse[self.item.methodType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_name","title":"<code>get_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_name(self) -&gt; str:\nreturn self.item.name().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_parameters","title":"<code>get_parameters() -&gt; list[core.MetaType]</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_parameters(self) -&gt; list[core.MetaType]:\ncount = self.parameterCount()\nreturn [core.MetaType(self.parameterMetaType(i).id()) for i in range(count)]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metamethod.MetaMethod.get_return_type","title":"<code>get_return_type() -&gt; core.MetaType</code>","text":"Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_return_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.returnMetaType().id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaObject","title":"<code>MetaObject</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>class MetaObject:\ndef __init__(self, metaobject: QtCore.QMetaObject):\nself.item = metaobject\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_super_class(self) -&gt; MetaObject | None:\nreturn MetaObject(klass) if (klass := self.superClass()) is not None else None\ndef get_class_info(self, include_super: bool = True) -&gt; dict[str, str]:\nstart = 0 if include_super else self.item.classInfoOffset() - 1\ncount = self.item.classInfoCount()\nclassinfos = [self.item.classInfo(i) for i in range(start, count)]\nreturn {i.name(): i.value() for i in classinfos}\ndef get_method(self, index: int | str) -&gt; core.MetaMethod:\nif isinstance(index, int):\nreturn core.MetaMethod(self.item.method(index))\nfor method in self.get_methods():\nif method.get_name() == index:\nreturn method\nraise KeyError(index)\ndef get_enum(self, index: int | str) -&gt; core.MetaEnum:\nif isinstance(index, int):\nreturn core.MetaEnum(self.item.enumerator(index))\nfor enumerator in self.get_enums():\nif enumerator.get_name() == index:\nreturn enumerator\nraise KeyError(index)\ndef get_property(self, index: int | str) -&gt; core.MetaProperty:\nif isinstance(index, int):\nreturn core.MetaProperty(self.item.property(index))\nfor prop in self.get_properties():\nif prop.get_name() == index:\nreturn prop\nraise KeyError(index)\ndef get_constructor(self, index: int | str) -&gt; core.MetaProperty:\nif isinstance(index, int):\nreturn core.MetaMethod(self.item.constructor(index))\nfor prop in self.get_constructors():\nif prop.get_name() == index:\nreturn prop\nraise KeyError(index)\ndef get_methods(\nself,\ninclude_super: bool = True,\ntype_filter: core.metamethod.MethodTypeStr | None = None,\n) -&gt; list[core.MetaMethod]:\nstart = 0 if include_super else self.item.methodOffset() - 1\nmethods = [self.get_method(i) for i in range(start, self.item.methodCount())]\nif type_filter is None:\nreturn methods\nelse:\nreturn [i for i in methods if i.get_method_type() == type_filter]\ndef get_enums(self, include_super: bool = True) -&gt; list[core.MetaEnum]:\nstart = 0 if include_super else self.item.enumeratorOffset() - 1\nreturn [self.get_enum(i) for i in range(start, self.item.enumeratorCount())]\ndef get_constructors(self) -&gt; list[core.MetaMethod]:\ncount = self.item.constructorCount()\nreturn [core.MetaMethod(self.item.constructor(i)) for i in range(count)]\ndef get_properties(self, include_super: bool = True) -&gt; list[core.MetaProperty]:\nstart = 0 if include_super else self.item.propertyOffset() - 1\ncount = self.item.propertyCount()\nreturn [core.MetaProperty(self.item.property(i)) for i in range(start, count)]\ndef get_signals(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\nreturn [\ni\nfor i in self.get_methods(include_super=include_super)\nif i.get_method_type() == \"signal\"\n]\ndef get_meta_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.metaType().id())\ndef get_user_property(self) -&gt; core.MetaProperty | None:\nprop = self.userProperty()\nreturn core.MetaProperty(prop) if prop.isValid() else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.item","title":"<code>item = metaobject</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.__init__","title":"<code>__init__(metaobject: QtCore.QMetaObject)</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def __init__(self, metaobject: QtCore.QMetaObject):\nself.item = metaobject\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_class_info","title":"<code>get_class_info(include_super: bool = True) -&gt; dict[str, str]</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_class_info(self, include_super: bool = True) -&gt; dict[str, str]:\nstart = 0 if include_super else self.item.classInfoOffset() - 1\ncount = self.item.classInfoCount()\nclassinfos = [self.item.classInfo(i) for i in range(start, count)]\nreturn {i.name(): i.value() for i in classinfos}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_constructor","title":"<code>get_constructor(index: int | str) -&gt; core.MetaProperty</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_constructor(self, index: int | str) -&gt; core.MetaProperty:\nif isinstance(index, int):\nreturn core.MetaMethod(self.item.constructor(index))\nfor prop in self.get_constructors():\nif prop.get_name() == index:\nreturn prop\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_constructors","title":"<code>get_constructors() -&gt; list[core.MetaMethod]</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_constructors(self) -&gt; list[core.MetaMethod]:\ncount = self.item.constructorCount()\nreturn [core.MetaMethod(self.item.constructor(i)) for i in range(count)]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_enum","title":"<code>get_enum(index: int | str) -&gt; core.MetaEnum</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_enum(self, index: int | str) -&gt; core.MetaEnum:\nif isinstance(index, int):\nreturn core.MetaEnum(self.item.enumerator(index))\nfor enumerator in self.get_enums():\nif enumerator.get_name() == index:\nreturn enumerator\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_enums","title":"<code>get_enums(include_super: bool = True) -&gt; list[core.MetaEnum]</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_enums(self, include_super: bool = True) -&gt; list[core.MetaEnum]:\nstart = 0 if include_super else self.item.enumeratorOffset() - 1\nreturn [self.get_enum(i) for i in range(start, self.item.enumeratorCount())]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_meta_type","title":"<code>get_meta_type() -&gt; core.MetaType</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_meta_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.metaType().id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_method","title":"<code>get_method(index: int | str) -&gt; core.MetaMethod</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_method(self, index: int | str) -&gt; core.MetaMethod:\nif isinstance(index, int):\nreturn core.MetaMethod(self.item.method(index))\nfor method in self.get_methods():\nif method.get_name() == index:\nreturn method\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_methods","title":"<code>get_methods(include_super: bool = True, type_filter: core.metamethod.MethodTypeStr | None = None) -&gt; list[core.MetaMethod]</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_methods(\nself,\ninclude_super: bool = True,\ntype_filter: core.metamethod.MethodTypeStr | None = None,\n) -&gt; list[core.MetaMethod]:\nstart = 0 if include_super else self.item.methodOffset() - 1\nmethods = [self.get_method(i) for i in range(start, self.item.methodCount())]\nif type_filter is None:\nreturn methods\nelse:\nreturn [i for i in methods if i.get_method_type() == type_filter]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_properties","title":"<code>get_properties(include_super: bool = True) -&gt; list[core.MetaProperty]</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_properties(self, include_super: bool = True) -&gt; list[core.MetaProperty]:\nstart = 0 if include_super else self.item.propertyOffset() - 1\ncount = self.item.propertyCount()\nreturn [core.MetaProperty(self.item.property(i)) for i in range(start, count)]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_property","title":"<code>get_property(index: int | str) -&gt; core.MetaProperty</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property(self, index: int | str) -&gt; core.MetaProperty:\nif isinstance(index, int):\nreturn core.MetaProperty(self.item.property(index))\nfor prop in self.get_properties():\nif prop.get_name() == index:\nreturn prop\nraise KeyError(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_signals","title":"<code>get_signals(include_super: bool = True) -&gt; list[core.MetaMethod]</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_signals(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\nreturn [\ni\nfor i in self.get_methods(include_super=include_super)\nif i.get_method_type() == \"signal\"\n]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_super_class","title":"<code>get_super_class() -&gt; MetaObject | None</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_super_class(self) -&gt; MetaObject | None:\nreturn MetaObject(klass) if (klass := self.superClass()) is not None else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaobject.MetaObject.get_user_property","title":"<code>get_user_property() -&gt; core.MetaProperty | None</code>","text":"Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_user_property(self) -&gt; core.MetaProperty | None:\nprop = self.userProperty()\nreturn core.MetaProperty(prop) if prop.isValid() else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaProperty","title":"<code>MetaProperty</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>class MetaProperty:\ndef __init__(self, metaproperty: QtCore.QMetaProperty):\nself.item = metaproperty\ndef __bool__(self):\nreturn self.item.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_name(self) -&gt; str:\nreturn self.item.name()  # type: ignore\ndef get_meta_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.metaType().id())\ndef get_notify_signal(self) -&gt; core.MetaMethod:\nreturn core.MetaMethod(self.notifySignal())\ndef get_enumerator(self) -&gt; core.MetaEnum:\nreturn core.MetaEnum(self.enumerator())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.item","title":"<code>item = metaproperty</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def __bool__(self):\nreturn self.item.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.__init__","title":"<code>__init__(metaproperty: QtCore.QMetaProperty)</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def __init__(self, metaproperty: QtCore.QMetaProperty):\nself.item = metaproperty\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.get_enumerator","title":"<code>get_enumerator() -&gt; core.MetaEnum</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def get_enumerator(self) -&gt; core.MetaEnum:\nreturn core.MetaEnum(self.enumerator())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.get_meta_type","title":"<code>get_meta_type() -&gt; core.MetaType</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def get_meta_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.metaType().id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.get_name","title":"<code>get_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def get_name(self) -&gt; str:\nreturn self.item.name()  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metaproperty.MetaProperty.get_notify_signal","title":"<code>get_notify_signal() -&gt; core.MetaMethod</code>","text":"Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>def get_notify_signal(self) -&gt; core.MetaMethod:\nreturn core.MetaMethod(self.notifySignal())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MetaType","title":"<code>MetaType</code>","text":"<p>         Bases: <code>QtCore.QMetaType</code></p> Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>class MetaType(QtCore.QMetaType):\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef get_name(self) -&gt; str | None:\nreturn self.name()\ndef get_type_name(self) -&gt; str:\nreturn TYPE.inverse[QtCore.QMetaType.Type(self.id())]\ndef is_enumeration(self):\nreturn self.flags() &amp; QtCore.QMetaType.TypeFlag.IsEnumeration\ndef get_meta_object(self) -&gt; core.MetaObject:\nreturn core.MetaObject(self.metaObject())\n@classmethod\ndef get_meta_object_for_type(cls, typ: int) -&gt; core.MetaObject:\nreturn core.MetaObject(cls.metaObjectForType(typ))\ndef get_type(self) -&gt; type:\nmeta_type = QtCore.QMetaType.Type(self.id())\nmatch meta_type:\ncase QtCore.QMetaType.Type.Bool:\nreturn bool\ncase QtCore.QMetaType.Type.Int | QtCore.QMetaType.Type.UInt:\nreturn int\ncase QtCore.QMetaType.Type.Double | QtCore.QMetaType.Type.Float:\nreturn float\ncase QtCore.QMetaType.Type.QChar | QtCore.QMetaType.Type.QString:\nreturn str\ncase QtCore.QMetaType.Type.QByteArray:\nreturn bytes\ncase QtCore.QMetaType.Type.QVariantList:\nreturn list\ncase QtCore.QMetaType.Type.QVariantMap:\nreturn dict\ncase QtCore.QMetaType.Type.QSize:\nreturn QtCore.QSize\ncase QtCore.QMetaType.Type.QSizeF:\nreturn QtCore.QSizeF\ncase QtCore.QMetaType.Type.QTime:\nreturn QtCore.QTime\ncase QtCore.QMetaType.Type.QDate:\nreturn QtCore.QDate\ncase QtCore.QMetaType.Type.QDateTime:\nreturn QtCore.QDateTime\ncase QtCore.QMetaType.Type.QRect:\nreturn QtCore.QRect\ncase QtCore.QMetaType.Type.QRectF:\nreturn QtCore.QRectF\ncase QtCore.QMetaType.Type.QLine:\nreturn QtCore.QLine\ncase QtCore.QMetaType.Type.QLineF:\nreturn QtCore.QLineF\ncase QtCore.QMetaType.Type.QPoint:\nreturn QtCore.QPoint\ncase QtCore.QMetaType.Type.QPointF:\nreturn QtCore.QPointF\ncase QtCore.QMetaType.Type.QRegularExpression:\nreturn QtCore.QRegularExpression\ncase QtCore.QMetaType.Type.QLocale:\nreturn QtCore.QLocale\ncase QtCore.QMetaType.Type.QUrl:\nreturn QtCore.QUrl\ncase _ if self.is_enumeration():\nreturn enum.Enum\nfrom prettyqt.qt import QtGui\nmatch meta_type:\ncase QtCore.QMetaType.Type.QPolygon:\nreturn QtGui.QPolygon\ncase QtCore.QMetaType.Type.QPolygonF:\nreturn QtGui.QPolygonF\ncase QtCore.QMetaType.Type.QTextLength:\nreturn QtGui.QTextLength\ncase QtCore.QMetaType.Type.QRegion:\nreturn QtGui.QRegion\ncase QtCore.QMetaType.Type.QPalette:\nreturn QtGui.QPalette\ncase QtCore.QMetaType.Type.QColor:\nreturn QtGui.QColor\ncase QtCore.QMetaType.Type.QPen:\nreturn QtGui.QPen\ncase QtCore.QMetaType.Type.QFont:\nreturn QtGui.QFont\ncase QtCore.QMetaType.Type.QBrush:\nreturn QtGui.QBrush\ncase QtCore.QMetaType.Type.QImage:\nreturn QtGui.QImage\ncase QtCore.QMetaType.Type.QPixmap:\nreturn QtGui.QPixmap\ncase QtCore.QMetaType.Type.QTransform:\nreturn QtGui.QTransform\ncase QtCore.QMetaType.Type.QKeySequence:\nreturn QtGui.QKeySequence\ncase QtCore.QMetaType.Type.QVector3D:\nreturn QtGui.QVector3D\ncase QtCore.QMetaType.Type.QVector4D:\nreturn QtGui.QVector4D\ncase QtCore.QMetaType.Type.QCursor:\nreturn QtGui.QCursor\ncase QtCore.QMetaType.Type.QIcon:\nreturn QtGui.QIcon\nfrom prettyqt.qt import QtWidgets\nmatch meta_type:\ncase QtCore.QMetaType.Type.QSizePolicy:\nreturn QtWidgets.QSizePolicy\ncase _:\nraise NotImplementedError(self.id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.get_meta_object","title":"<code>get_meta_object() -&gt; core.MetaObject</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def get_meta_object(self) -&gt; core.MetaObject:\nreturn core.MetaObject(self.metaObject())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.get_meta_object_for_type","title":"<code>get_meta_object_for_type(typ: int) -&gt; core.MetaObject</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>@classmethod\ndef get_meta_object_for_type(cls, typ: int) -&gt; core.MetaObject:\nreturn core.MetaObject(cls.metaObjectForType(typ))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.get_name","title":"<code>get_name() -&gt; str | None</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def get_name(self) -&gt; str | None:\nreturn self.name()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.get_type","title":"<code>get_type() -&gt; type</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def get_type(self) -&gt; type:\nmeta_type = QtCore.QMetaType.Type(self.id())\nmatch meta_type:\ncase QtCore.QMetaType.Type.Bool:\nreturn bool\ncase QtCore.QMetaType.Type.Int | QtCore.QMetaType.Type.UInt:\nreturn int\ncase QtCore.QMetaType.Type.Double | QtCore.QMetaType.Type.Float:\nreturn float\ncase QtCore.QMetaType.Type.QChar | QtCore.QMetaType.Type.QString:\nreturn str\ncase QtCore.QMetaType.Type.QByteArray:\nreturn bytes\ncase QtCore.QMetaType.Type.QVariantList:\nreturn list\ncase QtCore.QMetaType.Type.QVariantMap:\nreturn dict\ncase QtCore.QMetaType.Type.QSize:\nreturn QtCore.QSize\ncase QtCore.QMetaType.Type.QSizeF:\nreturn QtCore.QSizeF\ncase QtCore.QMetaType.Type.QTime:\nreturn QtCore.QTime\ncase QtCore.QMetaType.Type.QDate:\nreturn QtCore.QDate\ncase QtCore.QMetaType.Type.QDateTime:\nreturn QtCore.QDateTime\ncase QtCore.QMetaType.Type.QRect:\nreturn QtCore.QRect\ncase QtCore.QMetaType.Type.QRectF:\nreturn QtCore.QRectF\ncase QtCore.QMetaType.Type.QLine:\nreturn QtCore.QLine\ncase QtCore.QMetaType.Type.QLineF:\nreturn QtCore.QLineF\ncase QtCore.QMetaType.Type.QPoint:\nreturn QtCore.QPoint\ncase QtCore.QMetaType.Type.QPointF:\nreturn QtCore.QPointF\ncase QtCore.QMetaType.Type.QRegularExpression:\nreturn QtCore.QRegularExpression\ncase QtCore.QMetaType.Type.QLocale:\nreturn QtCore.QLocale\ncase QtCore.QMetaType.Type.QUrl:\nreturn QtCore.QUrl\ncase _ if self.is_enumeration():\nreturn enum.Enum\nfrom prettyqt.qt import QtGui\nmatch meta_type:\ncase QtCore.QMetaType.Type.QPolygon:\nreturn QtGui.QPolygon\ncase QtCore.QMetaType.Type.QPolygonF:\nreturn QtGui.QPolygonF\ncase QtCore.QMetaType.Type.QTextLength:\nreturn QtGui.QTextLength\ncase QtCore.QMetaType.Type.QRegion:\nreturn QtGui.QRegion\ncase QtCore.QMetaType.Type.QPalette:\nreturn QtGui.QPalette\ncase QtCore.QMetaType.Type.QColor:\nreturn QtGui.QColor\ncase QtCore.QMetaType.Type.QPen:\nreturn QtGui.QPen\ncase QtCore.QMetaType.Type.QFont:\nreturn QtGui.QFont\ncase QtCore.QMetaType.Type.QBrush:\nreturn QtGui.QBrush\ncase QtCore.QMetaType.Type.QImage:\nreturn QtGui.QImage\ncase QtCore.QMetaType.Type.QPixmap:\nreturn QtGui.QPixmap\ncase QtCore.QMetaType.Type.QTransform:\nreturn QtGui.QTransform\ncase QtCore.QMetaType.Type.QKeySequence:\nreturn QtGui.QKeySequence\ncase QtCore.QMetaType.Type.QVector3D:\nreturn QtGui.QVector3D\ncase QtCore.QMetaType.Type.QVector4D:\nreturn QtGui.QVector4D\ncase QtCore.QMetaType.Type.QCursor:\nreturn QtGui.QCursor\ncase QtCore.QMetaType.Type.QIcon:\nreturn QtGui.QIcon\nfrom prettyqt.qt import QtWidgets\nmatch meta_type:\ncase QtCore.QMetaType.Type.QSizePolicy:\nreturn QtWidgets.QSizePolicy\ncase _:\nraise NotImplementedError(self.id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.get_type_name","title":"<code>get_type_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def get_type_name(self) -&gt; str:\nreturn TYPE.inverse[QtCore.QMetaType.Type(self.id())]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.metatype.MetaType.is_enumeration","title":"<code>is_enumeration()</code>","text":"Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>def is_enumeration(self):\nreturn self.flags() &amp; QtCore.QMetaType.TypeFlag.IsEnumeration\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MimeData","title":"<code>MimeData</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QMimeData</code></p> Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>class MimeData(core.ObjectMixin, QtCore.QMimeData):\ndef __len__(self):\nreturn len(self.formats())\n# def __getitem__(self, index: str) -&gt; str:\n#     return self.get_data(index)\n# def __setitem__(self, index: str, value: datatypes.ByteArrayType):\n#     if isinstance(value, str):\n#         value = value.encode()\n#     if not isinstance(value, QtCore.QByteArray):\n#         value = QtCore.QByteArray(value)\n#     self.setData(index, value)\ndef __contains__(self, fmt: str):\nreturn self.hasFormat(fmt)\ndef __delitem__(self, index: str):\nself.removeFormat(index)\ndef set_data(self, mime_type: str, data: str):\nself.setData(mime_type, QtCore.QByteArray(data.encode()))\ndef set_json_data(self, mime_type: str, data: datatypes.JSONType):\nself.setData(mime_type, QtCore.QByteArray(helpers.dump_json(data)))\ndef get_data(self, mime_type: str) -&gt; str:\nreturn bytes(self.data(mime_type)).decode()\ndef get_json_data(self, mime_type: str) -&gt; datatypes.JSONType:\ndata = self.data(mime_type)\nreturn helpers.load_json(bytes(data))\ndef keys(self) -&gt; list[str]:\nreturn self.formats()\ndef values(self) -&gt; Iterator[Any]:\nreturn (self.get_data(key) for key in self.formats())\ndef set_data_for_extension(self, extension: str, string: str):\nif mimetype := DB.get_mime_types_for_filename(f\".{extension}\"):\nself.setData(mimetype, string.encode())\nelse:\nraise ValueError(extension)\ndef set_path_data(self, paths: list[datatypes.PathType]):\nurls = [core.Url.from_local_file(p) for p in paths]\nself.setUrls(urls)\ndef set_urls(self, paths: list[datatypes.PathType]):\nurls = [core.Url(p) for p in paths]\nself.setUrls(urls)\ndef get_urls(self) -&gt; list[core.Url]:\nreturn [core.Url(url) for url in self.urls()]\n@classmethod\ndef for_file(\ncls,\npath: datatypes.PathType | QtCore.QFileInfo,\nmatch_mode: core.mimedatabase.MatchModeStr = \"default\",\n) -&gt; MimeData:\ndb = core.MimeDatabase()\nmime_type = db.get_mime_type_for_file(path, match_mode)\nreturn cls(mime_type)\ndef to_dict(self) -&gt; dict[str, bytes]:\nreturn {i: self.data(i).data() for i in self.formats()}\n@classmethod\ndef clone(cls, other: QtCore.QMimeData) -&gt; Self:\nmime = cls()\nfor fmt in other.formats():\nmime.setData(fmt, other.data(fmt))\nreturn mime\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.__contains__","title":"<code>__contains__(fmt: str)</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def __contains__(self, fmt: str):\nreturn self.hasFormat(fmt)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def __delitem__(self, index: str):\nself.removeFormat(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def __len__(self):\nreturn len(self.formats())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.clone","title":"<code>clone(other: QtCore.QMimeData) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>@classmethod\ndef clone(cls, other: QtCore.QMimeData) -&gt; Self:\nmime = cls()\nfor fmt in other.formats():\nmime.setData(fmt, other.data(fmt))\nreturn mime\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.for_file","title":"<code>for_file(path: datatypes.PathType | QtCore.QFileInfo, match_mode: core.mimedatabase.MatchModeStr = 'default') -&gt; MimeData</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>@classmethod\ndef for_file(\ncls,\npath: datatypes.PathType | QtCore.QFileInfo,\nmatch_mode: core.mimedatabase.MatchModeStr = \"default\",\n) -&gt; MimeData:\ndb = core.MimeDatabase()\nmime_type = db.get_mime_type_for_file(path, match_mode)\nreturn cls(mime_type)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.get_data","title":"<code>get_data(mime_type: str) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def get_data(self, mime_type: str) -&gt; str:\nreturn bytes(self.data(mime_type)).decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.get_json_data","title":"<code>get_json_data(mime_type: str) -&gt; datatypes.JSONType</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def get_json_data(self, mime_type: str) -&gt; datatypes.JSONType:\ndata = self.data(mime_type)\nreturn helpers.load_json(bytes(data))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.get_urls","title":"<code>get_urls() -&gt; list[core.Url]</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def get_urls(self) -&gt; list[core.Url]:\nreturn [core.Url(url) for url in self.urls()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.keys","title":"<code>keys() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def keys(self) -&gt; list[str]:\nreturn self.formats()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.set_data","title":"<code>set_data(mime_type: str, data: str)</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def set_data(self, mime_type: str, data: str):\nself.setData(mime_type, QtCore.QByteArray(data.encode()))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.set_data_for_extension","title":"<code>set_data_for_extension(extension: str, string: str)</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def set_data_for_extension(self, extension: str, string: str):\nif mimetype := DB.get_mime_types_for_filename(f\".{extension}\"):\nself.setData(mimetype, string.encode())\nelse:\nraise ValueError(extension)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.set_json_data","title":"<code>set_json_data(mime_type: str, data: datatypes.JSONType)</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def set_json_data(self, mime_type: str, data: datatypes.JSONType):\nself.setData(mime_type, QtCore.QByteArray(helpers.dump_json(data)))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.set_path_data","title":"<code>set_path_data(paths: list[datatypes.PathType])</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def set_path_data(self, paths: list[datatypes.PathType]):\nurls = [core.Url.from_local_file(p) for p in paths]\nself.setUrls(urls)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.set_urls","title":"<code>set_urls(paths: list[datatypes.PathType])</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def set_urls(self, paths: list[datatypes.PathType]):\nurls = [core.Url(p) for p in paths]\nself.setUrls(urls)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.to_dict","title":"<code>to_dict() -&gt; dict[str, bytes]</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def to_dict(self) -&gt; dict[str, bytes]:\nreturn {i: self.data(i).data() for i in self.formats()}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedata.MimeData.values","title":"<code>values() -&gt; Iterator[Any]</code>","text":"Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>def values(self) -&gt; Iterator[Any]:\nreturn (self.get_data(key) for key in self.formats())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MimeDatabase","title":"<code>MimeDatabase</code>","text":"<p>         Bases: <code>QtCore.QMimeDatabase</code></p> Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>class MimeDatabase(QtCore.QMimeDatabase):\ndef get_mime_type_for_file(\nself,\npath: datatypes.PathType | QtCore.QFileInfo,\nmatch_mode: MatchModeStr = \"default\",\n) -&gt; core.MimeType:\nif match_mode not in MATCH_MODE:\nraise InvalidParamError(match_mode, MATCH_MODE)\nif isinstance(path, os.PathLike):\npath = os.fspath(path)\nmime_type = self.mimeTypeForFile(path, MATCH_MODE[match_mode])\nreturn core.MimeType(mime_type)\ndef get_mime_type_for_data(\nself, data: datatypes.ByteArrayType | QtCore.QIODevice\n) -&gt; core.MimeType:\nreturn core.MimeType(self.mimeTypeForData(data))\ndef get_mime_type_for_filename_and_data(\nself, filename: os.PathLike, data: datatypes.ByteArrayType | QtCore.QIODevice\n) -&gt; core.MimeType:\npath = os.fspath(filename)\nreturn core.MimeType(self.mimeTypeForFileNameAndData(path, data))\ndef get_mime_type_for_name(self, name: str) -&gt; core.MimeType:\nreturn core.MimeType(self.mimeTypeForName(name))\ndef get_mime_type_for_url(self, url: QtCore.QUrl | str) -&gt; core.MimeType:\nurl = QtCore.QUrl(url) if isinstance(url, str) else url\nreturn core.MimeType(self.mimeTypeForUrl(url))\ndef get_mime_types_for_filename(self, filename: os.PathLike) -&gt; list[core.MimeType]:\npath = os.fspath(filename)\nreturn [core.MimeType(i) for i in self.mimeTypesForFileName(path)]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedatabase.MimeDatabase.get_mime_type_for_data","title":"<code>get_mime_type_for_data(data: datatypes.ByteArrayType | QtCore.QIODevice) -&gt; core.MimeType</code>","text":"Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>def get_mime_type_for_data(\nself, data: datatypes.ByteArrayType | QtCore.QIODevice\n) -&gt; core.MimeType:\nreturn core.MimeType(self.mimeTypeForData(data))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedatabase.MimeDatabase.get_mime_type_for_file","title":"<code>get_mime_type_for_file(path: datatypes.PathType | QtCore.QFileInfo, match_mode: MatchModeStr = 'default') -&gt; core.MimeType</code>","text":"Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>def get_mime_type_for_file(\nself,\npath: datatypes.PathType | QtCore.QFileInfo,\nmatch_mode: MatchModeStr = \"default\",\n) -&gt; core.MimeType:\nif match_mode not in MATCH_MODE:\nraise InvalidParamError(match_mode, MATCH_MODE)\nif isinstance(path, os.PathLike):\npath = os.fspath(path)\nmime_type = self.mimeTypeForFile(path, MATCH_MODE[match_mode])\nreturn core.MimeType(mime_type)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedatabase.MimeDatabase.get_mime_type_for_filename_and_data","title":"<code>get_mime_type_for_filename_and_data(filename: os.PathLike, data: datatypes.ByteArrayType | QtCore.QIODevice) -&gt; core.MimeType</code>","text":"Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>def get_mime_type_for_filename_and_data(\nself, filename: os.PathLike, data: datatypes.ByteArrayType | QtCore.QIODevice\n) -&gt; core.MimeType:\npath = os.fspath(filename)\nreturn core.MimeType(self.mimeTypeForFileNameAndData(path, data))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedatabase.MimeDatabase.get_mime_type_for_name","title":"<code>get_mime_type_for_name(name: str) -&gt; core.MimeType</code>","text":"Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>def get_mime_type_for_name(self, name: str) -&gt; core.MimeType:\nreturn core.MimeType(self.mimeTypeForName(name))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedatabase.MimeDatabase.get_mime_type_for_url","title":"<code>get_mime_type_for_url(url: QtCore.QUrl | str) -&gt; core.MimeType</code>","text":"Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>def get_mime_type_for_url(self, url: QtCore.QUrl | str) -&gt; core.MimeType:\nurl = QtCore.QUrl(url) if isinstance(url, str) else url\nreturn core.MimeType(self.mimeTypeForUrl(url))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimedatabase.MimeDatabase.get_mime_types_for_filename","title":"<code>get_mime_types_for_filename(filename: os.PathLike) -&gt; list[core.MimeType]</code>","text":"Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>def get_mime_types_for_filename(self, filename: os.PathLike) -&gt; list[core.MimeType]:\npath = os.fspath(filename)\nreturn [core.MimeType(i) for i in self.mimeTypesForFileName(path)]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.MimeType","title":"<code>MimeType</code>","text":"<p>         Bases: <code>QtCore.QMimeType</code></p> Source code in <code>prettyqt\\core\\mimetype.py</code> <pre><code>class MimeType(QtCore.QMimeType):\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimetype.MimeType.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\mimetype.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimetype.MimeType.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\mimetype.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.name())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mimetype.MimeType.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\mimetype.py</code> <pre><code>def __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ModelRoleData","title":"<code>ModelRoleData</code>","text":"<p>         Bases: <code>QtCore.QModelRoleData</code></p> Source code in <code>prettyqt\\core\\modelroledata.py</code> <pre><code>class ModelRoleData(QtCore.QModelRoleData):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Mutex","title":"<code>Mutex</code>","text":"<p>         Bases: <code>QtCore.QMutex</code></p> Source code in <code>prettyqt\\core\\mutex.py</code> <pre><code>class Mutex(QtCore.QMutex):\n@contextlib.contextmanager\ndef lock_mutex(self, timeout: int | None = None):\nif timeout is None:\ntimeout = -1\nyield self.tryLock(timeout)\nself.unlock()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.mutex.Mutex.lock_mutex","title":"<code>lock_mutex(timeout: int | None = None)</code>","text":"Source code in <code>prettyqt\\core\\mutex.py</code> <pre><code>@contextlib.contextmanager\ndef lock_mutex(self, timeout: int | None = None):\nif timeout is None:\ntimeout = -1\nyield self.tryLock(timeout)\nself.unlock()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Object","title":"<code>Object</code>","text":"<p>         Bases: <code>ObjectMixin</code>, <code>QtCore.QObject</code></p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>class Object(ObjectMixin, QtCore.QObject):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ObjectMixin","title":"<code>ObjectMixin</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>class ObjectMixin:\nProperties: dict[type, list[str]] = {}\ndef __init__(self, *args, **kwargs):\nself._eventfilters = set()\n# this allows snake_case property and signal names in ctor.\nnew = {}\nif kwargs:\nmapper = self._get_map()\nfor k, v in kwargs.items():\nif (camel_k := helpers.to_lower_camel(k)) in mapper and isinstance(\nv, str\n):\nnew[camel_k] = mapper[camel_k][v]\nelif k in {\"window_icon\", \"icon\"} and isinstance(v, str):\nfrom prettyqt import iconprovider\nnew[camel_k] = iconprovider.get_icon(v)\nelse:\nnew[camel_k] = v\nsuper().__init__(*args, **new)\ndef _get_map(self):\n\"\"\"Can be implemented by subclasses to support str -&gt; Enum conversion.\n        To get data from all subclasses, we always fetch _get_map from super(),\n        append our own shit and return it.\n        \"\"\"\nreturn {}\ndef __repr__(self):\nreturn f\"{type(self).__name__}()\"\ndef __setstate__(self, state):\nself.set_properties(state)\ndef __getstate__(self):\nreturn self.get_properties()\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __getattr__(self, val):\ncameled = helpers.to_lower_camel(val)\nif cameled in dir(self):\nreturn getattr(self, cameled)\nraise AttributeError(val)\ndef installEventFilter(self, eventfilter: QtCore.QObject):\nif eventfilter in self._eventfilters:\nlogger.warning(\"Trying to install same EventFilter multiple times.\")\nreturn\nself._eventfilters.add(eventfilter)\nsuper().installEventFilter(eventfilter)\ndef removeEventFilter(self, eventfilter: QtCore.QObject):\nif eventfilter not in self._eventfilters:\nlogger.warning(\"Trying to remove non-installed EventFilter.\")\nreturn\nself._eventfilters.remove(eventfilter)\nsuper().removeEventFilter(eventfilter)\ndef serialize_fields(self):\nreturn dict(object_name=self.objectName())\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.get_properties()\n# dct = {}\n# for klass in reversed(inspect.getmro(type(self))):\n#     if \"serialize_fields\" in klass.__dict__:\n#         data = klass.serialize_fields(self)  # type: ignore\n#         dct |= data\n# return dct\n@contextlib.contextmanager\ndef block_signals(self):\nblocked = self.blockSignals(True)\nyield None\nself.blockSignals(blocked)\ndef to_json(self):\ndct = self.__getstate__()\nfor k, v in dct.items():\nif isinstance(v, ObjectMixin):\ndct[k] = v.to_json()\nreturn dct\ndef set_unique_id(self):\nclass_name = type(self).__name__\ncount = next(counter_dict[class_name])\nself.set_id(f\"{class_name}_{count}\")\ndef set_id(self, name: str):\nself.setObjectName(name)\ndef get_id(self) -&gt; str:\nreturn self.objectName()\ndef has_id(self) -&gt; bool:\nreturn self.objectName() != \"\"\n@classmethod\ndef get_static_metaobject(cls) -&gt; core.MetaObject:\nreturn core.MetaObject(cls.staticMetaObject)\ndef get_metaobject(self) -&gt; core.MetaObject:\nreturn core.MetaObject(self.metaObject())\n# @property\n# def id(self) -&gt; str:\n#     return self.objectName()\n# @id.setter\n# def id(self, name: str):\n#     self.setObjectName(name)\ndef find_children(\nself,\ntyp: type[T] = QtCore.QObject,\nname: str | QtCore.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; list[T]:\nif recursive:\nflag = QtCore.Qt.FindChildOption.FindChildrenRecursively\nelse:\nflag = QtCore.Qt.FindChildOption.FindDirectChildrenOnly\nreturn self.findChildren(typ, name=name, options=flag)  # type: ignore\ndef find_child(\nself,\ntyp: type[T] = QtCore.QObject,\nname: str | QtCore.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; T | None:\nif recursive:\nflag = QtCore.Qt.FindChildOption.FindChildrenRecursively\nelse:\nflag = QtCore.Qt.FindChildOption.FindDirectChildrenOnly\nreturn self.findChild(typ, name, flag)  # type: ignore\ndef find_parent(\nself, typ: type[T] = QtCore.QObject, name: str | None = None\n) -&gt; T | None:\nnode = self\nwhile node:\nnode = node.parent()\nif isinstance(node, typ) and (name is None or node.objectName() == name):\nreturn node\nreturn None\ndef start_timer(\nself, interval: int | str, timer_type: constants.TimerTypeStr = \"coarse\"\n) -&gt; int | None:\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nresult = self.startTimer(interval, constants.TIMER_TYPE[timer_type])\nreturn None if result == 0 else result\ndef get_properties(\nself, include_super: bool = True, cast: bool = True\n) -&gt; dict[str, Any]:\nmetaobj = self.get_metaobject()\nprops = metaobj.get_properties(include_super=include_super)\nreturn {\ni.name(): datatypes.make_serializable(i.read(self))\nfor i in props\nif i.get_name() not in [\"children\", \"frameShadow\", \"state\"]\n}\ndef set_properties(self, props: dict[str, Any], include_super: bool = True):\nmetaobj = self.get_metaobject()\nmetaprops = metaobj.get_properties(include_super=include_super)\nfor metaprop in metaprops:\nif (name := metaprop.name()) in props:\nvalue = props[name]\nmetaprop.write(self, value)\ndef get_dynamic_properties(self) -&gt; dict[str, Any]:\nreturn {\ni.data().decode(): self.property(i.data().decode())\nfor i in self.dynamicPropertyNames()\n}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.Properties","title":"<code>Properties: dict[type, list[str]] = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __getattr__(self, val):\ncameled = helpers.to_lower_camel(val)\nif cameled in dir(self):\nreturn getattr(self, cameled)\nraise AttributeError(val)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __getstate__(self):\nreturn self.get_properties()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._eventfilters = set()\n# this allows snake_case property and signal names in ctor.\nnew = {}\nif kwargs:\nmapper = self._get_map()\nfor k, v in kwargs.items():\nif (camel_k := helpers.to_lower_camel(k)) in mapper and isinstance(\nv, str\n):\nnew[camel_k] = mapper[camel_k][v]\nelif k in {\"window_icon\", \"icon\"} and isinstance(v, str):\nfrom prettyqt import iconprovider\nnew[camel_k] = iconprovider.get_icon(v)\nelse:\nnew[camel_k] = v\nsuper().__init__(*args, **new)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}()\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __setstate__(self, state):\nself.set_properties(state)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.block_signals","title":"<code>block_signals()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef block_signals(self):\nblocked = self.blockSignals(True)\nyield None\nself.blockSignals(blocked)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.find_child","title":"<code>find_child(typ: type[T] = QtCore.QObject, name: str | QtCore.QRegularExpression | None = None, recursive: bool = True) -&gt; T | None</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_child(\nself,\ntyp: type[T] = QtCore.QObject,\nname: str | QtCore.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; T | None:\nif recursive:\nflag = QtCore.Qt.FindChildOption.FindChildrenRecursively\nelse:\nflag = QtCore.Qt.FindChildOption.FindDirectChildrenOnly\nreturn self.findChild(typ, name, flag)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.find_children","title":"<code>find_children(typ: type[T] = QtCore.QObject, name: str | QtCore.QRegularExpression | None = None, recursive: bool = True) -&gt; list[T]</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_children(\nself,\ntyp: type[T] = QtCore.QObject,\nname: str | QtCore.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; list[T]:\nif recursive:\nflag = QtCore.Qt.FindChildOption.FindChildrenRecursively\nelse:\nflag = QtCore.Qt.FindChildOption.FindDirectChildrenOnly\nreturn self.findChildren(typ, name=name, options=flag)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.find_parent","title":"<code>find_parent(typ: type[T] = QtCore.QObject, name: str | None = None) -&gt; T | None</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_parent(\nself, typ: type[T] = QtCore.QObject, name: str | None = None\n) -&gt; T | None:\nnode = self\nwhile node:\nnode = node.parent()\nif isinstance(node, typ) and (name is None or node.objectName() == name):\nreturn node\nreturn None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_dynamic_properties","title":"<code>get_dynamic_properties() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_dynamic_properties(self) -&gt; dict[str, Any]:\nreturn {\ni.data().decode(): self.property(i.data().decode())\nfor i in self.dynamicPropertyNames()\n}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_id","title":"<code>get_id() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_id(self) -&gt; str:\nreturn self.objectName()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_metaobject","title":"<code>get_metaobject() -&gt; core.MetaObject</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_metaobject(self) -&gt; core.MetaObject:\nreturn core.MetaObject(self.metaObject())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_properties","title":"<code>get_properties(include_super: bool = True, cast: bool = True) -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_properties(\nself, include_super: bool = True, cast: bool = True\n) -&gt; dict[str, Any]:\nmetaobj = self.get_metaobject()\nprops = metaobj.get_properties(include_super=include_super)\nreturn {\ni.name(): datatypes.make_serializable(i.read(self))\nfor i in props\nif i.get_name() not in [\"children\", \"frameShadow\", \"state\"]\n}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.get_static_metaobject","title":"<code>get_static_metaobject() -&gt; core.MetaObject</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@classmethod\ndef get_static_metaobject(cls) -&gt; core.MetaObject:\nreturn core.MetaObject(cls.staticMetaObject)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.has_id","title":"<code>has_id() -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def has_id(self) -&gt; bool:\nreturn self.objectName() != \"\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.installEventFilter","title":"<code>installEventFilter(eventfilter: QtCore.QObject)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def installEventFilter(self, eventfilter: QtCore.QObject):\nif eventfilter in self._eventfilters:\nlogger.warning(\"Trying to install same EventFilter multiple times.\")\nreturn\nself._eventfilters.add(eventfilter)\nsuper().installEventFilter(eventfilter)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.removeEventFilter","title":"<code>removeEventFilter(eventfilter: QtCore.QObject)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def removeEventFilter(self, eventfilter: QtCore.QObject):\nif eventfilter not in self._eventfilters:\nlogger.warning(\"Trying to remove non-installed EventFilter.\")\nreturn\nself._eventfilters.remove(eventfilter)\nsuper().removeEventFilter(eventfilter)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn self.get_properties()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def serialize_fields(self):\nreturn dict(object_name=self.objectName())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.set_id","title":"<code>set_id(name: str)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_id(self, name: str):\nself.setObjectName(name)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.set_properties","title":"<code>set_properties(props: dict[str, Any], include_super: bool = True)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_properties(self, props: dict[str, Any], include_super: bool = True):\nmetaobj = self.get_metaobject()\nmetaprops = metaobj.get_properties(include_super=include_super)\nfor metaprop in metaprops:\nif (name := metaprop.name()) in props:\nvalue = props[name]\nmetaprop.write(self, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.set_unique_id","title":"<code>set_unique_id()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_unique_id(self):\nclass_name = type(self).__name__\ncount = next(counter_dict[class_name])\nself.set_id(f\"{class_name}_{count}\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.start_timer","title":"<code>start_timer(interval: int | str, timer_type: constants.TimerTypeStr = 'coarse') -&gt; int | None</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def start_timer(\nself, interval: int | str, timer_type: constants.TimerTypeStr = \"coarse\"\n) -&gt; int | None:\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nresult = self.startTimer(interval, constants.TIMER_TYPE[timer_type])\nreturn None if result == 0 else result\n</code></pre>"},{"location":"api/core.html#prettyqt.core.object.ObjectMixin.to_json","title":"<code>to_json()</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def to_json(self):\ndct = self.__getstate__()\nfor k, v in dct.items():\nif isinstance(v, ObjectMixin):\ndct[k] = v.to_json()\nreturn dct\n</code></pre>"},{"location":"api/core.html#prettyqt.core.OperatingSystemVersion","title":"<code>OperatingSystemVersion</code>","text":"<p>         Bases: <code>QtCore.QOperatingSystemVersion</code></p> Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>class OperatingSystemVersion(QtCore.QOperatingSystemVersion):\ndef __init__(\nself,\ntyp: QtCore.QOperatingSystemVersion.OSType | str,\nmajor: int,\nminor: int | None = None,\nmicro: int | None = None,\n):\nos_type = OS_TYPE[typ] if isinstance(typ, str) else typ\nif minor is None:\nminor = -1\nif micro is None:\nmicro = -1\nsuper().__init__(os_type, major, minor, micro)\ndef __repr__(self):\nreturn get_repr(\nself,\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n)\n@property\ndef _type(self):\nreturn self.get_type()\n@property\ndef _majorVersion(self):\nreturn self.majorVersion()\n@property\ndef _minorVersion(self):\nreturn self.minorVersion()\n@property\ndef _macroVersion(self):\nreturn self.macroVersion()\n__match_args__ = (\"_type\", \"_majorVersion\", \"_minorVersion\", \"_macroVersion\")\ndef __reduce__(self):\nreturn (\ntype(self),\n(\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n),\n)\ndef __eq__(self, other):\nreturn (\n(\nself.type() == other.type()\nand self.majorVersion() == other.majorVersion()\nand self.minorVersion() == other.minorVersion()\nand self.microVersion() == other.microVersion()\n)\nif isinstance(other, QtCore.QOperatingSystemVersion)\nelse False\n)\ndef __hash__(self):\nreturn hash(\n(\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n)\n)\ndef get_type(self) -&gt; OsTypeStr:\n\"\"\"Get current os type.\n        Returns:\n            current os type\n        \"\"\"\nreturn OS_TYPE.inverse[self.type()]\ndef get_versionnumber(self) -&gt; core.VersionNumber:\nreturn core.VersionNumber(\nself.majorVersion(), self.minorVersion(), self.microVersion()\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.__match_args__","title":"<code>__match_args__ = ('_type', '_majorVersion', '_minorVersion', '_macroVersion')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.__eq__","title":"<code>__eq__(other)</code>","text":"Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def __eq__(self, other):\nreturn (\n(\nself.type() == other.type()\nand self.majorVersion() == other.majorVersion()\nand self.minorVersion() == other.minorVersion()\nand self.microVersion() == other.microVersion()\n)\nif isinstance(other, QtCore.QOperatingSystemVersion)\nelse False\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.__hash__","title":"<code>__hash__()</code>","text":"Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def __hash__(self):\nreturn hash(\n(\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n)\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.__init__","title":"<code>__init__(typ: QtCore.QOperatingSystemVersion.OSType | str, major: int, minor: int | None = None, micro: int | None = None)</code>","text":"Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def __init__(\nself,\ntyp: QtCore.QOperatingSystemVersion.OSType | str,\nmajor: int,\nminor: int | None = None,\nmicro: int | None = None,\n):\nos_type = OS_TYPE[typ] if isinstance(typ, str) else typ\nif minor is None:\nminor = -1\nif micro is None:\nmicro = -1\nsuper().__init__(os_type, major, minor, micro)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def __reduce__(self):\nreturn (\ntype(self),\n(\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself,\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.get_type","title":"<code>get_type() -&gt; OsTypeStr</code>","text":"<p>Get current os type.</p> <p>Returns:</p> Type Description <code>OsTypeStr</code> <p>current os type</p> Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def get_type(self) -&gt; OsTypeStr:\n\"\"\"Get current os type.\n    Returns:\n        current os type\n    \"\"\"\nreturn OS_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.get_versionnumber","title":"<code>get_versionnumber() -&gt; core.VersionNumber</code>","text":"Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def get_versionnumber(self) -&gt; core.VersionNumber:\nreturn core.VersionNumber(\nself.majorVersion(), self.minorVersion(), self.microVersion()\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ParallelAnimationGroup","title":"<code>ParallelAnimationGroup</code>","text":"<p>         Bases: <code>core.AnimationGroupMixin</code>, <code>QtCore.QParallelAnimationGroup</code></p> Source code in <code>prettyqt\\core\\parallelanimationgroup.py</code> <pre><code>class ParallelAnimationGroup(core.AnimationGroupMixin, QtCore.QParallelAnimationGroup):\ndef set_duration(self, duration: int):\nanims = [self.animationAt(i) for i in range(len(self))]\nfor anim in anims:\nanim.setDuration(duration)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.parallelanimationgroup.ParallelAnimationGroup.set_duration","title":"<code>set_duration(duration: int)</code>","text":"Source code in <code>prettyqt\\core\\parallelanimationgroup.py</code> <pre><code>def set_duration(self, duration: int):\nanims = [self.animationAt(i) for i in range(len(self))]\nfor anim in anims:\nanim.setDuration(duration)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.PauseAnimation","title":"<code>PauseAnimation</code>","text":"<p>         Bases: <code>core.AbstractAnimationMixin</code>, <code>QtCore.QPauseAnimation</code></p> Source code in <code>prettyqt\\core\\pauseanimation.py</code> <pre><code>class PauseAnimation(core.AbstractAnimationMixin, QtCore.QPauseAnimation):\ndef __repr__(self):\nreturn get_repr(self, self.duration())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.pauseanimation.PauseAnimation.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\pauseanimation.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.duration())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.PersistentModelIndex","title":"<code>PersistentModelIndex</code>","text":"<p>         Bases: <code>QtCore.QPersistentModelIndex</code></p> Source code in <code>prettyqt\\core\\persistentmodelindex.py</code> <pre><code>class PersistentModelIndex(QtCore.QPersistentModelIndex):\ndef __bool__(self):\nreturn self.isValid()\ndef __getitem__(self, flag: int):\nreturn self.data(flag)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.persistentmodelindex.PersistentModelIndex.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\persistentmodelindex.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.persistentmodelindex.PersistentModelIndex.__getitem__","title":"<code>__getitem__(flag: int)</code>","text":"Source code in <code>prettyqt\\core\\persistentmodelindex.py</code> <pre><code>def __getitem__(self, flag: int):\nreturn self.data(flag)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.PluginLoader","title":"<code>PluginLoader</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QPluginLoader</code></p> Source code in <code>prettyqt\\core\\pluginloader.py</code> <pre><code>class PluginLoader(core.ObjectMixin, QtCore.QPluginLoader):\ndef get_load_hints(self) -&gt; list[LoadHintStr]:\nreturn core.library.LOAD_HINTS.get_list(self.loadHints())\ndef set_load_hints(self, **kwargs):\nflag = QtCore.QLibrary.LoadHint(0)  # type: ignore\nfor k, v in kwargs.items():\nif v is True:\nflag |= core.library.LOAD_HINTS[k]  # type: ignore\nself.setLoadHints(flag)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.pluginloader.PluginLoader.get_load_hints","title":"<code>get_load_hints() -&gt; list[LoadHintStr]</code>","text":"Source code in <code>prettyqt\\core\\pluginloader.py</code> <pre><code>def get_load_hints(self) -&gt; list[LoadHintStr]:\nreturn core.library.LOAD_HINTS.get_list(self.loadHints())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.pluginloader.PluginLoader.set_load_hints","title":"<code>set_load_hints(**kwargs)</code>","text":"Source code in <code>prettyqt\\core\\pluginloader.py</code> <pre><code>def set_load_hints(self, **kwargs):\nflag = QtCore.QLibrary.LoadHint(0)  # type: ignore\nfor k, v in kwargs.items():\nif v is True:\nflag |= core.library.LOAD_HINTS[k]  # type: ignore\nself.setLoadHints(flag)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Process","title":"<code>Process</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code>, <code>QtCore.QProcess</code></p> Source code in <code>prettyqt\\core\\process.py</code> <pre><code>class Process(core.IODeviceMixin, QtCore.QProcess):\ndef set_read_channel(self, channel: ProcessChannelStr):\n\"\"\"Set the input channel channel.\n        Args:\n            channel: channel to set\n        Raises:\n            InvalidParamError: invalid channel\n        \"\"\"\nif channel not in PROCESS_CHANNELS:\nraise InvalidParamError(channel, PROCESS_CHANNELS)\nself.setReadChannel(PROCESS_CHANNELS[channel])\ndef get_read_channel(self) -&gt; ProcessChannelStr:\nreturn PROCESS_CHANNELS.inverse[self.readChannel()]\ndef close_read_channel(self, channel: ProcessChannelStr):\nself.closeReadChannel(PROCESS_CHANNELS[channel])\ndef set_input_channel_mode(self, mode: InputChannelModeStr):\n\"\"\"Set the input channel mode.\n        Args:\n            mode: mode to set\n        Raises:\n            InvalidParamError: invalid mode\n        \"\"\"\nif mode not in INPUT_CHANNEL_MODES:\nraise InvalidParamError(mode, INPUT_CHANNEL_MODES)\nself.setInputChannelMode(INPUT_CHANNEL_MODES[mode])\ndef get_input_channel_mode(self) -&gt; InputChannelModeStr:\nreturn INPUT_CHANNEL_MODES.inverse[self.inputChannelMode()]\ndef set_process_channel_mode(self, mode: ProcessChannelModeStr):\n\"\"\"Set the process channel mode.\n        Args:\n            mode: mode to set\n        Raises:\n            InvalidParamError: invalid mode\n        \"\"\"\nif mode not in PROCESS_CHANNEL_MODES:\nraise InvalidParamError(mode, PROCESS_CHANNEL_MODES)\nself.setProcessChannelMode(PROCESS_CHANNEL_MODES[mode])\ndef get_process_channel_mode(self) -&gt; ProcessChannelModeStr:\nreturn PROCESS_CHANNEL_MODES.inverse[self.processChannelMode()]\ndef set_state(self, state: ProcessStateStr):\n\"\"\"Set the process state.\n        Args:\n            state: state to set\n        Raises:\n            InvalidParamError: invalid state\n        \"\"\"\nif state not in PROCESS_STATES:\nraise InvalidParamError(state, PROCESS_STATES)\nself.setProcessState(PROCESS_STATES[state])\ndef get_state(self) -&gt; ProcessStateStr:\nreturn PROCESS_STATES.inverse[self.state()]\ndef get_error(self) -&gt; ProcessErrorStr:\nreturn PROCESS_ERRORS.inverse[self.error()]\ndef get_exit_status(self) -&gt; ExitStatusStr:\nreturn EXIT_STATUS.inverse[self.exitStatus()]\ndef get_process_environment(self) -&gt; core.ProcessEnvironment:\nreturn core.ProcessEnvironment(self.processEnvironment())\n@contextlib.contextmanager\ndef edit_process_environment(self):\nenv = self.get_process_environment()\nyield env\nself.setProcessEnvironment(env)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.close_read_channel","title":"<code>close_read_channel(channel: ProcessChannelStr)</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def close_read_channel(self, channel: ProcessChannelStr):\nself.closeReadChannel(PROCESS_CHANNELS[channel])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.edit_process_environment","title":"<code>edit_process_environment()</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>@contextlib.contextmanager\ndef edit_process_environment(self):\nenv = self.get_process_environment()\nyield env\nself.setProcessEnvironment(env)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_error","title":"<code>get_error() -&gt; ProcessErrorStr</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_error(self) -&gt; ProcessErrorStr:\nreturn PROCESS_ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_exit_status","title":"<code>get_exit_status() -&gt; ExitStatusStr</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_exit_status(self) -&gt; ExitStatusStr:\nreturn EXIT_STATUS.inverse[self.exitStatus()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_input_channel_mode","title":"<code>get_input_channel_mode() -&gt; InputChannelModeStr</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_input_channel_mode(self) -&gt; InputChannelModeStr:\nreturn INPUT_CHANNEL_MODES.inverse[self.inputChannelMode()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_process_channel_mode","title":"<code>get_process_channel_mode() -&gt; ProcessChannelModeStr</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_process_channel_mode(self) -&gt; ProcessChannelModeStr:\nreturn PROCESS_CHANNEL_MODES.inverse[self.processChannelMode()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_process_environment","title":"<code>get_process_environment() -&gt; core.ProcessEnvironment</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_process_environment(self) -&gt; core.ProcessEnvironment:\nreturn core.ProcessEnvironment(self.processEnvironment())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_read_channel","title":"<code>get_read_channel() -&gt; ProcessChannelStr</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_read_channel(self) -&gt; ProcessChannelStr:\nreturn PROCESS_CHANNELS.inverse[self.readChannel()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.get_state","title":"<code>get_state() -&gt; ProcessStateStr</code>","text":"Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def get_state(self) -&gt; ProcessStateStr:\nreturn PROCESS_STATES.inverse[self.state()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_input_channel_mode","title":"<code>set_input_channel_mode(mode: InputChannelModeStr)</code>","text":"<p>Set the input channel mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InputChannelModeStr</code> <p>mode to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid mode</p> Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_input_channel_mode(self, mode: InputChannelModeStr):\n\"\"\"Set the input channel mode.\n    Args:\n        mode: mode to set\n    Raises:\n        InvalidParamError: invalid mode\n    \"\"\"\nif mode not in INPUT_CHANNEL_MODES:\nraise InvalidParamError(mode, INPUT_CHANNEL_MODES)\nself.setInputChannelMode(INPUT_CHANNEL_MODES[mode])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_process_channel_mode","title":"<code>set_process_channel_mode(mode: ProcessChannelModeStr)</code>","text":"<p>Set the process channel mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ProcessChannelModeStr</code> <p>mode to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid mode</p> Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_process_channel_mode(self, mode: ProcessChannelModeStr):\n\"\"\"Set the process channel mode.\n    Args:\n        mode: mode to set\n    Raises:\n        InvalidParamError: invalid mode\n    \"\"\"\nif mode not in PROCESS_CHANNEL_MODES:\nraise InvalidParamError(mode, PROCESS_CHANNEL_MODES)\nself.setProcessChannelMode(PROCESS_CHANNEL_MODES[mode])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_read_channel","title":"<code>set_read_channel(channel: ProcessChannelStr)</code>","text":"<p>Set the input channel channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>ProcessChannelStr</code> <p>channel to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid channel</p> Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_read_channel(self, channel: ProcessChannelStr):\n\"\"\"Set the input channel channel.\n    Args:\n        channel: channel to set\n    Raises:\n        InvalidParamError: invalid channel\n    \"\"\"\nif channel not in PROCESS_CHANNELS:\nraise InvalidParamError(channel, PROCESS_CHANNELS)\nself.setReadChannel(PROCESS_CHANNELS[channel])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.process.Process.set_state","title":"<code>set_state(state: ProcessStateStr)</code>","text":"<p>Set the process state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>ProcessStateStr</code> <p>state to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid state</p> Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_state(self, state: ProcessStateStr):\n\"\"\"Set the process state.\n    Args:\n        state: state to set\n    Raises:\n        InvalidParamError: invalid state\n    \"\"\"\nif state not in PROCESS_STATES:\nraise InvalidParamError(state, PROCESS_STATES)\nself.setProcessState(PROCESS_STATES[state])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ProcessEnvironment","title":"<code>ProcessEnvironment</code>","text":"<p>         Bases: <code>QtCore.QProcessEnvironment</code></p> Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>class ProcessEnvironment(QtCore.QProcessEnvironment):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, other: str):\nreturn self.contains(other)\ndef __getitem__(self, index: str) -&gt; str:\nif index not in self:\nraise KeyError(\"Environment variable not set.\")\nreturn self.value(index)\ndef __delitem__(self, index: str):\nself.remove(index)\ndef __setitem__(self, index: str, value: str):\nreturn self.insert(index, value)\ndef __iter__(self) -&gt; Iterator[tuple[str, str]]:\nreturn iter((k, self.value(k)) for k in self)\ndef update(self, other: Mapping[str, str]):\nfor k, v in other.items():\nself.insert(k, v)\ndef items(self) -&gt; list[tuple[str, str]]:\nreturn list(self)\n@classmethod\ndef get_system_environment(cls) -&gt; Self:\nreturn cls(cls.systemEnvironment())\n@classmethod\ndef from_dict(cls, dictionary: Mapping[str, str]) -&gt; Self:\nenv = cls()\nfor k, v in dictionary.items():\nenv.insert(k, v)\nreturn env\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.__contains__","title":"<code>__contains__(other: str)</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def __contains__(self, other: str):\nreturn self.contains(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def __delitem__(self, index: str):\nself.remove(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.__getitem__","title":"<code>__getitem__(index: str) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def __getitem__(self, index: str) -&gt; str:\nif index not in self:\nraise KeyError(\"Environment variable not set.\")\nreturn self.value(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.__iter__","title":"<code>__iter__() -&gt; Iterator[tuple[str, str]]</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def __iter__(self) -&gt; Iterator[tuple[str, str]]:\nreturn iter((k, self.value(k)) for k in self)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def __setitem__(self, index: str, value: str):\nreturn self.insert(index, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.from_dict","title":"<code>from_dict(dictionary: Mapping[str, str]) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>@classmethod\ndef from_dict(cls, dictionary: Mapping[str, str]) -&gt; Self:\nenv = cls()\nfor k, v in dictionary.items():\nenv.insert(k, v)\nreturn env\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.get_system_environment","title":"<code>get_system_environment() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>@classmethod\ndef get_system_environment(cls) -&gt; Self:\nreturn cls(cls.systemEnvironment())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.items","title":"<code>items() -&gt; list[tuple[str, str]]</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def items(self) -&gt; list[tuple[str, str]]:\nreturn list(self)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.processenvironment.ProcessEnvironment.update","title":"<code>update(other: Mapping[str, str])</code>","text":"Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>def update(self, other: Mapping[str, str]):\nfor k, v in other.items():\nself.insert(k, v)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Property","title":"<code>Property</code>","text":"<p>         Bases: <code>QtCore.Property</code></p> Source code in <code>prettyqt\\core\\property.py</code> <pre><code>class Property(QtCore.Property):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.PropertyAnimation","title":"<code>PropertyAnimation</code>","text":"<p>         Bases: <code>core.VariantAnimationMixin</code>, <code>QtCore.QPropertyAnimation</code></p> Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>class PropertyAnimation(core.VariantAnimationMixin, QtCore.QPropertyAnimation):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"easingCurve\": core.easingcurve.TYPE}\nreturn maps\ndef apply_to(self, method: Callable):\nself.setTargetObject(method.__self__)\nself.set_property_name(method.__name__)\ndef set_property_name(self, name: datatypes.ByteArrayType):\nif isinstance(name, str):\nname = name.encode()\nif isinstance(name, bytes):\nname = QtCore.QByteArray(name)\nself.setPropertyName(name)\ndef get_property_name(self) -&gt; str:\nreturn self.propertyName().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.propertyanimation.PropertyAnimation.apply_to","title":"<code>apply_to(method: Callable)</code>","text":"Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>def apply_to(self, method: Callable):\nself.setTargetObject(method.__self__)\nself.set_property_name(method.__name__)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.propertyanimation.PropertyAnimation.get_property_name","title":"<code>get_property_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>def get_property_name(self) -&gt; str:\nreturn self.propertyName().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.propertyanimation.PropertyAnimation.set_property_name","title":"<code>set_property_name(name: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>def set_property_name(self, name: datatypes.ByteArrayType):\nif isinstance(name, str):\nname = name.encode()\nif isinstance(name, bytes):\nname = QtCore.QByteArray(name)\nself.setPropertyName(name)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.RandomGenerator","title":"<code>RandomGenerator</code>","text":"<p>         Bases: <code>QtCore.QRandomGenerator</code></p> Source code in <code>prettyqt\\core\\randomgenerator.py</code> <pre><code>class RandomGenerator(QtCore.QRandomGenerator):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.RegularExpression","title":"<code>RegularExpression</code>","text":"<p>         Bases: <code>QtCore.QRegularExpression</code></p> Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>class RegularExpression(QtCore.QRegularExpression):\ndef __init__(\nself,\npattern: str | QtCore.QRegularExpression = \"\",\nflags: QtCore.QRegularExpression.PatternOption = PATTERN_OPTIONS[\"none\"],\n):\nif isinstance(pattern, QtCore.QRegularExpression):\nsuper().__init__(pattern)\nelse:\nif isinstance(flags, int):\nflags = core.RegularExpression.PatternOption(flags)  # type: ignore\nsuper().__init__(pattern, flags)  # type: ignore\ndef __repr__(self):\nreturn get_repr(self, self.pattern())\n@property\ndef _pattern(self):\nreturn self.pattern()\n__match_args__ = (\"_pattern\",)\ndef __reduce__(self):\nreturn type(self), (self.pattern(), self.flags)\ndef globalMatch(self, *args, **kwargs) -&gt; core.RegularExpressionMatchIterator:\nit = super().globalMatch(*args, **kwargs)\nreturn core.RegularExpressionMatchIterator(it)\ndef global_match(\nself,\ntext: str,\noffset: int = 0,\nmatch_type: MatchTypeStr = \"normal\",\nanchored: bool = False,\n):\noptions = MATCH_OPTIONS[\"anchored\"] if anchored else MATCH_OPTIONS[\"none\"]\nreturn self.globalMatch(text, offset, MATCH_TYPE[match_type], options)\ndef match(  # type: ignore\nself,\ntext: str,\noffset: int = 0,\nmatch_type: MatchTypeStr | QtCore.QRegularExpression.MatchType = \"normal\",\nanchored: bool = False,\n) -&gt; core.RegularExpressionMatch:\ntyp = MATCH_TYPE[match_type] if isinstance(match_type, str) else match_type\nif isinstance(anchored, bool):\noptions = MATCH_OPTIONS[\"anchored\"] if anchored else MATCH_OPTIONS[\"none\"]\nelse:\noptions = anchored\nmatch = super().match(text, offset, typ, options)\nreturn core.RegularExpressionMatch(match)\ndef fullmatch(\nself, string: str, pos: int = 0, endpos: int | None = None\n) -&gt; core.RegularExpressionMatch | None:\nif endpos:\nstring = string[:endpos]\nmatch = super().match(string, pos)\nif match.hasMatch() and len(string) == match.end() - match.start():\nreturn core.RegularExpressionMatch(match)\nelse:\nreturn None\ndef finditer(\nself, string: str, pos: int = 0, endpos: int | None = None\n) -&gt; Iterator[core.RegularExpressionMatch]:\nfor match in self.globalMatch(string[:endpos], offset=pos):\nmatch.pos = pos\nmatch.endpos = endpos\nmatch.string = string\nyield match\ndef findall(self, string: str, pos: int = 0, endpos: int | None = None) -&gt; list:\nmatches = list(self.globalMatch(string[:endpos], offset=pos))\nreturn [m.groups() if len(m.groups()) &gt; 1 else m.group(0) for m in matches]\ndef subn(self, repl: str | Callable, string: str, count: int = 0) -&gt; tuple[str, int]:\nresult = string\nmatches = self.global_match(string)\nmatches = list(matches)\nif count &gt; 0:\nmatches = matches[:count]\nmatches = list(reversed(matches))\nfor m in matches:\nto_replace = repl if isinstance(repl, str) else repl(m)\nfor j in range(self.groups):\nto_replace = to_replace.replace(rf\"\\g&lt;{j}&gt;\", m.group(j))\nfor k in self.groupindex:\nto_replace = to_replace.replace(rf\"\\g&lt;{k}&gt;\", m.group(k))\nresult = result[: m.start()] + to_replace + result[m.end() :]\nreturn (result, min(len(matches), count))\ndef sub(self, repl: str | Callable, string: str, count: int = 0) -&gt; str:\nres = self.subn(repl, string, count)\nreturn res[0]\ndef search(self, string: str, pos: int = 0, endpos: int | None = None):\nmatch = super().match(string[:endpos], pos)\nreturn match if match.hasMatch() else None\ndef split(self, string: str, maxsplit: int = 0):\nraise NotImplementedError()\n# result = []\n# matches = self.global_match(string)\n# matches = list(matches)\n# if 0 &lt; maxsplit &lt;= len(matches):\n#     remainder = string[matches[maxsplit - 1].end() :]\n#     print(remainder)\n# else:\n#     print(None)\n#     remainder = None\n# if maxsplit &gt; 0:\n#     matches = matches[:maxsplit]\n# prev_match = None\n# m = matches[0]\n# if m.start() == 0:\n#     result.append(\"\")\n# else:\n#     result.append(string[0 : m.start()])\n# for g in m.groups():\n#     result.append(g)\n# prev_match = m\n# for m in matches[1:]:\n#     result.append(string[prev_match.end() : m.start()])\n#     for g in m.groups():\n#         result.append(g)\n#     if m.end() == len(string):\n#         result.append(\"\")\n#     prev_match = m\n# if remainder:\n#     result.append(remainder)\n# return result\n@property\ndef groups(self) -&gt; int:\nreturn self.captureCount()\n@property\ndef groupindex(self) -&gt; dict[str, int]:\nreturn {k: i for i, k in enumerate(self.namedCaptureGroups()[1:], start=1)}\n@property\ndef flags(self):\nreturn self.patternOptions()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.__match_args__","title":"<code>__match_args__ = ('_pattern')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.flags","title":"<code>flags</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.groupindex","title":"<code>groupindex: dict[str, int]</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.groups","title":"<code>groups: int</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.__init__","title":"<code>__init__(pattern: str | QtCore.QRegularExpression = '', flags: QtCore.QRegularExpression.PatternOption = PATTERN_OPTIONS['none'])</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def __init__(\nself,\npattern: str | QtCore.QRegularExpression = \"\",\nflags: QtCore.QRegularExpression.PatternOption = PATTERN_OPTIONS[\"none\"],\n):\nif isinstance(pattern, QtCore.QRegularExpression):\nsuper().__init__(pattern)\nelse:\nif isinstance(flags, int):\nflags = core.RegularExpression.PatternOption(flags)  # type: ignore\nsuper().__init__(pattern, flags)  # type: ignore\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.pattern(), self.flags)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.pattern())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.findall","title":"<code>findall(string: str, pos: int = 0, endpos: int | None = None) -&gt; list</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def findall(self, string: str, pos: int = 0, endpos: int | None = None) -&gt; list:\nmatches = list(self.globalMatch(string[:endpos], offset=pos))\nreturn [m.groups() if len(m.groups()) &gt; 1 else m.group(0) for m in matches]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.finditer","title":"<code>finditer(string: str, pos: int = 0, endpos: int | None = None) -&gt; Iterator[core.RegularExpressionMatch]</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def finditer(\nself, string: str, pos: int = 0, endpos: int | None = None\n) -&gt; Iterator[core.RegularExpressionMatch]:\nfor match in self.globalMatch(string[:endpos], offset=pos):\nmatch.pos = pos\nmatch.endpos = endpos\nmatch.string = string\nyield match\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.fullmatch","title":"<code>fullmatch(string: str, pos: int = 0, endpos: int | None = None) -&gt; core.RegularExpressionMatch | None</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def fullmatch(\nself, string: str, pos: int = 0, endpos: int | None = None\n) -&gt; core.RegularExpressionMatch | None:\nif endpos:\nstring = string[:endpos]\nmatch = super().match(string, pos)\nif match.hasMatch() and len(string) == match.end() - match.start():\nreturn core.RegularExpressionMatch(match)\nelse:\nreturn None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.globalMatch","title":"<code>globalMatch(*args, **kwargs) -&gt; core.RegularExpressionMatchIterator</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def globalMatch(self, *args, **kwargs) -&gt; core.RegularExpressionMatchIterator:\nit = super().globalMatch(*args, **kwargs)\nreturn core.RegularExpressionMatchIterator(it)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.global_match","title":"<code>global_match(text: str, offset: int = 0, match_type: MatchTypeStr = 'normal', anchored: bool = False)</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def global_match(\nself,\ntext: str,\noffset: int = 0,\nmatch_type: MatchTypeStr = \"normal\",\nanchored: bool = False,\n):\noptions = MATCH_OPTIONS[\"anchored\"] if anchored else MATCH_OPTIONS[\"none\"]\nreturn self.globalMatch(text, offset, MATCH_TYPE[match_type], options)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.match","title":"<code>match(text: str, offset: int = 0, match_type: MatchTypeStr | QtCore.QRegularExpression.MatchType = 'normal', anchored: bool = False) -&gt; core.RegularExpressionMatch</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def match(  # type: ignore\nself,\ntext: str,\noffset: int = 0,\nmatch_type: MatchTypeStr | QtCore.QRegularExpression.MatchType = \"normal\",\nanchored: bool = False,\n) -&gt; core.RegularExpressionMatch:\ntyp = MATCH_TYPE[match_type] if isinstance(match_type, str) else match_type\nif isinstance(anchored, bool):\noptions = MATCH_OPTIONS[\"anchored\"] if anchored else MATCH_OPTIONS[\"none\"]\nelse:\noptions = anchored\nmatch = super().match(text, offset, typ, options)\nreturn core.RegularExpressionMatch(match)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.search","title":"<code>search(string: str, pos: int = 0, endpos: int | None = None)</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def search(self, string: str, pos: int = 0, endpos: int | None = None):\nmatch = super().match(string[:endpos], pos)\nreturn match if match.hasMatch() else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.split","title":"<code>split(string: str, maxsplit: int = 0)</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def split(self, string: str, maxsplit: int = 0):\nraise NotImplementedError()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.sub","title":"<code>sub(repl: str | Callable, string: str, count: int = 0) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def sub(self, repl: str | Callable, string: str, count: int = 0) -&gt; str:\nres = self.subn(repl, string, count)\nreturn res[0]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpression.RegularExpression.subn","title":"<code>subn(repl: str | Callable, string: str, count: int = 0) -&gt; tuple[str, int]</code>","text":"Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>def subn(self, repl: str | Callable, string: str, count: int = 0) -&gt; tuple[str, int]:\nresult = string\nmatches = self.global_match(string)\nmatches = list(matches)\nif count &gt; 0:\nmatches = matches[:count]\nmatches = list(reversed(matches))\nfor m in matches:\nto_replace = repl if isinstance(repl, str) else repl(m)\nfor j in range(self.groups):\nto_replace = to_replace.replace(rf\"\\g&lt;{j}&gt;\", m.group(j))\nfor k in self.groupindex:\nto_replace = to_replace.replace(rf\"\\g&lt;{k}&gt;\", m.group(k))\nresult = result[: m.start()] + to_replace + result[m.end() :]\nreturn (result, min(len(matches), count))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.RegularExpressionMatch","title":"<code>RegularExpressionMatch</code>","text":"<p>         Bases: <code>QtCore.QRegularExpressionMatch</code></p> Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>class RegularExpressionMatch(QtCore.QRegularExpressionMatch):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.string = None\nself.pos = None\nself.endpos = None\ndef __repr__(self):\nreturn get_repr(self)\ndef __getitem__(self, item: int | str) -&gt; str:\nif captured := self.captured(item):\nreturn captured\nelse:\nraise KeyError(item)\ndef __bool__(self):\nreturn self.isValid()\ndef get_match_type(self) -&gt; core.regularexpression.MatchTypeStr:\nreturn core.regularexpression.MATCH_TYPE.inverse[self.matchType()]\ndef group(self, *groups: int | str) -&gt; tuple[str, ...] | str:\nmatch len(groups):\ncase 0:\nreturn self.captured(0)\ncase 1:\nreturn self.captured(groups[0])\ncase _:\nreturn tuple(self.captured(i) for i in groups)\ndef groups(self, default=None) -&gt; tuple:\nif self.lastindex is None:\nreturn ()\nreturn tuple(\nself.group(i) if i &lt;= self.lastindex else default\nfor i in range(self.re.captureCount())\n)\ndef groupdict(self, default=None) -&gt; dict[str, Any]:\nif self.lastindex is None:\nreturn {}\ngroups = [\nself.group(i) if i &lt;= self.lastindex else default\nfor i in range(self.re.captureCount())\n]\nnames = self.re.namedCaptureGroups()\nreturn {names[i]: groups[i] for i in range(self.re.captureCount())}\ndef start(self, group: int = 0) -&gt; int:\nreturn self.capturedStart(group)\ndef end(self, group: int = 0) -&gt; int:\nreturn self.capturedEnd(group)\ndef span(self, group: int = 0) -&gt; tuple[int, int]:\nreturn (self.capturedStart(group), self.capturedEnd(group))\n@property\ndef lastindex(self) -&gt; int | None:\nidx = self.lastCapturedIndex()\nreturn None if idx == -1 else idx\n@property\ndef lastgroup(self) -&gt; str | None:\nif self.lastCapturedIndex() == -1:\nreturn None\nreturn self.re.namedCaptureGroups()[self.lastCapturedIndex()]\n@property\ndef re(self) -&gt; QtCore.QRegularExpression:\nreturn self.regularExpression()\n@property\ndef partial(self) -&gt; bool:\nreturn self.hasPartialMatch()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.endpos","title":"<code>endpos = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.lastgroup","title":"<code>lastgroup: str | None</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.lastindex","title":"<code>lastindex: int | None</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.partial","title":"<code>partial: bool</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.pos","title":"<code>pos = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.re","title":"<code>re: QtCore.QRegularExpression</code>  <code>property</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.string","title":"<code>string = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.__getitem__","title":"<code>__getitem__(item: int | str) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def __getitem__(self, item: int | str) -&gt; str:\nif captured := self.captured(item):\nreturn captured\nelse:\nraise KeyError(item)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.string = None\nself.pos = None\nself.endpos = None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.end","title":"<code>end(group: int = 0) -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def end(self, group: int = 0) -&gt; int:\nreturn self.capturedEnd(group)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.get_match_type","title":"<code>get_match_type() -&gt; core.regularexpression.MatchTypeStr</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def get_match_type(self) -&gt; core.regularexpression.MatchTypeStr:\nreturn core.regularexpression.MATCH_TYPE.inverse[self.matchType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.group","title":"<code>group(*groups: int | str) -&gt; tuple[str, ...] | str</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def group(self, *groups: int | str) -&gt; tuple[str, ...] | str:\nmatch len(groups):\ncase 0:\nreturn self.captured(0)\ncase 1:\nreturn self.captured(groups[0])\ncase _:\nreturn tuple(self.captured(i) for i in groups)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.groupdict","title":"<code>groupdict(default = None) -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def groupdict(self, default=None) -&gt; dict[str, Any]:\nif self.lastindex is None:\nreturn {}\ngroups = [\nself.group(i) if i &lt;= self.lastindex else default\nfor i in range(self.re.captureCount())\n]\nnames = self.re.namedCaptureGroups()\nreturn {names[i]: groups[i] for i in range(self.re.captureCount())}\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.groups","title":"<code>groups(default = None) -&gt; tuple</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def groups(self, default=None) -&gt; tuple:\nif self.lastindex is None:\nreturn ()\nreturn tuple(\nself.group(i) if i &lt;= self.lastindex else default\nfor i in range(self.re.captureCount())\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.span","title":"<code>span(group: int = 0) -&gt; tuple[int, int]</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def span(self, group: int = 0) -&gt; tuple[int, int]:\nreturn (self.capturedStart(group), self.capturedEnd(group))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatch.RegularExpressionMatch.start","title":"<code>start(group: int = 0) -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>def start(self, group: int = 0) -&gt; int:\nreturn self.capturedStart(group)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.RegularExpressionMatchIterator","title":"<code>RegularExpressionMatchIterator</code>","text":"<p>         Bases: <code>QtCore.QRegularExpressionMatchIterator</code></p> Source code in <code>prettyqt\\core\\regularexpressionmatchiterator.py</code> <pre><code>class RegularExpressionMatchIterator(QtCore.QRegularExpressionMatchIterator):\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.hasNext():\nreturn core.RegularExpressionMatch(self.next())\nraise StopIteration\ndef peek_next(self) -&gt; core.RegularExpressionMatch:\nreturn core.RegularExpressionMatch(self.peekNext())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatchiterator.RegularExpressionMatchIterator.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatchiterator.py</code> <pre><code>def __iter__(self):\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatchiterator.RegularExpressionMatchIterator.__next__","title":"<code>__next__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatchiterator.py</code> <pre><code>def __next__(self):\nif self.hasNext():\nreturn core.RegularExpressionMatch(self.next())\nraise StopIteration\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatchiterator.RegularExpressionMatchIterator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatchiterator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.regularexpressionmatchiterator.RegularExpressionMatchIterator.peek_next","title":"<code>peek_next() -&gt; core.RegularExpressionMatch</code>","text":"Source code in <code>prettyqt\\core\\regularexpressionmatchiterator.py</code> <pre><code>def peek_next(self) -&gt; core.RegularExpressionMatch:\nreturn core.RegularExpressionMatch(self.peekNext())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Resource","title":"<code>Resource</code>","text":"<p>         Bases: <code>QtCore.QResource</code></p> Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>class Resource(QtCore.QResource):\ndef __repr__(self):\nreturn get_repr(self, self.absoluteFilePath(), self.get_locale())\ndef __reduce__(self):\nreturn type(self), (self.absoluteFilePath(), self.get_locale())\ndef __bytes__(self):\nreturn bytes(self.uncompressedData())\ndef __bool__(self):\nreturn self.isValid()\ndef __iter__(self) -&gt; Iterator[str]:\nreturn iter(self.children())\ndef get_compression_algorithm(self) -&gt; CompressionStr:\nreturn COMPRESSION.inverse[self.compressionAlgorithm()]\ndef get_absolute_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absoluteFilePath())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_last_modified(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastModified())\ndef set_file_name(self, path: datatypes.PathType):\nself.setFileName(os.fspath(path))\ndef get_file_name(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.fileName())\n@classmethod\ndef register_resource(cls, path: datatypes.PathType, root: str = \"\"):\ncls.registerResource(os.fspath(path), root)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.__bytes__","title":"<code>__bytes__()</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def __bytes__(self):\nreturn bytes(self.uncompressedData())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.__iter__","title":"<code>__iter__() -&gt; Iterator[str]</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def __iter__(self) -&gt; Iterator[str]:\nreturn iter(self.children())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.absoluteFilePath(), self.get_locale())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.absoluteFilePath(), self.get_locale())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.get_absolute_file_path","title":"<code>get_absolute_file_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def get_absolute_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absoluteFilePath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.get_compression_algorithm","title":"<code>get_compression_algorithm() -&gt; CompressionStr</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def get_compression_algorithm(self) -&gt; CompressionStr:\nreturn COMPRESSION.inverse[self.compressionAlgorithm()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.get_file_name","title":"<code>get_file_name() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def get_file_name(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.fileName())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.get_last_modified","title":"<code>get_last_modified() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def get_last_modified(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastModified())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.register_resource","title":"<code>register_resource(path: datatypes.PathType, root: str = '')</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>@classmethod\ndef register_resource(cls, path: datatypes.PathType, root: str = \"\"):\ncls.registerResource(os.fspath(path), root)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.resource.Resource.set_file_name","title":"<code>set_file_name(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>def set_file_name(self, path: datatypes.PathType):\nself.setFileName(os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Runnable","title":"<code>Runnable</code>","text":"<p>         Bases: <code>QtCore.QRunnable</code></p> Source code in <code>prettyqt\\core\\runnable.py</code> <pre><code>class Runnable(QtCore.QRunnable):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SaveFile","title":"<code>SaveFile</code>","text":"<p>         Bases: <code>core.FileDeviceMixin</code>, <code>QtCore.QSaveFile</code></p> Source code in <code>prettyqt\\core\\savefile.py</code> <pre><code>class SaveFile(core.FileDeviceMixin, QtCore.QSaveFile):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Semaphore","title":"<code>Semaphore</code>","text":"<p>         Bases: <code>QtCore.QSemaphore</code></p> Source code in <code>prettyqt\\core\\semaphore.py</code> <pre><code>class Semaphore(QtCore.QSemaphore):\n@contextlib.contextmanager\ndef acquire_resources(self, n: int = 1) -&gt; Generator[bool, None, None]:\nyield self.tryAcquire(n)\nself.release(n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.semaphore.Semaphore.acquire_resources","title":"<code>acquire_resources(n: int = 1) -&gt; Generator[bool, None, None]</code>","text":"Source code in <code>prettyqt\\core\\semaphore.py</code> <pre><code>@contextlib.contextmanager\ndef acquire_resources(self, n: int = 1) -&gt; Generator[bool, None, None]:\nyield self.tryAcquire(n)\nself.release(n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SequentialAnimationGroup","title":"<code>SequentialAnimationGroup</code>","text":"<p>         Bases: <code>core.AnimationGroupMixin</code>, <code>QtCore.QSequentialAnimationGroup</code></p> Source code in <code>prettyqt\\core\\sequentialanimationgroup.py</code> <pre><code>class SequentialAnimationGroup(\ncore.AnimationGroupMixin, QtCore.QSequentialAnimationGroup\n):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Settings","title":"<code>Settings</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QSettings</code></p> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>class Settings(core.ObjectMixin, QtCore.QSettings):\ndef __init__(self, *args, settings_id: str | None = None):\nsuper().__init__(*args)\nself.settings_id = settings_id\ndef __repr__(self):\nreturn f\"{type(self).__name__}: {self.as_dict()}\"\ndef __contains__(self, key: str) -&gt; bool:\nreturn self.contains(key)\ndef __enter__(self):\nif self.settings_id:\nself.beginGroup(self.settings_id)\nreturn self\ndef __exit__(self, exc_type, exc_value, traceback):\nif self.settings_id:\nself.endGroup()\ndef __getitem__(self, index: str):\nreturn self.get_value(index)\ndef __setitem__(self, name: str, value):\nreturn self.set_value(name, value)\ndef __delitem__(self, key: str):\nif not self.contains(key):\nraise KeyError(key)\nreturn self.remove(key)\ndef __iter__(self) -&gt; Iterator[tuple[str, Any]]:\nreturn iter(self.items())\ndef __len__(self) -&gt; int:\nreturn len(self.allKeys())\n@classmethod\ndef build_from_dict(cls, dct: dict[str, Any]) -&gt; Self:\nsettings = cls()\nfor k, v in dct.items():\nsettings.set_value(k, v)\nreturn settings\ndef as_dict(self) -&gt; dict[str, Any]:\nreturn dict(self.items())\ndef set_value(self, key: str, value):\nif not self.applicationName():\nraise RuntimeError(\"no app name defined\")\nself.setValue(key, dict(value=value))\ndef set_values(self, dct: dict[str, Any]):\nfor k, v in dct.items():\nself.set_value(k, v)\ndef get_value(self, key: str, default=None):\nif not self.contains(key):\nreturn default\nval = self.value(key)\n# this is for migration\nif not isinstance(val, dict) or \"value\" not in val:\nself.set_value(key, val)\nreturn val\nreturn val[\"value\"]\n@classmethod\ndef set_default_format(cls, fmt: FormatStr):\n\"\"\"Set the default format.\n        Args:\n            fmt: the default format to use\n        Raises:\n            InvalidParamError: invalid format\n        \"\"\"\nif fmt not in FORMAT:\nraise InvalidParamError(fmt, FORMAT)\ncls.setDefaultFormat(FORMAT[fmt])\n@classmethod\ndef get_default_format(cls) -&gt; FormatStr:\n\"\"\"Return default settings format.\n        Returns:\n            default settings format\n        \"\"\"\nreturn FORMAT.inverse[cls.defaultFormat()]\ndef get_scope(self) -&gt; ScopeStr:\n\"\"\"Return scope.\n        Returns:\n            scope\n        \"\"\"\nreturn SCOPE.inverse[self.scope()]\n@classmethod\ndef set_path(cls, fmt: FormatStr, scope: ScopeStr, path: datatypes.PathType):\n\"\"\"Set the path to the settings file.\n        Args:\n            fmt: the default format to use\n            scope: the scope to use\n            path: the path to set\n        Raises:\n            InvalidParamError: invalid format or scope\n        \"\"\"\nif fmt not in FORMAT:\nraise InvalidParamError(fmt, FORMAT)\nif scope not in SCOPE:\nraise InvalidParamError(scope, SCOPE)\ncls.setPath(FORMAT[fmt], SCOPE[scope], os.fspath(path))\n@contextlib.contextmanager\ndef edit_group(self, prefix: str):\n\"\"\"Context manager for setting groups.\n        Args:\n            prefix: setting prefix for group\n        \"\"\"\nself.beginGroup(prefix)\nyield None\nself.endGroup()\n@contextlib.contextmanager\ndef write_array(self, prefix: str, size: int | None = None):\n\"\"\"Context manager for writing arrays.\n        Args:\n            prefix: prefix for settings array\n            size: size of settings array\n        \"\"\"\nif size is None:\nsize = -1\nself.beginWriteArray(prefix, size)\nyield None\nself.endArray()\n@contextlib.contextmanager\ndef read_array(self, prefix: str):\n\"\"\"Context manager for reading arrays.\n        Args:\n            prefix: prefix for settings array\n        \"\"\"\nself.beginReadArray(prefix)\nyield None\nself.endArray()\n# Dictionary interface\ndef get(self, key: str, default: Any = None) -&gt; Any:\nreturn self.get_value(key, default)\ndef setdefault(self, key: str, default: Any = None) -&gt; Any:\nif not self.contains(key):\nself.set_value(key, default)\nreturn default\nreturn self.get_value(key)\ndef keys(self) -&gt; list[str]:\nreturn self.allKeys()\ndef values(self) -&gt; Iterator[Any]:\nreturn (self.get_value(key) for key in self.allKeys())\ndef items(self):\nreturn zip(self.keys(), self.values())\ndef pop(self, key: str):\nif self.contains(key):\nreturn self.get_value(key)\nraise KeyError(key)\ndef popitem(self) -&gt; tuple[str, Any]:\nkey = self.keys()[0]\nreturn (key, self.get_value(key))\ndef update(self, other: Mapping[str, Any]):\nfor k, v in other.items():\nself.set_value(k, v)\n@classmethod\ndef register_extensions(\ncls,\n*exts: str,\napp_name: str | None = None,\napp_path: None | datatypes.PathType = None,\n):\nlogger.debug(f\"assigning extensions {exts} to {app_name}\")\ns = cls(\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Classes\", Settings.Format.NativeFormat)\nif app_path is None:\napp_path = str(core.CoreApplication.get_application_file_path())\napp_path = os.fspath(app_path)\nif app_name is None:\napp_name = core.CoreApplication.applicationName()\nfor ext in exts:\ns.setValue(f\"{ext}/DefaultIcon/.\", app_path)  # perhaps ,0 after app_path\ns.setValue(f\"{ext}/.\", app_name)\ns.setValue(f\"{app_name}/shell/open/command/.\", f\"{app_path} %1\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.settings_id","title":"<code>settings_id = settings_id</code>  <code>instance-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.settings.Settings.__contains__","title":"<code>__contains__(key: str) -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __contains__(self, key: str) -&gt; bool:\nreturn self.contains(key)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__delitem__","title":"<code>__delitem__(key: str)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __delitem__(self, key: str):\nif not self.contains(key):\nraise KeyError(key)\nreturn self.remove(key)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __enter__(self):\nif self.settings_id:\nself.beginGroup(self.settings_id)\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __exit__(self, exc_type, exc_value, traceback):\nif self.settings_id:\nself.endGroup()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__getitem__","title":"<code>__getitem__(index: str)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __getitem__(self, index: str):\nreturn self.get_value(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__init__","title":"<code>__init__(*args, settings_id: str | None = None)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __init__(self, *args, settings_id: str | None = None):\nsuper().__init__(*args)\nself.settings_id = settings_id\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__iter__","title":"<code>__iter__() -&gt; Iterator[tuple[str, Any]]</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __iter__(self) -&gt; Iterator[tuple[str, Any]]:\nreturn iter(self.items())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn len(self.allKeys())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}: {self.as_dict()}\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.__setitem__","title":"<code>__setitem__(name: str, value: str)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def __setitem__(self, name: str, value):\nreturn self.set_value(name, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.as_dict","title":"<code>as_dict() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def as_dict(self) -&gt; dict[str, Any]:\nreturn dict(self.items())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.build_from_dict","title":"<code>build_from_dict(dct: dict[str, Any]) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@classmethod\ndef build_from_dict(cls, dct: dict[str, Any]) -&gt; Self:\nsettings = cls()\nfor k, v in dct.items():\nsettings.set_value(k, v)\nreturn settings\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.edit_group","title":"<code>edit_group(prefix: str)</code>","text":"<p>Context manager for setting groups.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>setting prefix for group</p> required Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@contextlib.contextmanager\ndef edit_group(self, prefix: str):\n\"\"\"Context manager for setting groups.\n    Args:\n        prefix: setting prefix for group\n    \"\"\"\nself.beginGroup(prefix)\nyield None\nself.endGroup()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.get","title":"<code>get(key: str, default: Any = None) -&gt; Any</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def get(self, key: str, default: Any = None) -&gt; Any:\nreturn self.get_value(key, default)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.get_default_format","title":"<code>get_default_format() -&gt; FormatStr</code>  <code>classmethod</code>","text":"<p>Return default settings format.</p> <p>Returns:</p> Type Description <code>FormatStr</code> <p>default settings format</p> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@classmethod\ndef get_default_format(cls) -&gt; FormatStr:\n\"\"\"Return default settings format.\n    Returns:\n        default settings format\n    \"\"\"\nreturn FORMAT.inverse[cls.defaultFormat()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.get_scope","title":"<code>get_scope() -&gt; ScopeStr</code>","text":"<p>Return scope.</p> <p>Returns:</p> Type Description <code>ScopeStr</code> <p>scope</p> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def get_scope(self) -&gt; ScopeStr:\n\"\"\"Return scope.\n    Returns:\n        scope\n    \"\"\"\nreturn SCOPE.inverse[self.scope()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.get_value","title":"<code>get_value(key: str, default: str = None)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def get_value(self, key: str, default=None):\nif not self.contains(key):\nreturn default\nval = self.value(key)\n# this is for migration\nif not isinstance(val, dict) or \"value\" not in val:\nself.set_value(key, val)\nreturn val\nreturn val[\"value\"]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.items","title":"<code>items()</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def items(self):\nreturn zip(self.keys(), self.values())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.keys","title":"<code>keys() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def keys(self) -&gt; list[str]:\nreturn self.allKeys()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.pop","title":"<code>pop(key: str)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def pop(self, key: str):\nif self.contains(key):\nreturn self.get_value(key)\nraise KeyError(key)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.popitem","title":"<code>popitem() -&gt; tuple[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def popitem(self) -&gt; tuple[str, Any]:\nkey = self.keys()[0]\nreturn (key, self.get_value(key))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.read_array","title":"<code>read_array(prefix: str)</code>","text":"<p>Context manager for reading arrays.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>prefix for settings array</p> required Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@contextlib.contextmanager\ndef read_array(self, prefix: str):\n\"\"\"Context manager for reading arrays.\n    Args:\n        prefix: prefix for settings array\n    \"\"\"\nself.beginReadArray(prefix)\nyield None\nself.endArray()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.register_extensions","title":"<code>register_extensions(*exts: str, app_name: str | None = None, app_path: None | datatypes.PathType = None)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@classmethod\ndef register_extensions(\ncls,\n*exts: str,\napp_name: str | None = None,\napp_path: None | datatypes.PathType = None,\n):\nlogger.debug(f\"assigning extensions {exts} to {app_name}\")\ns = cls(\"HKEY_CURRENT_USER\\\\SOFTWARE\\\\Classes\", Settings.Format.NativeFormat)\nif app_path is None:\napp_path = str(core.CoreApplication.get_application_file_path())\napp_path = os.fspath(app_path)\nif app_name is None:\napp_name = core.CoreApplication.applicationName()\nfor ext in exts:\ns.setValue(f\"{ext}/DefaultIcon/.\", app_path)  # perhaps ,0 after app_path\ns.setValue(f\"{ext}/.\", app_name)\ns.setValue(f\"{app_name}/shell/open/command/.\", f\"{app_path} %1\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.set_default_format","title":"<code>set_default_format(fmt: FormatStr)</code>  <code>classmethod</code>","text":"<p>Set the default format.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>FormatStr</code> <p>the default format to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid format</p> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@classmethod\ndef set_default_format(cls, fmt: FormatStr):\n\"\"\"Set the default format.\n    Args:\n        fmt: the default format to use\n    Raises:\n        InvalidParamError: invalid format\n    \"\"\"\nif fmt not in FORMAT:\nraise InvalidParamError(fmt, FORMAT)\ncls.setDefaultFormat(FORMAT[fmt])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.set_path","title":"<code>set_path(fmt: FormatStr, scope: ScopeStr, path: datatypes.PathType)</code>  <code>classmethod</code>","text":"<p>Set the path to the settings file.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>FormatStr</code> <p>the default format to use</p> required <code>scope</code> <code>ScopeStr</code> <p>the scope to use</p> required <code>path</code> <code>datatypes.PathType</code> <p>the path to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid format or scope</p> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@classmethod\ndef set_path(cls, fmt: FormatStr, scope: ScopeStr, path: datatypes.PathType):\n\"\"\"Set the path to the settings file.\n    Args:\n        fmt: the default format to use\n        scope: the scope to use\n        path: the path to set\n    Raises:\n        InvalidParamError: invalid format or scope\n    \"\"\"\nif fmt not in FORMAT:\nraise InvalidParamError(fmt, FORMAT)\nif scope not in SCOPE:\nraise InvalidParamError(scope, SCOPE)\ncls.setPath(FORMAT[fmt], SCOPE[scope], os.fspath(path))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.set_value","title":"<code>set_value(key: str, value: str)</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def set_value(self, key: str, value):\nif not self.applicationName():\nraise RuntimeError(\"no app name defined\")\nself.setValue(key, dict(value=value))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.set_values","title":"<code>set_values(dct: dict[str, Any])</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def set_values(self, dct: dict[str, Any]):\nfor k, v in dct.items():\nself.set_value(k, v)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.setdefault","title":"<code>setdefault(key: str, default: Any = None) -&gt; Any</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def setdefault(self, key: str, default: Any = None) -&gt; Any:\nif not self.contains(key):\nself.set_value(key, default)\nreturn default\nreturn self.get_value(key)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.update","title":"<code>update(other: Mapping[str, Any])</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def update(self, other: Mapping[str, Any]):\nfor k, v in other.items():\nself.set_value(k, v)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.values","title":"<code>values() -&gt; Iterator[Any]</code>","text":"Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>def values(self) -&gt; Iterator[Any]:\nreturn (self.get_value(key) for key in self.allKeys())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.settings.Settings.write_array","title":"<code>write_array(prefix: str, size: int | None = None)</code>","text":"<p>Context manager for writing arrays.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>prefix for settings array</p> required <code>size</code> <code>int | None</code> <p>size of settings array</p> <code>None</code> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>@contextlib.contextmanager\ndef write_array(self, prefix: str, size: int | None = None):\n\"\"\"Context manager for writing arrays.\n    Args:\n        prefix: prefix for settings array\n        size: size of settings array\n    \"\"\"\nif size is None:\nsize = -1\nself.beginWriteArray(prefix, size)\nyield None\nself.endArray()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SharedMemory","title":"<code>SharedMemory</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QSharedMemory</code></p> Source code in <code>prettyqt\\core\\sharedmemory.py</code> <pre><code>class SharedMemory(core.ObjectMixin, QtCore.QSharedMemory):\ndef __repr__(self):\nreturn get_repr(self, self.key())\ndef __reduce__(self):\nreturn type(self), (self.key())\ndef get_error(self) -&gt; SharedMemoryErrorStr:\nreturn SHARED_MEMORY_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sharedmemory.SharedMemory.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\sharedmemory.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.key())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sharedmemory.SharedMemory.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\sharedmemory.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.key())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sharedmemory.SharedMemory.get_error","title":"<code>get_error() -&gt; SharedMemoryErrorStr</code>","text":"Source code in <code>prettyqt\\core\\sharedmemory.py</code> <pre><code>def get_error(self) -&gt; SharedMemoryErrorStr:\nreturn SHARED_MEMORY_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SignalBlocker","title":"<code>SignalBlocker</code>","text":"<p>         Bases: <code>QtCore.QSignalBlocker</code></p> Source code in <code>prettyqt\\core\\signalblocker.py</code> <pre><code>class SignalBlocker(QtCore.QSignalBlocker):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SignalMapper","title":"<code>SignalMapper</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QSignalMapper</code></p> Source code in <code>prettyqt\\core\\signalmapper.py</code> <pre><code>class SignalMapper(core.ObjectMixin, QtCore.QSignalMapper):\ndef __getitem__(self, index: int | str | QtCore.QObject) -&gt; QtCore.QObject:\nreturn self.mapping(index)\ndef __setitem__(self, index: QtCore.QObject, value: int | str | QtCore.QObject):\nself.setMapping(index, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.signalmapper.SignalMapper.__getitem__","title":"<code>__getitem__(index: int | str | QtCore.QObject) -&gt; QtCore.QObject</code>","text":"Source code in <code>prettyqt\\core\\signalmapper.py</code> <pre><code>def __getitem__(self, index: int | str | QtCore.QObject) -&gt; QtCore.QObject:\nreturn self.mapping(index)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.signalmapper.SignalMapper.__setitem__","title":"<code>__setitem__(index: QtCore.QObject, value: int | str | QtCore.QObject)</code>","text":"Source code in <code>prettyqt\\core\\signalmapper.py</code> <pre><code>def __setitem__(self, index: QtCore.QObject, value: int | str | QtCore.QObject):\nself.setMapping(index, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Size","title":"<code>Size</code>","text":"<p>         Bases: <code>QtCore.QSize</code></p> Source code in <code>prettyqt\\core\\size.py</code> <pre><code>class Size(QtCore.QSize):\ndef __repr__(self):\nreturn get_repr(self, self.width(), self.height())\n@property\ndef _width(self):\nreturn self.width()\n@property\ndef _height(self):\nreturn self.height()\n__match_args__ = (\"_width\", \"_height\")\ndef __getitem__(self, index) -&gt; int:\nreturn (self.width(), self.height())[index]\ndef __reduce__(self):\nreturn type(self), (self.width(), self.height())\ndef expanded_to(self, size: datatypes.SizeType) -&gt; Self:\nif isinstance(size, tuple):\nsize = QtCore.QSize(*size)\nreturn type(self)(self.expandedTo(size))\ndef shrunk_by(self, margins: datatypes.MarginsType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMargins(*margins)\nreturn type(self)(self.marginsAdded(margins))\ndef grown_by(self, margins: datatypes.MarginsType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMargins(*margins)\nreturn type(self)(self.marginsRemoved(margins))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.size.Size.__match_args__","title":"<code>__match_args__ = ('_width', '_height')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.size.Size.__getitem__","title":"<code>__getitem__(index) -&gt; int</code>","text":"Source code in <code>prettyqt\\core\\size.py</code> <pre><code>def __getitem__(self, index) -&gt; int:\nreturn (self.width(), self.height())[index]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.size.Size.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\size.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.width(), self.height())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.size.Size.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\size.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.width(), self.height())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.size.Size.expanded_to","title":"<code>expanded_to(size: datatypes.SizeType) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\size.py</code> <pre><code>def expanded_to(self, size: datatypes.SizeType) -&gt; Self:\nif isinstance(size, tuple):\nsize = QtCore.QSize(*size)\nreturn type(self)(self.expandedTo(size))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.size.Size.grown_by","title":"<code>grown_by(margins: datatypes.MarginsType) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\size.py</code> <pre><code>def grown_by(self, margins: datatypes.MarginsType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMargins(*margins)\nreturn type(self)(self.marginsRemoved(margins))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.size.Size.shrunk_by","title":"<code>shrunk_by(margins: datatypes.MarginsType) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\size.py</code> <pre><code>def shrunk_by(self, margins: datatypes.MarginsType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMargins(*margins)\nreturn type(self)(self.marginsAdded(margins))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SizeF","title":"<code>SizeF</code>","text":"<p>         Bases: <code>QtCore.QSizeF</code></p> Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>class SizeF(QtCore.QSizeF):\ndef __repr__(self):\nreturn get_repr(self, self.width(), self.height())\n@property\ndef _width(self):\nreturn self.width()\n@property\ndef _height(self):\nreturn self.height()\n__match_args__ = (\"_width\", \"_height\")\ndef __getitem__(self, index) -&gt; float:\nreturn (self.width(), self.height())[index]\ndef __reduce__(self):\nreturn type(self), (self.width(), self.height())\ndef expanded_to(self, size: datatypes.SizeFType) -&gt; Self:\nif isinstance(size, tuple):\nsize = QtCore.QSizeF(*size)\nreturn type(self)(self.expandedTo(size))\ndef shrunk_by(self, margins: datatypes.MarginsFType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMarginsF(*margins)\nreturn type(self)(self.marginsAdded(margins))\ndef grown_by(self, margins: datatypes.MarginsFType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMarginsF(*margins)\nreturn type(self)(self.marginsRemoved(margins))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sizef.SizeF.__match_args__","title":"<code>__match_args__ = ('_width', '_height')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.sizef.SizeF.__getitem__","title":"<code>__getitem__(index) -&gt; float</code>","text":"Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>def __getitem__(self, index) -&gt; float:\nreturn (self.width(), self.height())[index]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sizef.SizeF.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.width(), self.height())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sizef.SizeF.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.width(), self.height())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sizef.SizeF.expanded_to","title":"<code>expanded_to(size: datatypes.SizeFType) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>def expanded_to(self, size: datatypes.SizeFType) -&gt; Self:\nif isinstance(size, tuple):\nsize = QtCore.QSizeF(*size)\nreturn type(self)(self.expandedTo(size))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sizef.SizeF.grown_by","title":"<code>grown_by(margins: datatypes.MarginsFType) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>def grown_by(self, margins: datatypes.MarginsFType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMarginsF(*margins)\nreturn type(self)(self.marginsRemoved(margins))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sizef.SizeF.shrunk_by","title":"<code>shrunk_by(margins: datatypes.MarginsFType) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>def shrunk_by(self, margins: datatypes.MarginsFType) -&gt; Self:\nif isinstance(margins, tuple):\nmargins = QtCore.QMarginsF(*margins)\nreturn type(self)(self.marginsAdded(margins))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SocketNotifier","title":"<code>SocketNotifier</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QSocketNotifier</code></p> Source code in <code>prettyqt\\core\\socketnotifier.py</code> <pre><code>class SocketNotifier(core.ObjectMixin, QtCore.QSocketNotifier):\n# def __repr__(self):\n#     return f\"{type(self).__name__}({self.socket()}, {self.type()})\"\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return socket event type.\n        Returns:\n            socket event type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.socketnotifier.SocketNotifier.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return socket event type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>socket event type</p> Source code in <code>prettyqt\\core\\socketnotifier.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return socket event type.\n    Returns:\n        socket event type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.SortFilterProxyModel","title":"<code>SortFilterProxyModel</code>","text":"<p>         Bases: <code>core.AbstractProxyModelMixin</code>, <code>QtCore.QSortFilterProxyModel</code></p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>class SortFilterProxyModel(core.AbstractProxyModelMixin, QtCore.QSortFilterProxyModel):\ninvalidated = core.Signal()\n# def __init__(self, *args, **kwargs):\n#     super().__init__(*args, **kwargs)\n#     self._filter_column = 0\n# def setFilterKeyColumn(self, column: int | list[int] | None):\n#     if column is None:\n#         column = -1\n#     self._filter_column = column\n# def filterKeyColumn(self) -&gt; int | list[int] | None:\n#     return self._filter_column\n# def filterAcceptsRow(self, source_row: int, source_index: core.ModelIndex):\n#     column = self.filterKeyColumn()\n#     col_count = self.sourceModel().columnCount()\n#     indexes = [\n#         self.sourceModel().index(source_row, i, source_index) for i in col_count\n#     ]\n#     labels = [self.sourceModel().data(idx) for idx in indexes]\n#     if isinstance(column, int) and source_index.column() == column:\n#         return super().filterAcceptsRow(source_row, source_index)\ndef invalidate(self):\nsuper().invalidate()\nself.invalidated.emit()\ndef lessThan(self, left, right):\nrole = super().sortRole()\nleft_data = left.data(role)\nright_data = right.data(role)\nif left_data is not None and right_data is not None:\nreturn left_data &lt; right_data\nreturn True\ndef sort(\nself,\ncolumn: int | None,\nascending: bool | QtCore.Qt.SortOrder = constants.ASCENDING,\n):\nif isinstance(ascending, bool):\nascending = constants.ASCENDING if ascending else constants.DESCENDING\nif column is None:\ncolumn = -1\nsuper().sort(column, ascending)\ndef setFilterString(self, search_str: str):\npat = \".*?\".join(map(re.escape, search_str))\npat = f\"(?=({pat}))\"\nsuper().setFilterRegularExpression(pat)\ndef setFixedFilterList(self, filter_list: list[str]):\npat = \"|\".join(filter_list)\nsuper().setFilterRegularExpression(pat)\ndef set_filter_case_sensitivity(self, sensitivity: constants.CaseSensitivityStr):\n\"\"\"Set the filter case sensitivity.\n        Args:\n            sensitivity: filter case sensitivity\n        Raises:\n            InvalidParamError: filter case sensitivity does not exist\n        \"\"\"\nif sensitivity not in constants.CASE_SENSITIVITY:\nraise InvalidParamError(sensitivity, constants.CASE_SENSITIVITY)\nsuper().setFilterCaseSensitivity(constants.CASE_SENSITIVITY[sensitivity])\ndef get_filter_case_sensitivity(self) -&gt; constants.CaseSensitivityStr:\n\"\"\"Return current filter case sensitivity.\n        Returns:\n            filter case sensitivity\n        \"\"\"\nreturn constants.CASE_SENSITIVITY.inverse[super().filterCaseSensitivity()]\ndef set_filter_case_sensitive(self, state: bool):\nif state:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseSensitive\nelse:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseInsensitive\nsuper().setFilterCaseSensitivity(sensitivity)\ndef is_filter_case_sensitive(self) -&gt; bool:\nreturn super().filterCaseSensitivity() == QtCore.Qt.CaseSensitivity.CaseSensitive\ndef set_sort_case_sensitive(self, state: bool):\nif state:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseSensitive\nelse:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseInsensitive\nsuper().setSortCaseSensitivity(sensitivity)\ndef is_sort_case_sensitive(self) -&gt; bool:\nreturn super().sortCaseSensitivity() == QtCore.Qt.CaseSensitivity.CaseSensitive\ndef get_filter_regular_expression(self) -&gt; core.RegularExpression:\nreturn core.RegularExpression(self.filterRegularExpression())\ndef set_sort_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setSortRole(role)\ndef set_filter_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setFilterRole(role)\ndef get_sort_order(self) -&gt; Literal[\"ascending\", \"descending\"]:\nreturn \"ascending\" if super().sortOrder() == constants.ASCENDING else \"descending\"\ndef set_filter_key_column(self, column: int | None):\nif column is None:\ncolumn = -1\nsuper().setFilterKeyColumn(column)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.invalidated","title":"<code>invalidated = core.Signal()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.get_filter_case_sensitivity","title":"<code>get_filter_case_sensitivity() -&gt; constants.CaseSensitivityStr</code>","text":"<p>Return current filter case sensitivity.</p> <p>Returns:</p> Type Description <code>constants.CaseSensitivityStr</code> <p>filter case sensitivity</p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def get_filter_case_sensitivity(self) -&gt; constants.CaseSensitivityStr:\n\"\"\"Return current filter case sensitivity.\n    Returns:\n        filter case sensitivity\n    \"\"\"\nreturn constants.CASE_SENSITIVITY.inverse[super().filterCaseSensitivity()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.get_filter_regular_expression","title":"<code>get_filter_regular_expression() -&gt; core.RegularExpression</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def get_filter_regular_expression(self) -&gt; core.RegularExpression:\nreturn core.RegularExpression(self.filterRegularExpression())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.get_sort_order","title":"<code>get_sort_order() -&gt; Literal['ascending', 'descending']</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def get_sort_order(self) -&gt; Literal[\"ascending\", \"descending\"]:\nreturn \"ascending\" if super().sortOrder() == constants.ASCENDING else \"descending\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.invalidate","title":"<code>invalidate()</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def invalidate(self):\nsuper().invalidate()\nself.invalidated.emit()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.is_filter_case_sensitive","title":"<code>is_filter_case_sensitive() -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def is_filter_case_sensitive(self) -&gt; bool:\nreturn super().filterCaseSensitivity() == QtCore.Qt.CaseSensitivity.CaseSensitive\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.is_sort_case_sensitive","title":"<code>is_sort_case_sensitive() -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def is_sort_case_sensitive(self) -&gt; bool:\nreturn super().sortCaseSensitivity() == QtCore.Qt.CaseSensitivity.CaseSensitive\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.lessThan","title":"<code>lessThan(left, right)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def lessThan(self, left, right):\nrole = super().sortRole()\nleft_data = left.data(role)\nright_data = right.data(role)\nif left_data is not None and right_data is not None:\nreturn left_data &lt; right_data\nreturn True\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.setFilterString","title":"<code>setFilterString(search_str: str)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def setFilterString(self, search_str: str):\npat = \".*?\".join(map(re.escape, search_str))\npat = f\"(?=({pat}))\"\nsuper().setFilterRegularExpression(pat)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.setFixedFilterList","title":"<code>setFixedFilterList(filter_list: list[str])</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def setFixedFilterList(self, filter_list: list[str]):\npat = \"|\".join(filter_list)\nsuper().setFilterRegularExpression(pat)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_filter_case_sensitive","title":"<code>set_filter_case_sensitive(state: bool)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_filter_case_sensitive(self, state: bool):\nif state:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseSensitive\nelse:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseInsensitive\nsuper().setFilterCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_filter_case_sensitivity","title":"<code>set_filter_case_sensitivity(sensitivity: constants.CaseSensitivityStr)</code>","text":"<p>Set the filter case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>sensitivity</code> <code>constants.CaseSensitivityStr</code> <p>filter case sensitivity</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>filter case sensitivity does not exist</p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_filter_case_sensitivity(self, sensitivity: constants.CaseSensitivityStr):\n\"\"\"Set the filter case sensitivity.\n    Args:\n        sensitivity: filter case sensitivity\n    Raises:\n        InvalidParamError: filter case sensitivity does not exist\n    \"\"\"\nif sensitivity not in constants.CASE_SENSITIVITY:\nraise InvalidParamError(sensitivity, constants.CASE_SENSITIVITY)\nsuper().setFilterCaseSensitivity(constants.CASE_SENSITIVITY[sensitivity])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_filter_key_column","title":"<code>set_filter_key_column(column: int | None)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_filter_key_column(self, column: int | None):\nif column is None:\ncolumn = -1\nsuper().setFilterKeyColumn(column)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_filter_role","title":"<code>set_filter_role(role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_filter_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setFilterRole(role)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_sort_case_sensitive","title":"<code>set_sort_case_sensitive(state: bool)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_sort_case_sensitive(self, state: bool):\nif state:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseSensitive\nelse:\nsensitivity = QtCore.Qt.CaseSensitivity.CaseInsensitive\nsuper().setSortCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_sort_role","title":"<code>set_sort_role(role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_sort_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setSortRole(role)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.sort","title":"<code>sort(column: int | None, ascending: bool | QtCore.Qt.SortOrder = constants.ASCENDING)</code>","text":"Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def sort(\nself,\ncolumn: int | None,\nascending: bool | QtCore.Qt.SortOrder = constants.ASCENDING,\n):\nif isinstance(ascending, bool):\nascending = constants.ASCENDING if ascending else constants.DESCENDING\nif column is None:\ncolumn = -1\nsuper().sort(column, ascending)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.StandardPaths","title":"<code>StandardPaths</code>","text":"<p>         Bases: <code>QtCore.QStandardPaths</code></p> Source code in <code>prettyqt\\core\\standardpaths.py</code> <pre><code>class StandardPaths(QtCore.QStandardPaths):\ndef __class_getitem__(cls, name: StandardLocationStr) -&gt; list[pathlib.Path]:\nreturn cls.get_standard_locations(name)\n@classmethod\ndef get_display_name(cls, location: StandardLocationStr) -&gt; str:\nreturn cls.displayName(STANDARD_LOCATION[location])\n@classmethod\ndef get_writable_location(cls, location: StandardLocationStr) -&gt; pathlib.Path | None:\npath = cls.writableLocation(STANDARD_LOCATION[location])\nreturn pathlib.Path(path) if path else None\n@classmethod\ndef get_standard_locations(cls, location: StandardLocationStr) -&gt; list[pathlib.Path]:\npaths = cls.standardLocations(STANDARD_LOCATION[location])\nreturn [pathlib.Path(p) for p in paths]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.standardpaths.StandardPaths.__class_getitem__","title":"<code>__class_getitem__(name: StandardLocationStr) -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\core\\standardpaths.py</code> <pre><code>def __class_getitem__(cls, name: StandardLocationStr) -&gt; list[pathlib.Path]:\nreturn cls.get_standard_locations(name)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.standardpaths.StandardPaths.get_display_name","title":"<code>get_display_name(location: StandardLocationStr) -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\standardpaths.py</code> <pre><code>@classmethod\ndef get_display_name(cls, location: StandardLocationStr) -&gt; str:\nreturn cls.displayName(STANDARD_LOCATION[location])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.standardpaths.StandardPaths.get_standard_locations","title":"<code>get_standard_locations(location: StandardLocationStr) -&gt; list[pathlib.Path]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\standardpaths.py</code> <pre><code>@classmethod\ndef get_standard_locations(cls, location: StandardLocationStr) -&gt; list[pathlib.Path]:\npaths = cls.standardLocations(STANDARD_LOCATION[location])\nreturn [pathlib.Path(p) for p in paths]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.standardpaths.StandardPaths.get_writable_location","title":"<code>get_writable_location(location: StandardLocationStr) -&gt; pathlib.Path | None</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\standardpaths.py</code> <pre><code>@classmethod\ndef get_writable_location(cls, location: StandardLocationStr) -&gt; pathlib.Path | None:\npath = cls.writableLocation(STANDARD_LOCATION[location])\nreturn pathlib.Path(path) if path else None\n</code></pre>"},{"location":"api/core.html#prettyqt.core.StorageInfo","title":"<code>StorageInfo</code>","text":"<p>         Bases: <code>QtCore.QStorageInfo</code></p> Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>class StorageInfo(QtCore.QStorageInfo):\ndef __init__(\nself,\npath: QtCore.QStorageInfo | QtCore.QDir | datatypes.PathType | None = None,\n):\nif path is None:\nsuper().__init__()\nelse:\nif isinstance(path, os.PathLike):\npath = os.fspath(path)\nsuper().__init__(path)\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.rootPath())\ndef get_device(self) -&gt; str:\nreturn self.device().data().decode()\ndef get_file_system_type(self) -&gt; str:\nreturn self.fileSystemType().data().decode()\ndef get_subvolume(self) -&gt; str:\nreturn self.subvolume().data().decode()\ndef get_root_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.rootPath())\n@classmethod\ndef get_root(cls) -&gt; Self:\nreturn cls(cls.root())\n@classmethod\ndef get_mounted_volumes(cls) -&gt; list[Self]:\nreturn [cls(i) for i in cls.mountedVolumes()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.__init__","title":"<code>__init__(path: QtCore.QStorageInfo | QtCore.QDir | datatypes.PathType | None = None)</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def __init__(\nself,\npath: QtCore.QStorageInfo | QtCore.QDir | datatypes.PathType | None = None,\n):\nif path is None:\nsuper().__init__()\nelse:\nif isinstance(path, os.PathLike):\npath = os.fspath(path)\nsuper().__init__(path)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.rootPath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.get_device","title":"<code>get_device() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def get_device(self) -&gt; str:\nreturn self.device().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.get_file_system_type","title":"<code>get_file_system_type() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def get_file_system_type(self) -&gt; str:\nreturn self.fileSystemType().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.get_mounted_volumes","title":"<code>get_mounted_volumes() -&gt; list[Self]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>@classmethod\ndef get_mounted_volumes(cls) -&gt; list[Self]:\nreturn [cls(i) for i in cls.mountedVolumes()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.get_root","title":"<code>get_root() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>@classmethod\ndef get_root(cls) -&gt; Self:\nreturn cls(cls.root())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.get_root_path","title":"<code>get_root_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def get_root_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.rootPath())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.storageinfo.StorageInfo.get_subvolume","title":"<code>get_subvolume() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>def get_subvolume(self) -&gt; str:\nreturn self.subvolume().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.StringListModel","title":"<code>StringListModel</code>","text":"<p>         Bases: <code>StringListModelMixin</code>, <code>QtCore.QStringListModel</code></p> Source code in <code>prettyqt\\core\\stringlistmodel.py</code> <pre><code>class StringListModel(StringListModelMixin, QtCore.QStringListModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.StringListModelMixin","title":"<code>StringListModelMixin</code>","text":"<p>         Bases: <code>core.AbstractListModelMixin</code></p> Source code in <code>prettyqt\\core\\stringlistmodel.py</code> <pre><code>class StringListModelMixin(core.AbstractListModelMixin):\ndef serialize_fields(self):\nreturn dict(\nstring_list=self.stringList(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.stringlistmodel.StringListModelMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\core\\stringlistmodel.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nstring_list=self.stringList(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TemporaryDir","title":"<code>TemporaryDir</code>","text":"<p>         Bases: <code>QtCore.QTemporaryDir</code></p> Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>class TemporaryDir(QtCore.QTemporaryDir):\ndef __getattr__(self, attr: str):\nreturn getattr(self.to_path(), attr)\ndef __repr__(self):\nreturn get_repr(self, self.path())\ndef __str__(self):\nreturn self.path()\ndef __bool__(self):\nreturn self.isValid()\ndef __fspath__(self) -&gt; str:\nreturn self.path()\ndef __truediv__(self, other: datatypes.PathType) -&gt; pathlib.Path:\ncurrent = pathlib.Path(self.path())\nreturn current / os.fspath(other)\n# new = current / other\n# if new.suffix == \"\":\n#     return core.Dir(new)\n# else:\n#     return core.File(new)\ndef to_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.path())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.__fspath__","title":"<code>__fspath__() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def __fspath__(self) -&gt; str:\nreturn self.path()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.__getattr__","title":"<code>__getattr__(attr: str)</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def __getattr__(self, attr: str):\nreturn getattr(self.to_path(), attr)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.path())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def __str__(self):\nreturn self.path()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.__truediv__","title":"<code>__truediv__(other: datatypes.PathType) -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def __truediv__(self, other: datatypes.PathType) -&gt; pathlib.Path:\ncurrent = pathlib.Path(self.path())\nreturn current / os.fspath(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.temporarydir.TemporaryDir.to_path","title":"<code>to_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>def to_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.path())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TemporaryFile","title":"<code>TemporaryFile</code>","text":"<p>         Bases: <code>core.FileMixin</code>, <code>QtCore.QTemporaryFile</code></p> Source code in <code>prettyqt\\core\\temporaryfile.py</code> <pre><code>class TemporaryFile(core.FileMixin, QtCore.QTemporaryFile):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TextBoundaryFinder","title":"<code>TextBoundaryFinder</code>","text":"<p>         Bases: <code>QtCore.QTextBoundaryFinder</code></p> Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>class TextBoundaryFinder(QtCore.QTextBoundaryFinder):\ndef __init__(\nself,\nstring_or_other: str | QtCore.QTextBoundaryFinder = \"\",\nboundary_type: (\nQtCore.QTextBoundaryFinder.BoundaryType | BoundaryTypeStr\n) = \"grapheme\",\n):\nif isinstance(string_or_other, QtCore.QTextBoundaryFinder):\nsuper().__init__(string_or_other)\nelse:\nif isinstance(boundary_type, str):\ntyp = BOUNDARY_TYPES[boundary_type]\nelse:\ntyp = boundary_type\nsuper().__init__(typ, string_or_other)\ndef __repr__(self):\nreturn get_repr(self, self.string())\ndef __reduce__(self):\nreturn type(self), (self.string(), self.type())\ndef __iter__(self):\npos = self.position()\nself.setPosition(0)\np = 0\n# if self.isAtBoundary():\n#     yield 0\nwhile p != -1:\np = self.toNextBoundary()\nif p != -1:\nyield p\nself.setPosition(pos)\ndef get_boundary_type(self) -&gt; BoundaryTypeStr:\nreturn BOUNDARY_TYPES.inverse[self.type()]\ndef get_boundary_reasons(self) -&gt; list[BoundaryReasonStr]:\nreturn BOUNDARY_REASONS.get_list(self.boundaryReasons())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textboundaryfinder.TextBoundaryFinder.__init__","title":"<code>__init__(string_or_other: str | QtCore.QTextBoundaryFinder = '', boundary_type: QtCore.QTextBoundaryFinder.BoundaryType | BoundaryTypeStr = 'grapheme')</code>","text":"Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>def __init__(\nself,\nstring_or_other: str | QtCore.QTextBoundaryFinder = \"\",\nboundary_type: (\nQtCore.QTextBoundaryFinder.BoundaryType | BoundaryTypeStr\n) = \"grapheme\",\n):\nif isinstance(string_or_other, QtCore.QTextBoundaryFinder):\nsuper().__init__(string_or_other)\nelse:\nif isinstance(boundary_type, str):\ntyp = BOUNDARY_TYPES[boundary_type]\nelse:\ntyp = boundary_type\nsuper().__init__(typ, string_or_other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textboundaryfinder.TextBoundaryFinder.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>def __iter__(self):\npos = self.position()\nself.setPosition(0)\np = 0\n# if self.isAtBoundary():\n#     yield 0\nwhile p != -1:\np = self.toNextBoundary()\nif p != -1:\nyield p\nself.setPosition(pos)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textboundaryfinder.TextBoundaryFinder.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.string(), self.type())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textboundaryfinder.TextBoundaryFinder.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.string())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textboundaryfinder.TextBoundaryFinder.get_boundary_reasons","title":"<code>get_boundary_reasons() -&gt; list[BoundaryReasonStr]</code>","text":"Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>def get_boundary_reasons(self) -&gt; list[BoundaryReasonStr]:\nreturn BOUNDARY_REASONS.get_list(self.boundaryReasons())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textboundaryfinder.TextBoundaryFinder.get_boundary_type","title":"<code>get_boundary_type() -&gt; BoundaryTypeStr</code>","text":"Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>def get_boundary_type(self) -&gt; BoundaryTypeStr:\nreturn BOUNDARY_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TextStream","title":"<code>TextStream</code>","text":"<p>         Bases: <code>QtCore.QTextStream</code></p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>class TextStream(QtCore.QTextStream):\ndef set_field_alignment(self, alignment: FieldAlignmentStr):\n\"\"\"Set the field alignment.\n        Args:\n            alignment: field alignment\n        Raises:\n            InvalidParamError: invalid field alignment\n        \"\"\"\nif alignment not in FIELD_ALIGNMENT:\nraise InvalidParamError(alignment, FIELD_ALIGNMENT)\nself.setFieldAlignment(FIELD_ALIGNMENT[alignment])\ndef get_field_alignment(self) -&gt; FieldAlignmentStr:\n\"\"\"Get current field alignment.\n        Returns:\n            current field alignment\n        \"\"\"\nreturn FIELD_ALIGNMENT.inverse[self.fieldAlignment()]\ndef set_status(self, status: StatusStr):\n\"\"\"Set the status.\n        Args:\n            status: status\n        Raises:\n            InvalidParamError: invalid status\n        \"\"\"\nif status not in STATUS:\nraise InvalidParamError(status, STATUS)\nself.setStatus(STATUS[status])\ndef get_status(self) -&gt; StatusStr:\n\"\"\"Get current status.\n        Returns:\n            current status\n        \"\"\"\nreturn STATUS.inverse[self.status()]\ndef set_real_number_notation(self, notation: RealNumberNotationStr):\n\"\"\"Set the real number notation.\n        Args:\n            notation: real number notation\n        Raises:\n            InvalidParamError: invalid real number notation\n        \"\"\"\nif notation not in REAL_NUMBER_NOTATION:\nraise InvalidParamError(notation, REAL_NUMBER_NOTATION)\nself.setRealNumberNotation(REAL_NUMBER_NOTATION[notation])\ndef get_real_number_notation(self) -&gt; RealNumberNotationStr:\n\"\"\"Get current real number notation.\n        Returns:\n            current real number notation\n        \"\"\"\nreturn REAL_NUMBER_NOTATION.inverse[self.realNumberNotation()]\ndef read_lines(self) -&gt; Iterator[str]:\nwhile True:\nif msg := self.readLine():\nyield msg\nelse:\nreturn\ndef get_number_flags(self) -&gt; list[NumberFlagStr]:\nreturn NUMBER_FLAGS.get_list(self.numberFlags())\ndef set_number_flags(self, *flags: NumberFlagStr):\nfor item in flags:\nif item not in NUMBER_FLAGS:\nraise InvalidParamError(item, NUMBER_FLAGS)\nflags = NUMBER_FLAGS.merge_flags(flags)\nself.setNumberFlags(flags)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_field_alignment","title":"<code>get_field_alignment() -&gt; FieldAlignmentStr</code>","text":"<p>Get current field alignment.</p> <p>Returns:</p> Type Description <code>FieldAlignmentStr</code> <p>current field alignment</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_field_alignment(self) -&gt; FieldAlignmentStr:\n\"\"\"Get current field alignment.\n    Returns:\n        current field alignment\n    \"\"\"\nreturn FIELD_ALIGNMENT.inverse[self.fieldAlignment()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_number_flags","title":"<code>get_number_flags() -&gt; list[NumberFlagStr]</code>","text":"Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_number_flags(self) -&gt; list[NumberFlagStr]:\nreturn NUMBER_FLAGS.get_list(self.numberFlags())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_real_number_notation","title":"<code>get_real_number_notation() -&gt; RealNumberNotationStr</code>","text":"<p>Get current real number notation.</p> <p>Returns:</p> Type Description <code>RealNumberNotationStr</code> <p>current real number notation</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_real_number_notation(self) -&gt; RealNumberNotationStr:\n\"\"\"Get current real number notation.\n    Returns:\n        current real number notation\n    \"\"\"\nreturn REAL_NUMBER_NOTATION.inverse[self.realNumberNotation()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Get current status.</p> <p>Returns:</p> Type Description <code>StatusStr</code> <p>current status</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Get current status.\n    Returns:\n        current status\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.read_lines","title":"<code>read_lines() -&gt; Iterator[str]</code>","text":"Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def read_lines(self) -&gt; Iterator[str]:\nwhile True:\nif msg := self.readLine():\nyield msg\nelse:\nreturn\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_field_alignment","title":"<code>set_field_alignment(alignment: FieldAlignmentStr)</code>","text":"<p>Set the field alignment.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>FieldAlignmentStr</code> <p>field alignment</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid field alignment</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_field_alignment(self, alignment: FieldAlignmentStr):\n\"\"\"Set the field alignment.\n    Args:\n        alignment: field alignment\n    Raises:\n        InvalidParamError: invalid field alignment\n    \"\"\"\nif alignment not in FIELD_ALIGNMENT:\nraise InvalidParamError(alignment, FIELD_ALIGNMENT)\nself.setFieldAlignment(FIELD_ALIGNMENT[alignment])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_number_flags","title":"<code>set_number_flags(*flags: NumberFlagStr)</code>","text":"Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_number_flags(self, *flags: NumberFlagStr):\nfor item in flags:\nif item not in NUMBER_FLAGS:\nraise InvalidParamError(item, NUMBER_FLAGS)\nflags = NUMBER_FLAGS.merge_flags(flags)\nself.setNumberFlags(flags)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_real_number_notation","title":"<code>set_real_number_notation(notation: RealNumberNotationStr)</code>","text":"<p>Set the real number notation.</p> <p>Parameters:</p> Name Type Description Default <code>notation</code> <code>RealNumberNotationStr</code> <p>real number notation</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid real number notation</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_real_number_notation(self, notation: RealNumberNotationStr):\n\"\"\"Set the real number notation.\n    Args:\n        notation: real number notation\n    Raises:\n        InvalidParamError: invalid real number notation\n    \"\"\"\nif notation not in REAL_NUMBER_NOTATION:\nraise InvalidParamError(notation, REAL_NUMBER_NOTATION)\nself.setRealNumberNotation(REAL_NUMBER_NOTATION[notation])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.textstream.TextStream.set_status","title":"<code>set_status(status: StatusStr)</code>","text":"<p>Set the status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>StatusStr</code> <p>status</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid status</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_status(self, status: StatusStr):\n\"\"\"Set the status.\n    Args:\n        status: status\n    Raises:\n        InvalidParamError: invalid status\n    \"\"\"\nif status not in STATUS:\nraise InvalidParamError(status, STATUS)\nself.setStatus(STATUS[status])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Thread","title":"<code>Thread</code>","text":"<p>         Bases: <code>QtCore.QThread</code></p> Source code in <code>prettyqt\\core\\thread.py</code> <pre><code>class Thread(QtCore.QThread):\ndef get_priority(self) -&gt; PriorityStr:\nreturn PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.thread.Thread.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"Source code in <code>prettyqt\\core\\thread.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\nreturn PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.ThreadPool","title":"<code>ThreadPool</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QThreadPool</code></p> Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>class ThreadPool(core.ObjectMixin, QtCore.QThreadPool):\ndef __contains__(self, other: QtCore.QThread):\nreturn self.contains(other)\ndef get_thread_priority(self) -&gt; core.thread.PriorityStr:\nreturn core.thread.PRIORITY.inverse[self.priority()]\ndef set_thread_priority(self, priority: core.thread.PriorityStr):\nprio = core.thread.PRIORITY[self.threadPriority()]\nself.setThreadPriority(prio)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.threadpool.ThreadPool.__contains__","title":"<code>__contains__(other: QtCore.QThread)</code>","text":"Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>def __contains__(self, other: QtCore.QThread):\nreturn self.contains(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.threadpool.ThreadPool.get_thread_priority","title":"<code>get_thread_priority() -&gt; core.thread.PriorityStr</code>","text":"Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>def get_thread_priority(self) -&gt; core.thread.PriorityStr:\nreturn core.thread.PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.threadpool.ThreadPool.set_thread_priority","title":"<code>set_thread_priority(priority: core.thread.PriorityStr)</code>","text":"Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>def set_thread_priority(self, priority: core.thread.PriorityStr):\nprio = core.thread.PRIORITY[self.threadPriority()]\nself.setThreadPriority(prio)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Time","title":"<code>Time</code>","text":"<p>         Bases: <code>QtCore.QTime</code></p> Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>class Time(QtCore.QTime):\ndef __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]  # type: ignore\nreturn f\"{type(self).__name__}({template}\"\ndef __str__(self):\nreturn self.toString()\ndef __reduce__(self):\nreturn type(self), (self.hour(), self.minute(), self.second(), self.msec())\ndef __format__(self, format_spec: str):\nreturn self.toString(format_spec)\n@property\ndef _hour(self):\nreturn self.hour()\n@property\ndef _minute(self):\nreturn self.minute()\n@property\ndef _second(self):\nreturn self.second()\n@property\ndef _msec(self):\nreturn self.msec()\n__match_args__ = (\"_hour\", \"_minute\", \"_second\", \"_msec\")\ndef add_msecs(self, msecs: int) -&gt; Self:\nreturn type(self)(self.addMSecs(msecs))\ndef add_secs(self, secs: int) -&gt; Self:\nreturn type(self)(self.addSecs(secs))\n@classmethod\ndef get_current_time(cls) -&gt; Self:\nreturn cls(cls.currentTime())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.__match_args__","title":"<code>__match_args__ = ('_hour', '_minute', '_second', '_msec')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core._time.Time.__format__","title":"<code>__format__(format_spec: str)</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>def __format__(self, format_spec: str):\nreturn self.toString(format_spec)\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.hour(), self.minute(), self.second(), self.msec())\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>def __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]  # type: ignore\nreturn f\"{type(self).__name__}({template}\"\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.add_msecs","title":"<code>add_msecs(msecs: int) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>def add_msecs(self, msecs: int) -&gt; Self:\nreturn type(self)(self.addMSecs(msecs))\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.add_secs","title":"<code>add_secs(secs: int) -&gt; Self</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>def add_secs(self, secs: int) -&gt; Self:\nreturn type(self)(self.addSecs(secs))\n</code></pre>"},{"location":"api/core.html#prettyqt.core._time.Time.get_current_time","title":"<code>get_current_time() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>@classmethod\ndef get_current_time(cls) -&gt; Self:\nreturn cls(cls.currentTime())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TimeLine","title":"<code>TimeLine</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QTimeLine</code></p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>class TimeLine(core.ObjectMixin, QtCore.QTimeLine):\ndef serialize_fields(self):\nreturn dict(\ncurrent_time=self.currentTime(),\ndirection=self.get_direction(),\nduration=self.duration(),\neasing_curve=self.easingCurve(),\nloop_count=self.loopCount(),\nupdate_interval=self.updateInterval(),\n)\ndef set_direction(self, direction: DirectionStr):\n\"\"\"Set the direction.\n        Args:\n            direction: direction\n        Raises:\n            InvalidParamError: direction does not exist\n        \"\"\"\nif direction not in DIRECTION:\nraise InvalidParamError(direction, DIRECTION)\nself.setDirection(DIRECTION[direction])\ndef get_direction(self) -&gt; DirectionStr:\n\"\"\"Return current direction.\n        Returns:\n            direction\n        \"\"\"\nreturn DIRECTION.inverse[self.direction()]\ndef get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n        Returns:\n            state\n        \"\"\"\nreturn STATE.inverse[self.state()]\ndef set_easing(\nself, easing_type: core.easingcurve.TypeStr | Callable[[float], float]\n) -&gt; core.EasingCurve:\ncurve = core.EasingCurve()\nif isinstance(easing_type, str):\ncurve.set_type(easing_type)\nelse:\ncurve.set_custom_type(easing_type)\nself.setEasingCurve(curve)\nreturn curve\ndef get_easing(self) -&gt; core.easingcurve.TypeStr | Callable[[float], float]:\ncurve = core.EasingCurve(self.easingCurve())\ntyp = curve.get_type()\nreturn curve.get_custom_type() if typ == \"custom\" else typ\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.get_direction","title":"<code>get_direction() -&gt; DirectionStr</code>","text":"<p>Return current direction.</p> <p>Returns:</p> Type Description <code>DirectionStr</code> <p>direction</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_direction(self) -&gt; DirectionStr:\n\"\"\"Return current direction.\n    Returns:\n        direction\n    \"\"\"\nreturn DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.get_easing","title":"<code>get_easing() -&gt; core.easingcurve.TypeStr | Callable[[float], float]</code>","text":"Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_easing(self) -&gt; core.easingcurve.TypeStr | Callable[[float], float]:\ncurve = core.EasingCurve(self.easingCurve())\ntyp = curve.get_type()\nreturn curve.get_custom_type() if typ == \"custom\" else typ\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>state</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\ncurrent_time=self.currentTime(),\ndirection=self.get_direction(),\nduration=self.duration(),\neasing_curve=self.easingCurve(),\nloop_count=self.loopCount(),\nupdate_interval=self.updateInterval(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.set_direction","title":"<code>set_direction(direction: DirectionStr)</code>","text":"<p>Set the direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>DirectionStr</code> <p>direction</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>direction does not exist</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def set_direction(self, direction: DirectionStr):\n\"\"\"Set the direction.\n    Args:\n        direction: direction\n    Raises:\n        InvalidParamError: direction does not exist\n    \"\"\"\nif direction not in DIRECTION:\nraise InvalidParamError(direction, DIRECTION)\nself.setDirection(DIRECTION[direction])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timeline.TimeLine.set_easing","title":"<code>set_easing(easing_type: core.easingcurve.TypeStr | Callable[[float], float]) -&gt; core.EasingCurve</code>","text":"Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def set_easing(\nself, easing_type: core.easingcurve.TypeStr | Callable[[float], float]\n) -&gt; core.EasingCurve:\ncurve = core.EasingCurve()\nif isinstance(easing_type, str):\ncurve.set_type(easing_type)\nelse:\ncurve.set_custom_type(easing_type)\nself.setEasingCurve(curve)\nreturn curve\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TimeZone","title":"<code>TimeZone</code>","text":"<p>         Bases: <code>QtCore.QTimeZone</code></p> Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>class TimeZone(QtCore.QTimeZone):\ndef __init__(self, *args):\nif len(args) == 1 and isinstance(args[0], str):\nsuper().__init__(QtCore.QByteArray(args[0].encode()))\nelse:\nsuper().__init__(*args)\ndef __repr__(self):\nreturn get_repr(self, self.get_id())\ndef __str__(self):\nreturn self.get_id()\ndef __reduce__(self):\nreturn type(self), (self.get_id(),)\ndef get_id(self) -&gt; str:\nreturn self.id().data().decode()\ndef get_display_name(\nself,\ndatetime: QtCore.QDateTime | TimeTypeStr,\nname_type: NameTypeStr = \"default\",\nlocale: core.Locale | None = None,\n) -&gt; str:\nif isinstance(datetime, str):\nif datetime not in TIME_TYPE:\nraise InvalidParamError(datetime, TIME_TYPE)\ndatetime = TIME_TYPE[datetime]\nif name_type not in NAME_TYPE:\nraise InvalidParamError(name_type, NAME_TYPE)\nif locale is None:\nlocale = core.Locale()\nreturn self.displayName(datetime, NAME_TYPE[name_type], locale)\ndef get_time_spec(self) -&gt; constants.TimeSpecStr:\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.__init__","title":"<code>__init__(*args)</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def __init__(self, *args):\nif len(args) == 1 and isinstance(args[0], str):\nsuper().__init__(QtCore.QByteArray(args[0].encode()))\nelse:\nsuper().__init__(*args)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.get_id(),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_id())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def __str__(self):\nreturn self.get_id()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.get_display_name","title":"<code>get_display_name(datetime: QtCore.QDateTime | TimeTypeStr, name_type: NameTypeStr = 'default', locale: core.Locale | None = None) -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def get_display_name(\nself,\ndatetime: QtCore.QDateTime | TimeTypeStr,\nname_type: NameTypeStr = \"default\",\nlocale: core.Locale | None = None,\n) -&gt; str:\nif isinstance(datetime, str):\nif datetime not in TIME_TYPE:\nraise InvalidParamError(datetime, TIME_TYPE)\ndatetime = TIME_TYPE[datetime]\nif name_type not in NAME_TYPE:\nraise InvalidParamError(name_type, NAME_TYPE)\nif locale is None:\nlocale = core.Locale()\nreturn self.displayName(datetime, NAME_TYPE[name_type], locale)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.get_id","title":"<code>get_id() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def get_id(self) -&gt; str:\nreturn self.id().data().decode()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timezone.TimeZone.get_time_spec","title":"<code>get_time_spec() -&gt; constants.TimeSpecStr</code>","text":"Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>def get_time_spec(self) -&gt; constants.TimeSpecStr:\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Timer","title":"<code>Timer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtCore.QTimer</code></p> Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>class Timer(core.ObjectMixin, QtCore.QTimer):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"timerType\": constants.TIMER_TYPE}\nreturn maps\n@classmethod\ndef single_shot(cls, callback: Callable) -&gt; Self:\ntimer = cls()\ntimer.timeout.connect(callback)\ntimer.setSingleShot(True)\nreturn timer\ndef set_type(self, typ: constants.TimerTypeStr):\n\"\"\"Set the timer type.\n        Args:\n            typ: timer type\n        Raises:\n            InvalidParamError: timer type does not exist\n        \"\"\"\nif typ not in constants.TIMER_TYPE:\nraise InvalidParamError(typ, constants.TIMER_TYPE)\nself.setTimerType(constants.TIMER_TYPE[typ])\ndef get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n        Returns:\n            timer type\n        \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\ndef set_interval(self, interval: int | str):\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nself.setInterval(interval)\ndef start_timer(self, interval: None | int | str = None):\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nif interval is None:\nself.start()\nelse:\nself.start(interval)\ndef restart(self):\nself.stop()\nself.start()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.get_type","title":"<code>get_type() -&gt; constants.TimerTypeStr</code>","text":"<p>Return current timer type.</p> <p>Returns:</p> Type Description <code>constants.TimerTypeStr</code> <p>timer type</p> Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n    Returns:\n        timer type\n    \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.restart","title":"<code>restart()</code>","text":"Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def restart(self):\nself.stop()\nself.start()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.set_interval","title":"<code>set_interval(interval: int | str)</code>","text":"Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def set_interval(self, interval: int | str):\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nself.setInterval(interval)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.set_type","title":"<code>set_type(typ: constants.TimerTypeStr)</code>","text":"<p>Set the timer type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>constants.TimerTypeStr</code> <p>timer type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>timer type does not exist</p> Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def set_type(self, typ: constants.TimerTypeStr):\n\"\"\"Set the timer type.\n    Args:\n        typ: timer type\n    Raises:\n        InvalidParamError: timer type does not exist\n    \"\"\"\nif typ not in constants.TIMER_TYPE:\nraise InvalidParamError(typ, constants.TIMER_TYPE)\nself.setTimerType(constants.TIMER_TYPE[typ])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.single_shot","title":"<code>single_shot(callback: Callable) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>@classmethod\ndef single_shot(cls, callback: Callable) -&gt; Self:\ntimer = cls()\ntimer.timeout.connect(callback)\ntimer.setSingleShot(True)\nreturn timer\n</code></pre>"},{"location":"api/core.html#prettyqt.core.timer.Timer.start_timer","title":"<code>start_timer(interval: None | int | str = None)</code>","text":"Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def start_timer(self, interval: None | int | str = None):\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nif interval is None:\nself.start()\nelse:\nself.start(interval)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Translator","title":"<code>Translator</code>","text":"<p>         Bases: <code>TranslatorMixin</code>, <code>QtCore.QTranslator</code></p> Source code in <code>prettyqt\\core\\translator.py</code> <pre><code>class Translator(TranslatorMixin, QtCore.QTranslator):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.TransposeProxyModel","title":"<code>TransposeProxyModel</code>","text":"<p>         Bases: <code>core.AbstractProxyModelMixin</code>, <code>QtCore.QTransposeProxyModel</code></p> Source code in <code>prettyqt\\core\\transposeproxymodel.py</code> <pre><code>class TransposeProxyModel(core.AbstractProxyModelMixin, QtCore.QTransposeProxyModel):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Url","title":"<code>Url</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QUrl</code></p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>class Url(serializemixin.SerializeMixin, QtCore.QUrl):\ndef __init__(self, path: datatypes.UrlType | datatypes.PathType | None = None):\nif path is None:\nsuper().__init__()\nelse:\nif isinstance(path, QtCore.QUrl):\nsuper().__init__(path)\nelse:\nsuper().__init__(os.fspath(path))\nif isinstance(path, os.PathLike):\nself.setScheme(\"file\")\n@property\ndef _toString(self):\nreturn self.toString()\n__match_args__ = (\"_toString\",)\n# def __str__(self):\n#     return self.absolutePath()\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef serialize_fields(self):\nreturn dict(path=self.toString())\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\ndef to_string(self) -&gt; str:\nreturn self.toString()\ndef to_path(self) -&gt; pathlib.Path:\n\"\"\"Get pathlib object from the URL.\n        Returns:\n            Path\n        \"\"\"\nreturn pathlib.Path(str(self))\ndef is_local_file(self) -&gt; bool:\nreturn self.isLocalFile()\n@classmethod\ndef from_user_input(cls, url: str, working_dir: str | None = None) -&gt; Self:\nif working_dir is None:\nworking_dir = \"\"\nreturn cls(cls.fromUserInput(url, working_dir))\n@classmethod\ndef from_local_file(cls, path: datatypes.PathType) -&gt; Self:\nurl = cls.fromLocalFile(os.fspath(path))\nreturn cls(url)\ndef _has_explicit_scheme(self) -&gt; bool:\n\"\"\"Check if a url has an explicit scheme given.\"\"\"\nreturn bool(\nself.isValid()\nand self.scheme()\nand (self.host() or self.path())\nand not self.path().startswith(\":\")\n)\ndef is_special_url(self) -&gt; bool:\n\"\"\"Return True if url is an about:... or other special URL.\"\"\"\nreturn self.scheme() in (\"about\", \"file\") if self.isValid() else False\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.__match_args__","title":"<code>__match_args__ = ('_toString')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.url.Url.__init__","title":"<code>__init__(path: datatypes.UrlType | datatypes.PathType | None = None)</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def __init__(self, path: datatypes.UrlType | datatypes.PathType | None = None):\nif path is None:\nsuper().__init__()\nelse:\nif isinstance(path, QtCore.QUrl):\nsuper().__init__(path)\nelse:\nsuper().__init__(os.fspath(path))\nif isinstance(path, os.PathLike):\nself.setScheme(\"file\")\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.from_local_file","title":"<code>from_local_file(path: datatypes.PathType) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>@classmethod\ndef from_local_file(cls, path: datatypes.PathType) -&gt; Self:\nurl = cls.fromLocalFile(os.fspath(path))\nreturn cls(url)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.from_user_input","title":"<code>from_user_input(url: str, working_dir: str | None = None) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>@classmethod\ndef from_user_input(cls, url: str, working_dir: str | None = None) -&gt; Self:\nif working_dir is None:\nworking_dir = \"\"\nreturn cls(cls.fromUserInput(url, working_dir))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.is_local_file","title":"<code>is_local_file() -&gt; bool</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def is_local_file(self) -&gt; bool:\nreturn self.isLocalFile()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.is_special_url","title":"<code>is_special_url() -&gt; bool</code>","text":"<p>Return True if url is an about:... or other special URL.</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def is_special_url(self) -&gt; bool:\n\"\"\"Return True if url is an about:... or other special URL.\"\"\"\nreturn self.scheme() in (\"about\", \"file\") if self.isValid() else False\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def serialize_fields(self):\nreturn dict(path=self.toString())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.to_path","title":"<code>to_path() -&gt; pathlib.Path</code>","text":"<p>Get pathlib object from the URL.</p> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Path</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def to_path(self) -&gt; pathlib.Path:\n\"\"\"Get pathlib object from the URL.\n    Returns:\n        Path\n    \"\"\"\nreturn pathlib.Path(str(self))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.url.Url.to_string","title":"<code>to_string() -&gt; str</code>","text":"Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def to_string(self) -&gt; str:\nreturn self.toString()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.UrlQuery","title":"<code>UrlQuery</code>","text":"<p>         Bases: <code>QtCore.QUrlQuery</code></p> Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>class UrlQuery(QtCore.QUrlQuery):\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __contains__(self, key: str):\nreturn self.hasQueryItem(key)\ndef __add__(self, other: dict) -&gt; UrlQuery:\nfor k, v in other.items():\nself.addQueryItem(k, str(v))\nreturn self\ndef __delitem__(self, item: str):\nself.removeQueryItem(item)\ndef __setitem__(self, key, value):\nitems = dict(self.queryItems())\nitems[key] = value\nitems = list(items.items())\nself.setQueryItems(items)\ndef __getitem__(self, key: str):\nreturn self.queryItemValue(key)\ndef serialize_fields(self) -&gt; dict[str, Any]:\nreturn dict(path=self.toString())\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__add__","title":"<code>__add__(other: dict) -&gt; UrlQuery</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __add__(self, other: dict) -&gt; UrlQuery:\nfor k, v in other.items():\nself.addQueryItem(k, str(v))\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__contains__","title":"<code>__contains__(key: str)</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __contains__(self, key: str):\nreturn self.hasQueryItem(key)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__delitem__","title":"<code>__delitem__(item: str)</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __delitem__(self, item: str):\nself.removeQueryItem(item)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__getitem__","title":"<code>__getitem__(key: str)</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __getitem__(self, key: str):\nreturn self.queryItemValue(key)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __setitem__(self, key, value):\nitems = dict(self.queryItems())\nitems[key] = value\nitems = list(items.items())\nself.setQueryItems(items)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.urlquery.UrlQuery.serialize_fields","title":"<code>serialize_fields() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>def serialize_fields(self) -&gt; dict[str, Any]:\nreturn dict(path=self.toString())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.Uuid","title":"<code>Uuid</code>","text":"<p>         Bases: <code>UuidMixin</code>, <code>QtCore.QUuid</code></p> Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>class Uuid(UuidMixin, QtCore.QUuid):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.UuidMixin","title":"<code>UuidMixin</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>class UuidMixin:\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __bool__(self):\nreturn not self.isNull()\ndef __reduce__(self):\nreturn type(self), (self.toString(),)\ndef __format__(self, format_spec: StringFormatStr):\nreturn self.to_string(format_spec)\ndef get_variant(self) -&gt; VariantStr:\nreturn VARIANTS.inverse[self.variant()]\ndef get_version(self) -&gt; VersionStr:\nreturn VERSION.inverse[self.version()]\n@classmethod\ndef create_uuid(cls) -&gt; Self:\n# workaround for PySide2, not able to clone in ctor\nreturn cls(cls.createUuid().toString())\ndef to_string(self, fmt: StringFormatStr = \"with_braces\") -&gt; str:\n\"\"\"Return string representation of the Uuid.\n        Allowed values are \"with_braces\", \"without_braces\", \"id_128\"\n        Args:\n            fmt: Uuid format to use\n        Raises:\n            InvalidParamError: Uuid format does not exist\n        \"\"\"\nif fmt not in STRING_FORMATS:\nraise InvalidParamError(fmt, STRING_FORMATS)\nreturn self.toString(STRING_FORMATS[fmt])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.__format__","title":"<code>__format__(format_spec: StringFormatStr)</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def __format__(self, format_spec: StringFormatStr):\nreturn self.to_string(format_spec)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.toString(),)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.create_uuid","title":"<code>create_uuid() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>@classmethod\ndef create_uuid(cls) -&gt; Self:\n# workaround for PySide2, not able to clone in ctor\nreturn cls(cls.createUuid().toString())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.get_variant","title":"<code>get_variant() -&gt; VariantStr</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def get_variant(self) -&gt; VariantStr:\nreturn VARIANTS.inverse[self.variant()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.get_version","title":"<code>get_version() -&gt; VersionStr</code>","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def get_version(self) -&gt; VersionStr:\nreturn VERSION.inverse[self.version()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.uuid.UuidMixin.to_string","title":"<code>to_string(fmt: StringFormatStr = 'with_braces') -&gt; str</code>","text":"<p>Return string representation of the Uuid.</p> <p>Allowed values are \"with_braces\", \"without_braces\", \"id_128\"</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>StringFormatStr</code> <p>Uuid format to use</p> <code>'with_braces'</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Uuid format does not exist</p> Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def to_string(self, fmt: StringFormatStr = \"with_braces\") -&gt; str:\n\"\"\"Return string representation of the Uuid.\n    Allowed values are \"with_braces\", \"without_braces\", \"id_128\"\n    Args:\n        fmt: Uuid format to use\n    Raises:\n        InvalidParamError: Uuid format does not exist\n    \"\"\"\nif fmt not in STRING_FORMATS:\nraise InvalidParamError(fmt, STRING_FORMATS)\nreturn self.toString(STRING_FORMATS[fmt])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.VariantAnimation","title":"<code>VariantAnimation</code>","text":"<p>         Bases: <code>VariantAnimationMixin</code>, <code>QtCore.QVariantAnimation</code></p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>class VariantAnimation(VariantAnimationMixin, QtCore.QVariantAnimation):\npass\n</code></pre>"},{"location":"api/core.html#prettyqt.core.VariantAnimationMixin","title":"<code>VariantAnimationMixin</code>","text":"<p>         Bases: <code>core.AbstractAnimationMixin</code></p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>class VariantAnimationMixin(core.AbstractAnimationMixin):\ndef __getitem__(self, value: float) -&gt; datatypes.Variant:\nreturn self.keyValueAt(value)\ndef __setitem__(self, key: float, value: datatypes.Variant):\nself.setKeyValueAt(key, value)\ndef __iter__(self) -&gt; Iterator[tuple[float, datatypes.Variant]]:\nreturn iter(self.keyValues())\ndef serialize_fields(self):\nreturn dict(\nduration=self.duration(),\neasing_curve=self.get_easing(),\nkey_values=self.keyValues(),\n)\ndef set_easing(\nself, easing_type: core.easingcurve.TypeStr | Callable[[float], float]\n):\ncurve = core.EasingCurve()\nif isinstance(easing_type, str):\ncurve.set_type(easing_type)\nelse:\ncurve.set_custom_type(easing_type)\nself.setEasingCurve(curve)\ndef get_easing(self) -&gt; core.easingcurve.TypeStr | Callable[[float], float]:\ncurve = core.EasingCurve(self.easingCurve())\ntyp = curve.get_type()\nreturn curve.get_custom_type() if typ == \"custom\" else typ\ndef set_range(self, start, end):\nself.setStartValue(start)\nself.setEndValue(end)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.__getitem__","title":"<code>__getitem__(value: float) -&gt; datatypes.Variant</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def __getitem__(self, value: float) -&gt; datatypes.Variant:\nreturn self.keyValueAt(value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.__iter__","title":"<code>__iter__() -&gt; Iterator[tuple[float, datatypes.Variant]]</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def __iter__(self) -&gt; Iterator[tuple[float, datatypes.Variant]]:\nreturn iter(self.keyValues())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.__setitem__","title":"<code>__setitem__(key: float, value: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def __setitem__(self, key: float, value: datatypes.Variant):\nself.setKeyValueAt(key, value)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.get_easing","title":"<code>get_easing() -&gt; core.easingcurve.TypeStr | Callable[[float], float]</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def get_easing(self) -&gt; core.easingcurve.TypeStr | Callable[[float], float]:\ncurve = core.EasingCurve(self.easingCurve())\ntyp = curve.get_type()\nreturn curve.get_custom_type() if typ == \"custom\" else typ\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nduration=self.duration(),\neasing_curve=self.get_easing(),\nkey_values=self.keyValues(),\n)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.set_easing","title":"<code>set_easing(easing_type: core.easingcurve.TypeStr | Callable[[float], float])</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def set_easing(\nself, easing_type: core.easingcurve.TypeStr | Callable[[float], float]\n):\ncurve = core.EasingCurve()\nif isinstance(easing_type, str):\ncurve.set_type(easing_type)\nelse:\ncurve.set_custom_type(easing_type)\nself.setEasingCurve(curve)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.variantanimation.VariantAnimationMixin.set_range","title":"<code>set_range(start, end)</code>","text":"Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def set_range(self, start, end):\nself.setStartValue(start)\nself.setEndValue(end)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.VersionNumber","title":"<code>VersionNumber</code>","text":"<p>         Bases: <code>QtCore.QVersionNumber</code></p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>class VersionNumber(QtCore.QVersionNumber):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),):\nargs = [int(i) for i in args[0].split(\".\")][:3]\ncase (tuple(),):\nargs = args[0]\n# PySide6 Workaround:\ncase (QtCore.QVersionNumber(),):\nargs = (\nargs[0].majorVersion(),\nargs[0].minorVersion(),\nargs[0].microVersion(),\n)\nsuper().__init__(*args, **kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.major(), self.minor(), self.micro())\n@property\ndef _majorVersion(self):\nreturn self.majorVersion()\n@property\ndef _minorVersion(self):\nreturn self.minorVersion()\n@property\ndef _macroVersion(self):\nreturn self.macroVersion()\n__match_args__ = (\"_majorVersion\", \"_minorVersion\", \"_macroVersion\")\ndef __reduce__(self):\nreturn type(self), (self.major(), self.minor(), self.micro())\ndef __str__(self):\nreturn self.toString()\ndef __eq__(self, other):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__eq__(other)\ndef __hash__(self):\nreturn hash((self.major(), self.minor(), self.micro()))\ndef __gt__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__gt__(other)\ndef __ge__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__ge__(other)\ndef __lt__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__lt__(other)\ndef __le__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__le__(other)\n@classmethod\ndef from_string(cls, version_string: str) -&gt; Self:\nreturn cls(cls.fromString(version_string))\n@classmethod\ndef get_qt_version(cls) -&gt; Self:\nreturn cls(*[int(i) for i in QtCore.__version__.split(\".\")])\n@classmethod\ndef get_python_version(cls) -&gt; Self:\nreturn cls(*sys.version_info[:3])\ndef major(self) -&gt; int:\n\"\"\"An integer representing the major version.\"\"\"\nreturn self.majorVersion()\ndef minor(self) -&gt; int:\n\"\"\"An integer representing the minor version.\"\"\"\nreturn self.minorVersion()\ndef micro(self) -&gt; int:\n\"\"\"An integer representing the micro version.\"\"\"\nreturn self.microVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__match_args__","title":"<code>__match_args__ = ('_majorVersion', '_minorVersion', '_macroVersion')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__eq__","title":"<code>__eq__(other)</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __eq__(self, other):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__eq__(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__ge__","title":"<code>__ge__(other: datatypes.SemanticVersionType)</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __ge__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__ge__(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__gt__","title":"<code>__gt__(other: datatypes.SemanticVersionType)</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __gt__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__gt__(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__hash__","title":"<code>__hash__()</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __hash__(self):\nreturn hash((self.major(), self.minor(), self.micro()))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),):\nargs = [int(i) for i in args[0].split(\".\")][:3]\ncase (tuple(),):\nargs = args[0]\n# PySide6 Workaround:\ncase (QtCore.QVersionNumber(),):\nargs = (\nargs[0].majorVersion(),\nargs[0].minorVersion(),\nargs[0].microVersion(),\n)\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__le__","title":"<code>__le__(other: datatypes.SemanticVersionType)</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __le__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__le__(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__lt__","title":"<code>__lt__(other: datatypes.SemanticVersionType)</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __lt__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__lt__(other)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.major(), self.minor(), self.micro())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.major(), self.minor(), self.micro())\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.from_string","title":"<code>from_string(version_string: str) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>@classmethod\ndef from_string(cls, version_string: str) -&gt; Self:\nreturn cls(cls.fromString(version_string))\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.get_python_version","title":"<code>get_python_version() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>@classmethod\ndef get_python_version(cls) -&gt; Self:\nreturn cls(*sys.version_info[:3])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.get_qt_version","title":"<code>get_qt_version() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>@classmethod\ndef get_qt_version(cls) -&gt; Self:\nreturn cls(*[int(i) for i in QtCore.__version__.split(\".\")])\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.major","title":"<code>major() -&gt; int</code>","text":"<p>An integer representing the major version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def major(self) -&gt; int:\n\"\"\"An integer representing the major version.\"\"\"\nreturn self.majorVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.micro","title":"<code>micro() -&gt; int</code>","text":"<p>An integer representing the micro version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def micro(self) -&gt; int:\n\"\"\"An integer representing the micro version.\"\"\"\nreturn self.microVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.versionnumber.VersionNumber.minor","title":"<code>minor() -&gt; int</code>","text":"<p>An integer representing the minor version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def minor(self) -&gt; int:\n\"\"\"An integer representing the minor version.\"\"\"\nreturn self.minorVersion()\n</code></pre>"},{"location":"api/core.html#prettyqt.core.XmlStreamReader","title":"<code>XmlStreamReader</code>","text":"<p>         Bases: <code>QtCore.QXmlStreamReader</code></p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>class XmlStreamReader(QtCore.QXmlStreamReader):\ndef __iter__(self):\nreturn self\ndef __next__(self):\nwhile not self.atEnd():\nself.readNext()\nif self.hasError():\nraise RuntimeError(self.get_error())\nreturn self\nraise StopIteration\ndef get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n        Returns:\n            file error status\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_token_type(self) -&gt; TokenTypeStr:\n\"\"\"Get the current token type.\n        Returns:\n            token type\n        \"\"\"\nreturn TOKEN_TYPE.inverse[self.tokenType()]\ndef read_next(self) -&gt; TokenTypeStr:\n\"\"\"Read the next token and returns its type.\n        Returns:\n            token type\n        \"\"\"\nreturn TOKEN_TYPE.inverse[self.readNext()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def __iter__(self):\nreturn self\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.__next__","title":"<code>__next__()</code>","text":"Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def __next__(self):\nwhile not self.atEnd():\nself.readNext()\nif self.hasError():\nraise RuntimeError(self.get_error())\nreturn self\nraise StopIteration\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.get_error","title":"<code>get_error() -&gt; FileErrorStr</code>","text":"<p>Return file error status.</p> <p>Returns:</p> Type Description <code>FileErrorStr</code> <p>file error status</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n    Returns:\n        file error status\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.get_token_type","title":"<code>get_token_type() -&gt; TokenTypeStr</code>","text":"<p>Get the current token type.</p> <p>Returns:</p> Type Description <code>TokenTypeStr</code> <p>token type</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def get_token_type(self) -&gt; TokenTypeStr:\n\"\"\"Get the current token type.\n    Returns:\n        token type\n    \"\"\"\nreturn TOKEN_TYPE.inverse[self.tokenType()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.xmlstreamreader.XmlStreamReader.read_next","title":"<code>read_next() -&gt; TokenTypeStr</code>","text":"<p>Read the next token and returns its type.</p> <p>Returns:</p> Type Description <code>TokenTypeStr</code> <p>token type</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def read_next(self) -&gt; TokenTypeStr:\n\"\"\"Read the next token and returns its type.\n    Returns:\n        token type\n    \"\"\"\nreturn TOKEN_TYPE.inverse[self.readNext()]\n</code></pre>"},{"location":"api/core.html#prettyqt.core.app","title":"<code>app(args: list[str] | None = None, **kwargs: list[str] | None) -&gt; CoreApplication</code>","text":"Source code in <code>prettyqt\\core\\__init__.py</code> <pre><code>def app(args: list[str] | None = None, **kwargs) -&gt; CoreApplication:\nif (instance := CoreApplication.instance()) is not None:\nreturn instance\nreturn CoreApplication(sys.argv if args is None else args, **kwargs)\n</code></pre>"},{"location":"api/core.html#prettyqt.core.update_property_group","title":"<code>update_property_group()</code>","text":"Source code in <code>prettyqt\\core\\__init__.py</code> <pre><code>@contextlib.contextmanager\ndef update_property_group():\nQtCore.Qt.beginPropertyUpdateGroup()\nyield None\nQtCore.Qt.endPropertyUpdateGroup()\n</code></pre>"},{"location":"api/custom_delegates.html","title":"custom_delegates module","text":"<p>Module containing custom delegate classes.</p>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.__all__","title":"<code>__all__ = ['ButtonDelegate', 'RadioDelegate', 'ProgressBarDelegate', 'IconDelegate', 'StarDelegate', 'RenderLinkDelegate', 'NoFocusDelegate', 'HtmlItemDelegate']</code>  <code>module-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.ButtonDelegate","title":"<code>ButtonDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>class ButtonDelegate(widgets.StyledItemDelegate):\ndef __init__(\nself,\nparent: QtWidgets.QAbstractItemView,\nrole: QtCore.Qt.ItemDataRole = constants.USER_ROLE,\n):\nsuper().__init__(parent)\nparent.setMouseTracking(True)\nself.btn = widgets.PushButton(parent=parent)\nself.method_role = role\nself.btn.hide()\nself.is_one_cell_edit_mode = False\nself.current_edited_index = QtCore.QModelIndex()\nparent.entered.connect(self.cell_entered)\n#     parent.viewport().installEventFilter(self)\n# def eventFilter(self, source, event) -&gt; bool:\n#     if event.type() == event.Type.MouseMove:\n#         return True\n#     return super().eventFilter(source, event)\ndef updateEditorGeometry(self, editor, option, index):\neditor.setGeometry(option.rect)\ndef createEditor(self, parent, option, index):\nbtn_callback = index.data(self.method_role)\nif btn_callback is None:\nreturn\nreturn widgets.PushButton(parent=parent, text=index.data(), clicked=btn_callback)\ndef setEditorData(self, editor, index):\npass\n# editor.setProperty(\"test\", \"aa\")\n# editor.setText(index.data())\ndef setModelData(self, editor, model, index):\npass\n# model.setData(index, editor.property(\"test\"))\ndef cell_entered(self, index):\n# index = self.parent().indexFromItem(item)\nif self.parent().isPersistentEditorOpen(index):\nself.parent().closePersistentEditor(self.current_edited_index)\nif self.parent().itemDelegateForIndex(index) is self:\n# if index.data(self.method_role) is not None:\nself.parent().openPersistentEditor(index)\nself.parent().setCurrentIndex(index)\nself.is_one_cell_edit_mode = True\nself.current_edited_index = index\ndef paint(self, painter, option, index):\nif index.data(self.method_role) is None:\nsuper().paint(painter, option, index)\nreturn\nself.btn.setGeometry(option.rect)\nself.btn.setText(index.data())\nif option.state &amp; widgets.Style.StateFlag.State_MouseOver:\npainter.fillRect(option.rect, option.palette.highlight())\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\npainter.fillRect(option.rect, option.palette.highlight())\npixmap = self.btn.grab()\npainter.drawPixmap(option.rect, pixmap)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.btn","title":"<code>btn = widgets.PushButton(parent=parent)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.current_edited_index","title":"<code>current_edited_index = QtCore.QModelIndex()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.is_one_cell_edit_mode","title":"<code>is_one_cell_edit_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.method_role","title":"<code>method_role = role</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.__init__","title":"<code>__init__(parent: QtWidgets.QAbstractItemView, role: QtCore.Qt.ItemDataRole = constants.USER_ROLE)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def __init__(\nself,\nparent: QtWidgets.QAbstractItemView,\nrole: QtCore.Qt.ItemDataRole = constants.USER_ROLE,\n):\nsuper().__init__(parent)\nparent.setMouseTracking(True)\nself.btn = widgets.PushButton(parent=parent)\nself.method_role = role\nself.btn.hide()\nself.is_one_cell_edit_mode = False\nself.current_edited_index = QtCore.QModelIndex()\nparent.entered.connect(self.cell_entered)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.cell_entered","title":"<code>cell_entered(index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def cell_entered(self, index):\n# index = self.parent().indexFromItem(item)\nif self.parent().isPersistentEditorOpen(index):\nself.parent().closePersistentEditor(self.current_edited_index)\nif self.parent().itemDelegateForIndex(index) is self:\n# if index.data(self.method_role) is not None:\nself.parent().openPersistentEditor(index)\nself.parent().setCurrentIndex(index)\nself.is_one_cell_edit_mode = True\nself.current_edited_index = index\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.createEditor","title":"<code>createEditor(parent, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def createEditor(self, parent, option, index):\nbtn_callback = index.data(self.method_role)\nif btn_callback is None:\nreturn\nreturn widgets.PushButton(parent=parent, text=index.data(), clicked=btn_callback)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.paint","title":"<code>paint(painter, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def paint(self, painter, option, index):\nif index.data(self.method_role) is None:\nsuper().paint(painter, option, index)\nreturn\nself.btn.setGeometry(option.rect)\nself.btn.setText(index.data())\nif option.state &amp; widgets.Style.StateFlag.State_MouseOver:\npainter.fillRect(option.rect, option.palette.highlight())\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\npainter.fillRect(option.rect, option.palette.highlight())\npixmap = self.btn.grab()\npainter.drawPixmap(option.rect, pixmap)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.setEditorData","title":"<code>setEditorData(editor, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def setEditorData(self, editor, index):\npass\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.setModelData","title":"<code>setModelData(editor, model, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def setModelData(self, editor, model, index):\npass\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.buttondelegate.ButtonDelegate.updateEditorGeometry","title":"<code>updateEditorGeometry(editor, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\buttondelegate.py</code> <pre><code>def updateEditorGeometry(self, editor, option, index):\neditor.setGeometry(option.rect)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.HtmlItemDelegate","title":"<code>HtmlItemDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate do display HTML text.</p> <p>An alternative approach would be go grab a pixmal from a QLabel for painting. (see ButtonDelegate)</p> Source code in <code>prettyqt\\custom_delegates\\htmlitemdelegate.py</code> <pre><code>class HtmlItemDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate do display HTML text.\n    An alternative approach would be go grab a pixmal from a QLabel for painting.\n    (see ButtonDelegate)\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.doc = gui.TextDocument()\nself.text_option = gui.TextOption()\nself.text_option.setWrapMode(gui.TextOption.WrapMode.NoWrap)\nself.doc.setDefaultTextOption(self.text_option)\nself.doc.setDocumentMargin(0)\ndef paint(self, painter, option, index):\npainter.save()\noption = widgets.StyleOptionViewItem(option)\nself.initStyleOption(option, index)\nself.prepare_doc(option)\n# draw everything without text\noption.text = \"\"\noption.widget.style().drawControl(\nQtWidgets.QStyle.ControlElement.CE_ItemViewItem, option, painter\n)\n# now we find position of our label and display our TextDocument there.\nicon_size = option.icon.actualSize(option.decorationSize)\nmargin = icon_size.width()\npainter.translate(option.rect.left() + margin, option.rect.top())\nclip = QtCore.QRectF(0, 0, option.rect.width() + margin, option.rect.height())\nself.doc.drawContents(painter, clip)\npainter.restore()\ndef sizeHint(self, option, index):\noption = widgets.StyleOptionViewItem(option)\nself.initStyleOption(option, index)\nself.prepare_doc(option)\nreturn QtCore.QSize(int(self.doc.idealWidth()), int(self.doc.size().height()))\ndef prepare_doc(self, option: QtWidgets.QStyleOptionViewItem):\nself.text_option.setAlignment(option.displayAlignment)\nself.doc.setDefaultFont(option.font)\nself.doc.setHtml(option.text)\n# self.doc.setTextWidth(option.rect.width())\nself.doc.setPageSize(QtCore.QSizeF(option.rect.width(), option.rect.height()))\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.doc","title":"<code>doc = gui.TextDocument()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.text_option","title":"<code>text_option = gui.TextOption()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\htmlitemdelegate.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.doc = gui.TextDocument()\nself.text_option = gui.TextOption()\nself.text_option.setWrapMode(gui.TextOption.WrapMode.NoWrap)\nself.doc.setDefaultTextOption(self.text_option)\nself.doc.setDocumentMargin(0)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.paint","title":"<code>paint(painter, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\htmlitemdelegate.py</code> <pre><code>def paint(self, painter, option, index):\npainter.save()\noption = widgets.StyleOptionViewItem(option)\nself.initStyleOption(option, index)\nself.prepare_doc(option)\n# draw everything without text\noption.text = \"\"\noption.widget.style().drawControl(\nQtWidgets.QStyle.ControlElement.CE_ItemViewItem, option, painter\n)\n# now we find position of our label and display our TextDocument there.\nicon_size = option.icon.actualSize(option.decorationSize)\nmargin = icon_size.width()\npainter.translate(option.rect.left() + margin, option.rect.top())\nclip = QtCore.QRectF(0, 0, option.rect.width() + margin, option.rect.height())\nself.doc.drawContents(painter, clip)\npainter.restore()\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.prepare_doc","title":"<code>prepare_doc(option: QtWidgets.QStyleOptionViewItem)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\htmlitemdelegate.py</code> <pre><code>def prepare_doc(self, option: QtWidgets.QStyleOptionViewItem):\nself.text_option.setAlignment(option.displayAlignment)\nself.doc.setDefaultFont(option.font)\nself.doc.setHtml(option.text)\n# self.doc.setTextWidth(option.rect.width())\nself.doc.setPageSize(QtCore.QSizeF(option.rect.width(), option.rect.height()))\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.htmlitemdelegate.HtmlItemDelegate.sizeHint","title":"<code>sizeHint(option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\htmlitemdelegate.py</code> <pre><code>def sizeHint(self, option, index):\noption = widgets.StyleOptionViewItem(option)\nself.initStyleOption(option, index)\nself.prepare_doc(option)\nreturn QtCore.QSize(int(self.doc.idealWidth()), int(self.doc.size().height()))\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.IconDelegate","title":"<code>IconDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\icondelegate.py</code> <pre><code>class IconDelegate(widgets.StyledItemDelegate):\ndef __init__(\nself,\nicon_role: QtCore.Qt.ItemDataRole = constants.USER_ROLE,\nparent: QtWidgets.QAbstractItemView | None = None,\n):\nsuper().__init__(parent)\nself.icon_role = icon_role\nself.margin = 10\ndef paint(\nself,\npainter: QtGui.QPainter,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n):\n\"\"\"Override to paint an icon based on given Pixmap / Color / Icon.\n        Pixmap / Color / Icon must be set to 'icon_role'\n        Args:\n            painter (QtGui.QPainter): painter to paint the icon\n            option (QtWidgets.QStyleOptionViewItem): state of the item to be displayed\n            index (QtCore.QModelIndex): index which gets decorated\n        \"\"\"\nsuper().paint(painter, option, index)\nvalue = index.data(self.icon_role)\nif not value:\nreturn\nmode = gui.Icon.Mode.Normal\nif not option.state &amp; widgets.Style.StateFlag.State_Enabled:\nmode = gui.Icon.Mode.Disabled\nelif option.state &amp; widgets.Style.StateFlag.State_Selected:\nmode = gui.Icon.Mode.Selected\nmatch value:\ncase QtGui.QPixmap():\nicon = QtGui.QIcon(value)\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase QtGui.QColor():\npixmap = QtGui.QPixmap(option.decorationSize)\npixmap.fill(value)\nicon = QtGui.QIcon(pixmap)\ncase QtGui.QImage():\nicon = QtGui.QIcon(QtGui.QPixmap.fromImage(value))\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase QtGui.QIcon():\nicon = value\nis_on = option.state &amp; widgets.Style.StateFlag.State_Open\nstate = gui.Icon.State.On if is_on else gui.Icon.State.Off\nactual_size = option.icon.actualSize(option.decorationSize, mode, state)\noption.decorationSize.boundedTo(actual_size)\ncase _:\nraise ValueError(value)\nr = core.Rect(core.Point(), option.decorationSize)\nr.moveCenter(option.rect.center())\nr.setRight(option.rect.right() - self.margin)\nstate = (\ngui.Icon.State.On\nif option.state &amp; widgets.Style.StateFlag.State_Open\nelse gui.Icon.State.Off\n)\nalignment = constants.ALIGN_RIGHT | constants.ALIGN_V_CENTER\nicon.paint(painter, r, alignment, mode, state)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.icondelegate.IconDelegate.icon_role","title":"<code>icon_role = icon_role</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.icondelegate.IconDelegate.margin","title":"<code>margin = 10</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.icondelegate.IconDelegate.__init__","title":"<code>__init__(icon_role: QtCore.Qt.ItemDataRole = constants.USER_ROLE, parent: QtWidgets.QAbstractItemView | None = None)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\icondelegate.py</code> <pre><code>def __init__(\nself,\nicon_role: QtCore.Qt.ItemDataRole = constants.USER_ROLE,\nparent: QtWidgets.QAbstractItemView | None = None,\n):\nsuper().__init__(parent)\nself.icon_role = icon_role\nself.margin = 10\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.icondelegate.IconDelegate.paint","title":"<code>paint(painter: QtGui.QPainter, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex)</code>","text":"<p>Override to paint an icon based on given Pixmap / Color / Icon.</p> <p>Pixmap / Color / Icon must be set to 'icon_role'</p> <p>Parameters:</p> Name Type Description Default <code>painter</code> <code>QtGui.QPainter</code> <p>painter to paint the icon</p> required <code>option</code> <code>QtWidgets.QStyleOptionViewItem</code> <p>state of the item to be displayed</p> required <code>index</code> <code>QtCore.QModelIndex</code> <p>index which gets decorated</p> required Source code in <code>prettyqt\\custom_delegates\\icondelegate.py</code> <pre><code>def paint(\nself,\npainter: QtGui.QPainter,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n):\n\"\"\"Override to paint an icon based on given Pixmap / Color / Icon.\n    Pixmap / Color / Icon must be set to 'icon_role'\n    Args:\n        painter (QtGui.QPainter): painter to paint the icon\n        option (QtWidgets.QStyleOptionViewItem): state of the item to be displayed\n        index (QtCore.QModelIndex): index which gets decorated\n    \"\"\"\nsuper().paint(painter, option, index)\nvalue = index.data(self.icon_role)\nif not value:\nreturn\nmode = gui.Icon.Mode.Normal\nif not option.state &amp; widgets.Style.StateFlag.State_Enabled:\nmode = gui.Icon.Mode.Disabled\nelif option.state &amp; widgets.Style.StateFlag.State_Selected:\nmode = gui.Icon.Mode.Selected\nmatch value:\ncase QtGui.QPixmap():\nicon = QtGui.QIcon(value)\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase QtGui.QColor():\npixmap = QtGui.QPixmap(option.decorationSize)\npixmap.fill(value)\nicon = QtGui.QIcon(pixmap)\ncase QtGui.QImage():\nicon = QtGui.QIcon(QtGui.QPixmap.fromImage(value))\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase QtGui.QIcon():\nicon = value\nis_on = option.state &amp; widgets.Style.StateFlag.State_Open\nstate = gui.Icon.State.On if is_on else gui.Icon.State.Off\nactual_size = option.icon.actualSize(option.decorationSize, mode, state)\noption.decorationSize.boundedTo(actual_size)\ncase _:\nraise ValueError(value)\nr = core.Rect(core.Point(), option.decorationSize)\nr.moveCenter(option.rect.center())\nr.setRight(option.rect.right() - self.margin)\nstate = (\ngui.Icon.State.On\nif option.state &amp; widgets.Style.StateFlag.State_Open\nelse gui.Icon.State.Off\n)\nalignment = constants.ALIGN_RIGHT | constants.ALIGN_V_CENTER\nicon.paint(painter, r, alignment, mode, state)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.NoFocusDelegate","title":"<code>NoFocusDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\nofocusdelegate.py</code> <pre><code>class NoFocusDelegate(widgets.StyledItemDelegate):\ndef paint(\nself,\npainter: QtGui.QPainter,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n):\nif option.state &amp; widgets.Style.StateFlag.State_HasFocus:\noption.state = option.state ^ widgets.Style.StateFlag.State_HasFocus\nsuper().paint(painter, option, index)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.nofocusdelegate.NoFocusDelegate.paint","title":"<code>paint(painter: QtGui.QPainter, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\nofocusdelegate.py</code> <pre><code>def paint(\nself,\npainter: QtGui.QPainter,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n):\nif option.state &amp; widgets.Style.StateFlag.State_HasFocus:\noption.state = option.state ^ widgets.Style.StateFlag.State_HasFocus\nsuper().paint(painter, option, index)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.ProgressBarDelegate","title":"<code>ProgressBarDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\progressbardelegate.py</code> <pre><code>class ProgressBarDelegate(widgets.StyledItemDelegate):\ndef paint(self, painter, option, index):\nprogress = index.data()\nopt = widgets.StyleOptionProgressBar()\nopt.rect = option.rect\nopt.minimum = 0\nopt.maximum = 100\nopt.progress = progress\nopt.text = f\"{progress}%\"\nopt.textVisible = True\nopt.state |= widgets.Style.StateFlag.State_Horizontal\nwidgets.Application.style().drawControl(\nwidgets.Style.ControlElement.CE_ProgressBar, opt, painter\n)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.progressbardelegate.ProgressBarDelegate.paint","title":"<code>paint(painter, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\progressbardelegate.py</code> <pre><code>def paint(self, painter, option, index):\nprogress = index.data()\nopt = widgets.StyleOptionProgressBar()\nopt.rect = option.rect\nopt.minimum = 0\nopt.maximum = 100\nopt.progress = progress\nopt.text = f\"{progress}%\"\nopt.textVisible = True\nopt.state |= widgets.Style.StateFlag.State_Horizontal\nwidgets.Application.style().drawControl(\nwidgets.Style.ControlElement.CE_ProgressBar, opt, painter\n)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.RadioDelegate","title":"<code>RadioDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>class RadioDelegate(widgets.StyledItemDelegate):\ndef __init__(self, parent: QtWidgets.QWidget, items: list[str]):\nsuper().__init__(parent)\nself.items = items\nself.choices: list[int | None] = [None for _ in self.items]\ndef createEditor(\nself,\nparent: QtWidgets.QWidget,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n) -&gt; widgets.Widget:\neditor = widgets.Widget(parent)\neditor.set_margin(0)\neditor.setAutoFillBackground(True)\n# create a button group to keep track of the checked radio\neditor.button_group = widgets.ButtonGroup()\n# adding the widget as an argument to the layout constructor automatically\n# applies it to the widget\nlayout = widgets.HBoxLayout(editor)\nlayout.set_margin(0)\nfor i, k in enumerate(self.items):\nrb = widgets.RadioButton(k)\nlayout.addWidget(rb)\n# prevent the radio to get focus from keyboard or mouse\nrb.set_focus_policy(\"none\")\nrb.installEventFilter(self)\neditor.button_group.addButton(rb, i)\n# add a stretch to always align contents to the left\nlayout.addStretch(1)\n# set a property that will be used for the mask\neditor.setProperty(\"offMask\", gui.Region(editor.rect()))  # type: ignore\neditor.installEventFilter(self)\nreturn editor\ndef eventFilter(self, source: QtCore.QObject, event: QtCore.QEvent) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.MouseButtonPress:\nif isinstance(source, QtWidgets.QRadioButton):\nif not source.parent().hasFocus():\n# the parent has no focus, set it and ignore the click\nsource.parent().setFocus()\nreturn True\nelif not source.hasFocus():\n# the container has been clicked, check\nsource.setFocus()\ncase core.Event.Type.FocusIn:\n# event received as a consequence of setFocus\n# clear the mask to show it completely\nsource.clearMask()\ncase core.Event.Type.FocusOut:\n# another widget has requested focus, set the mask\nsource.setMask(source.property(\"offMask\"))\n# update the table viewport to get rid of possible\n# grid lines left after masking\nsource.parent().update()\nreturn super().eventFilter(source, event)\ndef updateEditorGeometry(\nself,\neditor: QtWidgets.QWidget,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n):\nrect = core.Rect(option.rect)\nmin_width = editor.minimumSizeHint().width()\nif rect.width() &lt; min_width:\nrect.setWidth(min_width)\neditor.setGeometry(rect)\n# create a new mask based on the option rectangle, then apply it\nmask = gui.Region(0, 0, option.rect.width(), option.rect.height())\neditor.setProperty(\"offMask\", mask)  # type: ignore\neditor.setMask(mask)\ndef setEditorData(self, editor: QtWidgets.QWidget, index: QtCore.QModelIndex):\nvalue = index.data(constants.DISPLAY_ROLE)  # type: ignore\nif value in self.items:\neditor.button_group.button(self.items.index(value)).setChecked(True)\ndef setModelData(\nself,\neditor: QtWidgets.QWidget,\nmodel: QtCore.QAbstractItemModel,\nindex: QtCore.QModelIndex,\n):\nbutton = editor.button_group.checkedId()\nif button &gt;= 0:\nmodel.setData(\nindex, self.items[button], constants.DISPLAY_ROLE  # type: ignore\n)\nself.choices[button] = index.row()\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.choices","title":"<code>choices: list[int | None] = [None for _ in self.items]</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.items","title":"<code>items = items</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.__init__","title":"<code>__init__(parent: QtWidgets.QWidget, items: list[str])</code>","text":"Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget, items: list[str]):\nsuper().__init__(parent)\nself.items = items\nself.choices: list[int | None] = [None for _ in self.items]\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.createEditor","title":"<code>createEditor(parent: QtWidgets.QWidget, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex) -&gt; widgets.Widget</code>","text":"Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>def createEditor(\nself,\nparent: QtWidgets.QWidget,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n) -&gt; widgets.Widget:\neditor = widgets.Widget(parent)\neditor.set_margin(0)\neditor.setAutoFillBackground(True)\n# create a button group to keep track of the checked radio\neditor.button_group = widgets.ButtonGroup()\n# adding the widget as an argument to the layout constructor automatically\n# applies it to the widget\nlayout = widgets.HBoxLayout(editor)\nlayout.set_margin(0)\nfor i, k in enumerate(self.items):\nrb = widgets.RadioButton(k)\nlayout.addWidget(rb)\n# prevent the radio to get focus from keyboard or mouse\nrb.set_focus_policy(\"none\")\nrb.installEventFilter(self)\neditor.button_group.addButton(rb, i)\n# add a stretch to always align contents to the left\nlayout.addStretch(1)\n# set a property that will be used for the mask\neditor.setProperty(\"offMask\", gui.Region(editor.rect()))  # type: ignore\neditor.installEventFilter(self)\nreturn editor\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.eventFilter","title":"<code>eventFilter(source: QtCore.QObject, event: QtCore.QEvent) -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>def eventFilter(self, source: QtCore.QObject, event: QtCore.QEvent) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.MouseButtonPress:\nif isinstance(source, QtWidgets.QRadioButton):\nif not source.parent().hasFocus():\n# the parent has no focus, set it and ignore the click\nsource.parent().setFocus()\nreturn True\nelif not source.hasFocus():\n# the container has been clicked, check\nsource.setFocus()\ncase core.Event.Type.FocusIn:\n# event received as a consequence of setFocus\n# clear the mask to show it completely\nsource.clearMask()\ncase core.Event.Type.FocusOut:\n# another widget has requested focus, set the mask\nsource.setMask(source.property(\"offMask\"))\n# update the table viewport to get rid of possible\n# grid lines left after masking\nsource.parent().update()\nreturn super().eventFilter(source, event)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.setEditorData","title":"<code>setEditorData(editor: QtWidgets.QWidget, index: QtCore.QModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>def setEditorData(self, editor: QtWidgets.QWidget, index: QtCore.QModelIndex):\nvalue = index.data(constants.DISPLAY_ROLE)  # type: ignore\nif value in self.items:\neditor.button_group.button(self.items.index(value)).setChecked(True)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.setModelData","title":"<code>setModelData(editor: QtWidgets.QWidget, model: QtCore.QAbstractItemModel, index: QtCore.QModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>def setModelData(\nself,\neditor: QtWidgets.QWidget,\nmodel: QtCore.QAbstractItemModel,\nindex: QtCore.QModelIndex,\n):\nbutton = editor.button_group.checkedId()\nif button &gt;= 0:\nmodel.setData(\nindex, self.items[button], constants.DISPLAY_ROLE  # type: ignore\n)\nself.choices[button] = index.row()\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.radiodelegate.RadioDelegate.updateEditorGeometry","title":"<code>updateEditorGeometry(editor: QtWidgets.QWidget, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\radiodelegate.py</code> <pre><code>def updateEditorGeometry(\nself,\neditor: QtWidgets.QWidget,\noption: QtWidgets.QStyleOptionViewItem,\nindex: QtCore.QModelIndex,\n):\nrect = core.Rect(option.rect)\nmin_width = editor.minimumSizeHint().width()\nif rect.width() &lt; min_width:\nrect.setWidth(min_width)\neditor.setGeometry(rect)\n# create a new mask based on the option rectangle, then apply it\nmask = gui.Region(0, 0, option.rect.width(), option.rect.height())\neditor.setProperty(\"offMask\", mask)  # type: ignore\neditor.setMask(mask)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.RenderLinkDelegate","title":"<code>RenderLinkDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\custom_delegates\\renderlinkdelegate.py</code> <pre><code>class RenderLinkDelegate(widgets.StyledItemDelegate):\ndef paint(self, painter, option, index):\ntext = index.data()\nif not text:\nreturn\npainter.save()\n# I only wanted it for mouse over, but you'll probably want to remove\n# this condition\nif option.state and widgets.Style.StateFlag.State_MouseOver:\nfont = option.font\nfont.setUnderline(True)\npainter.setFont(font)\npainter.setPen(option.palette.link().color())\npainter.drawText(\noption.rect.toRectF(),\nconstants.ALIGN_CENTER_LEFT,\ntext,\n)\npainter.restore()\ndef editorEvent(self, event, model, option, index):\ntext = index.data()\nfont = index.data(constants.FONT_ROLE)\n# alignment = index.data(constants.ALIGNMENT_ROLE)\nif font is None:\nfont = gui.GuiApplication.get_font()\nfm = gui.FontMetricsF(font)\nrect = fm.get_bounding_rect(\ncore.RectF(option.rect),\nconstants.ALIGN_CENTER_LEFT,\ntext,\n)\nif (\nevent.type() == QtCore.QEvent.Type.MouseButtonPress\nand event.button() == QtCore.Qt.MouseButton.LeftButton\nand event.position() in rect\n):\ntext = index.data()\ngui.DesktopServices.open_url(text)\nreturn True\nreturn False\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.renderlinkdelegate.RenderLinkDelegate.editorEvent","title":"<code>editorEvent(event, model, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\renderlinkdelegate.py</code> <pre><code>def editorEvent(self, event, model, option, index):\ntext = index.data()\nfont = index.data(constants.FONT_ROLE)\n# alignment = index.data(constants.ALIGNMENT_ROLE)\nif font is None:\nfont = gui.GuiApplication.get_font()\nfm = gui.FontMetricsF(font)\nrect = fm.get_bounding_rect(\ncore.RectF(option.rect),\nconstants.ALIGN_CENTER_LEFT,\ntext,\n)\nif (\nevent.type() == QtCore.QEvent.Type.MouseButtonPress\nand event.button() == QtCore.Qt.MouseButton.LeftButton\nand event.position() in rect\n):\ntext = index.data()\ngui.DesktopServices.open_url(text)\nreturn True\nreturn False\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.renderlinkdelegate.RenderLinkDelegate.paint","title":"<code>paint(painter, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\renderlinkdelegate.py</code> <pre><code>def paint(self, painter, option, index):\ntext = index.data()\nif not text:\nreturn\npainter.save()\n# I only wanted it for mouse over, but you'll probably want to remove\n# this condition\nif option.state and widgets.Style.StateFlag.State_MouseOver:\nfont = option.font\nfont.setUnderline(True)\npainter.setFont(font)\npainter.setPen(option.palette.link().color())\npainter.drawText(\noption.rect.toRectF(),\nconstants.ALIGN_CENTER_LEFT,\ntext,\n)\npainter.restore()\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.StarDelegate","title":"<code>StarDelegate</code>","text":"<p>         Bases: <code>widgets.StyledItemDelegate</code></p> <p>A delegate class that allows us to render our star ratings.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>class StarDelegate(widgets.StyledItemDelegate):\n\"\"\"A delegate class that allows us to render our star ratings.\"\"\"\ndef paint(self, painter, option, index):\nstar_rating = StarRating(index.data())\n# If the row is currently selected, we need to make sure we\n# paint the background accordingly.\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\n# The original C++ example used option.palette.foreground() to\n# get the brush for painting, but there are a couple of\n# problems with that:\n#   - foreground() is obsolete now, use windowText() instead\n#   - more importantly, windowText() just returns a brush\n#     containing a flat color, where sometimes the style\n#     would have a nice subtle gradient or something.\n# Here we just use the brush of the painter object that's\n# passed in to us, which keeps the row highlighting nice\n# and consistent.\npainter.fillRect(option.rect, painter.brush())\n# Now that we've painted the background, call star_rating.paint()\n# to paint the stars.\nstar_rating.paint(painter, option.rect, option.palette)\ndef sizeHint(self, option, index):\n\"\"\"Return the size needed to display the item in a QSize object.\"\"\"\nstar_rating = StarRating(index.data())\nreturn star_rating.sizeHint()\n# The next 4 methods handle the custom editing that we need to do.\n# If this were just a display delegate, paint() and sizeHint() would\n# be all we needed.\ndef createEditor(self, parent, option, index):\n\"\"\"Create and return the StarEditor object we'll use to edit the StarRating.\"\"\"\neditor = StarEditor(parent)\neditor.editing_finished.connect(self.commitAndCloseEditor)\nreturn editor\ndef setEditorData(self, editor, index):\n\"\"\"Set the data to be displayed and edited by our custom editor.\"\"\"\neditor.set_star_rating(index.data())\ndef setModelData(self, editor, model, index):\n\"\"\"Get the data from our custom editor and stuffs it into the model.\"\"\"\nmodel.setData(index, editor.star_rating.star_count)\ndef commitAndCloseEditor(self):\neditor = self.sender()\n# The commitData signal must be emitted when we've finished editing\n# and need to write our changed back to the model.\nself.commitData.emit(editor)\nself.closeEditor.emit(editor, self.EndEditHint.NoHint)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.commitAndCloseEditor","title":"<code>commitAndCloseEditor()</code>","text":"Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def commitAndCloseEditor(self):\neditor = self.sender()\n# The commitData signal must be emitted when we've finished editing\n# and need to write our changed back to the model.\nself.commitData.emit(editor)\nself.closeEditor.emit(editor, self.EndEditHint.NoHint)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.createEditor","title":"<code>createEditor(parent, option, index)</code>","text":"<p>Create and return the StarEditor object we'll use to edit the StarRating.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def createEditor(self, parent, option, index):\n\"\"\"Create and return the StarEditor object we'll use to edit the StarRating.\"\"\"\neditor = StarEditor(parent)\neditor.editing_finished.connect(self.commitAndCloseEditor)\nreturn editor\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.paint","title":"<code>paint(painter, option, index)</code>","text":"Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def paint(self, painter, option, index):\nstar_rating = StarRating(index.data())\n# If the row is currently selected, we need to make sure we\n# paint the background accordingly.\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\n# The original C++ example used option.palette.foreground() to\n# get the brush for painting, but there are a couple of\n# problems with that:\n#   - foreground() is obsolete now, use windowText() instead\n#   - more importantly, windowText() just returns a brush\n#     containing a flat color, where sometimes the style\n#     would have a nice subtle gradient or something.\n# Here we just use the brush of the painter object that's\n# passed in to us, which keeps the row highlighting nice\n# and consistent.\npainter.fillRect(option.rect, painter.brush())\n# Now that we've painted the background, call star_rating.paint()\n# to paint the stars.\nstar_rating.paint(painter, option.rect, option.palette)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.setEditorData","title":"<code>setEditorData(editor, index)</code>","text":"<p>Set the data to be displayed and edited by our custom editor.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def setEditorData(self, editor, index):\n\"\"\"Set the data to be displayed and edited by our custom editor.\"\"\"\neditor.set_star_rating(index.data())\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.setModelData","title":"<code>setModelData(editor, model, index)</code>","text":"<p>Get the data from our custom editor and stuffs it into the model.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def setModelData(self, editor, model, index):\n\"\"\"Get the data from our custom editor and stuffs it into the model.\"\"\"\nmodel.setData(index, editor.star_rating.star_count)\n</code></pre>"},{"location":"api/custom_delegates.html#prettyqt.custom_delegates.stardelegate.StarDelegate.sizeHint","title":"<code>sizeHint(option, index)</code>","text":"<p>Return the size needed to display the item in a QSize object.</p> Source code in <code>prettyqt\\custom_delegates\\stardelegate.py</code> <pre><code>def sizeHint(self, option, index):\n\"\"\"Return the size needed to display the item in a QSize object.\"\"\"\nstar_rating = StarRating(index.data())\nreturn star_rating.sizeHint()\n</code></pre>"},{"location":"api/custom_models.html","title":"custom_models module","text":"<p>Custom_models module.</p> <p>Contains custom models</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.__all__","title":"<code>__all__ = ['SelectionMixin', 'TreeModel', 'ImportlibDistributionModel', 'RegexMatchesModel', 'ColumnItemModel', 'ColumnTableModel', 'ListMixin', 'ModelMixin', 'ColumnItem', 'NestedModel', 'NestedItem', 'JsonModel', 'SubsequenceSortFilterProxyModel', 'FuzzyFilterProxyModel']</code>  <code>module-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnItem","title":"<code>ColumnItem</code>  <code>dataclass</code>","text":"<p>Determines how an object attribute is shown.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>@dataclass  # (frozen=True)\nclass ColumnItem:\n\"\"\"Determines how an object attribute is shown.\"\"\"\nname: str\nlabel: Callable[[treeitem.TreeItem], str] | None = None\ncheckstate: Callable[\n[treeitem.TreeItem], constants.StateStr | QtCore.Qt.CheckState | bool\n] | None = None\nsort_value: Callable[[treeitem.TreeItem], str | float] | None = None\ntooltip: Callable[[treeitem.TreeItem], str] | None = None\ndoc: str = \"&lt;no help available&gt;\"\ncol_visible: bool = True\nwidth: int | str = SMALL_COL_WIDTH\nalignment: Callable | int | constants.AlignmentStr | None = None\nline_wrap: gui.textoption.WordWrapModeStr = \"none\"\nforeground_color: Callable | str | None = None\nbackground_color: Callable | str | None = None\ndecoration: Callable | QtGui.QIcon | None = None\nfont: Callable | QtGui.QFont | None = None\nselectable: bool = True\nenabled: bool = True\neditable: bool = False\ncheckable: bool = False\ntristate: bool = False\nset_edit: Callable | None = None\nset_checkstate: Callable | None = None\nuser_data: dict | Callable | None = None\ndef __post_init__(self):\nsuper().__init__()\nself.model = None\ndef get_name(self) -&gt; str:\nreturn self.name\ndef get_flag(self, tree_item):\nflag = constants.NO_FLAGS\nif self.selectable:\nflag |= constants.IS_SELECTABLE  # type: ignore\nif self.enabled:\nflag |= constants.IS_ENABLED  # type: ignore\nif self.editable:\nflag |= constants.IS_EDITABLE  # type: ignore\nif self.checkable:\nflag |= constants.IS_CHECKABLE  # type: ignore\nif self.tristate:\nflag |= constants.IS_USER_TRISTATE  # type: ignore\nreturn flag\ndef get_label(self, tree_item) -&gt; str:\nif self.label is None:\nreturn \"\"\nelif callable(self.label):\nreturn self.label(tree_item)\nreturn self.label\ndef get_sort_value(self, tree_item) -&gt; str | int:\nif self.sort_value is None:\nreturn self.get_label(tree_item)\nelif callable(self.sort_value):\nreturn self.sort_value(tree_item)\nreturn self.sort_value\ndef get_user_data(self, tree_item, role):\nif self.user_data is None:\nreturn \"\"\nelif callable(self.user_data):\nreturn self.user_data(tree_item, role)\nreturn self.user_data[role](tree_item)\ndef get_tooltip(self, tree_item) -&gt; str:\nif self.tooltip is None:\nreturn \"\"\nelif callable(self.tooltip):\nreturn self.tooltip(tree_item)\nreturn self.tooltip\ndef get_checkstate(self, tree_item) -&gt; bool | QtCore.Qt.CheckState | None:\nif self.checkstate is None:\nreturn None\nelif callable(self.checkstate):\nresult = self.checkstate(tree_item)\nif isinstance(result, str):\nresult = constants.STATE[result]\nreturn result\nreturn self.checkstate\ndef set_checkstate_value(\nself, tree_item, value: bool | QtCore.Qt.CheckState | constants.StateStr | None\n):\nif self.set_checkstate is None:\nreturn None\nif isinstance(value, str):\nvalue = constants.STATE[value]\nif callable(self.set_checkstate):\nself.set_checkstate(tree_item, value)\nelse:\nraise ValueError(self.set_checkstate)\ndef set_edit_value(self, tree_item, value: str):\nif self.set_edit is None:\nreturn None\nif callable(self.set_edit):\nself.set_edit(tree_item, value)\nelse:\nraise ValueError(self.set_edit)\ndef get_font(self, tree_item) -&gt; QtGui.QFont | None:\nif self.font is None:\nreturn None\nelif callable(self.font):\nreturn self.font(tree_item)\nreturn self.font\ndef get_foreground_color(self, tree_item) -&gt; QtGui.QColor | None:\nif self.foreground_color is None:\nreturn None\nelif callable(self.foreground_color):\nreturn self.foreground_color(tree_item)\nreturn self.foreground_color\ndef get_background_color(self, tree_item) -&gt; QtGui.QColor | None:\nif self.background_color is None:\nreturn None\nelif callable(self.background_color):\nreturn self.background_color(tree_item)\nreturn self.background_color\ndef get_decoration(\nself, tree_item\n) -&gt; QtGui.QColor | QtGui.QPixmap | QtGui.QIcon | None:\nif self.decoration is None:\nreturn None\nelif callable(self.decoration):\nreturn self.decoration(tree_item)\nreturn self.decoration\ndef get_alignment(self, tree_item) -&gt; QtCore.Qt.AlignmentFlag:\nif self.alignment is None:\nreturn constants.ALIGN_CENTER_LEFT\nelif callable(self.alignment):\nreturn self.alignment(tree_item)\nelif isinstance(self.alignment, str):\nreturn constants.ALIGNMENTS[self.alignment]\nreturn self.alignment\ndef get_width(self) -&gt; int:\nmatch self.width:\ncase \"small\":\nreturn SMALL_COL_WIDTH\ncase \"medium\":\nreturn MEDIUM_COL_WIDTH\ncase int():\nreturn self.width\ncase _:\nraise ValueError(self.width)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.alignment","title":"<code>alignment: Callable | int | constants.AlignmentStr | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.background_color","title":"<code>background_color: Callable | str | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.checkable","title":"<code>checkable: bool = False</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.checkstate","title":"<code>checkstate: Callable[[treeitem.TreeItem], constants.StateStr | QtCore.Qt.CheckState | bool] | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.col_visible","title":"<code>col_visible: bool = True</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.decoration","title":"<code>decoration: Callable | QtGui.QIcon | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.doc","title":"<code>doc: str = '&lt;no help available&gt;'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.editable","title":"<code>editable: bool = False</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.enabled","title":"<code>enabled: bool = True</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.font","title":"<code>font: Callable | QtGui.QFont | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.foreground_color","title":"<code>foreground_color: Callable | str | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.label","title":"<code>label: Callable[[treeitem.TreeItem], str] | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.line_wrap","title":"<code>line_wrap: gui.textoption.WordWrapModeStr = 'none'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.selectable","title":"<code>selectable: bool = True</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.set_checkstate","title":"<code>set_checkstate: Callable | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.set_edit","title":"<code>set_edit: Callable | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.sort_value","title":"<code>sort_value: Callable[[treeitem.TreeItem], str | float] | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.tooltip","title":"<code>tooltip: Callable[[treeitem.TreeItem], str] | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.tristate","title":"<code>tristate: bool = False</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.user_data","title":"<code>user_data: dict | Callable | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.width","title":"<code>width: int | str = SMALL_COL_WIDTH</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.__post_init__","title":"<code>__post_init__()</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def __post_init__(self):\nsuper().__init__()\nself.model = None\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_alignment","title":"<code>get_alignment(tree_item) -&gt; QtCore.Qt.AlignmentFlag</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_alignment(self, tree_item) -&gt; QtCore.Qt.AlignmentFlag:\nif self.alignment is None:\nreturn constants.ALIGN_CENTER_LEFT\nelif callable(self.alignment):\nreturn self.alignment(tree_item)\nelif isinstance(self.alignment, str):\nreturn constants.ALIGNMENTS[self.alignment]\nreturn self.alignment\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_background_color","title":"<code>get_background_color(tree_item) -&gt; QtGui.QColor | None</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_background_color(self, tree_item) -&gt; QtGui.QColor | None:\nif self.background_color is None:\nreturn None\nelif callable(self.background_color):\nreturn self.background_color(tree_item)\nreturn self.background_color\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_checkstate","title":"<code>get_checkstate(tree_item) -&gt; bool | QtCore.Qt.CheckState | None</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_checkstate(self, tree_item) -&gt; bool | QtCore.Qt.CheckState | None:\nif self.checkstate is None:\nreturn None\nelif callable(self.checkstate):\nresult = self.checkstate(tree_item)\nif isinstance(result, str):\nresult = constants.STATE[result]\nreturn result\nreturn self.checkstate\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_decoration","title":"<code>get_decoration(tree_item) -&gt; QtGui.QColor | QtGui.QPixmap | QtGui.QIcon | None</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_decoration(\nself, tree_item\n) -&gt; QtGui.QColor | QtGui.QPixmap | QtGui.QIcon | None:\nif self.decoration is None:\nreturn None\nelif callable(self.decoration):\nreturn self.decoration(tree_item)\nreturn self.decoration\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_flag","title":"<code>get_flag(tree_item)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_flag(self, tree_item):\nflag = constants.NO_FLAGS\nif self.selectable:\nflag |= constants.IS_SELECTABLE  # type: ignore\nif self.enabled:\nflag |= constants.IS_ENABLED  # type: ignore\nif self.editable:\nflag |= constants.IS_EDITABLE  # type: ignore\nif self.checkable:\nflag |= constants.IS_CHECKABLE  # type: ignore\nif self.tristate:\nflag |= constants.IS_USER_TRISTATE  # type: ignore\nreturn flag\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_font","title":"<code>get_font(tree_item) -&gt; QtGui.QFont | None</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_font(self, tree_item) -&gt; QtGui.QFont | None:\nif self.font is None:\nreturn None\nelif callable(self.font):\nreturn self.font(tree_item)\nreturn self.font\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_foreground_color","title":"<code>get_foreground_color(tree_item) -&gt; QtGui.QColor | None</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_foreground_color(self, tree_item) -&gt; QtGui.QColor | None:\nif self.foreground_color is None:\nreturn None\nelif callable(self.foreground_color):\nreturn self.foreground_color(tree_item)\nreturn self.foreground_color\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_label","title":"<code>get_label(tree_item) -&gt; str</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_label(self, tree_item) -&gt; str:\nif self.label is None:\nreturn \"\"\nelif callable(self.label):\nreturn self.label(tree_item)\nreturn self.label\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_name","title":"<code>get_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_name(self) -&gt; str:\nreturn self.name\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_sort_value","title":"<code>get_sort_value(tree_item) -&gt; str | int</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_sort_value(self, tree_item) -&gt; str | int:\nif self.sort_value is None:\nreturn self.get_label(tree_item)\nelif callable(self.sort_value):\nreturn self.sort_value(tree_item)\nreturn self.sort_value\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_tooltip","title":"<code>get_tooltip(tree_item) -&gt; str</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_tooltip(self, tree_item) -&gt; str:\nif self.tooltip is None:\nreturn \"\"\nelif callable(self.tooltip):\nreturn self.tooltip(tree_item)\nreturn self.tooltip\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_user_data","title":"<code>get_user_data(tree_item, role)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_user_data(self, tree_item, role):\nif self.user_data is None:\nreturn \"\"\nelif callable(self.user_data):\nreturn self.user_data(tree_item, role)\nreturn self.user_data[role](tree_item)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.get_width","title":"<code>get_width() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def get_width(self) -&gt; int:\nmatch self.width:\ncase \"small\":\nreturn SMALL_COL_WIDTH\ncase \"medium\":\nreturn MEDIUM_COL_WIDTH\ncase int():\nreturn self.width\ncase _:\nraise ValueError(self.width)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.set_checkstate_value","title":"<code>set_checkstate_value(tree_item, value: bool | QtCore.Qt.CheckState | constants.StateStr | None)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def set_checkstate_value(\nself, tree_item, value: bool | QtCore.Qt.CheckState | constants.StateStr | None\n):\nif self.set_checkstate is None:\nreturn None\nif isinstance(value, str):\nvalue = constants.STATE[value]\nif callable(self.set_checkstate):\nself.set_checkstate(tree_item, value)\nelse:\nraise ValueError(self.set_checkstate)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItem.set_edit_value","title":"<code>set_edit_value(tree_item, value: str)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def set_edit_value(self, tree_item, value: str):\nif self.set_edit is None:\nreturn None\nif callable(self.set_edit):\nself.set_edit(tree_item, value)\nelse:\nraise ValueError(self.set_edit)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnItemModel","title":"<code>ColumnItemModel</code>","text":"<p>         Bases: <code>ColumnItemModelMixin</code>, <code>custom_models.TreeModel</code></p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>class ColumnItemModel(ColumnItemModelMixin, custom_models.TreeModel):\ndef __init__(\nself,\nobj,\ncolumns: list[ColumnItem],\nmime_type: str | None = None,\nshow_root: bool = True,\nparent: QtCore.QObject | None = None,\n**kwargs,\n):\nsuper().__init__(parent, **kwargs)\nself._root_item = treeitem.TreeItem(obj=obj)\nself._show_root = show_root\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\nself.set_root_item(obj)\ndef columnCount(self, parent=None):\nreturn len(self._attr_cols)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItemModel.mime_type","title":"<code>mime_type = mime_type</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItemModel.__init__","title":"<code>__init__(obj, columns: list[ColumnItem], mime_type: str | None = None, show_root: bool = True, parent: QtCore.QObject | None = None, **kwargs: QtCore.QObject | None)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def __init__(\nself,\nobj,\ncolumns: list[ColumnItem],\nmime_type: str | None = None,\nshow_root: bool = True,\nparent: QtCore.QObject | None = None,\n**kwargs,\n):\nsuper().__init__(parent, **kwargs)\nself._root_item = treeitem.TreeItem(obj=obj)\nself._show_root = show_root\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\nself.set_root_item(obj)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnItemModel.columnCount","title":"<code>columnCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def columnCount(self, parent=None):\nreturn len(self._attr_cols)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ColumnTableModel","title":"<code>ColumnTableModel</code>","text":"<p>         Bases: <code>ColumnItemModelMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>class ColumnTableModel(ColumnItemModelMixin, core.AbstractTableModel):\ndef __init__(\nself,\nitems: list,\ncolumns: list[ColumnItem],\nmime_type: str | None = None,\nparent: QtCore.QObject | None = None,\n**kwargs,\n):\nsuper().__init__(parent, **kwargs)\nself.items = items\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\ndef rowCount(self, parent=None):\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self.items)\ndef columnCount(self, parent=None):\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self._attr_cols)\ndef data_by_index(self, index: core.ModelIndex):\nreturn self.items[index.row()]\ndef setData(self, index, value, role):\nif role == constants.USER_ROLE:\nself.items[index.row()] = value\nself.update_row(index.row())\nreturn True\nreturn super().setData(index, value, role)  # type: ignore\ndef removeRows(self, row: int, count: int, parent):\nend_row = row + count - 1\nwith self.remove_rows(row, end_row, parent):\nfor i in range(end_row, row - 1, -1):\nself.items.pop(i)\nreturn True\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif not mime_data.hasFormat(self.mime_type):\nreturn False\n# Since we only drop in between items, parent_index must be invalid,\n# and we use the row arg to know where the drop took place.\nif parent_index.isValid():\nreturn False\nindexes = mime_data.get_json_data(self.mime_type)\npos = row if row &lt; len(self.items) and row != -1 else len(self.items)\nrem_offset = sum(i &lt;= pos for i in indexes)\nnew = [self.items[i] for i in indexes]\nwith self.change_layout():\nfor i in sorted(indexes, reverse=True):\nself.items.pop(i)\nfor item in reversed(new):\nself.items.insert(pos - rem_offset, item)\nreturn False\ndef sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self._attr_cols[ncol].label:\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\ndef add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\ndef add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i, _ in enumerate(items):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\ndef remove_items(self, offsets: Iterable[int]):\nfor offset in sorted(offsets, reverse=True):\nself.removeRow(offset)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.items","title":"<code>items = items</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.mime_type","title":"<code>mime_type = mime_type</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.__init__","title":"<code>__init__(items: list, columns: list[ColumnItem], mime_type: str | None = None, parent: QtCore.QObject | None = None, **kwargs: QtCore.QObject | None)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def __init__(\nself,\nitems: list,\ncolumns: list[ColumnItem],\nmime_type: str | None = None,\nparent: QtCore.QObject | None = None,\n**kwargs,\n):\nsuper().__init__(parent, **kwargs)\nself.items = items\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.add","title":"<code>add(item: Any, position: int | None = None)</code>","text":"<p>Append provided item to the list.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.add_items","title":"<code>add_items(items: Iterable[Any], position: int | None = None)</code>","text":"<p>Append a list of items to the list.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i, _ in enumerate(items):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.columnCount","title":"<code>columnCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def columnCount(self, parent=None):\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self._attr_cols)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.data_by_index","title":"<code>data_by_index(index: core.ModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def data_by_index(self, index: core.ModelIndex):\nreturn self.items[index.row()]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.dropMimeData","title":"<code>dropMimeData(mime_data, action, row, column, parent_index)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def dropMimeData(self, mime_data, action, row, column, parent_index):\nif not mime_data.hasFormat(self.mime_type):\nreturn False\n# Since we only drop in between items, parent_index must be invalid,\n# and we use the row arg to know where the drop took place.\nif parent_index.isValid():\nreturn False\nindexes = mime_data.get_json_data(self.mime_type)\npos = row if row &lt; len(self.items) and row != -1 else len(self.items)\nrem_offset = sum(i &lt;= pos for i in indexes)\nnew = [self.items[i] for i in indexes]\nwith self.change_layout():\nfor i in sorted(indexes, reverse=True):\nself.items.pop(i)\nfor item in reversed(new):\nself.items.insert(pos - rem_offset, item)\nreturn False\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.removeRows","title":"<code>removeRows(row: int, count: int, parent: int)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def removeRows(self, row: int, count: int, parent):\nend_row = row + count - 1\nwith self.remove_rows(row, end_row, parent):\nfor i in range(end_row, row - 1, -1):\nself.items.pop(i)\nreturn True\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.remove_items","title":"<code>remove_items(offsets: Iterable[int])</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def remove_items(self, offsets: Iterable[int]):\nfor offset in sorted(offsets, reverse=True):\nself.removeRow(offset)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.rowCount","title":"<code>rowCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def rowCount(self, parent=None):\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self.items)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.setData","title":"<code>setData(index, value, role)</code>","text":"Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def setData(self, index, value, role):\nif role == constants.USER_ROLE:\nself.items[index.row()] = value\nself.update_row(index.row())\nreturn True\nreturn super().setData(index, value, role)  # type: ignore\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.columnitemmodel.ColumnTableModel.sort","title":"<code>sort(ncol: int, order: int)</code>","text":"<p>Sort table by given column number.</p> Source code in <code>prettyqt\\custom_models\\columnitemmodel.py</code> <pre><code>def sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self._attr_cols[ncol].label:\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.FuzzyFilterProxyModel","title":"<code>FuzzyFilterProxyModel</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>Proxy model with fuzzyfilter functionality.</p> <p>this proxymodel replaces the text from the display role in the given filter column with HTML code in order to color the letter matches. A backup from the original text is made available in the BackupRole. Based on the original text, the proxy calculates a score for the match and makes it available via the SortRole. To display the html code properly, a HtmlItemDelegate is needed.</p> Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>class FuzzyFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"Proxy model with fuzzyfilter functionality.\n    this proxymodel replaces the text from the display role in the given filter column\n    with HTML code in order to color the letter matches. A backup from the original text\n    is made available in the BackupRole. Based on the original text, the proxy calculates\n    a score for the match and makes it available via the SortRole.\n    To display the html code properly, a HtmlItemDelegate is needed.\n    \"\"\"\nclass Roles(enum.IntEnum):\n\"\"\"Addional roles.\"\"\"\nBackupRole = constants.USER_ROLE + 65\nSortRole = constants.SORT_ROLE\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself._search_term = \"\"\nself.match_color: str | None = \"blue\"\nself.setSortRole(self.Roles.SortRole)\nself.sort(0, constants.DESCENDING)\ndef set_match_color(self, color):\nself.match_color = color\ndef filterAcceptsRow(self, source_row: int, source_index: core.ModelIndex) -&gt; bool:\nif self._search_term == \"\":\nreturn True\ncolumn = self.filterKeyColumn()\nsource_model = self.sourceModel()\nidx = source_model.index(source_row, column, source_index)\ntext = source_model.data(idx)\nreturn fuzzy.fuzzy_match_simple(\nself._search_term, text, case_sensitive=self.is_filter_case_sensitive()\n)\ndef lessThan(self, left, right):\nrole = super().sortRole()\nleft_data = left.data(role)\nright_data = right.data(role)\nif left_data is None or right_data is None:\nreturn True\nif self._search_term:\nreturn fuzzy.fuzzy_match(self._search_term, left_data) &lt; fuzzy.fuzzy_match(\nself._search_term, right_data\n)\nelse:\nreturn left_data &lt; right_data\ndef set_search_term(self, search_term: str):\nself._search_term = search_term\nself.invalidate()\ndef data(self, index, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nfilter_column = self.filterKeyColumn()\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, _ if index.column() == filter_column:\nlabel = super().data(index, constants.DISPLAY_ROLE)\n# logging.info(label)\nreturn (\nfuzzy.color_text(\nself._search_term,\nstr(label),\nself.match_color,\nself.is_filter_case_sensitive(),\n)\nif self._search_term and self.match_color\nelse label\n)\n# case constants.DISPLAY_ROLE, 1:\n#     idx = self.index(index.row(), filter_column)\n#     label = super().data(idx, constants.DISPLAY_ROLE)\n#     result = fuzzy.fuzzy_match(self._search_term, label)\n#     return str(result[1])\ncase self.Roles.BackupRole, _:\nreturn super().data(index, constants.DISPLAY_ROLE)\ncase self.Roles.SortRole, _:\nidx = self.index(index.row(), filter_column)\nlabel = super().data(idx, constants.DISPLAY_ROLE)\nresult = fuzzy.fuzzy_match(self._search_term, label)\nreturn result[1]\ncase _, _:\nreturn super().data(index, role)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.match_color","title":"<code>match_color: str | None = 'blue'</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.Roles","title":"<code>Roles</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Addional roles.</p> Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>class Roles(enum.IntEnum):\n\"\"\"Addional roles.\"\"\"\nBackupRole = constants.USER_ROLE + 65\nSortRole = constants.SORT_ROLE\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.Roles.BackupRole","title":"<code>BackupRole = constants.USER_ROLE + 65</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.Roles.SortRole","title":"<code>SortRole = constants.SORT_ROLE</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.__init__","title":"<code>__init__(parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>def __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself._search_term = \"\"\nself.match_color: str | None = \"blue\"\nself.setSortRole(self.Roles.SortRole)\nself.sort(0, constants.DESCENDING)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.data","title":"<code>data(index, role = constants.DISPLAY_ROLE)</code>","text":"Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>def data(self, index, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nfilter_column = self.filterKeyColumn()\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, _ if index.column() == filter_column:\nlabel = super().data(index, constants.DISPLAY_ROLE)\n# logging.info(label)\nreturn (\nfuzzy.color_text(\nself._search_term,\nstr(label),\nself.match_color,\nself.is_filter_case_sensitive(),\n)\nif self._search_term and self.match_color\nelse label\n)\n# case constants.DISPLAY_ROLE, 1:\n#     idx = self.index(index.row(), filter_column)\n#     label = super().data(idx, constants.DISPLAY_ROLE)\n#     result = fuzzy.fuzzy_match(self._search_term, label)\n#     return str(result[1])\ncase self.Roles.BackupRole, _:\nreturn super().data(index, constants.DISPLAY_ROLE)\ncase self.Roles.SortRole, _:\nidx = self.index(index.row(), filter_column)\nlabel = super().data(idx, constants.DISPLAY_ROLE)\nresult = fuzzy.fuzzy_match(self._search_term, label)\nreturn result[1]\ncase _, _:\nreturn super().data(index, role)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.filterAcceptsRow","title":"<code>filterAcceptsRow(source_row: int, source_index: core.ModelIndex) -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>def filterAcceptsRow(self, source_row: int, source_index: core.ModelIndex) -&gt; bool:\nif self._search_term == \"\":\nreturn True\ncolumn = self.filterKeyColumn()\nsource_model = self.sourceModel()\nidx = source_model.index(source_row, column, source_index)\ntext = source_model.data(idx)\nreturn fuzzy.fuzzy_match_simple(\nself._search_term, text, case_sensitive=self.is_filter_case_sensitive()\n)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.lessThan","title":"<code>lessThan(left, right)</code>","text":"Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>def lessThan(self, left, right):\nrole = super().sortRole()\nleft_data = left.data(role)\nright_data = right.data(role)\nif left_data is None or right_data is None:\nreturn True\nif self._search_term:\nreturn fuzzy.fuzzy_match(self._search_term, left_data) &lt; fuzzy.fuzzy_match(\nself._search_term, right_data\n)\nelse:\nreturn left_data &lt; right_data\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.set_match_color","title":"<code>set_match_color(color)</code>","text":"Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>def set_match_color(self, color):\nself.match_color = color\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.fuzzyfiltermodel.FuzzyFilterProxyModel.set_search_term","title":"<code>set_search_term(search_term: str)</code>","text":"Source code in <code>prettyqt\\custom_models\\fuzzyfiltermodel.py</code> <pre><code>def set_search_term(self, search_term: str):\nself._search_term = search_term\nself.invalidate()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ImportlibDistributionModel","title":"<code>ImportlibDistributionModel</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>class ImportlibDistributionModel(core.AbstractTableModel):\nHEADER = [\"Name\", \"Version\", \"Summary\", \"Homepage\", \"Author\", \"License\"]\ndef __init__(\nself,\ndistributions: Sequence[metadata.Distribution],\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself.distributions = distributions\ndef rowCount(self, parent=None):\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.distributions)\ndef columnCount(self, parent=None):\nreturn 0 if parent is None else len(self.HEADER)\ndef headerData(self, offset: int, orientation, role):  # type: ignore\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[offset]\ndef data(self, index, role=constants.DISPLAY_ROLE):\ndist = self.distributions[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn dist.metadata[\"Name\"]\ncase constants.DISPLAY_ROLE, 1:\nreturn dist.version\ncase constants.DISPLAY_ROLE, 2:\nreturn dist.metadata[\"Summary\"]\ncase constants.DISPLAY_ROLE, 3:\nreturn dist.metadata[\"Home-Page\"]\ncase constants.DISPLAY_ROLE, 4:\nreturn dist.metadata[\"Author\"]\ncase constants.DISPLAY_ROLE, 5:\nreturn dist.metadata[\"License\"]\ncase constants.USER_ROLE, _:\nreturn dist\n@classmethod\ndef from_system(cls, parent: QtCore.QObject | None = None) -&gt; Self:\ndistributions = list_system_modules()\nreturn cls(distributions, parent)\n@classmethod\ndef from_package(\ncls, package_name: str, parent: QtCore.QObject | None = None\n) -&gt; Self:\ndistributions = list_package_requirements(package_name)\nreturn cls(distributions, parent)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.HEADER","title":"<code>HEADER = ['Name', 'Version', 'Summary', 'Homepage', 'Author', 'License']</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.distributions","title":"<code>distributions = distributions</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.__init__","title":"<code>__init__(distributions: Sequence[metadata.Distribution], parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def __init__(\nself,\ndistributions: Sequence[metadata.Distribution],\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself.distributions = distributions\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.columnCount","title":"<code>columnCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def columnCount(self, parent=None):\nreturn 0 if parent is None else len(self.HEADER)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.data","title":"<code>data(index, role = constants.DISPLAY_ROLE)</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def data(self, index, role=constants.DISPLAY_ROLE):\ndist = self.distributions[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn dist.metadata[\"Name\"]\ncase constants.DISPLAY_ROLE, 1:\nreturn dist.version\ncase constants.DISPLAY_ROLE, 2:\nreturn dist.metadata[\"Summary\"]\ncase constants.DISPLAY_ROLE, 3:\nreturn dist.metadata[\"Home-Page\"]\ncase constants.DISPLAY_ROLE, 4:\nreturn dist.metadata[\"Author\"]\ncase constants.DISPLAY_ROLE, 5:\nreturn dist.metadata[\"License\"]\ncase constants.USER_ROLE, _:\nreturn dist\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.from_package","title":"<code>from_package(package_name: str, parent: QtCore.QObject | None = None) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>@classmethod\ndef from_package(\ncls, package_name: str, parent: QtCore.QObject | None = None\n) -&gt; Self:\ndistributions = list_package_requirements(package_name)\nreturn cls(distributions, parent)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.from_system","title":"<code>from_system(parent: QtCore.QObject | None = None) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>@classmethod\ndef from_system(cls, parent: QtCore.QObject | None = None) -&gt; Self:\ndistributions = list_system_modules()\nreturn cls(distributions, parent)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.headerData","title":"<code>headerData(offset: int, orientation: int, role: int)</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def headerData(self, offset: int, orientation, role):  # type: ignore\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[offset]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.importlibdistributionmodel.ImportlibDistributionModel.rowCount","title":"<code>rowCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\importlibdistributionmodel.py</code> <pre><code>def rowCount(self, parent=None):\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.distributions)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.JsonModel","title":"<code>JsonModel</code>","text":"<p>         Bases: <code>custom_models.ColumnItemModel</code></p> <p>Model that provides an interface to an objectree that is build of tree items.</p> Source code in <code>prettyqt\\custom_models\\jsonmodel.py</code> <pre><code>class JsonModel(custom_models.ColumnItemModel):\n\"\"\"Model that provides an interface to an objectree that is build of tree items.\"\"\"\ndef __init__(\nself,\nobj: Any,\nshow_root: bool = True,\n**kwargs,\n):\nsuper().__init__(\nobj=JsonItem(key=\"\", value=obj, typ=type(obj)),\ncolumns=COLUMNS,\nshow_root=show_root,\n**kwargs,\n)\ndef hasChildren(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nif parent.column() &gt; 0:\nreturn False\nif self.show_root and self.data_by_index(parent) == self._root_item:\nreturn True\nreturn isinstance(self.data_by_index(parent).obj.value, dict | list | set)\ndef _fetch_object_children(self, item: treeitem.TreeItem) -&gt; list[treeitem.TreeItem]:\n\"\"\"Fetch the children of a Python object.\n        Returns: list of treeitem.TreeItems\n        \"\"\"\n# items = []\nmatch item.obj.value:\ncase Mapping():\nreturn [\ntreeitem.TreeItem(obj=JsonItem(key=k, value=v, typ=type(v)))\nfor k, v in item.obj.value.items()\n]\ncase Iterable() if not isinstance(item.obj.value, str):\nreturn [\ntreeitem.TreeItem(obj=JsonItem(key=k, value=v, typ=type(v)))\nfor k, v in enumerate(item.obj.value)\n]\ncase _:\nreturn [\ntreeitem.TreeItem(\nobj=JsonItem(\nkey=\"key\",\nvalue=repr(item.obj.value),\ntyp=type(item.obj.value),\n)\n)\n]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.jsonmodel.JsonModel.__init__","title":"<code>__init__(obj: Any, show_root: bool = True, **kwargs: bool)</code>","text":"Source code in <code>prettyqt\\custom_models\\jsonmodel.py</code> <pre><code>def __init__(\nself,\nobj: Any,\nshow_root: bool = True,\n**kwargs,\n):\nsuper().__init__(\nobj=JsonItem(key=\"\", value=obj, typ=type(obj)),\ncolumns=COLUMNS,\nshow_root=show_root,\n**kwargs,\n)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.jsonmodel.JsonModel.hasChildren","title":"<code>hasChildren(parent: core.ModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\jsonmodel.py</code> <pre><code>def hasChildren(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nif parent.column() &gt; 0:\nreturn False\nif self.show_root and self.data_by_index(parent) == self._root_item:\nreturn True\nreturn isinstance(self.data_by_index(parent).obj.value, dict | list | set)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ListMixin","title":"<code>ListMixin</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>class ListMixin:\nSORT_METHODS: dict[int, Callable]\nMIME_TYPE: str = \"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)  # type: ignore\nself.items = []\ndef setData(self, index, value, role):\nif role == constants.USER_ROLE:\nself.items[index.row()] = value\nself.update_row(index.row())\nreturn True\nreturn super().setData(index, value, role)  # type: ignore\ndef removeRows(self, row: int, count: int, parent):\nend_row = row + count - 1\nwith self.remove_rows(row, end_row, parent):\nfor i in range(end_row, row - 1, -1):\nself.items.pop(i)\nreturn True\ndef rowCount(self, parent=None):\n\"\"\"Required override for AbstractitemModels.\"\"\"\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.items)\ndef data_by_index(self, index):\nreturn self.items[index.row()]\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif not mime_data.hasFormat(self.MIME_TYPE):\nreturn False\n# Since we only drop in between items, parent_index must be invalid,\n# and we use the row arg to know where the drop took place.\nif parent_index.isValid():\nreturn False\nindexes = mime_data.get_json_data(self.MIME_TYPE)\npos = row if row &lt; len(self.items) and row != -1 else len(self.items)\nrem_offset = sum(i &lt;= pos for i in indexes)\nnew = [self.items[i] for i in indexes]\nwith self.change_layout():\nfor i in sorted(indexes, reverse=True):\nself.items.pop(i)\nfor item in reversed(new):\nself.items.insert(pos - rem_offset, item)\nreturn False\ndef sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self.SORT_METHODS.get(ncol):\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\ndef add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\ndef add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i in range(len(items)):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\ndef remove_items(self, offsets: Iterable[int]):\nfor offset in sorted(offsets, reverse=True):\nself.removeRow(offset)\ndef supportedDropActions(self):\nreturn constants.MOVE_ACTION\ndef mimeTypes(self):\nreturn [self.MIME_TYPE]\ndef mimeData(self, indexes):\n\"\"\"AbstractItemModel override, defines the data used for drag and drop.\n        atm this just returns the positions (not sure if this is perfect)\n        \"\"\"\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.MIME_TYPE","title":"<code>MIME_TYPE: str = ''</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.SORT_METHODS","title":"<code>SORT_METHODS: dict[int, Callable]</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.items","title":"<code>items = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)  # type: ignore\nself.items = []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.add","title":"<code>add(item: Any, position: int | None = None)</code>","text":"<p>Append provided item to the list.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.add_items","title":"<code>add_items(items: Iterable[Any], position: int | None = None)</code>","text":"<p>Append a list of items to the list.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i in range(len(items)):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.data_by_index","title":"<code>data_by_index(index)</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def data_by_index(self, index):\nreturn self.items[index.row()]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.dropMimeData","title":"<code>dropMimeData(mime_data, action, row, column, parent_index)</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def dropMimeData(self, mime_data, action, row, column, parent_index):\nif not mime_data.hasFormat(self.MIME_TYPE):\nreturn False\n# Since we only drop in between items, parent_index must be invalid,\n# and we use the row arg to know where the drop took place.\nif parent_index.isValid():\nreturn False\nindexes = mime_data.get_json_data(self.MIME_TYPE)\npos = row if row &lt; len(self.items) and row != -1 else len(self.items)\nrem_offset = sum(i &lt;= pos for i in indexes)\nnew = [self.items[i] for i in indexes]\nwith self.change_layout():\nfor i in sorted(indexes, reverse=True):\nself.items.pop(i)\nfor item in reversed(new):\nself.items.insert(pos - rem_offset, item)\nreturn False\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.mimeData","title":"<code>mimeData(indexes)</code>","text":"<p>AbstractItemModel override, defines the data used for drag and drop.</p> <p>atm this just returns the positions (not sure if this is perfect)</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def mimeData(self, indexes):\n\"\"\"AbstractItemModel override, defines the data used for drag and drop.\n    atm this just returns the positions (not sure if this is perfect)\n    \"\"\"\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.mimeTypes","title":"<code>mimeTypes()</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def mimeTypes(self):\nreturn [self.MIME_TYPE]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.removeRows","title":"<code>removeRows(row: int, count: int, parent: int)</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def removeRows(self, row: int, count: int, parent):\nend_row = row + count - 1\nwith self.remove_rows(row, end_row, parent):\nfor i in range(end_row, row - 1, -1):\nself.items.pop(i)\nreturn True\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.remove_items","title":"<code>remove_items(offsets: Iterable[int])</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def remove_items(self, offsets: Iterable[int]):\nfor offset in sorted(offsets, reverse=True):\nself.removeRow(offset)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.rowCount","title":"<code>rowCount(parent = None)</code>","text":"<p>Required override for AbstractitemModels.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def rowCount(self, parent=None):\n\"\"\"Required override for AbstractitemModels.\"\"\"\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.items)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.setData","title":"<code>setData(index, value, role)</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def setData(self, index, value, role):\nif role == constants.USER_ROLE:\nself.items[index.row()] = value\nself.update_row(index.row())\nreturn True\nreturn super().setData(index, value, role)  # type: ignore\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.sort","title":"<code>sort(ncol: int, order: int)</code>","text":"<p>Sort table by given column number.</p> Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self.SORT_METHODS.get(ncol):\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.listmixin.ListMixin.supportedDropActions","title":"<code>supportedDropActions()</code>","text":"Source code in <code>prettyqt\\custom_models\\listmixin.py</code> <pre><code>def supportedDropActions(self):\nreturn constants.MOVE_ACTION\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.ModelMixin","title":"<code>ModelMixin</code>","text":"Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>class ModelMixin:\nDTYPE_ROLE = constants.USER_ROLE + 1  # type: ignore\nHEADER = [\"Name\"]\nLABELS: dict = {}\nCHECKSTATE: dict = {}\nTOOLTIPS: dict = {}\nDECORATIONS: dict = {}\nSET_DATA: dict = {}\ncontent_type = \"\"\ndef headerData(self, offset: int, orientation, role):\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[offset]\ndef columnCount(self, parent=None):\nreturn len(self.HEADER)\ndef flags(self, index):\n\"\"\"Override for AbstractitemModel base method.\n        returns corresponding flags for cell of supplied index\n        \"\"\"\nif not index.isValid():\nreturn constants.DROP_ENABLED\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\ndef data(self, index, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nitem = self.data_by_index(index)\nmatch role:\ncase constants.DECORATION_ROLE:\nif fn := self.DECORATIONS.get(index.column()):\nreturn fn(item)\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE:\nif fn := self.LABELS.get(index.column()):\nreturn fn(item)\ncase constants.TOOLTIP_ROLE:\nif fn := self.TOOLTIPS.get(index.column()):\nreturn fn(item)\ncase constants.CHECKSTATE_ROLE:\nif fn := self.CHECKSTATE.get(index.column()):\nreturn fn(item)\ncase constants.USER_ROLE:\nreturn item\ncase _:\nreturn None\ndef setData(self, index, value, role):\nif role == constants.EDIT_ROLE:\nif not value:\nreturn False\nitem = self.data_by_index(index)\nif fn := self.SET_DATA.get(index.column()):\nfn(item, value)\nself.update_row(index.row())\nreturn True\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.CHECKSTATE","title":"<code>CHECKSTATE: dict = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.DECORATIONS","title":"<code>DECORATIONS: dict = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.DTYPE_ROLE","title":"<code>DTYPE_ROLE = constants.USER_ROLE + 1</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.HEADER","title":"<code>HEADER = ['Name']</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.LABELS","title":"<code>LABELS: dict = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.SET_DATA","title":"<code>SET_DATA: dict = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.TOOLTIPS","title":"<code>TOOLTIPS: dict = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.content_type","title":"<code>content_type = ''</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.columnCount","title":"<code>columnCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>def columnCount(self, parent=None):\nreturn len(self.HEADER)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.data","title":"<code>data(index, role = constants.DISPLAY_ROLE)</code>","text":"Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>def data(self, index, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nitem = self.data_by_index(index)\nmatch role:\ncase constants.DECORATION_ROLE:\nif fn := self.DECORATIONS.get(index.column()):\nreturn fn(item)\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE:\nif fn := self.LABELS.get(index.column()):\nreturn fn(item)\ncase constants.TOOLTIP_ROLE:\nif fn := self.TOOLTIPS.get(index.column()):\nreturn fn(item)\ncase constants.CHECKSTATE_ROLE:\nif fn := self.CHECKSTATE.get(index.column()):\nreturn fn(item)\ncase constants.USER_ROLE:\nreturn item\ncase _:\nreturn None\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.flags","title":"<code>flags(index)</code>","text":"<p>Override for AbstractitemModel base method.</p> <p>returns corresponding flags for cell of supplied index</p> Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>def flags(self, index):\n\"\"\"Override for AbstractitemModel base method.\n    returns corresponding flags for cell of supplied index\n    \"\"\"\nif not index.isValid():\nreturn constants.DROP_ENABLED\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.headerData","title":"<code>headerData(offset: int, orientation: int, role: int)</code>","text":"Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>def headerData(self, offset: int, orientation, role):\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[offset]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.modelmixin.ModelMixin.setData","title":"<code>setData(index, value, role)</code>","text":"Source code in <code>prettyqt\\custom_models\\modelmixin.py</code> <pre><code>def setData(self, index, value, role):\nif role == constants.EDIT_ROLE:\nif not value:\nreturn False\nitem = self.data_by_index(index)\nif fn := self.SET_DATA.get(index.column()):\nfn(item, value)\nself.update_row(index.row())\nreturn True\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.NestedItem","title":"<code>NestedItem</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>class NestedItem:\nitem_name = \"not_defined\"\ndef __init__(\nself,\nparent: Self | None = None,\ndynamic_name: str | None = None,\ncount: int | None = None,\nchildren: list[Self] | None = None,\n):\nself.parent = parent\nself.dynamic_name = dynamic_name or self.item_name\nself.count = count\n# self.timestamp = kwargs.pop(\"timestamp\", time.time())\nself.children: list[Self] = []\nif children:\nself.add_children(children)\ndef __iter__(self) -&gt; Iterator[Self]:\nreturn iter(self.children)\ndef add_children(self, children: Iterable[Self]):\nfor child in children:\nchild.parent = self\nself.children.extend(children)\ndef append_child(self, item: Self):\nitem.parent_item = self\nself.children.append(item)\ndef insert_children(self, idx: int, items: Sequence[Self]):\nself.children[idx:idx] = items\nfor item in items:\nitem.parent_item = self\ndef child(self, row: int) -&gt; Self:\nreturn self.children[row]\ndef row(self) -&gt; int:\n\"\"\"Return row number.\n        returns row position of item inside parent`s children\n        returns 0 if no parent available\n        Returns:\n            row number\n        \"\"\"\nreturn self.parent.children.index(self) if self.parent else 0\ndef iter_tree(\nself,\nname: str | None = None,\nyield_self: bool = True,\nrecursive: bool = True,\nlevel: int = 0,\ncount: int = 0,\nassign_names: bool = True,\n):\n\"\"\"Yield children from bottom to top, yield self at end.\n        assigns dynamic vars count, level and dynamic name\n        \"\"\"\nif name is None:\nname = self.item_name\nfor i, c in enumerate(self.children, start=1):\ncount += 1\nlevel += 1\nwith_suffix = f\"{name}_{i}\" if len(self.children) &gt; 1 else name\nif recursive:\nyield from c.iter_tree(\nwith_suffix, yield_self=False, level=level, count=count\n)\nif assign_names:\nc.dynamic_name, c.count = with_suffix, count\nyield c\nlevel -= 1\nif yield_self:\nif assign_names:\nself.dynamic_name, self.count = name, 0\nyield self\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.children","title":"<code>children: list[Self] = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.count","title":"<code>count = count</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.dynamic_name","title":"<code>dynamic_name = dynamic_name or self.item_name</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.item_name","title":"<code>item_name = 'not_defined'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.parent","title":"<code>parent = parent</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.__init__","title":"<code>__init__(parent: Self | None = None, dynamic_name: str | None = None, count: int | None = None, children: list[Self] | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def __init__(\nself,\nparent: Self | None = None,\ndynamic_name: str | None = None,\ncount: int | None = None,\nchildren: list[Self] | None = None,\n):\nself.parent = parent\nself.dynamic_name = dynamic_name or self.item_name\nself.count = count\n# self.timestamp = kwargs.pop(\"timestamp\", time.time())\nself.children: list[Self] = []\nif children:\nself.add_children(children)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.__iter__","title":"<code>__iter__() -&gt; Iterator[Self]</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def __iter__(self) -&gt; Iterator[Self]:\nreturn iter(self.children)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.add_children","title":"<code>add_children(children: Iterable[Self])</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def add_children(self, children: Iterable[Self]):\nfor child in children:\nchild.parent = self\nself.children.extend(children)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.append_child","title":"<code>append_child(item: Self)</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def append_child(self, item: Self):\nitem.parent_item = self\nself.children.append(item)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.child","title":"<code>child(row: int) -&gt; Self</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def child(self, row: int) -&gt; Self:\nreturn self.children[row]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.insert_children","title":"<code>insert_children(idx: int, items: Sequence[Self])</code>","text":"Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def insert_children(self, idx: int, items: Sequence[Self]):\nself.children[idx:idx] = items\nfor item in items:\nitem.parent_item = self\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.iter_tree","title":"<code>iter_tree(name: str | None = None, yield_self: bool = True, recursive: bool = True, level: int = 0, count: int = 0, assign_names: bool = True)</code>","text":"<p>Yield children from bottom to top, yield self at end.</p> <p>assigns dynamic vars count, level and dynamic name</p> Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def iter_tree(\nself,\nname: str | None = None,\nyield_self: bool = True,\nrecursive: bool = True,\nlevel: int = 0,\ncount: int = 0,\nassign_names: bool = True,\n):\n\"\"\"Yield children from bottom to top, yield self at end.\n    assigns dynamic vars count, level and dynamic name\n    \"\"\"\nif name is None:\nname = self.item_name\nfor i, c in enumerate(self.children, start=1):\ncount += 1\nlevel += 1\nwith_suffix = f\"{name}_{i}\" if len(self.children) &gt; 1 else name\nif recursive:\nyield from c.iter_tree(\nwith_suffix, yield_self=False, level=level, count=count\n)\nif assign_names:\nc.dynamic_name, c.count = with_suffix, count\nyield c\nlevel -= 1\nif yield_self:\nif assign_names:\nself.dynamic_name, self.count = name, 0\nyield self\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nesteditem.NestedItem.row","title":"<code>row() -&gt; int</code>","text":"<p>Return row number.</p> <p>returns row position of item inside parent`s children returns 0 if no parent available</p> <p>Returns:</p> Type Description <code>int</code> <p>row number</p> Source code in <code>prettyqt\\custom_models\\nesteditem.py</code> <pre><code>def row(self) -&gt; int:\n\"\"\"Return row number.\n    returns row position of item inside parent`s children\n    returns 0 if no parent available\n    Returns:\n        row number\n    \"\"\"\nreturn self.parent.children.index(self) if self.parent else 0\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.NestedModel","title":"<code>NestedModel</code>","text":"<p>         Bases: <code>custom_models.ListMixin</code>, <code>custom_models.ModelMixin</code>, <code>core.AbstractItemModel</code></p> Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>class NestedModel(  # type: ignore\ncustom_models.ListMixin, custom_models.ModelMixin, core.AbstractItemModel\n):\nDEFAULT_FLAGS = (\nconstants.DRAG_ENABLED  # type: ignore\n| constants.IS_ENABLED\n| constants.IS_SELECTABLE\n)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.root = Root()\nself.items = self.root.children\ndef flags(self, index=None):\nindex = index or core.ModelIndex()\nif not index.isValid():\nreturn constants.NO_FLAGS\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\ndef rowCount(self, parent=None) -&gt; int:\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn (\nlen(parent.internalPointer().children)\nif parent.isValid()\nelse len(self.items)\n)\ndef index(self, row, column, parent=None):\nparent = parent or core.ModelIndex()\nif not self.hasIndex(row, column, parent):\nreturn core.ModelIndex()\nparent_item = parent.internalPointer()\nif not parent_item:\nparent_item = self.root\nreturn self.createIndex(row, column, parent_item.children[row])\ndef parent(self, index=None):\nindex = index or core.ModelIndex()\nif not index.isValid():\nreturn core.ModelIndex()\nif item := index.internalPointer():\nreturn (\ncore.ModelIndex()\nif item.parent in [self.root, None]\nelse self.createIndex(item.parent.row(), 0, item.parent)\n)\nelse:\nreturn core.ModelIndex()\ndef data_by_index(self, index):\nreturn index.internalPointer()\ndef json(self, root=None) -&gt; dict:\n\"\"\"Serialise model as JSON-compliant dictionary.\n        Arguments:\n            root (JsonTreeItem, optional): Serialise from here\n                defaults to the the top-level item\n        Returns:\n            model as dict\n        \"\"\"\nroot = root or self.root\nreturn root.as_json()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.DEFAULT_FLAGS","title":"<code>DEFAULT_FLAGS = constants.DRAG_ENABLED | constants.IS_ENABLED | constants.IS_SELECTABLE</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.items","title":"<code>items = self.root.children</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.root","title":"<code>root = Root()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.root = Root()\nself.items = self.root.children\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.data_by_index","title":"<code>data_by_index(index)</code>","text":"Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def data_by_index(self, index):\nreturn index.internalPointer()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.flags","title":"<code>flags(index = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def flags(self, index=None):\nindex = index or core.ModelIndex()\nif not index.isValid():\nreturn constants.NO_FLAGS\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.index","title":"<code>index(row, column, parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def index(self, row, column, parent=None):\nparent = parent or core.ModelIndex()\nif not self.hasIndex(row, column, parent):\nreturn core.ModelIndex()\nparent_item = parent.internalPointer()\nif not parent_item:\nparent_item = self.root\nreturn self.createIndex(row, column, parent_item.children[row])\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.json","title":"<code>json(root = None) -&gt; dict</code>","text":"<p>Serialise model as JSON-compliant dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>JsonTreeItem</code> <p>Serialise from here defaults to the the top-level item</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>model as dict</p> Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def json(self, root=None) -&gt; dict:\n\"\"\"Serialise model as JSON-compliant dictionary.\n    Arguments:\n        root (JsonTreeItem, optional): Serialise from here\n            defaults to the the top-level item\n    Returns:\n        model as dict\n    \"\"\"\nroot = root or self.root\nreturn root.as_json()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.parent","title":"<code>parent(index = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def parent(self, index=None):\nindex = index or core.ModelIndex()\nif not index.isValid():\nreturn core.ModelIndex()\nif item := index.internalPointer():\nreturn (\ncore.ModelIndex()\nif item.parent in [self.root, None]\nelse self.createIndex(item.parent.row(), 0, item.parent)\n)\nelse:\nreturn core.ModelIndex()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.nestedmodel.NestedModel.rowCount","title":"<code>rowCount(parent = None) -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_models\\nestedmodel.py</code> <pre><code>def rowCount(self, parent=None) -&gt; int:\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn (\nlen(parent.internalPointer().children)\nif parent.isValid()\nelse len(self.items)\n)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.RegexMatchesModel","title":"<code>RegexMatchesModel</code>","text":"<p>         Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>class RegexMatchesModel(core.AbstractTableModel):\nHEADER = [\"Start\", \"End\", \"Value\", \"Groups\"]\ndef __init__(self, matches: list | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.matches = matches or []\ndef columnCount(self, parent=None):\nreturn len(self.HEADER)\ndef headerData(  # type: ignore\nself, section: int, orientation: QtCore.Qt.Orientation, role: int\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[section]\ndef data(self, index, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nitem = self.matches[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn str(item.span()[0])\ncase constants.DISPLAY_ROLE, 1:\nreturn str(item.span()[1])\ncase constants.DISPLAY_ROLE, 2:\nreturn repr(item.group())\ncase constants.DISPLAY_ROLE, 3:\nreturn str(len(item.groups()))\ncase constants.USER_ROLE, _:\nreturn item.span()\ndef rowCount(self, parent=None):\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.matches)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.HEADER","title":"<code>HEADER = ['Start', 'End', 'Value', 'Groups']</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.matches","title":"<code>matches = matches or []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.__init__","title":"<code>__init__(matches: list | None = None, **kwargs: list | None)</code>","text":"Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def __init__(self, matches: list | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.matches = matches or []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.columnCount","title":"<code>columnCount(parent = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def columnCount(self, parent=None):\nreturn len(self.HEADER)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.data","title":"<code>data(index, role = constants.DISPLAY_ROLE)</code>","text":"Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def data(self, index, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nitem = self.matches[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn str(item.span()[0])\ncase constants.DISPLAY_ROLE, 1:\nreturn str(item.span()[1])\ncase constants.DISPLAY_ROLE, 2:\nreturn repr(item.group())\ncase constants.DISPLAY_ROLE, 3:\nreturn str(len(item.groups()))\ncase constants.USER_ROLE, _:\nreturn item.span()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.headerData","title":"<code>headerData(section: int, orientation: QtCore.Qt.Orientation, role: int) -&gt; str | None</code>","text":"Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def headerData(  # type: ignore\nself, section: int, orientation: QtCore.Qt.Orientation, role: int\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[section]\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.regexmatchesmodel.RegexMatchesModel.rowCount","title":"<code>rowCount(parent = None)</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\custom_models\\regexmatchesmodel.py</code> <pre><code>def rowCount(self, parent=None):\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.matches)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SelectionMixin","title":"<code>SelectionMixin</code>","text":"Source code in <code>prettyqt\\custom_models\\selectionmixin.py</code> <pre><code>class SelectionMixin:\nCHECKSTATE: dict[int, Callable] = {}  # column: identifier\ndataChanged: QtCore.Signal\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.selected = {}\ndef setData(self, index: QtCore.QModelIndex, value, role) -&gt; bool:\nif not index.isValid():\nreturn False\nelif role == constants.CHECKSTATE_ROLE:\nname = self._get_selection_id(index)\nself.selected[name] = not self.selected[name]\nself.dataChanged.emit(index, index)\nreturn True\nreturn super().setData(index, value, role)\ndef data(self, index: QtCore.QModelIndex, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn False\nif role == constants.CHECKSTATE_ROLE and index.column() == 0:\nname = self._get_selection_id(index)\nselected = self.selected.get(name, False)\nif name not in self.selected:\nself.selected[name] = selected\nreturn selected\nreturn super().data(index, role)\ndef flags(self, index: QtCore.QModelIndex):\nflags = super().flags(index)\nif index.column() in self.CHECKSTATE:\nreturn flags | constants.IS_CHECKABLE\nreturn flags\ndef _get_selection_id(self, index: QtCore.QModelIndex):\nitem = index.data(constants.USER_ROLE)\nif id_fn := self.CHECKSTATE.get(index.column()):\nreturn id_fn(item)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.CHECKSTATE","title":"<code>CHECKSTATE: dict[int, Callable] = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.dataChanged","title":"<code>dataChanged: QtCore.Signal</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.selected","title":"<code>selected = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_models\\selectionmixin.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.selected = {}\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.data","title":"<code>data(index: QtCore.QModelIndex, role: QtCore.QModelIndex = constants.DISPLAY_ROLE)</code>","text":"Source code in <code>prettyqt\\custom_models\\selectionmixin.py</code> <pre><code>def data(self, index: QtCore.QModelIndex, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn False\nif role == constants.CHECKSTATE_ROLE and index.column() == 0:\nname = self._get_selection_id(index)\nselected = self.selected.get(name, False)\nif name not in self.selected:\nself.selected[name] = selected\nreturn selected\nreturn super().data(index, role)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.flags","title":"<code>flags(index: QtCore.QModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_models\\selectionmixin.py</code> <pre><code>def flags(self, index: QtCore.QModelIndex):\nflags = super().flags(index)\nif index.column() in self.CHECKSTATE:\nreturn flags | constants.IS_CHECKABLE\nreturn flags\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.selectionmixin.SelectionMixin.setData","title":"<code>setData(index: QtCore.QModelIndex, value: QtCore.QModelIndex, role: QtCore.QModelIndex) -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_models\\selectionmixin.py</code> <pre><code>def setData(self, index: QtCore.QModelIndex, value, role) -&gt; bool:\nif not index.isValid():\nreturn False\nelif role == constants.CHECKSTATE_ROLE:\nname = self._get_selection_id(index)\nself.selected[name] = not self.selected[name]\nself.dataChanged.emit(index, index)\nreturn True\nreturn super().setData(index, value, role)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.SubsequenceSortFilterProxyModel","title":"<code>SubsequenceSortFilterProxyModel</code>","text":"<p>         Bases: <code>core.SortFilterProxyModel</code></p> <p>Performs subsequence matching/sorting.</p> Source code in <code>prettyqt\\custom_models\\subsequencesortfilterproxymodel.py</code> <pre><code>class SubsequenceSortFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"Performs subsequence matching/sorting.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.search_term = \"\"\nself.filter_patterns = []\nself.filter_patterns_case_sensitive = []\nself.sort_patterns = []\ndef set_search_term(self, search_term: str):\nself.search_term = search_term\nself.filter_patterns = []\nself.filter_patterns_case_sensitive = []\nself.sort_patterns = []\nflags = 0 if self.is_filter_case_sensitive() else re.IGNORECASE\nfor i in reversed(range(1, len(search_term) + 1)):\nptrn = f\".*{search_term[:i]}.*{search_term[i:]}\"\ntry:\nself.filter_patterns.append(re.compile(ptrn, flags))\nself.filter_patterns_case_sensitive.append(re.compile(ptrn, 0))\nptrn = f\"{search_term[:i]}.*{search_term[i:]}\"\nself.sort_patterns.append(re.compile(ptrn, flags))\nexcept Exception:\ncontinue\nself.invalidateRowsFilter()\ndef filterAcceptsRow(self, row, index):\ncolumn = self.filterKeyColumn()\nrole = self.filterRole()\nidx = self.sourceModel().index(row, column, index)\ncompletion = self.sourceModel().data(idx, role)\nif (\ncompletion is None\nor self.search_term is None\nor len(completion) &lt; len(self.search_term)\n):\nreturn False\nif len(self.search_term) == 1:\nsearch_term = self.search_term\nif not self.is_filter_case_sensitive():\ncompletion = completion.lower()\nsearch_term = search_term.lower()\n# rank = completion.index(search_term)\n# self.sourceModel().setData(idx, rank, constants.USER_ROLE)\nreturn search_term in completion\nfor pattern, pattern_case, sort_pattern in zip(\nself.filter_patterns,\nself.filter_patterns_case_sensitive,\nself.sort_patterns,\n):\nif re.match(pattern, completion):\n# compute rank, the lowest rank the closer it is from the\n# completion\n# start = MAX_SIZE\n# for m in sort_pattern.finditer(completion):\n#     start, end = m.span()\n# rank = start + i * 10\n# if re.match(pattern_case, completion):\n#     # favorise completions where case is matched\n#     rank -= 10\n# self.sourceModel().setData(idx, rank, constants.USER_ROLE)\nreturn True\nreturn len(self.search_term) == 0\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.filter_patterns","title":"<code>filter_patterns = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.filter_patterns_case_sensitive","title":"<code>filter_patterns_case_sensitive = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.search_term","title":"<code>search_term = ''</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.sort_patterns","title":"<code>sort_patterns = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_models\\subsequencesortfilterproxymodel.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.search_term = \"\"\nself.filter_patterns = []\nself.filter_patterns_case_sensitive = []\nself.sort_patterns = []\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.filterAcceptsRow","title":"<code>filterAcceptsRow(row, index)</code>","text":"Source code in <code>prettyqt\\custom_models\\subsequencesortfilterproxymodel.py</code> <pre><code>def filterAcceptsRow(self, row, index):\ncolumn = self.filterKeyColumn()\nrole = self.filterRole()\nidx = self.sourceModel().index(row, column, index)\ncompletion = self.sourceModel().data(idx, role)\nif (\ncompletion is None\nor self.search_term is None\nor len(completion) &lt; len(self.search_term)\n):\nreturn False\nif len(self.search_term) == 1:\nsearch_term = self.search_term\nif not self.is_filter_case_sensitive():\ncompletion = completion.lower()\nsearch_term = search_term.lower()\n# rank = completion.index(search_term)\n# self.sourceModel().setData(idx, rank, constants.USER_ROLE)\nreturn search_term in completion\nfor pattern, pattern_case, sort_pattern in zip(\nself.filter_patterns,\nself.filter_patterns_case_sensitive,\nself.sort_patterns,\n):\nif re.match(pattern, completion):\n# compute rank, the lowest rank the closer it is from the\n# completion\n# start = MAX_SIZE\n# for m in sort_pattern.finditer(completion):\n#     start, end = m.span()\n# rank = start + i * 10\n# if re.match(pattern_case, completion):\n#     # favorise completions where case is matched\n#     rank -= 10\n# self.sourceModel().setData(idx, rank, constants.USER_ROLE)\nreturn True\nreturn len(self.search_term) == 0\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.subsequencesortfilterproxymodel.SubsequenceSortFilterProxyModel.set_search_term","title":"<code>set_search_term(search_term: str)</code>","text":"Source code in <code>prettyqt\\custom_models\\subsequencesortfilterproxymodel.py</code> <pre><code>def set_search_term(self, search_term: str):\nself.search_term = search_term\nself.filter_patterns = []\nself.filter_patterns_case_sensitive = []\nself.sort_patterns = []\nflags = 0 if self.is_filter_case_sensitive() else re.IGNORECASE\nfor i in reversed(range(1, len(search_term) + 1)):\nptrn = f\".*{search_term[:i]}.*{search_term[i:]}\"\ntry:\nself.filter_patterns.append(re.compile(ptrn, flags))\nself.filter_patterns_case_sensitive.append(re.compile(ptrn, 0))\nptrn = f\"{search_term[:i]}.*{search_term[i:]}\"\nself.sort_patterns.append(re.compile(ptrn, flags))\nexcept Exception:\ncontinue\nself.invalidateRowsFilter()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.TreeModel","title":"<code>TreeModel</code>","text":"<p>         Bases: <code>core.AbstractItemModel</code></p> Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>class TreeModel(core.AbstractItemModel):\ndef __init__(self, obj, show_root: bool = True, **kwargs):\nsuper().__init__(**kwargs)\nself._root_item = treeitem.TreeItem(obj=obj)\nself._show_root = show_root\nself.set_root_item(obj)\ndef root_index(self) -&gt; core.ModelIndex:  # TODO: needed?\n\"\"\"Return the index that returns the root element (same as an invalid index).\"\"\"\nreturn core.ModelIndex()\n@property\ndef show_root(self):\n\"\"\"Return True if the inspected node is visible.\n        In that case an invisible root node has been added.\n        \"\"\"\nreturn self._show_root\ndef set_root_item(self, obj):\nif self._show_root:\nself._root_item = treeitem.TreeItem(obj=None)\nself._root_item.children_fetched = True\nself.inspected_item = treeitem.TreeItem(obj=obj)\nself._root_item.append_child(self.inspected_item)\n# root_index = self.index(0, 0)\n# self.fetchMore(self.index(0, 0, root_index))\nelse:\n# The root itself will be invisible\nself._root_item = treeitem.TreeItem(obj=obj)\nself.inspected_item = self._root_item\n# Fetch all items of the root so we can select the first row in the ctor.\nroot_index = self.index(0, 0)\nself.fetchMore(root_index)\n@property\ndef root_item(self) -&gt; treeitem.TreeItem:\n\"\"\"Return the root ObjectBrowserTreeItem.\"\"\"\nreturn self._root_item\ndef data_by_index(self, index: core.ModelIndex) -&gt; treeitem.TreeItem:\nreturn index.internalPointer() if index.isValid() else self.root_item\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nparent_item = self.data_by_index(parent)\nif not self.hasIndex(row, column, parent):\nreturn core.ModelIndex()\nif child_item := parent_item.child(row):  # isnt this always true?\nreturn self.createIndex(row, column, child_item)\nreturn core.ModelIndex()\ndef parent(self, index: core.ModelIndex) -&gt; core.ModelIndex:  # type:ignore\nif not index.isValid():\nreturn core.ModelIndex()\nchild_item = self.data_by_index(index)\nparent_item = child_item.parent()  # type: ignore\nif parent_item is None or parent_item == self.root_item:\nreturn core.ModelIndex()\nreturn self.createIndex(parent_item.row(), 0, parent_item)\ndef rowCount(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nreturn 0 if parent.column() &gt; 0 else self.data_by_index(parent).child_count()\ndef hasChildren(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nreturn 0 if parent.column() &gt; 0 else self.data_by_index(parent).has_children\ndef canFetchMore(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nif parent.column() &gt; 0:\nreturn 0\nelse:\nreturn not self.data_by_index(parent).children_fetched\ndef fetchMore(self, parent: core.ModelIndex | None = None):\n\"\"\"Fetch the children given the model index of a parent node.\n        Adds the children to the parent.\n        \"\"\"\nparent = core.ModelIndex() if parent is None else parent\nif parent.column() &gt; 0:\nreturn\nparent_item = self.data_by_index(parent)\nif parent_item.children_fetched:\nreturn\ntree_items = self._fetch_object_children(parent_item)\nwith self.insert_rows(0, len(tree_items) - 1, parent):\nfor tree_item in tree_items:\nparent_item.append_child(tree_item)\nparent_item.children_fetched = True\ndef _fetch_object_children(self, treeitem) -&gt; list:\nreturn NotImplemented\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.root_item","title":"<code>root_item: treeitem.TreeItem</code>  <code>property</code>","text":"<p>Return the root ObjectBrowserTreeItem.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.show_root","title":"<code>show_root</code>  <code>property</code>","text":"<p>Return True if the inspected node is visible.</p> <p>In that case an invisible root node has been added.</p>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.__init__","title":"<code>__init__(obj, show_root: bool = True, **kwargs: bool)</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def __init__(self, obj, show_root: bool = True, **kwargs):\nsuper().__init__(**kwargs)\nself._root_item = treeitem.TreeItem(obj=obj)\nself._show_root = show_root\nself.set_root_item(obj)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.canFetchMore","title":"<code>canFetchMore(parent: core.ModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def canFetchMore(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nif parent.column() &gt; 0:\nreturn 0\nelse:\nreturn not self.data_by_index(parent).children_fetched\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.data_by_index","title":"<code>data_by_index(index: core.ModelIndex) -&gt; treeitem.TreeItem</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def data_by_index(self, index: core.ModelIndex) -&gt; treeitem.TreeItem:\nreturn index.internalPointer() if index.isValid() else self.root_item\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.fetchMore","title":"<code>fetchMore(parent: core.ModelIndex | None = None)</code>","text":"<p>Fetch the children given the model index of a parent node.</p> <p>Adds the children to the parent.</p> Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def fetchMore(self, parent: core.ModelIndex | None = None):\n\"\"\"Fetch the children given the model index of a parent node.\n    Adds the children to the parent.\n    \"\"\"\nparent = core.ModelIndex() if parent is None else parent\nif parent.column() &gt; 0:\nreturn\nparent_item = self.data_by_index(parent)\nif parent_item.children_fetched:\nreturn\ntree_items = self._fetch_object_children(parent_item)\nwith self.insert_rows(0, len(tree_items) - 1, parent):\nfor tree_item in tree_items:\nparent_item.append_child(tree_item)\nparent_item.children_fetched = True\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.hasChildren","title":"<code>hasChildren(parent: core.ModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def hasChildren(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nreturn 0 if parent.column() &gt; 0 else self.data_by_index(parent).has_children\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.index","title":"<code>index(row: int, column: int, parent: core.ModelIndex | None = None) -&gt; core.ModelIndex</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nparent_item = self.data_by_index(parent)\nif not self.hasIndex(row, column, parent):\nreturn core.ModelIndex()\nif child_item := parent_item.child(row):  # isnt this always true?\nreturn self.createIndex(row, column, child_item)\nreturn core.ModelIndex()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.parent","title":"<code>parent(index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def parent(self, index: core.ModelIndex) -&gt; core.ModelIndex:  # type:ignore\nif not index.isValid():\nreturn core.ModelIndex()\nchild_item = self.data_by_index(index)\nparent_item = child_item.parent()  # type: ignore\nif parent_item is None or parent_item == self.root_item:\nreturn core.ModelIndex()\nreturn self.createIndex(parent_item.row(), 0, parent_item)\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.root_index","title":"<code>root_index() -&gt; core.ModelIndex</code>","text":"<p>Return the index that returns the root element (same as an invalid index).</p> Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def root_index(self) -&gt; core.ModelIndex:  # TODO: needed?\n\"\"\"Return the index that returns the root element (same as an invalid index).\"\"\"\nreturn core.ModelIndex()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None)</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nreturn 0 if parent.column() &gt; 0 else self.data_by_index(parent).child_count()\n</code></pre>"},{"location":"api/custom_models.html#prettyqt.custom_models.treemodel.TreeModel.set_root_item","title":"<code>set_root_item(obj)</code>","text":"Source code in <code>prettyqt\\custom_models\\treemodel.py</code> <pre><code>def set_root_item(self, obj):\nif self._show_root:\nself._root_item = treeitem.TreeItem(obj=None)\nself._root_item.children_fetched = True\nself.inspected_item = treeitem.TreeItem(obj=obj)\nself._root_item.append_child(self.inspected_item)\n# root_index = self.index(0, 0)\n# self.fetchMore(self.index(0, 0, root_index))\nelse:\n# The root itself will be invisible\nself._root_item = treeitem.TreeItem(obj=obj)\nself.inspected_item = self._root_item\n# Fetch all items of the root so we can select the first row in the ctor.\nroot_index = self.index(0, 0)\nself.fetchMore(root_index)\n</code></pre>"},{"location":"api/custom_validators.html","title":"custom_validators module","text":"<p>Custom_validators module.</p> <p>Contains custom validators</p>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.__all__","title":"<code>__all__ = ['PathValidator', 'NotEmptyValidator', 'IntegerValidator', 'IntListValidator', 'FloatListValidator', 'NotZeroValidator', 'CompositeValidator', 'RegexPatternValidator']</code>  <code>module-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.CompositeValidator","title":"<code>CompositeValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>class CompositeValidator(gui.Validator):\ndef __init__(\nself,\nvalidators: list[gui.Validator] | None = None,\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself.validators = validators if validators is not None else []\ndef __repr__(self):\nreturn get_repr(self, self.validators)\ndef __getitem__(self, index: int) -&gt; gui.Validator:\nreturn self.validators[index]\ndef __setitem__(self, index: int, value: gui.Validator):\nself.validators[index] = value\ndef __delitem__(self, index: int):\ndel self.validators[index]\ndef __contains__(self, index: int):\nreturn index in self.validators\ndef __iter__(self) -&gt; Iterator[gui.Validator]:\nreturn iter(self.validators)\ndef __reduce__(self):\nreturn type(self), (self.validators,)\ndef __len__(self):\nreturn len(self.validators)\ndef __eq__(self, other: object):\nreturn (\nself.validators == other.validators\nif isinstance(other, type(self))\nelse False\n)\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\nvals = [v.validate(text, pos)[0] for v in self.validators]  # type: ignore\nif self.State.Invalid in vals:\nreturn self.State.Invalid, text, pos\nelif self.State.Intermediate in vals:\nreturn self.State.Intermediate, text, pos\nelse:\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.validators","title":"<code>validators = validators if validators is not None else []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__contains__","title":"<code>__contains__(index: int)</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __contains__(self, index: int):\nreturn index in self.validators\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __delitem__(self, index: int):\ndel self.validators[index]\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn (\nself.validators == other.validators\nif isinstance(other, type(self))\nelse False\n)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__getitem__","title":"<code>__getitem__(index: int) -&gt; gui.Validator</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __getitem__(self, index: int) -&gt; gui.Validator:\nreturn self.validators[index]\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__init__","title":"<code>__init__(validators: list[gui.Validator] | None = None, parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __init__(\nself,\nvalidators: list[gui.Validator] | None = None,\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself.validators = validators if validators is not None else []\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__iter__","title":"<code>__iter__() -&gt; Iterator[gui.Validator]</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __iter__(self) -&gt; Iterator[gui.Validator]:\nreturn iter(self.validators)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __len__(self):\nreturn len(self.validators)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.validators,)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.validators)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.__setitem__","title":"<code>__setitem__(index: int, value: gui.Validator)</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def __setitem__(self, index: int, value: gui.Validator):\nself.validators[index] = value\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.compositevalidator.CompositeValidator.validate","title":"<code>validate(text: str, pos: int = 0) -&gt; tuple[QtGui.QValidator.State, str, int]</code>","text":"Source code in <code>prettyqt\\custom_validators\\compositevalidator.py</code> <pre><code>def validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\nvals = [v.validate(text, pos)[0] for v in self.validators]  # type: ignore\nif self.State.Invalid in vals:\nreturn self.State.Invalid, text, pos\nelif self.State.Intermediate in vals:\nreturn self.State.Intermediate, text, pos\nelse:\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.FloatListValidator","title":"<code>FloatListValidator</code>","text":"<p>         Bases: <code>BaseRegexValidator</code></p> Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>class FloatListValidator(BaseRegexValidator):\ndef __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\")\nelse:\nself.set_regex(\nr\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\"\n)\ndef __reduce__(self):\nreturn type(self), (self.allow_single,)\ndef __repr__(self):\nreturn get_repr(self, allow_single=self.allow_single)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.FloatListValidator.allow_single","title":"<code>allow_single = allow_single</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.FloatListValidator.__init__","title":"<code>__init__(allow_single: bool = True, parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\")\nelse:\nself.set_regex(\nr\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\"\n)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.FloatListValidator.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.allow_single,)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.FloatListValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, allow_single=self.allow_single)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.IntListValidator","title":"<code>IntListValidator</code>","text":"<p>         Bases: <code>BaseRegexValidator</code></p> Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>class IntListValidator(BaseRegexValidator):\ndef __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\d+)(,\\s*\\d+)*$\")\nelse:\nself.set_regex(r\"^[0-9][0-9\\,]+[0-9]$\")\ndef __reduce__(self):\nreturn type(self), (self.allow_single,)\ndef __repr__(self):\nreturn get_repr(self, allow_single=self.allow_single)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.IntListValidator.allow_single","title":"<code>allow_single = allow_single</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.IntListValidator.__init__","title":"<code>__init__(allow_single: bool = True, parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\d+)(,\\s*\\d+)*$\")\nelse:\nself.set_regex(r\"^[0-9][0-9\\,]+[0-9]$\")\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.IntListValidator.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.allow_single,)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexvalidators.IntListValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexvalidators.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, allow_single=self.allow_single)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.IntegerValidator","title":"<code>IntegerValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> Source code in <code>prettyqt\\custom_validators\\integervalidator.py</code> <pre><code>class IntegerValidator(gui.Validator):\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself.range: tuple[int | None, int | None] = (None, None)\ndef set_range(self, lower: int | None, upper: int | None):\nself.range = (lower, upper)\ndef validate(self, text: str, pos: int):\nif not text.lstrip(\"-\"):\nreturn self.State.Intermediate, text, len(text)\nif text.lstrip(\"-\").isnumeric():\nleft = float(\"-inf\") if self.range[0] is None else self.range[0]\nright = float(\"inf\") if self.range[1] is None else self.range[1]\nif left &lt;= int(text) &lt;= right:\nreturn self.State.Acceptable, text, len(text)\nreturn self.State.Invalid, text, len(text)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.integervalidator.IntegerValidator.range","title":"<code>range: tuple[int | None, int | None] = (None, None)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.integervalidator.IntegerValidator.__init__","title":"<code>__init__(parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\custom_validators\\integervalidator.py</code> <pre><code>def __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself.range: tuple[int | None, int | None] = (None, None)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.integervalidator.IntegerValidator.set_range","title":"<code>set_range(lower: int | None, upper: int | None)</code>","text":"Source code in <code>prettyqt\\custom_validators\\integervalidator.py</code> <pre><code>def set_range(self, lower: int | None, upper: int | None):\nself.range = (lower, upper)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.integervalidator.IntegerValidator.validate","title":"<code>validate(text: str, pos: int)</code>","text":"Source code in <code>prettyqt\\custom_validators\\integervalidator.py</code> <pre><code>def validate(self, text: str, pos: int):\nif not text.lstrip(\"-\"):\nreturn self.State.Intermediate, text, len(text)\nif text.lstrip(\"-\").isnumeric():\nleft = float(\"-inf\") if self.range[0] is None else self.range[0]\nright = float(\"inf\") if self.range[1] is None else self.range[1]\nif left &lt;= int(text) &lt;= right:\nreturn self.State.Acceptable, text, len(text)\nreturn self.State.Invalid, text, len(text)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.NotEmptyValidator","title":"<code>NotEmptyValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> Source code in <code>prettyqt\\custom_validators\\notemptyvalidator.py</code> <pre><code>class NotEmptyValidator(gui.Validator):\ndef __eq__(self, other: object):\nreturn isinstance(other, NotEmptyValidator)\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\nreturn (\n(self.State.Acceptable, text, pos)\nif text\nelse (self.State.Intermediate, text, pos)\n)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.notemptyvalidator.NotEmptyValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\custom_validators\\notemptyvalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn isinstance(other, NotEmptyValidator)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.notemptyvalidator.NotEmptyValidator.validate","title":"<code>validate(text: str, pos: int = 0) -&gt; tuple[QtGui.QValidator.State, str, int]</code>","text":"Source code in <code>prettyqt\\custom_validators\\notemptyvalidator.py</code> <pre><code>def validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\nreturn (\n(self.State.Acceptable, text, pos)\nif text\nelse (self.State.Intermediate, text, pos)\n)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.NotZeroValidator","title":"<code>NotZeroValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> Source code in <code>prettyqt\\custom_validators\\notzerovalidator.py</code> <pre><code>class NotZeroValidator(gui.Validator):\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\nif text == \"0\":\nreturn self.State.Intermediate, text, pos\nreturn self.State.Acceptable, text, pos\ndef __eq__(self, other: object):\nreturn isinstance(other, NotZeroValidator)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.notzerovalidator.NotZeroValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\custom_validators\\notzerovalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn isinstance(other, NotZeroValidator)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.notzerovalidator.NotZeroValidator.validate","title":"<code>validate(text: str, pos: int = 0) -&gt; tuple[QtGui.QValidator.State, str, int]</code>","text":"Source code in <code>prettyqt\\custom_validators\\notzerovalidator.py</code> <pre><code>def validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\nif text == \"0\":\nreturn self.State.Intermediate, text, pos\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.PathValidator","title":"<code>PathValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> Source code in <code>prettyqt\\custom_validators\\pathvalidator.py</code> <pre><code>class PathValidator(gui.Validator):\ndef __eq__(self, other: object):\nreturn isinstance(other, PathValidator)\ndef validate(self, text: str, pos: int = 0):\nif pathlib.Path(text).exists():\nreturn self.State.Acceptable, text, pos\nreturn self.State.Intermediate, text, pos\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.pathvalidator.PathValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\custom_validators\\pathvalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn isinstance(other, PathValidator)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.pathvalidator.PathValidator.validate","title":"<code>validate(text: str, pos: int = 0)</code>","text":"Source code in <code>prettyqt\\custom_validators\\pathvalidator.py</code> <pre><code>def validate(self, text: str, pos: int = 0):\nif pathlib.Path(text).exists():\nreturn self.State.Acceptable, text, pos\nreturn self.State.Intermediate, text, pos\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.RegexPatternValidator","title":"<code>RegexPatternValidator</code>","text":"<p>         Bases: <code>gui.Validator</code></p> Source code in <code>prettyqt\\custom_validators\\regexpatternvalidator.py</code> <pre><code>class RegexPatternValidator(gui.Validator):\nerror_occured = core.Signal(str)\npattern_updated = core.Signal(object)\ndef __repr__(self):\nreturn get_repr(self)\ndef __eq__(self, other: object):\nreturn isinstance(other, type(self))\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\n# if text == \"\":\n#     self.compiled = None\n#     return (self.Intermediate, text, pos)\ntry:\ncompiled = re.compile(text)\nexcept (re._regex_core.error, sre_constants.error) as e:\nself.error_occured.emit(str(e))\nself.pattern_updated.emit(None)\nreturn self.State.Intermediate, text, pos\nelse:\nself.error_occured.emit(\"\")\nself.pattern_updated.emit(compiled)\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexpatternvalidator.RegexPatternValidator.error_occured","title":"<code>error_occured = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexpatternvalidator.RegexPatternValidator.pattern_updated","title":"<code>pattern_updated = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexpatternvalidator.RegexPatternValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexpatternvalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn isinstance(other, type(self))\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexpatternvalidator.RegexPatternValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexpatternvalidator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/custom_validators.html#prettyqt.custom_validators.regexpatternvalidator.RegexPatternValidator.validate","title":"<code>validate(text: str, pos: int = 0) -&gt; tuple[QtGui.QValidator.State, str, int]</code>","text":"Source code in <code>prettyqt\\custom_validators\\regexpatternvalidator.py</code> <pre><code>def validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[QtGui.QValidator.State, str, int]:\n# if text == \"\":\n#     self.compiled = None\n#     return (self.Intermediate, text, pos)\ntry:\ncompiled = re.compile(text)\nexcept (re._regex_core.error, sre_constants.error) as e:\nself.error_occured.emit(str(e))\nself.pattern_updated.emit(None)\nreturn self.State.Intermediate, text, pos\nelse:\nself.error_occured.emit(\"\")\nself.pattern_updated.emit(compiled)\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"api/custom_widgets.html","title":"custom_widgets module","text":"<p>Module containing custom widget classes.</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.__all__","title":"<code>__all__ = ['Image', 'ClockLabel', 'ElidedLabel', 'ListInput', 'BoolDictToolButton', 'OptionalWidget', 'CollapsibleFrame', 'CompletionWidget', 'ExpandableLine', 'HierarchicalHeaderView', 'KeyCombinationEdit', 'SingleLineTextEdit', 'RegexLineEdit', 'RegexInput', 'MappedCheckBox', 'LogTextEdit', 'FlagSelectionWidget', 'StringOrNumberWidget', 'IconLabel', 'IconBrowser', 'IconWidget', 'RectEdit', 'PaletteEdit', 'CursorEdit', 'LocaleEdit', 'IconEdit', 'PointEdit', 'SizeEdit', 'RegionEdit', 'SizePolicyEdit', 'FlowLayout', 'BorderLayout', 'SidebarWidget', 'EnumComboBox', 'ColorComboBox', 'ColorChooserButton', 'FileChooserButton', 'FontChooserButton', 'InputAndSlider', 'SpanSlider', 'LabeledSlider', 'WaitingSpinner', 'RoundProgressBar', 'PopupInfo', 'SelectionWidget', 'ImageViewer', 'MarkdownWindow', 'CodeEditor', 'Player', 'Timeline', 'VideoSample', 'RegexEditorWidget', 'StandardIconsWidget', 'SubsequenceCompleter', 'FramelessWindow', 'FileTree']</code>  <code>module-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.BoolDictToolButton","title":"<code>BoolDictToolButton</code>","text":"<p>         Bases: <code>widgets.ToolButton</code></p> Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>class BoolDictToolButton(widgets.ToolButton):\nvalue_changed = core.Signal(dict)\ndef __init__(\nself,\n*args,\ndct: dict[str, str] | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself.button_menu = widgets.Menu()\nself.button_menu.triggered.connect(self._on_menu_click)\nself.setMenu(self.button_menu)\nself.set_popup_mode(\"instant\")\nif dct:\nself.set_dict(dct)\ndef _on_menu_click(self):\nself.value_changed.emit(self.as_dict())\ndef __getitem__(self, key: str) -&gt; bool:  # type: ignore\nreturn self.button_menu[key].isChecked()\ndef __setitem__(self, key: str, value: bool):\nself.button_menu[key].setChecked(value)\nself.value_changed.emit(self.as_dict())\ndef set_dict(self, dct: dict[str, str]):\nself.button_menu.clear()\nfor k, v in dct.items():\naction = gui.Action()\naction.set_text(v)\naction.setCheckable(True)\naction.set_id(k)\nself.button_menu.add(action)\nself.value_changed.emit(self.as_dict())\ndef as_dict(self) -&gt; dict[str, bool]:\nreturn {act.objectName(): act.isChecked() for act in self.button_menu}\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.button_menu","title":"<code>button_menu = widgets.Menu()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.value_changed","title":"<code>value_changed = core.Signal(dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.__getitem__","title":"<code>__getitem__(key: str) -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>def __getitem__(self, key: str) -&gt; bool:  # type: ignore\nreturn self.button_menu[key].isChecked()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.__init__","title":"<code>__init__(*args, dct: dict[str, str] | None = None, **kwargs: dict[str, str] | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>def __init__(\nself,\n*args,\ndct: dict[str, str] | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself.button_menu = widgets.Menu()\nself.button_menu.triggered.connect(self._on_menu_click)\nself.setMenu(self.button_menu)\nself.set_popup_mode(\"instant\")\nif dct:\nself.set_dict(dct)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.__setitem__","title":"<code>__setitem__(key: str, value: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>def __setitem__(self, key: str, value: bool):\nself.button_menu[key].setChecked(value)\nself.value_changed.emit(self.as_dict())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.as_dict","title":"<code>as_dict() -&gt; dict[str, bool]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>def as_dict(self) -&gt; dict[str, bool]:\nreturn {act.objectName(): act.isChecked() for act in self.button_menu}\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.booldicttoolbutton.BoolDictToolButton.set_dict","title":"<code>set_dict(dct: dict[str, str])</code>","text":"Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>def set_dict(self, dct: dict[str, str]):\nself.button_menu.clear()\nfor k, v in dct.items():\naction = gui.Action()\naction.set_text(v)\naction.setCheckable(True)\naction.set_id(k)\nself.button_menu.add(action)\nself.value_changed.emit(self.as_dict())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.BorderLayout","title":"<code>BorderLayout</code>","text":"<p>         Bases: <code>widgets.Layout</code></p> Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>class BorderLayout(widgets.Layout):\nclass Position(enum.IntEnum):\n\"\"\"Item position.\"\"\"\nWest = 0\nNorth = 1\nSouth = 2\nEast = 3\nCenter = 4\ndef __init__(\nself,\nparent: QtWidgets.QWidget | None = None,\nmargin: int = 0,\nspacing: int | None = None,\n):\nsuper().__init__(parent)  # type: ignore\nself.set_margin(margin)\nself.setSpacing(spacing if spacing is not None else -1)\nself.items: list[ItemWrapper] = []\ndef __del__(self):\nitem = self.takeAt(0)\nwhile item:\nitem = self.takeAt(0)\ndef addItem(self, item: QtWidgets.QWidgetItem):\nself.add_widgetitem(item, BorderLayout.Position.West)\ndef addWidget(\nself,\nwidget: QtWidgets.QWidget,\nposition: Position | None = None,\n):\nposition = BorderLayout.Position.West if position is None else position\nself.add_widgetitem(widgets.WidgetItem(widget), position)\ndef expandingDirections(self) -&gt; QtCore.Qt.Orientation:\nreturn constants.HORIZONTAL | constants.VERTICAL  # type: ignore\ndef hasHeightForWidth(self) -&gt; bool:\nreturn False\ndef count(self) -&gt; int:\nreturn len(self.items)\ndef itemAt(self, index: int) -&gt; QtWidgets.QWidgetItem | None:  # type: ignore\nreturn self.items[index].item if index &lt; len(self.items) else None\ndef minimumSize(self):\nreturn self.calculate_size(\"minimum\")\ndef setGeometry(self, rect: QtCore.QRect):\ncenter = None\neast_width = 0\nwest_width = 0\nnorth_height = 0\nsouth_height = 0\nsuper().setGeometry(rect)\nfor wrapper in self.items:\nitem = wrapper.item\nmatch wrapper.position:\ncase BorderLayout.Position.North:\ngeom = core.Rect(\nrect.x(), north_height, rect.width(), item.sizeHint().height()\n)\nitem.setGeometry(geom)\nnorth_height += item.geometry().height() + self.spacing()\ncase BorderLayout.Position.South:\ngeom = core.Rect(\nitem.geometry().x(),\nitem.geometry().y(),\nrect.width(),\nitem.sizeHint().height(),\n)\nitem.setGeometry(geom)\nsouth_height += item.geometry().height() + self.spacing()\ngeom = core.Rect(\nrect.x(),\nrect.y() + rect.height() - south_height + self.spacing(),\nitem.geometry().width(),\nitem.geometry().height(),\n)\nitem.setGeometry(geom)\ncase BorderLayout.Position.Center:\ncenter = wrapper\ncenter_height = rect.height() - north_height - south_height\nfor wrapper in self.items:\nitem = wrapper.item\nmatch wrapper.position:\ncase BorderLayout.Position.West:\ngeom = core.Rect(\nrect.x() + west_width,\nnorth_height,\nitem.sizeHint().width(),\ncenter_height,\n)\nitem.setGeometry(geom)\nwest_width += item.geometry().width() + self.spacing()\ncase BorderLayout.Position.East:\ngeom = core.Rect(\nitem.geometry().x(),\nitem.geometry().y(),\nitem.sizeHint().width(),\ncenter_height,\n)\nitem.setGeometry(geom)\neast_width += item.geometry().width() + self.spacing()\ngeom = core.Rect(\nrect.x() + rect.width() - east_width + self.spacing(),\nnorth_height,\nitem.geometry().width(),\nitem.geometry().height(),\n)\nitem.setGeometry(geom)\nif center:\nrect = core.Rect(\nwest_width,\nnorth_height,\nrect.width() - east_width - west_width,\ncenter_height,\n)\ncenter.item.setGeometry(rect)\ndef sizeHint(self) -&gt; core.Size:\nreturn self.calculate_size(\"size_hint\")\ndef takeAt(self, index: int) -&gt; QtWidgets.QWidgetItem | None:  # type: ignore\nif 0 &lt;= index &lt; len(self.items):\nlayout_struct = self.items.pop(index)\nreturn layout_struct.item\nreturn None\ndef add_widgetitem(self, item: QtWidgets.QWidgetItem, position: Position):\nself.items.append(ItemWrapper(item, position))\ndef calculate_size(self, size_type: Literal[\"minimum\", \"size_hint\"]) -&gt; core.Size:\ntotal_size = core.Size()\nfor wrapper in self.items:\nitem_size = (\nwrapper.item.minimumSize()\nif size_type == \"minimum\"\nelse wrapper.item.sizeHint()\n)\nif wrapper.position in (\nBorderLayout.Position.North,\nBorderLayout.Position.South,\nBorderLayout.Position.Center,\n):\ntotal_size.setHeight(total_size.height() + item_size.height())\nif wrapper.position in (\nBorderLayout.Position.West,\nBorderLayout.Position.East,\nBorderLayout.Position.Center,\n):\ntotal_size.setWidth(total_size.width() + item_size.width())\nreturn total_size\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.items","title":"<code>items: list[ItemWrapper] = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.Position","title":"<code>Position</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Item position.</p> Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>class Position(enum.IntEnum):\n\"\"\"Item position.\"\"\"\nWest = 0\nNorth = 1\nSouth = 2\nEast = 3\nCenter = 4\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.Position.Center","title":"<code>Center = 4</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.Position.East","title":"<code>East = 3</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.Position.North","title":"<code>North = 1</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.Position.South","title":"<code>South = 2</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.Position.West","title":"<code>West = 0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.__del__","title":"<code>__del__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def __del__(self):\nitem = self.takeAt(0)\nwhile item:\nitem = self.takeAt(0)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None, margin: int = 0, spacing: int | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def __init__(\nself,\nparent: QtWidgets.QWidget | None = None,\nmargin: int = 0,\nspacing: int | None = None,\n):\nsuper().__init__(parent)  # type: ignore\nself.set_margin(margin)\nself.setSpacing(spacing if spacing is not None else -1)\nself.items: list[ItemWrapper] = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.addItem","title":"<code>addItem(item: QtWidgets.QWidgetItem)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def addItem(self, item: QtWidgets.QWidgetItem):\nself.add_widgetitem(item, BorderLayout.Position.West)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.addWidget","title":"<code>addWidget(widget: QtWidgets.QWidget, position: Position | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def addWidget(\nself,\nwidget: QtWidgets.QWidget,\nposition: Position | None = None,\n):\nposition = BorderLayout.Position.West if position is None else position\nself.add_widgetitem(widgets.WidgetItem(widget), position)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.add_widgetitem","title":"<code>add_widgetitem(item: QtWidgets.QWidgetItem, position: Position)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def add_widgetitem(self, item: QtWidgets.QWidgetItem, position: Position):\nself.items.append(ItemWrapper(item, position))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.calculate_size","title":"<code>calculate_size(size_type: Literal['minimum', 'size_hint']) -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def calculate_size(self, size_type: Literal[\"minimum\", \"size_hint\"]) -&gt; core.Size:\ntotal_size = core.Size()\nfor wrapper in self.items:\nitem_size = (\nwrapper.item.minimumSize()\nif size_type == \"minimum\"\nelse wrapper.item.sizeHint()\n)\nif wrapper.position in (\nBorderLayout.Position.North,\nBorderLayout.Position.South,\nBorderLayout.Position.Center,\n):\ntotal_size.setHeight(total_size.height() + item_size.height())\nif wrapper.position in (\nBorderLayout.Position.West,\nBorderLayout.Position.East,\nBorderLayout.Position.Center,\n):\ntotal_size.setWidth(total_size.width() + item_size.width())\nreturn total_size\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.count","title":"<code>count() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def count(self) -&gt; int:\nreturn len(self.items)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.expandingDirections","title":"<code>expandingDirections() -&gt; QtCore.Qt.Orientation</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def expandingDirections(self) -&gt; QtCore.Qt.Orientation:\nreturn constants.HORIZONTAL | constants.VERTICAL  # type: ignore\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.hasHeightForWidth","title":"<code>hasHeightForWidth() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def hasHeightForWidth(self) -&gt; bool:\nreturn False\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.itemAt","title":"<code>itemAt(index: int) -&gt; QtWidgets.QWidgetItem | None</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def itemAt(self, index: int) -&gt; QtWidgets.QWidgetItem | None:  # type: ignore\nreturn self.items[index].item if index &lt; len(self.items) else None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.minimumSize","title":"<code>minimumSize()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def minimumSize(self):\nreturn self.calculate_size(\"minimum\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.setGeometry","title":"<code>setGeometry(rect: QtCore.QRect)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def setGeometry(self, rect: QtCore.QRect):\ncenter = None\neast_width = 0\nwest_width = 0\nnorth_height = 0\nsouth_height = 0\nsuper().setGeometry(rect)\nfor wrapper in self.items:\nitem = wrapper.item\nmatch wrapper.position:\ncase BorderLayout.Position.North:\ngeom = core.Rect(\nrect.x(), north_height, rect.width(), item.sizeHint().height()\n)\nitem.setGeometry(geom)\nnorth_height += item.geometry().height() + self.spacing()\ncase BorderLayout.Position.South:\ngeom = core.Rect(\nitem.geometry().x(),\nitem.geometry().y(),\nrect.width(),\nitem.sizeHint().height(),\n)\nitem.setGeometry(geom)\nsouth_height += item.geometry().height() + self.spacing()\ngeom = core.Rect(\nrect.x(),\nrect.y() + rect.height() - south_height + self.spacing(),\nitem.geometry().width(),\nitem.geometry().height(),\n)\nitem.setGeometry(geom)\ncase BorderLayout.Position.Center:\ncenter = wrapper\ncenter_height = rect.height() - north_height - south_height\nfor wrapper in self.items:\nitem = wrapper.item\nmatch wrapper.position:\ncase BorderLayout.Position.West:\ngeom = core.Rect(\nrect.x() + west_width,\nnorth_height,\nitem.sizeHint().width(),\ncenter_height,\n)\nitem.setGeometry(geom)\nwest_width += item.geometry().width() + self.spacing()\ncase BorderLayout.Position.East:\ngeom = core.Rect(\nitem.geometry().x(),\nitem.geometry().y(),\nitem.sizeHint().width(),\ncenter_height,\n)\nitem.setGeometry(geom)\neast_width += item.geometry().width() + self.spacing()\ngeom = core.Rect(\nrect.x() + rect.width() - east_width + self.spacing(),\nnorth_height,\nitem.geometry().width(),\nitem.geometry().height(),\n)\nitem.setGeometry(geom)\nif center:\nrect = core.Rect(\nwest_width,\nnorth_height,\nrect.width() - east_width - west_width,\ncenter_height,\n)\ncenter.item.setGeometry(rect)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.sizeHint","title":"<code>sizeHint() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def sizeHint(self) -&gt; core.Size:\nreturn self.calculate_size(\"size_hint\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.borderlayout.BorderLayout.takeAt","title":"<code>takeAt(index: int) -&gt; QtWidgets.QWidgetItem | None</code>","text":"Source code in <code>prettyqt\\custom_widgets\\borderlayout.py</code> <pre><code>def takeAt(self, index: int) -&gt; QtWidgets.QWidgetItem | None:  # type: ignore\nif 0 &lt;= index &lt; len(self.items):\nlayout_struct = self.items.pop(index)\nreturn layout_struct.item\nreturn None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ClockLabel","title":"<code>ClockLabel</code>","text":"<p>         Bases: <code>widgets.Label</code></p> Source code in <code>prettyqt\\custom_widgets\\clocklabel.py</code> <pre><code>class ClockLabel(widgets.Label):\ndef __init__(self, *args, time_format: str = \"hh:mm:ss\", **kwargs):\nself._format = time_format\nsuper().__init__(*args, **kwargs)\nself.startTimer(1000)\ndef timerEvent(self, e):\ntime = core.Time.get_current_time()\nself.set_text(time.toString(self._format))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.clocklabel.ClockLabel.__init__","title":"<code>__init__(*args, time_format: str = 'hh:mm:ss', **kwargs: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\clocklabel.py</code> <pre><code>def __init__(self, *args, time_format: str = \"hh:mm:ss\", **kwargs):\nself._format = time_format\nsuper().__init__(*args, **kwargs)\nself.startTimer(1000)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.clocklabel.ClockLabel.timerEvent","title":"<code>timerEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\clocklabel.py</code> <pre><code>def timerEvent(self, e):\ntime = core.Time.get_current_time()\nself.set_text(time.toString(self._format))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.CodeEditor","title":"<code>CodeEditor</code>","text":"<p>         Bases: <code>widgets.PlainTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>class CodeEditor(widgets.PlainTextEdit):\ndef __init__(self, language: str = \"python\", **kwargs):\nsuper().__init__(**kwargs)\nself.line_area = LineNumberArea(self)\nself.blockCountChanged.connect(self.update_line_area_width)\nself.updateRequest.connect(self.update_line_area)\nself.set_font(\"Consolas\")\nself.update_line_area_width(0)\nself.set_current_line_color(gui.Color(128, 128, 128, 20))\nself.set_syntaxhighlighter(language)\ndef resizeEvent(self, event):\nsuper().resizeEvent(event)\ncr = self.contentsRect()\nrect = core.Rect(cr.left(), cr.top(), self.line_area_width(), cr.height())\nself.line_area.setGeometry(rect)\ndef text(self) -&gt; str:\nreturn self.toPlainText()\ndef line_area_width(self) -&gt; int:\ndigits = len(str(self.blockCount()))\nreturn 3 + self.fontMetrics().boundingRect(\"9\").width() * digits\ndef update_line_area_width(self, _):\nself.setViewportMargins(self.line_area_width(), 0, 0, 0)\ndef update_line_area(self, rect: QtCore.QRect, dy: int):\nif dy:\nself.line_area.scroll(0, dy)\nelse:\nself.line_area.update(0, rect.y(), self.line_area.width(), rect.height())\nif rect.contains(self.viewport().rect()):\nself.update_line_area_width(0)\ndef line_area_paintevent(self, event):\nwith gui.Painter(self.line_area) as painter:\npainter.fill_rect(event.rect(), \"lightgray\")\nblock = self.firstVisibleBlock()\nblock_number = block.blockNumber()\ntop = self.blockBoundingGeometry(block).translated(self.contentOffset()).top()\nbottom = top + self.blockBoundingRect(block).height()\nwidth = self.line_area.width()\nheight = self.fontMetrics().height()\npainter.set_color(\"black\")\nwhile block.isValid() and (top &lt;= event.rect().bottom()):\nif block.isVisible() and (bottom &gt;= event.rect().top()):\nnumber = str(block_number + 1)\npainter.drawText(\n0, int(top), width, height, constants.ALIGN_RIGHT, number\n)\nblock = block.next()\ntop = bottom\nbottom = top + self.blockBoundingRect(block).height()\nblock_number += 1\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.line_area","title":"<code>line_area = LineNumberArea(self)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.__init__","title":"<code>__init__(language: str = 'python', **kwargs: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def __init__(self, language: str = \"python\", **kwargs):\nsuper().__init__(**kwargs)\nself.line_area = LineNumberArea(self)\nself.blockCountChanged.connect(self.update_line_area_width)\nself.updateRequest.connect(self.update_line_area)\nself.set_font(\"Consolas\")\nself.update_line_area_width(0)\nself.set_current_line_color(gui.Color(128, 128, 128, 20))\nself.set_syntaxhighlighter(language)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.line_area_paintevent","title":"<code>line_area_paintevent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def line_area_paintevent(self, event):\nwith gui.Painter(self.line_area) as painter:\npainter.fill_rect(event.rect(), \"lightgray\")\nblock = self.firstVisibleBlock()\nblock_number = block.blockNumber()\ntop = self.blockBoundingGeometry(block).translated(self.contentOffset()).top()\nbottom = top + self.blockBoundingRect(block).height()\nwidth = self.line_area.width()\nheight = self.fontMetrics().height()\npainter.set_color(\"black\")\nwhile block.isValid() and (top &lt;= event.rect().bottom()):\nif block.isVisible() and (bottom &gt;= event.rect().top()):\nnumber = str(block_number + 1)\npainter.drawText(\n0, int(top), width, height, constants.ALIGN_RIGHT, number\n)\nblock = block.next()\ntop = bottom\nbottom = top + self.blockBoundingRect(block).height()\nblock_number += 1\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.line_area_width","title":"<code>line_area_width() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def line_area_width(self) -&gt; int:\ndigits = len(str(self.blockCount()))\nreturn 3 + self.fontMetrics().boundingRect(\"9\").width() * digits\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.resizeEvent","title":"<code>resizeEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def resizeEvent(self, event):\nsuper().resizeEvent(event)\ncr = self.contentsRect()\nrect = core.Rect(cr.left(), cr.top(), self.line_area_width(), cr.height())\nself.line_area.setGeometry(rect)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.text","title":"<code>text() -&gt; str</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def text(self) -&gt; str:\nreturn self.toPlainText()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.update_line_area","title":"<code>update_line_area(rect: QtCore.QRect, dy: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def update_line_area(self, rect: QtCore.QRect, dy: int):\nif dy:\nself.line_area.scroll(0, dy)\nelse:\nself.line_area.update(0, rect.y(), self.line_area.width(), rect.height())\nif rect.contains(self.viewport().rect()):\nself.update_line_area_width(0)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.codeeditor.CodeEditor.update_line_area_width","title":"<code>update_line_area_width(_)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>def update_line_area_width(self, _):\nself.setViewportMargins(self.line_area_width(), 0, 0, 0)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.CollapsibleFrame","title":"<code>CollapsibleFrame</code>","text":"<p>         Bases: <code>widgets.Frame</code></p> Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>class CollapsibleFrame(widgets.Frame):\nexpanded = core.Signal()\ncollapsed = core.Signal()\ndef __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(**kwargs)\nself.set_frame_shape(\"styled_panel\")\nself.set_frame_shadow(\"plain\")\n# layout\n_layout = widgets.VBoxLayout()\n_layout.set_margin(0)\n_layout.setSpacing(0)\nself.setLayout(_layout)\n# button\nself._button = widgets.ToolButton(\nself,\nclicked=self.on_button_click,\narrow_type=\"right\",\nauto_raise=False,\ntext=text,\nvisible=True,\n)\nself._button.set_style(\"text_beside_icon\")\nself.set_size_policy(\"minimum_expanding\", \"fixed\")\n_layout.addWidget(self._button, 0)\n# group box\nself._panel = widgets.Widget(self, visible=False)\n_layout.addWidget(self._panel)\nself._panel_layout = widgets.VBoxLayout()\nself._panel_layout.set_margin(1)\nself._panel_layout.setSpacing(2)\nself._panel.setLayout(self._panel_layout)\n# connect signals\n# private state variables\nself._is_collapsed = True\ndef set_title(self, title: str):\nself._button.set_text(title)\ndef add_widget(self, widget: widgets.Widget):\nself._panel_layout.addWidget(widget)\ndef remove_widget(self, widget: widgets.Widget):\nself._panel_layout.removeWidget(widget)\ndef is_expanded(self) -&gt; bool:\nreturn not self._is_collapsed\ndef expand(self):\nself._button.set_arrow_type(\"down\")\nself._panel.setVisible(True)\nself._is_collapsed = False\nself.set_size_policy(\"minimum_expanding\", \"minimum_expanding\")\ndef collapse(self):\nself._panel.setVisible(False)\nself._button.set_arrow_type(\"right\")\nself._is_collapsed = True\nself.set_size_policy(\"preferred\", \"preferred\")\n@core.Slot()\ndef on_button_click(self):\nif self._is_collapsed:\nself.expand()\nself.expanded.emit()\nelse:\nself.collapse()\nself.collapsed.emit()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.collapsed","title":"<code>collapsed = core.Signal()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.expanded","title":"<code>expanded = core.Signal()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.__init__","title":"<code>__init__(text: str = '', **kwargs: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(**kwargs)\nself.set_frame_shape(\"styled_panel\")\nself.set_frame_shadow(\"plain\")\n# layout\n_layout = widgets.VBoxLayout()\n_layout.set_margin(0)\n_layout.setSpacing(0)\nself.setLayout(_layout)\n# button\nself._button = widgets.ToolButton(\nself,\nclicked=self.on_button_click,\narrow_type=\"right\",\nauto_raise=False,\ntext=text,\nvisible=True,\n)\nself._button.set_style(\"text_beside_icon\")\nself.set_size_policy(\"minimum_expanding\", \"fixed\")\n_layout.addWidget(self._button, 0)\n# group box\nself._panel = widgets.Widget(self, visible=False)\n_layout.addWidget(self._panel)\nself._panel_layout = widgets.VBoxLayout()\nself._panel_layout.set_margin(1)\nself._panel_layout.setSpacing(2)\nself._panel.setLayout(self._panel_layout)\n# connect signals\n# private state variables\nself._is_collapsed = True\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.add_widget","title":"<code>add_widget(widget: widgets.Widget)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def add_widget(self, widget: widgets.Widget):\nself._panel_layout.addWidget(widget)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.collapse","title":"<code>collapse()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def collapse(self):\nself._panel.setVisible(False)\nself._button.set_arrow_type(\"right\")\nself._is_collapsed = True\nself.set_size_policy(\"preferred\", \"preferred\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.expand","title":"<code>expand()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def expand(self):\nself._button.set_arrow_type(\"down\")\nself._panel.setVisible(True)\nself._is_collapsed = False\nself.set_size_policy(\"minimum_expanding\", \"minimum_expanding\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.is_expanded","title":"<code>is_expanded() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def is_expanded(self) -&gt; bool:\nreturn not self._is_collapsed\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.on_button_click","title":"<code>on_button_click()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>@core.Slot()\ndef on_button_click(self):\nif self._is_collapsed:\nself.expand()\nself.expanded.emit()\nelse:\nself.collapse()\nself.collapsed.emit()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.remove_widget","title":"<code>remove_widget(widget: widgets.Widget)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def remove_widget(self, widget: widgets.Widget):\nself._panel_layout.removeWidget(widget)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.collapsibleframe.CollapsibleFrame.set_title","title":"<code>set_title(title: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>def set_title(self, title: str):\nself._button.set_text(title)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ColorChooserButton","title":"<code>ColorChooserButton</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>class ColorChooserButton(widgets.Widget):\nvalue_changed = core.Signal(gui.Color)\ndef __init__(\nself,\n*args,\ncolor: datatypes.ColorType | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_regex_validator(r\"^#(?:[0-9a-fA-F]{6})$\")\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-color-fill\", triggered=self.choose_color)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\nself._current_color: gui.Color = gui.Color(\"white\")\nif color is not None:\nself.set_current_color(color)\ndef __repr__(self):\nreturn get_repr(self, self._current_color)\n@core.Slot()\ndef choose_color(self):\ndlg = widgets.ColorDialog()\nif self._current_color:\ndlg.setCurrentColor(self._current_color)\nif dlg.main_loop():\nnew_color = dlg.current_color()\nself.set_current_color(new_color)\nself.value_changed.emit(new_color)\ndef set_current_color(self, color: datatypes.ColorType):\nself._current_color = colors.get_color(color)\nself.lineedit.set_text(self._current_color.name().upper())\nicon = iconprovider.for_color(self._current_color)\nself.button.set_icon(icon)\ndef is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\ndef get_value(self) -&gt; gui.Color:\nreturn self._current_color\ndef set_value(self, value: datatypes.ColorType):\nself.set_current_color(value)\ncurrent_color = core.Property(QtGui.QColor, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.button","title":"<code>button = widgets.ToolButton()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.current_color","title":"<code>current_color = core.Property(QtGui.QColor, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.lineedit","title":"<code>lineedit = widgets.LineEdit()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.value_changed","title":"<code>value_changed = core.Signal(gui.Color)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.__init__","title":"<code>__init__(*args, color: datatypes.ColorType | None = None, **kwargs: datatypes.ColorType | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>def __init__(\nself,\n*args,\ncolor: datatypes.ColorType | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_regex_validator(r\"^#(?:[0-9a-fA-F]{6})$\")\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-color-fill\", triggered=self.choose_color)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\nself._current_color: gui.Color = gui.Color(\"white\")\nif color is not None:\nself.set_current_color(color)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self._current_color)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.choose_color","title":"<code>choose_color()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>@core.Slot()\ndef choose_color(self):\ndlg = widgets.ColorDialog()\nif self._current_color:\ndlg.setCurrentColor(self._current_color)\nif dlg.main_loop():\nnew_color = dlg.current_color()\nself.set_current_color(new_color)\nself.value_changed.emit(new_color)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.get_value","title":"<code>get_value() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>def get_value(self) -&gt; gui.Color:\nreturn self._current_color\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.set_current_color","title":"<code>set_current_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>def set_current_color(self, color: datatypes.ColorType):\nself._current_color = colors.get_color(color)\nself.lineedit.set_text(self._current_color.name().upper())\nicon = iconprovider.for_color(self._current_color)\nself.button.set_icon(icon)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorchooserbutton.ColorChooserButton.set_value","title":"<code>set_value(value: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorchooserbutton.py</code> <pre><code>def set_value(self, value: datatypes.ColorType):\nself.set_current_color(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ColorComboBox","title":"<code>ColorComboBox</code>","text":"<p>         Bases: <code>widgets.ComboBox</code></p> Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>class ColorComboBox(widgets.ComboBox):\nvalue_changed = core.Signal(gui.Color)\ndef __init__(\nself,\ncolor: datatypes.ColorType | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._current_color: gui.Color = gui.Color(\"white\")\nfor i in gui.Color.colorNames():\nself.addItem(iconprovider.for_color(i), i)\nif color is not None:\nself.set_current_color(color)\nself.currentTextChanged.connect(self.set_current_color)\ndef __repr__(self):\nreturn get_repr(self, self._current_color)\ndef clear(self):\nself._current_color = gui.Color(\"white\")\nsuper().clear()\nfor i in gui.Color.colorNames():\nself.addItem(iconprovider.for_color(i), i)\ndef set_current_color(self, color: datatypes.ColorType):\nself._current_color = colors.get_color(color)\nfor color_name in gui.Color.colorNames():\nif gui.Color(color_name) == self._current_color:\nself.setCurrentText(color_name)\nreturn\ndef is_valid(self) -&gt; bool:\nreturn self._current_color.isValid()\ndef get_value(self) -&gt; gui.Color:\nreturn self._current_color\ndef set_value(self, value: datatypes.ColorType):\nself.set_current_color(value)\ncurrent_color = core.Property(QtGui.QColor, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.current_color","title":"<code>current_color = core.Property(QtGui.QColor, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.value_changed","title":"<code>value_changed = core.Signal(gui.Color)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.__init__","title":"<code>__init__(color: datatypes.ColorType | None = None, **kwargs: datatypes.ColorType | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def __init__(\nself,\ncolor: datatypes.ColorType | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._current_color: gui.Color = gui.Color(\"white\")\nfor i in gui.Color.colorNames():\nself.addItem(iconprovider.for_color(i), i)\nif color is not None:\nself.set_current_color(color)\nself.currentTextChanged.connect(self.set_current_color)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self._current_color)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.clear","title":"<code>clear()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def clear(self):\nself._current_color = gui.Color(\"white\")\nsuper().clear()\nfor i in gui.Color.colorNames():\nself.addItem(iconprovider.for_color(i), i)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.get_value","title":"<code>get_value() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def get_value(self) -&gt; gui.Color:\nreturn self._current_color\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn self._current_color.isValid()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.set_current_color","title":"<code>set_current_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def set_current_color(self, color: datatypes.ColorType):\nself._current_color = colors.get_color(color)\nfor color_name in gui.Color.colorNames():\nif gui.Color(color_name) == self._current_color:\nself.setCurrentText(color_name)\nreturn\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.colorcombobox.ColorComboBox.set_value","title":"<code>set_value(value: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\colorcombobox.py</code> <pre><code>def set_value(self, value: datatypes.ColorType):\nself.set_current_color(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.CompletionWidget","title":"<code>CompletionWidget</code>","text":"<p>         Bases: <code>widgets.ListWidget</code></p> Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>class CompletionWidget(widgets.ListWidget):\ndef __init__(self, textedit: QtWidgets.QTextEdit | QtWidgets.QPlainTextEdit):\nsuper().__init__(parent=textedit)\nself._text_edit = textedit\nself.set_edit_triggers(\"none\")\nself.set_selection_behavior(\"rows\")\nself.set_selection_mode(\"single\")\n# We need Popup style to ensure correct mouse interaction\n# (dialog would dissappear on mouse click with ToolTip style)\nself.setWindowFlags(QtCore.Qt.WindowType.Popup)\nself.setAttribute(QtCore.Qt.WidgetAttribute.WA_StaticContents)\noriginal_policy = self._text_edit.focusPolicy()\nself.set_focus_policy(\"none\")\nself._text_edit.setFocusPolicy(original_policy)\n# Ensure that the text edit keeps focus when widget is displayed.\nself.setFocusProxy(self._text_edit)\nself.set_frame_shadow(\"plain\")\nself.set_frame_shape(\"styled_panel\")\nself.itemActivated.connect(self._complete_current)\ndef eventFilter(self, obj, event):\n\"\"\"Handle mouse input and to auto-hide when losing focus.\"\"\"\nif obj is self and event.type() == QtCore.QEvent.Type.MouseButtonPress:\npos = self.mapToGlobal(event.pos())\ntarget = QtWidgets.QApplication.widgetAt(pos)\nif target and self.isAncestorOf(target) or target is self:\nreturn False\nelse:\nself.cancel_completion()\nreturn super().eventFilter(obj, event)\ndef keyPressEvent(self, event):\nmatch event.key():\ncase (\nQtCore.Qt.Key.Key_Return | QtCore.Qt.Key.Key_Enter | QtCore.Qt.Key.Key_Tab\n):\nself._complete_current()\ncase QtCore.Qt.Key.Key_Escape:\nself.hide()\ncase (\nQtCore.Qt.Key.Key_Up\n| QtCore.Qt.Key.Key_Down\n| QtCore.Qt.Key.Key_PageUp\n| QtCore.Qt.Key.Key_PageDown\n| QtCore.Qt.Key.Key_Home\n| QtCore.Qt.Key.Key_End\n):\nreturn super().keyPressEvent(event)\ncase _:\nQtWidgets.QApplication.sendEvent(self._text_edit, event)\n# 'QWidget' interface\ndef hideEvent(self, event):\n\"\"\"Disconnect signal handlers and event filter.\"\"\"\nsuper().hideEvent(event)\nwith contextlib.suppress(TypeError):\nself._text_edit.cursorPositionChanged.disconnect(self._update_current)\nself.removeEventFilter(self)\ndef showEvent(self, event):\n\"\"\"Connect signal handlers and event filter.\"\"\"\nsuper().showEvent(event)\nself._text_edit.cursorPositionChanged.connect(self._update_current)\nself.installEventFilter(self)\n# 'CompletionWidget' interface\ndef show_items(self, cursor, items: list[str], prefix_length: int = 0):\n\"\"\"Show the widget with 'items' at the position specified by 'cursor'.\"\"\"\npoint = self._get_top_left_position(cursor)\nself.clear()\npath_items = []\nfor item in items:\n# Check if the item could refer to a file or dir. The replacing\n# of '\"' is needed for items on Windows\npath = os.path.abspath(item.replace('\"', \"\"))\nif os.path.isfile(path) or os.path.isdir(path):\npath_items.append(item.replace('\"', \"\"))\nelse:\nlist_item = widgets.ListWidgetItem()\nlist_item.setData(QtCore.Qt.ItemDataRole.UserRole, item)  # type: ignore\n# Need to split to only show last element of a dot completion\nlist_item.setText(item.split(\".\")[-1])\nself.addItem(list_item)\ncommon_prefix = os.path.dirname(os.path.commonprefix(path_items))\nfor path_item in path_items:\nlist_item = widgets.ListWidgetItem()\nlist_item.setData(QtCore.Qt.ItemDataRole.UserRole, path_item)  # type: ignore\ntext = path_item.split(common_prefix)[-1] if common_prefix else path_item\nlist_item.setText(text)\nself.addItem(list_item)\nheight = self.sizeHint().height()\nscreen = self.get_screen()\nif screen is None:\nreturn\nscreen_rect = self.availableGeometry()\nif screen_rect.size().height() + screen_rect.y() - point.y() - height &lt; 0:\npoint = self._text_edit.mapToGlobal(self._text_edit.cursorRect().topRight())\npoint.setY(int(point.y() - height))\nscrollbar_width = self.verticalScrollBar().sizeHint().width()\nw = self.sizeHintForColumn(0) + scrollbar_width + 2 * self.frameWidth()\nself.setGeometry(point.x(), point.y(), w, height)\n# Move cursor to start of the prefix to replace it\n# when a item is selected\ncursor.movePosition(QtGui.QTextCursor.MoveOperation.Left, n=prefix_length)\nself._start_position = cursor.position()\nself.setCurrentRow(0)\nself.raise_()\nself.show()\n# Protected interface\ndef _get_top_left_position(self, cursor: QtGui.QTextCursor) -&gt; QtCore.QPoint:\n\"\"\"Get top left position for this widget.\"\"\"\npoint = self._text_edit.cursorRect(cursor).center()\npoint_size = self._text_edit.font().pointSize()\nfactor = 1.05 if os.name == \"nt\" else 0.98\ndelta = int((point_size * 1.20) ** factor)\ny = delta - (point_size // 2)\npoint.setY(int(point.y() + y))\npoint = self._text_edit.mapToGlobal(point)\nreturn point\ndef _complete_current(self):\n\"\"\"Perform the completion with the currently selected item.\"\"\"\ntext = self.currentItem().data(QtCore.Qt.ItemDataRole.UserRole)  # type: ignore\nself._current_text_cursor().insertText(text)\nself.hide()\ndef _current_text_cursor(self) -&gt; QtGui.QTextCursor:\n\"\"\"Return a cursor with text between the start  and currentposition selected.\"\"\"\ncursor = self._text_edit.textCursor()\nif cursor.position() &gt;= self._start_position:\ncursor.setPosition(self._start_position, gui.TextCursor.MoveMode.KeepAnchor)\nreturn cursor\ndef _update_current(self):\n\"\"\"Update the current item based on the current text and the widget position.\"\"\"\n# Update widget position\ncursor = self._text_edit.textCursor()\npoint = self._get_top_left_position(cursor)\nself.move(point)\nif prefix := self._current_text_cursor().selection().toPlainText():\nflags = (\nQtCore.Qt.MatchFlag.MatchStartsWith  # type: ignore\n| QtCore.Qt.MatchFlag.MatchCaseSensitive\n)\nif items := self.findItems(prefix, flags):\nself.setCurrentItem(items[0])\nelse:\nself.hide()\nelse:\nself.hide()\ndef cancel_completion(self):\nself.hide()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.__init__","title":"<code>__init__(textedit: QtWidgets.QTextEdit | QtWidgets.QPlainTextEdit)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def __init__(self, textedit: QtWidgets.QTextEdit | QtWidgets.QPlainTextEdit):\nsuper().__init__(parent=textedit)\nself._text_edit = textedit\nself.set_edit_triggers(\"none\")\nself.set_selection_behavior(\"rows\")\nself.set_selection_mode(\"single\")\n# We need Popup style to ensure correct mouse interaction\n# (dialog would dissappear on mouse click with ToolTip style)\nself.setWindowFlags(QtCore.Qt.WindowType.Popup)\nself.setAttribute(QtCore.Qt.WidgetAttribute.WA_StaticContents)\noriginal_policy = self._text_edit.focusPolicy()\nself.set_focus_policy(\"none\")\nself._text_edit.setFocusPolicy(original_policy)\n# Ensure that the text edit keeps focus when widget is displayed.\nself.setFocusProxy(self._text_edit)\nself.set_frame_shadow(\"plain\")\nself.set_frame_shape(\"styled_panel\")\nself.itemActivated.connect(self._complete_current)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.cancel_completion","title":"<code>cancel_completion()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def cancel_completion(self):\nself.hide()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.eventFilter","title":"<code>eventFilter(obj, event)</code>","text":"<p>Handle mouse input and to auto-hide when losing focus.</p> Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def eventFilter(self, obj, event):\n\"\"\"Handle mouse input and to auto-hide when losing focus.\"\"\"\nif obj is self and event.type() == QtCore.QEvent.Type.MouseButtonPress:\npos = self.mapToGlobal(event.pos())\ntarget = QtWidgets.QApplication.widgetAt(pos)\nif target and self.isAncestorOf(target) or target is self:\nreturn False\nelse:\nself.cancel_completion()\nreturn super().eventFilter(obj, event)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.hideEvent","title":"<code>hideEvent(event)</code>","text":"<p>Disconnect signal handlers and event filter.</p> Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def hideEvent(self, event):\n\"\"\"Disconnect signal handlers and event filter.\"\"\"\nsuper().hideEvent(event)\nwith contextlib.suppress(TypeError):\nself._text_edit.cursorPositionChanged.disconnect(self._update_current)\nself.removeEventFilter(self)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.keyPressEvent","title":"<code>keyPressEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def keyPressEvent(self, event):\nmatch event.key():\ncase (\nQtCore.Qt.Key.Key_Return | QtCore.Qt.Key.Key_Enter | QtCore.Qt.Key.Key_Tab\n):\nself._complete_current()\ncase QtCore.Qt.Key.Key_Escape:\nself.hide()\ncase (\nQtCore.Qt.Key.Key_Up\n| QtCore.Qt.Key.Key_Down\n| QtCore.Qt.Key.Key_PageUp\n| QtCore.Qt.Key.Key_PageDown\n| QtCore.Qt.Key.Key_Home\n| QtCore.Qt.Key.Key_End\n):\nreturn super().keyPressEvent(event)\ncase _:\nQtWidgets.QApplication.sendEvent(self._text_edit, event)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.showEvent","title":"<code>showEvent(event)</code>","text":"<p>Connect signal handlers and event filter.</p> Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def showEvent(self, event):\n\"\"\"Connect signal handlers and event filter.\"\"\"\nsuper().showEvent(event)\nself._text_edit.cursorPositionChanged.connect(self._update_current)\nself.installEventFilter(self)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.completionwidget.CompletionWidget.show_items","title":"<code>show_items(cursor, items: list[str], prefix_length: int = 0)</code>","text":"<p>Show the widget with 'items' at the position specified by 'cursor'.</p> Source code in <code>prettyqt\\custom_widgets\\completionwidget.py</code> <pre><code>def show_items(self, cursor, items: list[str], prefix_length: int = 0):\n\"\"\"Show the widget with 'items' at the position specified by 'cursor'.\"\"\"\npoint = self._get_top_left_position(cursor)\nself.clear()\npath_items = []\nfor item in items:\n# Check if the item could refer to a file or dir. The replacing\n# of '\"' is needed for items on Windows\npath = os.path.abspath(item.replace('\"', \"\"))\nif os.path.isfile(path) or os.path.isdir(path):\npath_items.append(item.replace('\"', \"\"))\nelse:\nlist_item = widgets.ListWidgetItem()\nlist_item.setData(QtCore.Qt.ItemDataRole.UserRole, item)  # type: ignore\n# Need to split to only show last element of a dot completion\nlist_item.setText(item.split(\".\")[-1])\nself.addItem(list_item)\ncommon_prefix = os.path.dirname(os.path.commonprefix(path_items))\nfor path_item in path_items:\nlist_item = widgets.ListWidgetItem()\nlist_item.setData(QtCore.Qt.ItemDataRole.UserRole, path_item)  # type: ignore\ntext = path_item.split(common_prefix)[-1] if common_prefix else path_item\nlist_item.setText(text)\nself.addItem(list_item)\nheight = self.sizeHint().height()\nscreen = self.get_screen()\nif screen is None:\nreturn\nscreen_rect = self.availableGeometry()\nif screen_rect.size().height() + screen_rect.y() - point.y() - height &lt; 0:\npoint = self._text_edit.mapToGlobal(self._text_edit.cursorRect().topRight())\npoint.setY(int(point.y() - height))\nscrollbar_width = self.verticalScrollBar().sizeHint().width()\nw = self.sizeHintForColumn(0) + scrollbar_width + 2 * self.frameWidth()\nself.setGeometry(point.x(), point.y(), w, height)\n# Move cursor to start of the prefix to replace it\n# when a item is selected\ncursor.movePosition(QtGui.QTextCursor.MoveOperation.Left, n=prefix_length)\nself._start_position = cursor.position()\nself.setCurrentRow(0)\nself.raise_()\nself.show()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.CursorEdit","title":"<code>CursorEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\cursoredit.py</code> <pre><code>class CursorEdit(widgets.Widget):\nvalue_changed = core.Signal(gui.Cursor)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; gui.Cursor:\nreturn self._value\ndef set_value(self, value: gui.Cursor):\nself._value = value\nvalue = core.Property(gui.Cursor, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.cursoredit.CursorEdit.value","title":"<code>value = core.Property(gui.Cursor, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.cursoredit.CursorEdit.value_changed","title":"<code>value_changed = core.Signal(gui.Cursor)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.cursoredit.CursorEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\cursoredit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.cursoredit.CursorEdit.get_value","title":"<code>get_value() -&gt; gui.Cursor</code>","text":"Source code in <code>prettyqt\\custom_widgets\\cursoredit.py</code> <pre><code>def get_value(self) -&gt; gui.Cursor:\nreturn self._value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.cursoredit.CursorEdit.set_value","title":"<code>set_value(value: gui.Cursor)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\cursoredit.py</code> <pre><code>def set_value(self, value: gui.Cursor):\nself._value = value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ElidedLabel","title":"<code>ElidedLabel</code>","text":"<p>         Bases: <code>widgets.Frame</code></p> Source code in <code>prettyqt\\custom_widgets\\elidedlabel.py</code> <pre><code>class ElidedLabel(widgets.Frame):\nelision_changed = core.Signal(bool)\ndef __init__(\nself,\ntext: str = \"\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.elided = False\nself._text = text\nself.set_size_policy(\"expanding\", \"preferred\")\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef set_text(self, text: str):\nself._text = text\nself.update()\ndef get_text(self) -&gt; str:\nreturn self._text\ntext = core.Property(str, get_text, set_text)\ndef paintEvent(self, event):\nsuper().paintEvent(event)\nwith gui.Painter(self) as painter:\nmetrics = painter.get_font_metrics()\ndid_elide = False\nline_spacing = metrics.lineSpacing()\ny = 0\nlayout = gui.TextLayout(self._text, painter.font())\nwith layout.process_layout():\nwhile True:\nline = layout.createLine()\nif not line.isValid():\nbreak\nline.setLineWidth(self.width())\nnext_line_y = y + line_spacing\nif self.height() &gt;= next_line_y + line_spacing:\nline.draw(painter, core.PointF(0, y))\ny = next_line_y\nelse:\nlast_line = self._text[line.textStart() :]\nelided_line = metrics.elided_text(\nlast_line, \"right\", self.width()\n)\npainter.drawText(0, y + metrics.ascent(), elided_line)\nline = layout.createLine()\ndid_elide = line.isValid()\nbreak\nif did_elide != self.elided:\nself.elided = did_elide\nself.elision_changed.emit(did_elide)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.elided","title":"<code>elided = False</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.elision_changed","title":"<code>elision_changed = core.Signal(bool)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.text","title":"<code>text = core.Property(str, get_text, set_text)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.__init__","title":"<code>__init__(text: str = '', parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\elidedlabel.py</code> <pre><code>def __init__(\nself,\ntext: str = \"\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.elided = False\nself._text = text\nself.set_size_policy(\"expanding\", \"preferred\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\elidedlabel.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.get_text","title":"<code>get_text() -&gt; str</code>","text":"Source code in <code>prettyqt\\custom_widgets\\elidedlabel.py</code> <pre><code>def get_text(self) -&gt; str:\nreturn self._text\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.paintEvent","title":"<code>paintEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\elidedlabel.py</code> <pre><code>def paintEvent(self, event):\nsuper().paintEvent(event)\nwith gui.Painter(self) as painter:\nmetrics = painter.get_font_metrics()\ndid_elide = False\nline_spacing = metrics.lineSpacing()\ny = 0\nlayout = gui.TextLayout(self._text, painter.font())\nwith layout.process_layout():\nwhile True:\nline = layout.createLine()\nif not line.isValid():\nbreak\nline.setLineWidth(self.width())\nnext_line_y = y + line_spacing\nif self.height() &gt;= next_line_y + line_spacing:\nline.draw(painter, core.PointF(0, y))\ny = next_line_y\nelse:\nlast_line = self._text[line.textStart() :]\nelided_line = metrics.elided_text(\nlast_line, \"right\", self.width()\n)\npainter.drawText(0, y + metrics.ascent(), elided_line)\nline = layout.createLine()\ndid_elide = line.isValid()\nbreak\nif did_elide != self.elided:\nself.elided = did_elide\nself.elision_changed.emit(did_elide)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.elidedlabel.ElidedLabel.set_text","title":"<code>set_text(text: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\elidedlabel.py</code> <pre><code>def set_text(self, text: str):\nself._text = text\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.EnumComboBox","title":"<code>EnumComboBox</code>","text":"<p>         Bases: <code>widgets.ComboBox</code></p> <p>ComboBox presenting options from a python Enum.</p> <p>If the Enum class does not implement <code>__str__</code> then a human readable name is created from the name of the enum member, replacing underscores with spaces.</p> Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>class EnumComboBox(widgets.ComboBox):\n\"\"\"ComboBox presenting options from a python Enum.\n    If the Enum class does not implement `__str__` then a human readable name\n    is created from the name of the enum member, replacing underscores with spaces.\n    \"\"\"\n# current_enum_changed = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nself._enum_class = None\nself._allow_none = False\nsuper().__init__(*args, **kwargs)\n# self.currentIndexChanged.connect(self._emit_signal)\ndef __repr__(self):\nreturn get_repr(self, enum_class=self._enum_class, allow_none=self._allow_none)\ndef set_allow_none(self, value: bool):\nself._allow_none = value\ndef is_none_allowed(self) -&gt; bool:\nreturn self._allow_none\ndef set_enum_class(self, enum: enum.EnumMeta | None):\n\"\"\"Set enum class from which members value should be selected.\"\"\"\nself._enum_class = enum\nif self._allow_none and enum is not None:\nsuper().addItem(NONE_STRING)\nitems = [i.name.replace(\"_\", \" \") for i in self._enum_class.__members__.values()]\nsuper().addItems(items)\ndef get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\ndef is_optional(self) -&gt; bool:\n\"\"\"Return if current enum is with optional annotation.\"\"\"\nreturn self._allow_none\ndef clear(self):\nself._enum_class = None\nself._allow_none = False\nsuper().clear()\ndef get_value(self) -&gt; EnumType | None:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nclass_members = list(self._enum_class.__members__.values())\nif not self._allow_none:\nreturn class_members[self.currentIndex()]\nis_none = self.currentText() == NONE_STRING\nreturn None if is_none else class_members[self.currentIndex() - 1]\ndef set_value(self, value: EnumType | None) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif self._enum_class is None:\nraise RuntimeError(\"Uninitialized enum class. Use `set_enum_class` first.\")\nif value is None and self._allow_none:\nself.setCurrentIndex(0)\nreturn\nif not isinstance(value, self._enum_class):\nraise TypeError(\n\"setValue(self, Enum): argument 1 has unexpected type \"\nf\"{type(value).__name__!r}\"\n)\nself.setCurrentText(value.name.replace(\"_\", \" \"))\n# def _emit_signal(self):\n#     if self._enum_class is not None:\n#         self.current_enum_changed.emit(self.get_value())\ndef insertItems(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to insert items\")\ndef insertItem(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to insert item\")\ndef addItems(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to add items\")\ndef addItem(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to add item\")\ndef setInsertPolicy(self, policy):\nraise RuntimeError(\"EnumComboBox does not allow to insert item\")\nallowNone = core.Property(bool, is_none_allowed, set_allow_none, user=True)\nenumValue = core.Property(enum.Enum, get_value, set_value, user=True)\nenumClass = core.Property(type(enum.Enum), get_enum_class, set_enum_class, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.allowNone","title":"<code>allowNone = core.Property(bool, is_none_allowed, set_allow_none, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.enumClass","title":"<code>enumClass = core.Property(type(enum.Enum), get_enum_class, set_enum_class, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.enumValue","title":"<code>enumValue = core.Property(enum.Enum, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._enum_class = None\nself._allow_none = False\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, enum_class=self._enum_class, allow_none=self._allow_none)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.addItem","title":"<code>addItem(*_, **__)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def addItem(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to add item\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.addItems","title":"<code>addItems(*_, **__)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def addItems(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to add items\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.clear","title":"<code>clear()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def clear(self):\nself._enum_class = None\nself._allow_none = False\nsuper().clear()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.get_enum_class","title":"<code>get_enum_class() -&gt; enum.EnumMeta | None</code>","text":"<p>Return current Enum class.</p> Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.get_value","title":"<code>get_value() -&gt; EnumType | None</code>","text":"<p>Current value as Enum member.</p> Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def get_value(self) -&gt; EnumType | None:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nclass_members = list(self._enum_class.__members__.values())\nif not self._allow_none:\nreturn class_members[self.currentIndex()]\nis_none = self.currentText() == NONE_STRING\nreturn None if is_none else class_members[self.currentIndex() - 1]\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.insertItem","title":"<code>insertItem(*_, **__)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def insertItem(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to insert item\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.insertItems","title":"<code>insertItems(*_, **__)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def insertItems(self, *_, **__):\nraise RuntimeError(\"EnumComboBox does not allow to insert items\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.is_none_allowed","title":"<code>is_none_allowed() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def is_none_allowed(self) -&gt; bool:\nreturn self._allow_none\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.is_optional","title":"<code>is_optional() -&gt; bool</code>","text":"<p>Return if current enum is with optional annotation.</p> Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def is_optional(self) -&gt; bool:\n\"\"\"Return if current enum is with optional annotation.\"\"\"\nreturn self._allow_none\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.setInsertPolicy","title":"<code>setInsertPolicy(policy)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def setInsertPolicy(self, policy):\nraise RuntimeError(\"EnumComboBox does not allow to insert item\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.set_allow_none","title":"<code>set_allow_none(value: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def set_allow_none(self, value: bool):\nself._allow_none = value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.set_enum_class","title":"<code>set_enum_class(enum: enum.EnumMeta | None)</code>","text":"<p>Set enum class from which members value should be selected.</p> Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def set_enum_class(self, enum: enum.EnumMeta | None):\n\"\"\"Set enum class from which members value should be selected.\"\"\"\nself._enum_class = enum\nif self._allow_none and enum is not None:\nsuper().addItem(NONE_STRING)\nitems = [i.name.replace(\"_\", \" \") for i in self._enum_class.__members__.values()]\nsuper().addItems(items)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.enumcombobox.EnumComboBox.set_value","title":"<code>set_value(value: EnumType | None) -&gt; None</code>","text":"<p>Set value with Enum.</p> Source code in <code>prettyqt\\custom_widgets\\enumcombobox.py</code> <pre><code>def set_value(self, value: EnumType | None) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif self._enum_class is None:\nraise RuntimeError(\"Uninitialized enum class. Use `set_enum_class` first.\")\nif value is None and self._allow_none:\nself.setCurrentIndex(0)\nreturn\nif not isinstance(value, self._enum_class):\nraise TypeError(\n\"setValue(self, Enum): argument 1 has unexpected type \"\nf\"{type(value).__name__!r}\"\n)\nself.setCurrentText(value.name.replace(\"_\", \" \"))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ExpandableLine","title":"<code>ExpandableLine</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\expandableline.py</code> <pre><code>class ExpandableLine(widgets.Widget):\ndef __init__(\nself,\ntitle: str = \"\",\nanimation_duration: int = 300,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._animation_duration = animation_duration\nself.expand_btn = widgets.ToolButton(\narrow_type=\"right\",\ntool_button_style=\"text_beside_icon\",\ncheckable=True,\nchecked=False,\ntext=title,\n)\nwith self.expand_btn.edit_stylesheet() as ss:\nss.QToolButton.border.setValue(None)\nheader_line = widgets.Frame(\nframe_shape=\"h_line\",\nframe_shadow=\"sunken\",\nsize_policy=widgets.SizePolicy(\"expanding\", \"maximum\"),\n)\nself.content_area = widgets.ScrollArea(\nmaximum_height=1, size_policy=widgets.SizePolicy(\"expanding\", \"fixed\")\n)\nwith self.expand_btn.edit_stylesheet() as ss:\nss.QAbstractScrollArea.border.setValue(None)\n# self.content_area.setMinimumHeight(0)\nself.toggle_anim = core.ParallelAnimationGroup()\nself.toggle_anim.add_property_animation(self.minimumHeight)\nself.toggle_anim.add_property_animation(self.maximumHeight)\nself.toggle_anim.add_property_animation(self.content_area.maximumHeight)\nbase_layout = widgets.GridLayout(margin=0)\nbase_layout.setVerticalSpacing(0)\nbase_layout[0, 0] = self.expand_btn\nbase_layout[0, 2] = header_line\nbase_layout[1, 0:2] = self.content_area\nself.setLayout(base_layout)\n# self.toggle_anim.setStartValue(0)\n# self.toggle_anim.setEndValue(300)\ndef expand_view(checked: bool):\nself.expand_btn.set_arrow_type(\"down\" if checked else \"right\")\nself.toggle_anim.set_direction(\"forward\" if checked else \"backward\")\nself.toggle_anim.start()\n# === SIGNALS === #\nself.expand_btn.toggled.connect(expand_view)\nself.toggle_anim.set_duration(self._animation_duration)\ndef set_layout(\nself,\nlayout: widgets.widget.LayoutStr | QtWidgets.QLayout | None,\nmargin: int | None = None,\nspacing: int | None = None,\n) -&gt; None:\nself.content_area.destroy()\nself.content_area.set_layout(layout, margin=margin, spacing=spacing)\ncollapsed_height = self.sizeHint().height() - self.content_area.maximumHeight()\ncontent_height = self.content_area.box.sizeHint().height() + 300\nfor expand_anim in self.toggle_anim[:-1]:\n# expand_anim.setDuration(self._animation_duration)\nexpand_anim.set_range(collapsed_height, collapsed_height + content_height)\ncontent_anim = self.toggle_anim[-1]\ncontent_anim.set_range(1, content_height)\ndef set_animation_duration(self, duration: int):\nself._animation_duration = duration\ndef get_animation_duration(self) -&gt; int:\nreturn self._animation_duration\nanimation_duration = core.Property(\nint, get_animation_duration, set_animation_duration\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.animation_duration","title":"<code>animation_duration = core.Property(int, get_animation_duration, set_animation_duration)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.content_area","title":"<code>content_area = widgets.ScrollArea(maximum_height=1, size_policy=widgets.SizePolicy('expanding', 'fixed'))</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.expand_btn","title":"<code>expand_btn = widgets.ToolButton(arrow_type='right', tool_button_style='text_beside_icon', checkable=True, checked=False, text=title)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.toggle_anim","title":"<code>toggle_anim = core.ParallelAnimationGroup()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.__init__","title":"<code>__init__(title: str = '', animation_duration: int = 300, **kwargs: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\expandableline.py</code> <pre><code>def __init__(\nself,\ntitle: str = \"\",\nanimation_duration: int = 300,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._animation_duration = animation_duration\nself.expand_btn = widgets.ToolButton(\narrow_type=\"right\",\ntool_button_style=\"text_beside_icon\",\ncheckable=True,\nchecked=False,\ntext=title,\n)\nwith self.expand_btn.edit_stylesheet() as ss:\nss.QToolButton.border.setValue(None)\nheader_line = widgets.Frame(\nframe_shape=\"h_line\",\nframe_shadow=\"sunken\",\nsize_policy=widgets.SizePolicy(\"expanding\", \"maximum\"),\n)\nself.content_area = widgets.ScrollArea(\nmaximum_height=1, size_policy=widgets.SizePolicy(\"expanding\", \"fixed\")\n)\nwith self.expand_btn.edit_stylesheet() as ss:\nss.QAbstractScrollArea.border.setValue(None)\n# self.content_area.setMinimumHeight(0)\nself.toggle_anim = core.ParallelAnimationGroup()\nself.toggle_anim.add_property_animation(self.minimumHeight)\nself.toggle_anim.add_property_animation(self.maximumHeight)\nself.toggle_anim.add_property_animation(self.content_area.maximumHeight)\nbase_layout = widgets.GridLayout(margin=0)\nbase_layout.setVerticalSpacing(0)\nbase_layout[0, 0] = self.expand_btn\nbase_layout[0, 2] = header_line\nbase_layout[1, 0:2] = self.content_area\nself.setLayout(base_layout)\n# self.toggle_anim.setStartValue(0)\n# self.toggle_anim.setEndValue(300)\ndef expand_view(checked: bool):\nself.expand_btn.set_arrow_type(\"down\" if checked else \"right\")\nself.toggle_anim.set_direction(\"forward\" if checked else \"backward\")\nself.toggle_anim.start()\n# === SIGNALS === #\nself.expand_btn.toggled.connect(expand_view)\nself.toggle_anim.set_duration(self._animation_duration)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.get_animation_duration","title":"<code>get_animation_duration() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\expandableline.py</code> <pre><code>def get_animation_duration(self) -&gt; int:\nreturn self._animation_duration\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.set_animation_duration","title":"<code>set_animation_duration(duration: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\expandableline.py</code> <pre><code>def set_animation_duration(self, duration: int):\nself._animation_duration = duration\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.expandableline.ExpandableLine.set_layout","title":"<code>set_layout(layout: widgets.widget.LayoutStr | QtWidgets.QLayout | None, margin: int | None = None, spacing: int | None = None) -&gt; None</code>","text":"Source code in <code>prettyqt\\custom_widgets\\expandableline.py</code> <pre><code>def set_layout(\nself,\nlayout: widgets.widget.LayoutStr | QtWidgets.QLayout | None,\nmargin: int | None = None,\nspacing: int | None = None,\n) -&gt; None:\nself.content_area.destroy()\nself.content_area.set_layout(layout, margin=margin, spacing=spacing)\ncollapsed_height = self.sizeHint().height() - self.content_area.maximumHeight()\ncontent_height = self.content_area.box.sizeHint().height() + 300\nfor expand_anim in self.toggle_anim[:-1]:\n# expand_anim.setDuration(self._animation_duration)\nexpand_anim.set_range(collapsed_height, collapsed_height + content_height)\ncontent_anim = self.toggle_anim[-1]\ncontent_anim.set_range(1, content_height)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FileChooserButton","title":"<code>FileChooserButton</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>class FileChooserButton(widgets.Widget):\nvalue_changed = core.Signal(pathlib.Path)\ndef __init__(\nself,\nextensions: dict[str, list[str]] | None = None,\nmode: widgets.filedialog.AcceptModeStr = \"save\",\nfile_mode: widgets.filedialog.FileModeStr = \"existing_files\",\nroot: None | str | pathlib.Path = None,\n**kwargs,\n):\n\"\"\"Initialize FileChooserButton.\n        Args:\n            extensions: dict allowed extensions\n                        form: \"'name': ['.ext1', '.ext2']\"\n            mode: Accept mode (\"save\" or \"load\")\n            file_mode: File mode (\"existing_files\", \"existing_file\", \"any_file\",\n                                  or \"directory\")\n            root: Root path\n            kwargs: kwargs passed to parent\n        \"\"\"\nsuper().__init__(**kwargs)\nself._path: pathlib.Path | None = None\nself._extensions = extensions or []\nself.mode = mode\nself.file_mode = file_mode\nself.root = root\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_read_only()\nlayout.add(self.lineedit)\naction = gui.Action()\nif self.file_mode == \"directory\":\naction.set_icon(\"mdi.folder-outline\")\nelse:\naction.set_icon(\"mdi.file-outline\")\naction.triggered.connect(self.open_file)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\n@core.Slot()\ndef open_file(self):\ndialog = widgets.FileDialog(\nparent=self,\npath_id=\"file_path\",\nmode=self.mode,\npath=self.root,\nfile_mode=self.file_mode,\n)\nif self._extensions:\ndialog.set_extension_filter(self._extensions)\nif not dialog.choose():\nreturn\nself.set_path(dialog.selected_file())\nself.value_changed.emit(self._path)\ndef set_path(self, path: datatypes.PathType | None):\nif path is None:\nself._path = None\nself.lineedit.set_text(\"\")\nelse:\nself._path = pathlib.Path(path)\nself.lineedit.set_text(os.fspath(path))\ndef get_value(self) -&gt; pathlib.Path | None:\nreturn self._path\ndef set_value(self, value: datatypes.PathType | None):\nself.set_path(value)\ndef get_extensions(self) -&gt; list[str]:\nreturn self._extensions\ndef set_extensions(self, extensions: list[str]):\nself._extensions = extensions\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.button","title":"<code>button = widgets.ToolButton()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.file_mode","title":"<code>file_mode = file_mode</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.lineedit","title":"<code>lineedit = widgets.LineEdit()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.mode","title":"<code>mode = mode</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.root","title":"<code>root = root</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.value_changed","title":"<code>value_changed = core.Signal(pathlib.Path)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.__init__","title":"<code>__init__(extensions: dict[str, list[str]] | None = None, mode: widgets.filedialog.AcceptModeStr = 'save', file_mode: widgets.filedialog.FileModeStr = 'existing_files', root: None | str | pathlib.Path = None, **kwargs: None | str | pathlib.Path)</code>","text":"<p>Initialize FileChooserButton.</p> <p>Parameters:</p> Name Type Description Default <code>extensions</code> <code>dict[str, list[str]] | None</code> <p>dict allowed extensions         form: \"'name': ['.ext1', '.ext2']\"</p> <code>None</code> <code>mode</code> <code>widgets.filedialog.AcceptModeStr</code> <p>Accept mode (\"save\" or \"load\")</p> <code>'save'</code> <code>file_mode</code> <code>widgets.filedialog.FileModeStr</code> <p>File mode (\"existing_files\", \"existing_file\", \"any_file\",                   or \"directory\")</p> <code>'existing_files'</code> <code>root</code> <code>None | str | pathlib.Path</code> <p>Root path</p> <code>None</code> <code>kwargs</code> <p>kwargs passed to parent</p> <code>{}</code> Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>def __init__(\nself,\nextensions: dict[str, list[str]] | None = None,\nmode: widgets.filedialog.AcceptModeStr = \"save\",\nfile_mode: widgets.filedialog.FileModeStr = \"existing_files\",\nroot: None | str | pathlib.Path = None,\n**kwargs,\n):\n\"\"\"Initialize FileChooserButton.\n    Args:\n        extensions: dict allowed extensions\n                    form: \"'name': ['.ext1', '.ext2']\"\n        mode: Accept mode (\"save\" or \"load\")\n        file_mode: File mode (\"existing_files\", \"existing_file\", \"any_file\",\n                              or \"directory\")\n        root: Root path\n        kwargs: kwargs passed to parent\n    \"\"\"\nsuper().__init__(**kwargs)\nself._path: pathlib.Path | None = None\nself._extensions = extensions or []\nself.mode = mode\nself.file_mode = file_mode\nself.root = root\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_read_only()\nlayout.add(self.lineedit)\naction = gui.Action()\nif self.file_mode == \"directory\":\naction.set_icon(\"mdi.folder-outline\")\nelse:\naction.set_icon(\"mdi.file-outline\")\naction.triggered.connect(self.open_file)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.get_extensions","title":"<code>get_extensions() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>def get_extensions(self) -&gt; list[str]:\nreturn self._extensions\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.get_value","title":"<code>get_value() -&gt; pathlib.Path | None</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>def get_value(self) -&gt; pathlib.Path | None:\nreturn self._path\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.open_file","title":"<code>open_file()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>@core.Slot()\ndef open_file(self):\ndialog = widgets.FileDialog(\nparent=self,\npath_id=\"file_path\",\nmode=self.mode,\npath=self.root,\nfile_mode=self.file_mode,\n)\nif self._extensions:\ndialog.set_extension_filter(self._extensions)\nif not dialog.choose():\nreturn\nself.set_path(dialog.selected_file())\nself.value_changed.emit(self._path)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.set_extensions","title":"<code>set_extensions(extensions: list[str])</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>def set_extensions(self, extensions: list[str]):\nself._extensions = extensions\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.set_path","title":"<code>set_path(path: datatypes.PathType | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>def set_path(self, path: datatypes.PathType | None):\nif path is None:\nself._path = None\nself.lineedit.set_text(\"\")\nelse:\nself._path = pathlib.Path(path)\nself.lineedit.set_text(os.fspath(path))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filechooserbutton.FileChooserButton.set_value","title":"<code>set_value(value: datatypes.PathType | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filechooserbutton.py</code> <pre><code>def set_value(self, value: datatypes.PathType | None):\nself.set_path(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FileTree","title":"<code>FileTree</code>","text":"<p>         Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\filetree.py</code> <pre><code>class FileTree(widgets.TreeView):\ndef __init__(self, *args, filters: list[str] | None = None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setRootIsDecorated(True)\nself.h_header.set_resize_mode(\"resize_to_contents\")\nself.setup_dragdrop_move()\nmodel = widgets.FileSystemModel()\nmodel.resolve_sym_links(False)\nmodel.set_root_path(\"C:/\")\nif filters:\nmodel.set_name_filters(filters, hide=False)\nself.set_model(model)\nself.expanded_ids = []\ndef get_expanded_state(self) -&gt; list[str]:\nself.expanded_ids = []\nfor i in range(self.model().rowCount()):\nself._save_expanded_on_level(self.model().index(i, 0))\nreturn self.expanded_ids\ndef set_expanded_state(self, state):\nself.expanded_ids = state\nwith self.updates_off():\nfor i in range(self.model().rowCount()):\nself._restore_expanded_on_level(self.model().index(i, 0))\ndef _save_expanded_on_level(self, index):\nif not self.isExpanded(index):\nreturn None\nmodel = self.model()\nif index.isValid():\npath = model.data(index, model.FilePathRole)\nself.expanded_ids.append(path)\nfor i in range(model.rowCount(index)):\nval = model.index(i, 0, index)\nself._save_expanded_on_level(val)\ndef _restore_expanded_on_level(self, index):\nmodel = self.model()\npath = model.data(index, model.FilePathRole)\nif path not in self.expanded_ids:\nreturn None\nself.setExpanded(index, True)\nif not model.hasChildren(index):\nreturn None\npath = pathlib.Path(path)\nfor it in path.iterdir():\nchild_index = model.index(str(path / it))\nself._restore_expanded_on_level(child_index)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filetree.FileTree.expanded_ids","title":"<code>expanded_ids = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filetree.FileTree.__init__","title":"<code>__init__(*args, filters: list[str] | None = None, **kwargs: list[str] | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filetree.py</code> <pre><code>def __init__(self, *args, filters: list[str] | None = None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setRootIsDecorated(True)\nself.h_header.set_resize_mode(\"resize_to_contents\")\nself.setup_dragdrop_move()\nmodel = widgets.FileSystemModel()\nmodel.resolve_sym_links(False)\nmodel.set_root_path(\"C:/\")\nif filters:\nmodel.set_name_filters(filters, hide=False)\nself.set_model(model)\nself.expanded_ids = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filetree.FileTree.get_expanded_state","title":"<code>get_expanded_state() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filetree.py</code> <pre><code>def get_expanded_state(self) -&gt; list[str]:\nself.expanded_ids = []\nfor i in range(self.model().rowCount()):\nself._save_expanded_on_level(self.model().index(i, 0))\nreturn self.expanded_ids\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.filetree.FileTree.set_expanded_state","title":"<code>set_expanded_state(state)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\filetree.py</code> <pre><code>def set_expanded_state(self, state):\nself.expanded_ids = state\nwith self.updates_off():\nfor i in range(self.model().rowCount()):\nself._restore_expanded_on_level(self.model().index(i, 0))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FlagSelectionWidget","title":"<code>FlagSelectionWidget</code>","text":"<p>         Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>class FlagSelectionWidget(widgets.GroupBox):\nvalue_changed = core.Signal(int)\ndef __init__(\nself,\nlabel: str = \"\",\nlayout: Literal[\"horizontal\", \"vertical\"] = \"vertical\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(title=label, parent=parent)\nself.box = (\nwidgets.HBoxLayout() if layout == \"horizontal\" else widgets.VBoxLayout()\n)\nself.buttons: dict[widgets.CheckBox, int] = {}\nself.set_layout(self.box)\ndef __iter__(self) -&gt; Iterator[tuple[widgets.CheckBox, int]]:\nreturn iter(self.buttons.items())\ndef add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, Iterable):\nself.add(*i)\nelse:\nraise TypeError(\"Invalid item type\")\ndef add(self, title: str, flag: int):\ncheckbox = widgets.CheckBox(title)\ncheckbox.toggled.connect(self.update_choice)\nself.buttons[checkbox] = flag\nself.box.add(checkbox)\ndef current_choice(self) -&gt; int:\nret_val = 0\nfor btn, flag in self.buttons.items():\nif btn.isChecked():\nret_val |= flag\nreturn int(ret_val)\n@core.Slot(bool)\ndef update_choice(self, checked: bool):\nchoice = self.current_choice()\nself.value_changed.emit(choice)\ndef set_value(self, value: int):\nfor btn, flag in self.buttons.items():\nbtn.setChecked(bool(value &amp; flag))\ndef get_value(self) -&gt; int:\nreturn self.current_choice()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.box","title":"<code>box = widgets.HBoxLayout() if layout == 'horizontal' else widgets.VBoxLayout()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.buttons","title":"<code>buttons: dict[widgets.CheckBox, int] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.__init__","title":"<code>__init__(label: str = '', layout: Literal['horizontal', 'vertical'] = 'vertical', parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def __init__(\nself,\nlabel: str = \"\",\nlayout: Literal[\"horizontal\", \"vertical\"] = \"vertical\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(title=label, parent=parent)\nself.box = (\nwidgets.HBoxLayout() if layout == \"horizontal\" else widgets.VBoxLayout()\n)\nself.buttons: dict[widgets.CheckBox, int] = {}\nself.set_layout(self.box)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.__iter__","title":"<code>__iter__() -&gt; Iterator[tuple[widgets.CheckBox, int]]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def __iter__(self) -&gt; Iterator[tuple[widgets.CheckBox, int]]:\nreturn iter(self.buttons.items())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.add","title":"<code>add(title: str, flag: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def add(self, title: str, flag: int):\ncheckbox = widgets.CheckBox(title)\ncheckbox.toggled.connect(self.update_choice)\nself.buttons[checkbox] = flag\nself.box.add(checkbox)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.add_items","title":"<code>add_items(items: Iterable | Mapping)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, Iterable):\nself.add(*i)\nelse:\nraise TypeError(\"Invalid item type\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.current_choice","title":"<code>current_choice() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def current_choice(self) -&gt; int:\nret_val = 0\nfor btn, flag in self.buttons.items():\nif btn.isChecked():\nret_val |= flag\nreturn int(ret_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.get_value","title":"<code>get_value() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def get_value(self) -&gt; int:\nreturn self.current_choice()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.set_value","title":"<code>set_value(value: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>def set_value(self, value: int):\nfor btn, flag in self.buttons.items():\nbtn.setChecked(bool(value &amp; flag))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flagselectionwidget.FlagSelectionWidget.update_choice","title":"<code>update_choice(checked: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flagselectionwidget.py</code> <pre><code>@core.Slot(bool)\ndef update_choice(self, checked: bool):\nchoice = self.current_choice()\nself.value_changed.emit(choice)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FlowLayout","title":"<code>FlowLayout</code>","text":"<p>         Bases: <code>widgets.Layout</code></p> Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>class FlowLayout(widgets.Layout):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._items: list[QtWidgets.QLayoutItem] = []\ndef serialize_fields(self):\nreturn dict(items=self.get_children())\ndef __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout) -&gt; FlowLayout:\nif not isinstance(other, QtWidgets.QWidget | QtWidgets.QLayout):\nraise TypeError()\nself.add(other)\nreturn self\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\n# def __setstate__(self, state):\n#     for item in state[\"items\"]:\n#         self.add(item)\ndef __del__(self):\nitem = self.takeAt(0)\nwhile item:\nitem = self.takeAt(0)\ndef addItem(self, item: QtWidgets.QLayoutItem):\nself._items.append(item)\ndef addLayout(self, layout: QtWidgets.QLayout):\nwidget = widgets.Widget()\nwidget.setLayout(layout)\nself.addWidget(widget)\ndef count(self) -&gt; int:\nreturn len(self._items)\ndef itemAt(self, index: int) -&gt; QtWidgets.QLayoutItem | None:  # type: ignore\nreturn self._items[index] if 0 &lt;= index &lt; len(self._items) else None\ndef takeAt(self, index: int) -&gt; QtWidgets.QLayoutItem | None:  # type: ignore\nreturn self._items.pop(index) if 0 &lt;= index &lt; len(self._items) else None\ndef expandingDirections(self) -&gt; QtCore.Qt.Orientation:\nreturn QtCore.Qt.Orientation(0)\ndef hasHeightForWidth(self) -&gt; bool:\nreturn True\ndef heightForWidth(self, width: int) -&gt; int:\nrect = QtCore.QRect(0, 0, width, 0)\nreturn self._do_layout(rect, True)\ndef setGeometry(self, rect: QtCore.QRect):\nsuper().setGeometry(rect)\nself._do_layout(rect, False)\ndef sizeHint(self) -&gt; QtCore.QSize:\nreturn self.minimumSize()\ndef minimumSize(self) -&gt; QtCore.QSize:\nsize = QtCore.QSize()\nfor item in self._items:\nsize = size.expandedTo(item.minimumSize())\nmargin_width = 2 * self.contentsMargins().top()\nsize += QtCore.QSize(margin_width, margin_width)\nreturn size\ndef _do_layout(self, rect: QtCore.QRect, test_only: bool) -&gt; int:\nx = rect.x()\ny = rect.y()\nline_height = 0\nspace = self.spacing()\npb = widgets.SizePolicy.ControlType.PushButton\nfor item in self._items:\nwid = item.widget()\nspace_x = space + wid.style().layoutSpacing(pb, pb, constants.HORIZONTAL)\nnext_x = x + item.sizeHint().width() + space_x\nif next_x - space_x &gt; rect.right() and line_height &gt; 0:\nx = rect.x()\nspace_y = space + wid.style().layoutSpacing(pb, pb, constants.VERTICAL)\ny = y + line_height + space_y\nnext_x = x + item.sizeHint().width() + space_x\nline_height = 0\nif not test_only:\nitem.setGeometry(core.Rect(core.Point(x, y), item.sizeHint()))\nx = next_x\nline_height = max(line_height, item.sizeHint().height())\nreturn y + line_height - rect.y()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.__add__","title":"<code>__add__(other: QtWidgets.QWidget | QtWidgets.QLayout) -&gt; FlowLayout</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout) -&gt; FlowLayout:\nif not isinstance(other, QtWidgets.QWidget | QtWidgets.QLayout):\nraise TypeError()\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.__del__","title":"<code>__del__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def __del__(self):\nitem = self.takeAt(0)\nwhile item:\nitem = self.takeAt(0)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._items: list[QtWidgets.QLayoutItem] = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.addItem","title":"<code>addItem(item: QtWidgets.QLayoutItem)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def addItem(self, item: QtWidgets.QLayoutItem):\nself._items.append(item)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.addLayout","title":"<code>addLayout(layout: QtWidgets.QLayout)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def addLayout(self, layout: QtWidgets.QLayout):\nwidget = widgets.Widget()\nwidget.setLayout(layout)\nself.addWidget(widget)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.count","title":"<code>count() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def count(self) -&gt; int:\nreturn len(self._items)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.expandingDirections","title":"<code>expandingDirections() -&gt; QtCore.Qt.Orientation</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def expandingDirections(self) -&gt; QtCore.Qt.Orientation:\nreturn QtCore.Qt.Orientation(0)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.hasHeightForWidth","title":"<code>hasHeightForWidth() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def hasHeightForWidth(self) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.heightForWidth","title":"<code>heightForWidth(width: int) -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def heightForWidth(self, width: int) -&gt; int:\nrect = QtCore.QRect(0, 0, width, 0)\nreturn self._do_layout(rect, True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.itemAt","title":"<code>itemAt(index: int) -&gt; QtWidgets.QLayoutItem | None</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def itemAt(self, index: int) -&gt; QtWidgets.QLayoutItem | None:  # type: ignore\nreturn self._items[index] if 0 &lt;= index &lt; len(self._items) else None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.minimumSize","title":"<code>minimumSize() -&gt; QtCore.QSize</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def minimumSize(self) -&gt; QtCore.QSize:\nsize = QtCore.QSize()\nfor item in self._items:\nsize = size.expandedTo(item.minimumSize())\nmargin_width = 2 * self.contentsMargins().top()\nsize += QtCore.QSize(margin_width, margin_width)\nreturn size\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def serialize_fields(self):\nreturn dict(items=self.get_children())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.setGeometry","title":"<code>setGeometry(rect: QtCore.QRect)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def setGeometry(self, rect: QtCore.QRect):\nsuper().setGeometry(rect)\nself._do_layout(rect, False)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.sizeHint","title":"<code>sizeHint() -&gt; QtCore.QSize</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def sizeHint(self) -&gt; QtCore.QSize:\nreturn self.minimumSize()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.flowlayout.FlowLayout.takeAt","title":"<code>takeAt(index: int) -&gt; QtWidgets.QLayoutItem | None</code>","text":"Source code in <code>prettyqt\\custom_widgets\\flowlayout.py</code> <pre><code>def takeAt(self, index: int) -&gt; QtWidgets.QLayoutItem | None:  # type: ignore\nreturn self._items.pop(index) if 0 &lt;= index &lt; len(self._items) else None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FontChooserButton","title":"<code>FontChooserButton</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>class FontChooserButton(widgets.Widget):\nvalue_changed = core.Signal(gui.Font)\ndef __init__(self, font: QtGui.QFont | str | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself._current_font = None\nlayout = widgets.HBoxLayout(self, margin=0)\nself.lineedit = widgets.LineEdit(read_only=True)\nself.set_current_font(font)\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-font\", triggered=self.choose_font)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\ndef __repr__(self):\nreturn get_repr(self, self.current_font)\n@core.Slot()\ndef choose_font(self):\ndlg = widgets.FontDialog()\nif self._current_font:\ndlg.setCurrentFont(self._current_font)\nif dlg.main_loop():\nself.set_current_font(dlg.current_font())\nself.value_changed.emit(dlg.current_font())\ndef set_current_font(self, font: str | QtGui.QFont | None):\nmatch font:\ncase str():\nself._current_font = gui.Font(font)\ncase None:\nself._current_font = gui.Font()\ncase _:\nself._current_font = font\nself.lineedit.setText(self._current_font.family())\ndef set_value(self, value: str | QtGui.QFont):\nself.set_current_font(value)\ndef get_value(self):\nreturn self._current_font\ncurrent_font = core.Property(QtGui.QFont, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.button","title":"<code>button = widgets.ToolButton()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.current_font","title":"<code>current_font = core.Property(QtGui.QFont, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.lineedit","title":"<code>lineedit = widgets.LineEdit(read_only=True)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.value_changed","title":"<code>value_changed = core.Signal(gui.Font)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.__init__","title":"<code>__init__(font: QtGui.QFont | str | None = None, **kwargs: QtGui.QFont | str | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>def __init__(self, font: QtGui.QFont | str | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself._current_font = None\nlayout = widgets.HBoxLayout(self, margin=0)\nself.lineedit = widgets.LineEdit(read_only=True)\nself.set_current_font(font)\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-font\", triggered=self.choose_font)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.current_font)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.choose_font","title":"<code>choose_font()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>@core.Slot()\ndef choose_font(self):\ndlg = widgets.FontDialog()\nif self._current_font:\ndlg.setCurrentFont(self._current_font)\nif dlg.main_loop():\nself.set_current_font(dlg.current_font())\nself.value_changed.emit(dlg.current_font())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.get_value","title":"<code>get_value()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>def get_value(self):\nreturn self._current_font\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.set_current_font","title":"<code>set_current_font(font: str | QtGui.QFont | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>def set_current_font(self, font: str | QtGui.QFont | None):\nmatch font:\ncase str():\nself._current_font = gui.Font(font)\ncase None:\nself._current_font = gui.Font()\ncase _:\nself._current_font = font\nself.lineedit.setText(self._current_font.family())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.fontchooserbutton.FontChooserButton.set_value","title":"<code>set_value(value: str | QtGui.QFont)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\fontchooserbutton.py</code> <pre><code>def set_value(self, value: str | QtGui.QFont):\nself.set_current_font(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.FramelessWindow","title":"<code>FramelessWindow</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\framelesswindow.py</code> <pre><code>class FramelessWindow(widgets.Widget):\nBORDER_WIDTH = 5\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\n# Remove window title bar and frame\nself.setWindowFlags(\nQtCore.Qt.WindowType.Window  # type: ignore\n| QtCore.Qt.WindowType.FramelessWindowHint\n)\nself.title_bar = CustomTitleBar(self)\nself.main_widget = widgets.MainWindow()\n# Set up layout\nself.main_layout = widgets.VBoxLayout()\nself.main_layout.addWidget(self.title_bar)\nself.main_layout.addWidget(self.main_widget)\nself.main_layout.set_margin(0)\nself.main_layout.setSpacing(0)\nself.grip_layout = widgets.GridLayout()\nself.grip_layout.addLayout(self.main_layout, 1, 1)\nself.grip_layout.addWidget(EdgeGrip(\"top\"), 0, 1)\nself.grip_layout.addWidget(EdgeGrip(\"right\"), 1, 2)\nself.grip_layout.addWidget(EdgeGrip(\"bottom\"), 2, 1)\nself.grip_layout.addWidget(EdgeGrip(\"left\"), 1, 0)\nself.grip_layout.addWidget(EdgeGrip(\"top_left\"), 0, 0)\nself.grip_layout.addWidget(EdgeGrip(\"top_right\"), 0, 2)\nself.grip_layout.addWidget(EdgeGrip(\"bottom_left\"), 2, 0)\nself.grip_layout.addWidget(EdgeGrip(\"bottom_right\"), 2, 2)\nself.grip_layout.set_margin(0)\nself.grip_layout.setSpacing(0)\nself.setLayout(self.grip_layout)\nif sys.platform == \"win32\":\nself.hwnd = int(self.winId())\nwindow_style = win32gui.GetWindowLong(self.hwnd, GWL_STYLE)\nwin32gui.SetWindowLong(\nself.hwnd,\nGWL_STYLE,\nwindow_style\n| WS_POPUP\n| WS_THICKFRAME\n| WS_CAPTION\n| WS_SYSMENU\n| WS_MAXIMIZEBOX\n| WS_MINIMIZEBOX,\n)\ndef __getattr__(self, attr: str):\nreturn getattr(self.main_widget, attr)\ndef changeEvent(self, event):\n# not sure if this should be done on non-windows\nif event.type() == event.Type.WindowStateChange:\nif self.isMaximized():  # type: ignore\nmargin = abs(self.mapToGlobal(self.rect().topLeft()).y())\nself.set_margin(margin)\nelse:\nself.set_margin(0)\nreturn super().changeEvent(event)\ndef nativeEvent(self, event, message):\nreturn_value, result = super().nativeEvent(event, message)\nif sys.platform != \"win32\":\nreturn return_value, result\n# if you use Windows OS\nif event == b\"windows_generic_MSG\":\nmsg = ctypes.wintypes.MSG.from_address(int(message))\n# Get the coordinates when the mouse moves.\nx = win32api.LOWORD(LONG(msg.lParam).value)  # type: ignore\n# converted an unsigned int to int (for dual monitor issue)\nif x &amp; 32768:\nx = x | -65536\ny = win32api.HIWORD(LONG(msg.lParam).value)  # type: ignore\nif y &amp; 32768:\ny = y | -65536\nx -= self.frameGeometry().x()\ny -= self.frameGeometry().y()\n# Determine whether there are other widgets at the mouse position.\nchild = self.childAt(x, y)\nif child is not None and child is not self.find_child(name=\"ControlWidget\"):\nif (\nself.width() - self.BORDER_WIDTH &gt; x &gt; self.BORDER_WIDTH\nand y &lt; self.height() - self.BORDER_WIDTH\n):\nreturn return_value, result\nif msg.message == WM_NCCALCSIZE:\n# Remove system title\nreturn True, 0\nelif msg.message == WM_NCHITTEST:\nw, h = self.width(), self.height()\nlx = x &lt; self.BORDER_WIDTH\nrx = x &gt; w - self.BORDER_WIDTH\nty = y &lt; self.BORDER_WIDTH\nby = y &gt; h - self.BORDER_WIDTH\nmatch lx, ty, rx, by:\ncase True, True, _, _:\nreturn True, HTTOPLEFT\ncase _, _, True, True:\nreturn True, HTBOTTOMRIGHT\ncase _, True, True, _:\nreturn True, HTTOPRIGHT\ncase True, _, _, True:\nreturn True, HTBOTTOMLEFT\ncase _, True, _, _:\nreturn True, HTTOP\ncase _, _, _, True:\nreturn True, HTBOTTOM\ncase True, _, _, _:\nreturn True, HTLEFT\ncase _, _, True, _:\nreturn True, HTRIGHT\ncase _, _, _, _:\nreturn True, HTCAPTION\nreturn return_value, result\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.BORDER_WIDTH","title":"<code>BORDER_WIDTH = 5</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.grip_layout","title":"<code>grip_layout = widgets.GridLayout()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.hwnd","title":"<code>hwnd = int(self.winId())</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.main_layout","title":"<code>main_layout = widgets.VBoxLayout()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.main_widget","title":"<code>main_widget = widgets.MainWindow()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.title_bar","title":"<code>title_bar = CustomTitleBar(self)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.__getattr__","title":"<code>__getattr__(attr: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\framelesswindow.py</code> <pre><code>def __getattr__(self, attr: str):\nreturn getattr(self.main_widget, attr)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\framelesswindow.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\n# Remove window title bar and frame\nself.setWindowFlags(\nQtCore.Qt.WindowType.Window  # type: ignore\n| QtCore.Qt.WindowType.FramelessWindowHint\n)\nself.title_bar = CustomTitleBar(self)\nself.main_widget = widgets.MainWindow()\n# Set up layout\nself.main_layout = widgets.VBoxLayout()\nself.main_layout.addWidget(self.title_bar)\nself.main_layout.addWidget(self.main_widget)\nself.main_layout.set_margin(0)\nself.main_layout.setSpacing(0)\nself.grip_layout = widgets.GridLayout()\nself.grip_layout.addLayout(self.main_layout, 1, 1)\nself.grip_layout.addWidget(EdgeGrip(\"top\"), 0, 1)\nself.grip_layout.addWidget(EdgeGrip(\"right\"), 1, 2)\nself.grip_layout.addWidget(EdgeGrip(\"bottom\"), 2, 1)\nself.grip_layout.addWidget(EdgeGrip(\"left\"), 1, 0)\nself.grip_layout.addWidget(EdgeGrip(\"top_left\"), 0, 0)\nself.grip_layout.addWidget(EdgeGrip(\"top_right\"), 0, 2)\nself.grip_layout.addWidget(EdgeGrip(\"bottom_left\"), 2, 0)\nself.grip_layout.addWidget(EdgeGrip(\"bottom_right\"), 2, 2)\nself.grip_layout.set_margin(0)\nself.grip_layout.setSpacing(0)\nself.setLayout(self.grip_layout)\nif sys.platform == \"win32\":\nself.hwnd = int(self.winId())\nwindow_style = win32gui.GetWindowLong(self.hwnd, GWL_STYLE)\nwin32gui.SetWindowLong(\nself.hwnd,\nGWL_STYLE,\nwindow_style\n| WS_POPUP\n| WS_THICKFRAME\n| WS_CAPTION\n| WS_SYSMENU\n| WS_MAXIMIZEBOX\n| WS_MINIMIZEBOX,\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.changeEvent","title":"<code>changeEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\framelesswindow.py</code> <pre><code>def changeEvent(self, event):\n# not sure if this should be done on non-windows\nif event.type() == event.Type.WindowStateChange:\nif self.isMaximized():  # type: ignore\nmargin = abs(self.mapToGlobal(self.rect().topLeft()).y())\nself.set_margin(margin)\nelse:\nself.set_margin(0)\nreturn super().changeEvent(event)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.framelesswindow.FramelessWindow.nativeEvent","title":"<code>nativeEvent(event, message)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\framelesswindow.py</code> <pre><code>def nativeEvent(self, event, message):\nreturn_value, result = super().nativeEvent(event, message)\nif sys.platform != \"win32\":\nreturn return_value, result\n# if you use Windows OS\nif event == b\"windows_generic_MSG\":\nmsg = ctypes.wintypes.MSG.from_address(int(message))\n# Get the coordinates when the mouse moves.\nx = win32api.LOWORD(LONG(msg.lParam).value)  # type: ignore\n# converted an unsigned int to int (for dual monitor issue)\nif x &amp; 32768:\nx = x | -65536\ny = win32api.HIWORD(LONG(msg.lParam).value)  # type: ignore\nif y &amp; 32768:\ny = y | -65536\nx -= self.frameGeometry().x()\ny -= self.frameGeometry().y()\n# Determine whether there are other widgets at the mouse position.\nchild = self.childAt(x, y)\nif child is not None and child is not self.find_child(name=\"ControlWidget\"):\nif (\nself.width() - self.BORDER_WIDTH &gt; x &gt; self.BORDER_WIDTH\nand y &lt; self.height() - self.BORDER_WIDTH\n):\nreturn return_value, result\nif msg.message == WM_NCCALCSIZE:\n# Remove system title\nreturn True, 0\nelif msg.message == WM_NCHITTEST:\nw, h = self.width(), self.height()\nlx = x &lt; self.BORDER_WIDTH\nrx = x &gt; w - self.BORDER_WIDTH\nty = y &lt; self.BORDER_WIDTH\nby = y &gt; h - self.BORDER_WIDTH\nmatch lx, ty, rx, by:\ncase True, True, _, _:\nreturn True, HTTOPLEFT\ncase _, _, True, True:\nreturn True, HTBOTTOMRIGHT\ncase _, True, True, _:\nreturn True, HTTOPRIGHT\ncase True, _, _, True:\nreturn True, HTBOTTOMLEFT\ncase _, True, _, _:\nreturn True, HTTOP\ncase _, _, _, True:\nreturn True, HTBOTTOM\ncase True, _, _, _:\nreturn True, HTLEFT\ncase _, _, True, _:\nreturn True, HTRIGHT\ncase _, _, _, _:\nreturn True, HTCAPTION\nreturn return_value, result\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.HierarchicalHeaderView","title":"<code>HierarchicalHeaderView</code>","text":"<p>         Bases: <code>widgets.HeaderView</code></p> <p>Hierarchical header view.</p> <p>This class is a Python port of http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154</p> Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>class HierarchicalHeaderView(widgets.HeaderView):\n\"\"\"Hierarchical header view.\n    This class is a Python port of\n    http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154\n    \"\"\"\nclass PrivateData:\n\"\"\"Privatedata.\"\"\"\nheader_model = None\ndef init_from_new_model(self, orientation: int, model: QtCore.QAbstractItemModel):\nis_hor = orientation == constants.HORIZONTAL\nrole = HORIZONTAL_HEADER_DATA_ROLE if is_hor else VERTICAL_HEADER_DATA_ROLE\nself.header_model = model.data(core.ModelIndex(), role)\ndef find_root_index(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nwhile index.parent().isValid():\nindex = index.parent()\nreturn index\ndef get_parent_indexes(self, index: core.ModelIndex) -&gt; list:\nindexes = []\nwhile index.isValid():\nindexes.insert(0, index)\nindex = index.parent()\nreturn indexes\ndef find_leaf(\nself, index: core.ModelIndex, section_index: int, current_leaf_index: int\n) -&gt; core.ModelIndex:\nif not index.isValid():\nreturn core.ModelIndex(), current_leaf_index\nmodel = index.model()\nif child_count := model.columnCount(index):\nfor i in range(child_count):\nres, current_leaf_index = self.find_leaf(\nmodel.index(0, i, index), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res, current_leaf_index\nelse:\ncurrent_leaf_index += 1\nif current_leaf_index == section_index:\nreturn index, current_leaf_index\nreturn core.ModelIndex(), current_leaf_index\ndef leaf_index(self, section_index: int) -&gt; core.ModelIndex:\nif self.header_model:\ncurrent_leaf_index = -1\nfor i in range(self.header_model.columnCount()):\nres, current_leaf_index = self.find_leaf(\nself.header_model.index(0, i), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res\nreturn core.ModelIndex()\ndef search_leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nres = []\nif index.isValid():\nmodel = index.model()\nif child_count := index.model().columnCount(index):\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nres += self.search_leafs(leaf)\nelse:\nres.append(index)\nreturn res\ndef leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nleafs = []\nif index.isValid():\nmodel = index.model()\nchild_count = index.model().columnCount(index)\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nleafs += self.search_leafs(leaf)\nreturn leafs\ndef set_foreground_brush(\nself, opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif foreground_brush := index.data(constants.FOREGROUND_ROLE):\nbrush = QtGui.QBrush(foreground_brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.ButtonText, brush)\ndef set_background_brush(\nself, opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif background_brush := index.data(constants.BACKGROUND_ROLE):\nbrush = QtGui.QBrush(background_brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.Button, brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.Window, brush)\ndef get_cell_size(\nself,\nleaf_index: core.ModelIndex,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\n) -&gt; QtCore.QSize:\nres = QtCore.QSize()\nif variant := leaf_index.data(constants.SIZE_HINT_ROLE):\nres = variant\nfnt = var if (var := leaf_index.data(constants.FONT_ROLE)) else hv.font()\nfnt.setBold(True)\nfm = QtGui.QFontMetrics(fnt)\ntext_size = fm.size(0, leaf_index.data(constants.DISPLAY_ROLE))\nsize = text_size + QtCore.QSize(4, 0)\nif leaf_index.data(constants.USER_ROLE):\nsize.transpose()\ndecoration_size = hv.style().sizeFromContents(\nQtWidgets.QStyle.ContentsType.CT_HeaderSection,\nstyle_options,\nQtCore.QSize(),\nhv,\n)\nempty_text_size = fm.size(0, \"\")\nreturn res.expandedTo(size + decoration_size - empty_text_size)\ndef get_current_cell_width(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nhv: QtWidgets.QHeaderView,\n) -&gt; int:\nleafs_list = self.leafs(searched_index)\nif not leafs_list:\nreturn hv.sectionSize(section_index)\noffset = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - offset\nreturn sum(\nhv.sectionSize(first_leaf_section_index + i)\nfor i in range(len(leafs_list))\n)\ndef get_current_cell_left(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nleft: int,\nhv: QtWidgets.QHeaderView,\n) -&gt; int:\nif leafs_list := self.leafs(searched_index):\nn = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - n\nfor i in range(n - 1, -1, -1):\nleft -= hv.sectionSize(first_leaf_section_index + i)\nreturn left\ndef paint_horizontal_cell(\nself,\npainter: QtGui.QPainter,\nhv: QtWidgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: QtWidgets.QStyleOptionHeader,\nsection_rect: QtCore.QRect,\ntop: int,\n):\nuniopt = QtWidgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nheight = (\nsection_rect.height() - top\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).height()\n)\nleft = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.left(), hv\n)\nwidth = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = QtCore.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = QtGui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = QtCore.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(QtCore.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn top + height\ndef paint_horizontal_section(\nself,\npainter: QtGui.QPainter,\nsection_rect: QtCore.QRect,\nlogical_leaf_index: int,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\n#            print(logical_leaf_index)\nold_bo = painter.brushOrigin()\ntop = section_rect.y()\nindexes = self.get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = QtWidgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nif i &lt; len(indexes) - 1:  # Use sortIndicator for inner level only\nreal_style_options.sortIndicator = SortIndicator.None_\n#                if i==0:\n#                    print(self.leafs(indexes[i]), leaf_index)\ntop = self.paint_horizontal_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\ntop,\n)\npainter.setBrushOrigin(old_bo)\ndef paint_vertical_cell(\nself,\npainter: QtGui.QPainter,\nhv: QtWidgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: QtWidgets.QStyleOptionHeader,\nsection_rect: QtCore.QRect,\nleft: int,\n):\nuniopt = QtWidgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nwidth = (\nsection_rect.width() - left\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).width()\n)\ntop = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.top(), hv\n)\nheight = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = QtCore.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = QtGui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = QtCore.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(QtCore.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn left + width\ndef paint_vertical_section(\nself,\npainter: QtGui.QPainter,\nsection_rect: QtCore.QRect,\nlogical_leaf_index: int,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\nold_bo = painter.brushOrigin()\nleft = section_rect.x()\nindexes = self.get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = QtWidgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nleft = self.paint_vertical_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\nleft,\n)\npainter.setBrushOrigin(old_bo)\ndef __init__(\nself,\norientation: QtCore.Qt.Orientation | constants.OrientationStr,\nparent: QtWidgets.QWidget,\n):\nsuper().__init__(orientation, parent)\nself._pd = self.PrivateData()\nself.sectionResized.connect(self.on_section_resized)\nself.setHighlightSections(True)\nself.setSectionsClickable(True)\nself.show()  # force to be visible\nif orientation in {constants.HORIZONTAL, \"horizontal\"}:\nparent.setHorizontalHeader(self)\nelse:\nparent.setVerticalHeader(self)\nself.sectionMoved.connect(self._on_section_moved)\ndef _on_section_moved(self, logical_index, old_visual_index, new_visual_index):\nview = self.parent()\nmodel = view.model()\nif not hasattr(model, \"reorder\"):\nreturn  # reorder underlying data of models with /reorder/ def only\nif getattr(self, \"manual_move\", False):\nself.manual_move = False\nreturn\nself.manual_move = True\nself.moveSection(new_visual_index, old_visual_index)  # cancel move\nif not model.reorder(old_visual_index, new_visual_index, self.orientation()):\nreturn\nrng = sorted((old_visual_index, new_visual_index))\nif self.orientation() == constants.HORIZONTAL:\noptions = [(view.columnWidth(i), i) for i in range(rng[0], rng[1] + 1)]\nfor i, col in enumerate(range(rng[0], rng[1] + 1)):\nview.setColumnWidth(col, options[i][0])\nview.selectColumn(new_visual_index)\nelse:\noptions = [(view.rowHeight(i), i) for i in range(rng[0], rng[1] + 1)]\nfor i, col in enumerate(range(rng[0], rng[1] + 1)):\nview.setRowHeight(col, options[i][0])\nview.selectRow(new_visual_index)\n# FIXME: don't select if sorting is enable?\nif self.isSortIndicatorShown():\nsort_ind_index = next(\n(i for i, o in enumerate(options) if o[1] == self.sortIndicatorSection()),\nNone,\n)\n# sort indicator is among sections being reordered\nif sort_ind_index is not None:\n# FIXME: does unnecessary sorting\nself.setSortIndicator(sort_ind_index + rng[0], self.sortIndicatorOrder())\nmodel.layoutChanged.emit()  # update view\ndef get_style_option_for_cell(\nself, logical_index: int\n) -&gt; QtWidgets.QStyleOptionHeader:\nopt = QtWidgets.QStyleOptionHeader()\nself.initStyleOption(opt)\nif self.isSortIndicatorShown() and self.sortIndicatorSection() == logical_index:\nasc = self.sortIndicatorOrder() == constants.ASCENDING\nopt.sortIndicator = SortIndicator.SortDown if asc else SortIndicator.SortUp\nif self.window().isActiveWindow():\nopt.state = opt.state | StateFlag.State_Active\nopt.textAlignment = QtCore.Qt.AlignmentFlag.AlignCenter\nopt.iconAlignment = QtCore.Qt.AlignmentFlag.AlignVCenter\nopt.section = logical_index\nvisual = self.visualIndex(logical_index)\nif self.count() == 1:\nopt.position = SectionPosition.OnlyOneSection\nelif visual == 0:\nopt.position = SectionPosition.Beginning\nelse:\nis_end = visual == self.count() - 1\nopt.position = SectionPosition.End if is_end else SectionPosition.Middle\nsel_model = self.selectionModel()\nif not sel_model:\nreturn opt\nroot_idx = self.rootIndex()\nif self.sectionsClickable() and self.highlightSections():\nif self.orientation() == constants.HORIZONTAL:\nif sel_model.columnIntersectsSelection(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_On\nif sel_model.isColumnSelected(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_Sunken\nelse:\nif sel_model.rowIntersectsSelection(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_On\nif sel_model.isRowSelected(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_Sunken\nprev_idx = self.logicalIndex(visual - 1)\nnext_idx = self.logicalIndex(visual + 1)\nif self.orientation() == constants.HORIZONTAL:\nprev_selected = sel_model.isColumnSelected(prev_idx, root_idx)\nnext_selected = sel_model.isColumnSelected(next_idx, root_idx)\nelse:\nprev_selected = sel_model.isRowSelected(prev_idx, root_idx)\nnext_selected = sel_model.isRowSelected(next_idx, root_idx)\nif prev_selected and next_selected:\nopt.selectedPosition = SelectedPosition.NextAndPreviousAreSelected\nelif prev_selected:\nopt.selectedPosition = SelectedPosition.PreviousIsSelected\nelif next_selected:\nopt.selectedPosition = SelectedPosition.NextIsSelected\nelse:\nopt.selectedPosition = SelectedPosition.NotAdjacent\nreturn opt\ndef sectionSizeFromContents(self, logical_index: int) -&gt; QtCore.QSize:\nif not self._pd.header_model:\nreturn super().sectionSizeFromContents(logical_index)\ncur_leaf_index = self._pd.leaf_index(logical_index)\nif not cur_leaf_index.isValid():\nreturn super().sectionSizeFromContents(logical_index)\nstyleOption = QtWidgets.QStyleOptionHeader(\nself.get_style_option_for_cell(logical_index)\n)\ns = self._pd.get_cell_size(cur_leaf_index, self, styleOption)\ncur_leaf_index = cur_leaf_index.parent()\nwhile cur_leaf_index.isValid():\ncell_size = self._pd.get_cell_size(cur_leaf_index, self, styleOption)\nif self.orientation() == constants.HORIZONTAL:\ns.setHeight(s.height() + cell_size.height())\nelse:\ns.setWidth(s.width() + cell_size.width())\ncur_leaf_index = cur_leaf_index.parent()\nreturn s\ndef paintSection(\nself, painter: QtGui.QPainter, rect: QtCore.QRect, logical_index: int\n):\nif not rect.isValid():\nsuper().paintSection(painter, rect, logical_index)\nreturn\nleaf_index = self._pd.leaf_index(logical_index)\nif not leaf_index.isValid():\nsuper().paintSection(painter, rect, logical_index)\nreturn\nstyle_option = self.get_style_option_for_cell(logical_index)\nif self.orientation() == constants.HORIZONTAL:\nself._pd.paint_horizontal_section(\npainter,\nrect,\nlogical_index,\nself,\nstyle_option,\nleaf_index,\n)\nelse:\nself._pd.paint_vertical_section(\npainter,\nrect,\nlogical_index,\nself,\nstyle_option,\nleaf_index,\n)\ndef on_section_resized(self, logical_index: int):\nif self.isSectionHidden(logical_index):\nreturn\nleaf_index = self._pd.leaf_index(logical_index)\nif leaf_index.isValid():\nleafs_list = self._pd.leafs(self._pd.find_root_index(leaf_index))\nstart = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nis_horizontal = self.orientation() == constants.HORIZONTAL\nfor _ in range(start, 0, -1):\nlogical_index -= 1\nw = self.viewport().width()\nh = self.viewport().height()\npos = self.sectionViewportPosition(logical_index)\nr = QtCore.QRect(pos, 0, w - pos, h)\nif is_horizontal:\nif self.isRightToLeft():\nr.setRect(0, 0, pos + self.sectionSize(logical_index), h)\nelse:\nr.setRect(0, pos, w, h - pos)\nself.viewport().update(r.normalized())\ndef setModel(self, model: QtCore.QAbstractItemModel):\nsuper().setModel(model)\nmodel.layoutChanged.connect(self.layoutChanged)\nself.layoutChanged()\ndef layoutChanged(self):\nif model := self.model():\nself._pd.init_from_new_model(self.orientation(), model)\nis_horizontal = self.orientation() == constants.HORIZONTAL\ncount = model.columnCount() if is_horizontal else model.rowCount()\nself.initializeSections(0, count - 1)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData","title":"<code>PrivateData</code>","text":"<p>Privatedata.</p> Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>class PrivateData:\n\"\"\"Privatedata.\"\"\"\nheader_model = None\ndef init_from_new_model(self, orientation: int, model: QtCore.QAbstractItemModel):\nis_hor = orientation == constants.HORIZONTAL\nrole = HORIZONTAL_HEADER_DATA_ROLE if is_hor else VERTICAL_HEADER_DATA_ROLE\nself.header_model = model.data(core.ModelIndex(), role)\ndef find_root_index(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nwhile index.parent().isValid():\nindex = index.parent()\nreturn index\ndef get_parent_indexes(self, index: core.ModelIndex) -&gt; list:\nindexes = []\nwhile index.isValid():\nindexes.insert(0, index)\nindex = index.parent()\nreturn indexes\ndef find_leaf(\nself, index: core.ModelIndex, section_index: int, current_leaf_index: int\n) -&gt; core.ModelIndex:\nif not index.isValid():\nreturn core.ModelIndex(), current_leaf_index\nmodel = index.model()\nif child_count := model.columnCount(index):\nfor i in range(child_count):\nres, current_leaf_index = self.find_leaf(\nmodel.index(0, i, index), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res, current_leaf_index\nelse:\ncurrent_leaf_index += 1\nif current_leaf_index == section_index:\nreturn index, current_leaf_index\nreturn core.ModelIndex(), current_leaf_index\ndef leaf_index(self, section_index: int) -&gt; core.ModelIndex:\nif self.header_model:\ncurrent_leaf_index = -1\nfor i in range(self.header_model.columnCount()):\nres, current_leaf_index = self.find_leaf(\nself.header_model.index(0, i), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res\nreturn core.ModelIndex()\ndef search_leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nres = []\nif index.isValid():\nmodel = index.model()\nif child_count := index.model().columnCount(index):\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nres += self.search_leafs(leaf)\nelse:\nres.append(index)\nreturn res\ndef leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nleafs = []\nif index.isValid():\nmodel = index.model()\nchild_count = index.model().columnCount(index)\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nleafs += self.search_leafs(leaf)\nreturn leafs\ndef set_foreground_brush(\nself, opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif foreground_brush := index.data(constants.FOREGROUND_ROLE):\nbrush = QtGui.QBrush(foreground_brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.ButtonText, brush)\ndef set_background_brush(\nself, opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif background_brush := index.data(constants.BACKGROUND_ROLE):\nbrush = QtGui.QBrush(background_brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.Button, brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.Window, brush)\ndef get_cell_size(\nself,\nleaf_index: core.ModelIndex,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\n) -&gt; QtCore.QSize:\nres = QtCore.QSize()\nif variant := leaf_index.data(constants.SIZE_HINT_ROLE):\nres = variant\nfnt = var if (var := leaf_index.data(constants.FONT_ROLE)) else hv.font()\nfnt.setBold(True)\nfm = QtGui.QFontMetrics(fnt)\ntext_size = fm.size(0, leaf_index.data(constants.DISPLAY_ROLE))\nsize = text_size + QtCore.QSize(4, 0)\nif leaf_index.data(constants.USER_ROLE):\nsize.transpose()\ndecoration_size = hv.style().sizeFromContents(\nQtWidgets.QStyle.ContentsType.CT_HeaderSection,\nstyle_options,\nQtCore.QSize(),\nhv,\n)\nempty_text_size = fm.size(0, \"\")\nreturn res.expandedTo(size + decoration_size - empty_text_size)\ndef get_current_cell_width(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nhv: QtWidgets.QHeaderView,\n) -&gt; int:\nleafs_list = self.leafs(searched_index)\nif not leafs_list:\nreturn hv.sectionSize(section_index)\noffset = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - offset\nreturn sum(\nhv.sectionSize(first_leaf_section_index + i)\nfor i in range(len(leafs_list))\n)\ndef get_current_cell_left(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nleft: int,\nhv: QtWidgets.QHeaderView,\n) -&gt; int:\nif leafs_list := self.leafs(searched_index):\nn = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - n\nfor i in range(n - 1, -1, -1):\nleft -= hv.sectionSize(first_leaf_section_index + i)\nreturn left\ndef paint_horizontal_cell(\nself,\npainter: QtGui.QPainter,\nhv: QtWidgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: QtWidgets.QStyleOptionHeader,\nsection_rect: QtCore.QRect,\ntop: int,\n):\nuniopt = QtWidgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nheight = (\nsection_rect.height() - top\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).height()\n)\nleft = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.left(), hv\n)\nwidth = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = QtCore.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = QtGui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = QtCore.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(QtCore.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn top + height\ndef paint_horizontal_section(\nself,\npainter: QtGui.QPainter,\nsection_rect: QtCore.QRect,\nlogical_leaf_index: int,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\n#            print(logical_leaf_index)\nold_bo = painter.brushOrigin()\ntop = section_rect.y()\nindexes = self.get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = QtWidgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nif i &lt; len(indexes) - 1:  # Use sortIndicator for inner level only\nreal_style_options.sortIndicator = SortIndicator.None_\n#                if i==0:\n#                    print(self.leafs(indexes[i]), leaf_index)\ntop = self.paint_horizontal_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\ntop,\n)\npainter.setBrushOrigin(old_bo)\ndef paint_vertical_cell(\nself,\npainter: QtGui.QPainter,\nhv: QtWidgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: QtWidgets.QStyleOptionHeader,\nsection_rect: QtCore.QRect,\nleft: int,\n):\nuniopt = QtWidgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nwidth = (\nsection_rect.width() - left\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).width()\n)\ntop = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.top(), hv\n)\nheight = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = QtCore.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = QtGui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = QtCore.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(QtCore.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn left + width\ndef paint_vertical_section(\nself,\npainter: QtGui.QPainter,\nsection_rect: QtCore.QRect,\nlogical_leaf_index: int,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\nold_bo = painter.brushOrigin()\nleft = section_rect.x()\nindexes = self.get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = QtWidgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nleft = self.paint_vertical_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\nleft,\n)\npainter.setBrushOrigin(old_bo)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.header_model","title":"<code>header_model = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.find_leaf","title":"<code>find_leaf(index: core.ModelIndex, section_index: int, current_leaf_index: int) -&gt; core.ModelIndex</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def find_leaf(\nself, index: core.ModelIndex, section_index: int, current_leaf_index: int\n) -&gt; core.ModelIndex:\nif not index.isValid():\nreturn core.ModelIndex(), current_leaf_index\nmodel = index.model()\nif child_count := model.columnCount(index):\nfor i in range(child_count):\nres, current_leaf_index = self.find_leaf(\nmodel.index(0, i, index), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res, current_leaf_index\nelse:\ncurrent_leaf_index += 1\nif current_leaf_index == section_index:\nreturn index, current_leaf_index\nreturn core.ModelIndex(), current_leaf_index\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.find_root_index","title":"<code>find_root_index(index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def find_root_index(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nwhile index.parent().isValid():\nindex = index.parent()\nreturn index\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.get_cell_size","title":"<code>get_cell_size(leaf_index: core.ModelIndex, hv: QtWidgets.QHeaderView, style_options: QtWidgets.QStyleOptionHeader) -&gt; QtCore.QSize</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def get_cell_size(\nself,\nleaf_index: core.ModelIndex,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\n) -&gt; QtCore.QSize:\nres = QtCore.QSize()\nif variant := leaf_index.data(constants.SIZE_HINT_ROLE):\nres = variant\nfnt = var if (var := leaf_index.data(constants.FONT_ROLE)) else hv.font()\nfnt.setBold(True)\nfm = QtGui.QFontMetrics(fnt)\ntext_size = fm.size(0, leaf_index.data(constants.DISPLAY_ROLE))\nsize = text_size + QtCore.QSize(4, 0)\nif leaf_index.data(constants.USER_ROLE):\nsize.transpose()\ndecoration_size = hv.style().sizeFromContents(\nQtWidgets.QStyle.ContentsType.CT_HeaderSection,\nstyle_options,\nQtCore.QSize(),\nhv,\n)\nempty_text_size = fm.size(0, \"\")\nreturn res.expandedTo(size + decoration_size - empty_text_size)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.get_current_cell_left","title":"<code>get_current_cell_left(searched_index: core.ModelIndex, leaf_index: core.ModelIndex, section_index: int, left: int, hv: QtWidgets.QHeaderView) -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def get_current_cell_left(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nleft: int,\nhv: QtWidgets.QHeaderView,\n) -&gt; int:\nif leafs_list := self.leafs(searched_index):\nn = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - n\nfor i in range(n - 1, -1, -1):\nleft -= hv.sectionSize(first_leaf_section_index + i)\nreturn left\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.get_current_cell_width","title":"<code>get_current_cell_width(searched_index: core.ModelIndex, leaf_index: core.ModelIndex, section_index: int, hv: QtWidgets.QHeaderView) -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def get_current_cell_width(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nhv: QtWidgets.QHeaderView,\n) -&gt; int:\nleafs_list = self.leafs(searched_index)\nif not leafs_list:\nreturn hv.sectionSize(section_index)\noffset = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - offset\nreturn sum(\nhv.sectionSize(first_leaf_section_index + i)\nfor i in range(len(leafs_list))\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.get_parent_indexes","title":"<code>get_parent_indexes(index: core.ModelIndex) -&gt; list</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def get_parent_indexes(self, index: core.ModelIndex) -&gt; list:\nindexes = []\nwhile index.isValid():\nindexes.insert(0, index)\nindex = index.parent()\nreturn indexes\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.init_from_new_model","title":"<code>init_from_new_model(orientation: int, model: QtCore.QAbstractItemModel)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def init_from_new_model(self, orientation: int, model: QtCore.QAbstractItemModel):\nis_hor = orientation == constants.HORIZONTAL\nrole = HORIZONTAL_HEADER_DATA_ROLE if is_hor else VERTICAL_HEADER_DATA_ROLE\nself.header_model = model.data(core.ModelIndex(), role)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.leaf_index","title":"<code>leaf_index(section_index: int) -&gt; core.ModelIndex</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def leaf_index(self, section_index: int) -&gt; core.ModelIndex:\nif self.header_model:\ncurrent_leaf_index = -1\nfor i in range(self.header_model.columnCount()):\nres, current_leaf_index = self.find_leaf(\nself.header_model.index(0, i), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res\nreturn core.ModelIndex()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.leafs","title":"<code>leafs(index: core.ModelIndex) -&gt; list[core.ModelIndex]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nleafs = []\nif index.isValid():\nmodel = index.model()\nchild_count = index.model().columnCount(index)\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nleafs += self.search_leafs(leaf)\nreturn leafs\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.paint_horizontal_cell","title":"<code>paint_horizontal_cell(painter: QtGui.QPainter, hv: QtWidgets.QHeaderView, cell_index: core.ModelIndex, leaf_index: core.ModelIndex, logical_leaf_index: int, style_options: QtWidgets.QStyleOptionHeader, section_rect: QtCore.QRect, top: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def paint_horizontal_cell(\nself,\npainter: QtGui.QPainter,\nhv: QtWidgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: QtWidgets.QStyleOptionHeader,\nsection_rect: QtCore.QRect,\ntop: int,\n):\nuniopt = QtWidgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nheight = (\nsection_rect.height() - top\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).height()\n)\nleft = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.left(), hv\n)\nwidth = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = QtCore.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = QtGui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = QtCore.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(QtCore.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn top + height\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.paint_horizontal_section","title":"<code>paint_horizontal_section(painter: QtGui.QPainter, section_rect: QtCore.QRect, logical_leaf_index: int, hv: QtWidgets.QHeaderView, style_options: QtWidgets.QStyleOptionHeader, leaf_index: core.ModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def paint_horizontal_section(\nself,\npainter: QtGui.QPainter,\nsection_rect: QtCore.QRect,\nlogical_leaf_index: int,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\n#            print(logical_leaf_index)\nold_bo = painter.brushOrigin()\ntop = section_rect.y()\nindexes = self.get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = QtWidgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nif i &lt; len(indexes) - 1:  # Use sortIndicator for inner level only\nreal_style_options.sortIndicator = SortIndicator.None_\n#                if i==0:\n#                    print(self.leafs(indexes[i]), leaf_index)\ntop = self.paint_horizontal_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\ntop,\n)\npainter.setBrushOrigin(old_bo)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.paint_vertical_cell","title":"<code>paint_vertical_cell(painter: QtGui.QPainter, hv: QtWidgets.QHeaderView, cell_index: core.ModelIndex, leaf_index: core.ModelIndex, logical_leaf_index: int, style_options: QtWidgets.QStyleOptionHeader, section_rect: QtCore.QRect, left: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def paint_vertical_cell(\nself,\npainter: QtGui.QPainter,\nhv: QtWidgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: QtWidgets.QStyleOptionHeader,\nsection_rect: QtCore.QRect,\nleft: int,\n):\nuniopt = QtWidgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nwidth = (\nsection_rect.width() - left\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).width()\n)\ntop = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.top(), hv\n)\nheight = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = QtCore.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = QtGui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = QtCore.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(QtCore.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn left + width\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.paint_vertical_section","title":"<code>paint_vertical_section(painter: QtGui.QPainter, section_rect: QtCore.QRect, logical_leaf_index: int, hv: QtWidgets.QHeaderView, style_options: QtWidgets.QStyleOptionHeader, leaf_index: core.ModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def paint_vertical_section(\nself,\npainter: QtGui.QPainter,\nsection_rect: QtCore.QRect,\nlogical_leaf_index: int,\nhv: QtWidgets.QHeaderView,\nstyle_options: QtWidgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\nold_bo = painter.brushOrigin()\nleft = section_rect.x()\nindexes = self.get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = QtWidgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nleft = self.paint_vertical_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\nleft,\n)\npainter.setBrushOrigin(old_bo)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.search_leafs","title":"<code>search_leafs(index: core.ModelIndex) -&gt; list[core.ModelIndex]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def search_leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nres = []\nif index.isValid():\nmodel = index.model()\nif child_count := index.model().columnCount(index):\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nres += self.search_leafs(leaf)\nelse:\nres.append(index)\nreturn res\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.set_background_brush","title":"<code>set_background_brush(opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def set_background_brush(\nself, opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif background_brush := index.data(constants.BACKGROUND_ROLE):\nbrush = QtGui.QBrush(background_brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.Button, brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.Window, brush)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.PrivateData.set_foreground_brush","title":"<code>set_foreground_brush(opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def set_foreground_brush(\nself, opt: QtWidgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif foreground_brush := index.data(constants.FOREGROUND_ROLE):\nbrush = QtGui.QBrush(foreground_brush)\nopt.palette.setBrush(QtGui.QPalette.ColorRole.ButtonText, brush)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.__init__","title":"<code>__init__(orientation: QtCore.Qt.Orientation | constants.OrientationStr, parent: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def __init__(\nself,\norientation: QtCore.Qt.Orientation | constants.OrientationStr,\nparent: QtWidgets.QWidget,\n):\nsuper().__init__(orientation, parent)\nself._pd = self.PrivateData()\nself.sectionResized.connect(self.on_section_resized)\nself.setHighlightSections(True)\nself.setSectionsClickable(True)\nself.show()  # force to be visible\nif orientation in {constants.HORIZONTAL, \"horizontal\"}:\nparent.setHorizontalHeader(self)\nelse:\nparent.setVerticalHeader(self)\nself.sectionMoved.connect(self._on_section_moved)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.get_style_option_for_cell","title":"<code>get_style_option_for_cell(logical_index: int) -&gt; QtWidgets.QStyleOptionHeader</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def get_style_option_for_cell(\nself, logical_index: int\n) -&gt; QtWidgets.QStyleOptionHeader:\nopt = QtWidgets.QStyleOptionHeader()\nself.initStyleOption(opt)\nif self.isSortIndicatorShown() and self.sortIndicatorSection() == logical_index:\nasc = self.sortIndicatorOrder() == constants.ASCENDING\nopt.sortIndicator = SortIndicator.SortDown if asc else SortIndicator.SortUp\nif self.window().isActiveWindow():\nopt.state = opt.state | StateFlag.State_Active\nopt.textAlignment = QtCore.Qt.AlignmentFlag.AlignCenter\nopt.iconAlignment = QtCore.Qt.AlignmentFlag.AlignVCenter\nopt.section = logical_index\nvisual = self.visualIndex(logical_index)\nif self.count() == 1:\nopt.position = SectionPosition.OnlyOneSection\nelif visual == 0:\nopt.position = SectionPosition.Beginning\nelse:\nis_end = visual == self.count() - 1\nopt.position = SectionPosition.End if is_end else SectionPosition.Middle\nsel_model = self.selectionModel()\nif not sel_model:\nreturn opt\nroot_idx = self.rootIndex()\nif self.sectionsClickable() and self.highlightSections():\nif self.orientation() == constants.HORIZONTAL:\nif sel_model.columnIntersectsSelection(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_On\nif sel_model.isColumnSelected(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_Sunken\nelse:\nif sel_model.rowIntersectsSelection(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_On\nif sel_model.isRowSelected(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_Sunken\nprev_idx = self.logicalIndex(visual - 1)\nnext_idx = self.logicalIndex(visual + 1)\nif self.orientation() == constants.HORIZONTAL:\nprev_selected = sel_model.isColumnSelected(prev_idx, root_idx)\nnext_selected = sel_model.isColumnSelected(next_idx, root_idx)\nelse:\nprev_selected = sel_model.isRowSelected(prev_idx, root_idx)\nnext_selected = sel_model.isRowSelected(next_idx, root_idx)\nif prev_selected and next_selected:\nopt.selectedPosition = SelectedPosition.NextAndPreviousAreSelected\nelif prev_selected:\nopt.selectedPosition = SelectedPosition.PreviousIsSelected\nelif next_selected:\nopt.selectedPosition = SelectedPosition.NextIsSelected\nelse:\nopt.selectedPosition = SelectedPosition.NotAdjacent\nreturn opt\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.layoutChanged","title":"<code>layoutChanged()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def layoutChanged(self):\nif model := self.model():\nself._pd.init_from_new_model(self.orientation(), model)\nis_horizontal = self.orientation() == constants.HORIZONTAL\ncount = model.columnCount() if is_horizontal else model.rowCount()\nself.initializeSections(0, count - 1)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.on_section_resized","title":"<code>on_section_resized(logical_index: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def on_section_resized(self, logical_index: int):\nif self.isSectionHidden(logical_index):\nreturn\nleaf_index = self._pd.leaf_index(logical_index)\nif leaf_index.isValid():\nleafs_list = self._pd.leafs(self._pd.find_root_index(leaf_index))\nstart = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nis_horizontal = self.orientation() == constants.HORIZONTAL\nfor _ in range(start, 0, -1):\nlogical_index -= 1\nw = self.viewport().width()\nh = self.viewport().height()\npos = self.sectionViewportPosition(logical_index)\nr = QtCore.QRect(pos, 0, w - pos, h)\nif is_horizontal:\nif self.isRightToLeft():\nr.setRect(0, 0, pos + self.sectionSize(logical_index), h)\nelse:\nr.setRect(0, pos, w, h - pos)\nself.viewport().update(r.normalized())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.paintSection","title":"<code>paintSection(painter: QtGui.QPainter, rect: QtCore.QRect, logical_index: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def paintSection(\nself, painter: QtGui.QPainter, rect: QtCore.QRect, logical_index: int\n):\nif not rect.isValid():\nsuper().paintSection(painter, rect, logical_index)\nreturn\nleaf_index = self._pd.leaf_index(logical_index)\nif not leaf_index.isValid():\nsuper().paintSection(painter, rect, logical_index)\nreturn\nstyle_option = self.get_style_option_for_cell(logical_index)\nif self.orientation() == constants.HORIZONTAL:\nself._pd.paint_horizontal_section(\npainter,\nrect,\nlogical_index,\nself,\nstyle_option,\nleaf_index,\n)\nelse:\nself._pd.paint_vertical_section(\npainter,\nrect,\nlogical_index,\nself,\nstyle_option,\nleaf_index,\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.sectionSizeFromContents","title":"<code>sectionSizeFromContents(logical_index: int) -&gt; QtCore.QSize</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def sectionSizeFromContents(self, logical_index: int) -&gt; QtCore.QSize:\nif not self._pd.header_model:\nreturn super().sectionSizeFromContents(logical_index)\ncur_leaf_index = self._pd.leaf_index(logical_index)\nif not cur_leaf_index.isValid():\nreturn super().sectionSizeFromContents(logical_index)\nstyleOption = QtWidgets.QStyleOptionHeader(\nself.get_style_option_for_cell(logical_index)\n)\ns = self._pd.get_cell_size(cur_leaf_index, self, styleOption)\ncur_leaf_index = cur_leaf_index.parent()\nwhile cur_leaf_index.isValid():\ncell_size = self._pd.get_cell_size(cur_leaf_index, self, styleOption)\nif self.orientation() == constants.HORIZONTAL:\ns.setHeight(s.height() + cell_size.height())\nelse:\ns.setWidth(s.width() + cell_size.width())\ncur_leaf_index = cur_leaf_index.parent()\nreturn s\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.hierarchicalheaderview.HierarchicalHeaderView.setModel","title":"<code>setModel(model: QtCore.QAbstractItemModel)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\hierarchicalheaderview.py</code> <pre><code>def setModel(self, model: QtCore.QAbstractItemModel):\nsuper().setModel(model)\nmodel.layoutChanged.connect(self.layoutChanged)\nself.layoutChanged()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.IconBrowser","title":"<code>IconBrowser</code>","text":"<p>         Bases: <code>widgets.MainWindow</code></p> <p>A small browser window that allows the user to search through all icons.</p> <p>You can also copy the name and python code for the currently selected icon.</p> Source code in <code>prettyqt\\custom_widgets\\iconbrowser.py</code> <pre><code>class IconBrowser(widgets.MainWindow):\n\"\"\"A small browser window that allows the user to search through all icons.\n    You can also copy the name and python code for the currently selected icon.\n    \"\"\"\ndef __init__(self):\nsuper().__init__()\nself.setMinimumSize(500, 500)\nself.set_title(\"Icon Browser\")\nfont_maps = {k: v.charmap for k, v in iconprovider._instance().fonts.items()}\nicon_names = [\nf\"{font_collection}.{icon_name}\"\nfor font_collection, font_data in font_maps.items()\nfor icon_name in font_data\n]\nmodel = IconModel(self.get_palette().get_color(\"text\"))\nmodel.setStringList(sorted(icon_names))\nself._proxy_model = custom_models.FuzzyFilterProxyModel()\nself._proxy_model.setSourceModel(model)\nself._proxy_model.set_filter_case_sensitive(True)\nself._proxy_model.set_match_color(None)\nself._listview = IconListView(\nself,\nuniform_item_sizes=True,\nview_mode=\"icon\",\ncontext_menu_policy=\"custom\",\n)\nself._listview.set_model(self._proxy_model)\nself._listview.doubleClicked.connect(self._copy_icon_text)\nself._lineedit = widgets.LineEdit(parent=self)\nself._lineedit.textChanged.connect(self._trigger_instant_update)\nself._combobox = widgets.ComboBox(parent=self)\nself._combobox.setMinimumWidth(75)\nself._combobox.currentIndexChanged.connect(self._trigger_instant_update)\nself._combobox.addItems([ALL_COLLECTIONS, *sorted(font_maps.keys())])\nsearch_bar_frame = widgets.Frame(self)\nwith widgets.HBoxLayout.create(search_bar_frame, margin=0) as layout:\nlayout.add(self._combobox)\nlayout.add(self._lineedit)\nself._copy_button = widgets.PushButton(\"Copy Name\", clicked=self._copy_icon_text)\nframe = widgets.Frame(self)\nwith widgets.VBoxLayout.create(frame) as layout:\nlayout.add(search_bar_frame)\nlayout.add(self._listview)\nlayout.add(self._copy_button)\nself.setCentralWidget(frame)\nself.add_shortcut(\"return\", self._copy_icon_text)\nself._lineedit.setFocus()\nself.position_on(\"screen\")\ndef _trigger_instant_update(self):\n\"\"\"Stop timer used for committing search term and update proxy model instantly.\"\"\"\nself._proxy_model.set_search_term(self._lineedit.text())\ndef _copy_icon_text(self):\n\"\"\"Copy the name of the currently selected icon to the clipboard.\"\"\"\nif indexes := self._listview.selectedIndexes():\nwidgets.Application.copy_to_clipboard(indexes[0].data())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconbrowser.IconBrowser.__init__","title":"<code>__init__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconbrowser.py</code> <pre><code>def __init__(self):\nsuper().__init__()\nself.setMinimumSize(500, 500)\nself.set_title(\"Icon Browser\")\nfont_maps = {k: v.charmap for k, v in iconprovider._instance().fonts.items()}\nicon_names = [\nf\"{font_collection}.{icon_name}\"\nfor font_collection, font_data in font_maps.items()\nfor icon_name in font_data\n]\nmodel = IconModel(self.get_palette().get_color(\"text\"))\nmodel.setStringList(sorted(icon_names))\nself._proxy_model = custom_models.FuzzyFilterProxyModel()\nself._proxy_model.setSourceModel(model)\nself._proxy_model.set_filter_case_sensitive(True)\nself._proxy_model.set_match_color(None)\nself._listview = IconListView(\nself,\nuniform_item_sizes=True,\nview_mode=\"icon\",\ncontext_menu_policy=\"custom\",\n)\nself._listview.set_model(self._proxy_model)\nself._listview.doubleClicked.connect(self._copy_icon_text)\nself._lineedit = widgets.LineEdit(parent=self)\nself._lineedit.textChanged.connect(self._trigger_instant_update)\nself._combobox = widgets.ComboBox(parent=self)\nself._combobox.setMinimumWidth(75)\nself._combobox.currentIndexChanged.connect(self._trigger_instant_update)\nself._combobox.addItems([ALL_COLLECTIONS, *sorted(font_maps.keys())])\nsearch_bar_frame = widgets.Frame(self)\nwith widgets.HBoxLayout.create(search_bar_frame, margin=0) as layout:\nlayout.add(self._combobox)\nlayout.add(self._lineedit)\nself._copy_button = widgets.PushButton(\"Copy Name\", clicked=self._copy_icon_text)\nframe = widgets.Frame(self)\nwith widgets.VBoxLayout.create(frame) as layout:\nlayout.add(search_bar_frame)\nlayout.add(self._listview)\nlayout.add(self._copy_button)\nself.setCentralWidget(frame)\nself.add_shortcut(\"return\", self._copy_icon_text)\nself._lineedit.setFocus()\nself.position_on(\"screen\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.IconEdit","title":"<code>IconEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\iconedit.py</code> <pre><code>class IconEdit(widgets.Widget):\nvalue_changed = core.Signal(gui.Icon)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; gui.Icon:\nreturn self._value\ndef set_value(self, value: gui.Icon):\nself._value = value\nvalue = core.Property(gui.Icon, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconedit.IconEdit.value","title":"<code>value = core.Property(gui.Icon, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconedit.IconEdit.value_changed","title":"<code>value_changed = core.Signal(gui.Icon)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconedit.IconEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconedit.IconEdit.get_value","title":"<code>get_value() -&gt; gui.Icon</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconedit.py</code> <pre><code>def get_value(self) -&gt; gui.Icon:\nreturn self._value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconedit.IconEdit.set_value","title":"<code>set_value(value: gui.Icon)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconedit.py</code> <pre><code>def set_value(self, value: gui.Icon):\nself._value = value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.IconLabel","title":"<code>IconLabel</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\iconlabel.py</code> <pre><code>class IconLabel(widgets.Widget):\ndef __init__(\nself,\ntext: str | None = None,\ntooltip: str = \"\",\nicon: datatypes.IconType = \"mdi.help-circle-outline\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.set_layout(\"horizontal\", spacing=0)\nself.label = widgets.Label(text, margin=10)\nself.label.set_size_policy(horizontal=\"minimum\")\nicon = iconprovider.get_icon(icon)\nself.icon = widgets.Label(tool_tip=tooltip, pixmap=icon.pixmap(20, 20))\nself.icon.set_size_policy(horizontal=\"minimum\")\nself.box.add(self.label)\nself.box.add(self.icon)\nself.box.addStretch()\ndef __getattr__(self, value: str):\nreturn self.label.__getattribute__(value)\ndef __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconlabel.IconLabel.icon","title":"<code>icon = widgets.Label(tool_tip=tooltip, pixmap=icon.pixmap(20, 20))</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconlabel.IconLabel.label","title":"<code>label = widgets.Label(text, margin=10)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconlabel.IconLabel.__getattr__","title":"<code>__getattr__(value: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconlabel.py</code> <pre><code>def __getattr__(self, value: str):\nreturn self.label.__getattribute__(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconlabel.IconLabel.__init__","title":"<code>__init__(text: str | None = None, tooltip: str = '', icon: datatypes.IconType = 'mdi.help-circle-outline', parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconlabel.py</code> <pre><code>def __init__(\nself,\ntext: str | None = None,\ntooltip: str = \"\",\nicon: datatypes.IconType = \"mdi.help-circle-outline\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.set_layout(\"horizontal\", spacing=0)\nself.label = widgets.Label(text, margin=10)\nself.label.set_size_policy(horizontal=\"minimum\")\nicon = iconprovider.get_icon(icon)\nself.icon = widgets.Label(tool_tip=tooltip, pixmap=icon.pixmap(20, 20))\nself.icon.set_size_policy(horizontal=\"minimum\")\nself.box.add(self.label)\nself.box.add(self.icon)\nself.box.addStretch()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconlabel.IconLabel.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconlabel.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.IconWidget","title":"<code>IconWidget</code>","text":"<p>         Bases: <code>widgets.Label</code></p> <p>IconWidget gives the ability to display an icon as a widget.</p> <p>if supports the same arguments as icon() for example music_icon = qta.IconWidget('fa5s.music',                             color='blue',                             color_active='orange')</p> <p>it also have setIcon() and setIconSize() functions</p> Source code in <code>prettyqt\\custom_widgets\\iconwidget.py</code> <pre><code>class IconWidget(widgets.Label):\n\"\"\"IconWidget gives the ability to display an icon as a widget.\n    if supports the same arguments as icon()\n    for example\n    music_icon = qta.IconWidget('fa5s.music',\n                                color='blue',\n                                color_active='orange')\n    it also have setIcon() and setIconSize() functions\n    \"\"\"\ndef __init__(self, *names, parent: QtWidgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent=parent)\nself._icon: QtGui.QIcon | None = None\nself._size = core.Size(16, 16)\nself.set_icon(iconprovider._icon(*names, **kwargs))\ndef set_icon(self, _icon: datatypes.IconType):\n\"\"\"Set a new icon().\n        Parameters\n        ----------\n        _icon: qtawesome.icon\n            icon to set\n        \"\"\"\nself._icon = iconprovider.get_icon(_icon)\nself.setPixmap(self._icon.pixmap(self._size))\ndef set_icon_size(self, size: int | datatypes.SizeType):\nmatch size:\ncase tuple():\nsize = QtCore.QSize(*size)\ncase int():\nsize = QtCore.QSize(size, size)\nself._size = size\nself.update()\ndef update(self, *args, **kwargs):\nif self._icon:\nself.setPixmap(self._icon.pixmap(self._size))\nreturn super().update(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconwidget.IconWidget.__init__","title":"<code>__init__(*names, parent: QtWidgets.QWidget | None = None, **kwargs: QtWidgets.QWidget | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconwidget.py</code> <pre><code>def __init__(self, *names, parent: QtWidgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent=parent)\nself._icon: QtGui.QIcon | None = None\nself._size = core.Size(16, 16)\nself.set_icon(iconprovider._icon(*names, **kwargs))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconwidget.IconWidget.set_icon","title":"<code>set_icon(_icon: datatypes.IconType)</code>","text":"<p>Set a new icon().</p>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconwidget.IconWidget.set_icon--parameters","title":"Parameters","text":"qtawesome.icon <p>icon to set</p> Source code in <code>prettyqt\\custom_widgets\\iconwidget.py</code> <pre><code>def set_icon(self, _icon: datatypes.IconType):\n\"\"\"Set a new icon().\n    Parameters\n    ----------\n    _icon: qtawesome.icon\n        icon to set\n    \"\"\"\nself._icon = iconprovider.get_icon(_icon)\nself.setPixmap(self._icon.pixmap(self._size))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconwidget.IconWidget.set_icon_size","title":"<code>set_icon_size(size: int | datatypes.SizeType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconwidget.py</code> <pre><code>def set_icon_size(self, size: int | datatypes.SizeType):\nmatch size:\ncase tuple():\nsize = QtCore.QSize(*size)\ncase int():\nsize = QtCore.QSize(size, size)\nself._size = size\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.iconwidget.IconWidget.update","title":"<code>update(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\iconwidget.py</code> <pre><code>def update(self, *args, **kwargs):\nif self._icon:\nself.setPixmap(self._icon.pixmap(self._size))\nreturn super().update(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.Image","title":"<code>Image</code>","text":"<p>         Bases: <code>widgets.Label</code></p> Source code in <code>prettyqt\\custom_widgets\\image.py</code> <pre><code>class Image(widgets.Label):\ndef __init__(\nself,\npath: datatypes.PathType | None = None,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nif path:\nself.set_image(path)\ndef __repr__(self):\nreturn get_repr(self)\ndef set_image(self, path: datatypes.PathType, width: int = 300):\nself.setScaledContents(True)\nself.set_alignment(horizontal=\"center\")\nself.setText(\n\"&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;\"\nf\"&lt;img src={os.fspath(path)!r} width={str(width)!r}/&gt;\"\n\"&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\n)\n@classmethod\ndef from_path(\ncls, path: datatypes.PathType, parent: QtWidgets.QWidget | None = None\n) -&gt; Self:\npixmap = gui.Pixmap.from_file(path)\nlabel = cls(parent=parent)\nlabel.setPixmap(pixmap)\nlabel.resize(pixmap.width(), pixmap.height())\nreturn label\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.image.Image.__init__","title":"<code>__init__(path: datatypes.PathType | None = None, parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\image.py</code> <pre><code>def __init__(\nself,\npath: datatypes.PathType | None = None,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nif path:\nself.set_image(path)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.image.Image.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\image.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.image.Image.from_path","title":"<code>from_path(path: datatypes.PathType, parent: QtWidgets.QWidget | None = None) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\custom_widgets\\image.py</code> <pre><code>@classmethod\ndef from_path(\ncls, path: datatypes.PathType, parent: QtWidgets.QWidget | None = None\n) -&gt; Self:\npixmap = gui.Pixmap.from_file(path)\nlabel = cls(parent=parent)\nlabel.setPixmap(pixmap)\nlabel.resize(pixmap.width(), pixmap.height())\nreturn label\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.image.Image.set_image","title":"<code>set_image(path: datatypes.PathType, width: int = 300)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\image.py</code> <pre><code>def set_image(self, path: datatypes.PathType, width: int = 300):\nself.setScaledContents(True)\nself.set_alignment(horizontal=\"center\")\nself.setText(\n\"&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;\"\nf\"&lt;img src={os.fspath(path)!r} width={str(width)!r}/&gt;\"\n\"&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ImageViewer","title":"<code>ImageViewer</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\imageviewer.py</code> <pre><code>class ImageViewer(widgets.Widget):\ndef __init__(\nself,\ntitle: str = \"\",\npath: datatypes.PathType | None = None,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent)\nif title:\nself.set_title(title)\nself.image = None\nif path:\nself.image = widgets.Label.image_from_path(path, parent=self)\nself.show()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.imageviewer.ImageViewer.image","title":"<code>image = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.imageviewer.ImageViewer.__init__","title":"<code>__init__(title: str = '', path: datatypes.PathType | None = None, parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\imageviewer.py</code> <pre><code>def __init__(\nself,\ntitle: str = \"\",\npath: datatypes.PathType | None = None,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent)\nif title:\nself.set_title(title)\nself.image = None\nif path:\nself.image = widgets.Label.image_from_path(path, parent=self)\nself.show()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.InputAndSlider","title":"<code>InputAndSlider</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>class InputAndSlider(widgets.Widget):\nvalue_changed = core.Signal(int)\ndef __init__(self, bounds: tuple[int, int] | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.path = None\nself.spinbox = widgets.SpinBox()\nself.slider = widgets.Slider()\nwith widgets.HBoxLayout.create(self, margin=0) as layout:\nlayout.add(self.spinbox)\nlayout.add(self.slider)\nif bounds:\nself.set_range(*bounds)\nself.spinbox.valueChanged.connect(self.slider.set_value)\nself.slider.valueChanged.connect(self.spinbox.set_value)\nself.spinbox.valueChanged.connect(self.value_changed)\ndef __getattr__(self, val):\nreturn getattr(self.spinbox, val)\ndef serialize_fields(self):\nreturn dict(path=self.path)\n# def __setstate__(self, state):\n#     self.__init__(state[\"extensions\"])\n#     self.set_path(state[\"path\"])\n#     self.set_enabled(state.get(\"enabled\", True))\ndef set_range(self, min_val: int, max_val: int):\nself.spinbox.set_range(min_val, max_val)\nself.slider.set_range(min_val, max_val)\ndef get_value(self) -&gt; int:\nreturn self.spinbox.get_value()\ndef set_value(self, value: int):\nself.spinbox.set_value(value)\nself.slider.set_value(value)\ndef is_valid(self) -&gt; bool:\nreturn self.spinbox.is_valid()\ndef set_step_size(self, step_size: int):\nself.spinbox.set_step_size(step_size)\nself.slider.set_step_size(step_size)\nself.slider.setTickInterval(step_size)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.path","title":"<code>path = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.slider","title":"<code>slider = widgets.Slider()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.spinbox","title":"<code>spinbox = widgets.SpinBox()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.spinbox, val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.__init__","title":"<code>__init__(bounds: tuple[int, int] | None = None, **kwargs: tuple[int, int] | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def __init__(self, bounds: tuple[int, int] | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.path = None\nself.spinbox = widgets.SpinBox()\nself.slider = widgets.Slider()\nwith widgets.HBoxLayout.create(self, margin=0) as layout:\nlayout.add(self.spinbox)\nlayout.add(self.slider)\nif bounds:\nself.set_range(*bounds)\nself.spinbox.valueChanged.connect(self.slider.set_value)\nself.slider.valueChanged.connect(self.spinbox.set_value)\nself.spinbox.valueChanged.connect(self.value_changed)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.get_value","title":"<code>get_value() -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def get_value(self) -&gt; int:\nreturn self.spinbox.get_value()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn self.spinbox.is_valid()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def serialize_fields(self):\nreturn dict(path=self.path)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.set_range","title":"<code>set_range(min_val: int, max_val: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def set_range(self, min_val: int, max_val: int):\nself.spinbox.set_range(min_val, max_val)\nself.slider.set_range(min_val, max_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.set_step_size","title":"<code>set_step_size(step_size: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def set_step_size(self, step_size: int):\nself.spinbox.set_step_size(step_size)\nself.slider.set_step_size(step_size)\nself.slider.setTickInterval(step_size)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.inputandslider.InputAndSlider.set_value","title":"<code>set_value(value: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\inputandslider.py</code> <pre><code>def set_value(self, value: int):\nself.spinbox.set_value(value)\nself.slider.set_value(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.KeyCombinationEdit","title":"<code>KeyCombinationEdit</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QKeySequenceEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\keycombinationedit.py</code> <pre><code>class KeyCombinationEdit(widgets.WidgetMixin, QtWidgets.QKeySequenceEdit):\nvalue_changed = core.Signal(QtCore.QKeyCombination)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setMaximumSequenceLength(1)\ndef __repr__(self):\nreturn get_repr(self, self.get_value())\ndef _on_value_change(self, val):\nself.value_changed.emit(val[0])\ndef set_value(self, value: datatypes.KeyCombinationType):\nif not isinstance(value, QtGui.QKeySequence):\nvalue = gui.KeySequence(value)\nif len(value) == 0:\nself.clear()\nelse:\nself.setKeySequence(gui.KeySequence(value[0]))\ndef get_value(self) -&gt; str:\nseq = self.keySequence()\nreturn seq[0].toString() if len(seq) &gt; 0 else \"\"\ndef is_valid(self) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.keycombinationedit.KeyCombinationEdit.value_changed","title":"<code>value_changed = core.Signal(QtCore.QKeyCombination)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.keycombinationedit.KeyCombinationEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\keycombinationedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setMaximumSequenceLength(1)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.keycombinationedit.KeyCombinationEdit.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\keycombinationedit.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_value())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.keycombinationedit.KeyCombinationEdit.get_value","title":"<code>get_value() -&gt; str</code>","text":"Source code in <code>prettyqt\\custom_widgets\\keycombinationedit.py</code> <pre><code>def get_value(self) -&gt; str:\nseq = self.keySequence()\nreturn seq[0].toString() if len(seq) &gt; 0 else \"\"\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.keycombinationedit.KeyCombinationEdit.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\keycombinationedit.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.keycombinationedit.KeyCombinationEdit.set_value","title":"<code>set_value(value: datatypes.KeyCombinationType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\keycombinationedit.py</code> <pre><code>def set_value(self, value: datatypes.KeyCombinationType):\nif not isinstance(value, QtGui.QKeySequence):\nvalue = gui.KeySequence(value)\nif len(value) == 0:\nself.clear()\nelse:\nself.setKeySequence(gui.KeySequence(value[0]))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.LabeledSlider","title":"<code>LabeledSlider</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\labeledslider.py</code> <pre><code>class LabeledSlider(widgets.Widget):\nvalue_changed = core.Signal(int)\ndef __init__(\nself,\nlabels: Sequence[str],\norientation: constants.OrientationStr = \"horizontal\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nif not isinstance(labels, Sequence):\nraise ValueError(\"&lt;labels&gt; must be a sequence.\")\nself.levels = list(enumerate(labels))\nself.set_layout(orientation, margin=10)\n# gives some space to print labels\nself.left_margin = 10\nself.top_margin = 10\nself.right_margin = 10\nself.bottom_margin = 10\nself.sl = widgets.Slider(\norientation,\ntick_interval=1,\nsingle_step=1,\nminimum=0,\nmaximum=len(self.levels) - 1,\nvalue=0,\n)\nself.sl.value_changed.connect(self.value_changed)\nif orientation == \"horizontal\":\nself.sl.set_tick_position(\"below\")\nself.sl.setMinimumWidth(300)\nelse:\nself.sl.set_tick_position(\"left\")\nself.sl.setMinimumHeight(300)\nself.box.add(self.sl)\ndef paintEvent(self, e):\nsuper().paintEvent(e)\nstyle = self.sl.style()\nst_slider = widgets.StyleOptionSlider()\nst_slider.initFrom(self.sl)\nst_slider.orientation = self.sl.orientation()\nlength = style.pixelMetric(\nwidgets.Style.PixelMetric.PM_SliderLength, st_slider, self.sl\n)\navailable = style.pixelMetric(\nwidgets.Style.PixelMetric.PM_SliderSpaceAvailable, st_slider, self.sl\n)\nwith gui.Painter(self) as painter:\nfor v, v_str in self.levels:\n# get the size of the label\nrect = painter.get_text_rect(v_str)\nif self.sl.is_horizontal():\nx_loc = widgets.Style.sliderPositionFromValue(\nself.sl.minimum(), self.sl.maximum(), v, available\n)\n# I assume the offset is half the length of slider, therefore\n# + length//2\nx_loc += length // 2\n# left bound of the text = center - half of text width + L_margin\nleft = x_loc - rect.width() // 2 + self.left_margin\nbottom = self.rect().bottom()\n# enlarge margins if clipping\nif v == self.sl.minimum():\nif left &lt;= 0:\nself.left_margin = rect.width() // 2 - x_loc\nself.bottom_margin = max(self.bottom_margin, rect.height())\nself.adjust_margins()\nif v == self.sl.maximum() and rect.width() // 2 &gt;= self.right_margin:\nself.right_margin = rect.width() // 2\nself.adjust_margins()\nelse:\ny_loc = widgets.Style.sliderPositionFromValue(\nself.sl.minimum(),\nself.sl.maximum(),\nv,\navailable,\nupsideDown=True,\n)\nbottom = (\ny_loc + length // 2 + rect.height() // 2 + self.top_margin - 3\n)\n# there is a 3 px offset that I can't attribute to any metric\nleft = self.left_margin - rect.width()\nif left &lt;= 0:\nself.left_margin = rect.width() + 2\nself.adjust_margins()\npainter.drawText(left, bottom, v_str)\ndef adjust_margins(self):\nself.box.setContentsMargins(\nself.left_margin,\nself.top_margin,\nself.right_margin,\nself.bottom_margin,\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.bottom_margin","title":"<code>bottom_margin = 10</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.left_margin","title":"<code>left_margin = 10</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.levels","title":"<code>levels = list(enumerate(labels))</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.right_margin","title":"<code>right_margin = 10</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.sl","title":"<code>sl = widgets.Slider(orientation, tick_interval=1, single_step=1, minimum=0, maximum=len(self.levels) - 1, value=0)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.top_margin","title":"<code>top_margin = 10</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.__init__","title":"<code>__init__(labels: Sequence[str], orientation: constants.OrientationStr = 'horizontal', parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\labeledslider.py</code> <pre><code>def __init__(\nself,\nlabels: Sequence[str],\norientation: constants.OrientationStr = \"horizontal\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nif not isinstance(labels, Sequence):\nraise ValueError(\"&lt;labels&gt; must be a sequence.\")\nself.levels = list(enumerate(labels))\nself.set_layout(orientation, margin=10)\n# gives some space to print labels\nself.left_margin = 10\nself.top_margin = 10\nself.right_margin = 10\nself.bottom_margin = 10\nself.sl = widgets.Slider(\norientation,\ntick_interval=1,\nsingle_step=1,\nminimum=0,\nmaximum=len(self.levels) - 1,\nvalue=0,\n)\nself.sl.value_changed.connect(self.value_changed)\nif orientation == \"horizontal\":\nself.sl.set_tick_position(\"below\")\nself.sl.setMinimumWidth(300)\nelse:\nself.sl.set_tick_position(\"left\")\nself.sl.setMinimumHeight(300)\nself.box.add(self.sl)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.adjust_margins","title":"<code>adjust_margins()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\labeledslider.py</code> <pre><code>def adjust_margins(self):\nself.box.setContentsMargins(\nself.left_margin,\nself.top_margin,\nself.right_margin,\nself.bottom_margin,\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.labeledslider.LabeledSlider.paintEvent","title":"<code>paintEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\labeledslider.py</code> <pre><code>def paintEvent(self, e):\nsuper().paintEvent(e)\nstyle = self.sl.style()\nst_slider = widgets.StyleOptionSlider()\nst_slider.initFrom(self.sl)\nst_slider.orientation = self.sl.orientation()\nlength = style.pixelMetric(\nwidgets.Style.PixelMetric.PM_SliderLength, st_slider, self.sl\n)\navailable = style.pixelMetric(\nwidgets.Style.PixelMetric.PM_SliderSpaceAvailable, st_slider, self.sl\n)\nwith gui.Painter(self) as painter:\nfor v, v_str in self.levels:\n# get the size of the label\nrect = painter.get_text_rect(v_str)\nif self.sl.is_horizontal():\nx_loc = widgets.Style.sliderPositionFromValue(\nself.sl.minimum(), self.sl.maximum(), v, available\n)\n# I assume the offset is half the length of slider, therefore\n# + length//2\nx_loc += length // 2\n# left bound of the text = center - half of text width + L_margin\nleft = x_loc - rect.width() // 2 + self.left_margin\nbottom = self.rect().bottom()\n# enlarge margins if clipping\nif v == self.sl.minimum():\nif left &lt;= 0:\nself.left_margin = rect.width() // 2 - x_loc\nself.bottom_margin = max(self.bottom_margin, rect.height())\nself.adjust_margins()\nif v == self.sl.maximum() and rect.width() // 2 &gt;= self.right_margin:\nself.right_margin = rect.width() // 2\nself.adjust_margins()\nelse:\ny_loc = widgets.Style.sliderPositionFromValue(\nself.sl.minimum(),\nself.sl.maximum(),\nv,\navailable,\nupsideDown=True,\n)\nbottom = (\ny_loc + length // 2 + rect.height() // 2 + self.top_margin - 3\n)\n# there is a 3 px offset that I can't attribute to any metric\nleft = self.left_margin - rect.width()\nif left &lt;= 0:\nself.left_margin = rect.width() + 2\nself.adjust_margins()\npainter.drawText(left, bottom, v_str)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.ListInput","title":"<code>ListInput</code>","text":"<p>         Bases: <code>widgets.LineEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\listinput.py</code> <pre><code>class ListInput(widgets.LineEdit):\ndef __init__(\nself,\nvalue: list[float] | str = \"\",\ntyp: type = int,\nallow_single: bool = False,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nif typ is int:\nval = custom_validators.IntListValidator(allow_single=allow_single)\nelif typ is float:\nval = custom_validators.FloatListValidator(allow_single=allow_single)\nelse:\nraise ValueError(f\"Invalid type {typ}\")\nself.set_validator(val)\nself.set_value(value)\ndef get_value(self) -&gt; list[float]:  # type: ignore[override]\nreturn helpers.string_to_num_array(self.text())\ndef set_value(self, value: list[float] | str):\nif isinstance(value, list):\nvalue = str(value)[1:-1].replace(\" \", \"\")\nself.set_text(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.listinput.ListInput.__init__","title":"<code>__init__(value: list[float] | str = '', typ: type = int, allow_single: bool = False, **kwargs: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\listinput.py</code> <pre><code>def __init__(\nself,\nvalue: list[float] | str = \"\",\ntyp: type = int,\nallow_single: bool = False,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nif typ is int:\nval = custom_validators.IntListValidator(allow_single=allow_single)\nelif typ is float:\nval = custom_validators.FloatListValidator(allow_single=allow_single)\nelse:\nraise ValueError(f\"Invalid type {typ}\")\nself.set_validator(val)\nself.set_value(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.listinput.ListInput.get_value","title":"<code>get_value() -&gt; list[float]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\listinput.py</code> <pre><code>def get_value(self) -&gt; list[float]:  # type: ignore[override]\nreturn helpers.string_to_num_array(self.text())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.listinput.ListInput.set_value","title":"<code>set_value(value: list[float] | str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\listinput.py</code> <pre><code>def set_value(self, value: list[float] | str):\nif isinstance(value, list):\nvalue = str(value)[1:-1].replace(\" \", \"\")\nself.set_text(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.LocaleEdit","title":"<code>LocaleEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\localeedit.py</code> <pre><code>class LocaleEdit(widgets.Widget):\nvalue_changed = core.Signal(core.Locale)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Locale:\nreturn self._value\ndef set_value(self, value: core.Locale):\nself._value = value\nvalue = core.Property(core.Locale, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.localeedit.LocaleEdit.value","title":"<code>value = core.Property(core.Locale, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.localeedit.LocaleEdit.value_changed","title":"<code>value_changed = core.Signal(core.Locale)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.localeedit.LocaleEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\localeedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.localeedit.LocaleEdit.get_value","title":"<code>get_value() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\custom_widgets\\localeedit.py</code> <pre><code>def get_value(self) -&gt; core.Locale:\nreturn self._value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.localeedit.LocaleEdit.set_value","title":"<code>set_value(value: core.Locale)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\localeedit.py</code> <pre><code>def set_value(self, value: core.Locale):\nself._value = value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.LogTextEdit","title":"<code>LogTextEdit</code>","text":"<p>         Bases: <code>widgets.PlainTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\logtextedit.py</code> <pre><code>class LogTextEdit(widgets.PlainTextEdit):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.rules = []\nself.allow_wheel_zoom()\nself.set_font(\"Consolas\")\nself.append_text(f\"Python version: {sys.version}\")\nnew_logger = logging.getLogger()\n# self.handler = signallogger.LineSignalLogger()\n# self.handler.log_line.connect(self.append_text)\nself.handler = signallogger.RecordSignalLogger()\nself.handler.signals.log_record.connect(self.append_record)\ncore.CoreApplication.call_on_exit(lambda: new_logger.removeHandler(self.handler))\nself.handler.setLevel(logging.INFO)\nnew_logger.addHandler(self.handler)\nfmt = logging.Formatter(\"%(asctime)s  %(levelname)s  %(message)s\")\nself.set_formatter(fmt)\ndef set_formatter(self, formatter: logging.Formatter):\nself.formatter = formatter\nrules = [klass(self.formatter) for klass in Highlighter.__subclasses__()]\nself.rules = [r for r in rules if r.is_included]\nself.handler.setFormatter(formatter)\ndef append_record(self, record: logging.LogRecord):\nstart_of_line = len(self.text())\nif self.formatter._fmt is None:\nraise TypeError(\"Formatter does not contain format string\")\nself.append_text(self.formatter._fmt)\nold_fmt = self.textCursor().charFormat()\nwith self.create_cursor() as c:\nc.move_position(\"end\")\nc.move_position(\"start_of_block\")\nstart_pos = c.position()\nfor r in self.rules:\nline_text = c.select_text(start_pos, \"end_of_block\")\nmatches = list(r.pattern.finditer(line_text))\nfor m in reversed(matches):\npos = m.start(0) + start_of_line\nif start_of_line != 0:\npos += 1\nend = pos + m.end(0) - m.start(0)\nfmt_string = r.format_string(record)\ntry:\nvalue = f\"%{m.group(1)}\" % fmt_string\nexcept (TypeError, ValueError):\nvalue = fmt_string\nc.replace_text(pos, end, value)\nfmt = r.get_format(fmt_string)\nc.setCharFormat(fmt)\nc.clearSelection()\nc.setCharFormat(old_fmt)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.logtextedit.LogTextEdit.handler","title":"<code>handler = signallogger.RecordSignalLogger()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.logtextedit.LogTextEdit.rules","title":"<code>rules = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.logtextedit.LogTextEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\logtextedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.rules = []\nself.allow_wheel_zoom()\nself.set_font(\"Consolas\")\nself.append_text(f\"Python version: {sys.version}\")\nnew_logger = logging.getLogger()\n# self.handler = signallogger.LineSignalLogger()\n# self.handler.log_line.connect(self.append_text)\nself.handler = signallogger.RecordSignalLogger()\nself.handler.signals.log_record.connect(self.append_record)\ncore.CoreApplication.call_on_exit(lambda: new_logger.removeHandler(self.handler))\nself.handler.setLevel(logging.INFO)\nnew_logger.addHandler(self.handler)\nfmt = logging.Formatter(\"%(asctime)s  %(levelname)s  %(message)s\")\nself.set_formatter(fmt)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.logtextedit.LogTextEdit.append_record","title":"<code>append_record(record: logging.LogRecord)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\logtextedit.py</code> <pre><code>def append_record(self, record: logging.LogRecord):\nstart_of_line = len(self.text())\nif self.formatter._fmt is None:\nraise TypeError(\"Formatter does not contain format string\")\nself.append_text(self.formatter._fmt)\nold_fmt = self.textCursor().charFormat()\nwith self.create_cursor() as c:\nc.move_position(\"end\")\nc.move_position(\"start_of_block\")\nstart_pos = c.position()\nfor r in self.rules:\nline_text = c.select_text(start_pos, \"end_of_block\")\nmatches = list(r.pattern.finditer(line_text))\nfor m in reversed(matches):\npos = m.start(0) + start_of_line\nif start_of_line != 0:\npos += 1\nend = pos + m.end(0) - m.start(0)\nfmt_string = r.format_string(record)\ntry:\nvalue = f\"%{m.group(1)}\" % fmt_string\nexcept (TypeError, ValueError):\nvalue = fmt_string\nc.replace_text(pos, end, value)\nfmt = r.get_format(fmt_string)\nc.setCharFormat(fmt)\nc.clearSelection()\nc.setCharFormat(old_fmt)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.logtextedit.LogTextEdit.set_formatter","title":"<code>set_formatter(formatter: logging.Formatter)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\logtextedit.py</code> <pre><code>def set_formatter(self, formatter: logging.Formatter):\nself.formatter = formatter\nrules = [klass(self.formatter) for klass in Highlighter.__subclasses__()]\nself.rules = [r for r in rules if r.is_included]\nself.handler.setFormatter(formatter)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.MappedCheckBox","title":"<code>MappedCheckBox</code>","text":"<p>         Bases: <code>widgets.CheckBox</code></p> Source code in <code>prettyqt\\custom_widgets\\mappedcheckbox.py</code> <pre><code>class MappedCheckBox(widgets.CheckBox):\ndef __init__(self, *args, true_value=True, false_value=False, **kwargs):\nsuper().__init__(*args, **kwargs)\ndct = {True: true_value, False: false_value}\nself.map = bidict(dct)\ndef serialize_fields(self):\nreturn dict(map=self.map)\ndef get_value(self):\nreturn self.map[self.isChecked()]\ndef set_value(self, value):\nval = self.map.inverse[value]\nsuper().set_value(val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.mappedcheckbox.MappedCheckBox.map","title":"<code>map = bidict(dct)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.mappedcheckbox.MappedCheckBox.__init__","title":"<code>__init__(*args, true_value = True, false_value = False, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\mappedcheckbox.py</code> <pre><code>def __init__(self, *args, true_value=True, false_value=False, **kwargs):\nsuper().__init__(*args, **kwargs)\ndct = {True: true_value, False: false_value}\nself.map = bidict(dct)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.mappedcheckbox.MappedCheckBox.get_value","title":"<code>get_value()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\mappedcheckbox.py</code> <pre><code>def get_value(self):\nreturn self.map[self.isChecked()]\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.mappedcheckbox.MappedCheckBox.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\mappedcheckbox.py</code> <pre><code>def serialize_fields(self):\nreturn dict(map=self.map)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.mappedcheckbox.MappedCheckBox.set_value","title":"<code>set_value(value)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\mappedcheckbox.py</code> <pre><code>def set_value(self, value):\nval = self.map.inverse[value]\nsuper().set_value(val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.MarkdownWindow","title":"<code>MarkdownWindow</code>","text":"<p>         Bases: <code>widgets.MainWindow</code></p> Source code in <code>prettyqt\\custom_widgets\\markdownwidget.py</code> <pre><code>class MarkdownWindow(widgets.MainWindow):\ndef __init__(self):\nsuper().__init__()\nself.resize(500, 500)\nself.text_browser = widgets.TextBrowser()\nself.setCentralWidget(self.text_browser)\n# self.text_browser.loadFinished.connect(self._load_finished)\nself.create_menu()\n# def _load_finished(self):\n# frame = self.text_browser.page()\n# self.text_browser.page().setViewportSize(frame.contentsSize())\n# self.resize(frame.contentsSize())\n# html_data = frame.toHtml()\ndef create_menu(self):\nact_exit = gui.Action(\ntext=\"&amp;Exit\",\nicon=\"mdi.exit-to-app\",\nparent=self,\nshortcut=\"Ctrl+Q\",\nstatus_tip=\"Exit application\",\ntriggered=self.close,\n)\nact_open = gui.Action(\ntext=\"&amp;Open\",\nicon=\"mdi.open-in-app\",\nparent=self,\nshortcut=\"Ctrl+O\",\nstatus_tip=\"Open Markdown file\",\ntriggered=self.open_new_file,\n)\nmenubar = self.menuBar()\nmenu_file = menubar.addMenu(\"&amp;File\")\nmenu_file.addAction(act_open)\nmenu_file.addAction(act_exit)\n# def dragEnterEvent(self, event):\n#     u = event.mimeData().urls()\n#     for url in u:\n#         file_path = os.path.abspath(url.toLocalFile())\n#         ext = file_path.split(\".\")[-1]\n#         if ext in [\"txt\", \"md\", \"markdown\"]:\n#             event.accept()\n#         else:\n#             event.ignore()\n# def dropEvent(self, event):\n#     event.accept()\n#     self.show_markdown(self.filePath)\ndef open_new_file(self):\ntry:\next = {\"All Text Files\": [\".md\", \".markdown\", \".txt\"]}\ndlg = widgets.FileDialog(mode=\"open\", extension_filter=ext)\nif (fname := dlg.open_file()) is not None:\nself.text_browser.set_markdown_file(fname[0])\nexcept UnicodeDecodeError:\nself.statusBar().showMessage(\"Please select only text files\")\nexcept OSError:\nself.statusBar().showMessage(\"File open canceled!\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.markdownwidget.MarkdownWindow.text_browser","title":"<code>text_browser = widgets.TextBrowser()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.markdownwidget.MarkdownWindow.__init__","title":"<code>__init__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\markdownwidget.py</code> <pre><code>def __init__(self):\nsuper().__init__()\nself.resize(500, 500)\nself.text_browser = widgets.TextBrowser()\nself.setCentralWidget(self.text_browser)\n# self.text_browser.loadFinished.connect(self._load_finished)\nself.create_menu()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.markdownwidget.MarkdownWindow.create_menu","title":"<code>create_menu()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\markdownwidget.py</code> <pre><code>def create_menu(self):\nact_exit = gui.Action(\ntext=\"&amp;Exit\",\nicon=\"mdi.exit-to-app\",\nparent=self,\nshortcut=\"Ctrl+Q\",\nstatus_tip=\"Exit application\",\ntriggered=self.close,\n)\nact_open = gui.Action(\ntext=\"&amp;Open\",\nicon=\"mdi.open-in-app\",\nparent=self,\nshortcut=\"Ctrl+O\",\nstatus_tip=\"Open Markdown file\",\ntriggered=self.open_new_file,\n)\nmenubar = self.menuBar()\nmenu_file = menubar.addMenu(\"&amp;File\")\nmenu_file.addAction(act_open)\nmenu_file.addAction(act_exit)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.markdownwidget.MarkdownWindow.open_new_file","title":"<code>open_new_file()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\markdownwidget.py</code> <pre><code>def open_new_file(self):\ntry:\next = {\"All Text Files\": [\".md\", \".markdown\", \".txt\"]}\ndlg = widgets.FileDialog(mode=\"open\", extension_filter=ext)\nif (fname := dlg.open_file()) is not None:\nself.text_browser.set_markdown_file(fname[0])\nexcept UnicodeDecodeError:\nself.statusBar().showMessage(\"Please select only text files\")\nexcept OSError:\nself.statusBar().showMessage(\"File open canceled!\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.OptionalWidget","title":"<code>OptionalWidget</code>","text":"<p>         Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\optionalwidget.py</code> <pre><code>class OptionalWidget(widgets.GroupBox):\ndef __init__(\nself,\nwidget: QtWidgets.QWidget,\ntitle: str = \"\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(checkable=True, title=title)\nself.set_layout(\"vertical\")\nself.box.add(widget)\nself.widget = widget\nself.toggled.connect(self.widget.setEnabled)\ndef __getattr__(self, value: str):\nreturn self.widget.__getattribute__(value)\n@property\ndef enabled(self) -&gt; bool:\nreturn self.isChecked()\n@enabled.setter\ndef enabled(self, state: bool):\nself.setChecked(state)\ndef get_value(self):\nreturn self.widget.get_value() if self.isChecked() else None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.optionalwidget.OptionalWidget.enabled","title":"<code>enabled: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.optionalwidget.OptionalWidget.widget","title":"<code>widget = widget</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.optionalwidget.OptionalWidget.__getattr__","title":"<code>__getattr__(value: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\optionalwidget.py</code> <pre><code>def __getattr__(self, value: str):\nreturn self.widget.__getattribute__(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.optionalwidget.OptionalWidget.__init__","title":"<code>__init__(widget: QtWidgets.QWidget, title: str = '', parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\optionalwidget.py</code> <pre><code>def __init__(\nself,\nwidget: QtWidgets.QWidget,\ntitle: str = \"\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(checkable=True, title=title)\nself.set_layout(\"vertical\")\nself.box.add(widget)\nself.widget = widget\nself.toggled.connect(self.widget.setEnabled)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.optionalwidget.OptionalWidget.get_value","title":"<code>get_value()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\optionalwidget.py</code> <pre><code>def get_value(self):\nreturn self.widget.get_value() if self.isChecked() else None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.PaletteEdit","title":"<code>PaletteEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\paletteedit.py</code> <pre><code>class PaletteEdit(widgets.Widget):\nvalue_changed = core.Signal(gui.Palette)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; gui.Palette:\nreturn self._value\ndef set_value(self, value: gui.Palette):\nself._value = value\nvalue = core.Property(gui.Palette, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.paletteedit.PaletteEdit.value","title":"<code>value = core.Property(gui.Palette, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.paletteedit.PaletteEdit.value_changed","title":"<code>value_changed = core.Signal(gui.Palette)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.paletteedit.PaletteEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\paletteedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.paletteedit.PaletteEdit.get_value","title":"<code>get_value() -&gt; gui.Palette</code>","text":"Source code in <code>prettyqt\\custom_widgets\\paletteedit.py</code> <pre><code>def get_value(self) -&gt; gui.Palette:\nreturn self._value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.paletteedit.PaletteEdit.set_value","title":"<code>set_value(value: gui.Palette)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\paletteedit.py</code> <pre><code>def set_value(self, value: gui.Palette):\nself._value = value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.PointEdit","title":"<code>PointEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\pointedit.py</code> <pre><code>class PointEdit(widgets.Widget):\nvalue_changed = core.Signal(core.Point)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.spinbox_x = widgets.SpinBox()\nself.spinbox_y = widgets.SpinBox()\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"x\"))\nlayout.add(self.spinbox_x)\nlayout.add(widgets.Label(\"y\"))\nlayout.add(self.spinbox_y)\nself.spinbox_x.value_changed.connect(self._on_value_change)\nself.spinbox_y.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Point:\nreturn core.Point(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\n)\ndef set_value(self, value: datatypes.PointType):\nif isinstance(value, tuple):\nvalue = core.Point(*value)\nself._value = value\nself.spinbox_x.set_value(value.x())\nself.spinbox_y.set_value(value.y())\nvalue = core.Property(core.Point, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.spinbox_x","title":"<code>spinbox_x = widgets.SpinBox()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.spinbox_y","title":"<code>spinbox_y = widgets.SpinBox()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.value","title":"<code>value = core.Property(core.Point, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.value_changed","title":"<code>value_changed = core.Signal(core.Point)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\pointedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.spinbox_x = widgets.SpinBox()\nself.spinbox_y = widgets.SpinBox()\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"x\"))\nlayout.add(self.spinbox_x)\nlayout.add(widgets.Label(\"y\"))\nlayout.add(self.spinbox_y)\nself.spinbox_x.value_changed.connect(self._on_value_change)\nself.spinbox_y.value_changed.connect(self._on_value_change)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.get_value","title":"<code>get_value() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\custom_widgets\\pointedit.py</code> <pre><code>def get_value(self) -&gt; core.Point:\nreturn core.Point(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.pointedit.PointEdit.set_value","title":"<code>set_value(value: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\pointedit.py</code> <pre><code>def set_value(self, value: datatypes.PointType):\nif isinstance(value, tuple):\nvalue = core.Point(*value)\nself._value = value\nself.spinbox_x.set_value(value.x())\nself.spinbox_y.set_value(value.y())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.PopupInfo","title":"<code>PopupInfo</code>","text":"<p>         Bases: <code>widgets.Dialog</code></p> <p>Dialog overlay to show some info to user.</p> Source code in <code>prettyqt\\custom_widgets\\popupinfo.py</code> <pre><code>class PopupInfo(widgets.Dialog):\n\"\"\"Dialog overlay to show some info to user.\"\"\"\ndef __init__(self, parent: QtWidgets.QWidget | None = None, text: str | None = None):\nsuper().__init__(parent=parent)\nself.timer = core.Timer.single_shot(callback=self.close)\nself.label = widgets.Label()\nself.set_flags(stay_on_top=True, frameless=True, tool=True)\nlayout = widgets.VBoxLayout()\nlayout.set_margin(20)\nself.set_layout(layout)\nself.set_background_color(\"black\")\nself.label.set_color(\"white\")\nlayout.add(self.label)\n# signals.signals.popup_info.connect(self.popup)\ndef show(self):\nself.hide()\nscreen_geo = gui.GuiApplication.primaryScreen().geometry()\nsize = self.label.sizeHint()\nx = (screen_geo.width() - size.width()) // 2\ny = (screen_geo.height() - size.height()) // 2\nself.move(x, y - 200)\nsuper().show()\nself.timer.start(2500)\ndef show_popup(self, text: str):\nself.label.setText(text)\nself.show()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.popupinfo.PopupInfo.label","title":"<code>label = widgets.Label()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.popupinfo.PopupInfo.timer","title":"<code>timer = core.Timer.single_shot(callback=self.close)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.popupinfo.PopupInfo.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None, text: str | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\popupinfo.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None, text: str | None = None):\nsuper().__init__(parent=parent)\nself.timer = core.Timer.single_shot(callback=self.close)\nself.label = widgets.Label()\nself.set_flags(stay_on_top=True, frameless=True, tool=True)\nlayout = widgets.VBoxLayout()\nlayout.set_margin(20)\nself.set_layout(layout)\nself.set_background_color(\"black\")\nself.label.set_color(\"white\")\nlayout.add(self.label)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.popupinfo.PopupInfo.show","title":"<code>show()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\popupinfo.py</code> <pre><code>def show(self):\nself.hide()\nscreen_geo = gui.GuiApplication.primaryScreen().geometry()\nsize = self.label.sizeHint()\nx = (screen_geo.width() - size.width()) // 2\ny = (screen_geo.height() - size.height()) // 2\nself.move(x, y - 200)\nsuper().show()\nself.timer.start(2500)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.popupinfo.PopupInfo.show_popup","title":"<code>show_popup(text: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\popupinfo.py</code> <pre><code>def show_popup(self, text: str):\nself.label.setText(text)\nself.show()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.RectEdit","title":"<code>RectEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>class RectEdit(widgets.Widget):\nvalue_changed = core.Signal(QtCore.QRect)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.spinbox_x = widgets.SpinBox(maximum=999999)\nself.spinbox_y = widgets.SpinBox(maximum=999999)\nself.spinbox_width = widgets.SpinBox(maximum=999999)\nself.spinbox_height = widgets.SpinBox(maximum=999999)\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"x\"))\nlayout.add(self.spinbox_x)\nlayout.add(widgets.Label(\"y\"))\nlayout.add(self.spinbox_y)\nlayout.add(widgets.Label(\"w\"))\nlayout.add(self.spinbox_width)\nlayout.add(widgets.Label(\"h\"))\nlayout.add(self.spinbox_height)\nself.spinbox_x.value_changed.connect(self._on_value_change)\nself.spinbox_y.value_changed.connect(self._on_value_change)\nself.spinbox_width.value_changed.connect(self._on_value_change)\nself.spinbox_height.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Rect:\nreturn core.Rect(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\ndef set_value(self, value: datatypes.RectType):\nif isinstance(value, tuple):\nvalue = core.Rect(*value)\nself._value = value\nself.spinbox_x.set_value(value.x())\nself.spinbox_y.set_value(value.y())\nself.spinbox_width.set_value(value.width())\nself.spinbox_height.set_value(value.height())\nvalue = core.Property(core.Rect, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.spinbox_height","title":"<code>spinbox_height = widgets.SpinBox(maximum=999999)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.spinbox_width","title":"<code>spinbox_width = widgets.SpinBox(maximum=999999)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.spinbox_x","title":"<code>spinbox_x = widgets.SpinBox(maximum=999999)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.spinbox_y","title":"<code>spinbox_y = widgets.SpinBox(maximum=999999)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.value","title":"<code>value = core.Property(core.Rect, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.value_changed","title":"<code>value_changed = core.Signal(QtCore.QRect)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.spinbox_x = widgets.SpinBox(maximum=999999)\nself.spinbox_y = widgets.SpinBox(maximum=999999)\nself.spinbox_width = widgets.SpinBox(maximum=999999)\nself.spinbox_height = widgets.SpinBox(maximum=999999)\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"x\"))\nlayout.add(self.spinbox_x)\nlayout.add(widgets.Label(\"y\"))\nlayout.add(self.spinbox_y)\nlayout.add(widgets.Label(\"w\"))\nlayout.add(self.spinbox_width)\nlayout.add(widgets.Label(\"h\"))\nlayout.add(self.spinbox_height)\nself.spinbox_x.value_changed.connect(self._on_value_change)\nself.spinbox_y.value_changed.connect(self._on_value_change)\nself.spinbox_width.value_changed.connect(self._on_value_change)\nself.spinbox_height.value_changed.connect(self._on_value_change)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.get_value","title":"<code>get_value() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>def get_value(self) -&gt; core.Rect:\nreturn core.Rect(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RectEdit.set_value","title":"<code>set_value(value: datatypes.RectType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>def set_value(self, value: datatypes.RectType):\nif isinstance(value, tuple):\nvalue = core.Rect(*value)\nself._value = value\nself.spinbox_x.set_value(value.x())\nself.spinbox_y.set_value(value.y())\nself.spinbox_width.set_value(value.width())\nself.spinbox_height.set_value(value.height())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.RegexInput","title":"<code>RegexInput</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\regexinput.py</code> <pre><code>class RegexInput(widgets.Widget):\nvalue_changed = core.Signal(object)\ndef __init__(self, show_flags: bool = True, show_error: bool = True, **kwargs):\nsuper().__init__(**kwargs)\nself.set_layout(\"grid\", margin=0)\nself.label_error = widgets.Label()\nerror_color = self.get_palette().get_color(\"highlight\")\nself.label_error.set_color(error_color)\nself.lineedit = custom_widgets.RegexLineEdit()\nself.lineedit.val.error_occured.connect(self.label_error.set_text)\nself.lineedit.val.pattern_updated.connect(self.value_changed)\nself.tb_flags = custom_widgets.BoolDictToolButton(\ntext=\"Flags\", icon=\"mdi.flag-variant-outline\"\n)\nself.box[0, 0:1] = self.lineedit\nif show_flags:\nself.box[0, 2] = self.tb_flags\nif show_error:\nself.box[1, 0:2] = self.label_error\nself.tb_flags.value_changed.connect(self._on_value_change)\ndct = dict(\nmultiline=\"MultiLine\",\nignorecase=\"Ignore case\",\nascii=\"ASCII-only matching\",\ndotall=\"Dot matches newline\",\nverbose=\"Ignore whitespace\",\n)\nself.tb_flags.set_dict(dct)\ndef _on_value_change(self):\ntry:\nval = self.get_value()\nexcept (sre_constants.error, re._regex_core.error):\nreturn\nelse:\nself.value_changed.emit(val)\n@property\ndef pattern(self) -&gt; str:\nreturn self.lineedit.text()\n@pattern.setter\ndef pattern(self, value: str):\nself.lineedit.set_text(value)\n@property\ndef compile_flags(self) -&gt; int:\nret_val = 0\nfor identifier, flag in MAP.items():\nif self.tb_flags[identifier]:\nret_val |= flag\nreturn ret_val\n@compile_flags.setter\ndef compile_flags(self, value: int):\nfor identifier, flag in MAP.items():\nself.tb_flags[identifier] = bool(value &amp; flag)\ndef set_value(self, value: str | Pattern | None):\nmatch value:\ncase None:\nself.pattern = \"\"\nself.compile_flags = 0\ncase str():\nself.pattern = value\nself.compile_flags = 0\ncase _:\nself.pattern = value.pattern\nself.compile_flags = value.flags\ndef get_value(self) -&gt; Pattern:\nreturn re.compile(self.pattern, self.compile_flags)\ndef is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\nvalue = core.Property(Pattern, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.compile_flags","title":"<code>compile_flags: int</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.label_error","title":"<code>label_error = widgets.Label()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.lineedit","title":"<code>lineedit = custom_widgets.RegexLineEdit()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.pattern","title":"<code>pattern: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.tb_flags","title":"<code>tb_flags = custom_widgets.BoolDictToolButton(text='Flags', icon='mdi.flag-variant-outline')</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.value","title":"<code>value = core.Property(Pattern, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.__init__","title":"<code>__init__(show_flags: bool = True, show_error: bool = True, **kwargs: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\regexinput.py</code> <pre><code>def __init__(self, show_flags: bool = True, show_error: bool = True, **kwargs):\nsuper().__init__(**kwargs)\nself.set_layout(\"grid\", margin=0)\nself.label_error = widgets.Label()\nerror_color = self.get_palette().get_color(\"highlight\")\nself.label_error.set_color(error_color)\nself.lineedit = custom_widgets.RegexLineEdit()\nself.lineedit.val.error_occured.connect(self.label_error.set_text)\nself.lineedit.val.pattern_updated.connect(self.value_changed)\nself.tb_flags = custom_widgets.BoolDictToolButton(\ntext=\"Flags\", icon=\"mdi.flag-variant-outline\"\n)\nself.box[0, 0:1] = self.lineedit\nif show_flags:\nself.box[0, 2] = self.tb_flags\nif show_error:\nself.box[1, 0:2] = self.label_error\nself.tb_flags.value_changed.connect(self._on_value_change)\ndct = dict(\nmultiline=\"MultiLine\",\nignorecase=\"Ignore case\",\nascii=\"ASCII-only matching\",\ndotall=\"Dot matches newline\",\nverbose=\"Ignore whitespace\",\n)\nself.tb_flags.set_dict(dct)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.get_value","title":"<code>get_value() -&gt; Pattern</code>","text":"Source code in <code>prettyqt\\custom_widgets\\regexinput.py</code> <pre><code>def get_value(self) -&gt; Pattern:\nreturn re.compile(self.pattern, self.compile_flags)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\custom_widgets\\regexinput.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexinput.RegexInput.set_value","title":"<code>set_value(value: str | Pattern | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\regexinput.py</code> <pre><code>def set_value(self, value: str | Pattern | None):\nmatch value:\ncase None:\nself.pattern = \"\"\nself.compile_flags = 0\ncase str():\nself.pattern = value\nself.compile_flags = 0\ncase _:\nself.pattern = value.pattern\nself.compile_flags = value.flags\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.RegexLineEdit","title":"<code>RegexLineEdit</code>","text":"<p>         Bases: <code>custom_widgets.SingleLineTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\regexlineedit.py</code> <pre><code>class RegexLineEdit(custom_widgets.SingleLineTextEdit):\ndef __init__(\nself,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.set_syntaxhighlighter(\"regex\")\nself.val = custom_validators.RegexPatternValidator()\nself.set_margin(0)\nself.set_validator(self.val)\n@property\ndef pattern(self) -&gt; str:\nreturn self.text()\n@pattern.setter\ndef pattern(self, value: str):\nself.set_text(value)\ndef set_value(self, value: str | Pattern | None):\nmatch value:\ncase None:\nself.pattern = \"\"\ncase str():\nself.pattern = value\ncase _:\nself.pattern = value.pattern\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexlineedit.RegexLineEdit.pattern","title":"<code>pattern: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexlineedit.RegexLineEdit.val","title":"<code>val = custom_validators.RegexPatternValidator()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexlineedit.RegexLineEdit.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\regexlineedit.py</code> <pre><code>def __init__(\nself,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.set_syntaxhighlighter(\"regex\")\nself.val = custom_validators.RegexPatternValidator()\nself.set_margin(0)\nself.set_validator(self.val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.regexlineedit.RegexLineEdit.set_value","title":"<code>set_value(value: str | Pattern | None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\regexlineedit.py</code> <pre><code>def set_value(self, value: str | Pattern | None):\nmatch value:\ncase None:\nself.pattern = \"\"\ncase str():\nself.pattern = value\ncase _:\nself.pattern = value.pattern\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.RegionEdit","title":"<code>RegionEdit</code>","text":"<p>         Bases: <code>RectEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>class RegionEdit(RectEdit):\nvalue_changed = core.Signal(QtGui.QRegion)\ndef get_value(self) -&gt; gui.Region:\nreturn gui.Region(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\ndef set_value(self, value: QtGui.QRegion):\nif isinstance(value, tuple):\nvalue = gui.Region(*value)\nself._value = value\nbounding_rect = value.boundingRect()\nself.spinbox_x.set_value(bounding_rect.x())\nself.spinbox_y.set_value(bounding_rect.y())\nself.spinbox_width.set_value(bounding_rect.width())\nself.spinbox_height.set_value(bounding_rect.height())\nvalue = core.Property(gui.Region, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RegionEdit.value","title":"<code>value = core.Property(gui.Region, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RegionEdit.value_changed","title":"<code>value_changed = core.Signal(QtGui.QRegion)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RegionEdit.get_value","title":"<code>get_value() -&gt; gui.Region</code>","text":"Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>def get_value(self) -&gt; gui.Region:\nreturn gui.Region(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.rectedit.RegionEdit.set_value","title":"<code>set_value(value: QtGui.QRegion)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\rectedit.py</code> <pre><code>def set_value(self, value: QtGui.QRegion):\nif isinstance(value, tuple):\nvalue = gui.Region(*value)\nself._value = value\nbounding_rect = value.boundingRect()\nself.spinbox_x.set_value(bounding_rect.x())\nself.spinbox_y.set_value(bounding_rect.y())\nself.spinbox_width.set_value(bounding_rect.width())\nself.spinbox_height.set_value(bounding_rect.height())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.RoundProgressBar","title":"<code>RoundProgressBar</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>class RoundProgressBar(widgets.Widget):\n# CONSTANTS\nPOSITION_LEFT = 180.0\nPOSITION_TOP = 90.0\nPOSITION_RIGHT = 0.0\nPOSITION_BOTTOM = -90.0\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\nself._min_value = 0.0\nself._max_value = 100.0\nself.current_value = 0.0\nself.null_pos = self.POSITION_TOP\nself.bar_style: BarStyleStr = \"donut\"\nself.outline_pen_width = 1.0\nself.data_pen_width = 1.0\nself._rebuild_brush = False\nself.number_format = \"%p%\"\nself.decimals = 1\nself._update_flags: ValueTypeStr = \"percent\"\nself.gradient_data: list[QtGui.QColor] = []\ndef minimum(self):\nreturn self._min_value\ndef maximum(self):\nreturn self._max_value\n# SETTERS -------------------------------------------------------\ndef set_null_position(self, position: float):\nif position != self.null_pos:\nself.null_pos = position\nself._rebuild_brush = True\nself.update()\ndef set_bar_style(self, style: BarStyleStr):\nif style not in BAR_STYLE:\nraise InvalidParamError(style, BAR_STYLE)\nif style != self.bar_style:\nself.bar_style = style\nself._rebuild_brush = True\nself.update()\ndef set_outline_pen_width(self, width: float):\nif width != self.outline_pen_width:\nself.outline_pen_width = width\nself.update()\ndef set_data_pen_width(self, width: float):\nif width != self.data_pen_width:\nself.data_pen_width = width\nself.update()\ndef set_data_colors(self, stop_points: list[QtGui.QColor]):\nif stop_points != self.gradient_data:\nself.gradient_data = stop_points\nself._rebuild_brush = True\nself.update()\ndef set_format(self, val: str):\nif val != self.number_format:\nself.number_format = val\nself._value_format_changed()\ndef set_decimals(self, count: int):\nif count &gt;= 0 and count != self.decimals:\nself.decimals = count\nself._value_format_changed()\n# SLOTS ---------------------------------------------------------\n@core.Slot(float, float)\ndef set_range(self, minval: float, maxval: float):\nself._min_value = min(minval, maxval)\nself._max_value = max(minval, maxval)\nself.current_value = min(\nself._max_value, max(self._min_value, self.current_value)\n)\nself._rebuild_brush = True\nself.update()\n@core.Slot(float)\ndef setMinimum(self, val: float):\nself.set_range(val, self._max_value)\n@core.Slot(float)\ndef setMaximum(self, val: float):\nself.set_range(self._min_value, val)\n@core.Slot(float)\ndef set_value(self, val: float):\nif self.current_value != val:\nself.current_value = min(self._max_value, max(self._min_value, val))\nself.update()\ndef get_value(self) -&gt; float:\nreturn self.current_value\n# PAINTING ------------------------------------------------------\ndef paintEvent(self, event: gui.PaintEvent):\nouter_radius = min(self.width(), self.height())\nrect = core.RectF(1, 1, outer_radius - 2, outer_radius - 2)\nwith gui.Painter(self) as painter:\npainter.use_antialiasing()\nif self.bar_style != \"line\":\nself._rebuild_data_brush_if_needed()\npainter.fillRect(0, 0, outer_radius, outer_radius, self.palette().window())\nself._draw_base(painter, rect)\nself._draw_value(painter, rect, self.current_value)\ninner_rect, inner_radius = self._calculate_inner_rect(outer_radius)\nself._draw_inner_background(painter, inner_rect)\nself._draw_text(painter, inner_rect, inner_radius, self.current_value)\ndef _draw_base(self, painter: gui.Painter, rect: core.RectF):\nmatch self.bar_style:\ncase \"donut\":\ncolor = self.palette().shadow().color()\npainter.set_pen(color=color, width=self.outline_pen_width)\npainter.setBrush(self.palette().base())\npainter.drawEllipse(rect)\ncase \"line\":\nbase_color = self.palette().base().color()\npainter.set_pen(color=base_color, width=self.outline_pen_width)\npainter.setBrush(QtCore.Qt.BrushStyle.NoBrush)\nwidth = self.outline_pen_width / 2\nadjusted = rect.adjusted(width, width, -width, -width)\npainter.drawEllipse(adjusted)\ncase \"pie\" | \"expand\":\nbase_color = self.palette().base().color()\npainter.set_pen(color=base_color, width=self.outline_pen_width)\npainter.setBrush(self.palette().base())\npainter.drawEllipse(rect)\ndef _draw_value(self, painter: gui.Painter, rect: core.RectF, value: float):\nif value == self._min_value:\nreturn\ndiff = self.current_value - self._min_value\nvalue_range = self._max_value - self._min_value\ndelta = max(value_range / diff, 0)\nmatch self.bar_style:\ncase \"expand\":\npainter.setBrush(self.palette().highlight())\ncolor = self.palette().shadow().color()\npainter.set_pen(color=color, width=self.data_pen_width)\nradius = (rect.height() / 2) / delta\npainter.drawEllipse(rect.center(), radius, radius)\ncase \"line\":\ncolor = self.palette().highlight().color()\npainter.set_pen(color=color, width=self.data_pen_width)\npainter.setBrush(QtCore.Qt.BrushStyle.NoBrush)\npen_width = self.outline_pen_width / 2\nadjusted = rect.adjusted(pen_width, pen_width, -pen_width, -pen_width)\nif value == self._max_value:\npainter.drawEllipse(adjusted)\nelse:\narc_length = 360 / delta\narc_length = int(-arc_length * 16)\npainter.drawArc(adjusted, int(self.null_pos * 16), arc_length)\ncase \"donut\" | \"pie\":\ndata_path = gui.PainterPath()\ndata_path.set_fill_rule(\"winding\")\nif value == self._max_value:\ndata_path.addEllipse(rect)\nelse:\narc_length = 360 / delta\ncenter_point = rect.center()\ndata_path.moveTo(center_point)\ndata_path.arcTo(rect, self.null_pos, -arc_length)\ndata_path.lineTo(center_point)\npainter.setBrush(self.palette().highlight())\nshadow_color = self.palette().shadow().color()\npainter.set_pen(color=shadow_color, width=self.data_pen_width)\npainter.drawPath(data_path)\ndef _calculate_inner_rect(self, outer_radius: float) -&gt; tuple[core.RectF, float]:\nif self.bar_style in (\"line\", \"expand\"):\ninner_radius = outer_radius - self.outline_pen_width\nelse:\ninner_radius = outer_radius * 0.75\ndelta = (outer_radius - inner_radius) / 2\ninner_rect = core.RectF(delta, delta, inner_radius, inner_radius)\nreturn inner_rect, inner_radius\ndef _draw_inner_background(self, painter: gui.Painter, inner_rect: core.RectF):\nif self.bar_style == \"donut\":\npainter.setBrush(self.palette().base())\npainter.drawEllipse(inner_rect)\ndef _draw_text(\nself,\npainter: gui.Painter,\ninner_rect: core.RectF,\ninner_radius: float,\nvalue: float,\n):\nif not self.number_format:\nreturn\nfont = self.get_font()\nfont.setPixelSize(10)\nmetrics = gui.FontMetricsF(font)\nmax_width = metrics.horizontalAdvance(self._value_to_text(self._max_value))\ndelta = inner_radius / max_width\nfont_size = int(font.pixelSize() * delta * 0.75)\nfont.setPixelSize(max(font_size, 1))\npainter.setFont(font)\npainter.setPen(self.palette().text().color())\ntext = self._value_to_text(value)\npainter.drawText(inner_rect, constants.ALIGN_CENTER, text)  # type: ignore\ndef _value_to_text(self, value: float) -&gt; str:\ntext_to_draw = self.number_format\nmatch self._update_flags:\ncase \"value\":\nval = round(value, self.decimals)\nreturn text_to_draw.replace(r\"%v\", str(val))\ncase \"percent\":\ndiff = self._max_value - self._min_value\npct = (value - self._min_value) / diff * 100\nval = round(pct, self.decimals)\nreturn text_to_draw.replace(r\"%p\", str(val))\ncase \"max\":\nval = round(self._max_value - self._min_value + 1, self.decimals)\nreturn text_to_draw.replace(r\"%m\", str(val))\ncase _:\nreturn ValueError()\ndef _value_format_changed(self):\nfor k, v in VALUE_MAP.items():\nif k in self.number_format:\nself._update_flags = v\nself.update()\ndef _rebuild_data_brush_if_needed(self):\nif not self._rebuild_brush or not self.gradient_data:\nreturn\nself._rebuild_brush = False\nif self.bar_style == \"expand\":\ndata_brush = gui.RadialGradient(0.5, 0.5, 0.5, 0.5, 0.5)\nfor i in self.gradient_data:\ndata_brush[i[0]] = i[1]\nelse:\ndata_brush = gui.ConicalGradient(0.5, 0.5, self.null_pos)\nfor i in self.gradient_data:\ndata_brush[1 - i[0]] = i[1]\ndata_brush.set_coordinate_mode(\"stretch_to_device\")\nwith self.edit_palette() as palette:\npalette.set_brush(\"highlight\", data_brush)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.POSITION_BOTTOM","title":"<code>POSITION_BOTTOM = -90.0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.POSITION_LEFT","title":"<code>POSITION_LEFT = 180.0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.POSITION_RIGHT","title":"<code>POSITION_RIGHT = 0.0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.POSITION_TOP","title":"<code>POSITION_TOP = 90.0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.bar_style","title":"<code>bar_style: BarStyleStr = 'donut'</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.current_value","title":"<code>current_value = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.data_pen_width","title":"<code>data_pen_width = 1.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.decimals","title":"<code>decimals = 1</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.gradient_data","title":"<code>gradient_data: list[QtGui.QColor] = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.null_pos","title":"<code>null_pos = self.POSITION_TOP</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.number_format","title":"<code>number_format = '%p%'</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.outline_pen_width","title":"<code>outline_pen_width = 1.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\nself._min_value = 0.0\nself._max_value = 100.0\nself.current_value = 0.0\nself.null_pos = self.POSITION_TOP\nself.bar_style: BarStyleStr = \"donut\"\nself.outline_pen_width = 1.0\nself.data_pen_width = 1.0\nself._rebuild_brush = False\nself.number_format = \"%p%\"\nself.decimals = 1\nself._update_flags: ValueTypeStr = \"percent\"\nself.gradient_data: list[QtGui.QColor] = []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.get_value","title":"<code>get_value() -&gt; float</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def get_value(self) -&gt; float:\nreturn self.current_value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.maximum","title":"<code>maximum()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def maximum(self):\nreturn self._max_value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.minimum","title":"<code>minimum()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def minimum(self):\nreturn self._min_value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.paintEvent","title":"<code>paintEvent(event: gui.PaintEvent)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def paintEvent(self, event: gui.PaintEvent):\nouter_radius = min(self.width(), self.height())\nrect = core.RectF(1, 1, outer_radius - 2, outer_radius - 2)\nwith gui.Painter(self) as painter:\npainter.use_antialiasing()\nif self.bar_style != \"line\":\nself._rebuild_data_brush_if_needed()\npainter.fillRect(0, 0, outer_radius, outer_radius, self.palette().window())\nself._draw_base(painter, rect)\nself._draw_value(painter, rect, self.current_value)\ninner_rect, inner_radius = self._calculate_inner_rect(outer_radius)\nself._draw_inner_background(painter, inner_rect)\nself._draw_text(painter, inner_rect, inner_radius, self.current_value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.setMaximum","title":"<code>setMaximum(val: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>@core.Slot(float)\ndef setMaximum(self, val: float):\nself.set_range(self._min_value, val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.setMinimum","title":"<code>setMinimum(val: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>@core.Slot(float)\ndef setMinimum(self, val: float):\nself.set_range(val, self._max_value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_bar_style","title":"<code>set_bar_style(style: BarStyleStr)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_bar_style(self, style: BarStyleStr):\nif style not in BAR_STYLE:\nraise InvalidParamError(style, BAR_STYLE)\nif style != self.bar_style:\nself.bar_style = style\nself._rebuild_brush = True\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_data_colors","title":"<code>set_data_colors(stop_points: list[QtGui.QColor])</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_data_colors(self, stop_points: list[QtGui.QColor]):\nif stop_points != self.gradient_data:\nself.gradient_data = stop_points\nself._rebuild_brush = True\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_data_pen_width","title":"<code>set_data_pen_width(width: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_data_pen_width(self, width: float):\nif width != self.data_pen_width:\nself.data_pen_width = width\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_decimals","title":"<code>set_decimals(count: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_decimals(self, count: int):\nif count &gt;= 0 and count != self.decimals:\nself.decimals = count\nself._value_format_changed()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_format","title":"<code>set_format(val: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_format(self, val: str):\nif val != self.number_format:\nself.number_format = val\nself._value_format_changed()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_null_position","title":"<code>set_null_position(position: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_null_position(self, position: float):\nif position != self.null_pos:\nself.null_pos = position\nself._rebuild_brush = True\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_outline_pen_width","title":"<code>set_outline_pen_width(width: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>def set_outline_pen_width(self, width: float):\nif width != self.outline_pen_width:\nself.outline_pen_width = width\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_range","title":"<code>set_range(minval: float, maxval: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>@core.Slot(float, float)\ndef set_range(self, minval: float, maxval: float):\nself._min_value = min(minval, maxval)\nself._max_value = max(minval, maxval)\nself.current_value = min(\nself._max_value, max(self._min_value, self.current_value)\n)\nself._rebuild_brush = True\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.set_value","title":"<code>set_value(val: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>@core.Slot(float)\ndef set_value(self, val: float):\nif self.current_value != val:\nself.current_value = min(self._max_value, max(self._min_value, val))\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SelectionWidget","title":"<code>SelectionWidget</code>","text":"<p>         Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>class SelectionWidget(widgets.GroupBox):\nvalue_changed = core.Signal(object)\ndef __init__(\nself,\nlabel: str = \"\",\nlayout: constants.OrientationStr = \"horizontal\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(title=label, parent=parent)\nself.box = (\nwidgets.HBoxLayout() if layout == \"horizontal\" else widgets.VBoxLayout()\n)\nself.widget_custom: widgets.Widget | None = None\nself.rb_other = widgets.RadioButton()\nself.buttons: dict[widgets.RadioButton, Any] = {}\nself.set_layout(self.box)\ndef __iter__(self) -&gt; Iterator[tuple[widgets.RadioButton, Any]]:\nreturn iter(self.buttons.items())\ndef add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.add(i)\ndef select_radio_by_data(self, value):\nfor rb, data in self.buttons.items():\nif data == value:\nrb.setChecked(True)\nbreak\ndef add(self, title: str, data=None, icon: datatypes.IconType = None):\n# TODO: make use of icon kwarg\nrb = widgets.RadioButton(title)\nrb.toggled.connect(self.update_choice)\nself.buttons[rb] = data\nif len(self.buttons) == 1:\nwith rb.block_signals():\nrb.set_value(True)\nself.box.add(rb)\ndef add_tooltip_icon(self, text: str):\nlabel = widgets.Label(text)\nlabel.setToolTip(text)\nicon = iconprovider.get_icon(\"mdi.help-circle-outline\")\npixmap = icon.pixmap(20, 20)\nlabel.setPixmap(pixmap)\nself.box.add(label)\ndef add_custom(\nself,\nlabel: str = \"Other\",\ntyp: TypeStr = \"string\",\ndefault: None | float | str = None,\nregex: str | None = None,\n):\nmatch typ:\ncase \"string\":\nself.widget_custom = widgets.LineEdit()\ncase \"int\":\nself.widget_custom = widgets.SpinBox()\ncase \"float\":\nself.widget_custom = widgets.DoubleSpinBox()\ncase _:\nraise ValueError(typ)\n# TODO: Enable this or add BAR radio and option.\nself.widget_custom.set_disabled()  # type: ignore\nif default is not None:\nself.widget_custom.set_value(default)  # type: ignore\nself.rb_other.setText(label)\nself.rb_other.toggled.connect(self.widget_custom.set_enabled)  # type: ignore\nself.widget_custom.value_changed.connect(  # type: ignore\nlambda: self.update_choice(True)\n)\nif regex and typ == \"string\":\nself.widget_custom.set_regex_validator(regex)  # type: ignore\nlayout = widgets.HBoxLayout()\nlayout.add(self.rb_other)\nlayout.add(self.widget_custom)\nself.box.add(layout)\ndef current_choice(self) -&gt; Any:\nfor k, v in self.buttons.items():\nif k.isChecked():\nreturn v\nif self.rb_other.isChecked() and self.widget_custom is not None:\nreturn self.widget_custom.get_value()\nreturn None\n@core.Slot(bool)\ndef update_choice(self, checked: bool):\nif not checked:\nreturn\nif (choice := self.current_choice()) is not None:\nself.value_changed.emit(choice)\ndef set_value(self, value):\nself.select_radio_by_data(value)\ndef get_value(self):\nreturn self.current_choice()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.box","title":"<code>box = widgets.HBoxLayout() if layout == 'horizontal' else widgets.VBoxLayout()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.buttons","title":"<code>buttons: dict[widgets.RadioButton, Any] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.rb_other","title":"<code>rb_other = widgets.RadioButton()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.widget_custom","title":"<code>widget_custom: widgets.Widget | None = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.__init__","title":"<code>__init__(label: str = '', layout: constants.OrientationStr = 'horizontal', parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def __init__(\nself,\nlabel: str = \"\",\nlayout: constants.OrientationStr = \"horizontal\",\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(title=label, parent=parent)\nself.box = (\nwidgets.HBoxLayout() if layout == \"horizontal\" else widgets.VBoxLayout()\n)\nself.widget_custom: widgets.Widget | None = None\nself.rb_other = widgets.RadioButton()\nself.buttons: dict[widgets.RadioButton, Any] = {}\nself.set_layout(self.box)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.__iter__","title":"<code>__iter__() -&gt; Iterator[tuple[widgets.RadioButton, Any]]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def __iter__(self) -&gt; Iterator[tuple[widgets.RadioButton, Any]]:\nreturn iter(self.buttons.items())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.add","title":"<code>add(title: str, data: str = None, icon: datatypes.IconType = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def add(self, title: str, data=None, icon: datatypes.IconType = None):\n# TODO: make use of icon kwarg\nrb = widgets.RadioButton(title)\nrb.toggled.connect(self.update_choice)\nself.buttons[rb] = data\nif len(self.buttons) == 1:\nwith rb.block_signals():\nrb.set_value(True)\nself.box.add(rb)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.add_custom","title":"<code>add_custom(label: str = 'Other', typ: TypeStr = 'string', default: None | float | str = None, regex: str | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def add_custom(\nself,\nlabel: str = \"Other\",\ntyp: TypeStr = \"string\",\ndefault: None | float | str = None,\nregex: str | None = None,\n):\nmatch typ:\ncase \"string\":\nself.widget_custom = widgets.LineEdit()\ncase \"int\":\nself.widget_custom = widgets.SpinBox()\ncase \"float\":\nself.widget_custom = widgets.DoubleSpinBox()\ncase _:\nraise ValueError(typ)\n# TODO: Enable this or add BAR radio and option.\nself.widget_custom.set_disabled()  # type: ignore\nif default is not None:\nself.widget_custom.set_value(default)  # type: ignore\nself.rb_other.setText(label)\nself.rb_other.toggled.connect(self.widget_custom.set_enabled)  # type: ignore\nself.widget_custom.value_changed.connect(  # type: ignore\nlambda: self.update_choice(True)\n)\nif regex and typ == \"string\":\nself.widget_custom.set_regex_validator(regex)  # type: ignore\nlayout = widgets.HBoxLayout()\nlayout.add(self.rb_other)\nlayout.add(self.widget_custom)\nself.box.add(layout)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.add_items","title":"<code>add_items(items: Iterable | Mapping)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.add(i)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.add_tooltip_icon","title":"<code>add_tooltip_icon(text: str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def add_tooltip_icon(self, text: str):\nlabel = widgets.Label(text)\nlabel.setToolTip(text)\nicon = iconprovider.get_icon(\"mdi.help-circle-outline\")\npixmap = icon.pixmap(20, 20)\nlabel.setPixmap(pixmap)\nself.box.add(label)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.current_choice","title":"<code>current_choice() -&gt; Any</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def current_choice(self) -&gt; Any:\nfor k, v in self.buttons.items():\nif k.isChecked():\nreturn v\nif self.rb_other.isChecked() and self.widget_custom is not None:\nreturn self.widget_custom.get_value()\nreturn None\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.get_value","title":"<code>get_value()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def get_value(self):\nreturn self.current_choice()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.select_radio_by_data","title":"<code>select_radio_by_data(value)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def select_radio_by_data(self, value):\nfor rb, data in self.buttons.items():\nif data == value:\nrb.setChecked(True)\nbreak\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.set_value","title":"<code>set_value(value)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>def set_value(self, value):\nself.select_radio_by_data(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.selectionwidget.SelectionWidget.update_choice","title":"<code>update_choice(checked: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\selectionwidget.py</code> <pre><code>@core.Slot(bool)\ndef update_choice(self, checked: bool):\nif not checked:\nreturn\nif (choice := self.current_choice()) is not None:\nself.value_changed.emit(choice)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SidebarWidget","title":"<code>SidebarWidget</code>","text":"<p>         Bases: <code>widgets.MainWindow</code></p> Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>class SidebarWidget(widgets.MainWindow):\nSETTINGS_BUTTON_HEIGHT = 28\ndef __init__(\nself,\n*args,\nshow_settings: bool = False,\nmain_layout: widgets.widget.LayoutStr | QtWidgets.QLayout = \"vertical\",\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._button_width = 100\nself._style: constants.ToolButtonStyleStr = \"text_below_icon\"\nself.button_map: dict[QtWidgets.QWidget, QtWidgets.QToolButton] = {}\nself.icon_map: dict[QtWidgets.QWidget, gui.Icon] = {}\nself.sidebar = widgets.ToolBar(\ncontext_menu_policy=\"prevent\",\nfloatable=True,\nobject_name=\"SidebarWidget\",\nwindow_title=\"Sidebar\",\n)\nself.sidebar.set_style(self._style)\nself.sidebar.set_allowed_areas(\"all\")\nself.settings_menu = widgets.Menu()\nself.sidebar.set_icon_size(int(self._button_width * 0.7))\nif show_settings:\nself.settings_btn = self.sidebar.add_menu_button(\n\"\", icon=\"mdi.wrench\", menu=self.settings_menu\n)\nself.settings_btn.setFixedSize(\nself._button_width, self.SETTINGS_BUTTON_HEIGHT\n)\nself.settings_btn.set_style(\"icon\")\nself.sidebar.orientationChanged.connect(self._on_orientation_change)\nself.sidebar.add_separator()\nself.spacer_action = self.sidebar.add_spacer()\nself.add_toolbar(self.sidebar, \"left\")\nself.area = widgets.Widget()\nself.area.set_layout(\"stacked\")\nw = widgets.Widget()\nw.set_layout(main_layout)\nself.main_layout = w.box\nself.main_layout.set_margin(0)\nself.main_layout += self.area\nself.setCentralWidget(w)\ndef _on_orientation_change(self, orientation: QtCore.Qt.Orientation):\nif orientation == constants.HORIZONTAL:\nself.settings_btn.setFixedSize(34, 34)\nelse:\nself.settings_btn.setFixedSize(\nself._button_width, self.SETTINGS_BUTTON_HEIGHT\n)\ndef add_tab(\nself,\nitem: QtWidgets.QWidget,\ntitle: str,\nicon: datatypes.IconType | None = None,\nshow: bool = False,\nshortcut: str | None = None,\narea: AreaStr = \"top\",\n):\nself.area.box.add(item)\nact = gui.Action(\ntext=title,\nicon=icon,\nshortcut=shortcut or \"\",\nparent=self.sidebar,\ncheckable=True,\ntriggered=lambda: self.set_tab(item),\n)\nself.addAction(act)\nbutton = widgets.ToolButton(self.sidebar)\nbutton.setDefaultAction(act)\nbutton.setFixedWidth(self._button_width)\nbutton.set_style(self._style)\nif area == \"top\":\nself.sidebar.insertWidget(self.spacer_action, button)\nelse:\nself.sidebar.addWidget(button)\nif len(self.area.box) == 1:\nbutton.setChecked(True)\nself.button_map[item] = button\nself.icon_map[item] = iconprovider.get_icon(icon)\nif show:\nself.area.box.setCurrentWidget(item)\ndef set_marker(\nself, item: str | int | widgets.Widget, color: datatypes.ColorType = \"red\"\n):\nwidget = self._get_widget(item)\nif widget == self._get_current_widget():\nreturn\ntemplate = self.icon_map[widget]\npx = template.pixmap(100, 100)\nwith gui.Painter(px) as painter:\ndot = gui.Pixmap.create_dot(color)\npainter.drawPixmap(0, 0, dot)\nicon = gui.Icon(px)\nself.button_map[widget].setIcon(icon)\ndef _get_widget(self, item: str | int | widgets.Widget):\n\"\"\"Returns widget page specified by name, offset or content.\"\"\"\nif isinstance(item, int):\nreturn self.area.box[item]\nelif isinstance(item, str):\nitem = self.area.find_child(QtWidgets.QWidget, name=item, recursive=False)\nif item not in self.area.box:\nraise ValueError(\"Layout does not contain the chosen widget\")\nreturn item\ndef _get_current_widget(self) -&gt; QtWidgets.QWidget:\n\"\"\"Returns the currently selected widget page.\"\"\"\nfor k, v in self.button_map.items():\nif v.isChecked():\nreturn k\nraise RuntimeError(\"no page activated.\")\ndef set_tab(self, item: str | int | widgets.Widget):\nwidget = self._get_widget(item)\ncurrent = self.area.box.currentWidget()\nself.button_map[current].setChecked(False)\nself.area.box.setCurrentWidget(widget)\nself.button_map[widget].setChecked(True)\ndef add_spacer(self) -&gt; widgets.Widget:\nreturn self.sidebar.add_spacer()\ndef add_separator(self, text: str | None = None, area: AreaStr = \"top\"):\nif area == \"top\":\nself.sidebar.add_separator(text, before=self.spacer_action)\nelse:\nself.sidebar.add_separator(text)\ndef add_action(\nself,\ntitle: str,\nicon: datatypes.IconType | None = None,\ncallback: Callable | None = None,\ncheckable: bool = False,\nshortcut: str | None = None,\narea: AreaStr = \"top\",\n):\nact = gui.Action(\ntext=title,\nicon=icon,\nshortcut=shortcut,\ncheckable=checkable,\ntriggered=callback,\n)\nself.addAction(act)\nbutton = widgets.ToolButton(self.sidebar)\nbutton.setDefaultAction(act)\nbutton.setFixedWidth(self._button_width)\nbutton.set_style(self._style)\nif area == \"top\":\nself.sidebar.insertWidget(self.spacer_action, button)\nelse:\nself.sidebar.addWidget(button)\nreturn act\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.SETTINGS_BUTTON_HEIGHT","title":"<code>SETTINGS_BUTTON_HEIGHT = 28</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.area","title":"<code>area = widgets.Widget()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.button_map","title":"<code>button_map: dict[QtWidgets.QWidget, QtWidgets.QToolButton] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.icon_map","title":"<code>icon_map: dict[QtWidgets.QWidget, gui.Icon] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.main_layout","title":"<code>main_layout = w.box</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.settings_btn","title":"<code>settings_btn = self.sidebar.add_menu_button('', icon='mdi.wrench', menu=self.settings_menu)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.settings_menu","title":"<code>settings_menu = widgets.Menu()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.sidebar","title":"<code>sidebar = widgets.ToolBar(context_menu_policy='prevent', floatable=True, object_name='SidebarWidget', window_title='Sidebar')</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.spacer_action","title":"<code>spacer_action = self.sidebar.add_spacer()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.__init__","title":"<code>__init__(*args, show_settings: bool = False, main_layout: widgets.widget.LayoutStr | QtWidgets.QLayout = 'vertical', **kwargs: widgets.widget.LayoutStr | QtWidgets.QLayout)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def __init__(\nself,\n*args,\nshow_settings: bool = False,\nmain_layout: widgets.widget.LayoutStr | QtWidgets.QLayout = \"vertical\",\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._button_width = 100\nself._style: constants.ToolButtonStyleStr = \"text_below_icon\"\nself.button_map: dict[QtWidgets.QWidget, QtWidgets.QToolButton] = {}\nself.icon_map: dict[QtWidgets.QWidget, gui.Icon] = {}\nself.sidebar = widgets.ToolBar(\ncontext_menu_policy=\"prevent\",\nfloatable=True,\nobject_name=\"SidebarWidget\",\nwindow_title=\"Sidebar\",\n)\nself.sidebar.set_style(self._style)\nself.sidebar.set_allowed_areas(\"all\")\nself.settings_menu = widgets.Menu()\nself.sidebar.set_icon_size(int(self._button_width * 0.7))\nif show_settings:\nself.settings_btn = self.sidebar.add_menu_button(\n\"\", icon=\"mdi.wrench\", menu=self.settings_menu\n)\nself.settings_btn.setFixedSize(\nself._button_width, self.SETTINGS_BUTTON_HEIGHT\n)\nself.settings_btn.set_style(\"icon\")\nself.sidebar.orientationChanged.connect(self._on_orientation_change)\nself.sidebar.add_separator()\nself.spacer_action = self.sidebar.add_spacer()\nself.add_toolbar(self.sidebar, \"left\")\nself.area = widgets.Widget()\nself.area.set_layout(\"stacked\")\nw = widgets.Widget()\nw.set_layout(main_layout)\nself.main_layout = w.box\nself.main_layout.set_margin(0)\nself.main_layout += self.area\nself.setCentralWidget(w)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.add_action","title":"<code>add_action(title: str, icon: datatypes.IconType | None = None, callback: Callable | None = None, checkable: bool = False, shortcut: str | None = None, area: AreaStr = 'top')</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def add_action(\nself,\ntitle: str,\nicon: datatypes.IconType | None = None,\ncallback: Callable | None = None,\ncheckable: bool = False,\nshortcut: str | None = None,\narea: AreaStr = \"top\",\n):\nact = gui.Action(\ntext=title,\nicon=icon,\nshortcut=shortcut,\ncheckable=checkable,\ntriggered=callback,\n)\nself.addAction(act)\nbutton = widgets.ToolButton(self.sidebar)\nbutton.setDefaultAction(act)\nbutton.setFixedWidth(self._button_width)\nbutton.set_style(self._style)\nif area == \"top\":\nself.sidebar.insertWidget(self.spacer_action, button)\nelse:\nself.sidebar.addWidget(button)\nreturn act\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.add_separator","title":"<code>add_separator(text: str | None = None, area: AreaStr = 'top')</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def add_separator(self, text: str | None = None, area: AreaStr = \"top\"):\nif area == \"top\":\nself.sidebar.add_separator(text, before=self.spacer_action)\nelse:\nself.sidebar.add_separator(text)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.add_spacer","title":"<code>add_spacer() -&gt; widgets.Widget</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def add_spacer(self) -&gt; widgets.Widget:\nreturn self.sidebar.add_spacer()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.add_tab","title":"<code>add_tab(item: QtWidgets.QWidget, title: str, icon: datatypes.IconType | None = None, show: bool = False, shortcut: str | None = None, area: AreaStr = 'top')</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def add_tab(\nself,\nitem: QtWidgets.QWidget,\ntitle: str,\nicon: datatypes.IconType | None = None,\nshow: bool = False,\nshortcut: str | None = None,\narea: AreaStr = \"top\",\n):\nself.area.box.add(item)\nact = gui.Action(\ntext=title,\nicon=icon,\nshortcut=shortcut or \"\",\nparent=self.sidebar,\ncheckable=True,\ntriggered=lambda: self.set_tab(item),\n)\nself.addAction(act)\nbutton = widgets.ToolButton(self.sidebar)\nbutton.setDefaultAction(act)\nbutton.setFixedWidth(self._button_width)\nbutton.set_style(self._style)\nif area == \"top\":\nself.sidebar.insertWidget(self.spacer_action, button)\nelse:\nself.sidebar.addWidget(button)\nif len(self.area.box) == 1:\nbutton.setChecked(True)\nself.button_map[item] = button\nself.icon_map[item] = iconprovider.get_icon(icon)\nif show:\nself.area.box.setCurrentWidget(item)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.set_marker","title":"<code>set_marker(item: str | int | widgets.Widget, color: datatypes.ColorType = 'red')</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def set_marker(\nself, item: str | int | widgets.Widget, color: datatypes.ColorType = \"red\"\n):\nwidget = self._get_widget(item)\nif widget == self._get_current_widget():\nreturn\ntemplate = self.icon_map[widget]\npx = template.pixmap(100, 100)\nwith gui.Painter(px) as painter:\ndot = gui.Pixmap.create_dot(color)\npainter.drawPixmap(0, 0, dot)\nicon = gui.Icon(px)\nself.button_map[widget].setIcon(icon)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sidebarwidget.SidebarWidget.set_tab","title":"<code>set_tab(item: str | int | widgets.Widget)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>def set_tab(self, item: str | int | widgets.Widget):\nwidget = self._get_widget(item)\ncurrent = self.area.box.currentWidget()\nself.button_map[current].setChecked(False)\nself.area.box.setCurrentWidget(widget)\nself.button_map[widget].setChecked(True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SingleLineTextEdit","title":"<code>SingleLineTextEdit</code>","text":"<p>         Bases: <code>widgets.PlainTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\singlelinetextedit.py</code> <pre><code>class SingleLineTextEdit(widgets.PlainTextEdit):\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nself.textChanged.connect(self._on_text_changed)\nfont_metrics = self.get_font_metrics()\nrow_height = font_metrics.lineSpacing()\nself.setFixedHeight(int(row_height * 1.5))\nself.set_size_policy(vertical=\"fixed\")\nself.set_line_wrap_mode(\"none\")\nself.set_scrollbar_policy(\"always_off\")\ndef _on_text_changed(self):\ntext = self.text()\nwith self.current_cursor() as c:\npos = c.position()\nnum_linebreaks = text.count(\"\\n\")\nwith self.block_signals():\nself.set_text(text.replace(\"\\n\", \"\"))\nc.setPosition(pos - num_linebreaks)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.singlelinetextedit.SingleLineTextEdit.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\singlelinetextedit.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nself.textChanged.connect(self._on_text_changed)\nfont_metrics = self.get_font_metrics()\nrow_height = font_metrics.lineSpacing()\nself.setFixedHeight(int(row_height * 1.5))\nself.set_size_policy(vertical=\"fixed\")\nself.set_line_wrap_mode(\"none\")\nself.set_scrollbar_policy(\"always_off\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SizeEdit","title":"<code>SizeEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\sizeedit.py</code> <pre><code>class SizeEdit(widgets.Widget):\nvalue_changed = core.Signal(core.Size)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.spinbox_width = widgets.SpinBox(maximum=999999)\nself.spinbox_height = widgets.SpinBox(maximum=999999)\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"width\"))\nlayout.add(self.spinbox_width)\nlayout.add(widgets.Label(\"height\"))\nlayout.add(self.spinbox_height)\nself.spinbox_width.value_changed.connect(self._on_value_change)\nself.spinbox_height.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Size:\nreturn core.Size(\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\ndef set_value(self, value: datatypes.SizeType):\nif isinstance(value, tuple):\nvalue = core.Size(*value)\nself._value = value\nself.spinbox_width.set_value(value.width())\nself.spinbox_height.set_value(value.height())\nvalue = core.Property(core.Size, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.spinbox_height","title":"<code>spinbox_height = widgets.SpinBox(maximum=999999)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.spinbox_width","title":"<code>spinbox_width = widgets.SpinBox(maximum=999999)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.value","title":"<code>value = core.Property(core.Size, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.value_changed","title":"<code>value_changed = core.Signal(core.Size)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sizeedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.spinbox_width = widgets.SpinBox(maximum=999999)\nself.spinbox_height = widgets.SpinBox(maximum=999999)\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"width\"))\nlayout.add(self.spinbox_width)\nlayout.add(widgets.Label(\"height\"))\nlayout.add(self.spinbox_height)\nself.spinbox_width.value_changed.connect(self._on_value_change)\nself.spinbox_height.value_changed.connect(self._on_value_change)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.get_value","title":"<code>get_value() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sizeedit.py</code> <pre><code>def get_value(self) -&gt; core.Size:\nreturn core.Size(\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizeedit.SizeEdit.set_value","title":"<code>set_value(value: datatypes.SizeType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sizeedit.py</code> <pre><code>def set_value(self, value: datatypes.SizeType):\nif isinstance(value, tuple):\nvalue = core.Size(*value)\nself._value = value\nself.spinbox_width.set_value(value.width())\nself.spinbox_height.set_value(value.height())\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SizePolicyEdit","title":"<code>SizePolicyEdit</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\sizepolicyedit.py</code> <pre><code>class SizePolicyEdit(widgets.Widget):\nvalue_changed = core.Signal(QtWidgets.QSizePolicy)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.cb_horizontal = widgets.ComboBox()\nself.cb_vertical = widgets.ComboBox()\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"horizontal\"))\nlayout.add(self.cb_horizontal)\nlayout.add(widgets.Label(\"vertical\"))\nlayout.add(self.cb_vertical)\nself.cb_vertical.add_items(widgets.sizepolicy.SIZE_POLICY.keys())\nself.cb_horizontal.add_items(widgets.sizepolicy.SIZE_POLICY.keys())\nself.cb_horizontal.value_changed.connect(self._on_value_change)\nself.cb_vertical.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Point:\npolicy = widgets.SizePolicy()\npolicy.set_horizontal_policy(self.cb_horizontal.get_value())\npolicy.set_vertical_policy(self.cb_vertical.get_value())\nreturn policy\ndef set_value(self, value: QtWidgets.QSizePolicy):\nself._value = value\nself.cb_horizontal.set_value(\nwidgets.sizepolicy.SIZE_POLICY.inverse[value.horizontalPolicy()]\n)\nself.cb_vertical.set_value(\nwidgets.sizepolicy.SIZE_POLICY.inverse[value.verticalPolicy()]\n)\nvalue = core.Property(QtWidgets.QSizePolicy, get_value, set_value, user=True)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.cb_horizontal","title":"<code>cb_horizontal = widgets.ComboBox()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.cb_vertical","title":"<code>cb_vertical = widgets.ComboBox()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.value","title":"<code>value = core.Property(QtWidgets.QSizePolicy, get_value, set_value, user=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.value_changed","title":"<code>value_changed = core.Signal(QtWidgets.QSizePolicy)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sizepolicyedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.cb_horizontal = widgets.ComboBox()\nself.cb_vertical = widgets.ComboBox()\nwith widgets.HBoxLayout.create(self) as layout:\nlayout.add(widgets.Label(\"horizontal\"))\nlayout.add(self.cb_horizontal)\nlayout.add(widgets.Label(\"vertical\"))\nlayout.add(self.cb_vertical)\nself.cb_vertical.add_items(widgets.sizepolicy.SIZE_POLICY.keys())\nself.cb_horizontal.add_items(widgets.sizepolicy.SIZE_POLICY.keys())\nself.cb_horizontal.value_changed.connect(self._on_value_change)\nself.cb_vertical.value_changed.connect(self._on_value_change)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.get_value","title":"<code>get_value() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sizepolicyedit.py</code> <pre><code>def get_value(self) -&gt; core.Point:\npolicy = widgets.SizePolicy()\npolicy.set_horizontal_policy(self.cb_horizontal.get_value())\npolicy.set_vertical_policy(self.cb_vertical.get_value())\nreturn policy\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.sizepolicyedit.SizePolicyEdit.set_value","title":"<code>set_value(value: QtWidgets.QSizePolicy)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\sizepolicyedit.py</code> <pre><code>def set_value(self, value: QtWidgets.QSizePolicy):\nself._value = value\nself.cb_horizontal.set_value(\nwidgets.sizepolicy.SIZE_POLICY.inverse[value.horizontalPolicy()]\n)\nself.cb_vertical.set_value(\nwidgets.sizepolicy.SIZE_POLICY.inverse[value.verticalPolicy()]\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SpanSlider","title":"<code>SpanSlider</code>","text":"<p>         Bases: <code>widgets.Slider</code></p> Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>class SpanSlider(widgets.Slider):\nvalue_changed = core.Signal(object)\nlower_pos_changed = core.Signal(float)\nupper_pos_changed = core.Signal(float)\nslider_pressed = core.Signal(object)\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(\"horizontal\", parent)\nself.rangeChanged.connect(self.update_range)\nself.sliderReleased.connect(self._move_pressed_handle)\nself.lower_val = 0.0\nself.upper_val = 0.0\nself.lower_pos = 0.0\nself.upper_pos = 0.0\nself.offset = 0\nself.position = 0.0\nself.last_pressed: str | None = None\nself.upper_pressed = widgets.Style.SubControl.SC_None\nself.lower_pressed = widgets.Style.SubControl.SC_None\nself.movement: MovementModeStr = \"no_crossing\"\nself._main_control: Literal[\"lower\", \"upper\"] = \"lower\"\nself._first_movement = False\nself._block_tracking = False\ndark_color = self.palette().color(gui.Palette.ColorRole.Dark)\nself.gradient_left = dark_color.lighter(110)\nself.gradient_right = dark_color.lighter(110)\ndef mousePressEvent(self, event):\nif self.minimum() == self.maximum() or event.buttons() ^ event.button():\nevent.ignore()\nreturn\nself.upper_pressed = self._handle_mouse_press(\nevent.position(), self.upper_pressed, self.upper_val, \"upper\"\n)\nif self.upper_pressed != HANDLE_STYLE:\nself.lower_pressed = self._handle_mouse_press(\nevent.position(), self.lower_pressed, self.lower_val, \"lower\"\n)\nself._first_movement = True\nevent.accept()\ndef mouseMoveEvent(self, event):\nif self.lower_pressed != HANDLE_STYLE and self.upper_pressed != HANDLE_STYLE:\nevent.ignore()\nreturn\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\nm = self.style().pixelMetric(\nwidgets.Style.PixelMetric.PM_MaximumDragDistance, opt, self\n)\npixel_pos = self.pick(event.position()) - self.offset\nnew_pos = float(self._pixel_pos_to_value(pixel_pos))\nif m &gt;= 0:\nr = self.rect().adjusted(-m, -m, m, m)\nif not r.contains(event.position().toPoint()):\nnew_pos = self.position\n# pick the preferred handle on the first movement\nif self._first_movement:\nif self.lower_val == self.upper_val:\nif new_pos &lt; self.lower_value:\nself._swap_controls()\nself._first_movement = False\nelse:\nself._first_movement = False\nmatch HANDLE_STYLE, self.movement:\ncase self.lower_pressed, \"no_crossing\":\nnew_pos = min(new_pos, self.upper_val)\nself.set_lower_pos(new_pos)\ncase self.lower_pressed, \"no_overlap\":\nnew_pos = min(new_pos, self.upper_val - 1)\nself.set_lower_pos(new_pos)\ncase self.lower_pressed, \"free\" if new_pos &gt; self.upper_val:\nself._swap_controls()\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"no_crossing\":\nnew_pos = max(new_pos, self.lower_value)\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"no_overlap\":\nnew_pos = max(new_pos, self.lower_value + 1)\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"free\" if new_pos &lt; self.lower_val:\nself._swap_controls()\nself.set_lower_pos(new_pos)\nevent.accept()\ndef mouseReleaseEvent(self, event):\nsuper().mouseReleaseEvent(event)\nself.setSliderDown(False)\nself.lower_pressed = self.upper_pressed = widgets.Style.SubControl.SC_None\nself.update()\ndef paintEvent(self, event):\npainter = widgets.StylePainter(self)\n# ticks\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\nopt.subControls = widgets.Style.SubControl.SC_SliderTickmarks\npainter.draw_complex_control(\"slider\", opt)\n# groove\nopt.sliderPosition = 20\nopt.sliderValue = 0\nopt.subControls = GROOVE_STYLE\npainter.draw_complex_control(\"slider\", opt)\n# handle rects\nopt.sliderPosition = self.lower_pos\nlr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nlrv = self.pick(lr.center())\nopt.sliderPosition = self.upper_pos\nur = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nurv = self.pick(ur.center())\n# span\nminv = min(lrv, urv)\nmaxv = max(lrv, urv)\nc = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self).center()\nif self.is_horizontal():\nrect = core.Rect(core.Point(minv, c.y() - 2), core.Point(maxv, c.y() + 1))\nelse:\nrect = core.Rect(core.Point(c.x() - 2, minv), core.Point(c.x() + 1, maxv))\nself._draw_span(painter, rect)\n# handles\nif self.last_pressed == \"lower\":\nself.draw_handle(painter, \"upper\")\nself.draw_handle(painter, \"lower\")\nelse:\nself.draw_handle(painter, \"lower\")\nself.draw_handle(painter, \"upper\")\n@core.Property(float)\ndef lower_value(self) -&gt; float:\nreturn min(self.lower_val, self.upper_val)\ndef set_lower_value(self, lower: float):\nself.set_span(lower, self.upper_val)\n@core.Property(float)\ndef upper_value(self) -&gt; float:\nreturn max(self.lower_val, self.upper_val)\ndef set_upper_value(self, upper: float):\nself.set_span(self.lower_val, upper)\ndef on_value_change(self):\nself.value_changed.emit((self.lower_val, self.upper_val))\ndef get_value(self) -&gt; tuple[float, float]:\nreturn (self.lower_val, self.upper_val)\ndef set_value(self, value: tuple[float, float]):\nself.set_lower_value(value[0])\nself.set_upper_value(value[1])\ndef get_movement_mode(self) -&gt; MovementModeStr:\nreturn self.movement\ndef set_movement_mode(self, mode: MovementModeStr):\n\"\"\"Set movement mode.\n        Args:\n            mode: movement mode for the main window\n        Raises:\n            ValueError: movement mode type does not exist\n        \"\"\"\nif mode not in MOVEMENT_MODE:\nraise ValueError(\"Invalid movement mode\")\nself.movement = mode\ndef set_span(self, lower: float, upper: float):\nlow = clamp(min(lower, upper), self.minimum(), self.maximum())\nupp = clamp(max(lower, upper), self.minimum(), self.maximum())\nchanged = False\nif low != self.lower_val:\nself.lower_val = low\nself.lower_pos = low\nchanged = True\nif upp != self.upper_val:\nself.upper_val = upp\nself.upper_pos = upp\nchanged = True\nif changed:\nself.on_value_change()\nself.update()\ndef set_lower_pos(self, lower: float):\nif self.lower_pos == lower:\nreturn\nself.lower_pos = lower\nif not self.hasTracking():\nself.update()\nif self.isSliderDown():\nself.lower_pos_changed.emit(lower)\nif self.hasTracking() and not self._block_tracking:\nmain = self._main_control == \"lower\"\nself.trigger_action(\"move\", main)\ndef set_upper_pos(self, upper: float):\nif self.upper_pos == upper:\nreturn\nself.upper_pos = upper\nif not self.hasTracking():\nself.update()\nif self.isSliderDown():\nself.upper_pos_changed.emit(upper)\nif self.hasTracking() and not self._block_tracking:\nmain = self._main_control == \"upper\"\nself.trigger_action(\"move\", main)\ndef set_left_color(self, color: datatypes.ColorType):\nself.gradient_left = colors.get_color(color)\nself.update()\ndef set_right_color(self, color: datatypes.ColorType):\nself.gradient_right = colors.get_color(color)\nself.update()\ndef _move_pressed_handle(self):\nif self.last_pressed == \"lower\":\nif self.lower_pos != self.lower_val:\nmain = self._main_control == \"lower\"\nself.trigger_action(\"move\", main)\nelif self.last_pressed == \"upper\" and self.upper_pos != self.upper_val:\nmain = self._main_control == \"upper\"\nself.trigger_action(\"move\", main)\ndef pick(self, p: datatypes.PointType) -&gt; int:\nif isinstance(p, tuple):\nreturn p[0] if self.is_horizontal() else p[1]\nelse:\nreturn p.x() if self.is_horizontal() else p.y()\ndef trigger_action(self, action: ActionStr, main: bool):\nvalue = 0.0\nno = False\nup = False\nmy_min = self.minimum()\nmy_max = self.maximum()\nself._block_tracking = True\nmain_control = main and self._main_control == \"upper\"\nalt_control = not main and self._main_control == \"lower\"\nis_upper_handle = main_control or alt_control\nval = self.upper_val if is_upper_handle else self.lower_val\nmatch action:\ncase \"single_step_add\":\nup = is_upper_handle\nvalue = clamp(val + self.singleStep(), my_min, my_max)\ncase \"single_step_sub\":\nup = is_upper_handle\nvalue = clamp(val - self.singleStep(), my_min, my_max)\ncase \"to_minimum\":\nup = is_upper_handle\nvalue = my_min\ncase \"to_maximum\":\nup = is_upper_handle\nvalue = my_max\ncase \"move\":\nup = is_upper_handle\nno = True\ncase \"none\":\nno = True\nif not no and not up:\nmatch self.movement:\ncase \"no_crossing\":\nvalue = min(value, self.upper_val)\ncase \"no_overlap\":\nvalue = min(value, self.upper_val - 1)\ncase \"free\" if value &gt; self.upper_val:\nself._swap_controls()\nself.set_upper_pos(value)\ncase \"free\":\nself.set_lower_pos(value)\nelif not no:\nmatch self.movement:\ncase \"no_crossing\":\nvalue = max(value, self.lower_val)\ncase \"no_overlap\":\nvalue = max(value, self.lower_val + 1)\ncase \"free\" if value &lt; self.lower_val:\nself._swap_controls()\nself.set_lower_pos(value)\ncase \"free\":\nself.set_upper_pos(value)\nself._block_tracking = False\nself.set_lower_value(self.lower_pos)\nself.set_upper_value(self.upper_pos)\ndef _swap_controls(self):\nself.lower_val, self.upper_val = self.upper_val, self.lower_val\nself.lower_pressed, self.upper_pressed = self.upper_pressed, self.lower_pressed\nself.last_pressed = \"upper\" if self.last_pressed == \"lower\" else \"lower\"\nself._main_control = \"upper\" if self._main_control == \"lower\" else \"lower\"\ndef update_range(self, min_, max_):\n# set_span() takes care of keeping span in range\nself.set_span(self.lower_val, self.upper_val)\ndef _setup_painter(\nself,\npainter: widgets.StylePainter,\norientation: Literal[\"horizontal\", \"vertical\"],\nx1: int,\ny1: int,\nx2: int,\ny2: int,\n):\nhighlight = self.palette().color(gui.Palette.ColorRole.Highlight)\ngradient = gui.LinearGradient(x1, y1, x2, y2)\ngradient[0] = highlight.darker(120)\ngradient[1] = highlight.lighter(108)\npainter.setBrush(gradient)\nval = 130 if orientation == \"horizontal\" else 150\npainter.set_pen(color=highlight.darker(val), width=0)\ndef _draw_span(self, painter: widgets.StylePainter, rect: core.Rect):\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\npainter.set_pen(color=self.gradient_left, width=0)\ngroove = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self)\nif opt.is_horizontal():\ngroove.adjust(0, 0, -1, 0)\nself._setup_painter(\npainter,\nopt.get_orientation(),\ngroove.center().x(),\ngroove.top(),\ngroove.center().x(),\ngroove.bottom(),\n)\nelse:\ngroove.adjust(0, 0, 0, -1)\nself._setup_painter(\npainter,\nopt.get_orientation(),\ngroove.left(),\ngroove.center().y(),\ngroove.right(),\ngroove.center().y(),\n)\n# draw groove\nintersected = core.RectF(rect.intersected(groove))\ngradient = gui.LinearGradient(intersected.topLeft(), intersected.topRight())\ngradient[0] = self.gradient_left\ngradient[1] = self.gradient_right\npainter.fillRect(intersected, gradient)\ndef draw_handle(self, painter: widgets.StylePainter, handle: HandleStr):\nopt = self.get_style_option(handle)\nopt.subControls = HANDLE_STYLE\npressed = self.lower_pressed if handle == \"lower\" else self.upper_pressed\nif pressed == HANDLE_STYLE:\nopt.activeSubControls = pressed\nopt.state |= widgets.Style.StateFlag.State_Sunken\npainter.draw_complex_control(\"slider\", opt)\ndef get_style_option(self, handle: HandleStr) -&gt; widgets.StyleOptionSlider:\noption = widgets.StyleOptionSlider()\nself.initStyleOption(option)\nif handle == \"lower\":\noption.sliderPosition = self.lower_pos\noption.sliderValue = self.lower_val\nelse:\noption.sliderPosition = self.upper_pos\noption.sliderValue = self.upper_val\nreturn option\ndef _handle_mouse_press(\nself, pos: QtCore.QPointF, control, value: float, handle: HandleStr\n):\nopt = self.get_style_option(handle)\nold_control = control\ncontrol = self.style().hitTestComplexControl(\nSLIDER_STYLE, opt, pos.toPoint(), self\n)\nsr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nif control == HANDLE_STYLE:\nself.position = value\nself.offset = self.pick(pos - sr.topLeft())\nself.last_pressed = handle\nself.setSliderDown(True)\nself.slider_pressed.emit(handle)\nif control != old_control:\nself.update(sr)\nreturn control\ndef _pixel_pos_to_value(self, pos: int) -&gt; int:\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\ngr = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self)\nsr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nif self.is_horizontal():\nlen_slider = sr.width()\nslider_min = gr.x()\nslider_end = gr.right()\nelse:\nlen_slider = sr.height()\nslider_min = gr.y()\nslider_end = gr.bottom()\nreturn widgets.Style.sliderValueFromPosition(\nself.minimum(),\nself.maximum(),\npos - slider_min,\nslider_end - len_slider + 1 - slider_min,\nopt.upsideDown,\n)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.gradient_left","title":"<code>gradient_left = dark_color.lighter(110)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.gradient_right","title":"<code>gradient_right = dark_color.lighter(110)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.last_pressed","title":"<code>last_pressed: str | None = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.lower_pos","title":"<code>lower_pos = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.lower_pos_changed","title":"<code>lower_pos_changed = core.Signal(float)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.lower_pressed","title":"<code>lower_pressed = widgets.Style.SubControl.SC_None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.lower_val","title":"<code>lower_val = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.movement","title":"<code>movement: MovementModeStr = 'no_crossing'</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.offset","title":"<code>offset = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.position","title":"<code>position = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.slider_pressed","title":"<code>slider_pressed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.upper_pos","title":"<code>upper_pos = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.upper_pos_changed","title":"<code>upper_pos_changed = core.Signal(float)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.upper_pressed","title":"<code>upper_pressed = widgets.Style.SubControl.SC_None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.upper_val","title":"<code>upper_val = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(\"horizontal\", parent)\nself.rangeChanged.connect(self.update_range)\nself.sliderReleased.connect(self._move_pressed_handle)\nself.lower_val = 0.0\nself.upper_val = 0.0\nself.lower_pos = 0.0\nself.upper_pos = 0.0\nself.offset = 0\nself.position = 0.0\nself.last_pressed: str | None = None\nself.upper_pressed = widgets.Style.SubControl.SC_None\nself.lower_pressed = widgets.Style.SubControl.SC_None\nself.movement: MovementModeStr = \"no_crossing\"\nself._main_control: Literal[\"lower\", \"upper\"] = \"lower\"\nself._first_movement = False\nself._block_tracking = False\ndark_color = self.palette().color(gui.Palette.ColorRole.Dark)\nself.gradient_left = dark_color.lighter(110)\nself.gradient_right = dark_color.lighter(110)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.draw_handle","title":"<code>draw_handle(painter: widgets.StylePainter, handle: HandleStr)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def draw_handle(self, painter: widgets.StylePainter, handle: HandleStr):\nopt = self.get_style_option(handle)\nopt.subControls = HANDLE_STYLE\npressed = self.lower_pressed if handle == \"lower\" else self.upper_pressed\nif pressed == HANDLE_STYLE:\nopt.activeSubControls = pressed\nopt.state |= widgets.Style.StateFlag.State_Sunken\npainter.draw_complex_control(\"slider\", opt)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.get_movement_mode","title":"<code>get_movement_mode() -&gt; MovementModeStr</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def get_movement_mode(self) -&gt; MovementModeStr:\nreturn self.movement\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.get_style_option","title":"<code>get_style_option(handle: HandleStr) -&gt; widgets.StyleOptionSlider</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def get_style_option(self, handle: HandleStr) -&gt; widgets.StyleOptionSlider:\noption = widgets.StyleOptionSlider()\nself.initStyleOption(option)\nif handle == \"lower\":\noption.sliderPosition = self.lower_pos\noption.sliderValue = self.lower_val\nelse:\noption.sliderPosition = self.upper_pos\noption.sliderValue = self.upper_val\nreturn option\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.get_value","title":"<code>get_value() -&gt; tuple[float, float]</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def get_value(self) -&gt; tuple[float, float]:\nreturn (self.lower_val, self.upper_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.lower_value","title":"<code>lower_value() -&gt; float</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>@core.Property(float)\ndef lower_value(self) -&gt; float:\nreturn min(self.lower_val, self.upper_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.mouseMoveEvent","title":"<code>mouseMoveEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def mouseMoveEvent(self, event):\nif self.lower_pressed != HANDLE_STYLE and self.upper_pressed != HANDLE_STYLE:\nevent.ignore()\nreturn\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\nm = self.style().pixelMetric(\nwidgets.Style.PixelMetric.PM_MaximumDragDistance, opt, self\n)\npixel_pos = self.pick(event.position()) - self.offset\nnew_pos = float(self._pixel_pos_to_value(pixel_pos))\nif m &gt;= 0:\nr = self.rect().adjusted(-m, -m, m, m)\nif not r.contains(event.position().toPoint()):\nnew_pos = self.position\n# pick the preferred handle on the first movement\nif self._first_movement:\nif self.lower_val == self.upper_val:\nif new_pos &lt; self.lower_value:\nself._swap_controls()\nself._first_movement = False\nelse:\nself._first_movement = False\nmatch HANDLE_STYLE, self.movement:\ncase self.lower_pressed, \"no_crossing\":\nnew_pos = min(new_pos, self.upper_val)\nself.set_lower_pos(new_pos)\ncase self.lower_pressed, \"no_overlap\":\nnew_pos = min(new_pos, self.upper_val - 1)\nself.set_lower_pos(new_pos)\ncase self.lower_pressed, \"free\" if new_pos &gt; self.upper_val:\nself._swap_controls()\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"no_crossing\":\nnew_pos = max(new_pos, self.lower_value)\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"no_overlap\":\nnew_pos = max(new_pos, self.lower_value + 1)\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"free\" if new_pos &lt; self.lower_val:\nself._swap_controls()\nself.set_lower_pos(new_pos)\nevent.accept()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.mousePressEvent","title":"<code>mousePressEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def mousePressEvent(self, event):\nif self.minimum() == self.maximum() or event.buttons() ^ event.button():\nevent.ignore()\nreturn\nself.upper_pressed = self._handle_mouse_press(\nevent.position(), self.upper_pressed, self.upper_val, \"upper\"\n)\nif self.upper_pressed != HANDLE_STYLE:\nself.lower_pressed = self._handle_mouse_press(\nevent.position(), self.lower_pressed, self.lower_val, \"lower\"\n)\nself._first_movement = True\nevent.accept()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def mouseReleaseEvent(self, event):\nsuper().mouseReleaseEvent(event)\nself.setSliderDown(False)\nself.lower_pressed = self.upper_pressed = widgets.Style.SubControl.SC_None\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.on_value_change","title":"<code>on_value_change()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def on_value_change(self):\nself.value_changed.emit((self.lower_val, self.upper_val))\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.paintEvent","title":"<code>paintEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def paintEvent(self, event):\npainter = widgets.StylePainter(self)\n# ticks\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\nopt.subControls = widgets.Style.SubControl.SC_SliderTickmarks\npainter.draw_complex_control(\"slider\", opt)\n# groove\nopt.sliderPosition = 20\nopt.sliderValue = 0\nopt.subControls = GROOVE_STYLE\npainter.draw_complex_control(\"slider\", opt)\n# handle rects\nopt.sliderPosition = self.lower_pos\nlr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nlrv = self.pick(lr.center())\nopt.sliderPosition = self.upper_pos\nur = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nurv = self.pick(ur.center())\n# span\nminv = min(lrv, urv)\nmaxv = max(lrv, urv)\nc = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self).center()\nif self.is_horizontal():\nrect = core.Rect(core.Point(minv, c.y() - 2), core.Point(maxv, c.y() + 1))\nelse:\nrect = core.Rect(core.Point(c.x() - 2, minv), core.Point(c.x() + 1, maxv))\nself._draw_span(painter, rect)\n# handles\nif self.last_pressed == \"lower\":\nself.draw_handle(painter, \"upper\")\nself.draw_handle(painter, \"lower\")\nelse:\nself.draw_handle(painter, \"lower\")\nself.draw_handle(painter, \"upper\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.pick","title":"<code>pick(p: datatypes.PointType) -&gt; int</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def pick(self, p: datatypes.PointType) -&gt; int:\nif isinstance(p, tuple):\nreturn p[0] if self.is_horizontal() else p[1]\nelse:\nreturn p.x() if self.is_horizontal() else p.y()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_left_color","title":"<code>set_left_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_left_color(self, color: datatypes.ColorType):\nself.gradient_left = colors.get_color(color)\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_lower_pos","title":"<code>set_lower_pos(lower: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_lower_pos(self, lower: float):\nif self.lower_pos == lower:\nreturn\nself.lower_pos = lower\nif not self.hasTracking():\nself.update()\nif self.isSliderDown():\nself.lower_pos_changed.emit(lower)\nif self.hasTracking() and not self._block_tracking:\nmain = self._main_control == \"lower\"\nself.trigger_action(\"move\", main)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_lower_value","title":"<code>set_lower_value(lower: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_lower_value(self, lower: float):\nself.set_span(lower, self.upper_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_movement_mode","title":"<code>set_movement_mode(mode: MovementModeStr)</code>","text":"<p>Set movement mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>MovementModeStr</code> <p>movement mode for the main window</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>movement mode type does not exist</p> Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_movement_mode(self, mode: MovementModeStr):\n\"\"\"Set movement mode.\n    Args:\n        mode: movement mode for the main window\n    Raises:\n        ValueError: movement mode type does not exist\n    \"\"\"\nif mode not in MOVEMENT_MODE:\nraise ValueError(\"Invalid movement mode\")\nself.movement = mode\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_right_color","title":"<code>set_right_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_right_color(self, color: datatypes.ColorType):\nself.gradient_right = colors.get_color(color)\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_span","title":"<code>set_span(lower: float, upper: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_span(self, lower: float, upper: float):\nlow = clamp(min(lower, upper), self.minimum(), self.maximum())\nupp = clamp(max(lower, upper), self.minimum(), self.maximum())\nchanged = False\nif low != self.lower_val:\nself.lower_val = low\nself.lower_pos = low\nchanged = True\nif upp != self.upper_val:\nself.upper_val = upp\nself.upper_pos = upp\nchanged = True\nif changed:\nself.on_value_change()\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_upper_pos","title":"<code>set_upper_pos(upper: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_upper_pos(self, upper: float):\nif self.upper_pos == upper:\nreturn\nself.upper_pos = upper\nif not self.hasTracking():\nself.update()\nif self.isSliderDown():\nself.upper_pos_changed.emit(upper)\nif self.hasTracking() and not self._block_tracking:\nmain = self._main_control == \"upper\"\nself.trigger_action(\"move\", main)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_upper_value","title":"<code>set_upper_value(upper: float)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_upper_value(self, upper: float):\nself.set_span(self.lower_val, upper)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.set_value","title":"<code>set_value(value: tuple[float, float])</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def set_value(self, value: tuple[float, float]):\nself.set_lower_value(value[0])\nself.set_upper_value(value[1])\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.trigger_action","title":"<code>trigger_action(action: ActionStr, main: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def trigger_action(self, action: ActionStr, main: bool):\nvalue = 0.0\nno = False\nup = False\nmy_min = self.minimum()\nmy_max = self.maximum()\nself._block_tracking = True\nmain_control = main and self._main_control == \"upper\"\nalt_control = not main and self._main_control == \"lower\"\nis_upper_handle = main_control or alt_control\nval = self.upper_val if is_upper_handle else self.lower_val\nmatch action:\ncase \"single_step_add\":\nup = is_upper_handle\nvalue = clamp(val + self.singleStep(), my_min, my_max)\ncase \"single_step_sub\":\nup = is_upper_handle\nvalue = clamp(val - self.singleStep(), my_min, my_max)\ncase \"to_minimum\":\nup = is_upper_handle\nvalue = my_min\ncase \"to_maximum\":\nup = is_upper_handle\nvalue = my_max\ncase \"move\":\nup = is_upper_handle\nno = True\ncase \"none\":\nno = True\nif not no and not up:\nmatch self.movement:\ncase \"no_crossing\":\nvalue = min(value, self.upper_val)\ncase \"no_overlap\":\nvalue = min(value, self.upper_val - 1)\ncase \"free\" if value &gt; self.upper_val:\nself._swap_controls()\nself.set_upper_pos(value)\ncase \"free\":\nself.set_lower_pos(value)\nelif not no:\nmatch self.movement:\ncase \"no_crossing\":\nvalue = max(value, self.lower_val)\ncase \"no_overlap\":\nvalue = max(value, self.lower_val + 1)\ncase \"free\" if value &lt; self.lower_val:\nself._swap_controls()\nself.set_lower_pos(value)\ncase \"free\":\nself.set_upper_pos(value)\nself._block_tracking = False\nself.set_lower_value(self.lower_pos)\nself.set_upper_value(self.upper_pos)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.update_range","title":"<code>update_range(min_, max_)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>def update_range(self, min_, max_):\n# set_span() takes care of keeping span in range\nself.set_span(self.lower_val, self.upper_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.spanslider.SpanSlider.upper_value","title":"<code>upper_value() -&gt; float</code>","text":"Source code in <code>prettyqt\\custom_widgets\\spanslider.py</code> <pre><code>@core.Property(float)\ndef upper_value(self) -&gt; float:\nreturn max(self.lower_val, self.upper_val)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.StandardIconsWidget","title":"<code>StandardIconsWidget</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> <p>Dialog showing standard icons.</p> Source code in <code>prettyqt\\custom_widgets\\standardiconswidget.py</code> <pre><code>class StandardIconsWidget(widgets.Widget):\n\"\"\"Dialog showing standard icons.\"\"\"\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\nlayout = widgets.HBoxLayout()\nrow_nb = 14\ncindex = 0\nfor k in widgets.style.STANDARD_PIXMAP:\nif cindex == 0:\ncol_layout = widgets.VBoxLayout()\nicon_layout = widgets.HBoxLayout()\nicon = widgets.Application.get_style_icon(k)\nlabel = widgets.Label(pixmap=icon.pixmap(32, 32))\nicon_layout.addWidget(label)\nicon_layout.addWidget(widgets.LineEdit(k))\ncol_layout.addLayout(icon_layout)\ncindex = (cindex + 1) % row_nb\nif cindex == 0:\nlayout.addLayout(col_layout)\nself.set_layout(layout)\nself.set_title(\"Standard Platform Icons\")\nicon = widgets.Application.get_style_icon(\"titlebar_menu_button\")\nself.set_icon(icon)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.standardiconswidget.StandardIconsWidget.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\standardiconswidget.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\nlayout = widgets.HBoxLayout()\nrow_nb = 14\ncindex = 0\nfor k in widgets.style.STANDARD_PIXMAP:\nif cindex == 0:\ncol_layout = widgets.VBoxLayout()\nicon_layout = widgets.HBoxLayout()\nicon = widgets.Application.get_style_icon(k)\nlabel = widgets.Label(pixmap=icon.pixmap(32, 32))\nicon_layout.addWidget(label)\nicon_layout.addWidget(widgets.LineEdit(k))\ncol_layout.addLayout(icon_layout)\ncindex = (cindex + 1) % row_nb\nif cindex == 0:\nlayout.addLayout(col_layout)\nself.set_layout(layout)\nself.set_title(\"Standard Platform Icons\")\nicon = widgets.Application.get_style_icon(\"titlebar_menu_button\")\nself.set_icon(icon)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.StringOrNumberWidget","title":"<code>StringOrNumberWidget</code>","text":"<p>         Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\stringornumberwidget.py</code> <pre><code>class StringOrNumberWidget(widgets.GroupBox):\nvalue_changed = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_layout(\"vertical\")\nself.rb_lineedit = widgets.RadioButton(\"String\", checked=True)\nself.lineedit = widgets.LineEdit()\nself.rb_spinbox = widgets.RadioButton(\"Number\")\nself.spinbox = widgets.DoubleSpinBox()\nlayout_lineedit = widgets.HBoxLayout()\nlayout_lineedit.add(self.rb_lineedit)\nlayout_lineedit.add(self.lineedit)\nlayout_spinbox = widgets.HBoxLayout()\nlayout_spinbox.add(self.rb_spinbox)\nlayout_spinbox.add(self.spinbox)\nself.box.add(layout_lineedit)\nself.box.add(layout_spinbox)\nself.rb_spinbox.toggled.connect(self.spinbox.setEnabled)\nself.rb_spinbox.toggled.connect(self.lineedit.setDisabled)\nself.rb_lineedit.toggled.connect(self.lineedit.setEnabled)\nself.rb_lineedit.toggled.connect(self.spinbox.setDisabled)\nself.spinbox.value_changed.connect(self.on_value_change)\nself.lineedit.value_changed.connect(self.on_value_change)\ndef on_value_change(self):\nvalue = self.get_value()\nself.value_changed.emit(value)\ndef get_value(self) -&gt; float | str:\nif not self.rb_spinbox.isChecked():\nreturn self.lineedit.get_value()\nval = self.spinbox.get_value()\nreturn int(val) if val.is_integer() else val\ndef set_value(self, value: float | str):\nmatch value:\ncase str():\nself.rb_lineedit.setChecked(True)\nself.lineedit.set_value(value)\ncase int() | float():\nself.rb_spinbox.setChecked(True)\nself.spinbox.set_value(value)\ncase _:\nraise TypeError(f\"Invalid Type for set_value: {type(value)}\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.lineedit","title":"<code>lineedit = widgets.LineEdit()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.rb_lineedit","title":"<code>rb_lineedit = widgets.RadioButton('String', checked=True)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.rb_spinbox","title":"<code>rb_spinbox = widgets.RadioButton('Number')</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.spinbox","title":"<code>spinbox = widgets.DoubleSpinBox()</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\stringornumberwidget.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_layout(\"vertical\")\nself.rb_lineedit = widgets.RadioButton(\"String\", checked=True)\nself.lineedit = widgets.LineEdit()\nself.rb_spinbox = widgets.RadioButton(\"Number\")\nself.spinbox = widgets.DoubleSpinBox()\nlayout_lineedit = widgets.HBoxLayout()\nlayout_lineedit.add(self.rb_lineedit)\nlayout_lineedit.add(self.lineedit)\nlayout_spinbox = widgets.HBoxLayout()\nlayout_spinbox.add(self.rb_spinbox)\nlayout_spinbox.add(self.spinbox)\nself.box.add(layout_lineedit)\nself.box.add(layout_spinbox)\nself.rb_spinbox.toggled.connect(self.spinbox.setEnabled)\nself.rb_spinbox.toggled.connect(self.lineedit.setDisabled)\nself.rb_lineedit.toggled.connect(self.lineedit.setEnabled)\nself.rb_lineedit.toggled.connect(self.spinbox.setDisabled)\nself.spinbox.value_changed.connect(self.on_value_change)\nself.lineedit.value_changed.connect(self.on_value_change)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.get_value","title":"<code>get_value() -&gt; float | str</code>","text":"Source code in <code>prettyqt\\custom_widgets\\stringornumberwidget.py</code> <pre><code>def get_value(self) -&gt; float | str:\nif not self.rb_spinbox.isChecked():\nreturn self.lineedit.get_value()\nval = self.spinbox.get_value()\nreturn int(val) if val.is_integer() else val\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.on_value_change","title":"<code>on_value_change()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\stringornumberwidget.py</code> <pre><code>def on_value_change(self):\nvalue = self.get_value()\nself.value_changed.emit(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.stringornumberwidget.StringOrNumberWidget.set_value","title":"<code>set_value(value: float | str)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\stringornumberwidget.py</code> <pre><code>def set_value(self, value: float | str):\nmatch value:\ncase str():\nself.rb_lineedit.setChecked(True)\nself.lineedit.set_value(value)\ncase int() | float():\nself.rb_spinbox.setChecked(True)\nself.spinbox.set_value(value)\ncase _:\nraise TypeError(f\"Invalid Type for set_value: {type(value)}\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.SubsequenceCompleter","title":"<code>SubsequenceCompleter</code>","text":"<p>         Bases: <code>widgets.Completer</code></p> <p>QCompleter specialised for subsequence matching.</p> Source code in <code>prettyqt\\custom_widgets\\subsequencecompleter.py</code> <pre><code>class SubsequenceCompleter(widgets.Completer):\n\"\"\"QCompleter specialised for subsequence matching.\"\"\"\ndef __init__(self, *args):\nsuper().__init__(*args)\nself.completion_search_term = \"\"\nself.source_model = None\nself.set_completion_mode(\"unfiltered_popup\")\nself.proxy_model = custom_models.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.set_case_sensitive(False)\nself._force_next_update = True\nself.path_updated.connect(self._on_path_updated)\nself.setCompletionRole(constants.DISPLAY_ROLE)\ndef setModel(self, model: QtCore.QAbstractItemModel):\nself.source_model = model\nself.proxy_model = custom_models.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.proxy_model.set_search_term(self.completion_search_term)\nself.proxy_model.setSourceModel(self.source_model)\nsuper().setModel(self.proxy_model)\nself.proxy_model.invalidateRowsFilter()\n# self.proxy_model.sort(0)\nself._force_next_update = True\n# def __getattr__(self, key):\n#     return getattr(self.proxy_model, key)\ndef set_case_sensitive(self, value: bool):\nsuper().set_case_sensitive(value)\nself.proxy_model.set_filter_case_sensitive(value)\ndef _on_path_updated(self, path: str):\nif path == self.completion_search_term:\nreturn None\nself.completion_search_term = path\ncount = self.completionCount()\nif count or len(self.completion_search_term) &lt;= 1 or self._force_next_update:\nself.proxy_model.set_search_term(self.completion_search_term)\nif count &gt; 1:\nself.proxy_model.sort(0)\nself._force_next_update = False\nself.proxy_model.invalidateRowsFilter()  # force sorting/filtering\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.subsequencecompleter.SubsequenceCompleter.completion_search_term","title":"<code>completion_search_term = ''</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.subsequencecompleter.SubsequenceCompleter.proxy_model","title":"<code>proxy_model = custom_models.SubsequenceSortFilterProxyModel(parent=self)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.subsequencecompleter.SubsequenceCompleter.source_model","title":"<code>source_model = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.subsequencecompleter.SubsequenceCompleter.__init__","title":"<code>__init__(*args)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\subsequencecompleter.py</code> <pre><code>def __init__(self, *args):\nsuper().__init__(*args)\nself.completion_search_term = \"\"\nself.source_model = None\nself.set_completion_mode(\"unfiltered_popup\")\nself.proxy_model = custom_models.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.set_case_sensitive(False)\nself._force_next_update = True\nself.path_updated.connect(self._on_path_updated)\nself.setCompletionRole(constants.DISPLAY_ROLE)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.subsequencecompleter.SubsequenceCompleter.setModel","title":"<code>setModel(model: QtCore.QAbstractItemModel)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\subsequencecompleter.py</code> <pre><code>def setModel(self, model: QtCore.QAbstractItemModel):\nself.source_model = model\nself.proxy_model = custom_models.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.proxy_model.set_search_term(self.completion_search_term)\nself.proxy_model.setSourceModel(self.source_model)\nsuper().setModel(self.proxy_model)\nself.proxy_model.invalidateRowsFilter()\n# self.proxy_model.sort(0)\nself._force_next_update = True\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.subsequencecompleter.SubsequenceCompleter.set_case_sensitive","title":"<code>set_case_sensitive(value: bool)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\subsequencecompleter.py</code> <pre><code>def set_case_sensitive(self, value: bool):\nsuper().set_case_sensitive(value)\nself.proxy_model.set_filter_case_sensitive(value)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.Timeline","title":"<code>Timeline</code>","text":"<p>         Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>class Timeline(widgets.Widget):\nposition_changed = core.Signal(int)\nselection_changed = core.Signal(VideoSample)\ndef __init__(self, duration: int, length: int):\nsuper().__init__()\nself.set_title(\"Timeline\")\nself.duration = duration\nself.length = length\n# Set variables\nself.set_background_color(BACKGROUND_COLOR)\nself.set_text_color(TEXT_COLOR)\nself.set_text_font(FONT)\nself._position = None\nself.pointer_time_pos = 0.0\nself.selected_sample = None\nself._clicking = False  # Check if mouse left button is being pressed\nself._is_in = False  # check if user is in the widget\nself.video_samples: list[VideoSample] = []  # List of video samples\nself.setMouseTracking(True)  # Mouse events\nself.setAutoFillBackground(True)  # background\nself.setGeometry(300, 300, self.length, 200)\n# Set Background\nwith self.edit_palette() as pal:\npal.set_color(\"window\", self.background_color)\ndef __len__(self):\nreturn len(self.video_samples)\ndef __getitem__(self, index: int) -&gt; VideoSample:\nreturn self.video_samples[index]\ndef __setitem__(self, index: int, value: VideoSample):\nself.video_samples[index] = value\ndef __delitem__(self, index: int):\ndel self.video_samples[index]\ndef __add__(self, other: VideoSample) -&gt; Timeline:\nself.add(other)\nreturn self\ndef add_sample(\nself,\nduration: int,\ncolor: datatypes.ColorType = \"yellow\",\npicture: QtGui.QPixmap | None = None,\n) -&gt; VideoSample:\nsample = VideoSample(duration, color, picture)\nself.add(sample)\nreturn sample\ndef add(self, sample: VideoSample):\nself.video_samples.append(sample)\ndef paintEvent(self, event):\n# Draw time\nscale = self.get_scale()\nwith gui.Painter(self) as qp:\nqp.set_color(self.text_color)\nqp.setFont(self.text_font)\nqp.use_antialiasing()\nw = 0\nwidth = self.width()\nwhile (w := w + 100) &lt;= width:\nmsecs = int(w * scale * 1000)\ntime_string = str(core.Time(0, 0, 0, 0).add_msecs(msecs))\nrect = core.Rect(w - 50, 0, 100, 100)\nqp.drawText(rect, constants.ALIGN_H_CENTER, time_string)\n# Draw down line\nqp.set_pen(color=PEN_COLOR, width=5)\nqp.drawLine(0, 40, width, 40)\n# Draw dash lines\npoint = 0\nqp.set_pen(color=self.text_color)\nqp.drawLine(0, 40, width, 40)\nwhile point &lt;= width:\ny2 = 30 if point % 30 != 0 else 20\nqp.drawLine(3 * point, 40, 3 * point, y2)\npoint += 10\nif self._position is not None and self._is_in:\nx_pos = int(self._position.x())\nqp.drawLine(x_pos, 0, x_pos, 40)\npoly = gui.Polygon()\nif self._position is not None:\nval = int(self.pointer_time_pos / self.get_scale())\nline = core.Line(val, 40, val, self.height())\npoly.add_points((val - 10, 20), (val + 10, 20), (val, 40))\nelse:\nline = core.Line(0, 0, 0, self.height())\npoly.add_points((-10, 20), (10, 20), (0, 40))\n# Draw samples\nt = 0.0\nfor sample in self.video_samples:\nscaled_dur = sample.duration / scale\nscaled_t = t / scale\nt += sample.duration\n# Clear clip path\nwith qp.clip_path() as path:\nrect = core.RectF(scaled_t, 50, scaled_dur, 200)\npath.addRoundedRect(rect, 10, 10)\n# Draw sample\npath = gui.PainterPath()\nqp.set_pen(color=sample.color)\nrect = core.RectF(scaled_t, 50, scaled_dur, 50)\npath.addRoundedRect(rect, 10, 10)\nsample.start_pos = scaled_t\nsample.end_pos = scaled_t + scaled_dur\nqp.fillPath(path, sample.color)\nqp.drawPath(path)\n# Draw preview pictures\nif sample.picture is None:\ncontinue\npic_width = sample.picture.size().width()\nif pic_width &lt; scaled_dur:\nwidth = float(pic_width)\npic = sample.picture\nelse:\nwidth = scaled_dur\npic = sample.picture.copy(0, 0, int(scaled_dur), 45)\nwith qp.clip_path() as path:\nrect = core.RectF(scaled_t, 52.5, width, 45)\npath.addRoundedRect(rect, 10, 10)\nqp.drawPixmap(int(scaled_t), int(52.5), int(width), 45, pic)\n# Clear clip path\nwith qp.clip_path() as path:\npath.add_rect(self.rect())\n# Draw pointer\nqp.set_color(PEN_COLOR)\nqp.set_brush(PEN_COLOR)\nqp.drawPolygon(poly)\nqp.drawLine(line)\ndef mouseMoveEvent(self, e):\nself._position = e.position()\n# if mouse is being pressed, update pointer\nif self._clicking:\nx = self._position.x()\nself.position_changed.emit(x)\nself._check_selection(x)\nself.pointer_time_pos = x * self.get_scale()\nself.update()\ndef mousePressEvent(self, e):\nif e.button() == QtCore.Qt.MouseButton.LeftButton:\nx = e.position().x()\nself.position_changed.emit(x)\nself.pointer_time_pos = x * self.get_scale()\nself._check_selection(x)\nself.update()\nself._clicking = True  # Set clicking check to true\ndef mouseReleaseEvent(self, e):\nif e.button() == QtCore.Qt.MouseButton.LeftButton:\nself._clicking = False  # Set clicking check to false\ndef enterEvent(self, e):\nself._is_in = True\ndef leaveEvent(self, e):\nself._is_in = False\nself.update()\ndef _check_selection(self, x: int):\n# Check if user clicked in video sample\nfor sample in self.video_samples:\nif sample.start_pos &lt; x &lt; sample.end_pos:\nsample.color = gui.Color(PEN_COLOR)\nif self.selected_sample is not sample:\nself.selected_sample = sample\nself.selection_changed.emit(sample)\nelse:\nsample.color = sample.def_color\ndef get_scale(self) -&gt; float:\nreturn self.duration / self.width()\ndef set_background_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.background_color = color\ndef set_text_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.text_color = color\ndef set_text_font(self, font: QtGui.QFont):\nself.text_font = font\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.duration","title":"<code>duration = duration</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.length","title":"<code>length = length</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.pointer_time_pos","title":"<code>pointer_time_pos = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.position_changed","title":"<code>position_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.selected_sample","title":"<code>selected_sample = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.selection_changed","title":"<code>selection_changed = core.Signal(VideoSample)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.video_samples","title":"<code>video_samples: list[VideoSample] = []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.__add__","title":"<code>__add__(other: VideoSample) -&gt; Timeline</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __add__(self, other: VideoSample) -&gt; Timeline:\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __delitem__(self, index: int):\ndel self.video_samples[index]\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.__getitem__","title":"<code>__getitem__(index: int) -&gt; VideoSample</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __getitem__(self, index: int) -&gt; VideoSample:\nreturn self.video_samples[index]\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.__init__","title":"<code>__init__(duration: int, length: int)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __init__(self, duration: int, length: int):\nsuper().__init__()\nself.set_title(\"Timeline\")\nself.duration = duration\nself.length = length\n# Set variables\nself.set_background_color(BACKGROUND_COLOR)\nself.set_text_color(TEXT_COLOR)\nself.set_text_font(FONT)\nself._position = None\nself.pointer_time_pos = 0.0\nself.selected_sample = None\nself._clicking = False  # Check if mouse left button is being pressed\nself._is_in = False  # check if user is in the widget\nself.video_samples: list[VideoSample] = []  # List of video samples\nself.setMouseTracking(True)  # Mouse events\nself.setAutoFillBackground(True)  # background\nself.setGeometry(300, 300, self.length, 200)\n# Set Background\nwith self.edit_palette() as pal:\npal.set_color(\"window\", self.background_color)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __len__(self):\nreturn len(self.video_samples)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.__setitem__","title":"<code>__setitem__(index: int, value: VideoSample)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __setitem__(self, index: int, value: VideoSample):\nself.video_samples[index] = value\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.add","title":"<code>add(sample: VideoSample)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def add(self, sample: VideoSample):\nself.video_samples.append(sample)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.add_sample","title":"<code>add_sample(duration: int, color: datatypes.ColorType = 'yellow', picture: QtGui.QPixmap | None = None) -&gt; VideoSample</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def add_sample(\nself,\nduration: int,\ncolor: datatypes.ColorType = \"yellow\",\npicture: QtGui.QPixmap | None = None,\n) -&gt; VideoSample:\nsample = VideoSample(duration, color, picture)\nself.add(sample)\nreturn sample\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.enterEvent","title":"<code>enterEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def enterEvent(self, e):\nself._is_in = True\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.get_scale","title":"<code>get_scale() -&gt; float</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def get_scale(self) -&gt; float:\nreturn self.duration / self.width()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.leaveEvent","title":"<code>leaveEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def leaveEvent(self, e):\nself._is_in = False\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.mouseMoveEvent","title":"<code>mouseMoveEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def mouseMoveEvent(self, e):\nself._position = e.position()\n# if mouse is being pressed, update pointer\nif self._clicking:\nx = self._position.x()\nself.position_changed.emit(x)\nself._check_selection(x)\nself.pointer_time_pos = x * self.get_scale()\nself.update()\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.mousePressEvent","title":"<code>mousePressEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def mousePressEvent(self, e):\nif e.button() == QtCore.Qt.MouseButton.LeftButton:\nx = e.position().x()\nself.position_changed.emit(x)\nself.pointer_time_pos = x * self.get_scale()\nself._check_selection(x)\nself.update()\nself._clicking = True  # Set clicking check to true\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.mouseReleaseEvent","title":"<code>mouseReleaseEvent(e)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def mouseReleaseEvent(self, e):\nif e.button() == QtCore.Qt.MouseButton.LeftButton:\nself._clicking = False  # Set clicking check to false\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.paintEvent","title":"<code>paintEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def paintEvent(self, event):\n# Draw time\nscale = self.get_scale()\nwith gui.Painter(self) as qp:\nqp.set_color(self.text_color)\nqp.setFont(self.text_font)\nqp.use_antialiasing()\nw = 0\nwidth = self.width()\nwhile (w := w + 100) &lt;= width:\nmsecs = int(w * scale * 1000)\ntime_string = str(core.Time(0, 0, 0, 0).add_msecs(msecs))\nrect = core.Rect(w - 50, 0, 100, 100)\nqp.drawText(rect, constants.ALIGN_H_CENTER, time_string)\n# Draw down line\nqp.set_pen(color=PEN_COLOR, width=5)\nqp.drawLine(0, 40, width, 40)\n# Draw dash lines\npoint = 0\nqp.set_pen(color=self.text_color)\nqp.drawLine(0, 40, width, 40)\nwhile point &lt;= width:\ny2 = 30 if point % 30 != 0 else 20\nqp.drawLine(3 * point, 40, 3 * point, y2)\npoint += 10\nif self._position is not None and self._is_in:\nx_pos = int(self._position.x())\nqp.drawLine(x_pos, 0, x_pos, 40)\npoly = gui.Polygon()\nif self._position is not None:\nval = int(self.pointer_time_pos / self.get_scale())\nline = core.Line(val, 40, val, self.height())\npoly.add_points((val - 10, 20), (val + 10, 20), (val, 40))\nelse:\nline = core.Line(0, 0, 0, self.height())\npoly.add_points((-10, 20), (10, 20), (0, 40))\n# Draw samples\nt = 0.0\nfor sample in self.video_samples:\nscaled_dur = sample.duration / scale\nscaled_t = t / scale\nt += sample.duration\n# Clear clip path\nwith qp.clip_path() as path:\nrect = core.RectF(scaled_t, 50, scaled_dur, 200)\npath.addRoundedRect(rect, 10, 10)\n# Draw sample\npath = gui.PainterPath()\nqp.set_pen(color=sample.color)\nrect = core.RectF(scaled_t, 50, scaled_dur, 50)\npath.addRoundedRect(rect, 10, 10)\nsample.start_pos = scaled_t\nsample.end_pos = scaled_t + scaled_dur\nqp.fillPath(path, sample.color)\nqp.drawPath(path)\n# Draw preview pictures\nif sample.picture is None:\ncontinue\npic_width = sample.picture.size().width()\nif pic_width &lt; scaled_dur:\nwidth = float(pic_width)\npic = sample.picture\nelse:\nwidth = scaled_dur\npic = sample.picture.copy(0, 0, int(scaled_dur), 45)\nwith qp.clip_path() as path:\nrect = core.RectF(scaled_t, 52.5, width, 45)\npath.addRoundedRect(rect, 10, 10)\nqp.drawPixmap(int(scaled_t), int(52.5), int(width), 45, pic)\n# Clear clip path\nwith qp.clip_path() as path:\npath.add_rect(self.rect())\n# Draw pointer\nqp.set_color(PEN_COLOR)\nqp.set_brush(PEN_COLOR)\nqp.drawPolygon(poly)\nqp.drawLine(line)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.set_background_color","title":"<code>set_background_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def set_background_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.background_color = color\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.set_text_color","title":"<code>set_text_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def set_text_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.text_color = color\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.Timeline.set_text_font","title":"<code>set_text_font(font: QtGui.QFont)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def set_text_font(self, font: QtGui.QFont):\nself.text_font = font\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.VideoSample","title":"<code>VideoSample</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>class VideoSample:\ndef __init__(\nself,\nduration: float,\ncolor: datatypes.ColorType = \"yellow\",\npicture: QtGui.QPixmap | None = None,\n):\nself.duration = duration\nself.color = colors.get_color(color)  # Floating color\nself.def_color = colors.get_color(color)  # DefaultColor\nself.picture = None if picture is None else picture.scaledToHeight(45)\nself.start_pos = 0.0  # Initial position\nself.end_pos = self.duration  # End position\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.color","title":"<code>color = colors.get_color(color)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.def_color","title":"<code>def_color = colors.get_color(color)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.duration","title":"<code>duration = duration</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.end_pos","title":"<code>end_pos = self.duration</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.picture","title":"<code>picture = None if picture is None else picture.scaledToHeight(45)</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.start_pos","title":"<code>start_pos = 0.0</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.timeline.VideoSample.__init__","title":"<code>__init__(duration: float, color: datatypes.ColorType = 'yellow', picture: QtGui.QPixmap | None = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>def __init__(\nself,\nduration: float,\ncolor: datatypes.ColorType = \"yellow\",\npicture: QtGui.QPixmap | None = None,\n):\nself.duration = duration\nself.color = colors.get_color(color)  # Floating color\nself.def_color = colors.get_color(color)  # DefaultColor\nself.picture = None if picture is None else picture.scaledToHeight(45)\nself.start_pos = 0.0  # Initial position\nself.end_pos = self.duration  # End position\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.WaitingSpinner","title":"<code>WaitingSpinner</code>","text":"<p>         Bases: <code>BaseWaitingSpinner</code></p> Source code in <code>prettyqt\\custom_widgets\\waitingspinner.py</code> <pre><code>class WaitingSpinner(BaseWaitingSpinner):\ndef __init__(\nself,\nparent: QtWidgets.QWidget | None,\ncenter_on_parent: bool = True,\ndisable_parent: bool = True,\nmodality: constants.ModalityStr = \"none\",\nadditional_disabled=None,\n):\nsuper().__init__(parent=parent, modality=modality)\nself._center_on_parent = center_on_parent\nself._disable_parent = disable_parent\nself.additional_disabled = additional_disabled or []\ndef paintEvent(self, event):\nself._update_position()\nsuper().paintEvent(event)\ndef start(self):\nself._update_position()\nsuper().start()\nif self.parentWidget and self._disable_parent:\nself.parentWidget().setEnabled(False)\nfor item in self.additional_disabled:\nitem.setEnabled(False)\ndef stop(self):\nsuper().stop()\nif self.parentWidget() and self._disable_parent:\nself.parentWidget().setEnabled(True)\nfor item in self.additional_disabled:\nitem.setEnabled(True)\ndef _update_position(self):\nparent = self.parentWidget()\nif parent and self._center_on_parent:\nself.position_on(\"parent\")\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.waitingspinner.WaitingSpinner.additional_disabled","title":"<code>additional_disabled = additional_disabled or []</code>  <code>instance-attribute</code>","text":""},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.waitingspinner.WaitingSpinner.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None, center_on_parent: bool = True, disable_parent: bool = True, modality: constants.ModalityStr = 'none', additional_disabled: constants.ModalityStr = None)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\waitingspinner.py</code> <pre><code>def __init__(\nself,\nparent: QtWidgets.QWidget | None,\ncenter_on_parent: bool = True,\ndisable_parent: bool = True,\nmodality: constants.ModalityStr = \"none\",\nadditional_disabled=None,\n):\nsuper().__init__(parent=parent, modality=modality)\nself._center_on_parent = center_on_parent\nself._disable_parent = disable_parent\nself.additional_disabled = additional_disabled or []\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.waitingspinner.WaitingSpinner.paintEvent","title":"<code>paintEvent(event)</code>","text":"Source code in <code>prettyqt\\custom_widgets\\waitingspinner.py</code> <pre><code>def paintEvent(self, event):\nself._update_position()\nsuper().paintEvent(event)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.waitingspinner.WaitingSpinner.start","title":"<code>start()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\waitingspinner.py</code> <pre><code>def start(self):\nself._update_position()\nsuper().start()\nif self.parentWidget and self._disable_parent:\nself.parentWidget().setEnabled(False)\nfor item in self.additional_disabled:\nitem.setEnabled(False)\n</code></pre>"},{"location":"api/custom_widgets.html#prettyqt.custom_widgets.waitingspinner.WaitingSpinner.stop","title":"<code>stop()</code>","text":"Source code in <code>prettyqt\\custom_widgets\\waitingspinner.py</code> <pre><code>def stop(self):\nsuper().stop()\nif self.parentWidget() and self._disable_parent:\nself.parentWidget().setEnabled(True)\nfor item in self.additional_disabled:\nitem.setEnabled(True)\n</code></pre>"},{"location":"api/gui.html","title":"gui module","text":"<p>Gui module.</p> <p>Contains QtGui-based classes</p>"},{"location":"api/gui.html#prettyqt.gui.__all__","title":"<code>__all__ = ['app', 'StyleHints', 'PageRanges', 'KeyEvent', 'MouseEvent', 'WheelEvent', 'ActionEvent', 'ShowEvent', 'ContextMenuEvent', 'ResizeEvent', 'NativeGestureEvent', 'InputMethodQueryEvent', 'InputMethodEvent', 'TextObjectInterface', 'SessionManager', 'CloseEvent', 'DragLeaveEvent', 'MoveEvent', 'HelpEvent', 'HideEvent', 'HoverEvent', 'DragMoveEvent', 'TouchEvent', 'TabletEvent', 'WindowStateChangeEvent', 'FileOpenEvent', 'IconDragEvent', 'InputEvent', 'PaintEvent', 'ShortcutEvent', 'StatusTipEvent', 'EnterEvent', 'ExposeEvent', 'WhatsThisClickedEvent', 'ScrollEvent', 'ScrollPrepareEvent', 'PlatformSurfaceEvent', 'DropEvent', 'DragEnterEvent', 'FocusEvent', 'Drag', 'Screen', 'Gradient', 'GradientMixin', 'LinearGradient', 'RadialGradient', 'ConicalGradient', 'PageSize', 'PageLayout', 'Clipboard', 'GuiApplication', 'GuiApplicationMixin', 'Validator', 'ValidatorMixin', 'Shortcut', 'TextLayout', 'TextLine', 'TextOption', 'TextBlock', 'TextBlockGroup', 'TextDocumentWriter', 'TextDocument', 'TextDocumentFragment', 'StaticText', 'RegularExpressionValidator', 'IntValidator', 'DoubleValidator', 'Brush', 'TextBlockUserData', 'Color', 'Font', 'FontMetrics', 'FontMetricsF', 'FontInfo', 'FontDatabase', 'Region', 'Movie', 'PaintDevice', 'PaintDeviceMixin', 'Transform', 'PagedPaintDevice', 'PagedPaintDeviceMixin', 'Icon', 'Image', 'Pen', 'Picture', 'Pixmap', 'PixmapMixin', 'IconEngine', 'PixmapCache', 'Bitmap', 'Painter', 'PainterMixin', 'PainterPath', 'PainterPathStroker', 'Palette', 'Cursor', 'Polygon', 'PolygonF', 'StandardItem', 'StandardItemModel', 'TextCharFormat', 'TextCharFormatMixin', 'TextImageFormat', 'TextListFormat', 'TextTableCell', 'TextTableFormat', 'TextTableCellFormat', 'TextTable', 'TextCursor', 'SyntaxHighlighter', 'UndoCommand', 'UndoStack', 'UndoGroup', 'PdfWriter', 'KeySequence', 'Action', 'ActionMixin', 'ActionGroup', 'SurfaceFormat', 'Surface', 'SurfaceMixin', 'Window', 'WindowMixin', 'DesktopServices', 'Matrix4x4', 'Vector3D', 'Vector4D', 'PaintDeviceWindow', 'PaintDeviceWindowMixin', 'RasterWindow', 'ImageIOHandler', 'ImageReader', 'ImageWriter', 'TextObject', 'TextObjectMixin', 'TextLength', 'TextFormat', 'TextFormatMixin', 'TextFrameFormat', 'TextBlockFormat', 'TextFrame', 'AbstractFileIconProvider', 'AbstractFileIconProviderMixin', 'AbstractTextDocumentLayout', 'AbstractTextDocumentLayoutMixin', 'InputMethod', 'ColorSpace']</code>  <code>module-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.AbstractFileIconProvider","title":"<code>AbstractFileIconProvider</code>","text":"<p>         Bases: <code>AbstractFileIconProviderMixin</code>, <code>QtGui.QAbstractFileIconProvider</code></p> Source code in <code>prettyqt\\gui\\abstractfileiconprovider.py</code> <pre><code>class AbstractFileIconProvider(\nAbstractFileIconProviderMixin, QtGui.QAbstractFileIconProvider\n):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.AbstractFileIconProviderMixin","title":"<code>AbstractFileIconProviderMixin</code>","text":"Source code in <code>prettyqt\\gui\\abstractfileiconprovider.py</code> <pre><code>class AbstractFileIconProviderMixin:\ndef get_type(self, file: QtCore.QFileInfo | datatypes.PathType) -&gt; str:\nif isinstance(file, os.PathLike):\nfile = core.FileInfo(file)\nreturn self.type(file)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.abstractfileiconprovider.AbstractFileIconProviderMixin.get_type","title":"<code>get_type(file: QtCore.QFileInfo | datatypes.PathType) -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\abstractfileiconprovider.py</code> <pre><code>def get_type(self, file: QtCore.QFileInfo | datatypes.PathType) -&gt; str:\nif isinstance(file, os.PathLike):\nfile = core.FileInfo(file)\nreturn self.type(file)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.AbstractTextDocumentLayout","title":"<code>AbstractTextDocumentLayout</code>","text":"<p>         Bases: <code>AbstractTextDocumentLayoutMixin</code>, <code>QtGui.QAbstractTextDocumentLayout</code></p> Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>class AbstractTextDocumentLayout(\nAbstractTextDocumentLayoutMixin, QtGui.QAbstractTextDocumentLayout\n):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.AbstractTextDocumentLayoutMixin","title":"<code>AbstractTextDocumentLayoutMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>class AbstractTextDocumentLayoutMixin(core.ObjectMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef __len__(self):\nreturn self.pageCount()\ndef get_block_bounding_rect(self, block: QtGui.QTextBlock) -&gt; core.RectF:\nreturn core.RectF(self.blockBoundingRect(block))\ndef get_frame_bounding_rect(self, frame: QtGui.QTextBlock) -&gt; core.RectF:\nreturn core.RectF(self.frameBoundingRect(frame))\ndef hit_test(self, point: datatypes.PointFType, fuzzy: bool = False) -&gt; int | None:\nif isinstance(point, tuple):\npoint = core.PointF(*point)\naccuracy = (\nQtCore.Qt.HitTestAccuracy.FuzzyHit\nif fuzzy\nelse QtCore.Qt.HitTestAccuracy.ExactHit\n)\nresult = self.hitTest(point, accuracy)\nreturn None if result == -1 else result\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.abstracttextdocumentlayout.AbstractTextDocumentLayoutMixin.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>def __len__(self):\nreturn self.pageCount()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.abstracttextdocumentlayout.AbstractTextDocumentLayoutMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.abstracttextdocumentlayout.AbstractTextDocumentLayoutMixin.get_block_bounding_rect","title":"<code>get_block_bounding_rect(block: QtGui.QTextBlock) -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>def get_block_bounding_rect(self, block: QtGui.QTextBlock) -&gt; core.RectF:\nreturn core.RectF(self.blockBoundingRect(block))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.abstracttextdocumentlayout.AbstractTextDocumentLayoutMixin.get_frame_bounding_rect","title":"<code>get_frame_bounding_rect(frame: QtGui.QTextBlock) -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>def get_frame_bounding_rect(self, frame: QtGui.QTextBlock) -&gt; core.RectF:\nreturn core.RectF(self.frameBoundingRect(frame))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.abstracttextdocumentlayout.AbstractTextDocumentLayoutMixin.hit_test","title":"<code>hit_test(point: datatypes.PointFType, fuzzy: bool = False) -&gt; int | None</code>","text":"Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>def hit_test(self, point: datatypes.PointFType, fuzzy: bool = False) -&gt; int | None:\nif isinstance(point, tuple):\npoint = core.PointF(*point)\naccuracy = (\nQtCore.Qt.HitTestAccuracy.FuzzyHit\nif fuzzy\nelse QtCore.Qt.HitTestAccuracy.ExactHit\n)\nresult = self.hitTest(point, accuracy)\nreturn None if result == -1 else result\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Action","title":"<code>Action</code>","text":"<p>         Bases: <code>ActionMixin</code>, <code>prettyprinter.PrettyPrinter</code>, <code>QtGui.QAction</code></p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>class Action(ActionMixin, prettyprinter.PrettyPrinter, QtGui.QAction):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ActionGroup","title":"<code>ActionGroup</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtGui.QActionGroup</code></p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>class ActionGroup(core.ObjectMixin, QtGui.QActionGroup):\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)  # type: ignore\ndef __len__(self) -&gt; int:\nreturn len(self.actions())\ndef __getitem__(self, item: int) -&gt; QtGui.QAction:\nreturn self.actions()[item]\ndef set_exclusion_policy(self, policy: ExclusionPolicyStr | None):\n\"\"\"Set exclusion policy to use.\n        Args:\n            policy: exclusion policy to use\n        Raises:\n            InvalidParamError: exclusion policy does not exist\n        \"\"\"\nif policy is None:\npolicy = \"none\"\nif policy not in POLICIES:\nraise InvalidParamError(policy, POLICIES)\nself.setExclusionPolicy(POLICIES[policy])\ndef get_exclusion_policy(self) -&gt; ExclusionPolicyStr:\n\"\"\"Return current exclusion policy.\n        Returns:\n            exclusion policy\n        \"\"\"\nreturn POLICIES.inverse[self.exclusionPolicy()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.__getitem__","title":"<code>__getitem__(item: int) -&gt; QtGui.QAction</code>","text":"Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def __getitem__(self, item: int) -&gt; QtGui.QAction:\nreturn self.actions()[item]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.__init__","title":"<code>__init__(parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn len(self.actions())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.get_exclusion_policy","title":"<code>get_exclusion_policy() -&gt; ExclusionPolicyStr</code>","text":"<p>Return current exclusion policy.</p> <p>Returns:</p> Type Description <code>ExclusionPolicyStr</code> <p>exclusion policy</p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def get_exclusion_policy(self) -&gt; ExclusionPolicyStr:\n\"\"\"Return current exclusion policy.\n    Returns:\n        exclusion policy\n    \"\"\"\nreturn POLICIES.inverse[self.exclusionPolicy()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.actiongroup.ActionGroup.set_exclusion_policy","title":"<code>set_exclusion_policy(policy: ExclusionPolicyStr | None)</code>","text":"<p>Set exclusion policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ExclusionPolicyStr | None</code> <p>exclusion policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>exclusion policy does not exist</p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def set_exclusion_policy(self, policy: ExclusionPolicyStr | None):\n\"\"\"Set exclusion policy to use.\n    Args:\n        policy: exclusion policy to use\n    Raises:\n        InvalidParamError: exclusion policy does not exist\n    \"\"\"\nif policy is None:\npolicy = \"none\"\nif policy not in POLICIES:\nraise InvalidParamError(policy, POLICIES)\nself.setExclusionPolicy(POLICIES[policy])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ActionMixin","title":"<code>ActionMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>class ActionMixin(core.ObjectMixin):\ndef __init__(\nself,\n*args,\ntext: str | None = None,\nicon: datatypes.IconType = None,\ncallback: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._menu = None\nif callback is not None:\nself.triggered.connect(callback)\nself._usage_count = 0\nif text:\nself.setText(text)\nif icon:\nself.set_icon(icon)\nself.triggered.connect(self._increase_usage_counter)\ndef __repr__(self) -&gt; str:\nreturn get_repr(self, self.text())\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"priority\": PRIORITIES,\n\"shortcutContext\": constants.SHORTCUT_CONTEXT,\n\"menuRole\": ROLES,\n}\nreturn maps\ndef _increase_usage_counter(self):\nself._usage_count += 1\ndef get_usage_count(self) -&gt; int:\nreturn self._usage_count\ndef get_type(self) -&gt; Literal[\"menu\", \"separator\", \"widget\", \"regular\"]:\nif self.menu() is not None:\nreturn \"menu\"\nelif self.isSeparator():\nreturn \"separator\"\nelif hasattr(self, \"defaultWidget\"):\nreturn \"widget\"\nelse:\nreturn \"regular\"\ndef set_disabled(self):\nself.setEnabled(False)\ndef set_enabled(self, enabled: bool = True):\nself.setEnabled(enabled)\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nsuper().setToolTip(tooltip)\nsetToolTip = set_tooltip\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nsuper().setIcon(icon)\nsetIcon = set_icon\ndef set_shortcut(self, shortcut: None | QtGui.QKeySequence | str):\nif shortcut is None:\nshortcut = \"\"\nif isinstance(shortcut, str):\nshortcut = gui.KeySequence(\nshortcut, gui.KeySequence.SequenceFormat.PortableText\n)\nsuper().setShortcut(shortcut)\nsetShortcut = set_shortcut\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef get_shortcut(self) -&gt; gui.KeySequence | None:\nshortcut = self.shortcut()\nreturn (\ngui.KeySequence(\nshortcut.toString(), gui.KeySequence.SequenceFormat.PortableText\n)\nif shortcut\nelse None\n)\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef set_menu(self, menu):\ntry:\nself.setMenu(menu)\nexcept AttributeError:\nself.triggered.connect(menu.exec)\nself._menu = menu\ndef menu(self):\nreturn self._menu\ndef set_priority(self, priority: PriorityStr | QtGui.QAction.Priority):\n\"\"\"Set priority of the action.\n        Args:\n            priority: priority for the action\n        Raises:\n            InvalidParamError: priority does not exist\n        \"\"\"\nif isinstance(priority, str):\npriority = PRIORITIES[priority]\nsuper().setPriority(priority)\nsetPriority = set_priority\ndef get_priority(self) -&gt; PriorityStr:\n\"\"\"Return current priority.\n        Returns:\n            priority\n        \"\"\"\nreturn PRIORITIES.inverse[self.priority()]\ndef set_shortcut_context(\nself, context: constants.ShortcutContextStr | QtCore.Qt.ShortcutContext\n):\n\"\"\"Set shortcut context.\n        Args:\n            context: shortcut context\n        Raises:\n            InvalidParamError: shortcut context does not exist\n        \"\"\"\nif isinstance(context, str):\ncontext = constants.SHORTCUT_CONTEXT[context]\nsuper().setShortcutContext(context)\nsetShortcutContext = set_shortcut_context\ndef get_shortcut_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n        Returns:\n            shortcut context\n        \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[super().shortcutContext()]\ndef set_menu_role(self, role: RoleStr):\n\"\"\"Set menu role.\n        Args:\n            role: menu role\n        Raises:\n            InvalidParamError: menu role does not exist\n        \"\"\"\nif isinstance(role, str):\nrole = ROLES[role]\nsuper().setMenuRole(role)\nsetMenuRole = set_menu_role\ndef get_menu_role(self) -&gt; RoleStr:\n\"\"\"Return menu role.\n        Returns:\n            menu role\n        \"\"\"\nreturn ROLES.inverse[super().menuRole()]\ndef show_shortcut_in_contextmenu(self, state: bool = True):\nself.setShortcutVisibleInContextMenu(state)\nusage_count = core.Property(int, get_usage_count)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.setIcon","title":"<code>setIcon = set_icon</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.setMenuRole","title":"<code>setMenuRole = set_menu_role</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.setPriority","title":"<code>setPriority = set_priority</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.setShortcut","title":"<code>setShortcut = set_shortcut</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.setShortcutContext","title":"<code>setShortcutContext = set_shortcut_context</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.setToolTip","title":"<code>setToolTip = set_tooltip</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.usage_count","title":"<code>usage_count = core.Property(int, get_usage_count)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.__init__","title":"<code>__init__(*args, text: str | None = None, icon: datatypes.IconType = None, callback: Callable | None = None, **kwargs: Callable | None)</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def __init__(\nself,\n*args,\ntext: str | None = None,\nicon: datatypes.IconType = None,\ncallback: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._menu = None\nif callback is not None:\nself.triggered.connect(callback)\nself._usage_count = 0\nif text:\nself.setText(text)\nif icon:\nself.set_icon(icon)\nself.triggered.connect(self._increase_usage_counter)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def __repr__(self) -&gt; str:\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_menu_role","title":"<code>get_menu_role() -&gt; RoleStr</code>","text":"<p>Return menu role.</p> <p>Returns:</p> Type Description <code>RoleStr</code> <p>menu role</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_menu_role(self) -&gt; RoleStr:\n\"\"\"Return menu role.\n    Returns:\n        menu role\n    \"\"\"\nreturn ROLES.inverse[super().menuRole()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"<p>Return current priority.</p> <p>Returns:</p> Type Description <code>PriorityStr</code> <p>priority</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\n\"\"\"Return current priority.\n    Returns:\n        priority\n    \"\"\"\nreturn PRIORITIES.inverse[self.priority()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_shortcut","title":"<code>get_shortcut() -&gt; gui.KeySequence | None</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_shortcut(self) -&gt; gui.KeySequence | None:\nshortcut = self.shortcut()\nreturn (\ngui.KeySequence(\nshortcut.toString(), gui.KeySequence.SequenceFormat.PortableText\n)\nif shortcut\nelse None\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_shortcut_context","title":"<code>get_shortcut_context() -&gt; constants.ShortcutContextStr</code>","text":"<p>Return shortcut context.</p> <p>Returns:</p> Type Description <code>constants.ShortcutContextStr</code> <p>shortcut context</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_shortcut_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n    Returns:\n        shortcut context\n    \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[super().shortcutContext()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_type","title":"<code>get_type() -&gt; Literal['menu', 'separator', 'widget', 'regular']</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_type(self) -&gt; Literal[\"menu\", \"separator\", \"widget\", \"regular\"]:\nif self.menu() is not None:\nreturn \"menu\"\nelif self.isSeparator():\nreturn \"separator\"\nelif hasattr(self, \"defaultWidget\"):\nreturn \"widget\"\nelse:\nreturn \"regular\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.get_usage_count","title":"<code>get_usage_count() -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_usage_count(self) -&gt; int:\nreturn self._usage_count\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.menu","title":"<code>menu()</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def menu(self):\nreturn self._menu\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_disabled","title":"<code>set_disabled()</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_disabled(self):\nself.setEnabled(False)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_enabled","title":"<code>set_enabled(enabled: bool = True)</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_enabled(self, enabled: bool = True):\nself.setEnabled(enabled)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nsuper().setIcon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_menu","title":"<code>set_menu(menu)</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_menu(self, menu):\ntry:\nself.setMenu(menu)\nexcept AttributeError:\nself.triggered.connect(menu.exec)\nself._menu = menu\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_menu_role","title":"<code>set_menu_role(role: RoleStr)</code>","text":"<p>Set menu role.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>RoleStr</code> <p>menu role</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>menu role does not exist</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_menu_role(self, role: RoleStr):\n\"\"\"Set menu role.\n    Args:\n        role: menu role\n    Raises:\n        InvalidParamError: menu role does not exist\n    \"\"\"\nif isinstance(role, str):\nrole = ROLES[role]\nsuper().setMenuRole(role)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_priority","title":"<code>set_priority(priority: PriorityStr | QtGui.QAction.Priority)</code>","text":"<p>Set priority of the action.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>PriorityStr | QtGui.QAction.Priority</code> <p>priority for the action</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>priority does not exist</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_priority(self, priority: PriorityStr | QtGui.QAction.Priority):\n\"\"\"Set priority of the action.\n    Args:\n        priority: priority for the action\n    Raises:\n        InvalidParamError: priority does not exist\n    \"\"\"\nif isinstance(priority, str):\npriority = PRIORITIES[priority]\nsuper().setPriority(priority)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_shortcut","title":"<code>set_shortcut(shortcut: None | QtGui.QKeySequence | str)</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_shortcut(self, shortcut: None | QtGui.QKeySequence | str):\nif shortcut is None:\nshortcut = \"\"\nif isinstance(shortcut, str):\nshortcut = gui.KeySequence(\nshortcut, gui.KeySequence.SequenceFormat.PortableText\n)\nsuper().setShortcut(shortcut)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_shortcut_context","title":"<code>set_shortcut_context(context: constants.ShortcutContextStr | QtCore.Qt.ShortcutContext)</code>","text":"<p>Set shortcut context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>constants.ShortcutContextStr | QtCore.Qt.ShortcutContext</code> <p>shortcut context</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>shortcut context does not exist</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_shortcut_context(\nself, context: constants.ShortcutContextStr | QtCore.Qt.ShortcutContext\n):\n\"\"\"Set shortcut context.\n    Args:\n        context: shortcut context\n    Raises:\n        InvalidParamError: shortcut context does not exist\n    \"\"\"\nif isinstance(context, str):\ncontext = constants.SHORTCUT_CONTEXT[context]\nsuper().setShortcutContext(context)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.set_tooltip","title":"<code>set_tooltip(tooltip: str | datatypes.PathType, size: datatypes.SizeType | None = None)</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nsuper().setToolTip(tooltip)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.action.ActionMixin.show_shortcut_in_contextmenu","title":"<code>show_shortcut_in_contextmenu(state: bool = True)</code>","text":"Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def show_shortcut_in_contextmenu(self, state: bool = True):\nself.setShortcutVisibleInContextMenu(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Bitmap","title":"<code>Bitmap</code>","text":"<p>         Bases: <code>gui.PixmapMixin</code>, <code>QtGui.QBitmap</code></p> Source code in <code>prettyqt\\gui\\bitmap.py</code> <pre><code>class Bitmap(gui.PixmapMixin, QtGui.QBitmap):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Brush","title":"<code>Brush</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QBrush</code></p> Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>class Brush(serializemixin.SerializeMixin, QtGui.QBrush):\ndef __repr__(self):\nreturn get_repr(self, self.get_color(), self.get_style())\ndef get_texture_image(self) -&gt; gui.Image | None:\nimg = self.textureImage()\nreturn None if img.isNull() else gui.Image(img)\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_style(self) -&gt; constants.BrushStyleStr:\nreturn constants.BRUSH_STYLE.inverse[self.style()]\ndef set_style(self, style: constants.BrushStyleStr):\nif style not in constants.BRUSH_STYLE:\nraise InvalidParamError(style, constants.BRUSH_STYLE)\nself.setStyle(constants.BRUSH_STYLE[style])\ndef set_transform(self, transform: datatypes.TransformType):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.brush.Brush.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_color(), self.get_style())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.brush.Brush.get_color","title":"<code>get_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>def get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.brush.Brush.get_style","title":"<code>get_style() -&gt; constants.BrushStyleStr</code>","text":"Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>def get_style(self) -&gt; constants.BrushStyleStr:\nreturn constants.BRUSH_STYLE.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.brush.Brush.get_texture_image","title":"<code>get_texture_image() -&gt; gui.Image | None</code>","text":"Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>def get_texture_image(self) -&gt; gui.Image | None:\nimg = self.textureImage()\nreturn None if img.isNull() else gui.Image(img)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.brush.Brush.set_style","title":"<code>set_style(style: constants.BrushStyleStr)</code>","text":"Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>def set_style(self, style: constants.BrushStyleStr):\nif style not in constants.BRUSH_STYLE:\nraise InvalidParamError(style, constants.BRUSH_STYLE)\nself.setStyle(constants.BRUSH_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.brush.Brush.set_transform","title":"<code>set_transform(transform: datatypes.TransformType)</code>","text":"Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>def set_transform(self, transform: datatypes.TransformType):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Clipboard","title":"<code>Clipboard</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>class Clipboard(core.ObjectMixin):\ndef __init__(self, item: QtGui.QClipboard):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef set_pixmap(self, pixmap: QtGui.QPixmap | None, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nif pixmap is None:\npixmap = QtGui.QPixmap()\nself.item.setPixmap(pixmap, MODES[mode])\ndef get_pixmap(self, mode: ModeStr = \"clipboard\") -&gt; gui.Pixmap | None:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\npix = gui.Pixmap(self.item.pixmap(MODES[mode]))\nreturn None if pix.isNull() else pix\ndef set_image(self, image: QtGui.QImage | None, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nif image is None:\nimage = QtGui.QImage()\nself.item.setImage(image, MODES[mode])\ndef get_image(self, mode: ModeStr = \"clipboard\") -&gt; gui.Image | None:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nimg = gui.Image(self.item.image(MODES[mode]))\nreturn None if img.isNull() else img\ndef set_mimedata(self, mimedata: QtCore.QMimeData, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nself.item.setMimeData(mimedata, MODES[mode])\ndef get_mimedata(self, mode: ModeStr = \"clipboard\") -&gt; QtCore.QMimeData:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nreturn self.item.mimeData(MODES[mode])\ndef set_text(self, text: str, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nself.item.setText(text, MODES[mode])\ndef get_text(self, mode: ModeStr = \"clipboard\") -&gt; str:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nreturn self.item.text(MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.__init__","title":"<code>__init__(item: QtGui.QClipboard)</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def __init__(self, item: QtGui.QClipboard):\nself.item = item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.get_image","title":"<code>get_image(mode: ModeStr = 'clipboard') -&gt; gui.Image | None</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def get_image(self, mode: ModeStr = \"clipboard\") -&gt; gui.Image | None:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nimg = gui.Image(self.item.image(MODES[mode]))\nreturn None if img.isNull() else img\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.get_mimedata","title":"<code>get_mimedata(mode: ModeStr = 'clipboard') -&gt; QtCore.QMimeData</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def get_mimedata(self, mode: ModeStr = \"clipboard\") -&gt; QtCore.QMimeData:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nreturn self.item.mimeData(MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.get_pixmap","title":"<code>get_pixmap(mode: ModeStr = 'clipboard') -&gt; gui.Pixmap | None</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def get_pixmap(self, mode: ModeStr = \"clipboard\") -&gt; gui.Pixmap | None:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\npix = gui.Pixmap(self.item.pixmap(MODES[mode]))\nreturn None if pix.isNull() else pix\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.get_text","title":"<code>get_text(mode: ModeStr = 'clipboard') -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def get_text(self, mode: ModeStr = \"clipboard\") -&gt; str:\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nreturn self.item.text(MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.set_image","title":"<code>set_image(image: QtGui.QImage | None, mode: ModeStr = 'clipboard')</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def set_image(self, image: QtGui.QImage | None, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nif image is None:\nimage = QtGui.QImage()\nself.item.setImage(image, MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.set_mimedata","title":"<code>set_mimedata(mimedata: QtCore.QMimeData, mode: ModeStr = 'clipboard')</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def set_mimedata(self, mimedata: QtCore.QMimeData, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nself.item.setMimeData(mimedata, MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.set_pixmap","title":"<code>set_pixmap(pixmap: QtGui.QPixmap | None, mode: ModeStr = 'clipboard')</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def set_pixmap(self, pixmap: QtGui.QPixmap | None, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nif pixmap is None:\npixmap = QtGui.QPixmap()\nself.item.setPixmap(pixmap, MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.clipboard.Clipboard.set_text","title":"<code>set_text(text: str, mode: ModeStr = 'clipboard')</code>","text":"Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>def set_text(self, text: str, mode: ModeStr = \"clipboard\"):\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nself.item.setText(text, MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Color","title":"<code>Color</code>","text":"<p>         Bases: <code>QtGui.QColor</code></p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>class Color(QtGui.QColor):\ndef __init__(self, *args):\nmatch args:\ncase (QtGui.QColor(),):\nsuper().__init__()\nself.setRgba(args[0].rgba())\ncase (str(),):\nsuper().__init__()\nself.set_color(args[0])\ncase _:\nsuper().__init__(*args)\ndef __repr__(self):\nreturn get_repr(self, self.red(), self.green(), self.blue(), self.alpha())\ndef __str__(self):\nreturn self.name() if self.alpha() == 255 else self.name(self.NameFormat.HexArgb)\ndef __reduce__(self):\nreturn type(self), (self.red(), self.green(), self.blue(), self.alpha())\ndef __format__(self, format_spec: NameStr):\ntry:\nreturn self.get_name(format_spec)\nexcept ValueError:\nreturn super().__format__(format_spec)\n@property\ndef _red(self):\nreturn self.red()\n@property\ndef _green(self):\nreturn self.green()\n@property\ndef _blue(self):\nreturn self.blue()\n@property\ndef _alpha(self):\nreturn self.alpha()\n__match_args__ = (\"_red\", \"_green\", \"_blue\", \"_alpha\")\ndef serialize_fields(self):\nreturn dict(color=self.toString())\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\ndef set_color(self, color: str | tuple):\nif isinstance(color, str):\nself.setNamedColor(color)\nelse:\nself.setRgb(*color)\n@classmethod\ndef from_text(cls, text: str) -&gt; Self:\n\"\"\"Create a QColor from specified string.\"\"\"\ncolor = cls()\nif text.startswith(\"#\") and len(text) == 7:\ncorrect = \"#0123456789abcdef\"\nfor char in text:\nif char.lower() not in correct:\nreturn color\nelif text not in list(cls.colorNames()):\nreturn color\ncolor.setNamedColor(text)\nreturn color\n@classmethod\ndef from_cmyk(cls, c: float, m: float, y: float, k: float, a: float = 1.0) -&gt; Self:\nreturn cls(cls.fromCmykF(c, m, y, k, a))\n@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, a: float = 1.0) -&gt; Self:\nreturn cls(cls.fromHsvF(h, s, v, a))\n@classmethod\ndef interpolate_color(\ncls,\nstart: QtGui.QColor,\nend: QtGui.QColor,\npercent: int,\ncolorspace: SpecStr | None = \"rgb\",\n) -&gt; Self:\n\"\"\"Get an interpolated color value.\n        Args:\n            start: The start color.\n            end: The end color.\n            percent: Which value to get (0 - 100)\n            colorspace: The desired interpolation color system,\n                        QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)\n                        If None, start is used except when percent is 100.\n        Return:\n            The interpolated QColor, with the same spec as the given start color.\n        \"\"\"\nif colorspace is None:\nreturn cls(*end.getRgb()) if percent == 100 else cls(*start.getRgb())\nif colorspace not in SPEC:\nraise InvalidParamError(colorspace, SPEC)\nout = cls()\nmatch colorspace:\ncase \"rgb\":\ncomponents = helpers.get_color_percentage(\nstart.getRgb(), end.getRgb(), percent  # type: ignore\n)\nout.setRgb(*components)\ncase \"hsv\":\ncomponents = helpers.get_color_percentage(\nstart.getHsv(), end.getHsv(), percent  # type: ignore\n)\nout.setHsv(*components)\ncase \"hsl\":\ncomponents = helpers.get_color_percentage(\nstart.getHsl(), end.getHsl(), percent  # type: ignore\n)\nout.setHsl(*components)\ncase _:\nraise ValueError(\"Invalid colorspace!\")\nreturn cls(out.convertTo(start.spec()))\ndef is_dark(self) -&gt; bool:\n\"\"\"Check whether a color is 'dark'.\"\"\"\nreturn self.lightness() &lt; 128\ndef get_spec(self) -&gt; SpecStr:\nreturn SPEC.inverse[self.spec()]\ndef convert_to(self, spec: SpecStr) -&gt; Self:\n# return Color(self.convertTo(SPEC[spec]))\ncolor = type(self)()\nmatch spec:\ncase \"rgb\":\nrgb = self.getRgb()\ncolor.setRgb(*rgb)\ncase \"hsv\":\nhsv = self.getHsv()\ncolor.setHsv(*hsv)\ncase \"cmyk\":\ncmyk = self.getCmyk()\ncolor.setCmyk(*cmyk)\ncase \"hsl\":\nhsl = self.getHsl()\ncolor.setHsl(*hsl)\ncase \"extended_rgb\":\nergb = self.getRgbF()\ncolor.setRgbF(*ergb)\nreturn color\ndef get_name(self, name_format: NameStr = \"hex_argb\") -&gt; str:\nmatch name_format:\ncase \"svg_rgb\" | \"svg_argb\" if not self.isValid():\nreturn 'fill=\"\"'\ncase \"svg_rgb\":\nreturn f'fill=\"rgb({self.red()}, {self.green()}, {self.blue()})\"'\ncase \"svg_argb\":\nfill_str = f\"rgb({self.red()}, {self.green()}, {self.blue()})\"\nreturn f'fill=\"{fill_str}\" fill-opacity=\"{self.alpha()}\"'\ncase \"qcss_argb\":\nreturn (\nf\"rgba({self.red()}, {self.green()}, {self.blue()}, {self.alpha()})\"\n)\ncase \"qcss_rgb\":\nreturn f\"rgb({self.red()}, {self.green()}, {self.blue()})\"\ncase _ if name_format in NAME_FORMAT:\nreturn self.name(NAME_FORMAT[name_format])\ncase _:\nraise ValueError(name_format)\ndef as_qt(self) -&gt; QtGui.QColor:\nreturn self.convertTo(self.spec())\ndef inverted(self, invert_alpha: bool = False) -&gt; Self:\nreturn type(self)(\n255 - self.red(),\n255 - self.green(),\n255 - self.blue(),\n255 - self.alpha() if invert_alpha else self.alpha(),\n)\ndef drift(self, factor: int = 1.0) -&gt; Self:\n\"\"\"Return color that is lighter or darker than the base color.\"\"\"\nCls = type(self)\nif self == Color(\"#000000\"):\nreturn Cls(Color(\"#050505\").lighter(int(factor * 100)))\nelif self.lightness() &gt; 128:\nreturn Cls(self.darker(int(factor * 100)))\nelse:\nreturn Cls(self.lighter(int(factor * 100)))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.__match_args__","title":"<code>__match_args__ = ('_red', '_green', '_blue', '_alpha')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.color.Color.__format__","title":"<code>__format__(format_spec: NameStr)</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def __format__(self, format_spec: NameStr):\ntry:\nreturn self.get_name(format_spec)\nexcept ValueError:\nreturn super().__format__(format_spec)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.__init__","title":"<code>__init__(*args)</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def __init__(self, *args):\nmatch args:\ncase (QtGui.QColor(),):\nsuper().__init__()\nself.setRgba(args[0].rgba())\ncase (str(),):\nsuper().__init__()\nself.set_color(args[0])\ncase _:\nsuper().__init__(*args)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.red(), self.green(), self.blue(), self.alpha())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.red(), self.green(), self.blue(), self.alpha())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def __str__(self):\nreturn self.name() if self.alpha() == 255 else self.name(self.NameFormat.HexArgb)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.as_qt","title":"<code>as_qt() -&gt; QtGui.QColor</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def as_qt(self) -&gt; QtGui.QColor:\nreturn self.convertTo(self.spec())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.convert_to","title":"<code>convert_to(spec: SpecStr) -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def convert_to(self, spec: SpecStr) -&gt; Self:\n# return Color(self.convertTo(SPEC[spec]))\ncolor = type(self)()\nmatch spec:\ncase \"rgb\":\nrgb = self.getRgb()\ncolor.setRgb(*rgb)\ncase \"hsv\":\nhsv = self.getHsv()\ncolor.setHsv(*hsv)\ncase \"cmyk\":\ncmyk = self.getCmyk()\ncolor.setCmyk(*cmyk)\ncase \"hsl\":\nhsl = self.getHsl()\ncolor.setHsl(*hsl)\ncase \"extended_rgb\":\nergb = self.getRgbF()\ncolor.setRgbF(*ergb)\nreturn color\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.drift","title":"<code>drift(factor: int = 1.0) -&gt; Self</code>","text":"<p>Return color that is lighter or darker than the base color.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def drift(self, factor: int = 1.0) -&gt; Self:\n\"\"\"Return color that is lighter or darker than the base color.\"\"\"\nCls = type(self)\nif self == Color(\"#000000\"):\nreturn Cls(Color(\"#050505\").lighter(int(factor * 100)))\nelif self.lightness() &gt; 128:\nreturn Cls(self.darker(int(factor * 100)))\nelse:\nreturn Cls(self.lighter(int(factor * 100)))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.from_cmyk","title":"<code>from_cmyk(c: float, m: float, y: float, k: float, a: float = 1.0) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>@classmethod\ndef from_cmyk(cls, c: float, m: float, y: float, k: float, a: float = 1.0) -&gt; Self:\nreturn cls(cls.fromCmykF(c, m, y, k, a))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.from_hsv","title":"<code>from_hsv(h: float, s: float, v: float, a: float = 1.0) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, a: float = 1.0) -&gt; Self:\nreturn cls(cls.fromHsvF(h, s, v, a))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.from_text","title":"<code>from_text(text: str) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a QColor from specified string.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>@classmethod\ndef from_text(cls, text: str) -&gt; Self:\n\"\"\"Create a QColor from specified string.\"\"\"\ncolor = cls()\nif text.startswith(\"#\") and len(text) == 7:\ncorrect = \"#0123456789abcdef\"\nfor char in text:\nif char.lower() not in correct:\nreturn color\nelif text not in list(cls.colorNames()):\nreturn color\ncolor.setNamedColor(text)\nreturn color\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.get_name","title":"<code>get_name(name_format: NameStr = 'hex_argb') -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def get_name(self, name_format: NameStr = \"hex_argb\") -&gt; str:\nmatch name_format:\ncase \"svg_rgb\" | \"svg_argb\" if not self.isValid():\nreturn 'fill=\"\"'\ncase \"svg_rgb\":\nreturn f'fill=\"rgb({self.red()}, {self.green()}, {self.blue()})\"'\ncase \"svg_argb\":\nfill_str = f\"rgb({self.red()}, {self.green()}, {self.blue()})\"\nreturn f'fill=\"{fill_str}\" fill-opacity=\"{self.alpha()}\"'\ncase \"qcss_argb\":\nreturn (\nf\"rgba({self.red()}, {self.green()}, {self.blue()}, {self.alpha()})\"\n)\ncase \"qcss_rgb\":\nreturn f\"rgb({self.red()}, {self.green()}, {self.blue()})\"\ncase _ if name_format in NAME_FORMAT:\nreturn self.name(NAME_FORMAT[name_format])\ncase _:\nraise ValueError(name_format)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.get_spec","title":"<code>get_spec() -&gt; SpecStr</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def get_spec(self) -&gt; SpecStr:\nreturn SPEC.inverse[self.spec()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.interpolate_color","title":"<code>interpolate_color(start: QtGui.QColor, end: QtGui.QColor, percent: int, colorspace: SpecStr | None = 'rgb') -&gt; Self</code>  <code>classmethod</code>","text":"<p>Get an interpolated color value.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>QtGui.QColor</code> <p>The start color.</p> required <code>end</code> <code>QtGui.QColor</code> <p>The end color.</p> required <code>percent</code> <code>int</code> <p>Which value to get (0 - 100)</p> required <code>colorspace</code> <code>SpecStr | None</code> <p>The desired interpolation color system,         QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)         If None, start is used except when percent is 100.</p> <code>'rgb'</code> Return <p>The interpolated QColor, with the same spec as the given start color.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>@classmethod\ndef interpolate_color(\ncls,\nstart: QtGui.QColor,\nend: QtGui.QColor,\npercent: int,\ncolorspace: SpecStr | None = \"rgb\",\n) -&gt; Self:\n\"\"\"Get an interpolated color value.\n    Args:\n        start: The start color.\n        end: The end color.\n        percent: Which value to get (0 - 100)\n        colorspace: The desired interpolation color system,\n                    QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)\n                    If None, start is used except when percent is 100.\n    Return:\n        The interpolated QColor, with the same spec as the given start color.\n    \"\"\"\nif colorspace is None:\nreturn cls(*end.getRgb()) if percent == 100 else cls(*start.getRgb())\nif colorspace not in SPEC:\nraise InvalidParamError(colorspace, SPEC)\nout = cls()\nmatch colorspace:\ncase \"rgb\":\ncomponents = helpers.get_color_percentage(\nstart.getRgb(), end.getRgb(), percent  # type: ignore\n)\nout.setRgb(*components)\ncase \"hsv\":\ncomponents = helpers.get_color_percentage(\nstart.getHsv(), end.getHsv(), percent  # type: ignore\n)\nout.setHsv(*components)\ncase \"hsl\":\ncomponents = helpers.get_color_percentage(\nstart.getHsl(), end.getHsl(), percent  # type: ignore\n)\nout.setHsl(*components)\ncase _:\nraise ValueError(\"Invalid colorspace!\")\nreturn cls(out.convertTo(start.spec()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.inverted","title":"<code>inverted(invert_alpha: bool = False) -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def inverted(self, invert_alpha: bool = False) -&gt; Self:\nreturn type(self)(\n255 - self.red(),\n255 - self.green(),\n255 - self.blue(),\n255 - self.alpha() if invert_alpha else self.alpha(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.is_dark","title":"<code>is_dark() -&gt; bool</code>","text":"<p>Check whether a color is 'dark'.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def is_dark(self) -&gt; bool:\n\"\"\"Check whether a color is 'dark'.\"\"\"\nreturn self.lightness() &lt; 128\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def serialize_fields(self):\nreturn dict(color=self.toString())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.color.Color.set_color","title":"<code>set_color(color: str | tuple)</code>","text":"Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def set_color(self, color: str | tuple):\nif isinstance(color, str):\nself.setNamedColor(color)\nelse:\nself.setRgb(*color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ColorSpace","title":"<code>ColorSpace</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QColorSpace</code></p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>class ColorSpace(serializemixin.SerializeMixin, QtGui.QColorSpace):\ndef __bool__(self):\nreturn self.isValid()\ndef set_primaries(self, primaries: PrimariesStr):\n\"\"\"Set primaries.\n        Args:\n            primaries: primaries to use\n        Raises:\n            InvalidParamError: primaries do not exist\n        \"\"\"\nif primaries not in PRIMARIES:\nraise InvalidParamError(primaries, PRIMARIES)\nself.setPrimaries(PRIMARIES[primaries])\ndef get_primaries(self) -&gt; PrimariesStr:\n\"\"\"Return current primaries.\n        Returns:\n            primaries\n        \"\"\"\nreturn PRIMARIES.inverse[self.primaries()]\ndef set_transfer_function(self, fn: TransformFunctionStr, gamma: float = 0.0):\n\"\"\"Set transfer function.\n        Args:\n            fn: transfer function to use\n            gamma: gamma value\n        Raises:\n            InvalidParamError: transfer function do not exist\n        \"\"\"\nif fn not in TRANSFER_FUNCTION:\nraise InvalidParamError(fn, TRANSFER_FUNCTION)\nself.setTransferFunction(TRANSFER_FUNCTION[fn], gamma)\ndef get_transfer_function(self) -&gt; TransformFunctionStr:\n\"\"\"Return current transfer function.\n        Returns:\n            transfer function\n        \"\"\"\nreturn TRANSFER_FUNCTION.inverse[self.transferFunction()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.get_primaries","title":"<code>get_primaries() -&gt; PrimariesStr</code>","text":"<p>Return current primaries.</p> <p>Returns:</p> Type Description <code>PrimariesStr</code> <p>primaries</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def get_primaries(self) -&gt; PrimariesStr:\n\"\"\"Return current primaries.\n    Returns:\n        primaries\n    \"\"\"\nreturn PRIMARIES.inverse[self.primaries()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.get_transfer_function","title":"<code>get_transfer_function() -&gt; TransformFunctionStr</code>","text":"<p>Return current transfer function.</p> <p>Returns:</p> Type Description <code>TransformFunctionStr</code> <p>transfer function</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def get_transfer_function(self) -&gt; TransformFunctionStr:\n\"\"\"Return current transfer function.\n    Returns:\n        transfer function\n    \"\"\"\nreturn TRANSFER_FUNCTION.inverse[self.transferFunction()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.set_primaries","title":"<code>set_primaries(primaries: PrimariesStr)</code>","text":"<p>Set primaries.</p> <p>Parameters:</p> Name Type Description Default <code>primaries</code> <code>PrimariesStr</code> <p>primaries to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>primaries do not exist</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def set_primaries(self, primaries: PrimariesStr):\n\"\"\"Set primaries.\n    Args:\n        primaries: primaries to use\n    Raises:\n        InvalidParamError: primaries do not exist\n    \"\"\"\nif primaries not in PRIMARIES:\nraise InvalidParamError(primaries, PRIMARIES)\nself.setPrimaries(PRIMARIES[primaries])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.colorspace.ColorSpace.set_transfer_function","title":"<code>set_transfer_function(fn: TransformFunctionStr, gamma: float = 0.0)</code>","text":"<p>Set transfer function.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>TransformFunctionStr</code> <p>transfer function to use</p> required <code>gamma</code> <code>float</code> <p>gamma value</p> <code>0.0</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>transfer function do not exist</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def set_transfer_function(self, fn: TransformFunctionStr, gamma: float = 0.0):\n\"\"\"Set transfer function.\n    Args:\n        fn: transfer function to use\n        gamma: gamma value\n    Raises:\n        InvalidParamError: transfer function do not exist\n    \"\"\"\nif fn not in TRANSFER_FUNCTION:\nraise InvalidParamError(fn, TRANSFER_FUNCTION)\nself.setTransferFunction(TRANSFER_FUNCTION[fn], gamma)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ConicalGradient","title":"<code>ConicalGradient</code>","text":"<p>         Bases: <code>gui.GradientMixin</code>, <code>QtGui.QConicalGradient</code></p> Source code in <code>prettyqt\\gui\\conicalgradient.py</code> <pre><code>class ConicalGradient(gui.GradientMixin, QtGui.QConicalGradient):\ndef __repr__(self):\nreturn get_repr(self, self.get_center(), self.angle())\ndef serialize_fields(self):\ncenter = self.center()\nreturn dict(angle=self.angle(), center=(center[0], center[1]))\ndef get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.conicalgradient.ConicalGradient.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\conicalgradient.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_center(), self.angle())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.conicalgradient.ConicalGradient.get_center","title":"<code>get_center() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\conicalgradient.py</code> <pre><code>def get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.conicalgradient.ConicalGradient.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\conicalgradient.py</code> <pre><code>def serialize_fields(self):\ncenter = self.center()\nreturn dict(angle=self.angle(), center=(center[0], center[1]))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Cursor","title":"<code>Cursor</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QCursor</code></p> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>class Cursor(serializemixin.SerializeMixin, QtGui.QCursor):\n@classmethod\ndef fake_mouse_move(cls):\ncls.setPos(cls.pos() + core.Point(0, 1))\ngui.Application.processEvents()\ncls.setPos(cls.pos() - core.Point(0, 1))\ndef set_shape(self, shape: constants.CursorShapeStr):\n\"\"\"Set cursor shape.\n        Args:\n            shape: shape to use\n        Raises:\n            InvalidParamError: shape does not exist\n        \"\"\"\nif shape not in constants.CURSOR_SHAPE:\nraise InvalidParamError(shape, constants.CURSOR_SHAPE)\nself.setShape(constants.CURSOR_SHAPE[shape])\ndef get_shape(self) -&gt; constants.CursorShapeStr:\n\"\"\"Return current cursor shape.\n        Returns:\n            cursor shape\n        \"\"\"\nreturn constants.CURSOR_SHAPE.inverse[self.shape()]\n@classmethod\ndef get_position(cls) -&gt; core.Point:\nreturn core.Point(cls.pos())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.fake_mouse_move","title":"<code>fake_mouse_move()</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>@classmethod\ndef fake_mouse_move(cls):\ncls.setPos(cls.pos() + core.Point(0, 1))\ngui.Application.processEvents()\ncls.setPos(cls.pos() - core.Point(0, 1))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.get_position","title":"<code>get_position() -&gt; core.Point</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>@classmethod\ndef get_position(cls) -&gt; core.Point:\nreturn core.Point(cls.pos())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.get_shape","title":"<code>get_shape() -&gt; constants.CursorShapeStr</code>","text":"<p>Return current cursor shape.</p> <p>Returns:</p> Type Description <code>constants.CursorShapeStr</code> <p>cursor shape</p> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>def get_shape(self) -&gt; constants.CursorShapeStr:\n\"\"\"Return current cursor shape.\n    Returns:\n        cursor shape\n    \"\"\"\nreturn constants.CURSOR_SHAPE.inverse[self.shape()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.cursor.Cursor.set_shape","title":"<code>set_shape(shape: constants.CursorShapeStr)</code>","text":"<p>Set cursor shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>constants.CursorShapeStr</code> <p>shape to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>shape does not exist</p> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>def set_shape(self, shape: constants.CursorShapeStr):\n\"\"\"Set cursor shape.\n    Args:\n        shape: shape to use\n    Raises:\n        InvalidParamError: shape does not exist\n    \"\"\"\nif shape not in constants.CURSOR_SHAPE:\nraise InvalidParamError(shape, constants.CURSOR_SHAPE)\nself.setShape(constants.CURSOR_SHAPE[shape])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.DesktopServices","title":"<code>DesktopServices</code>","text":"<p>         Bases: <code>QtGui.QDesktopServices</code></p> Source code in <code>prettyqt\\gui\\desktopservices.py</code> <pre><code>class DesktopServices(QtGui.QDesktopServices):\n@classmethod\ndef open_url(cls, location: datatypes.PathType | datatypes.UrlType) -&gt; bool:\nif not isinstance(location, QtCore.QUrl):\nlocation = core.Url.from_user_input(os.fspath(location))\nreturn cls.openUrl(location)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.desktopservices.DesktopServices.open_url","title":"<code>open_url(location: datatypes.PathType | datatypes.UrlType) -&gt; bool</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\desktopservices.py</code> <pre><code>@classmethod\ndef open_url(cls, location: datatypes.PathType | datatypes.UrlType) -&gt; bool:\nif not isinstance(location, QtCore.QUrl):\nlocation = core.Url.from_user_input(os.fspath(location))\nreturn cls.openUrl(location)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.DoubleValidator","title":"<code>DoubleValidator</code>","text":"<p>         Bases: <code>gui.ValidatorMixin</code>, <code>QtGui.QDoubleValidator</code></p> Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>class DoubleValidator(gui.ValidatorMixin, QtGui.QDoubleValidator):\ndef __repr__(self):\nreturn get_repr(self, self.bottom(), self.top(), self.decimals())\ndef __reduce__(self):\nreturn type(self), (self.bottom(), self.top(), self.decimals()), None\ndef __eq__(self, other: object):\nreturn (\n(\nself.bottom() == other.bottom()\nand self.top() == other.top()\nand self.decimals() == other.decimals()\n)\nif isinstance(other, type(self))\nelse False\n)\ndef serialize_fields(self):\nreturn dict(bottom=self.bottom(), top=self.top(), decimals=self.decimals())\ndef set_range(self, start: float | None, end: float | None, decimals: int = 0):\nif start is None:\nstart = -float(\"inf\")\nif end is None:\nend = float(\"inf\")\nself.setRange(start, end, decimals)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.doublevalidator.DoubleValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn (\n(\nself.bottom() == other.bottom()\nand self.top() == other.top()\nand self.decimals() == other.decimals()\n)\nif isinstance(other, type(self))\nelse False\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.doublevalidator.DoubleValidator.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.bottom(), self.top(), self.decimals()), None\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.doublevalidator.DoubleValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.bottom(), self.top(), self.decimals())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.doublevalidator.DoubleValidator.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>def serialize_fields(self):\nreturn dict(bottom=self.bottom(), top=self.top(), decimals=self.decimals())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.doublevalidator.DoubleValidator.set_range","title":"<code>set_range(start: float | None, end: float | None, decimals: int = 0)</code>","text":"Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>def set_range(self, start: float | None, end: float | None, decimals: int = 0):\nif start is None:\nstart = -float(\"inf\")\nif end is None:\nend = float(\"inf\")\nself.setRange(start, end, decimals)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Drag","title":"<code>Drag</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtGui.QDrag</code></p> Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>class Drag(core.ObjectMixin, QtGui.QDrag):\ndef get_pixmap(self) -&gt; gui.Pixmap:\nreturn gui.Pixmap(self.pixmap())\ndef get_default_action(self) -&gt; constants.DropActionStr:\nreturn constants.DROP_ACTION.inverse[self.defaultAction()]\ndef get_drag_cursor(self, action: constants.DropActionStr) -&gt; gui.Pixmap:\nif action not in constants.DROP_ACTION:\nraise InvalidParamError(action, constants.DROP_ACTION)\npx = self.dragCursor(constants.DROP_ACTION[action])\nreturn gui.Pixmap(px)\ndef set_drag_cursor(self, cursor: QtGui.QPixmap, action: constants.DropActionStr):\nself.setDragCursor(cursor, constants.DROP_ACTION[action])\ndef get_supported_actions(self) -&gt; list[constants.DropActionStr]:\nreturn constants.DROP_ACTION.get_list(self.supportedActions())\ndef main_loop(\nself,\nsupported_actions: list[constants.DropActionStr] | None = None,\ndefault_drop_action: constants.DropActionStr | None = None,\n) -&gt; constants.DropActionStr:\nsupported_actions = supported_actions or [constants.DROP_ACTION[\"move\"]]\nflag = QtCore.Qt.DropAction(0)\nfor i in supported_actions:\nflag |= constants.DROP_ACTION[i]\ndefault_action = constants.DROP_ACTION[default_drop_action]\nresult = self.exec(flag, default_action)\nreturn constants.DROP_ACTION.inverse[result]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.drag.Drag.get_default_action","title":"<code>get_default_action() -&gt; constants.DropActionStr</code>","text":"Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>def get_default_action(self) -&gt; constants.DropActionStr:\nreturn constants.DROP_ACTION.inverse[self.defaultAction()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.drag.Drag.get_drag_cursor","title":"<code>get_drag_cursor(action: constants.DropActionStr) -&gt; gui.Pixmap</code>","text":"Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>def get_drag_cursor(self, action: constants.DropActionStr) -&gt; gui.Pixmap:\nif action not in constants.DROP_ACTION:\nraise InvalidParamError(action, constants.DROP_ACTION)\npx = self.dragCursor(constants.DROP_ACTION[action])\nreturn gui.Pixmap(px)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.drag.Drag.get_pixmap","title":"<code>get_pixmap() -&gt; gui.Pixmap</code>","text":"Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>def get_pixmap(self) -&gt; gui.Pixmap:\nreturn gui.Pixmap(self.pixmap())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.drag.Drag.get_supported_actions","title":"<code>get_supported_actions() -&gt; list[constants.DropActionStr]</code>","text":"Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>def get_supported_actions(self) -&gt; list[constants.DropActionStr]:\nreturn constants.DROP_ACTION.get_list(self.supportedActions())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.drag.Drag.main_loop","title":"<code>main_loop(supported_actions: list[constants.DropActionStr] | None = None, default_drop_action: constants.DropActionStr | None = None) -&gt; constants.DropActionStr</code>","text":"Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>def main_loop(\nself,\nsupported_actions: list[constants.DropActionStr] | None = None,\ndefault_drop_action: constants.DropActionStr | None = None,\n) -&gt; constants.DropActionStr:\nsupported_actions = supported_actions or [constants.DROP_ACTION[\"move\"]]\nflag = QtCore.Qt.DropAction(0)\nfor i in supported_actions:\nflag |= constants.DROP_ACTION[i]\ndefault_action = constants.DROP_ACTION[default_drop_action]\nresult = self.exec(flag, default_action)\nreturn constants.DROP_ACTION.inverse[result]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.drag.Drag.set_drag_cursor","title":"<code>set_drag_cursor(cursor: QtGui.QPixmap, action: constants.DropActionStr)</code>","text":"Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>def set_drag_cursor(self, cursor: QtGui.QPixmap, action: constants.DropActionStr):\nself.setDragCursor(cursor, constants.DROP_ACTION[action])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Font","title":"<code>Font</code>","text":"<p>         Bases: <code>prettyprinter.PrettyPrinter</code>, <code>QtGui.QFont</code></p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>class Font(prettyprinter.PrettyPrinter, QtGui.QFont):\ndef __repr__(self):\nreturn get_repr(\nself, self.family(), self.pointSize(), self.weight(), self.italic()\n)\ndef __getstate__(self):\nreturn dict(\nfamily=self.family(),\npointsize=self.pointSize(),\nweight=self.weight(),\nitalic=self.italic(),\n)\ndef __setstate__(self, state):\nself.setFamily(state[\"family\"])\nif state[\"pointsize\"] &gt; -1:\nself.setPointSize(state[\"pointsize\"])\nself.setWeight(state[\"weight\"])\nself.setItalic(state[\"italic\"])\n@property\ndef _family(self):\nreturn self.family()\n__match_args__ = (\"_family\",)\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.__getstate__()\n@property\ndef metrics(self):\nreturn gui.FontMetrics(self)\ndef set_size(self, size: int):\nself.setPointSize(size)\n@classmethod\ndef mono(cls, size=8) -&gt; Self:\nmatch sys.platform:\ncase \"win32\":\nfont = \"Consolas\"\ncase \"darwin\":\nfont = \"Menlo\"\ncase _:\nfont = \"Monospace\"\nreturn cls(font, size)\n# font.setStyleHint()\ndef set_style_hint(self, hint: StyleHintStr):\n\"\"\"Set the style hint.\n        Args:\n            hint: style hint\n        Raises:\n            InvalidParamError: invalid style hint\n        \"\"\"\nif hint not in STYLE_HINTS:\nraise InvalidParamError(hint, STYLE_HINTS)\nself.setStyleHint(STYLE_HINTS[hint])\ndef set_weight(self, weight: WeightStr):\n\"\"\"Set the font weight.\n        Args:\n            weight: font weight\n        Raises:\n            InvalidParamError: invalid font weight\n        \"\"\"\nif weight not in WEIGHT:\nraise InvalidParamError(weight, WEIGHT)\nself.setWeight(WEIGHT[weight])\ndef get_weight(self) -&gt; WeightStr:\n\"\"\"Get current font weight.\n        Returns:\n            current font weight\n        \"\"\"\nreturn WEIGHT.inverse[self.weight()]\ndef set_capitalization(self, capitalization: CapitalizationStr):\n\"\"\"Set the font capitalization.\n        Args:\n            capitalization: font capitalization\n        Raises:\n            InvalidParamError: invalid font capitalization\n        \"\"\"\nif capitalization not in CAPITALIZATION:\nraise InvalidParamError(capitalization, CAPITALIZATION)\nself.setCapitalization(CAPITALIZATION[capitalization])\ndef get_capitalization(self) -&gt; CapitalizationStr:\n\"\"\"Get current font capitalization.\n        Returns:\n            current font capitalization\n        \"\"\"\nreturn CAPITALIZATION.inverse[self.capitalization()]\ndef set_hinting_preference(self, preference: HintingPreferenceStr):\n\"\"\"Set the hinting preference.\n        Args:\n            preference: hinting preference\n        Raises:\n            InvalidParamError: invalid hinting preference\n        \"\"\"\nif preference not in HINTING_PREFERENCE:\nraise InvalidParamError(preference, HINTING_PREFERENCE)\nself.setHintingPreference(HINTING_PREFERENCE[preference])\ndef get_hinting_preference(self) -&gt; HintingPreferenceStr:\n\"\"\"Get current hinting preference.\n        Returns:\n            current hinting preference\n        \"\"\"\nreturn HINTING_PREFERENCE.inverse[self.hintingPreference()]\ndef set_letter_spacing(self, typ: SpacingTypeStr, spacing: float):\n\"\"\"Set the letter spacing.\n        Args:\n            typ: letter spacing type\n            spacing: spacing\n        Raises:\n            InvalidParamError: invalid letter spacing type\n        \"\"\"\nif typ not in SPACING_TYPE:\nraise InvalidParamError(typ, SPACING_TYPE)\nself.setLetterSpacing(SPACING_TYPE[typ], spacing)\ndef get_letter_spacing_type(self) -&gt; SpacingTypeStr:\n\"\"\"Get current letter spacing type.\n        Returns:\n            current letter spacing type\n        \"\"\"\nreturn SPACING_TYPE.inverse[self.letterSpacingType()]\ndef set_style(self, style: StyleStr):\n\"\"\"Set the font style.\n        Args:\n            style: font style\n        Raises:\n            InvalidParamError: invalid font style\n        \"\"\"\nif style not in STYLE:\nraise InvalidParamError(style, STYLE)\nself.setStyle(STYLE[style])\ndef get_style(self) -&gt; StyleStr:\n\"\"\"Get current font style.\n        Returns:\n            current font style\n        \"\"\"\nreturn STYLE.inverse[self.style()]\ndef set_family(self, family: str, fallback: str | None = None):\n\"\"\"Set the font family.\n        Args:\n            family: font family\n            fallback: fallback font family\n        \"\"\"\nself.setFamily(family)\nfont_info = gui.FontInfo(self)\nif fallback is not None and font_info.family() != family:\nself.setFamily(fallback)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.__match_args__","title":"<code>__match_args__ = ('_family')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.font.Font.metrics","title":"<code>metrics</code>  <code>property</code>","text":""},{"location":"api/gui.html#prettyqt.gui.font.Font.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def __getstate__(self):\nreturn dict(\nfamily=self.family(),\npointsize=self.pointSize(),\nweight=self.weight(),\nitalic=self.italic(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself, self.family(), self.pointSize(), self.weight(), self.italic()\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def __setstate__(self, state):\nself.setFamily(state[\"family\"])\nif state[\"pointsize\"] &gt; -1:\nself.setPointSize(state[\"pointsize\"])\nself.setWeight(state[\"weight\"])\nself.setItalic(state[\"italic\"])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_capitalization","title":"<code>get_capitalization() -&gt; CapitalizationStr</code>","text":"<p>Get current font capitalization.</p> <p>Returns:</p> Type Description <code>CapitalizationStr</code> <p>current font capitalization</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_capitalization(self) -&gt; CapitalizationStr:\n\"\"\"Get current font capitalization.\n    Returns:\n        current font capitalization\n    \"\"\"\nreturn CAPITALIZATION.inverse[self.capitalization()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_hinting_preference","title":"<code>get_hinting_preference() -&gt; HintingPreferenceStr</code>","text":"<p>Get current hinting preference.</p> <p>Returns:</p> Type Description <code>HintingPreferenceStr</code> <p>current hinting preference</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_hinting_preference(self) -&gt; HintingPreferenceStr:\n\"\"\"Get current hinting preference.\n    Returns:\n        current hinting preference\n    \"\"\"\nreturn HINTING_PREFERENCE.inverse[self.hintingPreference()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_letter_spacing_type","title":"<code>get_letter_spacing_type() -&gt; SpacingTypeStr</code>","text":"<p>Get current letter spacing type.</p> <p>Returns:</p> Type Description <code>SpacingTypeStr</code> <p>current letter spacing type</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_letter_spacing_type(self) -&gt; SpacingTypeStr:\n\"\"\"Get current letter spacing type.\n    Returns:\n        current letter spacing type\n    \"\"\"\nreturn SPACING_TYPE.inverse[self.letterSpacingType()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_style","title":"<code>get_style() -&gt; StyleStr</code>","text":"<p>Get current font style.</p> <p>Returns:</p> Type Description <code>StyleStr</code> <p>current font style</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_style(self) -&gt; StyleStr:\n\"\"\"Get current font style.\n    Returns:\n        current font style\n    \"\"\"\nreturn STYLE.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.get_weight","title":"<code>get_weight() -&gt; WeightStr</code>","text":"<p>Get current font weight.</p> <p>Returns:</p> Type Description <code>WeightStr</code> <p>current font weight</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_weight(self) -&gt; WeightStr:\n\"\"\"Get current font weight.\n    Returns:\n        current font weight\n    \"\"\"\nreturn WEIGHT.inverse[self.weight()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.mono","title":"<code>mono(size = 8) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>@classmethod\ndef mono(cls, size=8) -&gt; Self:\nmatch sys.platform:\ncase \"win32\":\nfont = \"Consolas\"\ncase \"darwin\":\nfont = \"Menlo\"\ncase _:\nfont = \"Monospace\"\nreturn cls(font, size)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn self.__getstate__()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_capitalization","title":"<code>set_capitalization(capitalization: CapitalizationStr)</code>","text":"<p>Set the font capitalization.</p> <p>Parameters:</p> Name Type Description Default <code>capitalization</code> <code>CapitalizationStr</code> <p>font capitalization</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font capitalization</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_capitalization(self, capitalization: CapitalizationStr):\n\"\"\"Set the font capitalization.\n    Args:\n        capitalization: font capitalization\n    Raises:\n        InvalidParamError: invalid font capitalization\n    \"\"\"\nif capitalization not in CAPITALIZATION:\nraise InvalidParamError(capitalization, CAPITALIZATION)\nself.setCapitalization(CAPITALIZATION[capitalization])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_family","title":"<code>set_family(family: str, fallback: str | None = None)</code>","text":"<p>Set the font family.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>str</code> <p>font family</p> required <code>fallback</code> <code>str | None</code> <p>fallback font family</p> <code>None</code> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_family(self, family: str, fallback: str | None = None):\n\"\"\"Set the font family.\n    Args:\n        family: font family\n        fallback: fallback font family\n    \"\"\"\nself.setFamily(family)\nfont_info = gui.FontInfo(self)\nif fallback is not None and font_info.family() != family:\nself.setFamily(fallback)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_hinting_preference","title":"<code>set_hinting_preference(preference: HintingPreferenceStr)</code>","text":"<p>Set the hinting preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>HintingPreferenceStr</code> <p>hinting preference</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid hinting preference</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_hinting_preference(self, preference: HintingPreferenceStr):\n\"\"\"Set the hinting preference.\n    Args:\n        preference: hinting preference\n    Raises:\n        InvalidParamError: invalid hinting preference\n    \"\"\"\nif preference not in HINTING_PREFERENCE:\nraise InvalidParamError(preference, HINTING_PREFERENCE)\nself.setHintingPreference(HINTING_PREFERENCE[preference])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_letter_spacing","title":"<code>set_letter_spacing(typ: SpacingTypeStr, spacing: float)</code>","text":"<p>Set the letter spacing.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>SpacingTypeStr</code> <p>letter spacing type</p> required <code>spacing</code> <code>float</code> <p>spacing</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid letter spacing type</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_letter_spacing(self, typ: SpacingTypeStr, spacing: float):\n\"\"\"Set the letter spacing.\n    Args:\n        typ: letter spacing type\n        spacing: spacing\n    Raises:\n        InvalidParamError: invalid letter spacing type\n    \"\"\"\nif typ not in SPACING_TYPE:\nraise InvalidParamError(typ, SPACING_TYPE)\nself.setLetterSpacing(SPACING_TYPE[typ], spacing)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_size","title":"<code>set_size(size: int)</code>","text":"Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_size(self, size: int):\nself.setPointSize(size)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_style","title":"<code>set_style(style: StyleStr)</code>","text":"<p>Set the font style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>StyleStr</code> <p>font style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font style</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_style(self, style: StyleStr):\n\"\"\"Set the font style.\n    Args:\n        style: font style\n    Raises:\n        InvalidParamError: invalid font style\n    \"\"\"\nif style not in STYLE:\nraise InvalidParamError(style, STYLE)\nself.setStyle(STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_style_hint","title":"<code>set_style_hint(hint: StyleHintStr)</code>","text":"<p>Set the style hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>StyleHintStr</code> <p>style hint</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid style hint</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_style_hint(self, hint: StyleHintStr):\n\"\"\"Set the style hint.\n    Args:\n        hint: style hint\n    Raises:\n        InvalidParamError: invalid style hint\n    \"\"\"\nif hint not in STYLE_HINTS:\nraise InvalidParamError(hint, STYLE_HINTS)\nself.setStyleHint(STYLE_HINTS[hint])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.font.Font.set_weight","title":"<code>set_weight(weight: WeightStr)</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>WeightStr</code> <p>font weight</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font weight</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_weight(self, weight: WeightStr):\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    Raises:\n        InvalidParamError: invalid font weight\n    \"\"\"\nif weight not in WEIGHT:\nraise InvalidParamError(weight, WEIGHT)\nself.setWeight(WEIGHT[weight])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.FontDatabase","title":"<code>FontDatabase</code>","text":"<p>         Bases: <code>QtGui.QFontDatabase</code></p> Source code in <code>prettyqt\\gui\\fontdatabase.py</code> <pre><code>class FontDatabase(QtGui.QFontDatabase):\nfont_paths: dict[str, int] = {}\n@classmethod\ndef add_fonts_from_folder(cls, path: datatypes.PathType):\npath = pathlib.Path(path)\nfor p in path.iterdir():\nif p.suffix.lower() in [\".ttf\", \".otf\"]:\nlogger.debug(f\"adding font {p!r} to database.\")\ncls.addApplicationFont(str(p))\n@classmethod\ndef add_font(cls, path: datatypes.PathType, ttf_hash: str | None = None) -&gt; int:\npath = pathlib.Path(path)\nfont_id = cls.addApplicationFont(str(path))\nif not cls.applicationFontFamilies(font_id):\nraise RuntimeError(\nf\"Font {path!r} appears to be empty. \"\n\"If you are on Windows 10, please read \"\n\"https://support.microsoft.com/\"\n\"en-us/kb/3053676\"\n)\nif ttf_hash is not None:\ncontent = path.read_bytes()\nif hashlib.md5(content).hexdigest() != ttf_hash:\nraise OSError(f\"Font is corrupt at: {path!r}\")\ncls.font_paths[str(path)] = font_id\nreturn font_id\n@classmethod\ndef remove_font(cls, font: datatypes.PathType | int):\nfont_id = font if isinstance(font, int) else cls.font_paths[str(font)]\ncls.removeApplicationFont(font_id)\n@classmethod\ndef get_system_font(cls, font_type: SystemFontStr):\nif font_type not in SYSTEM_FONT:\nraise InvalidParamError(font_type, SYSTEM_FONT)\nreturn cls.systemFont(SYSTEM_FONT[font_type])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontdatabase.FontDatabase.font_paths","title":"<code>font_paths: dict[str, int] = {}</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.fontdatabase.FontDatabase.add_font","title":"<code>add_font(path: datatypes.PathType, ttf_hash: str | None = None) -&gt; int</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\fontdatabase.py</code> <pre><code>@classmethod\ndef add_font(cls, path: datatypes.PathType, ttf_hash: str | None = None) -&gt; int:\npath = pathlib.Path(path)\nfont_id = cls.addApplicationFont(str(path))\nif not cls.applicationFontFamilies(font_id):\nraise RuntimeError(\nf\"Font {path!r} appears to be empty. \"\n\"If you are on Windows 10, please read \"\n\"https://support.microsoft.com/\"\n\"en-us/kb/3053676\"\n)\nif ttf_hash is not None:\ncontent = path.read_bytes()\nif hashlib.md5(content).hexdigest() != ttf_hash:\nraise OSError(f\"Font is corrupt at: {path!r}\")\ncls.font_paths[str(path)] = font_id\nreturn font_id\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontdatabase.FontDatabase.add_fonts_from_folder","title":"<code>add_fonts_from_folder(path: datatypes.PathType)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\fontdatabase.py</code> <pre><code>@classmethod\ndef add_fonts_from_folder(cls, path: datatypes.PathType):\npath = pathlib.Path(path)\nfor p in path.iterdir():\nif p.suffix.lower() in [\".ttf\", \".otf\"]:\nlogger.debug(f\"adding font {p!r} to database.\")\ncls.addApplicationFont(str(p))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontdatabase.FontDatabase.get_system_font","title":"<code>get_system_font(font_type: SystemFontStr)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\fontdatabase.py</code> <pre><code>@classmethod\ndef get_system_font(cls, font_type: SystemFontStr):\nif font_type not in SYSTEM_FONT:\nraise InvalidParamError(font_type, SYSTEM_FONT)\nreturn cls.systemFont(SYSTEM_FONT[font_type])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontdatabase.FontDatabase.remove_font","title":"<code>remove_font(font: datatypes.PathType | int)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\fontdatabase.py</code> <pre><code>@classmethod\ndef remove_font(cls, font: datatypes.PathType | int):\nfont_id = font if isinstance(font, int) else cls.font_paths[str(font)]\ncls.removeApplicationFont(font_id)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.FontInfo","title":"<code>FontInfo</code>","text":"<p>         Bases: <code>QtGui.QFontInfo</code></p> Source code in <code>prettyqt\\gui\\fontinfo.py</code> <pre><code>class FontInfo(QtGui.QFontInfo):\ndef get_style_hint(self) -&gt; gui.font.StyleHintStr:\nreturn gui.font.STYLE_HINTS.inverse[self.styleHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontinfo.FontInfo.get_style_hint","title":"<code>get_style_hint() -&gt; gui.font.StyleHintStr</code>","text":"Source code in <code>prettyqt\\gui\\fontinfo.py</code> <pre><code>def get_style_hint(self) -&gt; gui.font.StyleHintStr:\nreturn gui.font.STYLE_HINTS.inverse[self.styleHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.FontMetrics","title":"<code>FontMetrics</code>","text":"<p>         Bases: <code>QtGui.QFontMetrics</code></p> Source code in <code>prettyqt\\gui\\fontmetrics.py</code> <pre><code>class FontMetrics(QtGui.QFontMetrics):\ndef elided_text(\nself, text: str, mode: constants.ElideModeStr, width: int, flags=0\n) -&gt; str:\nif mode not in constants.ELIDE_MODE:\nraise InvalidParamError(mode, constants.ELIDE_MODE)\nreturn self.elidedText(text, constants.ELIDE_MODE[mode], width, flags)\ndef get_bounding_rect(self, *args) -&gt; core.Rect:\nreturn core.Rect(self.boundingRect(*args))\ndef get_tight_bounding_rect(self, text: str) -&gt; core.Rect:\nreturn core.Rect(self.tightBoundingRect(text))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontmetrics.FontMetrics.elided_text","title":"<code>elided_text(text: str, mode: constants.ElideModeStr, width: int, flags: int = 0) -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\fontmetrics.py</code> <pre><code>def elided_text(\nself, text: str, mode: constants.ElideModeStr, width: int, flags=0\n) -&gt; str:\nif mode not in constants.ELIDE_MODE:\nraise InvalidParamError(mode, constants.ELIDE_MODE)\nreturn self.elidedText(text, constants.ELIDE_MODE[mode], width, flags)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontmetrics.FontMetrics.get_bounding_rect","title":"<code>get_bounding_rect(*args) -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\fontmetrics.py</code> <pre><code>def get_bounding_rect(self, *args) -&gt; core.Rect:\nreturn core.Rect(self.boundingRect(*args))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontmetrics.FontMetrics.get_tight_bounding_rect","title":"<code>get_tight_bounding_rect(text: str) -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\fontmetrics.py</code> <pre><code>def get_tight_bounding_rect(self, text: str) -&gt; core.Rect:\nreturn core.Rect(self.tightBoundingRect(text))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.FontMetricsF","title":"<code>FontMetricsF</code>","text":"<p>         Bases: <code>QtGui.QFontMetricsF</code></p> Source code in <code>prettyqt\\gui\\fontmetricsf.py</code> <pre><code>class FontMetricsF(QtGui.QFontMetricsF):\ndef elided_text(\nself, text: str, mode: constants.ElideModeStr, width: float, flags=0\n) -&gt; str:\nif mode not in constants.ELIDE_MODE:\nraise InvalidParamError(mode, constants.ELIDE_MODE)\nreturn self.elidedText(text, constants.ELIDE_MODE[mode], width, flags)\ndef get_bounding_rect(self, *args) -&gt; core.RectF:\nreturn core.RectF(self.boundingRect(*args))\ndef get_tight_bounding_rect(self, text: str) -&gt; core.RectF:\nreturn core.RectF(self.tightBoundingRect(text))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontmetricsf.FontMetricsF.elided_text","title":"<code>elided_text(text: str, mode: constants.ElideModeStr, width: float, flags: float = 0) -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\fontmetricsf.py</code> <pre><code>def elided_text(\nself, text: str, mode: constants.ElideModeStr, width: float, flags=0\n) -&gt; str:\nif mode not in constants.ELIDE_MODE:\nraise InvalidParamError(mode, constants.ELIDE_MODE)\nreturn self.elidedText(text, constants.ELIDE_MODE[mode], width, flags)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontmetricsf.FontMetricsF.get_bounding_rect","title":"<code>get_bounding_rect(*args) -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\fontmetricsf.py</code> <pre><code>def get_bounding_rect(self, *args) -&gt; core.RectF:\nreturn core.RectF(self.boundingRect(*args))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.fontmetricsf.FontMetricsF.get_tight_bounding_rect","title":"<code>get_tight_bounding_rect(text: str) -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\fontmetricsf.py</code> <pre><code>def get_tight_bounding_rect(self, text: str) -&gt; core.RectF:\nreturn core.RectF(self.tightBoundingRect(text))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Gradient","title":"<code>Gradient</code>","text":"<p>         Bases: <code>GradientMixin</code>, <code>prettyprinter.PrettyPrinter</code>, <code>QtGui.QGradient</code></p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>class Gradient(GradientMixin, prettyprinter.PrettyPrinter, QtGui.QGradient):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.GradientMixin","title":"<code>GradientMixin</code>","text":"Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>class GradientMixin:\ndef __setitem__(self, key: float, value):\nself.setColorAt(key, value)\ndef serialize(self) -&gt; dict[str, Any]:\nreturn dict(\ncoordinate_mode=self.get_coordinate_mode(),\nspread=self.get_spread(),\nstops=self.get_stops(),\n)\ndef set_coordinate_mode(self, mode: CoordinateModeStr):\n\"\"\"Set the coordinate mode.\n        Args:\n            mode: coordinate mode\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in COORDINATE_MODE:\nraise InvalidParamError(mode, COORDINATE_MODE)\nself.setCoordinateMode(COORDINATE_MODE[mode])\ndef get_coordinate_mode(self) -&gt; CoordinateModeStr:\n\"\"\"Return current coordinate mode.\n        Returns:\n            coordinate mode\n        \"\"\"\nreturn COORDINATE_MODE.inverse[self.coordinateMode()]\ndef set_spread(self, method: SpreadStr):\n\"\"\"Set the spread method.\n        Args:\n            method: spread method\n        Raises:\n            InvalidParamError: method does not exist\n        \"\"\"\nif method not in SPREAD:\nraise InvalidParamError(method, SPREAD)\nself.setSpread(SPREAD[method])\ndef get_spread(self) -&gt; SpreadStr:\n\"\"\"Return current spread method.\n        Returns:\n            spread method\n        \"\"\"\nreturn SPREAD.inverse[self.spread()]\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return current gradient type.\n        Returns:\n            gradient type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\ndef get_stops(self) -&gt; list[tuple[float, gui.Color]]:\nreturn [(i, gui.Color(j)) for (i, j) in self.stops()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.__setitem__","title":"<code>__setitem__(key: float, value: float)</code>","text":"Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def __setitem__(self, key: float, value):\nself.setColorAt(key, value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_coordinate_mode","title":"<code>get_coordinate_mode() -&gt; CoordinateModeStr</code>","text":"<p>Return current coordinate mode.</p> <p>Returns:</p> Type Description <code>CoordinateModeStr</code> <p>coordinate mode</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_coordinate_mode(self) -&gt; CoordinateModeStr:\n\"\"\"Return current coordinate mode.\n    Returns:\n        coordinate mode\n    \"\"\"\nreturn COORDINATE_MODE.inverse[self.coordinateMode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_spread","title":"<code>get_spread() -&gt; SpreadStr</code>","text":"<p>Return current spread method.</p> <p>Returns:</p> Type Description <code>SpreadStr</code> <p>spread method</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_spread(self) -&gt; SpreadStr:\n\"\"\"Return current spread method.\n    Returns:\n        spread method\n    \"\"\"\nreturn SPREAD.inverse[self.spread()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_stops","title":"<code>get_stops() -&gt; list[tuple[float, gui.Color]]</code>","text":"Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_stops(self) -&gt; list[tuple[float, gui.Color]]:\nreturn [(i, gui.Color(j)) for (i, j) in self.stops()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return current gradient type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>gradient type</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return current gradient type.\n    Returns:\n        gradient type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn dict(\ncoordinate_mode=self.get_coordinate_mode(),\nspread=self.get_spread(),\nstops=self.get_stops(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.set_coordinate_mode","title":"<code>set_coordinate_mode(mode: CoordinateModeStr)</code>","text":"<p>Set the coordinate mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CoordinateModeStr</code> <p>coordinate mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def set_coordinate_mode(self, mode: CoordinateModeStr):\n\"\"\"Set the coordinate mode.\n    Args:\n        mode: coordinate mode\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in COORDINATE_MODE:\nraise InvalidParamError(mode, COORDINATE_MODE)\nself.setCoordinateMode(COORDINATE_MODE[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.gradient.GradientMixin.set_spread","title":"<code>set_spread(method: SpreadStr)</code>","text":"<p>Set the spread method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>SpreadStr</code> <p>spread method</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>method does not exist</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def set_spread(self, method: SpreadStr):\n\"\"\"Set the spread method.\n    Args:\n        method: spread method\n    Raises:\n        InvalidParamError: method does not exist\n    \"\"\"\nif method not in SPREAD:\nraise InvalidParamError(method, SPREAD)\nself.setSpread(SPREAD[method])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.GuiApplication","title":"<code>GuiApplication</code>","text":"<p>         Bases: <code>GuiApplicationMixin</code>, <code>QtGui.QGuiApplication</code></p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>class GuiApplication(GuiApplicationMixin, QtGui.QGuiApplication):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.GuiApplicationMixin","title":"<code>GuiApplicationMixin</code>","text":"<p>         Bases: <code>core.CoreApplicationMixin</code></p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>class GuiApplicationMixin(core.CoreApplicationMixin):\npalette_changed = core.Signal(gui.Palette)\ndef serialize_fields(self):\nreturn dict(icon=self.get_icon())\ndef event(self, e):\nmatch e.type():\ncase QtCore.QEvent.Type.ApplicationPaletteChange:\nself.palette_changed.emit(gui.Palette(self.palette()))\nreturn super().event(e)\n@classmethod\n@contextlib.contextmanager\ndef override_cursor(cls, cursor: constants.CursorShapeStr):\ncls.set_override_cursor(cursor)\nyield cursor\ncls.restore_override_cursor()\n@classmethod\ndef set_override_cursor(cls, cursor: constants.CursorShapeStr):\ncrs = gui.Cursor(constants.CURSOR_SHAPE[cursor])\ncls.setOverrideCursor(crs)\n@classmethod\ndef restore_override_cursor(cls):\ncls.restoreOverrideCursor()\n@classmethod\ndef get_clipboard(cls) -&gt; gui.Clipboard:\nreturn gui.Clipboard(cls.clipboard())\n@classmethod\n@contextlib.contextmanager\ndef edit_palette(cls) -&gt; Iterator[gui.Palette]:\npalette = gui.Palette(cls.palette())\nyield palette\ncls.setPalette(palette)\ndef set_layout_direction(self, direction: constants.LayoutDirectionStr):\n\"\"\"Set layout direction.\n        Args:\n            direction: layout direction\n        Raises:\n            InvalidParamError: layout direction does not exist\n        \"\"\"\nif direction not in constants.LAYOUT_DIRECTION:\nraise InvalidParamError(direction, constants.LAYOUT_DIRECTION)\nself.setLayoutDirection(constants.LAYOUT_DIRECTION[direction])\ndef get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n        Returns:\n            layout direction\n        \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n@classmethod\ndef set_high_dpi_scale_factor_rounding_policy(\ncls, policy: constants.HighDpiScaleFactorRoundingPolicyStr\n):\n\"\"\"Set high dpi scale factor rounding policy.\n        Args:\n            policy: rounding policy\n        Raises:\n            InvalidParamError: rounding policy does not exist\n        \"\"\"\nif policy not in constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY:\nraise InvalidParamError(\npolicy, constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY\n)\ncls.setHighDpiScaleFactorRoundingPolicy(\nconstants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY[policy]\n)\n@classmethod\ndef get_high_dpi_scale_factor_rounding_policy(\ncls,\n) -&gt; constants.HighDpiScaleFactorRoundingPolicyStr:\n\"\"\"Get the current high dpi scale factor rounding policy.\n        Returns:\n            rounding policy\n        \"\"\"\nreturn constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.inverse[\ncls.highDpiScaleFactorRoundingPolicy()\n]\n@classmethod\ndef get_application_state(cls) -&gt; list[constants.ApplicationStateStr]:\n\"\"\"Get the current application state.\n        Returns:\n            application state\n        \"\"\"\nreturn [\nk\nfor k, v in constants.APPLICATION_STATES.items()\nif v &amp; cls.applicationState()  # type: ignore\n]\ndef get_primary_screen(self) -&gt; gui.Screen:\nreturn gui.Screen(self.primaryScreen())\ndef get_screen_at(self, point: datatypes.PointType) -&gt; gui.Screen:\nif isinstance(point, tuple):\npoint = QtCore.QPoint(*point)\nreturn gui.Screen(self.screenAt(point))\ndef get_screens(self) -&gt; list[gui.Screen]:\nreturn [gui.Screen(i) for i in self.screens()]\n@classmethod\ndef get_input_method(cls) -&gt; gui.InputMethod:\nreturn gui.InputMethod(cls.inputMethod())\n@classmethod\ndef copy_to_clipboard(cls, text: str):\n\"\"\"Sets clipboard to supplied text.\"\"\"\ncb = cls.clipboard()\ncb.clear(mode=cb.Mode.Clipboard)\ncb.setText(text, mode=cb.Mode.Clipboard)\n@classmethod\ndef get_font(cls) -&gt; gui.Font:\nreturn gui.Font(cls.font())\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the default window icon.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon, color=colors.WINDOW_ICON_COLOR)\nself.setWindowIcon(icon)\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.windowIcon()\nreturn None if icon.isNull() else gui.Icon(self.windowIcon())\n@classmethod\ndef set_palette(cls, palette: constants.ThemeStr | QtGui.QPalette):\nif palette == \"default\":\npal = gui.Palette()\nelif palette == \"dark\":\npal = gui.Palette.create_dark_palette()\nelse:\npal = palette\ncls.setPalette(pal)\n@classmethod\ndef get_keyboard_modifiers(cls) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(cls.keyboardModifiers())\n@classmethod\ndef query_keyboard_modifiers(cls) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(cls.queryKeyboardModifiers())\n@classmethod\ndef get_palette(cls) -&gt; gui.Palette:\nreturn gui.Palette(cls.palette())\ndef set_badge_number(self, number: int | None):\nself.setBadgeNumber(number or 0)\ndef set_progress_value(self, value: int, total: int = 100):\nwindows = self.topLevelWindows()\nif not windows:\nreturn None\nif sys.platform.startswith(\"win\"):\nfrom prettyqt.utils.platforms.windows import taskbaritem\nwindow_id = windows[0].winId()\ntb = taskbaritem.TaskBarItem(window_id)\ntb.set_progress_value(value, total)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.palette_changed","title":"<code>palette_changed = core.Signal(gui.Palette)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.copy_to_clipboard","title":"<code>copy_to_clipboard(text: str)</code>  <code>classmethod</code>","text":"<p>Sets clipboard to supplied text.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef copy_to_clipboard(cls, text: str):\n\"\"\"Sets clipboard to supplied text.\"\"\"\ncb = cls.clipboard()\ncb.clear(mode=cb.Mode.Clipboard)\ncb.setText(text, mode=cb.Mode.Clipboard)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.edit_palette","title":"<code>edit_palette() -&gt; Iterator[gui.Palette]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\n@contextlib.contextmanager\ndef edit_palette(cls) -&gt; Iterator[gui.Palette]:\npalette = gui.Palette(cls.palette())\nyield palette\ncls.setPalette(palette)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.event","title":"<code>event(e)</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def event(self, e):\nmatch e.type():\ncase QtCore.QEvent.Type.ApplicationPaletteChange:\nself.palette_changed.emit(gui.Palette(self.palette()))\nreturn super().event(e)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_application_state","title":"<code>get_application_state() -&gt; list[constants.ApplicationStateStr]</code>  <code>classmethod</code>","text":"<p>Get the current application state.</p> <p>Returns:</p> Type Description <code>list[constants.ApplicationStateStr]</code> <p>application state</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_application_state(cls) -&gt; list[constants.ApplicationStateStr]:\n\"\"\"Get the current application state.\n    Returns:\n        application state\n    \"\"\"\nreturn [\nk\nfor k, v in constants.APPLICATION_STATES.items()\nif v &amp; cls.applicationState()  # type: ignore\n]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_clipboard","title":"<code>get_clipboard() -&gt; gui.Clipboard</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_clipboard(cls) -&gt; gui.Clipboard:\nreturn gui.Clipboard(cls.clipboard())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_font","title":"<code>get_font() -&gt; gui.Font</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_font(cls) -&gt; gui.Font:\nreturn gui.Font(cls.font())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_high_dpi_scale_factor_rounding_policy","title":"<code>get_high_dpi_scale_factor_rounding_policy() -&gt; constants.HighDpiScaleFactorRoundingPolicyStr</code>  <code>classmethod</code>","text":"<p>Get the current high dpi scale factor rounding policy.</p> <p>Returns:</p> Type Description <code>constants.HighDpiScaleFactorRoundingPolicyStr</code> <p>rounding policy</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_high_dpi_scale_factor_rounding_policy(\ncls,\n) -&gt; constants.HighDpiScaleFactorRoundingPolicyStr:\n\"\"\"Get the current high dpi scale factor rounding policy.\n    Returns:\n        rounding policy\n    \"\"\"\nreturn constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.inverse[\ncls.highDpiScaleFactorRoundingPolicy()\n]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.windowIcon()\nreturn None if icon.isNull() else gui.Icon(self.windowIcon())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_input_method","title":"<code>get_input_method() -&gt; gui.InputMethod</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_input_method(cls) -&gt; gui.InputMethod:\nreturn gui.InputMethod(cls.inputMethod())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_keyboard_modifiers","title":"<code>get_keyboard_modifiers() -&gt; list[constants.KeyboardModifierStr]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_keyboard_modifiers(cls) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(cls.keyboardModifiers())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> <p>Returns:</p> Type Description <code>constants.LayoutDirectionStr</code> <p>layout direction</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_palette","title":"<code>get_palette() -&gt; gui.Palette</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_palette(cls) -&gt; gui.Palette:\nreturn gui.Palette(cls.palette())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_primary_screen","title":"<code>get_primary_screen() -&gt; gui.Screen</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_primary_screen(self) -&gt; gui.Screen:\nreturn gui.Screen(self.primaryScreen())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_screen_at","title":"<code>get_screen_at(point: datatypes.PointType) -&gt; gui.Screen</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_screen_at(self, point: datatypes.PointType) -&gt; gui.Screen:\nif isinstance(point, tuple):\npoint = QtCore.QPoint(*point)\nreturn gui.Screen(self.screenAt(point))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_screens","title":"<code>get_screens() -&gt; list[gui.Screen]</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_screens(self) -&gt; list[gui.Screen]:\nreturn [gui.Screen(i) for i in self.screens()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.override_cursor","title":"<code>override_cursor(cursor: constants.CursorShapeStr)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\n@contextlib.contextmanager\ndef override_cursor(cls, cursor: constants.CursorShapeStr):\ncls.set_override_cursor(cursor)\nyield cursor\ncls.restore_override_cursor()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.query_keyboard_modifiers","title":"<code>query_keyboard_modifiers() -&gt; list[constants.KeyboardModifierStr]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef query_keyboard_modifiers(cls) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(cls.queryKeyboardModifiers())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.restore_override_cursor","title":"<code>restore_override_cursor()</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef restore_override_cursor(cls):\ncls.restoreOverrideCursor()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def serialize_fields(self):\nreturn dict(icon=self.get_icon())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_badge_number","title":"<code>set_badge_number(number: int | None)</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_badge_number(self, number: int | None):\nself.setBadgeNumber(number or 0)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_high_dpi_scale_factor_rounding_policy","title":"<code>set_high_dpi_scale_factor_rounding_policy(policy: constants.HighDpiScaleFactorRoundingPolicyStr)</code>  <code>classmethod</code>","text":"<p>Set high dpi scale factor rounding policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.HighDpiScaleFactorRoundingPolicyStr</code> <p>rounding policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>rounding policy does not exist</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef set_high_dpi_scale_factor_rounding_policy(\ncls, policy: constants.HighDpiScaleFactorRoundingPolicyStr\n):\n\"\"\"Set high dpi scale factor rounding policy.\n    Args:\n        policy: rounding policy\n    Raises:\n        InvalidParamError: rounding policy does not exist\n    \"\"\"\nif policy not in constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY:\nraise InvalidParamError(\npolicy, constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY\n)\ncls.setHighDpiScaleFactorRoundingPolicy(\nconstants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY[policy]\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the default window icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the default window icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon, color=colors.WINDOW_ICON_COLOR)\nself.setWindowIcon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr</code> <p>layout direction</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>layout direction does not exist</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_layout_direction(self, direction: constants.LayoutDirectionStr):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    Raises:\n        InvalidParamError: layout direction does not exist\n    \"\"\"\nif direction not in constants.LAYOUT_DIRECTION:\nraise InvalidParamError(direction, constants.LAYOUT_DIRECTION)\nself.setLayoutDirection(constants.LAYOUT_DIRECTION[direction])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_override_cursor","title":"<code>set_override_cursor(cursor: constants.CursorShapeStr)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef set_override_cursor(cls, cursor: constants.CursorShapeStr):\ncrs = gui.Cursor(constants.CURSOR_SHAPE[cursor])\ncls.setOverrideCursor(crs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_palette","title":"<code>set_palette(palette: constants.ThemeStr | QtGui.QPalette)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef set_palette(cls, palette: constants.ThemeStr | QtGui.QPalette):\nif palette == \"default\":\npal = gui.Palette()\nelif palette == \"dark\":\npal = gui.Palette.create_dark_palette()\nelse:\npal = palette\ncls.setPalette(pal)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_progress_value","title":"<code>set_progress_value(value: int, total: int = 100)</code>","text":"Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_progress_value(self, value: int, total: int = 100):\nwindows = self.topLevelWindows()\nif not windows:\nreturn None\nif sys.platform.startswith(\"win\"):\nfrom prettyqt.utils.platforms.windows import taskbaritem\nwindow_id = windows[0].winId()\ntb = taskbaritem.TaskBarItem(window_id)\ntb.set_progress_value(value, total)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Icon","title":"<code>Icon</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QIcon</code></p> Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>class Icon(serializemixin.SerializeMixin, QtGui.QIcon):\ndef __repr__(self):\nreturn get_repr(self)\ndef __bool__(self):\nreturn not self.isNull()\ndef __getstate__(self):\npixmap = self.pixmap(256, 256)\nreturn bytes(gui.Pixmap(pixmap))\ndef __setstate__(self, ba):\npx = gui.Pixmap()\npx.__setstate__(ba)\nself.add_pixmap(px)\n@classmethod\ndef for_color(cls, color_str: str) -&gt; Self:\ncolor = gui.Color.from_text(color_str)\nif not color.isValid():\nraise TypeError()\nbitmap = gui.Pixmap(16, 16)\nbitmap.fill(color)\nreturn cls(bitmap)\n@classmethod\ndef from_char(cls, char: str, background=\"black\", color=\"white\") -&gt; Self:\n\"\"\"Create a QIcon with a given character.\"\"\"\nicon = cls()\nfor size in (16, 32, 64):\npx = gui.Pixmap.create_char(\nchar, background=background, color=color, size=size\n)\nicon.addPixmap(px)\nreturn icon\n@classmethod\ndef from_image(cls, image: QtGui.QImage) -&gt; Self:\nreturn cls(gui.Pixmap.fromImage(image))\ndef get_available_sizes(\nself, mode: ModeStr = \"normal\", state: StateStr = \"off\"\n) -&gt; list[core.Size]:\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nreturn [core.Size(i) for i in self.availableSizes(MODE[mode], STATE[state])]\ndef add_pixmap(\nself,\ndata: QtCore.QByteArray | QtGui.QPixmap | bytes,\nmode: ModeStr = \"normal\",\nstate: StateStr = \"off\",\n):\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nif isinstance(data, bytes):\ndata = QtCore.QByteArray(data)\nif isinstance(data, QtCore.QByteArray):\npixmap = QtGui.QPixmap()\npixmap.loadFromData(data)\nelse:\npixmap = data\nself.addPixmap(pixmap, MODE[mode], STATE[state])\ndef get_pixmap(\nself,\nsize: datatypes.SizeType | int,\nmode: ModeStr = \"normal\",\nstate: StateStr = \"off\",\n) -&gt; QtGui.QPixmap:\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nreturn self.pixmap(size, MODE[mode], STATE[state])\ndef get_actual_size(\nself,\nsize: datatypes.SizeType | int,\nmode: ModeStr = \"normal\",\nstate: StateStr = \"off\",\n) -&gt; core.Size:\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nreturn core.Size(self.actualSize(size, MODE[mode], STATE[state]))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def __getstate__(self):\npixmap = self.pixmap(256, 256)\nreturn bytes(gui.Pixmap(pixmap))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.__setstate__","title":"<code>__setstate__(ba)</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def __setstate__(self, ba):\npx = gui.Pixmap()\npx.__setstate__(ba)\nself.add_pixmap(px)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.add_pixmap","title":"<code>add_pixmap(data: QtCore.QByteArray | QtGui.QPixmap | bytes, mode: ModeStr = 'normal', state: StateStr = 'off')</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def add_pixmap(\nself,\ndata: QtCore.QByteArray | QtGui.QPixmap | bytes,\nmode: ModeStr = \"normal\",\nstate: StateStr = \"off\",\n):\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nif isinstance(data, bytes):\ndata = QtCore.QByteArray(data)\nif isinstance(data, QtCore.QByteArray):\npixmap = QtGui.QPixmap()\npixmap.loadFromData(data)\nelse:\npixmap = data\nself.addPixmap(pixmap, MODE[mode], STATE[state])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.for_color","title":"<code>for_color(color_str: str) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>@classmethod\ndef for_color(cls, color_str: str) -&gt; Self:\ncolor = gui.Color.from_text(color_str)\nif not color.isValid():\nraise TypeError()\nbitmap = gui.Pixmap(16, 16)\nbitmap.fill(color)\nreturn cls(bitmap)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.from_char","title":"<code>from_char(char: str, background: str = 'black', color: str = 'white') -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a QIcon with a given character.</p> Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>@classmethod\ndef from_char(cls, char: str, background=\"black\", color=\"white\") -&gt; Self:\n\"\"\"Create a QIcon with a given character.\"\"\"\nicon = cls()\nfor size in (16, 32, 64):\npx = gui.Pixmap.create_char(\nchar, background=background, color=color, size=size\n)\nicon.addPixmap(px)\nreturn icon\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.from_image","title":"<code>from_image(image: QtGui.QImage) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>@classmethod\ndef from_image(cls, image: QtGui.QImage) -&gt; Self:\nreturn cls(gui.Pixmap.fromImage(image))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.get_actual_size","title":"<code>get_actual_size(size: datatypes.SizeType | int, mode: ModeStr = 'normal', state: StateStr = 'off') -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def get_actual_size(\nself,\nsize: datatypes.SizeType | int,\nmode: ModeStr = \"normal\",\nstate: StateStr = \"off\",\n) -&gt; core.Size:\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nreturn core.Size(self.actualSize(size, MODE[mode], STATE[state]))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.get_available_sizes","title":"<code>get_available_sizes(mode: ModeStr = 'normal', state: StateStr = 'off') -&gt; list[core.Size]</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def get_available_sizes(\nself, mode: ModeStr = \"normal\", state: StateStr = \"off\"\n) -&gt; list[core.Size]:\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nreturn [core.Size(i) for i in self.availableSizes(MODE[mode], STATE[state])]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.icon.Icon.get_pixmap","title":"<code>get_pixmap(size: datatypes.SizeType | int, mode: ModeStr = 'normal', state: StateStr = 'off') -&gt; QtGui.QPixmap</code>","text":"Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>def get_pixmap(\nself,\nsize: datatypes.SizeType | int,\nmode: ModeStr = \"normal\",\nstate: StateStr = \"off\",\n) -&gt; QtGui.QPixmap:\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nif state not in STATE:\nraise InvalidParamError(state, STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nreturn self.pixmap(size, MODE[mode], STATE[state])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.IconEngine","title":"<code>IconEngine</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QIconEngine</code></p> Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>class IconEngine(serializemixin.SerializeMixin, QtGui.QIconEngine):\ndef __repr__(self):\nreturn get_repr(self)\ndef __bool__(self):\nreturn not self.isNull()\ndef add_file(\nself,\npath: datatypes.PathType,\nsize: datatypes.SizeType | int,\nmode: gui.icon.ModeStr,\nstate: gui.icon.StateStr,\n):\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nself.addFile(os.fspath(path), size, gui.icon.MODE[mode], gui.icon.STATE[state])\ndef add_pixmap(\nself,\npixmap: QtGui.QPixmap,\nmode: gui.icon.ModeStr,\nstate: gui.icon.StateStr,\n):\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nself.addPixmap(pixmap, gui.icon.MODE[mode], gui.icon.STATE[state])\ndef get_actual_size(\nself,\nsize: datatypes.SizeType | int,\nmode: gui.icon.ModeStr = \"normal\",\nstate: gui.icon.StateStr = \"off\",\n) -&gt; core.Size:\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nreturn core.Size(\nself.actualSize(size, gui.icon.MODE[mode], gui.icon.STATE[state])\n)\ndef get_available_sizes(\nself, mode: gui.icon.ModeStr = \"normal\", state: gui.icon.StateStr = \"off\"\n) -&gt; list[core.Size]:\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nreturn [\ncore.Size(i)\nfor i in self.availableSizes(gui.icon.MODE[mode], gui.icon.STATE[state])\n]\ndef get_pixmap(\nself,\nsize: datatypes.SizeType | int,\nmode: gui.icon.ModeStr = \"normal\",\nstate: gui.icon.StateStr = \"off\",\nscale: float | None = None,\n) -&gt; gui.Pixmap:\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nif scale is None:\nreturn gui.Pixmap(\nself.pixmap(size, gui.icon.MODE[mode], gui.icon.STATE[state])\n)\nelse:\nreturn gui.Pixmap(\nself.scaledPixmap(size, gui.icon.MODE[mode], gui.icon.STATE[state], scale)\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.add_file","title":"<code>add_file(path: datatypes.PathType, size: datatypes.SizeType | int, mode: gui.icon.ModeStr, state: gui.icon.StateStr)</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def add_file(\nself,\npath: datatypes.PathType,\nsize: datatypes.SizeType | int,\nmode: gui.icon.ModeStr,\nstate: gui.icon.StateStr,\n):\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nself.addFile(os.fspath(path), size, gui.icon.MODE[mode], gui.icon.STATE[state])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.add_pixmap","title":"<code>add_pixmap(pixmap: QtGui.QPixmap, mode: gui.icon.ModeStr, state: gui.icon.StateStr)</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def add_pixmap(\nself,\npixmap: QtGui.QPixmap,\nmode: gui.icon.ModeStr,\nstate: gui.icon.StateStr,\n):\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nself.addPixmap(pixmap, gui.icon.MODE[mode], gui.icon.STATE[state])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.get_actual_size","title":"<code>get_actual_size(size: datatypes.SizeType | int, mode: gui.icon.ModeStr = 'normal', state: gui.icon.StateStr = 'off') -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def get_actual_size(\nself,\nsize: datatypes.SizeType | int,\nmode: gui.icon.ModeStr = \"normal\",\nstate: gui.icon.StateStr = \"off\",\n) -&gt; core.Size:\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nreturn core.Size(\nself.actualSize(size, gui.icon.MODE[mode], gui.icon.STATE[state])\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.get_available_sizes","title":"<code>get_available_sizes(mode: gui.icon.ModeStr = 'normal', state: gui.icon.StateStr = 'off') -&gt; list[core.Size]</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def get_available_sizes(\nself, mode: gui.icon.ModeStr = \"normal\", state: gui.icon.StateStr = \"off\"\n) -&gt; list[core.Size]:\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nreturn [\ncore.Size(i)\nfor i in self.availableSizes(gui.icon.MODE[mode], gui.icon.STATE[state])\n]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.iconengine.IconEngine.get_pixmap","title":"<code>get_pixmap(size: datatypes.SizeType | int, mode: gui.icon.ModeStr = 'normal', state: gui.icon.StateStr = 'off', scale: float | None = None) -&gt; gui.Pixmap</code>","text":"Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>def get_pixmap(\nself,\nsize: datatypes.SizeType | int,\nmode: gui.icon.ModeStr = \"normal\",\nstate: gui.icon.StateStr = \"off\",\nscale: float | None = None,\n) -&gt; gui.Pixmap:\nif mode not in gui.icon.MODE:\nraise InvalidParamError(mode, gui.icon.MODE)\nif state not in gui.icon.STATE:\nraise InvalidParamError(state, gui.icon.STATE)\nif isinstance(size, tuple):\nsize = core.Size(*size)\nelif isinstance(size, int):\nsize = core.Size(size, size)\nif scale is None:\nreturn gui.Pixmap(\nself.pixmap(size, gui.icon.MODE[mode], gui.icon.STATE[state])\n)\nelse:\nreturn gui.Pixmap(\nself.scaledPixmap(size, gui.icon.MODE[mode], gui.icon.STATE[state], scale)\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Image","title":"<code>Image</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code>, <code>QtGui.QImage</code></p> Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>class Image(serializemixin.SerializeMixin, gui.PaintDeviceMixin, QtGui.QImage):\ndef __setitem__(self, index: tuple[int, int], value):\nself.setPixel(index[0], index[1], value)\ndef __getitem__(self, index: tuple[int, int]) -&gt; int:\nreturn self.pixel(index[0], index[1])\n@classmethod\ndef from_ndarray(cls, arr) -&gt; Self:\nimport numpy as np\nheight, width, bytes_per_component = arr.shape\nif arr.dtype in {np.float32, np.float64}:\narr = (255 * arr).round()\narr = arr.astype(np.uint8)\nreturn cls(\narr.data,\nwidth,\nheight,\nbytes_per_component * width,\nQtGui.QImage.Format.Format_RGB888,\n)\ndef to_ndarray(self, fmt: FormatStr = \"rgb888\", channels: int = 3):\nimport numpy as np\nqimage = self.convert_to_format(fmt)\nwidth = qimage.width()\nheight = qimage.height()\nptr = qimage.constBits()\narray = np.array(ptr).reshape(height, width, channels)  # Copies the data\nreturn array\n@classmethod\ndef from_pil(cls, image) -&gt; Self:\n# from https://github.com/python-pillow/Pillow/blob/main/src/PIL/ImageQt.py\nfrom PIL import ImageQt\ndata = ImageQt._toqclass_helper(image)\nimg = cls(data[\"data\"], data[\"size\"][0], data[\"size\"][1], data[\"format\"])\nif data[\"colortable\"]:\nimg.setColorTable(data[\"colortable\"])\nimg.__data = data[\"data\"]\nreturn img\n@classmethod\ndef for_mimetype(cls, path: os.PathLike) -&gt; Self | None:\n\"\"\"Try to create an icon from theme using the file mimetype.\n        E.g.::\n            return self.mimetype_icon(\n                path, fallback=':/icons/text-x-python.png')\n        :param path: file path for which the icon must be created\n        :param fallback: fallback icon path (qrc or file system)\n        :returns: QIcon or None if the file mimetype icon could not be found.\n        \"\"\"\npath = os.fspath(path)\nif mime := mimetypes.guess_type(path)[0]:\nicon = mime.replace(\"/\", \"-\")\n# if system.WINDOWS:\n#     return icons.file()\nif cls.hasThemeIcon(icon):\nicon = cls(cls.fromTheme(icon))\nif not icon.isNull():\nreturn icon\nreturn None  #  gui.Icon.fromTheme(\"text-x-generic\")\ndef to_pil(self) -&gt; Image:\nfrom PIL import Image as PILImage\nbuffer = core.Buffer()\nbuffer.open(core.Buffer.OpenModeFlag.ReadWrite)\nself.save(buffer, \"PNG\")\nreturn PILImage.open(io.BytesIO(buffer.data()))\ndef invert_pixels(self, invert_alpha: bool = False):\nself.invertPixels(\nQtGui.QImage.InvertMode.InvertRgba\nif invert_alpha\nelse QtGui.QImage.InvertMode.InvertRgb\n)\ndef convert_to_format(self, fmt: FormatStr):\nif fmt not in FORMAT:\nraise InvalidParamError(fmt, FORMAT)\nself.convertToFormat(FORMAT[fmt])\ndef as_bytes(self) -&gt; bytes | None:\nbits = self.bits()\nif bits is None:\nreturn None\nmatch API:\ncase \"pyqt6\":\nreturn bits.asstring(self.sizeInBytes())\ncase \"pyside6\":\nreturn bits.tobytes()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.__getitem__","title":"<code>__getitem__(index: tuple[int, int]) -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def __getitem__(self, index: tuple[int, int]) -&gt; int:\nreturn self.pixel(index[0], index[1])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.__setitem__","title":"<code>__setitem__(index: tuple[int, int], value: tuple[int, int])</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def __setitem__(self, index: tuple[int, int], value):\nself.setPixel(index[0], index[1], value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.as_bytes","title":"<code>as_bytes() -&gt; bytes | None</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def as_bytes(self) -&gt; bytes | None:\nbits = self.bits()\nif bits is None:\nreturn None\nmatch API:\ncase \"pyqt6\":\nreturn bits.asstring(self.sizeInBytes())\ncase \"pyside6\":\nreturn bits.tobytes()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.convert_to_format","title":"<code>convert_to_format(fmt: FormatStr)</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def convert_to_format(self, fmt: FormatStr):\nif fmt not in FORMAT:\nraise InvalidParamError(fmt, FORMAT)\nself.convertToFormat(FORMAT[fmt])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.for_mimetype","title":"<code>for_mimetype(path: os.PathLike) -&gt; Self | None</code>  <code>classmethod</code>","text":"<p>Try to create an icon from theme using the file mimetype.</p> <p>E.g.::</p> <pre><code>return self.mimetype_icon(\npath, fallback=':/icons/text-x-python.png')\n</code></pre> <p>:param path: file path for which the icon must be created :param fallback: fallback icon path (qrc or file system) :returns: QIcon or None if the file mimetype icon could not be found.</p> Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>@classmethod\ndef for_mimetype(cls, path: os.PathLike) -&gt; Self | None:\n\"\"\"Try to create an icon from theme using the file mimetype.\n    E.g.::\n        return self.mimetype_icon(\n            path, fallback=':/icons/text-x-python.png')\n    :param path: file path for which the icon must be created\n    :param fallback: fallback icon path (qrc or file system)\n    :returns: QIcon or None if the file mimetype icon could not be found.\n    \"\"\"\npath = os.fspath(path)\nif mime := mimetypes.guess_type(path)[0]:\nicon = mime.replace(\"/\", \"-\")\n# if system.WINDOWS:\n#     return icons.file()\nif cls.hasThemeIcon(icon):\nicon = cls(cls.fromTheme(icon))\nif not icon.isNull():\nreturn icon\nreturn None  #  gui.Icon.fromTheme(\"text-x-generic\")\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.from_ndarray","title":"<code>from_ndarray(arr) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>@classmethod\ndef from_ndarray(cls, arr) -&gt; Self:\nimport numpy as np\nheight, width, bytes_per_component = arr.shape\nif arr.dtype in {np.float32, np.float64}:\narr = (255 * arr).round()\narr = arr.astype(np.uint8)\nreturn cls(\narr.data,\nwidth,\nheight,\nbytes_per_component * width,\nQtGui.QImage.Format.Format_RGB888,\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.from_pil","title":"<code>from_pil(image) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>@classmethod\ndef from_pil(cls, image) -&gt; Self:\n# from https://github.com/python-pillow/Pillow/blob/main/src/PIL/ImageQt.py\nfrom PIL import ImageQt\ndata = ImageQt._toqclass_helper(image)\nimg = cls(data[\"data\"], data[\"size\"][0], data[\"size\"][1], data[\"format\"])\nif data[\"colortable\"]:\nimg.setColorTable(data[\"colortable\"])\nimg.__data = data[\"data\"]\nreturn img\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.invert_pixels","title":"<code>invert_pixels(invert_alpha: bool = False)</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def invert_pixels(self, invert_alpha: bool = False):\nself.invertPixels(\nQtGui.QImage.InvertMode.InvertRgba\nif invert_alpha\nelse QtGui.QImage.InvertMode.InvertRgb\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.to_ndarray","title":"<code>to_ndarray(fmt: FormatStr = 'rgb888', channels: int = 3)</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def to_ndarray(self, fmt: FormatStr = \"rgb888\", channels: int = 3):\nimport numpy as np\nqimage = self.convert_to_format(fmt)\nwidth = qimage.width()\nheight = qimage.height()\nptr = qimage.constBits()\narray = np.array(ptr).reshape(height, width, channels)  # Copies the data\nreturn array\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.image.Image.to_pil","title":"<code>to_pil() -&gt; Image</code>","text":"Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>def to_pil(self) -&gt; Image:\nfrom PIL import Image as PILImage\nbuffer = core.Buffer()\nbuffer.open(core.Buffer.OpenModeFlag.ReadWrite)\nself.save(buffer, \"PNG\")\nreturn PILImage.open(io.BytesIO(buffer.data()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ImageIOHandler","title":"<code>ImageIOHandler</code>","text":"<p>         Bases: <code>mod</code></p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>class ImageIOHandler(mod):\ndef __getitem__(self, key: ImageOptionStr) -&gt; datatypes.Variant:\nreturn self.get_option(key)\ndef __setitem__(self, key: ImageOptionStr, value: datatypes.Variant):\nself.set_option(key, value)\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\ndef set_option(self, option: ImageOptionStr, value: datatypes.Variant):\n\"\"\"Set option to given value.\n        Args:\n            option: option to use\n            value: value to set\n        Raises:\n            InvalidParamError: option does not exist\n        \"\"\"\nif option not in IMAGE_OPTION:\nraise InvalidParamError(option, IMAGE_OPTION)\nself.setOption(IMAGE_OPTION[option], value)\ndef get_option(self, option: ImageOptionStr) -&gt; datatypes.Variant:\n\"\"\"Return the value assigned to option.\n        Args:\n            option: option to get\n        Returns:\n            option\n        \"\"\"\nif option not in IMAGE_OPTION:\nraise InvalidParamError(option, IMAGE_OPTION)\nreturn self.option(IMAGE_OPTION[option])\ndef supports_option(self, option: ImageOptionStr) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n        Args:\n            option: option to check\n        Returns:\n            option\n        \"\"\"\nif option not in IMAGE_OPTION:\nraise InvalidParamError(option, IMAGE_OPTION)\nreturn self.supportsOption(IMAGE_OPTION[option])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.__getitem__","title":"<code>__getitem__(key: ImageOptionStr) -&gt; datatypes.Variant</code>","text":"Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def __getitem__(self, key: ImageOptionStr) -&gt; datatypes.Variant:\nreturn self.get_option(key)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.__setitem__","title":"<code>__setitem__(key: ImageOptionStr, value: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def __setitem__(self, key: ImageOptionStr, value: datatypes.Variant):\nself.set_option(key, value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.get_format","title":"<code>get_format() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def get_format(self) -&gt; str:\nreturn self.format().data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.get_option","title":"<code>get_option(option: ImageOptionStr) -&gt; datatypes.Variant</code>","text":"<p>Return the value assigned to option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr</code> <p>option to get</p> required <p>Returns:</p> Type Description <code>datatypes.Variant</code> <p>option</p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def get_option(self, option: ImageOptionStr) -&gt; datatypes.Variant:\n\"\"\"Return the value assigned to option.\n    Args:\n        option: option to get\n    Returns:\n        option\n    \"\"\"\nif option not in IMAGE_OPTION:\nraise InvalidParamError(option, IMAGE_OPTION)\nreturn self.option(IMAGE_OPTION[option])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.set_option","title":"<code>set_option(option: ImageOptionStr, value: datatypes.Variant)</code>","text":"<p>Set option to given value.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr</code> <p>option to use</p> required <code>value</code> <code>datatypes.Variant</code> <p>value to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>option does not exist</p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def set_option(self, option: ImageOptionStr, value: datatypes.Variant):\n\"\"\"Set option to given value.\n    Args:\n        option: option to use\n        value: value to set\n    Raises:\n        InvalidParamError: option does not exist\n    \"\"\"\nif option not in IMAGE_OPTION:\nraise InvalidParamError(option, IMAGE_OPTION)\nself.setOption(IMAGE_OPTION[option], value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imageiohandler.ImageIOHandler.supports_option","title":"<code>supports_option(option: ImageOptionStr) -&gt; bool</code>","text":"<p>Return whether the image handler supports given option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr</code> <p>option to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>option</p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def supports_option(self, option: ImageOptionStr) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n    Args:\n        option: option to check\n    Returns:\n        option\n    \"\"\"\nif option not in IMAGE_OPTION:\nraise InvalidParamError(option, IMAGE_OPTION)\nreturn self.supportsOption(IMAGE_OPTION[option])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ImageReader","title":"<code>ImageReader</code>","text":"<p>         Bases: <code>QtGui.QImageReader</code></p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>class ImageReader(QtGui.QImageReader):\ndef __getitem__(self, key: str) -&gt; str:\nreturn self.text(key)\ndef get_error(self) -&gt; ImageReaderErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn IMAGE_READER_ERROR.inverse[self.error()]\ndef get_background_color(self) -&gt; gui.Color:\nreturn gui.Color(self.backgroundColor())\ndef get_clip_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.clipRect())\ndef get_current_image_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.currentImageRect())\ndef get_scaled_clip_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.scaledClipRect())\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef get_scaled_size(self) -&gt; core.Size:\nreturn core.Size(self.scaledSize())\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\ndef get_subtype(self) -&gt; str:\nreturn self.subType().data().decode()\ndef get_supported_subtypes(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedSubTypes()]\ndef set_format(self, fmt: datatypes.ByteArrayType):\nif isinstance(fmt, str):\nfmt = fmt.encode()\nif isinstance(fmt, bytes):\nfmt = QtCore.QByteArray(fmt)\nself.setFormat(fmt)\ndef get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n        Returns:\n            transformation\n        \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\ndef read_image(self) -&gt; gui.Image:\nreturn gui.Image(self.read())\ndef supports_option(self, option: gui.imageiohandler.ImageOptionStr) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n        Args:\n            option: option to check\n        Returns:\n            option\n        \"\"\"\nif option not in gui.imageiohandler.IMAGE_OPTION:\nraise InvalidParamError(option, gui.imageiohandler.IMAGE_OPTION)\nreturn self.supportsOption(gui.imageiohandler.IMAGE_OPTION[option])\n@staticmethod\ndef get_image_format(obj: str | QtCore.QIODevice) -&gt; str:\nreturn ImageReader.imageFormat(obj).data().decode()\n@staticmethod\ndef get_supported_image_formats() -&gt; list[str]:\nreturn [i.data().decode() for i in ImageReader.supportedImageFormats()]\n@staticmethod\ndef get_supported_mime_types() -&gt; list[str]:\nreturn [i.data().decode() for i in ImageReader.supportedMimeTypes()]\n@staticmethod\ndef get_image_formats_for_mime_type(typ: datatypes.ByteArrayType) -&gt; list[str]:\nif isinstance(typ, str):\ntyp = typ.encode()\nif isinstance(typ, bytes):\ntyp = QtCore.QByteArray(typ)\nreturn [i.data().decode() for i in ImageReader.imageFormatsForMimeType(typ)]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.__getitem__","title":"<code>__getitem__(key: str) -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def __getitem__(self, key: str) -&gt; str:\nreturn self.text(key)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_background_color","title":"<code>get_background_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_background_color(self) -&gt; gui.Color:\nreturn gui.Color(self.backgroundColor())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_clip_rect","title":"<code>get_clip_rect() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_clip_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.clipRect())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_current_image_rect","title":"<code>get_current_image_rect() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_current_image_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.currentImageRect())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_error","title":"<code>get_error() -&gt; ImageReaderErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ImageReaderErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_error(self) -&gt; ImageReaderErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn IMAGE_READER_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_format","title":"<code>get_format() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_format(self) -&gt; str:\nreturn self.format().data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_image_format","title":"<code>get_image_format(obj: str | QtCore.QIODevice) -&gt; str</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>@staticmethod\ndef get_image_format(obj: str | QtCore.QIODevice) -&gt; str:\nreturn ImageReader.imageFormat(obj).data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_image_formats_for_mime_type","title":"<code>get_image_formats_for_mime_type(typ: datatypes.ByteArrayType) -&gt; list[str]</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>@staticmethod\ndef get_image_formats_for_mime_type(typ: datatypes.ByteArrayType) -&gt; list[str]:\nif isinstance(typ, str):\ntyp = typ.encode()\nif isinstance(typ, bytes):\ntyp = QtCore.QByteArray(typ)\nreturn [i.data().decode() for i in ImageReader.imageFormatsForMimeType(typ)]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_scaled_clip_rect","title":"<code>get_scaled_clip_rect() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_scaled_clip_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.scaledClipRect())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_scaled_size","title":"<code>get_scaled_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_scaled_size(self) -&gt; core.Size:\nreturn core.Size(self.scaledSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_size","title":"<code>get_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_subtype","title":"<code>get_subtype() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_subtype(self) -&gt; str:\nreturn self.subType().data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_supported_image_formats","title":"<code>get_supported_image_formats() -&gt; list[str]</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>@staticmethod\ndef get_supported_image_formats() -&gt; list[str]:\nreturn [i.data().decode() for i in ImageReader.supportedImageFormats()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_supported_mime_types","title":"<code>get_supported_mime_types() -&gt; list[str]</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>@staticmethod\ndef get_supported_mime_types() -&gt; list[str]:\nreturn [i.data().decode() for i in ImageReader.supportedMimeTypes()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_supported_subtypes","title":"<code>get_supported_subtypes() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_supported_subtypes(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedSubTypes()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.get_transformation","title":"<code>get_transformation() -&gt; gui.imageiohandler.TransformationStr</code>","text":"<p>Return the transformation and orientation the image has been set to.</p> <p>Returns:</p> Type Description <code>gui.imageiohandler.TransformationStr</code> <p>transformation</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n    Returns:\n        transformation\n    \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.read_image","title":"<code>read_image() -&gt; gui.Image</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def read_image(self) -&gt; gui.Image:\nreturn gui.Image(self.read())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.set_format","title":"<code>set_format(fmt: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def set_format(self, fmt: datatypes.ByteArrayType):\nif isinstance(fmt, str):\nfmt = fmt.encode()\nif isinstance(fmt, bytes):\nfmt = QtCore.QByteArray(fmt)\nself.setFormat(fmt)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagereader.ImageReader.supports_option","title":"<code>supports_option(option: gui.imageiohandler.ImageOptionStr) -&gt; bool</code>","text":"<p>Return whether the image handler supports given option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>gui.imageiohandler.ImageOptionStr</code> <p>option to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>option</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def supports_option(self, option: gui.imageiohandler.ImageOptionStr) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n    Args:\n        option: option to check\n    Returns:\n        option\n    \"\"\"\nif option not in gui.imageiohandler.IMAGE_OPTION:\nraise InvalidParamError(option, gui.imageiohandler.IMAGE_OPTION)\nreturn self.supportsOption(gui.imageiohandler.IMAGE_OPTION[option])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ImageWriter","title":"<code>ImageWriter</code>","text":"<p>         Bases: <code>QtGui.QImageWriter</code></p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>class ImageWriter(QtGui.QImageWriter):\ndef __setitem__(self, key: str, val: str):\nself.setText(key, val)\ndef get_error(self) -&gt; ImageWriterErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn IMAGE_WRITER_ERROR.inverse[self.error()]\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\ndef get_subtype(self) -&gt; str:\nreturn self.subType().data().decode()\ndef get_supported_image_formats(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedImageFormats()]\ndef get_supported_subtypes(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedSubTypes()]\ndef set_subtype(self, subtype: datatypes.ByteArrayType):\nif isinstance(subtype, str):\nsubtype = subtype.encode()\nif isinstance(subtype, bytes):\nsubtype = QtCore.QByteArray(subtype)\nself.setSubType(subtype)\ndef set_format(self, fmt: datatypes.ByteArrayType):\nif isinstance(fmt, str):\nfmt = fmt.encode()\nif isinstance(fmt, bytes):\nfmt = QtCore.QByteArray(fmt)\nself.setFormat(fmt)\ndef set_transformation(self, origin: gui.imageiohandler.TransformationStr):\n\"\"\"Set the image transformations metadata including orientation.\n        Args:\n            origin: transformation to use\n        Raises:\n            InvalidParamError: transformation does not exist\n        \"\"\"\nif origin not in gui.imageiohandler.TRANSFORMATION:\nraise InvalidParamError(origin, gui.imageiohandler.TRANSFORMATION)\nself.setTransformation(gui.imageiohandler.TRANSFORMATION[origin])\ndef get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n        Returns:\n            transformation\n        \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.__setitem__","title":"<code>__setitem__(key: str, val: str)</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def __setitem__(self, key: str, val: str):\nself.setText(key, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_error","title":"<code>get_error() -&gt; ImageWriterErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ImageWriterErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_error(self) -&gt; ImageWriterErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn IMAGE_WRITER_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_format","title":"<code>get_format() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_format(self) -&gt; str:\nreturn self.format().data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_subtype","title":"<code>get_subtype() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_subtype(self) -&gt; str:\nreturn self.subType().data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_supported_image_formats","title":"<code>get_supported_image_formats() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_supported_image_formats(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedImageFormats()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_supported_subtypes","title":"<code>get_supported_subtypes() -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_supported_subtypes(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedSubTypes()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.get_transformation","title":"<code>get_transformation() -&gt; gui.imageiohandler.TransformationStr</code>","text":"<p>Return the transformation and orientation the image has been set to.</p> <p>Returns:</p> Type Description <code>gui.imageiohandler.TransformationStr</code> <p>transformation</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n    Returns:\n        transformation\n    \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.set_format","title":"<code>set_format(fmt: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def set_format(self, fmt: datatypes.ByteArrayType):\nif isinstance(fmt, str):\nfmt = fmt.encode()\nif isinstance(fmt, bytes):\nfmt = QtCore.QByteArray(fmt)\nself.setFormat(fmt)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.set_subtype","title":"<code>set_subtype(subtype: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def set_subtype(self, subtype: datatypes.ByteArrayType):\nif isinstance(subtype, str):\nsubtype = subtype.encode()\nif isinstance(subtype, bytes):\nsubtype = QtCore.QByteArray(subtype)\nself.setSubType(subtype)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.imagewriter.ImageWriter.set_transformation","title":"<code>set_transformation(origin: gui.imageiohandler.TransformationStr)</code>","text":"<p>Set the image transformations metadata including orientation.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>gui.imageiohandler.TransformationStr</code> <p>transformation to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>transformation does not exist</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def set_transformation(self, origin: gui.imageiohandler.TransformationStr):\n\"\"\"Set the image transformations metadata including orientation.\n    Args:\n        origin: transformation to use\n    Raises:\n        InvalidParamError: transformation does not exist\n    \"\"\"\nif origin not in gui.imageiohandler.TRANSFORMATION:\nraise InvalidParamError(origin, gui.imageiohandler.TRANSFORMATION)\nself.setTransformation(gui.imageiohandler.TRANSFORMATION[origin])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.InputMethod","title":"<code>InputMethod</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>class InputMethod(core.ObjectMixin):\ndef __init__(self, item: QtGui.QInputMethod):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_anchor_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.anchorRectangle())\ndef get_cursor_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.cursorRectangle())\ndef get_input_item_clip_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.inputItemClipRectangle())\ndef get_input_item_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.inputItemRectangle())\ndef get_keyboard_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.keyboardRectangle())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_input_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.inputDirection()]\n@classmethod\ndef query_focus_object(cls, query: constants.InputMethodQueryStr, argument):\nreturn cls.queryFocusObject(constants.INPUT_METHOD_QUERY[query], argument)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.__init__","title":"<code>__init__(item: QtGui.QInputMethod)</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def __init__(self, item: QtGui.QInputMethod):\nself.item = item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_anchor_rectangle","title":"<code>get_anchor_rectangle() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_anchor_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.anchorRectangle())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_cursor_rectangle","title":"<code>get_cursor_rectangle() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_cursor_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.cursorRectangle())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_input_direction","title":"<code>get_input_direction() -&gt; constants.LayoutDirectionStr</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_input_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.inputDirection()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_input_item_clip_rectangle","title":"<code>get_input_item_clip_rectangle() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_input_item_clip_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.inputItemClipRectangle())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_input_item_rectangle","title":"<code>get_input_item_rectangle() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_input_item_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.inputItemRectangle())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_keyboard_rectangle","title":"<code>get_keyboard_rectangle() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_keyboard_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.keyboardRectangle())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.inputmethod.InputMethod.query_focus_object","title":"<code>query_focus_object(query: constants.InputMethodQueryStr, argument: constants.InputMethodQueryStr)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>@classmethod\ndef query_focus_object(cls, query: constants.InputMethodQueryStr, argument):\nreturn cls.queryFocusObject(constants.INPUT_METHOD_QUERY[query], argument)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.IntValidator","title":"<code>IntValidator</code>","text":"<p>         Bases: <code>gui.ValidatorMixin</code>, <code>QtGui.QIntValidator</code></p> Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>class IntValidator(gui.ValidatorMixin, QtGui.QIntValidator):\ndef __repr__(self):\nreturn get_repr(self, self.bottom(), self.top())\ndef __getstate__(self):\nreturn dict(bottom=self.bottom(), top=self.top())\ndef __reduce__(self):\nreturn type(self), (self.bottom(), self.top()), None\ndef __eq__(self, other: object):\nreturn (\nself.bottom() == other.bottom() and self.top() == other.top()\nif isinstance(other, type(self))\nelse False\n)\ndef set_range(self, lower: int | None, upper: int | None):\nif lower is None:\nlower = 2147483647  # number from docs\nif upper is None:\nupper = 2147483647\nself.setRange(lower, upper)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.intvalidator.IntValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn (\nself.bottom() == other.bottom() and self.top() == other.top()\nif isinstance(other, type(self))\nelse False\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.intvalidator.IntValidator.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>def __getstate__(self):\nreturn dict(bottom=self.bottom(), top=self.top())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.intvalidator.IntValidator.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.bottom(), self.top()), None\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.intvalidator.IntValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.bottom(), self.top())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.intvalidator.IntValidator.set_range","title":"<code>set_range(lower: int | None, upper: int | None)</code>","text":"Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>def set_range(self, lower: int | None, upper: int | None):\nif lower is None:\nlower = 2147483647  # number from docs\nif upper is None:\nupper = 2147483647\nself.setRange(lower, upper)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.KeySequence","title":"<code>KeySequence</code>","text":"<p>         Bases: <code>QtGui.QKeySequence</code></p> Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>class KeySequence(QtGui.QKeySequence):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in STANDARD_KEYS:\nsuper().__init__(STANDARD_KEYS[args[0]])\ncase _:\nsuper().__init__(*args, **kwargs)\ndef __str__(self):\nreturn self.toString()\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __reduce__(self):\nreturn type(self), (self.toString(),)\ndef __format__(self, format_spec: SequenceFormatStr):\nif format_spec in SEQUENCE_FORMAT:\nreturn self.toString(SEQUENCE_FORMAT[format_spec])\nreturn super().__format__(format_spec)\ndef __getitem__(self, item) -&gt; core.KeyCombination:\nitem = super().__getitem__(item)\nreturn core.KeyCombination(item)\n@property\ndef _toString(self):\nreturn self.toString()\n__match_args__ = (\"_toString\",)\ndef get_matches(self, seq: QtGui.QKeySequence | str) -&gt; SequenceMatchStr:\nif isinstance(seq, str):\nseq = KeySequence(seq)\nreturn SEQUENCE_MATCHES.inverse[self.matches(seq)]\n@functools.singledispatchmethod\n@classmethod\ndef to_shortcut_str(cls, key: QtCore.Qt.Key, mod: int = 0) -&gt; str:\nreturn cls(mod | key).toString()\n@to_shortcut_str.register\n@classmethod\ndef _(cls, key: QtCore.QKeyCombination) -&gt; str:\nreturn cls(key).toString()\n@classmethod\ndef get_key_bindings(cls, button) -&gt; list[Self]:\nreturn [cls(i) for i in cls.keyBindings(button)]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__match_args__","title":"<code>__match_args__ = ('_toString')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence._","title":"<code>_(key: QtCore.QKeyCombination) -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>@to_shortcut_str.register\n@classmethod\ndef _(cls, key: QtCore.QKeyCombination) -&gt; str:\nreturn cls(key).toString()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__format__","title":"<code>__format__(format_spec: SequenceFormatStr)</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __format__(self, format_spec: SequenceFormatStr):\nif format_spec in SEQUENCE_FORMAT:\nreturn self.toString(SEQUENCE_FORMAT[format_spec])\nreturn super().__format__(format_spec)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__getitem__","title":"<code>__getitem__(item) -&gt; core.KeyCombination</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __getitem__(self, item) -&gt; core.KeyCombination:\nitem = super().__getitem__(item)\nreturn core.KeyCombination(item)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in STANDARD_KEYS:\nsuper().__init__(STANDARD_KEYS[args[0]])\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.toString(),)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.get_key_bindings","title":"<code>get_key_bindings(button) -&gt; list[Self]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>@classmethod\ndef get_key_bindings(cls, button) -&gt; list[Self]:\nreturn [cls(i) for i in cls.keyBindings(button)]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.get_matches","title":"<code>get_matches(seq: QtGui.QKeySequence | str) -&gt; SequenceMatchStr</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>def get_matches(self, seq: QtGui.QKeySequence | str) -&gt; SequenceMatchStr:\nif isinstance(seq, str):\nseq = KeySequence(seq)\nreturn SEQUENCE_MATCHES.inverse[self.matches(seq)]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.keysequence.KeySequence.to_shortcut_str","title":"<code>to_shortcut_str(key: QtCore.Qt.Key, mod: int = 0) -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>@functools.singledispatchmethod\n@classmethod\ndef to_shortcut_str(cls, key: QtCore.Qt.Key, mod: int = 0) -&gt; str:\nreturn cls(mod | key).toString()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.LinearGradient","title":"<code>LinearGradient</code>","text":"<p>         Bases: <code>gui.GradientMixin</code>, <code>QtGui.QLinearGradient</code></p> Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>class LinearGradient(gui.GradientMixin, QtGui.QLinearGradient):\ndef __repr__(self):\nreturn get_repr(self, self.get_start(), self.get_final_stop())\ndef serialize_fields(self):\nstart = self.start()\nfinal_stop = self.finalStop()\nreturn dict(start=(start[0], start[1]), final_stop=(final_stop[0], final_stop[1]))\ndef get_start(self) -&gt; core.PointF:\nreturn core.PointF(self.start())\ndef get_final_stop(self) -&gt; core.PointF:\nreturn core.PointF(self.finalStop())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.lineargradient.LinearGradient.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_start(), self.get_final_stop())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.lineargradient.LinearGradient.get_final_stop","title":"<code>get_final_stop() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>def get_final_stop(self) -&gt; core.PointF:\nreturn core.PointF(self.finalStop())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.lineargradient.LinearGradient.get_start","title":"<code>get_start() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>def get_start(self) -&gt; core.PointF:\nreturn core.PointF(self.start())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.lineargradient.LinearGradient.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>def serialize_fields(self):\nstart = self.start()\nfinal_stop = self.finalStop()\nreturn dict(start=(start[0], start[1]), final_stop=(final_stop[0], final_stop[1]))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Matrix4x4","title":"<code>Matrix4x4</code>","text":"<p>         Bases: <code>QtGui.QMatrix4x4</code></p> Source code in <code>prettyqt\\gui\\matrix4x4.py</code> <pre><code>class Matrix4x4(QtGui.QMatrix4x4):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Movie","title":"<code>Movie</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtGui.QMovie</code></p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>class Movie(core.ObjectMixin, QtGui.QMovie):\ndef __repr__(self):\nreturn get_repr(self, self.fileName(), self.get_format())\ndef serialize_fields(self):\nreturn dict(\nspeed=self.speed(),\ncache_mode=self.get_cache_mode(),\nscaled_size=self.scaledSize(),\nbackground_color=self.backgroundColor(),\n)\ndef set_cache_mode(self, mode: CacheModeStr):\n\"\"\"Set cache mode.\n        Args:\n            mode: cache mode\n        Raises:\n            InvalidParamError: cache mode does not exist\n        \"\"\"\nif mode not in CACHE_MODE:\nraise InvalidParamError(mode, CACHE_MODE)\nself.setCacheMode(CACHE_MODE[mode])\ndef get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current cache mode.\n        Returns:\n            cache mode\n        \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\ndef get_state(self) -&gt; MovieStateStr:\n\"\"\"Get the current state.\n        Returns:\n            state\n        \"\"\"\nreturn MOVIE_STATE.inverse[self.state()]\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\n@classmethod\ndef get_supported_formats(cls) -&gt; list[str]:\nreturn [i.data().decode() for i in cls.supportedFormats()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.fileName(), self.get_format())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Get the current cache mode.</p> <p>Returns:</p> Type Description <code>CacheModeStr</code> <p>cache mode</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current cache mode.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.get_format","title":"<code>get_format() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_format(self) -&gt; str:\nreturn self.format().data().decode()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.get_state","title":"<code>get_state() -&gt; MovieStateStr</code>","text":"<p>Get the current state.</p> <p>Returns:</p> Type Description <code>MovieStateStr</code> <p>state</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_state(self) -&gt; MovieStateStr:\n\"\"\"Get the current state.\n    Returns:\n        state\n    \"\"\"\nreturn MOVIE_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.get_supported_formats","title":"<code>get_supported_formats() -&gt; list[str]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>@classmethod\ndef get_supported_formats(cls) -&gt; list[str]:\nreturn [i.data().decode() for i in cls.supportedFormats()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nspeed=self.speed(),\ncache_mode=self.get_cache_mode(),\nscaled_size=self.scaledSize(),\nbackground_color=self.backgroundColor(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.movie.Movie.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr)</code>","text":"<p>Set cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr</code> <p>cache mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>cache mode does not exist</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr):\n\"\"\"Set cache mode.\n    Args:\n        mode: cache mode\n    Raises:\n        InvalidParamError: cache mode does not exist\n    \"\"\"\nif mode not in CACHE_MODE:\nraise InvalidParamError(mode, CACHE_MODE)\nself.setCacheMode(CACHE_MODE[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PageLayout","title":"<code>PageLayout</code>","text":"<p>         Bases: <code>QtGui.QPageLayout</code></p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>class PageLayout(QtGui.QPageLayout):\ndef __repr__(self):\nreturn get_repr(self)\ndef serialize_fields(self):\nreturn dict(\nmargins=self.margins(),\nminimum_margins=self.minimumMargins(),\nmode=self.get_mode(),\norientation=self.get_orientation(),\npage_size=self.get_page_size(),\nunits=self.get_units(),\n)\ndef set_units(self, unit: UnitStr):\n\"\"\"Set unit.\n        Args:\n            unit: unit\n        Raises:\n            InvalidParamError: unit does not exist\n        \"\"\"\nif unit not in UNITS:\nraise InvalidParamError(unit, UNITS)\nself.setUnits(UNITS[unit])\ndef get_units(self) -&gt; UnitStr:\n\"\"\"Get the current unit.\n        Returns:\n            unit\n        \"\"\"\nreturn UNITS.inverse[self.units()]\ndef set_mode(self, mode: ModeStr):\n\"\"\"Set mode.\n        Args:\n            mode: mode\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nself.setMode(MODES[mode])\ndef get_mode(self) -&gt; ModeStr:\n\"\"\"Get the current mode.\n        Returns:\n            mode\n        \"\"\"\nreturn MODES.inverse[self.mode()]\ndef set_orientation(self, orientation: OrientationStr):\n\"\"\"Set orientation.\n        Args:\n            orientation: orientation\n        Raises:\n            InvalidParamError: orientation does not exist\n        \"\"\"\nif orientation not in ORIENTATIONS:\nraise InvalidParamError(orientation, ORIENTATIONS)\nself.setOrientation(ORIENTATIONS[orientation])\ndef get_orientation(self) -&gt; OrientationStr:\n\"\"\"Get the current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn ORIENTATIONS.inverse[self.orientation()]\ndef get_page_size(self) -&gt; gui.PageSize:\nreturn gui.PageSize(self.pageSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"<p>Get the current mode.</p> <p>Returns:</p> Type Description <code>ModeStr</code> <p>mode</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\n\"\"\"Get the current mode.\n    Returns:\n        mode\n    \"\"\"\nreturn MODES.inverse[self.mode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_orientation","title":"<code>get_orientation() -&gt; OrientationStr</code>","text":"<p>Get the current orientation.</p> <p>Returns:</p> Type Description <code>OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_orientation(self) -&gt; OrientationStr:\n\"\"\"Get the current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn ORIENTATIONS.inverse[self.orientation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_page_size","title":"<code>get_page_size() -&gt; gui.PageSize</code>","text":"Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_page_size(self) -&gt; gui.PageSize:\nreturn gui.PageSize(self.pageSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.get_units","title":"<code>get_units() -&gt; UnitStr</code>","text":"<p>Get the current unit.</p> <p>Returns:</p> Type Description <code>UnitStr</code> <p>unit</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_units(self) -&gt; UnitStr:\n\"\"\"Get the current unit.\n    Returns:\n        unit\n    \"\"\"\nreturn UNITS.inverse[self.units()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nmargins=self.margins(),\nminimum_margins=self.minimumMargins(),\nmode=self.get_mode(),\norientation=self.get_orientation(),\npage_size=self.get_page_size(),\nunits=self.get_units(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.set_mode","title":"<code>set_mode(mode: ModeStr)</code>","text":"<p>Set mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ModeStr</code> <p>mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_mode(self, mode: ModeStr):\n\"\"\"Set mode.\n    Args:\n        mode: mode\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in MODES:\nraise InvalidParamError(mode, MODES)\nself.setMode(MODES[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.set_orientation","title":"<code>set_orientation(orientation: OrientationStr)</code>","text":"<p>Set orientation.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>OrientationStr</code> <p>orientation</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>orientation does not exist</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_orientation(self, orientation: OrientationStr):\n\"\"\"Set orientation.\n    Args:\n        orientation: orientation\n    Raises:\n        InvalidParamError: orientation does not exist\n    \"\"\"\nif orientation not in ORIENTATIONS:\nraise InvalidParamError(orientation, ORIENTATIONS)\nself.setOrientation(ORIENTATIONS[orientation])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagelayout.PageLayout.set_units","title":"<code>set_units(unit: UnitStr)</code>","text":"<p>Set unit.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>UnitStr</code> <p>unit</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>unit does not exist</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_units(self, unit: UnitStr):\n\"\"\"Set unit.\n    Args:\n        unit: unit\n    Raises:\n        InvalidParamError: unit does not exist\n    \"\"\"\nif unit not in UNITS:\nraise InvalidParamError(unit, UNITS)\nself.setUnits(UNITS[unit])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PageRanges","title":"<code>PageRanges</code>","text":"<p>         Bases: <code>QtGui.QPageRanges</code></p> Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>class PageRanges(QtGui.QPageRanges):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __getitem__(self, index: int):\nreturn self.get_range_list()[index]\ndef __str__(self):\nreturn self.toString()\ndef __repr__(self):\nreturn get_repr(self, self.get_range_list())\ndef __contains__(self, other: int):\nreturn self.contains(other)\ndef __add__(self, other: int | tuple[int, int]):\nif isinstance(other, int):\nself.addPage(other)\nelse:\nself.addRange(other)\nreturn self\ndef __len__(self):\nreturn self.lastPage() - self.firstPage()\ndef get_range_list(self):\nreturn [(i.from_, i.to) for i in self.toRangeList()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__add__","title":"<code>__add__(other: int | tuple[int, int])</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __add__(self, other: int | tuple[int, int]):\nif isinstance(other, int):\nself.addPage(other)\nelse:\nself.addRange(other)\nreturn self\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__contains__","title":"<code>__contains__(other: int)</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __contains__(self, other: int):\nreturn self.contains(other)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__getitem__","title":"<code>__getitem__(index: int)</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __getitem__(self, index: int):\nreturn self.get_range_list()[index]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __len__(self):\nreturn self.lastPage() - self.firstPage()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_range_list())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pageranges.PageRanges.get_range_list","title":"<code>get_range_list()</code>","text":"Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>def get_range_list(self):\nreturn [(i.from_, i.to) for i in self.toRangeList()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PageSize","title":"<code>PageSize</code>","text":"<p>         Bases: <code>QtGui.QPageSize</code></p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>class PageSize(QtGui.QPageSize):\ndef __repr__(self):\nreturn get_repr(self, self.get_id())\ndef __reduce__(self):\nreturn type(self), (self.id(),)\ndef get_definition_units(self) -&gt; UnitStr:\n\"\"\"Get the definition unit.\n        Returns:\n            unit\n        \"\"\"\nunits = self.definitionUnits()\nif units.value == -1:\nraise ValueError(\"Invalid page size\")\nreturn UNITS.inverse[units]\ndef get_id(self) -&gt; str:\n\"\"\"Get the standard page size id.\n        Returns:\n            page size id\n        \"\"\"\nreturn PAGE_SIZE_ID.inverse[self.id()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagesize.PageSize.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.id(),)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagesize.PageSize.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_id())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagesize.PageSize.get_definition_units","title":"<code>get_definition_units() -&gt; UnitStr</code>","text":"<p>Get the definition unit.</p> <p>Returns:</p> Type Description <code>UnitStr</code> <p>unit</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def get_definition_units(self) -&gt; UnitStr:\n\"\"\"Get the definition unit.\n    Returns:\n        unit\n    \"\"\"\nunits = self.definitionUnits()\nif units.value == -1:\nraise ValueError(\"Invalid page size\")\nreturn UNITS.inverse[units]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagesize.PageSize.get_id","title":"<code>get_id() -&gt; str</code>","text":"<p>Get the standard page size id.</p> <p>Returns:</p> Type Description <code>str</code> <p>page size id</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def get_id(self) -&gt; str:\n\"\"\"Get the standard page size id.\n    Returns:\n        page size id\n    \"\"\"\nreturn PAGE_SIZE_ID.inverse[self.id()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PagedPaintDevice","title":"<code>PagedPaintDevice</code>","text":"<p>         Bases: <code>PagedPaintDeviceMixin</code>, <code>QtGui.QPagedPaintDevice</code></p> Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>class PagedPaintDevice(PagedPaintDeviceMixin, QtGui.QPagedPaintDevice):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PagedPaintDeviceMixin","title":"<code>PagedPaintDeviceMixin</code>","text":"<p>         Bases: <code>gui.PaintDeviceMixin</code></p> Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>class PagedPaintDeviceMixin(gui.PaintDeviceMixin):\ndef get_page_ranges(self) -&gt; list[gui.PageRanges]:\nreturn [gui.PageRanges(i) for i in self.pageRanges()]\ndef get_page_layout(self) -&gt; gui.PageLayout:\nreturn gui.PageLayout(self.PageLayout())\ndef set_page_ranges(self, ranges: QtGui.QPageRanges | list[tuple[int, int]]):\nif isinstance(ranges, QtGui.QPageRanges):\nself.setPageRanges(ranges)\nelse:\nranges = gui.PageRanges()\nfor start, end in ranges:\nranges.addRange(start, end)\ndef set_page_orientation(self, orientation: gui.pagelayout.OrientationStr):\nself.setPageOrientation(gui.pagelayout.ORIENTATIONS[orientation])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagedpaintdevice.PagedPaintDeviceMixin.get_page_layout","title":"<code>get_page_layout() -&gt; gui.PageLayout</code>","text":"Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>def get_page_layout(self) -&gt; gui.PageLayout:\nreturn gui.PageLayout(self.PageLayout())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagedpaintdevice.PagedPaintDeviceMixin.get_page_ranges","title":"<code>get_page_ranges() -&gt; list[gui.PageRanges]</code>","text":"Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>def get_page_ranges(self) -&gt; list[gui.PageRanges]:\nreturn [gui.PageRanges(i) for i in self.pageRanges()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagedpaintdevice.PagedPaintDeviceMixin.set_page_orientation","title":"<code>set_page_orientation(orientation: gui.pagelayout.OrientationStr)</code>","text":"Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>def set_page_orientation(self, orientation: gui.pagelayout.OrientationStr):\nself.setPageOrientation(gui.pagelayout.ORIENTATIONS[orientation])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pagedpaintdevice.PagedPaintDeviceMixin.set_page_ranges","title":"<code>set_page_ranges(ranges: QtGui.QPageRanges | list[tuple[int, int]])</code>","text":"Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>def set_page_ranges(self, ranges: QtGui.QPageRanges | list[tuple[int, int]]):\nif isinstance(ranges, QtGui.QPageRanges):\nself.setPageRanges(ranges)\nelse:\nranges = gui.PageRanges()\nfor start, end in ranges:\nranges.addRange(start, end)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PaintDevice","title":"<code>PaintDevice</code>","text":"<p>         Bases: <code>PaintDeviceMixin</code>, <code>QtGui.QPaintDevice</code></p> Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>class PaintDevice(PaintDeviceMixin, QtGui.QPaintDevice):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PaintDeviceMixin","title":"<code>PaintDeviceMixin</code>","text":"Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>class PaintDeviceMixin:\ndef get_metric(self, metric: MetricStr) -&gt; int:\n\"\"\"Return metric information.\n        Args:\n            metric: metric information to get\n        Returns:\n            metric information\n        \"\"\"\nif metric not in METRICS:\nraise InvalidParamError(metric, METRICS)\nreturn self.metric(METRICS[metric])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.paintdevice.PaintDeviceMixin.get_metric","title":"<code>get_metric(metric: MetricStr) -&gt; int</code>","text":"<p>Return metric information.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>MetricStr</code> <p>metric information to get</p> required <p>Returns:</p> Type Description <code>int</code> <p>metric information</p> Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>def get_metric(self, metric: MetricStr) -&gt; int:\n\"\"\"Return metric information.\n    Args:\n        metric: metric information to get\n    Returns:\n        metric information\n    \"\"\"\nif metric not in METRICS:\nraise InvalidParamError(metric, METRICS)\nreturn self.metric(METRICS[metric])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PaintDeviceWindow","title":"<code>PaintDeviceWindow</code>","text":"<p>         Bases: <code>PaintDeviceWindowMixin</code>, <code>QtGui.QPaintDeviceWindow</code></p> Source code in <code>prettyqt\\gui\\paintdevicewindow.py</code> <pre><code>class PaintDeviceWindow(PaintDeviceWindowMixin, QtGui.QPaintDeviceWindow):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PaintDeviceWindowMixin","title":"<code>PaintDeviceWindowMixin</code>","text":"<p>         Bases: <code>gui.WindowMixin</code>, <code>gui.PaintDeviceMixin</code></p> Source code in <code>prettyqt\\gui\\paintdevicewindow.py</code> <pre><code>class PaintDeviceWindowMixin(gui.WindowMixin, gui.PaintDeviceMixin):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Painter","title":"<code>Painter</code>","text":"<p>         Bases: <code>PainterMixin</code>, <code>QtGui.QPainter</code></p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>class Painter(PainterMixin, QtGui.QPainter):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PainterMixin","title":"<code>PainterMixin</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>class PainterMixin:\ndef __enter__(self):\nreturn self\ndef __exit__(self, typ, value, traceback):\nself.end()\n@contextlib.contextmanager\ndef paint_on(self, obj) -&gt; Iterator[Painter]:\nself.begin(obj)\nyield self\nself.end()\n@contextlib.contextmanager\ndef backup_state(self) -&gt; Iterator[Painter]:\nself.save()\nyield self\nself.restore()\n@contextlib.contextmanager\ndef native_mode(self) -&gt; Iterator[Painter]:\nself.beginNativePainting()\nyield self\nself.endNativePainting()\n@contextlib.contextmanager\ndef edit_pen(self) -&gt; Iterator[gui.Pen]:\npen = gui.Pen(self.pen())\nyield pen\nself.setPen(pen)\n@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\ndef draw_text(\nself,\nposition: datatypes.PointType | datatypes.RectType | datatypes.RectFType,\ntext: str,\nalignment: constants.AlignmentStr = \"center\",\n):\nmatch position:\ncase (_, _):\nposition = core.Point(*position)\ncase (_, _, _, _):\nposition = core.RectF(*position)\nself.drawText(position, text, constants.ALIGNMENTS[alignment])\ndef draw_image(\nself,\ntarget: QtCore.QPoint | QtCore.QPointF | QtCore.QRect | QtCore.QRectF,\nframe_buffer: QtGui.QImage,\n):\nself.set_composition_mode(\"source_atop\")\nself.drawImage(target, frame_buffer)\ndef draw_polygon(\nself,\npoints: (\nQtGui.QPolygon | QtGui.QPolygonF | list[QtCore.QPoint] | list[QtCore.QPointF]\n),\nfill_rule: constants.FillRuleStr = \"odd_even\",\n):\nif fill_rule not in constants.FILL_RULE:\nraise InvalidParamError(fill_rule, constants.FILL_RULE)\nself.drawPolygon(points, fillRule=constants.FILL_RULE[fill_rule])  # type: ignore\ndef draw_rounded_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\nx_radius: float,\ny_radius: float,\nrelative: bool = False,\n):\nflag = (\nQtCore.Qt.SizeMode.RelativeSize\nif relative\nelse QtCore.Qt.SizeMode.AbsoluteSize\n)\nif isinstance(rect, tuple):\nrect = QtCore.QRectF(*rect)\nself.drawRoundedRect(rect, x_radius, y_radius, flag)\ndef draw_star(self, size: float = 1.0, fill_rule: constants.FillRuleStr = \"winding\"):\nstar = gui.PolygonF.create_star(size)\nself.drawPolygon(star, constants.FILL_RULE[fill_rule])\ndef draw_diamond(\nself, size: float = 1.0, fill_rule: constants.FillRuleStr = \"winding\"\n):\nstar = gui.PolygonF.create_diamond(size)\nself.drawPolygon(star, constants.FILL_RULE[fill_rule])\ndef use_antialiasing(self):\nself.setRenderHint(self.RenderHint.Antialiasing, True)\ndef fill_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\ncolor: datatypes.ColorType,\npattern: constants.BrushStyleStr = \"solid\",\n):\nif pattern not in constants.BRUSH_STYLE:\nraise InvalidParamError(pattern, constants.BRUSH_STYLE)\nif isinstance(rect, tuple):\nrect = core.RectF(*rect)\ncolor = colors.get_color(color)\nif pattern != \"solid\":\ncolor = gui.Brush(color, constants.BRUSH_STYLE[pattern])\nself.fillRect(rect, color)\ndef set_pen(\nself,\nstyle: constants.PenStyleStr | None = \"solid\",\nwidth: float = 1.0,\ncolor: datatypes.ColorType = \"black\",\nbrush: QtGui.QBrush | None = None,\nmiter_limit: float = 2.0,\njoin_style: constants.JoinStyleStr = \"bevel\",\ncap_style: constants.CapStyleStr = \"square\",\n) -&gt; gui.Pen:\n\"\"\"Set pen to use.\n        Args:\n            style: pen style\n            width: pen width\n            color: pen color\n            brush: pen brush\n            miter_limit: miter limit\n            join_style: pen join style\n            cap_style: pen cap style\n        \"\"\"\npen = gui.Pen()\npen.set_style(style)\nif style in [\"none\", None]:\nself.setPen(pen)\nreturn pen\npen.set_cap_style(cap_style)\npen.set_join_style(join_style)\npen.setMiterLimit(miter_limit)\npen.setWidthF(width)\nif brush is not None:\npen.setBrush(brush)\npen.set_color(color)\nself.setPen(pen)\nreturn pen\ndef get_pen(self) -&gt; gui.Pen:\n\"\"\"Return current pen.\n        Returns:\n            current pen\n        \"\"\"\nreturn gui.Pen(self.pen())\ndef set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.setPen(color)\ndef set_brush(self, brush: QtGui.QBrush | datatypes.ColorType):\nif not isinstance(brush, QtGui.QBrush):\nbrush = colors.get_color(brush)\nself.setBrush(brush)\ndef set_transparent_background(self, transparent: bool = True):\nmode = (\nQtCore.Qt.BGMode.TransparentMode\nif transparent\nelse QtCore.Qt.BGMode.OpaqueMode\n)\nself.setBackgroundMode(mode)\ndef set_composition_mode(self, mode: CompositionModeStr):\n\"\"\"Set the current composition mode.\n        Raises:\n            InvalidParamError: composition mode does not exist\n        \"\"\"\nif mode not in COMPOSITION_MODE:\nraise InvalidParamError(mode, COMPOSITION_MODE)\nself.setCompositionMode(COMPOSITION_MODE[mode])\ndef get_composition_mode(self) -&gt; CompositionModeStr:\n\"\"\"Get the current composition mode.\n        Returns:\n            composition mode\n        \"\"\"\nreturn COMPOSITION_MODE.inverse[self.compositionMode()]\ndef set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\ndef get_font_metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self.fontMetrics())\ndef set_clip_path(\nself, path: QtGui.QPainterPath, operation: constants.ClipOperationStr = \"replace\"\n):\nif operation not in constants.CLIP_OPERATION:\nraise InvalidParamError(operation, constants.CLIP_OPERATION)\nself.setClipPath(path, constants.CLIP_OPERATION[operation])\ndef get_text_rect(self, text: str) -&gt; core.Rect:\nreturn self.drawText(\ncore.Rect(), QtCore.Qt.TextFlag.TextDontPrint, text\n)  # type: ignore\n@contextlib.contextmanager\ndef clip_path(\nself, operation: constants.ClipOperationStr = \"replace\"\n) -&gt; Iterator[gui.PainterPath]:\npath = gui.PainterPath()\nyield path\nself.set_clip_path(path, operation)\n@contextlib.contextmanager\ndef apply_transform(self, combine: bool = True) -&gt; Iterator[gui.Transform]:\ntransform = gui.Transform()\nyield transform\nself.setTransform(transform, combine)\n@contextlib.contextmanager\ndef offset_by(self, x: int = 0, y: int = 0) -&gt; Iterator[Painter]:\nself.translate(x, y)\nyield self\nself.translate(-x, -y)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def __enter__(self):\nreturn self\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.__exit__","title":"<code>__exit__(typ, value, traceback)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def __exit__(self, typ, value, traceback):\nself.end()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.apply_transform","title":"<code>apply_transform(combine: bool = True) -&gt; Iterator[gui.Transform]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef apply_transform(self, combine: bool = True) -&gt; Iterator[gui.Transform]:\ntransform = gui.Transform()\nyield transform\nself.setTransform(transform, combine)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.backup_state","title":"<code>backup_state() -&gt; Iterator[Painter]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef backup_state(self) -&gt; Iterator[Painter]:\nself.save()\nyield self\nself.restore()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.clip_path","title":"<code>clip_path(operation: constants.ClipOperationStr = 'replace') -&gt; Iterator[gui.PainterPath]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef clip_path(\nself, operation: constants.ClipOperationStr = \"replace\"\n) -&gt; Iterator[gui.PainterPath]:\npath = gui.PainterPath()\nyield path\nself.set_clip_path(path, operation)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.draw_diamond","title":"<code>draw_diamond(size: float = 1.0, fill_rule: constants.FillRuleStr = 'winding')</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def draw_diamond(\nself, size: float = 1.0, fill_rule: constants.FillRuleStr = \"winding\"\n):\nstar = gui.PolygonF.create_diamond(size)\nself.drawPolygon(star, constants.FILL_RULE[fill_rule])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.draw_image","title":"<code>draw_image(target: QtCore.QPoint | QtCore.QPointF | QtCore.QRect | QtCore.QRectF, frame_buffer: QtGui.QImage)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def draw_image(\nself,\ntarget: QtCore.QPoint | QtCore.QPointF | QtCore.QRect | QtCore.QRectF,\nframe_buffer: QtGui.QImage,\n):\nself.set_composition_mode(\"source_atop\")\nself.drawImage(target, frame_buffer)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.draw_polygon","title":"<code>draw_polygon(points: QtGui.QPolygon | QtGui.QPolygonF | list[QtCore.QPoint] | list[QtCore.QPointF], fill_rule: constants.FillRuleStr = 'odd_even')</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def draw_polygon(\nself,\npoints: (\nQtGui.QPolygon | QtGui.QPolygonF | list[QtCore.QPoint] | list[QtCore.QPointF]\n),\nfill_rule: constants.FillRuleStr = \"odd_even\",\n):\nif fill_rule not in constants.FILL_RULE:\nraise InvalidParamError(fill_rule, constants.FILL_RULE)\nself.drawPolygon(points, fillRule=constants.FILL_RULE[fill_rule])  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.draw_rounded_rect","title":"<code>draw_rounded_rect(rect: datatypes.RectType | datatypes.RectFType, x_radius: float, y_radius: float, relative: bool = False)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def draw_rounded_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\nx_radius: float,\ny_radius: float,\nrelative: bool = False,\n):\nflag = (\nQtCore.Qt.SizeMode.RelativeSize\nif relative\nelse QtCore.Qt.SizeMode.AbsoluteSize\n)\nif isinstance(rect, tuple):\nrect = QtCore.QRectF(*rect)\nself.drawRoundedRect(rect, x_radius, y_radius, flag)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.draw_star","title":"<code>draw_star(size: float = 1.0, fill_rule: constants.FillRuleStr = 'winding')</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def draw_star(self, size: float = 1.0, fill_rule: constants.FillRuleStr = \"winding\"):\nstar = gui.PolygonF.create_star(size)\nself.drawPolygon(star, constants.FILL_RULE[fill_rule])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.draw_text","title":"<code>draw_text(position: datatypes.PointType | datatypes.RectType | datatypes.RectFType, text: str, alignment: constants.AlignmentStr = 'center')</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def draw_text(\nself,\nposition: datatypes.PointType | datatypes.RectType | datatypes.RectFType,\ntext: str,\nalignment: constants.AlignmentStr = \"center\",\n):\nmatch position:\ncase (_, _):\nposition = core.Point(*position)\ncase (_, _, _, _):\nposition = core.RectF(*position)\nself.drawText(position, text, constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.edit_font","title":"<code>edit_font() -&gt; Iterator[gui.Font]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.edit_pen","title":"<code>edit_pen() -&gt; Iterator[gui.Pen]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef edit_pen(self) -&gt; Iterator[gui.Pen]:\npen = gui.Pen(self.pen())\nyield pen\nself.setPen(pen)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.fill_rect","title":"<code>fill_rect(rect: datatypes.RectType | datatypes.RectFType, color: datatypes.ColorType, pattern: constants.BrushStyleStr = 'solid')</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def fill_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\ncolor: datatypes.ColorType,\npattern: constants.BrushStyleStr = \"solid\",\n):\nif pattern not in constants.BRUSH_STYLE:\nraise InvalidParamError(pattern, constants.BRUSH_STYLE)\nif isinstance(rect, tuple):\nrect = core.RectF(*rect)\ncolor = colors.get_color(color)\nif pattern != \"solid\":\ncolor = gui.Brush(color, constants.BRUSH_STYLE[pattern])\nself.fillRect(rect, color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.get_composition_mode","title":"<code>get_composition_mode() -&gt; CompositionModeStr</code>","text":"<p>Get the current composition mode.</p> <p>Returns:</p> Type Description <code>CompositionModeStr</code> <p>composition mode</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_composition_mode(self) -&gt; CompositionModeStr:\n\"\"\"Get the current composition mode.\n    Returns:\n        composition mode\n    \"\"\"\nreturn COMPOSITION_MODE.inverse[self.compositionMode()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.get_font_metrics","title":"<code>get_font_metrics() -&gt; gui.FontMetrics</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_font_metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self.fontMetrics())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"<p>Return current pen.</p> <p>Returns:</p> Type Description <code>gui.Pen</code> <p>current pen</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\n\"\"\"Return current pen.\n    Returns:\n        current pen\n    \"\"\"\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.get_text_rect","title":"<code>get_text_rect(text: str) -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_text_rect(self, text: str) -&gt; core.Rect:\nreturn self.drawText(\ncore.Rect(), QtCore.Qt.TextFlag.TextDontPrint, text\n)  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.native_mode","title":"<code>native_mode() -&gt; Iterator[Painter]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef native_mode(self) -&gt; Iterator[Painter]:\nself.beginNativePainting()\nyield self\nself.endNativePainting()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.offset_by","title":"<code>offset_by(x: int = 0, y: int = 0) -&gt; Iterator[Painter]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef offset_by(self, x: int = 0, y: int = 0) -&gt; Iterator[Painter]:\nself.translate(x, y)\nyield self\nself.translate(-x, -y)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.paint_on","title":"<code>paint_on(obj) -&gt; Iterator[Painter]</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>@contextlib.contextmanager\ndef paint_on(self, obj) -&gt; Iterator[Painter]:\nself.begin(obj)\nyield self\nself.end()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_brush","title":"<code>set_brush(brush: QtGui.QBrush | datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_brush(self, brush: QtGui.QBrush | datatypes.ColorType):\nif not isinstance(brush, QtGui.QBrush):\nbrush = colors.get_color(brush)\nself.setBrush(brush)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_clip_path","title":"<code>set_clip_path(path: QtGui.QPainterPath, operation: constants.ClipOperationStr = 'replace')</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_clip_path(\nself, path: QtGui.QPainterPath, operation: constants.ClipOperationStr = \"replace\"\n):\nif operation not in constants.CLIP_OPERATION:\nraise InvalidParamError(operation, constants.CLIP_OPERATION)\nself.setClipPath(path, constants.CLIP_OPERATION[operation])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_color","title":"<code>set_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.setPen(color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_composition_mode","title":"<code>set_composition_mode(mode: CompositionModeStr)</code>","text":"<p>Set the current composition mode.</p> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>composition mode does not exist</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_composition_mode(self, mode: CompositionModeStr):\n\"\"\"Set the current composition mode.\n    Raises:\n        InvalidParamError: composition mode does not exist\n    \"\"\"\nif mode not in COMPOSITION_MODE:\nraise InvalidParamError(mode, COMPOSITION_MODE)\nself.setCompositionMode(COMPOSITION_MODE[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_pen","title":"<code>set_pen(style: constants.PenStyleStr | None = 'solid', width: float = 1.0, color: datatypes.ColorType = 'black', brush: QtGui.QBrush | None = None, miter_limit: float = 2.0, join_style: constants.JoinStyleStr = 'bevel', cap_style: constants.CapStyleStr = 'square') -&gt; gui.Pen</code>","text":"<p>Set pen to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | None</code> <p>pen style</p> <code>'solid'</code> <code>width</code> <code>float</code> <p>pen width</p> <code>1.0</code> <code>color</code> <code>datatypes.ColorType</code> <p>pen color</p> <code>'black'</code> <code>brush</code> <code>QtGui.QBrush | None</code> <p>pen brush</p> <code>None</code> <code>miter_limit</code> <code>float</code> <p>miter limit</p> <code>2.0</code> <code>join_style</code> <code>constants.JoinStyleStr</code> <p>pen join style</p> <code>'bevel'</code> <code>cap_style</code> <code>constants.CapStyleStr</code> <p>pen cap style</p> <code>'square'</code> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_pen(\nself,\nstyle: constants.PenStyleStr | None = \"solid\",\nwidth: float = 1.0,\ncolor: datatypes.ColorType = \"black\",\nbrush: QtGui.QBrush | None = None,\nmiter_limit: float = 2.0,\njoin_style: constants.JoinStyleStr = \"bevel\",\ncap_style: constants.CapStyleStr = \"square\",\n) -&gt; gui.Pen:\n\"\"\"Set pen to use.\n    Args:\n        style: pen style\n        width: pen width\n        color: pen color\n        brush: pen brush\n        miter_limit: miter limit\n        join_style: pen join style\n        cap_style: pen cap style\n    \"\"\"\npen = gui.Pen()\npen.set_style(style)\nif style in [\"none\", None]:\nself.setPen(pen)\nreturn pen\npen.set_cap_style(cap_style)\npen.set_join_style(join_style)\npen.setMiterLimit(miter_limit)\npen.setWidthF(width)\nif brush is not None:\npen.setBrush(brush)\npen.set_color(color)\nself.setPen(pen)\nreturn pen\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_transform","title":"<code>set_transform(transform: datatypes.TransformType, combine: bool = False)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.set_transparent_background","title":"<code>set_transparent_background(transparent: bool = True)</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_transparent_background(self, transparent: bool = True):\nmode = (\nQtCore.Qt.BGMode.TransparentMode\nif transparent\nelse QtCore.Qt.BGMode.OpaqueMode\n)\nself.setBackgroundMode(mode)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painter.PainterMixin.use_antialiasing","title":"<code>use_antialiasing()</code>","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def use_antialiasing(self):\nself.setRenderHint(self.RenderHint.Antialiasing, True)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PainterPath","title":"<code>PainterPath</code>","text":"<p>         Bases: <code>QtGui.QPainterPath</code></p> Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>class PainterPath(QtGui.QPainterPath):\ndef serialize_fields(self):\nreturn dict(fill_rule=self.get_fill_rule(), elements=list(self))\ndef __len__(self):\nreturn self.elementCount()\ndef __getitem__(self, index: int) -&gt; QtGui.QPainterPath.Element:\nreturn self.elementAt(index)\ndef __iter__(self) -&gt; Iterator[QtGui.QPainterPath.Element]:\nreturn iter(self.elementAt(i) for i in range(self.elementCount()))\ndef __setitem__(self, index: int, value: tuple[int, int]):\nself.setElementPositionAt(index, *value)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, item: QtCore.QPointF | QtCore.QRectF | QtGui.QPainterPath):\nreturn self.contains(item)\ndef add_rect(self, rect: datatypes.RectType | datatypes.RectFType):\nif isinstance(rect, QtCore.QRect):\nrect = QtCore.QRectF(rect)\nelif isinstance(rect, tuple):\nrect = QtCore.QRectF(*rect)\nself.addRect(rect)\ndef set_fill_rule(self, rule: constants.FillRuleStr):\n\"\"\"Set fill rule.\n        Args:\n            rule: fill rule to use\n        Raises:\n            InvalidParamError: fill rule does not exist\n        \"\"\"\nif rule not in constants.FILL_RULE:\nraise InvalidParamError(rule, constants.FILL_RULE)\nself.setFillRule(constants.FILL_RULE[rule])\ndef get_fill_rule(self) -&gt; constants.FillRuleStr:\n\"\"\"Return current fill rule.\n        Returns:\n            fill rule\n        \"\"\"\nreturn constants.FILL_RULE.inverse[self.fillRule()]\ndef get_bounding_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.boundingRect())\ndef get_simplified(self) -&gt; PainterPath:\nreturn PainterPath(self.simplified())\ndef to_reversed(self) -&gt; PainterPath:\nreturn PainterPath(self.toReversed())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.__contains__","title":"<code>__contains__(item: QtCore.QPointF | QtCore.QRectF | QtGui.QPainterPath)</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def __contains__(self, item: QtCore.QPointF | QtCore.QRectF | QtGui.QPainterPath):\nreturn self.contains(item)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtGui.QPainterPath.Element</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtGui.QPainterPath.Element:\nreturn self.elementAt(index)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.__iter__","title":"<code>__iter__() -&gt; Iterator[QtGui.QPainterPath.Element]</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtGui.QPainterPath.Element]:\nreturn iter(self.elementAt(i) for i in range(self.elementCount()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def __len__(self):\nreturn self.elementCount()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.__setitem__","title":"<code>__setitem__(index: int, value: tuple[int, int])</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def __setitem__(self, index: int, value: tuple[int, int]):\nself.setElementPositionAt(index, *value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.add_rect","title":"<code>add_rect(rect: datatypes.RectType | datatypes.RectFType)</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def add_rect(self, rect: datatypes.RectType | datatypes.RectFType):\nif isinstance(rect, QtCore.QRect):\nrect = QtCore.QRectF(rect)\nelif isinstance(rect, tuple):\nrect = QtCore.QRectF(*rect)\nself.addRect(rect)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.get_bounding_rect","title":"<code>get_bounding_rect() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def get_bounding_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.boundingRect())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.get_fill_rule","title":"<code>get_fill_rule() -&gt; constants.FillRuleStr</code>","text":"<p>Return current fill rule.</p> <p>Returns:</p> Type Description <code>constants.FillRuleStr</code> <p>fill rule</p> Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def get_fill_rule(self) -&gt; constants.FillRuleStr:\n\"\"\"Return current fill rule.\n    Returns:\n        fill rule\n    \"\"\"\nreturn constants.FILL_RULE.inverse[self.fillRule()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.get_simplified","title":"<code>get_simplified() -&gt; PainterPath</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def get_simplified(self) -&gt; PainterPath:\nreturn PainterPath(self.simplified())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def serialize_fields(self):\nreturn dict(fill_rule=self.get_fill_rule(), elements=list(self))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.set_fill_rule","title":"<code>set_fill_rule(rule: constants.FillRuleStr)</code>","text":"<p>Set fill rule.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>constants.FillRuleStr</code> <p>fill rule to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>fill rule does not exist</p> Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def set_fill_rule(self, rule: constants.FillRuleStr):\n\"\"\"Set fill rule.\n    Args:\n        rule: fill rule to use\n    Raises:\n        InvalidParamError: fill rule does not exist\n    \"\"\"\nif rule not in constants.FILL_RULE:\nraise InvalidParamError(rule, constants.FILL_RULE)\nself.setFillRule(constants.FILL_RULE[rule])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpath.PainterPath.to_reversed","title":"<code>to_reversed() -&gt; PainterPath</code>","text":"Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def to_reversed(self) -&gt; PainterPath:\nreturn PainterPath(self.toReversed())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PainterPathStroker","title":"<code>PainterPathStroker</code>","text":"<p>         Bases: <code>QtGui.QPainterPathStroker</code></p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>class PainterPathStroker(QtGui.QPainterPathStroker):\ndef set_cap_style(self, style: constants.CapStyleStr):\n\"\"\"Set cap style to use.\n        Args:\n            style: cap style to use\n        Raises:\n            InvalidParamError: cap style does not exist\n        \"\"\"\nif style not in constants.CAP_STYLE:\nraise InvalidParamError(style, constants.CAP_STYLE)\nself.setCapStyle(constants.CAP_STYLE[style])\ndef get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n        Returns:\n            cap style\n        \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\ndef set_join_style(self, style: constants.JoinStyleStr):\n\"\"\"Set join style to use.\n        Args:\n            style: join style to use\n        Raises:\n            InvalidParamError: join style does not exist\n        \"\"\"\nif style not in constants.JOIN_STYLE:\nraise InvalidParamError(style, constants.JOIN_STYLE)\nself.setJoinStyle(constants.JOIN_STYLE[style])\ndef get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n        Returns:\n            join style\n        \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\ndef create_stroke(self, path: QtGui.QPainterPath) -&gt; gui.PainterPath:\nreturn gui.PainterPath(self.createStroke(path))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.create_stroke","title":"<code>create_stroke(path: QtGui.QPainterPath) -&gt; gui.PainterPath</code>","text":"Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def create_stroke(self, path: QtGui.QPainterPath) -&gt; gui.PainterPath:\nreturn gui.PainterPath(self.createStroke(path))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.get_cap_style","title":"<code>get_cap_style() -&gt; constants.CapStyleStr</code>","text":"<p>Return current cap style.</p> <p>Returns:</p> Type Description <code>constants.CapStyleStr</code> <p>cap style</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n    Returns:\n        cap style\n    \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.get_join_style","title":"<code>get_join_style() -&gt; constants.JoinStyleStr</code>","text":"<p>Return current join style.</p> <p>Returns:</p> Type Description <code>constants.JoinStyleStr</code> <p>join style</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n    Returns:\n        join style\n    \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.set_cap_style","title":"<code>set_cap_style(style: constants.CapStyleStr)</code>","text":"<p>Set cap style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CapStyleStr</code> <p>cap style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>cap style does not exist</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def set_cap_style(self, style: constants.CapStyleStr):\n\"\"\"Set cap style to use.\n    Args:\n        style: cap style to use\n    Raises:\n        InvalidParamError: cap style does not exist\n    \"\"\"\nif style not in constants.CAP_STYLE:\nraise InvalidParamError(style, constants.CAP_STYLE)\nself.setCapStyle(constants.CAP_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.painterpathstroker.PainterPathStroker.set_join_style","title":"<code>set_join_style(style: constants.JoinStyleStr)</code>","text":"<p>Set join style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.JoinStyleStr</code> <p>join style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>join style does not exist</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def set_join_style(self, style: constants.JoinStyleStr):\n\"\"\"Set join style to use.\n    Args:\n        style: join style to use\n    Raises:\n        InvalidParamError: join style does not exist\n    \"\"\"\nif style not in constants.JOIN_STYLE:\nraise InvalidParamError(style, constants.JOIN_STYLE)\nself.setJoinStyle(constants.JOIN_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Palette","title":"<code>Palette</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QPalette</code></p> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>class Palette(serializemixin.SerializeMixin, QtGui.QPalette):\ndef __getitem__(self, index: RoleStr) -&gt; gui.Color:\nreturn self.get_color(index)\ndef __setitem__(self, index: RoleStr, value: datatypes.ColorType):\nself.set_color(index, value)\ndef __repr__(self):\nreturn get_repr(self, self.get_color(\"button\"), self.get_color(\"window\"))\ndef highlight_inactive(self, enable: bool = True):\nif enable:\ncolor = self.color(self.ColorGroup.Active, self.ColorRole.Highlight)\nelse:\npal = gui.Palette()\ncolor = pal.color(self.ColorGroup.Inactive, self.ColorRole.Highlight)\nself.setColor(self.ColorGroup.Inactive, self.ColorRole.Highlight, color)\ndef set_color(\nself, role: RoleStr, color: datatypes.ColorType, group: GroupStr = \"active\"\n):\ncolor = colors.get_color(color)\nself.setColor(GROUP[group], ROLE[role], color)\ndef get_colors(self, group: GroupStr = \"active\") -&gt; dict[str, gui.Color]:\nreturn {k: self.get_color(k, group) for k in ROLE}\ndef get_color(self, role: RoleStr, group: GroupStr = \"active\") -&gt; gui.Color:\nreturn gui.Color(self.color(GROUP[group], ROLE[role]))\ndef set_brush(\nself,\nrole: RoleStr,\nbrush: datatypes.ColorAndBrushType,\ngroup: GroupStr = \"active\",\n):\nif not isinstance(brush, QtGui.QBrush):\nbrush = gui.Brush(colors.get_color(brush))\nself.setBrush(GROUP[group], ROLE[role], brush)\ndef get_brushes(self, group: GroupStr = \"active\") -&gt; dict[str, gui.Brush]:\nreturn {k: self.get_brush(k, group) for k in ROLE}\ndef get_brush(self, role: RoleStr, group: GroupStr = \"active\") -&gt; gui.Brush:\nreturn gui.Brush(self.brush(GROUP[group], ROLE[role]))\ndef set_color_group(self, group: GroupStr, **kwargs: QtGui.QBrush):\n\"\"\"Set the color group.\n        Args:\n            group: color group to use\n            kwargs: keyword arguments passed to setColorGroup\n        Raises:\n            InvalidParamError: invalid color group\n        \"\"\"\nif group not in GROUP:\nraise InvalidParamError(group, GROUP)\nself.setColorGroup(GROUP[group], **kwargs)\ndef get_color_group(self) -&gt; GroupStr:\n\"\"\"Return color group.\n        Returns:\n            color group\n        \"\"\"\nreturn GROUP.inverse[self.colorGroup()]\ndef inverted(self) -&gt; Self:\npal = type(self)()\nfor group in GROUP:\nfor role in ROLE:\ncolor = self.get_color(role, group)\npal.set_color(role, color.inverted(), group)\nreturn pal\n@classmethod\ndef create_dark_palette(cls) -&gt; Self:\npal = cls()\npal.set_color(\"window\", gui.Color(53, 53, 53))\npal.set_color(\"window_text\", \"white\")\npal.set_color(\"window_text\", \"grey\", group=\"disabled\")\npal.set_color(\"base\", gui.Color(25, 25, 25))\npal.set_color(\"alternate_base\", gui.Color(53, 53, 53))\npal.set_color(\"tool_tip_base\", \"slategrey\")\npal.set_color(\"tool_tip_base\", \"slategrey\", group=\"inactive\")\npal.set_color(\"tool_tip_text\", \"white\")\npal.set_color(\"tool_tip_text\", \"white\", group=\"inactive\")\npal.set_color(\"text\", \"white\")\npal.set_color(\"text\", \"grey\", group=\"disabled\")\npal.set_color(\"button\", gui.Color(53, 53, 53))\npal.set_color(\"button_text\", \"white\")\npal.set_color(\"button_text\", \"grey\", group=\"disabled\")\npal.set_color(\"bright_text\", \"red\")\npal.set_color(\"link\", \"dodgerblue\")\npal.set_color(\"highlight\", \"dodgerblue\")\npal.set_color(\"highlight\", gui.Color(80, 80, 80), group=\"disabled\")\npal.set_color(\"highlighted_text\", \"black\")\npal.set_color(\"highlighted_text\", \"grey\", group=\"disabled\")\nreturn pal\ndef is_dark(self) -&gt; bool:\ncol = self.color(self.ColorRole.Window)\nreturn max(col.getRgb()[:3]) &lt; 115\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.__getitem__","title":"<code>__getitem__(index: RoleStr) -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def __getitem__(self, index: RoleStr) -&gt; gui.Color:\nreturn self.get_color(index)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_color(\"button\"), self.get_color(\"window\"))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.__setitem__","title":"<code>__setitem__(index: RoleStr, value: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def __setitem__(self, index: RoleStr, value: datatypes.ColorType):\nself.set_color(index, value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.create_dark_palette","title":"<code>create_dark_palette() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>@classmethod\ndef create_dark_palette(cls) -&gt; Self:\npal = cls()\npal.set_color(\"window\", gui.Color(53, 53, 53))\npal.set_color(\"window_text\", \"white\")\npal.set_color(\"window_text\", \"grey\", group=\"disabled\")\npal.set_color(\"base\", gui.Color(25, 25, 25))\npal.set_color(\"alternate_base\", gui.Color(53, 53, 53))\npal.set_color(\"tool_tip_base\", \"slategrey\")\npal.set_color(\"tool_tip_base\", \"slategrey\", group=\"inactive\")\npal.set_color(\"tool_tip_text\", \"white\")\npal.set_color(\"tool_tip_text\", \"white\", group=\"inactive\")\npal.set_color(\"text\", \"white\")\npal.set_color(\"text\", \"grey\", group=\"disabled\")\npal.set_color(\"button\", gui.Color(53, 53, 53))\npal.set_color(\"button_text\", \"white\")\npal.set_color(\"button_text\", \"grey\", group=\"disabled\")\npal.set_color(\"bright_text\", \"red\")\npal.set_color(\"link\", \"dodgerblue\")\npal.set_color(\"highlight\", \"dodgerblue\")\npal.set_color(\"highlight\", gui.Color(80, 80, 80), group=\"disabled\")\npal.set_color(\"highlighted_text\", \"black\")\npal.set_color(\"highlighted_text\", \"grey\", group=\"disabled\")\nreturn pal\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.get_brush","title":"<code>get_brush(role: RoleStr, group: GroupStr = 'active') -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_brush(self, role: RoleStr, group: GroupStr = \"active\") -&gt; gui.Brush:\nreturn gui.Brush(self.brush(GROUP[group], ROLE[role]))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.get_brushes","title":"<code>get_brushes(group: GroupStr = 'active') -&gt; dict[str, gui.Brush]</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_brushes(self, group: GroupStr = \"active\") -&gt; dict[str, gui.Brush]:\nreturn {k: self.get_brush(k, group) for k in ROLE}\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.get_color","title":"<code>get_color(role: RoleStr, group: GroupStr = 'active') -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_color(self, role: RoleStr, group: GroupStr = \"active\") -&gt; gui.Color:\nreturn gui.Color(self.color(GROUP[group], ROLE[role]))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.get_color_group","title":"<code>get_color_group() -&gt; GroupStr</code>","text":"<p>Return color group.</p> <p>Returns:</p> Type Description <code>GroupStr</code> <p>color group</p> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_color_group(self) -&gt; GroupStr:\n\"\"\"Return color group.\n    Returns:\n        color group\n    \"\"\"\nreturn GROUP.inverse[self.colorGroup()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.get_colors","title":"<code>get_colors(group: GroupStr = 'active') -&gt; dict[str, gui.Color]</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_colors(self, group: GroupStr = \"active\") -&gt; dict[str, gui.Color]:\nreturn {k: self.get_color(k, group) for k in ROLE}\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.highlight_inactive","title":"<code>highlight_inactive(enable: bool = True)</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def highlight_inactive(self, enable: bool = True):\nif enable:\ncolor = self.color(self.ColorGroup.Active, self.ColorRole.Highlight)\nelse:\npal = gui.Palette()\ncolor = pal.color(self.ColorGroup.Inactive, self.ColorRole.Highlight)\nself.setColor(self.ColorGroup.Inactive, self.ColorRole.Highlight, color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.inverted","title":"<code>inverted() -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def inverted(self) -&gt; Self:\npal = type(self)()\nfor group in GROUP:\nfor role in ROLE:\ncolor = self.get_color(role, group)\npal.set_color(role, color.inverted(), group)\nreturn pal\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.is_dark","title":"<code>is_dark() -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def is_dark(self) -&gt; bool:\ncol = self.color(self.ColorRole.Window)\nreturn max(col.getRgb()[:3]) &lt; 115\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.set_brush","title":"<code>set_brush(role: RoleStr, brush: datatypes.ColorAndBrushType, group: GroupStr = 'active')</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def set_brush(\nself,\nrole: RoleStr,\nbrush: datatypes.ColorAndBrushType,\ngroup: GroupStr = \"active\",\n):\nif not isinstance(brush, QtGui.QBrush):\nbrush = gui.Brush(colors.get_color(brush))\nself.setBrush(GROUP[group], ROLE[role], brush)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.set_color","title":"<code>set_color(role: RoleStr, color: datatypes.ColorType, group: GroupStr = 'active')</code>","text":"Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def set_color(\nself, role: RoleStr, color: datatypes.ColorType, group: GroupStr = \"active\"\n):\ncolor = colors.get_color(color)\nself.setColor(GROUP[group], ROLE[role], color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.palette.Palette.set_color_group","title":"<code>set_color_group(group: GroupStr, **kwargs: QtGui.QBrush)</code>","text":"<p>Set the color group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>GroupStr</code> <p>color group to use</p> required <code>kwargs</code> <code>QtGui.QBrush</code> <p>keyword arguments passed to setColorGroup</p> <code>{}</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid color group</p> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def set_color_group(self, group: GroupStr, **kwargs: QtGui.QBrush):\n\"\"\"Set the color group.\n    Args:\n        group: color group to use\n        kwargs: keyword arguments passed to setColorGroup\n    Raises:\n        InvalidParamError: invalid color group\n    \"\"\"\nif group not in GROUP:\nraise InvalidParamError(group, GROUP)\nself.setColorGroup(GROUP[group], **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PdfWriter","title":"<code>PdfWriter</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>gui.PagedPaintDeviceMixin</code>, <code>QtGui.QPdfWriter</code></p> Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>class PdfWriter(core.ObjectMixin, gui.PagedPaintDeviceMixin, QtGui.QPdfWriter):\ndef set_desktop_resolution(self):\nprimary = gui.app().primaryScreen()\ndpi = primary.logicalDotsPerInch()\nself.setResolution(int(dpi))\ndef set_page_margins(\nself,\nmargins: datatypes.MarginsFType,\nunit: gui.pagelayout.UnitStr | None = None,\n) -&gt; bool:\nif isinstance(margins, tuple):\nmargins = QtCore.QMarginsF(*margins)\nif unit is None:\nreturn self.setPageMargins(margins)\nif unit not in gui.pagelayout.UNITS:\nraise InvalidParamError(unit, gui.pagelayout.UNITS)\nreturn self.setPageMargins(margins, gui.pagelayout.UNITS[unit])\ndef get_pdf_version(self) -&gt; gui.pagedpaintdevice.PdfVersionStr:\nreturn gui.pagedpaintdevice.PDF_VERSION.inverse[self.pdfVersion()]\ndef set_pdf_version(self, version: gui.pagedpaintdevice.PdfVersionStr):\n\"\"\"Set pdf version.\n        Args:\n            version: pdf version\n        Raises:\n            InvalidParamError: pdf version does not exist\n        \"\"\"\nif version not in gui.pagedpaintdevice.PDF_VERSION:\nraise InvalidParamError(version, gui.pagedpaintdevice.PDF_VERSION)\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION[version])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pdfwriter.PdfWriter.get_pdf_version","title":"<code>get_pdf_version() -&gt; gui.pagedpaintdevice.PdfVersionStr</code>","text":"Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>def get_pdf_version(self) -&gt; gui.pagedpaintdevice.PdfVersionStr:\nreturn gui.pagedpaintdevice.PDF_VERSION.inverse[self.pdfVersion()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pdfwriter.PdfWriter.set_desktop_resolution","title":"<code>set_desktop_resolution()</code>","text":"Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>def set_desktop_resolution(self):\nprimary = gui.app().primaryScreen()\ndpi = primary.logicalDotsPerInch()\nself.setResolution(int(dpi))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pdfwriter.PdfWriter.set_page_margins","title":"<code>set_page_margins(margins: datatypes.MarginsFType, unit: gui.pagelayout.UnitStr | None = None) -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>def set_page_margins(\nself,\nmargins: datatypes.MarginsFType,\nunit: gui.pagelayout.UnitStr | None = None,\n) -&gt; bool:\nif isinstance(margins, tuple):\nmargins = QtCore.QMarginsF(*margins)\nif unit is None:\nreturn self.setPageMargins(margins)\nif unit not in gui.pagelayout.UNITS:\nraise InvalidParamError(unit, gui.pagelayout.UNITS)\nreturn self.setPageMargins(margins, gui.pagelayout.UNITS[unit])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pdfwriter.PdfWriter.set_pdf_version","title":"<code>set_pdf_version(version: gui.pagedpaintdevice.PdfVersionStr)</code>","text":"<p>Set pdf version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>gui.pagedpaintdevice.PdfVersionStr</code> <p>pdf version</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>pdf version does not exist</p> Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>def set_pdf_version(self, version: gui.pagedpaintdevice.PdfVersionStr):\n\"\"\"Set pdf version.\n    Args:\n        version: pdf version\n    Raises:\n        InvalidParamError: pdf version does not exist\n    \"\"\"\nif version not in gui.pagedpaintdevice.PDF_VERSION:\nraise InvalidParamError(version, gui.pagedpaintdevice.PDF_VERSION)\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION[version])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Pen","title":"<code>Pen</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QPen</code></p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>class Pen(serializemixin.SerializeMixin, QtGui.QPen):\ndef __repr__(self):\nreturn get_repr(self, self.get_color())\ndef set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.setColor(color)\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\ndef set_cap_style(self, style: constants.CapStyleStr):\n\"\"\"Set cap style to use.\n        Args:\n            style: cap style to use\n        Raises:\n            InvalidParamError: cap style does not exist\n        \"\"\"\nif style not in constants.CAP_STYLE:\nraise InvalidParamError(style, constants.CAP_STYLE)\nself.setCapStyle(constants.CAP_STYLE[style])\ndef get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n        Returns:\n            cap style\n        \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\ndef set_join_style(self, style: constants.JoinStyleStr):\n\"\"\"Set join style to use.\n        Args:\n            style: join style to use\n        Raises:\n            InvalidParamError: join style does not exist\n        \"\"\"\nif style not in constants.JOIN_STYLE:\nraise InvalidParamError(style, constants.JOIN_STYLE)\nself.setJoinStyle(constants.JOIN_STYLE[style])\ndef get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n        Returns:\n            join style\n        \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\ndef set_style(self, style: constants.PenStyleStr | list[float] | None):\n\"\"\"Set pen style to use.\n        Args:\n            style: pen style to use\n        Raises:\n            InvalidParamError: pen style does not exist\n        \"\"\"\nif isinstance(style, list):\nself.setDashPattern(style)\nelse:\nif style is None:\nstyle = \"none\"\nif style not in constants.PEN_STYLE:\nraise InvalidParamError(style, constants.PEN_STYLE)\nself.setStyle(constants.PEN_STYLE[style])\ndef get_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return current pen style.\n        Returns:\n            pen style\n        \"\"\"\nreturn constants.PEN_STYLE.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_color())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_brush","title":"<code>get_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_cap_style","title":"<code>get_cap_style() -&gt; constants.CapStyleStr</code>","text":"<p>Return current cap style.</p> <p>Returns:</p> Type Description <code>constants.CapStyleStr</code> <p>cap style</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n    Returns:\n        cap style\n    \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_color","title":"<code>get_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_join_style","title":"<code>get_join_style() -&gt; constants.JoinStyleStr</code>","text":"<p>Return current join style.</p> <p>Returns:</p> Type Description <code>constants.JoinStyleStr</code> <p>join style</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n    Returns:\n        join style\n    \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.get_style","title":"<code>get_style() -&gt; constants.PenStyleStr</code>","text":"<p>Return current pen style.</p> <p>Returns:</p> Type Description <code>constants.PenStyleStr</code> <p>pen style</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return current pen style.\n    Returns:\n        pen style\n    \"\"\"\nreturn constants.PEN_STYLE.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_cap_style","title":"<code>set_cap_style(style: constants.CapStyleStr)</code>","text":"<p>Set cap style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CapStyleStr</code> <p>cap style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>cap style does not exist</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_cap_style(self, style: constants.CapStyleStr):\n\"\"\"Set cap style to use.\n    Args:\n        style: cap style to use\n    Raises:\n        InvalidParamError: cap style does not exist\n    \"\"\"\nif style not in constants.CAP_STYLE:\nraise InvalidParamError(style, constants.CAP_STYLE)\nself.setCapStyle(constants.CAP_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_color","title":"<code>set_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.setColor(color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_join_style","title":"<code>set_join_style(style: constants.JoinStyleStr)</code>","text":"<p>Set join style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.JoinStyleStr</code> <p>join style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>join style does not exist</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_join_style(self, style: constants.JoinStyleStr):\n\"\"\"Set join style to use.\n    Args:\n        style: join style to use\n    Raises:\n        InvalidParamError: join style does not exist\n    \"\"\"\nif style not in constants.JOIN_STYLE:\nraise InvalidParamError(style, constants.JOIN_STYLE)\nself.setJoinStyle(constants.JOIN_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pen.Pen.set_style","title":"<code>set_style(style: constants.PenStyleStr | list[float] | None)</code>","text":"<p>Set pen style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | list[float] | None</code> <p>pen style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>pen style does not exist</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_style(self, style: constants.PenStyleStr | list[float] | None):\n\"\"\"Set pen style to use.\n    Args:\n        style: pen style to use\n    Raises:\n        InvalidParamError: pen style does not exist\n    \"\"\"\nif isinstance(style, list):\nself.setDashPattern(style)\nelse:\nif style is None:\nstyle = \"none\"\nif style not in constants.PEN_STYLE:\nraise InvalidParamError(style, constants.PEN_STYLE)\nself.setStyle(constants.PEN_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Picture","title":"<code>Picture</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code>, <code>QtGui.QPicture</code></p> Source code in <code>prettyqt\\gui\\picture.py</code> <pre><code>class Picture(serializemixin.SerializeMixin, gui.PaintDeviceMixin, QtGui.QPicture):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Pixmap","title":"<code>Pixmap</code>","text":"<p>         Bases: <code>PixmapMixin</code>, <code>QtGui.QPixmap</code></p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>class Pixmap(PixmapMixin, QtGui.QPixmap):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PixmapCache","title":"<code>PixmapCache</code>","text":"<p>         Bases: <code>QtGui.QPixmapCache</code></p> Source code in <code>prettyqt\\gui\\pixmapcache.py</code> <pre><code>class PixmapCache(QtGui.QPixmapCache):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PixmapMixin","title":"<code>PixmapMixin</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code></p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>class PixmapMixin(serializemixin.SerializeMixin, gui.PaintDeviceMixin):\ndef __bool__(self):\nreturn not self.isNull()\ndef __eq__(self, other):\nreturn self.toImage() == other.toImage() if isinstance(other, Pixmap) else False\ndef __hash__(self):\nreturn self.cacheKey()\n@classmethod\ndef from_file(cls, path: datatypes.PathType) -&gt; Self:\npath = pathlib.Path(path)\nwith path.open(mode=\"rb\") as f:\ndata = f.read()\n# Create widget\npixmap = cls()\npixmap.loadFromData(QtCore.QByteArray(data))\nreturn pixmap\n@classmethod\ndef from_image(\ncls,\nimg: QtGui.QImage,\ncolor_preference: constants.ColorPreferenceStr = \"auto\",\ndithering: constants.DitherPreferenceStr = \"diffuse\",\nalpha_dithering: constants.AlphaDitherPreferenceStr = \"threshold\",\nmode_preference: constants.ModePreferenceStr = \"auto\",\n) -&gt; Self:\nflag = QtCore.Qt.ImageConversionFlag(0)\nflag |= constants.COLOR_PREFERENCE.inverse[color_preference]\nflag |= constants.DITHER_PREFERENCE.inverse[dithering]\nflag |= constants.ALPHA_DITHER_PREFERENCE.inverse[alpha_dithering]\nflag |= constants.MODE_PREFERENCE.inverse[mode_preference]\nreturn cls(cls.fromImage(img, flag))\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef get_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.rect())\ndef to_image(self) -&gt; gui.Image:\nreturn gui.Image(self.toImage())\ndef rotated(self, rotation: int) -&gt; Pixmap:\nw, h = self.width(), self.height()\npixmap = self.transformed(gui.Transform().rotate(rotation))\nreturn pixmap.copy((pixmap.width() - w) // 2, (pixmap.height() - h) // 2, w, h)\ndef get_image_data_url(self) -&gt; str:\n\"\"\"Render the contents of the pixmap as a data URL (RFC-2397).\n        Returns:\n            datauri : str\n        \"\"\"\ndevice = core.Buffer()\nassert device.open_file(\"read_write\")\nself.save(device, b\"png\")\ndevice.close()\ndata = bytes(device.data())\npayload = base64.b64encode(data).decode(\"ascii\")\nreturn f\"data:image/png;base64,{payload}\"\n@classmethod\ndef create_dot(cls, color: datatypes.ColorType = \"black\", size: int = 16) -&gt; Self:\ncol = colors.get_color(color)\npx = cls(size, size)\npx.fill(QtCore.Qt.GlobalColor.transparent)  # type: ignore\npx_size = px.rect().adjusted(1, 1, -1, -1)\nwith gui.Painter(px) as painter:\npainter.use_antialiasing()\npainter.setBrush(col)\npen_color = gui.Color(15, 15, 15)\npainter.set_pen(color=pen_color, width=1)\npainter.drawEllipse(px_size)\nreturn px\n@classmethod\ndef create_checkerboard_pattern(\ncls, n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType\n) -&gt; Self:\n\"\"\"Construct tileable checkerboard pattern for paint events.\"\"\"\n# Brush will be an nxn checkerboard pattern\npat = cls(2 * n, 2 * n)\nbg0 = colors.get_color(color_1)\nbg1 = colors.get_color(color_2)\nwith gui.Painter(pat) as p:\np.setPen(QtCore.Qt.PenStyle.NoPen)\n# Paint a checkerboard pattern for the color to be overlaid on\np.fillRect(pat.rect(), bg0)\np.fillRect(0, 0, n, n, bg1)\np.fillRect(n, n, 2 * n, 2 * n, bg1)\nreturn pat\n@classmethod\ndef create_char(\ncls,\nchar: str,\nsize: int,\nbackground: datatypes.ColorType = \"black\",\ncolor: datatypes.ColorType = \"white\",\n) -&gt; Self:\npixmap = cls(size, size)\npixmap.fill(QtCore.Qt.GlobalColor.transparent)\nwith gui.Painter(pixmap) as painter:\npainter.setRenderHints(\npainter.RenderHint.Antialiasing\n| painter.RenderHint.TextAntialiasing\n| painter.RenderHint.SmoothPixmapTransform\n)\npainter.set_pen(color=background)\npainter.set_brush(background)\nmargin = 1 + size // 16\ntext_margin = size // 20\nw = size - 2 * margin\nrect = core.Rect(margin, margin, w, w)\npainter.draw_rounded_rect(rect, 30, 30, relative=True)\npainter.set_pen(color=color)\nwith painter.edit_font() as font:  # type: QtGui.QFont\nfont.setPixelSize(size - 2 * margin - 2 * text_margin)\npainter.draw_text(rect, char, alignment=\"center\")\nreturn pixmap\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.__eq__","title":"<code>__eq__(other)</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def __eq__(self, other):\nreturn self.toImage() == other.toImage() if isinstance(other, Pixmap) else False\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.__hash__","title":"<code>__hash__()</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def __hash__(self):\nreturn self.cacheKey()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.create_char","title":"<code>create_char(char: str, size: int, background: datatypes.ColorType = 'black', color: datatypes.ColorType = 'white') -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef create_char(\ncls,\nchar: str,\nsize: int,\nbackground: datatypes.ColorType = \"black\",\ncolor: datatypes.ColorType = \"white\",\n) -&gt; Self:\npixmap = cls(size, size)\npixmap.fill(QtCore.Qt.GlobalColor.transparent)\nwith gui.Painter(pixmap) as painter:\npainter.setRenderHints(\npainter.RenderHint.Antialiasing\n| painter.RenderHint.TextAntialiasing\n| painter.RenderHint.SmoothPixmapTransform\n)\npainter.set_pen(color=background)\npainter.set_brush(background)\nmargin = 1 + size // 16\ntext_margin = size // 20\nw = size - 2 * margin\nrect = core.Rect(margin, margin, w, w)\npainter.draw_rounded_rect(rect, 30, 30, relative=True)\npainter.set_pen(color=color)\nwith painter.edit_font() as font:  # type: QtGui.QFont\nfont.setPixelSize(size - 2 * margin - 2 * text_margin)\npainter.draw_text(rect, char, alignment=\"center\")\nreturn pixmap\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.create_checkerboard_pattern","title":"<code>create_checkerboard_pattern(n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Construct tileable checkerboard pattern for paint events.</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef create_checkerboard_pattern(\ncls, n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType\n) -&gt; Self:\n\"\"\"Construct tileable checkerboard pattern for paint events.\"\"\"\n# Brush will be an nxn checkerboard pattern\npat = cls(2 * n, 2 * n)\nbg0 = colors.get_color(color_1)\nbg1 = colors.get_color(color_2)\nwith gui.Painter(pat) as p:\np.setPen(QtCore.Qt.PenStyle.NoPen)\n# Paint a checkerboard pattern for the color to be overlaid on\np.fillRect(pat.rect(), bg0)\np.fillRect(0, 0, n, n, bg1)\np.fillRect(n, n, 2 * n, 2 * n, bg1)\nreturn pat\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.create_dot","title":"<code>create_dot(color: datatypes.ColorType = 'black', size: int = 16) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef create_dot(cls, color: datatypes.ColorType = \"black\", size: int = 16) -&gt; Self:\ncol = colors.get_color(color)\npx = cls(size, size)\npx.fill(QtCore.Qt.GlobalColor.transparent)  # type: ignore\npx_size = px.rect().adjusted(1, 1, -1, -1)\nwith gui.Painter(px) as painter:\npainter.use_antialiasing()\npainter.setBrush(col)\npen_color = gui.Color(15, 15, 15)\npainter.set_pen(color=pen_color, width=1)\npainter.drawEllipse(px_size)\nreturn px\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.from_file","title":"<code>from_file(path: datatypes.PathType) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef from_file(cls, path: datatypes.PathType) -&gt; Self:\npath = pathlib.Path(path)\nwith path.open(mode=\"rb\") as f:\ndata = f.read()\n# Create widget\npixmap = cls()\npixmap.loadFromData(QtCore.QByteArray(data))\nreturn pixmap\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.from_image","title":"<code>from_image(img: QtGui.QImage, color_preference: constants.ColorPreferenceStr = 'auto', dithering: constants.DitherPreferenceStr = 'diffuse', alpha_dithering: constants.AlphaDitherPreferenceStr = 'threshold', mode_preference: constants.ModePreferenceStr = 'auto') -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef from_image(\ncls,\nimg: QtGui.QImage,\ncolor_preference: constants.ColorPreferenceStr = \"auto\",\ndithering: constants.DitherPreferenceStr = \"diffuse\",\nalpha_dithering: constants.AlphaDitherPreferenceStr = \"threshold\",\nmode_preference: constants.ModePreferenceStr = \"auto\",\n) -&gt; Self:\nflag = QtCore.Qt.ImageConversionFlag(0)\nflag |= constants.COLOR_PREFERENCE.inverse[color_preference]\nflag |= constants.DITHER_PREFERENCE.inverse[dithering]\nflag |= constants.ALPHA_DITHER_PREFERENCE.inverse[alpha_dithering]\nflag |= constants.MODE_PREFERENCE.inverse[mode_preference]\nreturn cls(cls.fromImage(img, flag))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.get_image_data_url","title":"<code>get_image_data_url() -&gt; str</code>","text":"<p>Render the contents of the pixmap as a data URL (RFC-2397).</p> <p>Returns:</p> Name Type Description <code>datauri</code> <code>str</code> <p>str</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def get_image_data_url(self) -&gt; str:\n\"\"\"Render the contents of the pixmap as a data URL (RFC-2397).\n    Returns:\n        datauri : str\n    \"\"\"\ndevice = core.Buffer()\nassert device.open_file(\"read_write\")\nself.save(device, b\"png\")\ndevice.close()\ndata = bytes(device.data())\npayload = base64.b64encode(data).decode(\"ascii\")\nreturn f\"data:image/png;base64,{payload}\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.get_rect","title":"<code>get_rect() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def get_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.rect())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.get_size","title":"<code>get_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.rotated","title":"<code>rotated(rotation: int) -&gt; Pixmap</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def rotated(self, rotation: int) -&gt; Pixmap:\nw, h = self.width(), self.height()\npixmap = self.transformed(gui.Transform().rotate(rotation))\nreturn pixmap.copy((pixmap.width() - w) // 2, (pixmap.height() - h) // 2, w, h)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.pixmap.PixmapMixin.to_image","title":"<code>to_image() -&gt; gui.Image</code>","text":"Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def to_image(self) -&gt; gui.Image:\nreturn gui.Image(self.toImage())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Polygon","title":"<code>Polygon</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QPolygon</code></p> Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>class Polygon(serializemixin.SerializeMixin, QtGui.QPolygon):\ndef __repr__(self):\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef __iter__(self) -&gt; Iterator[core.Point]:\nreturn iter(self.get_point(i) for i in range(self.size()))\ndef __len__(self) -&gt; int:\nreturn self.size()\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, point: datatypes.PointType) -&gt; bool:\nif isinstance(point, tuple):\npoint = core.Point(*point)\nreturn self.containsPoint(point, QtCore.Qt.FillRule.OddEvenFill)\ndef __getitem__(self, index: int) -&gt; core.Point:\nif index &gt;= self.size():\nraise KeyError(index)\nreturn self.get_point(index)\ndef __setitem__(self, index: int, value: datatypes.PointType):\np = core.Point(*value) if isinstance(value, tuple) else value\n# PySide6 workaround: setPoint does not exist\nself.remove(index)\nself.insert(index, p)\ndef __sub__(self, other: QtGui.QPolygon) -&gt; Polygon:\nreturn Polygon(self.subtracted(other))\ndef __and__(self, other: QtGui.QPolygon) -&gt; Polygon:  # &amp;\nreturn Polygon(self.intersected(other))\ndef __xor__(self, other: QtGui.QPolygon) -&gt; Polygon:  # ^\nunion = self | other\nintersect = self &amp; other\nreturn union - intersect\ndef __or__(self, other: QtGui.QPolygon) -&gt; Polygon:  # |\nreturn Polygon(self.united(other))\ndef get_point(self, index: int) -&gt; core.Point:\n# PySide6 doesnt have self.point method\nreturn core.Point(self.value(index))\ndef get_points(self) -&gt; list[core.Point]:\nreturn [self.get_point(i) for i in range(self.size())]\ndef add_points(self, *points: datatypes.PointType):\nfor p in points:\npoint = core.Point(*p) if isinstance(p, tuple) else p\nself.append(point)\ndef get_data_buffer(self, size: int):\nself.resize(size)\nif API == \"pyside6\":\nimport shiboken6\naddress = shiboken6.getCppPointer(self.data())\nbuffer = (ctypes.c_long * 2 * self.size()).from_address(address[0])\nelse:\nbuffer = self.data()\nbuffer.setsize(8 * self.size())\nreturn buffer\n@classmethod\ndef from_xy(cls, xdata, ydata) -&gt; Self:\nimport numpy as np\nsize = len(xdata)\npolyline = cls()\nbuffer = polyline.get_data_buffer(size)\nmemory = np.frombuffer(buffer, np.float64)\nmemory[: (size - 1) * 2 + 1 : 2] = np.array(xdata, dtype=np.float64, copy=False)\nmemory[1 : (size - 1) * 2 + 2 : 2] = np.array(ydata, dtype=np.float64, copy=False)\nreturn polyline\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__and__","title":"<code>__and__(other: QtGui.QPolygon) -&gt; Polygon</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __and__(self, other: QtGui.QPolygon) -&gt; Polygon:  # &amp;\nreturn Polygon(self.intersected(other))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__contains__","title":"<code>__contains__(point: datatypes.PointType) -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __contains__(self, point: datatypes.PointType) -&gt; bool:\nif isinstance(point, tuple):\npoint = core.Point(*point)\nreturn self.containsPoint(point, QtCore.Qt.FillRule.OddEvenFill)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__getitem__","title":"<code>__getitem__(index: int) -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __getitem__(self, index: int) -&gt; core.Point:\nif index &gt;= self.size():\nraise KeyError(index)\nreturn self.get_point(index)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__iter__","title":"<code>__iter__() -&gt; Iterator[core.Point]</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __iter__(self) -&gt; Iterator[core.Point]:\nreturn iter(self.get_point(i) for i in range(self.size()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.size()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__or__","title":"<code>__or__(other: QtGui.QPolygon) -&gt; Polygon</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __or__(self, other: QtGui.QPolygon) -&gt; Polygon:  # |\nreturn Polygon(self.united(other))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__setitem__","title":"<code>__setitem__(index: int, value: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __setitem__(self, index: int, value: datatypes.PointType):\np = core.Point(*value) if isinstance(value, tuple) else value\n# PySide6 workaround: setPoint does not exist\nself.remove(index)\nself.insert(index, p)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__sub__","title":"<code>__sub__(other: QtGui.QPolygon) -&gt; Polygon</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __sub__(self, other: QtGui.QPolygon) -&gt; Polygon:\nreturn Polygon(self.subtracted(other))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.__xor__","title":"<code>__xor__(other: QtGui.QPolygon) -&gt; Polygon</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def __xor__(self, other: QtGui.QPolygon) -&gt; Polygon:  # ^\nunion = self | other\nintersect = self &amp; other\nreturn union - intersect\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.add_points","title":"<code>add_points(*points: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def add_points(self, *points: datatypes.PointType):\nfor p in points:\npoint = core.Point(*p) if isinstance(p, tuple) else p\nself.append(point)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.from_xy","title":"<code>from_xy(xdata, ydata) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>@classmethod\ndef from_xy(cls, xdata, ydata) -&gt; Self:\nimport numpy as np\nsize = len(xdata)\npolyline = cls()\nbuffer = polyline.get_data_buffer(size)\nmemory = np.frombuffer(buffer, np.float64)\nmemory[: (size - 1) * 2 + 1 : 2] = np.array(xdata, dtype=np.float64, copy=False)\nmemory[1 : (size - 1) * 2 + 2 : 2] = np.array(ydata, dtype=np.float64, copy=False)\nreturn polyline\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.get_data_buffer","title":"<code>get_data_buffer(size: int)</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def get_data_buffer(self, size: int):\nself.resize(size)\nif API == \"pyside6\":\nimport shiboken6\naddress = shiboken6.getCppPointer(self.data())\nbuffer = (ctypes.c_long * 2 * self.size()).from_address(address[0])\nelse:\nbuffer = self.data()\nbuffer.setsize(8 * self.size())\nreturn buffer\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.get_point","title":"<code>get_point(index: int) -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def get_point(self, index: int) -&gt; core.Point:\n# PySide6 doesnt have self.point method\nreturn core.Point(self.value(index))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygon.Polygon.get_points","title":"<code>get_points() -&gt; list[core.Point]</code>","text":"Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>def get_points(self) -&gt; list[core.Point]:\nreturn [self.get_point(i) for i in range(self.size())]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.PolygonF","title":"<code>PolygonF</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QPolygonF</code></p> Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>class PolygonF(serializemixin.SerializeMixin, QtGui.QPolygonF):\ndef __repr__(self):\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef __iter__(self) -&gt; Iterator[core.PointF]:\nreturn iter(self.get_point(i) for i in range(self.size()))\ndef __len__(self) -&gt; int:\nreturn self.size()\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, point: datatypes.PointFType) -&gt; bool:\nif isinstance(point, tuple):\npoint = core.PointF(*point)\nreturn self.containsPoint(point, QtCore.Qt.FillRule.OddEvenFill)\ndef __getitem__(self, index: int) -&gt; core.PointF:\nif index &gt;= self.size():\nraise KeyError(index)\nreturn self.get_point(index)\n# def __setitem__(self, index: int, value: datatypes.PointType):\n#     if isinstance(value, tuple):\n#         self.setPoint(index, *value)\n#     else:\n#         self.setPoint(index, value)\ndef __sub__(self, other: QtGui.QPolygonF) -&gt; Self:\nreturn type(self)(self.subtracted(other))\ndef __and__(self, other: QtGui.QPolygonF) -&gt; Self:  # &amp;\nreturn type(self)(self.intersected(other))\ndef __xor__(self, other: QtGui.QPolygonF) -&gt; Self:  # ^\nunion = self | other\nintersect = self &amp; other\nreturn union - intersect\ndef __or__(self, other: QtGui.QPolygonF) -&gt; Self:  # |\nreturn type(self)(self.united(other))\ndef __eq__(self, other: object) -&gt; bool:\nreturn (\nlist(self) == [other.at(i) for i in range(other.size())]\nif isinstance(other, type(self))\nelse False\n)\ndef get_point(self, index: int) -&gt; core.PointF:\nreturn core.PointF(self.at(index))\ndef get_points(self) -&gt; list[core.PointF]:\nreturn [self.get_point(i) for i in range(self.size())]\ndef add_points(self, *points: datatypes.PointFType):\nfor p in points:\npoint = core.PointF(*p) if isinstance(p, tuple) else p\nself.append(point)\ndef to_polygon(self) -&gt; gui.Polygon:\nreturn gui.Polygon(self.toPolygon())\n@classmethod\ndef create_star(cls, scale: int = 1) -&gt; Self:\npoly = cls()\npoly.append(core.PointF(0.5 * scale, 0.0))\nfor i in range(1, 5):\nval = 0.8 * i * math.pi\npoint = core.PointF(0.5 * scale * math.cos(val), 0.5 * scale * math.sin(val))\npoly.append(point)\nreturn poly\n@classmethod\ndef create_diamond(cls, scale: int = 1) -&gt; Self:\npoints = [\ncore.PointF(-0.1 * scale, 0.0),\ncore.PointF(0.0, -0.1 * scale),\ncore.PointF(0.1 * scale, 0.0),\ncore.PointF(0.0, 0.1 * scale),\ncore.PointF(-0.1 * scale, 0.0),\n]\npoly = gui.PolygonF()\npoly.add_points(*points)\nreturn poly\ndef get_data_buffer(self, size: int):\nself.resize(size)\nif API == \"pyside6\":\nimport shiboken6\naddress = shiboken6.getCppPointer(self.data())\nbuffer = (ctypes.c_double * 2 * self.size()).from_address(address[0])\nelse:\nbuffer = self.data()\nbuffer.setsize(16 * self.size())\nreturn buffer\n@classmethod\ndef from_xy(cls, xdata, ydata) -&gt; Self:\nimport numpy as np\nsize = len(xdata)\npolyline = cls()\nbuffer = polyline.get_data_buffer(size)\nmemory = np.frombuffer(buffer, np.float64)\nmemory[: (size - 1) * 2 + 1 : 2] = np.array(xdata, dtype=np.float64, copy=False)\nmemory[1 : (size - 1) * 2 + 2 : 2] = np.array(ydata, dtype=np.float64, copy=False)\nreturn polyline\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__and__","title":"<code>__and__(other: QtGui.QPolygonF) -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __and__(self, other: QtGui.QPolygonF) -&gt; Self:  # &amp;\nreturn type(self)(self.intersected(other))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__contains__","title":"<code>__contains__(point: datatypes.PointFType) -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __contains__(self, point: datatypes.PointFType) -&gt; bool:\nif isinstance(point, tuple):\npoint = core.PointF(*point)\nreturn self.containsPoint(point, QtCore.Qt.FillRule.OddEvenFill)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\nreturn (\nlist(self) == [other.at(i) for i in range(other.size())]\nif isinstance(other, type(self))\nelse False\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__getitem__","title":"<code>__getitem__(index: int) -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __getitem__(self, index: int) -&gt; core.PointF:\nif index &gt;= self.size():\nraise KeyError(index)\nreturn self.get_point(index)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__iter__","title":"<code>__iter__() -&gt; Iterator[core.PointF]</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __iter__(self) -&gt; Iterator[core.PointF]:\nreturn iter(self.get_point(i) for i in range(self.size()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.size()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__or__","title":"<code>__or__(other: QtGui.QPolygonF) -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __or__(self, other: QtGui.QPolygonF) -&gt; Self:  # |\nreturn type(self)(self.united(other))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__sub__","title":"<code>__sub__(other: QtGui.QPolygonF) -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __sub__(self, other: QtGui.QPolygonF) -&gt; Self:\nreturn type(self)(self.subtracted(other))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.__xor__","title":"<code>__xor__(other: QtGui.QPolygonF) -&gt; Self</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def __xor__(self, other: QtGui.QPolygonF) -&gt; Self:  # ^\nunion = self | other\nintersect = self &amp; other\nreturn union - intersect\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.add_points","title":"<code>add_points(*points: datatypes.PointFType)</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def add_points(self, *points: datatypes.PointFType):\nfor p in points:\npoint = core.PointF(*p) if isinstance(p, tuple) else p\nself.append(point)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.create_diamond","title":"<code>create_diamond(scale: int = 1) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>@classmethod\ndef create_diamond(cls, scale: int = 1) -&gt; Self:\npoints = [\ncore.PointF(-0.1 * scale, 0.0),\ncore.PointF(0.0, -0.1 * scale),\ncore.PointF(0.1 * scale, 0.0),\ncore.PointF(0.0, 0.1 * scale),\ncore.PointF(-0.1 * scale, 0.0),\n]\npoly = gui.PolygonF()\npoly.add_points(*points)\nreturn poly\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.create_star","title":"<code>create_star(scale: int = 1) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>@classmethod\ndef create_star(cls, scale: int = 1) -&gt; Self:\npoly = cls()\npoly.append(core.PointF(0.5 * scale, 0.0))\nfor i in range(1, 5):\nval = 0.8 * i * math.pi\npoint = core.PointF(0.5 * scale * math.cos(val), 0.5 * scale * math.sin(val))\npoly.append(point)\nreturn poly\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.from_xy","title":"<code>from_xy(xdata, ydata) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>@classmethod\ndef from_xy(cls, xdata, ydata) -&gt; Self:\nimport numpy as np\nsize = len(xdata)\npolyline = cls()\nbuffer = polyline.get_data_buffer(size)\nmemory = np.frombuffer(buffer, np.float64)\nmemory[: (size - 1) * 2 + 1 : 2] = np.array(xdata, dtype=np.float64, copy=False)\nmemory[1 : (size - 1) * 2 + 2 : 2] = np.array(ydata, dtype=np.float64, copy=False)\nreturn polyline\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.get_data_buffer","title":"<code>get_data_buffer(size: int)</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def get_data_buffer(self, size: int):\nself.resize(size)\nif API == \"pyside6\":\nimport shiboken6\naddress = shiboken6.getCppPointer(self.data())\nbuffer = (ctypes.c_double * 2 * self.size()).from_address(address[0])\nelse:\nbuffer = self.data()\nbuffer.setsize(16 * self.size())\nreturn buffer\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.get_point","title":"<code>get_point(index: int) -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def get_point(self, index: int) -&gt; core.PointF:\nreturn core.PointF(self.at(index))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.get_points","title":"<code>get_points() -&gt; list[core.PointF]</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def get_points(self) -&gt; list[core.PointF]:\nreturn [self.get_point(i) for i in range(self.size())]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.polygonf.PolygonF.to_polygon","title":"<code>to_polygon() -&gt; gui.Polygon</code>","text":"Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>def to_polygon(self) -&gt; gui.Polygon:\nreturn gui.Polygon(self.toPolygon())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.RadialGradient","title":"<code>RadialGradient</code>","text":"<p>         Bases: <code>gui.GradientMixin</code>, <code>QtGui.QRadialGradient</code></p> Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>class RadialGradient(gui.GradientMixin, QtGui.QRadialGradient):\ndef __repr__(self):\nreturn get_repr(\nself,\nself.get_center(),\nself.centerRadius(),\nself.get_focal_point(),\nself.focalRadius(),\n)\ndef serialize_fields(self):\nreturn dict(\ncenter_radius=self.centerRadius(),\nradius=self.radius(),\nfocal_radius=self.focalRadius(),\ncenter=self.center(),\nfocal_point=self.focalPoint(),\n)\ndef get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\ndef get_focal_point(self) -&gt; core.PointF:\nreturn core.PointF(self.focalPoint())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.radialgradient.RadialGradient.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself,\nself.get_center(),\nself.centerRadius(),\nself.get_focal_point(),\nself.focalRadius(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.radialgradient.RadialGradient.get_center","title":"<code>get_center() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>def get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.radialgradient.RadialGradient.get_focal_point","title":"<code>get_focal_point() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>def get_focal_point(self) -&gt; core.PointF:\nreturn core.PointF(self.focalPoint())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.radialgradient.RadialGradient.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\ncenter_radius=self.centerRadius(),\nradius=self.radius(),\nfocal_radius=self.focalRadius(),\ncenter=self.center(),\nfocal_point=self.focalPoint(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.RasterWindow","title":"<code>RasterWindow</code>","text":"<p>         Bases: <code>gui.PaintDeviceWindowMixin</code>, <code>QtGui.QRasterWindow</code></p> Source code in <code>prettyqt\\gui\\rasterwindow.py</code> <pre><code>class RasterWindow(gui.PaintDeviceWindowMixin, QtGui.QRasterWindow):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Region","title":"<code>Region</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QRegion</code></p> Source code in <code>prettyqt\\gui\\region.py</code> <pre><code>class Region(serializemixin.SerializeMixin, QtGui.QRegion):\ndef __repr__(self):\nreturn get_repr(self, self.get_bounding_rect(), self.get_shape())\ndef get_bounding_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.boundingRect())\ndef get_shape(self) -&gt; RegionTypeStr:  # workaround for not being able to get shape\nreturn \"rectangle\" if self == Region(self.get_bounding_rect()) else \"ellipse\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.region.Region.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\region.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_bounding_rect(), self.get_shape())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.region.Region.get_bounding_rect","title":"<code>get_bounding_rect() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\region.py</code> <pre><code>def get_bounding_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.boundingRect())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.region.Region.get_shape","title":"<code>get_shape() -&gt; RegionTypeStr</code>","text":"Source code in <code>prettyqt\\gui\\region.py</code> <pre><code>def get_shape(self) -&gt; RegionTypeStr:  # workaround for not being able to get shape\nreturn \"rectangle\" if self == Region(self.get_bounding_rect()) else \"ellipse\"\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.RegularExpressionValidator","title":"<code>RegularExpressionValidator</code>","text":"<p>         Bases: <code>gui.ValidatorMixin</code>, <code>QtGui.QRegularExpressionValidator</code></p> Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>class RegularExpressionValidator(gui.ValidatorMixin, QtGui.QRegularExpressionValidator):\ndef __repr__(self):\nreturn get_repr(self, self.regularExpression())\ndef __getstate__(self):\nreturn dict(pattern=core.RegularExpression(self.regularExpression()))\ndef __setstate__(self, state):\nself.setRegularExpression(state[\"pattern\"])\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __eq__(self, other: object):\nreturn (\nself.regularExpression() == other.regularExpression()\nif isinstance(other, type(self))\nelse False\n)\ndef set_regex(self, regex: str | core.RegularExpression, flags=0):\nif isinstance(regex, str):\nregex = core.RegularExpression(regex, flags)\nself.setRegularExpression(regex)\ndef get_regex(self) -&gt; str:\nval = self.regularExpression()\nreturn val.pattern()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def __eq__(self, other: object):\nreturn (\nself.regularExpression() == other.regularExpression()\nif isinstance(other, type(self))\nelse False\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def __getstate__(self):\nreturn dict(pattern=core.RegularExpression(self.regularExpression()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.regularExpression())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def __setstate__(self, state):\nself.setRegularExpression(state[\"pattern\"])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.get_regex","title":"<code>get_regex() -&gt; str</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def get_regex(self) -&gt; str:\nval = self.regularExpression()\nreturn val.pattern()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.regularexpressionvalidator.RegularExpressionValidator.set_regex","title":"<code>set_regex(regex: str | core.RegularExpression, flags: str | core.RegularExpression = 0)</code>","text":"Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>def set_regex(self, regex: str | core.RegularExpression, flags=0):\nif isinstance(regex, str):\nregex = core.RegularExpression(regex, flags)\nself.setRegularExpression(regex)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Screen","title":"<code>Screen</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>class Screen:\ndef __init__(self, item: QtGui.QScreen):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.geometry())\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef get_available_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.availableGeometry())\ndef get_available_size(self) -&gt; core.Size:\nreturn core.Size(self.availableSize())\ndef get_available_virtual_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.availableVirtualGeometry())\ndef get_available_virtual_size(self) -&gt; core.Size:\nreturn core.Size(self.availableVirtualSize())\ndef get_virtual_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.virtualGeometry())\ndef get_virtual_size(self) -&gt; core.Size:\nreturn core.Size(self.virtualSize())\ndef get_native_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.nativeOrientation()]\ndef get_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.orientation()]\ndef get_primary_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.primaryOrientation()]\ndef get_physical_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.physicalSize())\ndef get_angle_between(\nself,\norientation_1: constants.ScreenOrientationStr,\norientation_2: constants.ScreenOrientationStr,\n):\nif orientation_1 not in constants.SCREEN_ORIENTATION:\nraise InvalidParamError(orientation_1, constants.SCREEN_ORIENTATION)\nif orientation_2 not in constants.SCREEN_ORIENTATION:\nraise InvalidParamError(orientation_2, constants.SCREEN_ORIENTATION)\nself.angleBetween(\nconstants.SCREEN_ORIENTATION[orientation_1],\nconstants.SCREEN_ORIENTATION[orientation_2],\n)\ndef grab_window(\nself,\nwindow: int = 0,\nx: int = 0,\ny: int = 0,\nwidth: int | None = None,\nheight: int | None = None,\n) -&gt; gui.Pixmap:\nif width is None:\nwidth = -1\nif height is None:\nheight = -1\npx = self.grabWindow(window, x, y, width, height)\nreturn gui.Pixmap(px)\ndef get_virtual_siblings(self) -&gt; list[Screen]:\nreturn [Screen(i) for i in self.virtualSiblings()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.screen.Screen.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.__init__","title":"<code>__init__(item: QtGui.QScreen)</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def __init__(self, item: QtGui.QScreen):\nself.item = item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_angle_between","title":"<code>get_angle_between(orientation_1: constants.ScreenOrientationStr, orientation_2: constants.ScreenOrientationStr)</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_angle_between(\nself,\norientation_1: constants.ScreenOrientationStr,\norientation_2: constants.ScreenOrientationStr,\n):\nif orientation_1 not in constants.SCREEN_ORIENTATION:\nraise InvalidParamError(orientation_1, constants.SCREEN_ORIENTATION)\nif orientation_2 not in constants.SCREEN_ORIENTATION:\nraise InvalidParamError(orientation_2, constants.SCREEN_ORIENTATION)\nself.angleBetween(\nconstants.SCREEN_ORIENTATION[orientation_1],\nconstants.SCREEN_ORIENTATION[orientation_2],\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_available_geometry","title":"<code>get_available_geometry() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_available_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.availableGeometry())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_available_size","title":"<code>get_available_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_available_size(self) -&gt; core.Size:\nreturn core.Size(self.availableSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_available_virtual_geometry","title":"<code>get_available_virtual_geometry() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_available_virtual_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.availableVirtualGeometry())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_available_virtual_size","title":"<code>get_available_virtual_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_available_virtual_size(self) -&gt; core.Size:\nreturn core.Size(self.availableVirtualSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_geometry","title":"<code>get_geometry() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.geometry())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_native_orientation","title":"<code>get_native_orientation() -&gt; constants.ScreenOrientationStr</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_native_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.nativeOrientation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_orientation","title":"<code>get_orientation() -&gt; constants.ScreenOrientationStr</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_physical_size","title":"<code>get_physical_size() -&gt; core.SizeF</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_physical_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.physicalSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_primary_orientation","title":"<code>get_primary_orientation() -&gt; constants.ScreenOrientationStr</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_primary_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.primaryOrientation()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_size","title":"<code>get_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_virtual_geometry","title":"<code>get_virtual_geometry() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_virtual_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.virtualGeometry())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_virtual_siblings","title":"<code>get_virtual_siblings() -&gt; list[Screen]</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_virtual_siblings(self) -&gt; list[Screen]:\nreturn [Screen(i) for i in self.virtualSiblings()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.get_virtual_size","title":"<code>get_virtual_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def get_virtual_size(self) -&gt; core.Size:\nreturn core.Size(self.virtualSize())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.screen.Screen.grab_window","title":"<code>grab_window(window: int = 0, x: int = 0, y: int = 0, width: int | None = None, height: int | None = None) -&gt; gui.Pixmap</code>","text":"Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>def grab_window(\nself,\nwindow: int = 0,\nx: int = 0,\ny: int = 0,\nwidth: int | None = None,\nheight: int | None = None,\n) -&gt; gui.Pixmap:\nif width is None:\nwidth = -1\nif height is None:\nheight = -1\npx = self.grabWindow(window, x, y, width, height)\nreturn gui.Pixmap(px)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.SessionManager","title":"<code>SessionManager</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>class SessionManager(core.ObjectMixin):\ndef __init__(self, item: QtGui.QSessionManager):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef set_restart_hint(self, style: RestartHintStr):\n\"\"\"Set the restart hint.\n        Args:\n            style: restart hint\n        Raises:\n            InvalidParamError: restart hint does not exist\n        \"\"\"\nif style not in RESTART_HINT:\nraise InvalidParamError(style, RESTART_HINT)\nself.setRestartHint(RESTART_HINT[style])\ndef get_restart_hint(self) -&gt; RestartHintStr:\n\"\"\"Return current restart hint.\n        Returns:\n            restart hint\n        \"\"\"\nreturn RESTART_HINT.inverse[self.restartHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.__init__","title":"<code>__init__(item: QtGui.QSessionManager)</code>","text":"Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def __init__(self, item: QtGui.QSessionManager):\nself.item = item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.get_restart_hint","title":"<code>get_restart_hint() -&gt; RestartHintStr</code>","text":"<p>Return current restart hint.</p> <p>Returns:</p> Type Description <code>RestartHintStr</code> <p>restart hint</p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def get_restart_hint(self) -&gt; RestartHintStr:\n\"\"\"Return current restart hint.\n    Returns:\n        restart hint\n    \"\"\"\nreturn RESTART_HINT.inverse[self.restartHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.sessionmanager.SessionManager.set_restart_hint","title":"<code>set_restart_hint(style: RestartHintStr)</code>","text":"<p>Set the restart hint.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>RestartHintStr</code> <p>restart hint</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>restart hint does not exist</p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def set_restart_hint(self, style: RestartHintStr):\n\"\"\"Set the restart hint.\n    Args:\n        style: restart hint\n    Raises:\n        InvalidParamError: restart hint does not exist\n    \"\"\"\nif style not in RESTART_HINT:\nraise InvalidParamError(style, RESTART_HINT)\nself.setRestartHint(RESTART_HINT[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Shortcut","title":"<code>Shortcut</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtGui.QShortcut</code></p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>class Shortcut(core.ObjectMixin, QtGui.QShortcut):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nargs = (gui.KeySequence(args[0]), *rest)\nsuper().__init__(*args, **kwargs)\ndef __str__(self):\nreturn self.key().toString()\ndef set_context(self, context: constants.ShortcutContextStr):\n\"\"\"Set shortcut context.\n        Args:\n            context: shortcut context\n        Raises:\n            InvalidParamError: shortcut context does not exist\n        \"\"\"\nif context not in constants.SHORTCUT_CONTEXT:\nraise InvalidParamError(context, constants.SHORTCUT_CONTEXT)\nself.setContext(constants.SHORTCUT_CONTEXT[context])\ndef get_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n        Returns:\n            shortcut context\n        \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[self.context()]\ndef set_key(\nself,\nkey: datatypes.KeyCombinationType,\n):\nkeysequence = gui.KeySequence(key)\nself.setKey(keysequence)\ndef set_keys(self, keys: list[datatypes.KeyCombinationType]):\nkeysequences = [gui.KeySequence(key) for key in keys]\nself.setKeys(keysequences)\ndef get_key(self) -&gt; gui.KeySequence:\n\"\"\"Return the shortcut's key sequence.\n        Returns:\n            Key sequence\n        \"\"\"\nreturn gui.KeySequence(self.key())\ndef get_keys(self) -&gt; list[gui.KeySequence]:\nreturn [gui.KeySequence(i) for i in self.keys()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nargs = (gui.KeySequence(args[0]), *rest)\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def __str__(self):\nreturn self.key().toString()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.get_context","title":"<code>get_context() -&gt; constants.ShortcutContextStr</code>","text":"<p>Return shortcut context.</p> <p>Returns:</p> Type Description <code>constants.ShortcutContextStr</code> <p>shortcut context</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n    Returns:\n        shortcut context\n    \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[self.context()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.get_key","title":"<code>get_key() -&gt; gui.KeySequence</code>","text":"<p>Return the shortcut's key sequence.</p> <p>Returns:</p> Type Description <code>gui.KeySequence</code> <p>Key sequence</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_key(self) -&gt; gui.KeySequence:\n\"\"\"Return the shortcut's key sequence.\n    Returns:\n        Key sequence\n    \"\"\"\nreturn gui.KeySequence(self.key())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.get_keys","title":"<code>get_keys() -&gt; list[gui.KeySequence]</code>","text":"Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_keys(self) -&gt; list[gui.KeySequence]:\nreturn [gui.KeySequence(i) for i in self.keys()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.set_context","title":"<code>set_context(context: constants.ShortcutContextStr)</code>","text":"<p>Set shortcut context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>constants.ShortcutContextStr</code> <p>shortcut context</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>shortcut context does not exist</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def set_context(self, context: constants.ShortcutContextStr):\n\"\"\"Set shortcut context.\n    Args:\n        context: shortcut context\n    Raises:\n        InvalidParamError: shortcut context does not exist\n    \"\"\"\nif context not in constants.SHORTCUT_CONTEXT:\nraise InvalidParamError(context, constants.SHORTCUT_CONTEXT)\nself.setContext(constants.SHORTCUT_CONTEXT[context])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.set_key","title":"<code>set_key(key: datatypes.KeyCombinationType)</code>","text":"Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def set_key(\nself,\nkey: datatypes.KeyCombinationType,\n):\nkeysequence = gui.KeySequence(key)\nself.setKey(keysequence)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.shortcut.Shortcut.set_keys","title":"<code>set_keys(keys: list[datatypes.KeyCombinationType])</code>","text":"Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def set_keys(self, keys: list[datatypes.KeyCombinationType]):\nkeysequences = [gui.KeySequence(key) for key in keys]\nself.setKeys(keysequences)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.StandardItem","title":"<code>StandardItem</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QStandardItem</code></p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>class StandardItem(serializemixin.SerializeMixin, QtGui.QStandardItem):\ndef __repr__(self):\nreturn get_repr(self, self.get_icon(), self.text())\ndef serialize_fields(self):\nreturn dict(\ntext=self.text(),\ntool_tip=self.toolTip(),\nstatus_tip=self.statusTip(),\nicon=self.get_icon(),\ndata=self.data(),\n)\ndef __getitem__(\nself, index: int | tuple[int, int] | QtCore.QModelIndex\n) -&gt; QtGui.QStandardItem:\nmatch index:\ncase int():\nreturn self.child(index)\ncase tuple():\nreturn self.child(*index)\ncase _:\nraise KeyError(index)\ndef __delitem__(self, index: int | tuple[int, int]):\nitem = self.takeRow(index) if isinstance(index, int) else self.takeChild(*index)\nif item is None:\nraise KeyError(index)\nreturn item\ndef __iter__(self) -&gt; Iterator[QtGui.QStandardItem]:\nreturn iter(self.get_children())\ndef __add__(self, other: str | QtGui.QStandardItem) -&gt; StandardItem:\nif isinstance(other, QtGui.QStandardItem | str):\nself.add(other)\nreturn self\nraise TypeError(\"wrong type for addition\")\ndef get_children(self) -&gt; list[QtGui.QStandardItem]:\nreturn [self.child(index) for index in range(self.rowCount())]\ndef add(self, *item: str | QtGui.QStandardItem):\nfor i in item:\nnew_item = gui.StandardItem(i) if isinstance(i, str) else i\nself.appendRow([new_item])\ndef clone(self):\nitem = type(self)()\ncore.DataStream.copy_data(self, item)\nassert type(item) == StandardItem\nreturn item\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        Raises:\n            InvalidParamError: invalid checkstate\n        \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\ndef get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_data(self, data: Any, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(data, role)\ndef get_data(self, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\nself.setToolTip(tooltip)\ndef set_size_hint(self, hint: datatypes.SizeType):\nif isinstance(hint, tuple):\nhint = QtCore.QSize(*hint)\nself.setSizeHint(hint)\ndef add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselectable: bool = True,\nenabled: bool = True,\neditable: bool = False,\nstatus_tip: str | None = None,\ntool_tip: str | None = None,\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: QtCore.Qt.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; StandardItem:\nitem = StandardItem(name)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(v, k)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif enabled:\nitem.setEnabled(enabled)\nif editable:\nitem.setEditable(editable)\nif selectable:\nitem.setSelectable(selectable)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.appendRow([item])\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.__add__","title":"<code>__add__(other: str | QtGui.QStandardItem) -&gt; StandardItem</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def __add__(self, other: str | QtGui.QStandardItem) -&gt; StandardItem:\nif isinstance(other, QtGui.QStandardItem | str):\nself.add(other)\nreturn self\nraise TypeError(\"wrong type for addition\")\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.__delitem__","title":"<code>__delitem__(index: int | tuple[int, int])</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def __delitem__(self, index: int | tuple[int, int]):\nitem = self.takeRow(index) if isinstance(index, int) else self.takeChild(*index)\nif item is None:\nraise KeyError(index)\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.__getitem__","title":"<code>__getitem__(index: int | tuple[int, int] | QtCore.QModelIndex) -&gt; QtGui.QStandardItem</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def __getitem__(\nself, index: int | tuple[int, int] | QtCore.QModelIndex\n) -&gt; QtGui.QStandardItem:\nmatch index:\ncase int():\nreturn self.child(index)\ncase tuple():\nreturn self.child(*index)\ncase _:\nraise KeyError(index)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.__iter__","title":"<code>__iter__() -&gt; Iterator[QtGui.QStandardItem]</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtGui.QStandardItem]:\nreturn iter(self.get_children())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_icon(), self.text())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.add","title":"<code>add(*item: str | QtGui.QStandardItem)</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def add(self, *item: str | QtGui.QStandardItem):\nfor i in item:\nnew_item = gui.StandardItem(i) if isinstance(i, str) else i\nself.appendRow([new_item])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.add_item","title":"<code>add_item(name: str = '', icon: datatypes.IconType = None, data: dict | None = None, foreground: QtGui.QBrush | None = None, background: QtGui.QBrush | None = None, font: QtGui.QFont | None = None, selectable: bool = True, enabled: bool = True, editable: bool = False, status_tip: str | None = None, tool_tip: str | None = None, whats_this: str | None = None, checkstate: constants.StateStr | None = None, flags: QtCore.Qt.ItemFlag | None = None, size_hint: datatypes.SizeType | None = None, is_user_type: bool = False) -&gt; StandardItem</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselectable: bool = True,\nenabled: bool = True,\neditable: bool = False,\nstatus_tip: str | None = None,\ntool_tip: str | None = None,\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: QtCore.Qt.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; StandardItem:\nitem = StandardItem(name)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(v, k)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif enabled:\nitem.setEnabled(enabled)\nif editable:\nitem.setEditable(editable)\nif selectable:\nitem.setSelectable(selectable)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.appendRow([item])\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.clone","title":"<code>clone()</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def clone(self):\nitem = type(self)()\ncore.DataStream.copy_data(self, item)\nassert type(item) == StandardItem\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_background","title":"<code>get_background() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.StateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.StateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_children","title":"<code>get_children() -&gt; list[QtGui.QStandardItem]</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_children(self) -&gt; list[QtGui.QStandardItem]:\nreturn [self.child(index) for index in range(self.rowCount())]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_data","title":"<code>get_data(role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_data(self, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_foreground","title":"<code>get_foreground() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\ntext=self.text(),\ntool_tip=self.toolTip(),\nstatus_tip=self.statusTip(),\nicon=self.get_icon(),\ndata=self.data(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_checkstate","title":"<code>set_checkstate(state: constants.StateStr)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.StateStr</code> <p>checkstate to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid checkstate</p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    Raises:\n        InvalidParamError: invalid checkstate\n    \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_data","title":"<code>set_data(data: Any, role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_data(self, data: Any, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(data, role)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_size_hint","title":"<code>set_size_hint(hint: datatypes.SizeType)</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_size_hint(self, hint: datatypes.SizeType):\nif isinstance(hint, tuple):\nhint = QtCore.QSize(*hint)\nself.setSizeHint(hint)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditem.StandardItem.set_tooltip","title":"<code>set_tooltip(tooltip: str | datatypes.PathType, size: datatypes.SizeType | None = None)</code>","text":"Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\nself.setToolTip(tooltip)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.StandardItemModel","title":"<code>StandardItemModel</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code>, <code>QtGui.QStandardItemModel</code></p> Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>class StandardItemModel(core.AbstractItemModelMixin, QtGui.QStandardItemModel):\ndef __getitem__(\nself, index: int | tuple[int, int] | QtCore.QModelIndex\n) -&gt; QtGui.QStandardItem:\nmatch index:\ncase int():\nitem = self.item(index)\ncase tuple():\nitem = self.item(*index)\ncase _:\nitem = self.itemFromIndex(index)\nif item is None:\nraise KeyError(index)\nreturn item\ndef __delitem__(self, index: int | tuple[int, int]):\nmatch index:\ncase int():\nitem = self.takeRow(index)\ncase tuple():\nitem = self.takeItem(*index)\nif item is None:\nraise KeyError(index)\nreturn item\ndef __iter__(self) -&gt; Iterator[QtGui.QStandardItem]:\nreturn iter(self.get_children())\ndef __getstate__(self):\nreturn dict(items=self.get_children())\ndef __setstate__(self, state):\nfor item in state[\"items\"]:\nself.appendRow([item])\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __add__(self, other: str | QtGui.QStandardItem) -&gt; StandardItemModel:\nif isinstance(other, QtGui.QStandardItem | str):\nself.add(other)\nreturn self\nraise TypeError(\"wrong type for addition\")\n@classmethod\ndef create_single_item_model(cls, *args, **kwargs) -&gt; Self:\nmdl = cls(1, 1)\nmdl.add_item(*args, **kwargs)\nreturn mdl\ndef get_children(self) -&gt; list[QtGui.QStandardItem]:\nreturn [self.item(index) for index in range(self.rowCount())]\ndef add(self, *item: str | QtGui.QStandardItem):\nfor i in item:\nnew_item = gui.StandardItem(i) if isinstance(i, str) else i\nself.appendRow([new_item])\ndef find_items(\nself,\ntext: str,\ncolumn: int = 0,\nmode: constants.MatchFlagStr = \"exact\",\nrecursive: bool = False,\ncase_sensitive: bool = False,\n) -&gt; list[QtGui.QStandardItem]:\nif mode not in constants.MATCH_FLAGS:\nraise InvalidParamError(mode, constants.MATCH_FLAGS)\nflag = constants.MATCH_FLAGS[mode]\nif recursive:\nflag |= QtCore.Qt.MatchFlag.MatchRecursive\nif case_sensitive:\nflag |= QtCore.Qt.MatchFlag.MatchCaseSensitive\nreturn self.findItems(text, flag, column)  # type: ignore\ndef add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselectable: bool = True,\nenabled: bool = True,\neditable: bool = False,\nstatus_tip: str | None = None,\ntool_tip: str | None = None,\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: QtCore.Qt.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; gui.StandardItem:\nitem = gui.StandardItem(name)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(v, k)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif enabled:\nitem.setEnabled(enabled)\nif editable:\nitem.setEditable(editable)\nif selectable:\nitem.setSelectable(selectable)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.appendRow([item])\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__add__","title":"<code>__add__(other: str | QtGui.QStandardItem) -&gt; StandardItemModel</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __add__(self, other: str | QtGui.QStandardItem) -&gt; StandardItemModel:\nif isinstance(other, QtGui.QStandardItem | str):\nself.add(other)\nreturn self\nraise TypeError(\"wrong type for addition\")\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__delitem__","title":"<code>__delitem__(index: int | tuple[int, int])</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __delitem__(self, index: int | tuple[int, int]):\nmatch index:\ncase int():\nitem = self.takeRow(index)\ncase tuple():\nitem = self.takeItem(*index)\nif item is None:\nraise KeyError(index)\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__getitem__","title":"<code>__getitem__(index: int | tuple[int, int] | QtCore.QModelIndex) -&gt; QtGui.QStandardItem</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __getitem__(\nself, index: int | tuple[int, int] | QtCore.QModelIndex\n) -&gt; QtGui.QStandardItem:\nmatch index:\ncase int():\nitem = self.item(index)\ncase tuple():\nitem = self.item(*index)\ncase _:\nitem = self.itemFromIndex(index)\nif item is None:\nraise KeyError(index)\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __getstate__(self):\nreturn dict(items=self.get_children())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__iter__","title":"<code>__iter__() -&gt; Iterator[QtGui.QStandardItem]</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtGui.QStandardItem]:\nreturn iter(self.get_children())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def __setstate__(self, state):\nfor item in state[\"items\"]:\nself.appendRow([item])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.add","title":"<code>add(*item: str | QtGui.QStandardItem)</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def add(self, *item: str | QtGui.QStandardItem):\nfor i in item:\nnew_item = gui.StandardItem(i) if isinstance(i, str) else i\nself.appendRow([new_item])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.add_item","title":"<code>add_item(name: str = '', icon: datatypes.IconType = None, data: dict | None = None, foreground: QtGui.QBrush | None = None, background: QtGui.QBrush | None = None, font: QtGui.QFont | None = None, selectable: bool = True, enabled: bool = True, editable: bool = False, status_tip: str | None = None, tool_tip: str | None = None, whats_this: str | None = None, checkstate: constants.StateStr | None = None, flags: QtCore.Qt.ItemFlag | None = None, size_hint: datatypes.SizeType | None = None, is_user_type: bool = False) -&gt; gui.StandardItem</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselectable: bool = True,\nenabled: bool = True,\neditable: bool = False,\nstatus_tip: str | None = None,\ntool_tip: str | None = None,\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: QtCore.Qt.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; gui.StandardItem:\nitem = gui.StandardItem(name)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(v, k)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif enabled:\nitem.setEnabled(enabled)\nif editable:\nitem.setEditable(editable)\nif selectable:\nitem.setSelectable(selectable)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.appendRow([item])\nreturn item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.create_single_item_model","title":"<code>create_single_item_model(*args, **kwargs) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>@classmethod\ndef create_single_item_model(cls, *args, **kwargs) -&gt; Self:\nmdl = cls(1, 1)\nmdl.add_item(*args, **kwargs)\nreturn mdl\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.find_items","title":"<code>find_items(text: str, column: int = 0, mode: constants.MatchFlagStr = 'exact', recursive: bool = False, case_sensitive: bool = False) -&gt; list[QtGui.QStandardItem]</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def find_items(\nself,\ntext: str,\ncolumn: int = 0,\nmode: constants.MatchFlagStr = \"exact\",\nrecursive: bool = False,\ncase_sensitive: bool = False,\n) -&gt; list[QtGui.QStandardItem]:\nif mode not in constants.MATCH_FLAGS:\nraise InvalidParamError(mode, constants.MATCH_FLAGS)\nflag = constants.MATCH_FLAGS[mode]\nif recursive:\nflag |= QtCore.Qt.MatchFlag.MatchRecursive\nif case_sensitive:\nflag |= QtCore.Qt.MatchFlag.MatchCaseSensitive\nreturn self.findItems(text, flag, column)  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.standarditemmodel.StandardItemModel.get_children","title":"<code>get_children() -&gt; list[QtGui.QStandardItem]</code>","text":"Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>def get_children(self) -&gt; list[QtGui.QStandardItem]:\nreturn [self.item(index) for index in range(self.rowCount())]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.StaticText","title":"<code>StaticText</code>","text":"<p>         Bases: <code>QtGui.QStaticText</code></p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>class StaticText(QtGui.QStaticText):\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef __str__(self):\nreturn self.text()\ndef get_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.size())\ndef set_text_format(self, text_format: str):\n\"\"\"Set the text format.\n        Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"\n        Args:\n            text_format: text format to use\n        Raises:\n            InvalidParamError: text format does not exist\n        \"\"\"\nif text_format not in TEXT_FORMAT:\nraise InvalidParamError(text_format, TEXT_FORMAT)\nself.setTextFormat(TEXT_FORMAT[text_format])\ndef get_text_format(self) -&gt; str:\n\"\"\"Return current text format.\n        Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"\n        Returns:\n            text format\n        \"\"\"\nreturn TEXT_FORMAT.inverse[self.textFormat()]\ndef set_performance_hint(self, hint: PerformanceHintStr):\n\"\"\"Set the performance hint.\n        Args:\n            hint: performance hint to use\n        Raises:\n            InvalidParamError: performance hint does not exist\n        \"\"\"\nif hint not in PERFORMANCE_HINT:\nraise InvalidParamError(hint, PERFORMANCE_HINT)\nself.setPerformanceHint(PERFORMANCE_HINT[hint])\ndef get_performance_hint(self) -&gt; PerformanceHintStr:\n\"\"\"Return current performance hint.\n        Returns:\n            performance hint\n        \"\"\"\nreturn PERFORMANCE_HINT.inverse[self.performanceHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def __str__(self):\nreturn self.text()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.get_performance_hint","title":"<code>get_performance_hint() -&gt; PerformanceHintStr</code>","text":"<p>Return current performance hint.</p> <p>Returns:</p> Type Description <code>PerformanceHintStr</code> <p>performance hint</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_performance_hint(self) -&gt; PerformanceHintStr:\n\"\"\"Return current performance hint.\n    Returns:\n        performance hint\n    \"\"\"\nreturn PERFORMANCE_HINT.inverse[self.performanceHint()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.get_size","title":"<code>get_size() -&gt; core.SizeF</code>","text":"Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.size())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.get_text_format","title":"<code>get_text_format() -&gt; str</code>","text":"<p>Return current text format.</p> <p>Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"</p> <p>Returns:</p> Type Description <code>str</code> <p>text format</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_text_format(self) -&gt; str:\n\"\"\"Return current text format.\n    Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"\n    Returns:\n        text format\n    \"\"\"\nreturn TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.set_performance_hint","title":"<code>set_performance_hint(hint: PerformanceHintStr)</code>","text":"<p>Set the performance hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>PerformanceHintStr</code> <p>performance hint to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>performance hint does not exist</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def set_performance_hint(self, hint: PerformanceHintStr):\n\"\"\"Set the performance hint.\n    Args:\n        hint: performance hint to use\n    Raises:\n        InvalidParamError: performance hint does not exist\n    \"\"\"\nif hint not in PERFORMANCE_HINT:\nraise InvalidParamError(hint, PERFORMANCE_HINT)\nself.setPerformanceHint(PERFORMANCE_HINT[hint])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.statictext.StaticText.set_text_format","title":"<code>set_text_format(text_format: str)</code>","text":"<p>Set the text format.</p> <p>Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>str</code> <p>text format to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>text format does not exist</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def set_text_format(self, text_format: str):\n\"\"\"Set the text format.\n    Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"\n    Args:\n        text_format: text format to use\n    Raises:\n        InvalidParamError: text format does not exist\n    \"\"\"\nif text_format not in TEXT_FORMAT:\nraise InvalidParamError(text_format, TEXT_FORMAT)\nself.setTextFormat(TEXT_FORMAT[text_format])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.StyleHints","title":"<code>StyleHints</code>","text":"<p>         Bases: <code>StyleHintsMixin</code></p> Source code in <code>prettyqt\\gui\\stylehints.py</code> <pre><code>class StyleHints(StyleHintsMixin, metaclass=StyleHintsType):\ndef __init__(self, item: QtGui.QStyleHints):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.stylehints.StyleHints.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.stylehints.StyleHints.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\gui\\stylehints.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.stylehints.StyleHints.__init__","title":"<code>__init__(item: QtGui.QStyleHints)</code>","text":"Source code in <code>prettyqt\\gui\\stylehints.py</code> <pre><code>def __init__(self, item: QtGui.QStyleHints):\nself.item = item\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Surface","title":"<code>Surface</code>","text":"<p>         Bases: <code>SurfaceMixin</code>, <code>QtGui.QSurface</code></p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>class Surface(SurfaceMixin, QtGui.QSurface):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.SurfaceFormat","title":"<code>SurfaceFormat</code>","text":"<p>         Bases: <code>SurfaceFormatMixin</code>, <code>QtGui.QSurfaceFormat</code></p> Source code in <code>prettyqt\\gui\\surfaceformat.py</code> <pre><code>class SurfaceFormat(SurfaceFormatMixin, QtGui.QSurfaceFormat):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.SurfaceMixin","title":"<code>SurfaceMixin</code>","text":"Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>class SurfaceMixin:\ndef __repr__(self):\nreturn get_repr(self)\ndef get_surface_class(self) -&gt; SurfaceClassStr:\n\"\"\"Get the current surface class.\n        Returns:\n            surface class\n        \"\"\"\nreturn SURFACE_CLASS.inverse[self.surfaceClass()]\ndef get_surface_type(self) -&gt; SurfaceTypeStr:\n\"\"\"Get the current surface type.\n        Returns:\n            surface type\n        \"\"\"\nreturn SURFACE_TYPES.inverse[self.surfaceType()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.surface.SurfaceMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.surface.SurfaceMixin.get_surface_class","title":"<code>get_surface_class() -&gt; SurfaceClassStr</code>","text":"<p>Get the current surface class.</p> <p>Returns:</p> Type Description <code>SurfaceClassStr</code> <p>surface class</p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def get_surface_class(self) -&gt; SurfaceClassStr:\n\"\"\"Get the current surface class.\n    Returns:\n        surface class\n    \"\"\"\nreturn SURFACE_CLASS.inverse[self.surfaceClass()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.surface.SurfaceMixin.get_surface_type","title":"<code>get_surface_type() -&gt; SurfaceTypeStr</code>","text":"<p>Get the current surface type.</p> <p>Returns:</p> Type Description <code>SurfaceTypeStr</code> <p>surface type</p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def get_surface_type(self) -&gt; SurfaceTypeStr:\n\"\"\"Get the current surface type.\n    Returns:\n        surface type\n    \"\"\"\nreturn SURFACE_TYPES.inverse[self.surfaceType()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.SyntaxHighlighter","title":"<code>SyntaxHighlighter</code>","text":"<p>         Bases: <code>SyntaxHighlighterMixin</code>, <code>QtGui.QSyntaxHighlighter</code></p> Source code in <code>prettyqt\\gui\\syntaxhighlighter.py</code> <pre><code>class SyntaxHighlighter(SyntaxHighlighterMixin, QtGui.QSyntaxHighlighter):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlock","title":"<code>TextBlock</code>","text":"<p>         Bases: <code>QtGui.QTextBlock</code></p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>class TextBlock(QtGui.QTextBlock):\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef __contains__(self, position: int):\nreturn self.contains(position)\ndef __bool__(self):\nreturn self.isValid()\ndef __str__(self):\nreturn self.text()\ndef get_previous(self) -&gt; TextBlock:\nreturn TextBlock(self.previous())\ndef get_next(self) -&gt; TextBlock:\nreturn TextBlock(self.next())\ndef get_text_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.textDirection()]\ndef set_user_data(self, data):\nif isinstance(data, QtGui.QTextBlockUserData):\nself.setUserData(data)\nreturn None\nuser_data = UserData(data)\nself.setUserData(user_data)\ndef get_user_data(self):\nuser_data = self.userData()\nreturn user_data.data if isinstance(user_data, UserData) else user_data\n@contextlib.contextmanager\ndef edit_user_state(self):\nstate = self.userState()\nyield state\nself.setUserState(state)\ndef get_state(self) -&gt; int:\n\"\"\"Get the user state, generally used for syntax highlighting.\n        :return: The block state\n        \"\"\"\nstate = self.userState()\nreturn state if state == -1 else state &amp; 0x0000FFFF\ndef set_state(self, state: int):\n\"\"\"Set the user state, generally used for syntax highlighting.\n        :param state: new state value.\n        \"\"\"\nuser_state = self.userState()\nif user_state == -1:\nuser_state = 0\nhigher_part = user_state &amp; 0x7FFF0000\nstate &amp;= 0x0000FFFF\nstate |= higher_part\nself.setUserState(state)\ndef get_fold_level(self) -&gt; int:\n\"\"\"Get the block fold level.\n        :return: The block fold level\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn (state &amp; 0x03FF0000) &gt;&gt; 16\ndef set_fold_level(self, val: int):\n\"\"\"Set the block fold level.\n        :param val: The new fold level [0-7]\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nval = min(val, 0x3FF)\nstate &amp;= 0x7C00FFFF\nstate |= val &lt;&lt; 16\nself.setUserState(state)\ndef is_fold_trigger(self) -&gt; bool:\n\"\"\"Check if the block is a fold trigger.\n        :return: True if the block is a fold trigger (represented as a node in\n            the fold panel)\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x04000000)\ndef set_fold_trigger(self, val: int):\n\"\"\"Set the block fold trigger flag (True means the block is a fold trigger).\n        :param val: value to set\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x7BFFFFFF\nstate |= val &lt;&lt; 26\nself.setUserState(state)\ndef is_collapsed(self) -&gt; bool:\n\"\"\"Check if the block is expanded or collased.\n        :return: False for an open trigger, True for for closed trigger\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x08000000)\ndef set_collapsed(self, val: int):\n\"\"\"Set the fold trigger state (collapsed or expanded).\n        :param val: The new trigger state (True=collapsed, False=expanded)\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x77FFFFFF\nstate |= val &lt;&lt; 27\nself.setUserState(state)\ndef find_parent_scope(self, limit: int = 5000) -&gt; TextBlock | None:\n\"\"\"Find parent scope, if the block is not a fold trigger.\"\"\"\n# if we moved up for more than n lines, just give up otherwise this\n# would take too much time.\ncounter = 0\noriginal = TextBlock(self)\nstart = TextBlock(self)\nif not self.is_fold_trigger():\n# search level of next non blank line\nwhile start.text().strip() == \"\" and start.isValid():\nstart = start.next()\nref_level = self.get_fold_level() - 1\nstart = original\nwhile (\nstart.blockNumber()\nand counter &lt; limit\nand (not self.is_fold_trigger() or self.get_fold_level() &gt; ref_level)\n):\ncounter += 1\nstart = start.previous()\nreturn TextBlock(start) if counter &lt; limit else None\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.__contains__","title":"<code>__contains__(position: int)</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def __contains__(self, position: int):\nreturn self.contains(position)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def __str__(self):\nreturn self.text()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.edit_user_state","title":"<code>edit_user_state()</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>@contextlib.contextmanager\ndef edit_user_state(self):\nstate = self.userState()\nyield state\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.find_parent_scope","title":"<code>find_parent_scope(limit: int = 5000) -&gt; TextBlock | None</code>","text":"<p>Find parent scope, if the block is not a fold trigger.</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def find_parent_scope(self, limit: int = 5000) -&gt; TextBlock | None:\n\"\"\"Find parent scope, if the block is not a fold trigger.\"\"\"\n# if we moved up for more than n lines, just give up otherwise this\n# would take too much time.\ncounter = 0\noriginal = TextBlock(self)\nstart = TextBlock(self)\nif not self.is_fold_trigger():\n# search level of next non blank line\nwhile start.text().strip() == \"\" and start.isValid():\nstart = start.next()\nref_level = self.get_fold_level() - 1\nstart = original\nwhile (\nstart.blockNumber()\nand counter &lt; limit\nand (not self.is_fold_trigger() or self.get_fold_level() &gt; ref_level)\n):\ncounter += 1\nstart = start.previous()\nreturn TextBlock(start) if counter &lt; limit else None\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_fold_level","title":"<code>get_fold_level() -&gt; int</code>","text":"<p>Get the block fold level.</p> <p>:return: The block fold level</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_fold_level(self) -&gt; int:\n\"\"\"Get the block fold level.\n    :return: The block fold level\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn (state &amp; 0x03FF0000) &gt;&gt; 16\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_next","title":"<code>get_next() -&gt; TextBlock</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_next(self) -&gt; TextBlock:\nreturn TextBlock(self.next())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_previous","title":"<code>get_previous() -&gt; TextBlock</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_previous(self) -&gt; TextBlock:\nreturn TextBlock(self.previous())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_state","title":"<code>get_state() -&gt; int</code>","text":"<p>Get the user state, generally used for syntax highlighting.</p> <p>:return: The block state</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_state(self) -&gt; int:\n\"\"\"Get the user state, generally used for syntax highlighting.\n    :return: The block state\n    \"\"\"\nstate = self.userState()\nreturn state if state == -1 else state &amp; 0x0000FFFF\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_text_direction","title":"<code>get_text_direction() -&gt; constants.LayoutDirectionStr</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_text_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.textDirection()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.get_user_data","title":"<code>get_user_data()</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_user_data(self):\nuser_data = self.userData()\nreturn user_data.data if isinstance(user_data, UserData) else user_data\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.is_collapsed","title":"<code>is_collapsed() -&gt; bool</code>","text":"<p>Check if the block is expanded or collased.</p> <p>:return: False for an open trigger, True for for closed trigger</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def is_collapsed(self) -&gt; bool:\n\"\"\"Check if the block is expanded or collased.\n    :return: False for an open trigger, True for for closed trigger\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x08000000)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.is_fold_trigger","title":"<code>is_fold_trigger() -&gt; bool</code>","text":"<p>Check if the block is a fold trigger.</p> <p>:return: True if the block is a fold trigger (represented as a node in     the fold panel)</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def is_fold_trigger(self) -&gt; bool:\n\"\"\"Check if the block is a fold trigger.\n    :return: True if the block is a fold trigger (represented as a node in\n        the fold panel)\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x04000000)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_collapsed","title":"<code>set_collapsed(val: int)</code>","text":"<p>Set the fold trigger state (collapsed or expanded).</p> <p>:param val: The new trigger state (True=collapsed, False=expanded)</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_collapsed(self, val: int):\n\"\"\"Set the fold trigger state (collapsed or expanded).\n    :param val: The new trigger state (True=collapsed, False=expanded)\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x77FFFFFF\nstate |= val &lt;&lt; 27\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_fold_level","title":"<code>set_fold_level(val: int)</code>","text":"<p>Set the block fold level.</p> <p>:param val: The new fold level [0-7]</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_fold_level(self, val: int):\n\"\"\"Set the block fold level.\n    :param val: The new fold level [0-7]\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nval = min(val, 0x3FF)\nstate &amp;= 0x7C00FFFF\nstate |= val &lt;&lt; 16\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_fold_trigger","title":"<code>set_fold_trigger(val: int)</code>","text":"<p>Set the block fold trigger flag (True means the block is a fold trigger).</p> <p>:param val: value to set</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_fold_trigger(self, val: int):\n\"\"\"Set the block fold trigger flag (True means the block is a fold trigger).\n    :param val: value to set\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x7BFFFFFF\nstate |= val &lt;&lt; 26\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_state","title":"<code>set_state(state: int)</code>","text":"<p>Set the user state, generally used for syntax highlighting.</p> <p>:param state: new state value.</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_state(self, state: int):\n\"\"\"Set the user state, generally used for syntax highlighting.\n    :param state: new state value.\n    \"\"\"\nuser_state = self.userState()\nif user_state == -1:\nuser_state = 0\nhigher_part = user_state &amp; 0x7FFF0000\nstate &amp;= 0x0000FFFF\nstate |= higher_part\nself.setUserState(state)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblock.TextBlock.set_user_data","title":"<code>set_user_data(data)</code>","text":"Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_user_data(self, data):\nif isinstance(data, QtGui.QTextBlockUserData):\nself.setUserData(data)\nreturn None\nuser_data = UserData(data)\nself.setUserData(user_data)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlockFormat","title":"<code>TextBlockFormat</code>","text":"<p>         Bases: <code>gui.TextFormatMixin</code>, <code>QtGui.QTextBlockFormat</code></p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>class TextBlockFormat(gui.TextFormatMixin, QtGui.QTextBlockFormat):\ndef set_marker(self, marker: MarkerTypeStr):\n\"\"\"Set the marker.\n        Args:\n            marker: marker\n        Raises:\n            InvalidParamError: invalid marker\n        \"\"\"\nif marker not in MARKER_TYPE:\nraise InvalidParamError(marker, MARKER_TYPE)\nself.setMarker(MARKER_TYPE[marker])\ndef get_marker(self) -&gt; MarkerTypeStr:\n\"\"\"Get current marker.\n        Returns:\n            current marker\n        \"\"\"\nreturn MARKER_TYPE.inverse[self.marker()]\ndef set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the format.\n        Args:\n            alignment: alignment for the format\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef set_page_break_policy(self, policy: gui.textformat.PageBreakFlagStr):\n\"\"\"Set page break policy.\n        Args:\n            policy: page break policy\n        Raises:\n            InvalidParamError: page break policy does not exist\n        \"\"\"\nif policy not in gui.textformat.PAGE_BREAK_FLAG:\nraise InvalidParamError(policy, gui.textformat.PAGE_BREAK_FLAG)\nself.setPageBreakPolicy(gui.textformat.PAGE_BREAK_FLAG[policy])\ndef get_page_break_policy(self) -&gt; gui.textformat.PageBreakFlagStr:\n\"\"\"Get the current page break policy.\n        Returns:\n            page break policy\n        \"\"\"\nreturn gui.textformat.PAGE_BREAK_FLAG.inverse[self.pageBreakPolicy()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.get_marker","title":"<code>get_marker() -&gt; MarkerTypeStr</code>","text":"<p>Get current marker.</p> <p>Returns:</p> Type Description <code>MarkerTypeStr</code> <p>current marker</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_marker(self) -&gt; MarkerTypeStr:\n\"\"\"Get current marker.\n    Returns:\n        current marker\n    \"\"\"\nreturn MARKER_TYPE.inverse[self.marker()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.get_page_break_policy","title":"<code>get_page_break_policy() -&gt; gui.textformat.PageBreakFlagStr</code>","text":"<p>Get the current page break policy.</p> <p>Returns:</p> Type Description <code>gui.textformat.PageBreakFlagStr</code> <p>page break policy</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_page_break_policy(self) -&gt; gui.textformat.PageBreakFlagStr:\n\"\"\"Get the current page break policy.\n    Returns:\n        page break policy\n    \"\"\"\nreturn gui.textformat.PAGE_BREAK_FLAG.inverse[self.pageBreakPolicy()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the format.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the format</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the format.\n    Args:\n        alignment: alignment for the format\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.set_marker","title":"<code>set_marker(marker: MarkerTypeStr)</code>","text":"<p>Set the marker.</p> <p>Parameters:</p> Name Type Description Default <code>marker</code> <code>MarkerTypeStr</code> <p>marker</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid marker</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_marker(self, marker: MarkerTypeStr):\n\"\"\"Set the marker.\n    Args:\n        marker: marker\n    Raises:\n        InvalidParamError: invalid marker\n    \"\"\"\nif marker not in MARKER_TYPE:\nraise InvalidParamError(marker, MARKER_TYPE)\nself.setMarker(MARKER_TYPE[marker])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockformat.TextBlockFormat.set_page_break_policy","title":"<code>set_page_break_policy(policy: gui.textformat.PageBreakFlagStr)</code>","text":"<p>Set page break policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>gui.textformat.PageBreakFlagStr</code> <p>page break policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>page break policy does not exist</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_page_break_policy(self, policy: gui.textformat.PageBreakFlagStr):\n\"\"\"Set page break policy.\n    Args:\n        policy: page break policy\n    Raises:\n        InvalidParamError: page break policy does not exist\n    \"\"\"\nif policy not in gui.textformat.PAGE_BREAK_FLAG:\nraise InvalidParamError(policy, gui.textformat.PAGE_BREAK_FLAG)\nself.setPageBreakPolicy(gui.textformat.PAGE_BREAK_FLAG[policy])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlockGroup","title":"<code>TextBlockGroup</code>","text":"<p>         Bases: <code>gui.TextObjectMixin</code>, <code>QtGui.QTextBlockGroup</code></p> Source code in <code>prettyqt\\gui\\textblockgroup.py</code> <pre><code>class TextBlockGroup(gui.TextObjectMixin, QtGui.QTextBlockGroup):\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self) -&gt; Iterator[gui.TextBlock]:\nreturn iter(gui.TextBlock(i) for i in self.blockList())\ndef get_blocklist(self) -&gt; list[gui.TextBlock]:\nreturn [gui.TextBlock(i) for i in self.blockList()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockgroup.TextBlockGroup.__iter__","title":"<code>__iter__() -&gt; Iterator[gui.TextBlock]</code>","text":"Source code in <code>prettyqt\\gui\\textblockgroup.py</code> <pre><code>def __iter__(self) -&gt; Iterator[gui.TextBlock]:\nreturn iter(gui.TextBlock(i) for i in self.blockList())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockgroup.TextBlockGroup.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textblockgroup.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockgroup.TextBlockGroup.get_blocklist","title":"<code>get_blocklist() -&gt; list[gui.TextBlock]</code>","text":"Source code in <code>prettyqt\\gui\\textblockgroup.py</code> <pre><code>def get_blocklist(self) -&gt; list[gui.TextBlock]:\nreturn [gui.TextBlock(i) for i in self.blockList()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextBlockUserData","title":"<code>TextBlockUserData</code>","text":"<p>         Bases: <code>QtGui.QTextBlockUserData</code></p> <p>Storage for the user data associated with each line.</p> Source code in <code>prettyqt\\gui\\textblockuserdata.py</code> <pre><code>class TextBlockUserData(QtGui.QTextBlockUserData):\n\"\"\"Storage for the user data associated with each line.\"\"\"\ndef __init__(self, **kwds):\nfor key, value in kwds.items():\nsetattr(self, key, value)\nsuper().__init__()\ndef __repr__(self):\nkwargs = {i: getattr(self, i) for i in dir(self) if not i.startswith(\"__\")}\nreturn get_repr(self, **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockuserdata.TextBlockUserData.__init__","title":"<code>__init__(**kwds)</code>","text":"Source code in <code>prettyqt\\gui\\textblockuserdata.py</code> <pre><code>def __init__(self, **kwds):\nfor key, value in kwds.items():\nsetattr(self, key, value)\nsuper().__init__()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textblockuserdata.TextBlockUserData.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textblockuserdata.py</code> <pre><code>def __repr__(self):\nkwargs = {i: getattr(self, i) for i in dir(self) if not i.startswith(\"__\")}\nreturn get_repr(self, **kwargs)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextCharFormat","title":"<code>TextCharFormat</code>","text":"<p>         Bases: <code>TextCharFormatMixin</code>, <code>QtGui.QTextCharFormat</code></p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>class TextCharFormat(TextCharFormatMixin, QtGui.QTextCharFormat):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextCharFormatMixin","title":"<code>TextCharFormatMixin</code>","text":"<p>         Bases: <code>gui.TextFormatMixin</code></p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>class TextCharFormatMixin(gui.TextFormatMixin):\ndef __init__(\nself,\ntext_color: datatypes.ColorType | QtGui.QBrush = None,\nbold: bool = False,\nitalic: bool = False,\n):\nsuper().__init__()\nif text_color is not None:\nself.set_foreground_color(text_color)\nif bold:\nself.set_font_weight(\"bold\")\nself.setFontItalic(italic)\ndef set_foreground_color(self, color: datatypes.ColorType | QtGui.QBrush):\nif not isinstance(color, QtGui.QBrush):\ncolor = colors.get_color(color)\nself.setForeground(color)\ndef set_background_color(self, color: datatypes.ColorType | QtGui.QBrush):\nif not isinstance(color, QtGui.QBrush):\ncolor = colors.get_color(color)\nself.setBackground(color)\ndef set_font_weight(self, weight: gui.font.WeightStr):\n\"\"\"Set the font weight.\n        Args:\n            weight: font weight\n        Raises:\n            InvalidParamError: invalid font weight\n        \"\"\"\nif weight not in gui.font.WEIGHT:\nraise InvalidParamError(weight, gui.font.WEIGHT)\nself.setFontWeight(gui.font.WEIGHT[weight])\ndef get_font_weight(self) -&gt; gui.font.WeightStr:\n\"\"\"Get current font weight.\n        Returns:\n            current font weight\n        \"\"\"\nreturn gui.font.WEIGHT.inverse[self.fontWeight()]\ndef set_underline_style(self, style: UnderlineStyleStr):\n\"\"\"Set the underline style.\n        Args:\n            style: underline style\n        Raises:\n            InvalidParamError: invalid underline style\n        \"\"\"\nif style not in UNDERLINE_STYLE:\nraise InvalidParamError(style, UNDERLINE_STYLE)\nself.setUnderlineStyle(UNDERLINE_STYLE[style])\ndef get_underline_style(self) -&gt; UnderlineStyleStr:\n\"\"\"Get current underline style.\n        Returns:\n            current underline style\n        \"\"\"\nreturn UNDERLINE_STYLE.inverse[self.underlineStyle()]\ndef set_vertical_alignment(self, alignment: VerticalAlignmentStr):\n\"\"\"Set the vertical alignment.\n        Args:\n            alignment: vertical alignment\n        Raises:\n            InvalidParamError: invalid vertical alignment\n        \"\"\"\nif alignment not in VERTICAL_ALIGNMENT:\nraise InvalidParamError(alignment, VERTICAL_ALIGNMENT)\nself.setVerticalAlignment(VERTICAL_ALIGNMENT[alignment])\ndef get_vertical_alignment(self) -&gt; VerticalAlignmentStr:\n\"\"\"Get current vertical alignment.\n        Returns:\n            current vertical alignment\n        \"\"\"\nreturn VERTICAL_ALIGNMENT.inverse[self.verticalAlignment()]\ndef set_font_style_hint(self, hint: gui.font.StyleHintStr):\n\"\"\"Set the font style hint.\n        Args:\n            hint: font style hint\n        Raises:\n            InvalidParamError: invalid font style hint\n        \"\"\"\nif hint not in gui.font.STYLE_HINTS:\nraise InvalidParamError(hint, gui.font.STYLE_HINTS)\nself.setFontStyleHint(gui.font.STYLE_HINTS[hint])\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.__init__","title":"<code>__init__(text_color: datatypes.ColorType | QtGui.QBrush = None, bold: bool = False, italic: bool = False)</code>","text":"Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def __init__(\nself,\ntext_color: datatypes.ColorType | QtGui.QBrush = None,\nbold: bool = False,\nitalic: bool = False,\n):\nsuper().__init__()\nif text_color is not None:\nself.set_foreground_color(text_color)\nif bold:\nself.set_font_weight(\"bold\")\nself.setFontItalic(italic)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_font_weight","title":"<code>get_font_weight() -&gt; gui.font.WeightStr</code>","text":"<p>Get current font weight.</p> <p>Returns:</p> Type Description <code>gui.font.WeightStr</code> <p>current font weight</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_font_weight(self) -&gt; gui.font.WeightStr:\n\"\"\"Get current font weight.\n    Returns:\n        current font weight\n    \"\"\"\nreturn gui.font.WEIGHT.inverse[self.fontWeight()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_underline_style","title":"<code>get_underline_style() -&gt; UnderlineStyleStr</code>","text":"<p>Get current underline style.</p> <p>Returns:</p> Type Description <code>UnderlineStyleStr</code> <p>current underline style</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_underline_style(self) -&gt; UnderlineStyleStr:\n\"\"\"Get current underline style.\n    Returns:\n        current underline style\n    \"\"\"\nreturn UNDERLINE_STYLE.inverse[self.underlineStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_vertical_alignment","title":"<code>get_vertical_alignment() -&gt; VerticalAlignmentStr</code>","text":"<p>Get current vertical alignment.</p> <p>Returns:</p> Type Description <code>VerticalAlignmentStr</code> <p>current vertical alignment</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_vertical_alignment(self) -&gt; VerticalAlignmentStr:\n\"\"\"Get current vertical alignment.\n    Returns:\n        current vertical alignment\n    \"\"\"\nreturn VERTICAL_ALIGNMENT.inverse[self.verticalAlignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_background_color","title":"<code>set_background_color(color: datatypes.ColorType | QtGui.QBrush)</code>","text":"Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_background_color(self, color: datatypes.ColorType | QtGui.QBrush):\nif not isinstance(color, QtGui.QBrush):\ncolor = colors.get_color(color)\nself.setBackground(color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_font_style_hint","title":"<code>set_font_style_hint(hint: gui.font.StyleHintStr)</code>","text":"<p>Set the font style hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>gui.font.StyleHintStr</code> <p>font style hint</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font style hint</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_font_style_hint(self, hint: gui.font.StyleHintStr):\n\"\"\"Set the font style hint.\n    Args:\n        hint: font style hint\n    Raises:\n        InvalidParamError: invalid font style hint\n    \"\"\"\nif hint not in gui.font.STYLE_HINTS:\nraise InvalidParamError(hint, gui.font.STYLE_HINTS)\nself.setFontStyleHint(gui.font.STYLE_HINTS[hint])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_font_weight","title":"<code>set_font_weight(weight: gui.font.WeightStr)</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>gui.font.WeightStr</code> <p>font weight</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font weight</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_font_weight(self, weight: gui.font.WeightStr):\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    Raises:\n        InvalidParamError: invalid font weight\n    \"\"\"\nif weight not in gui.font.WEIGHT:\nraise InvalidParamError(weight, gui.font.WEIGHT)\nself.setFontWeight(gui.font.WEIGHT[weight])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_foreground_color","title":"<code>set_foreground_color(color: datatypes.ColorType | QtGui.QBrush)</code>","text":"Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_foreground_color(self, color: datatypes.ColorType | QtGui.QBrush):\nif not isinstance(color, QtGui.QBrush):\ncolor = colors.get_color(color)\nself.setForeground(color)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_underline_style","title":"<code>set_underline_style(style: UnderlineStyleStr)</code>","text":"<p>Set the underline style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>UnderlineStyleStr</code> <p>underline style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid underline style</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_underline_style(self, style: UnderlineStyleStr):\n\"\"\"Set the underline style.\n    Args:\n        style: underline style\n    Raises:\n        InvalidParamError: invalid underline style\n    \"\"\"\nif style not in UNDERLINE_STYLE:\nraise InvalidParamError(style, UNDERLINE_STYLE)\nself.setUnderlineStyle(UNDERLINE_STYLE[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_vertical_alignment","title":"<code>set_vertical_alignment(alignment: VerticalAlignmentStr)</code>","text":"<p>Set the vertical alignment.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>VerticalAlignmentStr</code> <p>vertical alignment</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid vertical alignment</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_vertical_alignment(self, alignment: VerticalAlignmentStr):\n\"\"\"Set the vertical alignment.\n    Args:\n        alignment: vertical alignment\n    Raises:\n        InvalidParamError: invalid vertical alignment\n    \"\"\"\nif alignment not in VERTICAL_ALIGNMENT:\nraise InvalidParamError(alignment, VERTICAL_ALIGNMENT)\nself.setVerticalAlignment(VERTICAL_ALIGNMENT[alignment])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextCursor","title":"<code>TextCursor</code>","text":"<p>         Bases: <code>QtGui.QTextCursor</code></p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>class TextCursor(QtGui.QTextCursor):\ndef __str__(self):\nreturn self.selectedText().replace(\"\\u2029\", \"\\n\")\ndef move_position(\nself, operation: MoveOperationStr, mode: MoveModeStr = \"move\", n: int = 1\n) -&gt; bool:\nreturn self.movePosition(MOVE_OPERATION[operation], MOVE_MODE[mode], n)\ndef set_position(self, pos: int, mode: MoveModeStr = \"move\"):\n\"\"\"Set cursor to given position.\n        Args:\n            pos: Cursor position\n            mode: Move mode\n        \"\"\"\nself.setPosition(pos, MOVE_MODE[mode])\ndef select(self, selection: SelectionTypeStr | QtGui.QTextCursor.SelectionType):\nif isinstance(selection, QtGui.QTextCursor.SelectionType):\nsel = selection\nelse:\nsel = SELECTION_TYPE[selection]\nsuper().select(sel)\ndef span(self) -&gt; tuple[int, int]:\nreturn (self.anchor(), self.position())\ndef get_cursor_position(self) -&gt; tuple[int, int]:\n\"\"\"Return the QTextCursor position.\n        The position is a tuple made up of\n        the line number (0 based) and the column number (0 based).\n        :return: tuple(line, column)\n        \"\"\"\nreturn (self.blockNumber(), self.columnNumber())\ndef get_selection(self) -&gt; gui.TextDocumentFragment:\nreturn gui.TextDocumentFragment(self.selection())\ndef select_text(\nself,\nstart_pos: int | MoveOperationStr,\nend_pos: int | MoveOperationStr,\n) -&gt; str:\n\"\"\"Select text from start position to end position.\n        Positions can be either an integer index or a move operation\n        Args:\n            start_pos: Start position\n            end_pos: End position\n        \"\"\"\nif isinstance(start_pos, int):\nself.set_position(start_pos)\nelse:\nself.move_position(start_pos)\nif isinstance(end_pos, int):\nself.set_position(end_pos, mode=\"keep\")\nelse:\nself.move_position(end_pos, mode=\"keep\")\nreturn self.selectedText()\ndef replace_text(\nself,\nstart_pos: int,\nend_pos: MoveOperationStr | int,\nto_replace: str,\n):\nself.set_position(start_pos)\nif isinstance(end_pos, int):\nself.set_position(end_pos, mode=\"keep\")\nelse:\nself.move_position(end_pos, mode=\"keep\")\nself.insertText(to_replace)\nself.select_text(start_pos, start_pos + len(to_replace))\n@contextlib.contextmanager\ndef edit_block(self):\n\"\"\"Context manager for edit blocks. Can be used for undo actions.\"\"\"\nself.beginEditBlock()\nyield\nself.endEditBlock()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def __str__(self):\nreturn self.selectedText().replace(\"\\u2029\", \"\\n\")\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.edit_block","title":"<code>edit_block()</code>","text":"<p>Context manager for edit blocks. Can be used for undo actions.</p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>@contextlib.contextmanager\ndef edit_block(self):\n\"\"\"Context manager for edit blocks. Can be used for undo actions.\"\"\"\nself.beginEditBlock()\nyield\nself.endEditBlock()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.get_cursor_position","title":"<code>get_cursor_position() -&gt; tuple[int, int]</code>","text":"<p>Return the QTextCursor position.</p> <p>The position is a tuple made up of the line number (0 based) and the column number (0 based). :return: tuple(line, column)</p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def get_cursor_position(self) -&gt; tuple[int, int]:\n\"\"\"Return the QTextCursor position.\n    The position is a tuple made up of\n    the line number (0 based) and the column number (0 based).\n    :return: tuple(line, column)\n    \"\"\"\nreturn (self.blockNumber(), self.columnNumber())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.get_selection","title":"<code>get_selection() -&gt; gui.TextDocumentFragment</code>","text":"Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def get_selection(self) -&gt; gui.TextDocumentFragment:\nreturn gui.TextDocumentFragment(self.selection())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.move_position","title":"<code>move_position(operation: MoveOperationStr, mode: MoveModeStr = 'move', n: int = 1) -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def move_position(\nself, operation: MoveOperationStr, mode: MoveModeStr = \"move\", n: int = 1\n) -&gt; bool:\nreturn self.movePosition(MOVE_OPERATION[operation], MOVE_MODE[mode], n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.replace_text","title":"<code>replace_text(start_pos: int, end_pos: MoveOperationStr | int, to_replace: str)</code>","text":"Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def replace_text(\nself,\nstart_pos: int,\nend_pos: MoveOperationStr | int,\nto_replace: str,\n):\nself.set_position(start_pos)\nif isinstance(end_pos, int):\nself.set_position(end_pos, mode=\"keep\")\nelse:\nself.move_position(end_pos, mode=\"keep\")\nself.insertText(to_replace)\nself.select_text(start_pos, start_pos + len(to_replace))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.select","title":"<code>select(selection: SelectionTypeStr | QtGui.QTextCursor.SelectionType)</code>","text":"Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def select(self, selection: SelectionTypeStr | QtGui.QTextCursor.SelectionType):\nif isinstance(selection, QtGui.QTextCursor.SelectionType):\nsel = selection\nelse:\nsel = SELECTION_TYPE[selection]\nsuper().select(sel)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.select_text","title":"<code>select_text(start_pos: int | MoveOperationStr, end_pos: int | MoveOperationStr) -&gt; str</code>","text":"<p>Select text from start position to end position.</p> <p>Positions can be either an integer index or a move operation</p> <p>Parameters:</p> Name Type Description Default <code>start_pos</code> <code>int | MoveOperationStr</code> <p>Start position</p> required <code>end_pos</code> <code>int | MoveOperationStr</code> <p>End position</p> required Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def select_text(\nself,\nstart_pos: int | MoveOperationStr,\nend_pos: int | MoveOperationStr,\n) -&gt; str:\n\"\"\"Select text from start position to end position.\n    Positions can be either an integer index or a move operation\n    Args:\n        start_pos: Start position\n        end_pos: End position\n    \"\"\"\nif isinstance(start_pos, int):\nself.set_position(start_pos)\nelse:\nself.move_position(start_pos)\nif isinstance(end_pos, int):\nself.set_position(end_pos, mode=\"keep\")\nelse:\nself.move_position(end_pos, mode=\"keep\")\nreturn self.selectedText()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.set_position","title":"<code>set_position(pos: int, mode: MoveModeStr = 'move')</code>","text":"<p>Set cursor to given position.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>int</code> <p>Cursor position</p> required <code>mode</code> <code>MoveModeStr</code> <p>Move mode</p> <code>'move'</code> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def set_position(self, pos: int, mode: MoveModeStr = \"move\"):\n\"\"\"Set cursor to given position.\n    Args:\n        pos: Cursor position\n        mode: Move mode\n    \"\"\"\nself.setPosition(pos, MOVE_MODE[mode])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textcursor.TextCursor.span","title":"<code>span() -&gt; tuple[int, int]</code>","text":"Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def span(self) -&gt; tuple[int, int]:\nreturn (self.anchor(), self.position())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextDocument","title":"<code>TextDocument</code>","text":"<p>         Bases: <code>TextDocumentMixin</code>, <code>QtGui.QTextDocument</code></p> Source code in <code>prettyqt\\gui\\textdocument.py</code> <pre><code>class TextDocument(TextDocumentMixin, QtGui.QTextDocument):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextDocumentFragment","title":"<code>TextDocumentFragment</code>","text":"<p>         Bases: <code>QtGui.QTextDocumentFragment</code></p> Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>class TextDocumentFragment(QtGui.QTextDocumentFragment):\ndef __repr__(self):\nreturn get_repr(self, gui.TextDocument(self.toPlainText()))\ndef __str__(self):\nreturn self.toPlainText()\ndef __bool__(self):\nreturn not self.isEmpty()\n@classmethod\ndef from_plain_text(cls, text: str) -&gt; Self:\nreturn cls(cls.fromPlainText(text))\ndef write_to_file(\nself,\npath: datatypes.PathType,\nfmt: gui.textdocumentwriter.FormatStr | bytes | QtCore.QByteArray = \"plaintext\",\n):\nwriter = gui.TextDocumentWriter()\nwriter.set_format(fmt)\nwriter.set_file_name(path)\nreturn writer.write(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentfragment.TextDocumentFragment.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentfragment.TextDocumentFragment.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, gui.TextDocument(self.toPlainText()))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentfragment.TextDocumentFragment.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>def __str__(self):\nreturn self.toPlainText()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentfragment.TextDocumentFragment.from_plain_text","title":"<code>from_plain_text(text: str) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>@classmethod\ndef from_plain_text(cls, text: str) -&gt; Self:\nreturn cls(cls.fromPlainText(text))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentfragment.TextDocumentFragment.write_to_file","title":"<code>write_to_file(path: datatypes.PathType, fmt: gui.textdocumentwriter.FormatStr | bytes | QtCore.QByteArray = 'plaintext')</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>def write_to_file(\nself,\npath: datatypes.PathType,\nfmt: gui.textdocumentwriter.FormatStr | bytes | QtCore.QByteArray = \"plaintext\",\n):\nwriter = gui.TextDocumentWriter()\nwriter.set_format(fmt)\nwriter.set_file_name(path)\nreturn writer.write(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextDocumentWriter","title":"<code>TextDocumentWriter</code>","text":"<p>         Bases: <code>QtGui.QTextDocumentWriter</code></p> Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>class TextDocumentWriter(QtGui.QTextDocumentWriter):\ndef __repr__(self):\nreturn get_repr(self, self.device(), self.format())\ndef get_format(self) -&gt; FormatStr:\nreturn self.format().data().decode()  # type: ignore\ndef set_format(self, fmt: FormatStr | bytes | QtCore.QByteArray):\nnew = fmt.encode() if isinstance(fmt, str) else fmt\nself.setFormat(new)\ndef set_file_name(self, name: datatypes.PathType):\npath = name if isinstance(name, str) else os.fspath(name)\nself.setFileName(path)\n@classmethod\ndef get_supported_document_formats(cls) -&gt; list[str]:\nreturn [i.data().decode() for i in cls.supportedDocumentFormats()]\n@classmethod\ndef serialize_document(\ncls,\ndocument: QtGui.QTextDocument,\nfmt: FormatStr | bytes | QtCore.QByteArray = \"ODF\",\n) -&gt; bytes:\nbuffer = core.Buffer()\nwriter = cls()\nwriter.setDevice(buffer)\nwriter.set_format(fmt)  # ODF Format\nwriter.write(document)\nreturn buffer.data().data()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentwriter.TextDocumentWriter.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.device(), self.format())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentwriter.TextDocumentWriter.get_format","title":"<code>get_format() -&gt; FormatStr</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>def get_format(self) -&gt; FormatStr:\nreturn self.format().data().decode()  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentwriter.TextDocumentWriter.get_supported_document_formats","title":"<code>get_supported_document_formats() -&gt; list[str]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>@classmethod\ndef get_supported_document_formats(cls) -&gt; list[str]:\nreturn [i.data().decode() for i in cls.supportedDocumentFormats()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentwriter.TextDocumentWriter.serialize_document","title":"<code>serialize_document(document: QtGui.QTextDocument, fmt: FormatStr | bytes | QtCore.QByteArray = 'ODF') -&gt; bytes</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>@classmethod\ndef serialize_document(\ncls,\ndocument: QtGui.QTextDocument,\nfmt: FormatStr | bytes | QtCore.QByteArray = \"ODF\",\n) -&gt; bytes:\nbuffer = core.Buffer()\nwriter = cls()\nwriter.setDevice(buffer)\nwriter.set_format(fmt)  # ODF Format\nwriter.write(document)\nreturn buffer.data().data()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentwriter.TextDocumentWriter.set_file_name","title":"<code>set_file_name(name: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>def set_file_name(self, name: datatypes.PathType):\npath = name if isinstance(name, str) else os.fspath(name)\nself.setFileName(path)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textdocumentwriter.TextDocumentWriter.set_format","title":"<code>set_format(fmt: FormatStr | bytes | QtCore.QByteArray)</code>","text":"Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>def set_format(self, fmt: FormatStr | bytes | QtCore.QByteArray):\nnew = fmt.encode() if isinstance(fmt, str) else fmt\nself.setFormat(new)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextFormat","title":"<code>TextFormat</code>","text":"<p>         Bases: <code>TextFormatMixin</code>, <code>QtGui.QTextFormat</code></p> Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>class TextFormat(TextFormatMixin, QtGui.QTextFormat):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextFormatMixin","title":"<code>TextFormatMixin</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>class TextFormatMixin:\ndef __getitem__(self, key: int):\nreturn self.property(key)\ndef __setitem__(self, key: int, value):\nself.setProperty(key, value)\ndef __contains__(self, key: int):\nreturn self.hasProperty(key)\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.type())\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_brush_property(self, property_id: int) -&gt; gui.Brush:\nreturn gui.Brush(self.brushProperty(property_id))\ndef get_color_property(self, property_id: int) -&gt; gui.Color:\nreturn gui.Color(self.colorProperty(property_id))\ndef get_pen_property(self, property_id: int) -&gt; gui.Pen:\nreturn gui.Pen(self.penProperty(property_id))\ndef set_layout_direction(self, direction: constants.LayoutDirectionStr):\n\"\"\"Set layout direction.\n        Args:\n            direction: layout direction\n        Raises:\n            InvalidParamError: layout direction does not exist\n        \"\"\"\nif direction not in constants.LAYOUT_DIRECTION:\nraise InvalidParamError(direction, constants.LAYOUT_DIRECTION)\nself.setLayoutDirection(constants.LAYOUT_DIRECTION[direction])\ndef get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n        Returns:\n            layout direction\n        \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\ndef select_full_width(self, value: bool = True):\nprop = QtGui.QTextFormat.Property.FullWidthSelection\nself.setProperty(prop, value)  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.__contains__","title":"<code>__contains__(key: int)</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def __contains__(self, key: int):\nreturn self.hasProperty(key)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.__getitem__","title":"<code>__getitem__(key: int)</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def __getitem__(self, key: int):\nreturn self.property(key)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.type())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.__setitem__","title":"<code>__setitem__(key: int, value: int)</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def __setitem__(self, key: int, value):\nself.setProperty(key, value)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_background","title":"<code>get_background() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_brush_property","title":"<code>get_brush_property(property_id: int) -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_brush_property(self, property_id: int) -&gt; gui.Brush:\nreturn gui.Brush(self.brushProperty(property_id))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_color_property","title":"<code>get_color_property(property_id: int) -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_color_property(self, property_id: int) -&gt; gui.Color:\nreturn gui.Color(self.colorProperty(property_id))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_foreground","title":"<code>get_foreground() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> <p>Returns:</p> Type Description <code>constants.LayoutDirectionStr</code> <p>layout direction</p> Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.get_pen_property","title":"<code>get_pen_property(property_id: int) -&gt; gui.Pen</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_pen_property(self, property_id: int) -&gt; gui.Pen:\nreturn gui.Pen(self.penProperty(property_id))\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.select_full_width","title":"<code>select_full_width(value: bool = True)</code>","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def select_full_width(self, value: bool = True):\nprop = QtGui.QTextFormat.Property.FullWidthSelection\nself.setProperty(prop, value)  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textformat.TextFormatMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr</code> <p>layout direction</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>layout direction does not exist</p> Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def set_layout_direction(self, direction: constants.LayoutDirectionStr):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    Raises:\n        InvalidParamError: layout direction does not exist\n    \"\"\"\nif direction not in constants.LAYOUT_DIRECTION:\nraise InvalidParamError(direction, constants.LAYOUT_DIRECTION)\nself.setLayoutDirection(constants.LAYOUT_DIRECTION[direction])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextFrame","title":"<code>TextFrame</code>","text":"<p>         Bases: <code>TextFrameMixin</code>, <code>QtGui.QTextFrame</code></p> Source code in <code>prettyqt\\gui\\textframe.py</code> <pre><code>class TextFrame(TextFrameMixin, QtGui.QTextFrame):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextFrameFormat","title":"<code>TextFrameFormat</code>","text":"<p>         Bases: <code>TextFrameFormatMixin</code>, <code>QtGui.QTextFrameFormat</code></p> Source code in <code>prettyqt\\gui\\textframeformat.py</code> <pre><code>class TextFrameFormat(TextFrameFormatMixin, QtGui.QTextFrameFormat):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextImageFormat","title":"<code>TextImageFormat</code>","text":"<p>         Bases: <code>gui.TextCharFormatMixin</code>, <code>QtGui.QTextImageFormat</code></p> Source code in <code>prettyqt\\gui\\textimageformat.py</code> <pre><code>class TextImageFormat(gui.TextCharFormatMixin, QtGui.QTextImageFormat):\ndef __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textimageformat.TextImageFormat.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\textimageformat.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextLayout","title":"<code>TextLayout</code>","text":"<p>         Bases: <code>QtGui.QTextLayout</code></p> Source code in <code>prettyqt\\gui\\textlayout.py</code> <pre><code>class TextLayout(QtGui.QTextLayout):\ndef __repr__(self):\nreturn get_repr(self, self.text())\n@contextlib.contextmanager\ndef process_layout(self):\nself.beginLayout()\nyield self\nself.endLayout()\ndef get_text_option(self) -&gt; gui.TextOption:\nreturn gui.TextOption(self.textOption())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlayout.TextLayout.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textlayout.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlayout.TextLayout.get_text_option","title":"<code>get_text_option() -&gt; gui.TextOption</code>","text":"Source code in <code>prettyqt\\gui\\textlayout.py</code> <pre><code>def get_text_option(self) -&gt; gui.TextOption:\nreturn gui.TextOption(self.textOption())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlayout.TextLayout.process_layout","title":"<code>process_layout()</code>","text":"Source code in <code>prettyqt\\gui\\textlayout.py</code> <pre><code>@contextlib.contextmanager\ndef process_layout(self):\nself.beginLayout()\nyield self\nself.endLayout()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextLength","title":"<code>TextLength</code>","text":"<p>         Bases: <code>QtGui.QTextLength</code></p> Source code in <code>prettyqt\\gui\\textlength.py</code> <pre><code>class TextLength(QtGui.QTextLength):\ndef __repr__(self):\nreturn get_repr(self, self.type(), self.rawValue())\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return type of this length object.\n        Returns:\n            timer type\n        \"\"\"\nreturn TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlength.TextLength.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textlength.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.type(), self.rawValue())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlength.TextLength.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return type of this length object.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>timer type</p> Source code in <code>prettyqt\\gui\\textlength.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return type of this length object.\n    Returns:\n        timer type\n    \"\"\"\nreturn TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextLine","title":"<code>TextLine</code>","text":"<p>         Bases: <code>QtGui.QTextLine</code></p> Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>class TextLine(QtGui.QTextLine):\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self)\ndef __len__(self):\nreturn self.textLength()\ndef get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\ndef set_position(self, point: datatypes.PointType):\nif isinstance(point, tuple):\npoint = core.Point(*point)\nself.setPosition(point)\ndef cursor_to_x(self, cursor_pos: int, edge: EdgeStr = \"leading\") -&gt; float:\nif edge not in EDGE:\nraise InvalidParamError(edge, EDGE)\nreturn self.cursorToX(cursor_pos, EDGE[edge])  # type: ignore\ndef x_to_cursor(\nself, x: float, cursor_pos: CursorPositionStr = \"cursor_between_characters\"\n) -&gt; int:\nif cursor_pos not in CURSOR_POSITION:\nraise InvalidParamError(cursor_pos, CURSOR_POSITION)\nreturn self.xToCursor(x, CURSOR_POSITION[cursor_pos])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def __len__(self):\nreturn self.textLength()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.cursor_to_x","title":"<code>cursor_to_x(cursor_pos: int, edge: EdgeStr = 'leading') -&gt; float</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def cursor_to_x(self, cursor_pos: int, edge: EdgeStr = \"leading\") -&gt; float:\nif edge not in EDGE:\nraise InvalidParamError(edge, EDGE)\nreturn self.cursorToX(cursor_pos, EDGE[edge])  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.get_position","title":"<code>get_position() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.set_position","title":"<code>set_position(point: datatypes.PointType)</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def set_position(self, point: datatypes.PointType):\nif isinstance(point, tuple):\npoint = core.Point(*point)\nself.setPosition(point)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textline.TextLine.x_to_cursor","title":"<code>x_to_cursor(x: float, cursor_pos: CursorPositionStr = 'cursor_between_characters') -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>def x_to_cursor(\nself, x: float, cursor_pos: CursorPositionStr = \"cursor_between_characters\"\n) -&gt; int:\nif cursor_pos not in CURSOR_POSITION:\nraise InvalidParamError(cursor_pos, CURSOR_POSITION)\nreturn self.xToCursor(x, CURSOR_POSITION[cursor_pos])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextListFormat","title":"<code>TextListFormat</code>","text":"<p>         Bases: <code>gui.TextFormatMixin</code>, <code>QtGui.QTextListFormat</code></p> Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>class TextListFormat(gui.TextFormatMixin, QtGui.QTextListFormat):\ndef set_style(self, style: StyleStr):\n\"\"\"Set the style.\n        Args:\n            style: style\n        Raises:\n            InvalidParamError: invalid style\n        \"\"\"\nif style not in STYLES:\nraise InvalidParamError(style, STYLES)\nself.setStyle(STYLES[style])\ndef get_style(self) -&gt; StyleStr:\n\"\"\"Get current style.\n        Returns:\n            current style\n        \"\"\"\nreturn STYLES.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlistformat.TextListFormat.get_style","title":"<code>get_style() -&gt; StyleStr</code>","text":"<p>Get current style.</p> <p>Returns:</p> Type Description <code>StyleStr</code> <p>current style</p> Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>def get_style(self) -&gt; StyleStr:\n\"\"\"Get current style.\n    Returns:\n        current style\n    \"\"\"\nreturn STYLES.inverse[self.style()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textlistformat.TextListFormat.set_style","title":"<code>set_style(style: StyleStr)</code>","text":"<p>Set the style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>StyleStr</code> <p>style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid style</p> Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>def set_style(self, style: StyleStr):\n\"\"\"Set the style.\n    Args:\n        style: style\n    Raises:\n        InvalidParamError: invalid style\n    \"\"\"\nif style not in STYLES:\nraise InvalidParamError(style, STYLES)\nself.setStyle(STYLES[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextObject","title":"<code>TextObject</code>","text":"<p>         Bases: <code>TextObjectMixin</code>, <code>QtGui.QTextObject</code></p> Source code in <code>prettyqt\\gui\\textobject.py</code> <pre><code>class TextObject(TextObjectMixin, QtGui.QTextObject):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextObjectInterface","title":"<code>TextObjectInterface</code>","text":"<p>         Bases: <code>QtGui.QTextObjectInterface</code></p> Source code in <code>prettyqt\\gui\\textobjectinterface.py</code> <pre><code>class TextObjectInterface(QtGui.QTextObjectInterface):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextObjectMixin","title":"<code>TextObjectMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\textobject.py</code> <pre><code>class TextObjectMixin(core.ObjectMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef get_format(self) -&gt; gui.TextFormat:\nreturn gui.TextFormat(self.format())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textobject.TextObjectMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\textobject.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.textobject.TextObjectMixin.get_format","title":"<code>get_format() -&gt; gui.TextFormat</code>","text":"Source code in <code>prettyqt\\gui\\textobject.py</code> <pre><code>def get_format(self) -&gt; gui.TextFormat:\nreturn gui.TextFormat(self.format())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextOption","title":"<code>TextOption</code>","text":"<p>         Bases: <code>QtGui.QTextOption</code></p> Source code in <code>prettyqt\\gui\\textoption.py</code> <pre><code>class TextOption(QtGui.QTextOption):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextTable","title":"<code>TextTable</code>","text":"<p>         Bases: <code>gui.textframe.TextFrameMixin</code>, <code>QtGui.QTextTable</code></p> Source code in <code>prettyqt\\gui\\texttable.py</code> <pre><code>class TextTable(gui.textframe.TextFrameMixin, QtGui.QTextTable):\ndef __getitem__(self, index: int | tuple[int, int]) -&gt; gui.TextTableCell:\nif isinstance(index, int):\ncell = gui.TextTableCell(self.cellAt(index))\nelse:\ncell = gui.TextTableCell(self.cellAt(*index))\nif not cell.isValid():\nraise IndexError(index)\nreturn cell\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttable.TextTable.__getitem__","title":"<code>__getitem__(index: int | tuple[int, int]) -&gt; gui.TextTableCell</code>","text":"Source code in <code>prettyqt\\gui\\texttable.py</code> <pre><code>def __getitem__(self, index: int | tuple[int, int]) -&gt; gui.TextTableCell:\nif isinstance(index, int):\ncell = gui.TextTableCell(self.cellAt(index))\nelse:\ncell = gui.TextTableCell(self.cellAt(*index))\nif not cell.isValid():\nraise IndexError(index)\nreturn cell\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextTableCell","title":"<code>TextTableCell</code>","text":"<p>         Bases: <code>QtGui.QTextTableCell</code></p> Source code in <code>prettyqt\\gui\\texttablecell.py</code> <pre><code>class TextTableCell(QtGui.QTextTableCell):\ndef get_format(self) -&gt; gui.TextCharFormat:\n#  .format() seems to crash both bindings?\nreturn gui.TextCharFormat(self.format())\ndef get_first_cursor_position(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.firstCursorPosition())\ndef get_last_cursor_position(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.lastCursorPosition())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecell.TextTableCell.get_first_cursor_position","title":"<code>get_first_cursor_position() -&gt; gui.TextCursor</code>","text":"Source code in <code>prettyqt\\gui\\texttablecell.py</code> <pre><code>def get_first_cursor_position(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.firstCursorPosition())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecell.TextTableCell.get_format","title":"<code>get_format() -&gt; gui.TextCharFormat</code>","text":"Source code in <code>prettyqt\\gui\\texttablecell.py</code> <pre><code>def get_format(self) -&gt; gui.TextCharFormat:\n#  .format() seems to crash both bindings?\nreturn gui.TextCharFormat(self.format())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecell.TextTableCell.get_last_cursor_position","title":"<code>get_last_cursor_position() -&gt; gui.TextCursor</code>","text":"Source code in <code>prettyqt\\gui\\texttablecell.py</code> <pre><code>def get_last_cursor_position(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.lastCursorPosition())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextTableCellFormat","title":"<code>TextTableCellFormat</code>","text":"<p>         Bases: <code>gui.TextCharFormatMixin</code>, <code>QtGui.QTextTableCellFormat</code></p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>class TextTableCellFormat(gui.TextCharFormatMixin, QtGui.QTextTableCellFormat):\ndef get_bottom_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.bottomBorderBrush())\ndef set_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set border style.\n        Args:\n            style: border style\n        Raises:\n            InvalidParamError: border style does not exist\n        \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setBorderStyle(gui.textframeformat.BORDER_STYLES[style])\ndef set_bottom_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set bottom border style.\n        Args:\n            style: bottom border style\n        Raises:\n            InvalidParamError: bottom border style does not exist\n        \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setBottomBorderStyle(gui.textframeformat.BORDER_STYLES[style])\ndef get_bottom_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current bottom border style.\n        Returns:\n            bottom border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.bottomBorderStyle()]\ndef get_left_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.leftBorderBrush())\ndef set_left_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set left border style.\n        Args:\n            style: left border style\n        Raises:\n            InvalidParamError: left border style does not exist\n        \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setLeftBorderStyle(gui.textframeformat.BORDER_STYLES[style])\ndef get_left_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current left border style.\n        Returns:\n            left border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.leftBorderStyle()]\ndef get_right_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.rightBorderBrush())\ndef set_right_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set right border style.\n        Args:\n            style: right border style\n        Raises:\n            InvalidParamError: right border style does not exist\n        \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setRightBorderStyle(gui.textframeformat.BORDER_STYLES[style])\ndef get_right_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current right border style.\n        Returns:\n            right border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.rightBorderStyle()]\ndef get_top_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.topBorderBrush())\ndef set_top_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set top border style.\n        Args:\n            style: top border style\n        Raises:\n            InvalidParamError: top border style does not exist\n        \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setTopBorderStyle(gui.textframeformat.BORDER_STYLES[style])\ndef get_top_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current top border style.\n        Returns:\n            top border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.topBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_bottom_border_brush","title":"<code>get_bottom_border_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_bottom_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.bottomBorderBrush())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_bottom_border_style","title":"<code>get_bottom_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current bottom border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>bottom border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_bottom_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current bottom border style.\n    Returns:\n        bottom border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.bottomBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_left_border_brush","title":"<code>get_left_border_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_left_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.leftBorderBrush())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_left_border_style","title":"<code>get_left_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current left border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>left border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_left_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current left border style.\n    Returns:\n        left border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.leftBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_right_border_brush","title":"<code>get_right_border_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_right_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.rightBorderBrush())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_right_border_style","title":"<code>get_right_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current right border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>right border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_right_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current right border style.\n    Returns:\n        right border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.rightBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_top_border_brush","title":"<code>get_top_border_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_top_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.topBorderBrush())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_top_border_style","title":"<code>get_top_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current top border style.</p> <p>Returns:</p> Type Description <code>gui.textframeformat.BorderStyleStr</code> <p>top border style</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_top_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current top border style.\n    Returns:\n        top border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.topBorderStyle()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_border_style","title":"<code>set_border_style(style: gui.textframeformat.BorderStyleStr)</code>","text":"<p>Set border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr</code> <p>border style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>border style does not exist</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set border style.\n    Args:\n        style: border style\n    Raises:\n        InvalidParamError: border style does not exist\n    \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setBorderStyle(gui.textframeformat.BORDER_STYLES[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_bottom_border_style","title":"<code>set_bottom_border_style(style: gui.textframeformat.BorderStyleStr)</code>","text":"<p>Set bottom border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr</code> <p>bottom border style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>bottom border style does not exist</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_bottom_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set bottom border style.\n    Args:\n        style: bottom border style\n    Raises:\n        InvalidParamError: bottom border style does not exist\n    \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setBottomBorderStyle(gui.textframeformat.BORDER_STYLES[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_left_border_style","title":"<code>set_left_border_style(style: gui.textframeformat.BorderStyleStr)</code>","text":"<p>Set left border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr</code> <p>left border style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>left border style does not exist</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_left_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set left border style.\n    Args:\n        style: left border style\n    Raises:\n        InvalidParamError: left border style does not exist\n    \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setLeftBorderStyle(gui.textframeformat.BORDER_STYLES[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_right_border_style","title":"<code>set_right_border_style(style: gui.textframeformat.BorderStyleStr)</code>","text":"<p>Set right border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr</code> <p>right border style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>right border style does not exist</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_right_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set right border style.\n    Args:\n        style: right border style\n    Raises:\n        InvalidParamError: right border style does not exist\n    \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setRightBorderStyle(gui.textframeformat.BORDER_STYLES[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_top_border_style","title":"<code>set_top_border_style(style: gui.textframeformat.BorderStyleStr)</code>","text":"<p>Set top border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr</code> <p>top border style</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>top border style does not exist</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_top_border_style(self, style: gui.textframeformat.BorderStyleStr):\n\"\"\"Set top border style.\n    Args:\n        style: top border style\n    Raises:\n        InvalidParamError: top border style does not exist\n    \"\"\"\nif style not in gui.textframeformat.BORDER_STYLES:\nraise InvalidParamError(style, gui.textframeformat.BORDER_STYLES)\nself.setTopBorderStyle(gui.textframeformat.BORDER_STYLES[style])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.TextTableFormat","title":"<code>TextTableFormat</code>","text":"<p>         Bases: <code>gui.textframeformat.TextFrameFormatMixin</code>, <code>QtGui.QTextTableFormat</code></p> Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>class TextTableFormat(gui.textframeformat.TextFrameFormatMixin, QtGui.QTextTableFormat):\ndef __bool__(self):\nreturn self.isValid()\ndef set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the format.\n        Args:\n            alignment: alignment for the format\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef get_column_width_constraints(self) -&gt; list[gui.TextLength]:\nreturn [gui.TextLength(i) for i in self.columnWidthConstraints()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttableformat.TextTableFormat.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttableformat.TextTableFormat.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttableformat.TextTableFormat.get_column_width_constraints","title":"<code>get_column_width_constraints() -&gt; list[gui.TextLength]</code>","text":"Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def get_column_width_constraints(self) -&gt; list[gui.TextLength]:\nreturn [gui.TextLength(i) for i in self.columnWidthConstraints()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.texttableformat.TextTableFormat.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the format.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the format</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the format.\n    Args:\n        alignment: alignment for the format\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Transform","title":"<code>Transform</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QTransform</code></p> Source code in <code>prettyqt\\gui\\transform.py</code> <pre><code>class Transform(serializemixin.SerializeMixin, QtGui.QTransform):\ndef __repr__(self):\nreturn get_repr(\nself,\nself.m11(),\nself.m12(),\nself.m13(),\nself.m21(),\nself.m22(),\nself.m23(),\nself.m31(),\nself.m32(),\nself.m33(),\n)\ndef __getitem__(self, value: tuple[int, int]) -&gt; float:\nmatch value[0], value[1]:\ncase 0, 0:\nreturn self.m11()\ncase 0, 1:\nreturn self.m12()\ncase 0, 2:\nreturn self.m13()\ncase 1, 0:\nreturn self.m21()\ncase 1, 1:\nreturn self.m22()\ncase 1, 2:\nreturn self.m23()\ncase 2, 0:\nreturn self.m31()\ncase 2, 1:\nreturn self.m32()\ncase 2, 2:\nreturn self.m33()\ncase _:\nraise ValueError(f\"Wrong value {value}\")\n@property\ndef _m11(self):\nreturn self.m11()\n@property\ndef _m12(self):\nreturn self.m12()\n@property\ndef _m13(self):\nreturn self.m13()\n@property\ndef _m21(self):\nreturn self.m21()\n@property\ndef _m22(self):\nreturn self.m22()\n@property\ndef _m23(self):\nreturn self.m23()\n@property\ndef _m31(self):\nreturn self.m31()\n@property\ndef _m32(self):\nreturn self.m32()\n@property\ndef _m33(self):\nreturn self.m33()\n__match_args__ = (\n\"_m11\",\n\"_m12\",\n\"_m13\",\n\"_m21\",\n\"_m22\",\n\"_m23\",\n\"_m31\",\n\"_m32\",\n\"_m33\",\n)\n@classmethod\ndef clone_from(cls, transform: QtGui.QTransform) -&gt; Self:\nreturn cls(\ntransform.m11(),\ntransform.m12(),\ntransform.m13(),\ntransform.m21(),\ntransform.m22(),\ntransform.m23(),\ntransform.m31(),\ntransform.m32(),\ntransform.m33(),\n)\ndef get_type(self) -&gt; TransformationTypeStr:\nreturn TRANSFORMATION_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.transform.Transform.__match_args__","title":"<code>__match_args__ = ('_m11', '_m12', '_m13', '_m21', '_m22', '_m23', '_m31', '_m32', '_m33')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.transform.Transform.__getitem__","title":"<code>__getitem__(value: tuple[int, int]) -&gt; float</code>","text":"Source code in <code>prettyqt\\gui\\transform.py</code> <pre><code>def __getitem__(self, value: tuple[int, int]) -&gt; float:\nmatch value[0], value[1]:\ncase 0, 0:\nreturn self.m11()\ncase 0, 1:\nreturn self.m12()\ncase 0, 2:\nreturn self.m13()\ncase 1, 0:\nreturn self.m21()\ncase 1, 1:\nreturn self.m22()\ncase 1, 2:\nreturn self.m23()\ncase 2, 0:\nreturn self.m31()\ncase 2, 1:\nreturn self.m32()\ncase 2, 2:\nreturn self.m33()\ncase _:\nraise ValueError(f\"Wrong value {value}\")\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.transform.Transform.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\transform.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself,\nself.m11(),\nself.m12(),\nself.m13(),\nself.m21(),\nself.m22(),\nself.m23(),\nself.m31(),\nself.m32(),\nself.m33(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.transform.Transform.clone_from","title":"<code>clone_from(transform: QtGui.QTransform) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\gui\\transform.py</code> <pre><code>@classmethod\ndef clone_from(cls, transform: QtGui.QTransform) -&gt; Self:\nreturn cls(\ntransform.m11(),\ntransform.m12(),\ntransform.m13(),\ntransform.m21(),\ntransform.m22(),\ntransform.m23(),\ntransform.m31(),\ntransform.m32(),\ntransform.m33(),\n)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.transform.Transform.get_type","title":"<code>get_type() -&gt; TransformationTypeStr</code>","text":"Source code in <code>prettyqt\\gui\\transform.py</code> <pre><code>def get_type(self) -&gt; TransformationTypeStr:\nreturn TRANSFORMATION_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.UndoCommand","title":"<code>UndoCommand</code>","text":"<p>         Bases: <code>QtGui.QUndoCommand</code></p> Source code in <code>prettyqt\\gui\\undocommand.py</code> <pre><code>class UndoCommand(QtGui.QUndoCommand):\ndef __len__(self) -&gt; int:\nreturn self.childCount()\ndef __getitem__(self, index: int) -&gt; QtGui.QUndoCommand:\nchild = self.child(index)\nif child is None:\nraise KeyError(index)\nreturn child\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.undocommand.UndoCommand.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtGui.QUndoCommand</code>","text":"Source code in <code>prettyqt\\gui\\undocommand.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtGui.QUndoCommand:\nchild = self.child(index)\nif child is None:\nraise KeyError(index)\nreturn child\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.undocommand.UndoCommand.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\gui\\undocommand.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.childCount()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.UndoGroup","title":"<code>UndoGroup</code>","text":"<p>         Bases: <code>UndoGroupMixin</code>, <code>QtGui.QUndoGroup</code></p> Source code in <code>prettyqt\\gui\\undogroup.py</code> <pre><code>class UndoGroup(UndoGroupMixin, QtGui.QUndoGroup):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.UndoStack","title":"<code>UndoStack</code>","text":"<p>         Bases: <code>UndoStackMixin</code>, <code>QtGui.QUndoStack</code></p> Source code in <code>prettyqt\\gui\\undostack.py</code> <pre><code>class UndoStack(UndoStackMixin, QtGui.QUndoStack):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Validator","title":"<code>Validator</code>","text":"<p>         Bases: <code>ValidatorMixin</code>, <code>QtGui.QValidator</code></p> Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>class Validator(ValidatorMixin, QtGui.QValidator):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.ValidatorMixin","title":"<code>ValidatorMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>class ValidatorMixin(core.ObjectMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef __add__(self, other: Validator):\nfrom prettyqt import custom_validators\nreturn custom_validators.CompositeValidator([self, other])\ndef __radd__(self, other: QtGui.QValidator):\n\"\"\"Needed for sum().\"\"\"\nreturn self.__add__(other)\ndef is_valid_value(self, value: str, pos: int = 0) -&gt; bool:\nval = self.validate(value, pos)\nreturn val[0] == self.State.Acceptable  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.validator.ValidatorMixin.__add__","title":"<code>__add__(other: Validator)</code>","text":"Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>def __add__(self, other: Validator):\nfrom prettyqt import custom_validators\nreturn custom_validators.CompositeValidator([self, other])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.validator.ValidatorMixin.__radd__","title":"<code>__radd__(other: QtGui.QValidator)</code>","text":"<p>Needed for sum().</p> Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>def __radd__(self, other: QtGui.QValidator):\n\"\"\"Needed for sum().\"\"\"\nreturn self.__add__(other)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.validator.ValidatorMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.validator.ValidatorMixin.is_valid_value","title":"<code>is_valid_value(value: str, pos: int = 0) -&gt; bool</code>","text":"Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>def is_valid_value(self, value: str, pos: int = 0) -&gt; bool:\nval = self.validate(value, pos)\nreturn val[0] == self.State.Acceptable  # type: ignore\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Vector3D","title":"<code>Vector3D</code>","text":"<p>         Bases: <code>QtGui.QVector3D</code></p> Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>class Vector3D(QtGui.QVector3D):\ndef __bool__(self):\nreturn not self.isNull()\ndef __abs__(self) -&gt; float:\nreturn self.length()\n@property\ndef _x(self):\nreturn self.x()\n@property\ndef _y(self):\nreturn self.y()\n@property\ndef _z(self):\nreturn self.z()\n__match_args__ = (\"_x\", \"_y\", \"z\")\ndef __reduce__(self):\nreturn type(self), (self.x(), self.y(), self.z())\ndef to_point(self) -&gt; core.Point:\nreturn core.Point(self.toPoint())\ndef to_pointf(self) -&gt; core.PointF:\nreturn core.PointF(self.toPointF())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector3d.Vector3D.__match_args__","title":"<code>__match_args__ = ('_x', '_y', 'z')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.vector3d.Vector3D.__abs__","title":"<code>__abs__() -&gt; float</code>","text":"Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>def __abs__(self) -&gt; float:\nreturn self.length()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector3d.Vector3D.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector3d.Vector3D.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.x(), self.y(), self.z())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector3d.Vector3D.to_point","title":"<code>to_point() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>def to_point(self) -&gt; core.Point:\nreturn core.Point(self.toPoint())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector3d.Vector3D.to_pointf","title":"<code>to_pointf() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>def to_pointf(self) -&gt; core.PointF:\nreturn core.PointF(self.toPointF())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Vector4D","title":"<code>Vector4D</code>","text":"<p>         Bases: <code>QtGui.QVector4D</code></p> Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>class Vector4D(QtGui.QVector4D):\ndef __bool__(self):\nreturn not self.isNull()\ndef __abs__(self) -&gt; float:\nreturn self.length()\n@property\ndef _x(self):\nreturn self.x()\n@property\ndef _y(self):\nreturn self.y()\n@property\ndef _z(self):\nreturn self.z()\n@property\ndef _w(self):\nreturn self.w()\n__match_args__ = (\"_x\", \"_y\", \"z\", \"w\")\ndef __reduce__(self):\nreturn type(self), (self.x(), self.y(), self.z(), self.w())\ndef to_point(self) -&gt; core.Point:\nreturn core.Point(self.toPoint())\ndef to_pointf(self) -&gt; core.PointF:\nreturn core.PointF(self.toPointF())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector4d.Vector4D.__match_args__","title":"<code>__match_args__ = ('_x', '_y', 'z', 'w')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/gui.html#prettyqt.gui.vector4d.Vector4D.__abs__","title":"<code>__abs__() -&gt; float</code>","text":"Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>def __abs__(self) -&gt; float:\nreturn self.length()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector4d.Vector4D.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector4d.Vector4D.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (self.x(), self.y(), self.z(), self.w())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector4d.Vector4D.to_point","title":"<code>to_point() -&gt; core.Point</code>","text":"Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>def to_point(self) -&gt; core.Point:\nreturn core.Point(self.toPoint())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.vector4d.Vector4D.to_pointf","title":"<code>to_pointf() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>def to_pointf(self) -&gt; core.PointF:\nreturn core.PointF(self.toPointF())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.Window","title":"<code>Window</code>","text":"<p>         Bases: <code>WindowMixin</code>, <code>QtGui.QWindow</code></p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>class Window(WindowMixin, QtGui.QWindow):\npass\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.WindowMixin","title":"<code>WindowMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>gui.SurfaceMixin</code></p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>class WindowMixin(core.ObjectMixin, gui.SurfaceMixin):\ndef __repr__(self):\nreturn get_repr(self)\n# def serialize_fields(self):\n#     return dict(\n#         speed=self.speed(),\n#         visibility=self.get_visibility(),\n#         scaled_size=self.scaledSize(),\n#         background_color=self.backgroundColor(),\n#     )\ndef add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\nif not isinstance(keysequence, QtGui.QKeySequence):\nkeysequence = gui.KeySequence(keysequence)\ncontext = constants.SHORTCUT_CONTEXT[context]\nreturn gui.Shortcut(keysequence, self, callback, context=context)\ndef set_visibility(self, visibility: VisibilityStr):\n\"\"\"Set window visibility.\n        Args:\n            visibility: window visibility\n        Raises:\n            InvalidParamError: window visibility does not exist\n        \"\"\"\nif visibility not in VISIBILITY:\nraise InvalidParamError(visibility, VISIBILITY)\nself.setVisibility(VISIBILITY[visibility])\ndef get_visibility(self) -&gt; VisibilityStr:\n\"\"\"Get the current window visibility.\n        Returns:\n            window visibility\n        \"\"\"\nreturn VISIBILITY.inverse[self.visibility()]\ndef start_system_resize(self, edge: constants.EdgeStr) -&gt; bool:\n\"\"\"Start system resize.\n        Args:\n            edge: edge to resize\n        Raises:\n            InvalidParamError: edge does not exist\n        \"\"\"\nif edge not in constants.EDGES:\nraise InvalidParamError(edge, constants.EDGES)\nreturn self.startSystemResize(constants.EDGES[edge])\ndef get_screen(self) -&gt; gui.Screen:\nreturn gui.Screen(self.screen())\ndef get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_modality(self, modality: constants.WindowModalityStr) -&gt; None:\n\"\"\"Set modality for the window.\n        Args:\n            modality: modality for the window\n        Raises:\n            InvalidParamError: modality type does not exist\n        \"\"\"\nif modality not in constants.WINDOW_MODALITY:\nraise InvalidParamError(modality, constants.WINDOW_MODALITY)\nself.setModality(constants.WINDOW_MODALITY[modality])\ndef get_modality(self) -&gt; constants.WindowModalityStr:\nreturn constants.WINDOW_MODALITY.inverse[self.modality()]\ndef set_file_path(self, file_path: os.PathLike):\npath = os.fspath(file_path)\nself.setFilePath(path)\ndef get_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.filePath())\ndef get_type(self) -&gt; constants.WindowTypeStr:\nreturn constants.WINDOW_TYPE.inverse[self.type()]\ndef get_window_state(self) -&gt; constants.WindowStateStr:\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\ndef get_window_states(self) -&gt; list[constants.WindowStateStr]:\nreturn constants.WINDOW_STATES.get_list(self.windowStates())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.add_shortcut","title":"<code>add_shortcut(keysequence: datatypes.KeyCombinationType, callback: Callable | None = None, context: constants.ShortcutContextStr = 'window') -&gt; gui.Shortcut</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\nif not isinstance(keysequence, QtGui.QKeySequence):\nkeysequence = gui.KeySequence(keysequence)\ncontext = constants.SHORTCUT_CONTEXT[context]\nreturn gui.Shortcut(keysequence, self, callback, context=context)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_cursor","title":"<code>get_cursor() -&gt; gui.Cursor</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_file_path","title":"<code>get_file_path() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.filePath())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_modality","title":"<code>get_modality() -&gt; constants.WindowModalityStr</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_modality(self) -&gt; constants.WindowModalityStr:\nreturn constants.WINDOW_MODALITY.inverse[self.modality()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_screen","title":"<code>get_screen() -&gt; gui.Screen</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_screen(self) -&gt; gui.Screen:\nreturn gui.Screen(self.screen())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_type","title":"<code>get_type() -&gt; constants.WindowTypeStr</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_type(self) -&gt; constants.WindowTypeStr:\nreturn constants.WINDOW_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_visibility","title":"<code>get_visibility() -&gt; VisibilityStr</code>","text":"<p>Get the current window visibility.</p> <p>Returns:</p> Type Description <code>VisibilityStr</code> <p>window visibility</p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_visibility(self) -&gt; VisibilityStr:\n\"\"\"Get the current window visibility.\n    Returns:\n        window visibility\n    \"\"\"\nreturn VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_window_state","title":"<code>get_window_state() -&gt; constants.WindowStateStr</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_window_state(self) -&gt; constants.WindowStateStr:\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.get_window_states","title":"<code>get_window_states() -&gt; list[constants.WindowStateStr]</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_window_states(self) -&gt; list[constants.WindowStateStr]:\nreturn constants.WINDOW_STATES.get_list(self.windowStates())\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.set_file_path","title":"<code>set_file_path(file_path: os.PathLike)</code>","text":"Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_file_path(self, file_path: os.PathLike):\npath = os.fspath(file_path)\nself.setFilePath(path)\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.set_modality","title":"<code>set_modality(modality: constants.WindowModalityStr) -&gt; None</code>","text":"<p>Set modality for the window.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>constants.WindowModalityStr</code> <p>modality for the window</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>modality type does not exist</p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_modality(self, modality: constants.WindowModalityStr) -&gt; None:\n\"\"\"Set modality for the window.\n    Args:\n        modality: modality for the window\n    Raises:\n        InvalidParamError: modality type does not exist\n    \"\"\"\nif modality not in constants.WINDOW_MODALITY:\nraise InvalidParamError(modality, constants.WINDOW_MODALITY)\nself.setModality(constants.WINDOW_MODALITY[modality])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.set_visibility","title":"<code>set_visibility(visibility: VisibilityStr)</code>","text":"<p>Set window visibility.</p> <p>Parameters:</p> Name Type Description Default <code>visibility</code> <code>VisibilityStr</code> <p>window visibility</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>window visibility does not exist</p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_visibility(self, visibility: VisibilityStr):\n\"\"\"Set window visibility.\n    Args:\n        visibility: window visibility\n    Raises:\n        InvalidParamError: window visibility does not exist\n    \"\"\"\nif visibility not in VISIBILITY:\nraise InvalidParamError(visibility, VISIBILITY)\nself.setVisibility(VISIBILITY[visibility])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.window.WindowMixin.start_system_resize","title":"<code>start_system_resize(edge: constants.EdgeStr) -&gt; bool</code>","text":"<p>Start system resize.</p> <p>Parameters:</p> Name Type Description Default <code>edge</code> <code>constants.EdgeStr</code> <p>edge to resize</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>edge does not exist</p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def start_system_resize(self, edge: constants.EdgeStr) -&gt; bool:\n\"\"\"Start system resize.\n    Args:\n        edge: edge to resize\n    Raises:\n        InvalidParamError: edge does not exist\n    \"\"\"\nif edge not in constants.EDGES:\nraise InvalidParamError(edge, constants.EDGES)\nreturn self.startSystemResize(constants.EDGES[edge])\n</code></pre>"},{"location":"api/gui.html#prettyqt.gui.app","title":"<code>app(args: list[str] | None = None, **kwargs: list[str] | None) -&gt; GuiApplication</code>","text":"Source code in <code>prettyqt\\gui\\__init__.py</code> <pre><code>def app(args: list[str] | None = None, **kwargs) -&gt; GuiApplication:\nif (instance := GuiApplication.instance()) is not None:\nreturn instance\nreturn GuiApplication(sys.argv if args is None else args, **kwargs)\n</code></pre>"},{"location":"api/location.html","title":"location module","text":"<p>Location module.</p>"},{"location":"api/location.html#prettyqt.location.VISIBILITY","title":"<code>VISIBILITY = bidict(unspecified=QtLocation.QLocation.UnspecifiedVisibility, device=QtLocation.QLocation.DeviceVisibility, private=QtLocation.QLocation.PrivateVisibility, public=QtLocation.QLocation.PublicVisibility)</code>  <code>module-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.VisibilityStr","title":"<code>VisibilityStr = Literal['unspecified', 'device', 'private', 'public']</code>  <code>module-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.__all__","title":"<code>__all__ = ['VISIBILITY', 'VisibilityStr', 'PlaceAttribute', 'PlaceContactDetail', 'PlaceCategory', 'PlaceRatings', 'PlaceUser', 'Place', 'PlaceSupplier', 'PlaceManager', 'PlaceIcon', 'PlaceContent', 'PlaceContentMixin', 'PlaceImage', 'PlaceReview', 'PlaceEditorial', 'GeoCodingManager', 'GeoRoutingManager', 'GeoManeuver', 'GeoRoute', 'GeoRouteMixin', 'GeoRouteRequest', 'GeoRouteSegment', 'PlaceSearchRequest', 'PlaceContentRequest', 'PlaceMatchRequest', 'GeoServiceProvider', 'PlaceReply', 'PlaceReplyMixin', 'PlaceSearchReply', 'PlaceContentReply', 'PlaceDetailsReply', 'PlaceMatchReply', 'PlaceIdReply', 'PlaceSearchResult', 'PlaceSearchResultMixin', 'PlaceResult', 'PlaceProposedSearchResult']</code>  <code>module-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.GeoCodingManager","title":"<code>GeoCodingManager</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\location\\geocodingmanager.py</code> <pre><code>class GeoCodingManager(core.ObjectMixin):\ndef __init__(self, item: QtLocation.QGeoCodingManager):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.item.locale())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geocodingmanager.GeoCodingManager.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.geocodingmanager.GeoCodingManager.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\location\\geocodingmanager.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geocodingmanager.GeoCodingManager.__init__","title":"<code>__init__(item: QtLocation.QGeoCodingManager)</code>","text":"Source code in <code>prettyqt\\location\\geocodingmanager.py</code> <pre><code>def __init__(self, item: QtLocation.QGeoCodingManager):\nself.item = item\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geocodingmanager.GeoCodingManager.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\location\\geocodingmanager.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.item.locale())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoManeuver","title":"<code>GeoManeuver</code>","text":"<p>         Bases: <code>QtLocation.QGeoManeuver</code></p> Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>class GeoManeuver(QtLocation.QGeoManeuver):\ndef __bool__(self):\nreturn self.isValid()\ndef __str__(self):\nreturn self.instructionText()\ndef __setitem__(self, index: str, val):\nattrs = self.extendedAttributes()\nattrs[index] = val\nself.setExtendedAttributes(attrs)\ndef __getitem__(self, index: str):\nattr = self.extendedAttributes()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\ndef get_position(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.position())\ndef get_waypoint(self) -&gt; positioning.GeoCoordinate | None:\nwp = self.waypoint()\nreturn positioning.GeoCoordinate(wp) if wp.isValid() else None\ndef set_direction(self, direction: InstructionDirectionStr):\n\"\"\"Set the direction.\n        Args:\n            direction: Direction\n        Raises:\n            InvalidParamError: direction does not exist\n        \"\"\"\nif direction not in INSTRUCTION_DIRECTION:\nraise InvalidParamError(direction, INSTRUCTION_DIRECTION)\nself.setDirection(INSTRUCTION_DIRECTION[direction])\ndef get_direction(self) -&gt; InstructionDirectionStr:\n\"\"\"Return current direction.\n        Returns:\n            Direction\n        \"\"\"\nreturn INSTRUCTION_DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.__getitem__","title":"<code>__getitem__(index: str)</code>","text":"Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def __getitem__(self, index: str):\nattr = self.extendedAttributes()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.__setitem__","title":"<code>__setitem__(index: str, val: str)</code>","text":"Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def __setitem__(self, index: str, val):\nattrs = self.extendedAttributes()\nattrs[index] = val\nself.setExtendedAttributes(attrs)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def __str__(self):\nreturn self.instructionText()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.get_direction","title":"<code>get_direction() -&gt; InstructionDirectionStr</code>","text":"<p>Return current direction.</p> <p>Returns:</p> Type Description <code>InstructionDirectionStr</code> <p>Direction</p> Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def get_direction(self) -&gt; InstructionDirectionStr:\n\"\"\"Return current direction.\n    Returns:\n        Direction\n    \"\"\"\nreturn INSTRUCTION_DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.get_position","title":"<code>get_position() -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def get_position(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.position())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.get_waypoint","title":"<code>get_waypoint() -&gt; positioning.GeoCoordinate | None</code>","text":"Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def get_waypoint(self) -&gt; positioning.GeoCoordinate | None:\nwp = self.waypoint()\nreturn positioning.GeoCoordinate(wp) if wp.isValid() else None\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geomaneuver.GeoManeuver.set_direction","title":"<code>set_direction(direction: InstructionDirectionStr)</code>","text":"<p>Set the direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>InstructionDirectionStr</code> <p>Direction</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>direction does not exist</p> Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def set_direction(self, direction: InstructionDirectionStr):\n\"\"\"Set the direction.\n    Args:\n        direction: Direction\n    Raises:\n        InvalidParamError: direction does not exist\n    \"\"\"\nif direction not in INSTRUCTION_DIRECTION:\nraise InvalidParamError(direction, INSTRUCTION_DIRECTION)\nself.setDirection(INSTRUCTION_DIRECTION[direction])\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoRoute","title":"<code>GeoRoute</code>","text":"<p>         Bases: <code>GeoRouteMixin</code>, <code>QtLocation.QGeoRoute</code></p> Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>class GeoRoute(GeoRouteMixin, QtLocation.QGeoRoute):\npass\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoRouteMixin","title":"<code>GeoRouteMixin</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>class GeoRouteMixin:\ndef __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.extendedAttributes()\nattrs[index] = val\nself.setExtendedAttributes(attrs)\ndef __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.extendedAttributes()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\ndef __abs__(self) -&gt; float:\nreturn self.distance()\ndef get_bounds(self) -&gt; positioning.GeoRectangle:\nreturn positioning.GeoRectangle(self.bounds())\ndef get_first_route_segment(self) -&gt; location.GeoRouteSegment:\nreturn location.GeoRouteSegment(self.firstRouteSegment())\ndef get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(i) for i in self.path()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoute.GeoRouteMixin.__abs__","title":"<code>__abs__() -&gt; float</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>def __abs__(self) -&gt; float:\nreturn self.distance()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoute.GeoRouteMixin.__getitem__","title":"<code>__getitem__(index: str) -&gt; datatypes.Variant</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>def __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.extendedAttributes()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoute.GeoRouteMixin.__setitem__","title":"<code>__setitem__(index: str, val: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>def __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.extendedAttributes()\nattrs[index] = val\nself.setExtendedAttributes(attrs)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoute.GeoRouteMixin.get_bounds","title":"<code>get_bounds() -&gt; positioning.GeoRectangle</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>def get_bounds(self) -&gt; positioning.GeoRectangle:\nreturn positioning.GeoRectangle(self.bounds())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoute.GeoRouteMixin.get_first_route_segment","title":"<code>get_first_route_segment() -&gt; location.GeoRouteSegment</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>def get_first_route_segment(self) -&gt; location.GeoRouteSegment:\nreturn location.GeoRouteSegment(self.firstRouteSegment())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoute.GeoRouteMixin.get_path","title":"<code>get_path() -&gt; list[positioning.GeoCoordinate]</code>","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>def get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(i) for i in self.path()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoRouteRequest","title":"<code>GeoRouteRequest</code>","text":"<p>         Bases: <code>QtLocation.QGeoRouteRequest</code></p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>class GeoRouteRequest(QtLocation.QGeoRouteRequest):\ndef get_waypoints(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(wp) for wp in self.waypoints()]\ndef get_exclude_areas(self) -&gt; list[positioning.GeoRectangle]:\nreturn [positioning.GeoRectangle(wp) for wp in self.excludeAreas()]\ndef get_departure_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.departureTime())\ndef set_feature_weight(self, feature: FeatureTypeStr, weight: FeatureWeightStr):\n\"\"\"Set the feature weight.\n        Args:\n            feature: Feature type\n            weight: Feature weight\n        Raises:\n            InvalidParamError: feature weight / type does not exist\n        \"\"\"\nif weight not in FEATURE_WEIGHTS:\nraise InvalidParamError(weight, FEATURE_WEIGHTS)\nif feature not in FEATURE_TYPES:\nraise InvalidParamError(feature, FEATURE_TYPES)\nself.setFeatureWeight(FEATURE_TYPES[feature], FEATURE_WEIGHTS[weight])\ndef get_feature_weight(self, feature: FeatureTypeStr) -&gt; FeatureWeightStr:\n\"\"\"Return current feature weight.\n        Returns:\n            Feature weight\n        \"\"\"\nif feature not in FEATURE_TYPES:\nraise InvalidParamError(feature, FEATURE_TYPES)\nreturn FEATURE_WEIGHTS.inverse[self.featureWeight(FEATURE_TYPES[feature])]\ndef set_route_optimization(self, optimization: RouteOptimizationStr):\n\"\"\"Set the route optimization.\n        Args:\n            optimization: Route optimization\n        Raises:\n            InvalidParamError: route optimization does not exist\n        \"\"\"\nif optimization not in ROUTE_OPTIMIZATION:\nraise InvalidParamError(optimization, ROUTE_OPTIMIZATION)\nself.setRouteOptimization(ROUTE_OPTIMIZATION[optimization])\ndef get_route_optimization(self) -&gt; RouteOptimizationStr:\n\"\"\"Return current route optimization.\n        Returns:\n            Route optimization\n        \"\"\"\nreturn ROUTE_OPTIMIZATION.inverse[self.routeOptimization()]\ndef get_travel_modes(self) -&gt; list[TravelModeStr]:\nreturn TRAVEL_MODE.get_list(self.travelModes())\ndef set_travel_modes(self, *mode: TravelModeStr):\nfor item in mode:\nif item not in TRAVEL_MODE:\nraise InvalidParamError(item, TRAVEL_MODE)\nflags = TRAVEL_MODE.merge_flags(mode)\nself.setTravelModes(flags)\ndef get_feature_types(self) -&gt; list[FeatureTypeStr]:\nreturn [k for k, v in FEATURE_TYPES.items() for t in self.featureTypes() if v &amp; t]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_departure_time","title":"<code>get_departure_time() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_departure_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.departureTime())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_exclude_areas","title":"<code>get_exclude_areas() -&gt; list[positioning.GeoRectangle]</code>","text":"Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_exclude_areas(self) -&gt; list[positioning.GeoRectangle]:\nreturn [positioning.GeoRectangle(wp) for wp in self.excludeAreas()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_feature_types","title":"<code>get_feature_types() -&gt; list[FeatureTypeStr]</code>","text":"Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_feature_types(self) -&gt; list[FeatureTypeStr]:\nreturn [k for k, v in FEATURE_TYPES.items() for t in self.featureTypes() if v &amp; t]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_feature_weight","title":"<code>get_feature_weight(feature: FeatureTypeStr) -&gt; FeatureWeightStr</code>","text":"<p>Return current feature weight.</p> <p>Returns:</p> Type Description <code>FeatureWeightStr</code> <p>Feature weight</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_feature_weight(self, feature: FeatureTypeStr) -&gt; FeatureWeightStr:\n\"\"\"Return current feature weight.\n    Returns:\n        Feature weight\n    \"\"\"\nif feature not in FEATURE_TYPES:\nraise InvalidParamError(feature, FEATURE_TYPES)\nreturn FEATURE_WEIGHTS.inverse[self.featureWeight(FEATURE_TYPES[feature])]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_route_optimization","title":"<code>get_route_optimization() -&gt; RouteOptimizationStr</code>","text":"<p>Return current route optimization.</p> <p>Returns:</p> Type Description <code>RouteOptimizationStr</code> <p>Route optimization</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_route_optimization(self) -&gt; RouteOptimizationStr:\n\"\"\"Return current route optimization.\n    Returns:\n        Route optimization\n    \"\"\"\nreturn ROUTE_OPTIMIZATION.inverse[self.routeOptimization()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_travel_modes","title":"<code>get_travel_modes() -&gt; list[TravelModeStr]</code>","text":"Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_travel_modes(self) -&gt; list[TravelModeStr]:\nreturn TRAVEL_MODE.get_list(self.travelModes())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.get_waypoints","title":"<code>get_waypoints() -&gt; list[positioning.GeoCoordinate]</code>","text":"Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_waypoints(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(wp) for wp in self.waypoints()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.set_feature_weight","title":"<code>set_feature_weight(feature: FeatureTypeStr, weight: FeatureWeightStr)</code>","text":"<p>Set the feature weight.</p> <p>Parameters:</p> Name Type Description Default <code>feature</code> <code>FeatureTypeStr</code> <p>Feature type</p> required <code>weight</code> <code>FeatureWeightStr</code> <p>Feature weight</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>feature weight / type does not exist</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_feature_weight(self, feature: FeatureTypeStr, weight: FeatureWeightStr):\n\"\"\"Set the feature weight.\n    Args:\n        feature: Feature type\n        weight: Feature weight\n    Raises:\n        InvalidParamError: feature weight / type does not exist\n    \"\"\"\nif weight not in FEATURE_WEIGHTS:\nraise InvalidParamError(weight, FEATURE_WEIGHTS)\nif feature not in FEATURE_TYPES:\nraise InvalidParamError(feature, FEATURE_TYPES)\nself.setFeatureWeight(FEATURE_TYPES[feature], FEATURE_WEIGHTS[weight])\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.set_route_optimization","title":"<code>set_route_optimization(optimization: RouteOptimizationStr)</code>","text":"<p>Set the route optimization.</p> <p>Parameters:</p> Name Type Description Default <code>optimization</code> <code>RouteOptimizationStr</code> <p>Route optimization</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>route optimization does not exist</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_route_optimization(self, optimization: RouteOptimizationStr):\n\"\"\"Set the route optimization.\n    Args:\n        optimization: Route optimization\n    Raises:\n        InvalidParamError: route optimization does not exist\n    \"\"\"\nif optimization not in ROUTE_OPTIMIZATION:\nraise InvalidParamError(optimization, ROUTE_OPTIMIZATION)\nself.setRouteOptimization(ROUTE_OPTIMIZATION[optimization])\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georouterequest.GeoRouteRequest.set_travel_modes","title":"<code>set_travel_modes(*mode: TravelModeStr)</code>","text":"Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_travel_modes(self, *mode: TravelModeStr):\nfor item in mode:\nif item not in TRAVEL_MODE:\nraise InvalidParamError(item, TRAVEL_MODE)\nflags = TRAVEL_MODE.merge_flags(mode)\nself.setTravelModes(flags)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoRouteSegment","title":"<code>GeoRouteSegment</code>","text":"<p>         Bases: <code>QtLocation.QGeoRouteSegment</code></p> Source code in <code>prettyqt\\location\\georoutesegment.py</code> <pre><code>class GeoRouteSegment(QtLocation.QGeoRouteSegment):\ndef __bool__(self):\nreturn self.isValid()\ndef __abs__(self) -&gt; float:\nreturn self.distance()\ndef get_maneuver(self) -&gt; location.GeoManeuver:\nreturn location.GeoManeuver(self.maneuver())\ndef get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(i) for i in self.path()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutesegment.GeoRouteSegment.__abs__","title":"<code>__abs__() -&gt; float</code>","text":"Source code in <code>prettyqt\\location\\georoutesegment.py</code> <pre><code>def __abs__(self) -&gt; float:\nreturn self.distance()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutesegment.GeoRouteSegment.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\georoutesegment.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutesegment.GeoRouteSegment.get_maneuver","title":"<code>get_maneuver() -&gt; location.GeoManeuver</code>","text":"Source code in <code>prettyqt\\location\\georoutesegment.py</code> <pre><code>def get_maneuver(self) -&gt; location.GeoManeuver:\nreturn location.GeoManeuver(self.maneuver())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutesegment.GeoRouteSegment.get_path","title":"<code>get_path() -&gt; list[positioning.GeoCoordinate]</code>","text":"Source code in <code>prettyqt\\location\\georoutesegment.py</code> <pre><code>def get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(i) for i in self.path()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoRoutingManager","title":"<code>GeoRoutingManager</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>class GeoRoutingManager(core.ObjectMixin):\ndef __init__(self, item: QtLocation.QGeoRoutingManager):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.item.locale())\ndef get_supported_feature_types(\nself,\n) -&gt; list[location.georouterequest.FeatureTypeStr]:\nreturn location.georouterequest.FEATURE_TYPES.get_list(\nself.item.supportedFeatureTypes()\n)\ndef get_supported_feature_weights(\nself,\n) -&gt; list[location.georouterequest.FeatureWeightStr]:\nreturn location.georouterequest.FEATURE_WEIGHTS.get_list(\nself.item.supportedFeatureWeights()\n)\ndef get_supported_maneuver_details(\nself,\n) -&gt; list[location.georouterequest.ManeuverDetailStr]:\nreturn location.georouterequest.MANEUVER_DETAIL.get_list(\nself.item.supportedManeuverDetails()\n)\ndef get_supported_route_optimizations(\nself,\n) -&gt; list[location.georouterequest.RouteOptimizationStr]:\nreturn location.georouterequest.ROUTE_OPTIMIZATION.get_list(\nself.item.supportedRouteOptimizations()\n)\ndef get_supported_segment_details(\nself,\n) -&gt; list[location.georouterequest.SegmentDetailStr]:\nreturn location.georouterequest.SEGMENT_DETAIL.get_list(\nself.item.supportedSegmentDetails()\n)\ndef get_supported_travel_modes(self) -&gt; list[location.georouterequest.TravelModeStr]:\nreturn location.georouterequest.TRAVEL_MODE.get_list(\nself.item.supportedTravelModes()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.__init__","title":"<code>__init__(item: QtLocation.QGeoRoutingManager)</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def __init__(self, item: QtLocation.QGeoRoutingManager):\nself.item = item\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.item.locale())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_supported_feature_types","title":"<code>get_supported_feature_types() -&gt; list[location.georouterequest.FeatureTypeStr]</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_supported_feature_types(\nself,\n) -&gt; list[location.georouterequest.FeatureTypeStr]:\nreturn location.georouterequest.FEATURE_TYPES.get_list(\nself.item.supportedFeatureTypes()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_supported_feature_weights","title":"<code>get_supported_feature_weights() -&gt; list[location.georouterequest.FeatureWeightStr]</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_supported_feature_weights(\nself,\n) -&gt; list[location.georouterequest.FeatureWeightStr]:\nreturn location.georouterequest.FEATURE_WEIGHTS.get_list(\nself.item.supportedFeatureWeights()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_supported_maneuver_details","title":"<code>get_supported_maneuver_details() -&gt; list[location.georouterequest.ManeuverDetailStr]</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_supported_maneuver_details(\nself,\n) -&gt; list[location.georouterequest.ManeuverDetailStr]:\nreturn location.georouterequest.MANEUVER_DETAIL.get_list(\nself.item.supportedManeuverDetails()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_supported_route_optimizations","title":"<code>get_supported_route_optimizations() -&gt; list[location.georouterequest.RouteOptimizationStr]</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_supported_route_optimizations(\nself,\n) -&gt; list[location.georouterequest.RouteOptimizationStr]:\nreturn location.georouterequest.ROUTE_OPTIMIZATION.get_list(\nself.item.supportedRouteOptimizations()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_supported_segment_details","title":"<code>get_supported_segment_details() -&gt; list[location.georouterequest.SegmentDetailStr]</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_supported_segment_details(\nself,\n) -&gt; list[location.georouterequest.SegmentDetailStr]:\nreturn location.georouterequest.SEGMENT_DETAIL.get_list(\nself.item.supportedSegmentDetails()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.georoutingmanager.GeoRoutingManager.get_supported_travel_modes","title":"<code>get_supported_travel_modes() -&gt; list[location.georouterequest.TravelModeStr]</code>","text":"Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>def get_supported_travel_modes(self) -&gt; list[location.georouterequest.TravelModeStr]:\nreturn location.georouterequest.TRAVEL_MODE.get_list(\nself.item.supportedTravelModes()\n)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.GeoServiceProvider","title":"<code>GeoServiceProvider</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtLocation.QGeoServiceProvider</code></p> Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>class GeoServiceProvider(core.ObjectMixin, QtLocation.QGeoServiceProvider):\ndef get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\ndef get_geocoding_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.geocodingError()]\ndef get_geocoding_features(self) -&gt; list[GeocodingFeatureStr]:\nreturn GEOCODING_FEATURES.get_list(self.geocodingFeatures())\ndef get_mapping_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.mappingError()]\ndef get_mapping_features(self) -&gt; list[MappingFeatureStr]:\nreturn MAPPING_FEATURES.get_list(self.mappingFeatures())\ndef get_navigation_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.navigationError()]\ndef get_navigation_features(self) -&gt; list[NavigationFeatureStr]:\nreturn NAVIGATION_FEATURES.get_list(self.navigationFeatures())\ndef get_places_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.placesError()]\ndef get_places_features(self) -&gt; list[PlaceFeatureStr]:\nreturn PLACES_FEATURES.get_list(self.placesFeatures())\ndef get_routing_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.routingError()]\ndef get_routing_features(self) -&gt; list[RoutingFeatureStr]:\nreturn ROUTING_FEATURES.get_list(self.routingFeatures())\ndef get_geocoding_manager(self) -&gt; location.GeoCodingManager:\nreturn location.GeoCodingManager(self.geocodingManager())\ndef get_routing_manager(self) -&gt; location.GeoRoutingManager:\nreturn location.GeoRoutingManager(self.routingManager())\ndef get_place_manager(self) -&gt; location.PlaceManager:\nreturn location.PlaceManager(self.placeManager())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_geocoding_error","title":"<code>get_geocoding_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_geocoding_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.geocodingError()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_geocoding_features","title":"<code>get_geocoding_features() -&gt; list[GeocodingFeatureStr]</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_geocoding_features(self) -&gt; list[GeocodingFeatureStr]:\nreturn GEOCODING_FEATURES.get_list(self.geocodingFeatures())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_geocoding_manager","title":"<code>get_geocoding_manager() -&gt; location.GeoCodingManager</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_geocoding_manager(self) -&gt; location.GeoCodingManager:\nreturn location.GeoCodingManager(self.geocodingManager())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_mapping_error","title":"<code>get_mapping_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_mapping_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.mappingError()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_mapping_features","title":"<code>get_mapping_features() -&gt; list[MappingFeatureStr]</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_mapping_features(self) -&gt; list[MappingFeatureStr]:\nreturn MAPPING_FEATURES.get_list(self.mappingFeatures())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_navigation_error","title":"<code>get_navigation_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_navigation_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.navigationError()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_navigation_features","title":"<code>get_navigation_features() -&gt; list[NavigationFeatureStr]</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_navigation_features(self) -&gt; list[NavigationFeatureStr]:\nreturn NAVIGATION_FEATURES.get_list(self.navigationFeatures())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_place_manager","title":"<code>get_place_manager() -&gt; location.PlaceManager</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_place_manager(self) -&gt; location.PlaceManager:\nreturn location.PlaceManager(self.placeManager())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_places_error","title":"<code>get_places_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_places_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.placesError()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_places_features","title":"<code>get_places_features() -&gt; list[PlaceFeatureStr]</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_places_features(self) -&gt; list[PlaceFeatureStr]:\nreturn PLACES_FEATURES.get_list(self.placesFeatures())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_routing_error","title":"<code>get_routing_error() -&gt; ErrorStr</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_routing_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.routingError()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_routing_features","title":"<code>get_routing_features() -&gt; list[RoutingFeatureStr]</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_routing_features(self) -&gt; list[RoutingFeatureStr]:\nreturn ROUTING_FEATURES.get_list(self.routingFeatures())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.geoserviceprovider.GeoServiceProvider.get_routing_manager","title":"<code>get_routing_manager() -&gt; location.GeoRoutingManager</code>","text":"Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>def get_routing_manager(self) -&gt; location.GeoRoutingManager:\nreturn location.GeoRoutingManager(self.routingManager())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.Place","title":"<code>Place</code>","text":"<p>         Bases: <code>QtLocation.QPlace</code></p> Source code in <code>prettyqt\\location\\place.py</code> <pre><code>class Place(QtLocation.QPlace):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __setitem__(self, index: str, val: QtLocation.QPlaceAttribute | None):\nif val is None:\nval = location.PlaceAttribute()\nself.setExtendedAttribute(index, val)\ndef __getitem__(self, index: str) -&gt; location.PlaceAttribute:\nattr = self.extendedAttribute(index)\nreturn location.PlaceAttribute(attr)\ndef get_categories(self) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.categories()]\ndef get_contact_details(self, contact_type: str) -&gt; list[location.PlaceContactDetail]:\nreturn [location.PlaceContactDetail(i) for i in self.contactDetails(contact_type)]\ndef set_content(self, typ: str, value: dict[int, QtLocation.QPlaceContent]):\nif typ not in location.placecontent.TYPE:\nraise InvalidParamError(typ, location.placecontent.TYPE)\nself.setContent(location.placecontent.TYPE[typ], value)\ndef get_content(self, typ: str) -&gt; dict[int, QtLocation.QPlaceContent]:\nif typ not in location.placecontent.TYPE:\nraise InvalidParamError(typ, location.placecontent.TYPE)\nreturn self.content(location.placecontent.TYPE[typ])\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef get_location(self) -&gt; positioning.GeoLocation:\nreturn positioning.GeoLocation(self.location())\ndef get_primary_website(self) -&gt; core.Url:\nreturn core.Url(self.primaryWebsite())\ndef get_ratings(self) -&gt; location.PlaceRatings:\nreturn location.PlaceRatings(self.ratings())\ndef get_supplier(self) -&gt; location.PlaceSupplier:\nreturn location.PlaceSupplier(self.supplier())\ndef get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return visibility.\n        Returns:\n            Visibility\n        \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.__getitem__","title":"<code>__getitem__(index: str) -&gt; location.PlaceAttribute</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def __getitem__(self, index: str) -&gt; location.PlaceAttribute:\nattr = self.extendedAttribute(index)\nreturn location.PlaceAttribute(attr)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.__setitem__","title":"<code>__setitem__(index: str, val: QtLocation.QPlaceAttribute | None)</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def __setitem__(self, index: str, val: QtLocation.QPlaceAttribute | None):\nif val is None:\nval = location.PlaceAttribute()\nself.setExtendedAttribute(index, val)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_categories","title":"<code>get_categories() -&gt; list[location.PlaceCategory]</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_categories(self) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.categories()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_contact_details","title":"<code>get_contact_details(contact_type: str) -&gt; list[location.PlaceContactDetail]</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_contact_details(self, contact_type: str) -&gt; list[location.PlaceContactDetail]:\nreturn [location.PlaceContactDetail(i) for i in self.contactDetails(contact_type)]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_content","title":"<code>get_content(typ: str) -&gt; dict[int, QtLocation.QPlaceContent]</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_content(self, typ: str) -&gt; dict[int, QtLocation.QPlaceContent]:\nif typ not in location.placecontent.TYPE:\nraise InvalidParamError(typ, location.placecontent.TYPE)\nreturn self.content(location.placecontent.TYPE[typ])\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_icon","title":"<code>get_icon() -&gt; location.PlaceIcon | None</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_location","title":"<code>get_location() -&gt; positioning.GeoLocation</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_location(self) -&gt; positioning.GeoLocation:\nreturn positioning.GeoLocation(self.location())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_primary_website","title":"<code>get_primary_website() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_primary_website(self) -&gt; core.Url:\nreturn core.Url(self.primaryWebsite())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_ratings","title":"<code>get_ratings() -&gt; location.PlaceRatings</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_ratings(self) -&gt; location.PlaceRatings:\nreturn location.PlaceRatings(self.ratings())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_supplier","title":"<code>get_supplier() -&gt; location.PlaceSupplier</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_supplier(self) -&gt; location.PlaceSupplier:\nreturn location.PlaceSupplier(self.supplier())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.get_visibility","title":"<code>get_visibility() -&gt; location.VisibilityStr</code>","text":"<p>Return visibility.</p> <p>Returns:</p> Type Description <code>location.VisibilityStr</code> <p>Visibility</p> Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return visibility.\n    Returns:\n        Visibility\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.place.Place.set_content","title":"<code>set_content(typ: str, value: dict[int, QtLocation.QPlaceContent])</code>","text":"Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def set_content(self, typ: str, value: dict[int, QtLocation.QPlaceContent]):\nif typ not in location.placecontent.TYPE:\nraise InvalidParamError(typ, location.placecontent.TYPE)\nself.setContent(location.placecontent.TYPE[typ], value)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceAttribute","title":"<code>PlaceAttribute</code>","text":"<p>         Bases: <code>QtLocation.QPlaceAttribute</code></p> Source code in <code>prettyqt\\location\\placeattribute.py</code> <pre><code>class PlaceAttribute(QtLocation.QPlaceAttribute):\ndef __init__(\nself,\nother_or_label: None | str | QtLocation.QPlaceAttribute = None,\nvalue: str | None = None,\n):\nif isinstance(other_or_label, QtLocation.QPlaceAttribute):\nsuper().__init__(other_or_label)\nelse:\nsuper().__init__()\nself.setLabel(other_or_label or \"\")\nself.setText(value or \"\")\ndef __repr__(self):\nreturn get_repr(self, self.label(), self.text())\ndef __str__(self):\nreturn f\"{self.label()}: {self.text()}\"\ndef __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeattribute.PlaceAttribute.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\placeattribute.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeattribute.PlaceAttribute.__init__","title":"<code>__init__(other_or_label: None | str | QtLocation.QPlaceAttribute = None, value: str | None = None)</code>","text":"Source code in <code>prettyqt\\location\\placeattribute.py</code> <pre><code>def __init__(\nself,\nother_or_label: None | str | QtLocation.QPlaceAttribute = None,\nvalue: str | None = None,\n):\nif isinstance(other_or_label, QtLocation.QPlaceAttribute):\nsuper().__init__(other_or_label)\nelse:\nsuper().__init__()\nself.setLabel(other_or_label or \"\")\nself.setText(value or \"\")\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeattribute.PlaceAttribute.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\location\\placeattribute.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.label(), self.text())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeattribute.PlaceAttribute.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\location\\placeattribute.py</code> <pre><code>def __str__(self):\nreturn f\"{self.label()}: {self.text()}\"\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceCategory","title":"<code>PlaceCategory</code>","text":"<p>         Bases: <code>QtLocation.QPlaceCategory</code></p> Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>class PlaceCategory(QtLocation.QPlaceCategory):\ndef __str__(self):\nreturn self.name()\ndef __bool__(self):\nreturn not self.isEmpty()\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return the visibility of the place.\n        Returns:\n            Visibility\n        \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecategory.PlaceCategory.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecategory.PlaceCategory.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>def __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecategory.PlaceCategory.get_icon","title":"<code>get_icon() -&gt; location.PlaceIcon | None</code>","text":"Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>def get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecategory.PlaceCategory.get_visibility","title":"<code>get_visibility() -&gt; location.VisibilityStr</code>","text":"<p>Return the visibility of the place.</p> <p>Returns:</p> Type Description <code>location.VisibilityStr</code> <p>Visibility</p> Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>def get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return the visibility of the place.\n    Returns:\n        Visibility\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContactDetail","title":"<code>PlaceContactDetail</code>","text":"<p>         Bases: <code>QtLocation.QPlaceContactDetail</code></p> Source code in <code>prettyqt\\location\\placecontactdetail.py</code> <pre><code>class PlaceContactDetail(QtLocation.QPlaceContactDetail):\ndef __init__(\nself,\nother_or_label: None | str | QtLocation.QPlaceAttribute = None,\nvalue: str | None = None,\n):\nif isinstance(other_or_label, QtLocation.QPlaceAttribute):\nsuper().__init__(other_or_label)\nelse:\nsuper().__init__()\nself.setLabel(other_or_label or \"\")\nself.setValue(value or \"\")\ndef __repr__(self):\nreturn get_repr(self, self.label(), self.value())\ndef __str__(self):\nreturn f\"{self.label()}: {self.value()}\"\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontactdetail.PlaceContactDetail.__init__","title":"<code>__init__(other_or_label: None | str | QtLocation.QPlaceAttribute = None, value: str | None = None)</code>","text":"Source code in <code>prettyqt\\location\\placecontactdetail.py</code> <pre><code>def __init__(\nself,\nother_or_label: None | str | QtLocation.QPlaceAttribute = None,\nvalue: str | None = None,\n):\nif isinstance(other_or_label, QtLocation.QPlaceAttribute):\nsuper().__init__(other_or_label)\nelse:\nsuper().__init__()\nself.setLabel(other_or_label or \"\")\nself.setValue(value or \"\")\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontactdetail.PlaceContactDetail.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\location\\placecontactdetail.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.label(), self.value())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontactdetail.PlaceContactDetail.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\location\\placecontactdetail.py</code> <pre><code>def __str__(self):\nreturn f\"{self.label()}: {self.value()}\"\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContent","title":"<code>PlaceContent</code>","text":"<p>         Bases: <code>PlaceContentMixin</code>, <code>QtLocation.QPlaceContent</code></p> Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>class PlaceContent(PlaceContentMixin, QtLocation.QPlaceContent):\npass\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContentMixin","title":"<code>PlaceContentMixin</code>","text":"Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>class PlaceContentMixin:\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return the visibility of the place.\n        Returns:\n            Place type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\ndef get_user(self) -&gt; location.PlaceUser:\nreturn location.PlaceUser(self.user())\ndef get_supplier(self) -&gt; location.PlaceSupplier:\nreturn location.PlaceSupplier(self.supplier())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontent.PlaceContentMixin.get_supplier","title":"<code>get_supplier() -&gt; location.PlaceSupplier</code>","text":"Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>def get_supplier(self) -&gt; location.PlaceSupplier:\nreturn location.PlaceSupplier(self.supplier())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontent.PlaceContentMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return the visibility of the place.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>Place type</p> Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return the visibility of the place.\n    Returns:\n        Place type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontent.PlaceContentMixin.get_user","title":"<code>get_user() -&gt; location.PlaceUser</code>","text":"Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>def get_user(self) -&gt; location.PlaceUser:\nreturn location.PlaceUser(self.user())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContentReply","title":"<code>PlaceContentReply</code>","text":"<p>         Bases: <code>location.PlaceReplyMixin</code>, <code>QtLocation.QPlaceContentReply</code></p> Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>class PlaceContentReply(location.PlaceReplyMixin, QtLocation.QPlaceContentReply):\ndef __len__(self):\nreturn self.totalCount()\n@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceContentReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setContent(obj.content())\nreply.setTotalCount(obj.totalCount())\nrequest = location.PlaceContentRequest(obj.nextPageRequest())\nreply.setNextPageRequest(request)\nrequest = location.PlaceContentRequest(obj.previousPageRequest())\nreply.setPreviousPageRequest(request)\nrequest = location.PlaceContentRequest(obj.request())\nreply.setRequest(request)\nreturn reply\ndef get_next_page_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.nextPageRequest())\ndef get_previous_page_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.previousPageRequest())\ndef get_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.request())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentreply.PlaceContentReply.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>def __len__(self):\nreturn self.totalCount()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentreply.PlaceContentReply.clone_from","title":"<code>clone_from(obj: QtLocation.QPlaceContentReply) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceContentReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setContent(obj.content())\nreply.setTotalCount(obj.totalCount())\nrequest = location.PlaceContentRequest(obj.nextPageRequest())\nreply.setNextPageRequest(request)\nrequest = location.PlaceContentRequest(obj.previousPageRequest())\nreply.setPreviousPageRequest(request)\nrequest = location.PlaceContentRequest(obj.request())\nreply.setRequest(request)\nreturn reply\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentreply.PlaceContentReply.get_next_page_request","title":"<code>get_next_page_request() -&gt; location.PlaceContentRequest</code>","text":"Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>def get_next_page_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.nextPageRequest())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentreply.PlaceContentReply.get_previous_page_request","title":"<code>get_previous_page_request() -&gt; location.PlaceContentRequest</code>","text":"Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>def get_previous_page_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.previousPageRequest())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentreply.PlaceContentReply.get_request","title":"<code>get_request() -&gt; location.PlaceContentRequest</code>","text":"Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>def get_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.request())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceContentRequest","title":"<code>PlaceContentRequest</code>","text":"<p>         Bases: <code>QtLocation.QPlaceContentRequest</code></p> Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>class PlaceContentRequest(QtLocation.QPlaceContentRequest):\ndef set_content_type(self, typ: location.placecontent.TypeStr):\n\"\"\"Set the content type.\n        Args:\n            typ: Relevance type\n        Raises:\n            InvalidParamError: content type does not exist\n        \"\"\"\nif typ not in location.placecontent.TYPE:\nraise InvalidParamError(typ, location.placecontent.TYPE)\nself.setContentType(location.placecontent.TYPE[typ])\ndef get_content_type(self) -&gt; location.placecontent.TypeStr:\n\"\"\"Return current content type.\n        Returns:\n            Relevance type\n        \"\"\"\nreturn location.placecontent.TYPE.inverse[self.contentType()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentrequest.PlaceContentRequest.get_content_type","title":"<code>get_content_type() -&gt; location.placecontent.TypeStr</code>","text":"<p>Return current content type.</p> <p>Returns:</p> Type Description <code>location.placecontent.TypeStr</code> <p>Relevance type</p> Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>def get_content_type(self) -&gt; location.placecontent.TypeStr:\n\"\"\"Return current content type.\n    Returns:\n        Relevance type\n    \"\"\"\nreturn location.placecontent.TYPE.inverse[self.contentType()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placecontentrequest.PlaceContentRequest.set_content_type","title":"<code>set_content_type(typ: location.placecontent.TypeStr)</code>","text":"<p>Set the content type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>location.placecontent.TypeStr</code> <p>Relevance type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>content type does not exist</p> Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>def set_content_type(self, typ: location.placecontent.TypeStr):\n\"\"\"Set the content type.\n    Args:\n        typ: Relevance type\n    Raises:\n        InvalidParamError: content type does not exist\n    \"\"\"\nif typ not in location.placecontent.TYPE:\nraise InvalidParamError(typ, location.placecontent.TYPE)\nself.setContentType(location.placecontent.TYPE[typ])\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceDetailsReply","title":"<code>PlaceDetailsReply</code>","text":"<p>         Bases: <code>location.PlaceReplyMixin</code>, <code>QtLocation.QPlaceDetailsReply</code></p> Source code in <code>prettyqt\\location\\placedetailsreply.py</code> <pre><code>class PlaceDetailsReply(location.PlaceReplyMixin, QtLocation.QPlaceDetailsReply):\n@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceDetailsReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setPlace(location.Place(obj.place()))\nreturn reply\ndef get_place(self) -&gt; location.Place:\nreturn location.Place(self.place())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placedetailsreply.PlaceDetailsReply.clone_from","title":"<code>clone_from(obj: QtLocation.QPlaceDetailsReply) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\location\\placedetailsreply.py</code> <pre><code>@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceDetailsReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setPlace(location.Place(obj.place()))\nreturn reply\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placedetailsreply.PlaceDetailsReply.get_place","title":"<code>get_place() -&gt; location.Place</code>","text":"Source code in <code>prettyqt\\location\\placedetailsreply.py</code> <pre><code>def get_place(self) -&gt; location.Place:\nreturn location.Place(self.place())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceIcon","title":"<code>PlaceIcon</code>","text":"<p>         Bases: <code>QtLocation.QPlaceIcon</code></p> Source code in <code>prettyqt\\location\\placeicon.py</code> <pre><code>class PlaceIcon(QtLocation.QPlaceIcon):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.parameters()\nattrs[index] = val\nself.setParameters(attrs)\ndef __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.parameters()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\n# def get_manager(self) -&gt; location.PlaceManager:\n#     return location.PlaceManager(self.manager())\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeicon.PlaceIcon.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\placeicon.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeicon.PlaceIcon.__getitem__","title":"<code>__getitem__(index: str) -&gt; datatypes.Variant</code>","text":"Source code in <code>prettyqt\\location\\placeicon.py</code> <pre><code>def __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.parameters()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeicon.PlaceIcon.__setitem__","title":"<code>__setitem__(index: str, val: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\location\\placeicon.py</code> <pre><code>def __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.parameters()\nattrs[index] = val\nself.setParameters(attrs)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeicon.PlaceIcon.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\location\\placeicon.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceIdReply","title":"<code>PlaceIdReply</code>","text":"<p>         Bases: <code>location.PlaceReplyMixin</code>, <code>QtLocation.QPlaceIdReply</code></p> Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>class PlaceIdReply(location.PlaceReplyMixin, QtLocation.QPlaceIdReply):\ndef __repr__(self):\nreturn get_repr(self, self.operationType())\n@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceIdReply) -&gt; Self:\nreply = cls(obj.operationType(), obj.parent())\nreply.setId(obj.id())\nreturn reply\ndef get_operation_type(self) -&gt; OperationTypeStr:\n\"\"\"Get current operation_type.\n        Returns:\n            current operation_type\n        \"\"\"\nreturn OPERATION_TYPES.inverse[self.operationType()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeidreply.PlaceIdReply.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.operationType())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeidreply.PlaceIdReply.clone_from","title":"<code>clone_from(obj: QtLocation.QPlaceIdReply) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceIdReply) -&gt; Self:\nreply = cls(obj.operationType(), obj.parent())\nreply.setId(obj.id())\nreturn reply\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeidreply.PlaceIdReply.get_operation_type","title":"<code>get_operation_type() -&gt; OperationTypeStr</code>","text":"<p>Get current operation_type.</p> <p>Returns:</p> Type Description <code>OperationTypeStr</code> <p>current operation_type</p> Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>def get_operation_type(self) -&gt; OperationTypeStr:\n\"\"\"Get current operation_type.\n    Returns:\n        current operation_type\n    \"\"\"\nreturn OPERATION_TYPES.inverse[self.operationType()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceManager","title":"<code>PlaceManager</code>","text":"<p>         Bases: <code>core.Object</code></p> Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>class PlaceManager(core.Object):\non_finished = core.Signal(location.PlaceSearchReply)\ndef __init__(self, item: QtLocation.QPlaceManager):\nsuper().__init__()\nself.item = item\nself.finished.connect(self._on_finished)\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef _on_finished(self, reply: QtLocation.QPlaceSearchReply):\nreply = location.PlaceSearchReply.clone_from(reply)\nself.on_finished.emit(reply)\ndef get_category(self, cat_id: str) -&gt; location.PlaceCategory:\nreturn location.PlaceCategory(self.item.category(cat_id))\ndef get_child_categories(self, cat_id: str) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.item.childCategories(cat_id)]\ndef get_locales(self) -&gt; list[core.Locale]:\nreturn [core.Locale(i) for i in self.locales()]\ndef search_place(\nself,\nsearch_term: str,\ncoord: tuple[float, float] | QtPositioning.QGeoCoordinate,\nradius: float | None = None,\nlimit: int | None = None,\nrelevance: location.placesearchrequest.RelevanceHintStr | None = None,\ncategories: list[str] | None = None,\n):\nrequest = location.PlaceSearchRequest()\nrequest.setSearchTerm(search_term)\nif radius is None:\nradius = -1\nif isinstance(coord, tuple):\ncoord = positioning.GeoCoordinate(*coord)\ncircle = positioning.GeoCircle(coord, radius)\nrequest.setSearchArea(circle)\nif limit is not None:\nrequest.setLimit(limit)\nif relevance is not None:\nrequest.set_relevance_hint(relevance)\nif categories is not None:\nself.setCategories(categories)\nreturn self.search(request)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.on_finished","title":"<code>on_finished = core.Signal(location.PlaceSearchReply)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.__init__","title":"<code>__init__(item: QtLocation.QPlaceManager)</code>","text":"Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>def __init__(self, item: QtLocation.QPlaceManager):\nsuper().__init__()\nself.item = item\nself.finished.connect(self._on_finished)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.get_category","title":"<code>get_category(cat_id: str) -&gt; location.PlaceCategory</code>","text":"Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>def get_category(self, cat_id: str) -&gt; location.PlaceCategory:\nreturn location.PlaceCategory(self.item.category(cat_id))\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.get_child_categories","title":"<code>get_child_categories(cat_id: str) -&gt; list[location.PlaceCategory]</code>","text":"Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>def get_child_categories(self, cat_id: str) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.item.childCategories(cat_id)]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.get_locales","title":"<code>get_locales() -&gt; list[core.Locale]</code>","text":"Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>def get_locales(self) -&gt; list[core.Locale]:\nreturn [core.Locale(i) for i in self.locales()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placemanager.PlaceManager.search_place","title":"<code>search_place(search_term: str, coord: tuple[float, float] | QtPositioning.QGeoCoordinate, radius: float | None = None, limit: int | None = None, relevance: location.placesearchrequest.RelevanceHintStr | None = None, categories: list[str] | None = None)</code>","text":"Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>def search_place(\nself,\nsearch_term: str,\ncoord: tuple[float, float] | QtPositioning.QGeoCoordinate,\nradius: float | None = None,\nlimit: int | None = None,\nrelevance: location.placesearchrequest.RelevanceHintStr | None = None,\ncategories: list[str] | None = None,\n):\nrequest = location.PlaceSearchRequest()\nrequest.setSearchTerm(search_term)\nif radius is None:\nradius = -1\nif isinstance(coord, tuple):\ncoord = positioning.GeoCoordinate(*coord)\ncircle = positioning.GeoCircle(coord, radius)\nrequest.setSearchArea(circle)\nif limit is not None:\nrequest.setLimit(limit)\nif relevance is not None:\nrequest.set_relevance_hint(relevance)\nif categories is not None:\nself.setCategories(categories)\nreturn self.search(request)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceMatchReply","title":"<code>PlaceMatchReply</code>","text":"<p>         Bases: <code>location.PlaceReplyMixin</code>, <code>QtLocation.QPlaceMatchReply</code></p> Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>class PlaceMatchReply(location.PlaceReplyMixin, QtLocation.QPlaceMatchReply):\ndef __iter__(self) -&gt; Iterator[location.Place]:\nreturn iter(self.get_places())\ndef __getitem__(self, index: int) -&gt; location.Place:\nreturn self.get_places()[index]\ndef __len__(self):\nreturn len(self.get_places())\n@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceMatchReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setPlaces([location.Place(i) for i in obj.places()])\nrequest = location.PlaceMatchRequest(obj.request())\nreply.setRequest(request)\nreturn reply\ndef get_places(self) -&gt; list[location.Place]:\nreturn [location.Place(i) for i in self.places()]\ndef get_request(self) -&gt; location.PlaceMatchRequest:\nreturn location.PlaceMatchRequest(self.request())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchreply.PlaceMatchReply.__getitem__","title":"<code>__getitem__(index: int) -&gt; location.Place</code>","text":"Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>def __getitem__(self, index: int) -&gt; location.Place:\nreturn self.get_places()[index]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchreply.PlaceMatchReply.__iter__","title":"<code>__iter__() -&gt; Iterator[location.Place]</code>","text":"Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>def __iter__(self) -&gt; Iterator[location.Place]:\nreturn iter(self.get_places())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchreply.PlaceMatchReply.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>def __len__(self):\nreturn len(self.get_places())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchreply.PlaceMatchReply.clone_from","title":"<code>clone_from(obj: QtLocation.QPlaceMatchReply) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceMatchReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setPlaces([location.Place(i) for i in obj.places()])\nrequest = location.PlaceMatchRequest(obj.request())\nreply.setRequest(request)\nreturn reply\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchreply.PlaceMatchReply.get_places","title":"<code>get_places() -&gt; list[location.Place]</code>","text":"Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>def get_places(self) -&gt; list[location.Place]:\nreturn [location.Place(i) for i in self.places()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchreply.PlaceMatchReply.get_request","title":"<code>get_request() -&gt; location.PlaceMatchRequest</code>","text":"Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>def get_request(self) -&gt; location.PlaceMatchRequest:\nreturn location.PlaceMatchRequest(self.request())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceMatchRequest","title":"<code>PlaceMatchRequest</code>","text":"<p>         Bases: <code>QtLocation.QPlaceMatchRequest</code></p> Source code in <code>prettyqt\\location\\placematchrequest.py</code> <pre><code>class PlaceMatchRequest(QtLocation.QPlaceMatchRequest):\ndef __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.parameters()\nattrs[index] = val\nself.setParameters(attrs)\ndef __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.parameters()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\ndef get_places(self) -&gt; list[location.Place]:\nreturn [location.Place(i) for i in self.places()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchrequest.PlaceMatchRequest.__getitem__","title":"<code>__getitem__(index: str) -&gt; datatypes.Variant</code>","text":"Source code in <code>prettyqt\\location\\placematchrequest.py</code> <pre><code>def __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.parameters()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchrequest.PlaceMatchRequest.__setitem__","title":"<code>__setitem__(index: str, val: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\location\\placematchrequest.py</code> <pre><code>def __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.parameters()\nattrs[index] = val\nself.setParameters(attrs)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placematchrequest.PlaceMatchRequest.get_places","title":"<code>get_places() -&gt; list[location.Place]</code>","text":"Source code in <code>prettyqt\\location\\placematchrequest.py</code> <pre><code>def get_places(self) -&gt; list[location.Place]:\nreturn [location.Place(i) for i in self.places()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceProposedSearchResult","title":"<code>PlaceProposedSearchResult</code>","text":"<p>         Bases: <code>location.PlaceSearchResultMixin</code>, <code>QtLocation.QPlaceProposedSearchResult</code></p> Source code in <code>prettyqt\\location\\placeproposedsearchresult.py</code> <pre><code>class PlaceProposedSearchResult(\nlocation.PlaceSearchResultMixin, QtLocation.QPlaceProposedSearchResult\n):\npass\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceRatings","title":"<code>PlaceRatings</code>","text":"<p>         Bases: <code>QtLocation.QPlaceRatings</code></p> Source code in <code>prettyqt\\location\\placeratings.py</code> <pre><code>class PlaceRatings(QtLocation.QPlaceRatings):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __float__(self):\nreturn self.average()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeratings.PlaceRatings.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\placeratings.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeratings.PlaceRatings.__float__","title":"<code>__float__()</code>","text":"Source code in <code>prettyqt\\location\\placeratings.py</code> <pre><code>def __float__(self):\nreturn self.average()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceReply","title":"<code>PlaceReply</code>","text":"<p>         Bases: <code>PlaceReplyMixin</code>, <code>QtLocation.QPlaceReply</code></p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>class PlaceReply(PlaceReplyMixin, QtLocation.QPlaceReply):\npass\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceReplyMixin","title":"<code>PlaceReplyMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>class PlaceReplyMixin(core.ObjectMixin):\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            Error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return type.\n        Returns:\n            Type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placereply.PlaceReplyMixin.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>Error type</p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        Error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placereply.PlaceReplyMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>Type</p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return type.\n    Returns:\n        Type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceResult","title":"<code>PlaceResult</code>","text":"<p>         Bases: <code>location.PlaceSearchResultMixin</code>, <code>QtLocation.QPlaceResult</code></p> Source code in <code>prettyqt\\location\\placeresult.py</code> <pre><code>class PlaceResult(location.PlaceSearchResultMixin, QtLocation.QPlaceResult):\ndef get_place(self) -&gt; location.Place:\nreturn location.Place(self.place())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeresult.PlaceResult.get_place","title":"<code>get_place() -&gt; location.Place</code>","text":"Source code in <code>prettyqt\\location\\placeresult.py</code> <pre><code>def get_place(self) -&gt; location.Place:\nreturn location.Place(self.place())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSearchReply","title":"<code>PlaceSearchReply</code>","text":"<p>         Bases: <code>location.PlaceReplyMixin</code>, <code>QtLocation.QPlaceSearchReply</code></p> Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>class PlaceSearchReply(location.PlaceReplyMixin, QtLocation.QPlaceSearchReply):\ndef __iter__(self) -&gt; Iterator[location.PlaceSearchResult]:\nreturn iter(self.get_results())\ndef __getitem__(self, index: int) -&gt; location.PlaceSearchResult:\nreturn self.get_results()[index]\ndef __len__(self):\nreturn len(self.get_results())\n@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceSearchReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setResults([location.PlaceSearchResult(i) for i in obj.results()])\nrequest = location.PlaceSearchRequest(obj.nextPageRequest())\nreply.setNextPageRequest(request)\nrequest = location.PlaceSearchRequest(obj.previousPageRequest())\nreply.setPreviousPageRequest(request)\nrequest = location.PlaceSearchRequest(obj.request())\nreply.setRequest(request)\nreturn reply\ndef get_results(self) -&gt; list[location.PlaceSearchResult]:\nreturn [location.PlaceSearchResult(i) for i in self.results()]\ndef get_next_page_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.nextPageRequest())\ndef get_previous_page_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.previousPageRequest())\ndef get_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.request())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.__getitem__","title":"<code>__getitem__(index: int) -&gt; location.PlaceSearchResult</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def __getitem__(self, index: int) -&gt; location.PlaceSearchResult:\nreturn self.get_results()[index]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.__iter__","title":"<code>__iter__() -&gt; Iterator[location.PlaceSearchResult]</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def __iter__(self) -&gt; Iterator[location.PlaceSearchResult]:\nreturn iter(self.get_results())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def __len__(self):\nreturn len(self.get_results())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.clone_from","title":"<code>clone_from(obj: QtLocation.QPlaceSearchReply) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>@classmethod\ndef clone_from(cls, obj: QtLocation.QPlaceSearchReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setResults([location.PlaceSearchResult(i) for i in obj.results()])\nrequest = location.PlaceSearchRequest(obj.nextPageRequest())\nreply.setNextPageRequest(request)\nrequest = location.PlaceSearchRequest(obj.previousPageRequest())\nreply.setPreviousPageRequest(request)\nrequest = location.PlaceSearchRequest(obj.request())\nreply.setRequest(request)\nreturn reply\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.get_next_page_request","title":"<code>get_next_page_request() -&gt; location.PlaceSearchRequest</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def get_next_page_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.nextPageRequest())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.get_previous_page_request","title":"<code>get_previous_page_request() -&gt; location.PlaceSearchRequest</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def get_previous_page_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.previousPageRequest())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.get_request","title":"<code>get_request() -&gt; location.PlaceSearchRequest</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def get_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.request())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchreply.PlaceSearchReply.get_results","title":"<code>get_results() -&gt; list[location.PlaceSearchResult]</code>","text":"Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>def get_results(self) -&gt; list[location.PlaceSearchResult]:\nreturn [location.PlaceSearchResult(i) for i in self.results()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSearchRequest","title":"<code>PlaceSearchRequest</code>","text":"<p>         Bases: <code>QtLocation.QPlaceSearchRequest</code></p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>class PlaceSearchRequest(QtLocation.QPlaceSearchRequest):\ndef get_visibility_scope(self) -&gt; location.VisibilityStr:\n\"\"\"Return the scope of the visibility.\n        Returns:\n            Visibility scope\n        \"\"\"\nreturn location.VISIBILITY.inverse[self.visibilityScope()]\ndef get_categories(self) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.categories()]\ndef get_search_area(self) -&gt; positioning.GeoShape:\narea = self.searchArea()\nmatch area:\ncase QtPositioning.QGeoCircle():\nreturn positioning.GeoCircle(area)\ncase QtPositioning.QGeoPath():\nreturn positioning.GeoPath(area)\ncase QtPositioning.QGeoPolygon():\nreturn positioning.GeoPolygon(area)\ncase QtPositioning.QGeoRectangle():\nreturn positioning.GeoRectangle(area)\ncase _:\nreturn positioning.GeoShape(area)\ndef set_relevance_hint(self, hint: RelevanceHintStr):\n\"\"\"Set the relevance hint.\n        Args:\n            hint: Relevance hint\n        Raises:\n            InvalidParamError: relevance hint does not exist\n        \"\"\"\nif hint not in RELEVANCE_HINT:\nraise InvalidParamError(hint, RELEVANCE_HINT)\nself.setRelevanceHint(RELEVANCE_HINT[hint])\ndef get_relevance_hint(self) -&gt; RelevanceHintStr:\n\"\"\"Return current relevance hint.\n        Returns:\n            Relevance hint\n        \"\"\"\nreturn RELEVANCE_HINT.inverse[self.relevanceHint()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_categories","title":"<code>get_categories() -&gt; list[location.PlaceCategory]</code>","text":"Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_categories(self) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.categories()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_relevance_hint","title":"<code>get_relevance_hint() -&gt; RelevanceHintStr</code>","text":"<p>Return current relevance hint.</p> <p>Returns:</p> Type Description <code>RelevanceHintStr</code> <p>Relevance hint</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_relevance_hint(self) -&gt; RelevanceHintStr:\n\"\"\"Return current relevance hint.\n    Returns:\n        Relevance hint\n    \"\"\"\nreturn RELEVANCE_HINT.inverse[self.relevanceHint()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_search_area","title":"<code>get_search_area() -&gt; positioning.GeoShape</code>","text":"Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_search_area(self) -&gt; positioning.GeoShape:\narea = self.searchArea()\nmatch area:\ncase QtPositioning.QGeoCircle():\nreturn positioning.GeoCircle(area)\ncase QtPositioning.QGeoPath():\nreturn positioning.GeoPath(area)\ncase QtPositioning.QGeoPolygon():\nreturn positioning.GeoPolygon(area)\ncase QtPositioning.QGeoRectangle():\nreturn positioning.GeoRectangle(area)\ncase _:\nreturn positioning.GeoShape(area)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_visibility_scope","title":"<code>get_visibility_scope() -&gt; location.VisibilityStr</code>","text":"<p>Return the scope of the visibility.</p> <p>Returns:</p> Type Description <code>location.VisibilityStr</code> <p>Visibility scope</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_visibility_scope(self) -&gt; location.VisibilityStr:\n\"\"\"Return the scope of the visibility.\n    Returns:\n        Visibility scope\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibilityScope()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.set_relevance_hint","title":"<code>set_relevance_hint(hint: RelevanceHintStr)</code>","text":"<p>Set the relevance hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>RelevanceHintStr</code> <p>Relevance hint</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>relevance hint does not exist</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def set_relevance_hint(self, hint: RelevanceHintStr):\n\"\"\"Set the relevance hint.\n    Args:\n        hint: Relevance hint\n    Raises:\n        InvalidParamError: relevance hint does not exist\n    \"\"\"\nif hint not in RELEVANCE_HINT:\nraise InvalidParamError(hint, RELEVANCE_HINT)\nself.setRelevanceHint(RELEVANCE_HINT[hint])\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSearchResult","title":"<code>PlaceSearchResult</code>","text":"<p>         Bases: <code>PlaceSearchResultMixin</code>, <code>QtLocation.QPlaceSearchResult</code></p> Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>class PlaceSearchResult(PlaceSearchResultMixin, QtLocation.QPlaceSearchResult):\npass\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSearchResultMixin","title":"<code>PlaceSearchResultMixin</code>","text":"Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>class PlaceSearchResultMixin:\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return result type.\n        Returns:\n            Result type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchresult.PlaceSearchResultMixin.get_icon","title":"<code>get_icon() -&gt; location.PlaceIcon | None</code>","text":"Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>def get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesearchresult.PlaceSearchResultMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return result type.</p> <p>Returns:</p> Type Description <code>TypeStr</code> <p>Result type</p> Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return result type.\n    Returns:\n        Result type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceSupplier","title":"<code>PlaceSupplier</code>","text":"<p>         Bases: <code>QtLocation.QPlaceSupplier</code></p> Source code in <code>prettyqt\\location\\placesupplier.py</code> <pre><code>class PlaceSupplier(QtLocation.QPlaceSupplier):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef set_url(self, url: datatypes.UrlType):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesupplier.PlaceSupplier.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\location\\placesupplier.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesupplier.PlaceSupplier.get_icon","title":"<code>get_icon() -&gt; location.PlaceIcon | None</code>","text":"Source code in <code>prettyqt\\location\\placesupplier.py</code> <pre><code>def get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesupplier.PlaceSupplier.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\location\\placesupplier.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placesupplier.PlaceSupplier.set_url","title":"<code>set_url(url: datatypes.UrlType)</code>","text":"Source code in <code>prettyqt\\location\\placesupplier.py</code> <pre><code>def set_url(self, url: datatypes.UrlType):\nurl = core.Url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"api/location.html#prettyqt.location.PlaceUser","title":"<code>PlaceUser</code>","text":"<p>         Bases: <code>QtLocation.QPlaceUser</code></p> Source code in <code>prettyqt\\location\\placeuser.py</code> <pre><code>class PlaceUser(QtLocation.QPlaceUser):\ndef __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"api/location.html#prettyqt.location.placeuser.PlaceUser.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\location\\placeuser.py</code> <pre><code>def __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"api/multimedia.html","title":"multimedia module","text":"<p>multimedia module.</p> <p>contains QtMultimedia-based classes</p>"},{"location":"api/multimedia.html#prettyqt.multimedia.__all__","title":"<code>__all__ = ['AudioFormat', 'AudioDevice', 'Camera', 'CameraDevice', 'CameraFormat', 'MediaPlayer']</code>  <code>module-attribute</code>","text":""},{"location":"api/multimedia.html#prettyqt.multimedia.AudioDevice","title":"<code>AudioDevice</code>","text":"<p>         Bases: <code>QtMultimedia.QAudioDevice</code></p> Source code in <code>prettyqt\\multimedia\\audiodevice.py</code> <pre><code>class AudioDevice(QtMultimedia.QAudioDevice):\ndef get_mode(self) -&gt; ModeStr:\nreturn MODE.inverse[self.mode()]\ndef get_supported_sample_formats(\nself,\n) -&gt; list[multimedia.audioformat.SampleFormatStr]:\nreturn multimedia.audioformat.SAMPLE_FORMAT.get_list(\nself.supportedSampleFormats()\n)\ndef get_channel_config(self) -&gt; multimedia.audioformat.ChannelConfigStr:\nreturn multimedia.audioformat.CHANNEL_CONFIG.inverse[self.channelConfiguration()]\ndef get_id(self) -&gt; str:\nreturn self.id().data().decode()\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audiodevice.AudioDevice.get_channel_config","title":"<code>get_channel_config() -&gt; multimedia.audioformat.ChannelConfigStr</code>","text":"Source code in <code>prettyqt\\multimedia\\audiodevice.py</code> <pre><code>def get_channel_config(self) -&gt; multimedia.audioformat.ChannelConfigStr:\nreturn multimedia.audioformat.CHANNEL_CONFIG.inverse[self.channelConfiguration()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audiodevice.AudioDevice.get_id","title":"<code>get_id() -&gt; str</code>","text":"Source code in <code>prettyqt\\multimedia\\audiodevice.py</code> <pre><code>def get_id(self) -&gt; str:\nreturn self.id().data().decode()\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audiodevice.AudioDevice.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"Source code in <code>prettyqt\\multimedia\\audiodevice.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\nreturn MODE.inverse[self.mode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audiodevice.AudioDevice.get_supported_sample_formats","title":"<code>get_supported_sample_formats() -&gt; list[multimedia.audioformat.SampleFormatStr]</code>","text":"Source code in <code>prettyqt\\multimedia\\audiodevice.py</code> <pre><code>def get_supported_sample_formats(\nself,\n) -&gt; list[multimedia.audioformat.SampleFormatStr]:\nreturn multimedia.audioformat.SAMPLE_FORMAT.get_list(\nself.supportedSampleFormats()\n)\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.AudioFormat","title":"<code>AudioFormat</code>","text":"<p>         Bases: <code>QtMultimedia.QAudioFormat</code></p> Source code in <code>prettyqt\\multimedia\\audioformat.py</code> <pre><code>class AudioFormat(QtMultimedia.QAudioFormat):\ndef set_sample_format(self, mode: SampleFormatStr):\nif mode not in SAMPLE_FORMAT:\nraise InvalidParamError(mode, SAMPLE_FORMAT)\nself.setSampleFormat(SAMPLE_FORMAT[mode])\ndef get_sample_format(self) -&gt; SampleFormatStr:\nreturn SAMPLE_FORMAT.inverse[self.sampleFormat()]\ndef set_channel_config(self, config: ChannelConfigStr):\nif config not in CHANNEL_CONFIG:\nraise InvalidParamError(config, CHANNEL_CONFIG)\nself.setChannelConfig(CHANNEL_CONFIG[config])\ndef get_channel_config(self) -&gt; ChannelConfigStr:\nreturn CHANNEL_CONFIG.inverse[self.channelConfig()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audioformat.AudioFormat.get_channel_config","title":"<code>get_channel_config() -&gt; ChannelConfigStr</code>","text":"Source code in <code>prettyqt\\multimedia\\audioformat.py</code> <pre><code>def get_channel_config(self) -&gt; ChannelConfigStr:\nreturn CHANNEL_CONFIG.inverse[self.channelConfig()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audioformat.AudioFormat.get_sample_format","title":"<code>get_sample_format() -&gt; SampleFormatStr</code>","text":"Source code in <code>prettyqt\\multimedia\\audioformat.py</code> <pre><code>def get_sample_format(self) -&gt; SampleFormatStr:\nreturn SAMPLE_FORMAT.inverse[self.sampleFormat()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audioformat.AudioFormat.set_channel_config","title":"<code>set_channel_config(config: ChannelConfigStr)</code>","text":"Source code in <code>prettyqt\\multimedia\\audioformat.py</code> <pre><code>def set_channel_config(self, config: ChannelConfigStr):\nif config not in CHANNEL_CONFIG:\nraise InvalidParamError(config, CHANNEL_CONFIG)\nself.setChannelConfig(CHANNEL_CONFIG[config])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.audioformat.AudioFormat.set_sample_format","title":"<code>set_sample_format(mode: SampleFormatStr)</code>","text":"Source code in <code>prettyqt\\multimedia\\audioformat.py</code> <pre><code>def set_sample_format(self, mode: SampleFormatStr):\nif mode not in SAMPLE_FORMAT:\nraise InvalidParamError(mode, SAMPLE_FORMAT)\nself.setSampleFormat(SAMPLE_FORMAT[mode])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.Camera","title":"<code>Camera</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QCamera</code></p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>class Camera(core.ObjectMixin, QtMultimedia.QCamera):\ndef set_exposure_mode(self, mode: ExposureModeStr):\n\"\"\"Set the exposure mode.\n        Args:\n            mode: exposure mode\n        Raises:\n            InvalidParamError: exposure mode does not exist\n        \"\"\"\nif mode not in EXPOSURE_MODE:\nraise InvalidParamError(mode, EXPOSURE_MODE)\nself.setExposureMode(EXPOSURE_MODE[mode])\ndef get_exposure_mode(self) -&gt; ExposureModeStr:\n\"\"\"Return current exposure mode.\n        Returns:\n            exposure mode\n        \"\"\"\nreturn EXPOSURE_MODE.inverse[self.exposureMode()]\ndef set_torch_mode(self, mode: TorchModeStr):\n\"\"\"Set the torch mode.\n        Args:\n            mode: torch mode\n        Raises:\n            InvalidParamError: torch mode does not exist\n        \"\"\"\nif mode not in TORCH_MODE:\nraise InvalidParamError(mode, TORCH_MODE)\nself.setTorchMode(TORCH_MODE[mode])\ndef get_torch_mode(self) -&gt; TorchModeStr:\n\"\"\"Return current torch mode.\n        Returns:\n            torch mode\n        \"\"\"\nreturn TORCH_MODE.inverse[self.torchMode()]\ndef set_flash_mode(self, mode: FlashModeStr):\n\"\"\"Set the flash mode.\n        Args:\n            mode: flash mode\n        Raises:\n            InvalidParamError: flash mode does not exist\n        \"\"\"\nif mode not in FLASH_MODE:\nraise InvalidParamError(mode, FLASH_MODE)\nself.setFlashMode(FLASH_MODE[mode])\ndef get_flash_mode(self) -&gt; FlashModeStr:\n\"\"\"Return current flash mode.\n        Returns:\n            flash mode\n        \"\"\"\nreturn FLASH_MODE.inverse[self.flashMode()]\ndef set_white_balance_mode(self, mode: WhiteBalanceStr):\n\"\"\"Set the white balance mode.\n        Args:\n            mode: white balance mode\n        Raises:\n            InvalidParamError: white balance mode does not exist\n        \"\"\"\nif mode not in WHITE_BALANCE:\nraise InvalidParamError(mode, WHITE_BALANCE)\nself.setWhiteBalanceMode(WHITE_BALANCE[mode])\ndef get_white_balance_mode(self) -&gt; WhiteBalanceStr:\n\"\"\"Return current white balance mode.\n        Returns:\n            white balance mode\n        \"\"\"\nreturn WHITE_BALANCE.inverse[self.whiteBalanceMode()]\ndef get_supported_features(self) -&gt; list[FeatureStr]:\nreturn FEATURE.get_list(self.supportedFeatures())\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error state.\n        Returns:\n            error state\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_camera_format(self) -&gt; multimedia.CameraFormat:\nreturn multimedia.CameraFormat(self.cameraFormat())\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_camera_format","title":"<code>get_camera_format() -&gt; multimedia.CameraFormat</code>","text":"Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_camera_format(self) -&gt; multimedia.CameraFormat:\nreturn multimedia.CameraFormat(self.cameraFormat())\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return current error state.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error state</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error state.\n    Returns:\n        error state\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_exposure_mode","title":"<code>get_exposure_mode() -&gt; ExposureModeStr</code>","text":"<p>Return current exposure mode.</p> <p>Returns:</p> Type Description <code>ExposureModeStr</code> <p>exposure mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_exposure_mode(self) -&gt; ExposureModeStr:\n\"\"\"Return current exposure mode.\n    Returns:\n        exposure mode\n    \"\"\"\nreturn EXPOSURE_MODE.inverse[self.exposureMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_flash_mode","title":"<code>get_flash_mode() -&gt; FlashModeStr</code>","text":"<p>Return current flash mode.</p> <p>Returns:</p> Type Description <code>FlashModeStr</code> <p>flash mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_flash_mode(self) -&gt; FlashModeStr:\n\"\"\"Return current flash mode.\n    Returns:\n        flash mode\n    \"\"\"\nreturn FLASH_MODE.inverse[self.flashMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_supported_features","title":"<code>get_supported_features() -&gt; list[FeatureStr]</code>","text":"Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_supported_features(self) -&gt; list[FeatureStr]:\nreturn FEATURE.get_list(self.supportedFeatures())\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_torch_mode","title":"<code>get_torch_mode() -&gt; TorchModeStr</code>","text":"<p>Return current torch mode.</p> <p>Returns:</p> Type Description <code>TorchModeStr</code> <p>torch mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_torch_mode(self) -&gt; TorchModeStr:\n\"\"\"Return current torch mode.\n    Returns:\n        torch mode\n    \"\"\"\nreturn TORCH_MODE.inverse[self.torchMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.get_white_balance_mode","title":"<code>get_white_balance_mode() -&gt; WhiteBalanceStr</code>","text":"<p>Return current white balance mode.</p> <p>Returns:</p> Type Description <code>WhiteBalanceStr</code> <p>white balance mode</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_white_balance_mode(self) -&gt; WhiteBalanceStr:\n\"\"\"Return current white balance mode.\n    Returns:\n        white balance mode\n    \"\"\"\nreturn WHITE_BALANCE.inverse[self.whiteBalanceMode()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_exposure_mode","title":"<code>set_exposure_mode(mode: ExposureModeStr)</code>","text":"<p>Set the exposure mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ExposureModeStr</code> <p>exposure mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>exposure mode does not exist</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_exposure_mode(self, mode: ExposureModeStr):\n\"\"\"Set the exposure mode.\n    Args:\n        mode: exposure mode\n    Raises:\n        InvalidParamError: exposure mode does not exist\n    \"\"\"\nif mode not in EXPOSURE_MODE:\nraise InvalidParamError(mode, EXPOSURE_MODE)\nself.setExposureMode(EXPOSURE_MODE[mode])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_flash_mode","title":"<code>set_flash_mode(mode: FlashModeStr)</code>","text":"<p>Set the flash mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FlashModeStr</code> <p>flash mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>flash mode does not exist</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_flash_mode(self, mode: FlashModeStr):\n\"\"\"Set the flash mode.\n    Args:\n        mode: flash mode\n    Raises:\n        InvalidParamError: flash mode does not exist\n    \"\"\"\nif mode not in FLASH_MODE:\nraise InvalidParamError(mode, FLASH_MODE)\nself.setFlashMode(FLASH_MODE[mode])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_torch_mode","title":"<code>set_torch_mode(mode: TorchModeStr)</code>","text":"<p>Set the torch mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>TorchModeStr</code> <p>torch mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>torch mode does not exist</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_torch_mode(self, mode: TorchModeStr):\n\"\"\"Set the torch mode.\n    Args:\n        mode: torch mode\n    Raises:\n        InvalidParamError: torch mode does not exist\n    \"\"\"\nif mode not in TORCH_MODE:\nraise InvalidParamError(mode, TORCH_MODE)\nself.setTorchMode(TORCH_MODE[mode])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.camera.Camera.set_white_balance_mode","title":"<code>set_white_balance_mode(mode: WhiteBalanceStr)</code>","text":"<p>Set the white balance mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>WhiteBalanceStr</code> <p>white balance mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>white balance mode does not exist</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_white_balance_mode(self, mode: WhiteBalanceStr):\n\"\"\"Set the white balance mode.\n    Args:\n        mode: white balance mode\n    Raises:\n        InvalidParamError: white balance mode does not exist\n    \"\"\"\nif mode not in WHITE_BALANCE:\nraise InvalidParamError(mode, WHITE_BALANCE)\nself.setWhiteBalanceMode(WHITE_BALANCE[mode])\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.CameraDevice","title":"<code>CameraDevice</code>","text":"<p>         Bases: <code>QtMultimedia.QCameraDevice</code></p> Source code in <code>prettyqt\\multimedia\\cameradevice.py</code> <pre><code>class CameraDevice(QtMultimedia.QCameraDevice):\ndef get_position(self) -&gt; PositionStr:\nreturn POSITION.inverse[self.position()]\ndef get_video_formats(self) -&gt; list[multimedia.CameraFormat]:\nreturn [multimedia.CameraFormat(i) for i in self.videoFormats()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.cameradevice.CameraDevice.get_position","title":"<code>get_position() -&gt; PositionStr</code>","text":"Source code in <code>prettyqt\\multimedia\\cameradevice.py</code> <pre><code>def get_position(self) -&gt; PositionStr:\nreturn POSITION.inverse[self.position()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.cameradevice.CameraDevice.get_video_formats","title":"<code>get_video_formats() -&gt; list[multimedia.CameraFormat]</code>","text":"Source code in <code>prettyqt\\multimedia\\cameradevice.py</code> <pre><code>def get_video_formats(self) -&gt; list[multimedia.CameraFormat]:\nreturn [multimedia.CameraFormat(i) for i in self.videoFormats()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.CameraFormat","title":"<code>CameraFormat</code>","text":"<p>         Bases: <code>QtMultimedia.QCameraFormat</code></p> Source code in <code>prettyqt\\multimedia\\cameraformat.py</code> <pre><code>class CameraFormat(QtMultimedia.QCameraFormat):\ndef __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.cameraformat.CameraFormat.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\multimedia\\cameraformat.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.MediaPlayer","title":"<code>MediaPlayer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QMediaPlayer</code></p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>class MediaPlayer(core.ObjectMixin, QtMultimedia.QMediaPlayer):\ndef set_source_device(\nself, device: QtCore.QIODevice, url: datatypes.UrlType | None = None\n):\nif not isinstance(url, QtCore.QUrl):\nurl = QtCore.QUrl(url)\nelif url is None:\nurl = QtCore.QUrl()\nself.setSourceDevice(device, url)\ndef set_source(self, url: datatypes.UrlType):\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nself.setSource(url)\ndef get_source(self) -&gt; core.Url | None:\nurl = self.source()\nreturn core.Url(url) if url.isValid() else None\ndef get_playback_state(self) -&gt; PlaybackStateStr:\n\"\"\"Return current playback state.\n        Returns:\n            playback state\n        \"\"\"\nreturn PLAYBACK_STATE.inverse[self.playbackState()]\ndef get_media_status(self) -&gt; MediaStatusStr:\n\"\"\"Return current media status.\n        Returns:\n            media status\n        \"\"\"\nreturn MEDIA_STATUS.inverse[self.mediaStatus()]\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_media_status","title":"<code>get_media_status() -&gt; MediaStatusStr</code>","text":"<p>Return current media status.</p> <p>Returns:</p> Type Description <code>MediaStatusStr</code> <p>media status</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_media_status(self) -&gt; MediaStatusStr:\n\"\"\"Return current media status.\n    Returns:\n        media status\n    \"\"\"\nreturn MEDIA_STATUS.inverse[self.mediaStatus()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_playback_state","title":"<code>get_playback_state() -&gt; PlaybackStateStr</code>","text":"<p>Return current playback state.</p> <p>Returns:</p> Type Description <code>PlaybackStateStr</code> <p>playback state</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_playback_state(self) -&gt; PlaybackStateStr:\n\"\"\"Return current playback state.\n    Returns:\n        playback state\n    \"\"\"\nreturn PLAYBACK_STATE.inverse[self.playbackState()]\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_source","title":"<code>get_source() -&gt; core.Url | None</code>","text":"Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_source(self) -&gt; core.Url | None:\nurl = self.source()\nreturn core.Url(url) if url.isValid() else None\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.set_source","title":"<code>set_source(url: datatypes.UrlType)</code>","text":"Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def set_source(self, url: datatypes.UrlType):\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nself.setSource(url)\n</code></pre>"},{"location":"api/multimedia.html#prettyqt.multimedia.mediaplayer.MediaPlayer.set_source_device","title":"<code>set_source_device(device: QtCore.QIODevice, url: datatypes.UrlType | None = None)</code>","text":"Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def set_source_device(\nself, device: QtCore.QIODevice, url: datatypes.UrlType | None = None\n):\nif not isinstance(url, QtCore.QUrl):\nurl = QtCore.QUrl(url)\nelif url is None:\nurl = QtCore.QUrl()\nself.setSourceDevice(device, url)\n</code></pre>"},{"location":"api/multimediawidgets.html","title":"multimediawidgets module","text":"<p>Multimediawidgets module.</p>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.__all__","title":"<code>__all__ = ['VideoWidget', 'GraphicsVideoItem']</code>  <code>module-attribute</code>","text":""},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.GraphicsVideoItem","title":"<code>GraphicsVideoItem</code>","text":"<p>         Bases: <code>widgets.GraphicsObjectMixin</code>, <code>QtMultimediaWidgets.QGraphicsVideoItem</code></p> Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>class GraphicsVideoItem(\nwidgets.GraphicsObjectMixin, QtMultimediaWidgets.QGraphicsVideoItem\n):\ndef get_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.offset())\ndef get_native_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.nativeSize())\ndef get_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.size())\ndef set_aspect_ratio_mode(self, mode: constants.AspectRatioModeStr):\n\"\"\"Set the aspect ratio mode.\n        Args:\n            mode: aspect ratio mode\n        Raises:\n            InvalidParamError: aspect ratio mode does not exist\n        \"\"\"\nif mode not in constants.ASPECT_RATIO_MODE:\nraise InvalidParamError(mode, constants.ASPECT_RATIO_MODE)\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE[mode])\ndef get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n        Returns:\n            aspect ratio mode\n        \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.get_aspect_ratio_mode","title":"<code>get_aspect_ratio_mode() -&gt; constants.AspectRatioModeStr</code>","text":"<p>Return current aspect ratio mode.</p> <p>Returns:</p> Type Description <code>constants.AspectRatioModeStr</code> <p>aspect ratio mode</p> Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n    Returns:\n        aspect ratio mode\n    \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.get_native_size","title":"<code>get_native_size() -&gt; core.SizeF</code>","text":"Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def get_native_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.nativeSize())\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.get_offset","title":"<code>get_offset() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def get_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.offset())\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.get_size","title":"<code>get_size() -&gt; core.SizeF</code>","text":"Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def get_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.size())\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.set_aspect_ratio_mode","title":"<code>set_aspect_ratio_mode(mode: constants.AspectRatioModeStr)</code>","text":"<p>Set the aspect ratio mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.AspectRatioModeStr</code> <p>aspect ratio mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>aspect ratio mode does not exist</p> Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def set_aspect_ratio_mode(self, mode: constants.AspectRatioModeStr):\n\"\"\"Set the aspect ratio mode.\n    Args:\n        mode: aspect ratio mode\n    Raises:\n        InvalidParamError: aspect ratio mode does not exist\n    \"\"\"\nif mode not in constants.ASPECT_RATIO_MODE:\nraise InvalidParamError(mode, constants.ASPECT_RATIO_MODE)\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE[mode])\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.VideoWidget","title":"<code>VideoWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtMultimediaWidgets.QVideoWidget</code></p> Source code in <code>prettyqt\\multimediawidgets\\videowidget.py</code> <pre><code>class VideoWidget(widgets.WidgetMixin, QtMultimediaWidgets.QVideoWidget):\ndef __init__(self, *args, **kwargs):\nself.doubleclick_for_fullscreen = False\nsuper().__init__(*args, **kwargs)\ndef set_doubleclick_for_fullscreen(self, value: bool = True):\nself.doubleclick_for_fullscreen = value\ndef mouseDoubleClickEvent(self, event):\nif (\nevent.button() == QtCore.Qt.MouseButton.LeftButton\nand self.doubleclick_for_fullscreen\n):\nself.setFullScreen(not self.isFullScreen())\nevent.accept()\nreturn super().mouseDoubleClickEvent(event)\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.videowidget.VideoWidget.doubleclick_for_fullscreen","title":"<code>doubleclick_for_fullscreen = False</code>  <code>instance-attribute</code>","text":""},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.videowidget.VideoWidget.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\multimediawidgets\\videowidget.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself.doubleclick_for_fullscreen = False\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.videowidget.VideoWidget.mouseDoubleClickEvent","title":"<code>mouseDoubleClickEvent(event)</code>","text":"Source code in <code>prettyqt\\multimediawidgets\\videowidget.py</code> <pre><code>def mouseDoubleClickEvent(self, event):\nif (\nevent.button() == QtCore.Qt.MouseButton.LeftButton\nand self.doubleclick_for_fullscreen\n):\nself.setFullScreen(not self.isFullScreen())\nevent.accept()\nreturn super().mouseDoubleClickEvent(event)\n</code></pre>"},{"location":"api/multimediawidgets.html#prettyqt.multimediawidgets.videowidget.VideoWidget.set_doubleclick_for_fullscreen","title":"<code>set_doubleclick_for_fullscreen(value: bool = True)</code>","text":"Source code in <code>prettyqt\\multimediawidgets\\videowidget.py</code> <pre><code>def set_doubleclick_for_fullscreen(self, value: bool = True):\nself.doubleclick_for_fullscreen = value\n</code></pre>"},{"location":"api/network.html","title":"network module","text":"<p>Network module.</p> <p>Contains QtNetWork-based classes</p>"},{"location":"api/network.html#prettyqt.network.__all__","title":"<code>__all__ = ['NetworkProxy', 'NetworkReply', 'AbstractSocket', 'AbstractSocketMixin', 'LocalSocket', 'HostAddress', 'LocalServer', 'TcpServer', 'NetworkDatagram', 'NetworkAddressEntry', 'NetworkInterface', 'TcpSocket', 'UdpSocket', 'HttpPart', 'HttpMultiPart', 'NetworkCookie', 'NetworkCookieJar', 'NetworkRequest', 'NetworkAccessManager']</code>  <code>module-attribute</code>","text":""},{"location":"api/network.html#prettyqt.network.AbstractSocket","title":"<code>AbstractSocket</code>","text":"<p>         Bases: <code>AbstractSocketMixin</code>, <code>QtNetwork.QAbstractSocket</code></p> Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>class AbstractSocket(AbstractSocketMixin, QtNetwork.QAbstractSocket):\npass\n</code></pre>"},{"location":"api/network.html#prettyqt.network.AbstractSocketMixin","title":"<code>AbstractSocketMixin</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code></p> Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>class AbstractSocketMixin(core.IODeviceMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef bind_to(\nself,\naddress: str | QtNetwork.QHostAddress,\nport: int = 0,\nbind_mode: (\nQtNetwork.QAbstractSocket.BindFlag | BindModeStr\n) = \"default_for_platform\",\n) -&gt; bool:\nif isinstance(address, str):\naddress = QtNetwork.QHostAddress(address)\nmode = BIND_MODE[bind_mode] if bind_mode in BIND_MODE else bind_mode\nreturn self.bind(address, port, mode)\ndef connect_to_host(\nself,\nhostname: str,\nport: int,\nopen_mode: (QtCore.QIODevice.OpenMode | core.iodevice.OpenModeStr) = \"read_write\",\nprotocol: (\nQtNetwork.QAbstractSocket.NetworkLayerProtocol | NetworkLayerProtocolStr\n) = \"any_ip\",\n):\nif isinstance(open_mode, QtCore.QIODeviceBase.OpenMode):\nmode = open_mode\nelse:\nmode = core.iodevice.OPEN_MODES[open_mode]\nif isinstance(protocol, QtNetwork.QAbstractSocket.NetworkLayerProtocol):\nprot = protocol\nelse:\nprot = NETWORK_LAYER_PROTOCOL[protocol]\nself.connectToHost(hostname, port, mode, prot)\ndef get_error(self) -&gt; SocketErrorStr:\nreturn SOCKET_ERROR.inverse[self.error()]\ndef set_pause_mode(self, mode: PauseModeStr):\n\"\"\"Set pause mode.\n        Args:\n            mode: pause mode\n        Raises:\n            InvalidParamError: pause mode does not exist\n        \"\"\"\nif mode not in PAUSE_MODES:\nraise InvalidParamError(mode, PAUSE_MODES)\nself.setPauseMode(PAUSE_MODES[mode])\ndef get_pause_mode(self) -&gt; PauseModeStr:\nreturn PAUSE_MODES.inverse[self.pauseMode()]\ndef get_proxy(self) -&gt; network.NetworkProxy:\nreturn network.NetworkProxy(self.proxy())\n# def set_socket_option(self, name: str, value):\n#     if name not in SOCKET_OPTION:\n#         raise InvalidParamError(name, SOCKET_OPTION)\n#     self.setSocketOption(SOCKET_OPTION[name], value)\n# def get_socket_option(self, name: str):\n#     return self.socketOption(SOCKET_OPTION[name])\n# def set_type_of_service(self, typ: str):\n#     if typ not in TYPE_OF_SERVICE:\n#         raise InvalidParamError(typ, TYPE_OF_SERVICE)\n#     self.set_socket_option(\"type_of_service\", TYPE_OF_SERVICE[typ])\n# def get_type_of_service(self):\n#     opt = self.get_socket_option(\"type_of_service\")\n#     return TYPE_OF_SERVICE.inverse[opt]\ndef get_socket_type(self) -&gt; SocketTypeStr:\nreturn SOCKET_TYPE.inverse[self.socketType()]\ndef get_state(self) -&gt; SocketStateStr:\nreturn SOCKET_STATE.inverse[self.state()]\ndef get_local_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.localAddress())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.bind_to","title":"<code>bind_to(address: str | QtNetwork.QHostAddress, port: int = 0, bind_mode: QtNetwork.QAbstractSocket.BindFlag | BindModeStr = 'default_for_platform') -&gt; bool</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def bind_to(\nself,\naddress: str | QtNetwork.QHostAddress,\nport: int = 0,\nbind_mode: (\nQtNetwork.QAbstractSocket.BindFlag | BindModeStr\n) = \"default_for_platform\",\n) -&gt; bool:\nif isinstance(address, str):\naddress = QtNetwork.QHostAddress(address)\nmode = BIND_MODE[bind_mode] if bind_mode in BIND_MODE else bind_mode\nreturn self.bind(address, port, mode)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.connect_to_host","title":"<code>connect_to_host(hostname: str, port: int, open_mode: QtCore.QIODevice.OpenMode | core.iodevice.OpenModeStr = 'read_write', protocol: QtNetwork.QAbstractSocket.NetworkLayerProtocol | NetworkLayerProtocolStr = 'any_ip')</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def connect_to_host(\nself,\nhostname: str,\nport: int,\nopen_mode: (QtCore.QIODevice.OpenMode | core.iodevice.OpenModeStr) = \"read_write\",\nprotocol: (\nQtNetwork.QAbstractSocket.NetworkLayerProtocol | NetworkLayerProtocolStr\n) = \"any_ip\",\n):\nif isinstance(open_mode, QtCore.QIODeviceBase.OpenMode):\nmode = open_mode\nelse:\nmode = core.iodevice.OPEN_MODES[open_mode]\nif isinstance(protocol, QtNetwork.QAbstractSocket.NetworkLayerProtocol):\nprot = protocol\nelse:\nprot = NETWORK_LAYER_PROTOCOL[protocol]\nself.connectToHost(hostname, port, mode, prot)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.get_error","title":"<code>get_error() -&gt; SocketErrorStr</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def get_error(self) -&gt; SocketErrorStr:\nreturn SOCKET_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.get_local_address","title":"<code>get_local_address() -&gt; network.HostAddress</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def get_local_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.localAddress())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.get_pause_mode","title":"<code>get_pause_mode() -&gt; PauseModeStr</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def get_pause_mode(self) -&gt; PauseModeStr:\nreturn PAUSE_MODES.inverse[self.pauseMode()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.get_proxy","title":"<code>get_proxy() -&gt; network.NetworkProxy</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def get_proxy(self) -&gt; network.NetworkProxy:\nreturn network.NetworkProxy(self.proxy())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.get_socket_type","title":"<code>get_socket_type() -&gt; SocketTypeStr</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def get_socket_type(self) -&gt; SocketTypeStr:\nreturn SOCKET_TYPE.inverse[self.socketType()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.get_state","title":"<code>get_state() -&gt; SocketStateStr</code>","text":"Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def get_state(self) -&gt; SocketStateStr:\nreturn SOCKET_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.abstractsocket.AbstractSocketMixin.set_pause_mode","title":"<code>set_pause_mode(mode: PauseModeStr)</code>","text":"<p>Set pause mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PauseModeStr</code> <p>pause mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>pause mode does not exist</p> Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def set_pause_mode(self, mode: PauseModeStr):\n\"\"\"Set pause mode.\n    Args:\n        mode: pause mode\n    Raises:\n        InvalidParamError: pause mode does not exist\n    \"\"\"\nif mode not in PAUSE_MODES:\nraise InvalidParamError(mode, PAUSE_MODES)\nself.setPauseMode(PAUSE_MODES[mode])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.HostAddress","title":"<code>HostAddress</code>","text":"<p>         Bases: <code>QtNetwork.QHostAddress</code></p> Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>class HostAddress(QtNetwork.QHostAddress):\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __bool__(self):\nreturn not self.isNull()\ndef get_protocol(self) -&gt; NetworkLayerProtocolStr:\nreturn network.abstractsocket.NETWORK_LAYER_PROTOCOL.inverse[self.protocol()]\ndef set_address(self, address: int | str):\nif address in SPECIAL_ADDRESS:\naddress = SPECIAL_ADDRESS[address]\nret = self.setAddress(address)\nif ret is False:\nraise ValueError(\"invalid address\")\n</code></pre>"},{"location":"api/network.html#prettyqt.network.hostaddress.HostAddress.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>def __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.hostaddress.HostAddress.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.hostaddress.HostAddress.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.hostaddress.HostAddress.get_protocol","title":"<code>get_protocol() -&gt; NetworkLayerProtocolStr</code>","text":"Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>def get_protocol(self) -&gt; NetworkLayerProtocolStr:\nreturn network.abstractsocket.NETWORK_LAYER_PROTOCOL.inverse[self.protocol()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.hostaddress.HostAddress.set_address","title":"<code>set_address(address: int | str)</code>","text":"Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>def set_address(self, address: int | str):\nif address in SPECIAL_ADDRESS:\naddress = SPECIAL_ADDRESS[address]\nret = self.setAddress(address)\nif ret is False:\nraise ValueError(\"invalid address\")\n</code></pre>"},{"location":"api/network.html#prettyqt.network.HttpMultiPart","title":"<code>HttpMultiPart</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QHttpMultiPart</code></p> Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>class HttpMultiPart(core.ObjectMixin, QtNetwork.QHttpMultiPart):\ndef __add__(self, other: QtNetwork.QHttpPart):\nself.append(other)\nreturn self\ndef set_content_type(self, typ: ContentTypeStr):\n\"\"\"Set content type.\n        Args:\n            typ: content type\n        Raises:\n            InvalidParamError: content type does not exist\n        \"\"\"\nif typ not in CONTENT_TYPES:\nraise InvalidParamError(typ, CONTENT_TYPES)\nself.setContentType(CONTENT_TYPES[typ])\ndef set_boundary(self, boundary: datatypes.ByteArrayType):\nif isinstance(boundary, str):\nboundary = boundary.encode()\nif isinstance(boundary, bytes):\nboundary = QtCore.QByteArray(boundary)\nself.setBoundary(boundary)\ndef get_boundary(self) -&gt; str:\nreturn self.boundary().data().decode()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httpmultipart.HttpMultiPart.__add__","title":"<code>__add__(other: QtNetwork.QHttpPart)</code>","text":"Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>def __add__(self, other: QtNetwork.QHttpPart):\nself.append(other)\nreturn self\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httpmultipart.HttpMultiPart.get_boundary","title":"<code>get_boundary() -&gt; str</code>","text":"Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>def get_boundary(self) -&gt; str:\nreturn self.boundary().data().decode()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httpmultipart.HttpMultiPart.set_boundary","title":"<code>set_boundary(boundary: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>def set_boundary(self, boundary: datatypes.ByteArrayType):\nif isinstance(boundary, str):\nboundary = boundary.encode()\nif isinstance(boundary, bytes):\nboundary = QtCore.QByteArray(boundary)\nself.setBoundary(boundary)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httpmultipart.HttpMultiPart.set_content_type","title":"<code>set_content_type(typ: ContentTypeStr)</code>","text":"<p>Set content type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ContentTypeStr</code> <p>content type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>content type does not exist</p> Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>def set_content_type(self, typ: ContentTypeStr):\n\"\"\"Set content type.\n    Args:\n        typ: content type\n    Raises:\n        InvalidParamError: content type does not exist\n    \"\"\"\nif typ not in CONTENT_TYPES:\nraise InvalidParamError(typ, CONTENT_TYPES)\nself.setContentType(CONTENT_TYPES[typ])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.HttpPart","title":"<code>HttpPart</code>","text":"<p>         Bases: <code>QtNetwork.QHttpPart</code></p> Source code in <code>prettyqt\\network\\httppart.py</code> <pre><code>class HttpPart(QtNetwork.QHttpPart):\ndef set_body(self, body: datatypes.ByteArrayType):\nif isinstance(body, str):\nbody = body.encode()\nif isinstance(body, bytes):\nbody = QtCore.QByteArray(body)\nself.setBody(body)\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef set_header(self, name: str, value: network.networkrequest.KnownHeaderStr):\nself.setHeader(network.networkrequest.KNOWN_HEADER[name], value)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httppart.HttpPart.set_body","title":"<code>set_body(body: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\network\\httppart.py</code> <pre><code>def set_body(self, body: datatypes.ByteArrayType):\nif isinstance(body, str):\nbody = body.encode()\nif isinstance(body, bytes):\nbody = QtCore.QByteArray(body)\nself.setBody(body)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httppart.HttpPart.set_header","title":"<code>set_header(name: str, value: network.networkrequest.KnownHeaderStr)</code>","text":"Source code in <code>prettyqt\\network\\httppart.py</code> <pre><code>def set_header(self, name: str, value: network.networkrequest.KnownHeaderStr):\nself.setHeader(network.networkrequest.KNOWN_HEADER[name], value)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.httppart.HttpPart.set_headers","title":"<code>set_headers(headers: dict[str, str])</code>","text":"Source code in <code>prettyqt\\network\\httppart.py</code> <pre><code>def set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.LocalServer","title":"<code>LocalServer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QLocalServer</code></p> Source code in <code>prettyqt\\network\\localserver.py</code> <pre><code>class LocalServer(core.ObjectMixin, QtNetwork.QLocalServer):\ndef get_server_error(self) -&gt; network.abstractsocket.SocketErrorStr:\nreturn network.abstractsocket.SOCKET_ERROR.inverse[self.serverError()]\ndef set_socket_options(self, *name: SocketOptionStr):\nfor item in name:\nif item not in SOCKET_OPTION:\nraise InvalidParamError(item, SOCKET_OPTION)\nflags = SOCKET_OPTION.merge_flags(name)\nself.setSocketOptions(flags)\ndef get_socket_options(self) -&gt; list[SocketOptionStr]:\nreturn SOCKET_OPTION.get_list(self.socketOptions())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localserver.LocalServer.get_server_error","title":"<code>get_server_error() -&gt; network.abstractsocket.SocketErrorStr</code>","text":"Source code in <code>prettyqt\\network\\localserver.py</code> <pre><code>def get_server_error(self) -&gt; network.abstractsocket.SocketErrorStr:\nreturn network.abstractsocket.SOCKET_ERROR.inverse[self.serverError()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localserver.LocalServer.get_socket_options","title":"<code>get_socket_options() -&gt; list[SocketOptionStr]</code>","text":"Source code in <code>prettyqt\\network\\localserver.py</code> <pre><code>def get_socket_options(self) -&gt; list[SocketOptionStr]:\nreturn SOCKET_OPTION.get_list(self.socketOptions())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localserver.LocalServer.set_socket_options","title":"<code>set_socket_options(*name: SocketOptionStr)</code>","text":"Source code in <code>prettyqt\\network\\localserver.py</code> <pre><code>def set_socket_options(self, *name: SocketOptionStr):\nfor item in name:\nif item not in SOCKET_OPTION:\nraise InvalidParamError(item, SOCKET_OPTION)\nflags = SOCKET_OPTION.merge_flags(name)\nself.setSocketOptions(flags)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.LocalSocket","title":"<code>LocalSocket</code>","text":"<p>         Bases: <code>core.IODeviceMixin</code>, <code>QtNetwork.QLocalSocket</code></p> Source code in <code>prettyqt\\network\\localsocket.py</code> <pre><code>class LocalSocket(core.IODeviceMixin, QtNetwork.QLocalSocket):\ndef __bool__(self):\nreturn self.isValid()\ndef get_error(self) -&gt; LocalSocketErrorStr:\nreturn LOCAL_SOCKET_ERROR.inverse[self.error()]\ndef get_state(self) -&gt; LocalSocketStateStr:\nreturn LOCAL_SOCKET_STATE.inverse[self.state()]\ndef connect_to_server(\nself,\nserver_name: str | None = None,\nmode: core.iodevice.OpenModeStr = \"read_write\",\n):\nif mode not in core.iodevice.OPEN_MODES:\nraise InvalidParamError(mode, core.iodevice.OPEN_MODES)\nif server_name is not None:\nself.connectToServer(server_name, core.iodevice.OPEN_MODES[mode])\nelse:\nself.connectToServer(core.iodevice.OPEN_MODES[mode])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localsocket.LocalSocket.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\network\\localsocket.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localsocket.LocalSocket.connect_to_server","title":"<code>connect_to_server(server_name: str | None = None, mode: core.iodevice.OpenModeStr = 'read_write')</code>","text":"Source code in <code>prettyqt\\network\\localsocket.py</code> <pre><code>def connect_to_server(\nself,\nserver_name: str | None = None,\nmode: core.iodevice.OpenModeStr = \"read_write\",\n):\nif mode not in core.iodevice.OPEN_MODES:\nraise InvalidParamError(mode, core.iodevice.OPEN_MODES)\nif server_name is not None:\nself.connectToServer(server_name, core.iodevice.OPEN_MODES[mode])\nelse:\nself.connectToServer(core.iodevice.OPEN_MODES[mode])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localsocket.LocalSocket.get_error","title":"<code>get_error() -&gt; LocalSocketErrorStr</code>","text":"Source code in <code>prettyqt\\network\\localsocket.py</code> <pre><code>def get_error(self) -&gt; LocalSocketErrorStr:\nreturn LOCAL_SOCKET_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.localsocket.LocalSocket.get_state","title":"<code>get_state() -&gt; LocalSocketStateStr</code>","text":"Source code in <code>prettyqt\\network\\localsocket.py</code> <pre><code>def get_state(self) -&gt; LocalSocketStateStr:\nreturn LOCAL_SOCKET_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkAccessManager","title":"<code>NetworkAccessManager</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QNetworkAccessManager</code></p> Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>class NetworkAccessManager(core.ObjectMixin, QtNetwork.QNetworkAccessManager):\n# def request(\n#     self,\n#     method,\n#     url,\n#     headers=None,\n#     cookies=None,\n#     files=None,\n#     auth=None,\n#     timeout=None,\n#     allow_redirects=True,\n# ):\n#     req = network.NetworkRequest()\n#     if allow_redirects:\n#         pass\ndef get(self, request: datatypes.UrlType | QtNetwork.QNetworkRequest):\nif isinstance(request, str):\nrequest = core.Url(request)\nrequest = network.NetworkRequest(request)\nreturn super().get(request)\n# def post(self, url, data=None, json=None):\n#     pass\n# def put(self, url, data=None, json=None):\n#     pass\n# def patch(self, url, data=None):\n#     pass\n# def delete(self, url):\n#     pass\ndef set_redirect_policy(self, policy: network.networkrequest.RedirectPolicyStr):\n\"\"\"Set redirect policy.\n        Args:\n            policy: redirect policy\n        Raises:\n            InvalidParamError: redirect policy does not exist\n        \"\"\"\nif policy not in network.networkrequest.REDIRECT_POLICIES:\nraise InvalidParamError(policy, network.networkrequest.REDIRECT_POLICIES)\nself.setRedirectPolicy(network.networkrequest.REDIRECT_POLICIES[policy])\ndef get_redirect_policy(self) -&gt; network.networkrequest.RedirectPolicyStr:\n\"\"\"Get the current redirect policy.\n        Returns:\n            redirect policy\n        \"\"\"\nreturn network.networkrequest.REDIRECT_POLICIES.inverse[self.redirectPolicy()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.get","title":"<code>get(request: datatypes.UrlType | QtNetwork.QNetworkRequest)</code>","text":"Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def get(self, request: datatypes.UrlType | QtNetwork.QNetworkRequest):\nif isinstance(request, str):\nrequest = core.Url(request)\nrequest = network.NetworkRequest(request)\nreturn super().get(request)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.get_redirect_policy","title":"<code>get_redirect_policy() -&gt; network.networkrequest.RedirectPolicyStr</code>","text":"<p>Get the current redirect policy.</p> <p>Returns:</p> Type Description <code>network.networkrequest.RedirectPolicyStr</code> <p>redirect policy</p> Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def get_redirect_policy(self) -&gt; network.networkrequest.RedirectPolicyStr:\n\"\"\"Get the current redirect policy.\n    Returns:\n        redirect policy\n    \"\"\"\nreturn network.networkrequest.REDIRECT_POLICIES.inverse[self.redirectPolicy()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.set_redirect_policy","title":"<code>set_redirect_policy(policy: network.networkrequest.RedirectPolicyStr)</code>","text":"<p>Set redirect policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>network.networkrequest.RedirectPolicyStr</code> <p>redirect policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>redirect policy does not exist</p> Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def set_redirect_policy(self, policy: network.networkrequest.RedirectPolicyStr):\n\"\"\"Set redirect policy.\n    Args:\n        policy: redirect policy\n    Raises:\n        InvalidParamError: redirect policy does not exist\n    \"\"\"\nif policy not in network.networkrequest.REDIRECT_POLICIES:\nraise InvalidParamError(policy, network.networkrequest.REDIRECT_POLICIES)\nself.setRedirectPolicy(network.networkrequest.REDIRECT_POLICIES[policy])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkAddressEntry","title":"<code>NetworkAddressEntry</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkAddressEntry</code></p> Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>class NetworkAddressEntry(QtNetwork.QNetworkAddressEntry):\ndef get_dns_eligibility(self) -&gt; DnsEligibilityStatusStr:\n\"\"\"Return whether this address is eligible for publication in the DNS.\n        Returns:\n            DNS eligibility\n        \"\"\"\nreturn DNS_ELIGIBILITY_STATUS.inverse[self.dnsEligibility()]\ndef set_dns_eligibility(self, status: DnsEligibilityStatusStr):\n\"\"\"Set the DNS eligibility flag for this address to status.\n        Args:\n            status: DNS eligibility status\n        Raises:\n            InvalidParamError: dns eligibility status does not exist\n        \"\"\"\nif status not in DNS_ELIGIBILITY_STATUS:\nraise InvalidParamError(status, DNS_ELIGIBILITY_STATUS)\nself.setDnsEligibility(DNS_ELIGIBILITY_STATUS[status])\ndef get_ip(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.ip())\ndef set_ip(self, ip: QtNetwork.QHostAddress | str):\nself.setIp(network.HostAddress(ip))\ndef get_netmask(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.netmask())\ndef set_netmask(self, netmask: QtNetwork.QHostAddress | str):\nself.setNetmask(network.HostAddress(netmask))\ndef get_preferred_lifetime(self) -&gt; core.DeadlineTimer:\nreturn core.DeadlineTimer(self.preferredLifetime())\ndef get_validity_lifetime(self) -&gt; core.DeadlineTimer:\nreturn core.DeadlineTimer(self.validityLifetime())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_dns_eligibility","title":"<code>get_dns_eligibility() -&gt; DnsEligibilityStatusStr</code>","text":"<p>Return whether this address is eligible for publication in the DNS.</p> <p>Returns:</p> Type Description <code>DnsEligibilityStatusStr</code> <p>DNS eligibility</p> Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_dns_eligibility(self) -&gt; DnsEligibilityStatusStr:\n\"\"\"Return whether this address is eligible for publication in the DNS.\n    Returns:\n        DNS eligibility\n    \"\"\"\nreturn DNS_ELIGIBILITY_STATUS.inverse[self.dnsEligibility()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_ip","title":"<code>get_ip() -&gt; network.HostAddress</code>","text":"Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_ip(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.ip())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_netmask","title":"<code>get_netmask() -&gt; network.HostAddress</code>","text":"Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_netmask(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.netmask())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_preferred_lifetime","title":"<code>get_preferred_lifetime() -&gt; core.DeadlineTimer</code>","text":"Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_preferred_lifetime(self) -&gt; core.DeadlineTimer:\nreturn core.DeadlineTimer(self.preferredLifetime())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_validity_lifetime","title":"<code>get_validity_lifetime() -&gt; core.DeadlineTimer</code>","text":"Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_validity_lifetime(self) -&gt; core.DeadlineTimer:\nreturn core.DeadlineTimer(self.validityLifetime())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.set_dns_eligibility","title":"<code>set_dns_eligibility(status: DnsEligibilityStatusStr)</code>","text":"<p>Set the DNS eligibility flag for this address to status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>DnsEligibilityStatusStr</code> <p>DNS eligibility status</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>dns eligibility status does not exist</p> Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def set_dns_eligibility(self, status: DnsEligibilityStatusStr):\n\"\"\"Set the DNS eligibility flag for this address to status.\n    Args:\n        status: DNS eligibility status\n    Raises:\n        InvalidParamError: dns eligibility status does not exist\n    \"\"\"\nif status not in DNS_ELIGIBILITY_STATUS:\nraise InvalidParamError(status, DNS_ELIGIBILITY_STATUS)\nself.setDnsEligibility(DNS_ELIGIBILITY_STATUS[status])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.set_ip","title":"<code>set_ip(ip: QtNetwork.QHostAddress | str)</code>","text":"Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def set_ip(self, ip: QtNetwork.QHostAddress | str):\nself.setIp(network.HostAddress(ip))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.set_netmask","title":"<code>set_netmask(netmask: QtNetwork.QHostAddress | str)</code>","text":"Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def set_netmask(self, netmask: QtNetwork.QHostAddress | str):\nself.setNetmask(network.HostAddress(netmask))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkCookie","title":"<code>NetworkCookie</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkCookie</code></p> Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>class NetworkCookie(QtNetwork.QNetworkCookie):\ndef __repr__(self):\nreturn get_repr(self, self.name(), self.value())\ndef to_raw_form(self, full: bool = True):\nform = RAW_FORMS[\"full\"] if full else RAW_FORMS[\"name_and_value_only\"]\nself.toRawForm(form)\ndef set_name(self, name: datatypes.ByteArrayType):\nif isinstance(name, str):\nname = name.encode()\nif isinstance(name, bytes):\nname = QtCore.QByteArray(name)\nself.setName(name)\ndef get_name(self) -&gt; str:\nreturn self.name().data().decode()\ndef set_value(self, value: datatypes.ByteArrayType):\nif isinstance(value, str):\nvalue = value.encode()\nif isinstance(value, bytes):\nvalue = QtCore.QByteArray(value)\nself.setValue(value)\ndef get_value(self) -&gt; str:\nreturn self.value().data().decode()\ndef set_expiration_date(self, date: datatypes.DateTimeType | None):\nif date is None:\ndate = QtCore.QDateTime()\nelif isinstance(date, str):\ndate = dateutil.parser.parse(date)\nself.setExpirationDate(date)  # type: ignore\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.name(), self.value())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.get_name","title":"<code>get_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def get_name(self) -&gt; str:\nreturn self.name().data().decode()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.get_value","title":"<code>get_value() -&gt; str</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def get_value(self) -&gt; str:\nreturn self.value().data().decode()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.set_expiration_date","title":"<code>set_expiration_date(date: datatypes.DateTimeType | None)</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def set_expiration_date(self, date: datatypes.DateTimeType | None):\nif date is None:\ndate = QtCore.QDateTime()\nelif isinstance(date, str):\ndate = dateutil.parser.parse(date)\nself.setExpirationDate(date)  # type: ignore\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.set_name","title":"<code>set_name(name: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def set_name(self, name: datatypes.ByteArrayType):\nif isinstance(name, str):\nname = name.encode()\nif isinstance(name, bytes):\nname = QtCore.QByteArray(name)\nself.setName(name)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.set_value","title":"<code>set_value(value: datatypes.ByteArrayType)</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def set_value(self, value: datatypes.ByteArrayType):\nif isinstance(value, str):\nvalue = value.encode()\nif isinstance(value, bytes):\nvalue = QtCore.QByteArray(value)\nself.setValue(value)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookie.NetworkCookie.to_raw_form","title":"<code>to_raw_form(full: bool = True)</code>","text":"Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>def to_raw_form(self, full: bool = True):\nform = RAW_FORMS[\"full\"] if full else RAW_FORMS[\"name_and_value_only\"]\nself.toRawForm(form)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkCookieJar","title":"<code>NetworkCookieJar</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QNetworkCookieJar</code></p> Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>class NetworkCookieJar(core.ObjectMixin, QtNetwork.QNetworkCookieJar):\ndef __add__(self, other: QtNetwork.QNetworkCookie):\nself.insertCookie(other)\nreturn self\ndef __getitem__(self, url: datatypes.UrlType) -&gt; list[QtNetwork.QNetworkCookie]:\nurl = core.Url(url)\nreturn self.cookiesForUrl(url)\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self) -&gt; Iterator[QtNetwork.QNetworkCookie]:\nreturn iter(self.allCookies())\ndef set_cookies_from_url(\nself, cookies: list[QtNetwork.QNetworkCookie], url: datatypes.UrlType\n) -&gt; bool:\nreturn self.setCookiesFromUrl(cookies, QtCore.QUrl(url))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookiejar.NetworkCookieJar.__add__","title":"<code>__add__(other: QtNetwork.QNetworkCookie)</code>","text":"Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>def __add__(self, other: QtNetwork.QNetworkCookie):\nself.insertCookie(other)\nreturn self\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookiejar.NetworkCookieJar.__getitem__","title":"<code>__getitem__(url: datatypes.UrlType) -&gt; list[QtNetwork.QNetworkCookie]</code>","text":"Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>def __getitem__(self, url: datatypes.UrlType) -&gt; list[QtNetwork.QNetworkCookie]:\nurl = core.Url(url)\nreturn self.cookiesForUrl(url)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookiejar.NetworkCookieJar.__iter__","title":"<code>__iter__() -&gt; Iterator[QtNetwork.QNetworkCookie]</code>","text":"Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtNetwork.QNetworkCookie]:\nreturn iter(self.allCookies())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookiejar.NetworkCookieJar.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkcookiejar.NetworkCookieJar.set_cookies_from_url","title":"<code>set_cookies_from_url(cookies: list[QtNetwork.QNetworkCookie], url: datatypes.UrlType) -&gt; bool</code>","text":"Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>def set_cookies_from_url(\nself, cookies: list[QtNetwork.QNetworkCookie], url: datatypes.UrlType\n) -&gt; bool:\nreturn self.setCookiesFromUrl(cookies, QtCore.QUrl(url))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkDatagram","title":"<code>NetworkDatagram</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkDatagram</code></p> Source code in <code>prettyqt\\network\\networkdatagram.py</code> <pre><code>class NetworkDatagram(QtNetwork.QNetworkDatagram):\ndef get_destination_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.destinationAddress())\ndef get_sender_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.senderAddress())\ndef set_data(self, data: str):\nself.setData(QtCore.QByteArray(data.encode()))\ndef get_data(self) -&gt; str:\nreturn self.data().data().decode()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkdatagram.NetworkDatagram.get_data","title":"<code>get_data() -&gt; str</code>","text":"Source code in <code>prettyqt\\network\\networkdatagram.py</code> <pre><code>def get_data(self) -&gt; str:\nreturn self.data().data().decode()\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkdatagram.NetworkDatagram.get_destination_address","title":"<code>get_destination_address() -&gt; network.HostAddress</code>","text":"Source code in <code>prettyqt\\network\\networkdatagram.py</code> <pre><code>def get_destination_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.destinationAddress())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkdatagram.NetworkDatagram.get_sender_address","title":"<code>get_sender_address() -&gt; network.HostAddress</code>","text":"Source code in <code>prettyqt\\network\\networkdatagram.py</code> <pre><code>def get_sender_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.senderAddress())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkdatagram.NetworkDatagram.set_data","title":"<code>set_data(data: str)</code>","text":"Source code in <code>prettyqt\\network\\networkdatagram.py</code> <pre><code>def set_data(self, data: str):\nself.setData(QtCore.QByteArray(data.encode()))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkInterface","title":"<code>NetworkInterface</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkInterface</code></p> Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>class NetworkInterface(QtNetwork.QNetworkInterface):\n# def __bool__(self):\n#     return self.isValid()\ndef get_type(self) -&gt; InterfaceTypeStr:\n\"\"\"Get the interface type.\n        Returns:\n            interface type\n        \"\"\"\nreturn INTERFACE_TYPE.inverse[self.type()]\ndef get_address_entries(self) -&gt; list[network.NetworkAddressEntry]:\nreturn [network.NetworkAddressEntry(i) for i in self.addressEntries()]\n@staticmethod\ndef get_all_addresses() -&gt; list[network.HostAddress]:\nreturn [network.HostAddress(i) for i in NetworkInterface.allAddresses()]\n@staticmethod\ndef get_all_interfaces() -&gt; list[network.HostAddress]:\nreturn [network.NetworkInterface(i) for i in NetworkInterface.allInterfaces()]\n@staticmethod\ndef get_interface_from_name(name: str) -&gt; NetworkInterface:\ninterface = NetworkInterface.interfaceFromName(name)\n# if not interface:\n#     return None\nreturn NetworkInterface(interface)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkinterface.NetworkInterface.get_address_entries","title":"<code>get_address_entries() -&gt; list[network.NetworkAddressEntry]</code>","text":"Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>def get_address_entries(self) -&gt; list[network.NetworkAddressEntry]:\nreturn [network.NetworkAddressEntry(i) for i in self.addressEntries()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkinterface.NetworkInterface.get_all_addresses","title":"<code>get_all_addresses() -&gt; list[network.HostAddress]</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>@staticmethod\ndef get_all_addresses() -&gt; list[network.HostAddress]:\nreturn [network.HostAddress(i) for i in NetworkInterface.allAddresses()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkinterface.NetworkInterface.get_all_interfaces","title":"<code>get_all_interfaces() -&gt; list[network.HostAddress]</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>@staticmethod\ndef get_all_interfaces() -&gt; list[network.HostAddress]:\nreturn [network.NetworkInterface(i) for i in NetworkInterface.allInterfaces()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkinterface.NetworkInterface.get_interface_from_name","title":"<code>get_interface_from_name(name: str) -&gt; NetworkInterface</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>@staticmethod\ndef get_interface_from_name(name: str) -&gt; NetworkInterface:\ninterface = NetworkInterface.interfaceFromName(name)\n# if not interface:\n#     return None\nreturn NetworkInterface(interface)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkinterface.NetworkInterface.get_type","title":"<code>get_type() -&gt; InterfaceTypeStr</code>","text":"<p>Get the interface type.</p> <p>Returns:</p> Type Description <code>InterfaceTypeStr</code> <p>interface type</p> Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>def get_type(self) -&gt; InterfaceTypeStr:\n\"\"\"Get the interface type.\n    Returns:\n        interface type\n    \"\"\"\nreturn INTERFACE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkProxy","title":"<code>NetworkProxy</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkProxy</code></p> Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>class NetworkProxy(QtNetwork.QNetworkProxy):\ndef get_capabilities(self) -&gt; list[CapabilityStr]:\nreturn CAPABILITIES.get_list(self.capabilities())\ndef set_capabilities(self, *capability: CapabilityStr):\nfor item in capability:\nif item not in CAPABILITIES:\nraise InvalidParamError(item, CAPABILITIES)\nflags = CAPABILITIES.merge_flags(capability)\nself.setCapabilities(flags)\ndef get_header(self, name: network.networkrequest.KnownHeaderStr) -&gt; str:\nif name not in network.networkrequest.KNOWN_HEADER:\nraise InvalidParamError(name, network.networkrequest.KNOWN_HEADER)\nreturn self.header(network.networkrequest.KNOWN_HEADER[name])\ndef set_header(self, name: network.networkrequest.KnownHeaderStr, value: str):\nif name not in network.networkrequest.KNOWN_HEADER:\nraise InvalidParamError(name, network.networkrequest.KNOWN_HEADER)\nself.setHeader(network.networkrequest.KNOWN_HEADER[name], value)\ndef get_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef set_type(self, typ: ProxyTypeStr):\n\"\"\"Set proxy type.\n        Args:\n            typ: proxy type\n        Raises:\n            InvalidParamError: proxy type does not exist\n        \"\"\"\nif typ not in PROXY_TYPES:\nraise InvalidParamError(typ, PROXY_TYPES)\nself.setType(PROXY_TYPES[typ])\ndef get_type(self) -&gt; ProxyTypeStr:\n\"\"\"Get the proxy type.\n        Returns:\n            type\n        \"\"\"\nreturn PROXY_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.get_capabilities","title":"<code>get_capabilities() -&gt; list[CapabilityStr]</code>","text":"Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def get_capabilities(self) -&gt; list[CapabilityStr]:\nreturn CAPABILITIES.get_list(self.capabilities())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.get_header","title":"<code>get_header(name: network.networkrequest.KnownHeaderStr) -&gt; str</code>","text":"Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def get_header(self, name: network.networkrequest.KnownHeaderStr) -&gt; str:\nif name not in network.networkrequest.KNOWN_HEADER:\nraise InvalidParamError(name, network.networkrequest.KNOWN_HEADER)\nreturn self.header(network.networkrequest.KNOWN_HEADER[name])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.get_headers","title":"<code>get_headers() -&gt; dict[str, str]</code>","text":"Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def get_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.get_type","title":"<code>get_type() -&gt; ProxyTypeStr</code>","text":"<p>Get the proxy type.</p> <p>Returns:</p> Type Description <code>ProxyTypeStr</code> <p>type</p> Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def get_type(self) -&gt; ProxyTypeStr:\n\"\"\"Get the proxy type.\n    Returns:\n        type\n    \"\"\"\nreturn PROXY_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.set_capabilities","title":"<code>set_capabilities(*capability: CapabilityStr)</code>","text":"Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def set_capabilities(self, *capability: CapabilityStr):\nfor item in capability:\nif item not in CAPABILITIES:\nraise InvalidParamError(item, CAPABILITIES)\nflags = CAPABILITIES.merge_flags(capability)\nself.setCapabilities(flags)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.set_header","title":"<code>set_header(name: network.networkrequest.KnownHeaderStr, value: str)</code>","text":"Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def set_header(self, name: network.networkrequest.KnownHeaderStr, value: str):\nif name not in network.networkrequest.KNOWN_HEADER:\nraise InvalidParamError(name, network.networkrequest.KNOWN_HEADER)\nself.setHeader(network.networkrequest.KNOWN_HEADER[name], value)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.set_headers","title":"<code>set_headers(headers: dict[str, str])</code>","text":"Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkproxy.NetworkProxy.set_type","title":"<code>set_type(typ: ProxyTypeStr)</code>","text":"<p>Set proxy type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ProxyTypeStr</code> <p>proxy type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>proxy type does not exist</p> Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def set_type(self, typ: ProxyTypeStr):\n\"\"\"Set proxy type.\n    Args:\n        typ: proxy type\n    Raises:\n        InvalidParamError: proxy type does not exist\n    \"\"\"\nif typ not in PROXY_TYPES:\nraise InvalidParamError(typ, PROXY_TYPES)\nself.setType(PROXY_TYPES[typ])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkReply","title":"<code>NetworkReply</code>","text":"Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>class NetworkReply:\ndef __init__(self, reply: QtNetwork.QNetworkReply):\nself.item = reply\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_error(self) -&gt; NetworkErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn NETWORK_ERROR.inverse[self.error()]\ndef set_raw_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef get_raw_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.item","title":"<code>item = reply</code>  <code>instance-attribute</code>","text":""},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.__init__","title":"<code>__init__(reply: QtNetwork.QNetworkReply)</code>","text":"Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def __init__(self, reply: QtNetwork.QNetworkReply):\nself.item = reply\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.get_error","title":"<code>get_error() -&gt; NetworkErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>NetworkErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def get_error(self) -&gt; NetworkErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn NETWORK_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.get_raw_headers","title":"<code>get_raw_headers() -&gt; dict[str, str]</code>","text":"Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def get_raw_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkreply.NetworkReply.set_raw_headers","title":"<code>set_raw_headers(headers: dict[str, str])</code>","text":"Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def set_raw_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.NetworkRequest","title":"<code>NetworkRequest</code>","text":"<p>         Bases: <code>QtNetwork.QNetworkRequest</code></p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>class NetworkRequest(QtNetwork.QNetworkRequest):\ndef __init__(self, obj: datatypes.UrlType | QtNetwork.QNetworkRequest | None = None):\nif isinstance(obj, QtNetwork.QNetworkRequest):\nsuper().__init__(obj)\nelse:\nsuper().__init__()\nif obj is not None:\nself.set_url(obj)\ndef __repr__(self):\nreturn get_repr(self, self.get_url())\ndef set_header(self, name: KnownHeaderStr, value: str):\nif name not in KNOWN_HEADER:\nraise InvalidParamError(name, KNOWN_HEADER)\nself.setHeader(KNOWN_HEADER[name], value)\ndef get_header(self, name: KnownHeaderStr) -&gt; str:\nif name not in KNOWN_HEADER:\nraise InvalidParamError(name, KNOWN_HEADER)\nreturn self.header(KNOWN_HEADER[name])\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef get_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\ndef set_url(self, url: str | QtCore.QUrl):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef set_priority(self, priority: PriorityStr):\n\"\"\"Set priority.\n        Args:\n            priority: priority\n        Raises:\n            InvalidParamError: priority does not exist\n        \"\"\"\nif priority not in PRIORITY:\nraise InvalidParamError(priority, PRIORITY)\nself.setPriority(PRIORITY[priority])\ndef get_priority(self) -&gt; PriorityStr:\n\"\"\"Get the current priority.\n        Returns:\n            priority\n        \"\"\"\nreturn PRIORITY.inverse[self.priority()]\ndef set_attribute(self, attribute: AttributeStr, value: datatypes.Variant):\nself.setAttribute(ATTRIBUTE[attribute], value)\ndef set_attributes(self, **kwargs):\nfor k, v in kwargs.items():\nself.set_attribute(k, v)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.__init__","title":"<code>__init__(obj: datatypes.UrlType | QtNetwork.QNetworkRequest | None = None)</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def __init__(self, obj: datatypes.UrlType | QtNetwork.QNetworkRequest | None = None):\nif isinstance(obj, QtNetwork.QNetworkRequest):\nsuper().__init__(obj)\nelse:\nsuper().__init__()\nif obj is not None:\nself.set_url(obj)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_url())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.get_header","title":"<code>get_header(name: KnownHeaderStr) -&gt; str</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def get_header(self, name: KnownHeaderStr) -&gt; str:\nif name not in KNOWN_HEADER:\nraise InvalidParamError(name, KNOWN_HEADER)\nreturn self.header(KNOWN_HEADER[name])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.get_headers","title":"<code>get_headers() -&gt; dict[str, str]</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def get_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"<p>Get the current priority.</p> <p>Returns:</p> Type Description <code>PriorityStr</code> <p>priority</p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\n\"\"\"Get the current priority.\n    Returns:\n        priority\n    \"\"\"\nreturn PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_attribute","title":"<code>set_attribute(attribute: AttributeStr, value: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_attribute(self, attribute: AttributeStr, value: datatypes.Variant):\nself.setAttribute(ATTRIBUTE[attribute], value)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_attributes","title":"<code>set_attributes(**kwargs)</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_attributes(self, **kwargs):\nfor k, v in kwargs.items():\nself.set_attribute(k, v)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_header","title":"<code>set_header(name: KnownHeaderStr, value: str)</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_header(self, name: KnownHeaderStr, value: str):\nif name not in KNOWN_HEADER:\nraise InvalidParamError(name, KNOWN_HEADER)\nself.setHeader(KNOWN_HEADER[name], value)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_headers","title":"<code>set_headers(headers: dict[str, str])</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_priority","title":"<code>set_priority(priority: PriorityStr)</code>","text":"<p>Set priority.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>PriorityStr</code> <p>priority</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>priority does not exist</p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_priority(self, priority: PriorityStr):\n\"\"\"Set priority.\n    Args:\n        priority: priority\n    Raises:\n        InvalidParamError: priority does not exist\n    \"\"\"\nif priority not in PRIORITY:\nraise InvalidParamError(priority, PRIORITY)\nself.setPriority(PRIORITY[priority])\n</code></pre>"},{"location":"api/network.html#prettyqt.network.networkrequest.NetworkRequest.set_url","title":"<code>set_url(url: str | QtCore.QUrl)</code>","text":"Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_url(self, url: str | QtCore.QUrl):\nurl = core.Url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.TcpServer","title":"<code>TcpServer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QTcpServer</code></p> Source code in <code>prettyqt\\network\\tcpserver.py</code> <pre><code>class TcpServer(core.ObjectMixin, QtNetwork.QTcpServer):\ndef listen(  # type: ignore\nself, address: str | QtNetwork.QHostAddress, port: int = 0\n) -&gt; bool:\nif isinstance(address, str):\naddress = network.HostAddress(address)\nreturn super().listen(address, port)\ndef get_server_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.serverAddress())\ndef get_proxy(self) -&gt; network.NetworkProxy:\nreturn network.NetworkProxy(self.proxy())\ndef get_server_error(self) -&gt; network.abstractsocket.SocketErrorStr:\nreturn network.abstractsocket.SOCKET_ERROR.inverse[self.serverError()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.tcpserver.TcpServer.get_proxy","title":"<code>get_proxy() -&gt; network.NetworkProxy</code>","text":"Source code in <code>prettyqt\\network\\tcpserver.py</code> <pre><code>def get_proxy(self) -&gt; network.NetworkProxy:\nreturn network.NetworkProxy(self.proxy())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.tcpserver.TcpServer.get_server_address","title":"<code>get_server_address() -&gt; network.HostAddress</code>","text":"Source code in <code>prettyqt\\network\\tcpserver.py</code> <pre><code>def get_server_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.serverAddress())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.tcpserver.TcpServer.get_server_error","title":"<code>get_server_error() -&gt; network.abstractsocket.SocketErrorStr</code>","text":"Source code in <code>prettyqt\\network\\tcpserver.py</code> <pre><code>def get_server_error(self) -&gt; network.abstractsocket.SocketErrorStr:\nreturn network.abstractsocket.SOCKET_ERROR.inverse[self.serverError()]\n</code></pre>"},{"location":"api/network.html#prettyqt.network.tcpserver.TcpServer.listen","title":"<code>listen(address: str | QtNetwork.QHostAddress, port: int = 0) -&gt; bool</code>","text":"Source code in <code>prettyqt\\network\\tcpserver.py</code> <pre><code>def listen(  # type: ignore\nself, address: str | QtNetwork.QHostAddress, port: int = 0\n) -&gt; bool:\nif isinstance(address, str):\naddress = network.HostAddress(address)\nreturn super().listen(address, port)\n</code></pre>"},{"location":"api/network.html#prettyqt.network.TcpSocket","title":"<code>TcpSocket</code>","text":"<p>         Bases: <code>network.AbstractSocketMixin</code>, <code>QtNetwork.QTcpSocket</code></p> Source code in <code>prettyqt\\network\\tcpsocket.py</code> <pre><code>class TcpSocket(network.AbstractSocketMixin, QtNetwork.QTcpSocket):\npass\n</code></pre>"},{"location":"api/network.html#prettyqt.network.UdpSocket","title":"<code>UdpSocket</code>","text":"<p>         Bases: <code>network.AbstractSocketMixin</code>, <code>QtNetwork.QUdpSocket</code></p> Source code in <code>prettyqt\\network\\udpsocket.py</code> <pre><code>class UdpSocket(network.AbstractSocketMixin, QtNetwork.QUdpSocket):\ndef get_multicast_interface(self) -&gt; network.NetworkInterface:\nreturn network.NetworkInterface(self.multicastInterface())\ndef receive_datagram(self, max_size: int | None = None) -&gt; network.NetworkDatagram:\nif max_size is None:\nmax_size = -1\nreturn network.NetworkDatagram(self.receiveDatagram(max_size))\n</code></pre>"},{"location":"api/network.html#prettyqt.network.udpsocket.UdpSocket.get_multicast_interface","title":"<code>get_multicast_interface() -&gt; network.NetworkInterface</code>","text":"Source code in <code>prettyqt\\network\\udpsocket.py</code> <pre><code>def get_multicast_interface(self) -&gt; network.NetworkInterface:\nreturn network.NetworkInterface(self.multicastInterface())\n</code></pre>"},{"location":"api/network.html#prettyqt.network.udpsocket.UdpSocket.receive_datagram","title":"<code>receive_datagram(max_size: int | None = None) -&gt; network.NetworkDatagram</code>","text":"Source code in <code>prettyqt\\network\\udpsocket.py</code> <pre><code>def receive_datagram(self, max_size: int | None = None) -&gt; network.NetworkDatagram:\nif max_size is None:\nmax_size = -1\nreturn network.NetworkDatagram(self.receiveDatagram(max_size))\n</code></pre>"},{"location":"api/objbrowser.html","title":"objbrowser module","text":"<p>Objbrowser package.</p>"},{"location":"api/pdf.html","title":"pdf module","text":"<p>Pdf module.</p>"},{"location":"api/pdf.html#prettyqt.pdf.__all__","title":"<code>__all__ = ['PdfDocument', 'PdfBookmarkModel', 'PdfSearchModel']</code>  <code>module-attribute</code>","text":""},{"location":"api/pdf.html#prettyqt.pdf.PdfBookmarkModel","title":"<code>PdfBookmarkModel</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code>, <code>QtPdf.QPdfBookmarkModel</code></p> Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>class PdfBookmarkModel(core.AbstractItemModelMixin, QtPdf.QPdfBookmarkModel):\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\ndef set_document(self, document: datatypes.PathType | QtPdf.QPdfDocument):\nif not isinstance(document, QtPdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfbookmarkmodel.PdfBookmarkModel.__init__","title":"<code>__init__(parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>def __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfbookmarkmodel.PdfBookmarkModel.set_document","title":"<code>set_document(document: datatypes.PathType | QtPdf.QPdfDocument)</code>","text":"Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>def set_document(self, document: datatypes.PathType | QtPdf.QPdfDocument):\nif not isinstance(document, QtPdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.PdfDocument","title":"<code>PdfDocument</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtPdf.QPdfDocument</code></p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>class PdfDocument(core.ObjectMixin, QtPdf.QPdfDocument):\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error.\n        Returns:\n            page mode\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_status(self) -&gt; StatusStr:\n\"\"\"Return current status.\n        Returns:\n            zoom mode\n        \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfdocument.PdfDocument.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return current error.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>page mode</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error.\n    Returns:\n        page mode\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfdocument.PdfDocument.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Return current status.</p> <p>Returns:</p> Type Description <code>StatusStr</code> <p>zoom mode</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Return current status.\n    Returns:\n        zoom mode\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.PdfSearchModel","title":"<code>PdfSearchModel</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code>, <code>QtPdf.QPdfSearchModel</code></p> Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>class PdfSearchModel(core.AbstractItemModelMixin, QtPdf.QPdfSearchModel):\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\ndef set_document(self, document: datatypes.PathType | QtPdf.QPdfDocument):\nif not isinstance(document, QtPdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfsearchmodel.PdfSearchModel.__init__","title":"<code>__init__(parent: QtCore.QObject | None = None)</code>","text":"Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>def __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\n</code></pre>"},{"location":"api/pdf.html#prettyqt.pdf.pdfsearchmodel.PdfSearchModel.set_document","title":"<code>set_document(document: datatypes.PathType | QtPdf.QPdfDocument)</code>","text":"Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>def set_document(self, document: datatypes.PathType | QtPdf.QPdfDocument):\nif not isinstance(document, QtPdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"api/pdfwidgets.html","title":"pdfwidgets module","text":"<p>Pdfwidgets module.</p>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.__all__","title":"<code>__all__ = ['PdfView']</code>  <code>module-attribute</code>","text":""},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.PdfView","title":"<code>PdfView</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>QtPdfWidgets.QPdfView</code></p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>class PdfView(widgets.AbstractScrollAreaMixin, QtPdfWidgets.QPdfView):\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\ndef get_document_margins(self) -&gt; core.Margins:\nreturn core.Margins(self.documentMargins())\ndef set_file(self, path: datatypes.PathType):\ndoc = pdf.PdfDocument(self)\ndoc.load(os.fspath(path))\nself.setDocument(doc)\ndef set_page_mode(self, mode: PageModeStr):\n\"\"\"Set the page mode.\n        Args:\n            mode: page mode\n        Raises:\n            InvalidParamError: page mode does not exist\n        \"\"\"\nif mode not in PAGE_MODE:\nraise InvalidParamError(mode, PAGE_MODE)\nself.setPageMode(PAGE_MODE[mode])\ndef get_page_mode(self) -&gt; PageModeStr:\n\"\"\"Return current page mode.\n        Returns:\n            page mode\n        \"\"\"\nreturn PAGE_MODE.inverse[self.pageMode()]\ndef set_zoom_mode(self, mode: ZoomModeStr):\n\"\"\"Set the zoom mode.\n        Args:\n            mode: zoom mode\n        Raises:\n            InvalidParamError: zoom mode does not exist\n        \"\"\"\nif mode not in ZOOM_MODE:\nraise InvalidParamError(mode, ZOOM_MODE)\nself.setZoomMode(ZOOM_MODE[mode])\ndef get_zoom_mode(self) -&gt; ZoomModeStr:\n\"\"\"Return current zoom mode.\n        Returns:\n            zoom mode\n        \"\"\"\nreturn ZOOM_MODE.inverse[self.zoomMode()]\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.get_document_margins","title":"<code>get_document_margins() -&gt; core.Margins</code>","text":"Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_document_margins(self) -&gt; core.Margins:\nreturn core.Margins(self.documentMargins())\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.get_page_mode","title":"<code>get_page_mode() -&gt; PageModeStr</code>","text":"<p>Return current page mode.</p> <p>Returns:</p> Type Description <code>PageModeStr</code> <p>page mode</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_page_mode(self) -&gt; PageModeStr:\n\"\"\"Return current page mode.\n    Returns:\n        page mode\n    \"\"\"\nreturn PAGE_MODE.inverse[self.pageMode()]\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.get_zoom_mode","title":"<code>get_zoom_mode() -&gt; ZoomModeStr</code>","text":"<p>Return current zoom mode.</p> <p>Returns:</p> Type Description <code>ZoomModeStr</code> <p>zoom mode</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_zoom_mode(self) -&gt; ZoomModeStr:\n\"\"\"Return current zoom mode.\n    Returns:\n        zoom mode\n    \"\"\"\nreturn ZOOM_MODE.inverse[self.zoomMode()]\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.set_file","title":"<code>set_file(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_file(self, path: datatypes.PathType):\ndoc = pdf.PdfDocument(self)\ndoc.load(os.fspath(path))\nself.setDocument(doc)\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.set_page_mode","title":"<code>set_page_mode(mode: PageModeStr)</code>","text":"<p>Set the page mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PageModeStr</code> <p>page mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>page mode does not exist</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_page_mode(self, mode: PageModeStr):\n\"\"\"Set the page mode.\n    Args:\n        mode: page mode\n    Raises:\n        InvalidParamError: page mode does not exist\n    \"\"\"\nif mode not in PAGE_MODE:\nraise InvalidParamError(mode, PAGE_MODE)\nself.setPageMode(PAGE_MODE[mode])\n</code></pre>"},{"location":"api/pdfwidgets.html#prettyqt.pdfwidgets.pdfview.PdfView.set_zoom_mode","title":"<code>set_zoom_mode(mode: ZoomModeStr)</code>","text":"<p>Set the zoom mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ZoomModeStr</code> <p>zoom mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>zoom mode does not exist</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_zoom_mode(self, mode: ZoomModeStr):\n\"\"\"Set the zoom mode.\n    Args:\n        mode: zoom mode\n    Raises:\n        InvalidParamError: zoom mode does not exist\n    \"\"\"\nif mode not in ZOOM_MODE:\nraise InvalidParamError(mode, ZOOM_MODE)\nself.setZoomMode(ZOOM_MODE[mode])\n</code></pre>"},{"location":"api/positioning.html","title":"positioning module","text":"<p>Positioning module.</p> <p>Contains QtPositioning-based classes</p>"},{"location":"api/positioning.html#prettyqt.positioning.__all__","title":"<code>__all__ = ['GeoAddress', 'GeoRectangle', 'GeoShape', 'GeoShapeMixin', 'GeoCircle', 'GeoCoordinate', 'GeoPositionInfo', 'GeoLocation', 'GeoSatelliteInfo', 'GeoPath', 'GeoPolygon', 'GeoPositionInfoSource', 'GeoPositionInfoSourceMixin', 'GeoSatelliteInfoSource', 'NmeaPositionInfoSource', 'GeoAreaMonitorSource', 'GeoAreaMonitorInfo']</code>  <code>module-attribute</code>","text":""},{"location":"api/positioning.html#prettyqt.positioning.GeoAddress","title":"<code>GeoAddress</code>","text":"<p>         Bases: <code>QtPositioning.QGeoAddress</code></p> Source code in <code>prettyqt\\positioning\\geoaddress.py</code> <pre><code>class GeoAddress(QtPositioning.QGeoAddress):\ndef __str__(self):\nreturn self.text()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoaddress.GeoAddress.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geoaddress.py</code> <pre><code>def __str__(self):\nreturn self.text()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoAreaMonitorInfo","title":"<code>GeoAreaMonitorInfo</code>","text":"<p>         Bases: <code>QtPositioning.QGeoAreaMonitorInfo</code></p> Source code in <code>prettyqt\\positioning\\geoareamonitorinfo.py</code> <pre><code>class GeoAreaMonitorInfo(QtPositioning.QGeoAreaMonitorInfo):\ndef __str__(self):\nreturn self.name()\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef get_area(self) -&gt; positioning.GeoShape:\narea = self.area()\nmatch area:\ncase QtPositioning.QGeoCircle():\nreturn positioning.GeoCircle(area)\ncase QtPositioning.QGeoRectangle():\nreturn positioning.GeoRectangle(area)\ncase QtPositioning.QGeoPath():\nreturn positioning.GeoPath(area)\ncase QtPositioning.QGeoPolygon():\nreturn positioning.GeoPolygon(area)\ncase QtPositioning.QGeoShape():\nreturn positioning.GeoShape(area)\ncase _:\nraise RuntimeError()\ndef get_expiration(self) -&gt; core.DateTime:\nreturn core.DateTime(self.expiration())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorinfo.GeoAreaMonitorInfo.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geoareamonitorinfo.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.name())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorinfo.GeoAreaMonitorInfo.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geoareamonitorinfo.py</code> <pre><code>def __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorinfo.GeoAreaMonitorInfo.get_area","title":"<code>get_area() -&gt; positioning.GeoShape</code>","text":"Source code in <code>prettyqt\\positioning\\geoareamonitorinfo.py</code> <pre><code>def get_area(self) -&gt; positioning.GeoShape:\narea = self.area()\nmatch area:\ncase QtPositioning.QGeoCircle():\nreturn positioning.GeoCircle(area)\ncase QtPositioning.QGeoRectangle():\nreturn positioning.GeoRectangle(area)\ncase QtPositioning.QGeoPath():\nreturn positioning.GeoPath(area)\ncase QtPositioning.QGeoPolygon():\nreturn positioning.GeoPolygon(area)\ncase QtPositioning.QGeoShape():\nreturn positioning.GeoShape(area)\ncase _:\nraise RuntimeError()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorinfo.GeoAreaMonitorInfo.get_expiration","title":"<code>get_expiration() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\positioning\\geoareamonitorinfo.py</code> <pre><code>def get_expiration(self) -&gt; core.DateTime:\nreturn core.DateTime(self.expiration())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoAreaMonitorSource","title":"<code>GeoAreaMonitorSource</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtPositioning.QGeoAreaMonitorSource</code></p> Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>class GeoAreaMonitorSource(core.ObjectMixin, QtPositioning.QGeoAreaMonitorSource):\ndef __str__(self):\nreturn self.sourceName()\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef get_error(self) -&gt; AreaMonitorFeatureStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorsource.GeoAreaMonitorSource.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.name())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorsource.GeoAreaMonitorSource.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>def __str__(self):\nreturn self.sourceName()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoareamonitorsource.GeoAreaMonitorSource.get_error","title":"<code>get_error() -&gt; AreaMonitorFeatureStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>AreaMonitorFeatureStr</code> <p>error type</p> Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>def get_error(self) -&gt; AreaMonitorFeatureStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoCircle","title":"<code>GeoCircle</code>","text":"<p>         Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoCircle</code></p> Source code in <code>prettyqt\\positioning\\geocircle.py</code> <pre><code>class GeoCircle(positioning.GeoShapeMixin, QtPositioning.QGeoCircle):\ndef __init__(\nself,\ncenter_or_other: None\n| (\nQtPositioning.QGeoShape | QtPositioning.QGeoCoordinate | tuple[float, float]\n) = None,\nradius: float | None = None,\n):\nif center_or_other is None:\nsuper().__init__()\nelse:\nif radius is None:\nradius = -1\nif isinstance(center_or_other, tuple):\ncenter_or_other = QtPositioning.QGeoCoordinate(*center_or_other)\nsuper().__init__(center_or_other, radius)\ndef __repr__(self):\nreturn get_repr(self, self.get_center(), self.radius())\ndef get_center(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.center())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocircle.GeoCircle.__init__","title":"<code>__init__(center_or_other: None | QtPositioning.QGeoShape | QtPositioning.QGeoCoordinate | tuple[float, float] = None, radius: float | None = None)</code>","text":"Source code in <code>prettyqt\\positioning\\geocircle.py</code> <pre><code>def __init__(\nself,\ncenter_or_other: None\n| (\nQtPositioning.QGeoShape | QtPositioning.QGeoCoordinate | tuple[float, float]\n) = None,\nradius: float | None = None,\n):\nif center_or_other is None:\nsuper().__init__()\nelse:\nif radius is None:\nradius = -1\nif isinstance(center_or_other, tuple):\ncenter_or_other = QtPositioning.QGeoCoordinate(*center_or_other)\nsuper().__init__(center_or_other, radius)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocircle.GeoCircle.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geocircle.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_center(), self.radius())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocircle.GeoCircle.get_center","title":"<code>get_center() -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\geocircle.py</code> <pre><code>def get_center(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.center())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoCoordinate","title":"<code>GeoCoordinate</code>","text":"<p>         Bases: <code>QtPositioning.QGeoCoordinate</code></p> Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>class GeoCoordinate(QtPositioning.QGeoCoordinate):\ndef __str__(self):\nreturn self.toString()\ndef __format__(self, format_spec: CoordinateFormatStr):\nreturn self.toString(COORDINATE_FORMAT[format_spec])\ndef __repr__(self):\nreturn get_repr(self, self.latitude(), self.longitude())\ndef __bool__(self):\nreturn self.isValid()\ndef get_type(self) -&gt; str:\nreturn COORDINATE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocoordinate.GeoCoordinate.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocoordinate.GeoCoordinate.__format__","title":"<code>__format__(format_spec: CoordinateFormatStr)</code>","text":"Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>def __format__(self, format_spec: CoordinateFormatStr):\nreturn self.toString(COORDINATE_FORMAT[format_spec])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocoordinate.GeoCoordinate.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.latitude(), self.longitude())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocoordinate.GeoCoordinate.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geocoordinate.GeoCoordinate.get_type","title":"<code>get_type() -&gt; str</code>","text":"Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>def get_type(self) -&gt; str:\nreturn COORDINATE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoLocation","title":"<code>GeoLocation</code>","text":"<p>         Bases: <code>QtPositioning.QGeoLocation</code></p> Source code in <code>prettyqt\\positioning\\geolocation.py</code> <pre><code>class GeoLocation(QtPositioning.QGeoLocation):\ndef get_address(self) -&gt; positioning.GeoAddress:\nreturn positioning.GeoAddress(self.address())\ndef get_coordinate(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinate())\ndef get_bounding_shape(self) -&gt; positioning.GeoShape:\nreturn positioning.GeoShape(self.boundingShape())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geolocation.GeoLocation.get_address","title":"<code>get_address() -&gt; positioning.GeoAddress</code>","text":"Source code in <code>prettyqt\\positioning\\geolocation.py</code> <pre><code>def get_address(self) -&gt; positioning.GeoAddress:\nreturn positioning.GeoAddress(self.address())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geolocation.GeoLocation.get_bounding_shape","title":"<code>get_bounding_shape() -&gt; positioning.GeoShape</code>","text":"Source code in <code>prettyqt\\positioning\\geolocation.py</code> <pre><code>def get_bounding_shape(self) -&gt; positioning.GeoShape:\nreturn positioning.GeoShape(self.boundingShape())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geolocation.GeoLocation.get_coordinate","title":"<code>get_coordinate() -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\geolocation.py</code> <pre><code>def get_coordinate(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinate())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoPath","title":"<code>GeoPath</code>","text":"<p>         Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoPath</code></p> Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>class GeoPath(positioning.GeoShapeMixin, QtPositioning.QGeoPath):\ndef __len__(self):\nreturn self.size()\ndef __getitem__(self, index: int) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinateAt(index))\ndef __setitem__(self, index: int, value: QtPositioning.QGeoCoordinate):\nself.replaceCoordinate(index, value)\ndef __delitem__(self, index: int):\nself.removeCoordinate(index)\ndef __add__(self, other: QtPositioning.QGeoCoordinate):\nself.addCoordinate(other)\nreturn self\ndef __repr__(self):\n# p = \", \".join([f\"{p!r}\" for p in self.get_path()])\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.path()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.__add__","title":"<code>__add__(other: QtPositioning.QGeoCoordinate)</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def __add__(self, other: QtPositioning.QGeoCoordinate):\nself.addCoordinate(other)\nreturn self\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def __delitem__(self, index: int):\nself.removeCoordinate(index)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.__getitem__","title":"<code>__getitem__(index: int) -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def __getitem__(self, index: int) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinateAt(index))\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def __len__(self):\nreturn self.size()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def __repr__(self):\n# p = \", \".join([f\"{p!r}\" for p in self.get_path()])\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.__setitem__","title":"<code>__setitem__(index: int, value: QtPositioning.QGeoCoordinate)</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def __setitem__(self, index: int, value: QtPositioning.QGeoCoordinate):\nself.replaceCoordinate(index, value)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopath.GeoPath.get_path","title":"<code>get_path() -&gt; list[positioning.GeoCoordinate]</code>","text":"Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>def get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.path()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoPolygon","title":"<code>GeoPolygon</code>","text":"<p>         Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoPolygon</code></p> Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>class GeoPolygon(positioning.GeoShapeMixin, QtPositioning.QGeoPolygon):\ndef __len__(self):\nreturn self.size()\ndef __repr__(self):\n# p = \", \".join([f\"{p!r}\" for p in self.get_path()])\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef __getitem__(self, index: int) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinateAt(index))\ndef __setitem__(self, index: int, value: QtPositioning.QGeoCoordinate):\nself.replaceCoordinate(index, value)\ndef __delitem__(self, index: int):\nself.removeCoordinate(index)\ndef __add__(self, other: QtPositioning.QGeoCoordinate):\nself.addCoordinate(other)\nreturn self\ndef get_hole_path(self, index: int) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.holePath(index)]\ndef get_perimeter(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.perimeter()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.__add__","title":"<code>__add__(other: QtPositioning.QGeoCoordinate)</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def __add__(self, other: QtPositioning.QGeoCoordinate):\nself.addCoordinate(other)\nreturn self\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def __delitem__(self, index: int):\nself.removeCoordinate(index)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.__getitem__","title":"<code>__getitem__(index: int) -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def __getitem__(self, index: int) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinateAt(index))\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def __len__(self):\nreturn self.size()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def __repr__(self):\n# p = \", \".join([f\"{p!r}\" for p in self.get_path()])\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.__setitem__","title":"<code>__setitem__(index: int, value: QtPositioning.QGeoCoordinate)</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def __setitem__(self, index: int, value: QtPositioning.QGeoCoordinate):\nself.replaceCoordinate(index, value)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.get_hole_path","title":"<code>get_hole_path(index: int) -&gt; list[positioning.GeoCoordinate]</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def get_hole_path(self, index: int) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.holePath(index)]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopolygon.GeoPolygon.get_perimeter","title":"<code>get_perimeter() -&gt; list[positioning.GeoCoordinate]</code>","text":"Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>def get_perimeter(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.perimeter()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoPositionInfo","title":"<code>GeoPositionInfo</code>","text":"<p>         Bases: <code>QtPositioning.QGeoPositionInfo</code></p> Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>class GeoPositionInfo(QtPositioning.QGeoPositionInfo):\ndef __repr__(self):\nreturn get_repr(self, self.get_coordinate(), self.get_timestamp())\ndef __contains__(self, index: AttributeStr):\nreturn self.hasAttribute(ATTRIBUTE[index])\ndef __getitem__(self, index: AttributeStr) -&gt; float:\nreturn self.attribute(ATTRIBUTE[index])\ndef __setitem__(self, index: AttributeStr, value: float):\nself.setAttribute(ATTRIBUTE[index], value)\ndef __delitem__(self, index: AttributeStr):\nreturn self.removeAttribute(ATTRIBUTE[index])\ndef __bool__(self):\nreturn self.isValid()\ndef get_coordinate(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinate())\ndef get_timestamp(self) -&gt; core.DateTime:\nreturn core.DateTime(self.timestamp())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.__contains__","title":"<code>__contains__(index: AttributeStr)</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def __contains__(self, index: AttributeStr):\nreturn self.hasAttribute(ATTRIBUTE[index])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.__delitem__","title":"<code>__delitem__(index: AttributeStr)</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def __delitem__(self, index: AttributeStr):\nreturn self.removeAttribute(ATTRIBUTE[index])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.__getitem__","title":"<code>__getitem__(index: AttributeStr) -&gt; float</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def __getitem__(self, index: AttributeStr) -&gt; float:\nreturn self.attribute(ATTRIBUTE[index])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_coordinate(), self.get_timestamp())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.__setitem__","title":"<code>__setitem__(index: AttributeStr, value: float)</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def __setitem__(self, index: AttributeStr, value: float):\nself.setAttribute(ATTRIBUTE[index], value)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.get_coordinate","title":"<code>get_coordinate() -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def get_coordinate(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinate())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfo.GeoPositionInfo.get_timestamp","title":"<code>get_timestamp() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>def get_timestamp(self) -&gt; core.DateTime:\nreturn core.DateTime(self.timestamp())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoPositionInfoSource","title":"<code>GeoPositionInfoSource</code>","text":"<p>         Bases: <code>GeoPositionInfoSourceMixin</code>, <code>QtPositioning.QGeoPositionInfoSource</code></p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>class GeoPositionInfoSource(\nGeoPositionInfoSourceMixin, QtPositioning.QGeoPositionInfoSource\n):\npass\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoPositionInfoSourceMixin","title":"<code>GeoPositionInfoSourceMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>class GeoPositionInfoSourceMixin(core.ObjectMixin):\ndef serialize_fields(self):\nreturn dict(\nminimum_update_interval=self.minimumUpdateInterval(),\nsource_name=self.sourceName(),\nupdate_interval=self.updateInterval(),\n)\ndef __str__(self):\nreturn self.sourceName()\ndef __repr__(self):\nreturn get_repr(self)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERRORS.inverse[self.error()]\ndef set_preferred_positioning_methods(self, *methods: PositioningMethodStr):\n\"\"\"Set preferred positioning methods.\n        Args:\n            methods: positioning methods to use\n        Raises:\n            InvalidParamError: invalid positioning methods\n        \"\"\"\nfor item in methods:\nif item not in POSITIONING_METHODS:\nraise InvalidParamError(item, POSITIONING_METHODS)\nflags = POSITIONING_METHODS.merge_flags(methods)\nself.setPreferredPositioningMethods(flags)\ndef get_preferred_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of preferred positioning methods.\n        Returns:\n            list of preferred positioning methods\n        \"\"\"\nreturn POSITIONING_METHODS.get_list(self.preferredPositioningMethods())\ndef get_supported_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of supported positioning methods.\n        Returns:\n            list of supported positioning methods\n        \"\"\"\nreturn POSITIONING_METHODS.get_list(self.supportedPositioningMethods())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def __str__(self):\nreturn self.sourceName()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_preferred_positioning_methods","title":"<code>get_preferred_positioning_methods() -&gt; list[PositioningMethodStr]</code>","text":"<p>Return list of preferred positioning methods.</p> <p>Returns:</p> Type Description <code>list[PositioningMethodStr]</code> <p>list of preferred positioning methods</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_preferred_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of preferred positioning methods.\n    Returns:\n        list of preferred positioning methods\n    \"\"\"\nreturn POSITIONING_METHODS.get_list(self.preferredPositioningMethods())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_supported_positioning_methods","title":"<code>get_supported_positioning_methods() -&gt; list[PositioningMethodStr]</code>","text":"<p>Return list of supported positioning methods.</p> <p>Returns:</p> Type Description <code>list[PositioningMethodStr]</code> <p>list of supported positioning methods</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_supported_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of supported positioning methods.\n    Returns:\n        list of supported positioning methods\n    \"\"\"\nreturn POSITIONING_METHODS.get_list(self.supportedPositioningMethods())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nminimum_update_interval=self.minimumUpdateInterval(),\nsource_name=self.sourceName(),\nupdate_interval=self.updateInterval(),\n)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.set_preferred_positioning_methods","title":"<code>set_preferred_positioning_methods(*methods: PositioningMethodStr)</code>","text":"<p>Set preferred positioning methods.</p> <p>Parameters:</p> Name Type Description Default <code>methods</code> <code>PositioningMethodStr</code> <p>positioning methods to use</p> <code>()</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid positioning methods</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def set_preferred_positioning_methods(self, *methods: PositioningMethodStr):\n\"\"\"Set preferred positioning methods.\n    Args:\n        methods: positioning methods to use\n    Raises:\n        InvalidParamError: invalid positioning methods\n    \"\"\"\nfor item in methods:\nif item not in POSITIONING_METHODS:\nraise InvalidParamError(item, POSITIONING_METHODS)\nflags = POSITIONING_METHODS.merge_flags(methods)\nself.setPreferredPositioningMethods(flags)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoRectangle","title":"<code>GeoRectangle</code>","text":"<p>         Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoRectangle</code></p> Source code in <code>prettyqt\\positioning\\georectangle.py</code> <pre><code>class GeoRectangle(positioning.GeoShapeMixin, QtPositioning.QGeoRectangle):\ndef __repr__(self):\nreturn get_repr(self, self.get_top_left(), self.get_bottom_right())\ndef get_top_left(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.topLeft())\ndef get_bottom_right(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.bottomRight())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.georectangle.GeoRectangle.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\georectangle.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_top_left(), self.get_bottom_right())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.georectangle.GeoRectangle.get_bottom_right","title":"<code>get_bottom_right() -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\georectangle.py</code> <pre><code>def get_bottom_right(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.bottomRight())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.georectangle.GeoRectangle.get_top_left","title":"<code>get_top_left() -&gt; positioning.GeoCoordinate</code>","text":"Source code in <code>prettyqt\\positioning\\georectangle.py</code> <pre><code>def get_top_left(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.topLeft())\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoSatelliteInfo","title":"<code>GeoSatelliteInfo</code>","text":"<p>         Bases: <code>QtPositioning.QGeoSatelliteInfo</code></p> Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>class GeoSatelliteInfo(QtPositioning.QGeoSatelliteInfo):\ndef __getitem__(self, index: AttributeStr):\nreturn self.attribute(ATTRIBUTE[index])\ndef __setitem__(self, index: AttributeStr, value: float):\nself.setAttribute(ATTRIBUTE[index], value)\ndef __delitem__(self, index: AttributeStr):\nself.removeAttribute(ATTRIBUTE[index])\ndef __contains__(self, value: AttributeStr):\nreturn self.hasAttribute(ATTRIBUTE[value])\ndef __int__(self):\nreturn self.satelliteIdentifier()\ndef set_satellite_system(self, system: SatelliteSystemStr):\n\"\"\"Set satellite system.\n        Args:\n            system: satellite system to use\n        Raises:\n            InvalidParamError: invalid system\n        \"\"\"\nif system not in SATELLITE_SYSTEMS:\nraise InvalidParamError(system, SATELLITE_SYSTEMS)\nself.setSatelliteSystem(SATELLITE_SYSTEMS[system])\ndef get_satellite_system(self) -&gt; SatelliteSystemStr:\n\"\"\"Return satellite system.\n        Returns:\n            satellite system\n        \"\"\"\nreturn SATELLITE_SYSTEMS.inverse[self.satelliteSystem()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.__contains__","title":"<code>__contains__(value: AttributeStr)</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def __contains__(self, value: AttributeStr):\nreturn self.hasAttribute(ATTRIBUTE[value])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.__delitem__","title":"<code>__delitem__(index: AttributeStr)</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def __delitem__(self, index: AttributeStr):\nself.removeAttribute(ATTRIBUTE[index])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.__getitem__","title":"<code>__getitem__(index: AttributeStr)</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def __getitem__(self, index: AttributeStr):\nreturn self.attribute(ATTRIBUTE[index])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.__int__","title":"<code>__int__()</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def __int__(self):\nreturn self.satelliteIdentifier()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.__setitem__","title":"<code>__setitem__(index: AttributeStr, value: float)</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def __setitem__(self, index: AttributeStr, value: float):\nself.setAttribute(ATTRIBUTE[index], value)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.get_satellite_system","title":"<code>get_satellite_system() -&gt; SatelliteSystemStr</code>","text":"<p>Return satellite system.</p> <p>Returns:</p> Type Description <code>SatelliteSystemStr</code> <p>satellite system</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def get_satellite_system(self) -&gt; SatelliteSystemStr:\n\"\"\"Return satellite system.\n    Returns:\n        satellite system\n    \"\"\"\nreturn SATELLITE_SYSTEMS.inverse[self.satelliteSystem()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.set_satellite_system","title":"<code>set_satellite_system(system: SatelliteSystemStr)</code>","text":"<p>Set satellite system.</p> <p>Parameters:</p> Name Type Description Default <code>system</code> <code>SatelliteSystemStr</code> <p>satellite system to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid system</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def set_satellite_system(self, system: SatelliteSystemStr):\n\"\"\"Set satellite system.\n    Args:\n        system: satellite system to use\n    Raises:\n        InvalidParamError: invalid system\n    \"\"\"\nif system not in SATELLITE_SYSTEMS:\nraise InvalidParamError(system, SATELLITE_SYSTEMS)\nself.setSatelliteSystem(SATELLITE_SYSTEMS[system])\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoSatelliteInfoSource","title":"<code>GeoSatelliteInfoSource</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtPositioning.QGeoSatelliteInfoSource</code></p> Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>class GeoSatelliteInfoSource(core.ObjectMixin, QtPositioning.QGeoSatelliteInfoSource):\ndef serialize_fields(self):\nreturn dict(\nminimum_update_interval=self.minimumUpdateInterval(),\nupdate_interval=self.updateInterval(),\n)\ndef __str__(self):\nreturn self.sourceName()\ndef __repr__(self):\nreturn get_repr(self)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfosource.GeoSatelliteInfoSource.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfosource.GeoSatelliteInfoSource.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>def __str__(self):\nreturn self.sourceName()\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfosource.GeoSatelliteInfoSource.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> <p>Returns:</p> Type Description <code>ErrorStr</code> <p>error type</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geosatelliteinfosource.GeoSatelliteInfoSource.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nminimum_update_interval=self.minimumUpdateInterval(),\nupdate_interval=self.updateInterval(),\n)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoShape","title":"<code>GeoShape</code>","text":"<p>         Bases: <code>GeoShapeMixin</code>, <code>QtPositioning.QGeoShape</code></p> Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>class GeoShape(GeoShapeMixin, QtPositioning.QGeoShape):\npass\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.GeoShapeMixin","title":"<code>GeoShapeMixin</code>","text":"Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>class GeoShapeMixin:\ndef __contains__(self, other: QtPositioning.QGeoCoordinate):\nreturn self.contains(other)\ndef __str__(self):\nreturn self.toString()[1:]\ndef get_type(self) -&gt; str:\nreturn SHAPE_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoshape.GeoShapeMixin.__contains__","title":"<code>__contains__(other: QtPositioning.QGeoCoordinate)</code>","text":"Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>def __contains__(self, other: QtPositioning.QGeoCoordinate):\nreturn self.contains(other)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoshape.GeoShapeMixin.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>def __str__(self):\nreturn self.toString()[1:]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.geoshape.GeoShapeMixin.get_type","title":"<code>get_type() -&gt; str</code>","text":"Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>def get_type(self) -&gt; str:\nreturn SHAPE_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.NmeaPositionInfoSource","title":"<code>NmeaPositionInfoSource</code>","text":"<p>         Bases: <code>positioning.GeoPositionInfoSourceMixin</code>, <code>QtPositioning.QNmeaPositionInfoSource</code></p> Source code in <code>prettyqt\\positioning\\nmeapositioninginfosource.py</code> <pre><code>class NmeaPositionInfoSource(\npositioning.GeoPositionInfoSourceMixin, QtPositioning.QNmeaPositionInfoSource\n):\ndef __init__(\nself,\nupdate_mode: QtPositioning.QNmeaPositionInfoSource.UpdateMode | str,\nparent: QtCore.QObject,\n):\nif isinstance(update_mode, QtPositioning.QNmeaPositionInfoSource.UpdateMode):\nmode = update_mode\nelse:\nmode = UPDATE_MODES[update_mode]\nsuper().__init__(mode, parent)\ndef __repr__(self):\nreturn get_repr(self)\ndef get_update_mode(self) -&gt; str:\nreturn UPDATE_MODES.inverse[self.updateMode()]\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.nmeapositioninginfosource.NmeaPositionInfoSource.__init__","title":"<code>__init__(update_mode: QtPositioning.QNmeaPositionInfoSource.UpdateMode | str, parent: QtCore.QObject)</code>","text":"Source code in <code>prettyqt\\positioning\\nmeapositioninginfosource.py</code> <pre><code>def __init__(\nself,\nupdate_mode: QtPositioning.QNmeaPositionInfoSource.UpdateMode | str,\nparent: QtCore.QObject,\n):\nif isinstance(update_mode, QtPositioning.QNmeaPositionInfoSource.UpdateMode):\nmode = update_mode\nelse:\nmode = UPDATE_MODES[update_mode]\nsuper().__init__(mode, parent)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.nmeapositioninginfosource.NmeaPositionInfoSource.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\positioning\\nmeapositioninginfosource.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/positioning.html#prettyqt.positioning.nmeapositioninginfosource.NmeaPositionInfoSource.get_update_mode","title":"<code>get_update_mode() -&gt; str</code>","text":"Source code in <code>prettyqt\\positioning\\nmeapositioninginfosource.py</code> <pre><code>def get_update_mode(self) -&gt; str:\nreturn UPDATE_MODES.inverse[self.updateMode()]\n</code></pre>"},{"location":"api/qml.html","title":"qml module","text":"<p>Qml module.</p> <p>Contains QtQml-based classes</p>"},{"location":"api/qml.html#prettyqt.qml.__all__","title":"<code>__all__ = ['register_qml_type', 'clear_type_registrations', 'QmlParserStatus', 'QmlError', 'QmlExpression', 'QmlProperty', 'QmlParserStatusMixin', 'QmlPropertyMap', 'JSValue', 'JSValueIterator', 'QmlEngine', 'QmlEngineMixin', 'JSEngine', 'JSEngineMixin', 'QmlApplicationEngine', 'QmlComponent', 'QmlImageProviderBase', 'QmlImageProviderBaseMixin']</code>  <code>module-attribute</code>","text":""},{"location":"api/qml.html#prettyqt.qml.JSEngine","title":"<code>JSEngine</code>","text":"<p>         Bases: <code>JSEngineMixin</code>, <code>QtQml.QJSEngine</code></p> Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>class JSEngine(JSEngineMixin, QtQml.QJSEngine):\npass\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.JSEngineMixin","title":"<code>JSEngineMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>class JSEngineMixin(core.ObjectMixin):\ndef serialize_fields(self):\nreturn dict(ui_language=self.uiLanguage())\ndef install_extensions(self, extension: str, obj: QtQml.QJSValue | None = None):\nif obj is None:\nobj = QtQml.QJSValue()\nself.installExtensions(EXTENSIONS[extension], obj)\ndef new_array(self, length: int = 0) -&gt; qml.JSValue:\nreturn qml.JSValue(self.newArray(length))\ndef eval(self, program: str) -&gt; qml.JSValue:\nresult = self.evaluate(program)\nreturn qml.JSValue(result)  # type: ignore\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsengine.JSEngineMixin.eval","title":"<code>eval(program: str) -&gt; qml.JSValue</code>","text":"Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>def eval(self, program: str) -&gt; qml.JSValue:\nresult = self.evaluate(program)\nreturn qml.JSValue(result)  # type: ignore\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsengine.JSEngineMixin.install_extensions","title":"<code>install_extensions(extension: str, obj: QtQml.QJSValue | None = None)</code>","text":"Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>def install_extensions(self, extension: str, obj: QtQml.QJSValue | None = None):\nif obj is None:\nobj = QtQml.QJSValue()\nself.installExtensions(EXTENSIONS[extension], obj)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsengine.JSEngineMixin.new_array","title":"<code>new_array(length: int = 0) -&gt; qml.JSValue</code>","text":"Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>def new_array(self, length: int = 0) -&gt; qml.JSValue:\nreturn qml.JSValue(self.newArray(length))\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsengine.JSEngineMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>def serialize_fields(self):\nreturn dict(ui_language=self.uiLanguage())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.JSValue","title":"<code>JSValue</code>","text":"<p>         Bases: <code>QtQml.QJSValue</code></p> Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>class JSValue(QtQml.QJSValue):\ndef __repr__(self):\nreturn get_repr(self, self.toVariant())\ndef __len__(self):\nreturn self.property(\"length\").toVariant()\ndef __getitem__(self, index: int | str):\nreturn self.property(index).toVariant()\ndef __delitem__(self, index: str):\nself.deleteProperty(index)\ndef __setitem__(self, index: int | str, value):\nself.setProperty(index, value)\ndef __iter__(self):\niterator = qml.JSValueIterator(self)\nreturn iter(list(iterator))\ndef __contains__(self, index: str):\nreturn self.hasProperty(index)\ndef __call__(self, *args) -&gt; JSValue:\nresult = self.call(args)\nreturn JSValue(result)\ndef get_value(self):\nreturn self.toVariant()\ndef get_error_type(self) -&gt; ErrorTypeStr | None:\nif (error_type := self.errorType()) == QtQml.QJSValue.ErrorType(0):\nreturn None\nelse:\nreturn ERROR_TYPES.inverse[error_type]\n@classmethod\ndef from_object(cls, obj, jsengine: QtQml.QJSEngine) -&gt; Self:\n\"\"\"Convert any python object into a QJSValue (must happen in GUI thread).\"\"\"\nmatch obj:\ncase None:\nreturn cls()\ncase list() | tuple():\nlength = len(obj)\narray = JSValue(jsengine.newArray(length))\nfor i, v in enumerate(obj):\narray.setProperty(i, cls.from_object(v, jsengine))\nreturn array\ncase dict():\narray = JSValue(jsengine.newArray())\nfor k, v in obj.items():\narray.setProperty(k, cls.from_object(v, jsengine))\nreturn array\ncase _:\ntry:\nreturn cls(obj)\nexcept TypeError:\nlogger.debug(f\"unknown type: {str(obj)}\")\nreturn cls()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__call__","title":"<code>__call__(*args) -&gt; JSValue</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __call__(self, *args) -&gt; JSValue:\nresult = self.call(args)\nreturn JSValue(result)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__contains__","title":"<code>__contains__(index: str)</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __contains__(self, index: str):\nreturn self.hasProperty(index)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __delitem__(self, index: str):\nself.deleteProperty(index)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__getitem__","title":"<code>__getitem__(index: int | str)</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __getitem__(self, index: int | str):\nreturn self.property(index).toVariant()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __iter__(self):\niterator = qml.JSValueIterator(self)\nreturn iter(list(iterator))\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __len__(self):\nreturn self.property(\"length\").toVariant()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toVariant())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.__setitem__","title":"<code>__setitem__(index: int | str, value: int | str)</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def __setitem__(self, index: int | str, value):\nself.setProperty(index, value)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.from_object","title":"<code>from_object(obj, jsengine: QtQml.QJSEngine) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert any python object into a QJSValue (must happen in GUI thread).</p> Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>@classmethod\ndef from_object(cls, obj, jsengine: QtQml.QJSEngine) -&gt; Self:\n\"\"\"Convert any python object into a QJSValue (must happen in GUI thread).\"\"\"\nmatch obj:\ncase None:\nreturn cls()\ncase list() | tuple():\nlength = len(obj)\narray = JSValue(jsengine.newArray(length))\nfor i, v in enumerate(obj):\narray.setProperty(i, cls.from_object(v, jsengine))\nreturn array\ncase dict():\narray = JSValue(jsengine.newArray())\nfor k, v in obj.items():\narray.setProperty(k, cls.from_object(v, jsengine))\nreturn array\ncase _:\ntry:\nreturn cls(obj)\nexcept TypeError:\nlogger.debug(f\"unknown type: {str(obj)}\")\nreturn cls()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.get_error_type","title":"<code>get_error_type() -&gt; ErrorTypeStr | None</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def get_error_type(self) -&gt; ErrorTypeStr | None:\nif (error_type := self.errorType()) == QtQml.QJSValue.ErrorType(0):\nreturn None\nelse:\nreturn ERROR_TYPES.inverse[error_type]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalue.JSValue.get_value","title":"<code>get_value()</code>","text":"Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>def get_value(self):\nreturn self.toVariant()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.JSValueIterator","title":"<code>JSValueIterator</code>","text":"<p>         Bases: <code>QtQml.QJSValueIterator</code></p> Source code in <code>prettyqt\\qml\\jsvalueiterator.py</code> <pre><code>class JSValueIterator(QtQml.QJSValueIterator):\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.next():\nreturn (self.name(), self.value().toVariant())\nraise StopIteration\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalueiterator.JSValueIterator.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\qml\\jsvalueiterator.py</code> <pre><code>def __iter__(self):\nreturn self\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.jsvalueiterator.JSValueIterator.__next__","title":"<code>__next__()</code>","text":"Source code in <code>prettyqt\\qml\\jsvalueiterator.py</code> <pre><code>def __next__(self):\nif self.next():\nreturn (self.name(), self.value().toVariant())\nraise StopIteration\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlApplicationEngine","title":"<code>QmlApplicationEngine</code>","text":"<p>         Bases: <code>qml.QmlEngineMixin</code>, <code>QtQml.QQmlApplicationEngine</code></p> Source code in <code>prettyqt\\qml\\qmlapplicationengine.py</code> <pre><code>class QmlApplicationEngine(qml.QmlEngineMixin, QtQml.QQmlApplicationEngine):\ndef __iter__(self) -&gt; Iterator[QtCore.QObject]:\nreturn iter(self.rootObjects())\ndef load_data(\nself,\ndata: datatypes.ByteArrayType,\nurl: datatypes.UrlType | None = None,\n):\nif isinstance(data, str):\ndata = data.encode()\nif isinstance(data, bytes):\ndata = QtCore.QByteArray(data)\nif isinstance(url, str):\nurl = core.Url.from_user_input(url)\nelif url is None:\nurl = core.Url()\nself.loadData(data, url)\ndef load_file(self, file: datatypes.UrlType | datatypes.PathType):\nif isinstance(file, os.PathLike):\nfile = os.fspath(file)\nself.load(file)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlapplicationengine.QmlApplicationEngine.__iter__","title":"<code>__iter__() -&gt; Iterator[QtCore.QObject]</code>","text":"Source code in <code>prettyqt\\qml\\qmlapplicationengine.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtCore.QObject]:\nreturn iter(self.rootObjects())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlapplicationengine.QmlApplicationEngine.load_data","title":"<code>load_data(data: datatypes.ByteArrayType, url: datatypes.UrlType | None = None)</code>","text":"Source code in <code>prettyqt\\qml\\qmlapplicationengine.py</code> <pre><code>def load_data(\nself,\ndata: datatypes.ByteArrayType,\nurl: datatypes.UrlType | None = None,\n):\nif isinstance(data, str):\ndata = data.encode()\nif isinstance(data, bytes):\ndata = QtCore.QByteArray(data)\nif isinstance(url, str):\nurl = core.Url.from_user_input(url)\nelif url is None:\nurl = core.Url()\nself.loadData(data, url)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlapplicationengine.QmlApplicationEngine.load_file","title":"<code>load_file(file: datatypes.UrlType | datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\qml\\qmlapplicationengine.py</code> <pre><code>def load_file(self, file: datatypes.UrlType | datatypes.PathType):\nif isinstance(file, os.PathLike):\nfile = os.fspath(file)\nself.load(file)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlComponent","title":"<code>QmlComponent</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtQml.QQmlComponent</code></p> Source code in <code>prettyqt\\qml\\qmlcomponent.py</code> <pre><code>class QmlComponent(core.ObjectMixin, QtQml.QQmlComponent):\ndef get_status(self) -&gt; str:\nreturn STATUS.inverse[self.status()]\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef load_url(self, url: datatypes.UrlType, mode: str):\nif isinstance(url, str):\nurl = core.Url.from_user_input(url)\nself.loadUrl(url, COMPILATION_MODES[mode])\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlcomponent.QmlComponent.get_status","title":"<code>get_status() -&gt; str</code>","text":"Source code in <code>prettyqt\\qml\\qmlcomponent.py</code> <pre><code>def get_status(self) -&gt; str:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlcomponent.QmlComponent.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qml\\qmlcomponent.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlcomponent.QmlComponent.load_url","title":"<code>load_url(url: datatypes.UrlType, mode: str)</code>","text":"Source code in <code>prettyqt\\qml\\qmlcomponent.py</code> <pre><code>def load_url(self, url: datatypes.UrlType, mode: str):\nif isinstance(url, str):\nurl = core.Url.from_user_input(url)\nself.loadUrl(url, COMPILATION_MODES[mode])\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlEngine","title":"<code>QmlEngine</code>","text":"<p>         Bases: <code>QmlEngineMixin</code>, <code>QtQml.QQmlEngine</code></p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>class QmlEngine(QmlEngineMixin, QtQml.QQmlEngine):\npass\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlEngineMixin","title":"<code>QmlEngineMixin</code>","text":"<p>         Bases: <code>qml.JSEngineMixin</code></p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>class QmlEngineMixin(qml.JSEngineMixin):\ndef set_object_ownership(self, obj: QtCore.QObject, mode: ObjectOwnershipStr):\n\"\"\"Set the object ownership.\n        Args:\n            obj: object to set ownership for\n            mode: object ownership to use\n        Raises:\n            InvalidParamError: invalid object ownership\n        \"\"\"\nif mode not in OBJECT_OWNERSHIP:\nraise InvalidParamError(mode, OBJECT_OWNERSHIP)\nself.setObjectOwnership(obj, OBJECT_OWNERSHIP[mode])\ndef get_object_ownership(self, obj: QtCore.QObject) -&gt; ObjectOwnershipStr:\n\"\"\"Return object ownership.\n        Returns:\n            object ownership\n        \"\"\"\nreturn OBJECT_OWNERSHIP.inverse[self.objectOwnership(obj)]\ndef add_import_path(self, path: datatypes.PathType):\nself.addImportPath(os.fspath(path))\ndef add_plugin_path(self, path: datatypes.PathType):\nself.addPluginPath(os.fspath(path))\ndef get_plugin_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.pluginPathList()]\ndef get_import_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.importPathList()]\ndef set_base_url(self, url: str | QtCore.QUrl):\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nself.setBaseUrl(url)\ndef get_base_url(self) -&gt; core.Url:\nreturn core.Url(self.baseUrl())\ndef set_offline_storage_path(self, path: datatypes.PathType):\nself.setOfflineStoragePath(os.fspath(path))\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.add_import_path","title":"<code>add_import_path(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def add_import_path(self, path: datatypes.PathType):\nself.addImportPath(os.fspath(path))\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.add_plugin_path","title":"<code>add_plugin_path(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def add_plugin_path(self, path: datatypes.PathType):\nself.addPluginPath(os.fspath(path))\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.get_base_url","title":"<code>get_base_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def get_base_url(self) -&gt; core.Url:\nreturn core.Url(self.baseUrl())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.get_import_paths","title":"<code>get_import_paths() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def get_import_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.importPathList()]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.get_object_ownership","title":"<code>get_object_ownership(obj: QtCore.QObject) -&gt; ObjectOwnershipStr</code>","text":"<p>Return object ownership.</p> <p>Returns:</p> Type Description <code>ObjectOwnershipStr</code> <p>object ownership</p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def get_object_ownership(self, obj: QtCore.QObject) -&gt; ObjectOwnershipStr:\n\"\"\"Return object ownership.\n    Returns:\n        object ownership\n    \"\"\"\nreturn OBJECT_OWNERSHIP.inverse[self.objectOwnership(obj)]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.get_plugin_paths","title":"<code>get_plugin_paths() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def get_plugin_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.pluginPathList()]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.set_base_url","title":"<code>set_base_url(url: str | QtCore.QUrl)</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def set_base_url(self, url: str | QtCore.QUrl):\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nself.setBaseUrl(url)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.set_object_ownership","title":"<code>set_object_ownership(obj: QtCore.QObject, mode: ObjectOwnershipStr)</code>","text":"<p>Set the object ownership.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>QtCore.QObject</code> <p>object to set ownership for</p> required <code>mode</code> <code>ObjectOwnershipStr</code> <p>object ownership to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid object ownership</p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def set_object_ownership(self, obj: QtCore.QObject, mode: ObjectOwnershipStr):\n\"\"\"Set the object ownership.\n    Args:\n        obj: object to set ownership for\n        mode: object ownership to use\n    Raises:\n        InvalidParamError: invalid object ownership\n    \"\"\"\nif mode not in OBJECT_OWNERSHIP:\nraise InvalidParamError(mode, OBJECT_OWNERSHIP)\nself.setObjectOwnership(obj, OBJECT_OWNERSHIP[mode])\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlengine.QmlEngineMixin.set_offline_storage_path","title":"<code>set_offline_storage_path(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def set_offline_storage_path(self, path: datatypes.PathType):\nself.setOfflineStoragePath(os.fspath(path))\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlError","title":"<code>QmlError</code>","text":"<p>         Bases: <code>QtQml.QQmlError</code></p> Source code in <code>prettyqt\\qml\\qmlerror.py</code> <pre><code>class QmlError(QtQml.QQmlError):\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_property(self) -&gt; core.MetaProperty:\nreturn core.MetaProperty(self.property())\ndef __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlerror.QmlError.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\qml\\qmlerror.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toString())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlerror.QmlError.__str__","title":"<code>__str__()</code>","text":"Source code in <code>prettyqt\\qml\\qmlerror.py</code> <pre><code>def __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlerror.QmlError.get_property","title":"<code>get_property() -&gt; core.MetaProperty</code>","text":"Source code in <code>prettyqt\\qml\\qmlerror.py</code> <pre><code>def get_property(self) -&gt; core.MetaProperty:\nreturn core.MetaProperty(self.property())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlerror.QmlError.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qml\\qmlerror.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlExpression","title":"<code>QmlExpression</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtQml.QQmlExpression</code></p> Source code in <code>prettyqt\\qml\\qmlexpression.py</code> <pre><code>class QmlExpression(core.ObjectMixin, QtQml.QQmlExpression):\ndef get_source_file(self) -&gt; pathlib.Path | None:\nreturn pathlib.Path(source) if (source := self.sourceFile()) else None\ndef get_error(self) -&gt; qml.QmlError:\nreturn qml.QmlError(self.error())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlexpression.QmlExpression.get_error","title":"<code>get_error() -&gt; qml.QmlError</code>","text":"Source code in <code>prettyqt\\qml\\qmlexpression.py</code> <pre><code>def get_error(self) -&gt; qml.QmlError:\nreturn qml.QmlError(self.error())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlexpression.QmlExpression.get_source_file","title":"<code>get_source_file() -&gt; pathlib.Path | None</code>","text":"Source code in <code>prettyqt\\qml\\qmlexpression.py</code> <pre><code>def get_source_file(self) -&gt; pathlib.Path | None:\nreturn pathlib.Path(source) if (source := self.sourceFile()) else None\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlImageProviderBase","title":"<code>QmlImageProviderBase</code>","text":"<p>         Bases: <code>QmlImageProviderBaseMixin</code>, <code>QtQml.QQmlImageProviderBase</code></p> Source code in <code>prettyqt\\qml\\qmlimageproviderbase.py</code> <pre><code>class QmlImageProviderBase(QmlImageProviderBaseMixin, QtQml.QQmlImageProviderBase):\npass\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlImageProviderBaseMixin","title":"<code>QmlImageProviderBaseMixin</code>","text":"Source code in <code>prettyqt\\qml\\qmlimageproviderbase.py</code> <pre><code>class QmlImageProviderBaseMixin:\npass\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlParserStatus","title":"<code>QmlParserStatus</code>","text":"<p>         Bases: <code>QmlParserStatusMixin</code>, <code>QtQml.QQmlParserStatus</code></p> Source code in <code>prettyqt\\qml\\qmlparserstatus.py</code> <pre><code>class QmlParserStatus(QmlParserStatusMixin, QtQml.QQmlParserStatus):\npass\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlParserStatusMixin","title":"<code>QmlParserStatusMixin</code>","text":"Source code in <code>prettyqt\\qml\\qmlparserstatus.py</code> <pre><code>class QmlParserStatusMixin:\npass\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlProperty","title":"<code>QmlProperty</code>","text":"<p>         Bases: <code>QtQml.QQmlProperty</code></p> Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>class QmlProperty(QtQml.QQmlProperty):\ndef __repr__(self):\nreturn get_repr(self, self.object())\ndef get_method(self) -&gt; core.MetaMethod:\nreturn core.MetaMethod(self.method())\ndef get_property(self) -&gt; core.MetaProperty:\nreturn core.MetaProperty(self.property())\ndef get_property_type_category(self) -&gt; PropertyTypeCategoryStr:\nreturn PROPERTY_TYPE_CATEGORY.inverse[self.propertyTypeCategory()]\ndef get_type(self) -&gt; TypeStr:\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlproperty.QmlProperty.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.object())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlproperty.QmlProperty.get_method","title":"<code>get_method() -&gt; core.MetaMethod</code>","text":"Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>def get_method(self) -&gt; core.MetaMethod:\nreturn core.MetaMethod(self.method())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlproperty.QmlProperty.get_property","title":"<code>get_property() -&gt; core.MetaProperty</code>","text":"Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>def get_property(self) -&gt; core.MetaProperty:\nreturn core.MetaProperty(self.property())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlproperty.QmlProperty.get_property_type_category","title":"<code>get_property_type_category() -&gt; PropertyTypeCategoryStr</code>","text":"Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>def get_property_type_category(self) -&gt; PropertyTypeCategoryStr:\nreturn PROPERTY_TYPE_CATEGORY.inverse[self.propertyTypeCategory()]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlproperty.QmlProperty.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.QmlPropertyMap","title":"<code>QmlPropertyMap</code>","text":"<p>         Bases: <code>QmlPropertyMapMixin</code>, <code>QtQml.QQmlPropertyMap</code></p> Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>class QmlPropertyMap(QmlPropertyMapMixin, QtQml.QQmlPropertyMap):\ndef __repr__(self):\nreturn get_repr(self, self.as_dict())\ndef __setitem__(self, key: str, value: datatypes.Variant):\nself.insert(key, value)\ndef __getitem__(self, key: str) -&gt; datatypes.Variant:\nreturn self.value(key)\ndef __delitem__(self, key: str):\nself.clear(key)\ndef __contains__(self, key):\nreturn self.contains(key)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __iter__(self):\nreturn iter(self.as_dict())\ndef items(self):\nreturn self.as_dict().items()\ndef as_dict(self) -&gt; dict[str, datatypes.Variant]:\nreturn {i: self.value(i) for i in self.keys()}\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__contains__","title":"<code>__contains__(key)</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __contains__(self, key):\nreturn self.contains(key)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__delitem__","title":"<code>__delitem__(key: str)</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __delitem__(self, key: str):\nself.clear(key)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__getitem__","title":"<code>__getitem__(key: str) -&gt; datatypes.Variant</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __getitem__(self, key: str) -&gt; datatypes.Variant:\nreturn self.value(key)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __iter__(self):\nreturn iter(self.as_dict())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.as_dict())\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.__setitem__","title":"<code>__setitem__(key: str, value: datatypes.Variant)</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def __setitem__(self, key: str, value: datatypes.Variant):\nself.insert(key, value)\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.as_dict","title":"<code>as_dict() -&gt; dict[str, datatypes.Variant]</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def as_dict(self) -&gt; dict[str, datatypes.Variant]:\nreturn {i: self.value(i) for i in self.keys()}\n</code></pre>"},{"location":"api/qml.html#prettyqt.qml.qmlpropertymap.QmlPropertyMap.items","title":"<code>items()</code>","text":"Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>def items(self):\nreturn self.as_dict().items()\n</code></pre>"},{"location":"api/qthelp.html","title":"qthelp module","text":"<p>qthelp module.</p> <p>contains QtHelp-based classes</p>"},{"location":"api/qthelp.html#prettyqt.qthelp.__all__","title":"<code>__all__ = ['HelpLink', 'HelpIndexModel', 'HelpFilterData', 'HelpContentItem', 'HelpSearchResult', 'HelpContentModel', 'HelpContentWidget', 'HelpIndexWidget', 'HelpSearchEngine', 'HelpSearchResultWidget', 'HelpSearchQueryWidget', 'HelpFilterSettingsWidget', 'HelpFilterEngine', 'HelpEngineCore', 'HelpEngineCoreMixin', 'HelpEngine']</code>  <code>module-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.HelpContentItem","title":"<code>HelpContentItem</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentitem.py</code> <pre><code>class HelpContentItem:\ndef __init__(self, item: QtHelp.QHelpContentItem):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __len__(self):\nreturn self.childCount()\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentitem.HelpContentItem.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentitem.HelpContentItem.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentitem.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentitem.HelpContentItem.__init__","title":"<code>__init__(item: QtHelp.QHelpContentItem)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentitem.py</code> <pre><code>def __init__(self, item: QtHelp.QHelpContentItem):\nself.item = item\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentitem.HelpContentItem.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentitem.py</code> <pre><code>def __len__(self):\nreturn self.childCount()\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentitem.HelpContentItem.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentitem.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpContentModel","title":"<code>HelpContentModel</code>","text":"<p>         Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\qthelp\\helpcontentmodel.py</code> <pre><code>class HelpContentModel(core.AbstractItemModelMixin):\ndef __init__(self, item: QtHelp.QHelpContentModel):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_content_item_at(self, index) -&gt; qthelp.HelpContentItem:\nreturn qthelp.HelpContentItem(self.contentItemAt(index))\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentmodel.HelpContentModel.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentmodel.HelpContentModel.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentmodel.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentmodel.HelpContentModel.__init__","title":"<code>__init__(item: QtHelp.QHelpContentModel)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentmodel.py</code> <pre><code>def __init__(self, item: QtHelp.QHelpContentModel):\nself.item = item\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentmodel.HelpContentModel.get_content_item_at","title":"<code>get_content_item_at(index) -&gt; qthelp.HelpContentItem</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentmodel.py</code> <pre><code>def get_content_item_at(self, index) -&gt; qthelp.HelpContentItem:\nreturn qthelp.HelpContentItem(self.contentItemAt(index))\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpContentWidget","title":"<code>HelpContentWidget</code>","text":"<p>         Bases: <code>widgets.TreeViewMixin</code>, <code>QtHelp.QHelpContentWidget</code></p> Source code in <code>prettyqt\\qthelp\\helpcontentwidget.py</code> <pre><code>class HelpContentWidget(widgets.TreeViewMixin, QtHelp.QHelpContentWidget):\ndef index_of(self, url: datatypes.UrlType) -&gt; QtCore.QModelIndex | None:\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nidx = self.indexOf(url)\nreturn idx if idx.isValid() else None\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpcontentwidget.HelpContentWidget.index_of","title":"<code>index_of(url: datatypes.UrlType) -&gt; QtCore.QModelIndex | None</code>","text":"Source code in <code>prettyqt\\qthelp\\helpcontentwidget.py</code> <pre><code>def index_of(self, url: datatypes.UrlType) -&gt; QtCore.QModelIndex | None:\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nidx = self.indexOf(url)\nreturn idx if idx.isValid() else None\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpEngine","title":"<code>HelpEngine</code>","text":"<p>         Bases: <code>qthelp.HelpEngineCoreMixin</code>, <code>QtHelp.QHelpEngine</code></p> Source code in <code>prettyqt\\qthelp\\helpengine.py</code> <pre><code>class HelpEngine(qthelp.HelpEngineCoreMixin, QtHelp.QHelpEngine):\ndef get_content_model(self) -&gt; qthelp.HelpContentModel:\nreturn qthelp.HelpContentModel(self.contentModel())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpengine.HelpEngine.get_content_model","title":"<code>get_content_model() -&gt; qthelp.HelpContentModel</code>","text":"Source code in <code>prettyqt\\qthelp\\helpengine.py</code> <pre><code>def get_content_model(self) -&gt; qthelp.HelpContentModel:\nreturn qthelp.HelpContentModel(self.contentModel())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpEngineCore","title":"<code>HelpEngineCore</code>","text":"<p>         Bases: <code>HelpEngineCoreMixin</code>, <code>QtHelp.QHelpEngineCore</code></p> Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>class HelpEngineCore(HelpEngineCoreMixin, QtHelp.QHelpEngineCore):\npass\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpEngineCoreMixin","title":"<code>HelpEngineCoreMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>class HelpEngineCoreMixin(core.ObjectMixin):\ndef get_file_data(self, url: QtCore.QUrl) -&gt; bytes:\nreturn self.fileData(url).data()\ndef get_files(\nself,\nnamespace_name: str,\nfilter_name: str,\nextension_filter: str | None = None,\n) -&gt; list[core.Url]:\nif extension_filter is None:\nextension_filter = \"\"\nreturn [\ncore.Url(i) for i in self.files(namespace_name, filter_name, extension_filter)\n]\ndef find_file(self, url: datatypes.UrlType) -&gt; core.Url:\nif not isinstance(url, QtCore.QUrl):\nurl = QtCore.QUrl(url)\nreturn core.Url(self.findFile(url))\ndef get_filter_engine(self) -&gt; qthelp.HelpFilterEngine:\nreturn qthelp.HelpFilterEngine(self.filterEngine())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpenginecore.HelpEngineCoreMixin.find_file","title":"<code>find_file(url: datatypes.UrlType) -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>def find_file(self, url: datatypes.UrlType) -&gt; core.Url:\nif not isinstance(url, QtCore.QUrl):\nurl = QtCore.QUrl(url)\nreturn core.Url(self.findFile(url))\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpenginecore.HelpEngineCoreMixin.get_file_data","title":"<code>get_file_data(url: QtCore.QUrl) -&gt; bytes</code>","text":"Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>def get_file_data(self, url: QtCore.QUrl) -&gt; bytes:\nreturn self.fileData(url).data()\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpenginecore.HelpEngineCoreMixin.get_files","title":"<code>get_files(namespace_name: str, filter_name: str, extension_filter: str | None = None) -&gt; list[core.Url]</code>","text":"Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>def get_files(\nself,\nnamespace_name: str,\nfilter_name: str,\nextension_filter: str | None = None,\n) -&gt; list[core.Url]:\nif extension_filter is None:\nextension_filter = \"\"\nreturn [\ncore.Url(i) for i in self.files(namespace_name, filter_name, extension_filter)\n]\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpenginecore.HelpEngineCoreMixin.get_filter_engine","title":"<code>get_filter_engine() -&gt; qthelp.HelpFilterEngine</code>","text":"Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>def get_filter_engine(self) -&gt; qthelp.HelpFilterEngine:\nreturn qthelp.HelpFilterEngine(self.filterEngine())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpFilterData","title":"<code>HelpFilterData</code>","text":"<p>         Bases: <code>HelpFilterDataMixin</code></p> Source code in <code>prettyqt\\qthelp\\helpfilterdata.py</code> <pre><code>class HelpFilterData(HelpFilterDataMixin):\ndef __init__(self, item: QtHelp.QHelpFilterData):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterdata.HelpFilterData.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterdata.HelpFilterData.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpfilterdata.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterdata.HelpFilterData.__init__","title":"<code>__init__(item: QtHelp.QHelpFilterData)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpfilterdata.py</code> <pre><code>def __init__(self, item: QtHelp.QHelpFilterData):\nself.item = item\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpFilterEngine","title":"<code>HelpFilterEngine</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\qthelp\\helpfilterengine.py</code> <pre><code>class HelpFilterEngine(core.ObjectMixin):\ndef __init__(self, item: QtHelp.QHelpFilterEngine):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_available_versions(self) -&gt; list[core.VersionNumber]:\nreturn [core.VersionNumber(i) for i in self.availableVersions()]\ndef get_filter_data(self, filter_name: str) -&gt; qthelp.HelpFilterData:\nreturn qthelp.HelpFilterData(self.filterData(filter_name))\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterengine.HelpFilterEngine.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterengine.HelpFilterEngine.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpfilterengine.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterengine.HelpFilterEngine.__init__","title":"<code>__init__(item: QtHelp.QHelpFilterEngine)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpfilterengine.py</code> <pre><code>def __init__(self, item: QtHelp.QHelpFilterEngine):\nself.item = item\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterengine.HelpFilterEngine.get_available_versions","title":"<code>get_available_versions() -&gt; list[core.VersionNumber]</code>","text":"Source code in <code>prettyqt\\qthelp\\helpfilterengine.py</code> <pre><code>def get_available_versions(self) -&gt; list[core.VersionNumber]:\nreturn [core.VersionNumber(i) for i in self.availableVersions()]\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpfilterengine.HelpFilterEngine.get_filter_data","title":"<code>get_filter_data(filter_name: str) -&gt; qthelp.HelpFilterData</code>","text":"Source code in <code>prettyqt\\qthelp\\helpfilterengine.py</code> <pre><code>def get_filter_data(self, filter_name: str) -&gt; qthelp.HelpFilterData:\nreturn qthelp.HelpFilterData(self.filterData(filter_name))\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpFilterSettingsWidget","title":"<code>HelpFilterSettingsWidget</code>","text":"<p>         Bases: <code>widgets.Widget</code>, <code>QtHelp.QHelpFilterSettingsWidget</code></p> Source code in <code>prettyqt\\qthelp\\helpfiltersettingswidget.py</code> <pre><code>class HelpFilterSettingsWidget(widgets.Widget, QtHelp.QHelpFilterSettingsWidget):\npass\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpIndexModel","title":"<code>HelpIndexModel</code>","text":"<p>         Bases: <code>core.StringListModelMixin</code>, <code>QtHelp.QHelpIndexModel</code></p> Source code in <code>prettyqt\\qthelp\\helpindexmodel.py</code> <pre><code>class HelpIndexModel(core.StringListModelMixin, QtHelp.QHelpIndexModel):\npass\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpIndexWidget","title":"<code>HelpIndexWidget</code>","text":"<p>         Bases: <code>widgets.ListViewMixin</code>, <code>QtHelp.QHelpIndexWidget</code></p> Source code in <code>prettyqt\\qthelp\\helpindexwidget.py</code> <pre><code>class HelpIndexWidget(widgets.ListViewMixin, QtHelp.QHelpIndexWidget):\npass\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpLink","title":"<code>HelpLink</code>","text":"Source code in <code>prettyqt\\qthelp\\helplink.py</code> <pre><code>class HelpLink:\ndef __init__(self, item: QtHelp.QHelpLink):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helplink.HelpLink.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.helplink.HelpLink.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\qthelp\\helplink.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helplink.HelpLink.__init__","title":"<code>__init__(item: QtHelp.QHelpLink)</code>","text":"Source code in <code>prettyqt\\qthelp\\helplink.py</code> <pre><code>def __init__(self, item: QtHelp.QHelpLink):\nself.item = item\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helplink.HelpLink.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qthelp\\helplink.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpSearchEngine","title":"<code>HelpSearchEngine</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtHelp.QHelpSearchEngine</code></p> Source code in <code>prettyqt\\qthelp\\helpsearchengine.py</code> <pre><code>class HelpSearchEngine(core.ObjectMixin, QtHelp.QHelpSearchEngine):\ndef search_results(self, start: int, end: int) -&gt; list[qthelp.HelpSearchResult]:\nreturn [qthelp.HelpSearchResult(i) for i in self.searchResults(start, end)]\ndef get_result_widget(self) -&gt; qthelp.HelpSearchResultWidget:\nreturn qthelp.HelpSearchResultWidget(self.resultWidget())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchengine.HelpSearchEngine.get_result_widget","title":"<code>get_result_widget() -&gt; qthelp.HelpSearchResultWidget</code>","text":"Source code in <code>prettyqt\\qthelp\\helpsearchengine.py</code> <pre><code>def get_result_widget(self) -&gt; qthelp.HelpSearchResultWidget:\nreturn qthelp.HelpSearchResultWidget(self.resultWidget())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchengine.HelpSearchEngine.search_results","title":"<code>search_results(start: int, end: int) -&gt; list[qthelp.HelpSearchResult]</code>","text":"Source code in <code>prettyqt\\qthelp\\helpsearchengine.py</code> <pre><code>def search_results(self, start: int, end: int) -&gt; list[qthelp.HelpSearchResult]:\nreturn [qthelp.HelpSearchResult(i) for i in self.searchResults(start, end)]\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpSearchQueryWidget","title":"<code>HelpSearchQueryWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtHelp.QHelpSearchQueryWidget</code></p> Source code in <code>prettyqt\\qthelp\\helpsearchquerywidget.py</code> <pre><code>class HelpSearchQueryWidget(widgets.WidgetMixin, QtHelp.QHelpSearchQueryWidget):\npass\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpSearchResult","title":"<code>HelpSearchResult</code>","text":"<p>         Bases: <code>QtHelp.QHelpSearchResult</code></p> Source code in <code>prettyqt\\qthelp\\helpsearchresult.py</code> <pre><code>class HelpSearchResult(QtHelp.QHelpSearchResult):\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchresult.HelpSearchResult.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qthelp\\helpsearchresult.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.HelpSearchResultWidget","title":"<code>HelpSearchResultWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\qthelp\\helpsearchresultwidget.py</code> <pre><code>class HelpSearchResultWidget(widgets.WidgetMixin):  # , QtHelp.QHelpSearchResultWidget):\ndef __init__(self, item: QtHelp.QHelpFilterData):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_link_at(self, point: datatypes.PointType) -&gt; core.Url:\nif isinstance(point, tuple):\npoint = core.Point(*point)\nreturn core.Url(self.linkAt(point))\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchresultwidget.HelpSearchResultWidget.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchresultwidget.HelpSearchResultWidget.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpsearchresultwidget.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchresultwidget.HelpSearchResultWidget.__init__","title":"<code>__init__(item: QtHelp.QHelpFilterData)</code>","text":"Source code in <code>prettyqt\\qthelp\\helpsearchresultwidget.py</code> <pre><code>def __init__(self, item: QtHelp.QHelpFilterData):\nself.item = item\n</code></pre>"},{"location":"api/qthelp.html#prettyqt.qthelp.helpsearchresultwidget.HelpSearchResultWidget.get_link_at","title":"<code>get_link_at(point: datatypes.PointType) -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\qthelp\\helpsearchresultwidget.py</code> <pre><code>def get_link_at(self, point: datatypes.PointType) -&gt; core.Url:\nif isinstance(point, tuple):\npoint = core.Point(*point)\nreturn core.Url(self.linkAt(point))\n</code></pre>"},{"location":"api/quick.html","title":"quick module","text":"<p>quick module.</p> <p>contains QtQuick-based classes</p>"},{"location":"api/quick.html#prettyqt.quick.__all__","title":"<code>__all__ = ['SGNode', 'QuickView', 'QuickItem', 'QuickItemMixin', 'QuickWindow', 'QuickPaintedItem', 'QuickTextDocument', 'QuickRenderControl', 'QuickImageResponse', 'QuickImageProvider', 'QuickImageProviderMixin', 'QuickAsyncImageProvider', 'QuickItemGrabResult']</code>  <code>module-attribute</code>","text":""},{"location":"api/quick.html#prettyqt.quick.QuickAsyncImageProvider","title":"<code>QuickAsyncImageProvider</code>","text":"<p>         Bases: <code>quick.QuickImageProviderMixin</code>, <code>QtQuick.QQuickAsyncImageProvider</code></p> Source code in <code>prettyqt\\quick\\quickasyncimageprovider.py</code> <pre><code>class QuickAsyncImageProvider(\nquick.QuickImageProviderMixin, QtQuick.QQuickAsyncImageProvider\n):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickImageProvider","title":"<code>QuickImageProvider</code>","text":"<p>         Bases: <code>QuickImageProviderMixin</code>, <code>QtQuick.QQuickImageProvider</code></p> Source code in <code>prettyqt\\quick\\quickimageprovider.py</code> <pre><code>class QuickImageProvider(QuickImageProviderMixin, QtQuick.QQuickImageProvider):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickImageProviderMixin","title":"<code>QuickImageProviderMixin</code>","text":"<p>         Bases: <code>qml.QmlImageProviderBaseMixin</code></p> Source code in <code>prettyqt\\quick\\quickimageprovider.py</code> <pre><code>class QuickImageProviderMixin(qml.QmlImageProviderBaseMixin):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickImageResponse","title":"<code>QuickImageResponse</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtQuick.QQuickImageResponse</code></p> Source code in <code>prettyqt\\quick\\quickimageresponse.py</code> <pre><code>class QuickImageResponse(core.ObjectMixin, QtQuick.QQuickImageResponse):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickItem","title":"<code>QuickItem</code>","text":"<p>         Bases: <code>QuickItemMixin</code>, <code>QtQuick.QQuickItem</code></p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>class QuickItem(QuickItemMixin, QtQuick.QQuickItem):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickItemGrabResult","title":"<code>QuickItemGrabResult</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\quick\\quickitemgrabresult.py</code> <pre><code>class QuickItemGrabResult(core.ObjectMixin):\ndef __init__(self, item: QtQuick.QQuickItemGrabResult):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_image(self) -&gt; gui.Image:\nreturn gui.Image(self.image())\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitemgrabresult.QuickItemGrabResult.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/quick.html#prettyqt.quick.quickitemgrabresult.QuickItemGrabResult.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\quick\\quickitemgrabresult.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitemgrabresult.QuickItemGrabResult.__init__","title":"<code>__init__(item: QtQuick.QQuickItemGrabResult)</code>","text":"Source code in <code>prettyqt\\quick\\quickitemgrabresult.py</code> <pre><code>def __init__(self, item: QtQuick.QQuickItemGrabResult):\nself.item = item\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitemgrabresult.QuickItemGrabResult.get_image","title":"<code>get_image() -&gt; gui.Image</code>","text":"Source code in <code>prettyqt\\quick\\quickitemgrabresult.py</code> <pre><code>def get_image(self) -&gt; gui.Image:\nreturn gui.Image(self.image())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitemgrabresult.QuickItemGrabResult.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\quick\\quickitemgrabresult.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickItemMixin","title":"<code>QuickItemMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>qml.QmlParserStatusMixin</code></p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>class QuickItemMixin(core.ObjectMixin, qml.QmlParserStatusMixin):\ndef __getitem__(self, index: tuple[int, int]) -&gt; QtQuick.QQuickItem:\nreturn self.childAt(*index)\ndef __contains__(self, item: QtCore.QPointF):\nreturn self.contains(item)\ndef get_children_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.childrenRect())\ndef get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\ndef get_flags(self):\npass\ndef set_transform_origin(self, origin: TransformOriginStr):\n\"\"\"Set the origin point around which scale and rotation transform.\n        The default is \"center\".\n        Args:\n            origin: transform origin to use\n        Raises:\n            InvalidParamError: transform origin does not exist\n        \"\"\"\nif origin not in TRANSFORM_ORIGIN:\nraise InvalidParamError(origin, TRANSFORM_ORIGIN)\nself.setTransformOrigin(TRANSFORM_ORIGIN[origin])\ndef get_transform_origin(self) -&gt; TransformOriginStr:\n\"\"\"Return the render type of text-like elements in Qt Quick.\n        Returns:\n            transform origin\n        \"\"\"\nreturn TRANSFORM_ORIGIN.inverse[self.transformOrigin()]\ndef set_size(self, size: QtCore.QSize | QtCore.QSizeF | tuple[float, float]):\nmatch size:\ncase tuple():\nnew_size = QtCore.QSizeF(*size)\ncase QtCore.QSize():\nnew_size = size.toSizeF()\ncase QtCore.QSizeF():\nnew_size = size\nself.setSize(new_size)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.__contains__","title":"<code>__contains__(item: QtCore.QPointF)</code>","text":"Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def __contains__(self, item: QtCore.QPointF):\nreturn self.contains(item)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.__getitem__","title":"<code>__getitem__(index: tuple[int, int]) -&gt; QtQuick.QQuickItem</code>","text":"Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def __getitem__(self, index: tuple[int, int]) -&gt; QtQuick.QQuickItem:\nreturn self.childAt(*index)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.get_children_rect","title":"<code>get_children_rect() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def get_children_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.childrenRect())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.get_cursor","title":"<code>get_cursor() -&gt; gui.Cursor</code>","text":"Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.get_flags","title":"<code>get_flags()</code>","text":"Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def get_flags(self):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.get_transform_origin","title":"<code>get_transform_origin() -&gt; TransformOriginStr</code>","text":"<p>Return the render type of text-like elements in Qt Quick.</p> <p>Returns:</p> Type Description <code>TransformOriginStr</code> <p>transform origin</p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def get_transform_origin(self) -&gt; TransformOriginStr:\n\"\"\"Return the render type of text-like elements in Qt Quick.\n    Returns:\n        transform origin\n    \"\"\"\nreturn TRANSFORM_ORIGIN.inverse[self.transformOrigin()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.set_size","title":"<code>set_size(size: QtCore.QSize | QtCore.QSizeF | tuple[float, float])</code>","text":"Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def set_size(self, size: QtCore.QSize | QtCore.QSizeF | tuple[float, float]):\nmatch size:\ncase tuple():\nnew_size = QtCore.QSizeF(*size)\ncase QtCore.QSize():\nnew_size = size.toSizeF()\ncase QtCore.QSizeF():\nnew_size = size\nself.setSize(new_size)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickitem.QuickItemMixin.set_transform_origin","title":"<code>set_transform_origin(origin: TransformOriginStr)</code>","text":"<p>Set the origin point around which scale and rotation transform.</p> <p>The default is \"center\".</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>TransformOriginStr</code> <p>transform origin to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>transform origin does not exist</p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def set_transform_origin(self, origin: TransformOriginStr):\n\"\"\"Set the origin point around which scale and rotation transform.\n    The default is \"center\".\n    Args:\n        origin: transform origin to use\n    Raises:\n        InvalidParamError: transform origin does not exist\n    \"\"\"\nif origin not in TRANSFORM_ORIGIN:\nraise InvalidParamError(origin, TRANSFORM_ORIGIN)\nself.setTransformOrigin(TRANSFORM_ORIGIN[origin])\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickPaintedItem","title":"<code>QuickPaintedItem</code>","text":"<p>         Bases: <code>quick.QuickItemMixin</code>, <code>QtQuick.QQuickPaintedItem</code></p> Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>class QuickPaintedItem(quick.QuickItemMixin, QtQuick.QQuickPaintedItem):\ndef get_fill_color(self) -&gt; gui.Color:\nreturn gui.Color(self.fillColor())\ndef get_texture_size(self) -&gt; core.Size:\nreturn core.Size(self.textureSize())\ndef set_render_target(self, target: RenderTargetStr):\n\"\"\"Set the render target.\n        Args:\n            target: render target to use\n        Raises:\n            InvalidParamError: render target does not exist\n        \"\"\"\nif target not in RENDER_TARGET:\nraise InvalidParamError(target, RENDER_TARGET)\nself.setRenderTarget(RENDER_TARGET[target])\ndef get_render_target(self) -&gt; RenderTargetStr:\n\"\"\"Return the render target.\n        Returns:\n            render target\n        \"\"\"\nreturn RENDER_TARGET.inverse[self.renderTarget()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.get_fill_color","title":"<code>get_fill_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def get_fill_color(self) -&gt; gui.Color:\nreturn gui.Color(self.fillColor())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.get_render_target","title":"<code>get_render_target() -&gt; RenderTargetStr</code>","text":"<p>Return the render target.</p> <p>Returns:</p> Type Description <code>RenderTargetStr</code> <p>render target</p> Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def get_render_target(self) -&gt; RenderTargetStr:\n\"\"\"Return the render target.\n    Returns:\n        render target\n    \"\"\"\nreturn RENDER_TARGET.inverse[self.renderTarget()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.get_texture_size","title":"<code>get_texture_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def get_texture_size(self) -&gt; core.Size:\nreturn core.Size(self.textureSize())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.set_render_target","title":"<code>set_render_target(target: RenderTargetStr)</code>","text":"<p>Set the render target.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>RenderTargetStr</code> <p>render target to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>render target does not exist</p> Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def set_render_target(self, target: RenderTargetStr):\n\"\"\"Set the render target.\n    Args:\n        target: render target to use\n    Raises:\n        InvalidParamError: render target does not exist\n    \"\"\"\nif target not in RENDER_TARGET:\nraise InvalidParamError(target, RENDER_TARGET)\nself.setRenderTarget(RENDER_TARGET[target])\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickRenderControl","title":"<code>QuickRenderControl</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtQuick.QQuickRenderControl</code></p> Source code in <code>prettyqt\\quick\\quickrendercontrol.py</code> <pre><code>class QuickRenderControl(core.ObjectMixin, QtQuick.QQuickRenderControl):\n@contextlib.contextmanager\ndef edit_frame(self):\nself.beginFrame()\nyield None\nself.endFrame()\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickrendercontrol.QuickRenderControl.edit_frame","title":"<code>edit_frame()</code>","text":"Source code in <code>prettyqt\\quick\\quickrendercontrol.py</code> <pre><code>@contextlib.contextmanager\ndef edit_frame(self):\nself.beginFrame()\nyield None\nself.endFrame()\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickTextDocument","title":"<code>QuickTextDocument</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtQuick.QQuickTextDocument</code></p> Source code in <code>prettyqt\\quick\\quicktextdocument.py</code> <pre><code>class QuickTextDocument(core.ObjectMixin, QtQuick.QQuickTextDocument):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickView","title":"<code>QuickView</code>","text":"<p>         Bases: <code>quick.quickwindow.QuickWindowMixin</code>, <code>QtQuick.QQuickView</code></p> Source code in <code>prettyqt\\quick\\quickview.py</code> <pre><code>class QuickView(quick.quickwindow.QuickWindowMixin, QtQuick.QQuickView):\ndef set_source(self, source: datatypes.UrlType | datatypes.PathType):\nif isinstance(source, os.PathLike):\nsource = os.fspath(source)\nif isinstance(source, str):\nsource = core.Url.fromLocalFile(source)\nself.setSource(source)\ndef get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toLocalFile())\ndef get_status(self) -&gt; StatusStr:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickview.QuickView.get_source","title":"<code>get_source() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\quick\\quickview.py</code> <pre><code>def get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toLocalFile())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickview.QuickView.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"Source code in <code>prettyqt\\quick\\quickview.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.quickview.QuickView.set_source","title":"<code>set_source(source: datatypes.UrlType | datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\quick\\quickview.py</code> <pre><code>def set_source(self, source: datatypes.UrlType | datatypes.PathType):\nif isinstance(source, os.PathLike):\nsource = os.fspath(source)\nif isinstance(source, str):\nsource = core.Url.fromLocalFile(source)\nself.setSource(source)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.QuickWindow","title":"<code>QuickWindow</code>","text":"<p>         Bases: <code>QuickWindowMixin</code>, <code>QtQuick.QQuickWindow</code></p> Source code in <code>prettyqt\\quick\\quickwindow.py</code> <pre><code>class QuickWindow(QuickWindowMixin, QtQuick.QQuickWindow):\npass\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.SGNode","title":"<code>SGNode</code>","text":"<p>         Bases: <code>QtQuick.QSGNode</code></p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>class SGNode(QtQuick.QSGNode):\ndef __getitem__(self, index: int) -&gt; QtQuick.QSGNode:\nreturn self.childAtIndex(index)\ndef __delitem__(self, index: int) -&gt; QtQuick.QSGNode:\nitem = self.childAtIndex(index)\nself.removeChildNode(item)\ndef get_type(self) -&gt; NodeTypeStr:\n\"\"\"Get the type of the node.\n        Returns:\n            Node type\n        \"\"\"\nreturn NODE_TYPE.inverse[self.type()]\ndef get_flags(self) -&gt; list[FlagStr]:\nreturn FLAG.get_list(self.flags())\ndef get_children(self, recursive: bool = False) -&gt; list[SGNode]:\n\"\"\"Get children of this item.\n        recursive option is written iteratively to also support original QTreeWidgetItems.\n        \"\"\"\nif not recursive:\nreturn [self.childAtIndex(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.childAtIndex(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.__delitem__","title":"<code>__delitem__(index: int) -&gt; QtQuick.QSGNode</code>","text":"Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def __delitem__(self, index: int) -&gt; QtQuick.QSGNode:\nitem = self.childAtIndex(index)\nself.removeChildNode(item)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtQuick.QSGNode</code>","text":"Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtQuick.QSGNode:\nreturn self.childAtIndex(index)\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.get_children","title":"<code>get_children(recursive: bool = False) -&gt; list[SGNode]</code>","text":"<p>Get children of this item.</p> <p>recursive option is written iteratively to also support original QTreeWidgetItems.</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_children(self, recursive: bool = False) -&gt; list[SGNode]:\n\"\"\"Get children of this item.\n    recursive option is written iteratively to also support original QTreeWidgetItems.\n    \"\"\"\nif not recursive:\nreturn [self.childAtIndex(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.childAtIndex(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.get_flags","title":"<code>get_flags() -&gt; list[FlagStr]</code>","text":"Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_flags(self) -&gt; list[FlagStr]:\nreturn FLAG.get_list(self.flags())\n</code></pre>"},{"location":"api/quick.html#prettyqt.quick.sgnode.SGNode.get_type","title":"<code>get_type() -&gt; NodeTypeStr</code>","text":"<p>Get the type of the node.</p> <p>Returns:</p> Type Description <code>NodeTypeStr</code> <p>Node type</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_type(self) -&gt; NodeTypeStr:\n\"\"\"Get the type of the node.\n    Returns:\n        Node type\n    \"\"\"\nreturn NODE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"api/quickwidgets.html","title":"quickwidgets module","text":"<p>quick module.</p> <p>contains QtQuickWidgets-based classes</p>"},{"location":"api/quickwidgets.html#prettyqt.quickwidgets.__all__","title":"<code>__all__ = ['QuickWidget']</code>  <code>module-attribute</code>","text":""},{"location":"api/quickwidgets.html#prettyqt.quickwidgets.QuickWidget","title":"<code>QuickWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtQuickWidgets.QQuickWidget</code></p> Source code in <code>prettyqt\\quickwidgets\\quickwidget.py</code> <pre><code>class QuickWidget(widgets.WidgetMixin, QtQuickWidgets.QQuickWidget):\ndef set_source(self, source: datatypes.UrlType | datatypes.PathType):\nif isinstance(source, os.PathLike):\nsource = os.fspath(source)\nif isinstance(source, str):\nsource = core.Url.fromLocalFile(source)\nself.setSource(source)\ndef get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toLocalFile())\ndef get_status(self) -&gt; StatusStr:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/quickwidgets.html#prettyqt.quickwidgets.quickwidget.QuickWidget.get_source","title":"<code>get_source() -&gt; pathlib.Path</code>","text":"Source code in <code>prettyqt\\quickwidgets\\quickwidget.py</code> <pre><code>def get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toLocalFile())\n</code></pre>"},{"location":"api/quickwidgets.html#prettyqt.quickwidgets.quickwidget.QuickWidget.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"Source code in <code>prettyqt\\quickwidgets\\quickwidget.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"api/quickwidgets.html#prettyqt.quickwidgets.quickwidget.QuickWidget.set_source","title":"<code>set_source(source: datatypes.UrlType | datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\quickwidgets\\quickwidget.py</code> <pre><code>def set_source(self, source: datatypes.UrlType | datatypes.PathType):\nif isinstance(source, os.PathLike):\nsource = os.fspath(source)\nif isinstance(source, str):\nsource = core.Url.fromLocalFile(source)\nself.setSource(source)\n</code></pre>"},{"location":"api/svg.html","title":"svg module","text":"<p>svg module.</p> <p>contains QtSvg-based classes</p>"},{"location":"api/svg.html#prettyqt.svg.__all__","title":"<code>__all__ = ['SvgGenerator', 'SvgRenderer']</code>  <code>module-attribute</code>","text":""},{"location":"api/svg.html#prettyqt.svg.SvgGenerator","title":"<code>SvgGenerator</code>","text":"<p>         Bases: <code>gui.PaintDeviceMixin</code>, <code>QtSvg.QSvgGenerator</code></p> Source code in <code>prettyqt\\svg\\svggenerator.py</code> <pre><code>class SvgGenerator(gui.PaintDeviceMixin, QtSvg.QSvgGenerator):\ndef get_viewbox(self) -&gt; core.Rect:\nreturn core.Rect(self.viewBox())\ndef get_viewboxf(self) -&gt; core.RectF:\nreturn core.RectF(self.viewBoxF())\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef set_size(self, size: QtCore.QSize | QtCore.QSizeF | tuple[int, int]):\nmatch size:\ncase tuple():\nnew_size = QtCore.QSize(*size)\ncase QtCore.QSizeF():\nnew_size = size.toSize()\ncase QtCore.QSize():\nnew_size = size\nself.setSize(new_size)\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svggenerator.SvgGenerator.get_size","title":"<code>get_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\svg\\svggenerator.py</code> <pre><code>def get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svggenerator.SvgGenerator.get_viewbox","title":"<code>get_viewbox() -&gt; core.Rect</code>","text":"Source code in <code>prettyqt\\svg\\svggenerator.py</code> <pre><code>def get_viewbox(self) -&gt; core.Rect:\nreturn core.Rect(self.viewBox())\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svggenerator.SvgGenerator.get_viewboxf","title":"<code>get_viewboxf() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\svg\\svggenerator.py</code> <pre><code>def get_viewboxf(self) -&gt; core.RectF:\nreturn core.RectF(self.viewBoxF())\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svggenerator.SvgGenerator.set_size","title":"<code>set_size(size: QtCore.QSize | QtCore.QSizeF | tuple[int, int])</code>","text":"Source code in <code>prettyqt\\svg\\svggenerator.py</code> <pre><code>def set_size(self, size: QtCore.QSize | QtCore.QSizeF | tuple[int, int]):\nmatch size:\ncase tuple():\nnew_size = QtCore.QSize(*size)\ncase QtCore.QSizeF():\nnew_size = size.toSize()\ncase QtCore.QSize():\nnew_size = size\nself.setSize(new_size)\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.SvgRenderer","title":"<code>SvgRenderer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtSvg.QSvgRenderer</code></p> Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>class SvgRenderer(core.ObjectMixin, QtSvg.QSvgRenderer):\ndef load_file(self, path: datatypes.PathType):\nresult = self.load(os.fspath(path))\nif not result:\nraise ValueError(\"invalid path\")\ndef set_aspect_ratio_mode(self, mode: constants.AspectRatioModeStr):\n\"\"\"Set the aspect ratio mode.\n        Args:\n            mode: aspect ratio mode\n        Raises:\n            InvalidParamError: aspect ratio mode does not exist\n        \"\"\"\nif mode not in constants.ASPECT_RATIO_MODE:\nraise InvalidParamError(mode, constants.ASPECT_RATIO_MODE)\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE[mode])\ndef get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n        Returns:\n            aspect ratio mode\n        \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svgrenderer.SvgRenderer.get_aspect_ratio_mode","title":"<code>get_aspect_ratio_mode() -&gt; constants.AspectRatioModeStr</code>","text":"<p>Return current aspect ratio mode.</p> <p>Returns:</p> Type Description <code>constants.AspectRatioModeStr</code> <p>aspect ratio mode</p> Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n    Returns:\n        aspect ratio mode\n    \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svgrenderer.SvgRenderer.load_file","title":"<code>load_file(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def load_file(self, path: datatypes.PathType):\nresult = self.load(os.fspath(path))\nif not result:\nraise ValueError(\"invalid path\")\n</code></pre>"},{"location":"api/svg.html#prettyqt.svg.svgrenderer.SvgRenderer.set_aspect_ratio_mode","title":"<code>set_aspect_ratio_mode(mode: constants.AspectRatioModeStr)</code>","text":"<p>Set the aspect ratio mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.AspectRatioModeStr</code> <p>aspect ratio mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>aspect ratio mode does not exist</p> Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def set_aspect_ratio_mode(self, mode: constants.AspectRatioModeStr):\n\"\"\"Set the aspect ratio mode.\n    Args:\n        mode: aspect ratio mode\n    Raises:\n        InvalidParamError: aspect ratio mode does not exist\n    \"\"\"\nif mode not in constants.ASPECT_RATIO_MODE:\nraise InvalidParamError(mode, constants.ASPECT_RATIO_MODE)\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE[mode])\n</code></pre>"},{"location":"api/syntaxhighlighters.html","title":"syntaxhighlighters module","text":"<p>syntaxhighlighters module.</p> <p>contains some custom syntax highlighers</p>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.__all__","title":"<code>__all__ = ['HighlightRule', 'SelectedWordHighlighter', 'JsonHighlighter', 'YamlHighlighter', 'PythonHighlighter', 'XmlHighlighter', 'RegexMatchHighlighter', 'MarkdownHighlighter', 'PygmentsHighlighter']</code>  <code>module-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.HighlightRule","title":"<code>HighlightRule</code>  <code>dataclass</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\highlightrule.py</code> <pre><code>@dataclass\nclass HighlightRule:\nregex: str | list[str] = \"\"\ncolor: str = \"black\"\nitalic: bool = False\nbold: bool = False\nminimal: bool = False\nfont_size: float | None = None\nnth: int = 0\ncompiled = None\nfmt: gui.TextCharFormat = field(default_factory=gui.TextCharFormat)\ndef __init_subclass__(cls):\nsuper().__init_subclass__()\nif isinstance(cls.regex, str):\ncls.compiled = re.compile(cls.regex)\n# cls.compiled.setMinimal(True)\nelse:\ncls.compiled = [re.compile(r) for r in cls.regex]\ncls.fmt = cls.get_format()\n@classmethod\ndef get_format(cls) -&gt; gui.TextCharFormat:\nfmt = gui.TextCharFormat()\nfmt.setFontItalic(cls.italic)\nfmt.set_foreground_color(cls.color)\nif cls.font_size:\nfmt.setFontPointSize(cls.font_size)\nif cls.bold:\nfmt.set_font_weight(\"bold\")\nreturn fmt\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.bold","title":"<code>bold: bool = False</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.color","title":"<code>color: str = 'black'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.compiled","title":"<code>compiled = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.fmt","title":"<code>fmt: gui.TextCharFormat = field(default_factory=gui.TextCharFormat)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.font_size","title":"<code>font_size: float | None = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.italic","title":"<code>italic: bool = False</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.minimal","title":"<code>minimal: bool = False</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.nth","title":"<code>nth: int = 0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.regex","title":"<code>regex: str | list[str] = ''</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.__init_subclass__","title":"<code>__init_subclass__()</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\highlightrule.py</code> <pre><code>def __init_subclass__(cls):\nsuper().__init_subclass__()\nif isinstance(cls.regex, str):\ncls.compiled = re.compile(cls.regex)\n# cls.compiled.setMinimal(True)\nelse:\ncls.compiled = [re.compile(r) for r in cls.regex]\ncls.fmt = cls.get_format()\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.highlightrule.HighlightRule.get_format","title":"<code>get_format() -&gt; gui.TextCharFormat</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\highlightrule.py</code> <pre><code>@classmethod\ndef get_format(cls) -&gt; gui.TextCharFormat:\nfmt = gui.TextCharFormat()\nfmt.setFontItalic(cls.italic)\nfmt.set_foreground_color(cls.color)\nif cls.font_size:\nfmt.setFontPointSize(cls.font_size)\nif cls.bold:\nfmt.set_font_weight(\"bold\")\nreturn fmt\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.JsonHighlighter","title":"<code>JsonHighlighter</code>","text":"<p>         Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\jsonhighlighter.py</code> <pre><code>class JsonHighlighter(gui.SyntaxHighlighter):\ndef highlightBlock(self, text: str):\n\"\"\"Highlight a block of code using the rules outlined in the Constructor.\"\"\"\nfor m in BRACKETS.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], SYMBOL_FORMAT)\ntext.replace('\\\\\"', \"  \")\nfor m in REGEXP1.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], NAME_FORMAT)\nfor m in REGEXP2.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], VALUE_FORMAT)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.jsonhighlighter.JsonHighlighter.highlightBlock","title":"<code>highlightBlock(text: str)</code>","text":"<p>Highlight a block of code using the rules outlined in the Constructor.</p> Source code in <code>prettyqt\\syntaxhighlighters\\jsonhighlighter.py</code> <pre><code>def highlightBlock(self, text: str):\n\"\"\"Highlight a block of code using the rules outlined in the Constructor.\"\"\"\nfor m in BRACKETS.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], SYMBOL_FORMAT)\ntext.replace('\\\\\"', \"  \")\nfor m in REGEXP1.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], NAME_FORMAT)\nfor m in REGEXP2.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], VALUE_FORMAT)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.MarkdownHighlighter","title":"<code>MarkdownHighlighter</code>","text":"<p>         Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\markdownhighlighter.py</code> <pre><code>class MarkdownHighlighter(gui.SyntaxHighlighter):\nRULES = Rule.__subclasses__()\ndef highlightBlock(self, text: str):\nsuper().highlightBlock(text)\nself.setCurrentBlockState(0)\nself._match_multiline(text, *TRI_SINGLE)\ndef _match_multiline(\nself, text: str, delimiter: core.RegularExpression, style: gui.TextCharFormat\n):\n# If inside triple-single quotes, start at 0\nif self.previousBlockState() == 1:\nstart = 0\nadd = 0\n# Otherwise, look for the delimiter on this line\nelse:\nmatch = delimiter.match(text)\nif not match.hasMatch():\nreturn\nstart = match.capturedStart()\nadd = match.capturedLength()\n# As long as there's a delimiter match on this line...\nwhile start &gt;= 0:\n# Look for the ending delimiter\nmatch = delimiter.match(text, start + add)\nend = match.capturedStart()\n# Ending delimiter on this line?\nif end &gt;= add:\nlength = end + match.capturedLength()\nself.setCurrentBlockState(0)\n# No; multi-line string\nelse:\nself.setCurrentBlockState(1)\nlength = len(text)\nself.setFormat(start, length - start + add, style)\n# Look for the next match\nstart = delimiter.match(text, start + length).capturedStart()\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.markdownhighlighter.MarkdownHighlighter.RULES","title":"<code>RULES = Rule.__subclasses__()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.markdownhighlighter.MarkdownHighlighter.highlightBlock","title":"<code>highlightBlock(text: str)</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\markdownhighlighter.py</code> <pre><code>def highlightBlock(self, text: str):\nsuper().highlightBlock(text)\nself.setCurrentBlockState(0)\nself._match_multiline(text, *TRI_SINGLE)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.PygmentsHighlighter","title":"<code>PygmentsHighlighter</code>","text":"<p>         Bases: <code>gui.SyntaxHighlighter</code></p> <p>Syntax highlighter that uses Pygments for parsing.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>class PygmentsHighlighter(gui.SyntaxHighlighter):\n\"\"\"Syntax highlighter that uses Pygments for parsing.\"\"\"\n# ---------------------------------------------------------------------------\n#  \"QSyntaxHighlighter\" interface\n# ---------------------------------------------------------------------------\ndef __init__(\nself,\nparent: QtGui.QTextDocument,\nlexer: str,\nstyle: None | StyleStr | styles.Style = None,\n):\nsuper().__init__(parent)\nself._document = self.document()\nself._formatter = html.HtmlFormatter(nowrap=True)\nif style is None:\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\nself.set_style(style)\nif lexer == \"regex\":\nself._lexer = lexers.load_lexer_from_file(str(paths.RE_LEXER_PATH))\nelse:\nself._lexer = lexers.get_lexer_by_name(lexer)\ndef __repr__(self):\nreturn get_repr(self, lexer=self._lexer.aliases[0])\ndef highlightBlock(self, string):\n\"\"\"Highlight a block of text.\"\"\"\nif (prev_data := self.currentBlock().previous().userData()) is not None:\nself._lexer._saved_state_stack = prev_data.syntax_stack\nelif hasattr(self._lexer, \"_saved_state_stack\"):\ndel self._lexer._saved_state_stack\n# Lex the text using Pygments\nindex = 0\nfor token, text in self._lexer.get_tokens(string):\nlength = qstring_length(text)\nself.setFormat(index, length, self._get_format(token))\nindex += length\nif hasattr(self._lexer, \"_saved_state_stack\"):\ndata = gui.TextBlockUserData(syntax_stack=self._lexer._saved_state_stack)\nself.currentBlock().setUserData(data)\n# Clean up for the next go-round.\ndel self._lexer._saved_state_stack\n# ---------------------------------------------------------------------------\n# \"PygmentsHighlighter\" interface\n# ---------------------------------------------------------------------------\ndef set_style(self, style: None | StyleStr | styles.Style):\nif style is None:\nself.adjust_style_to_palette()\nreturn\nelif isinstance(style, str):\nstyle = styles.get_style_by_name(style)\nself._style = style\nself._clear_caches()\ndef adjust_style_to_palette(self):\npal = gui.GuiApplication.get_palette()\nstyle = \"monokai\" if pal.is_dark() else \"default\"\nself.set_style(style)\ndef set_style_sheet(self, stylesheet: str):\n\"\"\"Sets a CSS stylesheet.\n        The classes in the stylesheet should correspond to those generated by:\n            pygmentize -S &lt;style&gt; -f html\n        Note that \"set_style\" and \"set_style_sheet\" completely override each\n        other, i.e. they cannot be used in conjunction.\n        \"\"\"\nself._document.setDefaultStyleSheet(stylesheet)\nself._style = None\nself._clear_caches()\n# ---------------------------------------------------------------------------\n# Protected interface\n# ---------------------------------------------------------------------------\ndef _clear_caches(self):\n\"\"\"Clear caches for brushes and formats.\"\"\"\n_get_brush.cache_clear()\nself._get_format.cache_clear()\n@functools.cache  # noqa: B019\ndef _get_format(self, token: str) -&gt; QtGui.QTextCharFormat:\n\"\"\"Returns a QTextCharFormat for token or None.\"\"\"\nif self._style is None:\nreturn self._get_format_from_document(token, self._document)\nelse:\nreturn _get_format_from_style(token, self._style)\ndef _get_format_from_document(\nself, token: str, document: QtGui.QTextDocument\n) -&gt; QtGui.QTextCharFormat:\n\"\"\"Return a QTextCharFormat for token from document.\"\"\"\ncode, html = next(self._formatter._format_lines([(token, \"dummy\")]))\ndocument.setHtml(html)\nreturn gui.TextCursor(document).charFormat()\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.__init__","title":"<code>__init__(parent: QtGui.QTextDocument, lexer: str, style: None | StyleStr | styles.Style = None)</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def __init__(\nself,\nparent: QtGui.QTextDocument,\nlexer: str,\nstyle: None | StyleStr | styles.Style = None,\n):\nsuper().__init__(parent)\nself._document = self.document()\nself._formatter = html.HtmlFormatter(nowrap=True)\nif style is None:\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\nself.set_style(style)\nif lexer == \"regex\":\nself._lexer = lexers.load_lexer_from_file(str(paths.RE_LEXER_PATH))\nelse:\nself._lexer = lexers.get_lexer_by_name(lexer)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, lexer=self._lexer.aliases[0])\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.adjust_style_to_palette","title":"<code>adjust_style_to_palette()</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def adjust_style_to_palette(self):\npal = gui.GuiApplication.get_palette()\nstyle = \"monokai\" if pal.is_dark() else \"default\"\nself.set_style(style)\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.highlightBlock","title":"<code>highlightBlock(string)</code>","text":"<p>Highlight a block of text.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def highlightBlock(self, string):\n\"\"\"Highlight a block of text.\"\"\"\nif (prev_data := self.currentBlock().previous().userData()) is not None:\nself._lexer._saved_state_stack = prev_data.syntax_stack\nelif hasattr(self._lexer, \"_saved_state_stack\"):\ndel self._lexer._saved_state_stack\n# Lex the text using Pygments\nindex = 0\nfor token, text in self._lexer.get_tokens(string):\nlength = qstring_length(text)\nself.setFormat(index, length, self._get_format(token))\nindex += length\nif hasattr(self._lexer, \"_saved_state_stack\"):\ndata = gui.TextBlockUserData(syntax_stack=self._lexer._saved_state_stack)\nself.currentBlock().setUserData(data)\n# Clean up for the next go-round.\ndel self._lexer._saved_state_stack\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.set_style","title":"<code>set_style(style: None | StyleStr | styles.Style)</code>","text":"Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def set_style(self, style: None | StyleStr | styles.Style):\nif style is None:\nself.adjust_style_to_palette()\nreturn\nelif isinstance(style, str):\nstyle = styles.get_style_by_name(style)\nself._style = style\nself._clear_caches()\n</code></pre>"},{"location":"api/syntaxhighlighters.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.set_style_sheet","title":"<code>set_style_sheet(stylesheet: str)</code>","text":"<p>Sets a CSS stylesheet.</p> The classes in the stylesheet should correspond to those generated by <p>pygmentize -S"},{"location":"api/texttospeech.html","title":"texttospeech module","text":"<p>TextToSpeech module.</p> <p>Contains QtTextToSpeech-based classes</p>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.__all__","title":"<code>__all__ = ['Voice', 'TextToSpeech']</code>  <code>module-attribute</code>","text":""},{"location":"api/texttospeech.html#prettyqt.texttospeech.TextToSpeech","title":"<code>TextToSpeech</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtTextToSpeech.QTextToSpeech</code></p> Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>class TextToSpeech(core.ObjectMixin, QtTextToSpeech.QTextToSpeech):\ndef get_state(self) -&gt; StateStr:\nreturn STATE.inverse[self.state()]\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_available_locales(self) -&gt; list[core.Locale]:\nreturn [core.Locale(locale) for locale in self.availableLocales()]\ndef get_voice(self) -&gt; texttospeech.Voice:\nreturn texttospeech.Voice(self.voice())\ndef get_available_voices(self) -&gt; list[texttospeech.Voice]:\nreturn [texttospeech.Voice(voice) for voice in self.availableVoices()]\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.texttospeech.TextToSpeech.get_available_locales","title":"<code>get_available_locales() -&gt; list[core.Locale]</code>","text":"Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>def get_available_locales(self) -&gt; list[core.Locale]:\nreturn [core.Locale(locale) for locale in self.availableLocales()]\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.texttospeech.TextToSpeech.get_available_voices","title":"<code>get_available_voices() -&gt; list[texttospeech.Voice]</code>","text":"Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>def get_available_voices(self) -&gt; list[texttospeech.Voice]:\nreturn [texttospeech.Voice(voice) for voice in self.availableVoices()]\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.texttospeech.TextToSpeech.get_locale","title":"<code>get_locale() -&gt; core.Locale</code>","text":"Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>def get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.texttospeech.TextToSpeech.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>def get_state(self) -&gt; StateStr:\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.texttospeech.TextToSpeech.get_voice","title":"<code>get_voice() -&gt; texttospeech.Voice</code>","text":"Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>def get_voice(self) -&gt; texttospeech.Voice:\nreturn texttospeech.Voice(self.voice())\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.Voice","title":"<code>Voice</code>","text":"<p>         Bases: <code>QtTextToSpeech.QVoice</code></p> Source code in <code>prettyqt\\texttospeech\\voice.py</code> <pre><code>class Voice(QtTextToSpeech.QVoice):\ndef get_age(self) -&gt; AgeStr:\nreturn AGE.inverse[self.age()]\ndef get_gender(self) -&gt; GenderStr:\nreturn GENDER.inverse[self.gender()]\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.voice.Voice.get_age","title":"<code>get_age() -&gt; AgeStr</code>","text":"Source code in <code>prettyqt\\texttospeech\\voice.py</code> <pre><code>def get_age(self) -&gt; AgeStr:\nreturn AGE.inverse[self.age()]\n</code></pre>"},{"location":"api/texttospeech.html#prettyqt.texttospeech.voice.Voice.get_gender","title":"<code>get_gender() -&gt; GenderStr</code>","text":"Source code in <code>prettyqt\\texttospeech\\voice.py</code> <pre><code>def get_gender(self) -&gt; GenderStr:\nreturn GENDER.inverse[self.gender()]\n</code></pre>"},{"location":"api/webenginecore.html","title":"webenginecore module","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineCore-based classes</p>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.__all__","title":"<code>__all__ = ['WebEngineHttpRequest', 'WebEngineUrlScheme', 'WebEngineHistoryItem', 'WebEngineContextMenuRequest', 'WebEngineDownloadRequest', 'WebEngineHistory', 'WebEngineUrlSchemeHandler', 'WebEngineSettings', 'WebEngineScript', 'WebEngineScriptCollection', 'WebEngineProfile', 'WebEnginePage']</code>  <code>module-attribute</code>","text":""},{"location":"api/webenginecore.html#prettyqt.webenginecore.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineContextMenuRequest","title":"<code>WebEngineContextMenuRequest</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineContextMenuRequest</code></p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>class WebEngineContextMenuRequest(QtWebEngineCore.QWebEngineContextMenuRequest):\ndef get_media_url(self) -&gt; core.Url:\nreturn core.Url(self.mediaUrl())\ndef get_link_url(self) -&gt; core.Url:\nreturn core.Url(self.linkUrl())\ndef get_media_type(self) -&gt; MediaTypeStr:\nreturn MEDIA_TYPES.inverse[self.mediaType()]\ndef get_media_flags(self) -&gt; list[MediaFlagStr]:\nreturn MEDIA_FLAGS.get_list(self.mediaFlags())\ndef get_edit_flags(self) -&gt; list[MediaFlagStr]:\nreturn EDIT_FLAGS.get_list(self.editFlags())\ndef can_undo(self) -&gt; bool:\nreturn mod.EditFlag.CanUndo &amp; self.editFlags()\ndef can_redo(self) -&gt; bool:\nreturn mod.EditFlag.CanRedo &amp; self.editFlags()\ndef can_cut(self) -&gt; bool:\nreturn mod.EditFlag.CanCut &amp; self.editFlags()\ndef can_copy(self) -&gt; bool:\nreturn mod.EditFlag.CanCopy &amp; self.editFlags()\ndef can_paste(self) -&gt; bool:\nreturn mod.EditFlag.CanPaste &amp; self.editFlags()\ndef can_delete(self) -&gt; bool:\nreturn mod.EditFlag.CanDelete &amp; self.editFlags()\ndef can_select_all(self) -&gt; bool:\nreturn mod.EditFlag.CanSelectAll &amp; self.editFlags()\ndef can_translate(self) -&gt; bool:\nreturn mod.EditFlag.CanTranslate &amp; self.editFlags()\ndef can_edit_richly(self) -&gt; bool:\nreturn mod.EditFlag.CanEditRichly &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_copy","title":"<code>can_copy() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_copy(self) -&gt; bool:\nreturn mod.EditFlag.CanCopy &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_cut","title":"<code>can_cut() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_cut(self) -&gt; bool:\nreturn mod.EditFlag.CanCut &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_delete","title":"<code>can_delete() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_delete(self) -&gt; bool:\nreturn mod.EditFlag.CanDelete &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_edit_richly","title":"<code>can_edit_richly() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_edit_richly(self) -&gt; bool:\nreturn mod.EditFlag.CanEditRichly &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_paste","title":"<code>can_paste() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_paste(self) -&gt; bool:\nreturn mod.EditFlag.CanPaste &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_redo","title":"<code>can_redo() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_redo(self) -&gt; bool:\nreturn mod.EditFlag.CanRedo &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_select_all","title":"<code>can_select_all() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_select_all(self) -&gt; bool:\nreturn mod.EditFlag.CanSelectAll &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_translate","title":"<code>can_translate() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_translate(self) -&gt; bool:\nreturn mod.EditFlag.CanTranslate &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_undo","title":"<code>can_undo() -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_undo(self) -&gt; bool:\nreturn mod.EditFlag.CanUndo &amp; self.editFlags()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_edit_flags","title":"<code>get_edit_flags() -&gt; list[MediaFlagStr]</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_edit_flags(self) -&gt; list[MediaFlagStr]:\nreturn EDIT_FLAGS.get_list(self.editFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_link_url","title":"<code>get_link_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_link_url(self) -&gt; core.Url:\nreturn core.Url(self.linkUrl())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_flags","title":"<code>get_media_flags() -&gt; list[MediaFlagStr]</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_flags(self) -&gt; list[MediaFlagStr]:\nreturn MEDIA_FLAGS.get_list(self.mediaFlags())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_type","title":"<code>get_media_type() -&gt; MediaTypeStr</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_type(self) -&gt; MediaTypeStr:\nreturn MEDIA_TYPES.inverse[self.mediaType()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_url","title":"<code>get_media_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_url(self) -&gt; core.Url:\nreturn core.Url(self.mediaUrl())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineDownloadRequest","title":"<code>WebEngineDownloadRequest</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>class WebEngineDownloadRequest:\ndef __init__(self, item: QtWebEngineCore.QWebEngineDownloadRequest):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_interrupt_reason(self) -&gt; DownloadInterruptReasonStr:\nreturn DOWNLOAD_INTERRUPT_REASONS.inverse[self.item.interruptReason()]\ndef get_state(self) -&gt; DownloadStateStr:\nreturn DOWNLOAD_STATE.inverse[self.item.state()]\ndef set_save_page_format(self, fmt: SavePageFormatStr):\n\"\"\"Set the save page format.\n        Args:\n            fmt: save page format for the layout\n        Raises:\n            InvalidParamError: save page format does not exist\n        \"\"\"\nif fmt not in SAVE_PAGE_FORMAT:\nraise InvalidParamError(fmt, SAVE_PAGE_FORMAT)\nself.item.setSavePageFormat(SAVE_PAGE_FORMAT[fmt])\ndef get_save_page_format(self) -&gt; SavePageFormatStr:\n\"\"\"Return current save page format.\n        Returns:\n            Save page format\n        \"\"\"\nreturn SAVE_PAGE_FORMAT.inverse[self.item.savePageFormat()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.__init__","title":"<code>__init__(item: QtWebEngineCore.QWebEngineDownloadRequest)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def __init__(self, item: QtWebEngineCore.QWebEngineDownloadRequest):\nself.item = item\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_interrupt_reason","title":"<code>get_interrupt_reason() -&gt; DownloadInterruptReasonStr</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_interrupt_reason(self) -&gt; DownloadInterruptReasonStr:\nreturn DOWNLOAD_INTERRUPT_REASONS.inverse[self.item.interruptReason()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_save_page_format","title":"<code>get_save_page_format() -&gt; SavePageFormatStr</code>","text":"<p>Return current save page format.</p> <p>Returns:</p> Type Description <code>SavePageFormatStr</code> <p>Save page format</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_save_page_format(self) -&gt; SavePageFormatStr:\n\"\"\"Return current save page format.\n    Returns:\n        Save page format\n    \"\"\"\nreturn SAVE_PAGE_FORMAT.inverse[self.item.savePageFormat()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_state","title":"<code>get_state() -&gt; DownloadStateStr</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_state(self) -&gt; DownloadStateStr:\nreturn DOWNLOAD_STATE.inverse[self.item.state()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.set_save_page_format","title":"<code>set_save_page_format(fmt: SavePageFormatStr)</code>","text":"<p>Set the save page format.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>SavePageFormatStr</code> <p>save page format for the layout</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>save page format does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def set_save_page_format(self, fmt: SavePageFormatStr):\n\"\"\"Set the save page format.\n    Args:\n        fmt: save page format for the layout\n    Raises:\n        InvalidParamError: save page format does not exist\n    \"\"\"\nif fmt not in SAVE_PAGE_FORMAT:\nraise InvalidParamError(fmt, SAVE_PAGE_FORMAT)\nself.item.setSavePageFormat(SAVE_PAGE_FORMAT[fmt])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineHistory","title":"<code>WebEngineHistory</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>class WebEngineHistory:\ndef __init__(self, history: QtWebEngineCore.QWebEngineHistory):\nself.history = history\ndef __getattr__(self, val):\nreturn getattr(self.history, val)\ndef __len__(self):\n# pyside2 does not support len(self.history)\nreturn self.history.count()\ndef __getitem__(self, index: int) -&gt; webenginecore.WebEngineHistoryItem:\nitem = self.history.itemAt(index)\nreturn webenginecore.WebEngineHistoryItem(item)\ndef __iter__(self) -&gt; Iterator[webenginecore.WebEngineHistoryItem]:\nitems = [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\nreturn iter(items)\ndef get_items(self) -&gt; list[webenginecore.WebEngineHistoryItem]:\nreturn [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.history","title":"<code>history = history</code>  <code>instance-attribute</code>","text":""},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.history, val)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.__getitem__","title":"<code>__getitem__(index: int) -&gt; webenginecore.WebEngineHistoryItem</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def __getitem__(self, index: int) -&gt; webenginecore.WebEngineHistoryItem:\nitem = self.history.itemAt(index)\nreturn webenginecore.WebEngineHistoryItem(item)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.__init__","title":"<code>__init__(history: QtWebEngineCore.QWebEngineHistory)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def __init__(self, history: QtWebEngineCore.QWebEngineHistory):\nself.history = history\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.__iter__","title":"<code>__iter__() -&gt; Iterator[webenginecore.WebEngineHistoryItem]</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def __iter__(self) -&gt; Iterator[webenginecore.WebEngineHistoryItem]:\nitems = [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\nreturn iter(items)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def __len__(self):\n# pyside2 does not support len(self.history)\nreturn self.history.count()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.get_items","title":"<code>get_items() -&gt; list[webenginecore.WebEngineHistoryItem]</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def get_items(self) -&gt; list[webenginecore.WebEngineHistoryItem]:\nreturn [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineHistoryItem","title":"<code>WebEngineHistoryItem</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineHistoryItem</code></p> Source code in <code>prettyqt\\webenginecore\\webenginehistoryitem.py</code> <pre><code>class WebEngineHistoryItem(QtWebEngineCore.QWebEngineHistoryItem):\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_icon_url(self) -&gt; core.Url:\nreturn core.Url(self.iconUrl())\ndef get_last_visited(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastVisited())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistoryitem.WebEngineHistoryItem.get_icon_url","title":"<code>get_icon_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistoryitem.py</code> <pre><code>def get_icon_url(self) -&gt; core.Url:\nreturn core.Url(self.iconUrl())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistoryitem.WebEngineHistoryItem.get_last_visited","title":"<code>get_last_visited() -&gt; core.DateTime</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistoryitem.py</code> <pre><code>def get_last_visited(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastVisited())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehistoryitem.WebEngineHistoryItem.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistoryitem.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineHttpRequest","title":"<code>WebEngineHttpRequest</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineHttpRequest</code></p> Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>class WebEngineHttpRequest(QtWebEngineCore.QWebEngineHttpRequest):\ndef __repr__(self):\nreturn f\"{type(self).__name__}({self.get_url()})\"\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setHeader(QtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode()))\ndef get_headers(self) -&gt; dict[str, str]:\nreturn {h.data().decode(): self.header(h).data().decode() for h in self.headers()}\ndef set_url(self, url: datatypes.UrlType):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_post_data(self) -&gt; str:\nreturn self.postData().data().decode()\ndef set_method(self, method: MethodStr):\n\"\"\"Set method this WebEngine request is using.\n        Args:\n            method: method\n        Raises:\n            InvalidParamError: method does not exist\n        \"\"\"\nif method not in METHODS:\nraise InvalidParamError(method, METHODS)\nself.setMethod(METHODS[method])\ndef get_method(self) -&gt; MethodStr:\n\"\"\"Get the method this WebEngine request is using.\n        Returns:\n            method\n        \"\"\"\nreturn METHODS.inverse[self.method()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}({self.get_url()})\"\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.get_headers","title":"<code>get_headers() -&gt; dict[str, str]</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def get_headers(self) -&gt; dict[str, str]:\nreturn {h.data().decode(): self.header(h).data().decode() for h in self.headers()}\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.get_method","title":"<code>get_method() -&gt; MethodStr</code>","text":"<p>Get the method this WebEngine request is using.</p> <p>Returns:</p> Type Description <code>MethodStr</code> <p>method</p> Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def get_method(self) -&gt; MethodStr:\n\"\"\"Get the method this WebEngine request is using.\n    Returns:\n        method\n    \"\"\"\nreturn METHODS.inverse[self.method()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.get_post_data","title":"<code>get_post_data() -&gt; str</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def get_post_data(self) -&gt; str:\nreturn self.postData().data().decode()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.set_headers","title":"<code>set_headers(headers: dict[str, str])</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setHeader(QtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode()))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.set_method","title":"<code>set_method(method: MethodStr)</code>","text":"<p>Set method this WebEngine request is using.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>MethodStr</code> <p>method</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>method does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def set_method(self, method: MethodStr):\n\"\"\"Set method this WebEngine request is using.\n    Args:\n        method: method\n    Raises:\n        InvalidParamError: method does not exist\n    \"\"\"\nif method not in METHODS:\nraise InvalidParamError(method, METHODS)\nself.setMethod(METHODS[method])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.set_url","title":"<code>set_url(url: datatypes.UrlType)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def set_url(self, url: datatypes.UrlType):\nurl = core.Url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEnginePage","title":"<code>WebEnginePage</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWebEngineCore.QWebEnginePage</code></p> <p>A web engine page holds the HTML document contents, link history + actions.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>class WebEnginePage(core.ObjectMixin, QtWebEngineCore.QWebEnginePage):\n\"\"\"A web engine page holds the HTML document contents, link history + actions.\"\"\"\ndef serialize_fields(self):\nreturn dict(\naudio_muted=self.isAudioMuted(),\nbackground_color=self.backgroundColor(),\n# has_selection=self.hasSelection(),\nlifecycle_state=self.get_lifecycle_state(),\n# scroll_position=self.scrollPosition(),\nurl=core.Url(self.url()),\nvisible=self.isVisible(),\nhistory=core.DataStream.create_bytearray(self.history()),\nzoom_factor=self.zoomFactor(),\n)\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_url(self, url: datatypes.PathType | datatypes.UrlType):\n\"\"\"Set the url of the WebEnginePage.\n        Clears the Page and loads the URL.\n        Args:\n            url: URL to set\n        \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_icon_url(self) -&gt; core.Url:\nreturn core.Url(self.iconUrl())\ndef get_requested_url(self) -&gt; core.Url:\nreturn core.Url(self.requestedUrl())\ndef get_scroll_position(self) -&gt; core.PointF:\nreturn core.PointF(self.scrollPosition())\ndef get_contents_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.contentsSize())\ndef load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n        Loads the specified url and displays it.\n        Note: The Page remains the same until enough data has arrived\n        to display the new URL.\n        Args:\n            url: URL to load\n        \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.load(url)\ndef set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the Page.\n        Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n        Args:\n            zoom: Zoom factor\n        \"\"\"\nself.setZoomFactor(zoom)\ndef find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n        Finds the specified string, subString, in the page, using the given options.\n        The findTextFinished() signal is emitted when a string search is completed.\n        To clear the search highlight, just pass an empty string.\n        The resultCallback must take a boolean parameter.\n        It will be called with a value of true if the subString was found;\n        otherwise the callback value will be false.\n        Warning: It is guaranteed that the callback is always called,\n        but it might be done during page destruction. When WebEnginePage is deleted,\n        the callback is triggered with an invalid value and it is not safe to use\n        the corresponding QWebEnginePage or QWebEnginePage instance inside it.\n        Args:\n            string: string to search for\n            backward: search backwards\n            case_sensitive: case-sensitive search\n            callback: result callback\n        \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = QtWebEngineCore.QWebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= self.FindFlag.FindCaseSensitively\nif backward:\nflag |= self.FindFlag.FindBackward\nself.findText(string, flag, callback)\ndef set_lifecycle_state(self, state: LifecycleStateStr):\n\"\"\"Set lifecycle state.\n        Args:\n            state: lifecycle state\n        Raises:\n            InvalidParamError: lifecycle state does not exist\n        \"\"\"\nif state not in LIFECYCLE_STATE:\nraise InvalidParamError(state, LIFECYCLE_STATE)\nself.setLifecycleState(LIFECYCLE_STATE[state])\ndef get_lifecycle_state(self) -&gt; LifecycleStateStr:\n\"\"\"Get the current lifecycle state.\n        Returns:\n            lifecycle state\n        \"\"\"\nreturn LIFECYCLE_STATE.inverse[self.lifecycleState()]\ndef trigger_action(self, action: WebActionStr, checked: bool = False):\nself.triggerAction(WEB_ACTION[action], checked)\ndef set_feature_permission(\nself,\nurl: datatypes.UrlType,\nfeature: FeatureStr,\npolicy: PermissionPolicyStr,\n):\nurl = core.Url(url)\nself.setFeaturePermission(url, FEATURE[feature], PERMISSION_POLICY[policy])\ndef get_history(self) -&gt; webenginecore.WebEngineHistory:\nhist = self.history()\nreturn webenginecore.WebEngineHistory(hist)\ndef get_settings(self) -&gt; webenginecore.WebEngineSettings:\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\ndef set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\nself.get_settings()[setting_name] = value\ndef get_setting(\nself, setting_name: webenginecore.webenginesettings.WebAttributeStr\n) -&gt; bool:\nreturn self.get_settings()[setting_name]\ndef get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\ndef open_in_browser(self):\ntry:\nwebbrowser.open(self.getUrl().toString())\nexcept ValueError as e:\nlogger.exception(e)\n# def choose_files(\n#     self,\n#     mode: FileSelectionModeStr,\n#     old_files: List[str],\n#     mimetypes: List[str],\n# ) -&gt; List[str]:\n#     if mode not in FILE_SELECTION_MODE:\n#         raise InvalidParamError(mode, FILE_SELECTION_MODE)\n#     return self.chooseFiles(FILE_SELECTION_MODE[mode], old_files, mimetypes)\ndef mousedown(self, selector: str, btn: int = 0):\n\"\"\"Simulate a mousedown event on the targeted element.\n        :param selector: A CSS3 selector to targeted element.\n        :param btn: The number of mouse button.\n            0 - left button,\n            1 - middle button,\n            2 - right button\n        \"\"\"\nreturn self.runJavaScript(\nf\"\"\"\n            (function () {{\n                var element = document.querySelector({selector!r});\n                var evt = document.createEvent(\"MouseEvents\");\n                evt.initMouseEvent(\"mousedown\", true, true, window,\n                                   1, 1, 1, 1, 1, false, false, false, false,\n{btn!r}, element);\n                return element.dispatchEvent(evt);\n}})();\n        \"\"\"\n)\ndef set_input_value(self, selector: str, value):\n\"\"\"Set the value of the input matched by given selector.\"\"\"\nscript = f'document.querySelector({selector!r}).setAttribute(\"value\", \"{value}\")'\nself.runJavaScript(script)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.find_text","title":"<code>find_text(string: str, backward: bool = False, case_sensitive: bool = False, callback: Callable[[bool], None] | None = None)</code>","text":"<p>Find text in the current page.</p> <p>Finds the specified string, subString, in the page, using the given options. The findTextFinished() signal is emitted when a string search is completed.</p> <p>To clear the search highlight, just pass an empty string.</p> <p>The resultCallback must take a boolean parameter. It will be called with a value of true if the subString was found; otherwise the callback value will be false.</p> <p>Warning: It is guaranteed that the callback is always called, but it might be done during page destruction. When WebEnginePage is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding QWebEnginePage or QWebEnginePage instance inside it.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string to search for</p> required <code>backward</code> <code>bool</code> <p>search backwards</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>case-sensitive search</p> <code>False</code> <code>callback</code> <code>Callable[[bool], None] | None</code> <p>result callback</p> <code>None</code> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n    Finds the specified string, subString, in the page, using the given options.\n    The findTextFinished() signal is emitted when a string search is completed.\n    To clear the search highlight, just pass an empty string.\n    The resultCallback must take a boolean parameter.\n    It will be called with a value of true if the subString was found;\n    otherwise the callback value will be false.\n    Warning: It is guaranteed that the callback is always called,\n    but it might be done during page destruction. When WebEnginePage is deleted,\n    the callback is triggered with an invalid value and it is not safe to use\n    the corresponding QWebEnginePage or QWebEnginePage instance inside it.\n    Args:\n        string: string to search for\n        backward: search backwards\n        case_sensitive: case-sensitive search\n        callback: result callback\n    \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = QtWebEngineCore.QWebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= self.FindFlag.FindCaseSensitively\nif backward:\nflag |= self.FindFlag.FindBackward\nself.findText(string, flag, callback)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_contents_size","title":"<code>get_contents_size() -&gt; core.SizeF</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_contents_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.contentsSize())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_history","title":"<code>get_history() -&gt; webenginecore.WebEngineHistory</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_history(self) -&gt; webenginecore.WebEngineHistory:\nhist = self.history()\nreturn webenginecore.WebEngineHistory(hist)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_icon_url","title":"<code>get_icon_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_icon_url(self) -&gt; core.Url:\nreturn core.Url(self.iconUrl())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_lifecycle_state","title":"<code>get_lifecycle_state() -&gt; LifecycleStateStr</code>","text":"<p>Get the current lifecycle state.</p> <p>Returns:</p> Type Description <code>LifecycleStateStr</code> <p>lifecycle state</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_lifecycle_state(self) -&gt; LifecycleStateStr:\n\"\"\"Get the current lifecycle state.\n    Returns:\n        lifecycle state\n    \"\"\"\nreturn LIFECYCLE_STATE.inverse[self.lifecycleState()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_requested_url","title":"<code>get_requested_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_requested_url(self) -&gt; core.Url:\nreturn core.Url(self.requestedUrl())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_scripts","title":"<code>get_scripts() -&gt; webenginecore.WebEngineScriptCollection</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_scroll_position","title":"<code>get_scroll_position() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_scroll_position(self) -&gt; core.PointF:\nreturn core.PointF(self.scrollPosition())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_setting","title":"<code>get_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr) -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_setting(\nself, setting_name: webenginecore.webenginesettings.WebAttributeStr\n) -&gt; bool:\nreturn self.get_settings()[setting_name]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_settings","title":"<code>get_settings() -&gt; webenginecore.WebEngineSettings</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_settings(self) -&gt; webenginecore.WebEngineSettings:\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.load_url","title":"<code>load_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Load the URL.</p> <p>Loads the specified url and displays it.</p> <p>Note: The Page remains the same until enough data has arrived to display the new URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to load</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n    Loads the specified url and displays it.\n    Note: The Page remains the same until enough data has arrived\n    to display the new URL.\n    Args:\n        url: URL to load\n    \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.load(url)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.mousedown","title":"<code>mousedown(selector: str, btn: int = 0)</code>","text":"<p>Simulate a mousedown event on the targeted element.</p> <p>:param selector: A CSS3 selector to targeted element. :param btn: The number of mouse button.     0 - left button,     1 - middle button,     2 - right button</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def mousedown(self, selector: str, btn: int = 0):\n\"\"\"Simulate a mousedown event on the targeted element.\n    :param selector: A CSS3 selector to targeted element.\n    :param btn: The number of mouse button.\n        0 - left button,\n        1 - middle button,\n        2 - right button\n    \"\"\"\nreturn self.runJavaScript(\nf\"\"\"\n        (function () {{\n            var element = document.querySelector({selector!r});\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"mousedown\", true, true, window,\n                               1, 1, 1, 1, 1, false, false, false, false,\n{btn!r}, element);\n            return element.dispatchEvent(evt);\n}})();\n    \"\"\"\n)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.open_in_browser","title":"<code>open_in_browser()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def open_in_browser(self):\ntry:\nwebbrowser.open(self.getUrl().toString())\nexcept ValueError as e:\nlogger.exception(e)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\naudio_muted=self.isAudioMuted(),\nbackground_color=self.backgroundColor(),\n# has_selection=self.hasSelection(),\nlifecycle_state=self.get_lifecycle_state(),\n# scroll_position=self.scrollPosition(),\nurl=core.Url(self.url()),\nvisible=self.isVisible(),\nhistory=core.DataStream.create_bytearray(self.history()),\nzoom_factor=self.zoomFactor(),\n)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_feature_permission","title":"<code>set_feature_permission(url: datatypes.UrlType, feature: FeatureStr, policy: PermissionPolicyStr)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_feature_permission(\nself,\nurl: datatypes.UrlType,\nfeature: FeatureStr,\npolicy: PermissionPolicyStr,\n):\nurl = core.Url(url)\nself.setFeaturePermission(url, FEATURE[feature], PERMISSION_POLICY[policy])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_input_value","title":"<code>set_input_value(selector: str, value: str)</code>","text":"<p>Set the value of the input matched by given selector.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_input_value(self, selector: str, value):\n\"\"\"Set the value of the input matched by given selector.\"\"\"\nscript = f'document.querySelector({selector!r}).setAttribute(\"value\", \"{value}\")'\nself.runJavaScript(script)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_lifecycle_state","title":"<code>set_lifecycle_state(state: LifecycleStateStr)</code>","text":"<p>Set lifecycle state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>LifecycleStateStr</code> <p>lifecycle state</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>lifecycle state does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_lifecycle_state(self, state: LifecycleStateStr):\n\"\"\"Set lifecycle state.\n    Args:\n        state: lifecycle state\n    Raises:\n        InvalidParamError: lifecycle state does not exist\n    \"\"\"\nif state not in LIFECYCLE_STATE:\nraise InvalidParamError(state, LIFECYCLE_STATE)\nself.setLifecycleState(LIFECYCLE_STATE[state])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_setting","title":"<code>set_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr, value: bool)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\nself.get_settings()[setting_name] = value\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_url","title":"<code>set_url(url: datatypes.PathType | datatypes.UrlType)</code>","text":"<p>Set the url of the WebEnginePage.</p> <p>Clears the Page and loads the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.PathType | datatypes.UrlType</code> <p>URL to set</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_url(self, url: datatypes.PathType | datatypes.UrlType):\n\"\"\"Set the url of the WebEnginePage.\n    Clears the Page and loads the URL.\n    Args:\n        url: URL to set\n    \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_zoom","title":"<code>set_zoom(zoom: float)</code>","text":"<p>Set the zoom factor for the Page.</p> <p>Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom factor</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the Page.\n    Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n    Args:\n        zoom: Zoom factor\n    \"\"\"\nself.setZoomFactor(zoom)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginepage.WebEnginePage.trigger_action","title":"<code>trigger_action(action: WebActionStr, checked: bool = False)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def trigger_action(self, action: WebActionStr, checked: bool = False):\nself.triggerAction(WEB_ACTION[action], checked)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineProfile","title":"<code>WebEngineProfile</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWebEngineCore.QWebEngineProfile</code></p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>class WebEngineProfile(core.ObjectMixin, QtWebEngineCore.QWebEngineProfile):\ndef set_persistent_cookie_policy(self, policy: PersistentCookiePolicyStr):\n\"\"\"Set the persistent cookie policy.\n        Args:\n            policy: persistent cookie policy\n        Raises:\n            InvalidParamError: Policy does not exist\n        \"\"\"\nif policy not in PERSISTENT_COOKIE_POLICY:\nraise InvalidParamError(policy, PERSISTENT_COOKIE_POLICY)\nself.setPersistentCookiesPolicy(PERSISTENT_COOKIE_POLICY[policy])\ndef get_persistent_cookie_policy(self) -&gt; PersistentCookiePolicyStr:\n\"\"\"Return current persistent cookie policy.\n        Returns:\n            Persistent cookie policy\n        \"\"\"\nreturn PERSISTENT_COOKIE_POLICY.inverse[self.persistentCookiesPolicy()]\ndef set_http_cache_type(self, typ: HttpCacheTypeStr):\n\"\"\"Set the http cache type.\n        Args:\n            typ: http cache type\n        Raises:\n            InvalidParamError: Cache type does not exist\n        \"\"\"\nif typ not in HTTP_CACHE_TYPE:\nraise InvalidParamError(typ, HTTP_CACHE_TYPE)\nself.setHttpCacheType(HTTP_CACHE_TYPE[typ])\ndef get_http_cache_type(self) -&gt; HttpCacheTypeStr:\n\"\"\"Return current http cache type.\n        Returns:\n            Http cache type\n        \"\"\"\nreturn HTTP_CACHE_TYPE.inverse[self.httpCacheType()]\ndef get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_http_cache_type","title":"<code>get_http_cache_type() -&gt; HttpCacheTypeStr</code>","text":"<p>Return current http cache type.</p> <p>Returns:</p> Type Description <code>HttpCacheTypeStr</code> <p>Http cache type</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_http_cache_type(self) -&gt; HttpCacheTypeStr:\n\"\"\"Return current http cache type.\n    Returns:\n        Http cache type\n    \"\"\"\nreturn HTTP_CACHE_TYPE.inverse[self.httpCacheType()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_persistent_cookie_policy","title":"<code>get_persistent_cookie_policy() -&gt; PersistentCookiePolicyStr</code>","text":"<p>Return current persistent cookie policy.</p> <p>Returns:</p> Type Description <code>PersistentCookiePolicyStr</code> <p>Persistent cookie policy</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_persistent_cookie_policy(self) -&gt; PersistentCookiePolicyStr:\n\"\"\"Return current persistent cookie policy.\n    Returns:\n        Persistent cookie policy\n    \"\"\"\nreturn PERSISTENT_COOKIE_POLICY.inverse[self.persistentCookiesPolicy()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_scripts","title":"<code>get_scripts() -&gt; webenginecore.WebEngineScriptCollection</code>","text":"Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.set_http_cache_type","title":"<code>set_http_cache_type(typ: HttpCacheTypeStr)</code>","text":"<p>Set the http cache type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>HttpCacheTypeStr</code> <p>http cache type</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Cache type does not exist</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def set_http_cache_type(self, typ: HttpCacheTypeStr):\n\"\"\"Set the http cache type.\n    Args:\n        typ: http cache type\n    Raises:\n        InvalidParamError: Cache type does not exist\n    \"\"\"\nif typ not in HTTP_CACHE_TYPE:\nraise InvalidParamError(typ, HTTP_CACHE_TYPE)\nself.setHttpCacheType(HTTP_CACHE_TYPE[typ])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.set_persistent_cookie_policy","title":"<code>set_persistent_cookie_policy(policy: PersistentCookiePolicyStr)</code>","text":"<p>Set the persistent cookie policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>PersistentCookiePolicyStr</code> <p>persistent cookie policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Policy does not exist</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def set_persistent_cookie_policy(self, policy: PersistentCookiePolicyStr):\n\"\"\"Set the persistent cookie policy.\n    Args:\n        policy: persistent cookie policy\n    Raises:\n        InvalidParamError: Policy does not exist\n    \"\"\"\nif policy not in PERSISTENT_COOKIE_POLICY:\nraise InvalidParamError(policy, PERSISTENT_COOKIE_POLICY)\nself.setPersistentCookiesPolicy(PERSISTENT_COOKIE_POLICY[policy])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineScript","title":"<code>WebEngineScript</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineScript</code></p> Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>class WebEngineScript(QtWebEngineCore.QWebEngineScript):\ndef set_injection_point(self, point: InjectionPointStr):\n\"\"\"Set injection point.\n        Args:\n            point: injection point to use\n        Raises:\n            InvalidParamError: injection point does not exist\n        \"\"\"\nif point not in INJECTION_POINT:\nraise InvalidParamError(point, INJECTION_POINT)\nself.setInjectionPoint(INJECTION_POINT[point])\ndef get_injection_point(self) -&gt; InjectionPointStr:\n\"\"\"Return injection point.\n        Returns:\n            injection point\n        \"\"\"\nreturn INJECTION_POINT.inverse[self.injectionPoint()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescript.WebEngineScript.get_injection_point","title":"<code>get_injection_point() -&gt; InjectionPointStr</code>","text":"<p>Return injection point.</p> <p>Returns:</p> Type Description <code>InjectionPointStr</code> <p>injection point</p> Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>def get_injection_point(self) -&gt; InjectionPointStr:\n\"\"\"Return injection point.\n    Returns:\n        injection point\n    \"\"\"\nreturn INJECTION_POINT.inverse[self.injectionPoint()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescript.WebEngineScript.set_injection_point","title":"<code>set_injection_point(point: InjectionPointStr)</code>","text":"<p>Set injection point.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>InjectionPointStr</code> <p>injection point to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>injection point does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>def set_injection_point(self, point: InjectionPointStr):\n\"\"\"Set injection point.\n    Args:\n        point: injection point to use\n    Raises:\n        InvalidParamError: injection point does not exist\n    \"\"\"\nif point not in INJECTION_POINT:\nraise InvalidParamError(point, INJECTION_POINT)\nself.setInjectionPoint(INJECTION_POINT[point])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineScriptCollection","title":"<code>WebEngineScriptCollection</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>class WebEngineScriptCollection:\ndef __init__(self, item: QtWebEngineCore.QWebEngineScriptCollection):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __getitem__(self, index: str) -&gt; QtWebEngineCore.QWebEngineScript:\nreturn self.item.find(index)[0]\ndef __len__(self):\nreturn self.item.count()\ndef __iter__(self) -&gt; Iterator[QtWebEngineCore.QWebEngineScript]:\nreturn iter(self.item.toList())\ndef __contains__(self, other: QtWebEngineCore.QWebEngineScript):\nreturn self.item.contains(other)\ndef __add__(\nself,\nother: (\nQtWebEngineCore.QWebEngineScript | list[QtWebEngineCore.QWebEngineScript]\n),\n):\nself.item.insert(other)\nreturn self\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__add__","title":"<code>__add__(other: QtWebEngineCore.QWebEngineScript | list[QtWebEngineCore.QWebEngineScript])</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __add__(\nself,\nother: (\nQtWebEngineCore.QWebEngineScript | list[QtWebEngineCore.QWebEngineScript]\n),\n):\nself.item.insert(other)\nreturn self\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__contains__","title":"<code>__contains__(other: QtWebEngineCore.QWebEngineScript)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __contains__(self, other: QtWebEngineCore.QWebEngineScript):\nreturn self.item.contains(other)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__getitem__","title":"<code>__getitem__(index: str) -&gt; QtWebEngineCore.QWebEngineScript</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __getitem__(self, index: str) -&gt; QtWebEngineCore.QWebEngineScript:\nreturn self.item.find(index)[0]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__init__","title":"<code>__init__(item: QtWebEngineCore.QWebEngineScriptCollection)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __init__(self, item: QtWebEngineCore.QWebEngineScriptCollection):\nself.item = item\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWebEngineCore.QWebEngineScript]</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWebEngineCore.QWebEngineScript]:\nreturn iter(self.item.toList())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginescriptcollection.WebEngineScriptCollection.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>def __len__(self):\nreturn self.item.count()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineSettings","title":"<code>WebEngineSettings</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>class WebEngineSettings:\ndef __init__(self, item: QtWebEngineCore.QWebEngineSettings):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __setitem__(self, index: WebAttributeStr, value: bool):\nself.item.setAttribute(WEB_ATTRIBUTES[index], value)\ndef __getitem__(self, index: WebAttributeStr) -&gt; bool:\nreturn self.item.testAttribute(WEB_ATTRIBUTES[index])\ndef __delitem__(self, index: WebAttributeStr):\nreturn self.item.resetAttribute(WEB_ATTRIBUTES[index])\ndef __iter__(self):\nreturn iter(self.keys())\ndef keys(self):\nreturn WEB_ATTRIBUTES.keys()\ndef set_unknown_url_scheme_policy(self, policy: UnknownUrlSchemePolicyStr):\n\"\"\"Set the unknown url scheme policy.\n        Args:\n            policy: unknown url scheme policy\n        Raises:\n            InvalidParamError: Policy does not exist\n        \"\"\"\nif policy not in UNKNOWN_URL_SCHEME_POLICY:\nraise InvalidParamError(policy, UNKNOWN_URL_SCHEME_POLICY)\nself.item.setUnknownUrlSchemePolicy(UNKNOWN_URL_SCHEME_POLICY[policy])\ndef get_unknown_url_scheme_policy(self) -&gt; UnknownUrlSchemePolicyStr:\n\"\"\"Return current unknown url scheme policy.\n        Returns:\n            Unknown url scheme policy\n        \"\"\"\nreturn UNKNOWN_URL_SCHEME_POLICY.inverse[self.item.unknownUrlSchemePolicy()]\ndef set_font_family(self, which: FontFamilyStr, family: str):\n\"\"\"Set the actual font family to family for the specified generic family, which.\n        Args:\n            which: family to set\n            family: generic family\n        Raises:\n            InvalidParamError: Font family does not exist\n        \"\"\"\nif which not in FONT_FAMILY:\nraise InvalidParamError(which, FONT_FAMILY)\nself.item.setFontFamily(FONT_FAMILY[which], family)\ndef get_font_family(self, family: FontFamilyStr) -&gt; str:\n\"\"\"Return the actual font family for the specified generic font family.\n        Args:\n            family: generic font family\n        Returns:\n            Font family\n        \"\"\"\nreturn self.item.fontFamily(FONT_FAMILY[family])\ndef set_font_size(self, typ: FontSizeStr, size: int):\n\"\"\"Set the font size for type to size in pixels.\n        Args:\n            typ: font size type\n            size: size in pixels\n        Raises:\n            InvalidParamError: Font size does not exist\n        \"\"\"\nif typ not in FONT_SIZE:\nraise InvalidParamError(typ, FONT_SIZE)\nself.item.setFontSize(FONT_SIZE[typ], size)\ndef get_font_size(self, typ: FontSizeStr) -&gt; int:\n\"\"\"Return the default font size for type in pixels.\n        Args:\n            typ: font size type\n        Returns:\n            Font size\n        \"\"\"\nreturn self.item.fontSize(FONT_SIZE[typ])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.__delitem__","title":"<code>__delitem__(index: WebAttributeStr)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __delitem__(self, index: WebAttributeStr):\nreturn self.item.resetAttribute(WEB_ATTRIBUTES[index])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.__getitem__","title":"<code>__getitem__(index: WebAttributeStr) -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __getitem__(self, index: WebAttributeStr) -&gt; bool:\nreturn self.item.testAttribute(WEB_ATTRIBUTES[index])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.__init__","title":"<code>__init__(item: QtWebEngineCore.QWebEngineSettings)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __init__(self, item: QtWebEngineCore.QWebEngineSettings):\nself.item = item\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __iter__(self):\nreturn iter(self.keys())\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.__setitem__","title":"<code>__setitem__(index: WebAttributeStr, value: bool)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def __setitem__(self, index: WebAttributeStr, value: bool):\nself.item.setAttribute(WEB_ATTRIBUTES[index], value)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_font_family","title":"<code>get_font_family(family: FontFamilyStr) -&gt; str</code>","text":"<p>Return the actual font family for the specified generic font family.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>FontFamilyStr</code> <p>generic font family</p> required <p>Returns:</p> Type Description <code>str</code> <p>Font family</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_font_family(self, family: FontFamilyStr) -&gt; str:\n\"\"\"Return the actual font family for the specified generic font family.\n    Args:\n        family: generic font family\n    Returns:\n        Font family\n    \"\"\"\nreturn self.item.fontFamily(FONT_FAMILY[family])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_font_size","title":"<code>get_font_size(typ: FontSizeStr) -&gt; int</code>","text":"<p>Return the default font size for type in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>FontSizeStr</code> <p>font size type</p> required <p>Returns:</p> Type Description <code>int</code> <p>Font size</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_font_size(self, typ: FontSizeStr) -&gt; int:\n\"\"\"Return the default font size for type in pixels.\n    Args:\n        typ: font size type\n    Returns:\n        Font size\n    \"\"\"\nreturn self.item.fontSize(FONT_SIZE[typ])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_unknown_url_scheme_policy","title":"<code>get_unknown_url_scheme_policy() -&gt; UnknownUrlSchemePolicyStr</code>","text":"<p>Return current unknown url scheme policy.</p> <p>Returns:</p> Type Description <code>UnknownUrlSchemePolicyStr</code> <p>Unknown url scheme policy</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_unknown_url_scheme_policy(self) -&gt; UnknownUrlSchemePolicyStr:\n\"\"\"Return current unknown url scheme policy.\n    Returns:\n        Unknown url scheme policy\n    \"\"\"\nreturn UNKNOWN_URL_SCHEME_POLICY.inverse[self.item.unknownUrlSchemePolicy()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.keys","title":"<code>keys()</code>","text":"Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def keys(self):\nreturn WEB_ATTRIBUTES.keys()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_font_family","title":"<code>set_font_family(which: FontFamilyStr, family: str)</code>","text":"<p>Set the actual font family to family for the specified generic family, which.</p> <p>Parameters:</p> Name Type Description Default <code>which</code> <code>FontFamilyStr</code> <p>family to set</p> required <code>family</code> <code>str</code> <p>generic family</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Font family does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_font_family(self, which: FontFamilyStr, family: str):\n\"\"\"Set the actual font family to family for the specified generic family, which.\n    Args:\n        which: family to set\n        family: generic family\n    Raises:\n        InvalidParamError: Font family does not exist\n    \"\"\"\nif which not in FONT_FAMILY:\nraise InvalidParamError(which, FONT_FAMILY)\nself.item.setFontFamily(FONT_FAMILY[which], family)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_font_size","title":"<code>set_font_size(typ: FontSizeStr, size: int)</code>","text":"<p>Set the font size for type to size in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>FontSizeStr</code> <p>font size type</p> required <code>size</code> <code>int</code> <p>size in pixels</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Font size does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_font_size(self, typ: FontSizeStr, size: int):\n\"\"\"Set the font size for type to size in pixels.\n    Args:\n        typ: font size type\n        size: size in pixels\n    Raises:\n        InvalidParamError: Font size does not exist\n    \"\"\"\nif typ not in FONT_SIZE:\nraise InvalidParamError(typ, FONT_SIZE)\nself.item.setFontSize(FONT_SIZE[typ], size)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_unknown_url_scheme_policy","title":"<code>set_unknown_url_scheme_policy(policy: UnknownUrlSchemePolicyStr)</code>","text":"<p>Set the unknown url scheme policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>UnknownUrlSchemePolicyStr</code> <p>unknown url scheme policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Policy does not exist</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_unknown_url_scheme_policy(self, policy: UnknownUrlSchemePolicyStr):\n\"\"\"Set the unknown url scheme policy.\n    Args:\n        policy: unknown url scheme policy\n    Raises:\n        InvalidParamError: Policy does not exist\n    \"\"\"\nif policy not in UNKNOWN_URL_SCHEME_POLICY:\nraise InvalidParamError(policy, UNKNOWN_URL_SCHEME_POLICY)\nself.item.setUnknownUrlSchemePolicy(UNKNOWN_URL_SCHEME_POLICY[policy])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineUrlScheme","title":"<code>WebEngineUrlScheme</code>","text":"<p>         Bases: <code>QtWebEngineCore.QWebEngineUrlScheme</code></p> Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>class WebEngineUrlScheme(QtWebEngineCore.QWebEngineUrlScheme):\ndef get_name(self) -&gt; str:\nreturn self.name().data().decode()\n@classmethod\ndef get_scheme_by_name(cls, name: str) -&gt; Self:\nscheme = cls.schemeByName(QtCore.QByteArray(name.encode()))\nreturn cls(scheme)\ndef set_name(self, name: str):\nself.setName(QtCore.QByteArray(name.encode()))\ndef set_syntax(self, syntax: SyntaxStr):\n\"\"\"Set syntax.\n        Args:\n            syntax: syntax to use\n        Raises:\n            InvalidParamError: syntax does not exist\n        \"\"\"\nif syntax not in SYNTAX:\nraise InvalidParamError(syntax, SYNTAX)\nself.setSyntax(SYNTAX[syntax])\ndef get_syntax(self) -&gt; SyntaxStr:\n\"\"\"Return syntax.\n        Returns:\n            syntax\n        \"\"\"\nreturn SYNTAX.inverse[self.syntax()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.get_name","title":"<code>get_name() -&gt; str</code>","text":"Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def get_name(self) -&gt; str:\nreturn self.name().data().decode()\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.get_scheme_by_name","title":"<code>get_scheme_by_name(name: str) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>@classmethod\ndef get_scheme_by_name(cls, name: str) -&gt; Self:\nscheme = cls.schemeByName(QtCore.QByteArray(name.encode()))\nreturn cls(scheme)\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.get_syntax","title":"<code>get_syntax() -&gt; SyntaxStr</code>","text":"<p>Return syntax.</p> <p>Returns:</p> Type Description <code>SyntaxStr</code> <p>syntax</p> Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def get_syntax(self) -&gt; SyntaxStr:\n\"\"\"Return syntax.\n    Returns:\n        syntax\n    \"\"\"\nreturn SYNTAX.inverse[self.syntax()]\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.set_name","title":"<code>set_name(name: str)</code>","text":"Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def set_name(self, name: str):\nself.setName(QtCore.QByteArray(name.encode()))\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.set_syntax","title":"<code>set_syntax(syntax: SyntaxStr)</code>","text":"<p>Set syntax.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>SyntaxStr</code> <p>syntax to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>syntax does not exist</p> Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def set_syntax(self, syntax: SyntaxStr):\n\"\"\"Set syntax.\n    Args:\n        syntax: syntax to use\n    Raises:\n        InvalidParamError: syntax does not exist\n    \"\"\"\nif syntax not in SYNTAX:\nraise InvalidParamError(syntax, SYNTAX)\nself.setSyntax(SYNTAX[syntax])\n</code></pre>"},{"location":"api/webenginecore.html#prettyqt.webenginecore.WebEngineUrlSchemeHandler","title":"<code>WebEngineUrlSchemeHandler</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWebEngineCore.QWebEngineUrlSchemeHandler</code></p> Source code in <code>prettyqt\\webenginecore\\webengineurlschemehandler.py</code> <pre><code>class WebEngineUrlSchemeHandler(\ncore.ObjectMixin, QtWebEngineCore.QWebEngineUrlSchemeHandler\n):\npass\n</code></pre>"},{"location":"api/webenginewidgets.html","title":"webenginewidgets module","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineWidgets-based classes</p>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.__all__","title":"<code>__all__ = ['WebEngineView']</code>  <code>module-attribute</code>","text":""},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.WebEngineView","title":"<code>WebEngineView</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWebEngineWidgets.QWebEngineView</code></p> Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>class WebEngineView(widgets.WidgetMixin, QtWebEngineWidgets.QWebEngineView):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setPage(webenginecore.WebEnginePage(self))\ndef set_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Set the url of the WebEngineView.\n        Clears the view and loads the URL.\n        Args:\n            url: URL to set\n        \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n        Loads the specified url and displays it.\n        Note: The view remains the same until enough data has arrived\n        to display the new URL.\n        Args:\n            url: URL to load\n        \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.load(url)\ndef set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the view.\n        Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n        Args:\n            zoom: Zoom factor\n        \"\"\"\nself.setZoomFactor(zoom)\ndef find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n        Finds the specified string, subString, in the page, using the given options.\n        The findTextFinished() signal is emitted when a string search is completed.\n        To clear the search highlight, just pass an empty string.\n        The resultCallback must take a boolean parameter.\n        It will be called with a value of true if the subString was found;\n        otherwise the callback value will be false.\n        Warning: It is guaranteed that the callback is always called,\n        but it might be done during page destruction. When WebEnginePage is deleted,\n        the callback is triggered with an invalid value and it is not safe to use\n        the corresponding QWebEnginePage or QWebEngineView instance inside it.\n        Args:\n            string: string to search for\n            backward: search backwards\n            case_sensitive: case-sensitive search\n            callback: result callback\n        \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.WebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= webenginecore.WebEnginePage.FindFlag.FindCaseSensitively\nif backward:\nflag |= webenginecore.WebEnginePage.FindFlag.FindBackward\nself.findText(string, flag, callback)\ndef get_settings(self) -&gt; webenginecore.WebEngineSettings:\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\ndef set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\nself.get_settings()[setting_name] = value\ndef get_setting(\nself, setting_name: webenginecore.webenginesettings.WebAttributeStr\n) -&gt; bool:\nreturn self.get_settings()[setting_name]\n@classmethod\ndef register_as_browser(cls, tabwidget: widgets.TabWidget):\nclass BuiltInBrowser(webbrowser.BaseBrowser):\ndef open(self, url: str, new: int = 0, autoraise: bool = True):\n# logger.info(f\"opening {url} with builtin browser..\")\nwebview = cls()\nwebview.load_url(url)\nif new == 1:\nwebview.show()\nelse:\ntabwidget.add_tab(webview, url, show=autoraise)\nwebbrowser.register(\"BuiltInBrowser\", BuiltInBrowser)\ndef last_context_menu_request(\nself,\n) -&gt; webenginecore.WebEngineContextMenuRequest | None:\nreq = self.lastContextMenuRequest()\nreturn webenginecore.WebEngineContextMenuRequest(req) if req else None\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setPage(webenginecore.WebEnginePage(self))\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.find_text","title":"<code>find_text(string: str, backward: bool = False, case_sensitive: bool = False, callback: Callable[[bool], None] | None = None)</code>","text":"<p>Find text in the current page.</p> <p>Finds the specified string, subString, in the page, using the given options. The findTextFinished() signal is emitted when a string search is completed.</p> <p>To clear the search highlight, just pass an empty string.</p> <p>The resultCallback must take a boolean parameter. It will be called with a value of true if the subString was found; otherwise the callback value will be false.</p> <p>Warning: It is guaranteed that the callback is always called, but it might be done during page destruction. When WebEnginePage is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding QWebEnginePage or QWebEngineView instance inside it.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string to search for</p> required <code>backward</code> <code>bool</code> <p>search backwards</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>case-sensitive search</p> <code>False</code> <code>callback</code> <code>Callable[[bool], None] | None</code> <p>result callback</p> <code>None</code> Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n    Finds the specified string, subString, in the page, using the given options.\n    The findTextFinished() signal is emitted when a string search is completed.\n    To clear the search highlight, just pass an empty string.\n    The resultCallback must take a boolean parameter.\n    It will be called with a value of true if the subString was found;\n    otherwise the callback value will be false.\n    Warning: It is guaranteed that the callback is always called,\n    but it might be done during page destruction. When WebEnginePage is deleted,\n    the callback is triggered with an invalid value and it is not safe to use\n    the corresponding QWebEnginePage or QWebEngineView instance inside it.\n    Args:\n        string: string to search for\n        backward: search backwards\n        case_sensitive: case-sensitive search\n        callback: result callback\n    \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.WebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= webenginecore.WebEnginePage.FindFlag.FindCaseSensitively\nif backward:\nflag |= webenginecore.WebEnginePage.FindFlag.FindBackward\nself.findText(string, flag, callback)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.get_setting","title":"<code>get_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr) -&gt; bool</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def get_setting(\nself, setting_name: webenginecore.webenginesettings.WebAttributeStr\n) -&gt; bool:\nreturn self.get_settings()[setting_name]\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.get_settings","title":"<code>get_settings() -&gt; webenginecore.WebEngineSettings</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def get_settings(self) -&gt; webenginecore.WebEngineSettings:\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.get_url","title":"<code>get_url() -&gt; core.Url</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.last_context_menu_request","title":"<code>last_context_menu_request() -&gt; webenginecore.WebEngineContextMenuRequest | None</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def last_context_menu_request(\nself,\n) -&gt; webenginecore.WebEngineContextMenuRequest | None:\nreq = self.lastContextMenuRequest()\nreturn webenginecore.WebEngineContextMenuRequest(req) if req else None\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.load_url","title":"<code>load_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Load the URL.</p> <p>Loads the specified url and displays it.</p> <p>Note: The view remains the same until enough data has arrived to display the new URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to load</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n    Loads the specified url and displays it.\n    Note: The view remains the same until enough data has arrived\n    to display the new URL.\n    Args:\n        url: URL to load\n    \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.load(url)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.register_as_browser","title":"<code>register_as_browser(tabwidget: widgets.TabWidget)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>@classmethod\ndef register_as_browser(cls, tabwidget: widgets.TabWidget):\nclass BuiltInBrowser(webbrowser.BaseBrowser):\ndef open(self, url: str, new: int = 0, autoraise: bool = True):\n# logger.info(f\"opening {url} with builtin browser..\")\nwebview = cls()\nwebview.load_url(url)\nif new == 1:\nwebview.show()\nelse:\ntabwidget.add_tab(webview, url, show=autoraise)\nwebbrowser.register(\"BuiltInBrowser\", BuiltInBrowser)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_setting","title":"<code>set_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr, value: bool)</code>","text":"Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\nself.get_settings()[setting_name] = value\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_url","title":"<code>set_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Set the url of the WebEngineView.</p> <p>Clears the view and loads the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to set</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Set the url of the WebEngineView.\n    Clears the view and loads the URL.\n    Args:\n        url: URL to set\n    \"\"\"\nif isinstance(url, os.PathLike):\nurl = core.Url.fromLocalFile(os.fspath(url))\nelif isinstance(url, str):\nurl = core.Url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"api/webenginewidgets.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_zoom","title":"<code>set_zoom(zoom: float)</code>","text":"<p>Set the zoom factor for the view.</p> <p>Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom factor</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the view.\n    Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n    Args:\n        zoom: Zoom factor\n    \"\"\"\nself.setZoomFactor(zoom)\n</code></pre>"},{"location":"api/widgets.html","title":"widgets module","text":"<p>widgets module.</p> <p>contains QtWidgets-based classes</p>"},{"location":"api/widgets.html#prettyqt.widgets.__all__","title":"<code>__all__ = ['app', 'Application', 'AbstractSlider', 'AbstractSliderMixin', 'AbstractButton', 'AbstractButtonMixin', 'AbstractSpinBox', 'AbstractSpinBoxMixin', 'AbstractScrollArea', 'AbstractScrollAreaMixin', 'AbstractItemView', 'AbstractItemViewMixin', 'MdiSubWindow', 'MdiArea', 'SmoothScrollBar', 'ScrollBar', 'ScrollArea', 'Widget', 'WidgetMixin', 'RubberBand', 'GraphicsTransform', 'GraphicsTransformMixin', 'GraphicsRotation', 'GraphicsScale', 'GraphicsItem', 'GraphicsItemMixin', 'GraphicsItemGroup', 'AbstractGraphicsShapeItem', 'AbstractGraphicsShapeItemMixin', 'GraphicsPixmapItem', 'GraphicsObject', 'GraphicsObjectMixin', 'GraphicsTextItem', 'GraphicsLayoutItem', 'GraphicsLayoutItemMixin', 'GraphicsLayout', 'GraphicsLayoutMixin', 'GraphicsGridLayout', 'GraphicsAnchorLayout', 'GraphicsLinearLayout', 'GraphicsWidget', 'GraphicsWidgetMixin', 'GraphicsProxyWidget', 'GraphicsLineItem', 'GraphicsRectItem', 'GraphicsSimpleTextItem', 'GraphicsPolygonItem', 'GraphicsEllipseItem', 'GraphicsPathItem', 'GraphicsWidget', 'GraphicsEffect', 'GraphicsEffectMixin', 'GraphicsBlurEffect', 'GraphicsDropShadowEffect', 'GraphicsColorizeEffect', 'GraphicsOpacityEffect', 'GraphicsScene', 'GraphicsView', 'GraphicsViewMixin', 'Style', 'StyleMixin', 'CommonStyle', 'CommonStyleMixin', 'ProxyStyle', 'StyleOption', 'StyleOptionMixin', 'StyleOptionComplex', 'StyleOptionComplexMixin', 'SpacerItem', 'SizePolicy', 'StylePainter', 'StyleFactory', 'Dialog', 'DialogMixin', 'MessageBox', 'ErrorMessage', 'FileIconProvider', 'FileSystemModel', 'LayoutItem', 'LayoutItemMixin', 'WidgetItem', 'Layout', 'LayoutMixin', 'FormLayout', 'BoxLayout', 'HBoxLayout', 'VBoxLayout', 'StackedLayout', 'GridLayout', 'ToolBox', 'Slider', 'Dial', 'StyleOptionButton', 'StyleOptionDockWidget', 'StyleOptionFocusRect', 'StyleOptionGraphicsItem', 'StyleOptionHeader', 'StyleOptionMenuItem', 'StyleOptionProgressBar', 'StyleOptionRubberBand', 'StyleOptionTab', 'StyleOptionTabBarBase', 'StyleOptionTabWidgetFrame', 'StyleOptionToolBar', 'StyleOptionToolBox', 'StyleOptionViewItem', 'StyleOptionComboBox', 'StyleOptionGroupBox', 'StyleOptionSizeGrip', 'StyleOptionSlider', 'StyleOptionSpinBox', 'StyleOptionTitleBar', 'StyleOptionToolButton', 'StyleOptionFrame', 'Frame', 'FrameMixin', 'FocusFrame', 'ListWidgetItem', 'TreeWidgetItem', 'TreeWidgetItemIterator', 'WidgetAction', 'ToolButton', 'ToolTip', 'Menu', 'MenuBar', 'StatusBar', 'TabWidget', 'TabBar', 'ToolBar', 'HeaderView', 'DockWidget', 'Label', 'PushButton', 'PushButtonMixin', 'CommandLinkButton', 'RadioButton', 'ComboBox', 'ComboBoxMixin', 'FontComboBox', 'SpinBox', 'DoubleSpinBox', 'CheckBox', 'LineEdit', 'KeySequenceEdit', 'TextEdit', 'TextEditMixin', 'DateEdit', 'TimeEdit', 'DateTimeEdit', 'DateTimeEditMixin', 'CalendarWidget', 'PlainTextEdit', 'PlainTextEditMixin', 'TextBrowser', 'Completer', 'ProgressBar', 'LCDNumber', 'ColumnView', 'ListView', 'ListViewMixin', 'ListWidget', 'TreeView', 'TreeViewMixin', 'TreeWidget', 'TableWidgetSelectionRange', 'ScrollerProperties', 'Scroller', 'TableView', 'TableViewMixin', 'TableWidgetItem', 'TableWidget', 'SplashScreen', 'ProgressDialog', 'FontDialog', 'FileDialog', 'ColorDialog', 'InputDialog', 'DialogButtonBox', 'ButtonGroup', 'GroupBox', 'SplitterHandle', 'Splitter', 'Wizard', 'WizardPage', 'StackedWidget', 'MainWindow', 'WhatsThis', 'AbstractItemDelegate', 'AbstractItemDelegateMixin', 'ItemDelegate', 'StyledItemDelegate', 'SystemTrayIcon', 'UndoView', 'DataWidgetMapper', 'SizeGrip', 'KeyEventTransition', 'MouseEventTransition', 'GraphicsSceneHoverEvent', 'GraphicsSceneMouseEvent', 'GraphicsSceneWheelEvent', 'GraphicsSceneContextMenuEvent', 'GraphicsSceneDragDropEvent', 'GraphicsSceneHelpEvent', 'GraphicsSceneMoveEvent', 'GraphicsSceneResizeEvent', 'GraphicsSceneEvent', 'GestureEvent', 'PlainTextDocumentLayout', 'Gesture', 'GestureMixin', 'TapGesture', 'TapAndHoldGesture', 'PanGesture', 'PinchGesture', 'SwipeGesture', 'ItemEditorFactory', 'ItemEditorCreatorBase']</code>  <code>module-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.AbstractButton","title":"<code>AbstractButton</code>","text":"<p>         Bases: <code>AbstractButtonMixin</code>, <code>QtWidgets.QAbstractButton</code></p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>class AbstractButton(AbstractButtonMixin, QtWidgets.QAbstractButton):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractButtonMixin","title":"<code>AbstractButtonMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>class AbstractButtonMixin(widgets.WidgetMixin):\ndef __bool__(self):\nreturn self.isChecked()\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the button.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_style_icon(self, icon: widgets.style.StandardPixmapStr, size: int = 15):\n\"\"\"Set theme icon for the button.\n        Args:\n            icon: icon to use\n            size: icon size\n        \"\"\"\nif icon not in widgets.style.STANDARD_PIXMAP:\nraise InvalidParamError(icon, widgets.style.STANDARD_PIXMAP)\nqicon = self.style().standardIcon(widgets.style.STANDARD_PIXMAP[icon], None, self)\nself.set_icon(qicon)\nself.setIconSize(core.Size(size, size))\ndef set_shortcut(self, shortcut: None | QtGui.QKeySequence | str):\nif shortcut is None:\nshortcut = \"\"\nif isinstance(shortcut, str):\nshortcut = gui.KeySequence(\nshortcut, gui.KeySequence.SequenceFormat.PortableText\n)\nself.setShortcut(shortcut)\ndef get_shortcut(self) -&gt; gui.KeySequence:\nreturn gui.KeySequence(\nself.shortcut().toString(), gui.KeySequence.SequenceFormat.PortableText\n)\ndef set_text(self, text: str):\nself.setText(text)\ndef set_icon_size(self, size: int | datatypes.SizeType):\n\"\"\"Set size of the icon.\"\"\"\nif isinstance(size, int):\nsize = core.Size(size, size)\nelif isinstance(size, tuple):\nsize = core.Size(*size)\nself.setIconSize(size)\ndef get_icon_size(self) -&gt; core.Size:\nreturn core.Size(self.iconSize())\ndef get_value(self) -&gt; bool:\nreturn self.isChecked()\ndef set_value(self, value: bool):\nself.setChecked(value)\n@property\ndef is_on(self) -&gt; bool:\nreturn self.isChecked()\n@is_on.setter\ndef is_on(self, state: bool):\nself.setChecked(state)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.is_on","title":"<code>is_on: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def __bool__(self):\nreturn self.isChecked()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.get_icon_size","title":"<code>get_icon_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def get_icon_size(self) -&gt; core.Size:\nreturn core.Size(self.iconSize())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.get_shortcut","title":"<code>get_shortcut() -&gt; gui.KeySequence</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def get_shortcut(self) -&gt; gui.KeySequence:\nreturn gui.KeySequence(\nself.shortcut().toString(), gui.KeySequence.SequenceFormat.PortableText\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.get_value","title":"<code>get_value() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def get_value(self) -&gt; bool:\nreturn self.isChecked()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the button.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_icon_size","title":"<code>set_icon_size(size: int | datatypes.SizeType)</code>","text":"<p>Set size of the icon.</p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_icon_size(self, size: int | datatypes.SizeType):\n\"\"\"Set size of the icon.\"\"\"\nif isinstance(size, int):\nsize = core.Size(size, size)\nelif isinstance(size, tuple):\nsize = core.Size(*size)\nself.setIconSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_shortcut","title":"<code>set_shortcut(shortcut: None | QtGui.QKeySequence | str)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_shortcut(self, shortcut: None | QtGui.QKeySequence | str):\nif shortcut is None:\nshortcut = \"\"\nif isinstance(shortcut, str):\nshortcut = gui.KeySequence(\nshortcut, gui.KeySequence.SequenceFormat.PortableText\n)\nself.setShortcut(shortcut)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_style_icon","title":"<code>set_style_icon(icon: widgets.style.StandardPixmapStr, size: int = 15)</code>","text":"<p>Set theme icon for the button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>widgets.style.StandardPixmapStr</code> <p>icon to use</p> required <code>size</code> <code>int</code> <p>icon size</p> <code>15</code> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_style_icon(self, icon: widgets.style.StandardPixmapStr, size: int = 15):\n\"\"\"Set theme icon for the button.\n    Args:\n        icon: icon to use\n        size: icon size\n    \"\"\"\nif icon not in widgets.style.STANDARD_PIXMAP:\nraise InvalidParamError(icon, widgets.style.STANDARD_PIXMAP)\nqicon = self.style().standardIcon(widgets.style.STANDARD_PIXMAP[icon], None, self)\nself.set_icon(qicon)\nself.setIconSize(core.Size(size, size))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_text","title":"<code>set_text(text: str)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_text(self, text: str):\nself.setText(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_value","title":"<code>set_value(value: bool)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_value(self, value: bool):\nself.setChecked(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractGraphicsShapeItem","title":"<code>AbstractGraphicsShapeItem</code>","text":"<p>         Bases: <code>AbstractGraphicsShapeItemMixin</code>, <code>QtWidgets.QAbstractGraphicsShapeItem</code></p> Source code in <code>prettyqt\\widgets\\abstractgraphicsshapeitem.py</code> <pre><code>class AbstractGraphicsShapeItem(\nAbstractGraphicsShapeItemMixin, QtWidgets.QAbstractGraphicsShapeItem\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractGraphicsShapeItemMixin","title":"<code>AbstractGraphicsShapeItemMixin</code>","text":"<p>         Bases: <code>widgets.GraphicsItemMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractgraphicsshapeitem.py</code> <pre><code>class AbstractGraphicsShapeItemMixin(widgets.GraphicsItemMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractItemDelegate","title":"<code>AbstractItemDelegate</code>","text":"<p>         Bases: <code>AbstractItemDelegateMixin</code>, <code>QtWidgets.QAbstractItemDelegate</code></p> Source code in <code>prettyqt\\widgets\\abstractitemdelegate.py</code> <pre><code>class AbstractItemDelegate(AbstractItemDelegateMixin, QtWidgets.QAbstractItemDelegate):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractItemDelegateMixin","title":"<code>AbstractItemDelegateMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractitemdelegate.py</code> <pre><code>class AbstractItemDelegateMixin(core.ObjectMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractItemView","title":"<code>AbstractItemView</code>","text":"<p>         Bases: <code>AbstractItemViewMixin</code>, <code>QtWidgets.QAbstractItemView</code></p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>class AbstractItemView(AbstractItemViewMixin, QtWidgets.QAbstractItemView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractItemViewMixin","title":"<code>AbstractItemViewMixin</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>class AbstractItemViewMixin(widgets.AbstractScrollAreaMixin):\nmodel_changed = core.Signal(QtCore.QAbstractItemModel)\ndef __len__(self) -&gt; int:\nreturn model.rowCount() if (model := self.model()) is not None else 0\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"dragDropMode\": DRAG_DROP_MODE,\n\"horizontalScrollMode\": SCROLL_MODE,\n\"verticalScrollMode\": SCROLL_MODE,\n\"selectionMode\": SELECTION_MODE,\n\"selectionBehavior\": SELECTION_BEHAVIOR,\n\"defaultDropAction\": constants.DROP_ACTION,\n\"textElideMode\": constants.ELIDE_MODE,\n\"editTriggers\": EDIT_TRIGGERS,\n}\nreturn maps\ndef selectAll(self):\n\"\"\"Override, we dont want to selectAll for too many items bc of performance.\"\"\"\nif self.model() is None:\nreturn\nif self.model().rowCount() * self.model().columnCount() &gt; 1_000_000:\nlogger.warning(\"Too many cells to select.\")\nreturn\nsuper().selectAll()\ndef set_model(self, model: QtCore.QAbstractItemModel | None):\n\"\"\"Delete old selection model explicitely, seems to help with memory usage.\"\"\"\nold_model = self.model()\nold_sel_model = self.selectionModel()\nif old_model is not None or model is not None:\nself.setModel(model)\nself.model_changed.emit(model)\n# if old_model:\n#     old_model.deleteLater()\n#     del old_model\nif old_sel_model:\nold_sel_model.deleteLater()\ndel old_sel_model\ndef set_current_index(\nself,\nindex: QtCore.QModelIndex | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n# index = self.model().index(self._selected_index)\nif index is None:\nself.selectionModel().setCurrentIndex(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().setCurrentIndex(index, flag)\ndef select_index(\nself,\nindex: QtCore.QModelIndex | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n# index = self.model().index(self._selected_index)\nif index is None:\nself.selectionModel().select(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().select(index, flag)\ndef move_row_selection(self, dx: int) -&gt; None:\nfor row in self.selected_rows():\nnew_idx = self.model().index(row + dx, 0)\nif new_idx.isValid():\nself.set_current_index(new_idx, current=True, expand=\"rows\")\ndef set_delegate(\nself,\ndelegate: QtWidgets.QAbstractItemDelegate,\ncolumn: int | None = None,\nrow: int | None = None,\npersistent: bool = False,\n):\nif column is not None:\nself.setItemDelegateForColumn(column, delegate)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nindex = model.index(i, column)\nself.openPersistentEditor(index)\nelif row is not None:\nself.setItemDelegateForRow(row, delegate)\nif persistent:\nmodel = self.model()\nfor i in range(model.columnCount()):\nself.openPersistentEditor(model.index(row, i))\nelse:\nself.setItemDelegate(delegate)\ndef toggle_select_all(self):\n\"\"\"Select all items from list (deselect when all selected).\"\"\"\nif self.selectionModel() is None:\nreturn\nif self.selectionModel().hasSelection():\nself.clearSelection()\nelse:\nself.selectAll()\ndef set_table_color(self, color: str):\nwith self.edit_stylesheet() as ss:\nss.QHeaderView.section.backgroundColor.setValue(color)\ndef current_index(self) -&gt; QtCore.QModelIndex | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex()\ndef current_data(self):\nif (model := self.selectionModel()) is not None:\nidx = model.currentIndex()\nreturn idx.data(constants.USER_ROLE)\ndef current_row(self) -&gt; int | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex().row()\ndef current_column(self) -&gt; int | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex().column()\ndef selected_indexes(self) -&gt; list[QtCore.QModelIndex]:\n\"\"\"Return list of selected indexes in first row.\"\"\"\nindexes = (x for x in self.selectedIndexes() if x.column() == 0)\nreturn sorted(indexes, key=lambda x: x.row())\ndef selected_names(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding item names.\"\"\"\nreturn (x.data(constants.NAME_ROLE) for x in self.selected_indexes())\ndef selected_rows(self) -&gt; Generator[int, None, None]:\n\"\"\"Return generator yielding row nums.\"\"\"\nreturn (x.row() for x in self.selected_indexes())\ndef selected_data(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding selected userData.\"\"\"\nreturn (x.data(constants.USER_ROLE) for x in self.selected_indexes())\ndef setup_dragdrop_move(self):\nself.setDragEnabled(True)\nself.setAcceptDrops(True)\nself.setDragDropMode(self.DragDropMode.DragDrop)\nself.setDefaultDropAction(constants.MOVE_ACTION)\nself.setDropIndicatorShown(True)\ndef set_edit_triggers(self, *triggers: EditTriggerStr | None):\nitems = [\"none\" if t is None else t for t in triggers]\nfor item in items:\nif item not in EDIT_TRIGGERS:\nraise InvalidParamError(item, EDIT_TRIGGERS)\nflags = EDIT_TRIGGERS.merge_flags(items)\nself.setEditTriggers(flags)\ndef get_edit_triggers(self) -&gt; list[EditTriggerStr]:\nreturn EDIT_TRIGGERS.get_list(self.editTriggers())\ndef set_selection_behavior(self, behaviour: SelectionBehaviourStr):\n\"\"\"Set selection behaviour for given item view.\n        Args:\n            behaviour: selection behaviour to use\n        Raises:\n            InvalidParamError: behaviour does not exist\n        \"\"\"\nif behaviour not in SELECTION_BEHAVIOR:\nraise InvalidParamError(behaviour, SELECTION_BEHAVIOR)\nself.setSelectionBehavior(SELECTION_BEHAVIOR[behaviour])\ndef get_selection_behavior(self) -&gt; SelectionBehaviourStr:\n\"\"\"Return current selection behaviour.\n        Returns:\n            selection behaviour\n        \"\"\"\nreturn SELECTION_BEHAVIOR.inverse[self.selectionBehavior()]\ndef set_drag_drop_mode(self, mode: DragDropModeStr):\n\"\"\"Set drag-drop mode for given item view.\n        Args:\n            mode: drag-drop mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in DRAG_DROP_MODE:\nraise InvalidParamError(mode, DRAG_DROP_MODE)\nself.setDragDropMode(DRAG_DROP_MODE[mode])\ndef get_drag_drop_mode(self) -&gt; DragDropModeStr:\n\"\"\"Return current drag-drop mode.\n        Returns:\n            drag-drop mode\n        \"\"\"\nreturn DRAG_DROP_MODE.inverse[self.dragDropMode()]\ndef set_selection_mode(self, mode: SelectionModeStr | None):\n\"\"\"Set selection mode for given item view.\n        Args:\n            mode: selection mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode is None:\nmode = \"none\"\nif mode not in SELECTION_MODE:\nraise InvalidParamError(mode, SELECTION_MODE)\nself.setSelectionMode(SELECTION_MODE[mode])\ndef get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n        Returns:\n            selection mode\n        \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\ndef set_scroll_mode(self, mode: ScrollModeStr):\n\"\"\"Set the scroll mode for both directions.\n        Args:\n            mode: mode to set\n        Raises:\n            InvalidParamError: invalid scroll mode\n        \"\"\"\nif mode not in SCROLL_MODE:\nraise InvalidParamError(mode, SCROLL_MODE)\nself.setHorizontalScrollMode(SCROLL_MODE[mode])\nself.setVerticalScrollMode(SCROLL_MODE[mode])\ndef set_horizontal_scroll_mode(self, mode: ScrollModeStr):\n\"\"\"Set the horizontal scroll mode.\n        Args:\n            mode: mode to set\n        Raises:\n            InvalidParamError: invalid scroll mode\n        \"\"\"\nif mode not in SCROLL_MODE:\nraise InvalidParamError(mode, SCROLL_MODE)\nself.setHorizontalScrollMode(SCROLL_MODE[mode])\ndef get_horizontal_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current horizontal scroll mode.\n        Returns:\n            horizontal scroll mode\n        \"\"\"\nreturn SCROLL_MODE.inverse[self.horizontalScrollMode()]\ndef set_vertical_scroll_mode(self, mode: ScrollModeStr):\n\"\"\"Set the vertical scroll mode.\n        Args:\n            mode: mode to set\n        Raises:\n            InvalidParamError: invalid scroll mode\n        \"\"\"\nif mode not in SCROLL_MODE:\nraise InvalidParamError(mode, SCROLL_MODE)\nself.setVerticalScrollMode(SCROLL_MODE[mode])\ndef get_vertical_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current vertical scroll mode.\n        Returns:\n            vertical scroll mode\n        \"\"\"\nreturn SCROLL_MODE.inverse[self.verticalScrollMode()]\ndef num_selected(self) -&gt; int:\n\"\"\"Return amount of selected rows.\n        Returns:\n            amount of selected rows\n        \"\"\"\nif (model := self.selectionModel()) is not None:\nreturn len(model.selectedRows())\nreturn 0\ndef jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n        scrolls to column at given index\n        Args:\n            col_num: column to scroll to\n        \"\"\"\nif (model := self.model()) is not None:\nidx = model.index(0, col_num)\nself.scrollTo(idx)\ndef scroll_to_top(self):\n\"\"\"Override to use abstractitemview-way of scrolling to top.\"\"\"\nself.scrollToTop()\ndef scroll_to_bottom(self):\n\"\"\"Override to use abstractitemview-way of scrolling to bottom.\"\"\"\nself.scrollToBottom()\ndef select_last_row(self):\nidx = self.model().createIndex(self.model().rowCount() - 1, 0)\nself.setCurrentIndex(idx)\ndef select_first_row(self):\nidx = self.model().index(0, 0)\nself.set_current_index(idx, current=True, expand=\"rows\")\ndef scroll_to(\nself, index: QtCore.QModelIndex, mode: ScrollHintStr = \"ensure_visible\"\n):\nif mode not in SCROLL_HINT:\nraise InvalidParamError(mode, SCROLL_HINT)\nself.scrollTo(index, SCROLL_HINT[mode])\ndef highlight_when_inactive(self):\n\"\"\"Highlight items when widget does not have focus.\"\"\"\np = self.get_palette()\np.highlight_inactive()\nself.setPalette(p)\ndef set_icon_size(self, size: int | datatypes.SizeType):\nif isinstance(size, tuple):\nsize = QtCore.QSize(*size)\nelif isinstance(size, int):\nsize = QtCore.QSize(size, size)\nself.setIconSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.model_changed","title":"<code>model_changed = core.Signal(QtCore.QAbstractItemModel)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn model.rowCount() if (model := self.model()) is not None else 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.current_column","title":"<code>current_column() -&gt; int | None</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def current_column(self) -&gt; int | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex().column()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.current_data","title":"<code>current_data()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def current_data(self):\nif (model := self.selectionModel()) is not None:\nidx = model.currentIndex()\nreturn idx.data(constants.USER_ROLE)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.current_index","title":"<code>current_index() -&gt; QtCore.QModelIndex | None</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def current_index(self) -&gt; QtCore.QModelIndex | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.current_row","title":"<code>current_row() -&gt; int | None</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def current_row(self) -&gt; int | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex().row()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_drag_drop_mode","title":"<code>get_drag_drop_mode() -&gt; DragDropModeStr</code>","text":"<p>Return current drag-drop mode.</p> <p>Returns:</p> Type Description <code>DragDropModeStr</code> <p>drag-drop mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_drag_drop_mode(self) -&gt; DragDropModeStr:\n\"\"\"Return current drag-drop mode.\n    Returns:\n        drag-drop mode\n    \"\"\"\nreturn DRAG_DROP_MODE.inverse[self.dragDropMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_edit_triggers","title":"<code>get_edit_triggers() -&gt; list[EditTriggerStr]</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_edit_triggers(self) -&gt; list[EditTriggerStr]:\nreturn EDIT_TRIGGERS.get_list(self.editTriggers())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_horizontal_scroll_mode","title":"<code>get_horizontal_scroll_mode() -&gt; ScrollModeStr</code>","text":"<p>Return current horizontal scroll mode.</p> <p>Returns:</p> Type Description <code>ScrollModeStr</code> <p>horizontal scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_horizontal_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current horizontal scroll mode.\n    Returns:\n        horizontal scroll mode\n    \"\"\"\nreturn SCROLL_MODE.inverse[self.horizontalScrollMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_selection_behavior","title":"<code>get_selection_behavior() -&gt; SelectionBehaviourStr</code>","text":"<p>Return current selection behaviour.</p> <p>Returns:</p> Type Description <code>SelectionBehaviourStr</code> <p>selection behaviour</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_selection_behavior(self) -&gt; SelectionBehaviourStr:\n\"\"\"Return current selection behaviour.\n    Returns:\n        selection behaviour\n    \"\"\"\nreturn SELECTION_BEHAVIOR.inverse[self.selectionBehavior()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_selection_mode","title":"<code>get_selection_mode() -&gt; SelectionModeStr</code>","text":"<p>Return current selection mode.</p> <p>Returns:</p> Type Description <code>SelectionModeStr</code> <p>selection mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n    Returns:\n        selection mode\n    \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_vertical_scroll_mode","title":"<code>get_vertical_scroll_mode() -&gt; ScrollModeStr</code>","text":"<p>Return current vertical scroll mode.</p> <p>Returns:</p> Type Description <code>ScrollModeStr</code> <p>vertical scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_vertical_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current vertical scroll mode.\n    Returns:\n        vertical scroll mode\n    \"\"\"\nreturn SCROLL_MODE.inverse[self.verticalScrollMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.highlight_when_inactive","title":"<code>highlight_when_inactive()</code>","text":"<p>Highlight items when widget does not have focus.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def highlight_when_inactive(self):\n\"\"\"Highlight items when widget does not have focus.\"\"\"\np = self.get_palette()\np.highlight_inactive()\nself.setPalette(p)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.jump_to_column","title":"<code>jump_to_column(col_num: int)</code>","text":"<p>Make sure column at given index is visible.</p> <p>scrolls to column at given index</p> <p>Parameters:</p> Name Type Description Default <code>col_num</code> <code>int</code> <p>column to scroll to</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n    scrolls to column at given index\n    Args:\n        col_num: column to scroll to\n    \"\"\"\nif (model := self.model()) is not None:\nidx = model.index(0, col_num)\nself.scrollTo(idx)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.move_row_selection","title":"<code>move_row_selection(dx: int) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def move_row_selection(self, dx: int) -&gt; None:\nfor row in self.selected_rows():\nnew_idx = self.model().index(row + dx, 0)\nif new_idx.isValid():\nself.set_current_index(new_idx, current=True, expand=\"rows\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.num_selected","title":"<code>num_selected() -&gt; int</code>","text":"<p>Return amount of selected rows.</p> <p>Returns:</p> Type Description <code>int</code> <p>amount of selected rows</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def num_selected(self) -&gt; int:\n\"\"\"Return amount of selected rows.\n    Returns:\n        amount of selected rows\n    \"\"\"\nif (model := self.selectionModel()) is not None:\nreturn len(model.selectedRows())\nreturn 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to","title":"<code>scroll_to(index: QtCore.QModelIndex, mode: ScrollHintStr = 'ensure_visible')</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to(\nself, index: QtCore.QModelIndex, mode: ScrollHintStr = \"ensure_visible\"\n):\nif mode not in SCROLL_HINT:\nraise InvalidParamError(mode, SCROLL_HINT)\nself.scrollTo(index, SCROLL_HINT[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to_bottom","title":"<code>scroll_to_bottom()</code>","text":"<p>Override to use abstractitemview-way of scrolling to bottom.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to_bottom(self):\n\"\"\"Override to use abstractitemview-way of scrolling to bottom.\"\"\"\nself.scrollToBottom()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to_top","title":"<code>scroll_to_top()</code>","text":"<p>Override to use abstractitemview-way of scrolling to top.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to_top(self):\n\"\"\"Override to use abstractitemview-way of scrolling to top.\"\"\"\nself.scrollToTop()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selectAll","title":"<code>selectAll()</code>","text":"<p>Override, we dont want to selectAll for too many items bc of performance.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selectAll(self):\n\"\"\"Override, we dont want to selectAll for too many items bc of performance.\"\"\"\nif self.model() is None:\nreturn\nif self.model().rowCount() * self.model().columnCount() &gt; 1_000_000:\nlogger.warning(\"Too many cells to select.\")\nreturn\nsuper().selectAll()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.select_first_row","title":"<code>select_first_row()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def select_first_row(self):\nidx = self.model().index(0, 0)\nself.set_current_index(idx, current=True, expand=\"rows\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.select_index","title":"<code>select_index(index: QtCore.QModelIndex | None, operation: Literal['select', 'deselect', 'toggle'] = 'select', clear: bool = True, current: bool = False, expand: Literal['rows', 'columns'] | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def select_index(\nself,\nindex: QtCore.QModelIndex | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n# index = self.model().index(self._selected_index)\nif index is None:\nself.selectionModel().select(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().select(index, flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.select_last_row","title":"<code>select_last_row()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def select_last_row(self):\nidx = self.model().createIndex(self.model().rowCount() - 1, 0)\nself.setCurrentIndex(idx)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_data","title":"<code>selected_data() -&gt; Generator[Any, None, None]</code>","text":"<p>Return generator yielding selected userData.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_data(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding selected userData.\"\"\"\nreturn (x.data(constants.USER_ROLE) for x in self.selected_indexes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_indexes","title":"<code>selected_indexes() -&gt; list[QtCore.QModelIndex]</code>","text":"<p>Return list of selected indexes in first row.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_indexes(self) -&gt; list[QtCore.QModelIndex]:\n\"\"\"Return list of selected indexes in first row.\"\"\"\nindexes = (x for x in self.selectedIndexes() if x.column() == 0)\nreturn sorted(indexes, key=lambda x: x.row())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_names","title":"<code>selected_names() -&gt; Generator[Any, None, None]</code>","text":"<p>Return generator yielding item names.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_names(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding item names.\"\"\"\nreturn (x.data(constants.NAME_ROLE) for x in self.selected_indexes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_rows","title":"<code>selected_rows() -&gt; Generator[int, None, None]</code>","text":"<p>Return generator yielding row nums.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_rows(self) -&gt; Generator[int, None, None]:\n\"\"\"Return generator yielding row nums.\"\"\"\nreturn (x.row() for x in self.selected_indexes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_current_index","title":"<code>set_current_index(index: QtCore.QModelIndex | None, operation: Literal['select', 'deselect', 'toggle'] = 'select', clear: bool = True, current: bool = False, expand: Literal['rows', 'columns'] | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_current_index(\nself,\nindex: QtCore.QModelIndex | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n# index = self.model().index(self._selected_index)\nif index is None:\nself.selectionModel().setCurrentIndex(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().setCurrentIndex(index, flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_delegate","title":"<code>set_delegate(delegate: QtWidgets.QAbstractItemDelegate, column: int | None = None, row: int | None = None, persistent: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_delegate(\nself,\ndelegate: QtWidgets.QAbstractItemDelegate,\ncolumn: int | None = None,\nrow: int | None = None,\npersistent: bool = False,\n):\nif column is not None:\nself.setItemDelegateForColumn(column, delegate)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nindex = model.index(i, column)\nself.openPersistentEditor(index)\nelif row is not None:\nself.setItemDelegateForRow(row, delegate)\nif persistent:\nmodel = self.model()\nfor i in range(model.columnCount()):\nself.openPersistentEditor(model.index(row, i))\nelse:\nself.setItemDelegate(delegate)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_drag_drop_mode","title":"<code>set_drag_drop_mode(mode: DragDropModeStr)</code>","text":"<p>Set drag-drop mode for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>DragDropModeStr</code> <p>drag-drop mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_drag_drop_mode(self, mode: DragDropModeStr):\n\"\"\"Set drag-drop mode for given item view.\n    Args:\n        mode: drag-drop mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in DRAG_DROP_MODE:\nraise InvalidParamError(mode, DRAG_DROP_MODE)\nself.setDragDropMode(DRAG_DROP_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_edit_triggers","title":"<code>set_edit_triggers(*triggers: EditTriggerStr | None)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_edit_triggers(self, *triggers: EditTriggerStr | None):\nitems = [\"none\" if t is None else t for t in triggers]\nfor item in items:\nif item not in EDIT_TRIGGERS:\nraise InvalidParamError(item, EDIT_TRIGGERS)\nflags = EDIT_TRIGGERS.merge_flags(items)\nself.setEditTriggers(flags)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_horizontal_scroll_mode","title":"<code>set_horizontal_scroll_mode(mode: ScrollModeStr)</code>","text":"<p>Set the horizontal scroll mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr</code> <p>mode to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_horizontal_scroll_mode(self, mode: ScrollModeStr):\n\"\"\"Set the horizontal scroll mode.\n    Args:\n        mode: mode to set\n    Raises:\n        InvalidParamError: invalid scroll mode\n    \"\"\"\nif mode not in SCROLL_MODE:\nraise InvalidParamError(mode, SCROLL_MODE)\nself.setHorizontalScrollMode(SCROLL_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_icon_size","title":"<code>set_icon_size(size: int | datatypes.SizeType)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_icon_size(self, size: int | datatypes.SizeType):\nif isinstance(size, tuple):\nsize = QtCore.QSize(*size)\nelif isinstance(size, int):\nsize = QtCore.QSize(size, size)\nself.setIconSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_model","title":"<code>set_model(model: QtCore.QAbstractItemModel | None)</code>","text":"<p>Delete old selection model explicitely, seems to help with memory usage.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_model(self, model: QtCore.QAbstractItemModel | None):\n\"\"\"Delete old selection model explicitely, seems to help with memory usage.\"\"\"\nold_model = self.model()\nold_sel_model = self.selectionModel()\nif old_model is not None or model is not None:\nself.setModel(model)\nself.model_changed.emit(model)\n# if old_model:\n#     old_model.deleteLater()\n#     del old_model\nif old_sel_model:\nold_sel_model.deleteLater()\ndel old_sel_model\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_scroll_mode","title":"<code>set_scroll_mode(mode: ScrollModeStr)</code>","text":"<p>Set the scroll mode for both directions.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr</code> <p>mode to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_scroll_mode(self, mode: ScrollModeStr):\n\"\"\"Set the scroll mode for both directions.\n    Args:\n        mode: mode to set\n    Raises:\n        InvalidParamError: invalid scroll mode\n    \"\"\"\nif mode not in SCROLL_MODE:\nraise InvalidParamError(mode, SCROLL_MODE)\nself.setHorizontalScrollMode(SCROLL_MODE[mode])\nself.setVerticalScrollMode(SCROLL_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_selection_behavior","title":"<code>set_selection_behavior(behaviour: SelectionBehaviourStr)</code>","text":"<p>Set selection behaviour for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>behaviour</code> <code>SelectionBehaviourStr</code> <p>selection behaviour to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>behaviour does not exist</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_selection_behavior(self, behaviour: SelectionBehaviourStr):\n\"\"\"Set selection behaviour for given item view.\n    Args:\n        behaviour: selection behaviour to use\n    Raises:\n        InvalidParamError: behaviour does not exist\n    \"\"\"\nif behaviour not in SELECTION_BEHAVIOR:\nraise InvalidParamError(behaviour, SELECTION_BEHAVIOR)\nself.setSelectionBehavior(SELECTION_BEHAVIOR[behaviour])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_selection_mode","title":"<code>set_selection_mode(mode: SelectionModeStr | None)</code>","text":"<p>Set selection mode for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SelectionModeStr | None</code> <p>selection mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_selection_mode(self, mode: SelectionModeStr | None):\n\"\"\"Set selection mode for given item view.\n    Args:\n        mode: selection mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode is None:\nmode = \"none\"\nif mode not in SELECTION_MODE:\nraise InvalidParamError(mode, SELECTION_MODE)\nself.setSelectionMode(SELECTION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_table_color","title":"<code>set_table_color(color: str)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_table_color(self, color: str):\nwith self.edit_stylesheet() as ss:\nss.QHeaderView.section.backgroundColor.setValue(color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_vertical_scroll_mode","title":"<code>set_vertical_scroll_mode(mode: ScrollModeStr)</code>","text":"<p>Set the vertical scroll mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr</code> <p>mode to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid scroll mode</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_vertical_scroll_mode(self, mode: ScrollModeStr):\n\"\"\"Set the vertical scroll mode.\n    Args:\n        mode: mode to set\n    Raises:\n        InvalidParamError: invalid scroll mode\n    \"\"\"\nif mode not in SCROLL_MODE:\nraise InvalidParamError(mode, SCROLL_MODE)\nself.setVerticalScrollMode(SCROLL_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.setup_dragdrop_move","title":"<code>setup_dragdrop_move()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def setup_dragdrop_move(self):\nself.setDragEnabled(True)\nself.setAcceptDrops(True)\nself.setDragDropMode(self.DragDropMode.DragDrop)\nself.setDefaultDropAction(constants.MOVE_ACTION)\nself.setDropIndicatorShown(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.toggle_select_all","title":"<code>toggle_select_all()</code>","text":"<p>Select all items from list (deselect when all selected).</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def toggle_select_all(self):\n\"\"\"Select all items from list (deselect when all selected).\"\"\"\nif self.selectionModel() is None:\nreturn\nif self.selectionModel().hasSelection():\nself.clearSelection()\nelse:\nself.selectAll()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractScrollArea","title":"<code>AbstractScrollArea</code>","text":"<p>         Bases: <code>AbstractScrollAreaMixin</code>, <code>QtWidgets.QAbstractScrollArea</code></p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>class AbstractScrollArea(AbstractScrollAreaMixin, QtWidgets.QAbstractScrollArea):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractScrollAreaMixin","title":"<code>AbstractScrollAreaMixin</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>class AbstractScrollAreaMixin(widgets.FrameMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setHorizontalScrollBar(widgets.ScrollBar(parent=self))\nself.setVerticalScrollBar(widgets.ScrollBar(parent=self))\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"horizontalScrollBarPolicy\": constants.SCROLLBAR_POLICY,\n\"sizeAdjustPolicy\": SIZE_ADJUST_POLICY,\n\"verticalScrollBarPolicy\": constants.SCROLLBAR_POLICY,\n}\nreturn maps\n@property\ndef h_scrollbar(self):\nreturn self.horizontalScrollBar()\n@h_scrollbar.setter\ndef h_scrollbar(self, scrollbar):\nself.setHorizontalScrollBar(scrollbar)\n@property\ndef v_scrollbar(self):\nreturn self.verticalScrollBar()\n@v_scrollbar.setter\ndef v_scrollbar(self, scrollbar):\nself.setVerticalScrollBar(scrollbar)\ndef scroll_by_pixels(self, x: int = 0, y: int = 0):\nnew_x = self.h_scrollbar.value() + x\nx_val = max(min(new_x, self.h_scrollbar.maximum()), self.h_scrollbar.minimum())\nnew_y = self.h_scrollbar.value() + y\ny_val = max(min(new_y, self.v_scrollbar.maximum()), self.v_scrollbar.minimum())\nself.h_scrollbar.setValue(x_val)\nself.v_scrollbar.setValue(y_val)\ndef set_size_adjust_policy(self, policy: SizeAdjustPolicyStr):\n\"\"\"Set size adjust policy.\n        Args:\n            policy: size adjust policy to use\n        Raises:\n            InvalidParamError: invalid size adjust policy\n        \"\"\"\nif policy not in SIZE_ADJUST_POLICY:\nraise InvalidParamError(policy, SIZE_ADJUST_POLICY)\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY[policy])\ndef get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n        Returns:\n            size adjust policy\n        \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\ndef set_scrollbar_smooth(\nself,\nvalue: bool = True,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr = \"out_cubic\",\n):\nif value:\nself.h_scrollbar = widgets.SmoothScrollBar(\n\"horizontal\",\nparent=self,\nanimation_duration=animation_duration,\neasing=easing,\n)\nself.v_scrollbar = widgets.SmoothScrollBar(\n\"vertical\",\nparent=self,\nanimation_duration=animation_duration,\neasing=easing,\n)\nelse:\nself.h_scrollbar = widgets.ScrollBar(parent=self)\nself.v_scrollbar = widgets.ScrollBar(parent=self)\ndef set_scrollbar_policy(self, mode: constants.ScrollBarPolicyStr):\n\"\"\"Set the policy for both scrollbars.\n        Args:\n            mode: visibilty to set\n        Raises:\n            InvalidParamError: invalid scrollbar policy\n        \"\"\"\nif mode not in constants.SCROLLBAR_POLICY:\nraise InvalidParamError(mode, constants.SCROLLBAR_POLICY)\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\ndef set_horizontal_scrollbar_policy(self, mode: constants.ScrollBarPolicyStr):\n\"\"\"Set the horizontal scrollbar visibility.\n        Args:\n            mode: visibilty to set\n        Raises:\n            InvalidParamError: invalid scrollbar policy\n        \"\"\"\nif mode not in constants.SCROLLBAR_POLICY:\nraise InvalidParamError(mode, constants.SCROLLBAR_POLICY)\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\ndef get_horizontal_scrollbar_policy(self):\nreturn constants.SCROLLBAR_POLICY.inverse[self.horizontalScrollBarPolicy()]\ndef set_vertical_scrollbar_policy(self, mode: constants.ScrollBarPolicyStr):\n\"\"\"Set the vertical scrollbar visibility.\n        Args:\n            mode: visibilty to set\n        Raises:\n            InvalidParamError: invalid scrollbar policy\n        \"\"\"\nif mode not in constants.SCROLLBAR_POLICY:\nraise InvalidParamError(mode, constants.SCROLLBAR_POLICY)\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\ndef get_vertical_scrollbar_policy(self):\nreturn constants.SCROLLBAR_POLICY.inverse[self.verticalScrollBarPolicy()]\ndef set_scrollbar_width(self, width: int):\n\"\"\"Set the width for both scrollbars.\n        Args:\n            width: width in pixels\n        \"\"\"\nself.set_horizontal_scrollbar_width(width)\nself.set_vertical_scrollbar_width(width)\ndef set_horizontal_scrollbar_width(self, width: int):\n\"\"\"Set the horizontal scrollbar width.\n        Args:\n            width: width in pixels\n        \"\"\"\nwith self.h_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\ndef set_vertical_scrollbar_width(self, width: int):\n\"\"\"Set the vertical scrollbar width.\n        Args:\n            width: width in pixels\n        \"\"\"\nwith self.v_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\ndef scroll_to_top(self):\n\"\"\"Scroll to the top of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_min()\ndef scroll_to_bottom(self):\n\"\"\"Scroll to the bottom of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_max()\ndef set_viewport_margins(self, margins: int):\nself.setViewportMargins(margins, margins, margins, margins)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.h_scrollbar","title":"<code>h_scrollbar</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.v_scrollbar","title":"<code>v_scrollbar</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setHorizontalScrollBar(widgets.ScrollBar(parent=self))\nself.setVerticalScrollBar(widgets.ScrollBar(parent=self))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.get_horizontal_scrollbar_policy","title":"<code>get_horizontal_scrollbar_policy()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def get_horizontal_scrollbar_policy(self):\nreturn constants.SCROLLBAR_POLICY.inverse[self.horizontalScrollBarPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.get_size_adjust_policy","title":"<code>get_size_adjust_policy() -&gt; SizeAdjustPolicyStr</code>","text":"<p>Return size adjust policy.</p> <p>Returns:</p> Type Description <code>SizeAdjustPolicyStr</code> <p>size adjust policy</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n    Returns:\n        size adjust policy\n    \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.get_vertical_scrollbar_policy","title":"<code>get_vertical_scrollbar_policy()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def get_vertical_scrollbar_policy(self):\nreturn constants.SCROLLBAR_POLICY.inverse[self.verticalScrollBarPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_by_pixels","title":"<code>scroll_by_pixels(x: int = 0, y: int = 0)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_by_pixels(self, x: int = 0, y: int = 0):\nnew_x = self.h_scrollbar.value() + x\nx_val = max(min(new_x, self.h_scrollbar.maximum()), self.h_scrollbar.minimum())\nnew_y = self.h_scrollbar.value() + y\ny_val = max(min(new_y, self.v_scrollbar.maximum()), self.v_scrollbar.minimum())\nself.h_scrollbar.setValue(x_val)\nself.v_scrollbar.setValue(y_val)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_to_bottom","title":"<code>scroll_to_bottom()</code>","text":"<p>Scroll to the bottom of the scroll area.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_to_bottom(self):\n\"\"\"Scroll to the bottom of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_max()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_to_top","title":"<code>scroll_to_top()</code>","text":"<p>Scroll to the top of the scroll area.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_to_top(self):\n\"\"\"Scroll to the top of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_min()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_horizontal_scrollbar_policy","title":"<code>set_horizontal_scrollbar_policy(mode: constants.ScrollBarPolicyStr)</code>","text":"<p>Set the horizontal scrollbar visibility.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr</code> <p>visibilty to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid scrollbar policy</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_horizontal_scrollbar_policy(self, mode: constants.ScrollBarPolicyStr):\n\"\"\"Set the horizontal scrollbar visibility.\n    Args:\n        mode: visibilty to set\n    Raises:\n        InvalidParamError: invalid scrollbar policy\n    \"\"\"\nif mode not in constants.SCROLLBAR_POLICY:\nraise InvalidParamError(mode, constants.SCROLLBAR_POLICY)\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_horizontal_scrollbar_width","title":"<code>set_horizontal_scrollbar_width(width: int)</code>","text":"<p>Set the horizontal scrollbar width.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_horizontal_scrollbar_width(self, width: int):\n\"\"\"Set the horizontal scrollbar width.\n    Args:\n        width: width in pixels\n    \"\"\"\nwith self.h_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_policy","title":"<code>set_scrollbar_policy(mode: constants.ScrollBarPolicyStr)</code>","text":"<p>Set the policy for both scrollbars.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr</code> <p>visibilty to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid scrollbar policy</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_policy(self, mode: constants.ScrollBarPolicyStr):\n\"\"\"Set the policy for both scrollbars.\n    Args:\n        mode: visibilty to set\n    Raises:\n        InvalidParamError: invalid scrollbar policy\n    \"\"\"\nif mode not in constants.SCROLLBAR_POLICY:\nraise InvalidParamError(mode, constants.SCROLLBAR_POLICY)\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_smooth","title":"<code>set_scrollbar_smooth(value: bool = True, animation_duration: int = 500, easing: core.easingcurve.TypeStr = 'out_cubic')</code>","text":"Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_smooth(\nself,\nvalue: bool = True,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr = \"out_cubic\",\n):\nif value:\nself.h_scrollbar = widgets.SmoothScrollBar(\n\"horizontal\",\nparent=self,\nanimation_duration=animation_duration,\neasing=easing,\n)\nself.v_scrollbar = widgets.SmoothScrollBar(\n\"vertical\",\nparent=self,\nanimation_duration=animation_duration,\neasing=easing,\n)\nelse:\nself.h_scrollbar = widgets.ScrollBar(parent=self)\nself.v_scrollbar = widgets.ScrollBar(parent=self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_width","title":"<code>set_scrollbar_width(width: int)</code>","text":"<p>Set the width for both scrollbars.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_width(self, width: int):\n\"\"\"Set the width for both scrollbars.\n    Args:\n        width: width in pixels\n    \"\"\"\nself.set_horizontal_scrollbar_width(width)\nself.set_vertical_scrollbar_width(width)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_size_adjust_policy","title":"<code>set_size_adjust_policy(policy: SizeAdjustPolicyStr)</code>","text":"<p>Set size adjust policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizeAdjustPolicyStr</code> <p>size adjust policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid size adjust policy</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_size_adjust_policy(self, policy: SizeAdjustPolicyStr):\n\"\"\"Set size adjust policy.\n    Args:\n        policy: size adjust policy to use\n    Raises:\n        InvalidParamError: invalid size adjust policy\n    \"\"\"\nif policy not in SIZE_ADJUST_POLICY:\nraise InvalidParamError(policy, SIZE_ADJUST_POLICY)\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_vertical_scrollbar_policy","title":"<code>set_vertical_scrollbar_policy(mode: constants.ScrollBarPolicyStr)</code>","text":"<p>Set the vertical scrollbar visibility.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr</code> <p>visibilty to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid scrollbar policy</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_vertical_scrollbar_policy(self, mode: constants.ScrollBarPolicyStr):\n\"\"\"Set the vertical scrollbar visibility.\n    Args:\n        mode: visibilty to set\n    Raises:\n        InvalidParamError: invalid scrollbar policy\n    \"\"\"\nif mode not in constants.SCROLLBAR_POLICY:\nraise InvalidParamError(mode, constants.SCROLLBAR_POLICY)\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_vertical_scrollbar_width","title":"<code>set_vertical_scrollbar_width(width: int)</code>","text":"<p>Set the vertical scrollbar width.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_vertical_scrollbar_width(self, width: int):\n\"\"\"Set the vertical scrollbar width.\n    Args:\n        width: width in pixels\n    \"\"\"\nwith self.v_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_viewport_margins","title":"<code>set_viewport_margins(margins: int)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_viewport_margins(self, margins: int):\nself.setViewportMargins(margins, margins, margins, margins)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractSlider","title":"<code>AbstractSlider</code>","text":"<p>         Bases: <code>AbstractSliderMixin</code>, <code>QtWidgets.QAbstractSlider</code></p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>class AbstractSlider(AbstractSliderMixin, QtWidgets.QAbstractSlider):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractSliderMixin","title":"<code>AbstractSliderMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>class AbstractSliderMixin(widgets.WidgetMixin):\nvalue_changed = core.Signal(int)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"orientation\": constants.ORIENTATION,\n}\nreturn maps\ndef on_value_change(self):\nself.value_changed.emit(self.value())\ndef is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n        Returns:\n            True if horizontal, else False\n        \"\"\"\nreturn self.orientation() == constants.HORIZONTAL\ndef is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n        Returns:\n            True if vertical, else False\n        \"\"\"\nreturn self.orientation() == constants.VERTICAL\ndef set_horizontal(self):\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.setOrientation(constants.HORIZONTAL)\ndef set_vertical(self):\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.setOrientation(constants.VERTICAL)\ndef set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the slider.\n        Args:\n            orientation: orientation for the slider\n        Raises:\n            InvalidParamError: orientation does not exist\n        \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef scroll_to_min(self):\n\"\"\"Scroll to the minimum value of the slider.\"\"\"\nself.setValue(self.minimum())\ndef scroll_to_max(self):\n\"\"\"Scroll to the maximum value of the slider.\"\"\"\nself.setValue(self.maximum())\ndef set_range(self, min_val: int, max_val: int):\nself.setRange(min_val, max_val)\ndef set_step_size(self, step_size: int):\nself.setSingleStep(step_size)\ndef set_repeat_action(\nself, action: SliderActionStr, threshold: int = 500, repeat_time: int = 50\n):\n\"\"\"Set the repeat action.\n        Args:\n            action: repeat action\n            threshold: initial delay in ms\n            repeat_time: repeat time in ms\n        Raises:\n            InvalidParamError: invalid repeat action\n        \"\"\"\nif action not in SLIDER_ACTION:\nraise InvalidParamError(action, SLIDER_ACTION)\nself.setRepeatAction(SLIDER_ACTION[action], threshold, repeat_time)\ndef get_repeat_action(self) -&gt; SliderActionStr:\n\"\"\"Get current repeat action.\n        Returns:\n            current repeat action\n        \"\"\"\nreturn SLIDER_ACTION.inverse[self.repeatAction()]\ndef trigger_action(self, action: SliderActionStr):\n\"\"\"Trigger slider action.\"\"\"\nif action not in SLIDER_ACTION:\nraise InvalidParamError(action, SLIDER_ACTION)\nself.triggerAction(SLIDER_ACTION[action])\ndef get_value(self):\nreturn self.value()\ndef set_value(self, value: int):\nself.setValue(value)\ndef on_scrollbar_range_changed(self, minval, maxval):\nif self.value() &gt;= self.maximum() - 1:\nself.setValue(maxval)\ndef set_auto_scroll_to_end(self, scroll: bool = True):\n\"\"\"Set to always scroll to the end when range changes.\"\"\"\nif scroll:\nself.rangeChanged.connect(self.on_scrollbar_range_changed)\nelse:\nself.rangeChanged.disconnect(self.on_scrollbar_range_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_repeat_action","title":"<code>get_repeat_action() -&gt; SliderActionStr</code>","text":"<p>Get current repeat action.</p> <p>Returns:</p> Type Description <code>SliderActionStr</code> <p>current repeat action</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_repeat_action(self) -&gt; SliderActionStr:\n\"\"\"Get current repeat action.\n    Returns:\n        current repeat action\n    \"\"\"\nreturn SLIDER_ACTION.inverse[self.repeatAction()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_value","title":"<code>get_value()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_value(self):\nreturn self.value()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.is_horizontal","title":"<code>is_horizontal() -&gt; bool</code>","text":"<p>Check if silder is horizontal.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if horizontal, else False</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n    Returns:\n        True if horizontal, else False\n    \"\"\"\nreturn self.orientation() == constants.HORIZONTAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.is_vertical","title":"<code>is_vertical() -&gt; bool</code>","text":"<p>Check if silder is vertical.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if vertical, else False</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n    Returns:\n        True if vertical, else False\n    \"\"\"\nreturn self.orientation() == constants.VERTICAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.on_scrollbar_range_changed","title":"<code>on_scrollbar_range_changed(minval, maxval)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def on_scrollbar_range_changed(self, minval, maxval):\nif self.value() &gt;= self.maximum() - 1:\nself.setValue(maxval)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.on_value_change","title":"<code>on_value_change()</code>","text":"Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def on_value_change(self):\nself.value_changed.emit(self.value())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.scroll_to_max","title":"<code>scroll_to_max()</code>","text":"<p>Scroll to the maximum value of the slider.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def scroll_to_max(self):\n\"\"\"Scroll to the maximum value of the slider.\"\"\"\nself.setValue(self.maximum())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.scroll_to_min","title":"<code>scroll_to_min()</code>","text":"<p>Scroll to the minimum value of the slider.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def scroll_to_min(self):\n\"\"\"Scroll to the minimum value of the slider.\"\"\"\nself.setValue(self.minimum())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_auto_scroll_to_end","title":"<code>set_auto_scroll_to_end(scroll: bool = True)</code>","text":"<p>Set to always scroll to the end when range changes.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_auto_scroll_to_end(self, scroll: bool = True):\n\"\"\"Set to always scroll to the end when range changes.\"\"\"\nif scroll:\nself.rangeChanged.connect(self.on_scrollbar_range_changed)\nelse:\nself.rangeChanged.disconnect(self.on_scrollbar_range_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_horizontal","title":"<code>set_horizontal()</code>","text":"<p>Set slider orientation to horizontal.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_horizontal(self):\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.setOrientation(constants.HORIZONTAL)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr)</code>","text":"<p>Set the orientation of the slider.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr</code> <p>orientation for the slider</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>orientation does not exist</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the slider.\n    Args:\n        orientation: orientation for the slider\n    Raises:\n        InvalidParamError: orientation does not exist\n    \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_range","title":"<code>set_range(min_val: int, max_val: int)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_range(self, min_val: int, max_val: int):\nself.setRange(min_val, max_val)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_repeat_action","title":"<code>set_repeat_action(action: SliderActionStr, threshold: int = 500, repeat_time: int = 50)</code>","text":"<p>Set the repeat action.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>SliderActionStr</code> <p>repeat action</p> required <code>threshold</code> <code>int</code> <p>initial delay in ms</p> <code>500</code> <code>repeat_time</code> <code>int</code> <p>repeat time in ms</p> <code>50</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid repeat action</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_repeat_action(\nself, action: SliderActionStr, threshold: int = 500, repeat_time: int = 50\n):\n\"\"\"Set the repeat action.\n    Args:\n        action: repeat action\n        threshold: initial delay in ms\n        repeat_time: repeat time in ms\n    Raises:\n        InvalidParamError: invalid repeat action\n    \"\"\"\nif action not in SLIDER_ACTION:\nraise InvalidParamError(action, SLIDER_ACTION)\nself.setRepeatAction(SLIDER_ACTION[action], threshold, repeat_time)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_step_size","title":"<code>set_step_size(step_size: int)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_step_size(self, step_size: int):\nself.setSingleStep(step_size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_value","title":"<code>set_value(value: int)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_value(self, value: int):\nself.setValue(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_vertical","title":"<code>set_vertical()</code>","text":"<p>Set slider orientation to vertical.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_vertical(self):\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.setOrientation(constants.VERTICAL)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.trigger_action","title":"<code>trigger_action(action: SliderActionStr)</code>","text":"<p>Trigger slider action.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def trigger_action(self, action: SliderActionStr):\n\"\"\"Trigger slider action.\"\"\"\nif action not in SLIDER_ACTION:\nraise InvalidParamError(action, SLIDER_ACTION)\nself.triggerAction(SLIDER_ACTION[action])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractSpinBox","title":"<code>AbstractSpinBox</code>","text":"<p>         Bases: <code>AbstractSpinBoxMixin</code>, <code>QtWidgets.QAbstractSpinBox</code></p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>class AbstractSpinBox(AbstractSpinBoxMixin, QtWidgets.QAbstractSpinBox):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.AbstractSpinBoxMixin","title":"<code>AbstractSpinBoxMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>class AbstractSpinBoxMixin(widgets.WidgetMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setLineEdit(widgets.LineEdit())\nself.setGroupSeparatorShown(True)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"alignment\": constants.ALIGNMENTS,\n\"buttonSymbols\": SYMBOLS,\n\"correctionMode\": CORRECTION_MODES,\n}\nreturn maps\ndef is_valid(self) -&gt; bool:\nreturn self.hasAcceptableInput()\ndef set_validator(self, validator: gui.Validator):\nself.lineEdit().setValidator(validator)\ndef get_button_symbols(self) -&gt; SymbolStr:\n\"\"\"Return button symbol type.\n        Returns:\n            button symbol type\n        \"\"\"\nreturn SYMBOLS.inverse[self.buttonSymbols()]\ndef set_button_symbols(self, mode: SymbolStr):\n\"\"\"Set button symbol type.\n        Args:\n            mode: button symbol type to use\n        Raises:\n            InvalidParamError: invalid button symbol type\n        \"\"\"\nif mode not in SYMBOLS:\nraise InvalidParamError(mode, SYMBOLS)\nself.setButtonSymbols(SYMBOLS[mode])\ndef set_correction_mode(self, mode: CorrectionModeStr):\n\"\"\"Set correction mode.\n        Args:\n            mode: correction mode to use\n        Raises:\n            InvalidParamError: invalid correction mode\n        \"\"\"\nif mode not in CORRECTION_MODES:\nraise InvalidParamError(mode, CORRECTION_MODES)\nself.setCorrectionMode(CORRECTION_MODES[mode])\ndef get_correction_mode(self) -&gt; CorrectionModeStr:\n\"\"\"Return correction mode.\n        Returns:\n            correction mode\n        \"\"\"\nreturn CORRECTION_MODES.inverse[self.correctionMode()]\ndef set_step_type(self, mode: StepTypeStr):\n\"\"\"Set step type.\n        Args:\n            mode: step type to use\n        Raises:\n            InvalidParamError: invalid step type\n        \"\"\"\nif mode not in STEP_TYPES:\nraise InvalidParamError(mode, STEP_TYPES)\nself.setStepType(STEP_TYPES[mode])\ndef get_step_type(self) -&gt; StepTypeStr:\n\"\"\"Return step type.\n        Returns:\n            step type\n        \"\"\"\nreturn STEP_TYPES.inverse[self.stepType()]\ndef set_special_value(self, value: str):\nself.setSpecialValueText(value)\ndef get_value(self) -&gt; int:\nreturn self.value()\ndef set_value(self, value: int | float):\nself.setValue(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setLineEdit(widgets.LineEdit())\nself.setGroupSeparatorShown(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_button_symbols","title":"<code>get_button_symbols() -&gt; SymbolStr</code>","text":"<p>Return button symbol type.</p> <p>Returns:</p> Type Description <code>SymbolStr</code> <p>button symbol type</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_button_symbols(self) -&gt; SymbolStr:\n\"\"\"Return button symbol type.\n    Returns:\n        button symbol type\n    \"\"\"\nreturn SYMBOLS.inverse[self.buttonSymbols()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_correction_mode","title":"<code>get_correction_mode() -&gt; CorrectionModeStr</code>","text":"<p>Return correction mode.</p> <p>Returns:</p> Type Description <code>CorrectionModeStr</code> <p>correction mode</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_correction_mode(self) -&gt; CorrectionModeStr:\n\"\"\"Return correction mode.\n    Returns:\n        correction mode\n    \"\"\"\nreturn CORRECTION_MODES.inverse[self.correctionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_step_type","title":"<code>get_step_type() -&gt; StepTypeStr</code>","text":"<p>Return step type.</p> <p>Returns:</p> Type Description <code>StepTypeStr</code> <p>step type</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_step_type(self) -&gt; StepTypeStr:\n\"\"\"Return step type.\n    Returns:\n        step type\n    \"\"\"\nreturn STEP_TYPES.inverse[self.stepType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_value","title":"<code>get_value() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_value(self) -&gt; int:\nreturn self.value()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn self.hasAcceptableInput()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_button_symbols","title":"<code>set_button_symbols(mode: SymbolStr)</code>","text":"<p>Set button symbol type.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SymbolStr</code> <p>button symbol type to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid button symbol type</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_button_symbols(self, mode: SymbolStr):\n\"\"\"Set button symbol type.\n    Args:\n        mode: button symbol type to use\n    Raises:\n        InvalidParamError: invalid button symbol type\n    \"\"\"\nif mode not in SYMBOLS:\nraise InvalidParamError(mode, SYMBOLS)\nself.setButtonSymbols(SYMBOLS[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_correction_mode","title":"<code>set_correction_mode(mode: CorrectionModeStr)</code>","text":"<p>Set correction mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CorrectionModeStr</code> <p>correction mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid correction mode</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_correction_mode(self, mode: CorrectionModeStr):\n\"\"\"Set correction mode.\n    Args:\n        mode: correction mode to use\n    Raises:\n        InvalidParamError: invalid correction mode\n    \"\"\"\nif mode not in CORRECTION_MODES:\nraise InvalidParamError(mode, CORRECTION_MODES)\nself.setCorrectionMode(CORRECTION_MODES[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_special_value","title":"<code>set_special_value(value: str)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_special_value(self, value: str):\nself.setSpecialValueText(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_step_type","title":"<code>set_step_type(mode: StepTypeStr)</code>","text":"<p>Set step type.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>StepTypeStr</code> <p>step type to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid step type</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_step_type(self, mode: StepTypeStr):\n\"\"\"Set step type.\n    Args:\n        mode: step type to use\n    Raises:\n        InvalidParamError: invalid step type\n    \"\"\"\nif mode not in STEP_TYPES:\nraise InvalidParamError(mode, STEP_TYPES)\nself.setStepType(STEP_TYPES[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_validator","title":"<code>set_validator(validator: gui.Validator)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_validator(self, validator: gui.Validator):\nself.lineEdit().setValidator(validator)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_value","title":"<code>set_value(value: int | float)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_value(self, value: int | float):\nself.setValue(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Application","title":"<code>Application</code>","text":"<p>         Bases: <code>ApplicationMixin</code>, <code>QtWidgets.QApplication</code></p> Source code in <code>prettyqt\\widgets\\application.py</code> <pre><code>class Application(ApplicationMixin, QtWidgets.QApplication):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.BoxLayout","title":"<code>BoxLayout</code>","text":"<p>         Bases: <code>BoxLayoutMixin</code>, <code>QtWidgets.QBoxLayout</code></p> Source code in <code>prettyqt\\widgets\\boxlayout.py</code> <pre><code>class BoxLayout(BoxLayoutMixin, QtWidgets.QBoxLayout):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ButtonGroup","title":"<code>ButtonGroup</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QButtonGroup</code></p> Source code in <code>prettyqt\\widgets\\buttongroup.py</code> <pre><code>class ButtonGroup(core.ObjectMixin, QtWidgets.QButtonGroup):\ndef serialize_fields(self):\nreturn dict(exclusive=self.exclusive())\ndef __getitem__(self, index: int) -&gt; QtWidgets.QAbstractButton:\nreturn self.button(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.buttongroup.ButtonGroup.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QAbstractButton</code>","text":"Source code in <code>prettyqt\\widgets\\buttongroup.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QAbstractButton:\nreturn self.button(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.buttongroup.ButtonGroup.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\buttongroup.py</code> <pre><code>def serialize_fields(self):\nreturn dict(exclusive=self.exclusive())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.CalendarWidget","title":"<code>CalendarWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QCalendarWidget</code></p> Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>class CalendarWidget(widgets.WidgetMixin, QtWidgets.QCalendarWidget):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"firstDayOfWeek\": constants.DAY_OF_WEEK,\n\"horizontalHeaderFormat\": HORIZONTAL_HEADER_FORMAT,\n\"verticalHeaderFormat\": VERTICAL_HEADER_FORMAT,\n\"selectionMode\": SELECTION_MODE,\n}\nreturn maps\ndef get_date(self) -&gt; datetime.date:\nreturn self.selectedDate().toPython()\ndef get_value(self) -&gt; datetime.date:\nreturn self.get_date()\ndef set_value(self, value: datatypes.DateType):\nif isinstance(value, str):\nvalue = QtCore.QDate.fromString(value)\nself.setSelectedDate(value)\ndef set_range(\nself,\nlower: datatypes.DateType,\nupper: datatypes.DateType,\n):\nif isinstance(lower, str):\nlower = QtCore.QDate.fromString(lower)\nif isinstance(upper, str):\nupper = QtCore.QDate.fromString(upper)\nself.setMinimumDate(lower)\nself.setMaximumDate(upper)\ndef set_selection_mode(self, mode: SelectionModeStr | None):\n\"\"\"Set selection mode for given calendar widget.\n        Args:\n            mode: selection mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode is None:\nmode = \"none\"\nif mode not in SELECTION_MODE:\nraise InvalidParamError(mode, SELECTION_MODE)\nself.setSelectionMode(SELECTION_MODE[mode])\ndef get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n        Returns:\n            selection mode\n        \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.get_date","title":"<code>get_date() -&gt; datetime.date</code>","text":"Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def get_date(self) -&gt; datetime.date:\nreturn self.selectedDate().toPython()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.get_selection_mode","title":"<code>get_selection_mode() -&gt; SelectionModeStr</code>","text":"<p>Return current selection mode.</p> <p>Returns:</p> Type Description <code>SelectionModeStr</code> <p>selection mode</p> Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n    Returns:\n        selection mode\n    \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.get_value","title":"<code>get_value() -&gt; datetime.date</code>","text":"Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def get_value(self) -&gt; datetime.date:\nreturn self.get_date()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.set_range","title":"<code>set_range(lower: datatypes.DateType, upper: datatypes.DateType)</code>","text":"Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def set_range(\nself,\nlower: datatypes.DateType,\nupper: datatypes.DateType,\n):\nif isinstance(lower, str):\nlower = QtCore.QDate.fromString(lower)\nif isinstance(upper, str):\nupper = QtCore.QDate.fromString(upper)\nself.setMinimumDate(lower)\nself.setMaximumDate(upper)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.set_selection_mode","title":"<code>set_selection_mode(mode: SelectionModeStr | None)</code>","text":"<p>Set selection mode for given calendar widget.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SelectionModeStr | None</code> <p>selection mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def set_selection_mode(self, mode: SelectionModeStr | None):\n\"\"\"Set selection mode for given calendar widget.\n    Args:\n        mode: selection mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode is None:\nmode = \"none\"\nif mode not in SELECTION_MODE:\nraise InvalidParamError(mode, SELECTION_MODE)\nself.setSelectionMode(SELECTION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.calendarwidget.CalendarWidget.set_value","title":"<code>set_value(value: datatypes.DateType)</code>","text":"Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def set_value(self, value: datatypes.DateType):\nif isinstance(value, str):\nvalue = QtCore.QDate.fromString(value)\nself.setSelectedDate(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.CheckBox","title":"<code>CheckBox</code>","text":"<p>         Bases: <code>widgets.AbstractButtonMixin</code>, <code>QtWidgets.QCheckBox</code></p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>class CheckBox(widgets.AbstractButtonMixin, QtWidgets.QCheckBox):\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.stateChanged.connect(self.value_changed)\ndef set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        Raises:\n            InvalidParamError: invalid checkstate\n        \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\ndef get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.checkbox.CheckBox.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.checkbox.CheckBox.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.stateChanged.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.checkbox.CheckBox.get_checkstate","title":"<code>get_checkstate() -&gt; constants.StateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.StateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.checkbox.CheckBox.set_checkstate","title":"<code>set_checkstate(state: constants.StateStr)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.StateStr</code> <p>checkstate to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid checkstate</p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    Raises:\n        InvalidParamError: invalid checkstate\n    \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ColorDialog","title":"<code>ColorDialog</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QColorDialog</code></p> Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>class ColorDialog(widgets.DialogMixin, QtWidgets.QColorDialog):\n@classmethod\ndef get_color(\ncls,\npreset: datatypes.ColorType = None,\nallow_alpha: bool = False,\nparent: QtWidgets.QWidget | None = None,\n) -&gt; gui.Color:\npreset = colors.get_color(preset)\nkwargs = (\ndict(options=cls.ColorDialogOption.ShowAlphaChannel) if allow_alpha else {}\n)\ncolor = cls.getColor(preset, parent, **kwargs)  # type: ignore\nreturn gui.Color(color)\ndef current_color(self) -&gt; gui.Color:\nreturn gui.Color(self.currentColor())\ndef get_qcolorshower(self) -&gt; QtWidgets.QWidget:\nreturn [\na\nfor a in self.children()\nif hasattr(a, \"metaObject\") and a.metaObject().className() == \"QColorShower\"\n][0]\ndef get_qcolorshowlabel(self) -&gt; QtWidgets.QFrame:\nqcs = self.get_qcolorshower()\nreturn [\nb\nfor b in qcs.children()\nif hasattr(b, \"metaObject\")\nand b.metaObject().className() == \"QColorShowLabel\"\n][0]\ndef replace_qcolorshowlabel(self, widget: QtWidgets.QWidget):\n# Find the dialog widget used to display the current\n# color, so we can replace it with our implementation\nqcs = self.get_qcolorshower()\nqcsl = self.get_qcolorshowlabel()\nqcs.layout().replaceWidget(qcsl, widget)\n# Make sure it doesn't receive signals while hidden\nqcsl.blockSignals(True)\nqcsl.hide()\nwidget.show()\ndef use_alpha_channel(self, value: bool = True):\nself.setOption(self.ColorDialogOption.ShowAlphaChannel, value)\ndef hide_buttons(self, value: bool = True):\nself.setOption(self.ColorDialogOption.NoButtons, value)\ndef use_native_dialog(self, value: bool = True):\nself.setOption(self.ColorDialogOption.DontUseNativeDialog, not value)\n@classmethod\ndef get_custom_colors(cls) -&gt; list[gui.Color]:\nreturn [gui.Color(cls.customColor(i)) for i in range(cls.customCount())]\n@classmethod\ndef set_custom_colors(cls, colors_: list[datatypes.ColorType]):\nnum = min(len(colors_), cls.customCount())\nfor i in range(num):\ncolor = colors.get_color(colors_[i])\ncls.setCustomColor(i, color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.current_color","title":"<code>current_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def current_color(self) -&gt; gui.Color:\nreturn gui.Color(self.currentColor())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.get_color","title":"<code>get_color(preset: datatypes.ColorType = None, allow_alpha: bool = False, parent: QtWidgets.QWidget | None = None) -&gt; gui.Color</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>@classmethod\ndef get_color(\ncls,\npreset: datatypes.ColorType = None,\nallow_alpha: bool = False,\nparent: QtWidgets.QWidget | None = None,\n) -&gt; gui.Color:\npreset = colors.get_color(preset)\nkwargs = (\ndict(options=cls.ColorDialogOption.ShowAlphaChannel) if allow_alpha else {}\n)\ncolor = cls.getColor(preset, parent, **kwargs)  # type: ignore\nreturn gui.Color(color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.get_custom_colors","title":"<code>get_custom_colors() -&gt; list[gui.Color]</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>@classmethod\ndef get_custom_colors(cls) -&gt; list[gui.Color]:\nreturn [gui.Color(cls.customColor(i)) for i in range(cls.customCount())]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.get_qcolorshower","title":"<code>get_qcolorshower() -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def get_qcolorshower(self) -&gt; QtWidgets.QWidget:\nreturn [\na\nfor a in self.children()\nif hasattr(a, \"metaObject\") and a.metaObject().className() == \"QColorShower\"\n][0]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.get_qcolorshowlabel","title":"<code>get_qcolorshowlabel() -&gt; QtWidgets.QFrame</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def get_qcolorshowlabel(self) -&gt; QtWidgets.QFrame:\nqcs = self.get_qcolorshower()\nreturn [\nb\nfor b in qcs.children()\nif hasattr(b, \"metaObject\")\nand b.metaObject().className() == \"QColorShowLabel\"\n][0]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.hide_buttons","title":"<code>hide_buttons(value: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def hide_buttons(self, value: bool = True):\nself.setOption(self.ColorDialogOption.NoButtons, value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.replace_qcolorshowlabel","title":"<code>replace_qcolorshowlabel(widget: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def replace_qcolorshowlabel(self, widget: QtWidgets.QWidget):\n# Find the dialog widget used to display the current\n# color, so we can replace it with our implementation\nqcs = self.get_qcolorshower()\nqcsl = self.get_qcolorshowlabel()\nqcs.layout().replaceWidget(qcsl, widget)\n# Make sure it doesn't receive signals while hidden\nqcsl.blockSignals(True)\nqcsl.hide()\nwidget.show()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.set_custom_colors","title":"<code>set_custom_colors(colors_: list[datatypes.ColorType])</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>@classmethod\ndef set_custom_colors(cls, colors_: list[datatypes.ColorType]):\nnum = min(len(colors_), cls.customCount())\nfor i in range(num):\ncolor = colors.get_color(colors_[i])\ncls.setCustomColor(i, color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.use_alpha_channel","title":"<code>use_alpha_channel(value: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def use_alpha_channel(self, value: bool = True):\nself.setOption(self.ColorDialogOption.ShowAlphaChannel, value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.colordialog.ColorDialog.use_native_dialog","title":"<code>use_native_dialog(value: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>def use_native_dialog(self, value: bool = True):\nself.setOption(self.ColorDialogOption.DontUseNativeDialog, not value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ColumnView","title":"<code>ColumnView</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code>, <code>QtWidgets.QColumnView</code></p> Source code in <code>prettyqt\\widgets\\columnview.py</code> <pre><code>class ColumnView(widgets.AbstractItemViewMixin, QtWidgets.QColumnView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ComboBox","title":"<code>ComboBox</code>","text":"<p>         Bases: <code>ComboBoxMixin</code>, <code>QtWidgets.QComboBox</code></p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>class ComboBox(ComboBoxMixin, QtWidgets.QComboBox):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ComboBoxMixin","title":"<code>ComboBoxMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>class ComboBoxMixin(widgets.WidgetMixin):\nvalue_changed = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.currentIndexChanged.connect(self.index_changed)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"insertPolicy\": INSERT_POLICY,\n\"sizeAdjustPolicy\": SIZE_ADJUST_POLICY,\n}\nreturn maps\n# def serialize_fields(self):\n#     items = [\n#         (self.itemText(i), self.itemData(i), self.get_item_icon(i))\n#         for i in range(self.count())\n#     ]\n#     return dict(\n#         index=self.currentIndex(),\n#         editable=self.isEditable(),\n#         max_count=self.maxCount(),\n#         has_frame=self.hasFrame(),\n#         icon_size=self.iconSize(),\n#         insert_policy=self.insertPolicy(),\n#         model_column=self.modelColumn(),\n#         max_visible_items=self.maxVisibleItems(),\n#         size_adjust_policy=self.get_size_adjust_policy(),\n#         duplicates_enabled=self.duplicatesEnabled(),\n#         min_contents_length=self.minimumContentsLength(),\n#         placeholder_text=self.placeholderText(),\n#         items=items,\n#     )\n# def __setstate__(self, state):\n#     super().__setstate__(state)\n#     for label, data, icon in state[\"items\"]:\n#         self.add(label, data, icon=icon)\n#     self.setCurrentIndex(state[\"index\"])\n#     self.setEditable(state[\"editable\"])\n#     self.setMaxCount(state[\"max_count\"])\n#     self.setMaxVisibleItems(state[\"max_visible_items\"])\n#     self.setMinimumContentsLength(state[\"min_contents_length\"])\n#     self.setDuplicatesEnabled(state[\"duplicates_enabled\"])\n#     self.setFrame(state[\"has_frame\"])\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __len__(self) -&gt; int:\nreturn self.count()\ndef index_changed(self, index: int):\n# data = self.itemData(index)\ndata = self.get_value()\nself.value_changed.emit(data)\ndef add_items(self, items: Iterable | Mapping, default=NoData):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.addItem(v, userData=k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.addItem(i, i)\nif default is not NoData:\nself.set_value(default)\ndef add(self, label: str, data=NoData, icon: datatypes.IconType = None):\nif data is NoData:\ndata = label\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nself.addItem(gui.Icon(icon), label, userData=data)\nelse:\nself.addItem(label, userData=data)\ndef get_item_icon(self, index: int) -&gt; gui.Icon | None:\nicon = self.itemIcon(index)\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_editable(self, editable: bool):\nself.setEditable(editable)\nif self.completer() is None and editable:\nself.setCompleter(widgets.Completer(self))\ndef set_insert_policy(self, policy: InsertPolicyStr):\n\"\"\"Set insert policy.\n        Args:\n            policy: insert policy to use\n        Raises:\n            InvalidParamError: invalid insert policy\n        \"\"\"\nif policy not in INSERT_POLICY:\nraise InvalidParamError(policy, INSERT_POLICY)\nself.setInsertPolicy(INSERT_POLICY[policy])\ndef get_insert_policy(self) -&gt; InsertPolicyStr:\n\"\"\"Return insert policy.\n        Returns:\n            insert policy\n        \"\"\"\nreturn INSERT_POLICY.inverse[self.insertPolicy()]\ndef set_size_adjust_policy(self, policy: SizeAdjustPolicyStr):\n\"\"\"Set size adjust policy.\n        Args:\n            policy: size adjust policy to use\n        Raises:\n            InvalidParamError: invalid size adjust policy\n        \"\"\"\nif policy not in SIZE_ADJUST_POLICY:\nraise InvalidParamError(policy, SIZE_ADJUST_POLICY)\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY[policy])\ndef get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n        Returns:\n            size adjust policy\n        \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\ndef set_icon_size(self, size: int | datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nif isinstance(size, int):\nsize = core.Size(size, size)\nelif isinstance(size, tuple):\nsize = core.Size(*size)\nself.setIconSize(size)\ndef get_icon_size(self) -&gt; core.Size:\nreturn core.Size(self.iconSize())\ndef set_min_char_length(self, chars: int):\nself.setMinimumContentsLength(chars)\ndef get_value(self) -&gt; Any:\n# if all(self.itemData(i) is None for i in range(self.count())):\n#     return self.currentText()\n# else:\n#     return self.currentData()\nreturn self.currentData()\ndef set_value(self, value: Any):\nself.set_data(value)\ndef set_text(self, text: str):\nself.setCurrentText(text)\ndef set_data(self, data: Any):\nidx = self.findData(data)\nif idx == -1:\nraise ValueError(\"invalid data\")\nself.setCurrentIndex(idx)\ndef text(self) -&gt; str:\nreturn self.currentText()\ndef hide_completer(self):\n\"\"\"Hides the completion widget.\"\"\"\ncompleter = widgets.Completer(self)\nself.setCompleter(completer)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.currentIndexChanged.connect(self.index_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.count()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.add","title":"<code>add(label: str, data: str = NoData, icon: datatypes.IconType = None)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def add(self, label: str, data=NoData, icon: datatypes.IconType = None):\nif data is NoData:\ndata = label\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nself.addItem(gui.Icon(icon), label, userData=data)\nelse:\nself.addItem(label, userData=data)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.add_items","title":"<code>add_items(items: Iterable | Mapping, default: Iterable | Mapping = NoData)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def add_items(self, items: Iterable | Mapping, default=NoData):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.addItem(v, userData=k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.addItem(i, i)\nif default is not NoData:\nself.set_value(default)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_icon_size","title":"<code>get_icon_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_icon_size(self) -&gt; core.Size:\nreturn core.Size(self.iconSize())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_insert_policy","title":"<code>get_insert_policy() -&gt; InsertPolicyStr</code>","text":"<p>Return insert policy.</p> <p>Returns:</p> Type Description <code>InsertPolicyStr</code> <p>insert policy</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_insert_policy(self) -&gt; InsertPolicyStr:\n\"\"\"Return insert policy.\n    Returns:\n        insert policy\n    \"\"\"\nreturn INSERT_POLICY.inverse[self.insertPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_item_icon","title":"<code>get_item_icon(index: int) -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_item_icon(self, index: int) -&gt; gui.Icon | None:\nicon = self.itemIcon(index)\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_size_adjust_policy","title":"<code>get_size_adjust_policy() -&gt; SizeAdjustPolicyStr</code>","text":"<p>Return size adjust policy.</p> <p>Returns:</p> Type Description <code>SizeAdjustPolicyStr</code> <p>size adjust policy</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n    Returns:\n        size adjust policy\n    \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.get_value","title":"<code>get_value() -&gt; Any</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_value(self) -&gt; Any:\n# if all(self.itemData(i) is None for i in range(self.count())):\n#     return self.currentText()\n# else:\n#     return self.currentData()\nreturn self.currentData()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.hide_completer","title":"<code>hide_completer()</code>","text":"<p>Hides the completion widget.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def hide_completer(self):\n\"\"\"Hides the completion widget.\"\"\"\ncompleter = widgets.Completer(self)\nself.setCompleter(completer)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.index_changed","title":"<code>index_changed(index: int)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def index_changed(self, index: int):\n# data = self.itemData(index)\ndata = self.get_value()\nself.value_changed.emit(data)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_data","title":"<code>set_data(data: Any)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_data(self, data: Any):\nidx = self.findData(data)\nif idx == -1:\nraise ValueError(\"invalid data\")\nself.setCurrentIndex(idx)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_editable","title":"<code>set_editable(editable: bool)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_editable(self, editable: bool):\nself.setEditable(editable)\nif self.completer() is None and editable:\nself.setCompleter(widgets.Completer(self))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_icon_size","title":"<code>set_icon_size(size: int | datatypes.SizeType)</code>","text":"<p>Set size of the icons.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_icon_size(self, size: int | datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nif isinstance(size, int):\nsize = core.Size(size, size)\nelif isinstance(size, tuple):\nsize = core.Size(*size)\nself.setIconSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_insert_policy","title":"<code>set_insert_policy(policy: InsertPolicyStr)</code>","text":"<p>Set insert policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>InsertPolicyStr</code> <p>insert policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid insert policy</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_insert_policy(self, policy: InsertPolicyStr):\n\"\"\"Set insert policy.\n    Args:\n        policy: insert policy to use\n    Raises:\n        InvalidParamError: invalid insert policy\n    \"\"\"\nif policy not in INSERT_POLICY:\nraise InvalidParamError(policy, INSERT_POLICY)\nself.setInsertPolicy(INSERT_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_min_char_length","title":"<code>set_min_char_length(chars: int)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_min_char_length(self, chars: int):\nself.setMinimumContentsLength(chars)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_size_adjust_policy","title":"<code>set_size_adjust_policy(policy: SizeAdjustPolicyStr)</code>","text":"<p>Set size adjust policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizeAdjustPolicyStr</code> <p>size adjust policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid size adjust policy</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_size_adjust_policy(self, policy: SizeAdjustPolicyStr):\n\"\"\"Set size adjust policy.\n    Args:\n        policy: size adjust policy to use\n    Raises:\n        InvalidParamError: invalid size adjust policy\n    \"\"\"\nif policy not in SIZE_ADJUST_POLICY:\nraise InvalidParamError(policy, SIZE_ADJUST_POLICY)\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_text","title":"<code>set_text(text: str)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_text(self, text: str):\nself.setCurrentText(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.set_value","title":"<code>set_value(value: Any)</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_value(self, value: Any):\nself.set_data(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.combobox.ComboBoxMixin.text","title":"<code>text() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def text(self) -&gt; str:\nreturn self.currentText()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.CommandLinkButton","title":"<code>CommandLinkButton</code>","text":"<p>         Bases: <code>widgets.PushButtonMixin</code>, <code>QtWidgets.QCommandLinkButton</code></p> Source code in <code>prettyqt\\widgets\\commandlinkbutton.py</code> <pre><code>class CommandLinkButton(widgets.PushButtonMixin, QtWidgets.QCommandLinkButton):\nvalue_changed = core.Signal(bool)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.commandlinkbutton.CommandLinkButton.value_changed","title":"<code>value_changed = core.Signal(bool)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.CommonStyle","title":"<code>CommonStyle</code>","text":"<p>         Bases: <code>CommonStyleMixin</code>, <code>QtWidgets.QCommonStyle</code></p> Source code in <code>prettyqt\\widgets\\commonstyle.py</code> <pre><code>class CommonStyle(CommonStyleMixin, QtWidgets.QCommonStyle):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.CommonStyleMixin","title":"<code>CommonStyleMixin</code>","text":"<p>         Bases: <code>widgets.StyleMixin</code></p> Source code in <code>prettyqt\\widgets\\commonstyle.py</code> <pre><code>class CommonStyleMixin(widgets.StyleMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Completer","title":"<code>Completer</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QCompleter</code></p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>class Completer(core.ObjectMixin, QtWidgets.QCompleter):\npath_updated = core.Signal(str)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"caseSensitivity\": constants.CASE_SENSITIVITY,\n\"completionMode\": COMPLETION_MODE,\n\"modelSorting\": SORT_MODE,\n\"filterMode\": constants.MATCH_FLAGS,\n}\nreturn maps\ndef splitPath(self, path: str) -&gt; list[str]:\nself.path_updated.emit(path)\nreturn super().splitPath(path)\ndef get_completions(self):\ncompletions = []\n# count = self.completionCount()\n# for i in range(count):\n#     self.setCurrentRow(i)\n#     completions.append(self.currentCompletion())\n# according to docs, completionCount should be avoided. Not sure if thats true.\ni = 0\nwhile self.setCurrentRow(i):\ncompletions.append(self.currentCompletion())\ni += 1\nreturn completions\ndef set_strings(self, strings: list[str]):\nmodel = core.StringListModel(strings)\nself.setModel(model)\ndef set_sort_mode(self, mode: SortModeStr | None):\n\"\"\"Set sort mode to use.\n        Args:\n            mode: sort mode to use\n        Raises:\n            InvalidParamError: sort mode does not exist\n        \"\"\"\nif mode is None:\nmode = \"unsorted\"\nif mode not in SORT_MODE:\nraise InvalidParamError(mode, SORT_MODE)\nself.setModelSorting(SORT_MODE[mode])\ndef get_sort_mode(self) -&gt; SortModeStr:\n\"\"\"Return current sort mode.\n        Returns:\n            sort mode\n        \"\"\"\nreturn SORT_MODE.inverse[self.modelSorting()]\ndef set_completion_mode(self, mode: CompletionModeStr):\n\"\"\"Set completion mode to use.\n        Args:\n            mode: completion mode to use\n        Raises:\n            InvalidParamError: completion mode does not exist\n        \"\"\"\nif mode not in COMPLETION_MODE:\nraise InvalidParamError(mode, COMPLETION_MODE)\nself.setCompletionMode(COMPLETION_MODE[mode])\ndef get_completion_mode(self) -&gt; CompletionModeStr:\n\"\"\"Return current completion mode.\n        Returns:\n            completion mode\n        \"\"\"\nreturn COMPLETION_MODE.inverse[self.completionMode()]\ndef set_filter_mode(self, mode: constants.FilterModeStr):\n\"\"\"Set filter mode to use.\n        Args:\n            mode: filter mode to use\n        Raises:\n            InvalidParamError: filter mode does not exist\n        \"\"\"\nif mode not in constants.FILTER_MODES:\nraise InvalidParamError(mode, constants.FILTER_MODES)\nself.setFilterMode(constants.FILTER_MODES[mode])\ndef get_filter_mode(self) -&gt; constants.FilterModeStr:\n\"\"\"Return current filter mode.\n        Returns:\n            filter mode\n        \"\"\"\nreturn constants.FILTER_MODES.inverse[self.filterMode()]\ndef set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n        Args:\n            state: case sensitive\n        \"\"\"\nsensitivity = (\nQtCore.Qt.CaseSensitivity.CaseSensitive\nif state\nelse QtCore.Qt.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\ndef is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n        Returns:\n            case sensitivity\n        \"\"\"\nreturn self.caseSensitivity() == QtCore.Qt.CaseSensitivity.CaseSensitive\ndef set_completion_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nself.setCompletionRole(role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.path_updated","title":"<code>path_updated = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_completion_mode","title":"<code>get_completion_mode() -&gt; CompletionModeStr</code>","text":"<p>Return current completion mode.</p> <p>Returns:</p> Type Description <code>CompletionModeStr</code> <p>completion mode</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_completion_mode(self) -&gt; CompletionModeStr:\n\"\"\"Return current completion mode.\n    Returns:\n        completion mode\n    \"\"\"\nreturn COMPLETION_MODE.inverse[self.completionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_completions","title":"<code>get_completions()</code>","text":"Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_completions(self):\ncompletions = []\n# count = self.completionCount()\n# for i in range(count):\n#     self.setCurrentRow(i)\n#     completions.append(self.currentCompletion())\n# according to docs, completionCount should be avoided. Not sure if thats true.\ni = 0\nwhile self.setCurrentRow(i):\ncompletions.append(self.currentCompletion())\ni += 1\nreturn completions\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_filter_mode","title":"<code>get_filter_mode() -&gt; constants.FilterModeStr</code>","text":"<p>Return current filter mode.</p> <p>Returns:</p> Type Description <code>constants.FilterModeStr</code> <p>filter mode</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_filter_mode(self) -&gt; constants.FilterModeStr:\n\"\"\"Return current filter mode.\n    Returns:\n        filter mode\n    \"\"\"\nreturn constants.FILTER_MODES.inverse[self.filterMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.get_sort_mode","title":"<code>get_sort_mode() -&gt; SortModeStr</code>","text":"<p>Return current sort mode.</p> <p>Returns:</p> Type Description <code>SortModeStr</code> <p>sort mode</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_sort_mode(self) -&gt; SortModeStr:\n\"\"\"Return current sort mode.\n    Returns:\n        sort mode\n    \"\"\"\nreturn SORT_MODE.inverse[self.modelSorting()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.is_case_sensitive","title":"<code>is_case_sensitive() -&gt; bool</code>","text":"<p>Return case sensitivity.</p> <p>Returns:</p> Type Description <code>bool</code> <p>case sensitivity</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n    Returns:\n        case sensitivity\n    \"\"\"\nreturn self.caseSensitivity() == QtCore.Qt.CaseSensitivity.CaseSensitive\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_case_sensitive","title":"<code>set_case_sensitive(state: bool)</code>","text":"<p>Set case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>case sensitive</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n    Args:\n        state: case sensitive\n    \"\"\"\nsensitivity = (\nQtCore.Qt.CaseSensitivity.CaseSensitive\nif state\nelse QtCore.Qt.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_completion_mode","title":"<code>set_completion_mode(mode: CompletionModeStr)</code>","text":"<p>Set completion mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CompletionModeStr</code> <p>completion mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>completion mode does not exist</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_completion_mode(self, mode: CompletionModeStr):\n\"\"\"Set completion mode to use.\n    Args:\n        mode: completion mode to use\n    Raises:\n        InvalidParamError: completion mode does not exist\n    \"\"\"\nif mode not in COMPLETION_MODE:\nraise InvalidParamError(mode, COMPLETION_MODE)\nself.setCompletionMode(COMPLETION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_completion_role","title":"<code>set_completion_role(role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_completion_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nself.setCompletionRole(role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_filter_mode","title":"<code>set_filter_mode(mode: constants.FilterModeStr)</code>","text":"<p>Set filter mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.FilterModeStr</code> <p>filter mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>filter mode does not exist</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_filter_mode(self, mode: constants.FilterModeStr):\n\"\"\"Set filter mode to use.\n    Args:\n        mode: filter mode to use\n    Raises:\n        InvalidParamError: filter mode does not exist\n    \"\"\"\nif mode not in constants.FILTER_MODES:\nraise InvalidParamError(mode, constants.FILTER_MODES)\nself.setFilterMode(constants.FILTER_MODES[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_sort_mode","title":"<code>set_sort_mode(mode: SortModeStr | None)</code>","text":"<p>Set sort mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SortModeStr | None</code> <p>sort mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>sort mode does not exist</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_sort_mode(self, mode: SortModeStr | None):\n\"\"\"Set sort mode to use.\n    Args:\n        mode: sort mode to use\n    Raises:\n        InvalidParamError: sort mode does not exist\n    \"\"\"\nif mode is None:\nmode = \"unsorted\"\nif mode not in SORT_MODE:\nraise InvalidParamError(mode, SORT_MODE)\nself.setModelSorting(SORT_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.set_strings","title":"<code>set_strings(strings: list[str])</code>","text":"Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_strings(self, strings: list[str]):\nmodel = core.StringListModel(strings)\nself.setModel(model)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.completer.Completer.splitPath","title":"<code>splitPath(path: str) -&gt; list[str]</code>","text":"Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def splitPath(self, path: str) -&gt; list[str]:\nself.path_updated.emit(path)\nreturn super().splitPath(path)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DataWidgetMapper","title":"<code>DataWidgetMapper</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QDataWidgetMapper</code></p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>class DataWidgetMapper(core.ObjectMixin, QtWidgets.QDataWidgetMapper):\ndef __setitem__(self, key: int, value: QtWidgets.QWidget):\nself.addMapping(value, key)\ndef __getitem__(self, key: int) -&gt; QtWidgets.QWidget:\nreturn self.mappedWidgetAt(key)\ndef __delitem__(self, key: int):\nwidget = self.mappedWidgetAt(key)\nself.removeMapping(widget)\ndef set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the data widget mapper.\n        Args:\n            orientation: orientation for the data widget mapper\n        Raises:\n            InvalidParamError: orientation does not exist\n        \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef set_submit_policy(self, policy: SubmitPolicyStr):\n\"\"\"Set the submit policy of the mapper.\n        Args:\n            policy: submit_policy for the data widget mapper\n        Raises:\n            InvalidParamError: submit_policy does not exist\n        \"\"\"\nif policy not in SUBMIT_POLICY:\nraise InvalidParamError(policy, SUBMIT_POLICY)\nself.setSubmitPolicy(SUBMIT_POLICY[policy])\ndef get_submit_policy(self) -&gt; SubmitPolicyStr:\n\"\"\"Return current submit policy.\n        Returns:\n            submit policy\n        \"\"\"\nreturn SUBMIT_POLICY.inverse[self.submitPolicy()]\ndef add_mapping(\nself, widget: QtWidgets.QWidget, section: int, property_name: str | None = None\n):\nif property_name is None:\nself.addMapping(widget, section)\nelse:\nba = QtCore.QByteArray(property_name.encode())\nself.addMapping(widget, section, ba)\ndef get_mapped_property_name(self, widget: QtWidgets.QWidget) -&gt; str:\nreturn self.mappedPropertyName(widget).data().decode()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.__delitem__","title":"<code>__delitem__(key: int)</code>","text":"Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def __delitem__(self, key: int):\nwidget = self.mappedWidgetAt(key)\nself.removeMapping(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.__getitem__","title":"<code>__getitem__(key: int) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def __getitem__(self, key: int) -&gt; QtWidgets.QWidget:\nreturn self.mappedWidgetAt(key)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.__setitem__","title":"<code>__setitem__(key: int, value: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def __setitem__(self, key: int, value: QtWidgets.QWidget):\nself.addMapping(value, key)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.add_mapping","title":"<code>add_mapping(widget: QtWidgets.QWidget, section: int, property_name: str | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def add_mapping(\nself, widget: QtWidgets.QWidget, section: int, property_name: str | None = None\n):\nif property_name is None:\nself.addMapping(widget, section)\nelse:\nba = QtCore.QByteArray(property_name.encode())\nself.addMapping(widget, section, ba)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_mapped_property_name","title":"<code>get_mapped_property_name(widget: QtWidgets.QWidget) -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_mapped_property_name(self, widget: QtWidgets.QWidget) -&gt; str:\nreturn self.mappedPropertyName(widget).data().decode()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_submit_policy","title":"<code>get_submit_policy() -&gt; SubmitPolicyStr</code>","text":"<p>Return current submit policy.</p> <p>Returns:</p> Type Description <code>SubmitPolicyStr</code> <p>submit policy</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_submit_policy(self) -&gt; SubmitPolicyStr:\n\"\"\"Return current submit policy.\n    Returns:\n        submit policy\n    \"\"\"\nreturn SUBMIT_POLICY.inverse[self.submitPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr)</code>","text":"<p>Set the orientation of the data widget mapper.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr</code> <p>orientation for the data widget mapper</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>orientation does not exist</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the data widget mapper.\n    Args:\n        orientation: orientation for the data widget mapper\n    Raises:\n        InvalidParamError: orientation does not exist\n    \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.set_submit_policy","title":"<code>set_submit_policy(policy: SubmitPolicyStr)</code>","text":"<p>Set the submit policy of the mapper.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SubmitPolicyStr</code> <p>submit_policy for the data widget mapper</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>submit_policy does not exist</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def set_submit_policy(self, policy: SubmitPolicyStr):\n\"\"\"Set the submit policy of the mapper.\n    Args:\n        policy: submit_policy for the data widget mapper\n    Raises:\n        InvalidParamError: submit_policy does not exist\n    \"\"\"\nif policy not in SUBMIT_POLICY:\nraise InvalidParamError(policy, SUBMIT_POLICY)\nself.setSubmitPolicy(SUBMIT_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DateEdit","title":"<code>DateEdit</code>","text":"<p>         Bases: <code>widgets.DateTimeEditMixin</code>, <code>QtWidgets.QDateEdit</code></p> Source code in <code>prettyqt\\widgets\\dateedit.py</code> <pre><code>class DateEdit(widgets.DateTimeEditMixin, QtWidgets.QDateEdit):\nvalue_changed = core.Signal(datetime.datetime)\ndef set_value(self, value: datatypes.DateType):\nif isinstance(value, str):\nvalue = QtCore.QDate.fromString(value)\nself.setDate(value)  # type: ignore\ndef set_range(self, lower: datatypes.DateType, upper: datatypes.DateType):\nif isinstance(lower, str):\nlower = QtCore.QDate.fromString(lower)\nif isinstance(upper, str):\nupper = QtCore.QDate.fromString(upper)\nself.setToolTip(f\"{lower} &lt;= x &lt;= {upper}\")\nself.setDateRange(lower, upper)  # type: ignore\ndef get_value(self) -&gt; datetime.date:\nreturn self.get_date()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dateedit.DateEdit.value_changed","title":"<code>value_changed = core.Signal(datetime.datetime)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.dateedit.DateEdit.get_value","title":"<code>get_value() -&gt; datetime.date</code>","text":"Source code in <code>prettyqt\\widgets\\dateedit.py</code> <pre><code>def get_value(self) -&gt; datetime.date:\nreturn self.get_date()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dateedit.DateEdit.set_range","title":"<code>set_range(lower: datatypes.DateType, upper: datatypes.DateType)</code>","text":"Source code in <code>prettyqt\\widgets\\dateedit.py</code> <pre><code>def set_range(self, lower: datatypes.DateType, upper: datatypes.DateType):\nif isinstance(lower, str):\nlower = QtCore.QDate.fromString(lower)\nif isinstance(upper, str):\nupper = QtCore.QDate.fromString(upper)\nself.setToolTip(f\"{lower} &lt;= x &lt;= {upper}\")\nself.setDateRange(lower, upper)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dateedit.DateEdit.set_value","title":"<code>set_value(value: datatypes.DateType)</code>","text":"Source code in <code>prettyqt\\widgets\\dateedit.py</code> <pre><code>def set_value(self, value: datatypes.DateType):\nif isinstance(value, str):\nvalue = QtCore.QDate.fromString(value)\nself.setDate(value)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DateTimeEdit","title":"<code>DateTimeEdit</code>","text":"<p>         Bases: <code>DateTimeEditMixin</code>, <code>QtWidgets.QDateTimeEdit</code></p> Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>class DateTimeEdit(DateTimeEditMixin, QtWidgets.QDateTimeEdit):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DateTimeEditMixin","title":"<code>DateTimeEditMixin</code>","text":"<p>         Bases: <code>widgets.AbstractSpinBoxMixin</code></p> Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>class DateTimeEditMixin(widgets.AbstractSpinBoxMixin):\nvalue_changed = core.Signal(datetime.datetime)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setCalendarPopup(True)\nself.dateTimeChanged.connect(self.datetime_changed)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"timeSpec\": constants.TIME_SPEC,\n\"currentSection\": SECTIONS,\n}\nreturn maps\ndef datetime_changed(self, date):\ndt = self.get_datetime()\nself.value_changed.emit(dt)\ndef get_section_text(self, section: SectionsStr) -&gt; str:\nif section not in SECTIONS:\nraise InvalidParamError(section, SECTIONS)\nreturn self.sectionText(SECTIONS[section])\ndef get_current_section(self) -&gt; SectionsStr:\nreturn SECTIONS.inverse[self.currentSection()]\ndef set_current_section(self, section: SectionsStr):\nif section not in SECTIONS:\nraise InvalidParamError(section, SECTIONS)\nself.setCurrentSection(SECTIONS[section])\ndef get_displayed_sections(self) -&gt; list[SectionsStr]:\nreturn SECTIONS.get_list(self.displayedSections())\ndef set_range(\nself,\nlower: datatypes.DateTimeType,\nupper: datatypes.DateTimeType,\n):\nif isinstance(lower, str):\nlower = dateutil.parser.parse(lower)\nif isinstance(upper, str):\nupper = dateutil.parser.parse(upper)\nself.setToolTip(f\"{lower} &lt;= x &lt;= {upper}\")\nself.setDateTimeRange(lower, upper)  # type: ignore\ndef set_format(self, fmt: str):\nself.setDisplayFormat(fmt)\ndef get_value(self) -&gt; datetime.datetime:\nreturn self.get_datetime()\ndef set_value(self, value: datetime.datetime):\nself.setDateTime(value)  # type: ignore\ndef get_datetime(self) -&gt; datetime.datetime:\nreturn self.dateTime().toPython()  # type: ignore\ndef min_datetime(self) -&gt; datetime.datetime:\nreturn self.minimumDateTime().toPython()  # type: ignore\ndef max_datetime(self) -&gt; datetime.datetime:\nreturn self.maximumDateTime().toPython()  # type: ignore\ndef min_date(self) -&gt; datetime.date:\nreturn self.minimumDate().toPython()  # type: ignore\ndef max_date(self) -&gt; datetime.date:\nreturn self.maximumDate().toPython()  # type: ignore\ndef get_date(self) -&gt; datetime.date:\nreturn self.date().toPython()  # type: ignore\ndef min_time(self) -&gt; datetime.time:\nreturn self.minimumTime().toPython()  # type: ignore\ndef max_time(self) -&gt; datetime.time:\nreturn self.maximumTime().toPython()  # type: ignore\ndef get_time(self) -&gt; datetime.time:\nreturn self.time().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.value_changed","title":"<code>value_changed = core.Signal(datetime.datetime)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setCalendarPopup(True)\nself.dateTimeChanged.connect(self.datetime_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.datetime_changed","title":"<code>datetime_changed(date)</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def datetime_changed(self, date):\ndt = self.get_datetime()\nself.value_changed.emit(dt)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_current_section","title":"<code>get_current_section() -&gt; SectionsStr</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_current_section(self) -&gt; SectionsStr:\nreturn SECTIONS.inverse[self.currentSection()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_date","title":"<code>get_date() -&gt; datetime.date</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_date(self) -&gt; datetime.date:\nreturn self.date().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_datetime","title":"<code>get_datetime() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_datetime(self) -&gt; datetime.datetime:\nreturn self.dateTime().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_displayed_sections","title":"<code>get_displayed_sections() -&gt; list[SectionsStr]</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_displayed_sections(self) -&gt; list[SectionsStr]:\nreturn SECTIONS.get_list(self.displayedSections())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_section_text","title":"<code>get_section_text(section: SectionsStr) -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_section_text(self, section: SectionsStr) -&gt; str:\nif section not in SECTIONS:\nraise InvalidParamError(section, SECTIONS)\nreturn self.sectionText(SECTIONS[section])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_time","title":"<code>get_time() -&gt; datetime.time</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_time(self) -&gt; datetime.time:\nreturn self.time().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.get_value","title":"<code>get_value() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def get_value(self) -&gt; datetime.datetime:\nreturn self.get_datetime()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.max_date","title":"<code>max_date() -&gt; datetime.date</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def max_date(self) -&gt; datetime.date:\nreturn self.maximumDate().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.max_datetime","title":"<code>max_datetime() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def max_datetime(self) -&gt; datetime.datetime:\nreturn self.maximumDateTime().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.max_time","title":"<code>max_time() -&gt; datetime.time</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def max_time(self) -&gt; datetime.time:\nreturn self.maximumTime().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.min_date","title":"<code>min_date() -&gt; datetime.date</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def min_date(self) -&gt; datetime.date:\nreturn self.minimumDate().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.min_datetime","title":"<code>min_datetime() -&gt; datetime.datetime</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def min_datetime(self) -&gt; datetime.datetime:\nreturn self.minimumDateTime().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.min_time","title":"<code>min_time() -&gt; datetime.time</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def min_time(self) -&gt; datetime.time:\nreturn self.minimumTime().toPython()  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.set_current_section","title":"<code>set_current_section(section: SectionsStr)</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def set_current_section(self, section: SectionsStr):\nif section not in SECTIONS:\nraise InvalidParamError(section, SECTIONS)\nself.setCurrentSection(SECTIONS[section])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.set_format","title":"<code>set_format(fmt: str)</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def set_format(self, fmt: str):\nself.setDisplayFormat(fmt)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.set_range","title":"<code>set_range(lower: datatypes.DateTimeType, upper: datatypes.DateTimeType)</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def set_range(\nself,\nlower: datatypes.DateTimeType,\nupper: datatypes.DateTimeType,\n):\nif isinstance(lower, str):\nlower = dateutil.parser.parse(lower)\nif isinstance(upper, str):\nupper = dateutil.parser.parse(upper)\nself.setToolTip(f\"{lower} &lt;= x &lt;= {upper}\")\nself.setDateTimeRange(lower, upper)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.datetimeedit.DateTimeEditMixin.set_value","title":"<code>set_value(value: datetime.datetime)</code>","text":"Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>def set_value(self, value: datetime.datetime):\nself.setDateTime(value)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Dial","title":"<code>Dial</code>","text":"<p>         Bases: <code>widgets.AbstractSliderMixin</code>, <code>QtWidgets.QDial</code></p> Source code in <code>prettyqt\\widgets\\dial.py</code> <pre><code>class Dial(widgets.AbstractSliderMixin, QtWidgets.QDial):\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dial.Dial.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.dial.Dial.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\dial.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Dialog","title":"<code>Dialog</code>","text":"<p>         Bases: <code>DialogMixin</code>, <code>QtWidgets.QDialog</code></p> Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>class Dialog(DialogMixin, QtWidgets.QDialog):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DialogButtonBox","title":"<code>DialogButtonBox</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QDialogButtonBox</code></p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>class DialogButtonBox(widgets.WidgetMixin, QtWidgets.QDialogButtonBox):\nbutton_clicked = core.Signal(str)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.clicked.connect(self.on_click)\ndef __len__(self) -&gt; int:\nreturn len(self.buttons())\ndef __getitem__(self, index: StandardButtonStr) -&gt; QtWidgets.QPushButton:\nreturn self.button(STANDARD_BUTTON[index])\ndef __iter__(self) -&gt; Iterator[QtWidgets.QAbstractButton]:\nreturn iter(self.buttons())\ndef __contains__(self, index: StandardButtonStr):\nreturn self.button(STANDARD_BUTTON[index]) is not None\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"orientation\": constants.ORIENTATION,\n\"standardButtons\": STANDARD_BUTTON,\n}\nreturn maps\n@classmethod\ndef create(cls, **kwargs) -&gt; Self:\nbox = cls()\nfor k, v in kwargs.items():\nbox.add_default_button(k, callback=v)  # type: ignore\nreturn box\ndef on_click(self, button: QtCore.QObject):\nself.button_clicked.emit(button.objectName())\ndef set_horizontal(self):\nself.setOrientation(constants.HORIZONTAL)\ndef set_vertical(self):\nself.setOrientation(constants.VERTICAL)\ndef set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the button box.\n        Args:\n            orientation: orientation for the button box\n        Raises:\n            InvalidParamError: orientation does not exist\n        \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef add_default_buttons(self, buttons: Sequence[StandardButtonStr]):\nreturn [self.add_default_button(btn) for btn in buttons]\ndef add_default_button(\nself, button: StandardButtonStr, callback: Callable | None = None\n) -&gt; QtWidgets.QPushButton:\n\"\"\"Add a default button.\n        Args:\n            button: button to add\n            callback: function to call when button gets clicked\n        Returns:\n            created button\n        Raises:\n            InvalidParamError: Button type not available\n        \"\"\"\nif button not in STANDARD_BUTTON:\nraise InvalidParamError(button, STANDARD_BUTTON)\nbtn = self.addButton(STANDARD_BUTTON[button])\nbtn.setObjectName(button)\nif callback:\nbtn.clicked.connect(callback)\nreturn btn\ndef add_button(\nself,\nbutton: QtWidgets.QPushButton | StandardButtonStr,\nrole: RoleStr = \"accept\",\ncallback: Callable | None = None,\n) -&gt; widgets.PushButton:\n\"\"\"Add a button.\n        Args:\n            button: button to add\n            role: role of the button\n            callback: function to call when button gets clicked\n        Returns:\n            created button\n        Raises:\n            InvalidParamError: Button type not available\n        \"\"\"\nif isinstance(button, str):\nbutton = widgets.PushButton(button)\nself.addButton(button, ROLES[role])\nif callback:\nbutton.clicked.connect(callback)\nreturn button\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.button_clicked","title":"<code>button_clicked = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.__contains__","title":"<code>__contains__(index: StandardButtonStr)</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def __contains__(self, index: StandardButtonStr):\nreturn self.button(STANDARD_BUTTON[index]) is not None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.__getitem__","title":"<code>__getitem__(index: StandardButtonStr) -&gt; QtWidgets.QPushButton</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def __getitem__(self, index: StandardButtonStr) -&gt; QtWidgets.QPushButton:\nreturn self.button(STANDARD_BUTTON[index])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.clicked.connect(self.on_click)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QAbstractButton]</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QAbstractButton]:\nreturn iter(self.buttons())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn len(self.buttons())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_button","title":"<code>add_button(button: QtWidgets.QPushButton | StandardButtonStr, role: RoleStr = 'accept', callback: Callable | None = None) -&gt; widgets.PushButton</code>","text":"<p>Add a button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>QtWidgets.QPushButton | StandardButtonStr</code> <p>button to add</p> required <code>role</code> <code>RoleStr</code> <p>role of the button</p> <code>'accept'</code> <code>callback</code> <code>Callable | None</code> <p>function to call when button gets clicked</p> <code>None</code> <p>Returns:</p> Type Description <code>widgets.PushButton</code> <p>created button</p> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Button type not available</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_button(\nself,\nbutton: QtWidgets.QPushButton | StandardButtonStr,\nrole: RoleStr = \"accept\",\ncallback: Callable | None = None,\n) -&gt; widgets.PushButton:\n\"\"\"Add a button.\n    Args:\n        button: button to add\n        role: role of the button\n        callback: function to call when button gets clicked\n    Returns:\n        created button\n    Raises:\n        InvalidParamError: Button type not available\n    \"\"\"\nif isinstance(button, str):\nbutton = widgets.PushButton(button)\nself.addButton(button, ROLES[role])\nif callback:\nbutton.clicked.connect(callback)\nreturn button\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_default_button","title":"<code>add_default_button(button: StandardButtonStr, callback: Callable | None = None) -&gt; QtWidgets.QPushButton</code>","text":"<p>Add a default button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>StandardButtonStr</code> <p>button to add</p> required <code>callback</code> <code>Callable | None</code> <p>function to call when button gets clicked</p> <code>None</code> <p>Returns:</p> Type Description <code>QtWidgets.QPushButton</code> <p>created button</p> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Button type not available</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_default_button(\nself, button: StandardButtonStr, callback: Callable | None = None\n) -&gt; QtWidgets.QPushButton:\n\"\"\"Add a default button.\n    Args:\n        button: button to add\n        callback: function to call when button gets clicked\n    Returns:\n        created button\n    Raises:\n        InvalidParamError: Button type not available\n    \"\"\"\nif button not in STANDARD_BUTTON:\nraise InvalidParamError(button, STANDARD_BUTTON)\nbtn = self.addButton(STANDARD_BUTTON[button])\nbtn.setObjectName(button)\nif callback:\nbtn.clicked.connect(callback)\nreturn btn\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_default_buttons","title":"<code>add_default_buttons(buttons: Sequence[StandardButtonStr])</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_default_buttons(self, buttons: Sequence[StandardButtonStr]):\nreturn [self.add_default_button(btn) for btn in buttons]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.create","title":"<code>create(**kwargs) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>@classmethod\ndef create(cls, **kwargs) -&gt; Self:\nbox = cls()\nfor k, v in kwargs.items():\nbox.add_default_button(k, callback=v)  # type: ignore\nreturn box\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.on_click","title":"<code>on_click(button: QtCore.QObject)</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def on_click(self, button: QtCore.QObject):\nself.button_clicked.emit(button.objectName())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.set_horizontal","title":"<code>set_horizontal()</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def set_horizontal(self):\nself.setOrientation(constants.HORIZONTAL)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr)</code>","text":"<p>Set the orientation of the button box.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr</code> <p>orientation for the button box</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>orientation does not exist</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the button box.\n    Args:\n        orientation: orientation for the button box\n    Raises:\n        InvalidParamError: orientation does not exist\n    \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.set_vertical","title":"<code>set_vertical()</code>","text":"Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def set_vertical(self):\nself.setOrientation(constants.VERTICAL)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DialogMixin","title":"<code>DialogMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>class DialogMixin(widgets.WidgetMixin):\ndef __init__(\nself,\n*args,\ndelete_on_close: bool = False,\nlayout: None | str | QtWidgets.QLayout = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nif delete_on_close:\nself.delete_on_close()\nif layout is not None:\nself.set_layout(layout)\ndef __getitem__(self, index: str) -&gt; QtWidgets.QWidget:\nresult = self.find_child(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\ndef serialize_fields(self):\nreturn dict(\n# modal=self.isModal(),\n# layout=self.layout(),\nsize_grip_enabled=self.isSizeGripEnabled(),\nsize=(self.size().width(), self.size().height()),\n)\ndef keyPressEvent(self, e):\nmatch e.key():\ncase QtCore.Qt.Key.Key_Escape:\nself.close()\ncase QtCore.Qt.Key.Key_F11 if self.isMaximized():\nself.showNormal()\ncase QtCore.Qt.Key.Key_F11:\nself.showMaximized()\ncase _:\nsuper().keyPressEvent(e)\ndef delete_on_close(self):\nself.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\ndef add_widget(self, widget: QtWidgets.QWidget) -&gt; QtWidgets.QWidget:\nself.box += widget\nreturn widget\ndef add_buttonbox(self) -&gt; widgets.DialogButtonBox:\nbutton_box = widgets.DialogButtonBox.create(ok=self.accept, cancel=self.reject)\nself.box.add(button_box)\nreturn button_box\ndef show_blocking(self) -&gt; bool:\nself.show()\nreturn bool(self.main_loop())\ndef is_accepted(self) -&gt; bool:\nreturn self.result() == QtWidgets.QDialog.DialogCode.Accepted\ndef main_loop(self) -&gt; int:\nreturn self.exec()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.__getitem__","title":"<code>__getitem__(index: str) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def __getitem__(self, index: str) -&gt; QtWidgets.QWidget:\nresult = self.find_child(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.__init__","title":"<code>__init__(*args, delete_on_close: bool = False, layout: None | str | QtWidgets.QLayout = None, **kwargs: None | str | QtWidgets.QLayout)</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def __init__(\nself,\n*args,\ndelete_on_close: bool = False,\nlayout: None | str | QtWidgets.QLayout = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nif delete_on_close:\nself.delete_on_close()\nif layout is not None:\nself.set_layout(layout)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.add_buttonbox","title":"<code>add_buttonbox() -&gt; widgets.DialogButtonBox</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def add_buttonbox(self) -&gt; widgets.DialogButtonBox:\nbutton_box = widgets.DialogButtonBox.create(ok=self.accept, cancel=self.reject)\nself.box.add(button_box)\nreturn button_box\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.add_widget","title":"<code>add_widget(widget: QtWidgets.QWidget) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def add_widget(self, widget: QtWidgets.QWidget) -&gt; QtWidgets.QWidget:\nself.box += widget\nreturn widget\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.delete_on_close","title":"<code>delete_on_close()</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def delete_on_close(self):\nself.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.is_accepted","title":"<code>is_accepted() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def is_accepted(self) -&gt; bool:\nreturn self.result() == QtWidgets.QDialog.DialogCode.Accepted\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.keyPressEvent","title":"<code>keyPressEvent(e)</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def keyPressEvent(self, e):\nmatch e.key():\ncase QtCore.Qt.Key.Key_Escape:\nself.close()\ncase QtCore.Qt.Key.Key_F11 if self.isMaximized():\nself.showNormal()\ncase QtCore.Qt.Key.Key_F11:\nself.showMaximized()\ncase _:\nsuper().keyPressEvent(e)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.main_loop","title":"<code>main_loop() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def main_loop(self) -&gt; int:\nreturn self.exec()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\n# modal=self.isModal(),\n# layout=self.layout(),\nsize_grip_enabled=self.isSizeGripEnabled(),\nsize=(self.size().width(), self.size().height()),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dialog.DialogMixin.show_blocking","title":"<code>show_blocking() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>def show_blocking(self) -&gt; bool:\nself.show()\nreturn bool(self.main_loop())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DockWidget","title":"<code>DockWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QDockWidget</code></p> <p>Customized DockWidget class.</p> <p>Contains a custom TitleBar with maximize button</p> Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>class DockWidget(widgets.WidgetMixin, QtWidgets.QDockWidget):\n\"\"\"Customized DockWidget class.\n    Contains a custom TitleBar with maximize button\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nname = kwargs.pop(\"name\", None)\ntitle = kwargs.pop(\"title\", None)\nsuper().__init__(*args, **kwargs)\nif name:\nself.set_id(name)\nif title:\nself.set_title(title)\nself.set_allowed_areas(\"all\")\n# def __setstate__(self, state: dict[str, Any]) -&gt; None:\n#     self.set_widget(state[\"widget\"])\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\n# def serialize_fields(self) -&gt; dict[str, Any]:\n#     return dict(widget=self.widget())\ndef set_widget(self, widget: QtWidgets.QWidget):\nself.setWidget(widget)\ndef set_allowed_areas(self, area: constants.DockPositionsStr):\nself.setAllowedAreas(constants.DOCK_POSITIONS[area])\ndef setup_title_bar(self):\ntitle_bar = widgets.Widget()\nlayout = widgets.HBoxLayout()\nlayout.set_margin(0)\nlayout.set_alignment(\"right\")\ntitle_bar.set_layout(layout)\nmaximize_button = widgets.PushButton()\nlayout.add(maximize_button)\nmaximize_button.set_style_icon(\"titlebar_max_button\")\nmaximize_button.clicked.connect(self.maximize)\nclose_button = widgets.PushButton()\nclose_button.set_style_icon(\"titlebar_close_button\")\nlayout.add(close_button)\nclose_button.clicked.connect(self.close)\nself.setTitleBarWidget(title_bar)\n@deprecated(reason=\"This method is deprecated, use 'maximize' instead.\")\ndef maximise(self):\nself.maximize()\ndef maximize(self):\nif not self.isFloating():\nself.setFloating(True)\nif not self.isMaximized():\nself.showMaximized()\nelse:\nself.showMinimized()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dockwidget.DockWidget.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>def __init__(self, *args, **kwargs):\nname = kwargs.pop(\"name\", None)\ntitle = kwargs.pop(\"title\", None)\nsuper().__init__(*args, **kwargs)\nif name:\nself.set_id(name)\nif title:\nself.set_title(title)\nself.set_allowed_areas(\"all\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dockwidget.DockWidget.maximise","title":"<code>maximise()</code>","text":"Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>@deprecated(reason=\"This method is deprecated, use 'maximize' instead.\")\ndef maximise(self):\nself.maximize()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dockwidget.DockWidget.maximize","title":"<code>maximize()</code>","text":"Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>def maximize(self):\nif not self.isFloating():\nself.setFloating(True)\nif not self.isMaximized():\nself.showMaximized()\nelse:\nself.showMinimized()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dockwidget.DockWidget.set_allowed_areas","title":"<code>set_allowed_areas(area: constants.DockPositionsStr)</code>","text":"Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>def set_allowed_areas(self, area: constants.DockPositionsStr):\nself.setAllowedAreas(constants.DOCK_POSITIONS[area])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dockwidget.DockWidget.set_widget","title":"<code>set_widget(widget: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>def set_widget(self, widget: QtWidgets.QWidget):\nself.setWidget(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.dockwidget.DockWidget.setup_title_bar","title":"<code>setup_title_bar()</code>","text":"Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>def setup_title_bar(self):\ntitle_bar = widgets.Widget()\nlayout = widgets.HBoxLayout()\nlayout.set_margin(0)\nlayout.set_alignment(\"right\")\ntitle_bar.set_layout(layout)\nmaximize_button = widgets.PushButton()\nlayout.add(maximize_button)\nmaximize_button.set_style_icon(\"titlebar_max_button\")\nmaximize_button.clicked.connect(self.maximize)\nclose_button = widgets.PushButton()\nclose_button.set_style_icon(\"titlebar_close_button\")\nlayout.add(close_button)\nclose_button.clicked.connect(self.close)\nself.setTitleBarWidget(title_bar)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.DoubleSpinBox","title":"<code>DoubleSpinBox</code>","text":"<p>         Bases: <code>widgets.AbstractSpinBoxMixin</code>, <code>QtWidgets.QDoubleSpinBox</code></p> Source code in <code>prettyqt\\widgets\\doublespinbox.py</code> <pre><code>class DoubleSpinBox(widgets.AbstractSpinBoxMixin, QtWidgets.QDoubleSpinBox):\nvalue_changed = core.Signal(float)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.value_changed)\ndef set_range(self, start: int | None, end: int | None):\nself.setMinimum(start)\nself.setMaximum(end)\nsetRange = set_range\ndef set_minimum(self, value: int | None):\nif value is None:\nvalue = -float(\"inf\")\nsuper().setMinimum(value)\nsetMinimum = set_minimum\ndef set_maximum(self, value: int | None):\nif value is None:\nvalue = float(\"inf\")\nsuper().setMaximum(value)\nsetMaximum = set_maximum\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.setMaximum","title":"<code>setMaximum = set_maximum</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.setMinimum","title":"<code>setMinimum = set_minimum</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.setRange","title":"<code>setRange = set_range</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.value_changed","title":"<code>value_changed = core.Signal(float)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\doublespinbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.set_maximum","title":"<code>set_maximum(value: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\doublespinbox.py</code> <pre><code>def set_maximum(self, value: int | None):\nif value is None:\nvalue = float(\"inf\")\nsuper().setMaximum(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.set_minimum","title":"<code>set_minimum(value: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\doublespinbox.py</code> <pre><code>def set_minimum(self, value: int | None):\nif value is None:\nvalue = -float(\"inf\")\nsuper().setMinimum(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.doublespinbox.DoubleSpinBox.set_range","title":"<code>set_range(start: int | None, end: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\doublespinbox.py</code> <pre><code>def set_range(self, start: int | None, end: int | None):\nself.setMinimum(start)\nself.setMaximum(end)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ErrorMessage","title":"<code>ErrorMessage</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QErrorMessage</code></p> Source code in <code>prettyqt\\widgets\\errormessage.py</code> <pre><code>class ErrorMessage(widgets.DialogMixin, QtWidgets.QErrorMessage):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FileDialog","title":"<code>FileDialog</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QFileDialog</code></p> <p>Simple dialog used to display some widget.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>class FileDialog(widgets.DialogMixin, QtWidgets.QFileDialog):\n\"\"\"Simple dialog used to display some widget.\"\"\"\ndef __init__(\nself,\npath: None | datatypes.PathType = None,\nmode: AcceptModeStr = \"open\",\ncaption: str | None = None,\npath_id: str | None = None,\nextension_filter: dict | None = None,\nfile_mode: FileModeStr = \"existing_files\",\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_title(caption)\nself.path_id = path_id\nif extension_filter:\nself.set_extension_filter(extension_filter)\nif path_id is not None and path is None:\nsettings = core.Settings()\npath = settings.get(path_id, \"\")\nif path is not None:\nself.set_directory(path)\nself.set_file_mode(file_mode)\nself.set_accept_mode(mode)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"acceptMode\": ACCEPT_MODE,\n\"fileMode\": FILE_MODE,\n\"viewMode\": VIEW_MODE,\n}\nreturn maps\ndef set_accept_mode(self, mode: AcceptModeStr):\n\"\"\"Set accept mode.\n        Args:\n            mode: accept mode to use\n        Raises:\n            InvalidParamError: invalid accept mode\n        \"\"\"\nif mode not in ACCEPT_MODE:\nraise InvalidParamError(mode, ACCEPT_MODE)\nself.setAcceptMode(ACCEPT_MODE[mode])\ndef get_accept_mode(self) -&gt; AcceptModeStr:\n\"\"\"Return accept mode.\n        Returns:\n            accept mode\n        \"\"\"\nreturn ACCEPT_MODE.inverse[self.acceptMode()]\ndef set_view_mode(self, mode: ViewModeStr):\n\"\"\"Set view mode.\n        Args:\n            mode: view mode to use\n        Raises:\n            InvalidParamError: invalid view mode\n        \"\"\"\nif mode not in VIEW_MODE:\nraise InvalidParamError(mode, VIEW_MODE)\nself.setViewMode(VIEW_MODE[mode])\ndef get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n        Returns:\n            view mode\n        \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_label_text(self, label: LabelStr, text: str):\n\"\"\"Set the label text for button label.\n        Args:\n            label: button to set text for\n            text: text to use\n        \"\"\"\nif label not in LABEL:\nraise InvalidParamError(label, LABEL)\nself.setLabelText(LABEL[label], text)\ndef get_label_text(self, label: LabelStr) -&gt; str:\n\"\"\"Return label text.\n        Returns:\n            label text\n        \"\"\"\nreturn self.labelText(LABEL[label])\ndef get_file_mode(self) -&gt; FileModeStr:\n\"\"\"Return file mode.\n        Returns:\n            file mode\n        \"\"\"\nreturn FILE_MODE.inverse[self.fileMode()]\ndef set_file_mode(self, mode: FileModeStr):\n\"\"\"Set the file mode of the dialog.\n        Args:\n            mode: mode to use\n        \"\"\"\nself.setFileMode(FILE_MODE[mode])\ndef selected_files(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.selectedFiles()]\ndef selected_file(self) -&gt; pathlib.Path | None:\nselected = self.selectedFiles()\nreturn pathlib.Path(selected[0]) if selected else None\ndef choose_folder(self) -&gt; list[pathlib.Path] | None:\nself.set_file_mode(\"directory\")\nreturn self.choose()\ndef open_file(self) -&gt; list[pathlib.Path] | None:\nself.set_file_mode(\"existing_file\")\nreturn self.choose()\ndef choose(self) -&gt; list[pathlib.Path] | None:\nresult = self.main_loop()\nif result != self.DialogCode.Accepted:\nreturn None\npaths = self.selected_files()\nif self.path_id:\nsettings = core.Settings()\nfolder_path = paths[0].parent\nsettings.setValue(self.path_id, str(folder_path))\nreturn paths\ndef set_extension_filter(self, extension_dict: dict[str, list[str]]):\n\"\"\"Set filter based on given dictionary.\n        dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs\n        Args:\n            extension_dict: filter dictionary\n        \"\"\"\nitems = [\nf\"{k} ({' '.join(f'*{ext}' for ext in v)})\" for k, v in extension_dict.items()\n]\nfilter_str = \";;\".join(items)\nself.setNameFilter(filter_str)\ndef get_directory(self) -&gt; pathlib.Path:\n\"\"\"Return current directory.\n        returns current directory level as a Pathlib object\n        Returns:\n            Pathlib object\n        \"\"\"\nreturn pathlib.Path(self.directory().absolutePath())\ndef set_directory(self, path: datatypes.PathType):\n\"\"\"Set start directory.\"\"\"\npath = os.fspath(path)\nself.setDirectory(path)\ndef set_filter(self, *filters: core.dir.FilterStr):\nfor item in filters:\nif item not in core.dir.FILTERS:\nraise InvalidParamError(item, core.dir.FILTERS)\nflags = core.dir.FILTERS.merge_flags(filters)\nself.setFilter(flags)\ndef get_filter(self) -&gt; list[core.dir.FilterStr]:\nreturn core.dir.FILTERS.get_list(self.filter())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.path_id","title":"<code>path_id = path_id</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.__init__","title":"<code>__init__(path: None | datatypes.PathType = None, mode: AcceptModeStr = 'open', caption: str | None = None, path_id: str | None = None, extension_filter: dict | None = None, file_mode: FileModeStr = 'existing_files', **kwargs: FileModeStr)</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def __init__(\nself,\npath: None | datatypes.PathType = None,\nmode: AcceptModeStr = \"open\",\ncaption: str | None = None,\npath_id: str | None = None,\nextension_filter: dict | None = None,\nfile_mode: FileModeStr = \"existing_files\",\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_title(caption)\nself.path_id = path_id\nif extension_filter:\nself.set_extension_filter(extension_filter)\nif path_id is not None and path is None:\nsettings = core.Settings()\npath = settings.get(path_id, \"\")\nif path is not None:\nself.set_directory(path)\nself.set_file_mode(file_mode)\nself.set_accept_mode(mode)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.choose","title":"<code>choose() -&gt; list[pathlib.Path] | None</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def choose(self) -&gt; list[pathlib.Path] | None:\nresult = self.main_loop()\nif result != self.DialogCode.Accepted:\nreturn None\npaths = self.selected_files()\nif self.path_id:\nsettings = core.Settings()\nfolder_path = paths[0].parent\nsettings.setValue(self.path_id, str(folder_path))\nreturn paths\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.choose_folder","title":"<code>choose_folder() -&gt; list[pathlib.Path] | None</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def choose_folder(self) -&gt; list[pathlib.Path] | None:\nself.set_file_mode(\"directory\")\nreturn self.choose()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_accept_mode","title":"<code>get_accept_mode() -&gt; AcceptModeStr</code>","text":"<p>Return accept mode.</p> <p>Returns:</p> Type Description <code>AcceptModeStr</code> <p>accept mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_accept_mode(self) -&gt; AcceptModeStr:\n\"\"\"Return accept mode.\n    Returns:\n        accept mode\n    \"\"\"\nreturn ACCEPT_MODE.inverse[self.acceptMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_directory","title":"<code>get_directory() -&gt; pathlib.Path</code>","text":"<p>Return current directory.</p> <p>returns current directory level as a Pathlib object</p> <p>Returns:</p> Type Description <code>pathlib.Path</code> <p>Pathlib object</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_directory(self) -&gt; pathlib.Path:\n\"\"\"Return current directory.\n    returns current directory level as a Pathlib object\n    Returns:\n        Pathlib object\n    \"\"\"\nreturn pathlib.Path(self.directory().absolutePath())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_file_mode","title":"<code>get_file_mode() -&gt; FileModeStr</code>","text":"<p>Return file mode.</p> <p>Returns:</p> Type Description <code>FileModeStr</code> <p>file mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_file_mode(self) -&gt; FileModeStr:\n\"\"\"Return file mode.\n    Returns:\n        file mode\n    \"\"\"\nreturn FILE_MODE.inverse[self.fileMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_filter","title":"<code>get_filter() -&gt; list[core.dir.FilterStr]</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_filter(self) -&gt; list[core.dir.FilterStr]:\nreturn core.dir.FILTERS.get_list(self.filter())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_label_text","title":"<code>get_label_text(label: LabelStr) -&gt; str</code>","text":"<p>Return label text.</p> <p>Returns:</p> Type Description <code>str</code> <p>label text</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_label_text(self, label: LabelStr) -&gt; str:\n\"\"\"Return label text.\n    Returns:\n        label text\n    \"\"\"\nreturn self.labelText(LABEL[label])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return view mode.</p> <p>Returns:</p> Type Description <code>ViewModeStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.open_file","title":"<code>open_file() -&gt; list[pathlib.Path] | None</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def open_file(self) -&gt; list[pathlib.Path] | None:\nself.set_file_mode(\"existing_file\")\nreturn self.choose()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.selected_file","title":"<code>selected_file() -&gt; pathlib.Path | None</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def selected_file(self) -&gt; pathlib.Path | None:\nselected = self.selectedFiles()\nreturn pathlib.Path(selected[0]) if selected else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.selected_files","title":"<code>selected_files() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def selected_files(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.selectedFiles()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_accept_mode","title":"<code>set_accept_mode(mode: AcceptModeStr)</code>","text":"<p>Set accept mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AcceptModeStr</code> <p>accept mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid accept mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_accept_mode(self, mode: AcceptModeStr):\n\"\"\"Set accept mode.\n    Args:\n        mode: accept mode to use\n    Raises:\n        InvalidParamError: invalid accept mode\n    \"\"\"\nif mode not in ACCEPT_MODE:\nraise InvalidParamError(mode, ACCEPT_MODE)\nself.setAcceptMode(ACCEPT_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_directory","title":"<code>set_directory(path: datatypes.PathType)</code>","text":"<p>Set start directory.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_directory(self, path: datatypes.PathType):\n\"\"\"Set start directory.\"\"\"\npath = os.fspath(path)\nself.setDirectory(path)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_extension_filter","title":"<code>set_extension_filter(extension_dict: dict[str, list[str]])</code>","text":"<p>Set filter based on given dictionary.</p> <p>dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs</p> <p>Parameters:</p> Name Type Description Default <code>extension_dict</code> <code>dict[str, list[str]]</code> <p>filter dictionary</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_extension_filter(self, extension_dict: dict[str, list[str]]):\n\"\"\"Set filter based on given dictionary.\n    dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs\n    Args:\n        extension_dict: filter dictionary\n    \"\"\"\nitems = [\nf\"{k} ({' '.join(f'*{ext}' for ext in v)})\" for k, v in extension_dict.items()\n]\nfilter_str = \";;\".join(items)\nself.setNameFilter(filter_str)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_file_mode","title":"<code>set_file_mode(mode: FileModeStr)</code>","text":"<p>Set the file mode of the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FileModeStr</code> <p>mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_file_mode(self, mode: FileModeStr):\n\"\"\"Set the file mode of the dialog.\n    Args:\n        mode: mode to use\n    \"\"\"\nself.setFileMode(FILE_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_filter","title":"<code>set_filter(*filters: core.dir.FilterStr)</code>","text":"Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_filter(self, *filters: core.dir.FilterStr):\nfor item in filters:\nif item not in core.dir.FILTERS:\nraise InvalidParamError(item, core.dir.FILTERS)\nflags = core.dir.FILTERS.merge_flags(filters)\nself.setFilter(flags)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_label_text","title":"<code>set_label_text(label: LabelStr, text: str)</code>","text":"<p>Set the label text for button label.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>LabelStr</code> <p>button to set text for</p> required <code>text</code> <code>str</code> <p>text to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_label_text(self, label: LabelStr, text: str):\n\"\"\"Set the label text for button label.\n    Args:\n        label: button to set text for\n        text: text to use\n    \"\"\"\nif label not in LABEL:\nraise InvalidParamError(label, LABEL)\nself.setLabelText(LABEL[label], text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.filedialog.FileDialog.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr</code> <p>view mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid view mode</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode to use\n    Raises:\n        InvalidParamError: invalid view mode\n    \"\"\"\nif mode not in VIEW_MODE:\nraise InvalidParamError(mode, VIEW_MODE)\nself.setViewMode(VIEW_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FileIconProvider","title":"<code>FileIconProvider</code>","text":"<p>         Bases: <code>gui.AbstractFileIconProviderMixin</code>, <code>QtWidgets.QFileIconProvider</code></p> Source code in <code>prettyqt\\widgets\\fileiconprovider.py</code> <pre><code>class FileIconProvider(gui.AbstractFileIconProviderMixin, QtWidgets.QFileIconProvider):\ndef get_icon(\nself,\ntyp: gui.abstractfileiconprovider.IconTypeStr\n| QtCore.QFileInfo\n| datatypes.PathType,\n) -&gt; QtGui.QIcon:\nif isinstance(typ, os.PathLike | QtCore.QFileInfo):\nparam = core.FileInfo(typ)\nelse:\nparam = gui.abstractfileiconprovider.ICON_TYPE[typ]\nreturn self.icon(param)\ndef use_custom_directory_icons(self, state: bool = True):\nopt = self.Option(0) if state else self.Option.DontUseCustomDirectoryIcons\nself.setOptions(opt)\ndef uses_custom_directory_icons(self) -&gt; bool:\nreturn self.options() == self.Option(0)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fileiconprovider.FileIconProvider.get_icon","title":"<code>get_icon(typ: gui.abstractfileiconprovider.IconTypeStr | QtCore.QFileInfo | datatypes.PathType) -&gt; QtGui.QIcon</code>","text":"Source code in <code>prettyqt\\widgets\\fileiconprovider.py</code> <pre><code>def get_icon(\nself,\ntyp: gui.abstractfileiconprovider.IconTypeStr\n| QtCore.QFileInfo\n| datatypes.PathType,\n) -&gt; QtGui.QIcon:\nif isinstance(typ, os.PathLike | QtCore.QFileInfo):\nparam = core.FileInfo(typ)\nelse:\nparam = gui.abstractfileiconprovider.ICON_TYPE[typ]\nreturn self.icon(param)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fileiconprovider.FileIconProvider.use_custom_directory_icons","title":"<code>use_custom_directory_icons(state: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\fileiconprovider.py</code> <pre><code>def use_custom_directory_icons(self, state: bool = True):\nopt = self.Option(0) if state else self.Option.DontUseCustomDirectoryIcons\nself.setOptions(opt)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fileiconprovider.FileIconProvider.uses_custom_directory_icons","title":"<code>uses_custom_directory_icons() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\fileiconprovider.py</code> <pre><code>def uses_custom_directory_icons(self) -&gt; bool:\nreturn self.options() == self.Option(0)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FileSystemModel","title":"<code>FileSystemModel</code>","text":"<p>         Bases: <code>FileSystemModelMixin</code>, <code>core.AbstractItemModelMixin</code>, <code>QtWidgets.QFileSystemModel</code></p> Source code in <code>prettyqt\\widgets\\filesystemmodel.py</code> <pre><code>class FileSystemModel(\nFileSystemModelMixin, core.AbstractItemModelMixin, QtWidgets.QFileSystemModel\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FocusFrame","title":"<code>FocusFrame</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QFocusFrame</code></p> Source code in <code>prettyqt\\widgets\\focusframe.py</code> <pre><code>class FocusFrame(widgets.WidgetMixin, QtWidgets.QFocusFrame):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FontComboBox","title":"<code>FontComboBox</code>","text":"<p>         Bases: <code>widgets.ComboBoxMixin</code>, <code>QtWidgets.QFontComboBox</code></p> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>class FontComboBox(widgets.ComboBoxMixin, QtWidgets.QFontComboBox):\nvalue_changed = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.currentIndexChanged.connect(self.index_changed)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"fontFilters\": FONT_FILTERS,\n\"writingSystem\": gui.fontdatabase.WRITING_SYSTEM,\n}\nreturn maps\ndef set_font_filters(self, *filters: FontFilterStr):\n\"\"\"Set font filters.\n        Args:\n            filters: font filters to use\n        Raises:\n            InvalidParamError: invalid font filters\n        \"\"\"\nif not filters:\nfilters = (\"all\",)\nfor item in filters:\nif item not in FONT_FILTERS:\nraise InvalidParamError(item, FONT_FILTERS)\nflags = FONT_FILTERS.merge_flags(filters)\nself.setFontFilters(flags)\ndef get_font_filters(self) -&gt; list[FontFilterStr]:\n\"\"\"Return list of font filters.\n        Returns:\n            font filter list\n        \"\"\"\nreturn FONT_FILTERS.get_list(self.fontFilters())\ndef set_value(self, value: QtGui.QFont):\nself.setCurrentFont(value)\ndef get_value(self) -&gt; gui.Font:\nreturn self.get_current_font()\ndef get_current_font(self) -&gt; gui.Font:\nreturn gui.Font(self.currentFont())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.currentIndexChanged.connect(self.index_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.get_current_font","title":"<code>get_current_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def get_current_font(self) -&gt; gui.Font:\nreturn gui.Font(self.currentFont())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.get_font_filters","title":"<code>get_font_filters() -&gt; list[FontFilterStr]</code>","text":"<p>Return list of font filters.</p> <p>Returns:</p> Type Description <code>list[FontFilterStr]</code> <p>font filter list</p> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def get_font_filters(self) -&gt; list[FontFilterStr]:\n\"\"\"Return list of font filters.\n    Returns:\n        font filter list\n    \"\"\"\nreturn FONT_FILTERS.get_list(self.fontFilters())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.get_value","title":"<code>get_value() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def get_value(self) -&gt; gui.Font:\nreturn self.get_current_font()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.set_font_filters","title":"<code>set_font_filters(*filters: FontFilterStr)</code>","text":"<p>Set font filters.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>FontFilterStr</code> <p>font filters to use</p> <code>()</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font filters</p> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def set_font_filters(self, *filters: FontFilterStr):\n\"\"\"Set font filters.\n    Args:\n        filters: font filters to use\n    Raises:\n        InvalidParamError: invalid font filters\n    \"\"\"\nif not filters:\nfilters = (\"all\",)\nfor item in filters:\nif item not in FONT_FILTERS:\nraise InvalidParamError(item, FONT_FILTERS)\nflags = FONT_FILTERS.merge_flags(filters)\nself.setFontFilters(flags)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontcombobox.FontComboBox.set_value","title":"<code>set_value(value: QtGui.QFont)</code>","text":"Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def set_value(self, value: QtGui.QFont):\nself.setCurrentFont(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FontDialog","title":"<code>FontDialog</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QFontDialog</code></p> Source code in <code>prettyqt\\widgets\\fontdialog.py</code> <pre><code>class FontDialog(widgets.DialogMixin, QtWidgets.QFontDialog):\ndef get_current_font(self) -&gt; gui.Font:\nreturn gui.Font(self.currentFont())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.fontdialog.FontDialog.get_current_font","title":"<code>get_current_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\fontdialog.py</code> <pre><code>def get_current_font(self) -&gt; gui.Font:\nreturn gui.Font(self.currentFont())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FormLayout","title":"<code>FormLayout</code>","text":"<p>         Bases: <code>widgets.LayoutMixin</code>, <code>QtWidgets.QFormLayout</code></p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>class FormLayout(widgets.LayoutMixin, QtWidgets.QFormLayout):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_size_constraint(\"maximum\")\nself.setVerticalSpacing(8)\ndef __setitem__(\nself, index: int | tuple[int, RoleStr], value: str | QtWidgets.QWidget\n):\nif isinstance(index, tuple):\nrow = index[0]\nrole = index[1]\nelse:\nrow = index\nrole = \"both\"\nself.set_widget(value, row, role)\ndef __delitem__(self, index: int):\nself.removeRow(index)\ndef __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn iter(self[i] for i in range(self.count()) if self[i] is not None)\ndef __len__(self) -&gt; int:\n\"\"\"Needed for PySide2.\"\"\"\nreturn self.rowCount()\ndef __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout | tuple):\nself.add(other)\nreturn self\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"FieldGrowthPolicy\": FIELD_GROWTH_POLICY,\n\"formAlignment\": constants.ALIGNMENTS,\n\"labelAlignment\": constants.ALIGNMENTS,\n\"rowWrapPolicy\": ROW_WRAP_POLICY,\n}\nreturn maps\ndef set_form_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the form.\n        Args:\n            alignment: alignment for the form\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setFormAlignment(constants.ALIGNMENTS[alignment])\ndef get_form_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current form alignment.\n        Returns:\n            form alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.formAlignment()]\ndef set_label_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the label.\n        Args:\n            alignment: alignment for the label\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setFormAlignment(constants.ALIGNMENTS[alignment])\ndef get_label_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current label alignment.\n        Returns:\n            label alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.labelAlignment()]\ndef set_widget(\nself, widget: str | QtWidgets.QWidget, row: int, role: RoleStr = \"both\"\n):\nif isinstance(widget, str):\nwidget = widgets.Label(widget)\nself.setWidget(row, ROLE[role], widget)\ndef get_widget(\nself, row: int, role: RoleStr = \"both\"\n) -&gt; QtWidgets.QLayout | QtWidgets.QWidget:\nitem = self.itemAt(row, ROLE[role])\nwidget = item.widget()\nif widget is None:\nwidget = item.layout()\nreturn widget\ndef get_item_position(self, index: int) -&gt; tuple[int, RoleStr] | None:\npos = self.getItemPosition(index)  # type: ignore\nreturn None if pos[0] == -1 else (pos[0], ROLE.inverse[pos[1]])\ndef add(self, *items):\nfor i in items:\nif isinstance(i, QtWidgets.QWidget | QtWidgets.QLayout):\nself.addRow(i)\nelif isinstance(i, tuple):\nself.addRow(*i)\ndef set_row_wrap_policy(self, policy: RowWrapPolicyStr):\n\"\"\"Set row wrap policy to use.\n        Args:\n            policy: row wrap policy to use\n        Raises:\n            InvalidParamError: row wrap policy does not exist\n        \"\"\"\nif policy not in ROW_WRAP_POLICY:\nraise InvalidParamError(policy, ROW_WRAP_POLICY)\nself.setRowWrapPolicy(ROW_WRAP_POLICY[policy])\ndef get_row_wrap_policy(self) -&gt; RowWrapPolicyStr:\n\"\"\"Return current row wrap policy.\n        Returns:\n            row wrap policy\n        \"\"\"\nreturn ROW_WRAP_POLICY.inverse[self.rowWrapPolicy()]\ndef set_field_growth_policy(self, policy: FieldGrowthPolicyStr):\n\"\"\"Set field growth policy to use.\n        Args:\n            policy: field growth policy to use\n        Raises:\n            InvalidParamError: field growth policy does not exist\n        \"\"\"\nif policy not in FIELD_GROWTH_POLICY:\nraise InvalidParamError(policy, FIELD_GROWTH_POLICY)\nself.setFieldGrowthPolicy(FIELD_GROWTH_POLICY[policy])\ndef get_field_growth_policy(self) -&gt; FieldGrowthPolicyStr:\n\"\"\"Return current field growth policy.\n        Returns:\n            field growth policy\n        \"\"\"\nreturn FIELD_GROWTH_POLICY.inverse[self.fieldGrowthPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__add__","title":"<code>__add__(other: QtWidgets.QWidget | QtWidgets.QLayout | tuple)</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout | tuple):\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __delitem__(self, index: int):\nself.removeRow(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_size_constraint(\"maximum\")\nself.setVerticalSpacing(8)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn iter(self[i] for i in range(self.count()) if self[i] is not None)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Needed for PySide2.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __len__(self) -&gt; int:\n\"\"\"Needed for PySide2.\"\"\"\nreturn self.rowCount()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.__setitem__","title":"<code>__setitem__(index: int | tuple[int, RoleStr], value: str | QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __setitem__(\nself, index: int | tuple[int, RoleStr], value: str | QtWidgets.QWidget\n):\nif isinstance(index, tuple):\nrow = index[0]\nrole = index[1]\nelse:\nrow = index\nrole = \"both\"\nself.set_widget(value, row, role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.add","title":"<code>add(*items)</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def add(self, *items):\nfor i in items:\nif isinstance(i, QtWidgets.QWidget | QtWidgets.QLayout):\nself.addRow(i)\nelif isinstance(i, tuple):\nself.addRow(*i)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_field_growth_policy","title":"<code>get_field_growth_policy() -&gt; FieldGrowthPolicyStr</code>","text":"<p>Return current field growth policy.</p> <p>Returns:</p> Type Description <code>FieldGrowthPolicyStr</code> <p>field growth policy</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_field_growth_policy(self) -&gt; FieldGrowthPolicyStr:\n\"\"\"Return current field growth policy.\n    Returns:\n        field growth policy\n    \"\"\"\nreturn FIELD_GROWTH_POLICY.inverse[self.fieldGrowthPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_form_alignment","title":"<code>get_form_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current form alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>form alignment</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_form_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current form alignment.\n    Returns:\n        form alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.formAlignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_item_position","title":"<code>get_item_position(index: int) -&gt; tuple[int, RoleStr] | None</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_item_position(self, index: int) -&gt; tuple[int, RoleStr] | None:\npos = self.getItemPosition(index)  # type: ignore\nreturn None if pos[0] == -1 else (pos[0], ROLE.inverse[pos[1]])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_label_alignment","title":"<code>get_label_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current label alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>label alignment</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_label_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current label alignment.\n    Returns:\n        label alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.labelAlignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_row_wrap_policy","title":"<code>get_row_wrap_policy() -&gt; RowWrapPolicyStr</code>","text":"<p>Return current row wrap policy.</p> <p>Returns:</p> Type Description <code>RowWrapPolicyStr</code> <p>row wrap policy</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_row_wrap_policy(self) -&gt; RowWrapPolicyStr:\n\"\"\"Return current row wrap policy.\n    Returns:\n        row wrap policy\n    \"\"\"\nreturn ROW_WRAP_POLICY.inverse[self.rowWrapPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.get_widget","title":"<code>get_widget(row: int, role: RoleStr = 'both') -&gt; QtWidgets.QLayout | QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_widget(\nself, row: int, role: RoleStr = \"both\"\n) -&gt; QtWidgets.QLayout | QtWidgets.QWidget:\nitem = self.itemAt(row, ROLE[role])\nwidget = item.widget()\nif widget is None:\nwidget = item.layout()\nreturn widget\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_field_growth_policy","title":"<code>set_field_growth_policy(policy: FieldGrowthPolicyStr)</code>","text":"<p>Set field growth policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>FieldGrowthPolicyStr</code> <p>field growth policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>field growth policy does not exist</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_field_growth_policy(self, policy: FieldGrowthPolicyStr):\n\"\"\"Set field growth policy to use.\n    Args:\n        policy: field growth policy to use\n    Raises:\n        InvalidParamError: field growth policy does not exist\n    \"\"\"\nif policy not in FIELD_GROWTH_POLICY:\nraise InvalidParamError(policy, FIELD_GROWTH_POLICY)\nself.setFieldGrowthPolicy(FIELD_GROWTH_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_form_alignment","title":"<code>set_form_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the form.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the form</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_form_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the form.\n    Args:\n        alignment: alignment for the form\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setFormAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_label_alignment","title":"<code>set_label_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the label.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the label</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_label_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the label.\n    Args:\n        alignment: alignment for the label\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setFormAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_row_wrap_policy","title":"<code>set_row_wrap_policy(policy: RowWrapPolicyStr)</code>","text":"<p>Set row wrap policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>RowWrapPolicyStr</code> <p>row wrap policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>row wrap policy does not exist</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_row_wrap_policy(self, policy: RowWrapPolicyStr):\n\"\"\"Set row wrap policy to use.\n    Args:\n        policy: row wrap policy to use\n    Raises:\n        InvalidParamError: row wrap policy does not exist\n    \"\"\"\nif policy not in ROW_WRAP_POLICY:\nraise InvalidParamError(policy, ROW_WRAP_POLICY)\nself.setRowWrapPolicy(ROW_WRAP_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.formlayout.FormLayout.set_widget","title":"<code>set_widget(widget: str | QtWidgets.QWidget, row: int, role: RoleStr = 'both')</code>","text":"Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_widget(\nself, widget: str | QtWidgets.QWidget, row: int, role: RoleStr = \"both\"\n):\nif isinstance(widget, str):\nwidget = widgets.Label(widget)\nself.setWidget(row, ROLE[role], widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Frame","title":"<code>Frame</code>","text":"<p>         Bases: <code>FrameMixin</code>, <code>QtWidgets.QFrame</code></p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>class Frame(FrameMixin, QtWidgets.QFrame):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.FrameMixin","title":"<code>FrameMixin</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>class FrameMixin(widgets.WidgetMixin):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"frameShape\": FRAME_SHAPE, \"frameShadow\": SHADOW}\nreturn maps\ndef set_frame_shadow(self, style: ShadowStr):\n\"\"\"Set frame shadow.\n        Args:\n            style: frame style to use\n        Raises:\n            InvalidParamError: style does not exist\n        \"\"\"\nif style is None:\nreturn\nif style not in SHADOW:\nraise InvalidParamError(style, SHADOW)\nself.setFrameShadow(SHADOW[style])\ndef get_frame_shadow(self) -&gt; ShadowStr | None:\n\"\"\"Return current frame shadow.\n        Returns:\n            frame style\n        \"\"\"\nif (frame_shadow := self.frameShadow()) == 0:\nreturn None\nreturn SHADOW.inverse[frame_shadow]\ndef set_frame_shape(self, shape: FrameShapeStr):\n\"\"\"Set frame shape.\n        Args:\n            shape: frame shape to use\n        Raises:\n            InvalidParamError: shape does not exist\n        \"\"\"\nif shape not in FRAME_SHAPE:\nraise InvalidParamError(shape, FRAME_SHAPE)\nself.setFrameShape(FRAME_SHAPE[shape])\ndef get_frame_shape(self) -&gt; FrameShapeStr:\n\"\"\"Return current frame shape.\n        Returns:\n            frame shape\n        \"\"\"\nreturn FRAME_SHAPE.inverse[self.frameShape()]\ndef set_frame_rect(self, rect: datatypes.RectType | None):\nif isinstance(rect, tuple):\nrect = QtCore.QRect(*rect)\nelif rect is None:\nrect = QtCore.QRect(0, 0, 0, 0)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.get_frame_shadow","title":"<code>get_frame_shadow() -&gt; ShadowStr | None</code>","text":"<p>Return current frame shadow.</p> <p>Returns:</p> Type Description <code>ShadowStr | None</code> <p>frame style</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def get_frame_shadow(self) -&gt; ShadowStr | None:\n\"\"\"Return current frame shadow.\n    Returns:\n        frame style\n    \"\"\"\nif (frame_shadow := self.frameShadow()) == 0:\nreturn None\nreturn SHADOW.inverse[frame_shadow]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.get_frame_shape","title":"<code>get_frame_shape() -&gt; FrameShapeStr</code>","text":"<p>Return current frame shape.</p> <p>Returns:</p> Type Description <code>FrameShapeStr</code> <p>frame shape</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def get_frame_shape(self) -&gt; FrameShapeStr:\n\"\"\"Return current frame shape.\n    Returns:\n        frame shape\n    \"\"\"\nreturn FRAME_SHAPE.inverse[self.frameShape()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.set_frame_rect","title":"<code>set_frame_rect(rect: datatypes.RectType | None)</code>","text":"Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_rect(self, rect: datatypes.RectType | None):\nif isinstance(rect, tuple):\nrect = QtCore.QRect(*rect)\nelif rect is None:\nrect = QtCore.QRect(0, 0, 0, 0)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.set_frame_shadow","title":"<code>set_frame_shadow(style: ShadowStr)</code>","text":"<p>Set frame shadow.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>ShadowStr</code> <p>frame style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>style does not exist</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_shadow(self, style: ShadowStr):\n\"\"\"Set frame shadow.\n    Args:\n        style: frame style to use\n    Raises:\n        InvalidParamError: style does not exist\n    \"\"\"\nif style is None:\nreturn\nif style not in SHADOW:\nraise InvalidParamError(style, SHADOW)\nself.setFrameShadow(SHADOW[style])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.frame.FrameMixin.set_frame_shape","title":"<code>set_frame_shape(shape: FrameShapeStr)</code>","text":"<p>Set frame shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>FrameShapeStr</code> <p>frame shape to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>shape does not exist</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_shape(self, shape: FrameShapeStr):\n\"\"\"Set frame shape.\n    Args:\n        shape: frame shape to use\n    Raises:\n        InvalidParamError: shape does not exist\n    \"\"\"\nif shape not in FRAME_SHAPE:\nraise InvalidParamError(shape, FRAME_SHAPE)\nself.setFrameShape(FRAME_SHAPE[shape])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Gesture","title":"<code>Gesture</code>","text":"<p>         Bases: <code>GestureMixin</code>, <code>QtWidgets.QGesture</code></p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>class Gesture(GestureMixin, QtWidgets.QGesture):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GestureMixin","title":"<code>GestureMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>class GestureMixin(core.ObjectMixin):\ndef get_state(self) -&gt; constants.GestureStateStr:\n\"\"\"Return current state.\n        Returns:\n            state\n        \"\"\"\nreturn constants.GESTURE_STATE.inverse[self.state()]\ndef get_gesture_type(self) -&gt; constants.GestureTypeStr:\n\"\"\"Return current gesture type.\n        Returns:\n            gesture type\n        \"\"\"\nreturn constants.GESTURE_TYPE.inverse[self.gestureType()]\ndef get_hot_spot(self) -&gt; core.PointF:\nreturn core.PointF(self.hotSpot())\ndef set_gesture_cancel_policy(self, policy: GestureCancelPolicyStr):\n\"\"\"Set gesture cancel policy.\n        Args:\n            policy: gesture cancel policy to use\n        Raises:\n            InvalidParamError: gesture cancel policy does not exist\n        \"\"\"\nif policy not in GESTURE_CANCEL_POLICY:\nraise InvalidParamError(policy, GESTURE_CANCEL_POLICY)\nself.setGestureCancelPolicy(GESTURE_CANCEL_POLICY[policy])\ndef get_gesture_cancel_policy(self) -&gt; GestureCancelPolicyStr:\n\"\"\"Return current gesture cancel policy.\n        Returns:\n            gesture cancel policy\n        \"\"\"\nreturn GESTURE_CANCEL_POLICY.inverse[self.gestureCancelPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_gesture_cancel_policy","title":"<code>get_gesture_cancel_policy() -&gt; GestureCancelPolicyStr</code>","text":"<p>Return current gesture cancel policy.</p> <p>Returns:</p> Type Description <code>GestureCancelPolicyStr</code> <p>gesture cancel policy</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_gesture_cancel_policy(self) -&gt; GestureCancelPolicyStr:\n\"\"\"Return current gesture cancel policy.\n    Returns:\n        gesture cancel policy\n    \"\"\"\nreturn GESTURE_CANCEL_POLICY.inverse[self.gestureCancelPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_gesture_type","title":"<code>get_gesture_type() -&gt; constants.GestureTypeStr</code>","text":"<p>Return current gesture type.</p> <p>Returns:</p> Type Description <code>constants.GestureTypeStr</code> <p>gesture type</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_gesture_type(self) -&gt; constants.GestureTypeStr:\n\"\"\"Return current gesture type.\n    Returns:\n        gesture type\n    \"\"\"\nreturn constants.GESTURE_TYPE.inverse[self.gestureType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_hot_spot","title":"<code>get_hot_spot() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_hot_spot(self) -&gt; core.PointF:\nreturn core.PointF(self.hotSpot())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.get_state","title":"<code>get_state() -&gt; constants.GestureStateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>constants.GestureStateStr</code> <p>state</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_state(self) -&gt; constants.GestureStateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn constants.GESTURE_STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gesture.GestureMixin.set_gesture_cancel_policy","title":"<code>set_gesture_cancel_policy(policy: GestureCancelPolicyStr)</code>","text":"<p>Set gesture cancel policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>GestureCancelPolicyStr</code> <p>gesture cancel policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>gesture cancel policy does not exist</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def set_gesture_cancel_policy(self, policy: GestureCancelPolicyStr):\n\"\"\"Set gesture cancel policy.\n    Args:\n        policy: gesture cancel policy to use\n    Raises:\n        InvalidParamError: gesture cancel policy does not exist\n    \"\"\"\nif policy not in GESTURE_CANCEL_POLICY:\nraise InvalidParamError(policy, GESTURE_CANCEL_POLICY)\nself.setGestureCancelPolicy(GESTURE_CANCEL_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsAnchorLayout","title":"<code>GraphicsAnchorLayout</code>","text":"<p>         Bases: <code>widgets.GraphicsLayoutMixin</code>, <code>QtWidgets.QGraphicsAnchorLayout</code></p> Source code in <code>prettyqt\\widgets\\graphicsanchorlayout.py</code> <pre><code>class GraphicsAnchorLayout(widgets.GraphicsLayoutMixin, QtWidgets.QGraphicsAnchorLayout):\ndef add_anchor(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nfirst_edge: constants.AnchorPointStr,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\nsecond_edge: constants.AnchorPointStr,\n) -&gt; QtWidgets.QGraphicsAnchor:\nreturn self.addAnchor(\nfirst_item,\nconstants.ANCHOR_POINT[first_edge],\nsecond_item,\nconstants.ANCHOR_POINT[second_edge],\n)\ndef get_anchor(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nfirst_edge: constants.AnchorPointStr,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\nsecond_edge: constants.AnchorPointStr,\n) -&gt; QtWidgets.QGraphicsAnchor:\nreturn self.anchor(\nfirst_item,\nconstants.ANCHOR_POINT[first_edge],\nsecond_item,\nconstants.ANCHOR_POINT[second_edge],\n)\ndef add_anchors(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\norientation: constants.OrientationStr,\n):\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.addAnchors(\nfirst_item, second_item, constants.ORIENTATION[orientation]  # type: ignore\n)\ndef add_corner_anchors(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nfirst_corner: constants.CornerStr,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\nsecond_corner: constants.CornerStr,\n):\nself.addCornerAnchors(\nfirst_item,\nconstants.CORNER[first_corner],\nsecond_item,\nconstants.CORNER[second_corner],\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsanchorlayout.GraphicsAnchorLayout.add_anchor","title":"<code>add_anchor(first_item: QtWidgets.QGraphicsLayoutItem, first_edge: constants.AnchorPointStr, second_item: QtWidgets.QGraphicsLayoutItem, second_edge: constants.AnchorPointStr) -&gt; QtWidgets.QGraphicsAnchor</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsanchorlayout.py</code> <pre><code>def add_anchor(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nfirst_edge: constants.AnchorPointStr,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\nsecond_edge: constants.AnchorPointStr,\n) -&gt; QtWidgets.QGraphicsAnchor:\nreturn self.addAnchor(\nfirst_item,\nconstants.ANCHOR_POINT[first_edge],\nsecond_item,\nconstants.ANCHOR_POINT[second_edge],\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsanchorlayout.GraphicsAnchorLayout.add_anchors","title":"<code>add_anchors(first_item: QtWidgets.QGraphicsLayoutItem, second_item: QtWidgets.QGraphicsLayoutItem, orientation: constants.OrientationStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsanchorlayout.py</code> <pre><code>def add_anchors(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\norientation: constants.OrientationStr,\n):\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.addAnchors(\nfirst_item, second_item, constants.ORIENTATION[orientation]  # type: ignore\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsanchorlayout.GraphicsAnchorLayout.add_corner_anchors","title":"<code>add_corner_anchors(first_item: QtWidgets.QGraphicsLayoutItem, first_corner: constants.CornerStr, second_item: QtWidgets.QGraphicsLayoutItem, second_corner: constants.CornerStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsanchorlayout.py</code> <pre><code>def add_corner_anchors(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nfirst_corner: constants.CornerStr,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\nsecond_corner: constants.CornerStr,\n):\nself.addCornerAnchors(\nfirst_item,\nconstants.CORNER[first_corner],\nsecond_item,\nconstants.CORNER[second_corner],\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsanchorlayout.GraphicsAnchorLayout.get_anchor","title":"<code>get_anchor(first_item: QtWidgets.QGraphicsLayoutItem, first_edge: constants.AnchorPointStr, second_item: QtWidgets.QGraphicsLayoutItem, second_edge: constants.AnchorPointStr) -&gt; QtWidgets.QGraphicsAnchor</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsanchorlayout.py</code> <pre><code>def get_anchor(\nself,\nfirst_item: QtWidgets.QGraphicsLayoutItem,\nfirst_edge: constants.AnchorPointStr,\nsecond_item: QtWidgets.QGraphicsLayoutItem,\nsecond_edge: constants.AnchorPointStr,\n) -&gt; QtWidgets.QGraphicsAnchor:\nreturn self.anchor(\nfirst_item,\nconstants.ANCHOR_POINT[first_edge],\nsecond_item,\nconstants.ANCHOR_POINT[second_edge],\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsBlurEffect","title":"<code>GraphicsBlurEffect</code>","text":"<p>         Bases: <code>widgets.GraphicsEffectMixin</code>, <code>QtWidgets.QGraphicsBlurEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicsblureffect.py</code> <pre><code>class GraphicsBlurEffect(widgets.GraphicsEffectMixin, QtWidgets.QGraphicsBlurEffect):\ndef set_blur_hints(self, *hints: BlurHintStr):\nfor item in hints:\nif item not in BLUR_HINTS:\nraise InvalidParamError(item, BLUR_HINTS)\nif hints:\nflags = BLUR_HINTS.merge_flags(hints)\nelse:\nflags = QtWidgets.QGraphicsBlurEffect.BlurHint(0)  # type: ignore\nself.setBlurHints(flags)\ndef get_blur_hints(self) -&gt; list[BlurHintStr]:\nreturn BLUR_HINTS.get_list(self.blurHints())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsblureffect.GraphicsBlurEffect.get_blur_hints","title":"<code>get_blur_hints() -&gt; list[BlurHintStr]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsblureffect.py</code> <pre><code>def get_blur_hints(self) -&gt; list[BlurHintStr]:\nreturn BLUR_HINTS.get_list(self.blurHints())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsblureffect.GraphicsBlurEffect.set_blur_hints","title":"<code>set_blur_hints(*hints: BlurHintStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsblureffect.py</code> <pre><code>def set_blur_hints(self, *hints: BlurHintStr):\nfor item in hints:\nif item not in BLUR_HINTS:\nraise InvalidParamError(item, BLUR_HINTS)\nif hints:\nflags = BLUR_HINTS.merge_flags(hints)\nelse:\nflags = QtWidgets.QGraphicsBlurEffect.BlurHint(0)  # type: ignore\nself.setBlurHints(flags)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsColorizeEffect","title":"<code>GraphicsColorizeEffect</code>","text":"<p>         Bases: <code>widgets.GraphicsEffectMixin</code>, <code>QtWidgets.QGraphicsColorizeEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicscolorizeeffect.py</code> <pre><code>class GraphicsColorizeEffect(\nwidgets.GraphicsEffectMixin, QtWidgets.QGraphicsColorizeEffect\n):\ndef serialize_fields(self):\nreturn dict(strength=self.strength(), color=gui.Color(self.color()))\ndef __setstate__(self, state):\nsuper().__setstate__(state)\nself.setStrength(state[\"strength\"])\nself.setColor(state[\"color\"])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicscolorizeeffect.GraphicsColorizeEffect.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicscolorizeeffect.py</code> <pre><code>def __setstate__(self, state):\nsuper().__setstate__(state)\nself.setStrength(state[\"strength\"])\nself.setColor(state[\"color\"])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicscolorizeeffect.GraphicsColorizeEffect.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicscolorizeeffect.py</code> <pre><code>def serialize_fields(self):\nreturn dict(strength=self.strength(), color=gui.Color(self.color()))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsDropShadowEffect","title":"<code>GraphicsDropShadowEffect</code>","text":"<p>         Bases: <code>widgets.GraphicsEffectMixin</code>, <code>QtWidgets.QGraphicsDropShadowEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicsdropshadoweffect.py</code> <pre><code>class GraphicsDropShadowEffect(\nwidgets.GraphicsEffectMixin, QtWidgets.QGraphicsDropShadowEffect\n):\ndef serialize_fields(self):\noffset = self.offset()\nreturn dict(\nblur_radius=self.blurRadius(),\ncolor=gui.Color(self.color()),\noffset=(offset.x(), offset.y()),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsdropshadoweffect.GraphicsDropShadowEffect.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsdropshadoweffect.py</code> <pre><code>def serialize_fields(self):\noffset = self.offset()\nreturn dict(\nblur_radius=self.blurRadius(),\ncolor=gui.Color(self.color()),\noffset=(offset.x(), offset.y()),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsEffect","title":"<code>GraphicsEffect</code>","text":"<p>         Bases: <code>GraphicsEffectMixin</code>, <code>QtWidgets.QGraphicsEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicseffect.py</code> <pre><code>class GraphicsEffect(GraphicsEffectMixin, QtWidgets.QGraphicsEffect):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsEffectMixin","title":"<code>GraphicsEffectMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicseffect.py</code> <pre><code>class GraphicsEffectMixin(core.ObjectMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsEllipseItem","title":"<code>GraphicsEllipseItem</code>","text":"<p>         Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>QtWidgets.QGraphicsEllipseItem</code></p> Source code in <code>prettyqt\\widgets\\graphicsellipseitem.py</code> <pre><code>class GraphicsEllipseItem(\nwidgets.AbstractGraphicsShapeItemMixin, QtWidgets.QGraphicsEllipseItem\n):\ndef __repr__(self):\nreturn get_repr(self, self.get_rect())\ndef serialize_fields(self):\nreturn dict(\nrect=self.get_rect(),\nspan_angle=self.spanAngle(),\nstart_angle=self.startAngle(),\n)\ndef get_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.rect())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsellipseitem.GraphicsEllipseItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsellipseitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_rect())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsellipseitem.GraphicsEllipseItem.get_rect","title":"<code>get_rect() -&gt; core.RectF</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsellipseitem.py</code> <pre><code>def get_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.rect())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsellipseitem.GraphicsEllipseItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsellipseitem.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nrect=self.get_rect(),\nspan_angle=self.spanAngle(),\nstart_angle=self.startAngle(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsGridLayout","title":"<code>GraphicsGridLayout</code>","text":"<p>         Bases: <code>widgets.GraphicsLayoutMixin</code>, <code>QtWidgets.QGraphicsGridLayout</code></p> Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>class GraphicsGridLayout(widgets.GraphicsLayoutMixin, QtWidgets.QGraphicsGridLayout):\ndef __getitem__(\nself, idx: tuple[int, int] | int\n) -&gt; QtWidgets.QGraphicsLayoutItem | None:\nreturn self.itemAt(*idx) if isinstance(idx, tuple) else self.itemAt(idx)\ndef __setitem__(\nself,\nidx: tuple[int | slice, int | slice],\nvalue: QtWidgets.QGraphicsLayoutItem,\n):\nrow, col = idx\nrowspan = row.stop - row.start + 1 if isinstance(row, slice) else 1\ncolspan = col.stop - col.start + 1 if isinstance(col, slice) else 1\nrowstart = row.start if isinstance(row, slice) else row\ncolstart = col.start if isinstance(col, slice) else col\nself.add(value, rowstart, colstart, rowspan, colspan)\ndef serialize_fields(self):\nitems = []\npositions = []\nfor row in range(self.rowCount()):\nfor col in range(self.columnCount()):\nitem = self.itemAt(row, col)\nif item is not None:\nitems.append(item)\npositions.append((row, col))\nreturn dict(widgets=items, positions=positions)\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __setstate__(self, state):\nfor item, pos in zip(state[\"widgets\"], state[\"positions\"]):\nx, y, w, h = pos\nself[x : x + w - 1, y : y + h - 1] = item\ndef __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn iter(self[i] for i in range(self.count()) if self[i] is not None)\ndef __add__(\nself,\nother: (Iterable[QtWidgets.QGraphicsLayoutItem] | QtWidgets.QGraphicsLayoutItem),\n):\nif isinstance(other, Iterable):\nfor i, control in enumerate(other):\nself[self.rowCount(), i] = control\nelse:\nself[self.rowCount(), 0 : self.columnCount() - 1] = other\nreturn self\ndef add(\nself,\nitem: QtWidgets.QGraphicsLayoutItem,\nrowstart: int,\ncolstart: int,\nrowspan: int = 1,\ncolspan: int = 1,\n):\nself.addItem(item, rowstart, colstart, rowspan, colspan)\ndef append(self, item: QtWidgets.QGraphicsLayoutItem):\nself[self.rowCount(), 0 : self.columnCount() - 1] = item\ndef set_column_alignment(self, column: int, alignment: constants.AlignmentStr):\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setColumnAlignment(column, constants.ALIGNMENTS[alignment])\ndef set_row_alignment(self, row: int, alignment: constants.AlignmentStr):\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setRowAlignment(row, constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.__add__","title":"<code>__add__(other: Iterable[QtWidgets.QGraphicsLayoutItem] | QtWidgets.QGraphicsLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def __add__(\nself,\nother: (Iterable[QtWidgets.QGraphicsLayoutItem] | QtWidgets.QGraphicsLayoutItem),\n):\nif isinstance(other, Iterable):\nfor i, control in enumerate(other):\nself[self.rowCount(), i] = control\nelse:\nself[self.rowCount(), 0 : self.columnCount() - 1] = other\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.__getitem__","title":"<code>__getitem__(idx: tuple[int, int] | int) -&gt; QtWidgets.QGraphicsLayoutItem | None</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def __getitem__(\nself, idx: tuple[int, int] | int\n) -&gt; QtWidgets.QGraphicsLayoutItem | None:\nreturn self.itemAt(*idx) if isinstance(idx, tuple) else self.itemAt(idx)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn iter(self[i] for i in range(self.count()) if self[i] is not None)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.__setitem__","title":"<code>__setitem__(idx: tuple[int | slice, int | slice], value: QtWidgets.QGraphicsLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def __setitem__(\nself,\nidx: tuple[int | slice, int | slice],\nvalue: QtWidgets.QGraphicsLayoutItem,\n):\nrow, col = idx\nrowspan = row.stop - row.start + 1 if isinstance(row, slice) else 1\ncolspan = col.stop - col.start + 1 if isinstance(col, slice) else 1\nrowstart = row.start if isinstance(row, slice) else row\ncolstart = col.start if isinstance(col, slice) else col\nself.add(value, rowstart, colstart, rowspan, colspan)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def __setstate__(self, state):\nfor item, pos in zip(state[\"widgets\"], state[\"positions\"]):\nx, y, w, h = pos\nself[x : x + w - 1, y : y + h - 1] = item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.add","title":"<code>add(item: QtWidgets.QGraphicsLayoutItem, rowstart: int, colstart: int, rowspan: int = 1, colspan: int = 1)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def add(\nself,\nitem: QtWidgets.QGraphicsLayoutItem,\nrowstart: int,\ncolstart: int,\nrowspan: int = 1,\ncolspan: int = 1,\n):\nself.addItem(item, rowstart, colstart, rowspan, colspan)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.append","title":"<code>append(item: QtWidgets.QGraphicsLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def append(self, item: QtWidgets.QGraphicsLayoutItem):\nself[self.rowCount(), 0 : self.columnCount() - 1] = item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def serialize_fields(self):\nitems = []\npositions = []\nfor row in range(self.rowCount()):\nfor col in range(self.columnCount()):\nitem = self.itemAt(row, col)\nif item is not None:\nitems.append(item)\npositions.append((row, col))\nreturn dict(widgets=items, positions=positions)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.set_column_alignment","title":"<code>set_column_alignment(column: int, alignment: constants.AlignmentStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def set_column_alignment(self, column: int, alignment: constants.AlignmentStr):\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setColumnAlignment(column, constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsgridlayout.GraphicsGridLayout.set_row_alignment","title":"<code>set_row_alignment(row: int, alignment: constants.AlignmentStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>def set_row_alignment(self, row: int, alignment: constants.AlignmentStr):\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setRowAlignment(row, constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsItem","title":"<code>GraphicsItem</code>","text":"<p>         Bases: <code>GraphicsItemMixin</code>, <code>QtWidgets.QGraphicsItem</code></p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>class GraphicsItem(GraphicsItemMixin, QtWidgets.QGraphicsItem):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsItemGroup","title":"<code>GraphicsItemGroup</code>","text":"<p>         Bases: <code>widgets.GraphicsItemMixin</code>, <code>QtWidgets.QGraphicsItemGroup</code></p> Source code in <code>prettyqt\\widgets\\graphicsitemgroup.py</code> <pre><code>class GraphicsItemGroup(widgets.GraphicsItemMixin, QtWidgets.QGraphicsItemGroup):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsItemMixin","title":"<code>GraphicsItemMixin</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>class GraphicsItemMixin:\ndef __repr__(self):\nreturn get_repr(self)\ndef __contains__(self, value: QtCore.QPointF) -&gt; bool:\nreturn self.contains(value)\ndef __getitem__(self, key: int):\nreturn self.data(key)\ndef __setitem__(self, key: int, value):\nself.setData(key, value)\ndef set_focus(self, reason: constants.FocusReasonStr = \"other\"):\nif reason not in constants.FOCUS_REASONS:\nraise InvalidParamError(reason, constants.FOCUS_REASONS)\nself.setFocus(constants.FOCUS_REASONS[reason])\ndef colliding_items(\nself, mode: constants.ItemSelectionModeStr = \"intersects_shape\"\n) -&gt; list[QtWidgets.QGraphicsItem]:\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nreturn self.collidingItems(constants.ITEM_SELECTION_MODE[mode])\ndef collides_with(\nself,\nitem: QtGui.QPainterPath | QtWidgets.QGraphicsItem,\nmode: constants.ItemSelectionModeStr = \"intersects_shape\",\n) -&gt; bool:\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nif isinstance(item, QtGui.QPainterPath):\nreturn self.collidesWithPath(item, constants.ITEM_SELECTION_MODE[mode])\nelse:\nreturn self.collidesWithItem(item, constants.ITEM_SELECTION_MODE[mode])\ndef set_panel_modality(self, modality: PanelModalityStr) -&gt; None:\n\"\"\"Set panel modality.\n        Args:\n            modality: panel modality\n        Raises:\n            InvalidParamError: panel modality does not exist\n        \"\"\"\nif modality not in PANEL_MODALITY:\nraise InvalidParamError(modality, PANEL_MODALITY)\nself.setPanelModality(PANEL_MODALITY[modality])\ndef get_panel_modality(self) -&gt; PanelModalityStr:\n\"\"\"Get the current modality modes as a string.\n        Returns:\n            panel modality\n        \"\"\"\nreturn PANEL_MODALITY.inverse[self.panelModality()]\ndef set_cache_mode(self, mode: CacheModeStr) -&gt; None:\n\"\"\"Set cache mode.\n        Args:\n            mode: cache mode\n        Raises:\n            InvalidParamError: cache mode does not exist\n        \"\"\"\nif mode not in CACHE_MODE:\nraise InvalidParamError(mode, CACHE_MODE)\nself.setCacheMode(CACHE_MODE[mode])\ndef get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current mode modes as a string.\n        Returns:\n            cache mode\n        \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\ndef get_shape(self) -&gt; gui.PainterPath:\nreturn gui.PainterPath(self.shape())\ndef set_scale(self, scale: tuple[float, float] | float):\nif isinstance(scale, float):\nself.setScale(scale)\nelse:\nself.setTransform(gui.Transform.fromScale(scale[0], scale[1]), True)\ndef set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.__contains__","title":"<code>__contains__(value: QtCore.QPointF) -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def __contains__(self, value: QtCore.QPointF) -&gt; bool:\nreturn self.contains(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.__getitem__","title":"<code>__getitem__(key: int)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def __getitem__(self, key: int):\nreturn self.data(key)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.__setitem__","title":"<code>__setitem__(key: int, value: int)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def __setitem__(self, key: int, value):\nself.setData(key, value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.collides_with","title":"<code>collides_with(item: QtGui.QPainterPath | QtWidgets.QGraphicsItem, mode: constants.ItemSelectionModeStr = 'intersects_shape') -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def collides_with(\nself,\nitem: QtGui.QPainterPath | QtWidgets.QGraphicsItem,\nmode: constants.ItemSelectionModeStr = \"intersects_shape\",\n) -&gt; bool:\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nif isinstance(item, QtGui.QPainterPath):\nreturn self.collidesWithPath(item, constants.ITEM_SELECTION_MODE[mode])\nelse:\nreturn self.collidesWithItem(item, constants.ITEM_SELECTION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.colliding_items","title":"<code>colliding_items(mode: constants.ItemSelectionModeStr = 'intersects_shape') -&gt; list[QtWidgets.QGraphicsItem]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def colliding_items(\nself, mode: constants.ItemSelectionModeStr = \"intersects_shape\"\n) -&gt; list[QtWidgets.QGraphicsItem]:\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nreturn self.collidingItems(constants.ITEM_SELECTION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Get the current mode modes as a string.</p> <p>Returns:</p> Type Description <code>CacheModeStr</code> <p>cache mode</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current mode modes as a string.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_panel_modality","title":"<code>get_panel_modality() -&gt; PanelModalityStr</code>","text":"<p>Get the current modality modes as a string.</p> <p>Returns:</p> Type Description <code>PanelModalityStr</code> <p>panel modality</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_panel_modality(self) -&gt; PanelModalityStr:\n\"\"\"Get the current modality modes as a string.\n    Returns:\n        panel modality\n    \"\"\"\nreturn PANEL_MODALITY.inverse[self.panelModality()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_shape","title":"<code>get_shape() -&gt; gui.PainterPath</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_shape(self) -&gt; gui.PainterPath:\nreturn gui.PainterPath(self.shape())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr) -&gt; None</code>","text":"<p>Set cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr</code> <p>cache mode</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>cache mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr) -&gt; None:\n\"\"\"Set cache mode.\n    Args:\n        mode: cache mode\n    Raises:\n        InvalidParamError: cache mode does not exist\n    \"\"\"\nif mode not in CACHE_MODE:\nraise InvalidParamError(mode, CACHE_MODE)\nself.setCacheMode(CACHE_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_focus","title":"<code>set_focus(reason: constants.FocusReasonStr = 'other')</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_focus(self, reason: constants.FocusReasonStr = \"other\"):\nif reason not in constants.FOCUS_REASONS:\nraise InvalidParamError(reason, constants.FOCUS_REASONS)\nself.setFocus(constants.FOCUS_REASONS[reason])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_panel_modality","title":"<code>set_panel_modality(modality: PanelModalityStr) -&gt; None</code>","text":"<p>Set panel modality.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>PanelModalityStr</code> <p>panel modality</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>panel modality does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_panel_modality(self, modality: PanelModalityStr) -&gt; None:\n\"\"\"Set panel modality.\n    Args:\n        modality: panel modality\n    Raises:\n        InvalidParamError: panel modality does not exist\n    \"\"\"\nif modality not in PANEL_MODALITY:\nraise InvalidParamError(modality, PANEL_MODALITY)\nself.setPanelModality(PANEL_MODALITY[modality])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_scale","title":"<code>set_scale(scale: tuple[float, float] | float)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_scale(self, scale: tuple[float, float] | float):\nif isinstance(scale, float):\nself.setScale(scale)\nelse:\nself.setTransform(gui.Transform.fromScale(scale[0], scale[1]), True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_transform","title":"<code>set_transform(transform: datatypes.TransformType, combine: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLayout","title":"<code>GraphicsLayout</code>","text":"<p>         Bases: <code>GraphicsLayoutMixin</code>, <code>QtWidgets.QGraphicsLayout</code></p> Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>class GraphicsLayout(GraphicsLayoutMixin, QtWidgets.QGraphicsLayout):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLayoutItem","title":"<code>GraphicsLayoutItem</code>","text":"<p>         Bases: <code>GraphicsLayoutItemMixin</code>, <code>QtWidgets.QGraphicsLayoutItem</code></p> Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>class GraphicsLayoutItem(GraphicsLayoutItemMixin, QtWidgets.QGraphicsLayoutItem):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLayoutItemMixin","title":"<code>GraphicsLayoutItemMixin</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>class GraphicsLayoutItemMixin:\ndef __repr__(self):\nreturn get_repr(self)\ndef __bool__(self):\nreturn not self.isEmpty()\n@functools.singledispatchmethod\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr,\nvertical: widgets.sizepolicy.SizePolicyStr,\ncontrol_type: widgets.sizepolicy.ControlTypeStr = \"default\",\n):\n\"\"\"Set the size policy.\n        Args:\n            horizontal: horizontal size policy\n            vertical: vertical size policy\n            control_type: control type associated with the widget\n        \"\"\"\nh_policy = widgets.sizepolicy.SIZE_POLICY[horizontal]\nv_policy = widgets.sizepolicy.SIZE_POLICY[vertical]\nc = widgets.sizepolicy.CONTROL_TYPE[control_type]\nself.setSizePolicy(h_policy, v_policy, c)\n@set_size_policy.register\ndef _(self, policy: QtWidgets.QSizePolicy):\nself.setSizePolicy(policy)\ndef get_size_policy(self) -&gt; widgets.SizePolicy:\nqpol = self.sizePolicy()\nreturn widgets.SizePolicy.clone(qpol)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin._","title":"<code>_(policy: QtWidgets.QSizePolicy)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>@set_size_policy.register\ndef _(self, policy: QtWidgets.QSizePolicy):\nself.setSizePolicy(policy)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin.get_size_policy","title":"<code>get_size_policy() -&gt; widgets.SizePolicy</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>def get_size_policy(self) -&gt; widgets.SizePolicy:\nqpol = self.sizePolicy()\nreturn widgets.SizePolicy.clone(qpol)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin.set_size_policy","title":"<code>set_size_policy(horizontal: widgets.sizepolicy.SizePolicyStr, vertical: widgets.sizepolicy.SizePolicyStr, control_type: widgets.sizepolicy.ControlTypeStr = 'default')</code>","text":"<p>Set the size policy.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>widgets.sizepolicy.SizePolicyStr</code> <p>horizontal size policy</p> required <code>vertical</code> <code>widgets.sizepolicy.SizePolicyStr</code> <p>vertical size policy</p> required <code>control_type</code> <code>widgets.sizepolicy.ControlTypeStr</code> <p>control type associated with the widget</p> <code>'default'</code> Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>@functools.singledispatchmethod\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr,\nvertical: widgets.sizepolicy.SizePolicyStr,\ncontrol_type: widgets.sizepolicy.ControlTypeStr = \"default\",\n):\n\"\"\"Set the size policy.\n    Args:\n        horizontal: horizontal size policy\n        vertical: vertical size policy\n        control_type: control type associated with the widget\n    \"\"\"\nh_policy = widgets.sizepolicy.SIZE_POLICY[horizontal]\nv_policy = widgets.sizepolicy.SIZE_POLICY[vertical]\nc = widgets.sizepolicy.CONTROL_TYPE[control_type]\nself.setSizePolicy(h_policy, v_policy, c)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLayoutMixin","title":"<code>GraphicsLayoutMixin</code>","text":"<p>         Bases: <code>widgets.GraphicsLayoutItemMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>class GraphicsLayoutMixin(widgets.GraphicsLayoutItemMixin):\ndef __getitem__(self, index: int) -&gt; QtWidgets.QGraphicsItem:\nlayoutitem = self.itemAt(index)\nreturn layoutitem.graphicsItem()\ndef __setitem__(self, index: int, value: QtWidgets.QGraphicsItem):\nlayoutitem = self.itemAt(index)\nlayoutitem.setGraphicsItem(value)\ndef __delitem__(self, index: int):\nself.removeAt(index)\ndef __iter__(self) -&gt; Iterator[QtWidgets.QGraphicsItem]:\nreturn iter(self[i] for i in range(self.count()))\ndef __contains__(self, item):\nreturn item in self.get_children()\ndef __len__(self):\n# for PySide2\nreturn self.count()\ndef get_children(self) -&gt; list[QtWidgets.QGraphicsItem]:\nreturn list(self)\ndef set_margin(self, margin: int):\nself.setContentsMargins(margin, margin, margin, margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.__contains__","title":"<code>__contains__(item)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def __contains__(self, item):\nreturn item in self.get_children()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def __delitem__(self, index: int):\nself.removeAt(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QGraphicsItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QGraphicsItem:\nlayoutitem = self.itemAt(index)\nreturn layoutitem.graphicsItem()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QGraphicsItem]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QGraphicsItem]:\nreturn iter(self[i] for i in range(self.count()))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def __len__(self):\n# for PySide2\nreturn self.count()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.__setitem__","title":"<code>__setitem__(index: int, value: QtWidgets.QGraphicsItem)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def __setitem__(self, index: int, value: QtWidgets.QGraphicsItem):\nlayoutitem = self.itemAt(index)\nlayoutitem.setGraphicsItem(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.get_children","title":"<code>get_children() -&gt; list[QtWidgets.QGraphicsItem]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def get_children(self) -&gt; list[QtWidgets.QGraphicsItem]:\nreturn list(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslayout.GraphicsLayoutMixin.set_margin","title":"<code>set_margin(margin: int)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>def set_margin(self, margin: int):\nself.setContentsMargins(margin, margin, margin, margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLineItem","title":"<code>GraphicsLineItem</code>","text":"<p>         Bases: <code>widgets.GraphicsItemMixin</code>, <code>QtWidgets.QGraphicsLineItem</code></p> Source code in <code>prettyqt\\widgets\\graphicslineitem.py</code> <pre><code>class GraphicsLineItem(widgets.GraphicsItemMixin, QtWidgets.QGraphicsLineItem):\ndef __repr__(self):\nreturn get_repr(self, self.get_line())\ndef get_line(self) -&gt; core.LineF:\nreturn core.LineF(self.line())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslineitem.GraphicsLineItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslineitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_line())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslineitem.GraphicsLineItem.get_line","title":"<code>get_line() -&gt; core.LineF</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslineitem.py</code> <pre><code>def get_line(self) -&gt; core.LineF:\nreturn core.LineF(self.line())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsLinearLayout","title":"<code>GraphicsLinearLayout</code>","text":"<p>         Bases: <code>widgets.GraphicsLayoutMixin</code>, <code>QtWidgets.QGraphicsLinearLayout</code></p> Source code in <code>prettyqt\\widgets\\graphicslinearlayout.py</code> <pre><code>class GraphicsLinearLayout(widgets.GraphicsLayoutMixin, QtWidgets.QGraphicsLinearLayout):\ndef __init__(\nself,\norientation: (constants.OrientationStr | QtCore.Qt.Orientation) = \"horizontal\",\nparent: QtWidgets.QGraphicsLayoutItem | None = None,\n):\nif isinstance(orientation, QtCore.Qt.Orientation):\nori = orientation\nelse:\nori = constants.ORIENTATION[orientation]\nsuper().__init__(ori, parent)\n# def serialize_fields(self):\n#     return dict(items=self.get_children())\n# def __setstate__(self, state):\n#     for item, pos in zip(state[\"widgets\"], state[\"positions\"]):\n#         x, y = pos\n#         self[x, y] = item\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __add__(self, other):\nself[self.count()] = other\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslinearlayout.GraphicsLinearLayout.__add__","title":"<code>__add__(other)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslinearlayout.py</code> <pre><code>def __add__(self, other):\nself[self.count()] = other\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicslinearlayout.GraphicsLinearLayout.__init__","title":"<code>__init__(orientation: constants.OrientationStr | QtCore.Qt.Orientation = 'horizontal', parent: QtWidgets.QGraphicsLayoutItem | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicslinearlayout.py</code> <pre><code>def __init__(\nself,\norientation: (constants.OrientationStr | QtCore.Qt.Orientation) = \"horizontal\",\nparent: QtWidgets.QGraphicsLayoutItem | None = None,\n):\nif isinstance(orientation, QtCore.Qt.Orientation):\nori = orientation\nelse:\nori = constants.ORIENTATION[orientation]\nsuper().__init__(ori, parent)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsObject","title":"<code>GraphicsObject</code>","text":"<p>         Bases: <code>GraphicsObjectMixin</code>, <code>QtWidgets.QGraphicsObject</code></p> Source code in <code>prettyqt\\widgets\\graphicsobject.py</code> <pre><code>class GraphicsObject(GraphicsObjectMixin, QtWidgets.QGraphicsObject):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsObjectMixin","title":"<code>GraphicsObjectMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>widgets.GraphicsItemMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicsobject.py</code> <pre><code>class GraphicsObjectMixin(core.ObjectMixin, widgets.GraphicsItemMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsOpacityEffect","title":"<code>GraphicsOpacityEffect</code>","text":"<p>         Bases: <code>widgets.GraphicsEffectMixin</code>, <code>QtWidgets.QGraphicsOpacityEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicsopacityeffect.py</code> <pre><code>class GraphicsOpacityEffect(\nwidgets.GraphicsEffectMixin, QtWidgets.QGraphicsOpacityEffect\n):\ndef get_opacity_mask(self) -&gt; gui.Brush:\nreturn gui.Brush(self.opacityMask())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsopacityeffect.GraphicsOpacityEffect.get_opacity_mask","title":"<code>get_opacity_mask() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsopacityeffect.py</code> <pre><code>def get_opacity_mask(self) -&gt; gui.Brush:\nreturn gui.Brush(self.opacityMask())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsPathItem","title":"<code>GraphicsPathItem</code>","text":"<p>         Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>QtWidgets.QGraphicsPathItem</code></p> Source code in <code>prettyqt\\widgets\\graphicspathitem.py</code> <pre><code>class GraphicsPathItem(\nwidgets.AbstractGraphicsShapeItemMixin, QtWidgets.QGraphicsPathItem\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsPixmapItem","title":"<code>GraphicsPixmapItem</code>","text":"<p>         Bases: <code>widgets.GraphicsItemMixin</code>, <code>QtWidgets.QGraphicsPixmapItem</code></p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>class GraphicsPixmapItem(widgets.GraphicsItemMixin, QtWidgets.QGraphicsPixmapItem):\ndef set_transformation_mode(self, mode: constants.TransformationModeStr):\n\"\"\"Set transformation mode.\n        Args:\n            mode: transformation mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in constants.TRANSFORMATION_MODE:\nraise InvalidParamError(mode, constants.TRANSFORMATION_MODE)\nself.setTransformationMode(constants.TRANSFORMATION_MODE[mode])\ndef get_transformation_mode(self) -&gt; constants.TransformationModeStr:\n\"\"\"Return current transformation mode.\n        Returns:\n            transformation mode\n        \"\"\"\nreturn constants.TRANSFORMATION_MODE.inverse[self.transformationMode()]\ndef set_shape_mode(self, mode: ShapeModeStr):\n\"\"\"Set shape mode.\n        Args:\n            mode: shape mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in SHAPE_MODE:\nraise InvalidParamError(mode, SHAPE_MODE)\nself.setShapeMode(SHAPE_MODE[mode])\ndef get_shape_mode(self) -&gt; ShapeModeStr:\n\"\"\"Return current shape mode.\n        Returns:\n            shape mode\n        \"\"\"\nreturn SHAPE_MODE.inverse[self.shapeMode()]\ndef get_pixmap(self) -&gt; gui.Pixmap | None:\npix = self.pixmap()\nreturn None if pix.isNull() else gui.Pixmap(pix)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_pixmap","title":"<code>get_pixmap() -&gt; gui.Pixmap | None</code>","text":"Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_pixmap(self) -&gt; gui.Pixmap | None:\npix = self.pixmap()\nreturn None if pix.isNull() else gui.Pixmap(pix)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_shape_mode","title":"<code>get_shape_mode() -&gt; ShapeModeStr</code>","text":"<p>Return current shape mode.</p> <p>Returns:</p> Type Description <code>ShapeModeStr</code> <p>shape mode</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_shape_mode(self) -&gt; ShapeModeStr:\n\"\"\"Return current shape mode.\n    Returns:\n        shape mode\n    \"\"\"\nreturn SHAPE_MODE.inverse[self.shapeMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_transformation_mode","title":"<code>get_transformation_mode() -&gt; constants.TransformationModeStr</code>","text":"<p>Return current transformation mode.</p> <p>Returns:</p> Type Description <code>constants.TransformationModeStr</code> <p>transformation mode</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_transformation_mode(self) -&gt; constants.TransformationModeStr:\n\"\"\"Return current transformation mode.\n    Returns:\n        transformation mode\n    \"\"\"\nreturn constants.TRANSFORMATION_MODE.inverse[self.transformationMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.set_shape_mode","title":"<code>set_shape_mode(mode: ShapeModeStr)</code>","text":"<p>Set shape mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ShapeModeStr</code> <p>shape mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def set_shape_mode(self, mode: ShapeModeStr):\n\"\"\"Set shape mode.\n    Args:\n        mode: shape mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in SHAPE_MODE:\nraise InvalidParamError(mode, SHAPE_MODE)\nself.setShapeMode(SHAPE_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.set_transformation_mode","title":"<code>set_transformation_mode(mode: constants.TransformationModeStr)</code>","text":"<p>Set transformation mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.TransformationModeStr</code> <p>transformation mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def set_transformation_mode(self, mode: constants.TransformationModeStr):\n\"\"\"Set transformation mode.\n    Args:\n        mode: transformation mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in constants.TRANSFORMATION_MODE:\nraise InvalidParamError(mode, constants.TRANSFORMATION_MODE)\nself.setTransformationMode(constants.TRANSFORMATION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsPolygonItem","title":"<code>GraphicsPolygonItem</code>","text":"<p>         Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>QtWidgets.QGraphicsPolygonItem</code></p> Source code in <code>prettyqt\\widgets\\graphicspolygonitem.py</code> <pre><code>class GraphicsPolygonItem(\nwidgets.AbstractGraphicsShapeItemMixin, QtWidgets.QGraphicsPolygonItem\n):\ndef serialize_fields(self):\nreturn dict(polygon=self.get_polygon(), fill_rule=self.get_fill_rule())\ndef get_polygon(self) -&gt; gui.PolygonF:\nreturn gui.PolygonF(self.polygon())\ndef set_fill_rule(self, rule: constants.FillRuleStr):\nif rule not in constants.FILL_RULE:\nraise InvalidParamError(rule, constants.FILL_RULE)\nself.setFillRule(constants.FILL_RULE[rule])\ndef get_fill_rule(self) -&gt; constants.FillRuleStr:\nreturn constants.FILL_RULE.inverse[self.fillRule()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspolygonitem.GraphicsPolygonItem.get_fill_rule","title":"<code>get_fill_rule() -&gt; constants.FillRuleStr</code>","text":"Source code in <code>prettyqt\\widgets\\graphicspolygonitem.py</code> <pre><code>def get_fill_rule(self) -&gt; constants.FillRuleStr:\nreturn constants.FILL_RULE.inverse[self.fillRule()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspolygonitem.GraphicsPolygonItem.get_polygon","title":"<code>get_polygon() -&gt; gui.PolygonF</code>","text":"Source code in <code>prettyqt\\widgets\\graphicspolygonitem.py</code> <pre><code>def get_polygon(self) -&gt; gui.PolygonF:\nreturn gui.PolygonF(self.polygon())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspolygonitem.GraphicsPolygonItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicspolygonitem.py</code> <pre><code>def serialize_fields(self):\nreturn dict(polygon=self.get_polygon(), fill_rule=self.get_fill_rule())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicspolygonitem.GraphicsPolygonItem.set_fill_rule","title":"<code>set_fill_rule(rule: constants.FillRuleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicspolygonitem.py</code> <pre><code>def set_fill_rule(self, rule: constants.FillRuleStr):\nif rule not in constants.FILL_RULE:\nraise InvalidParamError(rule, constants.FILL_RULE)\nself.setFillRule(constants.FILL_RULE[rule])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsProxyWidget","title":"<code>GraphicsProxyWidget</code>","text":"<p>         Bases: <code>widgets.GraphicsWidgetMixin</code>, <code>QtWidgets.QGraphicsProxyWidget</code></p> Source code in <code>prettyqt\\widgets\\graphicsproxywidget.py</code> <pre><code>class GraphicsProxyWidget(widgets.GraphicsWidgetMixin, QtWidgets.QGraphicsProxyWidget):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsRectItem","title":"<code>GraphicsRectItem</code>","text":"<p>         Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>QtWidgets.QGraphicsRectItem</code></p> Source code in <code>prettyqt\\widgets\\graphicsrectitem.py</code> <pre><code>class GraphicsRectItem(\nwidgets.AbstractGraphicsShapeItemMixin, QtWidgets.QGraphicsRectItem\n):\ndef __repr__(self):\nreturn get_repr(self, self.get_rect())\ndef get_rect(self):\nreturn core.RectF(self.rect())\ndef serialize_fields(self):\nreturn dict(rect=self.get_rect())\ndef __setstate__(self, state):\nsuper().__setstate__(state)\nself.setRect(state[\"rect\"])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsrectitem.GraphicsRectItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsrectitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_rect())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsrectitem.GraphicsRectItem.__setstate__","title":"<code>__setstate__(state)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsrectitem.py</code> <pre><code>def __setstate__(self, state):\nsuper().__setstate__(state)\nself.setRect(state[\"rect\"])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsrectitem.GraphicsRectItem.get_rect","title":"<code>get_rect()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsrectitem.py</code> <pre><code>def get_rect(self):\nreturn core.RectF(self.rect())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsrectitem.GraphicsRectItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsrectitem.py</code> <pre><code>def serialize_fields(self):\nreturn dict(rect=self.get_rect())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsRotation","title":"<code>GraphicsRotation</code>","text":"<p>         Bases: <code>widgets.GraphicsTransformMixin</code>, <code>QtWidgets.QGraphicsRotation</code></p> Source code in <code>prettyqt\\widgets\\graphicsrotation.py</code> <pre><code>class GraphicsRotation(widgets.GraphicsTransformMixin, QtWidgets.QGraphicsRotation):\ndef set_axis(self, axis: constants.AxisStr):\nif axis not in constants.AXIS:\nraise InvalidParamError(axis, constants.AXIS)\nself.setAxis(constants.AXIS[axis])\ndef set_origin(self, origin: datatypes.VectorType):\nif not isinstance(origin, QtGui.QVector3D):\norigin = QtGui.QVector3D(*origin)\nself.setOrigin(origin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsrotation.GraphicsRotation.set_axis","title":"<code>set_axis(axis: constants.AxisStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsrotation.py</code> <pre><code>def set_axis(self, axis: constants.AxisStr):\nif axis not in constants.AXIS:\nraise InvalidParamError(axis, constants.AXIS)\nself.setAxis(constants.AXIS[axis])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsrotation.GraphicsRotation.set_origin","title":"<code>set_origin(origin: datatypes.VectorType)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsrotation.py</code> <pre><code>def set_origin(self, origin: datatypes.VectorType):\nif not isinstance(origin, QtGui.QVector3D):\norigin = QtGui.QVector3D(*origin)\nself.setOrigin(origin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsScale","title":"<code>GraphicsScale</code>","text":"<p>         Bases: <code>widgets.GraphicsTransformMixin</code>, <code>QtWidgets.QGraphicsScale</code></p> Source code in <code>prettyqt\\widgets\\graphicsscale.py</code> <pre><code>class GraphicsScale(widgets.GraphicsTransformMixin, QtWidgets.QGraphicsScale):\ndef set_origin(self, origin: datatypes.VectorType):\nif not isinstance(origin, QtGui.QVector3D):\norigin = QtGui.QVector3D(*origin)\nself.setOrigin(origin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscale.GraphicsScale.set_origin","title":"<code>set_origin(origin: datatypes.VectorType)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscale.py</code> <pre><code>def set_origin(self, origin: datatypes.VectorType):\nif not isinstance(origin, QtGui.QVector3D):\norigin = QtGui.QVector3D(*origin)\nself.setOrigin(origin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsScene","title":"<code>GraphicsScene</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QGraphicsScene</code></p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>class GraphicsScene(core.ObjectMixin, QtWidgets.QGraphicsScene):\nclass GridType(enum.IntEnum):\n\"\"\"Grid type for background.\"\"\"\nNoGrid = 0\nDotGrid = 1\nLineGrid = 2\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself._grid_mode = self.GridType.LineGrid\nself._grid_size = 50\nself._pen_width = 0.65\nself._grid_color = self.get_palette().get_color(\"text\")\nself._bg_color = self.get_palette().get_color(\"window\")\n# self.setBackgroundBrush(self._bg_color)\ndef __repr__(self):\ncls_name = str(self.__class__.__name__)\nreturn f'&lt;{cls_name}(\"{self.viewer()}\") object at {hex(id(self))}&gt;'\ndef __getitem__(self, index: int) -&gt; QtWidgets.QGraphicsItem:\nreturn self.items()[index]\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"itemIndexMethod\": ITEM_INDEX_METHOD}\nreturn maps\ndef get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_background_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.backgroundBrush())\ndef get_foreground_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foregroundBrush())\ndef add(self, item) -&gt; QtWidgets.QGraphicsItem:\nmatch item:\ncase QtWidgets.QGraphicsItem():\nself.addItem(item)\nreturn item\ncase QtGui.QPixmap():\nreturn self.add_pixmap(item)\ncase QtGui.QPainterPath():\nreturn self.add_path(item)\ncase QtGui.QPolygonF():\nreturn self.add_polygon(item)\ncase QtCore.QRectF():\nreturn self.add_rect(item)\ncase QtCore.QLine():\nreturn self.add_line(item)\ncase str():\nreturn self.add_text(item)\ncase QtWidgets.QWidget():\nreturn self.add_widget(item)\ncase _:\nraise TypeError(item)\ndef add_pixmap(self, pixmap: QtGui.QPixmap) -&gt; widgets.GraphicsPixmapItem:\ng_item = widgets.GraphicsPixmapItem(pixmap)\nself.addItem(g_item)\nreturn g_item\ndef add_polygon(\nself,\npolygon: QtGui.QPolygonF | QtGui.QPolygon,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsPolygonItem:\nif isinstance(polygon, QtGui.QPolygon):\npolygon = gui.PolygonF(polygon)\ng_item = widgets.GraphicsPolygonItem(polygon)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_path(\nself,\npath: QtGui.QPainterPath,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsPathItem:\ng_item = widgets.GraphicsPathItem(path)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsRectItem:\nif isinstance(rect, QtCore.QRect):\nrect = core.RectF(rect)\nelif isinstance(rect, tuple):\nrect = core.RectF(*rect)\ng_item = widgets.GraphicsRectItem(rect)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_line(\nself,\nline: QtCore.QLineF | QtCore.QLine | tuple[float, float, float, float],\npen: QtGui.QPen | None = None,\n) -&gt; widgets.GraphicsLineItem:\nif isinstance(line, QtCore.QLine):\nline = core.LineF(line)\nelif isinstance(line, tuple):\nline = core.LineF(*line)\ng_item = widgets.GraphicsLineItem(line)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_ellipse(\nself,\nellipse: datatypes.RectType | datatypes.RectFType,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsEllipseItem:\nif isinstance(ellipse, QtCore.QRect):\nellipse = core.RectF(ellipse)\nelif isinstance(ellipse, tuple):\nellipse = core.RectF(*ellipse)\ng_item = widgets.GraphicsEllipseItem(ellipse)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_text(\nself, text: str, font: QtGui.QFont | None = None\n) -&gt; widgets.GraphicsTextItem:\ng_item = widgets.GraphicsTextItem(text)\nif font is not None:\ng_item.setFont(font)\nself.addItem(g_item)\nreturn g_item\ndef add_simple_text(\nself, text: str, font: QtGui.QFont | None = None\n) -&gt; widgets.GraphicsSimpleTextItem:\ng_item = widgets.GraphicsSimpleTextItem(text)\nif font is not None:\ng_item.setFont(font)\nself.addItem(g_item)\nreturn g_item\ndef add_widget(self, widget: QtWidgets.QWidget) -&gt; widgets.GraphicsProxyWidget:\ng_item = widgets.GraphicsProxyWidget()\ng_item.setWidget(widget)\nself.addItem(g_item)\nreturn g_item\ndef colliding_items(\nself,\nitem: QtWidgets.QGraphicsItem,\nmode: constants.ItemSelectionModeStr = \"intersects_shape\",\n) -&gt; list[QtWidgets.QGraphicsItem]:\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nreturn self.collidingItems(item, constants.ITEM_SELECTION_MODE[mode])\ndef add_item_group(\nself, *items: QtWidgets.QGraphicsItem\n) -&gt; widgets.GraphicsItemGroup:\ngroup = widgets.GraphicsItemGroup()\nfor item in items:\ngroup.addToGroup(item)\nreturn group\ndef _draw_grid(\nself,\npainter: QtGui.QPainter,\nrect: QtCore.QRectF,\npen: QtGui.QPen,\ngrid_size: int,\n):\nleft = int(rect.left())\nright = int(rect.right())\ntop = int(rect.top())\nbottom = int(rect.bottom())\nfirst_left = left - (left % grid_size)\nfirst_top = top - (top % grid_size)\nlines = [\nQtCore.QLineF(x, top, x, bottom) for x in range(first_left, right, grid_size)\n]\nlines.extend(\n[\nQtCore.QLineF(left, y, right, y)\nfor y in range(first_top, bottom, grid_size)\n]\n)\npainter.setPen(pen)\npainter.drawLines(lines)\ndef _draw_dots(\nself,\npainter: QtGui.QPainter,\nrect: QtCore.QRectF,\npen: QtGui.QPen,\ngrid_size: int,\n):\nif (zoom := self._get_viewer_zoom()) &lt; 0:\ngrid_size *= int(abs(zoom) / 0.3 + 1)\nleft = int(rect.left())\nright = int(rect.right())\ntop = int(rect.top())\nbottom = int(rect.bottom())\nfirst_left = left - (left % grid_size)\nfirst_top = top - (top % grid_size)\npen.setWidth(grid_size / 10)\npainter.setPen(pen)\n[\npainter.drawPoint(int(x), int(y))\nfor x in range(first_left, right, grid_size)\nfor y in range(first_top, bottom, grid_size)\n]\ndef drawBackground(self, painter: QtGui.QPainter, rect: QtCore.QRect):\nsuper().drawBackground(painter, rect)\npainter.save()\npainter.setRenderHint(QtGui.QPainter.RenderHint.Antialiasing, False)\npainter.setBrush(self.backgroundBrush())\nif self._grid_mode == self.GridType.DotGrid:\npen = QtGui.QPen(self.grid_color, self._pen_width)\nself._draw_dots(painter, rect, pen, self._grid_size)\nelif self._grid_mode == self.GridType.LineGrid:\nzoom = self._get_viewer_zoom()\nif zoom &gt; -0.5:\npen = QtGui.QPen(self.grid_color, self._pen_width)\nself._draw_grid(painter, rect, pen, self._grid_size)\ncolor = self._bg_color.darker(150)\nif zoom &lt; -0.0:\ncolor = color.darker(100 - int(zoom * 110))\npen = QtGui.QPen(color, self._pen_width)\nself._draw_grid(painter, rect, pen, self._grid_size * 8)\npainter.restore()\ndef _get_viewer_zoom(self):\ntransform = self.viewer().transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\ndef mousePressEvent(self, event):\nselected = self.viewer().selectedItems()\nif viewer := self.viewer():\nviewer.sceneMousePressEvent(event)\nsuper().mousePressEvent(event)\nkeep_selection = any(\n[\nevent.button() == QtCore.Qt.MiddleButton,\nevent.button() == QtCore.Qt.RightButton,\nevent.modifiers() == QtCore.Qt.AltModifier,\n]\n)\nif keep_selection:\nfor node in selected:\nnode.setSelected(True)\ndef mouseMoveEvent(self, event):\nif viewer := self.viewer():\nviewer.sceneMouseMoveEvent(event)\nsuper().mouseMoveEvent(event)\ndef mouseReleaseEvent(self, event):\nif viewer := self.viewer():\nviewer.sceneMouseReleaseEvent(event)\nsuper().mouseReleaseEvent(event)\ndef viewer(self):\nreturn self.views()[0] if self.views() else None\ndef get_grid_mode(self) -&gt; GridType:\nreturn self._grid_mode\ndef set_grid_mode(self, mode: GridType | None = None):\n# alternative?\n# brush = gui.Brush()\n# brush.set_style(\"cross\")\n# scene.setBackgroundBrush(brush)\nif mode is None:\nmode = self.GridType.NoGrid\nself._grid_mode = mode\ndef get_grid_color(self) -&gt; gui.Color:\nreturn self._grid_color\ndef set_grid_color(self, color: datatypes.ColorType):\nself._grid_color = colors.get_color(color)\ndef get_background_color(self) -&gt; gui.Color:\nreturn self._bg_color\ndef set_background_color(self, color: datatypes.ColorType):\nself._bg_color = colors.get_color(color)\nself.setBackgroundBrush(self._bg_color)\ndef set_item_index_method(self, method: ItemIndexMethodStr):\n\"\"\"Set item index method.\n        Args:\n            method: item index method to use\n        Raises:\n            InvalidParamError: invalid item index method\n        \"\"\"\nif method not in ITEM_INDEX_METHOD:\nraise InvalidParamError(method, ITEM_INDEX_METHOD)\nself.setItemIndexMethod(ITEM_INDEX_METHOD[method])\ndef get_item_index_method(self) -&gt; ItemIndexMethodStr:\n\"\"\"Return item index method.\n        Returns:\n            item index method\n        \"\"\"\nreturn ITEM_INDEX_METHOD.inverse[self.itemIndexMethod()]\nbg_color = core.Property(QtGui.QColor, get_background_color, set_background_color)\ngrid_color = core.Property(QtGui.QColor, get_grid_color, set_grid_color)\ngrid_mode = core.Property(int, get_grid_mode, set_grid_mode)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.bg_color","title":"<code>bg_color = core.Property(QtGui.QColor, get_background_color, set_background_color)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.grid_color","title":"<code>grid_color = core.Property(QtGui.QColor, get_grid_color, set_grid_color)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.grid_mode","title":"<code>grid_mode = core.Property(int, get_grid_mode, set_grid_mode)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.GridType","title":"<code>GridType</code>","text":"<p>         Bases: <code>enum.IntEnum</code></p> <p>Grid type for background.</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>class GridType(enum.IntEnum):\n\"\"\"Grid type for background.\"\"\"\nNoGrid = 0\nDotGrid = 1\nLineGrid = 2\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.GridType.DotGrid","title":"<code>DotGrid = 1</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.GridType.LineGrid","title":"<code>LineGrid = 2</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.GridType.NoGrid","title":"<code>NoGrid = 0</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QGraphicsItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QGraphicsItem:\nreturn self.items()[index]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.__init__","title":"<code>__init__(parent = None)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def __init__(self, parent=None):\nsuper().__init__(parent)\nself._grid_mode = self.GridType.LineGrid\nself._grid_size = 50\nself._pen_width = 0.65\nself._grid_color = self.get_palette().get_color(\"text\")\nself._bg_color = self.get_palette().get_color(\"window\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def __repr__(self):\ncls_name = str(self.__class__.__name__)\nreturn f'&lt;{cls_name}(\"{self.viewer()}\") object at {hex(id(self))}&gt;'\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add","title":"<code>add(item) -&gt; QtWidgets.QGraphicsItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add(self, item) -&gt; QtWidgets.QGraphicsItem:\nmatch item:\ncase QtWidgets.QGraphicsItem():\nself.addItem(item)\nreturn item\ncase QtGui.QPixmap():\nreturn self.add_pixmap(item)\ncase QtGui.QPainterPath():\nreturn self.add_path(item)\ncase QtGui.QPolygonF():\nreturn self.add_polygon(item)\ncase QtCore.QRectF():\nreturn self.add_rect(item)\ncase QtCore.QLine():\nreturn self.add_line(item)\ncase str():\nreturn self.add_text(item)\ncase QtWidgets.QWidget():\nreturn self.add_widget(item)\ncase _:\nraise TypeError(item)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_ellipse","title":"<code>add_ellipse(ellipse: datatypes.RectType | datatypes.RectFType, pen: QtGui.QPen | None = None, brush: QtGui.QBrush | None = None) -&gt; widgets.GraphicsEllipseItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_ellipse(\nself,\nellipse: datatypes.RectType | datatypes.RectFType,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsEllipseItem:\nif isinstance(ellipse, QtCore.QRect):\nellipse = core.RectF(ellipse)\nelif isinstance(ellipse, tuple):\nellipse = core.RectF(*ellipse)\ng_item = widgets.GraphicsEllipseItem(ellipse)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_item_group","title":"<code>add_item_group(*items: QtWidgets.QGraphicsItem) -&gt; widgets.GraphicsItemGroup</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_item_group(\nself, *items: QtWidgets.QGraphicsItem\n) -&gt; widgets.GraphicsItemGroup:\ngroup = widgets.GraphicsItemGroup()\nfor item in items:\ngroup.addToGroup(item)\nreturn group\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_line","title":"<code>add_line(line: QtCore.QLineF | QtCore.QLine | tuple[float, float, float, float], pen: QtGui.QPen | None = None) -&gt; widgets.GraphicsLineItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_line(\nself,\nline: QtCore.QLineF | QtCore.QLine | tuple[float, float, float, float],\npen: QtGui.QPen | None = None,\n) -&gt; widgets.GraphicsLineItem:\nif isinstance(line, QtCore.QLine):\nline = core.LineF(line)\nelif isinstance(line, tuple):\nline = core.LineF(*line)\ng_item = widgets.GraphicsLineItem(line)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_path","title":"<code>add_path(path: QtGui.QPainterPath, pen: QtGui.QPen | None = None, brush: QtGui.QBrush | None = None) -&gt; widgets.GraphicsPathItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_path(\nself,\npath: QtGui.QPainterPath,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsPathItem:\ng_item = widgets.GraphicsPathItem(path)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_pixmap","title":"<code>add_pixmap(pixmap: QtGui.QPixmap) -&gt; widgets.GraphicsPixmapItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_pixmap(self, pixmap: QtGui.QPixmap) -&gt; widgets.GraphicsPixmapItem:\ng_item = widgets.GraphicsPixmapItem(pixmap)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_polygon","title":"<code>add_polygon(polygon: QtGui.QPolygonF | QtGui.QPolygon, pen: QtGui.QPen | None = None, brush: QtGui.QBrush | None = None) -&gt; widgets.GraphicsPolygonItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_polygon(\nself,\npolygon: QtGui.QPolygonF | QtGui.QPolygon,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsPolygonItem:\nif isinstance(polygon, QtGui.QPolygon):\npolygon = gui.PolygonF(polygon)\ng_item = widgets.GraphicsPolygonItem(polygon)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_rect","title":"<code>add_rect(rect: datatypes.RectType | datatypes.RectFType, pen: QtGui.QPen | None = None, brush: QtGui.QBrush | None = None) -&gt; widgets.GraphicsRectItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\npen: QtGui.QPen | None = None,\nbrush: QtGui.QBrush | None = None,\n) -&gt; widgets.GraphicsRectItem:\nif isinstance(rect, QtCore.QRect):\nrect = core.RectF(rect)\nelif isinstance(rect, tuple):\nrect = core.RectF(*rect)\ng_item = widgets.GraphicsRectItem(rect)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_simple_text","title":"<code>add_simple_text(text: str, font: QtGui.QFont | None = None) -&gt; widgets.GraphicsSimpleTextItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_simple_text(\nself, text: str, font: QtGui.QFont | None = None\n) -&gt; widgets.GraphicsSimpleTextItem:\ng_item = widgets.GraphicsSimpleTextItem(text)\nif font is not None:\ng_item.setFont(font)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_text","title":"<code>add_text(text: str, font: QtGui.QFont | None = None) -&gt; widgets.GraphicsTextItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_text(\nself, text: str, font: QtGui.QFont | None = None\n) -&gt; widgets.GraphicsTextItem:\ng_item = widgets.GraphicsTextItem(text)\nif font is not None:\ng_item.setFont(font)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.add_widget","title":"<code>add_widget(widget: QtWidgets.QWidget) -&gt; widgets.GraphicsProxyWidget</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def add_widget(self, widget: QtWidgets.QWidget) -&gt; widgets.GraphicsProxyWidget:\ng_item = widgets.GraphicsProxyWidget()\ng_item.setWidget(widget)\nself.addItem(g_item)\nreturn g_item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.colliding_items","title":"<code>colliding_items(item: QtWidgets.QGraphicsItem, mode: constants.ItemSelectionModeStr = 'intersects_shape') -&gt; list[QtWidgets.QGraphicsItem]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def colliding_items(\nself,\nitem: QtWidgets.QGraphicsItem,\nmode: constants.ItemSelectionModeStr = \"intersects_shape\",\n) -&gt; list[QtWidgets.QGraphicsItem]:\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nreturn self.collidingItems(item, constants.ITEM_SELECTION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.drawBackground","title":"<code>drawBackground(painter: QtGui.QPainter, rect: QtCore.QRect)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def drawBackground(self, painter: QtGui.QPainter, rect: QtCore.QRect):\nsuper().drawBackground(painter, rect)\npainter.save()\npainter.setRenderHint(QtGui.QPainter.RenderHint.Antialiasing, False)\npainter.setBrush(self.backgroundBrush())\nif self._grid_mode == self.GridType.DotGrid:\npen = QtGui.QPen(self.grid_color, self._pen_width)\nself._draw_dots(painter, rect, pen, self._grid_size)\nelif self._grid_mode == self.GridType.LineGrid:\nzoom = self._get_viewer_zoom()\nif zoom &gt; -0.5:\npen = QtGui.QPen(self.grid_color, self._pen_width)\nself._draw_grid(painter, rect, pen, self._grid_size)\ncolor = self._bg_color.darker(150)\nif zoom &lt; -0.0:\ncolor = color.darker(100 - int(zoom * 110))\npen = QtGui.QPen(color, self._pen_width)\nself._draw_grid(painter, rect, pen, self._grid_size * 8)\npainter.restore()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_background_brush","title":"<code>get_background_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_background_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.backgroundBrush())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_background_color","title":"<code>get_background_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_background_color(self) -&gt; gui.Color:\nreturn self._bg_color\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_foreground_brush","title":"<code>get_foreground_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_foreground_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foregroundBrush())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_grid_color","title":"<code>get_grid_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_grid_color(self) -&gt; gui.Color:\nreturn self._grid_color\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_grid_mode","title":"<code>get_grid_mode() -&gt; GridType</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_grid_mode(self) -&gt; GridType:\nreturn self._grid_mode\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_item_index_method","title":"<code>get_item_index_method() -&gt; ItemIndexMethodStr</code>","text":"<p>Return item index method.</p> <p>Returns:</p> Type Description <code>ItemIndexMethodStr</code> <p>item index method</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_item_index_method(self) -&gt; ItemIndexMethodStr:\n\"\"\"Return item index method.\n    Returns:\n        item index method\n    \"\"\"\nreturn ITEM_INDEX_METHOD.inverse[self.itemIndexMethod()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_palette","title":"<code>get_palette() -&gt; gui.Palette</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.mouseMoveEvent","title":"<code>mouseMoveEvent(event)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def mouseMoveEvent(self, event):\nif viewer := self.viewer():\nviewer.sceneMouseMoveEvent(event)\nsuper().mouseMoveEvent(event)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.mousePressEvent","title":"<code>mousePressEvent(event)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def mousePressEvent(self, event):\nselected = self.viewer().selectedItems()\nif viewer := self.viewer():\nviewer.sceneMousePressEvent(event)\nsuper().mousePressEvent(event)\nkeep_selection = any(\n[\nevent.button() == QtCore.Qt.MiddleButton,\nevent.button() == QtCore.Qt.RightButton,\nevent.modifiers() == QtCore.Qt.AltModifier,\n]\n)\nif keep_selection:\nfor node in selected:\nnode.setSelected(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def mouseReleaseEvent(self, event):\nif viewer := self.viewer():\nviewer.sceneMouseReleaseEvent(event)\nsuper().mouseReleaseEvent(event)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.set_background_color","title":"<code>set_background_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def set_background_color(self, color: datatypes.ColorType):\nself._bg_color = colors.get_color(color)\nself.setBackgroundBrush(self._bg_color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.set_grid_color","title":"<code>set_grid_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def set_grid_color(self, color: datatypes.ColorType):\nself._grid_color = colors.get_color(color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.set_grid_mode","title":"<code>set_grid_mode(mode: GridType | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def set_grid_mode(self, mode: GridType | None = None):\n# alternative?\n# brush = gui.Brush()\n# brush.set_style(\"cross\")\n# scene.setBackgroundBrush(brush)\nif mode is None:\nmode = self.GridType.NoGrid\nself._grid_mode = mode\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.set_item_index_method","title":"<code>set_item_index_method(method: ItemIndexMethodStr)</code>","text":"<p>Set item index method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>ItemIndexMethodStr</code> <p>item index method to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid item index method</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def set_item_index_method(self, method: ItemIndexMethodStr):\n\"\"\"Set item index method.\n    Args:\n        method: item index method to use\n    Raises:\n        InvalidParamError: invalid item index method\n    \"\"\"\nif method not in ITEM_INDEX_METHOD:\nraise InvalidParamError(method, ITEM_INDEX_METHOD)\nself.setItemIndexMethod(ITEM_INDEX_METHOD[method])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsscene.GraphicsScene.viewer","title":"<code>viewer()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def viewer(self):\nreturn self.views()[0] if self.views() else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsSimpleTextItem","title":"<code>GraphicsSimpleTextItem</code>","text":"<p>         Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>QtWidgets.QGraphicsSimpleTextItem</code></p> Source code in <code>prettyqt\\widgets\\graphicssimpletextitem.py</code> <pre><code>class GraphicsSimpleTextItem(\nwidgets.AbstractGraphicsShapeItemMixin, QtWidgets.QGraphicsSimpleTextItem\n):\ndef __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicssimpletextitem.GraphicsSimpleTextItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicssimpletextitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsTextItem","title":"<code>GraphicsTextItem</code>","text":"<p>         Bases: <code>widgets.GraphicsObjectMixin</code>, <code>QtWidgets.QGraphicsTextItem</code></p> Source code in <code>prettyqt\\widgets\\graphicstextitem.py</code> <pre><code>class GraphicsTextItem(widgets.GraphicsObjectMixin, QtWidgets.QGraphicsTextItem):\ndef __repr__(self):\nreturn get_repr(self, self.toPlainText())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicstextitem.GraphicsTextItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\graphicstextitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.toPlainText())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsTransform","title":"<code>GraphicsTransform</code>","text":"<p>         Bases: <code>GraphicsTransformMixin</code>, <code>QtWidgets.QGraphicsTransform</code></p> Source code in <code>prettyqt\\widgets\\graphicstransform.py</code> <pre><code>class GraphicsTransform(GraphicsTransformMixin, QtWidgets.QGraphicsTransform):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsTransformMixin","title":"<code>GraphicsTransformMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicstransform.py</code> <pre><code>class GraphicsTransformMixin(core.ObjectMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsView","title":"<code>GraphicsView</code>","text":"<p>         Bases: <code>GraphicsViewMixin</code>, <code>QtWidgets.QGraphicsView</code></p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>class GraphicsView(GraphicsViewMixin, QtWidgets.QGraphicsView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsViewMixin","title":"<code>GraphicsViewMixin</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>class GraphicsViewMixin(widgets.AbstractScrollAreaMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], QtWidgets.QGraphicsScene):\nself.setScene(widgets.GraphicsScene())\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"alignment\": constants.ALIGNMENTS,\n\"resizeAnchor\": VIEWPORT_ANCHOR,\n\"transformationAnchor\": VIEWPORT_ANCHOR,\n\"cacheMode\": CACHE_MODES,\n\"dragMode\": DRAG_MODE,\n\"viewportUpdateMode\": VIEWPORT_UPDATE_MODE,\n\"rubberBandSelectionMode\": constants.ITEM_SELECTION_MODE,\n\"renderHints\": gui.painter.RENDER_HINTS,\n\"optimizationFlags\": OPTIMIZATION_FLAGS,\n}\nreturn maps\ndef enable_mousewheel_zoom(self, state: bool = True):\nif state:\nself.viewport().installEventFilter(self)\nelse:\nself.viewport().removeEventFilter(self)\ndef __getitem__(self, index: int) -&gt; QtWidgets.QGraphicsItem:\nreturn self.items()[index]\ndef eventFilter(self, source, event) -&gt; bool:\nif source is not self.viewport() or event.type() != event.Type.Wheel:\nreturn super().eventFilter(source, event)\n# Zoom Factor\nzoom_in_factor = 1.25\nzoom_out_factor = 1 / zoom_in_factor\n# Set Anchors\nself.setTransformationAnchor(self.ViewportAnchor.NoAnchor)\nself.setResizeAnchor(self.ViewportAnchor.NoAnchor)\n# Save the scene pos\nold_pos = self.mapToScene(event.position().toPoint())\n# Zoom\nzoom_factor = zoom_in_factor if event.angleDelta().y() &gt; 0 else zoom_out_factor\nself.scale(zoom_factor, zoom_factor)\n# # Get the new position\nnew_pos = self.mapToScene(event.position().toPoint())\n# Move scene to old position\ndelta = new_pos - old_pos\nself.translate(delta.x(), delta.y())\nreturn True\ndef get_zoom(self) -&gt; float:\n\"\"\"Return the viewer zoom level.\n        Returns:\n            float: zoom level.\n        \"\"\"\ntransform = self.transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\ndef add_item(self, *args):\nreturn self.scene().addItem(*args)\ndef remove_item(self, *args):\nreturn self.scene().removeItem(*args)\ndef get_view_rect(self) -&gt; QtCore.QRect:\n\"\"\"Return the boundaries of the view in scene coordinates.\"\"\"\nr = QtCore.QRectF(self.rect())\nreturn self.viewportTransform().inverted()[0].mapRect(r)\ndef get_pixel_size(self):\n\"\"\"Return vector with length and width of one view pixel in scene coordinates.\"\"\"\np0 = core.PointF(0, 0)\np1 = core.PointF(1, 1)\ntr = self.transform().inverted()[0]\np01 = tr.map(p0)\np11 = tr.map(p1)\nreturn core.PointF(p11 - p01)\ndef get_background_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.backgroundBrush())\ndef get_foreground_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foregroundBrush())\ndef invalidate_scene(\nself, rect: QtCore.QRectF, layer: widgets.graphicsscene.SceneLayerStr = \"all\"\n):\nif layer not in widgets.graphicsscene.SCENE_LAYER:\nraise InvalidParamError(layer, widgets.graphicsscene.SCENE_LAYER)\nself.invalidateScene(rect, widgets.graphicsscene.SCENE_LAYER[layer])\ndef set_transformation_anchor(self, mode: ViewportAnchorStr):\n\"\"\"Set how the view should position the scene during transformations.\n        Args:\n            mode: transformation anchor to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in VIEWPORT_ANCHOR:\nraise InvalidParamError(mode, VIEWPORT_ANCHOR)\nself.setTransformationAnchor(VIEWPORT_ANCHOR[mode])\ndef get_transformation_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current transformation anchor.\n        Returns:\n            viewport anchor\n        \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.transformationAnchor()]\ndef set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\ndef set_resize_anchor(self, mode: ViewportAnchorStr):\n\"\"\"Set how the view should position the scene during resizes.\n        Args:\n            mode: resize anchor to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in VIEWPORT_ANCHOR:\nraise InvalidParamError(mode, VIEWPORT_ANCHOR)\nself.setResizeAnchor(VIEWPORT_ANCHOR[mode])\ndef get_resize_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current resize anchor.\n        Returns:\n            resize anchor\n        \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.resizeAnchor()]\ndef set_viewport_update_mode(self, mode: ViewportUpdateModeStr):\n\"\"\"Set how the viewport should update its contents.\n        Args:\n            mode: viewport update mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in VIEWPORT_UPDATE_MODE:\nraise InvalidParamError(mode, VIEWPORT_UPDATE_MODE)\nself.setViewportUpdateMode(VIEWPORT_UPDATE_MODE[mode])\ndef get_viewport_update_mode(self) -&gt; ViewportUpdateModeStr:\n\"\"\"Return current viewport update mode.\n        Returns:\n            viewport update mode\n        \"\"\"\nreturn VIEWPORT_UPDATE_MODE.inverse[self.viewportUpdateMode()]\ndef set_drag_mode(self, mode: DragModeStr):\n\"\"\"Set the behavior for dragging the mouse while the left mouse button is pressed.\n        Args:\n            mode: drag mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in DRAG_MODE:\nraise InvalidParamError(mode, DRAG_MODE)\nself.setDragMode(DRAG_MODE[mode])\ndef get_drag_mode(self) -&gt; DragModeStr:\n\"\"\"Return current drag mode.\n        Returns:\n            drag mode\n        \"\"\"\nreturn DRAG_MODE.inverse[self.dragMode()]\ndef set_rubberband_selection_mode(self, mode: constants.ItemSelectionModeStr):\n\"\"\"Set the behavior for selecting items with a rubber band selection rectangle.\n        Args:\n            mode: rubberband selection mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nself.setRubberBandSelectionMode(constants.ITEM_SELECTION_MODE[mode])\ndef get_rubberband_selection_mode(self) -&gt; constants.ItemSelectionModeStr:\n\"\"\"Return current rubberband selection mode.\n        Returns:\n            rubberband selection mode\n        \"\"\"\nreturn constants.ITEM_SELECTION_MODE.inverse[self.rubberBandSelectionMode()]\ndef set_cache_mode(self, mode: CacheModeStr):\n\"\"\"Set the cache mode.\n        Args:\n            mode: cache mode to use\n        Raises:\n            InvalidParamError: mode does not exist\n        \"\"\"\nif mode not in CACHE_MODES:\nraise InvalidParamError(mode, CACHE_MODES)\nself.setCacheMode(CACHE_MODES[mode])\ndef get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Return current cache mode.\n        Returns:\n            cache mode\n        \"\"\"\nreturn CACHE_MODES.inverse[self.cacheMode()]\ndef set_optimization_flags(self, *items: OptimizationFlagStr):\nfor item in items:\nif item not in OPTIMIZATION_FLAGS:\nraise InvalidParamError(item, OPTIMIZATION_FLAGS)\nflags = OPTIMIZATION_FLAGS.merge_flags(items)\nself.setOptimizationFlags(flags)\ndef get_optimization_flags(self) -&gt; list[OptimizationFlagStr]:\nreturn OPTIMIZATION_FLAGS.get_list(self.optimizationFlags())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QGraphicsItem</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QGraphicsItem:\nreturn self.items()[index]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], QtWidgets.QGraphicsScene):\nself.setScene(widgets.GraphicsScene())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.add_item","title":"<code>add_item(*args)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def add_item(self, *args):\nreturn self.scene().addItem(*args)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.enable_mousewheel_zoom","title":"<code>enable_mousewheel_zoom(state: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def enable_mousewheel_zoom(self, state: bool = True):\nif state:\nself.viewport().installEventFilter(self)\nelse:\nself.viewport().removeEventFilter(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.eventFilter","title":"<code>eventFilter(source, event) -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def eventFilter(self, source, event) -&gt; bool:\nif source is not self.viewport() or event.type() != event.Type.Wheel:\nreturn super().eventFilter(source, event)\n# Zoom Factor\nzoom_in_factor = 1.25\nzoom_out_factor = 1 / zoom_in_factor\n# Set Anchors\nself.setTransformationAnchor(self.ViewportAnchor.NoAnchor)\nself.setResizeAnchor(self.ViewportAnchor.NoAnchor)\n# Save the scene pos\nold_pos = self.mapToScene(event.position().toPoint())\n# Zoom\nzoom_factor = zoom_in_factor if event.angleDelta().y() &gt; 0 else zoom_out_factor\nself.scale(zoom_factor, zoom_factor)\n# # Get the new position\nnew_pos = self.mapToScene(event.position().toPoint())\n# Move scene to old position\ndelta = new_pos - old_pos\nself.translate(delta.x(), delta.y())\nreturn True\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_background_brush","title":"<code>get_background_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_background_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.backgroundBrush())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Return current cache mode.</p> <p>Returns:</p> Type Description <code>CacheModeStr</code> <p>cache mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Return current cache mode.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODES.inverse[self.cacheMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_drag_mode","title":"<code>get_drag_mode() -&gt; DragModeStr</code>","text":"<p>Return current drag mode.</p> <p>Returns:</p> Type Description <code>DragModeStr</code> <p>drag mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_drag_mode(self) -&gt; DragModeStr:\n\"\"\"Return current drag mode.\n    Returns:\n        drag mode\n    \"\"\"\nreturn DRAG_MODE.inverse[self.dragMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_foreground_brush","title":"<code>get_foreground_brush() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_foreground_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foregroundBrush())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_optimization_flags","title":"<code>get_optimization_flags() -&gt; list[OptimizationFlagStr]</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_optimization_flags(self) -&gt; list[OptimizationFlagStr]:\nreturn OPTIMIZATION_FLAGS.get_list(self.optimizationFlags())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_pixel_size","title":"<code>get_pixel_size()</code>","text":"<p>Return vector with length and width of one view pixel in scene coordinates.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_pixel_size(self):\n\"\"\"Return vector with length and width of one view pixel in scene coordinates.\"\"\"\np0 = core.PointF(0, 0)\np1 = core.PointF(1, 1)\ntr = self.transform().inverted()[0]\np01 = tr.map(p0)\np11 = tr.map(p1)\nreturn core.PointF(p11 - p01)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_resize_anchor","title":"<code>get_resize_anchor() -&gt; ViewportAnchorStr</code>","text":"<p>Return current resize anchor.</p> <p>Returns:</p> Type Description <code>ViewportAnchorStr</code> <p>resize anchor</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_resize_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current resize anchor.\n    Returns:\n        resize anchor\n    \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.resizeAnchor()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_rubberband_selection_mode","title":"<code>get_rubberband_selection_mode() -&gt; constants.ItemSelectionModeStr</code>","text":"<p>Return current rubberband selection mode.</p> <p>Returns:</p> Type Description <code>constants.ItemSelectionModeStr</code> <p>rubberband selection mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_rubberband_selection_mode(self) -&gt; constants.ItemSelectionModeStr:\n\"\"\"Return current rubberband selection mode.\n    Returns:\n        rubberband selection mode\n    \"\"\"\nreturn constants.ITEM_SELECTION_MODE.inverse[self.rubberBandSelectionMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_transformation_anchor","title":"<code>get_transformation_anchor() -&gt; ViewportAnchorStr</code>","text":"<p>Return current transformation anchor.</p> <p>Returns:</p> Type Description <code>ViewportAnchorStr</code> <p>viewport anchor</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_transformation_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current transformation anchor.\n    Returns:\n        viewport anchor\n    \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.transformationAnchor()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_view_rect","title":"<code>get_view_rect() -&gt; QtCore.QRect</code>","text":"<p>Return the boundaries of the view in scene coordinates.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_view_rect(self) -&gt; QtCore.QRect:\n\"\"\"Return the boundaries of the view in scene coordinates.\"\"\"\nr = QtCore.QRectF(self.rect())\nreturn self.viewportTransform().inverted()[0].mapRect(r)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_viewport_update_mode","title":"<code>get_viewport_update_mode() -&gt; ViewportUpdateModeStr</code>","text":"<p>Return current viewport update mode.</p> <p>Returns:</p> Type Description <code>ViewportUpdateModeStr</code> <p>viewport update mode</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_viewport_update_mode(self) -&gt; ViewportUpdateModeStr:\n\"\"\"Return current viewport update mode.\n    Returns:\n        viewport update mode\n    \"\"\"\nreturn VIEWPORT_UPDATE_MODE.inverse[self.viewportUpdateMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_zoom","title":"<code>get_zoom() -&gt; float</code>","text":"<p>Return the viewer zoom level.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>zoom level.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_zoom(self) -&gt; float:\n\"\"\"Return the viewer zoom level.\n    Returns:\n        float: zoom level.\n    \"\"\"\ntransform = self.transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.invalidate_scene","title":"<code>invalidate_scene(rect: QtCore.QRectF, layer: widgets.graphicsscene.SceneLayerStr = 'all')</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def invalidate_scene(\nself, rect: QtCore.QRectF, layer: widgets.graphicsscene.SceneLayerStr = \"all\"\n):\nif layer not in widgets.graphicsscene.SCENE_LAYER:\nraise InvalidParamError(layer, widgets.graphicsscene.SCENE_LAYER)\nself.invalidateScene(rect, widgets.graphicsscene.SCENE_LAYER[layer])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.remove_item","title":"<code>remove_item(*args)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def remove_item(self, *args):\nreturn self.scene().removeItem(*args)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr)</code>","text":"<p>Set the cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr</code> <p>cache mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr):\n\"\"\"Set the cache mode.\n    Args:\n        mode: cache mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in CACHE_MODES:\nraise InvalidParamError(mode, CACHE_MODES)\nself.setCacheMode(CACHE_MODES[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_drag_mode","title":"<code>set_drag_mode(mode: DragModeStr)</code>","text":"<p>Set the behavior for dragging the mouse while the left mouse button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>DragModeStr</code> <p>drag mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_drag_mode(self, mode: DragModeStr):\n\"\"\"Set the behavior for dragging the mouse while the left mouse button is pressed.\n    Args:\n        mode: drag mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in DRAG_MODE:\nraise InvalidParamError(mode, DRAG_MODE)\nself.setDragMode(DRAG_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_optimization_flags","title":"<code>set_optimization_flags(*items: OptimizationFlagStr)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_optimization_flags(self, *items: OptimizationFlagStr):\nfor item in items:\nif item not in OPTIMIZATION_FLAGS:\nraise InvalidParamError(item, OPTIMIZATION_FLAGS)\nflags = OPTIMIZATION_FLAGS.merge_flags(items)\nself.setOptimizationFlags(flags)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_resize_anchor","title":"<code>set_resize_anchor(mode: ViewportAnchorStr)</code>","text":"<p>Set how the view should position the scene during resizes.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportAnchorStr</code> <p>resize anchor to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_resize_anchor(self, mode: ViewportAnchorStr):\n\"\"\"Set how the view should position the scene during resizes.\n    Args:\n        mode: resize anchor to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in VIEWPORT_ANCHOR:\nraise InvalidParamError(mode, VIEWPORT_ANCHOR)\nself.setResizeAnchor(VIEWPORT_ANCHOR[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_rubberband_selection_mode","title":"<code>set_rubberband_selection_mode(mode: constants.ItemSelectionModeStr)</code>","text":"<p>Set the behavior for selecting items with a rubber band selection rectangle.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ItemSelectionModeStr</code> <p>rubberband selection mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_rubberband_selection_mode(self, mode: constants.ItemSelectionModeStr):\n\"\"\"Set the behavior for selecting items with a rubber band selection rectangle.\n    Args:\n        mode: rubberband selection mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in constants.ITEM_SELECTION_MODE:\nraise InvalidParamError(mode, constants.ITEM_SELECTION_MODE)\nself.setRubberBandSelectionMode(constants.ITEM_SELECTION_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_transform","title":"<code>set_transform(transform: datatypes.TransformType, combine: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_transformation_anchor","title":"<code>set_transformation_anchor(mode: ViewportAnchorStr)</code>","text":"<p>Set how the view should position the scene during transformations.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportAnchorStr</code> <p>transformation anchor to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_transformation_anchor(self, mode: ViewportAnchorStr):\n\"\"\"Set how the view should position the scene during transformations.\n    Args:\n        mode: transformation anchor to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in VIEWPORT_ANCHOR:\nraise InvalidParamError(mode, VIEWPORT_ANCHOR)\nself.setTransformationAnchor(VIEWPORT_ANCHOR[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_viewport_update_mode","title":"<code>set_viewport_update_mode(mode: ViewportUpdateModeStr)</code>","text":"<p>Set how the viewport should update its contents.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportUpdateModeStr</code> <p>viewport update mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>mode does not exist</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_viewport_update_mode(self, mode: ViewportUpdateModeStr):\n\"\"\"Set how the viewport should update its contents.\n    Args:\n        mode: viewport update mode to use\n    Raises:\n        InvalidParamError: mode does not exist\n    \"\"\"\nif mode not in VIEWPORT_UPDATE_MODE:\nraise InvalidParamError(mode, VIEWPORT_UPDATE_MODE)\nself.setViewportUpdateMode(VIEWPORT_UPDATE_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsWidget","title":"<code>GraphicsWidget</code>","text":"<p>         Bases: <code>GraphicsWidgetMixin</code>, <code>QtWidgets.QGraphicsWidget</code></p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>class GraphicsWidget(GraphicsWidgetMixin, QtWidgets.QGraphicsWidget):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GraphicsWidgetMixin","title":"<code>GraphicsWidgetMixin</code>","text":"<p>         Bases: <code>widgets.GraphicsObjectMixin</code>, <code>widgets.GraphicsLayoutItemMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>class GraphicsWidgetMixin(widgets.GraphicsObjectMixin, widgets.GraphicsLayoutItemMixin):\ndef set_layout(self, layout: LayoutStr | QtWidgets.QGraphicsLayout | None):\nmatch layout:\ncase None:\nreturn\ncase QtWidgets.QGraphicsLayout():\nself.box = layout\ncase \"grid\":\nself.box = widgets.GraphicsGridLayout()\ncase \"anchor\":\nself.box = widgets.GraphicsAnchorLayout()\ncase \"horizontal\" | \"vertical\":\nself.box = widgets.GraphicsLinearLayout(layout)\ncase _:\nraise ValueError(\"Invalid Layout\")\nself.setLayout(self.box)\ndef set_focus_policy(self, policy: constants.FocusPolicyStr) -&gt; None:\n\"\"\"Set the way the widget accepts keyboard focus.\n        Args:\n            policy: Focus policy\n        Raises:\n            InvalidParamError: Description\n        \"\"\"\nif policy not in constants.FOCUS_POLICY:\nraise InvalidParamError(policy, constants.FOCUS_POLICY)\nself.setFocusPolicy(constants.FOCUS_POLICY[policy])\ndef get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return way the widget accepts keyboard focus.\n        Returns:\n            str: Focus policy\n        \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\ndef window_frame_section_at(\nself, point: datatypes.PointType\n) -&gt; constants.WindowFrameSectionStr:\n\"\"\"Return the window frame section at given position.\n        Returns:\n            str: Window frame section\n        \"\"\"\nif isinstance(point, tuple):\npoint = QtCore.QPoint(*point)\nreturn constants.WINDOW_FRAME_SECTION.inverse[self.windowFrameSectionAt(point)]\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.get_focus_policy","title":"<code>get_focus_policy() -&gt; constants.FocusPolicyStr</code>","text":"<p>Return way the widget accepts keyboard focus.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>constants.FocusPolicyStr</code> <p>Focus policy</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return way the widget accepts keyboard focus.\n    Returns:\n        str: Focus policy\n    \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.get_palette","title":"<code>get_palette() -&gt; gui.Palette</code>","text":"Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.set_focus_policy","title":"<code>set_focus_policy(policy: constants.FocusPolicyStr) -&gt; None</code>","text":"<p>Set the way the widget accepts keyboard focus.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.FocusPolicyStr</code> <p>Focus policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Description</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def set_focus_policy(self, policy: constants.FocusPolicyStr) -&gt; None:\n\"\"\"Set the way the widget accepts keyboard focus.\n    Args:\n        policy: Focus policy\n    Raises:\n        InvalidParamError: Description\n    \"\"\"\nif policy not in constants.FOCUS_POLICY:\nraise InvalidParamError(policy, constants.FOCUS_POLICY)\nself.setFocusPolicy(constants.FOCUS_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.set_layout","title":"<code>set_layout(layout: LayoutStr | QtWidgets.QGraphicsLayout | None)</code>","text":"Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def set_layout(self, layout: LayoutStr | QtWidgets.QGraphicsLayout | None):\nmatch layout:\ncase None:\nreturn\ncase QtWidgets.QGraphicsLayout():\nself.box = layout\ncase \"grid\":\nself.box = widgets.GraphicsGridLayout()\ncase \"anchor\":\nself.box = widgets.GraphicsAnchorLayout()\ncase \"horizontal\" | \"vertical\":\nself.box = widgets.GraphicsLinearLayout(layout)\ncase _:\nraise ValueError(\"Invalid Layout\")\nself.setLayout(self.box)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.window_frame_section_at","title":"<code>window_frame_section_at(point: datatypes.PointType) -&gt; constants.WindowFrameSectionStr</code>","text":"<p>Return the window frame section at given position.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>constants.WindowFrameSectionStr</code> <p>Window frame section</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def window_frame_section_at(\nself, point: datatypes.PointType\n) -&gt; constants.WindowFrameSectionStr:\n\"\"\"Return the window frame section at given position.\n    Returns:\n        str: Window frame section\n    \"\"\"\nif isinstance(point, tuple):\npoint = QtCore.QPoint(*point)\nreturn constants.WINDOW_FRAME_SECTION.inverse[self.windowFrameSectionAt(point)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GridLayout","title":"<code>GridLayout</code>","text":"<p>         Bases: <code>widgets.LayoutMixin</code>, <code>QtWidgets.QGridLayout</code></p> Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>class GridLayout(widgets.LayoutMixin, QtWidgets.QGridLayout):\ndef __getitem__(\nself, idx: tuple[int, int] | int | str\n) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | None:\nif isinstance(idx, tuple):\nitem = self.itemAtPosition(*idx)\nelif isinstance(idx, int):\nitem = self.itemAt(idx)\nelse:\nreturn self.find_child(QtCore.QObject, idx)\nwidget = item.widget()\nreturn item.layout() if widget is None else widget\ndef __setitem__(\nself,\nidx: tuple[int | slice, int | slice],\nvalue: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem,\n):\nrow, col = idx\nrowspan = row.stop - row.start + 1 if isinstance(row, slice) else 1\ncolspan = col.stop - col.start + 1 if isinstance(col, slice) else 1\nrowstart = row.start if isinstance(row, slice) else row\ncolstart = col.start if isinstance(col, slice) else col\nself.add(value, rowstart, colstart, rowspan, colspan)\n# def serialize_fields(self):\n#     widgets = []\n#     positions = []\n#     for i, item in enumerate(list(self)):\n#         widgets.append(item)\n#         positions.append(self.getItemPosition(i))\n#     return dict(widgets=widgets, positions=positions)\n# def __setstate__(self, state):\n#     for item, pos in zip(state[\"widgets\"], state[\"positions\"]):\n#         x, y, w, h = pos\n#         self[x : x + w - 1, y : y + h - 1] = item\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn iter(item for i in range(self.count()) if (item := self[i]) is not None)\ndef __add__(\nself,\nother: (\ntuple | list | QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem\n),\n):\nif isinstance(other, tuple | list):\nfor i, _control in enumerate(other):\nself[self.rowCount(), i] = other  # type: ignore\nelse:\nself[self.rowCount(), 0 : self.columnCount() - 1] = other\nreturn self\ndef __iadd__(self, item, *args, **kwargs):\nself.__add__(item, *args, **kwargs)\nreturn self\ndef add(\nself,\nitem: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem,\nrowstart: int,\ncolstart: int,\nrowspan: int = 1,\ncolspan: int = 1,\nalignment: constants.AlignmentStr | None = None,\n):\nalignment = (\nconstants.ALIGN_NONE if alignment is None else constants.ALIGNMENTS[alignment]\n)\nmatch item:\ncase QtWidgets.QWidget():\nself.addWidget(item, rowstart, colstart, rowspan, colspan, alignment)\ncase QtWidgets.QLayout():\nself.addLayout(item, rowstart, colstart, rowspan, colspan, alignment)\ncase QtWidgets.QLayoutItem():\nself.addItem(item, rowstart, colstart, rowspan, colspan, alignment)\ndef append(self, item: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem):\nself[self.rowCount(), 0 : self.columnCount() - 1] = item\ndef set_origin_corner(self, corner: constants.CornerStr):\n\"\"\"Set the origin corner.\n        Args:\n            corner: origin corner\n        Raises:\n            InvalidParamError: corner does not exist\n        \"\"\"\nif corner not in constants.CORNER:\nraise InvalidParamError(corner, constants.CORNER)\nself.setOriginCorner(constants.CORNER[corner])\ndef get_origin_corner(self) -&gt; constants.CornerStr:\n\"\"\"Return current origin corner.\n        Returns:\n            origin corner\n        \"\"\"\nreturn constants.CORNER.inverse[self.originCorner()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.__add__","title":"<code>__add__(other: tuple | list | QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def __add__(\nself,\nother: (\ntuple | list | QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem\n),\n):\nif isinstance(other, tuple | list):\nfor i, _control in enumerate(other):\nself[self.rowCount(), i] = other  # type: ignore\nelse:\nself[self.rowCount(), 0 : self.columnCount() - 1] = other\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.__getitem__","title":"<code>__getitem__(idx: tuple[int, int] | int | str) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | None</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def __getitem__(\nself, idx: tuple[int, int] | int | str\n) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | None:\nif isinstance(idx, tuple):\nitem = self.itemAtPosition(*idx)\nelif isinstance(idx, int):\nitem = self.itemAt(idx)\nelse:\nreturn self.find_child(QtCore.QObject, idx)\nwidget = item.widget()\nreturn item.layout() if widget is None else widget\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.__iadd__","title":"<code>__iadd__(item, *args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def __iadd__(self, item, *args, **kwargs):\nself.__add__(item, *args, **kwargs)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn iter(item for i in range(self.count()) if (item := self[i]) is not None)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.__setitem__","title":"<code>__setitem__(idx: tuple[int | slice, int | slice], value: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def __setitem__(\nself,\nidx: tuple[int | slice, int | slice],\nvalue: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem,\n):\nrow, col = idx\nrowspan = row.stop - row.start + 1 if isinstance(row, slice) else 1\ncolspan = col.stop - col.start + 1 if isinstance(col, slice) else 1\nrowstart = row.start if isinstance(row, slice) else row\ncolstart = col.start if isinstance(col, slice) else col\nself.add(value, rowstart, colstart, rowspan, colspan)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.add","title":"<code>add(item: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem, rowstart: int, colstart: int, rowspan: int = 1, colspan: int = 1, alignment: constants.AlignmentStr | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def add(\nself,\nitem: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem,\nrowstart: int,\ncolstart: int,\nrowspan: int = 1,\ncolspan: int = 1,\nalignment: constants.AlignmentStr | None = None,\n):\nalignment = (\nconstants.ALIGN_NONE if alignment is None else constants.ALIGNMENTS[alignment]\n)\nmatch item:\ncase QtWidgets.QWidget():\nself.addWidget(item, rowstart, colstart, rowspan, colspan, alignment)\ncase QtWidgets.QLayout():\nself.addLayout(item, rowstart, colstart, rowspan, colspan, alignment)\ncase QtWidgets.QLayoutItem():\nself.addItem(item, rowstart, colstart, rowspan, colspan, alignment)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.append","title":"<code>append(item: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def append(self, item: QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QLayoutItem):\nself[self.rowCount(), 0 : self.columnCount() - 1] = item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.get_origin_corner","title":"<code>get_origin_corner() -&gt; constants.CornerStr</code>","text":"<p>Return current origin corner.</p> <p>Returns:</p> Type Description <code>constants.CornerStr</code> <p>origin corner</p> Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def get_origin_corner(self) -&gt; constants.CornerStr:\n\"\"\"Return current origin corner.\n    Returns:\n        origin corner\n    \"\"\"\nreturn constants.CORNER.inverse[self.originCorner()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.gridlayout.GridLayout.set_origin_corner","title":"<code>set_origin_corner(corner: constants.CornerStr)</code>","text":"<p>Set the origin corner.</p> <p>Parameters:</p> Name Type Description Default <code>corner</code> <code>constants.CornerStr</code> <p>origin corner</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>corner does not exist</p> Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def set_origin_corner(self, corner: constants.CornerStr):\n\"\"\"Set the origin corner.\n    Args:\n        corner: origin corner\n    Raises:\n        InvalidParamError: corner does not exist\n    \"\"\"\nif corner not in constants.CORNER:\nraise InvalidParamError(corner, constants.CORNER)\nself.setOriginCorner(constants.CORNER[corner])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.GroupBox","title":"<code>GroupBox</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QGroupBox</code></p> <p>GroupBox widget.</p> <p>A group box provides a frame, a title on top, a keyboard shortcut, and displays various other widgets inside itself. The keyboard shortcut moves keyboard focus to one of the group box's child widgets.</p> Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>class GroupBox(widgets.WidgetMixin, QtWidgets.QGroupBox):\n\"\"\"GroupBox widget.\n    A group box provides a frame, a title on top, a keyboard shortcut,\n    and displays various other widgets inside itself.\n    The keyboard shortcut moves keyboard focus to one of the group box's child widgets.\n    \"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.title())\ndef set_title(self, title: str):\nself.setTitle(title)\ndef set_alignment(self, alignment: constants.HorizontalAlignmentStr):\n\"\"\"Set the title alignment of the groupbox.\n        Args:\n            alignment: title alignment for the groupbox\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.H_ALIGNMENT:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.H_ALIGNMENT[alignment])\ndef get_alignment(self) -&gt; constants.HorizontalAlignmentStr:\n\"\"\"Return current title alignment.\n        Returns:\n            title alignment\n        \"\"\"\nreturn constants.H_ALIGNMENT.inverse[self.alignment()]\ndef set_enabled(self, state):\nfor widget in self.layout():\nwidget.setEnabled(state)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.title())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.get_alignment","title":"<code>get_alignment() -&gt; constants.HorizontalAlignmentStr</code>","text":"<p>Return current title alignment.</p> <p>Returns:</p> Type Description <code>constants.HorizontalAlignmentStr</code> <p>title alignment</p> Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def get_alignment(self) -&gt; constants.HorizontalAlignmentStr:\n\"\"\"Return current title alignment.\n    Returns:\n        title alignment\n    \"\"\"\nreturn constants.H_ALIGNMENT.inverse[self.alignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.set_alignment","title":"<code>set_alignment(alignment: constants.HorizontalAlignmentStr)</code>","text":"<p>Set the title alignment of the groupbox.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.HorizontalAlignmentStr</code> <p>title alignment for the groupbox</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def set_alignment(self, alignment: constants.HorizontalAlignmentStr):\n\"\"\"Set the title alignment of the groupbox.\n    Args:\n        alignment: title alignment for the groupbox\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.H_ALIGNMENT:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.H_ALIGNMENT[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.set_enabled","title":"<code>set_enabled(state)</code>","text":"Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def set_enabled(self, state):\nfor widget in self.layout():\nwidget.setEnabled(state)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.groupbox.GroupBox.set_title","title":"<code>set_title(title: str)</code>","text":"Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def set_title(self, title: str):\nself.setTitle(title)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.HBoxLayout","title":"<code>HBoxLayout</code>","text":"<p>         Bases: <code>widgets.boxlayout.BoxLayoutMixin</code>, <code>QtWidgets.QHBoxLayout</code></p> Source code in <code>prettyqt\\widgets\\hboxlayout.py</code> <pre><code>class HBoxLayout(widgets.boxlayout.BoxLayoutMixin, QtWidgets.QHBoxLayout):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.HeaderView","title":"<code>HeaderView</code>","text":"<p>         Bases: <code>HeaderViewMixin</code>, <code>QtWidgets.QHeaderView</code></p> Source code in <code>prettyqt\\widgets\\headerview.py</code> <pre><code>class HeaderView(HeaderViewMixin, QtWidgets.QHeaderView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.InputDialog","title":"<code>InputDialog</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QInputDialog</code></p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>class InputDialog(widgets.DialogMixin, QtWidgets.QInputDialog):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"textEchoMode\": widgets.lineedit.ECHO_MODE,\n\"inputMode\": INPUT_MODE,\n\"options\": INPUT_DIALOG_OPTION,\n}\nreturn maps\n@classmethod\ndef get_int(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\n) -&gt; int | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getInt(par, title, label, value=0)\nreturn v[0] if v[1] else None\n@classmethod\ndef get_float(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\n) -&gt; float | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getDouble(par, title, label, value=0.0)\nreturn v[0] if v[1] else None\n@classmethod\ndef get_text(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\nvalue: str = \"\",\necho_mode: widgets.lineedit.EchoModeStr = \"normal\",\n) -&gt; str | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nif echo_mode not in widgets.lineedit.ECHO_MODE:\nraise InvalidParamError(echo_mode, widgets.lineedit.ECHO_MODE)\nv = cls.getText(par, title, label, widgets.lineedit.ECHO_MODE[echo_mode], value)\nreturn v[0] if v[1] else None\n@classmethod\ndef get_item(\ncls,\nitems: list[str],\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\neditable: bool = False,\n) -&gt; str | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getItem(par, title, label, items, editable=editable, current=0)\nreturn v[0] if v[1] else None\ndef set_text_echo_mode(self, mode: widgets.lineedit.EchoModeStr):\n\"\"\"Set text echo mode.\n        Args:\n            mode: echo mode to use\n        Raises:\n            InvalidParamError: invalid echo mode\n        \"\"\"\nif mode not in widgets.lineedit.ECHO_MODE:\nraise InvalidParamError(mode, widgets.lineedit.ECHO_MODE)\nself.setTextEchoMode(widgets.lineedit.ECHO_MODE[mode])\ndef get_text_echo_mode(self) -&gt; widgets.lineedit.EchoModeStr:\n\"\"\"Return text echo mode.\n        Returns:\n            echo mode\n        \"\"\"\nreturn widgets.lineedit.ECHO_MODE.inverse[self.textEchoMode()]\ndef set_input_mode(self, mode: InputModeStr):\n\"\"\"Set input mode.\n        Args:\n            mode: input mode to use\n        Raises:\n            InvalidParamError: invalid input mode\n        \"\"\"\nif mode not in INPUT_MODE:\nraise InvalidParamError(mode, INPUT_MODE)\nself.setInputMode(INPUT_MODE[mode])\ndef get_input_mode(self) -&gt; InputModeStr:\n\"\"\"Return input mode.\n        Returns:\n            input mode\n        \"\"\"\nreturn INPUT_MODE.inverse[self.inputMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_float","title":"<code>get_float(title: str = '', label: str = '', icon: datatypes.IconType = None) -&gt; float | None</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>@classmethod\ndef get_float(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\n) -&gt; float | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getDouble(par, title, label, value=0.0)\nreturn v[0] if v[1] else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_input_mode","title":"<code>get_input_mode() -&gt; InputModeStr</code>","text":"<p>Return input mode.</p> <p>Returns:</p> Type Description <code>InputModeStr</code> <p>input mode</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def get_input_mode(self) -&gt; InputModeStr:\n\"\"\"Return input mode.\n    Returns:\n        input mode\n    \"\"\"\nreturn INPUT_MODE.inverse[self.inputMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_int","title":"<code>get_int(title: str = '', label: str = '', icon: datatypes.IconType = None) -&gt; int | None</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>@classmethod\ndef get_int(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\n) -&gt; int | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getInt(par, title, label, value=0)\nreturn v[0] if v[1] else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_item","title":"<code>get_item(items: list[str], title: str = '', label: str = '', icon: datatypes.IconType = None, editable: bool = False) -&gt; str | None</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>@classmethod\ndef get_item(\ncls,\nitems: list[str],\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\neditable: bool = False,\n) -&gt; str | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getItem(par, title, label, items, editable=editable, current=0)\nreturn v[0] if v[1] else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_text","title":"<code>get_text(title: str = '', label: str = '', icon: datatypes.IconType = None, value: str = '', echo_mode: widgets.lineedit.EchoModeStr = 'normal') -&gt; str | None</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>@classmethod\ndef get_text(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\nvalue: str = \"\",\necho_mode: widgets.lineedit.EchoModeStr = \"normal\",\n) -&gt; str | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nif echo_mode not in widgets.lineedit.ECHO_MODE:\nraise InvalidParamError(echo_mode, widgets.lineedit.ECHO_MODE)\nv = cls.getText(par, title, label, widgets.lineedit.ECHO_MODE[echo_mode], value)\nreturn v[0] if v[1] else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.get_text_echo_mode","title":"<code>get_text_echo_mode() -&gt; widgets.lineedit.EchoModeStr</code>","text":"<p>Return text echo mode.</p> <p>Returns:</p> Type Description <code>widgets.lineedit.EchoModeStr</code> <p>echo mode</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def get_text_echo_mode(self) -&gt; widgets.lineedit.EchoModeStr:\n\"\"\"Return text echo mode.\n    Returns:\n        echo mode\n    \"\"\"\nreturn widgets.lineedit.ECHO_MODE.inverse[self.textEchoMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.set_input_mode","title":"<code>set_input_mode(mode: InputModeStr)</code>","text":"<p>Set input mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InputModeStr</code> <p>input mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid input mode</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def set_input_mode(self, mode: InputModeStr):\n\"\"\"Set input mode.\n    Args:\n        mode: input mode to use\n    Raises:\n        InvalidParamError: invalid input mode\n    \"\"\"\nif mode not in INPUT_MODE:\nraise InvalidParamError(mode, INPUT_MODE)\nself.setInputMode(INPUT_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.inputdialog.InputDialog.set_text_echo_mode","title":"<code>set_text_echo_mode(mode: widgets.lineedit.EchoModeStr)</code>","text":"<p>Set text echo mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>widgets.lineedit.EchoModeStr</code> <p>echo mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid echo mode</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def set_text_echo_mode(self, mode: widgets.lineedit.EchoModeStr):\n\"\"\"Set text echo mode.\n    Args:\n        mode: echo mode to use\n    Raises:\n        InvalidParamError: invalid echo mode\n    \"\"\"\nif mode not in widgets.lineedit.ECHO_MODE:\nraise InvalidParamError(mode, widgets.lineedit.ECHO_MODE)\nself.setTextEchoMode(widgets.lineedit.ECHO_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ItemDelegate","title":"<code>ItemDelegate</code>","text":"<p>         Bases: <code>widgets.AbstractItemDelegateMixin</code>, <code>QtWidgets.QItemDelegate</code></p> Source code in <code>prettyqt\\widgets\\itemdelegate.py</code> <pre><code>class ItemDelegate(widgets.AbstractItemDelegateMixin, QtWidgets.QItemDelegate):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ItemEditorCreatorBase","title":"<code>ItemEditorCreatorBase</code>","text":"<p>         Bases: <code>QtWidgets.QItemEditorCreatorBase</code></p> Source code in <code>prettyqt\\widgets\\itemeditorcreatorbase.py</code> <pre><code>class ItemEditorCreatorBase(QtWidgets.QItemEditorCreatorBase):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ItemEditorFactory","title":"<code>ItemEditorFactory</code>","text":"<p>         Bases: <code>QtWidgets.QItemEditorFactory</code></p> Source code in <code>prettyqt\\widgets\\itemeditorfactory.py</code> <pre><code>class ItemEditorFactory(QtWidgets.QItemEditorFactory):\n@classmethod\ndef register_default_editor(\ncls,\neditor_cls: type[QtWidgets.QWidget],\ntyp: int | None | type = None,\nproperty_name: str = \"\",\n):\nfactory = cls.defaultFactory()\ncreator = get_creator(editor_cls, property_name)\nif typ is None:\ntyp = editor_cls.staticMetaObject.userProperty().userType()\nelif isinstance(typ, type):\ntyp = TYPES[typ].value\nfactory.registerEditor(typ, creator)\ncls.setDefaultFactory(factory)\ndef register_editor(\nself,\neditor_cls: type[QtWidgets.QWidget],\ntyp: int | None | type = None,\nproperty_name: str = \"\",\n):\ncreator = get_creator(editor_cls, property_name)\nif typ is None:\ntyp = editor_cls.staticMetaObject.userProperty().userType()\nelif isinstance(typ, type):\ntyp = TYPES[typ].value\n# print(f\"register {editor_cls} for {typ}\")\nself.registerEditor(typ, creator)\n@classmethod\ndef create_extended(cls) -&gt; Self:\nfactory = cls()\nfactory.register_editor(widgets.CheckBox, bool, \"\")\nfactory.register_editor(widgets.SpinBox, int, \"value\")\nfactory.register_editor(widgets.LineEdit, str, \"text\")\nfactory.register_editor(widgets.DoubleSpinBox, float, \"value\")\nfactory.register_editor(widgets.DateEdit, QtCore.QDate, \"date\")\nfactory.register_editor(widgets.TimeEdit, QtCore.QTime, \"time\")\nfactory.register_editor(widgets.DateTimeEdit, QtCore.QDateTime, \"dateTime\")\nfactory.register_editor(custom_widgets.PointEdit, QtCore.QPoint, \"value\")\nfactory.register_editor(custom_widgets.SizeEdit, QtCore.QSize, \"value\")\nfactory.register_editor(custom_widgets.RectEdit, QtCore.QRect, \"value\")\nfactory.register_editor(custom_widgets.RegionEdit, QtCore.QRegion, \"value\")\nfactory.register_editor(\ncustom_widgets.SizePolicyEdit, QtWidgets.QSizePolicy, \"value\"\n)\nfactory.register_editor(\nwidgets.KeySequenceEdit, QtGui.QKeySequence, \"keySequence\"\n)\nfactory.register_editor(\ncustom_widgets.ColorComboBox, QtGui.QColor, \"current_color\"\n)\nfactory.register_editor(widgets.FontComboBox, QtGui.QFont, \"currentFont\")\nfactory.register_editor(widgets.LineEdit, QtCore.QUrl, \"text\")\nfactory.register_editor(widgets.LineEdit, QtCore.QRegularExpression, \"text\")\nreturn factory\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.itemeditorfactory.ItemEditorFactory.create_extended","title":"<code>create_extended() -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\itemeditorfactory.py</code> <pre><code>@classmethod\ndef create_extended(cls) -&gt; Self:\nfactory = cls()\nfactory.register_editor(widgets.CheckBox, bool, \"\")\nfactory.register_editor(widgets.SpinBox, int, \"value\")\nfactory.register_editor(widgets.LineEdit, str, \"text\")\nfactory.register_editor(widgets.DoubleSpinBox, float, \"value\")\nfactory.register_editor(widgets.DateEdit, QtCore.QDate, \"date\")\nfactory.register_editor(widgets.TimeEdit, QtCore.QTime, \"time\")\nfactory.register_editor(widgets.DateTimeEdit, QtCore.QDateTime, \"dateTime\")\nfactory.register_editor(custom_widgets.PointEdit, QtCore.QPoint, \"value\")\nfactory.register_editor(custom_widgets.SizeEdit, QtCore.QSize, \"value\")\nfactory.register_editor(custom_widgets.RectEdit, QtCore.QRect, \"value\")\nfactory.register_editor(custom_widgets.RegionEdit, QtCore.QRegion, \"value\")\nfactory.register_editor(\ncustom_widgets.SizePolicyEdit, QtWidgets.QSizePolicy, \"value\"\n)\nfactory.register_editor(\nwidgets.KeySequenceEdit, QtGui.QKeySequence, \"keySequence\"\n)\nfactory.register_editor(\ncustom_widgets.ColorComboBox, QtGui.QColor, \"current_color\"\n)\nfactory.register_editor(widgets.FontComboBox, QtGui.QFont, \"currentFont\")\nfactory.register_editor(widgets.LineEdit, QtCore.QUrl, \"text\")\nfactory.register_editor(widgets.LineEdit, QtCore.QRegularExpression, \"text\")\nreturn factory\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.itemeditorfactory.ItemEditorFactory.register_default_editor","title":"<code>register_default_editor(editor_cls: type[QtWidgets.QWidget], typ: int | None | type = None, property_name: str = '')</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\itemeditorfactory.py</code> <pre><code>@classmethod\ndef register_default_editor(\ncls,\neditor_cls: type[QtWidgets.QWidget],\ntyp: int | None | type = None,\nproperty_name: str = \"\",\n):\nfactory = cls.defaultFactory()\ncreator = get_creator(editor_cls, property_name)\nif typ is None:\ntyp = editor_cls.staticMetaObject.userProperty().userType()\nelif isinstance(typ, type):\ntyp = TYPES[typ].value\nfactory.registerEditor(typ, creator)\ncls.setDefaultFactory(factory)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.itemeditorfactory.ItemEditorFactory.register_editor","title":"<code>register_editor(editor_cls: type[QtWidgets.QWidget], typ: int | None | type = None, property_name: str = '')</code>","text":"Source code in <code>prettyqt\\widgets\\itemeditorfactory.py</code> <pre><code>def register_editor(\nself,\neditor_cls: type[QtWidgets.QWidget],\ntyp: int | None | type = None,\nproperty_name: str = \"\",\n):\ncreator = get_creator(editor_cls, property_name)\nif typ is None:\ntyp = editor_cls.staticMetaObject.userProperty().userType()\nelif isinstance(typ, type):\ntyp = TYPES[typ].value\n# print(f\"register {editor_cls} for {typ}\")\nself.registerEditor(typ, creator)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.KeySequenceEdit","title":"<code>KeySequenceEdit</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QKeySequenceEdit</code></p> Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>class KeySequenceEdit(widgets.WidgetMixin, QtWidgets.QKeySequenceEdit):\nvalue_changed = core.Signal(QtGui.QKeySequence)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.keySequenceChanged.connect(self._on_value_change)\nself.setClearButtonEnabled(True)\ndef __repr__(self):\nreturn get_repr(self, self.get_value())\ndef _on_value_change(self, val):\nself.value_changed.emit(val)\ndef set_value(self, value: str | QtGui.QKeySequence):\nif isinstance(value, str):\nvalue = gui.KeySequence.fromString(value)\nself.setKeySequence(value)\ndef get_value(self) -&gt; str:\nreturn self.keySequence().toString()\ndef is_valid(self) -&gt; bool:\nreturn True\ndef get_finishing_key_combinations(self) -&gt; list[core.KeyCombination]:\nreturn [core.KeyCombination(i) for i in self.finishingKeyCombinations()]\ndef get_key_combinations(self) -&gt; list[core.KeyCombination]:\nreturn [core.KeyCombination(i) for i in self.keySequence()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.value_changed","title":"<code>value_changed = core.Signal(QtGui.QKeySequence)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.keySequenceChanged.connect(self._on_value_change)\nself.setClearButtonEnabled(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.get_value())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.get_finishing_key_combinations","title":"<code>get_finishing_key_combinations() -&gt; list[core.KeyCombination]</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def get_finishing_key_combinations(self) -&gt; list[core.KeyCombination]:\nreturn [core.KeyCombination(i) for i in self.finishingKeyCombinations()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.get_key_combinations","title":"<code>get_key_combinations() -&gt; list[core.KeyCombination]</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def get_key_combinations(self) -&gt; list[core.KeyCombination]:\nreturn [core.KeyCombination(i) for i in self.keySequence()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.get_value","title":"<code>get_value() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def get_value(self) -&gt; str:\nreturn self.keySequence().toString()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.keysequenceedit.KeySequenceEdit.set_value","title":"<code>set_value(value: str | QtGui.QKeySequence)</code>","text":"Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>def set_value(self, value: str | QtGui.QKeySequence):\nif isinstance(value, str):\nvalue = gui.KeySequence.fromString(value)\nself.setKeySequence(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LCDNumber","title":"<code>LCDNumber</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code>, <code>QtWidgets.QLCDNumber</code></p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>class LCDNumber(widgets.FrameMixin, QtWidgets.QLCDNumber):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"segmentStyle\": SEGMENT_STYLE, \"mode\": MODE}\nreturn maps\ndef set_mode(self, mode: ModeStr):\n\"\"\"Set the lcd mode.\n        Args:\n            mode: lcd mode to use\n        Raises:\n            InvalidParamError: lcd mode does not exist\n        \"\"\"\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nself.setMode(MODE[mode])\ndef get_mode(self) -&gt; ModeStr:\n\"\"\"Return current lcd mode.\n        Returns:\n            lcd mode\n        \"\"\"\nreturn MODE.inverse[self.mode()]\ndef set_segment_style(self, mode: SegmentStyleStr):\n\"\"\"Set the segment style.\n        Args:\n            mode: segment style to use\n        Raises:\n            InvalidParamError: segment style does not exist\n        \"\"\"\nif mode not in SEGMENT_STYLE:\nraise InvalidParamError(mode, SEGMENT_STYLE)\nself.setSegmentStyle(SEGMENT_STYLE[mode])\ndef get_segment_style(self) -&gt; SegmentStyleStr:\n\"\"\"Return current segment style.\n        Returns:\n            segment style\n        \"\"\"\nreturn SEGMENT_STYLE.inverse[self.segmentStyle()]\ndef set_value(self, value: float | str):\nself.display(value)\ndef get_value(self) -&gt; float:\nreturn self.value()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"<p>Return current lcd mode.</p> <p>Returns:</p> Type Description <code>ModeStr</code> <p>lcd mode</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\n\"\"\"Return current lcd mode.\n    Returns:\n        lcd mode\n    \"\"\"\nreturn MODE.inverse[self.mode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.get_segment_style","title":"<code>get_segment_style() -&gt; SegmentStyleStr</code>","text":"<p>Return current segment style.</p> <p>Returns:</p> Type Description <code>SegmentStyleStr</code> <p>segment style</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_segment_style(self) -&gt; SegmentStyleStr:\n\"\"\"Return current segment style.\n    Returns:\n        segment style\n    \"\"\"\nreturn SEGMENT_STYLE.inverse[self.segmentStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.get_value","title":"<code>get_value() -&gt; float</code>","text":"Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_value(self) -&gt; float:\nreturn self.value()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.set_mode","title":"<code>set_mode(mode: ModeStr)</code>","text":"<p>Set the lcd mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ModeStr</code> <p>lcd mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>lcd mode does not exist</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_mode(self, mode: ModeStr):\n\"\"\"Set the lcd mode.\n    Args:\n        mode: lcd mode to use\n    Raises:\n        InvalidParamError: lcd mode does not exist\n    \"\"\"\nif mode not in MODE:\nraise InvalidParamError(mode, MODE)\nself.setMode(MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.set_segment_style","title":"<code>set_segment_style(mode: SegmentStyleStr)</code>","text":"<p>Set the segment style.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SegmentStyleStr</code> <p>segment style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>segment style does not exist</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_segment_style(self, mode: SegmentStyleStr):\n\"\"\"Set the segment style.\n    Args:\n        mode: segment style to use\n    Raises:\n        InvalidParamError: segment style does not exist\n    \"\"\"\nif mode not in SEGMENT_STYLE:\nraise InvalidParamError(mode, SEGMENT_STYLE)\nself.setSegmentStyle(SEGMENT_STYLE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lcdnumber.LCDNumber.set_value","title":"<code>set_value(value: float | str)</code>","text":"Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_value(self, value: float | str):\nself.display(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Label","title":"<code>Label</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code>, <code>QtWidgets.QLabel</code></p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>class Label(widgets.FrameMixin, QtWidgets.QLabel):\nclicked = core.Signal()\ndef __init__(self, *args, propagate_event: bool = True, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.openExternalLinks()\nself._propagate_event = propagate_event\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"textFormat\": TEXT_FORMAT, \"alignment\": constants.ALIGNMENTS}\nreturn maps\ndef mousePressEvent(self, e):\nif self._propagate_event:\nsuper().mousePressEvent(e)\ndef mouseReleaseEvent(self, event: QtGui.QMouseEvent):\nif self._propagate_event:\nsuper().mouseReleaseEvent(event)\nif event.button() == QtCore.Qt.LeftButton:\nself.clicked.emit()\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef allow_links(self) -&gt; Label:\n# self.setText(\"&lt;a href=\\\"http://example.com/\\\"&gt;Click Here!&lt;/a&gt;\")\nself.setTextFormat(QtCore.Qt.TextFormat.RichText)\nself.setTextInteractionFlags(\nQtCore.Qt.TextInteractionFlag.TextBrowserInteraction  # type: ignore\n)\nself.setOpenExternalLinks(True)\nreturn self\ndef set_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set the alignment of the label's contents.\"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn self\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setAlignment(flag)\nreturn self\ndef get_horizontal_alignment(self) -&gt; constants.HorizontalAlignmentStr:\nalign = self.alignment()\nif align &amp; constants.ALIGN_RIGHT:  # type: ignore\nreturn \"right\"\nelif align &amp; constants.ALIGN_H_CENTER:  # type: ignore\nreturn \"center\"\nelif align &amp; constants.ALIGN_JUSTIFY:  # type: ignore\nreturn \"justify\"\nelse:\nreturn \"left\"\ndef get_vertical_alignment(self) -&gt; constants.VerticalAlignmentStr:\nalign = self.alignment()\nif align &amp; constants.ALIGN_TOP:  # type: ignore\nreturn \"top\"\nelif align &amp; constants.ALIGN_BOTTOM:  # type: ignore\nreturn \"bottom\"\nelif align &amp; constants.ALIGN_BASELINE:  # type: ignore\nreturn \"baseline\"\nelse:\nreturn \"center\"\ndef set_indent(self, indent: int) -&gt; Label:\n\"\"\"Set the label's text indent in pixels.\"\"\"\nself.setIndent(indent)\nreturn self\ndef set_text_format(self, text_format: TextFormatStr) -&gt; Label:\n\"\"\"Set the text format.\n        Args:\n            text_format: text format to use\n        Raises:\n            InvalidParamError: text format does not exist\n        \"\"\"\nif text_format not in TEXT_FORMAT:\nraise InvalidParamError(text_format, TEXT_FORMAT)\nself.setTextFormat(TEXT_FORMAT[text_format])\nreturn self\ndef get_text_format(self) -&gt; TextFormatStr:\n\"\"\"Return current text format.\n        Returns:\n            text format\n        \"\"\"\nreturn TEXT_FORMAT.inverse[self.textFormat()]\ndef set_text_interaction(self, *types: TextInteractionStr) -&gt; Label:\n\"\"\"Set the text interaction mode.\n        Args:\n            types: text interaction mode to use\n        Raises:\n            InvalidParamError: text interaction mode does not exist\n        \"\"\"\nfor item in types:\nif item not in TEXT_INTERACTION:\nraise InvalidParamError(item, TEXT_INTERACTION)\nflags = TEXT_INTERACTION.merge_flags(types)\nself.setTextInteractionFlags(flags)\nreturn self\ndef get_text_interaction(self) -&gt; list[TextInteractionStr]:\n\"\"\"Return current text interaction mode.\n        Returns:\n            list of text interaction modes\n        \"\"\"\nreturn TEXT_INTERACTION.get_list(self.textInteractionFlags())\ndef set_text(self, text: str) -&gt; Label:\n\"\"\"Set the label's text.\"\"\"\nself.setText(text)\nreturn self\ndef set_bold(self, bold: bool = True) -&gt; Label:\nfont = self.font()\nfont.setBold(bold)\nself.setFont(font)\nreturn self\ndef set_italic(self, italic: bool = True) -&gt; Label:\nfont = self.font()\nfont.setItalic(italic)\nself.setFont(font)\nreturn self\ndef set_point_size(self, size: int) -&gt; Label:\nfont = self.font()\nfont.setPointSize(size)\nself.setFont(font)\nreturn self\ndef set_weight(self, weight: gui.font.WeightStr) -&gt; Label:\n\"\"\"Set the font weight.\n        Args:\n            weight: font weight\n        Raises:\n            InvalidParamError: invalid font weight\n        \"\"\"\nif weight not in gui.font.WEIGHT:\nraise InvalidParamError(weight, gui.font.WEIGHT)\nfont = self.font()\nfont.setWeight(gui.font.WEIGHT[weight])\nself.setFont(font)\nreturn self\ndef set_color(self, color: datatypes.ColorType) -&gt; Label:\nwith self.edit_stylesheet() as ss:\nif color is None:\nss.color.setValue(\"\")\nelse:\ncolor = colors.get_color(color)\nss.color.setValue(color.name())\nreturn self\ndef set_image(self, path: datatypes.PathType, width: int = 300) -&gt; Label:\nself.setScaledContents(True)\nself.set_alignment(horizontal=\"center\")\nself.setText(\n\"&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;\"\nf\"&lt;img src={os.fspath(path)!r} width={str(width)!r}/&gt;\"\n\"&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\n)\nreturn self\n@classmethod\ndef image_from_path(\ncls, path: datatypes.PathType, parent: QtWidgets.QWidget | None = None\n) -&gt; Self:\npixmap = gui.Pixmap.from_file(path)\nlabel = cls(parent=parent)\nlabel.setPixmap(pixmap)\nlabel.resize(pixmap.width(), pixmap.height())\nreturn label\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.clicked","title":"<code>clicked = core.Signal()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.label.Label.__init__","title":"<code>__init__(*args, propagate_event: bool = True, **kwargs: bool)</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def __init__(self, *args, propagate_event: bool = True, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.openExternalLinks()\nself._propagate_event = propagate_event\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.allow_links","title":"<code>allow_links() -&gt; Label</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def allow_links(self) -&gt; Label:\n# self.setText(\"&lt;a href=\\\"http://example.com/\\\"&gt;Click Here!&lt;/a&gt;\")\nself.setTextFormat(QtCore.Qt.TextFormat.RichText)\nself.setTextInteractionFlags(\nQtCore.Qt.TextInteractionFlag.TextBrowserInteraction  # type: ignore\n)\nself.setOpenExternalLinks(True)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.get_horizontal_alignment","title":"<code>get_horizontal_alignment() -&gt; constants.HorizontalAlignmentStr</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_horizontal_alignment(self) -&gt; constants.HorizontalAlignmentStr:\nalign = self.alignment()\nif align &amp; constants.ALIGN_RIGHT:  # type: ignore\nreturn \"right\"\nelif align &amp; constants.ALIGN_H_CENTER:  # type: ignore\nreturn \"center\"\nelif align &amp; constants.ALIGN_JUSTIFY:  # type: ignore\nreturn \"justify\"\nelse:\nreturn \"left\"\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.get_text_format","title":"<code>get_text_format() -&gt; TextFormatStr</code>","text":"<p>Return current text format.</p> <p>Returns:</p> Type Description <code>TextFormatStr</code> <p>text format</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_text_format(self) -&gt; TextFormatStr:\n\"\"\"Return current text format.\n    Returns:\n        text format\n    \"\"\"\nreturn TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.get_text_interaction","title":"<code>get_text_interaction() -&gt; list[TextInteractionStr]</code>","text":"<p>Return current text interaction mode.</p> <p>Returns:</p> Type Description <code>list[TextInteractionStr]</code> <p>list of text interaction modes</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_text_interaction(self) -&gt; list[TextInteractionStr]:\n\"\"\"Return current text interaction mode.\n    Returns:\n        list of text interaction modes\n    \"\"\"\nreturn TEXT_INTERACTION.get_list(self.textInteractionFlags())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.get_vertical_alignment","title":"<code>get_vertical_alignment() -&gt; constants.VerticalAlignmentStr</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_vertical_alignment(self) -&gt; constants.VerticalAlignmentStr:\nalign = self.alignment()\nif align &amp; constants.ALIGN_TOP:  # type: ignore\nreturn \"top\"\nelif align &amp; constants.ALIGN_BOTTOM:  # type: ignore\nreturn \"bottom\"\nelif align &amp; constants.ALIGN_BASELINE:  # type: ignore\nreturn \"baseline\"\nelse:\nreturn \"center\"\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.image_from_path","title":"<code>image_from_path(path: datatypes.PathType, parent: QtWidgets.QWidget | None = None) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>@classmethod\ndef image_from_path(\ncls, path: datatypes.PathType, parent: QtWidgets.QWidget | None = None\n) -&gt; Self:\npixmap = gui.Pixmap.from_file(path)\nlabel = cls(parent=parent)\nlabel.setPixmap(pixmap)\nlabel.resize(pixmap.width(), pixmap.height())\nreturn label\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.mousePressEvent","title":"<code>mousePressEvent(e)</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def mousePressEvent(self, e):\nif self._propagate_event:\nsuper().mousePressEvent(e)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event: QtGui.QMouseEvent)</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def mouseReleaseEvent(self, event: QtGui.QMouseEvent):\nif self._propagate_event:\nsuper().mouseReleaseEvent(event)\nif event.button() == QtCore.Qt.LeftButton:\nself.clicked.emit()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_alignment","title":"<code>set_alignment(horizontal: constants.HorizontalAlignmentStr | None = None, vertical: constants.VerticalAlignmentStr | None = None)</code>","text":"<p>Set the alignment of the label's contents.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set the alignment of the label's contents.\"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn self\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setAlignment(flag)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_bold","title":"<code>set_bold(bold: bool = True) -&gt; Label</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_bold(self, bold: bool = True) -&gt; Label:\nfont = self.font()\nfont.setBold(bold)\nself.setFont(font)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_color","title":"<code>set_color(color: datatypes.ColorType) -&gt; Label</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_color(self, color: datatypes.ColorType) -&gt; Label:\nwith self.edit_stylesheet() as ss:\nif color is None:\nss.color.setValue(\"\")\nelse:\ncolor = colors.get_color(color)\nss.color.setValue(color.name())\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_image","title":"<code>set_image(path: datatypes.PathType, width: int = 300) -&gt; Label</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_image(self, path: datatypes.PathType, width: int = 300) -&gt; Label:\nself.setScaledContents(True)\nself.set_alignment(horizontal=\"center\")\nself.setText(\n\"&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;\"\nf\"&lt;img src={os.fspath(path)!r} width={str(width)!r}/&gt;\"\n\"&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\n)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_indent","title":"<code>set_indent(indent: int) -&gt; Label</code>","text":"<p>Set the label's text indent in pixels.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_indent(self, indent: int) -&gt; Label:\n\"\"\"Set the label's text indent in pixels.\"\"\"\nself.setIndent(indent)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_italic","title":"<code>set_italic(italic: bool = True) -&gt; Label</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_italic(self, italic: bool = True) -&gt; Label:\nfont = self.font()\nfont.setItalic(italic)\nself.setFont(font)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_point_size","title":"<code>set_point_size(size: int) -&gt; Label</code>","text":"Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_point_size(self, size: int) -&gt; Label:\nfont = self.font()\nfont.setPointSize(size)\nself.setFont(font)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_text","title":"<code>set_text(text: str) -&gt; Label</code>","text":"<p>Set the label's text.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text(self, text: str) -&gt; Label:\n\"\"\"Set the label's text.\"\"\"\nself.setText(text)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_text_format","title":"<code>set_text_format(text_format: TextFormatStr) -&gt; Label</code>","text":"<p>Set the text format.</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>TextFormatStr</code> <p>text format to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>text format does not exist</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text_format(self, text_format: TextFormatStr) -&gt; Label:\n\"\"\"Set the text format.\n    Args:\n        text_format: text format to use\n    Raises:\n        InvalidParamError: text format does not exist\n    \"\"\"\nif text_format not in TEXT_FORMAT:\nraise InvalidParamError(text_format, TEXT_FORMAT)\nself.setTextFormat(TEXT_FORMAT[text_format])\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_text_interaction","title":"<code>set_text_interaction(*types: TextInteractionStr) -&gt; Label</code>","text":"<p>Set the text interaction mode.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>TextInteractionStr</code> <p>text interaction mode to use</p> <code>()</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>text interaction mode does not exist</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text_interaction(self, *types: TextInteractionStr) -&gt; Label:\n\"\"\"Set the text interaction mode.\n    Args:\n        types: text interaction mode to use\n    Raises:\n        InvalidParamError: text interaction mode does not exist\n    \"\"\"\nfor item in types:\nif item not in TEXT_INTERACTION:\nraise InvalidParamError(item, TEXT_INTERACTION)\nflags = TEXT_INTERACTION.merge_flags(types)\nself.setTextInteractionFlags(flags)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.label.Label.set_weight","title":"<code>set_weight(weight: gui.font.WeightStr) -&gt; Label</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>gui.font.WeightStr</code> <p>font weight</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid font weight</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_weight(self, weight: gui.font.WeightStr) -&gt; Label:\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    Raises:\n        InvalidParamError: invalid font weight\n    \"\"\"\nif weight not in gui.font.WEIGHT:\nraise InvalidParamError(weight, gui.font.WEIGHT)\nfont = self.font()\nfont.setWeight(gui.font.WEIGHT[weight])\nself.setFont(font)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Layout","title":"<code>Layout</code>","text":"<p>         Bases: <code>LayoutMixin</code>, <code>QtWidgets.QLayout</code></p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>class Layout(LayoutMixin, QtWidgets.QLayout):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LayoutItem","title":"<code>LayoutItem</code>","text":"<p>         Bases: <code>LayoutItemMixin</code>, <code>QtWidgets.QLayoutItem</code></p> Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>class LayoutItem(LayoutItemMixin, QtWidgets.QLayoutItem):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LayoutItemMixin","title":"<code>LayoutItemMixin</code>","text":"Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>class LayoutItemMixin:\ndef __bool__(self):\nreturn not self.isEmpty()\ndef set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n        Args:\n            alignment: alignment for the layout\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef get_item(\nself,\n) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QSpacerItem | None:\nif content := self.widget():\nreturn content\nif content := self.layout():\nreturn content\nreturn content if (content := self.spacerItem()) else None\ndef get_control_types(self) -&gt; list[widgets.sizepolicy.ControlTypeStr]:\nreturn widgets.sizepolicy.CONTROL_TYPE.get_list(self.controlTypes())\ndef get_expanding_directions(self) -&gt; list[constants.OrientationStr]:\nreturn constants.ORIENTATION.get_list(self.expandingDirections())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.__bool__","title":"<code>__bool__()</code>","text":"Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.get_control_types","title":"<code>get_control_types() -&gt; list[widgets.sizepolicy.ControlTypeStr]</code>","text":"Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def get_control_types(self) -&gt; list[widgets.sizepolicy.ControlTypeStr]:\nreturn widgets.sizepolicy.CONTROL_TYPE.get_list(self.controlTypes())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.get_expanding_directions","title":"<code>get_expanding_directions() -&gt; list[constants.OrientationStr]</code>","text":"Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def get_expanding_directions(self) -&gt; list[constants.OrientationStr]:\nreturn constants.ORIENTATION.get_list(self.expandingDirections())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.get_item","title":"<code>get_item() -&gt; QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QSpacerItem | None</code>","text":"Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def get_item(\nself,\n) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | QtWidgets.QSpacerItem | None:\nif content := self.widget():\nreturn content\nif content := self.layout():\nreturn content\nreturn content if (content := self.spacerItem()) else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layoutitem.LayoutItemMixin.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the layout</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n    Args:\n        alignment: alignment for the layout\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LayoutMixin","title":"<code>LayoutMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>widgets.LayoutItemMixin</code>, <code>prettyprinter.PrettyPrinter</code></p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>class LayoutMixin(core.ObjectMixin, widgets.LayoutItemMixin, prettyprinter.PrettyPrinter):\ndef __init__(self, *args, margin=None, **kwargs):\nself._next_container = None\nself._stack = []\nsuper().__init__(*args, **kwargs)\nif margin is not None:\nself.set_margin(margin)\ndef __getitem__(\nself, index: str | int\n) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | None:\nif isinstance(index, int):\nitem = self.itemAt(index)\nwidget = item.widget()\nif widget is None:\nwidget = item.layout()\nelif isinstance(index, str):\nreturn self.find_child(typ=QtCore.QObject, name=index)\nreturn widget\ndef __delitem__(self, index: int):\nitem = self.itemAt(index)\nself.removeItem(item)\ndef __len__(self) -&gt; int:\nreturn self.count()\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout | None]:\nreturn iter(self[i] for i in range(self.count()))\ndef __contains__(self, item: QtWidgets.QWidget | QtWidgets.QLayoutItem):\nreturn self.indexOf(item) &gt;= 0\ndef __enter__(self):\nif self._next_container is not None:\nself._next_container.__enter__()\nself._stack.append(self._next_container)\nself._next_container = None\nreturn self\ndef __exit__(self, *_):\nif self._stack:\nitem = self._stack.pop()\nitem.__exit__()\ndef __iadd__(self, item, *args, **kwargs):\nself.add(item, *args, **kwargs)\nreturn self\n# def __getattr__(self, name):\n#     return getattr(self._layout, name)\n# def __call__(self):\n#     return self._layout\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"sizeConstraint\": SIZE_CONSTRAINT}\nreturn maps\ndef add(self, item, *args, **kwargs):\nif isinstance(item, QtWidgets.QWidget):\nself._layout.addWidget(item, *args, **kwargs)\nelif isinstance(item, QtWidgets.QLayout):\nself._layout.addLayout(item, *args, **kwargs)\n# widget = Widgets.Widget()\n# widget.set_layout(item)\n# self._layout.addWidget(item, *args, **kwargs)\nelif isinstance(item, list):\nfor i in item:\nself._layout.add(i, *args, **kwargs)\nreturn item\n@property\ndef _layout(self):\nreturn self._stack[-1] if self._stack else self\n@classmethod\ndef create(\ncls,\nparent: QtWidgets.QWidget | QtWidgets.QLayout | None = None,\nstretch: int | None = None,\nmargin: int | None = None,\nalign: constants.AlignmentStr | None = None,\n**kwargs,\n) -&gt; Self:\n\"\"\"Create a Layout attached to given parent. Insert widget if needed.\"\"\"\nmatch parent:\ncase QtWidgets.QMainWindow():\nwidget = widgets.Widget(parent=parent)\nparent.setCentralWidget(widget)\nnew = cls(widget, **kwargs)\ncase QtWidgets.QScrollArea():\nwidget = widgets.Widget(parent=parent)\nparent.setWidget(widget)\nnew = cls(widget, **kwargs)\ncase QtWidgets.QSplitter():\nwidget = widgets.Widget(parent=parent)\nparent.addWidget(widget)\nnew = cls(widget, **kwargs)\ncase None | QtWidgets.QWidget():\nnew = cls(parent, **kwargs)\ncase QtWidgets.QLayout():\nnew = cls(**kwargs)\nif stretch:\nparent.addLayout(new, stretch)\nelse:\nparent.addLayout(new)\nif margin is not None:\nnew.set_margin(margin)\nif align is not None:\nnew.set_alignment(align)\nnew._stack = []\nnew._next_container = None\nreturn new\ndef get_sub_layout(self, layout: str, *args, **kwargs) -&gt; Self:\nmatch layout:\ncase \"horizontal\":\nClass = widgets.HBoxLayout\ncase \"vertical\":\nClass = widgets.VBoxLayout\ncase \"grid\":\nClass = widgets.GridLayout\ncase \"form\":\nClass = widgets.FormLayout\ncase \"stacked\":\nClass = widgets.StackedLayout\ncase \"flow\":\nfrom prettyqt import custom_widgets\nClass = custom_widgets.FlowLayout\ncase \"splitter\":\nClass = widgets.Splitter\ncase \"scroll\":\nClass = widgets.ScrollArea\ncase _:\nraise ValueError(\"Invalid Layout\")\nself._next_container = Class.create(self._layout, *args, **kwargs)\nreturn self\ndef get_children(self) -&gt; list[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn list(self)\ndef set_margin(self, margin: tuple[int, int, int, int] | int | None):\nmatch margin:\ncase None:\nself.unsetContentsMargins()\ncase int():\nself.setContentsMargins(margin, margin, margin, margin)\ncase tuple():\nself.setContentsMargins(*margin)\ncase _:\nraise ValueError(margin)\ndef set_spacing(self, pixels: int):\nself.setSpacing(pixels)\n@deprecated(reason=\"Use set_size_constraint instead\")\ndef set_size_mode(self, mode: SizeConstraintStr):\nself.set_size_constraint(mode)\ndef set_size_constraint(self, mode: SizeConstraintStr):\n\"\"\"Set the size mode of the layout.\n        Args:\n            mode: size mode for the layout\n        Raises:\n            InvalidParamError: size mode does not exist\n        \"\"\"\nif mode not in SIZE_CONSTRAINT:\nraise InvalidParamError(mode, SIZE_CONSTRAINT)\nself.setSizeConstraint(SIZE_CONSTRAINT[mode])\n@deprecated(reason=\"Use set_size_constraint instead\")\ndef get_size_mode(self) -&gt; SizeConstraintStr:\nreturn self.get_size_constraint()\ndef get_size_constraint(self) -&gt; SizeConstraintStr:\n\"\"\"Return current size mode.\n        Returns:\n            size mode\n        \"\"\"\nreturn SIZE_CONSTRAINT.inverse[self.sizeConstraint()]\ndef set_alignment(\nself,\nalignment: constants.AlignmentStr,\nitem: QtWidgets.QWidget | QtWidgets.QLayout | None = None,\n) -&gt; bool:\n\"\"\"Set the alignment for widget / layout to alignment.\n        Returns true if w is found in this layout (not including child layouts).\n        Args:\n            alignment: alignment for the layout\n            item: set alignment for specific child only\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nif item is not None:\nreturn self.setAlignment(item, constants.ALIGNMENTS[alignment])\nelse:\nreturn self.setAlignment(constants.ALIGNMENTS[alignment])\ndef add_widget(self, widget: QtWidgets.QWidget, *args, **kwargs):\nself.addWidget(widget, *args, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__contains__","title":"<code>__contains__(item: QtWidgets.QWidget | QtWidgets.QLayoutItem)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __contains__(self, item: QtWidgets.QWidget | QtWidgets.QLayoutItem):\nreturn self.indexOf(item) &gt;= 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __delitem__(self, index: int):\nitem = self.itemAt(index)\nself.removeItem(item)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __enter__(self):\nif self._next_container is not None:\nself._next_container.__enter__()\nself._stack.append(self._next_container)\nself._next_container = None\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__exit__","title":"<code>__exit__(*_)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __exit__(self, *_):\nif self._stack:\nitem = self._stack.pop()\nitem.__exit__()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__getitem__","title":"<code>__getitem__(index: str | int) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | None</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __getitem__(\nself, index: str | int\n) -&gt; QtWidgets.QWidget | QtWidgets.QLayout | None:\nif isinstance(index, int):\nitem = self.itemAt(index)\nwidget = item.widget()\nif widget is None:\nwidget = item.layout()\nelif isinstance(index, str):\nreturn self.find_child(typ=QtCore.QObject, name=index)\nreturn widget\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__iadd__","title":"<code>__iadd__(item, *args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __iadd__(self, item, *args, **kwargs):\nself.add(item, *args, **kwargs)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__init__","title":"<code>__init__(*args, margin = None, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __init__(self, *args, margin=None, **kwargs):\nself._next_container = None\nself._stack = []\nsuper().__init__(*args, **kwargs)\nif margin is not None:\nself.set_margin(margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout | None]</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QWidget | QtWidgets.QLayout | None]:\nreturn iter(self[i] for i in range(self.count()))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.count()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.add","title":"<code>add(item, *args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def add(self, item, *args, **kwargs):\nif isinstance(item, QtWidgets.QWidget):\nself._layout.addWidget(item, *args, **kwargs)\nelif isinstance(item, QtWidgets.QLayout):\nself._layout.addLayout(item, *args, **kwargs)\n# widget = Widgets.Widget()\n# widget.set_layout(item)\n# self._layout.addWidget(item, *args, **kwargs)\nelif isinstance(item, list):\nfor i in item:\nself._layout.add(i, *args, **kwargs)\nreturn item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.add_widget","title":"<code>add_widget(widget: QtWidgets.QWidget, *args: QtWidgets.QWidget, **kwargs: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def add_widget(self, widget: QtWidgets.QWidget, *args, **kwargs):\nself.addWidget(widget, *args, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.create","title":"<code>create(parent: QtWidgets.QWidget | QtWidgets.QLayout | None = None, stretch: int | None = None, margin: int | None = None, align: constants.AlignmentStr | None = None, **kwargs: constants.AlignmentStr | None) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a Layout attached to given parent. Insert widget if needed.</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>@classmethod\ndef create(\ncls,\nparent: QtWidgets.QWidget | QtWidgets.QLayout | None = None,\nstretch: int | None = None,\nmargin: int | None = None,\nalign: constants.AlignmentStr | None = None,\n**kwargs,\n) -&gt; Self:\n\"\"\"Create a Layout attached to given parent. Insert widget if needed.\"\"\"\nmatch parent:\ncase QtWidgets.QMainWindow():\nwidget = widgets.Widget(parent=parent)\nparent.setCentralWidget(widget)\nnew = cls(widget, **kwargs)\ncase QtWidgets.QScrollArea():\nwidget = widgets.Widget(parent=parent)\nparent.setWidget(widget)\nnew = cls(widget, **kwargs)\ncase QtWidgets.QSplitter():\nwidget = widgets.Widget(parent=parent)\nparent.addWidget(widget)\nnew = cls(widget, **kwargs)\ncase None | QtWidgets.QWidget():\nnew = cls(parent, **kwargs)\ncase QtWidgets.QLayout():\nnew = cls(**kwargs)\nif stretch:\nparent.addLayout(new, stretch)\nelse:\nparent.addLayout(new)\nif margin is not None:\nnew.set_margin(margin)\nif align is not None:\nnew.set_alignment(align)\nnew._stack = []\nnew._next_container = None\nreturn new\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.get_children","title":"<code>get_children() -&gt; list[QtWidgets.QWidget | QtWidgets.QLayout]</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def get_children(self) -&gt; list[QtWidgets.QWidget | QtWidgets.QLayout]:\nreturn list(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.get_size_constraint","title":"<code>get_size_constraint() -&gt; SizeConstraintStr</code>","text":"<p>Return current size mode.</p> <p>Returns:</p> Type Description <code>SizeConstraintStr</code> <p>size mode</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def get_size_constraint(self) -&gt; SizeConstraintStr:\n\"\"\"Return current size mode.\n    Returns:\n        size mode\n    \"\"\"\nreturn SIZE_CONSTRAINT.inverse[self.sizeConstraint()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.get_size_mode","title":"<code>get_size_mode() -&gt; SizeConstraintStr</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>@deprecated(reason=\"Use set_size_constraint instead\")\ndef get_size_mode(self) -&gt; SizeConstraintStr:\nreturn self.get_size_constraint()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.get_sub_layout","title":"<code>get_sub_layout(layout: str, *args: str, **kwargs: str) -&gt; Self</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def get_sub_layout(self, layout: str, *args, **kwargs) -&gt; Self:\nmatch layout:\ncase \"horizontal\":\nClass = widgets.HBoxLayout\ncase \"vertical\":\nClass = widgets.VBoxLayout\ncase \"grid\":\nClass = widgets.GridLayout\ncase \"form\":\nClass = widgets.FormLayout\ncase \"stacked\":\nClass = widgets.StackedLayout\ncase \"flow\":\nfrom prettyqt import custom_widgets\nClass = custom_widgets.FlowLayout\ncase \"splitter\":\nClass = widgets.Splitter\ncase \"scroll\":\nClass = widgets.ScrollArea\ncase _:\nraise ValueError(\"Invalid Layout\")\nself._next_container = Class.create(self._layout, *args, **kwargs)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr, item: QtWidgets.QWidget | QtWidgets.QLayout | None = None) -&gt; bool</code>","text":"<p>Set the alignment for widget / layout to alignment.</p> <p>Returns true if w is found in this layout (not including child layouts).</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the layout</p> required <code>item</code> <code>QtWidgets.QWidget | QtWidgets.QLayout | None</code> <p>set alignment for specific child only</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_alignment(\nself,\nalignment: constants.AlignmentStr,\nitem: QtWidgets.QWidget | QtWidgets.QLayout | None = None,\n) -&gt; bool:\n\"\"\"Set the alignment for widget / layout to alignment.\n    Returns true if w is found in this layout (not including child layouts).\n    Args:\n        alignment: alignment for the layout\n        item: set alignment for specific child only\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nif item is not None:\nreturn self.setAlignment(item, constants.ALIGNMENTS[alignment])\nelse:\nreturn self.setAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_margin","title":"<code>set_margin(margin: tuple[int, int, int, int] | int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_margin(self, margin: tuple[int, int, int, int] | int | None):\nmatch margin:\ncase None:\nself.unsetContentsMargins()\ncase int():\nself.setContentsMargins(margin, margin, margin, margin)\ncase tuple():\nself.setContentsMargins(*margin)\ncase _:\nraise ValueError(margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_size_constraint","title":"<code>set_size_constraint(mode: SizeConstraintStr)</code>","text":"<p>Set the size mode of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SizeConstraintStr</code> <p>size mode for the layout</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>size mode does not exist</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_size_constraint(self, mode: SizeConstraintStr):\n\"\"\"Set the size mode of the layout.\n    Args:\n        mode: size mode for the layout\n    Raises:\n        InvalidParamError: size mode does not exist\n    \"\"\"\nif mode not in SIZE_CONSTRAINT:\nraise InvalidParamError(mode, SIZE_CONSTRAINT)\nself.setSizeConstraint(SIZE_CONSTRAINT[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_size_mode","title":"<code>set_size_mode(mode: SizeConstraintStr)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>@deprecated(reason=\"Use set_size_constraint instead\")\ndef set_size_mode(self, mode: SizeConstraintStr):\nself.set_size_constraint(mode)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.layout.LayoutMixin.set_spacing","title":"<code>set_spacing(pixels: int)</code>","text":"Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_spacing(self, pixels: int):\nself.setSpacing(pixels)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.LineEdit","title":"<code>LineEdit</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QLineEdit</code></p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>class LineEdit(widgets.WidgetMixin, QtWidgets.QLineEdit):\nvalue_changed = core.Signal(str)\ntab_pressed = core.Signal()\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self._set_validation_color)\nself.textChanged.connect(self.value_changed)\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef __add__(self, other: str):\nself.append_text(other)\nreturn self\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"echoMode\": ECHO_MODE,\n\"cursorMoveStyle\": constants.CURSOR_MOVE_STYLE,\n\"alignment\": constants.ALIGNMENTS,\n}\nreturn maps\ndef font(self) -&gt; gui.Font:\nreturn gui.Font(super().font())\ndef keyPressEvent(self, event):\nsuper().keyPressEvent(event)\nif event.key() == QtCore.Qt.Key.Key_Tab:\nself.tab_pressed.emit()\ndef append_text(self, text: str):\nself.set_text(self.text() + text)\ndef set_text(self, text: str):\nself.setText(text)\ndef set_completer(self, completer: QtWidgets.QCompleter | Literal[\"files\"]):\nmatch completer:\ncase QtWidgets.QCompleter():\nself.setCompleter(completer)\ncase \"files\":\nmodel = widgets.FileSystemModel()\nmodel.set_root_path(\"\")\ncompleter = widgets.Completer(self)\ncompleter.setModel(model)\nself.setCompleter(completer)\ndef set_read_only(self, value: bool = True):\n\"\"\"Set text to read-only.\n        Args:\n            value: True, for read-only, otherwise False\n        \"\"\"\nself.setReadOnly(value)\ndef set_regex_validator(self, regex: str, flags=0) -&gt; gui.RegularExpressionValidator:\nvalidator = gui.RegularExpressionValidator(self)\nvalidator.set_regex(regex, flags)\nself.set_validator(validator)\nreturn validator\ndef set_range(self, lower: int | None, upper: int | None):\nval = gui.IntValidator()\nval.set_range(lower, upper)\nself.set_validator(val)\ndef set_validator(self, validator: gui.Validator):\nself.setValidator(validator)\nself._set_validation_color()\ndef set_input_mask(self, mask: str):\nmatch mask:\ncase \"ip_address\":\nmask = \"000.000.000.000;_\"\ncase \"mac_address\":\nmask = \"HH:HH:HH:HH:HH:HH;_\"\ncase \"iso_date\":\nmask = \"0000-00-00\"\nself.setInputMask(mask)\ndef _set_validation_color(self, state: bool = True):\ncolor = None if self.is_valid() else \"orange\"\nself.set_background_color(color)\ndef set_echo_mode(self, mode: EchoModeStr):\n\"\"\"Set echo mode.\n        Args:\n            mode: echo mode to use\n        Raises:\n            InvalidParamError: invalid echo mode\n        \"\"\"\nif mode not in ECHO_MODE:\nraise InvalidParamError(mode, ECHO_MODE)\nself.setEchoMode(ECHO_MODE[mode])\ndef get_echo_mode(self) -&gt; EchoModeStr:\n\"\"\"Return echo mode.\n        Returns:\n            echo mode\n        \"\"\"\nreturn ECHO_MODE.inverse[self.echoMode()]\ndef set_cursor_move_style(self, style: constants.CursorMoveStyleStr):\n\"\"\"Set cursor move style.\n        Args:\n            style: cursor move style to use\n        Raises:\n            InvalidParamError: invalid cursor move style\n        \"\"\"\nif style not in constants.CURSOR_MOVE_STYLE:\nraise InvalidParamError(style, constants.CURSOR_MOVE_STYLE)\nself.setCursorMoveStyle(constants.CURSOR_MOVE_STYLE[style])\ndef get_cursor_move_style(self) -&gt; constants.CursorMoveStyleStr:\n\"\"\"Return cursor move style.\n        Returns:\n            cursor move style\n        \"\"\"\nreturn constants.CURSOR_MOVE_STYLE.inverse[self.cursorMoveStyle()]\ndef add_action(self, action: QtGui.QAction, position: ActionPositionStr = \"trailing\"):\nself.addAction(action, ACTION_POSITION[position])\ndef set_value(self, value: str):\nself.setText(value)\ndef get_value(self) -&gt; str:\nreturn self.text()\ndef is_valid(self) -&gt; bool:\nreturn self.hasAcceptableInput()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.tab_pressed","title":"<code>tab_pressed = core.Signal()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.value_changed","title":"<code>value_changed = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.__add__","title":"<code>__add__(other: str)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def __add__(self, other: str):\nself.append_text(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self._set_validation_color)\nself.textChanged.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.add_action","title":"<code>add_action(action: QtGui.QAction, position: ActionPositionStr = 'trailing')</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def add_action(self, action: QtGui.QAction, position: ActionPositionStr = \"trailing\"):\nself.addAction(action, ACTION_POSITION[position])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.append_text","title":"<code>append_text(text: str)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def append_text(self, text: str):\nself.set_text(self.text() + text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.font","title":"<code>font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def font(self) -&gt; gui.Font:\nreturn gui.Font(super().font())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.get_cursor_move_style","title":"<code>get_cursor_move_style() -&gt; constants.CursorMoveStyleStr</code>","text":"<p>Return cursor move style.</p> <p>Returns:</p> Type Description <code>constants.CursorMoveStyleStr</code> <p>cursor move style</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_cursor_move_style(self) -&gt; constants.CursorMoveStyleStr:\n\"\"\"Return cursor move style.\n    Returns:\n        cursor move style\n    \"\"\"\nreturn constants.CURSOR_MOVE_STYLE.inverse[self.cursorMoveStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.get_echo_mode","title":"<code>get_echo_mode() -&gt; EchoModeStr</code>","text":"<p>Return echo mode.</p> <p>Returns:</p> Type Description <code>EchoModeStr</code> <p>echo mode</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_echo_mode(self) -&gt; EchoModeStr:\n\"\"\"Return echo mode.\n    Returns:\n        echo mode\n    \"\"\"\nreturn ECHO_MODE.inverse[self.echoMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.get_value","title":"<code>get_value() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_value(self) -&gt; str:\nreturn self.text()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def is_valid(self) -&gt; bool:\nreturn self.hasAcceptableInput()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.keyPressEvent","title":"<code>keyPressEvent(event)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def keyPressEvent(self, event):\nsuper().keyPressEvent(event)\nif event.key() == QtCore.Qt.Key.Key_Tab:\nself.tab_pressed.emit()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_completer","title":"<code>set_completer(completer: QtWidgets.QCompleter | Literal['files'])</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_completer(self, completer: QtWidgets.QCompleter | Literal[\"files\"]):\nmatch completer:\ncase QtWidgets.QCompleter():\nself.setCompleter(completer)\ncase \"files\":\nmodel = widgets.FileSystemModel()\nmodel.set_root_path(\"\")\ncompleter = widgets.Completer(self)\ncompleter.setModel(model)\nself.setCompleter(completer)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_cursor_move_style","title":"<code>set_cursor_move_style(style: constants.CursorMoveStyleStr)</code>","text":"<p>Set cursor move style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CursorMoveStyleStr</code> <p>cursor move style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid cursor move style</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_cursor_move_style(self, style: constants.CursorMoveStyleStr):\n\"\"\"Set cursor move style.\n    Args:\n        style: cursor move style to use\n    Raises:\n        InvalidParamError: invalid cursor move style\n    \"\"\"\nif style not in constants.CURSOR_MOVE_STYLE:\nraise InvalidParamError(style, constants.CURSOR_MOVE_STYLE)\nself.setCursorMoveStyle(constants.CURSOR_MOVE_STYLE[style])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_echo_mode","title":"<code>set_echo_mode(mode: EchoModeStr)</code>","text":"<p>Set echo mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>EchoModeStr</code> <p>echo mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid echo mode</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_echo_mode(self, mode: EchoModeStr):\n\"\"\"Set echo mode.\n    Args:\n        mode: echo mode to use\n    Raises:\n        InvalidParamError: invalid echo mode\n    \"\"\"\nif mode not in ECHO_MODE:\nraise InvalidParamError(mode, ECHO_MODE)\nself.setEchoMode(ECHO_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_input_mask","title":"<code>set_input_mask(mask: str)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_input_mask(self, mask: str):\nmatch mask:\ncase \"ip_address\":\nmask = \"000.000.000.000;_\"\ncase \"mac_address\":\nmask = \"HH:HH:HH:HH:HH:HH;_\"\ncase \"iso_date\":\nmask = \"0000-00-00\"\nself.setInputMask(mask)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_range","title":"<code>set_range(lower: int | None, upper: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_range(self, lower: int | None, upper: int | None):\nval = gui.IntValidator()\nval.set_range(lower, upper)\nself.set_validator(val)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_read_only","title":"<code>set_read_only(value: bool = True)</code>","text":"<p>Set text to read-only.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True, for read-only, otherwise False</p> <code>True</code> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_read_only(self, value: bool = True):\n\"\"\"Set text to read-only.\n    Args:\n        value: True, for read-only, otherwise False\n    \"\"\"\nself.setReadOnly(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_regex_validator","title":"<code>set_regex_validator(regex: str, flags: str = 0) -&gt; gui.RegularExpressionValidator</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_regex_validator(self, regex: str, flags=0) -&gt; gui.RegularExpressionValidator:\nvalidator = gui.RegularExpressionValidator(self)\nvalidator.set_regex(regex, flags)\nself.set_validator(validator)\nreturn validator\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_text","title":"<code>set_text(text: str)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_text(self, text: str):\nself.setText(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_validator","title":"<code>set_validator(validator: gui.Validator)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_validator(self, validator: gui.Validator):\nself.setValidator(validator)\nself._set_validation_color()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.lineedit.LineEdit.set_value","title":"<code>set_value(value: str)</code>","text":"Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_value(self, value: str):\nself.setText(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ListView","title":"<code>ListView</code>","text":"<p>         Bases: <code>ListViewMixin</code>, <code>QtWidgets.QListView</code></p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>class ListView(ListViewMixin, QtWidgets.QListView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ListViewMixin","title":"<code>ListViewMixin</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>class ListViewMixin(widgets.AbstractItemViewMixin):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"viewMode\": VIEW_MODE,\n\"resizeMode\": RESIZE_MODE,\n\"layoutMode\": LAYOUT_MODE,\n\"movement\": MOVEMENT,\n\"flow\": FLOW,\n}\nreturn maps\ndef set_view_mode(self, mode: ViewModeStr):\n\"\"\"Set view mode.\n        Args:\n            mode: view mode to use\n        Raises:\n            InvalidParamError: invalid view mode\n        \"\"\"\nif mode not in VIEW_MODE:\nraise InvalidParamError(mode, VIEW_MODE)\nself.setViewMode(VIEW_MODE[mode])\ndef get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n        Returns:\n            view mode\n        \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_resize_mode(self, mode: ResizeModeStr):\n\"\"\"Set resize mode.\n        Args:\n            mode: resize mode to use\n        Raises:\n            InvalidParamError: invalid resize mode\n        \"\"\"\nif mode not in RESIZE_MODE:\nraise InvalidParamError(mode, RESIZE_MODE)\nself.setResizeMode(RESIZE_MODE[mode])\ndef get_resize_mode(self) -&gt; ResizeModeStr:\n\"\"\"Return resize mode.\n        Returns:\n            resize mode\n        \"\"\"\nreturn RESIZE_MODE.inverse[self.resizeMode()]\ndef set_layout_mode(self, mode: LayoutModeStr):\n\"\"\"Set layout mode.\n        Args:\n            mode: layout mode to use\n        Raises:\n            InvalidParamError: invalid layout mode\n        \"\"\"\nif mode not in LAYOUT_MODE:\nraise InvalidParamError(mode, LAYOUT_MODE)\nself.setLayoutMode(LAYOUT_MODE[mode])\ndef get_layout_mode(self) -&gt; LayoutModeStr:\n\"\"\"Return layout mode.\n        Returns:\n            layout mode\n        \"\"\"\nreturn LAYOUT_MODE.inverse[self.layoutMode()]\ndef set_movement(self, mode: MovementStr):\n\"\"\"Set movement mode.\n        Args:\n            mode: movement mode to use\n        Raises:\n            InvalidParamError: invalid movement mode\n        \"\"\"\nif mode not in MOVEMENT:\nraise InvalidParamError(mode, MOVEMENT)\nself.setMovement(MOVEMENT[mode])\ndef get_movement(self) -&gt; MovementStr:\n\"\"\"Return movement mode.\n        Returns:\n            movement mode\n        \"\"\"\nreturn MOVEMENT.inverse[self.movement()]\ndef set_flow(self, mode: FlowStr):\n\"\"\"Set flow mode.\n        Args:\n            mode: flow mode to use\n        Raises:\n            InvalidParamError: invalid flow mode\n        \"\"\"\nif mode not in FLOW:\nraise InvalidParamError(mode, FLOW)\nself.setFlow(FLOW[mode])\ndef get_flow(self) -&gt; FlowStr:\n\"\"\"Return flow mode.\n        Returns:\n            flow mode\n        \"\"\"\nreturn FLOW.inverse[self.flow()]\ndef set_grid_size(self, size: datatypes.SizeType):\nif isinstance(size, tuple):\nsize = QtCore.QSize(*size)\nself.setGridSize(size)\ndef get_grid_size(self) -&gt; core.Size:\nreturn core.Size(self.gridSize())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_flow","title":"<code>get_flow() -&gt; FlowStr</code>","text":"<p>Return flow mode.</p> <p>Returns:</p> Type Description <code>FlowStr</code> <p>flow mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_flow(self) -&gt; FlowStr:\n\"\"\"Return flow mode.\n    Returns:\n        flow mode\n    \"\"\"\nreturn FLOW.inverse[self.flow()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_grid_size","title":"<code>get_grid_size() -&gt; core.Size</code>","text":"Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_grid_size(self) -&gt; core.Size:\nreturn core.Size(self.gridSize())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_layout_mode","title":"<code>get_layout_mode() -&gt; LayoutModeStr</code>","text":"<p>Return layout mode.</p> <p>Returns:</p> Type Description <code>LayoutModeStr</code> <p>layout mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_layout_mode(self) -&gt; LayoutModeStr:\n\"\"\"Return layout mode.\n    Returns:\n        layout mode\n    \"\"\"\nreturn LAYOUT_MODE.inverse[self.layoutMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_movement","title":"<code>get_movement() -&gt; MovementStr</code>","text":"<p>Return movement mode.</p> <p>Returns:</p> Type Description <code>MovementStr</code> <p>movement mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_movement(self) -&gt; MovementStr:\n\"\"\"Return movement mode.\n    Returns:\n        movement mode\n    \"\"\"\nreturn MOVEMENT.inverse[self.movement()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_resize_mode","title":"<code>get_resize_mode() -&gt; ResizeModeStr</code>","text":"<p>Return resize mode.</p> <p>Returns:</p> Type Description <code>ResizeModeStr</code> <p>resize mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_resize_mode(self) -&gt; ResizeModeStr:\n\"\"\"Return resize mode.\n    Returns:\n        resize mode\n    \"\"\"\nreturn RESIZE_MODE.inverse[self.resizeMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return view mode.</p> <p>Returns:</p> Type Description <code>ViewModeStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_flow","title":"<code>set_flow(mode: FlowStr)</code>","text":"<p>Set flow mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FlowStr</code> <p>flow mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid flow mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_flow(self, mode: FlowStr):\n\"\"\"Set flow mode.\n    Args:\n        mode: flow mode to use\n    Raises:\n        InvalidParamError: invalid flow mode\n    \"\"\"\nif mode not in FLOW:\nraise InvalidParamError(mode, FLOW)\nself.setFlow(FLOW[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_grid_size","title":"<code>set_grid_size(size: datatypes.SizeType)</code>","text":"Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_grid_size(self, size: datatypes.SizeType):\nif isinstance(size, tuple):\nsize = QtCore.QSize(*size)\nself.setGridSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_layout_mode","title":"<code>set_layout_mode(mode: LayoutModeStr)</code>","text":"<p>Set layout mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LayoutModeStr</code> <p>layout mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid layout mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_layout_mode(self, mode: LayoutModeStr):\n\"\"\"Set layout mode.\n    Args:\n        mode: layout mode to use\n    Raises:\n        InvalidParamError: invalid layout mode\n    \"\"\"\nif mode not in LAYOUT_MODE:\nraise InvalidParamError(mode, LAYOUT_MODE)\nself.setLayoutMode(LAYOUT_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_movement","title":"<code>set_movement(mode: MovementStr)</code>","text":"<p>Set movement mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>MovementStr</code> <p>movement mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid movement mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_movement(self, mode: MovementStr):\n\"\"\"Set movement mode.\n    Args:\n        mode: movement mode to use\n    Raises:\n        InvalidParamError: invalid movement mode\n    \"\"\"\nif mode not in MOVEMENT:\nraise InvalidParamError(mode, MOVEMENT)\nself.setMovement(MOVEMENT[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_resize_mode","title":"<code>set_resize_mode(mode: ResizeModeStr)</code>","text":"<p>Set resize mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ResizeModeStr</code> <p>resize mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid resize mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_resize_mode(self, mode: ResizeModeStr):\n\"\"\"Set resize mode.\n    Args:\n        mode: resize mode to use\n    Raises:\n        InvalidParamError: invalid resize mode\n    \"\"\"\nif mode not in RESIZE_MODE:\nraise InvalidParamError(mode, RESIZE_MODE)\nself.setResizeMode(RESIZE_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listview.ListViewMixin.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr</code> <p>view mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid view mode</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode to use\n    Raises:\n        InvalidParamError: invalid view mode\n    \"\"\"\nif mode not in VIEW_MODE:\nraise InvalidParamError(mode, VIEW_MODE)\nself.setViewMode(VIEW_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ListWidget","title":"<code>ListWidget</code>","text":"<p>         Bases: <code>widgets.ListViewMixin</code>, <code>QtWidgets.QListWidget</code></p> Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>class ListWidget(widgets.ListViewMixin, QtWidgets.QListWidget):\nvalue_changed = core.Signal(object)\ndef __init__(\nself, parent: QtWidgets.QWidget | None = None, selection_mode: str = \"single\"\n):\nsuper().__init__(parent)\nself.itemSelectionChanged.connect(self.on_index_change)\nself.set_selection_mode(selection_mode)\ndef __repr__(self):\nreturn f\"{type(self).__name__}: {self.count()} items\"\ndef __getitem__(self, row: int) -&gt; QtWidgets.QListWidgetItem:\nitem = self.item(row)\nif item is None:\nraise KeyError(row)\nreturn item\ndef __delitem__(self, row: int):\nself.takeItem(row)\ndef __add__(self, other: QtWidgets.QListWidgetItem):\nself.addItem(other)\nreturn self\ndef __iter__(self) -&gt; Iterator[QtWidgets.QListWidgetItem]:\nreturn iter(self.get_children())\ndef __len__(self) -&gt; int:\nreturn self.count()\n# def __setstate__(self, state):\n#     self.set_selection_mode(state[\"selection_mode\"])\n#     self.setSortingEnabled(state[\"sorting_enabled\"])\n#     self.setCurrentRow(state[\"current_row\"])\n#     for item in state[\"items\"]:\n#         self.addItem(item)\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\n# def serialize_fields(self):\n#     return dict(\n#         items=self.get_children(),\n#         selection_mode=self.get_selection_mode(),\n#         sorting_enabled=self.isSortingEnabled(),\n#         current_row=self.currentRow(),\n#     )\ndef sort(self, reverse: bool = False):\norder = constants.DESCENDING if reverse else constants.ASCENDING\nself.sortItems(order)\ndef on_index_change(self):\ndata = self.get_value()\nself.value_changed.emit(data)\ndef get_children(self) -&gt; list[QtWidgets.QListWidgetItem]:\nreturn [self.item(row) for row in range(self.count())]\ndef add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.add(i)\ndef add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselected: bool = None,\nstatus_tip: str | None = None,\ntool_tip: str | None = None,\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: QtCore.Qt.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; widgets.ListWidgetItem:\ntyp = 1 if is_user_type else 0\nitem = widgets.ListWidgetItem(name, self, typ)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(k, v)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif selected:\nitem.setSelected(selected)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.addItem(item)\nreturn item\ndef add(self, label: str, data=NoData, icon: datatypes.IconType = None):\nif data is NoData:\ndata = label\nitem = widgets.ListWidgetItem(label)\nitem.set_icon(icon)\nitem.setData(constants.USER_ROLE, data)  # type: ignore\nself.addItem(item)\ndef get_value(self) -&gt; list[Any]:\nreturn [i.data(constants.USER_ROLE) for i in self.selectedItems()]  # type: ignore\ndef set_value(self, value):\nfor i in self.get_children():\nif i.data(constants.USER_ROLE) in value:  # type: ignore\nself.setCurrentItem(i)\nbreak\ndef scroll_to_item(\nself,\nitem: QtWidgets.QListWidgetItem,\nmode: widgets.abstractitemview.ScrollHintStr = \"ensure_visible\",\n):\nif mode not in widgets.abstractitemview.SCROLL_HINT:\nraise InvalidParamError(mode, widgets.abstractitemview.SCROLL_HINT)\nself.scrollToItem(item, widgets.abstractitemview.SCROLL_HINT[mode])\ndef find_items(\nself,\ntext: str,\ncolumn: int = 0,\nmode: constants.MatchFlagStr = \"exact\",\nrecursive: bool = False,\ncase_sensitive: bool = False,\n) -&gt; list[QtWidgets.QListWidgetItem]:\nif mode not in constants.MATCH_FLAGS:\nraise InvalidParamError(mode, constants.MATCH_FLAGS)\nflag = constants.MATCH_FLAGS[mode]\nif recursive:\nflag |= QtCore.Qt.MatchFlag.MatchRecursive\nif case_sensitive:\nflag |= QtCore.Qt.MatchFlag.MatchCaseSensitive\nreturn self.findItems(text, flag, column)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.value_changed","title":"<code>value_changed = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__add__","title":"<code>__add__(other: QtWidgets.QListWidgetItem)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __add__(self, other: QtWidgets.QListWidgetItem):\nself.addItem(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__delitem__","title":"<code>__delitem__(row: int)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __delitem__(self, row: int):\nself.takeItem(row)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__getitem__","title":"<code>__getitem__(row: int) -&gt; QtWidgets.QListWidgetItem</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __getitem__(self, row: int) -&gt; QtWidgets.QListWidgetItem:\nitem = self.item(row)\nif item is None:\nraise KeyError(row)\nreturn item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None, selection_mode: str = 'single')</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __init__(\nself, parent: QtWidgets.QWidget | None = None, selection_mode: str = \"single\"\n):\nsuper().__init__(parent)\nself.itemSelectionChanged.connect(self.on_index_change)\nself.set_selection_mode(selection_mode)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QListWidgetItem]</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QListWidgetItem]:\nreturn iter(self.get_children())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.count()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def __repr__(self):\nreturn f\"{type(self).__name__}: {self.count()} items\"\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.add","title":"<code>add(label: str, data: str = NoData, icon: datatypes.IconType = None)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def add(self, label: str, data=NoData, icon: datatypes.IconType = None):\nif data is NoData:\ndata = label\nitem = widgets.ListWidgetItem(label)\nitem.set_icon(icon)\nitem.setData(constants.USER_ROLE, data)  # type: ignore\nself.addItem(item)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.add_item","title":"<code>add_item(name: str = '', icon: datatypes.IconType = None, data: dict | None = None, foreground: QtGui.QBrush | None = None, background: QtGui.QBrush | None = None, font: QtGui.QFont | None = None, selected: bool = None, status_tip: str | None = None, tool_tip: str | None = None, whats_this: str | None = None, checkstate: constants.StateStr | None = None, flags: QtCore.Qt.ItemFlag | None = None, size_hint: datatypes.SizeType | None = None, is_user_type: bool = False) -&gt; widgets.ListWidgetItem</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselected: bool = None,\nstatus_tip: str | None = None,\ntool_tip: str | None = None,\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: QtCore.Qt.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; widgets.ListWidgetItem:\ntyp = 1 if is_user_type else 0\nitem = widgets.ListWidgetItem(name, self, typ)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(k, v)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif selected:\nitem.setSelected(selected)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.addItem(item)\nreturn item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.add_items","title":"<code>add_items(items: Iterable | Mapping)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.add(i)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.find_items","title":"<code>find_items(text: str, column: int = 0, mode: constants.MatchFlagStr = 'exact', recursive: bool = False, case_sensitive: bool = False) -&gt; list[QtWidgets.QListWidgetItem]</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def find_items(\nself,\ntext: str,\ncolumn: int = 0,\nmode: constants.MatchFlagStr = \"exact\",\nrecursive: bool = False,\ncase_sensitive: bool = False,\n) -&gt; list[QtWidgets.QListWidgetItem]:\nif mode not in constants.MATCH_FLAGS:\nraise InvalidParamError(mode, constants.MATCH_FLAGS)\nflag = constants.MATCH_FLAGS[mode]\nif recursive:\nflag |= QtCore.Qt.MatchFlag.MatchRecursive\nif case_sensitive:\nflag |= QtCore.Qt.MatchFlag.MatchCaseSensitive\nreturn self.findItems(text, flag, column)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.get_children","title":"<code>get_children() -&gt; list[QtWidgets.QListWidgetItem]</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def get_children(self) -&gt; list[QtWidgets.QListWidgetItem]:\nreturn [self.item(row) for row in range(self.count())]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.get_value","title":"<code>get_value() -&gt; list[Any]</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def get_value(self) -&gt; list[Any]:\nreturn [i.data(constants.USER_ROLE) for i in self.selectedItems()]  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.on_index_change","title":"<code>on_index_change()</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def on_index_change(self):\ndata = self.get_value()\nself.value_changed.emit(data)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.scroll_to_item","title":"<code>scroll_to_item(item: QtWidgets.QListWidgetItem, mode: widgets.abstractitemview.ScrollHintStr = 'ensure_visible')</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def scroll_to_item(\nself,\nitem: QtWidgets.QListWidgetItem,\nmode: widgets.abstractitemview.ScrollHintStr = \"ensure_visible\",\n):\nif mode not in widgets.abstractitemview.SCROLL_HINT:\nraise InvalidParamError(mode, widgets.abstractitemview.SCROLL_HINT)\nself.scrollToItem(item, widgets.abstractitemview.SCROLL_HINT[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.set_value","title":"<code>set_value(value)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def set_value(self, value):\nfor i in self.get_children():\nif i.data(constants.USER_ROLE) in value:  # type: ignore\nself.setCurrentItem(i)\nbreak\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidget.ListWidget.sort","title":"<code>sort(reverse: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>def sort(self, reverse: bool = False):\norder = constants.DESCENDING if reverse else constants.ASCENDING\nself.sortItems(order)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ListWidgetItem","title":"<code>ListWidgetItem</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtWidgets.QListWidgetItem</code></p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>class ListWidgetItem(serializemixin.SerializeMixin, QtWidgets.QListWidgetItem):\ndef __repr__(self):\nreturn get_repr(self, self.icon(), self.text())\ndef __setitem__(self, index: int | constants.ItemDataRoleStr, value):\nself.set_data(index, value)\ndef __getitem__(self, index: int | constants.ItemDataRoleStr):\nreturn self.get_data(index)\ndef serialize_fields(self):\nreturn dict(\ntext=self.text(),\ntool_tip=self.toolTip(),\nstatus_tip=self.statusTip(),\ncheckstate=self.get_checkstate(),\nicon=self.get_icon(),\ndata=self.data(constants.USER_ROLE),  # type: ignore\n)\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        Raises:\n            InvalidParamError: invalid checkstate\n        \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\ndef get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = super().icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_data(self, role: constants.ItemDataRoleStr | int, data: Any):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(role, data)\ndef get_data(self, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\ndef set_size_hint(self, hint: datatypes.SizeType):\nif isinstance(hint, tuple):\nhint = QtCore.QSize(*hint)\nsuper().setSizeHint(hint)\ndef set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n        Args:\n            horizontal: horizontal text alignment to use\n            vertical: vertical text alignment to use\n        Raises:\n            InvalidParamError: invalid text alignment\n        \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.__getitem__","title":"<code>__getitem__(index: int | constants.ItemDataRoleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def __getitem__(self, index: int | constants.ItemDataRoleStr):\nreturn self.get_data(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self, self.icon(), self.text())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.__setitem__","title":"<code>__setitem__(index: int | constants.ItemDataRoleStr, value: int | constants.ItemDataRoleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def __setitem__(self, index: int | constants.ItemDataRoleStr, value):\nself.set_data(index, value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_background","title":"<code>get_background() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.StateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.StateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_data","title":"<code>get_data(role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_data(self, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_foreground","title":"<code>get_foreground() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = super().icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\ntext=self.text(),\ntool_tip=self.toolTip(),\nstatus_tip=self.statusTip(),\ncheckstate=self.get_checkstate(),\nicon=self.get_icon(),\ndata=self.data(constants.USER_ROLE),  # type: ignore\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.StateStr)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.StateStr</code> <p>checkstate to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid checkstate</p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    Raises:\n        InvalidParamError: invalid checkstate\n    \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_data","title":"<code>set_data(role: constants.ItemDataRoleStr | int, data: Any)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_data(self, role: constants.ItemDataRoleStr | int, data: Any):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(role, data)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_size_hint","title":"<code>set_size_hint(hint: datatypes.SizeType)</code>","text":"Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_size_hint(self, hint: datatypes.SizeType):\nif isinstance(hint, tuple):\nhint = QtCore.QSize(*hint)\nsuper().setSizeHint(hint)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_text_alignment","title":"<code>set_text_alignment(horizontal: constants.HorizontalAlignmentStr | None = None, vertical: constants.VerticalAlignmentStr | None = None)</code>","text":"<p>Set text alignment of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>constants.HorizontalAlignmentStr | None</code> <p>horizontal text alignment to use</p> <code>None</code> <code>vertical</code> <code>constants.VerticalAlignmentStr | None</code> <p>vertical text alignment to use</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid text alignment</p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n    Args:\n        horizontal: horizontal text alignment to use\n        vertical: vertical text alignment to use\n    Raises:\n        InvalidParamError: invalid text alignment\n    \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MainWindow","title":"<code>MainWindow</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QMainWindow</code></p> <p>Class for our mainWindow.</p> <p>Includes all docks, a centralwidget and a toolbar</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>class MainWindow(widgets.WidgetMixin, QtWidgets.QMainWindow):\n\"\"\"Class for our mainWindow.\n    Includes all docks, a centralwidget and a toolbar\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setMenuBar(widgets.MenuBar())\nself.setDockOptions(\nself.DockOption.AllowTabbedDocks  # type: ignore\n| self.DockOption.AllowNestedDocks\n| self.DockOption.GroupedDragging\n| self.DockOption.AnimatedDocks\n)\ndef __getitem__(self, index: str) -&gt; QtWidgets.QWidget:\nresult = self.find_child(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\ndef set_widget(self, widget: QtWidgets.QWidget | None):\nif widget is None:\nself.takeCentralWidget()\nelse:\nself.setCentralWidget(widget)\ndef createPopupMenu(self) -&gt; widgets.Menu:\n# qactions = self.createPopupMenu()\nmenu = widgets.Menu(parent=self)\nfor i, item in enumerate(self.get_docks()):\naction = gui.Action(text=item.windowTitle(), parent=self)\naction.set_checkable(True)\naction.set_checked(item.isVisible())\naction.set_shortcut(f\"Ctrl+Shift+{i}\")\naction.set_shortcut_context(\"application\")\naction.toggled.connect(item.setVisible)\nmenu.add(action)\nmenu.add_separator()\nfor tb in self.get_toolbars():\naction = gui.Action(text=tb.windowTitle(), parent=self)\naction.set_checkable(True)\naction.toggled.connect(tb.setVisible)\naction.set_checked(tb.isVisible())\nmenu.add(action)\nreturn menu\ndef add_toolbar(\nself, toolbar: QtWidgets.QToolBar, position: constants.ToolbarAreaStr = \"top\"\n):\n\"\"\"Adds a toolbar to the mainmenu at specified area.\n        Args:\n            toolbar: toolbar to use\n            position: position of the toolbar\n        Raises:\n            InvalidParamError: position does not exist\n        \"\"\"\nif position not in constants.TOOLBAR_AREA:\nraise InvalidParamError(position, constants.TOOLBAR_AREA)\nself.addToolBar(constants.TOOLBAR_AREA[position], toolbar)\ndef add_toolbar_break(self, position: constants.ToolbarAreaStr = \"top\"):\n\"\"\"Adds a toolbar break to the given area behind the last item.\n        Args:\n            position: position of the toolbar\n        Raises:\n            InvalidParamError: position does not exist\n        \"\"\"\nif position not in constants.TOOLBAR_AREA:\nraise InvalidParamError(position, constants.TOOLBAR_AREA)\nself.addToolBarBreak(constants.TOOLBAR_AREA[position])\ndef load_window_state(self, recursive: bool = False) -&gt; bool:\nsettings = core.Settings()\nname = self.get_id()\ngeom = settings.get(f\"{name}.geometry\")\nstate = settings.get(f\"{name}.state\")\nrestored = False\nif geom is not None and state is not None:\ntry:\nlogger.debug(f\"Loading window state for {self.windowTitle()!r}...\")\nself.restoreGeometry(geom)\nif isinstance(state, str):\nstate = state.encode()\nself.restoreState(state)\nrestored = True\nexcept TypeError:\nlogger.error(\"Wrong type for window state. Probably Qt binding switch?\")\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.get_id():\nwindow.load_window_state()\nreturn restored\ndef save_window_state(self, recursive: bool = False):\n\"\"\"Save current window state as QSetting.\n        Args:\n            recursive (bool, optional): Description\n        \"\"\"\nsettings = core.Settings()\nname = self.get_id()\nlogger.debug(f\"Saving window state for {self.windowTitle()!r}...\")\nsettings[f\"{name}.geometry\"] = self.saveGeometry()\nsettings[f\"{name}.state\"] = self.saveState()\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.get_id():\nwindow.save_window_state()\ndef add_widget_as_dock(\nself,\nname: str,\ntitle: str,\nvertical: bool = True,\nposition: constants.DockPositionStr = \"left\",\n) -&gt; widgets.DockWidget:\ndock_widget = widgets.DockWidget(self, name=name, title=title)\nwidget = widgets.Widget()\nwidget.set_id(f\"{name}.widget\")\nlayout = widgets.VBoxLayout(widget) if vertical else widgets.HBoxLayout(widget)\nlayout.set_margin(0)\ndock_widget.setWidget(widget)\nself.add_dockwidget(dock_widget, position)\ndock_widget.box = layout\nreturn dock_widget\ndef add_dockwidget(\nself,\ndockwidget: QtWidgets.QDockWidget,\nposition: constants.DockPositionStr = \"left\",\n):\nself.addDockWidget(constants.DOCK_POSITION[position], dockwidget)\ndef remove_dockwidgets(self, dockwidgets: Sequence[QtWidgets.QDockWidget]):\nfor i in dockwidgets:\nself.removeDockWidget(i)\ndef show_blocking(self):\nself.set_modality(\"application\")\nself.show()\ndef get_docks(self) -&gt; list[QtWidgets.QDockWidget]:\nreturn self.find_children(QtWidgets.QDockWidget, recursive=False)\ndef get_toolbars(self) -&gt; list[QtWidgets.QToolBar]:\nreturn self.find_children(QtWidgets.QToolBar, recursive=False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.__getitem__","title":"<code>__getitem__(index: str) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def __getitem__(self, index: str) -&gt; QtWidgets.QWidget:\nresult = self.find_child(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setMenuBar(widgets.MenuBar())\nself.setDockOptions(\nself.DockOption.AllowTabbedDocks  # type: ignore\n| self.DockOption.AllowNestedDocks\n| self.DockOption.GroupedDragging\n| self.DockOption.AnimatedDocks\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.add_dockwidget","title":"<code>add_dockwidget(dockwidget: QtWidgets.QDockWidget, position: constants.DockPositionStr = 'left')</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_dockwidget(\nself,\ndockwidget: QtWidgets.QDockWidget,\nposition: constants.DockPositionStr = \"left\",\n):\nself.addDockWidget(constants.DOCK_POSITION[position], dockwidget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.add_toolbar","title":"<code>add_toolbar(toolbar: QtWidgets.QToolBar, position: constants.ToolbarAreaStr = 'top')</code>","text":"<p>Adds a toolbar to the mainmenu at specified area.</p> <p>Parameters:</p> Name Type Description Default <code>toolbar</code> <code>QtWidgets.QToolBar</code> <p>toolbar to use</p> required <code>position</code> <code>constants.ToolbarAreaStr</code> <p>position of the toolbar</p> <code>'top'</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>position does not exist</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_toolbar(\nself, toolbar: QtWidgets.QToolBar, position: constants.ToolbarAreaStr = \"top\"\n):\n\"\"\"Adds a toolbar to the mainmenu at specified area.\n    Args:\n        toolbar: toolbar to use\n        position: position of the toolbar\n    Raises:\n        InvalidParamError: position does not exist\n    \"\"\"\nif position not in constants.TOOLBAR_AREA:\nraise InvalidParamError(position, constants.TOOLBAR_AREA)\nself.addToolBar(constants.TOOLBAR_AREA[position], toolbar)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.add_toolbar_break","title":"<code>add_toolbar_break(position: constants.ToolbarAreaStr = 'top')</code>","text":"<p>Adds a toolbar break to the given area behind the last item.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>constants.ToolbarAreaStr</code> <p>position of the toolbar</p> <code>'top'</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>position does not exist</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_toolbar_break(self, position: constants.ToolbarAreaStr = \"top\"):\n\"\"\"Adds a toolbar break to the given area behind the last item.\n    Args:\n        position: position of the toolbar\n    Raises:\n        InvalidParamError: position does not exist\n    \"\"\"\nif position not in constants.TOOLBAR_AREA:\nraise InvalidParamError(position, constants.TOOLBAR_AREA)\nself.addToolBarBreak(constants.TOOLBAR_AREA[position])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.add_widget_as_dock","title":"<code>add_widget_as_dock(name: str, title: str, vertical: bool = True, position: constants.DockPositionStr = 'left') -&gt; widgets.DockWidget</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_widget_as_dock(\nself,\nname: str,\ntitle: str,\nvertical: bool = True,\nposition: constants.DockPositionStr = \"left\",\n) -&gt; widgets.DockWidget:\ndock_widget = widgets.DockWidget(self, name=name, title=title)\nwidget = widgets.Widget()\nwidget.set_id(f\"{name}.widget\")\nlayout = widgets.VBoxLayout(widget) if vertical else widgets.HBoxLayout(widget)\nlayout.set_margin(0)\ndock_widget.setWidget(widget)\nself.add_dockwidget(dock_widget, position)\ndock_widget.box = layout\nreturn dock_widget\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.createPopupMenu","title":"<code>createPopupMenu() -&gt; widgets.Menu</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def createPopupMenu(self) -&gt; widgets.Menu:\n# qactions = self.createPopupMenu()\nmenu = widgets.Menu(parent=self)\nfor i, item in enumerate(self.get_docks()):\naction = gui.Action(text=item.windowTitle(), parent=self)\naction.set_checkable(True)\naction.set_checked(item.isVisible())\naction.set_shortcut(f\"Ctrl+Shift+{i}\")\naction.set_shortcut_context(\"application\")\naction.toggled.connect(item.setVisible)\nmenu.add(action)\nmenu.add_separator()\nfor tb in self.get_toolbars():\naction = gui.Action(text=tb.windowTitle(), parent=self)\naction.set_checkable(True)\naction.toggled.connect(tb.setVisible)\naction.set_checked(tb.isVisible())\nmenu.add(action)\nreturn menu\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.get_docks","title":"<code>get_docks() -&gt; list[QtWidgets.QDockWidget]</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def get_docks(self) -&gt; list[QtWidgets.QDockWidget]:\nreturn self.find_children(QtWidgets.QDockWidget, recursive=False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.get_toolbars","title":"<code>get_toolbars() -&gt; list[QtWidgets.QToolBar]</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def get_toolbars(self) -&gt; list[QtWidgets.QToolBar]:\nreturn self.find_children(QtWidgets.QToolBar, recursive=False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.load_window_state","title":"<code>load_window_state(recursive: bool = False) -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def load_window_state(self, recursive: bool = False) -&gt; bool:\nsettings = core.Settings()\nname = self.get_id()\ngeom = settings.get(f\"{name}.geometry\")\nstate = settings.get(f\"{name}.state\")\nrestored = False\nif geom is not None and state is not None:\ntry:\nlogger.debug(f\"Loading window state for {self.windowTitle()!r}...\")\nself.restoreGeometry(geom)\nif isinstance(state, str):\nstate = state.encode()\nself.restoreState(state)\nrestored = True\nexcept TypeError:\nlogger.error(\"Wrong type for window state. Probably Qt binding switch?\")\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.get_id():\nwindow.load_window_state()\nreturn restored\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.remove_dockwidgets","title":"<code>remove_dockwidgets(dockwidgets: Sequence[QtWidgets.QDockWidget])</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def remove_dockwidgets(self, dockwidgets: Sequence[QtWidgets.QDockWidget]):\nfor i in dockwidgets:\nself.removeDockWidget(i)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.save_window_state","title":"<code>save_window_state(recursive: bool = False)</code>","text":"<p>Save current window state as QSetting.</p> <p>Parameters:</p> Name Type Description Default <code>recursive</code> <code>bool</code> <p>Description</p> <code>False</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def save_window_state(self, recursive: bool = False):\n\"\"\"Save current window state as QSetting.\n    Args:\n        recursive (bool, optional): Description\n    \"\"\"\nsettings = core.Settings()\nname = self.get_id()\nlogger.debug(f\"Saving window state for {self.windowTitle()!r}...\")\nsettings[f\"{name}.geometry\"] = self.saveGeometry()\nsettings[f\"{name}.state\"] = self.saveState()\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.get_id():\nwindow.save_window_state()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.set_widget","title":"<code>set_widget(widget: QtWidgets.QWidget | None)</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def set_widget(self, widget: QtWidgets.QWidget | None):\nif widget is None:\nself.takeCentralWidget()\nelse:\nself.setCentralWidget(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mainwindow.MainWindow.show_blocking","title":"<code>show_blocking()</code>","text":"Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def show_blocking(self):\nself.set_modality(\"application\")\nself.show()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MdiArea","title":"<code>MdiArea</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>QtWidgets.QMdiArea</code></p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>class MdiArea(widgets.AbstractScrollAreaMixin, QtWidgets.QMdiArea):\ndef __add__(self, other: QtWidgets.QWidget):\nself.add(other)\nreturn self\ndef set_view_mode(self, mode: ViewModeStr):\n\"\"\"Set view mode for the MDI area.\n        Args:\n            mode: view mode to use\n        Raises:\n            InvalidParamError: view mode does not exist\n        \"\"\"\nif mode not in VIEW_MODE:\nraise InvalidParamError(mode, VIEW_MODE)\nself.setViewMode(VIEW_MODE[mode])\ndef get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return current view mode.\n        Returns:\n            view mode\n        \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_window_order(self, mode: WindowOrderStr):\n\"\"\"Set the window order behaviour for the MDI area.\n        Args:\n            mode: window order behaviour to use\n        Raises:\n            InvalidParamError: window order mode not existing.\n        \"\"\"\nif mode not in WINDOW_ORDER:\nraise InvalidParamError(mode, WINDOW_ORDER)\nself.setActivationOrder(WINDOW_ORDER[mode])\ndef get_window_order(self) -&gt; WindowOrderStr:\n\"\"\"Return current window order.\n        Returns:\n            view mode\n        \"\"\"\nreturn WINDOW_ORDER.inverse[self.activationOrder()]\ndef set_tab_position(self, position: TabPositionStr):\n\"\"\"Set tab position for the MDI area.\n        Args:\n            position: tabs position to use\n        Raises:\n            InvalidParamError: tab position does not exist\n        \"\"\"\nif position not in TAB_POSITION:\nraise InvalidParamError(position, TAB_POSITION)\nself.setTabPosition(TAB_POSITION[position])\ndef get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return current tab position.\n        Returns:\n            tab position\n        \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\ndef set_background(\nself,\nbrush_or_color: datatypes.ColorAndBrushType,\npattern: constants.BrushStyleStr = \"solid\",\n):\nif isinstance(brush_or_color, QtGui.QBrush):\nbrush = brush_or_color\nelse:\ncolor = colors.get_color(brush_or_color)\nbrush = gui.Brush(color, constants.BRUSH_STYLE[pattern])\nself.setBackground(brush)\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef add(self, *item: QtWidgets.QWidget):\nfor i in item:\nif not isinstance(i, QtWidgets.QMdiSubWindow):\nwidget = widgets.MdiSubWindow()\nwidget.setWidget(i)\nself.addSubWindow(widget)\nelse:\nself.addSubWindow(i)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.__add__","title":"<code>__add__(other: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def __add__(self, other: QtWidgets.QWidget):\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.add","title":"<code>add(*item: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def add(self, *item: QtWidgets.QWidget):\nfor i in item:\nif not isinstance(i, QtWidgets.QMdiSubWindow):\nwidget = widgets.MdiSubWindow()\nwidget.setWidget(i)\nself.addSubWindow(widget)\nelse:\nself.addSubWindow(i)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_background","title":"<code>get_background() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_tab_position","title":"<code>get_tab_position() -&gt; TabPositionStr</code>","text":"<p>Return current tab position.</p> <p>Returns:</p> Type Description <code>TabPositionStr</code> <p>tab position</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return current tab position.\n    Returns:\n        tab position\n    \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return current view mode.</p> <p>Returns:</p> Type Description <code>ViewModeStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return current view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.get_window_order","title":"<code>get_window_order() -&gt; WindowOrderStr</code>","text":"<p>Return current window order.</p> <p>Returns:</p> Type Description <code>WindowOrderStr</code> <p>view mode</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_window_order(self) -&gt; WindowOrderStr:\n\"\"\"Return current window order.\n    Returns:\n        view mode\n    \"\"\"\nreturn WINDOW_ORDER.inverse[self.activationOrder()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_background","title":"<code>set_background(brush_or_color: datatypes.ColorAndBrushType, pattern: constants.BrushStyleStr = 'solid')</code>","text":"Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_background(\nself,\nbrush_or_color: datatypes.ColorAndBrushType,\npattern: constants.BrushStyleStr = \"solid\",\n):\nif isinstance(brush_or_color, QtGui.QBrush):\nbrush = brush_or_color\nelse:\ncolor = colors.get_color(brush_or_color)\nbrush = gui.Brush(color, constants.BRUSH_STYLE[pattern])\nself.setBackground(brush)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_tab_position","title":"<code>set_tab_position(position: TabPositionStr)</code>","text":"<p>Set tab position for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TabPositionStr</code> <p>tabs position to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>tab position does not exist</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_tab_position(self, position: TabPositionStr):\n\"\"\"Set tab position for the MDI area.\n    Args:\n        position: tabs position to use\n    Raises:\n        InvalidParamError: tab position does not exist\n    \"\"\"\nif position not in TAB_POSITION:\nraise InvalidParamError(position, TAB_POSITION)\nself.setTabPosition(TAB_POSITION[position])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr)</code>","text":"<p>Set view mode for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr</code> <p>view mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>view mode does not exist</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr):\n\"\"\"Set view mode for the MDI area.\n    Args:\n        mode: view mode to use\n    Raises:\n        InvalidParamError: view mode does not exist\n    \"\"\"\nif mode not in VIEW_MODE:\nraise InvalidParamError(mode, VIEW_MODE)\nself.setViewMode(VIEW_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdiarea.MdiArea.set_window_order","title":"<code>set_window_order(mode: WindowOrderStr)</code>","text":"<p>Set the window order behaviour for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>WindowOrderStr</code> <p>window order behaviour to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>window order mode not existing.</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_window_order(self, mode: WindowOrderStr):\n\"\"\"Set the window order behaviour for the MDI area.\n    Args:\n        mode: window order behaviour to use\n    Raises:\n        InvalidParamError: window order mode not existing.\n    \"\"\"\nif mode not in WINDOW_ORDER:\nraise InvalidParamError(mode, WINDOW_ORDER)\nself.setActivationOrder(WINDOW_ORDER[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MdiSubWindow","title":"<code>MdiSubWindow</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QMdiSubWindow</code></p> Source code in <code>prettyqt\\widgets\\mdisubwindow.py</code> <pre><code>class MdiSubWindow(widgets.WidgetMixin, QtWidgets.QMdiSubWindow):\ndef serialize_fields(self):\nreturn dict(\nkeyboard_single_step=self.keyboardSingleStep(),\nkeyboard_page_step=self.keyboardPageStep(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.mdisubwindow.MdiSubWindow.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\mdisubwindow.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nkeyboard_single_step=self.keyboardSingleStep(),\nkeyboard_page_step=self.keyboardPageStep(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Menu","title":"<code>Menu</code>","text":"<p>         Bases: <code>MenuMixin</code>, <code>QtWidgets.QMenu</code></p> Source code in <code>prettyqt\\widgets\\menu.py</code> <pre><code>class Menu(MenuMixin, QtWidgets.QMenu):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MenuBar","title":"<code>MenuBar</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QMenuBar</code></p> Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>class MenuBar(widgets.WidgetMixin, QtWidgets.QMenuBar):\ndef __add__(self, other: QtGui.QAction | QtWidgets.QMenu):\nself.add(other)\nreturn self\ndef serialize_fields(self):\nreturn dict(\ndefault_up=self.isDefaultUp(),\nnative_menu_bar=self.isNativeMenuBar(),\n)\n@overload\ndef add_menu(self, menu_or_str: str) -&gt; widgets.Menu:\n...\n@overload\ndef add_menu(self, menu_or_str: QtWidgets.QMenu) -&gt; gui.Action:\n...\n@functools.singledispatchmethod\ndef add_menu(self, title: str) -&gt; widgets.Menu:\naction = gui.Action(self)\nmenu = widgets.Menu(title=title, parent=self)\naction.set_text(title)\naction.set_menu(menu)\nself.addAction(action)\nreturn menu\n@add_menu.register\ndef _(self, menu: QtWidgets.QMenu) -&gt; gui.Action:\naction = gui.Action(self)\naction.set_menu(menu)\naction.set_text(menu.title())\nself.addAction(action)\nreturn action\ndef add_separator(self):\nself.addSeparator()\ndef add(self, *items: QtWidgets.QMenu | QtGui.QAction):\nfor i in items:\nif isinstance(i, QtWidgets.QMenu):\naction = gui.Action(self)\naction.set_text(i.title())\naction.set_menu(i)\nself.addAction(action)\nelse:\nself.addAction(i)\ndef set_corner_widget(\nself,\nwidget: QtWidgets.QWidget,\ncorner: Literal[\"top_right\", \"top_left\"] = \"top_right\",\n):\nmatch corner:\ncase \"top_left\":\nself.setCornerWidget(widget, QtCore.Qt.Corner.TopLeftCorner)\ncase \"top_right\":\nself.setCornerWidget(widget, QtCore.Qt.Corner.TopRightCorner)\ncase _:\nraise ValueError(corner)\ndef get_corner_widget(\nself,\ncorner: Literal[\"top_right\", \"top_left\"] = \"top_right\",\n) -&gt; QtWidgets.QWidget:\nmatch corner:\ncase \"top_left\":\nreturn self.cornerWidget(QtCore.Qt.Corner.TopLeftCorner)\ncase \"top_right\":\nreturn self.cornerWidget(QtCore.Qt.Corner.TopRightCorner)\ncase _:\nraise ValueError(corner)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar._","title":"<code>_(menu: QtWidgets.QMenu) -&gt; gui.Action</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>@add_menu.register\ndef _(self, menu: QtWidgets.QMenu) -&gt; gui.Action:\naction = gui.Action(self)\naction.set_menu(menu)\naction.set_text(menu.title())\nself.addAction(action)\nreturn action\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.__add__","title":"<code>__add__(other: QtGui.QAction | QtWidgets.QMenu)</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>def __add__(self, other: QtGui.QAction | QtWidgets.QMenu):\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.add","title":"<code>add(*items: QtWidgets.QMenu | QtGui.QAction)</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>def add(self, *items: QtWidgets.QMenu | QtGui.QAction):\nfor i in items:\nif isinstance(i, QtWidgets.QMenu):\naction = gui.Action(self)\naction.set_text(i.title())\naction.set_menu(i)\nself.addAction(action)\nelse:\nself.addAction(i)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.add_menu","title":"<code>add_menu(title: str) -&gt; widgets.Menu</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>@functools.singledispatchmethod\ndef add_menu(self, title: str) -&gt; widgets.Menu:\naction = gui.Action(self)\nmenu = widgets.Menu(title=title, parent=self)\naction.set_text(title)\naction.set_menu(menu)\nself.addAction(action)\nreturn menu\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.add_separator","title":"<code>add_separator()</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>def add_separator(self):\nself.addSeparator()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.get_corner_widget","title":"<code>get_corner_widget(corner: Literal['top_right', 'top_left'] = 'top_right') -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>def get_corner_widget(\nself,\ncorner: Literal[\"top_right\", \"top_left\"] = \"top_right\",\n) -&gt; QtWidgets.QWidget:\nmatch corner:\ncase \"top_left\":\nreturn self.cornerWidget(QtCore.Qt.Corner.TopLeftCorner)\ncase \"top_right\":\nreturn self.cornerWidget(QtCore.Qt.Corner.TopRightCorner)\ncase _:\nraise ValueError(corner)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\ndefault_up=self.isDefaultUp(),\nnative_menu_bar=self.isNativeMenuBar(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.menubar.MenuBar.set_corner_widget","title":"<code>set_corner_widget(widget: QtWidgets.QWidget, corner: Literal['top_right', 'top_left'] = 'top_right')</code>","text":"Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>def set_corner_widget(\nself,\nwidget: QtWidgets.QWidget,\ncorner: Literal[\"top_right\", \"top_left\"] = \"top_right\",\n):\nmatch corner:\ncase \"top_left\":\nself.setCornerWidget(widget, QtCore.Qt.Corner.TopLeftCorner)\ncase \"top_right\":\nself.setCornerWidget(widget, QtCore.Qt.Corner.TopRightCorner)\ncase _:\nraise ValueError(corner)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.MessageBox","title":"<code>MessageBox</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QMessageBox</code></p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>class MessageBox(widgets.DialogMixin, QtWidgets.QMessageBox):\ndef __init__(\nself,\nicon: datatypes.IconType | IconStr = None,\ntitle: str = \"\",\ntext: str = \"\",\ninformative_text: str = \"\",\ndetails: str = \"\",\nbuttons: list[StandardButtonStr] | None = None,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent)\nself.set_icon(icon)\nself.setText(text)\nself.setInformativeText(informative_text)\nself.setWindowTitle(title)\nself.setWindowFlags(\nQtCore.Qt.WindowType.Dialog  # type: ignore\n| QtCore.Qt.WindowType.WindowTitleHint\n| QtCore.Qt.WindowType.CustomizeWindowHint\n)\nself.setDetailedText(details)\nif isinstance(buttons, list):\nfor b in buttons:\nself.add_button(b)\ndef serialize_fields(self):\nreturn dict(\nicon=self.get_icon(),\ndetailed_text=self.detailedText(),\nicon_pixmap=self.get_icon_pixmap(),\ninformative_text=self.informativeText(),\ntext=self.text(),\ntext_format=self.get_text_format(),\n)\n@classmethod\ndef message(\ncls,\ntext: str,\ntitle: str = \"\",\nicon: datatypes.IconType = None,\ndetail_text: str | None = None,\n) -&gt; str:\nm = cls(\"none\", title, text)\nm.set_icon(icon)\nif detail_text is not None:\nm.setDetailedText(detail_text)\nreturn m.show_blocking()\n@classmethod\ndef show_exception(cls, exception: Exception):\nexctype, value = sys.exc_info()[:2]\ntb = traceback.format_exc()\ndlg = cls(text=str(value), title=str(exctype), icon=\"critical\", details=tb)\ndlg.show_blocking()\ndef set_icon(self, icon: datatypes.IconType | IconStr):\nif icon in ICONS:\nself.setIcon(ICONS[icon])\nelse:\nico = iconprovider.get_icon(icon)\nself.setIconPixmap(ico.get_pixmap(size=64))\ndef show_blocking(self) -&gt; StandardButtonStr:\nreturn STANDARD_BUTTON.inverse[self.main_loop()]\ndef get_icon_pixmap(self) -&gt; gui.Pixmap | None:\npix = self.iconPixmap()\nreturn None if pix.isNull() else gui.Pixmap(pix)\ndef set_standard_buttons(self, buttons: list[StandardButtonStr]):\nflag = self.StandardButton.NoButton\nfor val in buttons:\nflag |= STANDARD_BUTTON[val]\nself.setStandardButtons(flag)\ndef get_standard_buttons(self) -&gt; list[StandardButtonStr]:\nreturn STANDARD_BUTTON.get_list(self.standardButtons())\ndef add_button(self, button: StandardButtonStr) -&gt; QtWidgets.QPushButton:\n\"\"\"Add a default button.\n        Args:\n            button: button to add\n        Returns:\n            created button\n        Raises:\n            InvalidParamError: Button type not available\n        \"\"\"\nif button not in STANDARD_BUTTON:\nraise InvalidParamError(button, STANDARD_BUTTON)\nreturn self.addButton(STANDARD_BUTTON[button])\ndef add_custom_button(\nself, button: str, role: ButtonRoleStr, callback: Callable | None = None\n) -&gt; QtWidgets.QPushButton:\nbtn = self.addButton(button, BUTTON_ROLE[role])\nif callback:\nbtn.clicked.connect(callback)\n# @classmethod\n# def show_exception(cls, exception):\n#     header = str(exception[0])\n#     error_text = str(exception[1])\n#     widgets.MessageBox.message(error_text, header, \"mdi.exclamation\")\ndef set_text_format(self, text_format: TextFormatStr):\n\"\"\"Set the text format.\n        Args:\n            text_format: text format to use\n        Raises:\n            InvalidParamError: text format does not exist\n        \"\"\"\nif text_format not in TEXT_FORMAT:\nraise InvalidParamError(text_format, TEXT_FORMAT)\nself.setTextFormat(TEXT_FORMAT[text_format])\ndef get_text_format(self) -&gt; TextFormatStr:\n\"\"\"Return current text format.\n        Returns:\n            text format\n        \"\"\"\nreturn TEXT_FORMAT.inverse[self.textFormat()]\ndef set_escape_button(self, button: StandardButtonStr | QtWidgets.QAbstractButton):\nif isinstance(button, QtWidgets.QAbstractButton):\nself.setEscapeButton(button)\nelse:\nself.setEscapeButton(STANDARD_BUTTON[button])\ndef set_default_button(self, button: StandardButtonStr | QtWidgets.QPushButton):\nif isinstance(button, QtWidgets.QPushButton):\nself.setDefaultButton(button)\nelse:\nself.setDefaultButton(STANDARD_BUTTON[button])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.__init__","title":"<code>__init__(icon: datatypes.IconType | IconStr = None, title: str = '', text: str = '', informative_text: str = '', details: str = '', buttons: list[StandardButtonStr] | None = None, parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def __init__(\nself,\nicon: datatypes.IconType | IconStr = None,\ntitle: str = \"\",\ntext: str = \"\",\ninformative_text: str = \"\",\ndetails: str = \"\",\nbuttons: list[StandardButtonStr] | None = None,\nparent: QtWidgets.QWidget | None = None,\n):\nsuper().__init__(parent)\nself.set_icon(icon)\nself.setText(text)\nself.setInformativeText(informative_text)\nself.setWindowTitle(title)\nself.setWindowFlags(\nQtCore.Qt.WindowType.Dialog  # type: ignore\n| QtCore.Qt.WindowType.WindowTitleHint\n| QtCore.Qt.WindowType.CustomizeWindowHint\n)\nself.setDetailedText(details)\nif isinstance(buttons, list):\nfor b in buttons:\nself.add_button(b)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.add_button","title":"<code>add_button(button: StandardButtonStr) -&gt; QtWidgets.QPushButton</code>","text":"<p>Add a default button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>StandardButtonStr</code> <p>button to add</p> required <p>Returns:</p> Type Description <code>QtWidgets.QPushButton</code> <p>created button</p> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Button type not available</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def add_button(self, button: StandardButtonStr) -&gt; QtWidgets.QPushButton:\n\"\"\"Add a default button.\n    Args:\n        button: button to add\n    Returns:\n        created button\n    Raises:\n        InvalidParamError: Button type not available\n    \"\"\"\nif button not in STANDARD_BUTTON:\nraise InvalidParamError(button, STANDARD_BUTTON)\nreturn self.addButton(STANDARD_BUTTON[button])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.add_custom_button","title":"<code>add_custom_button(button: str, role: ButtonRoleStr, callback: Callable | None = None) -&gt; QtWidgets.QPushButton</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def add_custom_button(\nself, button: str, role: ButtonRoleStr, callback: Callable | None = None\n) -&gt; QtWidgets.QPushButton:\nbtn = self.addButton(button, BUTTON_ROLE[role])\nif callback:\nbtn.clicked.connect(callback)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.get_icon_pixmap","title":"<code>get_icon_pixmap() -&gt; gui.Pixmap | None</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def get_icon_pixmap(self) -&gt; gui.Pixmap | None:\npix = self.iconPixmap()\nreturn None if pix.isNull() else gui.Pixmap(pix)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.get_standard_buttons","title":"<code>get_standard_buttons() -&gt; list[StandardButtonStr]</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def get_standard_buttons(self) -&gt; list[StandardButtonStr]:\nreturn STANDARD_BUTTON.get_list(self.standardButtons())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.get_text_format","title":"<code>get_text_format() -&gt; TextFormatStr</code>","text":"<p>Return current text format.</p> <p>Returns:</p> Type Description <code>TextFormatStr</code> <p>text format</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def get_text_format(self) -&gt; TextFormatStr:\n\"\"\"Return current text format.\n    Returns:\n        text format\n    \"\"\"\nreturn TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.message","title":"<code>message(text: str, title: str = '', icon: datatypes.IconType = None, detail_text: str | None = None) -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>@classmethod\ndef message(\ncls,\ntext: str,\ntitle: str = \"\",\nicon: datatypes.IconType = None,\ndetail_text: str | None = None,\n) -&gt; str:\nm = cls(\"none\", title, text)\nm.set_icon(icon)\nif detail_text is not None:\nm.setDetailedText(detail_text)\nreturn m.show_blocking()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nicon=self.get_icon(),\ndetailed_text=self.detailedText(),\nicon_pixmap=self.get_icon_pixmap(),\ninformative_text=self.informativeText(),\ntext=self.text(),\ntext_format=self.get_text_format(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.set_default_button","title":"<code>set_default_button(button: StandardButtonStr | QtWidgets.QPushButton)</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_default_button(self, button: StandardButtonStr | QtWidgets.QPushButton):\nif isinstance(button, QtWidgets.QPushButton):\nself.setDefaultButton(button)\nelse:\nself.setDefaultButton(STANDARD_BUTTON[button])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.set_escape_button","title":"<code>set_escape_button(button: StandardButtonStr | QtWidgets.QAbstractButton)</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_escape_button(self, button: StandardButtonStr | QtWidgets.QAbstractButton):\nif isinstance(button, QtWidgets.QAbstractButton):\nself.setEscapeButton(button)\nelse:\nself.setEscapeButton(STANDARD_BUTTON[button])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.set_icon","title":"<code>set_icon(icon: datatypes.IconType | IconStr)</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType | IconStr):\nif icon in ICONS:\nself.setIcon(ICONS[icon])\nelse:\nico = iconprovider.get_icon(icon)\nself.setIconPixmap(ico.get_pixmap(size=64))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.set_standard_buttons","title":"<code>set_standard_buttons(buttons: list[StandardButtonStr])</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_standard_buttons(self, buttons: list[StandardButtonStr]):\nflag = self.StandardButton.NoButton\nfor val in buttons:\nflag |= STANDARD_BUTTON[val]\nself.setStandardButtons(flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.set_text_format","title":"<code>set_text_format(text_format: TextFormatStr)</code>","text":"<p>Set the text format.</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>TextFormatStr</code> <p>text format to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>text format does not exist</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_text_format(self, text_format: TextFormatStr):\n\"\"\"Set the text format.\n    Args:\n        text_format: text format to use\n    Raises:\n        InvalidParamError: text format does not exist\n    \"\"\"\nif text_format not in TEXT_FORMAT:\nraise InvalidParamError(text_format, TEXT_FORMAT)\nself.setTextFormat(TEXT_FORMAT[text_format])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.show_blocking","title":"<code>show_blocking() -&gt; StandardButtonStr</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def show_blocking(self) -&gt; StandardButtonStr:\nreturn STANDARD_BUTTON.inverse[self.main_loop()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.messagebox.MessageBox.show_exception","title":"<code>show_exception(exception: Exception)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>@classmethod\ndef show_exception(cls, exception: Exception):\nexctype, value = sys.exc_info()[:2]\ntb = traceback.format_exc()\ndlg = cls(text=str(value), title=str(exctype), icon=\"critical\", details=tb)\ndlg.show_blocking()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PanGesture","title":"<code>PanGesture</code>","text":"<p>         Bases: <code>widgets.GestureMixin</code>, <code>QtWidgets.QPanGesture</code></p> Source code in <code>prettyqt\\widgets\\pangesture.py</code> <pre><code>class PanGesture(widgets.GestureMixin, QtWidgets.QPanGesture):\ndef get_delta(self) -&gt; core.PointF:\nreturn core.PointF(self.delta())\ndef get_last_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.lastOffset())\ndef get_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.offset())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pangesture.PanGesture.get_delta","title":"<code>get_delta() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\pangesture.py</code> <pre><code>def get_delta(self) -&gt; core.PointF:\nreturn core.PointF(self.delta())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pangesture.PanGesture.get_last_offset","title":"<code>get_last_offset() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\pangesture.py</code> <pre><code>def get_last_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.lastOffset())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pangesture.PanGesture.get_offset","title":"<code>get_offset() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\pangesture.py</code> <pre><code>def get_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.offset())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PinchGesture","title":"<code>PinchGesture</code>","text":"<p>         Bases: <code>widgets.GestureMixin</code>, <code>QtWidgets.QPinchGesture</code></p> Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>class PinchGesture(widgets.GestureMixin, QtWidgets.QPinchGesture):\ndef get_start_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.startCenterPoint())\ndef get_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.centerPoint())\ndef get_last_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.lastCenterPoint())\ndef get_change_flags(self) -&gt; list[ChangeFlagStr]:\nreturn CHANGE_FLAGS.get_list(self.changeFlags())\ndef set_change_flags(self, **kwargs):\nval = QtWidgets.QPinchGesture.ChangeFlag(0)\nfor k, v in kwargs.items():\nif v is True:\nval |= CHANGE_FLAGS[k]\nflag = QtWidgets.QPinchGesture.ChangeFlag(val)  # type: ignore\nself.setChangeFlags(flag)  # type: ignore\ndef get_total_change_flags(self) -&gt; list[ChangeFlagStr]:\nreturn CHANGE_FLAGS.get_list(self.totalChangeFlags())\ndef set_total_change_flags(self, **kwargs):\nval = QtWidgets.QPinchGesture.ChangeFlag(0)\nfor k, v in kwargs.items():\nif v is True:\nval |= CHANGE_FLAGS[k]\nflag = QtWidgets.QPinchGesture.ChangeFlag(val)  # type: ignore\nself.setTotalChangeFlags(flag)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.get_center_point","title":"<code>get_center_point() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def get_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.centerPoint())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.get_change_flags","title":"<code>get_change_flags() -&gt; list[ChangeFlagStr]</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def get_change_flags(self) -&gt; list[ChangeFlagStr]:\nreturn CHANGE_FLAGS.get_list(self.changeFlags())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.get_last_center_point","title":"<code>get_last_center_point() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def get_last_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.lastCenterPoint())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.get_start_center_point","title":"<code>get_start_center_point() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def get_start_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.startCenterPoint())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.get_total_change_flags","title":"<code>get_total_change_flags() -&gt; list[ChangeFlagStr]</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def get_total_change_flags(self) -&gt; list[ChangeFlagStr]:\nreturn CHANGE_FLAGS.get_list(self.totalChangeFlags())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.set_change_flags","title":"<code>set_change_flags(**kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def set_change_flags(self, **kwargs):\nval = QtWidgets.QPinchGesture.ChangeFlag(0)\nfor k, v in kwargs.items():\nif v is True:\nval |= CHANGE_FLAGS[k]\nflag = QtWidgets.QPinchGesture.ChangeFlag(val)  # type: ignore\nself.setChangeFlags(flag)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pinchgesture.PinchGesture.set_total_change_flags","title":"<code>set_total_change_flags(**kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>def set_total_change_flags(self, **kwargs):\nval = QtWidgets.QPinchGesture.ChangeFlag(0)\nfor k, v in kwargs.items():\nif v is True:\nval |= CHANGE_FLAGS[k]\nflag = QtWidgets.QPinchGesture.ChangeFlag(val)  # type: ignore\nself.setTotalChangeFlags(flag)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PlainTextDocumentLayout","title":"<code>PlainTextDocumentLayout</code>","text":"<p>         Bases: <code>gui.AbstractTextDocumentLayoutMixin</code>, <code>QtWidgets.QPlainTextDocumentLayout</code></p> Source code in <code>prettyqt\\widgets\\plaintextdocumentlayout.py</code> <pre><code>class PlainTextDocumentLayout(\ngui.AbstractTextDocumentLayoutMixin, QtWidgets.QPlainTextDocumentLayout\n):\ndef serialize_fields(self):\nreturn dict(cursor_width=self.cursorWidth())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextdocumentlayout.PlainTextDocumentLayout.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextdocumentlayout.py</code> <pre><code>def serialize_fields(self):\nreturn dict(cursor_width=self.cursorWidth())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PlainTextEdit","title":"<code>PlainTextEdit</code>","text":"<p>         Bases: <code>PlainTextEditMixin</code>, <code>QtWidgets.QPlainTextEdit</code></p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>class PlainTextEdit(PlainTextEditMixin, QtWidgets.QPlainTextEdit):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PlainTextEditMixin","title":"<code>PlainTextEditMixin</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>class PlainTextEditMixin(widgets.AbstractScrollAreaMixin):\nvalue_changed = core.Signal(str)\ndef __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(**kwargs)\nself._allow_wheel_zoom = False\nself._current_block = None\nself._hl = None\nself.validator: QtGui.QValidator | None = None\nself._current_line_color = gui.Color(0, 0, 0, 0)\nself.textChanged.connect(self._on_value_change)\ndoc = gui.TextDocument(self)\nlayout = widgets.PlainTextDocumentLayout(doc)\ndoc.setDocumentLayout(layout)\nself.setDocument(doc)\nself.set_text(text)\ndef __add__(self, other: str):\nself.append_text(other)\nreturn self\ndef wheelEvent(self, event):\n\"\"\"Handle wheel event for zooming.\"\"\"\nif not self._allow_wheel_zoom:\nreturn super().wheelEvent(event)\nif event.modifiers() &amp; constants.CTRL_MOD:\nself.zoomIn() if event.angleDelta().y() &gt; 0 else self.zoomOut()\nevent.accept()\nelse:\nsuper().wheelEvent(event)\ndef set_current_line_color(self, color: datatypes.ColorType):\nif self._current_line_color is None:\nself.cursorPositionChanged.connect(self._update_on_block_change)\nif color is None:\nself.cursorPositionChanged.disconnect(self._update_on_block_change)\nself._current_line_color = colors.get_color(color) if color else None\ndef get_current_line_color(self) -&gt; gui.Color:\nreturn self._current_line_color\ndef allow_wheel_zoom(self, do_zoom: bool = True):\nself._allow_wheel_zoom = do_zoom\ndef goto_line(self, line_no: int):\ndoc = self.document()\nlines = doc.blockCount()\nassert 1 &lt;= line_no &lt;= lines\npos = doc.findBlockByLineNumber(line_no - 1).position()\nwith self.current_cursor() as text_cursor:\ntext_cursor.setPosition(pos)\ndef get_selected_text(self) -&gt; str:\nif self.textCursor().hasSelection():\nreturn self.textCursor().selectedText()\nelse:\nreturn \"\"\ndef get_current_line(self) -&gt; int:\nreturn self.textCursor().blockNumber()\ndef get_selected_block_span(self) -&gt; tuple[int, int]:\nstart = self.textCursor().selectionStart()\nend = self.textCursor().selectionEnd()\nstart_block_id = self.document().findBlock(start).blockNumber()\nend_block_id = self.document().findBlock(end).blockNumber()\nreturn (start_block_id, end_block_id)\n@contextlib.contextmanager\ndef create_cursor(self) -&gt; Iterator[gui.TextCursor]:\ncursor = gui.TextCursor(self.document())\nyield cursor\nself.setTextCursor(cursor)\n@contextlib.contextmanager\ndef current_cursor(self) -&gt; Iterator[gui.TextCursor]:\ncursor = gui.TextCursor(self.textCursor())\nyield cursor\nself.setTextCursor(cursor)\ndef get_text_cursor(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.textCursor())\ndef move_cursor(\nself,\noperation: gui.textcursor.MoveOperationStr,\nmode: gui.textcursor.MoveModeStr = \"move\",\n):\nself.moveCursor(\ngui.textcursor.MOVE_OPERATION[operation], gui.textcursor.MOVE_MODE[mode]\n)\ndef append_text(self, text: str, newline: bool = True):\nif newline:\nself.appendPlainText(text)\nelse:\nself.move_cursor(\"end\")\nself.insertPlainText(text)\nself.move_cursor(\"end\")\ndef set_text(self, text: str):\nself.setPlainText(text)\ndef set_syntaxhighlighter(\nself, syntax: str | QtGui.QSyntaxHighlighter, style: str | None = None\n):\nif isinstance(syntax, QtGui.QSyntaxHighlighter):\nself._hl = syntax\nelse:\nself._hl = syntaxhighlighters.PygmentsHighlighter(\nself.document(), syntax, style\n)\ndef text(self) -&gt; str:\nreturn self.toPlainText()\ndef select_text(self, start: int, end: int):\nwith self.create_cursor() as c:\nc.select_text(start, end)\ndef set_read_only(self, value: bool = True):\n\"\"\"Make the PlainTextEdit read-only.\n        Args:\n            value: True, for read-only, otherwise False\n        \"\"\"\nself.setReadOnly(value)\ndef show_whitespace_and_tabs(self, show: bool):\n\"\"\"Set show white spaces flag.\"\"\"\ndoc = self.document()\noptions = doc.defaultTextOption()\nflag = QtGui.QTextOption.Flag.ShowTabsAndSpaces\nif show:\noptions.setFlags(options.flags() | flag)  # type: ignore\nelse:\noptions.setFlags(options.flags() &amp; ~flag)  # type: ignore\ndoc.setDefaultTextOption(options)\ndef paintEvent(self, event: QtGui.QPaintEvent):\nif self._current_line_color:\nwith gui.Painter(self.viewport()) as painter:\ncursor_rect = self.cursorRect()\nr = QtCore.QRect(0, cursor_rect.top(), self.width(), cursor_rect.height())\npainter.set_pen(None)\npainter.setBrush(gui.Color(self._current_line_color))\npainter.drawRect(r)\nsuper().paintEvent(event)\ndef _update_on_block_change(self):\ntc = self.textCursor()\nb = tc.blockNumber()\nif b == self._current_block:\nreturn\nself._current_block = b\nself.viewport().update()\ndef highlight_current_line(self, color: datatypes.ColorType = None):\nif color is None:\ncolor = self.get_palette().get_color(\"highlight\")\nelse:\ncolor = colors.get_color(color)\nextra_selections = []\nif not self.isReadOnly():\nselection = widgets.TextEdit.ExtraSelection()\nselection.format.setBackground(color)\nprop = QtGui.QTextFormat.Property.FullWidthSelection\nselection.format.setProperty(prop, True)\nselection.cursor = self.textCursor()\nselection.cursor.clearSelection()\nextra_selections.append(selection)\nself.setExtraSelections(extra_selections)\n@deprecated(reason=\"This method is deprecated, use set_word_wrap_mode instead.\")\ndef set_wrap_mode(self, mode: gui.textoption.WordWrapModeStr):\nself.set_word_wrap_mode(mode)\ndef set_word_wrap_mode(self, mode: gui.textoption.WordWrapModeStr):\n\"\"\"Set word wrap mode.\n        Args:\n            mode: word wrap mode to use\n        Raises:\n            InvalidParamError: wrap mode does not exist\n        \"\"\"\nif mode not in gui.textoption.WORD_WRAP_MODE:\nraise InvalidParamError(mode, gui.textoption.WORD_WRAP_MODE)\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE[mode])\n@deprecated(reason=\"This method is deprecated, use get_word_wrap_mode instead.\")\ndef get_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\nreturn self.get_word_wrap_mode()\ndef get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n        Returns:\n            Word wrap mode\n        \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\ndef set_line_wrap_mode(self, mode: LineWrapModeStr):\n\"\"\"Set line wrap mode.\n        Args:\n            mode: line wrap mode to use\n        Raises:\n            InvalidParamError: line wrap mode does not exist\n        \"\"\"\nif mode not in LINE_WRAP_MODE:\nraise InvalidParamError(mode, LINE_WRAP_MODE)\nself.setLineWrapMode(LINE_WRAP_MODE[mode])\ndef get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n        Returns:\n            Wrap mode\n        \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\ndef _on_value_change(self):\nself.value_changed.emit(self.text())\nif self.validator is not None:\nself._set_validation_color()\ndef _set_validation_color(self, state: bool = True):\ncolor = None if self.is_valid() else \"orange\"\nself.set_background_color(color)\ndef set_validator(self, validator: QtGui.QValidator | None):\nself.validator = validator\nself._set_validation_color()\ndef set_regex_validator(self, regex: str, flags=0) -&gt; gui.RegularExpressionValidator:\nvalidator = gui.RegularExpressionValidator(self)\nvalidator.set_regex(regex, flags)\nself.set_validator(validator)\nreturn validator\ndef is_valid(self) -&gt; bool:\nif self.validator is None:\nreturn True\nval = self.validator.validate(self.text(), 0)\nreturn val[0] == self.validator.State.Acceptable\ndef set_value(self, value: str):\nself.setPlainText(value)\ndef get_value(self) -&gt; str:\nreturn self.text()\ncurrent_line_color = core.Property(\nQtGui.QColor, get_current_line_color, set_current_line_color\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.current_line_color","title":"<code>current_line_color = core.Property(QtGui.QColor, get_current_line_color, set_current_line_color)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.validator","title":"<code>validator: QtGui.QValidator | None = None</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.value_changed","title":"<code>value_changed = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.__add__","title":"<code>__add__(other: str)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def __add__(self, other: str):\nself.append_text(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.__init__","title":"<code>__init__(text: str = '', **kwargs: str)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(**kwargs)\nself._allow_wheel_zoom = False\nself._current_block = None\nself._hl = None\nself.validator: QtGui.QValidator | None = None\nself._current_line_color = gui.Color(0, 0, 0, 0)\nself.textChanged.connect(self._on_value_change)\ndoc = gui.TextDocument(self)\nlayout = widgets.PlainTextDocumentLayout(doc)\ndoc.setDocumentLayout(layout)\nself.setDocument(doc)\nself.set_text(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.allow_wheel_zoom","title":"<code>allow_wheel_zoom(do_zoom: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def allow_wheel_zoom(self, do_zoom: bool = True):\nself._allow_wheel_zoom = do_zoom\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.append_text","title":"<code>append_text(text: str, newline: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def append_text(self, text: str, newline: bool = True):\nif newline:\nself.appendPlainText(text)\nelse:\nself.move_cursor(\"end\")\nself.insertPlainText(text)\nself.move_cursor(\"end\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.create_cursor","title":"<code>create_cursor() -&gt; Iterator[gui.TextCursor]</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>@contextlib.contextmanager\ndef create_cursor(self) -&gt; Iterator[gui.TextCursor]:\ncursor = gui.TextCursor(self.document())\nyield cursor\nself.setTextCursor(cursor)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.current_cursor","title":"<code>current_cursor() -&gt; Iterator[gui.TextCursor]</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>@contextlib.contextmanager\ndef current_cursor(self) -&gt; Iterator[gui.TextCursor]:\ncursor = gui.TextCursor(self.textCursor())\nyield cursor\nself.setTextCursor(cursor)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_current_line","title":"<code>get_current_line() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_current_line(self) -&gt; int:\nreturn self.textCursor().blockNumber()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_current_line_color","title":"<code>get_current_line_color() -&gt; gui.Color</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_current_line_color(self) -&gt; gui.Color:\nreturn self._current_line_color\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_line_wrap_mode","title":"<code>get_line_wrap_mode() -&gt; LineWrapModeStr</code>","text":"<p>Get the current wrap mode.</p> <p>Returns:</p> Type Description <code>LineWrapModeStr</code> <p>Wrap mode</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n    Returns:\n        Wrap mode\n    \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_selected_block_span","title":"<code>get_selected_block_span() -&gt; tuple[int, int]</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_selected_block_span(self) -&gt; tuple[int, int]:\nstart = self.textCursor().selectionStart()\nend = self.textCursor().selectionEnd()\nstart_block_id = self.document().findBlock(start).blockNumber()\nend_block_id = self.document().findBlock(end).blockNumber()\nreturn (start_block_id, end_block_id)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_selected_text","title":"<code>get_selected_text() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_selected_text(self) -&gt; str:\nif self.textCursor().hasSelection():\nreturn self.textCursor().selectedText()\nelse:\nreturn \"\"\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_text_cursor","title":"<code>get_text_cursor() -&gt; gui.TextCursor</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_text_cursor(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.textCursor())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_value","title":"<code>get_value() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_value(self) -&gt; str:\nreturn self.text()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_word_wrap_mode","title":"<code>get_word_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"<p>Get the current word wrap mode.</p> <p>Returns:</p> Type Description <code>gui.textoption.WordWrapModeStr</code> <p>Word wrap mode</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n    Returns:\n        Word wrap mode\n    \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_wrap_mode","title":"<code>get_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>@deprecated(reason=\"This method is deprecated, use get_word_wrap_mode instead.\")\ndef get_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\nreturn self.get_word_wrap_mode()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.goto_line","title":"<code>goto_line(line_no: int)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def goto_line(self, line_no: int):\ndoc = self.document()\nlines = doc.blockCount()\nassert 1 &lt;= line_no &lt;= lines\npos = doc.findBlockByLineNumber(line_no - 1).position()\nwith self.current_cursor() as text_cursor:\ntext_cursor.setPosition(pos)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.highlight_current_line","title":"<code>highlight_current_line(color: datatypes.ColorType = None)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def highlight_current_line(self, color: datatypes.ColorType = None):\nif color is None:\ncolor = self.get_palette().get_color(\"highlight\")\nelse:\ncolor = colors.get_color(color)\nextra_selections = []\nif not self.isReadOnly():\nselection = widgets.TextEdit.ExtraSelection()\nselection.format.setBackground(color)\nprop = QtGui.QTextFormat.Property.FullWidthSelection\nselection.format.setProperty(prop, True)\nselection.cursor = self.textCursor()\nselection.cursor.clearSelection()\nextra_selections.append(selection)\nself.setExtraSelections(extra_selections)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.is_valid","title":"<code>is_valid() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def is_valid(self) -&gt; bool:\nif self.validator is None:\nreturn True\nval = self.validator.validate(self.text(), 0)\nreturn val[0] == self.validator.State.Acceptable\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.move_cursor","title":"<code>move_cursor(operation: gui.textcursor.MoveOperationStr, mode: gui.textcursor.MoveModeStr = 'move')</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def move_cursor(\nself,\noperation: gui.textcursor.MoveOperationStr,\nmode: gui.textcursor.MoveModeStr = \"move\",\n):\nself.moveCursor(\ngui.textcursor.MOVE_OPERATION[operation], gui.textcursor.MOVE_MODE[mode]\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.paintEvent","title":"<code>paintEvent(event: QtGui.QPaintEvent)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def paintEvent(self, event: QtGui.QPaintEvent):\nif self._current_line_color:\nwith gui.Painter(self.viewport()) as painter:\ncursor_rect = self.cursorRect()\nr = QtCore.QRect(0, cursor_rect.top(), self.width(), cursor_rect.height())\npainter.set_pen(None)\npainter.setBrush(gui.Color(self._current_line_color))\npainter.drawRect(r)\nsuper().paintEvent(event)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.select_text","title":"<code>select_text(start: int, end: int)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def select_text(self, start: int, end: int):\nwith self.create_cursor() as c:\nc.select_text(start, end)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_current_line_color","title":"<code>set_current_line_color(color: datatypes.ColorType)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_current_line_color(self, color: datatypes.ColorType):\nif self._current_line_color is None:\nself.cursorPositionChanged.connect(self._update_on_block_change)\nif color is None:\nself.cursorPositionChanged.disconnect(self._update_on_block_change)\nself._current_line_color = colors.get_color(color) if color else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_line_wrap_mode","title":"<code>set_line_wrap_mode(mode: LineWrapModeStr)</code>","text":"<p>Set line wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LineWrapModeStr</code> <p>line wrap mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>line wrap mode does not exist</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_line_wrap_mode(self, mode: LineWrapModeStr):\n\"\"\"Set line wrap mode.\n    Args:\n        mode: line wrap mode to use\n    Raises:\n        InvalidParamError: line wrap mode does not exist\n    \"\"\"\nif mode not in LINE_WRAP_MODE:\nraise InvalidParamError(mode, LINE_WRAP_MODE)\nself.setLineWrapMode(LINE_WRAP_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_read_only","title":"<code>set_read_only(value: bool = True)</code>","text":"<p>Make the PlainTextEdit read-only.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True, for read-only, otherwise False</p> <code>True</code> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_read_only(self, value: bool = True):\n\"\"\"Make the PlainTextEdit read-only.\n    Args:\n        value: True, for read-only, otherwise False\n    \"\"\"\nself.setReadOnly(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_regex_validator","title":"<code>set_regex_validator(regex: str, flags: str = 0) -&gt; gui.RegularExpressionValidator</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_regex_validator(self, regex: str, flags=0) -&gt; gui.RegularExpressionValidator:\nvalidator = gui.RegularExpressionValidator(self)\nvalidator.set_regex(regex, flags)\nself.set_validator(validator)\nreturn validator\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_syntaxhighlighter","title":"<code>set_syntaxhighlighter(syntax: str | QtGui.QSyntaxHighlighter, style: str | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_syntaxhighlighter(\nself, syntax: str | QtGui.QSyntaxHighlighter, style: str | None = None\n):\nif isinstance(syntax, QtGui.QSyntaxHighlighter):\nself._hl = syntax\nelse:\nself._hl = syntaxhighlighters.PygmentsHighlighter(\nself.document(), syntax, style\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_text","title":"<code>set_text(text: str)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_text(self, text: str):\nself.setPlainText(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_validator","title":"<code>set_validator(validator: QtGui.QValidator | None)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_validator(self, validator: QtGui.QValidator | None):\nself.validator = validator\nself._set_validation_color()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_value","title":"<code>set_value(value: str)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_value(self, value: str):\nself.setPlainText(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_word_wrap_mode","title":"<code>set_word_wrap_mode(mode: gui.textoption.WordWrapModeStr)</code>","text":"<p>Set word wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>gui.textoption.WordWrapModeStr</code> <p>word wrap mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>wrap mode does not exist</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_word_wrap_mode(self, mode: gui.textoption.WordWrapModeStr):\n\"\"\"Set word wrap mode.\n    Args:\n        mode: word wrap mode to use\n    Raises:\n        InvalidParamError: wrap mode does not exist\n    \"\"\"\nif mode not in gui.textoption.WORD_WRAP_MODE:\nraise InvalidParamError(mode, gui.textoption.WORD_WRAP_MODE)\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_wrap_mode","title":"<code>set_wrap_mode(mode: gui.textoption.WordWrapModeStr)</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>@deprecated(reason=\"This method is deprecated, use set_word_wrap_mode instead.\")\ndef set_wrap_mode(self, mode: gui.textoption.WordWrapModeStr):\nself.set_word_wrap_mode(mode)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.show_whitespace_and_tabs","title":"<code>show_whitespace_and_tabs(show: bool)</code>","text":"<p>Set show white spaces flag.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def show_whitespace_and_tabs(self, show: bool):\n\"\"\"Set show white spaces flag.\"\"\"\ndoc = self.document()\noptions = doc.defaultTextOption()\nflag = QtGui.QTextOption.Flag.ShowTabsAndSpaces\nif show:\noptions.setFlags(options.flags() | flag)  # type: ignore\nelse:\noptions.setFlags(options.flags() &amp; ~flag)  # type: ignore\ndoc.setDefaultTextOption(options)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.text","title":"<code>text() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def text(self) -&gt; str:\nreturn self.toPlainText()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.wheelEvent","title":"<code>wheelEvent(event)</code>","text":"<p>Handle wheel event for zooming.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def wheelEvent(self, event):\n\"\"\"Handle wheel event for zooming.\"\"\"\nif not self._allow_wheel_zoom:\nreturn super().wheelEvent(event)\nif event.modifiers() &amp; constants.CTRL_MOD:\nself.zoomIn() if event.angleDelta().y() &gt; 0 else self.zoomOut()\nevent.accept()\nelse:\nsuper().wheelEvent(event)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ProgressBar","title":"<code>ProgressBar</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QProgressBar</code></p> <p>Progress dialog.</p> <p>wrapper for QtWidgets.QProgressBar</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>class ProgressBar(widgets.WidgetMixin, QtWidgets.QProgressBar):\n\"\"\"Progress dialog.\n    wrapper for QtWidgets.QProgressBar\n    \"\"\"\ndef __init__(\nself, text_visible: bool = True, parent: QtWidgets.QWidget | None = None\n):\nsuper().__init__(parent=parent)\nself.setTextVisible(text_visible)\ndef serialize_fields(self):\nreturn dict(\nalignment=self.get_alignment(),\nformat=self.format(),\n# inverted_appearance=self.invertedAppearance(),\nminimum=self.minimum(),\nmaximum=self.maximum(),\norientation=self.get_orientation(),\ntext=self.text(),\n# text_direction=self.get_text_direction(),\ntext_visible=self.isTextVisible(),\nvalue=self.value(),\n)\ndef set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n        Args:\n            alignment: alignment for the layout\n        Raises:\n            InvalidParamError: alignment does not exist\n        \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef set_text_direction(self, text_direction: TextDirectionStr):\n\"\"\"Set the text direction of the layout.\n        Args:\n            text_direction: text direction for the layout\n        Raises:\n            InvalidParamError: text direction does not exist\n        \"\"\"\nif text_direction not in TEXT_DIRECTIONS:\nraise InvalidParamError(text_direction, TEXT_DIRECTIONS)\nself.setTextDirection(TEXT_DIRECTIONS[text_direction])\ndef get_text_direction(self) -&gt; TextDirectionStr:\n\"\"\"Return current text direction.\n        Returns:\n            Text direction\n        \"\"\"\nreturn TEXT_DIRECTIONS.inverse[self.textDirection()]\ndef set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the progress bar.\n        Args:\n            orientation: orientation for the progress bar\n        Raises:\n            InvalidParamError: orientation does not exist\n        \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef set_range(self, start: int, end: int):\nself.setRange(start, end)\ndef set_value(self, value: int):\nself.setValue(value)\ndef get_value(self) -&gt; int:\nreturn self.value()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.__init__","title":"<code>__init__(text_visible: bool = True, parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def __init__(\nself, text_visible: bool = True, parent: QtWidgets.QWidget | None = None\n):\nsuper().__init__(parent=parent)\nself.setTextVisible(text_visible)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> <p>Returns:</p> Type Description <code>constants.AlignmentStr</code> <p>alignment</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_text_direction","title":"<code>get_text_direction() -&gt; TextDirectionStr</code>","text":"<p>Return current text direction.</p> <p>Returns:</p> Type Description <code>TextDirectionStr</code> <p>Text direction</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_text_direction(self) -&gt; TextDirectionStr:\n\"\"\"Return current text direction.\n    Returns:\n        Text direction\n    \"\"\"\nreturn TEXT_DIRECTIONS.inverse[self.textDirection()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.get_value","title":"<code>get_value() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_value(self) -&gt; int:\nreturn self.value()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\nalignment=self.get_alignment(),\nformat=self.format(),\n# inverted_appearance=self.invertedAppearance(),\nminimum=self.minimum(),\nmaximum=self.maximum(),\norientation=self.get_orientation(),\ntext=self.text(),\n# text_direction=self.get_text_direction(),\ntext_visible=self.isTextVisible(),\nvalue=self.value(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the layout</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>alignment does not exist</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n    Args:\n        alignment: alignment for the layout\n    Raises:\n        InvalidParamError: alignment does not exist\n    \"\"\"\nif alignment not in constants.ALIGNMENTS:\nraise InvalidParamError(alignment, constants.ALIGNMENTS)\nself.setAlignment(constants.ALIGNMENTS[alignment])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr)</code>","text":"<p>Set the orientation of the progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr</code> <p>orientation for the progress bar</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>orientation does not exist</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the progress bar.\n    Args:\n        orientation: orientation for the progress bar\n    Raises:\n        InvalidParamError: orientation does not exist\n    \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_range","title":"<code>set_range(start: int, end: int)</code>","text":"Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_range(self, start: int, end: int):\nself.setRange(start, end)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_text_direction","title":"<code>set_text_direction(text_direction: TextDirectionStr)</code>","text":"<p>Set the text direction of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>text_direction</code> <code>TextDirectionStr</code> <p>text direction for the layout</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>text direction does not exist</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_text_direction(self, text_direction: TextDirectionStr):\n\"\"\"Set the text direction of the layout.\n    Args:\n        text_direction: text direction for the layout\n    Raises:\n        InvalidParamError: text direction does not exist\n    \"\"\"\nif text_direction not in TEXT_DIRECTIONS:\nraise InvalidParamError(text_direction, TEXT_DIRECTIONS)\nself.setTextDirection(TEXT_DIRECTIONS[text_direction])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressbar.ProgressBar.set_value","title":"<code>set_value(value: int)</code>","text":"Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_value(self, value: int):\nself.setValue(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ProgressDialog","title":"<code>ProgressDialog</code>","text":"<p>         Bases: <code>widgets.DialogMixin</code>, <code>QtWidgets.QProgressDialog</code></p> <p>Progress dialog.</p> <p>Wrapper for QtWidgets.QProgressDialog</p> Source code in <code>prettyqt\\widgets\\progressdialog.py</code> <pre><code>class ProgressDialog(widgets.DialogMixin, QtWidgets.QProgressDialog):\n\"\"\"Progress dialog.\n    Wrapper for QtWidgets.QProgressDialog\n    \"\"\"\ndef __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nprogress_bar = widgets.ProgressBar()\nprogress_bar.setRange(0, 0)\nprogress_bar.setTextVisible(False)\nself.setBar(progress_bar)\nself.set_icon(\"mdi.timer-sand-empty\")\nself.set_modality(\"application\")\nself.set_flags(\nminimize=False, maximize=False, close=False, stay_on_top=True, window=True\n)\nself.setCancelButton(None)  # type: ignore\nself.cancel()\ndef show_message(self, message: str):\nself.setLabelText(message)\nself.show()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressdialog.ProgressDialog.__init__","title":"<code>__init__(parent: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\progressdialog.py</code> <pre><code>def __init__(self, parent: QtWidgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nprogress_bar = widgets.ProgressBar()\nprogress_bar.setRange(0, 0)\nprogress_bar.setTextVisible(False)\nself.setBar(progress_bar)\nself.set_icon(\"mdi.timer-sand-empty\")\nself.set_modality(\"application\")\nself.set_flags(\nminimize=False, maximize=False, close=False, stay_on_top=True, window=True\n)\nself.setCancelButton(None)  # type: ignore\nself.cancel()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.progressdialog.ProgressDialog.show_message","title":"<code>show_message(message: str)</code>","text":"Source code in <code>prettyqt\\widgets\\progressdialog.py</code> <pre><code>def show_message(self, message: str):\nself.setLabelText(message)\nself.show()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ProxyStyle","title":"<code>ProxyStyle</code>","text":"<p>         Bases: <code>widgets.CommonStyleMixin</code>, <code>QtWidgets.QProxyStyle</code></p> Source code in <code>prettyqt\\widgets\\proxystyle.py</code> <pre><code>class ProxyStyle(widgets.CommonStyleMixin, QtWidgets.QProxyStyle):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PushButton","title":"<code>PushButton</code>","text":"<p>         Bases: <code>PushButtonMixin</code>, <code>QtWidgets.QPushButton</code></p> Source code in <code>prettyqt\\widgets\\pushbutton.py</code> <pre><code>class PushButton(PushButtonMixin, QtWidgets.QPushButton):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.PushButtonMixin","title":"<code>PushButtonMixin</code>","text":"<p>         Bases: <code>widgets.AbstractButtonMixin</code></p> Source code in <code>prettyqt\\widgets\\pushbutton.py</code> <pre><code>class PushButtonMixin(widgets.AbstractButtonMixin):\nvalue_changed = core.Signal(bool)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.toggled.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.pushbutton.PushButtonMixin.value_changed","title":"<code>value_changed = core.Signal(bool)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.pushbutton.PushButtonMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\pushbutton.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.toggled.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.RadioButton","title":"<code>RadioButton</code>","text":"<p>         Bases: <code>widgets.AbstractButtonMixin</code>, <code>QtWidgets.QRadioButton</code></p> Source code in <code>prettyqt\\widgets\\radiobutton.py</code> <pre><code>class RadioButton(widgets.AbstractButtonMixin, QtWidgets.QRadioButton):\nvalue_changed = core.Signal(bool)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.toggled.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.radiobutton.RadioButton.value_changed","title":"<code>value_changed = core.Signal(bool)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.radiobutton.RadioButton.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\radiobutton.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.toggled.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.RubberBand","title":"<code>RubberBand</code>","text":"<p>         Bases: <code>RubberBandMixin</code>, <code>QtWidgets.QRubberBand</code></p> Source code in <code>prettyqt\\widgets\\rubberband.py</code> <pre><code>class RubberBand(RubberBandMixin, QtWidgets.QRubberBand):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ScrollArea","title":"<code>ScrollArea</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>QtWidgets.QScrollArea</code></p> Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>class ScrollArea(widgets.AbstractScrollAreaMixin, QtWidgets.QScrollArea):\ndef __enter__(self):\nreturn self\ndef __exit__(self, *args):\npass\ndef __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout | list):\nself.add(other)\nreturn self\ndef get_children(self) -&gt; list[QtWidgets.QWidget]:\nreturn self.widget().layout().get_children()\ndef set_widget(self, widget: QtWidgets.QWidget):\nself.setWidget(widget)\ndef add_widget(self, *args, **kwargs):\nself.widget().layout().addWidget(*args, **kwargs)\ndef add_layout(self, *args, **kwargs):\nself.widget().layout().addLayout(*args, **kwargs)\ndef add(\nself,\nitem: QtWidgets.QWidget | QtWidgets.QLayout | list,\nstretch: float | None = None,\n):\nmatch item:\ncase QtWidgets.QWidget():\nself.add_widget(item)\nif stretch:\nself.widget().layout().setStretchFactor(self.count() - 1, stretch)\ncase QtWidgets.QLayout():\nwidget = widgets.Widget(self)\nwidget.set_layout(item)\nself.add_widget(widget)\nif stretch:\nself.setStretchFactor(self.count() - 1, stretch)\ncase list():\nfor i in item:\nself.add(i, stretch)\nreturn item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.__add__","title":"<code>__add__(other: QtWidgets.QWidget | QtWidgets.QLayout | list)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout | list):\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def __enter__(self):\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.__exit__","title":"<code>__exit__(*args)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def __exit__(self, *args):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.add","title":"<code>add(item: QtWidgets.QWidget | QtWidgets.QLayout | list, stretch: float | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def add(\nself,\nitem: QtWidgets.QWidget | QtWidgets.QLayout | list,\nstretch: float | None = None,\n):\nmatch item:\ncase QtWidgets.QWidget():\nself.add_widget(item)\nif stretch:\nself.widget().layout().setStretchFactor(self.count() - 1, stretch)\ncase QtWidgets.QLayout():\nwidget = widgets.Widget(self)\nwidget.set_layout(item)\nself.add_widget(widget)\nif stretch:\nself.setStretchFactor(self.count() - 1, stretch)\ncase list():\nfor i in item:\nself.add(i, stretch)\nreturn item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.add_layout","title":"<code>add_layout(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def add_layout(self, *args, **kwargs):\nself.widget().layout().addLayout(*args, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.add_widget","title":"<code>add_widget(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def add_widget(self, *args, **kwargs):\nself.widget().layout().addWidget(*args, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.get_children","title":"<code>get_children() -&gt; list[QtWidgets.QWidget]</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def get_children(self) -&gt; list[QtWidgets.QWidget]:\nreturn self.widget().layout().get_children()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollarea.ScrollArea.set_widget","title":"<code>set_widget(widget: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def set_widget(self, widget: QtWidgets.QWidget):\nself.setWidget(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ScrollBar","title":"<code>ScrollBar</code>","text":"<p>         Bases: <code>ScrollBarMixin</code>, <code>QtWidgets.QScrollBar</code></p> Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>class ScrollBar(ScrollBarMixin, QtWidgets.QScrollBar):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Scroller","title":"<code>Scroller</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>class Scroller(core.ObjectMixin):\ndef __init__(self, item: QtWidgets.QScroller):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n        Returns:\n            state\n        \"\"\"\nreturn STATE.inverse[self.state()]\ndef get_velocity(self) -&gt; core.PointF:\nreturn core.PointF(self.velocity())\ndef get_pixel_per_meter(self) -&gt; core.PointF:\nreturn core.PointF(self.pixelPerMeter())\ndef get_final_position(self) -&gt; core.PointF:\nreturn core.PointF(self.finalPosition())\ndef handle_input(\nself, input_type: InputStr, position: datatypes.PointFType, timestamp: int = 0\n) -&gt; bool:\nif isinstance(position, tuple):\nposition = core.PointF(*position)\nif input_type not in INPUT:\nraise InvalidParamError(input_type, INPUT)\nreturn self.handleInput(INPUT[input_type], position, timestamp)\ndef get_scroller_properties(self) -&gt; widgets.ScrollerProperties:\nreturn widgets.ScrollerProperties(self.scrollerProperties())\n@classmethod\ndef get_scroller(cls, obj: QtCore.QObject) -&gt; Self:\nreturn cls(QtWidgets.QScroller.scroller(obj))\n@staticmethod\ndef grab_gesture(\ntarget: QtCore.QObject, gesture_type: ScrollGestureTypeStr = \"touch\"\n) -&gt; constants.GestureTypeStr:\nif gesture_type not in SCROLLER_GESTURE_TYPE:\nraise InvalidParamError(gesture_type, SCROLLER_GESTURE_TYPE)\ngesture = QtWidgets.QScroller.grabGesture(\ntarget, SCROLLER_GESTURE_TYPE[gesture_type]\n)\nif gesture &gt;= 256:\ngesture -= 256\nreturn constants.GESTURE_TYPE.inverse[gesture]\n@staticmethod\ndef grabbed_gesture(target: QtCore.QObject) -&gt; constants.GestureTypeStr:\nreturn constants.GESTURE_TYPE.inverse[QtWidgets.QScroller.grabbedGesture(target)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.item","title":"<code>item = item</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.__getattr__","title":"<code>__getattr__(val)</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.__init__","title":"<code>__init__(item: QtWidgets.QScroller)</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def __init__(self, item: QtWidgets.QScroller):\nself.item = item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_final_position","title":"<code>get_final_position() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_final_position(self) -&gt; core.PointF:\nreturn core.PointF(self.finalPosition())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_pixel_per_meter","title":"<code>get_pixel_per_meter() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_pixel_per_meter(self) -&gt; core.PointF:\nreturn core.PointF(self.pixelPerMeter())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_scroller","title":"<code>get_scroller(obj: QtCore.QObject) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>@classmethod\ndef get_scroller(cls, obj: QtCore.QObject) -&gt; Self:\nreturn cls(QtWidgets.QScroller.scroller(obj))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_scroller_properties","title":"<code>get_scroller_properties() -&gt; widgets.ScrollerProperties</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_scroller_properties(self) -&gt; widgets.ScrollerProperties:\nreturn widgets.ScrollerProperties(self.scrollerProperties())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> <p>Returns:</p> Type Description <code>StateStr</code> <p>state</p> Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.get_velocity","title":"<code>get_velocity() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_velocity(self) -&gt; core.PointF:\nreturn core.PointF(self.velocity())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.grab_gesture","title":"<code>grab_gesture(target: QtCore.QObject, gesture_type: ScrollGestureTypeStr = 'touch') -&gt; constants.GestureTypeStr</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>@staticmethod\ndef grab_gesture(\ntarget: QtCore.QObject, gesture_type: ScrollGestureTypeStr = \"touch\"\n) -&gt; constants.GestureTypeStr:\nif gesture_type not in SCROLLER_GESTURE_TYPE:\nraise InvalidParamError(gesture_type, SCROLLER_GESTURE_TYPE)\ngesture = QtWidgets.QScroller.grabGesture(\ntarget, SCROLLER_GESTURE_TYPE[gesture_type]\n)\nif gesture &gt;= 256:\ngesture -= 256\nreturn constants.GESTURE_TYPE.inverse[gesture]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.grabbed_gesture","title":"<code>grabbed_gesture(target: QtCore.QObject) -&gt; constants.GestureTypeStr</code>  <code>staticmethod</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>@staticmethod\ndef grabbed_gesture(target: QtCore.QObject) -&gt; constants.GestureTypeStr:\nreturn constants.GESTURE_TYPE.inverse[QtWidgets.QScroller.grabbedGesture(target)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scroller.Scroller.handle_input","title":"<code>handle_input(input_type: InputStr, position: datatypes.PointFType, timestamp: int = 0) -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def handle_input(\nself, input_type: InputStr, position: datatypes.PointFType, timestamp: int = 0\n) -&gt; bool:\nif isinstance(position, tuple):\nposition = core.PointF(*position)\nif input_type not in INPUT:\nraise InvalidParamError(input_type, INPUT)\nreturn self.handleInput(INPUT[input_type], position, timestamp)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ScrollerProperties","title":"<code>ScrollerProperties</code>","text":"<p>         Bases: <code>QtWidgets.QScrollerProperties</code></p> Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>class ScrollerProperties(QtWidgets.QScrollerProperties):\ndef __getitem__(self, metric: ScrollmetricStr):\nreturn self.get_scroll_metric(metric)\ndef __setitem__(self, metric: ScrollmetricStr, value: Any):\nself.set_scroll_metric(metric, value)\ndef keys(self):\nreturn SCROLL_METRIC.keys()\ndef __iter__(self):\nreturn iter(SCROLL_METRIC.keys())\ndef set_scroll_metric(self, metric: ScrollmetricStr, value: Any):\n\"\"\"Set scroll metric.\n        Args:\n            metric: Scroll metric to set\n            value: Value to set\n        Raises:\n            InvalidParamError: metric does not exist\n        \"\"\"\nif metric not in SCROLL_METRIC:\nraise InvalidParamError(metric, SCROLL_METRIC)\nself.setScrollMetric(SCROLL_METRIC[metric], value)\ndef get_scroll_metric(self, metric: ScrollmetricStr) -&gt; Any:\n\"\"\"Return scroll metric.\n        Args:\n            metric: Scroll metric to get\n        Raises:\n            InvalidParamError: metric does not exist\n        Returns:\n            state\n        \"\"\"\nif metric not in SCROLL_METRIC:\nraise InvalidParamError(metric, SCROLL_METRIC)\nreturn self.scrollMetric(SCROLL_METRIC[metric])\ndef get_scroll_metrics(self) -&gt; dict:\nreturn {i: self.get_scroll_metric(i) for i in SCROLL_METRIC}\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.__getitem__","title":"<code>__getitem__(metric: ScrollmetricStr)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def __getitem__(self, metric: ScrollmetricStr):\nreturn self.get_scroll_metric(metric)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.__iter__","title":"<code>__iter__()</code>","text":"Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def __iter__(self):\nreturn iter(SCROLL_METRIC.keys())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.__setitem__","title":"<code>__setitem__(metric: ScrollmetricStr, value: Any)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def __setitem__(self, metric: ScrollmetricStr, value: Any):\nself.set_scroll_metric(metric, value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.get_scroll_metric","title":"<code>get_scroll_metric(metric: ScrollmetricStr) -&gt; Any</code>","text":"<p>Return scroll metric.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>ScrollmetricStr</code> <p>Scroll metric to get</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>metric does not exist</p> <p>Returns:</p> Type Description <code>Any</code> <p>state</p> Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def get_scroll_metric(self, metric: ScrollmetricStr) -&gt; Any:\n\"\"\"Return scroll metric.\n    Args:\n        metric: Scroll metric to get\n    Raises:\n        InvalidParamError: metric does not exist\n    Returns:\n        state\n    \"\"\"\nif metric not in SCROLL_METRIC:\nraise InvalidParamError(metric, SCROLL_METRIC)\nreturn self.scrollMetric(SCROLL_METRIC[metric])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.get_scroll_metrics","title":"<code>get_scroll_metrics() -&gt; dict</code>","text":"Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def get_scroll_metrics(self) -&gt; dict:\nreturn {i: self.get_scroll_metric(i) for i in SCROLL_METRIC}\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.keys","title":"<code>keys()</code>","text":"Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def keys(self):\nreturn SCROLL_METRIC.keys()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.set_scroll_metric","title":"<code>set_scroll_metric(metric: ScrollmetricStr, value: Any)</code>","text":"<p>Set scroll metric.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>ScrollmetricStr</code> <p>Scroll metric to set</p> required <code>value</code> <code>Any</code> <p>Value to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>metric does not exist</p> Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def set_scroll_metric(self, metric: ScrollmetricStr, value: Any):\n\"\"\"Set scroll metric.\n    Args:\n        metric: Scroll metric to set\n        value: Value to set\n    Raises:\n        InvalidParamError: metric does not exist\n    \"\"\"\nif metric not in SCROLL_METRIC:\nraise InvalidParamError(metric, SCROLL_METRIC)\nself.setScrollMetric(SCROLL_METRIC[metric], value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SizeGrip","title":"<code>SizeGrip</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QSizeGrip</code></p> Source code in <code>prettyqt\\widgets\\sizegrip.py</code> <pre><code>class SizeGrip(widgets.WidgetMixin, QtWidgets.QSizeGrip):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SizePolicy","title":"<code>SizePolicy</code>","text":"<p>         Bases: <code>prettyprinter.PrettyPrinter</code>, <code>QtWidgets.QSizePolicy</code></p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>class SizePolicy(prettyprinter.PrettyPrinter, QtWidgets.QSizePolicy):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), str()):\nsuper().__init__(SIZE_POLICY[args[0]], SIZE_POLICY[args[1]])\ncase (str(), str(), str()):\nsuper().__init__(\nSIZE_POLICY[args[0]], SIZE_POLICY[args[1]], CONTROL_TYPE[args[2]]\n)\ncase _:\nsuper().__init__(*args, **kwargs)\ndef __repr__(self) -&gt; str:\nreturn get_repr(\nself,\nself.get_horizontal_policy(),\nself.get_vertical_policy(),\nself.get_control_type(),\n)\ndef __getstate__(self):\nreturn dict(\nhas_height_for_width=self.hasHeightForWidth(),\nhas_width_for_height=self.hasWidthForHeight(),\nhorizontal_stretch=self.horizontalStretch(),\nvertical_stretch=self.verticalStretch(),\nhorizontal_policy=self.get_horizontal_policy(),\nvertical_policy=self.get_vertical_policy(),\nretain_size_when_hidden=self.retainSizeWhenHidden(),\ncontrol_type=self.get_control_type(),\n)\ndef __setstate__(self, state: dict[str, Any]) -&gt; None:\nself.setHeightForWidth(state[\"has_height_for_width\"])\nself.setWidthForHeight(state[\"has_width_for_height\"])\nself.setHorizontalStretch(state[\"horizontal_stretch\"])\nself.setVerticalStretch(state[\"vertical_stretch\"])\nself.set_horizontal_policy(state[\"horizontal_policy\"])\nself.set_vertical_policy(state[\"vertical_policy\"])\nself.setRetainSizeWhenHidden(state[\"retain_size_when_hidden\"])\nself.set_control_type(state[\"control_type\"])\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.__getstate__()\n@classmethod\ndef clone(cls, qpol: QtWidgets.QSizePolicy) -&gt; Self:\npol = cls(qpol.horizontalPolicy(), qpol.verticalPolicy(), qpol.controlType())\npol.setHeightForWidth(qpol.hasHeightForWidth())\npol.setWidthForHeight(qpol.hasWidthForHeight())\npol.setHorizontalStretch(qpol.horizontalStretch())\npol.setVerticalStretch(qpol.verticalStretch())\npol.setRetainSizeWhenHidden(qpol.retainSizeWhenHidden())\nreturn pol\ndef get_horizontal_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n        Returns:\n            horizontal size policy\n        \"\"\"\nreturn SIZE_POLICY.inverse[self.horizontalPolicy()]\ndef set_horizontal_policy(self, policy: SizePolicyStr) -&gt; None:\n\"\"\"Set the horizontal policy.\n        Args:\n            policy: policy to set\n        Raises:\n            InvalidParamError: policy does not exist\n        \"\"\"\nself.setHorizontalPolicy(SIZE_POLICY[policy])\ndef get_vertical_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n        Returns:\n            vertical size policy\n        \"\"\"\nreturn SIZE_POLICY.inverse[self.verticalPolicy()]\ndef set_vertical_policy(self, policy: SizePolicyStr) -&gt; None:\n\"\"\"Set the horizontal policy.\n        Args:\n            policy: policy to set\n        Raises:\n            InvalidParamError: policy does not exist\n        \"\"\"\nself.setVerticalPolicy(SIZE_POLICY[policy])\ndef get_control_type(self) -&gt; ControlTypeStr:\n\"\"\"Return control type.\n        Returns:\n            control type\n        \"\"\"\nreturn CONTROL_TYPE.inverse[self.controlType()]\ndef set_control_type(self, typ: ControlTypeStr) -&gt; None:\n\"\"\"Set the control type.\n        Args:\n            typ: control type to set\n        Raises:\n            InvalidParamError: control type does not exist\n        \"\"\"\nif typ not in CONTROL_TYPE:\nraise InvalidParamError(typ, CONTROL_TYPE)\nself.setControlType(CONTROL_TYPE[typ])\ndef get_transposed(self) -&gt; Self:\ntransposed = self.transposed()\nreturn type(self).clone(transposed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.__getstate__","title":"<code>__getstate__()</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def __getstate__(self):\nreturn dict(\nhas_height_for_width=self.hasHeightForWidth(),\nhas_width_for_height=self.hasWidthForHeight(),\nhorizontal_stretch=self.horizontalStretch(),\nvertical_stretch=self.verticalStretch(),\nhorizontal_policy=self.get_horizontal_policy(),\nvertical_policy=self.get_vertical_policy(),\nretain_size_when_hidden=self.retainSizeWhenHidden(),\ncontrol_type=self.get_control_type(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), str()):\nsuper().__init__(SIZE_POLICY[args[0]], SIZE_POLICY[args[1]])\ncase (str(), str(), str()):\nsuper().__init__(\nSIZE_POLICY[args[0]], SIZE_POLICY[args[1]], CONTROL_TYPE[args[2]]\n)\ncase _:\nsuper().__init__(*args, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.__reduce__","title":"<code>__reduce__()</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def __reduce__(self):\nreturn type(self), (), self.__getstate__()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def __repr__(self) -&gt; str:\nreturn get_repr(\nself,\nself.get_horizontal_policy(),\nself.get_vertical_policy(),\nself.get_control_type(),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.__setstate__","title":"<code>__setstate__(state: dict[str, Any]) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def __setstate__(self, state: dict[str, Any]) -&gt; None:\nself.setHeightForWidth(state[\"has_height_for_width\"])\nself.setWidthForHeight(state[\"has_width_for_height\"])\nself.setHorizontalStretch(state[\"horizontal_stretch\"])\nself.setVerticalStretch(state[\"vertical_stretch\"])\nself.set_horizontal_policy(state[\"horizontal_policy\"])\nself.set_vertical_policy(state[\"vertical_policy\"])\nself.setRetainSizeWhenHidden(state[\"retain_size_when_hidden\"])\nself.set_control_type(state[\"control_type\"])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.clone","title":"<code>clone(qpol: QtWidgets.QSizePolicy) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>@classmethod\ndef clone(cls, qpol: QtWidgets.QSizePolicy) -&gt; Self:\npol = cls(qpol.horizontalPolicy(), qpol.verticalPolicy(), qpol.controlType())\npol.setHeightForWidth(qpol.hasHeightForWidth())\npol.setWidthForHeight(qpol.hasWidthForHeight())\npol.setHorizontalStretch(qpol.horizontalStretch())\npol.setVerticalStretch(qpol.verticalStretch())\npol.setRetainSizeWhenHidden(qpol.retainSizeWhenHidden())\nreturn pol\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_control_type","title":"<code>get_control_type() -&gt; ControlTypeStr</code>","text":"<p>Return control type.</p> <p>Returns:</p> Type Description <code>ControlTypeStr</code> <p>control type</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_control_type(self) -&gt; ControlTypeStr:\n\"\"\"Return control type.\n    Returns:\n        control type\n    \"\"\"\nreturn CONTROL_TYPE.inverse[self.controlType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_horizontal_policy","title":"<code>get_horizontal_policy() -&gt; SizePolicyStr</code>","text":"<p>Return size policy.</p> <p>Returns:</p> Type Description <code>SizePolicyStr</code> <p>horizontal size policy</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_horizontal_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n    Returns:\n        horizontal size policy\n    \"\"\"\nreturn SIZE_POLICY.inverse[self.horizontalPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_transposed","title":"<code>get_transposed() -&gt; Self</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_transposed(self) -&gt; Self:\ntransposed = self.transposed()\nreturn type(self).clone(transposed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.get_vertical_policy","title":"<code>get_vertical_policy() -&gt; SizePolicyStr</code>","text":"<p>Return size policy.</p> <p>Returns:</p> Type Description <code>SizePolicyStr</code> <p>vertical size policy</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_vertical_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n    Returns:\n        vertical size policy\n    \"\"\"\nreturn SIZE_POLICY.inverse[self.verticalPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":"Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def serialize(self) -&gt; dict[str, Any]:\nreturn self.__getstate__()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.set_control_type","title":"<code>set_control_type(typ: ControlTypeStr) -&gt; None</code>","text":"<p>Set the control type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ControlTypeStr</code> <p>control type to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>control type does not exist</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_control_type(self, typ: ControlTypeStr) -&gt; None:\n\"\"\"Set the control type.\n    Args:\n        typ: control type to set\n    Raises:\n        InvalidParamError: control type does not exist\n    \"\"\"\nif typ not in CONTROL_TYPE:\nraise InvalidParamError(typ, CONTROL_TYPE)\nself.setControlType(CONTROL_TYPE[typ])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.set_horizontal_policy","title":"<code>set_horizontal_policy(policy: SizePolicyStr) -&gt; None</code>","text":"<p>Set the horizontal policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizePolicyStr</code> <p>policy to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>policy does not exist</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_horizontal_policy(self, policy: SizePolicyStr) -&gt; None:\n\"\"\"Set the horizontal policy.\n    Args:\n        policy: policy to set\n    Raises:\n        InvalidParamError: policy does not exist\n    \"\"\"\nself.setHorizontalPolicy(SIZE_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.sizepolicy.SizePolicy.set_vertical_policy","title":"<code>set_vertical_policy(policy: SizePolicyStr) -&gt; None</code>","text":"<p>Set the horizontal policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizePolicyStr</code> <p>policy to set</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>policy does not exist</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_vertical_policy(self, policy: SizePolicyStr) -&gt; None:\n\"\"\"Set the horizontal policy.\n    Args:\n        policy: policy to set\n    Raises:\n        InvalidParamError: policy does not exist\n    \"\"\"\nself.setVerticalPolicy(SIZE_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Slider","title":"<code>Slider</code>","text":"<p>         Bases: <code>widgets.AbstractSliderMixin</code>, <code>QtWidgets.QSlider</code></p> Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>class Slider(widgets.AbstractSliderMixin, QtWidgets.QSlider):\nvalue_changed = core.Signal(int)\nclicked = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nsuper().__init__(constants.ORIENTATION[args[0]], *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\nstyle = HollowHandleStyle(\n{\n\"groove.height\": 4,\n\"sub-page.color\": QtGui.QColor(72, 210, 242),\n\"add-page.color\": QtGui.QColor(255, 255, 255, 50),\n\"handle.color\": QtGui.QColor(72, 210, 242),\n\"handle.ring-width\": 2,\n\"handle.hollow-radius\": 10,\n\"handle.margin\": 0,\n}\n)\nself.setStyle(style)\ndef mousePressEvent(self, e: QtGui.QMouseEvent):\nself.clicked.emit(self.value())\nif self.orientation() == QtCore.Qt.Orientation.Horizontal:\nvalue = e.pos().x() / self.width() * self.maximum()\nelse:\nvalue = (self.height() - e.pos().y()) / self.height() * self.maximum()\nself.setValue(int(value))\nsuper().mousePressEvent(e)\ndef set_tick_position(self, position: TickPositionAllStr):\n\"\"\"Set the tick position for the slider.\n        For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".\n        Args:\n            position: position for the ticks\n        \"\"\"\nif position == \"left\":\nposition = \"above\"\nelif position == \"right\":\nposition = \"below\"\nelif position not in TICK_POSITION:\nraise InvalidParamError(position, TICK_POSITION)\nself.setTickPosition(TICK_POSITION[position])\ndef get_tick_position(self) -&gt; TickPositionStr:\n\"\"\"Return tick position.\n        Returns:\n            tick position\n        \"\"\"\nreturn TICK_POSITION.inverse[self.tickPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.clicked","title":"<code>clicked = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nsuper().__init__(constants.ORIENTATION[args[0]], *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\nstyle = HollowHandleStyle(\n{\n\"groove.height\": 4,\n\"sub-page.color\": QtGui.QColor(72, 210, 242),\n\"add-page.color\": QtGui.QColor(255, 255, 255, 50),\n\"handle.color\": QtGui.QColor(72, 210, 242),\n\"handle.ring-width\": 2,\n\"handle.hollow-radius\": 10,\n\"handle.margin\": 0,\n}\n)\nself.setStyle(style)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.get_tick_position","title":"<code>get_tick_position() -&gt; TickPositionStr</code>","text":"<p>Return tick position.</p> <p>Returns:</p> Type Description <code>TickPositionStr</code> <p>tick position</p> Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def get_tick_position(self) -&gt; TickPositionStr:\n\"\"\"Return tick position.\n    Returns:\n        tick position\n    \"\"\"\nreturn TICK_POSITION.inverse[self.tickPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.mousePressEvent","title":"<code>mousePressEvent(e: QtGui.QMouseEvent)</code>","text":"Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def mousePressEvent(self, e: QtGui.QMouseEvent):\nself.clicked.emit(self.value())\nif self.orientation() == QtCore.Qt.Orientation.Horizontal:\nvalue = e.pos().x() / self.width() * self.maximum()\nelse:\nvalue = (self.height() - e.pos().y()) / self.height() * self.maximum()\nself.setValue(int(value))\nsuper().mousePressEvent(e)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.slider.Slider.set_tick_position","title":"<code>set_tick_position(position: TickPositionAllStr)</code>","text":"<p>Set the tick position for the slider.</p> <p>For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TickPositionAllStr</code> <p>position for the ticks</p> required Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def set_tick_position(self, position: TickPositionAllStr):\n\"\"\"Set the tick position for the slider.\n    For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".\n    Args:\n        position: position for the ticks\n    \"\"\"\nif position == \"left\":\nposition = \"above\"\nelif position == \"right\":\nposition = \"below\"\nelif position not in TICK_POSITION:\nraise InvalidParamError(position, TICK_POSITION)\nself.setTickPosition(TICK_POSITION[position])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SmoothScrollBar","title":"<code>SmoothScrollBar</code>","text":"<p>         Bases: <code>ScrollBar</code></p> Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>class SmoothScrollBar(ScrollBar):\nscroll_ended = core.Signal()\ndef __init__(\nself,\norientation: QtCore.Qt.Orientation | constants.OrientationStr = \"horizontal\",\nparent: QtWidgets.QAbstractScrollArea | None = None,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr = \"out_cubic\",\ntrigger: bool = False,\n):\nsuper().__init__(orientation, parent)\nself._value = self.value()\nself.widget = parent\nself.animation = core.PropertyAnimation()\nself.animation.apply_to(self.value)\nself.animation.set_easing(easing)\nself.animation.setDuration(animation_duration)\nself.animation.finished.connect(self.scroll_ended)\nself.widget.viewport().installEventFilter(self)\nif trigger:\nself.widget.h_scrollbar.valueChanged.connect(gui.Cursor.fake_mouse_move)\ndef mouseMoveEvent(self, e):\nself.animation.stop()\nself._value = self.value()\nsuper().mouseMoveEvent(e)\ndef mousePressEvent(self, e):\nself.animation.stop()\nself._value = self.value()\nsuper().mousePressEvent(e)\ndef mouseReleaseEvent(self, e):\nself.animation.stop()\nself._value = self.value()\nsuper().mouseReleaseEvent(e)\ndef setValue(self, value: int):\nif value == self.value():\nreturn\nself.animation.stop()\nself.scroll_ended.emit()\nself.animation.set_range(self.value(), value)\nself.animation.start()\ndef scroll_by_value(self, value: int):\n\"\"\"Scroll by given distance.\"\"\"\nself._value += value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\ndef scroll_to(self, value: int):\n\"\"\"Scroll to given position.\"\"\"\nself._value = value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\ndef reset_value(self, value):\nself._value = value\ndef eventFilter(self, source, event) -&gt; bool:\nif event.type() == core.Event.Type.Wheel and source == self.widget.viewport():\nself.widget.v_scrollbar.scroll_by_value(-event.angleDelta().y())\nreturn True\nreturn False\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.animation","title":"<code>animation = core.PropertyAnimation()</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.scroll_ended","title":"<code>scroll_ended = core.Signal()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.widget","title":"<code>widget = parent</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.__init__","title":"<code>__init__(orientation: QtCore.Qt.Orientation | constants.OrientationStr = 'horizontal', parent: QtWidgets.QAbstractScrollArea | None = None, animation_duration: int = 500, easing: core.easingcurve.TypeStr = 'out_cubic', trigger: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def __init__(\nself,\norientation: QtCore.Qt.Orientation | constants.OrientationStr = \"horizontal\",\nparent: QtWidgets.QAbstractScrollArea | None = None,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr = \"out_cubic\",\ntrigger: bool = False,\n):\nsuper().__init__(orientation, parent)\nself._value = self.value()\nself.widget = parent\nself.animation = core.PropertyAnimation()\nself.animation.apply_to(self.value)\nself.animation.set_easing(easing)\nself.animation.setDuration(animation_duration)\nself.animation.finished.connect(self.scroll_ended)\nself.widget.viewport().installEventFilter(self)\nif trigger:\nself.widget.h_scrollbar.valueChanged.connect(gui.Cursor.fake_mouse_move)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.eventFilter","title":"<code>eventFilter(source, event) -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def eventFilter(self, source, event) -&gt; bool:\nif event.type() == core.Event.Type.Wheel and source == self.widget.viewport():\nself.widget.v_scrollbar.scroll_by_value(-event.angleDelta().y())\nreturn True\nreturn False\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.mouseMoveEvent","title":"<code>mouseMoveEvent(e)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def mouseMoveEvent(self, e):\nself.animation.stop()\nself._value = self.value()\nsuper().mouseMoveEvent(e)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.mousePressEvent","title":"<code>mousePressEvent(e)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def mousePressEvent(self, e):\nself.animation.stop()\nself._value = self.value()\nsuper().mousePressEvent(e)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.mouseReleaseEvent","title":"<code>mouseReleaseEvent(e)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def mouseReleaseEvent(self, e):\nself.animation.stop()\nself._value = self.value()\nsuper().mouseReleaseEvent(e)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.reset_value","title":"<code>reset_value(value)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def reset_value(self, value):\nself._value = value\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.scroll_by_value","title":"<code>scroll_by_value(value: int)</code>","text":"<p>Scroll by given distance.</p> Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def scroll_by_value(self, value: int):\n\"\"\"Scroll by given distance.\"\"\"\nself._value += value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.scroll_to","title":"<code>scroll_to(value: int)</code>","text":"<p>Scroll to given position.</p> Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def scroll_to(self, value: int):\n\"\"\"Scroll to given position.\"\"\"\nself._value = value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.scrollbar.SmoothScrollBar.setValue","title":"<code>setValue(value: int)</code>","text":"Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>def setValue(self, value: int):\nif value == self.value():\nreturn\nself.animation.stop()\nself.scroll_ended.emit()\nself.animation.set_range(self.value(), value)\nself.animation.start()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SpacerItem","title":"<code>SpacerItem</code>","text":"<p>         Bases: <code>widgets.LayoutItemMixin</code>, <code>QtWidgets.QSpacerItem</code></p> Source code in <code>prettyqt\\widgets\\spaceritem.py</code> <pre><code>class SpacerItem(widgets.LayoutItemMixin, QtWidgets.QSpacerItem):\ndef __init__(\nself,\nw: int,\nh: int,\nh_policy: QtWidgets.QSizePolicy.Policy\n| widgets.sizepolicy.SizePolicyStr = \"minimum\",\nv_policy: QtWidgets.QSizePolicy.Policy\n| widgets.sizepolicy.SizePolicyStr = \"minimum\",\n):\nif isinstance(h_policy, QtWidgets.QSizePolicy.Policy):\nh_pol = h_policy\nelse:\nh_pol = widgets.sizepolicy.SIZE_POLICY[h_policy]\nif isinstance(v_policy, QtWidgets.QSizePolicy.Policy):\nv_pol = v_policy\nelse:\nv_pol = widgets.sizepolicy.SIZE_POLICY[v_policy]\nsuper().__init__(w, h, h_pol, v_pol)\ndef change_size(\nself,\nw: int,\nh: int,\nh_policy: widgets.sizepolicy.SizePolicyStr = \"minimum\",\nv_policy: widgets.sizepolicy.SizePolicyStr = \"minimum\",\n):\nh_pol = widgets.sizepolicy.SIZE_POLICY[h_policy]\nv_pol = widgets.sizepolicy.SIZE_POLICY[v_policy]\nself.changeSize(w, h, h_pol, v_pol)\ndef get_size_policy(self) -&gt; widgets.SizePolicy:\nreturn widgets.SizePolicy.clone(self.sizePolicy())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spaceritem.SpacerItem.__init__","title":"<code>__init__(w: int, h: int, h_policy: QtWidgets.QSizePolicy.Policy | widgets.sizepolicy.SizePolicyStr = 'minimum', v_policy: QtWidgets.QSizePolicy.Policy | widgets.sizepolicy.SizePolicyStr = 'minimum')</code>","text":"Source code in <code>prettyqt\\widgets\\spaceritem.py</code> <pre><code>def __init__(\nself,\nw: int,\nh: int,\nh_policy: QtWidgets.QSizePolicy.Policy\n| widgets.sizepolicy.SizePolicyStr = \"minimum\",\nv_policy: QtWidgets.QSizePolicy.Policy\n| widgets.sizepolicy.SizePolicyStr = \"minimum\",\n):\nif isinstance(h_policy, QtWidgets.QSizePolicy.Policy):\nh_pol = h_policy\nelse:\nh_pol = widgets.sizepolicy.SIZE_POLICY[h_policy]\nif isinstance(v_policy, QtWidgets.QSizePolicy.Policy):\nv_pol = v_policy\nelse:\nv_pol = widgets.sizepolicy.SIZE_POLICY[v_policy]\nsuper().__init__(w, h, h_pol, v_pol)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spaceritem.SpacerItem.change_size","title":"<code>change_size(w: int, h: int, h_policy: widgets.sizepolicy.SizePolicyStr = 'minimum', v_policy: widgets.sizepolicy.SizePolicyStr = 'minimum')</code>","text":"Source code in <code>prettyqt\\widgets\\spaceritem.py</code> <pre><code>def change_size(\nself,\nw: int,\nh: int,\nh_policy: widgets.sizepolicy.SizePolicyStr = \"minimum\",\nv_policy: widgets.sizepolicy.SizePolicyStr = \"minimum\",\n):\nh_pol = widgets.sizepolicy.SIZE_POLICY[h_policy]\nv_pol = widgets.sizepolicy.SIZE_POLICY[v_policy]\nself.changeSize(w, h, h_pol, v_pol)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spaceritem.SpacerItem.get_size_policy","title":"<code>get_size_policy() -&gt; widgets.SizePolicy</code>","text":"Source code in <code>prettyqt\\widgets\\spaceritem.py</code> <pre><code>def get_size_policy(self) -&gt; widgets.SizePolicy:\nreturn widgets.SizePolicy.clone(self.sizePolicy())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SpinBox","title":"<code>SpinBox</code>","text":"<p>         Bases: <code>widgets.AbstractSpinBoxMixin</code>, <code>QtWidgets.QSpinBox</code></p> Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>class SpinBox(widgets.AbstractSpinBoxMixin, QtWidgets.QSpinBox):\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.value_changed)\ndef set_range(self, start: int | None, end: int | None):\nself.setMinimum(start)\nself.setMaximum(end)\nsetRange = set_range\ndef set_minimum(self, value: int | None):\nif value is None:\nvalue = -2147483647\nsuper().setMinimum(value)\nsetMinimum = set_minimum\ndef set_maximum(self, value: int | None):\nif value is None:\nvalue = 2147483647\nsuper().setMaximum(value)\nsetMaximum = set_maximum\ndef set_step_size(self, step_size):\nself.setSingleStep(step_size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.setMaximum","title":"<code>setMaximum = set_maximum</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.setMinimum","title":"<code>setMinimum = set_minimum</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.setRange","title":"<code>setRange = set_range</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.value_changed","title":"<code>value_changed = core.Signal(int)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.value_changed)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.set_maximum","title":"<code>set_maximum(value: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>def set_maximum(self, value: int | None):\nif value is None:\nvalue = 2147483647\nsuper().setMaximum(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.set_minimum","title":"<code>set_minimum(value: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>def set_minimum(self, value: int | None):\nif value is None:\nvalue = -2147483647\nsuper().setMinimum(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.set_range","title":"<code>set_range(start: int | None, end: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>def set_range(self, start: int | None, end: int | None):\nself.setMinimum(start)\nself.setMaximum(end)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.spinbox.SpinBox.set_step_size","title":"<code>set_step_size(step_size)</code>","text":"Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>def set_step_size(self, step_size):\nself.setSingleStep(step_size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SplashScreen","title":"<code>SplashScreen</code>","text":"<p>         Bases: <code>SplashScreenMixin</code>, <code>QtWidgets.QSplashScreen</code></p> Source code in <code>prettyqt\\widgets\\splashscreen.py</code> <pre><code>class SplashScreen(SplashScreenMixin, QtWidgets.QSplashScreen):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Splitter","title":"<code>Splitter</code>","text":"<p>         Bases: <code>SplitterMixin</code>, <code>QtWidgets.QSplitter</code></p> Source code in <code>prettyqt\\widgets\\splitter.py</code> <pre><code>class Splitter(SplitterMixin, QtWidgets.QSplitter):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SplitterHandle","title":"<code>SplitterHandle</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QSplitterHandle</code></p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>class SplitterHandle(widgets.WidgetMixin, QtWidgets.QSplitterHandle):\ndouble_clicked = core.Signal(object)\ndef __init__(\nself,\norientation: constants.OrientationStr | QtCore.Qt.Orientation,\nparent: QtWidgets.QSplitter,\n**kwargs,\n):\nif isinstance(orientation, QtCore.Qt.Orientation):\nori = orientation\nelse:\nori = constants.ORIENTATION[orientation]\nsuper().__init__(ori, parent, **kwargs)\ndef mouseDoubleClickEvent(self, ev):\nself.double_clicked.emit(self)\ndef set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the slider.\n        Args:\n            orientation: orientation for the slider\n        Raises:\n            InvalidParamError: orientation does not exist\n        \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.double_clicked","title":"<code>double_clicked = core.Signal(object)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.__init__","title":"<code>__init__(orientation: constants.OrientationStr | QtCore.Qt.Orientation, parent: QtWidgets.QSplitter, **kwargs: QtWidgets.QSplitter)</code>","text":"Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def __init__(\nself,\norientation: constants.OrientationStr | QtCore.Qt.Orientation,\nparent: QtWidgets.QSplitter,\n**kwargs,\n):\nif isinstance(orientation, QtCore.Qt.Orientation):\nori = orientation\nelse:\nori = constants.ORIENTATION[orientation]\nsuper().__init__(ori, parent, **kwargs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> <p>Returns:</p> Type Description <code>constants.OrientationStr</code> <p>orientation</p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.mouseDoubleClickEvent","title":"<code>mouseDoubleClickEvent(ev)</code>","text":"Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def mouseDoubleClickEvent(self, ev):\nself.double_clicked.emit(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.splitterhandle.SplitterHandle.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr)</code>","text":"<p>Set the orientation of the slider.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr</code> <p>orientation for the slider</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>orientation does not exist</p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def set_orientation(self, orientation: constants.OrientationStr):\n\"\"\"Set the orientation of the slider.\n    Args:\n        orientation: orientation for the slider\n    Raises:\n        InvalidParamError: orientation does not exist\n    \"\"\"\nif orientation not in constants.ORIENTATION:\nraise InvalidParamError(orientation, constants.ORIENTATION)\nself.setOrientation(constants.ORIENTATION[orientation])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StackedLayout","title":"<code>StackedLayout</code>","text":"<p>         Bases: <code>widgets.LayoutMixin</code>, <code>QtWidgets.QStackedLayout</code></p> Source code in <code>prettyqt\\widgets\\stackedlayout.py</code> <pre><code>class StackedLayout(widgets.LayoutMixin, QtWidgets.QStackedLayout):\n# def serialize_fields(self):\n#     return dict(items=self.get_children())\n# def __setstate__(self, state):\n#     for item in state[\"items\"]:\n#         self.add(item)\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"stackingMode\": STACKING_MODE}\nreturn maps\ndef set_stacking_mode(self, mode: StackingModeStr):\nself.setStackingMode(STACKING_MODE[mode])\ndef get_stacking_mode(self) -&gt; StackingModeStr:\nreturn STACKING_MODE.inverse[self.stackingMode()]\ndef __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout):\nself.add(other)\nreturn self\ndef set_current_widget(self, widget: QtWidgets.QWidget):\nself.setCurrentWidget(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedlayout.StackedLayout.__add__","title":"<code>__add__(other: QtWidgets.QWidget | QtWidgets.QLayout)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedlayout.py</code> <pre><code>def __add__(self, other: QtWidgets.QWidget | QtWidgets.QLayout):\nself.add(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedlayout.StackedLayout.get_stacking_mode","title":"<code>get_stacking_mode() -&gt; StackingModeStr</code>","text":"Source code in <code>prettyqt\\widgets\\stackedlayout.py</code> <pre><code>def get_stacking_mode(self) -&gt; StackingModeStr:\nreturn STACKING_MODE.inverse[self.stackingMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedlayout.StackedLayout.set_current_widget","title":"<code>set_current_widget(widget: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedlayout.py</code> <pre><code>def set_current_widget(self, widget: QtWidgets.QWidget):\nself.setCurrentWidget(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedlayout.StackedLayout.set_stacking_mode","title":"<code>set_stacking_mode(mode: StackingModeStr)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedlayout.py</code> <pre><code>def set_stacking_mode(self, mode: StackingModeStr):\nself.setStackingMode(STACKING_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StackedWidget","title":"<code>StackedWidget</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code>, <code>QtWidgets.QStackedWidget</code></p> Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>class StackedWidget(widgets.FrameMixin, QtWidgets.QStackedWidget):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.direction = \"horizontal\"\nself.speed = 300\nself.animation_type = \"out_cubic\"\nself.now = 0\nself.next = 0\nself.wrap = False\nself.pnow = core.Point(0, 0)\nself.active = False\ndef __add__(self, other: QtWidgets.QWidget) -&gt; StackedWidget:\nself.addWidget(other)\nreturn self\ndef __getitem__(self, index: int) -&gt; QtWidgets.QWidget:\nreturn self.widget(index)\ndef __delitem__(self, item: int | QtWidgets.QWidget):\nif isinstance(item, int):\nitem = self.widget(item)\nself.removeWidget(item)\ndef __iter__(self) -&gt; Iterator[QtWidgets.QWidget]:\nreturn iter(self.widget(i) for i in range(self.count()))\ndef __len__(self):\n# needed for PySide2\nreturn self.count()\ndef __contains__(self, item: QtWidgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\ndef set_direction(self, direction: constants.OrientationStr):\nself.direction = direction\ndef set_speed(self, speed: int):\nself.speed = speed\ndef set_animation(self, animation_type: core.easingcurve.TypeStr):\nself.animation_type = animation_type\ndef set_wrap(self, wrap: bool):\nself.wrap = wrap\n@core.Slot()\ndef slide_in_previous(self):\nnow = self.currentIndex()\nif self.wrap or now &gt; 0:\nself.slide_in(now - 1)\n@core.Slot()\ndef slide_in_next(self):\nnow = self.currentIndex()\nif self.wrap or now &lt; (self.count() - 1):\nself.slide_in(now + 1)\ndef slide_in(self, idx: int | QtWidgets.QWidget):\nif self.active:\nreturn\nif isinstance(idx, int):\nif idx &gt; (self.count() - 1):\nidx = idx % self.count()\nelif idx &lt; 0:\nidx = (idx + self.count()) % self.count()\nidx = self.widget(idx)\nself.active = True\n_now = self.currentIndex()\n_next = self.indexOf(idx)\nif _now == _next:\nself.active = False\nreturn\noffsetx, offsety = self.frameRect().width(), self.frameRect().height()\nself.widget(_next).setGeometry(self.frameRect())\nif self.direction == \"horizontal\":\nif _now &lt; _next:\noffsetx, offsety = -offsetx, 0\nelse:\noffsety = 0\nelif _now &lt; _next:\noffsetx, offsety = 0, -offsety\nelse:\noffsetx = 0\npnext = self.widget(_next).pos()\npnow = self.widget(_now).pos()\nself.pnow = pnow\noffset = core.Point(offsetx, offsety)\nself.widget(_next).move(pnext - offset)\nself.widget(_next).show()\nself.widget(_next).raise_()\nanim_group = core.ParallelAnimationGroup(self, finished=self._on_animation_done)\nfor index, start, end in zip(\n(_now, _next), (pnow, pnext - offset), (pnow + offset, pnext)\n):\nanimation = core.PropertyAnimation(\nself.widget(index),\nb\"pos\",\nduration=self.speed,\neasing_curve=self.animation_type,\nstart_value=start,\nend_value=end,\n)\nanim_group.addAnimation(animation)\nself.next = _next\nself.now = _now\nself.active = True\nanim_group.start_animation(policy=\"delete\")\n@core.Slot()\ndef _on_animation_done(self):\nself.setCurrentIndex(self.next)\nself.widget(self.now).hide()\nself.widget(self.now).move(self.pnow)\nself.active = False\ndef fade_in(self, widget: int | QtWidgets.QWidget):\nwidget = self.widget(widget) if isinstance(widget, int) else widget\nself.fader_widget = FaderWidget(self.currentWidget(), widget, self.speed)\nself.setCurrentIndex(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.active","title":"<code>active = False</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.animation_type","title":"<code>animation_type = 'out_cubic'</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.direction","title":"<code>direction = 'horizontal'</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.next","title":"<code>next = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.now","title":"<code>now = 0</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.pnow","title":"<code>pnow = core.Point(0, 0)</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.speed","title":"<code>speed = 300</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.wrap","title":"<code>wrap = False</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__add__","title":"<code>__add__(other: QtWidgets.QWidget) -&gt; StackedWidget</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __add__(self, other: QtWidgets.QWidget) -&gt; StackedWidget:\nself.addWidget(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__contains__","title":"<code>__contains__(item: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __contains__(self, item: QtWidgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__delitem__","title":"<code>__delitem__(item: int | QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __delitem__(self, item: int | QtWidgets.QWidget):\nif isinstance(item, int):\nitem = self.widget(item)\nself.removeWidget(item)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QWidget:\nreturn self.widget(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.direction = \"horizontal\"\nself.speed = 300\nself.animation_type = \"out_cubic\"\nself.now = 0\nself.next = 0\nself.wrap = False\nself.pnow = core.Point(0, 0)\nself.active = False\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QWidget]</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QWidget]:\nreturn iter(self.widget(i) for i in range(self.count()))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def __len__(self):\n# needed for PySide2\nreturn self.count()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.fade_in","title":"<code>fade_in(widget: int | QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def fade_in(self, widget: int | QtWidgets.QWidget):\nwidget = self.widget(widget) if isinstance(widget, int) else widget\nself.fader_widget = FaderWidget(self.currentWidget(), widget, self.speed)\nself.setCurrentIndex(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.set_animation","title":"<code>set_animation(animation_type: core.easingcurve.TypeStr)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def set_animation(self, animation_type: core.easingcurve.TypeStr):\nself.animation_type = animation_type\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.set_direction","title":"<code>set_direction(direction: constants.OrientationStr)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def set_direction(self, direction: constants.OrientationStr):\nself.direction = direction\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.set_speed","title":"<code>set_speed(speed: int)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def set_speed(self, speed: int):\nself.speed = speed\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.set_wrap","title":"<code>set_wrap(wrap: bool)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def set_wrap(self, wrap: bool):\nself.wrap = wrap\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.slide_in","title":"<code>slide_in(idx: int | QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>def slide_in(self, idx: int | QtWidgets.QWidget):\nif self.active:\nreturn\nif isinstance(idx, int):\nif idx &gt; (self.count() - 1):\nidx = idx % self.count()\nelif idx &lt; 0:\nidx = (idx + self.count()) % self.count()\nidx = self.widget(idx)\nself.active = True\n_now = self.currentIndex()\n_next = self.indexOf(idx)\nif _now == _next:\nself.active = False\nreturn\noffsetx, offsety = self.frameRect().width(), self.frameRect().height()\nself.widget(_next).setGeometry(self.frameRect())\nif self.direction == \"horizontal\":\nif _now &lt; _next:\noffsetx, offsety = -offsetx, 0\nelse:\noffsety = 0\nelif _now &lt; _next:\noffsetx, offsety = 0, -offsety\nelse:\noffsetx = 0\npnext = self.widget(_next).pos()\npnow = self.widget(_now).pos()\nself.pnow = pnow\noffset = core.Point(offsetx, offsety)\nself.widget(_next).move(pnext - offset)\nself.widget(_next).show()\nself.widget(_next).raise_()\nanim_group = core.ParallelAnimationGroup(self, finished=self._on_animation_done)\nfor index, start, end in zip(\n(_now, _next), (pnow, pnext - offset), (pnow + offset, pnext)\n):\nanimation = core.PropertyAnimation(\nself.widget(index),\nb\"pos\",\nduration=self.speed,\neasing_curve=self.animation_type,\nstart_value=start,\nend_value=end,\n)\nanim_group.addAnimation(animation)\nself.next = _next\nself.now = _now\nself.active = True\nanim_group.start_animation(policy=\"delete\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.slide_in_next","title":"<code>slide_in_next()</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>@core.Slot()\ndef slide_in_next(self):\nnow = self.currentIndex()\nif self.wrap or now &lt; (self.count() - 1):\nself.slide_in(now + 1)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stackedwidget.StackedWidget.slide_in_previous","title":"<code>slide_in_previous()</code>","text":"Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>@core.Slot()\ndef slide_in_previous(self):\nnow = self.currentIndex()\nif self.wrap or now &gt; 0:\nself.slide_in(now - 1)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StatusBar","title":"<code>StatusBar</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QStatusBar</code></p> Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>class StatusBar(widgets.WidgetMixin, QtWidgets.QStatusBar):\ndef __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself.progress_bar = widgets.ProgressBar()\ndef __add__(self, other: QtGui.QAction | QtWidgets.QWidget) -&gt; StatusBar:\nmatch other:\ncase QtGui.QAction():\nself.addAction(other)\nreturn self\ncase QtWidgets.QWidget():\nself.addWidget(other)\nreturn self\ncase _:\nraise TypeError(other)\ndef setup_default_bar(self) -&gt; None:\n# This is simply to show the bar\nself.progress_bar.hide()\nself.progress_bar.setRange(0, 0)\nself.progress_bar.setFixedSize(200, 20)\nself.progress_bar.setTextVisible(False)\nself.addPermanentWidget(self.progress_bar)\ndef add_widget(self, widget: QtWidgets.QWidget, permanent: bool = False) -&gt; None:\nif permanent:\nself.addPermanentWidget(widget)\nelse:\nself.addWidget(widget)\ndef show_message(self, message: str, timeout: int = 0) -&gt; None:\nself.showMessage(message, timeout)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.statusbar.StatusBar.progress_bar","title":"<code>progress_bar = widgets.ProgressBar()</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.statusbar.StatusBar.__add__","title":"<code>__add__(other: QtGui.QAction | QtWidgets.QWidget) -&gt; StatusBar</code>","text":"Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>def __add__(self, other: QtGui.QAction | QtWidgets.QWidget) -&gt; StatusBar:\nmatch other:\ncase QtGui.QAction():\nself.addAction(other)\nreturn self\ncase QtWidgets.QWidget():\nself.addWidget(other)\nreturn self\ncase _:\nraise TypeError(other)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.statusbar.StatusBar.__init__","title":"<code>__init__(*args, **kwargs) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself.progress_bar = widgets.ProgressBar()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.statusbar.StatusBar.add_widget","title":"<code>add_widget(widget: QtWidgets.QWidget, permanent: bool = False) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>def add_widget(self, widget: QtWidgets.QWidget, permanent: bool = False) -&gt; None:\nif permanent:\nself.addPermanentWidget(widget)\nelse:\nself.addWidget(widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.statusbar.StatusBar.setup_default_bar","title":"<code>setup_default_bar() -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>def setup_default_bar(self) -&gt; None:\n# This is simply to show the bar\nself.progress_bar.hide()\nself.progress_bar.setRange(0, 0)\nself.progress_bar.setFixedSize(200, 20)\nself.progress_bar.setTextVisible(False)\nself.addPermanentWidget(self.progress_bar)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.statusbar.StatusBar.show_message","title":"<code>show_message(message: str, timeout: int = 0) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>def show_message(self, message: str, timeout: int = 0) -&gt; None:\nself.showMessage(message, timeout)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Style","title":"<code>Style</code>","text":"<p>         Bases: <code>StyleMixin</code>, <code>QtWidgets.QStyle</code></p> Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>class Style(StyleMixin, QtWidgets.QStyle):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleFactory","title":"<code>StyleFactory</code>","text":"<p>         Bases: <code>QtWidgets.QStyleFactory</code></p> Source code in <code>prettyqt\\widgets\\stylefactory.py</code> <pre><code>class StyleFactory(QtWidgets.QStyleFactory):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleMixin","title":"<code>StyleMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>class StyleMixin(core.ObjectMixin):\ndef draw_primitive(\nself,\nelement: SimpleControlStr,\noption: QtWidgets.QStyleOption,\npainter: QtGui.QPainter,\nwidget: QtWidgets.QWidget | None = None,\n):\nif element not in PRIMITIVE_ELEMENT:\nraise InvalidParamError(element, PRIMITIVE_ELEMENT)\nself.drawPrimitive(PRIMITIVE_ELEMENT[element], option, painter, widget)\ndef draw_control(\nself,\ncontrol: ControlElementStr,\noption: QtWidgets.QStyleOption,\npainter: QtGui.QPainter,\nwidget: QtWidgets.QWidget | None = None,\n):\nif control not in CONTROL_ELEMENT:\nraise InvalidParamError(control, CONTROL_ELEMENT)\nself.drawPrimitive(CONTROL_ELEMENT[control], option, painter, widget)\ndef get_layout_spacing(\nself,\ncontrol_1: widgets.sizepolicy.ControlTypeStr,\ncontrol_2: widgets.sizepolicy.ControlTypeStr,\norientation: constants.OrientationStr,\noption_or_widget: QtCore.QWidgets.QStyleOption | QtWidgets.QWidget | None = None,\n):\nc1 = widgets.sizepolicy.CONTROL_TYPE[control_1]\nc2 = widgets.sizepolicy.CONTROL_TYPE[control_2]\no = constants.ORIENTATION[orientation]\nmatch option_or_widget:\ncase QtWidgets.QWidget():\nreturn self.layoutSpacing(c1, c2, o, None, option_or_widget)\ncase QtWidgets.QStyleOption() | None:\nreturn self.layoutSpacing(c1, c2, o, option_or_widget)\ncase _:\nraise ValueError(option_or_widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.style.StyleMixin.draw_control","title":"<code>draw_control(control: ControlElementStr, option: QtWidgets.QStyleOption, painter: QtGui.QPainter, widget: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>def draw_control(\nself,\ncontrol: ControlElementStr,\noption: QtWidgets.QStyleOption,\npainter: QtGui.QPainter,\nwidget: QtWidgets.QWidget | None = None,\n):\nif control not in CONTROL_ELEMENT:\nraise InvalidParamError(control, CONTROL_ELEMENT)\nself.drawPrimitive(CONTROL_ELEMENT[control], option, painter, widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.style.StyleMixin.draw_primitive","title":"<code>draw_primitive(element: SimpleControlStr, option: QtWidgets.QStyleOption, painter: QtGui.QPainter, widget: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>def draw_primitive(\nself,\nelement: SimpleControlStr,\noption: QtWidgets.QStyleOption,\npainter: QtGui.QPainter,\nwidget: QtWidgets.QWidget | None = None,\n):\nif element not in PRIMITIVE_ELEMENT:\nraise InvalidParamError(element, PRIMITIVE_ELEMENT)\nself.drawPrimitive(PRIMITIVE_ELEMENT[element], option, painter, widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.style.StyleMixin.get_layout_spacing","title":"<code>get_layout_spacing(control_1: widgets.sizepolicy.ControlTypeStr, control_2: widgets.sizepolicy.ControlTypeStr, orientation: constants.OrientationStr, option_or_widget: QtCore.QWidgets.QStyleOption | QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>def get_layout_spacing(\nself,\ncontrol_1: widgets.sizepolicy.ControlTypeStr,\ncontrol_2: widgets.sizepolicy.ControlTypeStr,\norientation: constants.OrientationStr,\noption_or_widget: QtCore.QWidgets.QStyleOption | QtWidgets.QWidget | None = None,\n):\nc1 = widgets.sizepolicy.CONTROL_TYPE[control_1]\nc2 = widgets.sizepolicy.CONTROL_TYPE[control_2]\no = constants.ORIENTATION[orientation]\nmatch option_or_widget:\ncase QtWidgets.QWidget():\nreturn self.layoutSpacing(c1, c2, o, None, option_or_widget)\ncase QtWidgets.QStyleOption() | None:\nreturn self.layoutSpacing(c1, c2, o, option_or_widget)\ncase _:\nraise ValueError(option_or_widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOption","title":"<code>StyleOption</code>","text":"<p>         Bases: <code>StyleOptionMixin</code>, <code>QtWidgets.QStyleOption</code></p> Source code in <code>prettyqt\\widgets\\styleoption.py</code> <pre><code>class StyleOption(StyleOptionMixin, QtWidgets.QStyleOption):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionButton","title":"<code>StyleOptionButton</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionButton</code></p> Source code in <code>prettyqt\\widgets\\styleoptionbutton.py</code> <pre><code>class StyleOptionButton(widgets.StyleOptionMixin, QtWidgets.QStyleOptionButton):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionComboBox","title":"<code>StyleOptionComboBox</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>QtWidgets.QStyleOptionComboBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptioncombobox.py</code> <pre><code>class StyleOptionComboBox(\nwidgets.StyleOptionComplexMixin, QtWidgets.QStyleOptionComboBox\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionComplex","title":"<code>StyleOptionComplex</code>","text":"<p>         Bases: <code>StyleOptionComplexMixin</code>, <code>QtWidgets.QStyleOptionComplex</code></p> Source code in <code>prettyqt\\widgets\\styleoptioncomplex.py</code> <pre><code>class StyleOptionComplex(StyleOptionComplexMixin, QtWidgets.QStyleOptionComplex):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionComplexMixin","title":"<code>StyleOptionComplexMixin</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code></p> Source code in <code>prettyqt\\widgets\\styleoptioncomplex.py</code> <pre><code>class StyleOptionComplexMixin(widgets.StyleOptionMixin):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionDockWidget","title":"<code>StyleOptionDockWidget</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionDockWidget</code></p> Source code in <code>prettyqt\\widgets\\styleoptiondockwidget.py</code> <pre><code>class StyleOptionDockWidget(widgets.StyleOptionMixin, QtWidgets.QStyleOptionDockWidget):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionFocusRect","title":"<code>StyleOptionFocusRect</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionFocusRect</code></p> Source code in <code>prettyqt\\widgets\\styleoptionfocusrect.py</code> <pre><code>class StyleOptionFocusRect(widgets.StyleOptionMixin, QtWidgets.QStyleOptionFocusRect):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionFrame","title":"<code>StyleOptionFrame</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionFrame</code></p> Source code in <code>prettyqt\\widgets\\styleoptionframe.py</code> <pre><code>class StyleOptionFrame(widgets.StyleOptionMixin, QtWidgets.QStyleOptionFrame):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionGraphicsItem","title":"<code>StyleOptionGraphicsItem</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionGraphicsItem</code></p> Source code in <code>prettyqt\\widgets\\styleoptiongraphicsitem.py</code> <pre><code>class StyleOptionGraphicsItem(\nwidgets.StyleOptionMixin, QtWidgets.QStyleOptionGraphicsItem\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionGroupBox","title":"<code>StyleOptionGroupBox</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplex</code>, <code>QtWidgets.QStyleOptionGroupBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptiongroupbox.py</code> <pre><code>class StyleOptionGroupBox(widgets.StyleOptionComplex, QtWidgets.QStyleOptionGroupBox):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionHeader","title":"<code>StyleOptionHeader</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionHeader</code></p> Source code in <code>prettyqt\\widgets\\styleoptionheader.py</code> <pre><code>class StyleOptionHeader(widgets.StyleOptionMixin, QtWidgets.QStyleOptionHeader):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionMenuItem","title":"<code>StyleOptionMenuItem</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionMenuItem</code></p> Source code in <code>prettyqt\\widgets\\styleoptionmenuitem.py</code> <pre><code>class StyleOptionMenuItem(widgets.StyleOptionMixin, QtWidgets.QStyleOptionMenuItem):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionMixin","title":"<code>StyleOptionMixin</code>","text":"Source code in <code>prettyqt\\widgets\\styleoption.py</code> <pre><code>class StyleOptionMixin:\n@classmethod\ndef based_on(cls, widget: QtWidgets.QWidget) -&gt; Self:\nopt = cls()\nopt.initFrom(widget)\nreturn opt\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoption.StyleOptionMixin.based_on","title":"<code>based_on(widget: QtWidgets.QWidget) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\styleoption.py</code> <pre><code>@classmethod\ndef based_on(cls, widget: QtWidgets.QWidget) -&gt; Self:\nopt = cls()\nopt.initFrom(widget)\nreturn opt\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionProgressBar","title":"<code>StyleOptionProgressBar</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionProgressBar</code></p> Source code in <code>prettyqt\\widgets\\styleoptionprogressbar.py</code> <pre><code>class StyleOptionProgressBar(widgets.StyleOptionMixin, QtWidgets.QStyleOptionProgressBar):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionRubberBand","title":"<code>StyleOptionRubberBand</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionRubberBand</code></p> Source code in <code>prettyqt\\widgets\\styleoptionrubberband.py</code> <pre><code>class StyleOptionRubberBand(widgets.StyleOptionMixin, QtWidgets.QStyleOptionRubberBand):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionSizeGrip","title":"<code>StyleOptionSizeGrip</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>QtWidgets.QStyleOptionSizeGrip</code></p> Source code in <code>prettyqt\\widgets\\styleoptionsizegrip.py</code> <pre><code>class StyleOptionSizeGrip(\nwidgets.StyleOptionComplexMixin, QtWidgets.QStyleOptionSizeGrip\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionSlider","title":"<code>StyleOptionSlider</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>QtWidgets.QStyleOptionSlider</code></p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>class StyleOptionSlider(widgets.StyleOptionComplexMixin, QtWidgets.QStyleOptionSlider):\ndef is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n        Returns:\n            True if horizontal, else False\n        \"\"\"\nreturn self.orientation == constants.HORIZONTAL\ndef is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n        Returns:\n            True if vertical, else False\n        \"\"\"\nreturn self.orientation == constants.VERTICAL\ndef set_horizontal(self) -&gt; None:\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.orientation = constants.HORIZONTAL\ndef set_vertical(self) -&gt; None:\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.orientation = constants.VERTICAL\ndef get_orientation(self) -&gt; Literal[\"horizontal\", \"vertical\"]:\nreturn \"horizontal\" if self.is_horizontal() else \"vertical\"\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.get_orientation","title":"<code>get_orientation() -&gt; Literal['horizontal', 'vertical']</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def get_orientation(self) -&gt; Literal[\"horizontal\", \"vertical\"]:\nreturn \"horizontal\" if self.is_horizontal() else \"vertical\"\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.is_horizontal","title":"<code>is_horizontal() -&gt; bool</code>","text":"<p>Check if silder is horizontal.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if horizontal, else False</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n    Returns:\n        True if horizontal, else False\n    \"\"\"\nreturn self.orientation == constants.HORIZONTAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.is_vertical","title":"<code>is_vertical() -&gt; bool</code>","text":"<p>Check if silder is vertical.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if vertical, else False</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n    Returns:\n        True if vertical, else False\n    \"\"\"\nreturn self.orientation == constants.VERTICAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.set_horizontal","title":"<code>set_horizontal() -&gt; None</code>","text":"<p>Set slider orientation to horizontal.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def set_horizontal(self) -&gt; None:\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.orientation = constants.HORIZONTAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.set_vertical","title":"<code>set_vertical() -&gt; None</code>","text":"<p>Set slider orientation to vertical.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def set_vertical(self) -&gt; None:\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.orientation = constants.VERTICAL\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionSpinBox","title":"<code>StyleOptionSpinBox</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplex</code>, <code>QtWidgets.QStyleOptionSpinBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptionspinbox.py</code> <pre><code>class StyleOptionSpinBox(widgets.StyleOptionComplex, QtWidgets.QStyleOptionSpinBox):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionTab","title":"<code>StyleOptionTab</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionTab</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontab.py</code> <pre><code>class StyleOptionTab(widgets.StyleOptionMixin, QtWidgets.QStyleOptionTab):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionTabBarBase","title":"<code>StyleOptionTabBarBase</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionTabBarBase</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontabbarbase.py</code> <pre><code>class StyleOptionTabBarBase(widgets.StyleOptionMixin, QtWidgets.QStyleOptionTabBarBase):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionTabWidgetFrame","title":"<code>StyleOptionTabWidgetFrame</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionTabWidgetFrame</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontabwidgetframe.py</code> <pre><code>class StyleOptionTabWidgetFrame(\nwidgets.StyleOptionMixin, QtWidgets.QStyleOptionTabWidgetFrame\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionTitleBar","title":"<code>StyleOptionTitleBar</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplex</code>, <code>QtWidgets.QStyleOptionTitleBar</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontitlebar.py</code> <pre><code>class StyleOptionTitleBar(widgets.StyleOptionComplex, QtWidgets.QStyleOptionTitleBar):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionToolBar","title":"<code>StyleOptionToolBar</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionToolBar</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontoolbar.py</code> <pre><code>class StyleOptionToolBar(widgets.StyleOptionMixin, QtWidgets.QStyleOptionToolBar):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionToolBox","title":"<code>StyleOptionToolBox</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionToolBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontoolbox.py</code> <pre><code>class StyleOptionToolBox(widgets.StyleOptionMixin, QtWidgets.QStyleOptionToolBox):\ndef set_selected_position(self, position: SelectedPositionStr):\nself.selectedPosition = SELECTED_POSITION[position]\ndef get_selected_position(self) -&gt; SelectedPositionStr:\nreturn SELECTED_POSITION.inverse[self.selectedPosition]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptiontoolbox.StyleOptionToolBox.get_selected_position","title":"<code>get_selected_position() -&gt; SelectedPositionStr</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptiontoolbox.py</code> <pre><code>def get_selected_position(self) -&gt; SelectedPositionStr:\nreturn SELECTED_POSITION.inverse[self.selectedPosition]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptiontoolbox.StyleOptionToolBox.set_selected_position","title":"<code>set_selected_position(position: SelectedPositionStr)</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptiontoolbox.py</code> <pre><code>def set_selected_position(self, position: SelectedPositionStr):\nself.selectedPosition = SELECTED_POSITION[position]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionToolButton","title":"<code>StyleOptionToolButton</code>","text":"<p>         Bases: <code>widgets.StyleOptionComplex</code>, <code>QtWidgets.QStyleOptionToolButton</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontoolbutton.py</code> <pre><code>class StyleOptionToolButton(widgets.StyleOptionComplex, QtWidgets.QStyleOptionToolButton):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyleOptionViewItem","title":"<code>StyleOptionViewItem</code>","text":"<p>         Bases: <code>widgets.StyleOptionMixin</code>, <code>QtWidgets.QStyleOptionViewItem</code></p> Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>class StyleOptionViewItem(widgets.StyleOptionMixin, QtWidgets.QStyleOptionViewItem):\ndef get_view_item_position(self) -&gt; ViewItemPositionStr:\nreturn VIEW_ITEM_POSITION.inverse[self.viewItemPosition]\ndef get_features(self) -&gt; ViewItemFeatureStr:\nreturn VIEW_ITEM_FEATURE.get_list(self.features)\ndef get_decoration_position(self) -&gt; PositionStr:\nreturn POSITION.inverse[self.decorationPosition]\ndef get_checkstate(self) -&gt; constants.StateStr:\nreturn constants.STATE.inverse[self.checkState]\ndef get_decoration_alignment(self) -&gt; constants.AlignmentStr:\nreturn constants.ALIGNMENTS.inverse[self.decorationAlignment]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionviewitem.StyleOptionViewItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.StateStr</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.StateStr:\nreturn constants.STATE.inverse[self.checkState]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionviewitem.StyleOptionViewItem.get_decoration_alignment","title":"<code>get_decoration_alignment() -&gt; constants.AlignmentStr</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>def get_decoration_alignment(self) -&gt; constants.AlignmentStr:\nreturn constants.ALIGNMENTS.inverse[self.decorationAlignment]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionviewitem.StyleOptionViewItem.get_decoration_position","title":"<code>get_decoration_position() -&gt; PositionStr</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>def get_decoration_position(self) -&gt; PositionStr:\nreturn POSITION.inverse[self.decorationPosition]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionviewitem.StyleOptionViewItem.get_features","title":"<code>get_features() -&gt; ViewItemFeatureStr</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>def get_features(self) -&gt; ViewItemFeatureStr:\nreturn VIEW_ITEM_FEATURE.get_list(self.features)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.styleoptionviewitem.StyleOptionViewItem.get_view_item_position","title":"<code>get_view_item_position() -&gt; ViewItemPositionStr</code>","text":"Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>def get_view_item_position(self) -&gt; ViewItemPositionStr:\nreturn VIEW_ITEM_POSITION.inverse[self.viewItemPosition]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StylePainter","title":"<code>StylePainter</code>","text":"<p>         Bases: <code>gui.PainterMixin</code>, <code>QtWidgets.QStylePainter</code></p> Source code in <code>prettyqt\\widgets\\stylepainter.py</code> <pre><code>class StylePainter(gui.PainterMixin, QtWidgets.QStylePainter):\ndef draw_complex_control(\nself,\ncontrol: widgets.style.ComplexControlStr,\noption: QtWidgets.QStyleOptionComplex,\n):\nself.drawComplexControl(widgets.style.COMPLEX_CONTROL[control], option)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.stylepainter.StylePainter.draw_complex_control","title":"<code>draw_complex_control(control: widgets.style.ComplexControlStr, option: QtWidgets.QStyleOptionComplex)</code>","text":"Source code in <code>prettyqt\\widgets\\stylepainter.py</code> <pre><code>def draw_complex_control(\nself,\ncontrol: widgets.style.ComplexControlStr,\noption: QtWidgets.QStyleOptionComplex,\n):\nself.drawComplexControl(widgets.style.COMPLEX_CONTROL[control], option)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.StyledItemDelegate","title":"<code>StyledItemDelegate</code>","text":"<p>         Bases: <code>widgets.AbstractItemDelegateMixin</code>, <code>QtWidgets.QStyledItemDelegate</code></p> Source code in <code>prettyqt\\widgets\\styleditemdelegate.py</code> <pre><code>class StyledItemDelegate(\nwidgets.AbstractItemDelegateMixin, QtWidgets.QStyledItemDelegate\n):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SwipeGesture","title":"<code>SwipeGesture</code>","text":"<p>         Bases: <code>SwipeGestureMixin</code>, <code>QtWidgets.QSwipeGesture</code></p> Source code in <code>prettyqt\\widgets\\swipegesture.py</code> <pre><code>class SwipeGesture(SwipeGestureMixin, QtWidgets.QSwipeGesture):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.SystemTrayIcon","title":"<code>SystemTrayIcon</code>","text":"<p>         Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QSystemTrayIcon</code></p> Source code in <code>prettyqt\\widgets\\systemtrayicon.py</code> <pre><code>class SystemTrayIcon(core.ObjectMixin, QtWidgets.QSystemTrayIcon):\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the system tray icon.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef show_message(\nself,\ntitle: str,\nmessage: str = \"\",\nicon: datatypes.IconType = None,\ntimeout: int = 10,\n):\nif icon is None:\nico = gui.Icon()\nif icon in MESSAGE_ICONS:\nico = MESSAGE_ICONS[icon]\nelse:\nico = iconprovider.get_icon(icon)\nself.showMessage(title, message, ico, timeout * 1000)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.systemtrayicon.SystemTrayIcon.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the system tray icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\systemtrayicon.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the system tray icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.systemtrayicon.SystemTrayIcon.show_message","title":"<code>show_message(title: str, message: str = '', icon: datatypes.IconType = None, timeout: int = 10)</code>","text":"Source code in <code>prettyqt\\widgets\\systemtrayicon.py</code> <pre><code>def show_message(\nself,\ntitle: str,\nmessage: str = \"\",\nicon: datatypes.IconType = None,\ntimeout: int = 10,\n):\nif icon is None:\nico = gui.Icon()\nif icon in MESSAGE_ICONS:\nico = MESSAGE_ICONS[icon]\nelse:\nico = iconprovider.get_icon(icon)\nself.showMessage(title, message, ico, timeout * 1000)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TabBar","title":"<code>TabBar</code>","text":"<p>         Bases: <code>TabBarMixin</code>, <code>QtWidgets.QTabBar</code></p> Source code in <code>prettyqt\\widgets\\tabbar.py</code> <pre><code>class TabBar(TabBarMixin, QtWidgets.QTabBar):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TabWidget","title":"<code>TabWidget</code>","text":"<p>         Bases: <code>widgets.WidgetMixin</code>, <code>QtWidgets.QTabWidget</code></p> <p>Widget for managing the tabs section.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>class TabWidget(widgets.WidgetMixin, QtWidgets.QTabWidget):\n\"\"\"Widget for managing the tabs section.\"\"\"\ndef __init__(\nself, closable: bool = False, detachable: bool = False, **kwargs\n) -&gt; None:\n# Basic initalization\nsuper().__init__(**kwargs)\nself.tabCloseRequested.connect(self.remove_tab)\nself.tab_bar = widgets.TabBar(self)\nself.setTabBar(self.tab_bar)\n# Used to keep a reference to detached tabs since their QMainWindow\n# does not have a parent\nself.detached_tabs: dict[str, DetachedTab] = {}\nif detachable:\nself.set_detachable()\nself.set_closable(closable)\ndef __len__(self) -&gt; int:\nreturn self.count()\ndef __getitem__(self, index: int) -&gt; QtWidgets.QWidget:\nif isinstance(index, int):\nreturn self.widget(index)\nresult = self.findChild(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\ndef __contains__(self, item: QtWidgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\ndef update_tab_bar_visibility(self):\n\"\"\"Update visibility of the tabBar depending of the number of tabs.\n        0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible\n        need to be called explicitly, or be connected to tabInserted/tabRemoved\n        \"\"\"\nself.tabBar().setVisible(self.count() &gt; 1)\ndef set_icon_size(self, size: int | datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nif isinstance(size, int):\nsize = core.Size(size, size)\nelif isinstance(size, tuple):\nsize = core.Size(*size)\nself.setIconSize(size)\ndef set_document_mode(self, state: bool = True) -&gt; None:\nself.setDocumentMode(state)\ndef set_tab_shape(self, shape: TabShapeStr):\n\"\"\"Set tab shape for the tabwidget.\n        Args:\n            shape: tab shape to use\n        Raises:\n            InvalidParamError: tab shape does not exist\n        \"\"\"\nif shape not in TAB_SHAPES:\nraise InvalidParamError(shape, TAB_SHAPES)\nself.setTabShape(TAB_SHAPES[shape])\ndef get_tab_shape(self) -&gt; TabShapeStr:\n\"\"\"Return tab shape.\n        Returns:\n            tab shape\n        \"\"\"\nreturn TAB_SHAPES.inverse[self.tabShape()]\ndef set_tab_position(self, position: TabPositionStr):\n\"\"\"Set tab position for the tabwidget.\n        Args:\n            position: tab position to use\n        Raises:\n            InvalidParamError: tab position does not exist\n        \"\"\"\nif position not in TAB_POSITION:\nraise InvalidParamError(position, TAB_POSITION)\nself.setTabPosition(TAB_POSITION[position])\ndef get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return tab position.\n        Returns:\n            tab position\n        \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\ndef get_children(self) -&gt; list[tuple]:\nreturn [\n(\nself.widget(i),\nself.tabText(i),\nself.tab_icon(i),\nself.tabToolTip(i),\nself.tabWhatsThis(i),\n)\nfor i in range(self.count())\n]\ndef tab_icon(self, i: int) -&gt; gui.Icon | None:\nicon = self.tabIcon(i)\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_detachable(self):\nself.tab_bar.on_detach.connect(self.detach_tab)\ncore.CoreApplication.call_on_exit(self.close_detached_tabs)\nself.setMovable(True)\ndef set_closable(self, closable: bool = True):\nself.setTabsClosable(closable)\n@core.Slot(int, QtCore.QPoint)\ndef detach_tab(self, index: int, point: datatypes.PointType):\n\"\"\"Detach tab by removing its contents and placing them in a DetachedTab window.\n        Args:\n            index (int): index location of the tab to be detached\n            point (QtCore.QPoint): screen pos for creating the new DetachedTab window\n        \"\"\"\n# Get the tab content\nif isinstance(point, tuple):\npoint = QtCore.QPoint(*point)\nname = self.tabText(index)\nicon = self.tab_icon(index) or self.window().windowIcon()\nwidget = self.widget(index)\ntry:\nwidget_rect = widget.frameGeometry()\nexcept AttributeError:\nreturn\n# Create a new detached tab window\ndetached_tab = DetachedTab(name, widget)\ndetached_tab.set_modality(\"none\")\ndetached_tab.set_icon(icon)\ndetached_tab.setGeometry(widget_rect)\ndetached_tab.on_close.connect(self.attach_tab)\ndetached_tab.move(point)\ndetached_tab.show()\n# Create a reference to maintain access to the detached tab\nself.detached_tabs[name] = detached_tab\ndef add_tab(\nself,\nitem: QtWidgets.QWidget | QtWidgets.QLayout,\nlabel: str,\nicon: datatypes.IconType = None,\nposition: int | None = None,\nshow: bool = False,\n) -&gt; int:\nif isinstance(item, QtWidgets.QLayout):\nwidget = widgets.Widget()\nwidget.set_layout(item)\nelse:\nwidget = item\nif position is None:\nposition = len(self)\nif not icon:\nindex = self.insertTab(position, widget, label)\nelse:\nicon = iconprovider.get_icon(icon)\nindex = self.insertTab(position, widget, icon, label)\nif show:\nself.setCurrentIndex(index)\nreturn index\ndef attach_tab(\nself,\nwidget: QtWidgets.QWidget | QtWidgets.QLayout,\nname: str,\nicon: datatypes.IconType = None,\ninsert_at: int | None = None,\n):\n\"\"\"Re-attach tab.\n        Re-attach the tab by removing the content from the DetachedTab window,\n        closing it, and placing the content back into the DetachableTabWidget.\n        Args:\n            widget (Union[QtWidgets.QWidget, QtWidgets.QLayout]): the content widget\n                from the DetachedTab window\n            name (str): the name of the detached tab\n            icon (datatypes.IconType, optional): the window icon for the detached tab\n            insert_at (Optional[int], optional): insert the re-attached tab at the\n                given index\n        \"\"\"\nwidget.setParent(self)\n# Remove the reference\ndel self.detached_tabs[name]\n# Determine if the given image and the main window icon are the same.\n# If they are, then do not add the icon to the tab\nself.add_tab(widget, name, icon=icon, position=insert_at, show=True)\ndef close_detached_tabs(self):\n\"\"\"Close all tabs that are currently detached.\"\"\"\ntabs = list(self.detached_tabs.values())\nfor tab in tabs:\ntab.close()\n@core.Slot(int)\ndef remove_tab(self, index_or_widget: int | QtWidgets.QWidget):\nindex = (\nself.indexOf(index_or_widget)\nif isinstance(index_or_widget, QtWidgets.QWidget)\nelse index_or_widget\n)\nwidget = (\nself.widget(index_or_widget)\nif isinstance(index_or_widget, int)\nelse index_or_widget\n)\nself.removeTab(index)\nif widget is not None:\nwidget.deleteLater()\n@core.Slot(QtWidgets.QWidget, str)\ndef open_widget(self, widget: QtWidgets.QWidget, title: str = \"Unnamed\"):\n\"\"\"Create a tab containing delivered widget.\"\"\"\nself.add_tab(widget, title, icon=\"mdi.widgets\", show=True)\ndef set_tab(self, index: int, position: str, widget: QtWidgets.QWidget | None = None):\nself.tabBar().set_tab(index, position, widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.detached_tabs","title":"<code>detached_tabs: dict[str, DetachedTab] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.tab_bar","title":"<code>tab_bar = widgets.TabBar(self)</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.__contains__","title":"<code>__contains__(item: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def __contains__(self, item: QtWidgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QWidget:\nif isinstance(index, int):\nreturn self.widget(index)\nresult = self.findChild(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.__init__","title":"<code>__init__(closable: bool = False, detachable: bool = False, **kwargs: bool) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def __init__(\nself, closable: bool = False, detachable: bool = False, **kwargs\n) -&gt; None:\n# Basic initalization\nsuper().__init__(**kwargs)\nself.tabCloseRequested.connect(self.remove_tab)\nself.tab_bar = widgets.TabBar(self)\nself.setTabBar(self.tab_bar)\n# Used to keep a reference to detached tabs since their QMainWindow\n# does not have a parent\nself.detached_tabs: dict[str, DetachedTab] = {}\nif detachable:\nself.set_detachable()\nself.set_closable(closable)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.__len__","title":"<code>__len__() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def __len__(self) -&gt; int:\nreturn self.count()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.add_tab","title":"<code>add_tab(item: QtWidgets.QWidget | QtWidgets.QLayout, label: str, icon: datatypes.IconType = None, position: int | None = None, show: bool = False) -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def add_tab(\nself,\nitem: QtWidgets.QWidget | QtWidgets.QLayout,\nlabel: str,\nicon: datatypes.IconType = None,\nposition: int | None = None,\nshow: bool = False,\n) -&gt; int:\nif isinstance(item, QtWidgets.QLayout):\nwidget = widgets.Widget()\nwidget.set_layout(item)\nelse:\nwidget = item\nif position is None:\nposition = len(self)\nif not icon:\nindex = self.insertTab(position, widget, label)\nelse:\nicon = iconprovider.get_icon(icon)\nindex = self.insertTab(position, widget, icon, label)\nif show:\nself.setCurrentIndex(index)\nreturn index\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.attach_tab","title":"<code>attach_tab(widget: QtWidgets.QWidget | QtWidgets.QLayout, name: str, icon: datatypes.IconType = None, insert_at: int | None = None)</code>","text":"<p>Re-attach tab.</p> <p>Re-attach the tab by removing the content from the DetachedTab window, closing it, and placing the content back into the DetachableTabWidget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Union[QtWidgets.QWidget, QtWidgets.QLayout]</code> <p>the content widget from the DetachedTab window</p> required <code>name</code> <code>str</code> <p>the name of the detached tab</p> required <code>icon</code> <code>datatypes.IconType</code> <p>the window icon for the detached tab</p> <code>None</code> <code>insert_at</code> <code>Optional[int]</code> <p>insert the re-attached tab at the given index</p> <code>None</code> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def attach_tab(\nself,\nwidget: QtWidgets.QWidget | QtWidgets.QLayout,\nname: str,\nicon: datatypes.IconType = None,\ninsert_at: int | None = None,\n):\n\"\"\"Re-attach tab.\n    Re-attach the tab by removing the content from the DetachedTab window,\n    closing it, and placing the content back into the DetachableTabWidget.\n    Args:\n        widget (Union[QtWidgets.QWidget, QtWidgets.QLayout]): the content widget\n            from the DetachedTab window\n        name (str): the name of the detached tab\n        icon (datatypes.IconType, optional): the window icon for the detached tab\n        insert_at (Optional[int], optional): insert the re-attached tab at the\n            given index\n    \"\"\"\nwidget.setParent(self)\n# Remove the reference\ndel self.detached_tabs[name]\n# Determine if the given image and the main window icon are the same.\n# If they are, then do not add the icon to the tab\nself.add_tab(widget, name, icon=icon, position=insert_at, show=True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.close_detached_tabs","title":"<code>close_detached_tabs()</code>","text":"<p>Close all tabs that are currently detached.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def close_detached_tabs(self):\n\"\"\"Close all tabs that are currently detached.\"\"\"\ntabs = list(self.detached_tabs.values())\nfor tab in tabs:\ntab.close()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.detach_tab","title":"<code>detach_tab(index: int, point: datatypes.PointType)</code>","text":"<p>Detach tab by removing its contents and placing them in a DetachedTab window.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index location of the tab to be detached</p> required <code>point</code> <code>QtCore.QPoint</code> <p>screen pos for creating the new DetachedTab window</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(int, QtCore.QPoint)\ndef detach_tab(self, index: int, point: datatypes.PointType):\n\"\"\"Detach tab by removing its contents and placing them in a DetachedTab window.\n    Args:\n        index (int): index location of the tab to be detached\n        point (QtCore.QPoint): screen pos for creating the new DetachedTab window\n    \"\"\"\n# Get the tab content\nif isinstance(point, tuple):\npoint = QtCore.QPoint(*point)\nname = self.tabText(index)\nicon = self.tab_icon(index) or self.window().windowIcon()\nwidget = self.widget(index)\ntry:\nwidget_rect = widget.frameGeometry()\nexcept AttributeError:\nreturn\n# Create a new detached tab window\ndetached_tab = DetachedTab(name, widget)\ndetached_tab.set_modality(\"none\")\ndetached_tab.set_icon(icon)\ndetached_tab.setGeometry(widget_rect)\ndetached_tab.on_close.connect(self.attach_tab)\ndetached_tab.move(point)\ndetached_tab.show()\n# Create a reference to maintain access to the detached tab\nself.detached_tabs[name] = detached_tab\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.get_children","title":"<code>get_children() -&gt; list[tuple]</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_children(self) -&gt; list[tuple]:\nreturn [\n(\nself.widget(i),\nself.tabText(i),\nself.tab_icon(i),\nself.tabToolTip(i),\nself.tabWhatsThis(i),\n)\nfor i in range(self.count())\n]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.get_tab_position","title":"<code>get_tab_position() -&gt; TabPositionStr</code>","text":"<p>Return tab position.</p> <p>Returns:</p> Type Description <code>TabPositionStr</code> <p>tab position</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return tab position.\n    Returns:\n        tab position\n    \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.get_tab_shape","title":"<code>get_tab_shape() -&gt; TabShapeStr</code>","text":"<p>Return tab shape.</p> <p>Returns:</p> Type Description <code>TabShapeStr</code> <p>tab shape</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_tab_shape(self) -&gt; TabShapeStr:\n\"\"\"Return tab shape.\n    Returns:\n        tab shape\n    \"\"\"\nreturn TAB_SHAPES.inverse[self.tabShape()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.open_widget","title":"<code>open_widget(widget: QtWidgets.QWidget, title: str = 'Unnamed')</code>","text":"<p>Create a tab containing delivered widget.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(QtWidgets.QWidget, str)\ndef open_widget(self, widget: QtWidgets.QWidget, title: str = \"Unnamed\"):\n\"\"\"Create a tab containing delivered widget.\"\"\"\nself.add_tab(widget, title, icon=\"mdi.widgets\", show=True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.remove_tab","title":"<code>remove_tab(index_or_widget: int | QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(int)\ndef remove_tab(self, index_or_widget: int | QtWidgets.QWidget):\nindex = (\nself.indexOf(index_or_widget)\nif isinstance(index_or_widget, QtWidgets.QWidget)\nelse index_or_widget\n)\nwidget = (\nself.widget(index_or_widget)\nif isinstance(index_or_widget, int)\nelse index_or_widget\n)\nself.removeTab(index)\nif widget is not None:\nwidget.deleteLater()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_closable","title":"<code>set_closable(closable: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_closable(self, closable: bool = True):\nself.setTabsClosable(closable)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_detachable","title":"<code>set_detachable()</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_detachable(self):\nself.tab_bar.on_detach.connect(self.detach_tab)\ncore.CoreApplication.call_on_exit(self.close_detached_tabs)\nself.setMovable(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_document_mode","title":"<code>set_document_mode(state: bool = True) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_document_mode(self, state: bool = True) -&gt; None:\nself.setDocumentMode(state)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_icon_size","title":"<code>set_icon_size(size: int | datatypes.SizeType)</code>","text":"<p>Set size of the icons.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_icon_size(self, size: int | datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nif isinstance(size, int):\nsize = core.Size(size, size)\nelif isinstance(size, tuple):\nsize = core.Size(*size)\nself.setIconSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_tab","title":"<code>set_tab(index: int, position: str, widget: QtWidgets.QWidget | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab(self, index: int, position: str, widget: QtWidgets.QWidget | None = None):\nself.tabBar().set_tab(index, position, widget)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_tab_position","title":"<code>set_tab_position(position: TabPositionStr)</code>","text":"<p>Set tab position for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TabPositionStr</code> <p>tab position to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>tab position does not exist</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab_position(self, position: TabPositionStr):\n\"\"\"Set tab position for the tabwidget.\n    Args:\n        position: tab position to use\n    Raises:\n        InvalidParamError: tab position does not exist\n    \"\"\"\nif position not in TAB_POSITION:\nraise InvalidParamError(position, TAB_POSITION)\nself.setTabPosition(TAB_POSITION[position])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.set_tab_shape","title":"<code>set_tab_shape(shape: TabShapeStr)</code>","text":"<p>Set tab shape for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>TabShapeStr</code> <p>tab shape to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>tab shape does not exist</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab_shape(self, shape: TabShapeStr):\n\"\"\"Set tab shape for the tabwidget.\n    Args:\n        shape: tab shape to use\n    Raises:\n        InvalidParamError: tab shape does not exist\n    \"\"\"\nif shape not in TAB_SHAPES:\nraise InvalidParamError(shape, TAB_SHAPES)\nself.setTabShape(TAB_SHAPES[shape])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.tab_icon","title":"<code>tab_icon(i: int) -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def tab_icon(self, i: int) -&gt; gui.Icon | None:\nicon = self.tabIcon(i)\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tabwidget.TabWidget.update_tab_bar_visibility","title":"<code>update_tab_bar_visibility()</code>","text":"<p>Update visibility of the tabBar depending of the number of tabs.</p> <p>0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible need to be called explicitly, or be connected to tabInserted/tabRemoved</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def update_tab_bar_visibility(self):\n\"\"\"Update visibility of the tabBar depending of the number of tabs.\n    0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible\n    need to be called explicitly, or be connected to tabInserted/tabRemoved\n    \"\"\"\nself.tabBar().setVisible(self.count() &gt; 1)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableView","title":"<code>TableView</code>","text":"<p>         Bases: <code>TableViewMixin</code>, <code>QtWidgets.QTableView</code></p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>class TableView(TableViewMixin, QtWidgets.QTableView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableViewMixin","title":"<code>TableViewMixin</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>class TableViewMixin(widgets.AbstractItemViewMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nclass_name = type(self).__name__\nself.set_id(class_name)\nself.setHorizontalHeader(widgets.HeaderView(\"horizontal\", parent=self))\nself.setVerticalHeader(widgets.HeaderView(\"vertical\", parent=self))\nself.setAlternatingRowColors(True)\nself.setWordWrap(False)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"gridStyle\": constants.PEN_STYLE}\nreturn maps\n@property\ndef h_header(self):\nreturn self.horizontalHeader()\n@h_header.setter\ndef h_header(self, header):\nself.setHorizontalHeader(header)\n@property\ndef v_header(self):\nreturn self.verticalHeader()\n@v_header.setter\ndef v_header(self, header):\nself.setVerticalHeader(header)\ndef set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\ndef setup_list_style(self):\nself.set_selection_behavior(\"rows\")\nself.h_header.setStretchLastSection(True)\nself.v_header.set_resize_mode(\"fixed\")\nself.v_header.set_default_section_size(28)\ndef adapt_sizes(self):\nmodel = self.model()\nif model is not None and (model.rowCount() * model.columnCount()) &lt; 1000:\nself.resizeColumnsToContents()\nelse:\nself.h_header.resize_sections(\"interactive\")\ndef sort_by_column(self, column: int | None, ascending: bool = True):\ncolumn = -1 if column is None else column\norder = constants.ASCENDING if ascending else constants.DESCENDING\nself.sortByColumn(column, order)\ndef set_grid_style(self, style: constants.PenStyleStr):\n\"\"\"Set grid style.\n        Args:\n            style: grid style to use\n        Raises:\n            InvalidParamError: invalid grid style\n        \"\"\"\nif style not in constants.PEN_STYLE:\nraise InvalidParamError(style, constants.PEN_STYLE)\nself.setGridStyle(constants.PEN_STYLE[style])\ndef get_grid_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return grid style.\n        Returns:\n            grid style\n        \"\"\"\nreturn constants.PEN_STYLE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.h_header","title":"<code>h_header</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.v_header","title":"<code>v_header</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nclass_name = type(self).__name__\nself.set_id(class_name)\nself.setHorizontalHeader(widgets.HeaderView(\"horizontal\", parent=self))\nself.setVerticalHeader(widgets.HeaderView(\"vertical\", parent=self))\nself.setAlternatingRowColors(True)\nself.setWordWrap(False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.adapt_sizes","title":"<code>adapt_sizes()</code>","text":"Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def adapt_sizes(self):\nmodel = self.model()\nif model is not None and (model.rowCount() * model.columnCount()) &lt; 1000:\nself.resizeColumnsToContents()\nelse:\nself.h_header.resize_sections(\"interactive\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.get_grid_style","title":"<code>get_grid_style() -&gt; constants.PenStyleStr</code>","text":"<p>Return grid style.</p> <p>Returns:</p> Type Description <code>constants.PenStyleStr</code> <p>grid style</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def get_grid_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return grid style.\n    Returns:\n        grid style\n    \"\"\"\nreturn constants.PEN_STYLE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.set_grid_style","title":"<code>set_grid_style(style: constants.PenStyleStr)</code>","text":"<p>Set grid style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr</code> <p>grid style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid grid style</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def set_grid_style(self, style: constants.PenStyleStr):\n\"\"\"Set grid style.\n    Args:\n        style: grid style to use\n    Raises:\n        InvalidParamError: invalid grid style\n    \"\"\"\nif style not in constants.PEN_STYLE:\nraise InvalidParamError(style, constants.PEN_STYLE)\nself.setGridStyle(constants.PEN_STYLE[style])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.set_sorting_enabled","title":"<code>set_sorting_enabled(enabled: bool, do_sort: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.setup_list_style","title":"<code>setup_list_style()</code>","text":"Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def setup_list_style(self):\nself.set_selection_behavior(\"rows\")\nself.h_header.setStretchLastSection(True)\nself.v_header.set_resize_mode(\"fixed\")\nself.v_header.set_default_section_size(28)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tableview.TableViewMixin.sort_by_column","title":"<code>sort_by_column(column: int | None, ascending: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def sort_by_column(self, column: int | None, ascending: bool = True):\ncolumn = -1 if column is None else column\norder = constants.ASCENDING if ascending else constants.DESCENDING\nself.sortByColumn(column, order)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableWidget","title":"<code>TableWidget</code>","text":"<p>         Bases: <code>TableWidgetMixin</code>, <code>QtWidgets.QTableWidget</code></p> Source code in <code>prettyqt\\widgets\\tablewidget.py</code> <pre><code>class TableWidget(TableWidgetMixin, QtWidgets.QTableWidget):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableWidgetItem","title":"<code>TableWidgetItem</code>","text":"<p>         Bases: <code>QtWidgets.QTableWidgetItem</code></p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>class TableWidgetItem(QtWidgets.QTableWidgetItem):\ndef __setitem__(self, index: int | constants.ItemDataRoleStr, value):\nself.set_data(index, value)\ndef __getitem__(self, index: int | constants.ItemDataRoleStr):\nreturn self.get_data(index)\ndef serialize_fields(self):\nreturn dict(\ntext=self.text(),\ntool_tip=self.toolTip(),\nstatus_tip=self.statusTip(),\ncheckstate=self.get_checkstate(),\nicon=self.get_icon(),\ndata=self.data(constants.USER_ROLE),  # type: ignore\n)\ndef set_editable(self, editable: bool):\n\"\"\"Set whether this item is user-editable.\"\"\"\nif editable:\nself.setFlags(self.flags() | QtCore.Qt.ItemFlag.ItemIsEditable)\nelse:\nself.setFlags(self.flags() &amp; ~QtCore.Qt.ItemFlag.ItemIsEditable)\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        Raises:\n            InvalidParamError: invalid checkstate\n        \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\ndef get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\ndef set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n        Args:\n            horizontal: horizontal text alignment to use\n            vertical: vertical text alignment to use\n        Raises:\n            InvalidParamError: invalid text alignment\n        \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setTextAlignment(flag)\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_data(self, role: constants.ItemDataRoleStr | int, data: Any):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(role, data)\ndef get_data(self, role: constants.ItemDataRoleStr | int) -&gt; Any:\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\nself.setToolTip(tooltip)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.__getitem__","title":"<code>__getitem__(index: int | constants.ItemDataRoleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def __getitem__(self, index: int | constants.ItemDataRoleStr):\nreturn self.get_data(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.__setitem__","title":"<code>__setitem__(index: int | constants.ItemDataRoleStr, value: int | constants.ItemDataRoleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def __setitem__(self, index: int | constants.ItemDataRoleStr, value):\nself.set_data(index, value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_background","title":"<code>get_background() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.StateStr</code>","text":"<p>Return checkstate.</p> <p>Returns:</p> Type Description <code>constants.StateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_data","title":"<code>get_data(role: constants.ItemDataRoleStr | int) -&gt; Any</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_data(self, role: constants.ItemDataRoleStr | int) -&gt; Any:\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_foreground","title":"<code>get_foreground() -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def serialize_fields(self):\nreturn dict(\ntext=self.text(),\ntool_tip=self.toolTip(),\nstatus_tip=self.statusTip(),\ncheckstate=self.get_checkstate(),\nicon=self.get_icon(),\ndata=self.data(constants.USER_ROLE),  # type: ignore\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.StateStr)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.StateStr</code> <p>checkstate to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid checkstate</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.StateStr):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    Raises:\n        InvalidParamError: invalid checkstate\n    \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(constants.STATE[state])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_data","title":"<code>set_data(role: constants.ItemDataRoleStr | int, data: Any)</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_data(self, role: constants.ItemDataRoleStr | int, data: Any):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(role, data)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_editable","title":"<code>set_editable(editable: bool)</code>","text":"<p>Set whether this item is user-editable.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_editable(self, editable: bool):\n\"\"\"Set whether this item is user-editable.\"\"\"\nif editable:\nself.setFlags(self.flags() | QtCore.Qt.ItemFlag.ItemIsEditable)\nelse:\nself.setFlags(self.flags() &amp; ~QtCore.Qt.ItemFlag.ItemIsEditable)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_text_alignment","title":"<code>set_text_alignment(horizontal: constants.HorizontalAlignmentStr | None = None, vertical: constants.VerticalAlignmentStr | None = None)</code>","text":"<p>Set text alignment of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>constants.HorizontalAlignmentStr | None</code> <p>horizontal text alignment to use</p> <code>None</code> <code>vertical</code> <code>constants.VerticalAlignmentStr | None</code> <p>vertical text alignment to use</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid text alignment</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n    Args:\n        horizontal: horizontal text alignment to use\n        vertical: vertical text alignment to use\n    Raises:\n        InvalidParamError: invalid text alignment\n    \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_tooltip","title":"<code>set_tooltip(tooltip: str | datatypes.PathType, size: datatypes.SizeType | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\nself.setToolTip(tooltip)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TableWidgetSelectionRange","title":"<code>TableWidgetSelectionRange</code>","text":"<p>         Bases: <code>QtWidgets.QTableWidgetSelectionRange</code></p> Source code in <code>prettyqt\\widgets\\tablewidgetselectionrange.py</code> <pre><code>class TableWidgetSelectionRange(QtWidgets.QTableWidgetSelectionRange):\ndef __repr__(self):\nreturn get_repr(\nself, self.topRow(), self.leftColumn(), self.bottomRow(), self.rightColumn()\n)\ndef __eq__(self, other: object):\nreturn (\n(\nself.topRow() == other.topRow()\nand self.bottomRow() == other.bottomRow()\nand self.leftColumn() == other.leftColumn()\nand self.rightColumn() == other.rightColumn()\n)\nif isinstance(other, TableWidgetSelectionRange)\nelse False\n)\ndef __or__(\nself, other: QtWidgets.QTableWidgetSelectionRange\n) -&gt; TableWidgetSelectionRange:\nreturn TableWidgetSelectionRange(\nmin(self.topRow(), other.topRow()),\nmin(self.leftColumn(), other.leftColumn()),\nmax(self.bottomRow(), other.bottomRow()),\nmax(self.rightColumn(), other.rightColumn()),\n)\ndef __and__(\nself, other: QtWidgets.QTableWidgetSelectionRange\n) -&gt; TableWidgetSelectionRange:\nreturn (\nTableWidgetSelectionRange()\nif other.topRow() &gt; self.bottomRow()\nand other.bottomRow() &lt; self.topRow()\nand other.leftColumn() &gt; self.rightColumn()\nand other.rightColumn() &lt; self.leftColumn()\nelse TableWidgetSelectionRange(\nmax(self.topRow(), other.topRow()),\nmax(self.leftColumn(), other.leftColumn()),\nmin(self.bottomRow(), other.bottomRow()),\nmin(self.rightColumn(), other.rightColumn()),\n)\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetselectionrange.TableWidgetSelectionRange.__and__","title":"<code>__and__(other: QtWidgets.QTableWidgetSelectionRange) -&gt; TableWidgetSelectionRange</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetselectionrange.py</code> <pre><code>def __and__(\nself, other: QtWidgets.QTableWidgetSelectionRange\n) -&gt; TableWidgetSelectionRange:\nreturn (\nTableWidgetSelectionRange()\nif other.topRow() &gt; self.bottomRow()\nand other.bottomRow() &lt; self.topRow()\nand other.leftColumn() &gt; self.rightColumn()\nand other.rightColumn() &lt; self.leftColumn()\nelse TableWidgetSelectionRange(\nmax(self.topRow(), other.topRow()),\nmax(self.leftColumn(), other.leftColumn()),\nmin(self.bottomRow(), other.bottomRow()),\nmin(self.rightColumn(), other.rightColumn()),\n)\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetselectionrange.TableWidgetSelectionRange.__eq__","title":"<code>__eq__(other: object)</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetselectionrange.py</code> <pre><code>def __eq__(self, other: object):\nreturn (\n(\nself.topRow() == other.topRow()\nand self.bottomRow() == other.bottomRow()\nand self.leftColumn() == other.leftColumn()\nand self.rightColumn() == other.rightColumn()\n)\nif isinstance(other, TableWidgetSelectionRange)\nelse False\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetselectionrange.TableWidgetSelectionRange.__or__","title":"<code>__or__(other: QtWidgets.QTableWidgetSelectionRange) -&gt; TableWidgetSelectionRange</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetselectionrange.py</code> <pre><code>def __or__(\nself, other: QtWidgets.QTableWidgetSelectionRange\n) -&gt; TableWidgetSelectionRange:\nreturn TableWidgetSelectionRange(\nmin(self.topRow(), other.topRow()),\nmin(self.leftColumn(), other.leftColumn()),\nmax(self.bottomRow(), other.bottomRow()),\nmax(self.rightColumn(), other.rightColumn()),\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tablewidgetselectionrange.TableWidgetSelectionRange.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\tablewidgetselectionrange.py</code> <pre><code>def __repr__(self):\nreturn get_repr(\nself, self.topRow(), self.leftColumn(), self.bottomRow(), self.rightColumn()\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TapAndHoldGesture","title":"<code>TapAndHoldGesture</code>","text":"<p>         Bases: <code>widgets.GestureMixin</code>, <code>QtWidgets.QTapAndHoldGesture</code></p> Source code in <code>prettyqt\\widgets\\tapandholdgesture.py</code> <pre><code>class TapAndHoldGesture(widgets.GestureMixin, QtWidgets.QTapAndHoldGesture):\ndef get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tapandholdgesture.TapAndHoldGesture.get_position","title":"<code>get_position() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\tapandholdgesture.py</code> <pre><code>def get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TapGesture","title":"<code>TapGesture</code>","text":"<p>         Bases: <code>widgets.GestureMixin</code>, <code>QtWidgets.QTapGesture</code></p> Source code in <code>prettyqt\\widgets\\tapgesture.py</code> <pre><code>class TapGesture(widgets.GestureMixin, QtWidgets.QTapGesture):\ndef get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tapgesture.TapGesture.get_position","title":"<code>get_position() -&gt; core.PointF</code>","text":"Source code in <code>prettyqt\\widgets\\tapgesture.py</code> <pre><code>def get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TextBrowser","title":"<code>TextBrowser</code>","text":"<p>         Bases: <code>widgets.TextEditMixin</code>, <code>QtWidgets.QTextBrowser</code></p> Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>class TextBrowser(widgets.TextEditMixin, QtWidgets.QTextBrowser):\nvalue_changed = core.Signal(str)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setOpenExternalLinks(True)\n# def dragEnterEvent(self, event):\n#     u = event.mimeData().urls()\n#     for url in u:\n#         file_path = os.path.abspath(url.toLocalFile())\n#         ext = file_path.split(\".\")[-1]\n#         if ext in [\"txt\", \"md\", \"markdown\"]:\n#             event.accept()\n#         else:\n#             event.ignore()\n# def dropEvent(self, event):\n#     event.accept()\n#     self.show_markdown_file(self.filePath)\ndef set_markdown_file(self, file_path: datatypes.PathType):\nfile_path = pathlib.Path(file_path)\nwith file_path.open() as f:\nfile_content = f.read()\nself.set_markdown(file_content)\ndef set_markdown(self, source: str):\nself.setMarkdown(source)\ndef set_rst_file(self, file_path: datatypes.PathType):\nfile_path = pathlib.Path(file_path)\nwith file_path.open() as f:\nfile_content = f.read()\nself.set_rst(file_content)\ndef set_rst(self, source: str):\nimport docutils.core\nhtml = docutils.core.publish_string(source, writer_name=\"html\")\nself.setHtml(str(html))\ndef get_search_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.searchPaths()]\ndef set_search_paths(self, paths: list[datatypes.PathType]):\nself.setSearchPaths([os.fspath(p) for p in paths])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.value_changed","title":"<code>value_changed = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setOpenExternalLinks(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.get_search_paths","title":"<code>get_search_paths() -&gt; list[pathlib.Path]</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def get_search_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.searchPaths()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.set_markdown","title":"<code>set_markdown(source: str)</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def set_markdown(self, source: str):\nself.setMarkdown(source)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.set_markdown_file","title":"<code>set_markdown_file(file_path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def set_markdown_file(self, file_path: datatypes.PathType):\nfile_path = pathlib.Path(file_path)\nwith file_path.open() as f:\nfile_content = f.read()\nself.set_markdown(file_content)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.set_rst","title":"<code>set_rst(source: str)</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def set_rst(self, source: str):\nimport docutils.core\nhtml = docutils.core.publish_string(source, writer_name=\"html\")\nself.setHtml(str(html))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.set_rst_file","title":"<code>set_rst_file(file_path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def set_rst_file(self, file_path: datatypes.PathType):\nfile_path = pathlib.Path(file_path)\nwith file_path.open() as f:\nfile_content = f.read()\nself.set_rst(file_content)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textbrowser.TextBrowser.set_search_paths","title":"<code>set_search_paths(paths: list[datatypes.PathType])</code>","text":"Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>def set_search_paths(self, paths: list[datatypes.PathType]):\nself.setSearchPaths([os.fspath(p) for p in paths])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TextEdit","title":"<code>TextEdit</code>","text":"<p>         Bases: <code>TextEditMixin</code>, <code>QtWidgets.QTextEdit</code></p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>class TextEdit(TextEditMixin, QtWidgets.QTextEdit):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TextEditMixin","title":"<code>TextEditMixin</code>","text":"<p>         Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>class TextEditMixin(widgets.AbstractScrollAreaMixin):\nvalue_changed = core.Signal(str)\ndef __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self.on_value_change)\ndef __add__(self, other: str) -&gt; TextEdit:\nself.append_text(other)\nreturn self\ndef on_value_change(self) -&gt; None:\nself.value_changed.emit(self.text())\n@contextlib.contextmanager\ndef create_cursor(self) -&gt; Iterator[gui.TextCursor]:\ncursor = gui.TextCursor(self.document())\nyield cursor\nself.setTextCursor(cursor)\ndef get_text_cursor(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.textCursor())\ndef set_text(self, text: str) -&gt; None:\nself.setPlainText(text)\ndef append_text(self, text: str) -&gt; None:\nself.append(text)\ndef text(self) -&gt; str:\nreturn self.toPlainText()\ndef select_text(self, start: int, end: int) -&gt; None:\nwith self.create_cursor() as c:\nc.select_text(start, end)\ndef set_read_only(self, value: bool = True) -&gt; None:\nself.setReadOnly(value)\ndef set_text_color(self, color: datatypes.ColorType) -&gt; None:\ncolor = colors.get_color(color)\nself.setTextColor(color)\ndef set_line_wrap_mode(self, mode: LineWrapModeStr):\n\"\"\"Set line wrap mode.\n        Args:\n            mode: line wrap mode to use\n        Raises:\n            InvalidParamError: line wrap mode does not exist\n        \"\"\"\nif mode not in LINE_WRAP_MODE:\nraise InvalidParamError(mode, LINE_WRAP_MODE)\nself.setLineWrapMode(LINE_WRAP_MODE[mode])\ndef get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n        Returns:\n            Wrap mode\n        \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\ndef set_auto_formatting(self, mode: AutoFormattingStr):\n\"\"\"Set auto formatting mode.\n        Args:\n            mode: auto formatting mode to use\n        Raises:\n            InvalidParamError: auto formatting mode does not exist\n        \"\"\"\nif mode not in AUTO_FORMATTING:\nraise InvalidParamError(mode, AUTO_FORMATTING)\nself.setAutoFormatting(AUTO_FORMATTING[mode])\ndef get_auto_formatting(self) -&gt; AutoFormattingStr:\n\"\"\"Get the current auto formatting mode.\n        Returns:\n            Auto formatting mode\n        \"\"\"\nreturn AUTO_FORMATTING.inverse[self.autoFormatting()]\ndef set_word_wrap_mode(self, mode: gui.textoption.WordWrapModeStr):\n\"\"\"Set word wrap mode.\n        Args:\n            mode: word wrap mode to use\n        Raises:\n            InvalidParamError: wrap mode does not exist\n        \"\"\"\nif mode not in gui.textoption.WORD_WRAP_MODE:\nraise InvalidParamError(mode, gui.textoption.WORD_WRAP_MODE)\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE[mode])\ndef get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n        Returns:\n            Word wrap mode\n        \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.value_changed","title":"<code>value_changed = core.Signal(str)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.__add__","title":"<code>__add__(other: str) -&gt; TextEdit</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def __add__(self, other: str) -&gt; TextEdit:\nself.append_text(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.__init__","title":"<code>__init__(*args, **kwargs) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self.on_value_change)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.append_text","title":"<code>append_text(text: str) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def append_text(self, text: str) -&gt; None:\nself.append(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.create_cursor","title":"<code>create_cursor() -&gt; Iterator[gui.TextCursor]</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>@contextlib.contextmanager\ndef create_cursor(self) -&gt; Iterator[gui.TextCursor]:\ncursor = gui.TextCursor(self.document())\nyield cursor\nself.setTextCursor(cursor)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_auto_formatting","title":"<code>get_auto_formatting() -&gt; AutoFormattingStr</code>","text":"<p>Get the current auto formatting mode.</p> <p>Returns:</p> Type Description <code>AutoFormattingStr</code> <p>Auto formatting mode</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_auto_formatting(self) -&gt; AutoFormattingStr:\n\"\"\"Get the current auto formatting mode.\n    Returns:\n        Auto formatting mode\n    \"\"\"\nreturn AUTO_FORMATTING.inverse[self.autoFormatting()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_line_wrap_mode","title":"<code>get_line_wrap_mode() -&gt; LineWrapModeStr</code>","text":"<p>Get the current wrap mode.</p> <p>Returns:</p> Type Description <code>LineWrapModeStr</code> <p>Wrap mode</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n    Returns:\n        Wrap mode\n    \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_text_cursor","title":"<code>get_text_cursor() -&gt; gui.TextCursor</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_text_cursor(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.textCursor())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.get_word_wrap_mode","title":"<code>get_word_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"<p>Get the current word wrap mode.</p> <p>Returns:</p> Type Description <code>gui.textoption.WordWrapModeStr</code> <p>Word wrap mode</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n    Returns:\n        Word wrap mode\n    \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.on_value_change","title":"<code>on_value_change() -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def on_value_change(self) -&gt; None:\nself.value_changed.emit(self.text())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.select_text","title":"<code>select_text(start: int, end: int) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def select_text(self, start: int, end: int) -&gt; None:\nwith self.create_cursor() as c:\nc.select_text(start, end)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_auto_formatting","title":"<code>set_auto_formatting(mode: AutoFormattingStr)</code>","text":"<p>Set auto formatting mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AutoFormattingStr</code> <p>auto formatting mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>auto formatting mode does not exist</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_auto_formatting(self, mode: AutoFormattingStr):\n\"\"\"Set auto formatting mode.\n    Args:\n        mode: auto formatting mode to use\n    Raises:\n        InvalidParamError: auto formatting mode does not exist\n    \"\"\"\nif mode not in AUTO_FORMATTING:\nraise InvalidParamError(mode, AUTO_FORMATTING)\nself.setAutoFormatting(AUTO_FORMATTING[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_line_wrap_mode","title":"<code>set_line_wrap_mode(mode: LineWrapModeStr)</code>","text":"<p>Set line wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LineWrapModeStr</code> <p>line wrap mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>line wrap mode does not exist</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_line_wrap_mode(self, mode: LineWrapModeStr):\n\"\"\"Set line wrap mode.\n    Args:\n        mode: line wrap mode to use\n    Raises:\n        InvalidParamError: line wrap mode does not exist\n    \"\"\"\nif mode not in LINE_WRAP_MODE:\nraise InvalidParamError(mode, LINE_WRAP_MODE)\nself.setLineWrapMode(LINE_WRAP_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_read_only","title":"<code>set_read_only(value: bool = True) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_read_only(self, value: bool = True) -&gt; None:\nself.setReadOnly(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_text","title":"<code>set_text(text: str) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_text(self, text: str) -&gt; None:\nself.setPlainText(text)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_text_color","title":"<code>set_text_color(color: datatypes.ColorType) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_text_color(self, color: datatypes.ColorType) -&gt; None:\ncolor = colors.get_color(color)\nself.setTextColor(color)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.set_word_wrap_mode","title":"<code>set_word_wrap_mode(mode: gui.textoption.WordWrapModeStr)</code>","text":"<p>Set word wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>gui.textoption.WordWrapModeStr</code> <p>word wrap mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>wrap mode does not exist</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_word_wrap_mode(self, mode: gui.textoption.WordWrapModeStr):\n\"\"\"Set word wrap mode.\n    Args:\n        mode: word wrap mode to use\n    Raises:\n        InvalidParamError: wrap mode does not exist\n    \"\"\"\nif mode not in gui.textoption.WORD_WRAP_MODE:\nraise InvalidParamError(mode, gui.textoption.WORD_WRAP_MODE)\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.textedit.TextEditMixin.text","title":"<code>text() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def text(self) -&gt; str:\nreturn self.toPlainText()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TimeEdit","title":"<code>TimeEdit</code>","text":"<p>         Bases: <code>widgets.DateTimeEditMixin</code>, <code>QtWidgets.QTimeEdit</code></p> Source code in <code>prettyqt\\widgets\\timeedit.py</code> <pre><code>class TimeEdit(widgets.DateTimeEditMixin, QtWidgets.QTimeEdit):\nvalue_changed = core.Signal(datetime.datetime)\ndef set_range(self, lower: datatypes.TimeType, upper: datatypes.TimeType):\nif isinstance(lower, str):\nlower = core.Time.fromString(lower)\nelse:\nlower = core.Time(lower)\nif isinstance(upper, str):\nupper = core.Time.fromString(upper)\nelse:\nupper = core.Time(upper)\nself.setToolTip(f\"{lower.toString()} &lt;= x &lt;= {upper.toString()}\")\nself.setTimeRange(lower, upper)  # type: ignore\ndef get_value(self) -&gt; datetime.time:\nreturn self.get_time()\ndef set_value(self, value: datatypes.TimeType):\nif isinstance(value, str):\nvalue = core.Time.fromString(value)\nreturn self.setTime(value)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.timeedit.TimeEdit.value_changed","title":"<code>value_changed = core.Signal(datetime.datetime)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.timeedit.TimeEdit.get_value","title":"<code>get_value() -&gt; datetime.time</code>","text":"Source code in <code>prettyqt\\widgets\\timeedit.py</code> <pre><code>def get_value(self) -&gt; datetime.time:\nreturn self.get_time()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.timeedit.TimeEdit.set_range","title":"<code>set_range(lower: datatypes.TimeType, upper: datatypes.TimeType)</code>","text":"Source code in <code>prettyqt\\widgets\\timeedit.py</code> <pre><code>def set_range(self, lower: datatypes.TimeType, upper: datatypes.TimeType):\nif isinstance(lower, str):\nlower = core.Time.fromString(lower)\nelse:\nlower = core.Time(lower)\nif isinstance(upper, str):\nupper = core.Time.fromString(upper)\nelse:\nupper = core.Time(upper)\nself.setToolTip(f\"{lower.toString()} &lt;= x &lt;= {upper.toString()}\")\nself.setTimeRange(lower, upper)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.timeedit.TimeEdit.set_value","title":"<code>set_value(value: datatypes.TimeType)</code>","text":"Source code in <code>prettyqt\\widgets\\timeedit.py</code> <pre><code>def set_value(self, value: datatypes.TimeType):\nif isinstance(value, str):\nvalue = core.Time.fromString(value)\nreturn self.setTime(value)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ToolBar","title":"<code>ToolBar</code>","text":"<p>         Bases: <code>ToolBarMixin</code>, <code>QtWidgets.QToolBar</code></p> Source code in <code>prettyqt\\widgets\\toolbar.py</code> <pre><code>class ToolBar(ToolBarMixin, QtWidgets.QToolBar):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ToolBox","title":"<code>ToolBox</code>","text":"<p>         Bases: <code>widgets.FrameMixin</code>, <code>QtWidgets.QToolBox</code></p> Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>class ToolBox(widgets.FrameMixin, QtWidgets.QToolBox):\ndef __getitem__(self, index: int | str) -&gt; QtWidgets.QWidget:\nif isinstance(index, int):\nreturn self.widget(index)\nresult = self.find_child(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\ndef __delitem__(self, index: int):\nself.removeItem(index)\n# def serialize_fields(self):\n#     children = []\n#     for i, widget in enumerate(self.get_children()):\n#         dct = dict(\n#             widget=widget,\n#             icon=self.get_item_icon(i),\n#             text=self.itemText(i),\n#             enabled=self.isItemEnabled(i),\n#             tool_tip=self.itemToolTip(i),\n#         )\n#         children.append(dct)\n#     return dict(items=children, current_index=self.currentIndex())\n# def __setstate__(self, state):\n#     for i, item in enumerate(state[\"items\"]):\n#         self.addItem(item[\"widget\"], item[\"icon\"], item[\"text\"])\n#         self.setItemEnabled(i, item[\"enabled\"])\n#         self.setItemToolTip(i, item[\"tool_tip\"])\n#     self.setCurrentIndex(state[\"current_index\"])\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __iter__(self) -&gt; Iterator[QtWidgets.QWidget]:\nreturn iter(self.get_children())\ndef __contains__(self, item: QtWidgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\ndef get_children(self) -&gt; list[QtWidgets.QWidget]:\nreturn [self.widget(i) for i in range(self.count())]\ndef add_widget(\nself,\nwidget: QtWidgets.QWidget,\ntitle: str | None = None,\nicon: datatypes.IconType = None,\ntooltip: str = \"\",\nenabled: bool = True,\n):\ntitle = widget.objectName() if title is None else title\nicon = iconprovider.get_icon(icon) if icon else gui.Icon()\nself.addItem(widget, icon, title)\nindex = self.indexOf(widget)\nif tooltip:\nself.setItemToolTip(index, tooltip)\nself.setItemEnabled(index, enabled)\ndef get_item_icon(self, index: int) -&gt; gui.Icon | None:\nicon = self.itemIcon(index)\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.__contains__","title":"<code>__contains__(item: QtWidgets.QWidget)</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def __contains__(self, item: QtWidgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def __delitem__(self, index: int):\nself.removeItem(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.__getitem__","title":"<code>__getitem__(index: int | str) -&gt; QtWidgets.QWidget</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def __getitem__(self, index: int | str) -&gt; QtWidgets.QWidget:\nif isinstance(index, int):\nreturn self.widget(index)\nresult = self.find_child(QtWidgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QWidget]</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QWidget]:\nreturn iter(self.get_children())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.add_widget","title":"<code>add_widget(widget: QtWidgets.QWidget, title: str | None = None, icon: datatypes.IconType = None, tooltip: str = '', enabled: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def add_widget(\nself,\nwidget: QtWidgets.QWidget,\ntitle: str | None = None,\nicon: datatypes.IconType = None,\ntooltip: str = \"\",\nenabled: bool = True,\n):\ntitle = widget.objectName() if title is None else title\nicon = iconprovider.get_icon(icon) if icon else gui.Icon()\nself.addItem(widget, icon, title)\nindex = self.indexOf(widget)\nif tooltip:\nself.setItemToolTip(index, tooltip)\nself.setItemEnabled(index, enabled)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.get_children","title":"<code>get_children() -&gt; list[QtWidgets.QWidget]</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def get_children(self) -&gt; list[QtWidgets.QWidget]:\nreturn [self.widget(i) for i in range(self.count())]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbox.ToolBox.get_item_icon","title":"<code>get_item_icon(index: int) -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>def get_item_icon(self, index: int) -&gt; gui.Icon | None:\nicon = self.itemIcon(index)\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ToolButton","title":"<code>ToolButton</code>","text":"<p>         Bases: <code>widgets.AbstractButtonMixin</code>, <code>QtWidgets.QToolButton</code></p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>class ToolButton(widgets.AbstractButtonMixin, QtWidgets.QToolButton):\ndef __getitem__(self, item: str) -&gt; QtGui.QAction:\nmenu = self.menu()\nreturn menu[item]\n# def set_menu(self, menu: QtWidgets.QMenu):\n#     menu.setParent(self)\n#     self.setMenu(menu)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"toolButtonStyle\": constants.TOOLBUTTON_STYLE,\n\"arrowType\": constants.ARROW_TYPE,\n\"popupMode\": POPUP_MODE,\n}\nreturn maps\n@classmethod\ndef for_menu(cls, menu: QtWidgets.QMenu, icon: datatypes.IconType = None) -&gt; Self:\nbtn = cls()\nbtn.setMenu(menu)\n# btn.set_title(menu.title())\nbtn.set_popup_mode(\"instant\")\nbtn.set_icon(icon)\nreturn btn\ndef set_default_action(self, action):\nself.setDefaultAction(action)\ndef set_popup_mode(self, mode: PopupModeStr):\n\"\"\"Set the popup mode of the toolbutton.\n        Args:\n            mode: popup mode to use\n        Raises:\n            InvalidParamError: invalid popup mode\n        \"\"\"\nif mode not in POPUP_MODE:\nraise InvalidParamError(mode, POPUP_MODE)\nself.setPopupMode(POPUP_MODE[mode])\ndef get_popup_mode(self) -&gt; PopupModeStr:\n\"\"\"Return popup mode.\n        Returns:\n            popup mode\n        \"\"\"\nreturn POPUP_MODE.inverse[self.popupMode()]\ndef set_arrow_type(self, mode: constants.ArrowTypeStr):\n\"\"\"Set the arrow type of the toolbutton.\n        Args:\n            mode: arrow type to use\n        Raises:\n            InvalidParamError: invalid arrow type\n        \"\"\"\nif mode not in constants.ARROW_TYPE:\nraise InvalidParamError(mode, constants.ARROW_TYPE)\nself.setArrowType(constants.ARROW_TYPE[mode])\ndef get_arrow_type(self) -&gt; constants.ArrowTypeStr:\n\"\"\"Return arrow type.\n        Returns:\n            arrow type\n        \"\"\"\nreturn constants.ARROW_TYPE.inverse[self.arrowType()]\ndef set_style(self, style: constants.ToolButtonStyleStr):\n\"\"\"Set the toolbutton style.\n        Args:\n            style: style to use\n        Raises:\n            InvalidParamError: invalid style\n        \"\"\"\nif style not in constants.TOOLBUTTON_STYLE:\nraise InvalidParamError(style, constants.TOOLBUTTON_STYLE)\nself.setToolButtonStyle(constants.TOOLBUTTON_STYLE[style])\ndef get_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return toolbutton style.\n        Returns:\n            toolbutton style\n        \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.__getitem__","title":"<code>__getitem__(item: str) -&gt; QtGui.QAction</code>","text":"Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def __getitem__(self, item: str) -&gt; QtGui.QAction:\nmenu = self.menu()\nreturn menu[item]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.for_menu","title":"<code>for_menu(menu: QtWidgets.QMenu, icon: datatypes.IconType = None) -&gt; Self</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>@classmethod\ndef for_menu(cls, menu: QtWidgets.QMenu, icon: datatypes.IconType = None) -&gt; Self:\nbtn = cls()\nbtn.setMenu(menu)\n# btn.set_title(menu.title())\nbtn.set_popup_mode(\"instant\")\nbtn.set_icon(icon)\nreturn btn\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.get_arrow_type","title":"<code>get_arrow_type() -&gt; constants.ArrowTypeStr</code>","text":"<p>Return arrow type.</p> <p>Returns:</p> Type Description <code>constants.ArrowTypeStr</code> <p>arrow type</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_arrow_type(self) -&gt; constants.ArrowTypeStr:\n\"\"\"Return arrow type.\n    Returns:\n        arrow type\n    \"\"\"\nreturn constants.ARROW_TYPE.inverse[self.arrowType()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.get_popup_mode","title":"<code>get_popup_mode() -&gt; PopupModeStr</code>","text":"<p>Return popup mode.</p> <p>Returns:</p> Type Description <code>PopupModeStr</code> <p>popup mode</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_popup_mode(self) -&gt; PopupModeStr:\n\"\"\"Return popup mode.\n    Returns:\n        popup mode\n    \"\"\"\nreturn POPUP_MODE.inverse[self.popupMode()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.get_style","title":"<code>get_style() -&gt; constants.ToolButtonStyleStr</code>","text":"<p>Return toolbutton style.</p> <p>Returns:</p> Type Description <code>constants.ToolButtonStyleStr</code> <p>toolbutton style</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return toolbutton style.\n    Returns:\n        toolbutton style\n    \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_arrow_type","title":"<code>set_arrow_type(mode: constants.ArrowTypeStr)</code>","text":"<p>Set the arrow type of the toolbutton.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ArrowTypeStr</code> <p>arrow type to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid arrow type</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_arrow_type(self, mode: constants.ArrowTypeStr):\n\"\"\"Set the arrow type of the toolbutton.\n    Args:\n        mode: arrow type to use\n    Raises:\n        InvalidParamError: invalid arrow type\n    \"\"\"\nif mode not in constants.ARROW_TYPE:\nraise InvalidParamError(mode, constants.ARROW_TYPE)\nself.setArrowType(constants.ARROW_TYPE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_default_action","title":"<code>set_default_action(action)</code>","text":"Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_default_action(self, action):\nself.setDefaultAction(action)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_popup_mode","title":"<code>set_popup_mode(mode: PopupModeStr)</code>","text":"<p>Set the popup mode of the toolbutton.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PopupModeStr</code> <p>popup mode to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid popup mode</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_popup_mode(self, mode: PopupModeStr):\n\"\"\"Set the popup mode of the toolbutton.\n    Args:\n        mode: popup mode to use\n    Raises:\n        InvalidParamError: invalid popup mode\n    \"\"\"\nif mode not in POPUP_MODE:\nraise InvalidParamError(mode, POPUP_MODE)\nself.setPopupMode(POPUP_MODE[mode])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.toolbutton.ToolButton.set_style","title":"<code>set_style(style: constants.ToolButtonStyleStr)</code>","text":"<p>Set the toolbutton style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.ToolButtonStyleStr</code> <p>style to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid style</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_style(self, style: constants.ToolButtonStyleStr):\n\"\"\"Set the toolbutton style.\n    Args:\n        style: style to use\n    Raises:\n        InvalidParamError: invalid style\n    \"\"\"\nif style not in constants.TOOLBUTTON_STYLE:\nraise InvalidParamError(style, constants.TOOLBUTTON_STYLE)\nself.setToolButtonStyle(constants.TOOLBUTTON_STYLE[style])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.ToolTip","title":"<code>ToolTip</code>","text":"<p>         Bases: <code>QtWidgets.QToolTip</code></p> Source code in <code>prettyqt\\widgets\\tooltip.py</code> <pre><code>class ToolTip(QtWidgets.QToolTip):\n@classmethod\ndef show_text(\ncls,\nposition: datatypes.PointType | None = None,\ntext: str = \"\",\nlinebreak_px: int = 400,\n):\nif position is None:\nposition = QtGui.QCursor.pos()\nelif isinstance(position, tuple):\nposition = QtCore.QPoint(*position)\ncls.showText(position, f'&lt;div style=\"max-width: {linebreak_px}px\"&gt;{text}&lt;/div&gt;')\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.tooltip.ToolTip.show_text","title":"<code>show_text(position: datatypes.PointType | None = None, text: str = '', linebreak_px: int = 400)</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\tooltip.py</code> <pre><code>@classmethod\ndef show_text(\ncls,\nposition: datatypes.PointType | None = None,\ntext: str = \"\",\nlinebreak_px: int = 400,\n):\nif position is None:\nposition = QtGui.QCursor.pos()\nelif isinstance(position, tuple):\nposition = QtCore.QPoint(*position)\ncls.showText(position, f'&lt;div style=\"max-width: {linebreak_px}px\"&gt;{text}&lt;/div&gt;')\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeView","title":"<code>TreeView</code>","text":"<p>         Bases: <code>TreeViewMixin</code>, <code>QtWidgets.QTreeView</code></p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>class TreeView(TreeViewMixin, QtWidgets.QTreeView):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeViewMixin","title":"<code>TreeViewMixin</code>","text":"<p>         Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>class TreeViewMixin(widgets.AbstractItemViewMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nclass_name = type(self).__name__\nself.set_id(class_name)\n# visual settings\nself.setAnimated(True)\nself.setRootIsDecorated(False)\nself.setAllColumnsShowFocus(True)\nself.setUniformRowHeights(True)\nself.setAlternatingRowColors(True)\nself.setWordWrap(False)\n# misc\nself.h_header = widgets.HeaderView(\"horizontal\", parent=self)\nself.set_selection_mode(\"extended\")\n@property\ndef h_header(self):\nreturn self.header()\n@h_header.setter\ndef h_header(self, header):\nself.setHeader(header)\ndef expand_all(self):\nself.expandAll()\ndef set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\ndef set_indentation(self, indentation: int):\nself.setIndentation(indentation)\ndef setup_list_style(self):\nself.setSelectionBehavior(self.SelectionBehavior.SelectRows)\nself.h_header.setStretchLastSection(True)\ndef adapt_sizes(self):\nmodel = self.model()\nif model is not None and (model.rowCount() * model.columnCount()) &lt; 1000:\nself.h_header.resizeSections(self.h_header.ResizeMode.ResizeToContents)\nelse:\nself.h_header.resize_sections(\"interactive\")\ndef sort_by_column(self, column: int | None, ascending: bool = True):\ncolumn = -1 if column is None else column\norder = constants.ASCENDING if ascending else constants.DESCENDING\nself.sortByColumn(column, order)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.h_header","title":"<code>h_header</code>  <code>property</code> <code>writable</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nclass_name = type(self).__name__\nself.set_id(class_name)\n# visual settings\nself.setAnimated(True)\nself.setRootIsDecorated(False)\nself.setAllColumnsShowFocus(True)\nself.setUniformRowHeights(True)\nself.setAlternatingRowColors(True)\nself.setWordWrap(False)\n# misc\nself.h_header = widgets.HeaderView(\"horizontal\", parent=self)\nself.set_selection_mode(\"extended\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.adapt_sizes","title":"<code>adapt_sizes()</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def adapt_sizes(self):\nmodel = self.model()\nif model is not None and (model.rowCount() * model.columnCount()) &lt; 1000:\nself.h_header.resizeSections(self.h_header.ResizeMode.ResizeToContents)\nelse:\nself.h_header.resize_sections(\"interactive\")\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.expand_all","title":"<code>expand_all()</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def expand_all(self):\nself.expandAll()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.set_indentation","title":"<code>set_indentation(indentation: int)</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def set_indentation(self, indentation: int):\nself.setIndentation(indentation)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.set_sorting_enabled","title":"<code>set_sorting_enabled(enabled: bool, do_sort: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.setup_list_style","title":"<code>setup_list_style()</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def setup_list_style(self):\nself.setSelectionBehavior(self.SelectionBehavior.SelectRows)\nself.h_header.setStretchLastSection(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treeview.TreeViewMixin.sort_by_column","title":"<code>sort_by_column(column: int | None, ascending: bool = True)</code>","text":"Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def sort_by_column(self, column: int | None, ascending: bool = True):\ncolumn = -1 if column is None else column\norder = constants.ASCENDING if ascending else constants.DESCENDING\nself.sortByColumn(column, order)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeWidget","title":"<code>TreeWidget</code>","text":"<p>         Bases: <code>TreeWidgetMixin</code>, <code>QtWidgets.QTreeWidget</code></p> Source code in <code>prettyqt\\widgets\\treewidget.py</code> <pre><code>class TreeWidget(TreeWidgetMixin, QtWidgets.QTreeWidget):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeWidgetItem","title":"<code>TreeWidgetItem</code>","text":"<p>         Bases: <code>serializemixin.SerializeMixin</code>, <code>QtWidgets.QTreeWidgetItem</code></p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>class TreeWidgetItem(serializemixin.SerializeMixin, QtWidgets.QTreeWidgetItem):\ndef __repr__(self):\nreturn get_repr(self)\ndef serialize_fields(self):\ndata = [\nself.data(i, constants.USER_ROLE)  # type: ignore\nfor i in range(self.columnCount())\n]\nreturn dict(\ntext=[self.text(i) for i in range(self.columnCount())],\ntool_tip=[self.toolTip(i) for i in range(self.columnCount())],\nstatus_tip=[self.statusTip(i) for i in range(self.columnCount())],\ncheckstate=[self.get_checkstate(i) for i in range(self.columnCount())],\nicon=[self.get_icon(i) for i in range(self.columnCount())],\ndata=data,\n)\ndef __iter__(self) -&gt; Iterator[QtWidgets.QTreeWidgetItem]:\nreturn iter(self.child(i) for i in range(self.childCount()))\ndef __len__(self):\nreturn self.childCount()\ndef __getitem__(self, index: int) -&gt; QtWidgets.QTreeWidgetItem:\nitem = self.child(index)\nif item is None:\nraise KeyError(index)\nreturn item\ndef __delitem__(self, index: int):\nself.takeChild(index)\ndef __add__(self, other: QtWidgets.QTreeWidgetItem) -&gt; TreeWidgetItem:\nself.addChild(other)\nreturn self\ndef setChecked(self, column: int, checked: bool):\nself.setCheckState(\ncolumn,\nQtCore.Qt.CheckState.Checked if checked else QtCore.Qt.CheckState.Unchecked,\n)\ndef isChecked(self, col: int) -&gt; bool:\nreturn self.checkState(col) == QtCore.Qt.CheckState.Checked\ndef get_children(self, recursive: bool = False) -&gt; list[QtWidgets.QTreeWidgetItem]:\n\"\"\"Get children of this item.\n        recursive option is written iteratively to also support original QTreeWidgetItems.\n        \"\"\"\nif not recursive:\nreturn [self.child(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.child(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\ndef get_top_level_items(self) -&gt; list[QtWidgets.QTreeWidgetItem]:\nreturn [self.topLevelItem(i) for i in range(self.topLevelItemCount())]\ndef collapse(self, recursive: bool = False):\nif recursive:\nfor i in range(self.childCount()):\nself.child(i).collapse(True)\nself.setExpanded(False)\ndef expand(self, recursive: bool = False):\nself.setExpanded(True)\nif recursive:\nfor i in range(self.childCount()):\nself.child(i).expand(True)\ndef set_size_hint(self, hint: datatypes.SizeType, column: int = 0):\nif isinstance(hint, tuple):\nhint = QtCore.QSize(*hint)\nself.setSizeHint(column, hint)\ndef sort_children(self, column: int, descending: bool = False):\norder = constants.DESCENDING if descending else constants.ASCENDING\nself.sortChildren(column, order)\ndef set_data(self, data: Any, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(data, role)\ndef get_data(self, role: constants.ItemDataRoleStr | int) -&gt; Any:\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\ndef set_icon(self, icon: datatypes.IconType, column: int = 0):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n            column: column\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(column, icon)\ndef get_background(self, column: int = 0) -&gt; gui.Brush:\nreturn gui.Brush(self.background(column))\ndef get_foreground(self, column: int = 0) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground(column))\ndef get_font(self, column: int = 0) -&gt; gui.Font:\nreturn gui.Font(self.font(column))\ndef get_icon(self, column: int = 0) -&gt; gui.Icon | None:\nicon = self.icon(column)\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_checkstate(self, state: constants.StateStr, column: int = 0):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n            column: column\n        Raises:\n            InvalidParamError: invalid checkstate\n        \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(column, constants.STATE[state])\ndef get_checkstate(self, column: int = 0) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n        Args:\n            column: column\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.STATE.inverse[self.checkState(column)]\ndef set_child_indicator_policy(self, policy: ChildIndicatorPolicyStr):\n\"\"\"Set the child indicator policy.\n        Args:\n            policy: child indicator policy\n        Raises:\n            InvalidParamError: policy does not exist\n        \"\"\"\nif policy not in CHILD_INDICATOR_POLICY:\nraise InvalidParamError(policy, CHILD_INDICATOR_POLICY)\nself.setChildIndicatorPolicy(CHILD_INDICATOR_POLICY[policy])\ndef get_child_indicator_policy(self) -&gt; ChildIndicatorPolicyStr:\n\"\"\"Return current child indicator policy.\n        Returns:\n            child indicator policy\n        \"\"\"\nreturn CHILD_INDICATOR_POLICY.inverse[self.childIndicatorPolicy()]\ndef get_text_alignment(self, column: int) -&gt; constants.AlignmentStr:\nreturn constants.ALIGNMENTS.inverse[self.textAlignment(column)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.__add__","title":"<code>__add__(other: QtWidgets.QTreeWidgetItem) -&gt; TreeWidgetItem</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def __add__(self, other: QtWidgets.QTreeWidgetItem) -&gt; TreeWidgetItem:\nself.addChild(other)\nreturn self\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def __delitem__(self, index: int):\nself.takeChild(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtWidgets.QTreeWidgetItem</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtWidgets.QTreeWidgetItem:\nitem = self.child(index)\nif item is None:\nraise KeyError(index)\nreturn item\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.__iter__","title":"<code>__iter__() -&gt; Iterator[QtWidgets.QTreeWidgetItem]</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def __iter__(self) -&gt; Iterator[QtWidgets.QTreeWidgetItem]:\nreturn iter(self.child(i) for i in range(self.childCount()))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.__len__","title":"<code>__len__()</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def __len__(self):\nreturn self.childCount()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def __repr__(self):\nreturn get_repr(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.collapse","title":"<code>collapse(recursive: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def collapse(self, recursive: bool = False):\nif recursive:\nfor i in range(self.childCount()):\nself.child(i).collapse(True)\nself.setExpanded(False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.expand","title":"<code>expand(recursive: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def expand(self, recursive: bool = False):\nself.setExpanded(True)\nif recursive:\nfor i in range(self.childCount()):\nself.child(i).expand(True)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_background","title":"<code>get_background(column: int = 0) -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_background(self, column: int = 0) -&gt; gui.Brush:\nreturn gui.Brush(self.background(column))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_checkstate","title":"<code>get_checkstate(column: int = 0) -&gt; constants.StateStr</code>","text":"<p>Return checkstate.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>column</p> <code>0</code> <p>Returns:</p> Type Description <code>constants.StateStr</code> <p>checkstate</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_checkstate(self, column: int = 0) -&gt; constants.StateStr:\n\"\"\"Return checkstate.\n    Args:\n        column: column\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.STATE.inverse[self.checkState(column)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_child_indicator_policy","title":"<code>get_child_indicator_policy() -&gt; ChildIndicatorPolicyStr</code>","text":"<p>Return current child indicator policy.</p> <p>Returns:</p> Type Description <code>ChildIndicatorPolicyStr</code> <p>child indicator policy</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_child_indicator_policy(self) -&gt; ChildIndicatorPolicyStr:\n\"\"\"Return current child indicator policy.\n    Returns:\n        child indicator policy\n    \"\"\"\nreturn CHILD_INDICATOR_POLICY.inverse[self.childIndicatorPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_children","title":"<code>get_children(recursive: bool = False) -&gt; list[QtWidgets.QTreeWidgetItem]</code>","text":"<p>Get children of this item.</p> <p>recursive option is written iteratively to also support original QTreeWidgetItems.</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_children(self, recursive: bool = False) -&gt; list[QtWidgets.QTreeWidgetItem]:\n\"\"\"Get children of this item.\n    recursive option is written iteratively to also support original QTreeWidgetItems.\n    \"\"\"\nif not recursive:\nreturn [self.child(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.child(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_data","title":"<code>get_data(role: constants.ItemDataRoleStr | int) -&gt; Any</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_data(self, role: constants.ItemDataRoleStr | int) -&gt; Any:\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_font","title":"<code>get_font(column: int = 0) -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_font(self, column: int = 0) -&gt; gui.Font:\nreturn gui.Font(self.font(column))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_foreground","title":"<code>get_foreground(column: int = 0) -&gt; gui.Brush</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_foreground(self, column: int = 0) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground(column))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_icon","title":"<code>get_icon(column: int = 0) -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_icon(self, column: int = 0) -&gt; gui.Icon | None:\nicon = self.icon(column)\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_text_alignment","title":"<code>get_text_alignment(column: int) -&gt; constants.AlignmentStr</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_text_alignment(self, column: int) -&gt; constants.AlignmentStr:\nreturn constants.ALIGNMENTS.inverse[self.textAlignment(column)]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_top_level_items","title":"<code>get_top_level_items() -&gt; list[QtWidgets.QTreeWidgetItem]</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_top_level_items(self) -&gt; list[QtWidgets.QTreeWidgetItem]:\nreturn [self.topLevelItem(i) for i in range(self.topLevelItemCount())]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.isChecked","title":"<code>isChecked(col: int) -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def isChecked(self, col: int) -&gt; bool:\nreturn self.checkState(col) == QtCore.Qt.CheckState.Checked\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.serialize_fields","title":"<code>serialize_fields()</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def serialize_fields(self):\ndata = [\nself.data(i, constants.USER_ROLE)  # type: ignore\nfor i in range(self.columnCount())\n]\nreturn dict(\ntext=[self.text(i) for i in range(self.columnCount())],\ntool_tip=[self.toolTip(i) for i in range(self.columnCount())],\nstatus_tip=[self.statusTip(i) for i in range(self.columnCount())],\ncheckstate=[self.get_checkstate(i) for i in range(self.columnCount())],\nicon=[self.get_icon(i) for i in range(self.columnCount())],\ndata=data,\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.setChecked","title":"<code>setChecked(column: int, checked: bool)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def setChecked(self, column: int, checked: bool):\nself.setCheckState(\ncolumn,\nQtCore.Qt.CheckState.Checked if checked else QtCore.Qt.CheckState.Unchecked,\n)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.StateStr, column: int = 0)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.StateStr</code> <p>checkstate to use</p> required <code>column</code> <code>int</code> <p>column</p> <code>0</code> <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>invalid checkstate</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.StateStr, column: int = 0):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n        column: column\n    Raises:\n        InvalidParamError: invalid checkstate\n    \"\"\"\nif state not in constants.STATE:\nraise InvalidParamError(state, constants.STATE)\nself.setCheckState(column, constants.STATE[state])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_child_indicator_policy","title":"<code>set_child_indicator_policy(policy: ChildIndicatorPolicyStr)</code>","text":"<p>Set the child indicator policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ChildIndicatorPolicyStr</code> <p>child indicator policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>policy does not exist</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_child_indicator_policy(self, policy: ChildIndicatorPolicyStr):\n\"\"\"Set the child indicator policy.\n    Args:\n        policy: child indicator policy\n    Raises:\n        InvalidParamError: policy does not exist\n    \"\"\"\nif policy not in CHILD_INDICATOR_POLICY:\nraise InvalidParamError(policy, CHILD_INDICATOR_POLICY)\nself.setChildIndicatorPolicy(CHILD_INDICATOR_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_data","title":"<code>set_data(data: Any, role: constants.ItemDataRoleStr | int)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_data(self, data: Any, role: constants.ItemDataRoleStr | int):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(data, role)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType, column: int = 0)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required <code>column</code> <code>int</code> <p>column</p> <code>0</code> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType, column: int = 0):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n        column: column\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(column, icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_size_hint","title":"<code>set_size_hint(hint: datatypes.SizeType, column: int = 0)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_size_hint(self, hint: datatypes.SizeType, column: int = 0):\nif isinstance(hint, tuple):\nhint = QtCore.QSize(*hint)\nself.setSizeHint(column, hint)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.sort_children","title":"<code>sort_children(column: int, descending: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def sort_children(self, column: int, descending: bool = False):\norder = constants.DESCENDING if descending else constants.ASCENDING\nself.sortChildren(column, order)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.TreeWidgetItemIterator","title":"<code>TreeWidgetItemIterator</code>","text":"<p>         Bases: <code>QtWidgets.QTreeWidgetItemIterator</code></p> Source code in <code>prettyqt\\widgets\\treewidgetitemiterator.py</code> <pre><code>class TreeWidgetItemIterator(QtWidgets.QTreeWidgetItemIterator):\ndef __init__(\nself,\nother: (\nQtWidgets.QTreeWidget\n| QtWidgets.QTreeWidgetItem\n| QtWidgets.QTreeWidgetItemIterator\n),\nflags: QtWidgets.QTreeWidgetItemIterator.IteratorFlag | None = None,\nhidden: bool | None = None,\nselected: bool | None = None,\nselectable: bool | None = None,\ndraggable: bool | None = None,\ndroppable: bool | None = None,\nhas_children: bool | None = None,\nchecked: bool | None = None,\nenabled: bool | None = None,\neditable: bool | None = None,\nuser_flag: bool = False,\n):\nif isinstance(other, QtWidgets.QTreeWidgetItemIterator):\nsuper().__init__(other)\nelse:\nif flags is None:\nflags = mod.IteratorFlag.All  # type: ignore\nif hidden is True:\nflags |= mod.IteratorFlag.Hidden  # type: ignore\nelif hidden is False:\nflags |= mod.IteratorFlag.NotHidden  # type: ignore\nif selected is True:\nflags |= mod.IteratorFlag.Selected  # type: ignore\nelif selected is False:\nflags |= mod.IteratorFlag.Unselected  # type: ignore\nif selectable is True:\nflags |= mod.IteratorFlag.Selectable  # type: ignore\nelif selectable is False:\nflags |= mod.IteratorFlag.NotSelectable  # type: ignore\nif draggable is True:\nflags |= mod.IteratorFlag.DragEnabled  # type: ignore\nelif draggable is False:\nflags |= mod.IteratorFlag.DragDisabled  # type: ignore\nif droppable is True:\nflags |= mod.IteratorFlag.DropEnabled  # type: ignore\nelif droppable is False:\nflags |= mod.IteratorFlag.DropDisabled  # type: ignore\nif has_children is True:\nflags |= mod.IteratorFlag.HasChildren  # type: ignore\nelif has_children is False:\nflags |= mod.IteratorFlag.NoChildren  # type: ignore\nif checked is True:\nflags |= mod.IteratorFlag.Checked  # type: ignore\nelif checked is False:\nflags |= mod.IteratorFlag.NotChecked  # type: ignore\nif enabled is True:\nflags |= mod.IteratorFlag.Enabled  # type: ignore\nelif enabled is False:\nflags |= mod.IteratorFlag.Disabled  # type: ignore\nif editable is True:\nflags |= mod.IteratorFlag.Editable  # type: ignore\nelif editable is False:\nflags |= mod.IteratorFlag.NotEditable  # type: ignore\nif user_flag:\nflags |= mod.IteratorFlag.UserFlag  # type: ignore\nsuper().__init__(other, flags)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.treewidgetitemiterator.TreeWidgetItemIterator.__init__","title":"<code>__init__(other: QtWidgets.QTreeWidget | QtWidgets.QTreeWidgetItem | QtWidgets.QTreeWidgetItemIterator, flags: QtWidgets.QTreeWidgetItemIterator.IteratorFlag | None = None, hidden: bool | None = None, selected: bool | None = None, selectable: bool | None = None, draggable: bool | None = None, droppable: bool | None = None, has_children: bool | None = None, checked: bool | None = None, enabled: bool | None = None, editable: bool | None = None, user_flag: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\treewidgetitemiterator.py</code> <pre><code>def __init__(\nself,\nother: (\nQtWidgets.QTreeWidget\n| QtWidgets.QTreeWidgetItem\n| QtWidgets.QTreeWidgetItemIterator\n),\nflags: QtWidgets.QTreeWidgetItemIterator.IteratorFlag | None = None,\nhidden: bool | None = None,\nselected: bool | None = None,\nselectable: bool | None = None,\ndraggable: bool | None = None,\ndroppable: bool | None = None,\nhas_children: bool | None = None,\nchecked: bool | None = None,\nenabled: bool | None = None,\neditable: bool | None = None,\nuser_flag: bool = False,\n):\nif isinstance(other, QtWidgets.QTreeWidgetItemIterator):\nsuper().__init__(other)\nelse:\nif flags is None:\nflags = mod.IteratorFlag.All  # type: ignore\nif hidden is True:\nflags |= mod.IteratorFlag.Hidden  # type: ignore\nelif hidden is False:\nflags |= mod.IteratorFlag.NotHidden  # type: ignore\nif selected is True:\nflags |= mod.IteratorFlag.Selected  # type: ignore\nelif selected is False:\nflags |= mod.IteratorFlag.Unselected  # type: ignore\nif selectable is True:\nflags |= mod.IteratorFlag.Selectable  # type: ignore\nelif selectable is False:\nflags |= mod.IteratorFlag.NotSelectable  # type: ignore\nif draggable is True:\nflags |= mod.IteratorFlag.DragEnabled  # type: ignore\nelif draggable is False:\nflags |= mod.IteratorFlag.DragDisabled  # type: ignore\nif droppable is True:\nflags |= mod.IteratorFlag.DropEnabled  # type: ignore\nelif droppable is False:\nflags |= mod.IteratorFlag.DropDisabled  # type: ignore\nif has_children is True:\nflags |= mod.IteratorFlag.HasChildren  # type: ignore\nelif has_children is False:\nflags |= mod.IteratorFlag.NoChildren  # type: ignore\nif checked is True:\nflags |= mod.IteratorFlag.Checked  # type: ignore\nelif checked is False:\nflags |= mod.IteratorFlag.NotChecked  # type: ignore\nif enabled is True:\nflags |= mod.IteratorFlag.Enabled  # type: ignore\nelif enabled is False:\nflags |= mod.IteratorFlag.Disabled  # type: ignore\nif editable is True:\nflags |= mod.IteratorFlag.Editable  # type: ignore\nelif editable is False:\nflags |= mod.IteratorFlag.NotEditable  # type: ignore\nif user_flag:\nflags |= mod.IteratorFlag.UserFlag  # type: ignore\nsuper().__init__(other, flags)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.UndoView","title":"<code>UndoView</code>","text":"<p>         Bases: <code>widgets.ListViewMixin</code>, <code>QtWidgets.QUndoView</code></p> Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>class UndoView(widgets.ListViewMixin, QtWidgets.QUndoView):\ndef __getitem__(self, index: int) -&gt; QtGui.QUndoCommand:\nreturn self.stack().command(index)\ndef set_clean_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the clean button.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setCleanIcon(icon)\ndef set_value(self, value: QtGui.QUndoGroup | QtGui.QUndoStack):\nif isinstance(value, QtGui.QUndoGroup):\nself.setGroup(value)\nelse:\nself.setStack(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.undoview.UndoView.__getitem__","title":"<code>__getitem__(index: int) -&gt; QtGui.QUndoCommand</code>","text":"Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>def __getitem__(self, index: int) -&gt; QtGui.QUndoCommand:\nreturn self.stack().command(index)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.undoview.UndoView.set_clean_icon","title":"<code>set_clean_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the clean button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>def set_clean_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the clean button.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setCleanIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.undoview.UndoView.set_value","title":"<code>set_value(value: QtGui.QUndoGroup | QtGui.QUndoStack)</code>","text":"Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>def set_value(self, value: QtGui.QUndoGroup | QtGui.QUndoStack):\nif isinstance(value, QtGui.QUndoGroup):\nself.setGroup(value)\nelse:\nself.setStack(value)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.VBoxLayout","title":"<code>VBoxLayout</code>","text":"<p>         Bases: <code>widgets.boxlayout.BoxLayoutMixin</code>, <code>QtWidgets.QVBoxLayout</code></p> Source code in <code>prettyqt\\widgets\\vboxlayout.py</code> <pre><code>class VBoxLayout(widgets.boxlayout.BoxLayoutMixin, QtWidgets.QVBoxLayout):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.WhatsThis","title":"<code>WhatsThis</code>","text":"<p>         Bases: <code>QtWidgets.QWhatsThis</code></p> Source code in <code>prettyqt\\widgets\\whatsthis.py</code> <pre><code>class WhatsThis(QtWidgets.QWhatsThis):\n@classmethod\n@contextlib.contextmanager\ndef enter_mode(cls):\ncls.enterWhatsThisMode()\nyield cls\ncls.leaveWhatsThisMode()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.whatsthis.WhatsThis.enter_mode","title":"<code>enter_mode()</code>  <code>classmethod</code>","text":"Source code in <code>prettyqt\\widgets\\whatsthis.py</code> <pre><code>@classmethod\n@contextlib.contextmanager\ndef enter_mode(cls):\ncls.enterWhatsThisMode()\nyield cls\ncls.leaveWhatsThisMode()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Widget","title":"<code>Widget</code>","text":"<p>         Bases: <code>WidgetMixin</code>, <code>prettyprinter.PrettyPrinter</code>, <code>QtWidgets.QWidget</code></p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>class Widget(WidgetMixin, prettyprinter.PrettyPrinter, QtWidgets.QWidget):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.WidgetAction","title":"<code>WidgetAction</code>","text":"<p>         Bases: <code>gui.ActionMixin</code>, <code>QtWidgets.QWidgetAction</code></p> Source code in <code>prettyqt\\widgets\\widgetaction.py</code> <pre><code>class WidgetAction(gui.ActionMixin, QtWidgets.QWidgetAction):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.WidgetItem","title":"<code>WidgetItem</code>","text":"<p>         Bases: <code>widgets.LayoutItemMixin</code>, <code>QtWidgets.QWidgetItem</code></p> Source code in <code>prettyqt\\widgets\\widgetitem.py</code> <pre><code>class WidgetItem(widgets.LayoutItemMixin, QtWidgets.QWidgetItem):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.WidgetMixin","title":"<code>WidgetMixin</code>","text":"<p>         Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>class WidgetMixin(core.ObjectMixin):\nbox: QtWidgets.QLayout\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"contextMenuPolicy\": constants.CONTEXT_POLICY,\n\"focusPolicy\": constants.FOCUS_POLICY,\n\"layoutDirection\": constants.LAYOUT_DIRECTION,\n\"windowModality\": constants.WINDOW_MODALITY,\n}\nreturn maps\ndef __repr__(self) -&gt; str:\nreturn get_repr(self)\ndef add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\n\"\"\"Add shortcut to widget.\n        Adds as shortcut for given callback and context to this widget.\n        Args:\n            keysequence: Key sequence\n            callback: Callback for the shortcut\n            context: context for this shortcut\n        Returns:\n            shortcut object\n        \"\"\"\nif not isinstance(keysequence, QtGui.QKeySequence):\nkeysequence = gui.KeySequence(keysequence)\ncontext = constants.SHORTCUT_CONTEXT[context]\nreturn gui.Shortcut(keysequence, self, callback, context=context)\ndef get_win_id(self) -&gt; int:\nreturn int(self.winId())\ndef resize(self, *size) -&gt; None:\nif isinstance(size[0], tuple):\nsuper().resize(*size[0])\nelse:\nsuper().resize(*size)\ndef insertAction(\nself, position_or_action: int | QtGui.QAction, action: QtGui.QAction\n):\n\"\"\"Extend insertAction to also allow int index.\"\"\"\nif isinstance(position_or_action, int):\nposition_or_action = self.actions()[position_or_action]\nsuper().insertAction(position_or_action, action)\ndef add_action(\nself,\ntext: str | gui.Action,\ntriggered: Callable = None,\nicon: Any | None = None,\ncheckable: bool = False,\nchecked: bool = False,\nshortcut: str | None = None,\nstatus_tip: str | None = None,\nparent=None,\n) -&gt; gui.Action:\n\"\"\"Add an action to the menu.\n        Args:\n            text: Label for the action\n            triggered: gets called when action is triggered\n            icon: icon for action\n            checkable: as checkbox action\n            checked: if checkable, turn on by default\n            shortcut: Shortcut for action\n            status_tip: Status tip to be shown in status bar\n            parent: parent\n        Returns:\n            Action added to menu\n        \"\"\"\nif isinstance(text, str):\naction = gui.Action(parent or self, text=text)\nif triggered:\naction.triggered.connect(triggered)\naction.set_icon(icon)\naction.set_shortcut(shortcut)\nif checkable:\naction.setCheckable(True)\naction.setChecked(checked)\nif status_tip is not None:\naction.setStatusTip(status_tip)\nelse:\naction = text\naction.setParent(self)\nself.addAction(action)\nreturn action\ndef add_actions(self, actions: list[QtGui.QAction]):\nfor i in actions:\ni.setParent(self)\nself.addActions(actions)\ndef toggle_fullscreen(self):\n\"\"\"Toggle between fullscreen and regular size.\"\"\"\nif self.isFullScreen():\nself.showNormal()\nelse:\nself.showFullScreen()\ndef toggle_maximized(self):\n\"\"\"Toggle between maximized and regular size.\"\"\"\nif self.isMaximized():\nself.showNormal()\nelse:\nself.showMaximized()\ndef set_graphics_effect(\nself,\neffect: QtWidgets.QGraphicsEffect\n| Literal[\"drop_shadow\", \"blur\", \"opacity\", \"colorize\"],\nradius: int = 10,\nopacity: int = 0.7,\nstrength: int = 0.5,\ncolor: datatypes.ColorType = \"blue\",\n) -&gt; QtWidgets.QGraphicsEffect:\nmatch effect:\ncase \"drop_shadow\":\neffect = widgets.GraphicsDropShadowEffect(self)\neffect.setBlurRadius(radius)\neffect.setColor(colors.get_color(color))\ncase \"blur\":\neffect = widgets.GraphicsBlurEffect(self)\neffect.setBlurRadius(radius)\ncase \"opacity\":\neffect = widgets.GraphicsOpacityEffect(self)\neffect.setOpacity(opacity)\ncase \"colorize\":\neffect = widgets.GraphicsColorizeEffect(self)\neffect.setColor(colors.get_color(color))\neffect.setStrength(strength)\nself.setGraphicsEffect(effect)\nreturn effect\ndef play_animation(self, animation_type: str, **kwargs) -&gt; QtCore.QPropertyAnimation:\nfrom prettyqt import custom_animations\nmatch animation_type:\ncase \"fade_in\":\nanim = custom_animations.FadeInAnimation(**kwargs, parent=self)\nanim.apply_to(self)\ncase \"bounce\":\nanim = custom_animations.BounceAnimation(**kwargs, parent=self)\nanim.apply_to(self)\ncase \"slide\":\nanim = custom_animations.SlideAnimation(**kwargs, parent=self)\nanim.apply_to(self)\ncase \"property\":\nanim = core.PropertyAnimation(parent=self)\nanim.setTargetObject(self)\nanim.set_property_name(kwargs.pop(\"name\"))\nanim.setStartValue(kwargs.pop(\"start_value\"))\nanim.setEndValue(kwargs.pop(\"end_value\"))\nanim.setDuration(kwargs.pop(\"duration\", 1000))\nanim.set_easing(kwargs.pop(\"easing\", \"linear\"))\nanim.start()\nreturn anim\ndef map_to_global(self, pos_or_rect):\nmatch pos_or_rect:\ncase QtCore.QRect() | QtCore.QRectF():\ntop_left = self.mapToGlobal(pos_or_rect.topLeft())\nbottom_right = self.mapToGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase QtCore.QPoint() | QtCore.QPointF():\nreturn super().mapToGlobal(pos_or_rect)\ncase int(), int():\nreturn QtCore.QPoint(*pos_or_rect)\ncase float(), float():\nreturn QtCore.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\nreturn QtCore.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\nreturn QtCore.QRectF(*pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\ndef raise_to_top(self):\nif sys.platform.startswith(\"win\"):\nimport win32con\nfrom win32gui import SetWindowPos\n# set to always-on-top and disable it again. that way windows stays in front\nflag = win32con.SWP_NOMOVE | win32con.SWP_NOSIZE | win32con.SWP_SHOWWINDOW\nwin_id = self.winId()\nSetWindowPos(win_id, win32con.HWND_TOPMOST, 0, 0, 0, 0, flag)\nSetWindowPos(win_id, win32con.HWND_NOTOPMOST, 0, 0, 0, 0, flag)\n# state = (self.windowState() &amp; ~Qt.WindowMinimized) | Qt.WindowActive\n# self.setWindowState(state)\nself.raise_()\nself.show()\nself.activateWindow()\ndef set_icon(self, icon: datatypes.IconType) -&gt; None:\n\"\"\"Set the window icon.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon, color=colors.WINDOW_ICON_COLOR)\nsuper().setWindowIcon(icon)\nsetWindowIcon = set_icon\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = super().windowIcon()\nreturn None if icon.isNull() else gui.Icon(icon)\n@functools.singledispatchmethod\ndef set_min_size(self, size: QtCore.QSize | tuple[int | None, int | None]) -&gt; None:\nif isinstance(size, tuple):\nx = 0 if size[0] is None else size[0]\ny = 0 if size[1] is None else size[1]\nsuper().setMinimumSize(x, y)\nelse:\nsuper().setMinimumSize(size)\nsetMinimumSize = set_min_size\n@set_min_size.register\ndef _(self, x: int, y: int | None):\nself.set_min_size((x, y))\n@set_min_size.register  # these can be merged when min py version is 3.11\ndef _(self, x: None, y: int | None):\nself.set_min_size((x, y))\n@functools.singledispatchmethod\ndef set_max_size(self, size: QtCore.QSize | tuple[int | None, int | None]) -&gt; None:\nif isinstance(size, tuple):\nx = QWIDGETSIZE_MAX if size[0] is None else size[0]\ny = QWIDGETSIZE_MAX if size[1] is None else size[1]\nsuper().setMaximumSize(x, y)\nelse:\nsuper().setMaximumSize(size)\n@set_max_size.register\ndef _(self, x: int, y: int | None):\nself.set_max_size((x, y))\n@set_max_size.register  # these can be merged when min py version is 3.11\ndef _(self, x: None, y: int | None):\nself.set_max_size((x, y))\ndef set_min_width(self, width: int | None) -&gt; None:\nif width is None:\nwidth = 0\nsuper().setMinimumWidth(width)\ndef set_max_width(self, width: int | None) -&gt; None:\nif width is None:\nwidth = QWIDGETSIZE_MAX\nsuper().setMaximumWidth(width)\ndef set_min_height(self, height: int | None) -&gt; None:\nif height is None:\nheight = 0\nsuper().setMinimumHeight(height)\ndef set_max_height(self, height: int | None) -&gt; None:\nif height is None:\nheight = QWIDGETSIZE_MAX\nsuper().setMaximumHeight(height)\ndef set_enabled(self, enabled: bool = True) -&gt; None:\nself.setEnabled(enabled)\ndef set_disabled(self) -&gt; None:\nself.setEnabled(False)\ndef set_title(self, title: str) -&gt; None:\nself.setWindowTitle(title)\ndef get_title(self) -&gt; str:\nreturn self.windowTitle()\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nself.setToolTip(tooltip)\ndef set_font(\nself,\nfont_name: str | None = None,\nfont_size: int | None = None,\nweight: int | None = None,\nitalic: bool = False,\n) -&gt; gui.Font:\nif font_size is None:\nfont_size = -1\nif weight is None:\nweight = -1\nif font_name is None:\nfont_name = self.font().family()\nfont = gui.Font(font_name, font_size, weight, italic)\nself.setFont(font)\nreturn font\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_foreground_role(self) -&gt; gui.palette.RoleStr:\nreturn gui.palette.ROLE.inverse[self.foregroundRole()]\ndef set_foreground_role(self, role: gui.palette.RoleStr):\nif role not in gui.palette.ROLE:\nraise InvalidParamError(role, gui.palette.ROLE)\nself.setForegroundRole(gui.palette.ROLE[role])\ndef get_background_role(self) -&gt; gui.palette.RoleStr:\nreturn gui.palette.ROLE.inverse[self.backgroundRole()]\ndef set_background_role(self, role: gui.palette.RoleStr):\nif role not in gui.palette.ROLE:\nraise InvalidParamError(role, gui.palette.ROLE)\nself.setBackgroundRole(gui.palette.ROLE[role])\ndef set_window_flags(self, *flags: constants.WindowTypeStr, append: bool = False):\nfor flag in flags:\nif flag not in constants.WINDOW_TYPE:\nraise InvalidParamError(flag, constants.WINDOW_TYPE)\nresult = constants.WINDOW_TYPE.merge_flags(flags)\nif append:\nresult = result | self.windowFlags()\nself.setWindowFlags(result)\ndef set_flags(\nself,\nminimize: bool | None = None,\nmaximize: bool | None = None,\nclose: bool | None = None,\nstay_on_top: bool | None = None,\nframeless: bool | None = None,\nwindow: bool | None = None,\ndialog: bool | None = None,\ntooltip: bool | None = None,\ntool: bool | None = None,\ncustomize: bool | None = None,\nwindow_title: bool | None = None,\n) -&gt; None:\nflags = {\nminimize: QtCore.Qt.WindowType.WindowMinimizeButtonHint,\nmaximize: QtCore.Qt.WindowType.WindowMaximizeButtonHint,\nclose: QtCore.Qt.WindowType.WindowCloseButtonHint,\nstay_on_top: QtCore.Qt.WindowType.WindowStaysOnTopHint,\nframeless: QtCore.Qt.WindowType.FramelessWindowHint,\nwindow: QtCore.Qt.WindowType.Window,\ndialog: QtCore.Qt.WindowType.Dialog,\ntooltip: QtCore.Qt.WindowType.ToolTip,\ntool: QtCore.Qt.WindowType.Tool,\ncustomize: QtCore.Qt.WindowType.CustomizeWindowHint,\nwindow_title: QtCore.Qt.WindowType.WindowTitleHint,\n}\nfor k, v in flags.items():\nif k is not None:\nself.setWindowFlag(v, k)\ndef set_attribute(\nself, attribute: constants.WidgetAttributeStr, state: bool = True\n) -&gt; None:\nif attribute not in constants.WIDGET_ATTRIBUTE:\nraise InvalidParamError(attribute, constants.WIDGET_ATTRIBUTE)\nself.setAttribute(constants.WIDGET_ATTRIBUTE[attribute], state)\ndef set_attributes(self, **kwargs: bool) -&gt; None:\nfor attr, state in kwargs.items():\nif attr not in constants.WIDGET_ATTRIBUTE:\nraise InvalidParamError(attr, constants.WIDGET_ATTRIBUTE)\nself.setAttribute(constants.WIDGET_ATTRIBUTE[attr], state)  # type: ignore\ndef set_modality(self, modality: constants.WindowModalityStr) -&gt; None:\n\"\"\"Set modality for the dialog.\n        Args:\n            modality: modality for the main window\n        Raises:\n            InvalidParamError: modality type does not exist\n        \"\"\"\nif modality not in constants.WINDOW_MODALITY:\nraise InvalidParamError(modality, constants.WINDOW_MODALITY)\nself.setWindowModality(constants.WINDOW_MODALITY[modality])\ndef get_modality(self) -&gt; constants.WindowModalityStr:\n\"\"\"Get the current modality modes as a string.\n        Returns:\n            modality mode\n        \"\"\"\nreturn constants.WINDOW_MODALITY.inverse[self.windowModality()]\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr | None = None,\nvertical: widgets.sizepolicy.SizePolicyStr | None = None,\n) -&gt; None:\n\"\"\"Set the sizes policy.\n        Args:\n            horizontal: horizontal size policy\n            vertical: vertical size policy\n        \"\"\"\nsp = self.get_size_policy()\nif horizontal is not None:\nsp.set_horizontal_policy(horizontal)\nif vertical is not None:\nsp.set_vertical_policy(vertical)\nself.setSizePolicy(sp)\ndef get_size_policy(self) -&gt; widgets.SizePolicy:\nqpol = self.sizePolicy()\nif isinstance(qpol, widgets.SizePolicy):\nreturn qpol\nreturn widgets.SizePolicy.clone(qpol)\ndef get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\ndef set_background_color(self, color: datatypes.ColorType) -&gt; None:\ncol_str = \"\" if color is None else colors.get_color(color).name()\nwith self.edit_stylesheet() as ss:\nss.backgroundColor.setValue(col_str)\n@contextlib.contextmanager\ndef grab_mouse_events(\nself, cursor_shape: constants.CursorShapeStr | None = None\n) -&gt; Iterator[None]:\nif cursor_shape is not None:\nself.grabMouse(constants.CURSOR_SHAPE[cursor_shape])\nelse:\nself.grabMouse()\nyield None\nself.releaseMouse()\n@contextlib.contextmanager\ndef grab_keyboard_events(self) -&gt; Iterator[None]:\nself.grabKeyboard()\nyield None\nself.releaseKeyboard()\n@contextlib.contextmanager\ndef updates_off(self) -&gt; Iterator[None]:\nupdates = self.updatesEnabled()\nself.setUpdatesEnabled(False)\nyield None\nself.setUpdatesEnabled(updates)\n@contextlib.contextmanager\ndef edit_stylesheet(self) -&gt; Iterator[qstylizer.style.StyleSheet]:\nss = self.get_stylesheet()\nyield ss\nself.set_stylesheet(ss)\ndef set_stylesheet(\nself, ss: None | str | qstylizer.style.StyleSheet | datatypes.PathType\n):\nmatch ss:\ncase None:\nss = \"\"\ncase os.PathLike():\nss = pathlib.Path(ss).read_text()\ncase qstylizer.style.StyleSheet():\nss = str(ss)\nself.setStyleSheet(ss)\ndef get_stylesheet(self) -&gt; qstylizer.style.StyleSheet:\ntry:\nreturn qstylizer.parser.parse(self.styleSheet())\nexcept ValueError:\nreturn qstylizer.style.StyleSheet()\n@contextlib.contextmanager\ndef edit_palette(self) -&gt; Iterator[gui.Palette]:\npalette = gui.Palette(self.palette())\nyield palette\nself.setPalette(palette)\n@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\ndef set_context_menu_policy(self, policy: constants.ContextPolicyStr) -&gt; None:\n\"\"\"Set contextmenu policy for given item view.\n        Args:\n            policy: contextmenu policy to use\n        Raises:\n            InvalidParamError: policy does not exist\n        \"\"\"\nif policy not in constants.CONTEXT_POLICY:\nraise InvalidParamError(policy, constants.CONTEXT_POLICY)\nself.setContextMenuPolicy(constants.CONTEXT_POLICY[policy])\ndef get_context_menu_policy(self) -&gt; constants.ContextPolicyStr:\n\"\"\"Return current contextmenu policy.\n        Returns:\n            contextmenu policy\n        \"\"\"\nreturn constants.CONTEXT_POLICY.inverse[self.contextMenuPolicy()]\ndef set_window_state(self, policy: constants.WindowStateStr) -&gt; None:\n\"\"\"Set window state for given item view.\n        Args:\n            policy: window state to use\n        Raises:\n            InvalidParamError: policy does not exist\n        \"\"\"\nif policy not in constants.WINDOW_STATES:\nraise InvalidParamError(policy, constants.WINDOW_STATES)\nself.setWindowState(constants.WINDOW_STATES[policy])\ndef get_window_state(self) -&gt; constants.WindowStateStr:\n\"\"\"Return current window state.\n        Returns:\n            window state\n        \"\"\"\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\ndef set_custom_menu(self, method: Callable) -&gt; None:\nself.set_context_menu_policy(\"custom\")\nself.customContextMenuRequested.connect(method)\ndef set_layout(\nself,\nlayout: LayoutStr | QtWidgets.QLayout | None,\nmargin: int | None = None,\nspacing: int | None = None,\n) -&gt; QtWidgets.QLayout:\n\"\"\"Quick way to set a layout.\n        Sets layout to given layout, also allows setting margin and spacing.\n        Args:\n            layout: Layout to set\n            margin: margin to use in pixels\n            spacing: spacing to use in pixels\n        Returns:\n            Layout\n        \"\"\"\nmatch layout:\ncase None:\nreturn\ncase \"horizontal\":\nself.box = widgets.HBoxLayout()\ncase \"vertical\":\nself.box = widgets.VBoxLayout()\ncase \"grid\":\nself.box = widgets.GridLayout()\ncase \"form\":\nself.box = widgets.FormLayout()\ncase \"stacked\":\nself.box = widgets.StackedLayout()\ncase \"flow\":\nfrom prettyqt import custom_widgets\nself.box = custom_widgets.FlowLayout()\ncase QtWidgets.QLayout():\nself.box = layout\ncase _:\nraise ValueError(\"Invalid Layout\")\nself.setLayout(self.box)\nif margin is not None:\nself.box.set_margin(margin)\nif spacing is not None:\nself.box.setSpacing(spacing)\nreturn self.box\ndef position_on(\nself,\nwhere: Literal[\"parent\", \"window\", \"screen\", \"mouse\"] | QtWidgets.QWidget,\nhow: Literal[\"center\", \"top\", \"left\", \"bottom\", \"right\"] = \"center\",\nscale_ratio: int | None = None,\n):\n\"\"\"Position widget on another widget / window / screen.\n        Arguments:\n            where: where to positin on\n            how: How to align\n            scale_ratio: Resize to scale_ratio * target size\n        \"\"\"\nmatch where:\ncase \"mouse\":\ngeom = core.Rect(gui.Cursor.pos(), gui.Cursor.pos())\ncase \"parent\":\ngeom = self.parent().frameGeometry()\ncase \"window\":\ngeom = self.window().frameGeometry()\ncase QtWidgets.QWidget():\ngeom = where.frameGeometry()\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\nif scale_ratio is not None and where != \"mouse\":\nself.resize(\nint(geom.width() * scale_ratio),\nint(geom.height() * scale_ratio),\n)\nown_geo = self.frameGeometry()\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top() + own_geo.height() // 2)\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom() - own_geo.height() // 2)\ncase \"left\":\nnew = core.Point(geom.left() + own_geo.width() // 2, geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right() - own_geo.width() // 2, geom.center().y())\nown_geo.moveCenter(new)\nself.move(own_geo.topLeft())\ndef set_cursor(self, cursor: constants.CursorShapeStr | QtGui.QCursor) -&gt; None:\nif isinstance(cursor, QtGui.QCursor):\ncurs = cursor\nelif cursor in constants.CURSOR_SHAPE:\ncurs = gui.Cursor(constants.CURSOR_SHAPE[cursor])\nelse:\nraise InvalidParamError(cursor, constants.CURSOR_SHAPE)\nself.setCursor(curs)\ndef set_focus_policy(self, policy: constants.FocusPolicyStr) -&gt; None:\n\"\"\"Set the way the widget accepts keyboard focus.\n        Args:\n            policy (str): Focus policy\n        Raises:\n            InvalidParamError: Description\n        \"\"\"\nif policy not in constants.FOCUS_POLICY:\nraise InvalidParamError(policy, constants.FOCUS_POLICY)\nself.setFocusPolicy(constants.FOCUS_POLICY[policy])\ndef get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return waay the widget accepts keyboard focus.\n        Returns:\n            str: Focus policy\n        \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\ndef set_focus(self, reason: constants.FocusReasonStr | None = None):\nif reason is None:\nself.setFocus()\nelse:\nself.setFocus(constants.FOCUS_REASONS[reason])\ndef set_font_size(self, size: int) -&gt; None:\nfont = self.font()\nfont.setPointSize(size)\nself.setFont(font)\ndef get_font_metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self.fontMetrics())\ndef get_font_info(self) -&gt; gui.FontInfo:\nreturn gui.FontInfo(self.fontInfo())\ndef set_margin(self, margin: int) -&gt; None:\nself.setContentsMargins(margin, margin, margin, margin)\ndef raise_dock(self) -&gt; bool:\nw = self.find_parent(QtWidgets.QDockWidget)\nif w is None:\nreturn False\nw.setVisible(True)\nw.raise_()\nreturn True\ndef set_mask(\nself,\narea: datatypes.RectType | QtGui.QRegion | QtGui.QBitmap | None,\ntyp: gui.region.RegionTypeStr = \"rectangle\",\n):\nmatch area:\ncase None:\nself.clearMask()\nreturn\ncase tuple():\narea = gui.Region(*area, gui.region.REGION_TYPE[typ])\ncase QtCore.QRect():\narea = gui.Region(area, gui.region.REGION_TYPE[typ])\nself.setMask(area)\ndef set_window_file_path(self, path: datatypes.PathType):\nself.setWindowFilePath(os.fspath(path))\ndef get_window_file_path(self) -&gt; pathlib.Path | None:\npath = self.windowFilePath()\nreturn pathlib.Path(path) if path else None\ndef get_image(self) -&gt; QtGui.QPixmap:\nimage = self.grab()\nwith gui.Painter(image) as painter:\npainter.set_composition_mode(\"source_atop\")\nfor gl_widget in self.find_children(QtWidgets.QOpenGLWidget):\nd = gl_widget.mapToGlobal(core.Point()) - self.mapToGlobal(core.Point())\npainter.drawImage(d, gl_widget.grabFramebuffer())\nreturn image\ndef get_screen(self) -&gt; gui.Screen | None:\nwindow = self.window().windowHandle()\nreturn None if window is None else gui.Screen(window.screen())\ndef delete_children(self):\n\"\"\"Delete all children of the specified QObject.\"\"\"\nif hasattr(self, \"clear\"):\nreturn self.clear()\nlayout = self.layout()\nwhile layout.count():\nitem = layout.takeAt(0)\nif widget := item.widget():\nwidget.deleteLater()\nelse:\nself.delete_children(item.layout())\ndef get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\ndef set_style(self, style: str | QtWidgets.QStyle):\nif isinstance(style, str):\nstyle = QtWidgets.QStyleFactory.create(style)\nself.setStyle(style)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.box","title":"<code>box: QtWidgets.QLayout</code>  <code>instance-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.setMinimumSize","title":"<code>setMinimumSize = set_min_size</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.setWindowIcon","title":"<code>setWindowIcon = set_icon</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin._","title":"<code>_(x: None, y: int | None)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@set_max_size.register  # these can be merged when min py version is 3.11\ndef _(self, x: None, y: int | None):\nself.set_max_size((x, y))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def __repr__(self) -&gt; str:\nreturn get_repr(self)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.add_action","title":"<code>add_action(text: str | gui.Action, triggered: Callable = None, icon: Any | None = None, checkable: bool = False, checked: bool = False, shortcut: str | None = None, status_tip: str | None = None, parent: str | None = None) -&gt; gui.Action</code>","text":"<p>Add an action to the menu.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | gui.Action</code> <p>Label for the action</p> required <code>triggered</code> <code>Callable</code> <p>gets called when action is triggered</p> <code>None</code> <code>icon</code> <code>Any | None</code> <p>icon for action</p> <code>None</code> <code>checkable</code> <code>bool</code> <p>as checkbox action</p> <code>False</code> <code>checked</code> <code>bool</code> <p>if checkable, turn on by default</p> <code>False</code> <code>shortcut</code> <code>str | None</code> <p>Shortcut for action</p> <code>None</code> <code>status_tip</code> <code>str | None</code> <p>Status tip to be shown in status bar</p> <code>None</code> <code>parent</code> <p>parent</p> <code>None</code> <p>Returns:</p> Type Description <code>gui.Action</code> <p>Action added to menu</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_action(\nself,\ntext: str | gui.Action,\ntriggered: Callable = None,\nicon: Any | None = None,\ncheckable: bool = False,\nchecked: bool = False,\nshortcut: str | None = None,\nstatus_tip: str | None = None,\nparent=None,\n) -&gt; gui.Action:\n\"\"\"Add an action to the menu.\n    Args:\n        text: Label for the action\n        triggered: gets called when action is triggered\n        icon: icon for action\n        checkable: as checkbox action\n        checked: if checkable, turn on by default\n        shortcut: Shortcut for action\n        status_tip: Status tip to be shown in status bar\n        parent: parent\n    Returns:\n        Action added to menu\n    \"\"\"\nif isinstance(text, str):\naction = gui.Action(parent or self, text=text)\nif triggered:\naction.triggered.connect(triggered)\naction.set_icon(icon)\naction.set_shortcut(shortcut)\nif checkable:\naction.setCheckable(True)\naction.setChecked(checked)\nif status_tip is not None:\naction.setStatusTip(status_tip)\nelse:\naction = text\naction.setParent(self)\nself.addAction(action)\nreturn action\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.add_actions","title":"<code>add_actions(actions: list[QtGui.QAction])</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_actions(self, actions: list[QtGui.QAction]):\nfor i in actions:\ni.setParent(self)\nself.addActions(actions)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.add_shortcut","title":"<code>add_shortcut(keysequence: datatypes.KeyCombinationType, callback: Callable | None = None, context: constants.ShortcutContextStr = 'window') -&gt; gui.Shortcut</code>","text":"<p>Add shortcut to widget.</p> <p>Adds as shortcut for given callback and context to this widget.</p> <p>Parameters:</p> Name Type Description Default <code>keysequence</code> <code>datatypes.KeyCombinationType</code> <p>Key sequence</p> required <code>callback</code> <code>Callable | None</code> <p>Callback for the shortcut</p> <code>None</code> <code>context</code> <code>constants.ShortcutContextStr</code> <p>context for this shortcut</p> <code>'window'</code> <p>Returns:</p> Type Description <code>gui.Shortcut</code> <p>shortcut object</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\n\"\"\"Add shortcut to widget.\n    Adds as shortcut for given callback and context to this widget.\n    Args:\n        keysequence: Key sequence\n        callback: Callback for the shortcut\n        context: context for this shortcut\n    Returns:\n        shortcut object\n    \"\"\"\nif not isinstance(keysequence, QtGui.QKeySequence):\nkeysequence = gui.KeySequence(keysequence)\ncontext = constants.SHORTCUT_CONTEXT[context]\nreturn gui.Shortcut(keysequence, self, callback, context=context)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.delete_children","title":"<code>delete_children()</code>","text":"<p>Delete all children of the specified QObject.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def delete_children(self):\n\"\"\"Delete all children of the specified QObject.\"\"\"\nif hasattr(self, \"clear\"):\nreturn self.clear()\nlayout = self.layout()\nwhile layout.count():\nitem = layout.takeAt(0)\nif widget := item.widget():\nwidget.deleteLater()\nelse:\nself.delete_children(item.layout())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.edit_font","title":"<code>edit_font() -&gt; Iterator[gui.Font]</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.edit_palette","title":"<code>edit_palette() -&gt; Iterator[gui.Palette]</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef edit_palette(self) -&gt; Iterator[gui.Palette]:\npalette = gui.Palette(self.palette())\nyield palette\nself.setPalette(palette)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.edit_stylesheet","title":"<code>edit_stylesheet() -&gt; Iterator[qstylizer.style.StyleSheet]</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef edit_stylesheet(self) -&gt; Iterator[qstylizer.style.StyleSheet]:\nss = self.get_stylesheet()\nyield ss\nself.set_stylesheet(ss)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_background_role","title":"<code>get_background_role() -&gt; gui.palette.RoleStr</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_background_role(self) -&gt; gui.palette.RoleStr:\nreturn gui.palette.ROLE.inverse[self.backgroundRole()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_context_menu_policy","title":"<code>get_context_menu_policy() -&gt; constants.ContextPolicyStr</code>","text":"<p>Return current contextmenu policy.</p> <p>Returns:</p> Type Description <code>constants.ContextPolicyStr</code> <p>contextmenu policy</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_context_menu_policy(self) -&gt; constants.ContextPolicyStr:\n\"\"\"Return current contextmenu policy.\n    Returns:\n        contextmenu policy\n    \"\"\"\nreturn constants.CONTEXT_POLICY.inverse[self.contextMenuPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_cursor","title":"<code>get_cursor() -&gt; gui.Cursor</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_focus_policy","title":"<code>get_focus_policy() -&gt; constants.FocusPolicyStr</code>","text":"<p>Return waay the widget accepts keyboard focus.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>constants.FocusPolicyStr</code> <p>Focus policy</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return waay the widget accepts keyboard focus.\n    Returns:\n        str: Focus policy\n    \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_font","title":"<code>get_font() -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_font_info","title":"<code>get_font_info() -&gt; gui.FontInfo</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_font_info(self) -&gt; gui.FontInfo:\nreturn gui.FontInfo(self.fontInfo())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_font_metrics","title":"<code>get_font_metrics() -&gt; gui.FontMetrics</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_font_metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self.fontMetrics())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_foreground_role","title":"<code>get_foreground_role() -&gt; gui.palette.RoleStr</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_foreground_role(self) -&gt; gui.palette.RoleStr:\nreturn gui.palette.ROLE.inverse[self.foregroundRole()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\nicon = super().windowIcon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_image","title":"<code>get_image() -&gt; QtGui.QPixmap</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_image(self) -&gt; QtGui.QPixmap:\nimage = self.grab()\nwith gui.Painter(image) as painter:\npainter.set_composition_mode(\"source_atop\")\nfor gl_widget in self.find_children(QtWidgets.QOpenGLWidget):\nd = gl_widget.mapToGlobal(core.Point()) - self.mapToGlobal(core.Point())\npainter.drawImage(d, gl_widget.grabFramebuffer())\nreturn image\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_modality","title":"<code>get_modality() -&gt; constants.WindowModalityStr</code>","text":"<p>Get the current modality modes as a string.</p> <p>Returns:</p> Type Description <code>constants.WindowModalityStr</code> <p>modality mode</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_modality(self) -&gt; constants.WindowModalityStr:\n\"\"\"Get the current modality modes as a string.\n    Returns:\n        modality mode\n    \"\"\"\nreturn constants.WINDOW_MODALITY.inverse[self.windowModality()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_palette","title":"<code>get_palette() -&gt; gui.Palette</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_screen","title":"<code>get_screen() -&gt; gui.Screen | None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_screen(self) -&gt; gui.Screen | None:\nwindow = self.window().windowHandle()\nreturn None if window is None else gui.Screen(window.screen())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_size_policy","title":"<code>get_size_policy() -&gt; widgets.SizePolicy</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_size_policy(self) -&gt; widgets.SizePolicy:\nqpol = self.sizePolicy()\nif isinstance(qpol, widgets.SizePolicy):\nreturn qpol\nreturn widgets.SizePolicy.clone(qpol)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_stylesheet","title":"<code>get_stylesheet() -&gt; qstylizer.style.StyleSheet</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_stylesheet(self) -&gt; qstylizer.style.StyleSheet:\ntry:\nreturn qstylizer.parser.parse(self.styleSheet())\nexcept ValueError:\nreturn qstylizer.style.StyleSheet()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_title","title":"<code>get_title() -&gt; str</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_title(self) -&gt; str:\nreturn self.windowTitle()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_win_id","title":"<code>get_win_id() -&gt; int</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_win_id(self) -&gt; int:\nreturn int(self.winId())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_window_file_path","title":"<code>get_window_file_path() -&gt; pathlib.Path | None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_window_file_path(self) -&gt; pathlib.Path | None:\npath = self.windowFilePath()\nreturn pathlib.Path(path) if path else None\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.get_window_state","title":"<code>get_window_state() -&gt; constants.WindowStateStr</code>","text":"<p>Return current window state.</p> <p>Returns:</p> Type Description <code>constants.WindowStateStr</code> <p>window state</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_window_state(self) -&gt; constants.WindowStateStr:\n\"\"\"Return current window state.\n    Returns:\n        window state\n    \"\"\"\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.grab_keyboard_events","title":"<code>grab_keyboard_events() -&gt; Iterator[None]</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef grab_keyboard_events(self) -&gt; Iterator[None]:\nself.grabKeyboard()\nyield None\nself.releaseKeyboard()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.grab_mouse_events","title":"<code>grab_mouse_events(cursor_shape: constants.CursorShapeStr | None = None) -&gt; Iterator[None]</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef grab_mouse_events(\nself, cursor_shape: constants.CursorShapeStr | None = None\n) -&gt; Iterator[None]:\nif cursor_shape is not None:\nself.grabMouse(constants.CURSOR_SHAPE[cursor_shape])\nelse:\nself.grabMouse()\nyield None\nself.releaseMouse()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.insertAction","title":"<code>insertAction(position_or_action: int | QtGui.QAction, action: QtGui.QAction)</code>","text":"<p>Extend insertAction to also allow int index.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def insertAction(\nself, position_or_action: int | QtGui.QAction, action: QtGui.QAction\n):\n\"\"\"Extend insertAction to also allow int index.\"\"\"\nif isinstance(position_or_action, int):\nposition_or_action = self.actions()[position_or_action]\nsuper().insertAction(position_or_action, action)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.map_to_global","title":"<code>map_to_global(pos_or_rect)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def map_to_global(self, pos_or_rect):\nmatch pos_or_rect:\ncase QtCore.QRect() | QtCore.QRectF():\ntop_left = self.mapToGlobal(pos_or_rect.topLeft())\nbottom_right = self.mapToGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase QtCore.QPoint() | QtCore.QPointF():\nreturn super().mapToGlobal(pos_or_rect)\ncase int(), int():\nreturn QtCore.QPoint(*pos_or_rect)\ncase float(), float():\nreturn QtCore.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\nreturn QtCore.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\nreturn QtCore.QRectF(*pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.play_animation","title":"<code>play_animation(animation_type: str, **kwargs: str) -&gt; QtCore.QPropertyAnimation</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def play_animation(self, animation_type: str, **kwargs) -&gt; QtCore.QPropertyAnimation:\nfrom prettyqt import custom_animations\nmatch animation_type:\ncase \"fade_in\":\nanim = custom_animations.FadeInAnimation(**kwargs, parent=self)\nanim.apply_to(self)\ncase \"bounce\":\nanim = custom_animations.BounceAnimation(**kwargs, parent=self)\nanim.apply_to(self)\ncase \"slide\":\nanim = custom_animations.SlideAnimation(**kwargs, parent=self)\nanim.apply_to(self)\ncase \"property\":\nanim = core.PropertyAnimation(parent=self)\nanim.setTargetObject(self)\nanim.set_property_name(kwargs.pop(\"name\"))\nanim.setStartValue(kwargs.pop(\"start_value\"))\nanim.setEndValue(kwargs.pop(\"end_value\"))\nanim.setDuration(kwargs.pop(\"duration\", 1000))\nanim.set_easing(kwargs.pop(\"easing\", \"linear\"))\nanim.start()\nreturn anim\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.position_on","title":"<code>position_on(where: Literal['parent', 'window', 'screen', 'mouse'] | QtWidgets.QWidget, how: Literal['center', 'top', 'left', 'bottom', 'right'] = 'center', scale_ratio: int | None = None)</code>","text":"<p>Position widget on another widget / window / screen.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>Literal['parent', 'window', 'screen', 'mouse'] | QtWidgets.QWidget</code> <p>where to positin on</p> required <code>how</code> <code>Literal['center', 'top', 'left', 'bottom', 'right']</code> <p>How to align</p> <code>'center'</code> <code>scale_ratio</code> <code>int | None</code> <p>Resize to scale_ratio * target size</p> <code>None</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def position_on(\nself,\nwhere: Literal[\"parent\", \"window\", \"screen\", \"mouse\"] | QtWidgets.QWidget,\nhow: Literal[\"center\", \"top\", \"left\", \"bottom\", \"right\"] = \"center\",\nscale_ratio: int | None = None,\n):\n\"\"\"Position widget on another widget / window / screen.\n    Arguments:\n        where: where to positin on\n        how: How to align\n        scale_ratio: Resize to scale_ratio * target size\n    \"\"\"\nmatch where:\ncase \"mouse\":\ngeom = core.Rect(gui.Cursor.pos(), gui.Cursor.pos())\ncase \"parent\":\ngeom = self.parent().frameGeometry()\ncase \"window\":\ngeom = self.window().frameGeometry()\ncase QtWidgets.QWidget():\ngeom = where.frameGeometry()\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\nif scale_ratio is not None and where != \"mouse\":\nself.resize(\nint(geom.width() * scale_ratio),\nint(geom.height() * scale_ratio),\n)\nown_geo = self.frameGeometry()\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top() + own_geo.height() // 2)\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom() - own_geo.height() // 2)\ncase \"left\":\nnew = core.Point(geom.left() + own_geo.width() // 2, geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right() - own_geo.width() // 2, geom.center().y())\nown_geo.moveCenter(new)\nself.move(own_geo.topLeft())\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.raise_dock","title":"<code>raise_dock() -&gt; bool</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def raise_dock(self) -&gt; bool:\nw = self.find_parent(QtWidgets.QDockWidget)\nif w is None:\nreturn False\nw.setVisible(True)\nw.raise_()\nreturn True\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.raise_to_top","title":"<code>raise_to_top()</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def raise_to_top(self):\nif sys.platform.startswith(\"win\"):\nimport win32con\nfrom win32gui import SetWindowPos\n# set to always-on-top and disable it again. that way windows stays in front\nflag = win32con.SWP_NOMOVE | win32con.SWP_NOSIZE | win32con.SWP_SHOWWINDOW\nwin_id = self.winId()\nSetWindowPos(win_id, win32con.HWND_TOPMOST, 0, 0, 0, 0, flag)\nSetWindowPos(win_id, win32con.HWND_NOTOPMOST, 0, 0, 0, 0, flag)\n# state = (self.windowState() &amp; ~Qt.WindowMinimized) | Qt.WindowActive\n# self.setWindowState(state)\nself.raise_()\nself.show()\nself.activateWindow()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.resize","title":"<code>resize(*size) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def resize(self, *size) -&gt; None:\nif isinstance(size[0], tuple):\nsuper().resize(*size[0])\nelse:\nsuper().resize(*size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_attribute","title":"<code>set_attribute(attribute: constants.WidgetAttributeStr, state: bool = True) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_attribute(\nself, attribute: constants.WidgetAttributeStr, state: bool = True\n) -&gt; None:\nif attribute not in constants.WIDGET_ATTRIBUTE:\nraise InvalidParamError(attribute, constants.WIDGET_ATTRIBUTE)\nself.setAttribute(constants.WIDGET_ATTRIBUTE[attribute], state)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_attributes","title":"<code>set_attributes(**kwargs: bool) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_attributes(self, **kwargs: bool) -&gt; None:\nfor attr, state in kwargs.items():\nif attr not in constants.WIDGET_ATTRIBUTE:\nraise InvalidParamError(attr, constants.WIDGET_ATTRIBUTE)\nself.setAttribute(constants.WIDGET_ATTRIBUTE[attr], state)  # type: ignore\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_background_color","title":"<code>set_background_color(color: datatypes.ColorType) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_background_color(self, color: datatypes.ColorType) -&gt; None:\ncol_str = \"\" if color is None else colors.get_color(color).name()\nwith self.edit_stylesheet() as ss:\nss.backgroundColor.setValue(col_str)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_background_role","title":"<code>set_background_role(role: gui.palette.RoleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_background_role(self, role: gui.palette.RoleStr):\nif role not in gui.palette.ROLE:\nraise InvalidParamError(role, gui.palette.ROLE)\nself.setBackgroundRole(gui.palette.ROLE[role])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_context_menu_policy","title":"<code>set_context_menu_policy(policy: constants.ContextPolicyStr) -&gt; None</code>","text":"<p>Set contextmenu policy for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.ContextPolicyStr</code> <p>contextmenu policy to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>policy does not exist</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_context_menu_policy(self, policy: constants.ContextPolicyStr) -&gt; None:\n\"\"\"Set contextmenu policy for given item view.\n    Args:\n        policy: contextmenu policy to use\n    Raises:\n        InvalidParamError: policy does not exist\n    \"\"\"\nif policy not in constants.CONTEXT_POLICY:\nraise InvalidParamError(policy, constants.CONTEXT_POLICY)\nself.setContextMenuPolicy(constants.CONTEXT_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_cursor","title":"<code>set_cursor(cursor: constants.CursorShapeStr | QtGui.QCursor) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_cursor(self, cursor: constants.CursorShapeStr | QtGui.QCursor) -&gt; None:\nif isinstance(cursor, QtGui.QCursor):\ncurs = cursor\nelif cursor in constants.CURSOR_SHAPE:\ncurs = gui.Cursor(constants.CURSOR_SHAPE[cursor])\nelse:\nraise InvalidParamError(cursor, constants.CURSOR_SHAPE)\nself.setCursor(curs)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_custom_menu","title":"<code>set_custom_menu(method: Callable) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_custom_menu(self, method: Callable) -&gt; None:\nself.set_context_menu_policy(\"custom\")\nself.customContextMenuRequested.connect(method)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_disabled","title":"<code>set_disabled() -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_disabled(self) -&gt; None:\nself.setEnabled(False)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_enabled","title":"<code>set_enabled(enabled: bool = True) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_enabled(self, enabled: bool = True) -&gt; None:\nself.setEnabled(enabled)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_flags","title":"<code>set_flags(minimize: bool | None = None, maximize: bool | None = None, close: bool | None = None, stay_on_top: bool | None = None, frameless: bool | None = None, window: bool | None = None, dialog: bool | None = None, tooltip: bool | None = None, tool: bool | None = None, customize: bool | None = None, window_title: bool | None = None) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_flags(\nself,\nminimize: bool | None = None,\nmaximize: bool | None = None,\nclose: bool | None = None,\nstay_on_top: bool | None = None,\nframeless: bool | None = None,\nwindow: bool | None = None,\ndialog: bool | None = None,\ntooltip: bool | None = None,\ntool: bool | None = None,\ncustomize: bool | None = None,\nwindow_title: bool | None = None,\n) -&gt; None:\nflags = {\nminimize: QtCore.Qt.WindowType.WindowMinimizeButtonHint,\nmaximize: QtCore.Qt.WindowType.WindowMaximizeButtonHint,\nclose: QtCore.Qt.WindowType.WindowCloseButtonHint,\nstay_on_top: QtCore.Qt.WindowType.WindowStaysOnTopHint,\nframeless: QtCore.Qt.WindowType.FramelessWindowHint,\nwindow: QtCore.Qt.WindowType.Window,\ndialog: QtCore.Qt.WindowType.Dialog,\ntooltip: QtCore.Qt.WindowType.ToolTip,\ntool: QtCore.Qt.WindowType.Tool,\ncustomize: QtCore.Qt.WindowType.CustomizeWindowHint,\nwindow_title: QtCore.Qt.WindowType.WindowTitleHint,\n}\nfor k, v in flags.items():\nif k is not None:\nself.setWindowFlag(v, k)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_focus","title":"<code>set_focus(reason: constants.FocusReasonStr | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_focus(self, reason: constants.FocusReasonStr | None = None):\nif reason is None:\nself.setFocus()\nelse:\nself.setFocus(constants.FOCUS_REASONS[reason])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_focus_policy","title":"<code>set_focus_policy(policy: constants.FocusPolicyStr) -&gt; None</code>","text":"<p>Set the way the widget accepts keyboard focus.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>str</code> <p>Focus policy</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>Description</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_focus_policy(self, policy: constants.FocusPolicyStr) -&gt; None:\n\"\"\"Set the way the widget accepts keyboard focus.\n    Args:\n        policy (str): Focus policy\n    Raises:\n        InvalidParamError: Description\n    \"\"\"\nif policy not in constants.FOCUS_POLICY:\nraise InvalidParamError(policy, constants.FOCUS_POLICY)\nself.setFocusPolicy(constants.FOCUS_POLICY[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_font","title":"<code>set_font(font_name: str | None = None, font_size: int | None = None, weight: int | None = None, italic: bool = False) -&gt; gui.Font</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_font(\nself,\nfont_name: str | None = None,\nfont_size: int | None = None,\nweight: int | None = None,\nitalic: bool = False,\n) -&gt; gui.Font:\nif font_size is None:\nfont_size = -1\nif weight is None:\nweight = -1\nif font_name is None:\nfont_name = self.font().family()\nfont = gui.Font(font_name, font_size, weight, italic)\nself.setFont(font)\nreturn font\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_font_size","title":"<code>set_font_size(size: int) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_font_size(self, size: int) -&gt; None:\nfont = self.font()\nfont.setPointSize(size)\nself.setFont(font)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_foreground_role","title":"<code>set_foreground_role(role: gui.palette.RoleStr)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_foreground_role(self, role: gui.palette.RoleStr):\nif role not in gui.palette.ROLE:\nraise InvalidParamError(role, gui.palette.ROLE)\nself.setForegroundRole(gui.palette.ROLE[role])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_graphics_effect","title":"<code>set_graphics_effect(effect: QtWidgets.QGraphicsEffect | Literal['drop_shadow', 'blur', 'opacity', 'colorize'], radius: int = 10, opacity: int = 0.7, strength: int = 0.5, color: datatypes.ColorType = 'blue') -&gt; QtWidgets.QGraphicsEffect</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_graphics_effect(\nself,\neffect: QtWidgets.QGraphicsEffect\n| Literal[\"drop_shadow\", \"blur\", \"opacity\", \"colorize\"],\nradius: int = 10,\nopacity: int = 0.7,\nstrength: int = 0.5,\ncolor: datatypes.ColorType = \"blue\",\n) -&gt; QtWidgets.QGraphicsEffect:\nmatch effect:\ncase \"drop_shadow\":\neffect = widgets.GraphicsDropShadowEffect(self)\neffect.setBlurRadius(radius)\neffect.setColor(colors.get_color(color))\ncase \"blur\":\neffect = widgets.GraphicsBlurEffect(self)\neffect.setBlurRadius(radius)\ncase \"opacity\":\neffect = widgets.GraphicsOpacityEffect(self)\neffect.setOpacity(opacity)\ncase \"colorize\":\neffect = widgets.GraphicsColorizeEffect(self)\neffect.setColor(colors.get_color(color))\neffect.setStrength(strength)\nself.setGraphicsEffect(effect)\nreturn effect\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType) -&gt; None</code>","text":"<p>Set the window icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType) -&gt; None:\n\"\"\"Set the window icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon, color=colors.WINDOW_ICON_COLOR)\nsuper().setWindowIcon(icon)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_layout","title":"<code>set_layout(layout: LayoutStr | QtWidgets.QLayout | None, margin: int | None = None, spacing: int | None = None) -&gt; QtWidgets.QLayout</code>","text":"<p>Quick way to set a layout.</p> <p>Sets layout to given layout, also allows setting margin and spacing.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>LayoutStr | QtWidgets.QLayout | None</code> <p>Layout to set</p> required <code>margin</code> <code>int | None</code> <p>margin to use in pixels</p> <code>None</code> <code>spacing</code> <code>int | None</code> <p>spacing to use in pixels</p> <code>None</code> <p>Returns:</p> Type Description <code>QtWidgets.QLayout</code> <p>Layout</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_layout(\nself,\nlayout: LayoutStr | QtWidgets.QLayout | None,\nmargin: int | None = None,\nspacing: int | None = None,\n) -&gt; QtWidgets.QLayout:\n\"\"\"Quick way to set a layout.\n    Sets layout to given layout, also allows setting margin and spacing.\n    Args:\n        layout: Layout to set\n        margin: margin to use in pixels\n        spacing: spacing to use in pixels\n    Returns:\n        Layout\n    \"\"\"\nmatch layout:\ncase None:\nreturn\ncase \"horizontal\":\nself.box = widgets.HBoxLayout()\ncase \"vertical\":\nself.box = widgets.VBoxLayout()\ncase \"grid\":\nself.box = widgets.GridLayout()\ncase \"form\":\nself.box = widgets.FormLayout()\ncase \"stacked\":\nself.box = widgets.StackedLayout()\ncase \"flow\":\nfrom prettyqt import custom_widgets\nself.box = custom_widgets.FlowLayout()\ncase QtWidgets.QLayout():\nself.box = layout\ncase _:\nraise ValueError(\"Invalid Layout\")\nself.setLayout(self.box)\nif margin is not None:\nself.box.set_margin(margin)\nif spacing is not None:\nself.box.setSpacing(spacing)\nreturn self.box\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_margin","title":"<code>set_margin(margin: int) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_margin(self, margin: int) -&gt; None:\nself.setContentsMargins(margin, margin, margin, margin)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_mask","title":"<code>set_mask(area: datatypes.RectType | QtGui.QRegion | QtGui.QBitmap | None, typ: gui.region.RegionTypeStr = 'rectangle')</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_mask(\nself,\narea: datatypes.RectType | QtGui.QRegion | QtGui.QBitmap | None,\ntyp: gui.region.RegionTypeStr = \"rectangle\",\n):\nmatch area:\ncase None:\nself.clearMask()\nreturn\ncase tuple():\narea = gui.Region(*area, gui.region.REGION_TYPE[typ])\ncase QtCore.QRect():\narea = gui.Region(area, gui.region.REGION_TYPE[typ])\nself.setMask(area)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_max_height","title":"<code>set_max_height(height: int | None) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_max_height(self, height: int | None) -&gt; None:\nif height is None:\nheight = QWIDGETSIZE_MAX\nsuper().setMaximumHeight(height)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_max_size","title":"<code>set_max_size(size: QtCore.QSize | tuple[int | None, int | None]) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@functools.singledispatchmethod\ndef set_max_size(self, size: QtCore.QSize | tuple[int | None, int | None]) -&gt; None:\nif isinstance(size, tuple):\nx = QWIDGETSIZE_MAX if size[0] is None else size[0]\ny = QWIDGETSIZE_MAX if size[1] is None else size[1]\nsuper().setMaximumSize(x, y)\nelse:\nsuper().setMaximumSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_max_width","title":"<code>set_max_width(width: int | None) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_max_width(self, width: int | None) -&gt; None:\nif width is None:\nwidth = QWIDGETSIZE_MAX\nsuper().setMaximumWidth(width)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_min_height","title":"<code>set_min_height(height: int | None) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_min_height(self, height: int | None) -&gt; None:\nif height is None:\nheight = 0\nsuper().setMinimumHeight(height)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_min_size","title":"<code>set_min_size(size: QtCore.QSize | tuple[int | None, int | None]) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@functools.singledispatchmethod\ndef set_min_size(self, size: QtCore.QSize | tuple[int | None, int | None]) -&gt; None:\nif isinstance(size, tuple):\nx = 0 if size[0] is None else size[0]\ny = 0 if size[1] is None else size[1]\nsuper().setMinimumSize(x, y)\nelse:\nsuper().setMinimumSize(size)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_min_width","title":"<code>set_min_width(width: int | None) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_min_width(self, width: int | None) -&gt; None:\nif width is None:\nwidth = 0\nsuper().setMinimumWidth(width)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_modality","title":"<code>set_modality(modality: constants.WindowModalityStr) -&gt; None</code>","text":"<p>Set modality for the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>constants.WindowModalityStr</code> <p>modality for the main window</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>modality type does not exist</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_modality(self, modality: constants.WindowModalityStr) -&gt; None:\n\"\"\"Set modality for the dialog.\n    Args:\n        modality: modality for the main window\n    Raises:\n        InvalidParamError: modality type does not exist\n    \"\"\"\nif modality not in constants.WINDOW_MODALITY:\nraise InvalidParamError(modality, constants.WINDOW_MODALITY)\nself.setWindowModality(constants.WINDOW_MODALITY[modality])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_size_policy","title":"<code>set_size_policy(horizontal: widgets.sizepolicy.SizePolicyStr | None = None, vertical: widgets.sizepolicy.SizePolicyStr | None = None) -&gt; None</code>","text":"<p>Set the sizes policy.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>widgets.sizepolicy.SizePolicyStr | None</code> <p>horizontal size policy</p> <code>None</code> <code>vertical</code> <code>widgets.sizepolicy.SizePolicyStr | None</code> <p>vertical size policy</p> <code>None</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr | None = None,\nvertical: widgets.sizepolicy.SizePolicyStr | None = None,\n) -&gt; None:\n\"\"\"Set the sizes policy.\n    Args:\n        horizontal: horizontal size policy\n        vertical: vertical size policy\n    \"\"\"\nsp = self.get_size_policy()\nif horizontal is not None:\nsp.set_horizontal_policy(horizontal)\nif vertical is not None:\nsp.set_vertical_policy(vertical)\nself.setSizePolicy(sp)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_style","title":"<code>set_style(style: str | QtWidgets.QStyle)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_style(self, style: str | QtWidgets.QStyle):\nif isinstance(style, str):\nstyle = QtWidgets.QStyleFactory.create(style)\nself.setStyle(style)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_stylesheet","title":"<code>set_stylesheet(ss: None | str | qstylizer.style.StyleSheet | datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_stylesheet(\nself, ss: None | str | qstylizer.style.StyleSheet | datatypes.PathType\n):\nmatch ss:\ncase None:\nss = \"\"\ncase os.PathLike():\nss = pathlib.Path(ss).read_text()\ncase qstylizer.style.StyleSheet():\nss = str(ss)\nself.setStyleSheet(ss)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_title","title":"<code>set_title(title: str) -&gt; None</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_title(self, title: str) -&gt; None:\nself.setWindowTitle(title)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_tooltip","title":"<code>set_tooltip(tooltip: str | datatypes.PathType, size: datatypes.SizeType | None = None)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nself.setToolTip(tooltip)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_window_file_path","title":"<code>set_window_file_path(path: datatypes.PathType)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_window_file_path(self, path: datatypes.PathType):\nself.setWindowFilePath(os.fspath(path))\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_window_flags","title":"<code>set_window_flags(*flags: constants.WindowTypeStr, append: bool = False)</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_window_flags(self, *flags: constants.WindowTypeStr, append: bool = False):\nfor flag in flags:\nif flag not in constants.WINDOW_TYPE:\nraise InvalidParamError(flag, constants.WINDOW_TYPE)\nresult = constants.WINDOW_TYPE.merge_flags(flags)\nif append:\nresult = result | self.windowFlags()\nself.setWindowFlags(result)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.set_window_state","title":"<code>set_window_state(policy: constants.WindowStateStr) -&gt; None</code>","text":"<p>Set window state for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.WindowStateStr</code> <p>window state to use</p> required <p>Raises:</p> Type Description <code>InvalidParamError</code> <p>policy does not exist</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_window_state(self, policy: constants.WindowStateStr) -&gt; None:\n\"\"\"Set window state for given item view.\n    Args:\n        policy: window state to use\n    Raises:\n        InvalidParamError: policy does not exist\n    \"\"\"\nif policy not in constants.WINDOW_STATES:\nraise InvalidParamError(policy, constants.WINDOW_STATES)\nself.setWindowState(constants.WINDOW_STATES[policy])\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.toggle_fullscreen","title":"<code>toggle_fullscreen()</code>","text":"<p>Toggle between fullscreen and regular size.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def toggle_fullscreen(self):\n\"\"\"Toggle between fullscreen and regular size.\"\"\"\nif self.isFullScreen():\nself.showNormal()\nelse:\nself.showFullScreen()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.toggle_maximized","title":"<code>toggle_maximized()</code>","text":"<p>Toggle between maximized and regular size.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def toggle_maximized(self):\n\"\"\"Toggle between maximized and regular size.\"\"\"\nif self.isMaximized():\nself.showNormal()\nelse:\nself.showMaximized()\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.widget.WidgetMixin.updates_off","title":"<code>updates_off() -&gt; Iterator[None]</code>","text":"Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef updates_off(self) -&gt; Iterator[None]:\nupdates = self.updatesEnabled()\nself.setUpdatesEnabled(False)\nyield None\nself.setUpdatesEnabled(updates)\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.Wizard","title":"<code>Wizard</code>","text":"<p>         Bases: <code>WizardMixin</code>, <code>QtWidgets.QWizard</code></p> Source code in <code>prettyqt\\widgets\\wizard.py</code> <pre><code>class Wizard(WizardMixin, QtWidgets.QWizard):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.WizardPage","title":"<code>WizardPage</code>","text":"<p>         Bases: <code>WizardPageMixin</code>, <code>QtWidgets.QWizardPage</code></p> Source code in <code>prettyqt\\widgets\\wizardpage.py</code> <pre><code>class WizardPage(WizardPageMixin, QtWidgets.QWizardPage):\npass\n</code></pre>"},{"location":"api/widgets.html#prettyqt.widgets.app","title":"<code>app(args: list[str] | None = None, **kwargs: list[str] | None) -&gt; Application</code>","text":"Source code in <code>prettyqt\\widgets\\__init__.py</code> <pre><code>def app(args: list[str] | None = None, **kwargs) -&gt; Application:\nif (instance := Application.instance()) is not None:\nreturn instance\n#  + [\"--ignore-gpu-blacklist\", \"--enable-gpu-rasterization\"]\nreturn Application(sys.argv if args is None else args, **kwargs)\n</code></pre>"}]}