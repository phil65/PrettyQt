{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PrettyQt: Pythonic layer on top of PyQt6 / PySide6","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>PrettyQt is a Python package that provides a pythonic layer on top of the GUI frameworks PyQt6 / PySide6.</p>"},{"location":"index.html#main-features","title":"Main Features","text":"<ul> <li>Subclasses for a large part of the Qt classes, enriched with helper and __dunder__ methods to give a feel of a native GUI library.</li> <li>more than 80 pre-defined widgets and layouts for common use cases</li> <li>more than 30 ItemModels for different data types</li> <li>more than 25 general-purpose proxy models</li> <li>10 ItemDelegates for different purposes</li> <li>20 different validators</li> <li>Integration with pandas / numpy.</li> <li>much, much more.</li> </ul> <p>PrettyQt basically is a wrapper for the whole Qt API (either on top of PySide6 or PyQt6 bindings). Perhaps it can be seen as a small Python equivalent of the KDE framework.</p> <p>A large part of the library consists of a tree of mixins, with one mixin for each Qt class. These mixins also inherit from each other and are applied to the Qt classes. That way each class gets all helper methods from all sub-mixins.</p> <p>Example: The class <code>TreeView</code> inherits from original Qt Class <code>QTreeView</code> and gets helper methods from <code>TreeViewMxin</code>, <code>AbstractItemViewMixin</code>, <code>AbstractScrollAreaMixin</code>, <code>FrameMixin</code>, <code>WidgetMixin</code> and <code>ObjectMixin</code>.</p> <p>To illustrate this, we will use some of our included models:</p> <p>Class hierarchy example</p> Subclass treeParentclass treeMRO tree <pre><code>from prettyqt import itemmodels, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = itemmodels.SubClassTreeModel(core.AbstractItemModelMixin)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> AbstractitemModelMixin subclasses </p> <pre><code>from prettyqt import itemmodels, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = itemmodels.ParentClassTreeModel(widgets.TreeWidget)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> TreeWidget parent classes </p> <pre><code>from prettyqt import itemmodels, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = itemmodels.ParentClassTreeModel(widgets.TreeWidget, mro=True)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> TreeWidget MRO </p> <p>Main objective is to make Qt feel \"pythonic\". Qt is originally a C++ Framework, and using it can be quite cumbersome for Python developers. (very restrictive when it comes to types, very OOP-centric, lot of enum use, snakeCase naming etc.) PrettyQt aims to improve this by:</p> <ul> <li>adding more powerful methods to the classes, which accept more types and have more options (in form of keyword arguments)</li> <li>doing type conversions for method parameters to lessen the strictness for types.</li> <li>raising Exceptions or returning <code>None</code> instead of returning <code>-1</code> or invalid objects.</li> <li>all enum getters/setters also work with strings. Everything typed with Literals for an excellent IDE experience. (Example: )</li> <li>adding a lot of <code>__dunder__</code> methods to the classes to make them behave like good python citizens.</li> </ul> <p>The minimum supported python version is 3.10. The minimum supported Qt version is 6.5</p> <p>The aim is to support the last two released Python versions as well as keeping support for the last Qt LTS release.</p>"},{"location":"index.html#covered-qt-modules","title":"Covered Qt modules","text":"Qt Module PrettyQt module QtBluetooth <code>bluetooth</code> QtCharts <code>charts</code> QtCore <code>core</code> QtDesigner <code>designer</code> QtGui <code>gui</code> QtLocation <code>location</code> QtMultimedia <code>multimedia</code> QtMultimediaWidgets <code>multimediawidgets</code> QtNetwork <code>network</code> QtOpenGLWidgets <code>openglwidgets</code> QtPdf <code>pdf</code> QtPdfWidgets <code>pdfwidgets</code> QtPositioning <code>positioning</code> QtPrintSupport <code>printsupport</code> QtQml <code>qml</code> QtHelp <code>qthelp</code> QtQuick <code>quick</code> QtQuickWidgets <code>quickwidgets</code> QScintilla <code>scintilla</code> QtScXml <code>scxml</code> QtSpatialAudio <code>spatialaudio</code> QtStateMachine <code>statemachine</code> QtSvg <code>svg</code> QtSvgWidgets <code>svgwidgets</code> QtTest <code>test</code> QtTextToSpeech <code>texttospeech</code> QtWebChannel <code>webchannel</code> QtWebEngineCore <code>webenginecore</code> QtWebEngineWidgets <code>webenginewidgets</code> QtWidgets prettyqt.widgets <p>Read more about the general API design.</p> <p>Apart from the mentioned mixin tree and the corresponding classes, this library also contains a lot of custom widgets, delegates, eventfilters, validators, syntaxhighlighters, layouts, models, proxy models and much more.</p> <p>Converting to PrettyQt should be very straightforward since the original behaviour of the Qt classes didnt change for the largest parts and all methods from base Qt modules are still available. (There might be a few constructors with slightly different behaviour though.)</p> <p>Interested? Take a look at the documentation! (even though it totally sucks in its current state.)</p>"},{"location":"index.html#where-to-get-it","title":"Where to get it","text":"<p>The source code is currently hosted on GitHub at: https://github.com/phil65/PrettyQt</p> <p>The latest released version are available at the Python package index.</p> <pre><code># or PyPI\npip install prettyqt\n</code></pre>"},{"location":"index.html#dependencies","title":"Dependencies","text":"Name Constraints Extra Summary Homepage attrs extra == \"addons\" Classes Without Boilerplate Pillow Python Imaging Library (Fork) https://python-pillow.org lxml extra == \"addons\" Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. https://lxml.de/ typing_extensions Backported and Experimental Type Hints for Python 3.7+ qstylizer &lt;0.3,&gt;=0.2 Stylesheet Generator for PyQt{4-5}/PySide{1-2} https://github.com/blambright/qstylizer fsspec &lt;2024.0.0,&gt;=2023.1.0 extra == \"addons\" File-system specification http://github.com/fsspec/filesystem_spec qtconsole &lt;6,&gt;=5 extra == \"addons\" Jupyter Qt console http://jupyter.org orjson &lt;4,&gt;=3 python_version &lt; \"3.12\" and extra == \"addons\" Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy https://github.com/ijl/orjson bidict &lt;1,&gt;=0 The bidirectional mapping library for Python. Pygments Pygments is a syntax highlighting package written in Python. PySide6 Python bindings for the Qt cross-platform application and UI framework https://www.pyside.org pandas &lt;3.0.0,&gt;=2.0.2 extra == \"addons\" Powerful data structures for data analysis, time series, and statistics comtypes &lt;2.0,&gt;=1.1 sys_platform == \"win32\" Pure Python COM package https://github.com/enthought/comtypes pywin32 sys_platform == \"win32\" Python for Window Extensions https://github.com/mhammond/pywin32 ipython &lt;9,&gt;=8 extra == \"addons\" IPython: Productive Interactive Computing https://ipython.org numpy &lt;2,&gt;=1 extra == \"addons\" Fundamental package for array computing in Python https://www.numpy.org"},{"location":"index.html#installation-from-sources","title":"Installation from sources","text":"<p>This project uses poetry for dependency management and packaging. Install this first. In the <code>prettyqt</code> directory (same one where you found this file after cloning the git repo), execute:</p> <pre><code>poetry install\n</code></pre>"},{"location":"index.html#license","title":"License","text":"<p>MIT</p>"},{"location":"index.html#contributing-to-prettyqt","title":"Contributing to prettyqt","text":"<p>All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome!</p>"},{"location":"SUMMARY.html","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage<ul> <li>General</li> <li>Types</li> <li>Bindings</li> </ul> </li> <li>Features<ul> <li>Proxy models<ul> <li>Proxifier</li> <li>Slice proxies<ul> <li>SliceIdentityProxyModel</li> <li>SliceFilterProxyModel</li> <li>SliceChangeFlagsProxyModel</li> <li>SliceChangeIconSizeProxyModel</li> <li>SliceCheckableProxyModel</li> <li>SliceCheckableTreeProxyModel</li> <li>SliceColorValuesProxyModel</li> <li>SliceColorCategoriesProxyModel</li> <li>SliceHighlightCurrentProxyModel</li> <li>SliceValueTransformationProxyModel</li> <li>SliceAppearanceProxyModel</li> <li>SliceDisplayTextProxyModel</li> <li>SliceMapRoleProxyModel</li> </ul> </li> <li>Reshape / Styling proxies<ul> <li>MeltProxyModel</li> <li>FlattenTreeProxyModel</li> <li>ColumnJoinerProxyModel</li> <li>ColumnOrderProxyModel</li> <li>TableToListProxyModel</li> <li>AppearanceProxyModel</li> <li>ChangeHeadersProxymodel</li> </ul> </li> <li>Sort / Filter proxies<ul> <li>FuzzyFilterProxyModel</li> <li>SubsetFilterProxyModel</li> <li>MultiColumnFilterProxyModel</li> <li>RangeFilterProxyModel</li> <li>ValueFilterProxyModel</li> <li>PredicateFilterProxyModel</li> </ul> </li> <li>Pandas proxies<ul> <li>PandasStringColumnFilterProxyModel</li> <li>PandasEvalFilterProxyModel</li> <li>PandasMultiStringColumnFilterProxyModel</li> </ul> </li> <li>Misc proxies<ul> <li>HighlightMouseProxyModel</li> </ul> </li> </ul> </li> <li>Tools<ul> <li>ProxyMapper</li> <li>LinkedSelectionModel</li> </ul> </li> <li>Widgets<ul> <li>AstViewer</li> <li>CommandPalette</li> <li>AnnotatedScrollBar</li> <li>ConfigWidget</li> <li>FilterHeader</li> <li>RegexEditor</li> <li>ScrollAreaTocWidget</li> </ul> </li> <li>Layouts<ul> <li>MultiLineLayout</li> </ul> </li> <li>Delegates<ul> <li>EditorDelegate</li> <li>Editors</li> </ul> </li> <li>Animating</li> <li>Validators</li> <li>Pandas</li> </ul> </li> <li>Qt Modules</li> <li>Additional modules</li> <li>Changelog</li> </ul>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#v1562-2023-07-25","title":"v1.56.2 (2023-07-25)","text":""},{"location":"changelog.html#fix","title":"Fix","text":"<ul> <li>longer timeout when building docs</li> </ul>"},{"location":"changelog.html#v1561-2023-07-25","title":"v1.56.1 (2023-07-25)","text":""},{"location":"changelog.html#fix_1","title":"Fix","text":"<ul> <li>use pypi mknodes version</li> </ul>"},{"location":"changelog.html#v1560-2023-07-25","title":"v1.56.0 (2023-07-25)","text":""},{"location":"changelog.html#feat","title":"Feat","text":"<ul> <li>use Property info for docs</li> <li>Globber for ItemModels</li> <li>add TupleTreeModel</li> <li>ProgressBarDelegate: make total and role a Property</li> </ul>"},{"location":"changelog.html#fix_2","title":"Fix","text":"<ul> <li>FilterHeader: prevent name clash</li> <li>Widget: add missing Mixin</li> </ul>"},{"location":"changelog.html#v1550-2023-07-13","title":"v1.55.0 (2023-07-13)","text":""},{"location":"changelog.html#feat_1","title":"Feat","text":"<ul> <li>first quick shot for GitPythonCommitTreeModel</li> <li>OptionalWidget: add value_changed signal</li> <li>MetaEnum: add get_scope_object and list_options methods</li> <li>Object: add get_qt_base_class method</li> </ul>"},{"location":"changelog.html#fix_3","title":"Fix","text":"<ul> <li>fix link creation</li> </ul>"},{"location":"changelog.html#v1540-2023-07-11","title":"v1.54.0 (2023-07-11)","text":""},{"location":"changelog.html#feat_2","title":"Feat","text":"<ul> <li>add SliceToMarkdownProxyModel</li> <li>HtmlItemDelegate: also support some markdown flavors</li> <li>custom LinkReplacer plugin for mkdocs</li> <li>add SliceColorCategoriesProxyModel</li> <li>Palette: add yield_colors method</li> <li>markdownhelpers: add get_dependency_table method</li> <li>add ModuleInfoModel</li> <li>ColumnOrderProxyModel: allow str for indexes</li> <li>Widget: add grab_example_pixmap classmethod</li> </ul>"},{"location":"changelog.html#fix_4","title":"Fix","text":"<ul> <li>SliceMapRoleProxyModel: avoid recursive loop</li> <li>SliceChangeFlagsProxyModel: emit ChangeLayout when props change</li> <li>spatialaudio: fix some c&amp;p errors</li> <li>DesktopServices: wrong module for QUrl</li> <li>Stalker: disconnect on destroyed signal</li> <li>docs: fix table headers</li> </ul>"},{"location":"changelog.html#v1532-2023-07-07","title":"v1.53.2 (2023-07-07)","text":""},{"location":"changelog.html#fix_5","title":"Fix","text":"<ul> <li>docs: rem duplicate lines</li> </ul>"},{"location":"changelog.html#v1531-2023-07-07","title":"v1.53.1 (2023-07-07)","text":""},{"location":"changelog.html#fix_6","title":"Fix","text":"<ul> <li>build: install addons for docs build</li> </ul>"},{"location":"changelog.html#v1530-2023-07-07","title":"v1.53.0 (2023-07-07)","text":""},{"location":"changelog.html#feat_3","title":"Feat","text":"<ul> <li>AbstractItemModel: add to_mermaid_tree method</li> <li>AbstractTableModel: add to_markdown method</li> <li>Stalker: add show method</li> <li>MetaObject: add has_property and copy_properties_to methods</li> <li>AbstractItemView: support Sequence as column/row kwarg for set_delegate</li> <li>Widget: add get/set_layout_direction</li> <li><code>get_css</code> method for Gradient subclasses</li> <li>Gradient: add set_color_at method</li> <li>StandardItemModel: allow negative indexes for __getitem__</li> <li>GridLayout: allow negative indexes for (int, int) and int indexer</li> <li>Widget: add set_width / set_height methods</li> <li>add GridSplitter</li> <li>ProxyComparerWidget: add link_selections kwarg</li> <li>AbstractItemView: allow None for set_delegate</li> <li>ProxyComparerWiget: allow custom delegate for ItemViews</li> <li>TabWidget: add <code>add</code> method</li> <li>ProxyComparerWidget: add itemview kwarg</li> <li>ProxyComparerWidget: add is_tree kwarg</li> <li>AbstractItemModel: add is_descendent_of helper</li> </ul>"},{"location":"changelog.html#fix_7","title":"Fix","text":"<ul> <li>LogRecordModel: correct time formatting</li> <li>Cursor: fix typo</li> <li>MeltProxyModel: emit signals when props change</li> </ul>"},{"location":"changelog.html#v1520-2023-07-05","title":"v1.52.0 (2023-07-05)","text":""},{"location":"changelog.html#feat_4","title":"Feat","text":"<ul> <li>SliceChangeIconSizeProxyModel: also support QColors and QPixmaps for DecorationRole</li> <li>Slicing support for Image</li> <li>add VerticalLabel</li> <li>WebEnginePage: add insert stylesheet method</li> <li>add TwoListsSelectionWidget</li> <li>add mkdocs gen-pages plugin</li> <li>SliceIdentityProxymodel: also support tuples for indexer_contains</li> <li>add SliceMapRoleProxymodel</li> <li>AbstractItemModel: allow setting parent for index_from_key / get_index_key</li> <li>FileDevice: add some permission getters</li> <li>AbstractItemModel: fetch_more kwarg for iter_tree (no need for prefetch_tree anymore)</li> <li>LinkedSelectionModel: also map selection</li> <li>add SliceDisplayTextProxyModel</li> <li>add BrushEdit</li> <li>IconProvider: for_color supports QBrush</li> <li>ItemSelectionModel: add contains method</li> <li>Proxifer: add map_from / map_to methods</li> <li>add LinkedSelectionModel</li> <li>ProxyMapper: allow more than 2 models for mapping</li> </ul>"},{"location":"changelog.html#fix_8","title":"Fix","text":"<ul> <li>SliceChangeIconSizeProxyModel: use proper val for caching</li> <li>TableToListProxyModel: fix Verticalheader labelling</li> <li>Allow icons from all charmaps</li> <li>SliceEdit: fix step=None</li> </ul>"},{"location":"changelog.html#v1510-2023-07-01","title":"v1.51.0 (2023-07-01)","text":""},{"location":"changelog.html#feat_5","title":"Feat","text":"<ul> <li>WidgetsDetailsModel: use checkstate role for bool values</li> <li>add PolarsTableModel</li> <li>add GitPythonTreeModel</li> <li>ImportLibTreeModel: add DistributionRole</li> <li>add spatialaudio module</li> <li>SubClassTreeModel: support UnionTypes</li> <li>proxifier: add highlight_current method</li> <li>AnnotatedScrollBar: support horizontal</li> <li>StandardItem: add is_checked / toggle_checkstate methods</li> <li>Properties for IntegerValidator / TextLengthValidator</li> <li>ClassTreeModel: add caching</li> <li>add ChangeHeadersProxyModel</li> </ul>"},{"location":"changelog.html#fix_9","title":"Fix","text":"<ul> <li>MetaObject: fix offsets for MetaProps etc</li> <li>SliceIdentityProxyModel: row, column indexing instead of column, row</li> <li>use checkstate enum instead of True/False</li> </ul>"},{"location":"changelog.html#v1500-2023-06-27","title":"v1.50.0 (2023-06-27)","text":""},{"location":"changelog.html#feat_6","title":"Feat","text":"<ul> <li>TreeView: add expand_all method</li> <li>FilterHeader: use NumFilterWidget for numerical columns</li> <li>MultiColumnFilterProxyModel: add support for callables</li> <li>add NumFilterWidget</li> <li>add ColumnOrderProxyModel</li> <li>Proxifier: add melt method</li> <li>add ProxyMapper</li> <li>add MeltProxyModel</li> <li>PandasIndexFilterProxyModel: add endswith filter mode</li> <li>DateTimeAxis: add some datetime-related methods</li> <li>Object: add bind_property classmethod</li> <li>add FunctionValidator</li> <li>VariantDelegate: add validator kwarg</li> <li>add StringListLineEdit</li> <li>LineEdit: add append kwarg</li> <li>ProgressBarDelegate: support choosing a custom role</li> <li>add RangeEdit and SliceEdit</li> <li>Proxifier: add change_icon_size</li> <li>StandardItemModel: set ItemPrototype to our own subclass</li> <li>StandardItemModel: add from_dict method</li> <li>XmlModel: also support lxml.etree</li> <li>slicing support for Grid/GraphicsGridlayout</li> <li>Object: types.UnionType support for Object.find_child</li> <li>PathValidator: add mode setting (any, file, folder)</li> <li>LineEdit: allow explicitely overriding empty handling for validators</li> <li>Proxifier: change set_read_only to a more general change_flags method</li> </ul>"},{"location":"changelog.html#fix_10","title":"Fix","text":"<ul> <li>Widget: fix map_to/from(\"window\", ...)</li> <li>EnumFlagWidget: fix behaviour for non-power-of-2 flags</li> <li>EventLoop: typo in execute()</li> <li>TableToListProxyModel: emit headerDataChanged signal on header change</li> <li>EnumFlagWidget: filter None to workaround Qt flag bug</li> <li>DoubleValidator: correct default for set_range decimals kwarg</li> </ul>"},{"location":"changelog.html#v1490-2023-06-21","title":"v1.49.0 (2023-06-21)","text":""},{"location":"changelog.html#feat_7","title":"Feat","text":"<ul> <li>ParentClassTreeModel: add mro mode</li> <li>add SliceCheckableTreeProxyModel</li> <li>ScrollAreaTocWidget: show windowIcon</li> <li>ScrollAreaTocWidget: make header property user-settable</li> <li>Proxifier: add to_list method</li> <li>PandasTableWithHeaderModel: make multiindex_separator a property</li> <li>new fast PandasProxyModels</li> <li>BaseIPythonWidget: make completion_mode a property</li> <li>add some multimedia classes</li> <li>add SliceChangeIconSizeProxyModel</li> <li>SortFilterProxyModel: allow re.Pattern for setFilterRegularExpression</li> <li>search box for settings</li> <li>MultiColumnFilterProxyModel: support fuzzy and normal (startswith) mode.</li> <li>MultilineLayout: support different layout types</li> <li>add MultiColumnFilterProxyModel</li> <li>add FilterHeader (replaces FilterContainer)</li> <li>TableToListProxyModel: map headerData and allow setting custom header</li> <li>debugging: add proxy_comparer helper</li> <li>allow negative indexes for Layout.getitem</li> <li>ScrollAreaTocWidget: make highlight_font a property</li> <li>qml: add a helper to quickly expose all widgets to qml</li> <li>PropertyAnimation: add get_property_value method</li> <li>Widget: add map_to/from(\"window\")</li> <li>AbstractAnimation: add toggle_direction method</li> <li>ColorValuesProxyModel: allow setting low/high color</li> <li>helpers: get_color_percentage works with arbitrary number of tuple elements now</li> <li>Layout: allow LayoutItems for add()</li> <li>add SliceFilterProxyModel</li> <li>add HighlightMouseProxyModel</li> <li>TabWidget: allow slicing</li> <li>HeaderView: allow indexing by section name</li> <li>slicing support for TabBar</li> <li>Layout: add get_items method</li> <li>Proxifier: add add_column method</li> <li>Slicing support for StackedWidget</li> <li>HeaderView: add HeaderWrapper</li> <li>PushButton: add set_action method</li> <li>add AutoresizingTextEdit</li> <li>add ConfigWidget</li> <li>Slice proxying</li> <li>add include_column kwarg to get_index_key</li> <li>add ColorValuesProxyModel</li> <li>add ModelIndexModel</li> <li>add DisplayMode setting to FlattenedTreeProxyModel</li> <li>Proxifier: add flatten method</li> <li>Object: add properties_set_to context manager</li> <li>AbstractItemModel: add get_breadcrumbs_path</li> <li>ImportlibTreeModel: show markers</li> <li>TreeModel: support TreeItem subclasses</li> <li>AbstractItemModel: depth kwarg for prefetch_tree</li> <li>Treeview: add set_expanded method (which also takes Iterables)</li> <li>AbstractItemModel: depth kwarg for search/iter_tree</li> <li>Object: add signal_blocked method</li> <li>AbstractItemModel: add get_child_indexes method</li> <li>VariantDelegate: make setting EditRole optional</li> <li>ToolBox: add slicing support</li> <li>GraphicsLayout: add slicing support</li> <li>AnimationGroup: add targetObject method</li> <li>ListWidget: add slice support</li> <li>ToolBar: add getitem including slicing</li> <li>BaseListDelegator: support slicing</li> <li>support slicing for layouts</li> <li>Splitter: allow slicing</li> <li>add listdelegators module</li> <li>TextCursor: add join_previous kwarg for edit_block</li> <li>TextCursor: add contains method</li> <li>add FrameInfoModel class</li> <li>add show method</li> <li>add TextAnimation class</li> <li>PygmentsHighlighter: make style a property</li> <li>add EmojiIconEngine class</li> <li>Locale: add get_flag_unicode method</li> <li>Locale: add get_country method</li> <li>Fx: infer type for transition methods</li> <li>Font: add as_qt kwarg for mono()</li> <li>ListMixin: support slices for getitem</li> <li>add SubClassTreeModel / ParentClassTreeModel</li> <li>add PydanticFieldsModel</li> <li>add PydanticModel</li> <li>Settings: allow nesting settings objects</li> <li>add AstViewer</li> <li>add two models for attrs</li> <li>fx: add transition_to/from methods</li> <li>add OptionsValidator</li> <li>RegularExpression: add to_py_pattern method</li> <li>VariantAnimation: add append_reversed method</li> <li>add MultiComboBox</li> <li>AbstractItemModel: add get_index_key / key_from_index methods</li> <li>Layout: groupbox for ContextLayouts</li> <li>MetaObject: also accept snake case for get_property etc</li> <li>MetaProperty: add get_python_type method</li> <li>SequentialAnimationGroup: add reverse / reversed / append_reversed methods</li> <li>Stalker: work with non-prettyqt widgets</li> <li>QObjectDialog: widget click sets focus on HierarchyView</li> <li>add ZoomAnimation</li> <li>VariantAnimation: add reverse/reversed methods</li> <li>fx delegate for widgets</li> <li>Widget: add data kwarg to add_action</li> <li>add delay kwarg to play_animation</li> <li>ScrollBar: add can_scroll method</li> <li>add some ScXml classes</li> <li>HighlightCurrentProxyModel: make highlight color configurable</li> <li>HighlightCurrentProxyModel: add \"row\" as mode option</li> <li>add XmlModel</li> <li>ScrollArea: make get_visible_widgets work with base QWidgets</li> <li>add AstModel class</li> <li>TextCursor: allow tuples for select_text</li> <li>TextCursor: allow tuples for set_position</li> <li>TabWidget: add create_tab_preview method</li> <li>add two models for displaying dataclasses</li> <li>WidgetPropertiesModel: add Stored column</li> <li>Locale: add get_c_locale method</li> <li>Object: only_nonempty kwarg for get_properties</li> <li>MetaObject: extended get_properties filter functionality</li> <li>MetaObject: added get_all_super_classes method</li> <li>Object: allow predicates for find_children property selector</li> <li>RegularExpression: allow re.Pattern in ctor</li> </ul>"},{"location":"changelog.html#fix_11","title":"Fix","text":"<ul> <li>ColumnItemModel: prevent namespace issues</li> <li>TextDocument: method somehow landed in wrong class</li> <li>MultiColumnFilterProxyModel: fix non-fuzzy str search</li> <li>AstModel: correct has_children check</li> <li>Object: fix check in get_properties</li> <li>ScrollbarTocWidget: highlight rows when shown</li> <li>RenderLinkDelegate: correctly clip text</li> <li>ClassTreeModel: catch another exception</li> <li>KeySequenceEdit: return correct type</li> <li>AnimationGroup: fix slicing support</li> <li>DebugMode: hide frame when menu closed</li> <li>CycleWidget: fixed scroll issue</li> <li>FilterContainer: editor width fix</li> <li>FilterContainer: pass object_name to parent in init</li> <li>AbstractItemView: fix incorrect type in size_hint_for_column</li> <li>Spanslider: qt6 related stuff</li> </ul>"},{"location":"changelog.html#v1480-2023-06-08","title":"v1.48.0 (2023-06-08)","text":""},{"location":"changelog.html#feat_8","title":"Feat","text":"<ul> <li>make ProcessEnvironment a MutableMapping</li> <li>TableView: add margin kwarg to get_visible_section_span / resize_visible_columns_to_contents</li> <li>AbstractItemView: add get_visible_section_span</li> <li>AbstractTableModel: add to_dataframe method</li> <li>AbstractItemModel: add prefetch_tree method</li> <li>checks module</li> <li>Windows contextmenu stuff</li> </ul>"},{"location":"changelog.html#fix_12","title":"Fix","text":"<ul> <li>show_root: properly reset before hiding</li> </ul>"},{"location":"changelog.html#v1470-2023-06-07","title":"v1.47.0 (2023-06-07)","text":""},{"location":"changelog.html#feat_9","title":"Feat","text":"<ul> <li>AbstractScrollArea: add add_scrollbar_widget method</li> <li>add AnnotatedScrollBar</li> <li>TextEditSelecter: add getitem</li> <li>PlainTextEdit: add get_visible_line_span</li> <li>add MonotonicListValidator</li> <li>add some pandas widgets</li> <li>add PrintSupport classes</li> <li>PlainTextEdit: add get_pixel_height method</li> <li>quick shot for a PreviewScrollBar</li> <li>Add ScrollAreaTableOfContentsWidget</li> <li>AbstractItemModel: add max_results kwarg for search_tree</li> <li>Object: property selector kwarg for find_children</li> <li>Widget: add map_to and child_at methods</li> <li>ScrollArea: always use Widget for viewport, add get_visible_widgets</li> <li>return handles for AbstractItemView.sync_with</li> <li>AbstractItemView: always use our subclassed ItemSelectionModel</li> <li>make settings a proper MutableMapping</li> <li>Layout: add item_at method</li> <li>add SectionAutoSpanEventFilter</li> <li>AbstractItemView: add sync_with method</li> <li>add OrientedTableView</li> <li>add AutoSizeColumnsEventFilter</li> <li>allow setting eventfilters by name</li> <li>TextDocument: add get_pixel_height method</li> <li>TableView: add resize_visible_columns_to_contents method</li> <li>getattr for core, gui, widgets modules</li> <li>AbstractProxyModel: add get_source_model method</li> <li>TableView: add get_visible_section_span</li> <li>Pixmap: add save_to_file method</li> <li>VariantDelegate: support numpy integers</li> <li>add DataFrameEvalFilterProxyModel</li> <li>TableView: add auto_span method</li> <li>max colcount by default for resizeColumnsToContents</li> <li>DataFrameViewer: use numpy for span detection</li> <li>MetaObject: add forward_signals kwarg to copy</li> <li>MetaObject: also allow copy for widgets which need orientation</li> <li>bit NumPy support for VariantDelegate</li> <li>add HighlightCurrentProxyModel</li> <li>GuiApplication: add find_window method</li> <li>add UrlLineEdit</li> <li>allow str for RegularExpressionValidator ctor</li> <li>TreeView: add show_root method</li> <li>start with pandas stuff</li> <li>AbstractItemView: add get_size_hint_for_column</li> <li>AbstractProxyModel: add remove method</li> <li>add ReadOnlyProxyModel</li> <li>MessageBox: add get_button method</li> <li>LineEdit: allow QRegularExpressions for set_validator</li> <li>Validator: add strict mode</li> <li>AbstractItemModel: add iter_tree / search_tree methods</li> <li>AbstractItemView: add iter_tree method</li> <li>Stalker: add some event signals</li> <li>add TextLength/AlphaNumericValidator</li> <li>add Hex/QssValidator</li> <li>allow showing different content for show_tooltips</li> <li>add Int/Float LineEdits</li> <li>allow setting validator by str</li> <li>TextEditSelecter: add highlight_matches method</li> <li>MenuBar for QObjectDetailsDialog</li> <li>SidebarWidget: allow Actions for add_action</li> <li>prep some Actions for Mainwindow</li> <li>FilterContainer: add set_filter_mode method</li> <li>Stalker: make log_level a prop</li> <li>add ColumnJoinerProxyModel</li> <li>fuzzy filter support in \"regular\" SortFilterProxyModel</li> <li>add AppearanceProxyModel class</li> <li>add SpanTableView</li> <li>add BackingStore</li> <li>add RectFEdit</li> <li>AbstractItemView: add get_proxies method</li> <li>TableView: add is_cell_visible method</li> <li>HeaderView: add is_in_visual_range method</li> <li>show widget borders in debug mode</li> <li>KeyCombination: add add method</li> <li>AbstractItemModel: add is_checkstate_column method</li> <li>add some proxy models</li> <li>ensure_visible kwarg for (Plain)TextEdit</li> <li>colors: quick access to setting color roles</li> <li>TextEditSelecter: end_pos kwarg for goto_line</li> <li>add qobjectsdetailsdialog</li> <li>AbstractItemView: extend set_model</li> <li>MetaObject: add connect_signals method</li> <li>MetaObject: add only_notifiers kwarg for get_signals</li> <li>TextBrowser: add get_source_type method</li> <li>CommandPalette: add for_path method</li> <li>automatic registration for delegates</li> <li>Widget: add \"border\" as set_layout option</li> <li>move all proxy stuff to Proxifier delegate</li> <li>Widget: allow setting margin in ctor</li> <li>AbstractItemView: make role a kwarg for current_data/selected_data</li> <li>add FlattenedTreeProxyModel</li> <li>add StretchButtonToolBar</li> <li>add CrossFadeWidget</li> <li>add AdjustingBoxLayoutDockWidget</li> </ul>"},{"location":"changelog.html#fix_13","title":"Fix","text":"<ul> <li>Settings: raise KeyError for non-existing keys</li> <li>fix create_char</li> <li>add missing import</li> <li>typo</li> <li>DataFrameEvalFilterProxyModel: always get the root sourcemodel</li> <li>ColorDialog: fix replacing QColorShower stuff</li> <li>SidebarWidget: correct signature for add_action</li> <li>WidgetHierarchyModel: only return direct children</li> <li>HeaderView: fix toggle-vis context menu</li> <li>add workaround for missing parent() methods when using PyQt</li> <li>QAbstractProxyModel is part of QtCore</li> <li>dont mask QObject.parent()</li> <li>StackedWidget: fix fade animation</li> <li>WidgetHierarchyModel: missed to adjust columnCount for extra column</li> </ul>"},{"location":"changelog.html#v1460-2023-05-24","title":"v1.46.0 (2023-05-24)","text":""},{"location":"changelog.html#feat_10","title":"Feat","text":"<ul> <li>add ActionGrid</li> <li>StandardItem: add get/set_text_alignment</li> <li>HeaderView: add get_section_for_label method</li> <li>add DefaultDropdownAction</li> <li>add PredicateFilterProxyModel</li> <li>MetaObject: only_writable kwarg for get_properties</li> <li>add ValueTransformationProxyModel</li> <li>add SubsetFilterProxyModel</li> <li>AbstractItemView: add get/set_state</li> <li>add LineEditFilterContainer</li> <li>add TableToListProxyModel</li> <li>AbstractItemModel: add get_model method</li> <li>add WidgetHierarchyModel</li> <li>add MultiLineLayout</li> <li>AbstractItemView: add get_drop_indicator_position</li> <li>Layout: add clear method</li> <li>Font: add scaled method</li> <li>SignalMapper: add delitem method</li> <li>add ListViewGridResizeEventFilter</li> </ul>"},{"location":"changelog.html#fix_14","title":"Fix","text":"<ul> <li>GraphicsScene: fix _get_viewer_zoom without viewer</li> <li>WaitingSpinner: correctly position on parent</li> </ul>"},{"location":"changelog.html#v1450-2023-05-23","title":"v1.45.0 (2023-05-23)","text":""},{"location":"changelog.html#feat_11","title":"Feat","text":"<ul> <li>ShortcutsModel: parent widget column</li> </ul>"},{"location":"changelog.html#fix_15","title":"Fix","text":"<ul> <li>AbstractItemModel: fix transpose for PySide6</li> <li>MetaType: correctly cast in get_name</li> </ul>"},{"location":"changelog.html#v1440-2023-05-23","title":"v1.44.0 (2023-05-23)","text":""},{"location":"changelog.html#feat_12","title":"Feat","text":"<ul> <li>Widget: add highlight_widget method</li> <li>add FocusWidget</li> <li>add MappingModel</li> <li>DateTime: add from_seconds method</li> <li>add LogRecordModel</li> <li>MetaMethod: add get_parameter_types method</li> <li>MetaObject: add filter_shit kwarg for get_methods</li> <li>animation option for Cursor.set_pos</li> <li>add CursorMoveAnimation</li> <li>Cursor: add click method</li> <li>add SliderMoveToMouseClickEventFilter</li> <li>add test module</li> <li>PopupInfo: add icon support</li> <li>EventCatcher: allow str for eventtselection</li> <li>Object: add copy method</li> <li>for_palette method for Gradient</li> <li>RubberBand: add track widget method</li> <li>add WidgetDelegate</li> <li>Object: add copy method</li> <li>proper LocaleEdit</li> <li>Locale: add get_all_locales method</li> <li>add PainterPath.add</li> <li>Widget: support tuples for position_on</li> <li>Cursor: add set_pos method</li> <li>Object: add start_callback_timer</li> <li>add OrientedScrollArea</li> <li>add OverlayBorder</li> <li>add ScientificValidators</li> <li>rich_text param for set_tooltip</li> <li>DateTimeEdit: add set_to_today method</li> <li>add FuzzyCompleter</li> <li>List interface for ListMixin</li> <li>AbstractItemModel: two more context managers</li> <li>ShortcutsModel</li> <li>set ObjectNames in debugmode</li> <li>add OpenGLwidget</li> <li>WidgetsDetailsModel: automatically populate table based on most common ancestor.</li> <li>add WidgetsDetailsModel</li> <li>AbstractItemModel: make proxies easily available</li> <li>ToolBar: add show_tooltips method</li> <li>first shot for a WidgetPropertiesModel</li> <li>Date: add from_string method</li> <li>add EnumFlagWidget</li> <li>Application: add process_events method</li> <li>MetaProperty: add get_enumerator_type</li> <li>add debugmode eventFilter (WIP)</li> <li>EventCatcher: allow callable for do_filter</li> <li>Object: add connect_events method</li> <li>EventCatcher eventfilter</li> <li>Elision functionality for Label</li> <li>add JsonValidator / PythonCodeValidator / ColorValidator classes</li> </ul>"},{"location":"changelog.html#fix_16","title":"Fix","text":"<ul> <li>Cursor: correct subclass check in set_pos</li> <li>EnumComboBox/EnumFlagWidget: only declare one user prop</li> <li>correctly init Url when arg is PathLike</li> </ul>"},{"location":"changelog.html#v1430-2023-05-18","title":"v1.43.0 (2023-05-18)","text":""},{"location":"changelog.html#feat_13","title":"Feat","text":"<ul> <li>Widget: x/y_offset kwargs for position_on</li> <li>add FlashEffect</li> <li>auto kwarg suppport for Slot decorator</li> <li>MetaMethod: add get_normalized_signature method</li> <li>Widget: add show_tooltip method</li> <li>Widget: tool_tip kwarg for add_action</li> <li>ToolBar: add get_widgets method</li> <li>allow str in PropertyAnimation ctor</li> </ul>"},{"location":"changelog.html#fix_17","title":"Fix","text":"<ul> <li>missed some testing shit</li> <li>correctly map in map_to_global</li> </ul>"},{"location":"changelog.html#v1420-2023-05-17","title":"v1.42.0 (2023-05-17)","text":""},{"location":"changelog.html#feat_14","title":"Feat","text":"<ul> <li>coreApplication: add in_main_thread method</li> <li>MetaObject: add get_user_property method</li> <li>MetaType: add get_meta_object / get_meta_object_for_type</li> <li>add SignalList</li> <li>MetaProperty: add get_notify_signal / get_enumerator</li> <li>Object: keep track of eventfilters</li> <li>GuiApplication: add get_keyboard_modifiers / query_keyboard_modifiers</li> <li>Application: add widgets_at method</li> <li>first quick shot for a WidgetEditor</li> <li>allow initializing SizePolicy with strings</li> <li>NativeEventFilter for windows global hotkeys</li> <li>KeySequence: add get_key_bindings</li> <li>KeySequence: cast in getitem</li> <li>KeySequenceEdit: add get_key_combinations / get_finishing_key_combinations</li> <li>add some more prop-edit widgets</li> <li>Drag: return DropActionStr for main_loop</li> <li>animation feature for StackedWidget</li> <li>Frame: add set_frame_rect</li> <li>MetaType: get_type -&gt; get_type_name and new get_type</li> <li>JsonDocument: add format method</li> <li>embed quickref in RegexEditorWidget</li> <li>IconBrowser: use FuzzyFilter proxy</li> <li>GroupBox: add get_alignment method</li> <li>FormLayout: add get/set_label_alignment, get/set_form_alignment</li> <li>Widget: scale_ratio param for center_on</li> <li>context manager stuff for layouts</li> <li>widgets: add HBoxLayout / VBoxLayout classes</li> <li>ActionsModel: Usage count column</li> <li>add AsyncRunner</li> <li>add IPython stuff</li> <li>some helper stuff for ThreadPool</li> <li>Dir: add get_temp_path method</li> <li>merge widget center methods + rect support for mapToGlobal (map_to_global)</li> <li>FileIconProvider: custom_directory_icons methods</li> <li>prep some QtDesigner stuff</li> <li>Widget: add center_on_parent method</li> <li>some methods for StyleOptionViewItem</li> <li>Action: add usage counter and get_type</li> <li>SortFilterProxyModel: add invalidated signal</li> </ul>"},{"location":"changelog.html#fix_18","title":"Fix","text":"<ul> <li>proper mono font for all platforms</li> <li>ElidedLabel: qt6 fix</li> <li>set_data for StandardItem / ListWidgetItem with wrong arg order</li> <li>CommandPalette: widgets from other sources can have parent as an attribute</li> <li>QtWidgets: fix binding of old methods</li> <li>ButtonDelegate: pass parent via kwarg</li> <li>HtmlItemDelegate: properly draw with icon</li> <li>AbstractItemView: fix some setfocus stuff</li> <li>FuzzyFilterModel: do not check html string for filtering</li> </ul>"},{"location":"changelog.html#v1410-2023-05-10","title":"v1.41.0 (2023-05-10)","text":""},{"location":"changelog.html#feat_15","title":"Feat","text":"<ul> <li>ColumnItemModel: add set_columns method</li> <li>add FuzzyFilterModel</li> <li>add commandpalette</li> <li>SortFilterProxyModel: add setFixedFilterList method</li> <li>SortFilterProxyModel: override lessThan to allow sorting for more types</li> <li>AbstractItemView: add some methods to deal with ItemSelectionModel</li> <li>Widget: add set_focus method</li> <li>add ActionsModel class</li> <li>StandardItem: add set_data method</li> <li>IconDelegate: make item role configurable</li> <li>Completer: added path_updated signal</li> <li>Completer: add set_completion_role method</li> <li>SortFilterProxyModel: add set_filter_role method</li> </ul>"},{"location":"changelog.html#fix_19","title":"Fix","text":"<ul> <li>ColumnItemModel: fix get_sort_value</li> <li>ListWidgetItem: fix set_data method</li> <li>IconDelegate: qt6 porting issue</li> <li>HtmlItemDelegate: qt6 porting bug</li> <li>RenderLinkDelegate: Qt6 fixes</li> </ul>"},{"location":"changelog.html#v1400-2023-05-09","title":"v1.40.0 (2023-05-09)","text":""},{"location":"changelog.html#feat_16","title":"Feat","text":"<ul> <li>Painter: add draw_star, draw_diamond methods</li> <li>PolygonF: scale kwarg for create_star_diamond</li> <li>Constraints column for ImportLib model</li> <li>format for different classes</li> <li>Widget: add set_graphics_effect method</li> <li>core: add LoggingCategory class</li> <li>network: add NetworkReply class</li> <li>add MaterialIconStyle class</li> <li>InputMethod: add query_focus_object method</li> <li>add GoogleCompleter</li> <li>add HTMLItemDelegate</li> </ul>"},{"location":"changelog.html#fix_20","title":"Fix","text":"<ul> <li>NestedItem: set parent in append_child</li> </ul>"},{"location":"dependency_table.html","title":"Dependency table","text":"Name Constraints Extra Summary Homepage pandas &lt;3.0.0,&gt;=2.0.2 extra == \"addons\" Powerful data structures for data analysis, time series, and statistics pywin32 sys_platform == \"win32\" Python for Window Extensions https://github.com/mhammond/pywin32 PyQt6-Charts &lt;7.0,&gt;=6.5 extra == \"pyqt6\" Python bindings for the Qt Charts library https://www.riverbankcomputing.com/software/pyqtchart/ qtconsole &lt;6,&gt;=5 extra == \"addons\" Jupyter Qt console http://jupyter.org typing_extensions Backported and Experimental Type Hints for Python 3.7+ fsspec &lt;2024.0.0,&gt;=2023.1.0 extra == \"addons\" File-system specification http://github.com/fsspec/filesystem_spec comtypes &lt;2.0,&gt;=1.1 sys_platform == \"win32\" Pure Python COM package https://github.com/enthought/comtypes lxml extra == \"addons\" Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. https://lxml.de/ bidict &lt;1,&gt;=0 The bidirectional mapping library for Python. Pillow Python Imaging Library (Fork) https://python-pillow.org orjson &lt;4,&gt;=3 python_version &lt; \"3.12\" and extra == \"addons\" Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy https://github.com/ijl/orjson attrs extra == \"addons\" Classes Without Boilerplate PyQt6-QScintilla &lt;3.0,&gt;=2.0 extra == \"pyqt6\" Python bindings for the QScintilla programmers editor widget https://www.riverbankcomputing.com/software/qscintilla/ qstylizer &lt;0.3,&gt;=0.2 Stylesheet Generator for PyQt{4-5}/PySide{1-2} https://github.com/blambright/qstylizer PyQt6 &lt;7.0,&gt;=6.5 extra == \"pyqt6\" Python bindings for the Qt cross platform application toolkit https://www.riverbankcomputing.com/software/pyqt/ ipython &lt;9,&gt;=8 extra == \"addons\" IPython: Productive Interactive Computing https://ipython.org PyQt6-WebEngine &lt;7.0,&gt;=6.5 extra == \"pyqt6\" Python bindings for the Qt WebEngine framework https://www.riverbankcomputing.com/software/pyqtwebengine/ numpy &lt;2,&gt;=1 extra == \"addons\" Fundamental package for array computing in Python https://www.numpy.org Pygments Pygments is a syntax highlighting package written in Python. PySide6 Python bindings for the Qt cross-platform application and UI framework https://www.pyside.org"},{"location":"module_overview.html","title":"Module overview","text":"Qt Module PrettyQt module QtBluetooth <code>bluetooth</code> QtCharts <code>charts</code> QtCore <code>core</code> QtDesigner <code>designer</code> QtGui <code>gui</code> QtLocation <code>location</code> QtMultimedia <code>multimedia</code> QtMultimediaWidgets <code>multimediawidgets</code> QtNetwork <code>network</code> QtOpenGLWidgets <code>openglwidgets</code> QtPdf <code>pdf</code> QtPdfWidgets <code>pdfwidgets</code> QtPositioning <code>positioning</code> QtPrintSupport <code>printsupport</code> QtQml <code>qml</code> QtHelp <code>qthelp</code> QtQuick <code>quick</code> QtQuickWidgets <code>quickwidgets</code> QScintilla <code>scintilla</code> QtScXml <code>scxml</code> QtSpatialAudio <code>spatialaudio</code> QtStateMachine <code>statemachine</code> QtSvg <code>svg</code> QtSvgWidgets <code>svgwidgets</code> QtTest <code>test</code> QtTextToSpeech <code>texttospeech</code> QtWebChannel <code>webchannel</code> QtWebEngineCore <code>webenginecore</code> QtWebEngineWidgets <code>webenginewidgets</code> QtWidgets prettyqt.widgets"},{"location":"somethingelse.html","title":"Somethingelse","text":"<ul> <li>qt_modules</li> <li>additional_modules</li> </ul>"},{"location":"additional_modules/index.html","title":"prettyqt","text":"<p>Top-level package for PrettyQt.</p>"},{"location":"additional_modules/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>animations</li> <li>constants</li> <li>custom_network</li> <li>custom_widgets</li> <li>debugging</li> <li>eventfilters</li> <li>iconprovider</li> <li>ipython</li> <li>itemdelegates</li> <li>itemmodels</li> <li>paths</li> <li>prettyqtmarkdown</li> <li>qt</li> <li>qtpandas</li> <li>syntaxhighlighters</li> <li>utils</li> <li>validators</li> <li>prettyqt</li> </ul>"},{"location":"additional_modules/animations/index.html","title":"animations","text":"<p>Package containing stuff related to animating widgets.</p> <pre><code># a lot of animations depend on current geometry.\n# It\u00b4s advisable to show widget first so that it gets layouted.\nwidget = widget.Label(\"I will get animated.\")\nwidget.show()\n# start a general fade animation with fixed start/end\nwidget.fx[\"windowOpacity\"].animate(start=0, end=1, duration=1000)\n# Transition widget size from current value to (500, 500)\nwidget.fx[\"size\"].transition_to((500, 500), duration=1000)\n# Transition widget size from current value to (500, 500)\nwidget.fx[\"pos\"].transition_from((0, -100), duration=1000)\n# fade-in when widget gets clicked\nwidget.fx[\"windowOpacity\"].animate_on_event(\"mouse_button_press\", start=0, end=1)\n# convenience method for mentioned fade-in\nwidget.fx.fade_in(start=0, end=1, start=500)\n# start a zoom animation\nwidget.fx.zoom(start=1, end=1.5, duration=400)\n# start a slide animation 100px to the right\nwidget.fx.slide(start=(0, 0), end=(100, 0), duration=400)\n</code></pre> <p>PrettyQt makes it easy to animate your widgets. All animation-related methods are available via the Widget.fx attribute.</p> <p>Animating stylesheet values is also possible easily.</p> <p>TODO.</p> Name Children Inherits Animatorprettyqt.animations.animator <ul><li>Object</li></ul> Fxprettyqt.animations.fxFx delegator which allows a quick and easy way to animate widgets. <ul><li>object</li></ul> TextAnimationprettyqt.animations.textanimation <ul><li>PropertyAnimation</li></ul> ZoomAnimationprettyqt.animations.zoomanimation <ul><li>ParallelAnimationGroup</li></ul> SlideAnimationprettyqt.animations.slideanimation <ul><li>PropertyAnimation</li></ul> CursorMoveAnimationprettyqt.animations.cursormoveanimation <ul><li>VariantAnimation</li></ul>"},{"location":"additional_modules/animations/Animator.html","title":"Animator","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/animations/Animator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.Object</code></p> <p>Helper class to animate TabWidget / StackedWidget transistions and other.</p> Required interface <ul> <li><code>currentIndex</code> / <code>setCurrentIndex</code></li> <li><code>widget</code></li> <li><code>indexOf</code></li> <li><code>count</code></li> <li><code>rect</code></li> </ul> Source code in <code>prettyqt\\animations\\animator.py</code> <pre><code>class Animator(core.Object):\n\"\"\"Helper class to animate TabWidget / StackedWidget transistions and other.\n    Required interface:\n       * `currentIndex` / `setCurrentIndex`\n       * `widget`\n       * `indexOf`\n       * `count`\n       * `rect`\n    \"\"\"\ndef __init__(self, widget):\nsuper().__init__(widget)\nself._widget = widget\nself.direction = \"horizontal\"\nself.speed = 500\nself.animation_type = \"out_cubic\"\nself.now = 0\nself.next = 0\nself.wrap = False\nself.pnow = core.Point(0, 0)\nself.active = False\ndef set_direction(self, direction: constants.OrientationStr):\nself.direction = direction\ndef set_speed(self, speed: int):\nself.speed = speed\ndef set_animation(self, animation_type: core.easingcurve.TypeStr):\nself.animation_type = animation_type\ndef set_wrap(self, wrap: bool):\nself.wrap = wrap\n@core.Slot()\ndef slide_in_previous(self):\nnow = self._widget.currentIndex()\nif self.wrap or now &gt; 0:\nself.slide_in(now - 1)\n@core.Slot()\ndef slide_in_next(self):\nnow = self._widget.currentIndex()\nif self.wrap or now &lt; (self._widget.count() - 1):\nself.slide_in(now + 1)\ndef slide_in(self, idx: int | widgets.QWidget):\nif self.active:\nreturn\nif isinstance(idx, int):\nif idx &gt; (self._widget.count() - 1):\nidx = idx % self._widget.count()\nelif idx &lt; 0:\nidx = (idx + self._widget.count()) % self._widget.count()\nidx = self._widget.widget(idx)\nself.active = True\n_now = self._widget.currentIndex()\n_next = self._widget.indexOf(idx)\nif _now == _next:\nself.active = False\nreturn\nif hasattr(self._widget, \"frameRect\"):  # TabWidget doesnt have frameRect\nframe_rect = self._widget.frameRect()\nelse:\nframe_rect = self._widget.rect()\noffsetx, offsety = (frame_rect.width(), frame_rect.height())\nself._widget.widget(_next).setGeometry(frame_rect)\nif self.direction == \"horizontal\":\nif _now &lt; _next:\noffsetx, offsety = -offsetx, 0\nelse:\noffsety = 0\nelif _now &lt; _next:\noffsetx, offsety = 0, -offsety\nelse:\noffsetx = 0\npnext = self._widget.widget(_next).pos()\npnow = self._widget.widget(_now).pos()\nself.pnow = pnow\noffset = core.Point(offsetx, offsety)\nself._widget.widget(_next).move(pnext - offset)\nself._widget.widget(_next).show()\nself._widget.widget(_next).raise_()\nanim_group = core.ParallelAnimationGroup(\nself._widget, finished=self._on_animation_done\n)\nfor index, start, end in zip(\n(_now, _next), (pnow, pnext - offset), (pnow + offset, pnext)\n):\nanimation = core.PropertyAnimation(\nself._widget.widget(index),\nb\"pos\",\nduration=self.speed,\neasing_curve=self.animation_type,\nstart_value=start,\nend_value=end,\n)\nanim_group.addAnimation(animation)\nself.next = _next\nself.now = _now\nself.active = True\nanim_group.start_animation(policy=\"delete\")\n@core.Slot()\ndef _on_animation_done(self):\nself._widget.setCurrentIndex(self.next)\nself._widget.widget(self.now).hide()\nself._widget.widget(self.now).move(self.pnow)\nself.active = False\ndef fade_in(self, widget: int | widgets.QWidget):\nfrom prettyqt import custom_widgets\nwidget = self._widget.widget(widget) if isinstance(widget, int) else widget\nself._widget.fader_widget = custom_widgets.FaderWidget(\nself._widget.currentWidget(), widget, self.speed\n)\nself._widget.setCurrentWidget(widget)\n</code></pre>"},{"location":"additional_modules/animations/Animator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261128320[\"animations.Animator\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255068432 --&gt; 2103261128320\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/animations/Animator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/animations/CursorMoveAnimation.html","title":"CursorMoveAnimation","text":"<p>Qt Base Class: QVariantAnimation</p> <p>Signature: <code>QVariantAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/animations/CursorMoveAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.VariantAnimation</code></p> <p>Animation to move mouse cursor. None for start / end uses current position.</p> Source code in <code>prettyqt\\animations\\cursormoveanimation.py</code> <pre><code>class CursorMoveAnimation(core.VariantAnimation):\n\"\"\"Animation to move mouse cursor. None for start / end uses current position.\"\"\"\ndef __init__(\nself,\nduration: int = 1000,\nstart: datatypes.PointType | None = None,\nend: datatypes.PointType = (0, 0),\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_easing(easing)\nself.set_start_value(start)\nself.set_end_value(end)\nself.setDuration(duration)\nself.valueChanged.connect(gui.Cursor.setPos)\ndef set_start_value(self, point: datatypes.PointType | None):\n\"\"\"Set start position of mouse move.\"\"\"\npoint = gui.Cursor.pos() if point is None else datatypes.to_point(point)\nself.setStartValue(point)\ndef set_end_value(self, point: datatypes.PointType | None):\n\"\"\"Set start position of mouse move.\"\"\"\npoint = gui.Cursor.pos() if point is None else datatypes.to_point(point)\nself.setEndValue(point)\n</code></pre>"},{"location":"additional_modules/animations/CursorMoveAnimation.html#prettyqt.animations.cursormoveanimation.CursorMoveAnimation.set_end_value","title":"<code>set_end_value(point: datatypes.PointType | None)</code>","text":"<p>Set start position of mouse move.</p> Source code in <code>prettyqt\\animations\\cursormoveanimation.py</code> <pre><code>def set_end_value(self, point: datatypes.PointType | None):\n\"\"\"Set start position of mouse move.\"\"\"\npoint = gui.Cursor.pos() if point is None else datatypes.to_point(point)\nself.setEndValue(point)\n</code></pre>"},{"location":"additional_modules/animations/CursorMoveAnimation.html#prettyqt.animations.cursormoveanimation.CursorMoveAnimation.set_start_value","title":"<code>set_start_value(point: datatypes.PointType | None)</code>","text":"<p>Set start position of mouse move.</p> Source code in <code>prettyqt\\animations\\cursormoveanimation.py</code> <pre><code>def set_start_value(self, point: datatypes.PointType | None):\n\"\"\"Set start position of mouse move.\"\"\"\npoint = gui.Cursor.pos() if point is None else datatypes.to_point(point)\nself.setStartValue(point)\n</code></pre>"},{"location":"additional_modules/animations/CursorMoveAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261123520[\"animations.CursorMoveAnimation\"]\n  2103255075152[\"core.VariantAnimation\"]\n  2103255074192[\"core.VariantAnimationMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254630976[\"QtCore.QVariantAnimation\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255075152 --&gt; 2103261123520\n  2103255074192 --&gt; 2103255075152\n  2103255082832 --&gt; 2103255074192\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254630976 --&gt; 2103255075152\n  2103254626176 --&gt; 2103254630976\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/animations/CursorMoveAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>startValue</code> QVariant <code>endValue</code> QVariant <code>currentValue</code> QVariant <code>duration</code> int <code>easingCurve</code> QEasingCurve"},{"location":"additional_modules/animations/Fx.html","title":"Fx","text":""},{"location":"additional_modules/animations/Fx.html#docstrings","title":"DocStrings","text":"<p>Fx delegator which allows a quick and easy way to animate widgets.</p> Source code in <code>prettyqt\\animations\\fx.py</code> <pre><code>class Fx:\n\"\"\"Fx delegator which allows a quick and easy way to animate widgets.\"\"\"\ndef __init__(self, widget: widgets.QWidget):\nself._widget = widget\nself._wrapper = None\n# self._meta = core.MetaObject(self._widget.metaObject())\ndef __getitem__(self, value: str) -&gt; AnimationWrapper:\nvalue = helpers.to_lower_camel(value)\nlogger.debug(f\"Building {value!r} PropertyAnimation for {self._widget!r}\")\nself._wrapper = AnimationWrapper(value, self)\nreturn self._wrapper\n# def __getattr__(self, attr):\n#     return self.__getitem__(attr)\ndef set_colorize_effect(\nself,\ncolor: datatypes.ColorType,\nstrength: float = 0.7,\n) -&gt; widgets.GraphicsColorizeEffect:\neffect = widgets.GraphicsColorizeEffect(self._widget)\neffect.setColor(colors.get_color(color))\neffect.setStrength(strength)\nself._widget.setGraphicsEffect(effect)\nreturn effect\ndef set_opacity_effect(self, opacity: float) -&gt; widgets.GraphicsOpacityEffect:\neffect = widgets.GraphicsOpacityEffect(self._widget)\neffect.setOpacity(opacity)\nself._widget.setGraphicsEffect(effect)\nreturn effect\ndef set_blur_effect(self, radius: int) -&gt; widgets.GraphicsBlurEffect:\neffect = widgets.GraphicsBlurEffect(self._widget)\neffect.setBlurRadius(radius)\nself._widget.setGraphicsEffect(effect)\nreturn effect\ndef set_drop_shadow_effect(\nself,\nradius: int = 10,\ncolor: datatypes.ColorType = \"blue\",\n) -&gt; widgets.GraphicsDropShadowEffect:\neffect = widgets.GraphicsDropShadowEffect(self._widget)\neffect.setBlurRadius(radius)\neffect.setColor(colors.get_color(color))\nself._widget.setGraphicsEffect(effect)\nreturn effect\ndef fade_in(\nself,\nduration: int = 1000,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a fade-in animation.\"\"\"\nreturn self[\"windowOpacity\"].transition_from(\n0.0,\neasing=easing,\nduration=duration,\ndelay=delay,\n)\ndef fade_out(\nself,\nduration: int = 1000,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a fade-out animation.\"\"\"\nreturn self[\"windowOpacity\"].transition_to(\n0.0,\neasing=easing,\nduration=duration,\ndelay=delay,\n)\ndef zoom(\nself,\nduration: int = 1000,\nstart: float = 1.0,\nend: float = 1.0,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\nanchor: str = \"center\",\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a zoom animation with given anchor.\"\"\"\nfrom prettyqt import animations\nanim = animations.ZoomAnimation(parent=self._widget, anchor=anchor)\nanim.set_easing(easing)\nanim.set_start_value(start)\nanim.set_end_value(end)\nanim.set_duration(duration)\nself.run(anim, delay)\nreturn anim\ndef slide(\nself,\nduration: int = 1000,\nstart=None,\nend=None,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\ndelay: int = 0,\nreverse: bool = False,\nsingle_shot: bool = True,\n) -&gt; AnimationTimer:\nanim = core.PropertyAnimation(parent=self._widget)\nanim.set_easing(easing)\npos = self._widget.geometry().topLeft()\nstart_offset = core.Point(0, 0) if start is None else datatypes.to_point(start)\nend_offset = core.Point(0, 0) if end is None else datatypes.to_point(end)\nanim.set_start_value(pos + start_offset)\nanim.set_end_value(pos + end_offset)\nanim.setDuration(duration)\nanim.apply_to(self._widget.pos)\nif reverse:\nanim.append_reversed()\nreturn self.run(anim, delay, single_shot=single_shot)\ndef bounce(\nself,\nend: datatypes.PointType,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\nduration: int = 1000,\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a move animation to given offset and return to original position.\"\"\"\nreturn self[\"pos\"].transition_to(\nend,\neasing=easing,\nduration=duration,\ndelay=delay,\nreverse=True,\n)\ndef run(\nself,\nanimation: core.QPropertyAnimation,\ndelay: int | str = 0,\nsingle_shot: bool = True,\n) -&gt; AnimationTimer:\n\"\"\"Run an animation with given delay.\n        Arguments:\n            animation: Animation to run\n            delay: delay after which animation should start\n            single_shot: whethere the animation should trigger once or repeat\n        Returns:\n            AnimationTimer, a core.Timer subclass with the PropertyAnimation attached.\n        \"\"\"\nif not animation.targetObject().isVisible():\nlogger.info(\"Attention. Starting animation for invisible widget.\")\nlogger.debug(f\"starting {animation!r} with {delay=}. ({single_shot=})\")\ntimer = AnimationTimer(\nparent=self._widget,\nsingle_shot=single_shot,\ninterval=helpers.parse_time(delay) if isinstance(delay, str) else delay,\nanimation=animation,\n)\ntimer.start()\nreturn timer\ndef highlight_widget(self, widget: widgets.QWidget):\nfrom prettyqt.custom_widgets.overlayborder import FocusWidget\nwidget = FocusWidget(self, widget)\nwidget.show()\n</code></pre>"},{"location":"additional_modules/animations/Fx.html#prettyqt.animations.fx.Fx.bounce","title":"<code>bounce(end: datatypes.PointType, easing: core.easingcurve.TypeStr = 'in_out_sine', duration: int = 1000, delay: int = 0) -&gt; AnimationTimer</code>","text":"<p>Trigger a move animation to given offset and return to original position.</p> Source code in <code>prettyqt\\animations\\fx.py</code> <pre><code>def bounce(\nself,\nend: datatypes.PointType,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\nduration: int = 1000,\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a move animation to given offset and return to original position.\"\"\"\nreturn self[\"pos\"].transition_to(\nend,\neasing=easing,\nduration=duration,\ndelay=delay,\nreverse=True,\n)\n</code></pre>"},{"location":"additional_modules/animations/Fx.html#prettyqt.animations.fx.Fx.fade_in","title":"<code>fade_in(duration: int = 1000, easing: core.easingcurve.TypeStr = 'in_out_sine', delay: int = 0) -&gt; AnimationTimer</code>","text":"<p>Trigger a fade-in animation.</p> Source code in <code>prettyqt\\animations\\fx.py</code> <pre><code>def fade_in(\nself,\nduration: int = 1000,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a fade-in animation.\"\"\"\nreturn self[\"windowOpacity\"].transition_from(\n0.0,\neasing=easing,\nduration=duration,\ndelay=delay,\n)\n</code></pre>"},{"location":"additional_modules/animations/Fx.html#prettyqt.animations.fx.Fx.fade_out","title":"<code>fade_out(duration: int = 1000, easing: core.easingcurve.TypeStr = 'in_out_sine', delay: int = 0) -&gt; AnimationTimer</code>","text":"<p>Trigger a fade-out animation.</p> Source code in <code>prettyqt\\animations\\fx.py</code> <pre><code>def fade_out(\nself,\nduration: int = 1000,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a fade-out animation.\"\"\"\nreturn self[\"windowOpacity\"].transition_to(\n0.0,\neasing=easing,\nduration=duration,\ndelay=delay,\n)\n</code></pre>"},{"location":"additional_modules/animations/Fx.html#prettyqt.animations.fx.Fx.run","title":"<code>run(animation: core.QPropertyAnimation, delay: int | str = 0, single_shot: bool = True) -&gt; AnimationTimer</code>","text":"<p>Run an animation with given delay.</p> <p>Parameters:</p> Name Type Description Default <code>animation</code> <code>core.QPropertyAnimation</code> <p>Animation to run</p> required <code>delay</code> <code>int | str</code> <p>delay after which animation should start</p> <code>0</code> <code>single_shot</code> <code>bool</code> <p>whethere the animation should trigger once or repeat</p> <code>True</code> Source code in <code>prettyqt\\animations\\fx.py</code> <pre><code>def run(\nself,\nanimation: core.QPropertyAnimation,\ndelay: int | str = 0,\nsingle_shot: bool = True,\n) -&gt; AnimationTimer:\n\"\"\"Run an animation with given delay.\n    Arguments:\n        animation: Animation to run\n        delay: delay after which animation should start\n        single_shot: whethere the animation should trigger once or repeat\n    Returns:\n        AnimationTimer, a core.Timer subclass with the PropertyAnimation attached.\n    \"\"\"\nif not animation.targetObject().isVisible():\nlogger.info(\"Attention. Starting animation for invisible widget.\")\nlogger.debug(f\"starting {animation!r} with {delay=}. ({single_shot=})\")\ntimer = AnimationTimer(\nparent=self._widget,\nsingle_shot=single_shot,\ninterval=helpers.parse_time(delay) if isinstance(delay, str) else delay,\nanimation=animation,\n)\ntimer.start()\nreturn timer\n</code></pre>"},{"location":"additional_modules/animations/Fx.html#prettyqt.animations.fx.Fx.zoom","title":"<code>zoom(duration: int = 1000, start: float = 1.0, end: float = 1.0, easing: core.easingcurve.TypeStr = 'in_out_sine', anchor: str = 'center', delay: int = 0) -&gt; AnimationTimer</code>","text":"<p>Trigger a zoom animation with given anchor.</p> Source code in <code>prettyqt\\animations\\fx.py</code> <pre><code>def zoom(\nself,\nduration: int = 1000,\nstart: float = 1.0,\nend: float = 1.0,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\nanchor: str = \"center\",\ndelay: int = 0,\n) -&gt; AnimationTimer:\n\"\"\"Trigger a zoom animation with given anchor.\"\"\"\nfrom prettyqt import animations\nanim = animations.ZoomAnimation(parent=self._widget, anchor=anchor)\nanim.set_easing(easing)\nanim.set_start_value(start)\nanim.set_end_value(end)\nanim.set_duration(duration)\nself.run(anim, delay)\nreturn anim\n</code></pre>"},{"location":"additional_modules/animations/Fx.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261097600[\"animations.Fx\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261097600</code></pre>"},{"location":"additional_modules/animations/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>animations</li> <li>Animator</li> <li>Fx</li> <li>TextAnimation</li> <li>ZoomAnimation</li> <li>SlideAnimation</li> <li>CursorMoveAnimation</li> </ul>"},{"location":"additional_modules/animations/SlideAnimation.html","title":"SlideAnimation","text":"<p>Qt Base Class: QPropertyAnimation</p> <p>Signature: <code>QPropertyAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QPropertyAnimation(self, target: PySide6.QtCore.QObject, propertyName: Union[PySide6.QtCore.QByteArray, bytes], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/animations/SlideAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.PropertyAnimation</code></p> Source code in <code>prettyqt\\animations\\slideanimation.py</code> <pre><code>class SlideAnimation(core.PropertyAnimation):\nID = \"slide\"\ndef __init__(\nself,\nparent: QtWidgets.QWidget,\nduration: int = 1000,\nstart: tuple[int, int] | core.Point = (0, 0),\nend: tuple[int, int] | core.Point = (0, 0),\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\n):\nsuper().__init__(parent)\nself.set_easing(easing)\nself.set_start_value(start)\nself.set_end_value(end)\nself.setDuration(duration)\ndef set_start_value(self, point: datatypes.PointType):\noffset = datatypes.to_point(point)\npos = self.parent().geometry().topLeft()\nself.setStartValue(pos + offset)\ndef set_end_value(self, point: datatypes.PointType):\noffset = datatypes.to_point(point)\npos = self.parent().geometry().topLeft()\nself.setEndValue(pos + offset)\ndef apply_to(self, obj: QtWidgets.QWidget | Callable):\nif isinstance(obj, QtWidgets.QWidget):\nobj = obj.pos\nsuper().apply_to(obj)\n</code></pre>"},{"location":"additional_modules/animations/SlideAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261116800[\"animations.SlideAnimation\"]\n  2103255083792[\"core.PropertyAnimation\"]\n  2103255074192[\"core.VariantAnimationMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254631936[\"QtCore.QPropertyAnimation\"]\n  2103254630976[\"QtCore.QVariantAnimation\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255083792 --&gt; 2103261116800\n  2103255074192 --&gt; 2103255083792\n  2103255082832 --&gt; 2103255074192\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254631936 --&gt; 2103255083792\n  2103254630976 --&gt; 2103254631936\n  2103254626176 --&gt; 2103254630976\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/animations/SlideAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>startValue</code> QVariant <code>endValue</code> QVariant <code>currentValue</code> QVariant <code>duration</code> int <code>easingCurve</code> QEasingCurve <code>propertyName</code> QByteArray <code>targetObject</code> QObject"},{"location":"additional_modules/animations/TextAnimation.html","title":"TextAnimation","text":"<p>Qt Base Class: QPropertyAnimation</p> <p>Signature: <code>QPropertyAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QPropertyAnimation(self, target: PySide6.QtCore.QObject, propertyName: Union[PySide6.QtCore.QByteArray, bytes], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/animations/TextAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.PropertyAnimation</code></p> Source code in <code>prettyqt\\animations\\textanimation.py</code> <pre><code>class TextAnimation(core.PropertyAnimation):\nID = \"text\"\ndef __init__(\nself,\nstart: datatypes.VariantType | None = None,\nend: datatypes.VariantType | None = None,\nduration: int = 1000,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\nfmt: NameStr = \"html\",\nmask: str = \"{text}\",\nparent: core.QObject | None = None,\n):\nself._fmt = fmt\nself._mask = mask\nsuper().__init__(parent)\nself._child_anim = core.VariantAnimation()\nself._child_anim.valueChanged.connect(self.updateCurrentValue)\nself.set_easing(easing)\nself.set_duration(duration)\nif start is not None:\nself._child_anim.set_start_value(start)\nif end is not None:\nself._child_anim.set_end_value(end)\nself.setStartValue(\"\")\nself.setStartValue(\"\")\ndef start(self, *args, **kwargs):\nself._child_anim.start(*args, **kwargs)\nsuper().start(*args, **kwargs)\n# TODO: also do stop etc.\ndef set_start_value(self, value: datatypes.VariantType):\nself._child_anim.set_start_value(value)\ndef set_end_value(self, value: datatypes.VariantType):\nself._child_anim.set_end_value(value)\ndef set_easing(self, easing: core.easingcurve.TypeStr | core.QEasingCurve.Type):\nsuper().set_easing(easing)\nself._child_anim.set_easing(easing)\ndef set_duration(self, duration: int):\nsuper().setDuration(duration)\nself._child_anim.set_duration(duration)\ndef updateCurrentValue(self, value: datatypes.VariantType):\nmatch value:\ncase None:\nreturn\ncase gui.QColor():\ncolor = gui.Color(value)\ntext = color.get_name(self._fmt) if self._fmt else color.toString()\nvalue = self._mask.format(text=text)\ncase int() | float():\nvalue = self._mask.format(text=str(value))\ncase core.QPoint() | core.QPointF():\nreturn f\"{value.x()}, {value.y()}\"\ncase core.QSize() | core.QSizeF():\nreturn f\"{value.width()}, {value.width()}\"\nlogger.debug(value)\nsuper().updateCurrentValue(value)\n</code></pre>"},{"location":"additional_modules/animations/TextAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261117760[\"animations.TextAnimation\"]\n  2103255083792[\"core.PropertyAnimation\"]\n  2103255074192[\"core.VariantAnimationMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254631936[\"QtCore.QPropertyAnimation\"]\n  2103254630976[\"QtCore.QVariantAnimation\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255083792 --&gt; 2103261117760\n  2103255074192 --&gt; 2103255083792\n  2103255082832 --&gt; 2103255074192\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254631936 --&gt; 2103255083792\n  2103254630976 --&gt; 2103254631936\n  2103254626176 --&gt; 2103254630976\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/animations/TextAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>startValue</code> QVariant <code>endValue</code> QVariant <code>currentValue</code> QVariant <code>duration</code> int <code>easingCurve</code> QEasingCurve <code>propertyName</code> QByteArray <code>targetObject</code> QObject"},{"location":"additional_modules/animations/ZoomAnimation.html","title":"ZoomAnimation","text":"<p>Qt Base Class: QParallelAnimationGroup</p> <p>Signature: <code>QParallelAnimationGroup(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/animations/ZoomAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ParallelAnimationGroup</code></p> Source code in <code>prettyqt\\animations\\zoomanimation.py</code> <pre><code>class ZoomAnimation(core.ParallelAnimationGroup):\nID = \"zoom\"\ndef __init__(\nself,\nduration: int = 1000,\nstart: float = 1.0,\nend: float = 1.0,\neasing: core.easingcurve.TypeStr = \"in_out_sine\",\nanchor: AnchorStr = \"center\",\nparent: core.QObject | None = None,\n):\nself._start = start\nself._end = end\nself._anchor = anchor\nsuper().__init__(parent)\n# size change animation\nself.anim1 = core.PropertyAnimation()\n# slide animation\nself.anim2 = core.PropertyAnimation()\nself.apply_to(parent)\nself.set_easing(easing)\nself.set_start_value(start)\nself.set_end_value(end)\nself.set_duration(duration)\nself.addAnimation(self.anim1)\nself.addAnimation(self.anim2)\ndef set_start_value(self, factor: float):\nsize = self.parent().size()\nself._start = factor\nself.anim1.setStartValue(size)\nself.anim2.setStartValue(self.parent().pos())\ndef set_end_value(self, factor: float):\nself._end = factor\nzoom_ratio = self._end / self._start\n# setup zoom\nsize = self.parent().size()\nnew = size.toSizeF() * zoom_ratio * zoom_ratio\nself.anim1.setEndValue(new.toSize())\n# setup move\nmove_x = -zoom_ratio * self.parent().width()\nmove_y = -zoom_ratio * self.parent().height()\nmatch self._anchor:\ncase \"center\":\nmovement = core.Point(int(move_x / 2), int(move_y / 2))\ncase \"left\":\nmovement = core.Point(0, int(move_y / 2))\ncase \"right\":\nmovement = core.Point(int(move_x), int(move_y / 2))\ncase \"top\":\nmovement = core.Point(int(move_x / 2), 0)\ncase \"bottom\":\nmovement = core.Point(int(move_x / 2), int(move_y))\nself.anim2.setEndValue(self.parent().pos() + movement)\ndef set_duration(self, duration: int):\nself.anim1.setDuration(duration)\nself.anim2.setDuration(duration)\ndef set_easing(self, easing: core.easingcurve.TypeStr | core.QEasingCurve.Type):\nself.anim1.set_easing(easing)\nself.anim2.set_easing(easing)\ndef apply_to(self, obj: widgets.QWidget):\nself.anim1.apply_to(obj.size)\nself.anim2.apply_to(obj.pos)\ndef start(self, *args, **kwargs):\n# update values before starting\nself.set_start_value(self._start)\nself.set_end_value(self._end)\nsuper().start(*args, **kwargs)\n</code></pre>"},{"location":"additional_modules/animations/ZoomAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261102400[\"animations.ZoomAnimation\"]\n  2103255078992[\"core.ParallelAnimationGroup\"]\n  2103255077072[\"core.AnimationGroupMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254635776[\"QtCore.QParallelAnimationGroup\"]\n  2103254633856[\"QtCore.QAnimationGroup\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255078992 --&gt; 2103261102400\n  2103255077072 --&gt; 2103255078992\n  2103255082832 --&gt; 2103255077072\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254635776 --&gt; 2103255078992\n  2103254633856 --&gt; 2103254635776\n  2103254626176 --&gt; 2103254633856\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/animations/ZoomAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int"},{"location":"additional_modules/constants/index.html","title":"constants","text":"Name Children Inherits bidictprettyqt.utils <ul><li>bidict</li></ul>"},{"location":"additional_modules/constants/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>constants</li> </ul>"},{"location":"additional_modules/custom_network/index.html","title":"custom_network","text":"<p>custom_network pachakge.</p>"},{"location":"additional_modules/custom_network/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>custom_network</li> </ul>"},{"location":"additional_modules/custom_widgets/index.html","title":"custom_widgets","text":"Name Children Inherits LabeledSliderprettyqt.custom_widgets.labeledslider <ul><li>Widget</li></ul> RegexInputprettyqt.custom_widgets.editors.regexinput <ul><li>Widget</li></ul> SizeEditprettyqt.custom_widgets.editors.sizeedit <ul><li>Widget</li></ul> AutoResizePlainTextEditprettyqt.custom_widgets.autoresizingtextedit <ul><li><code>AutoResizeTextEditMixin</code></li><li>PlainTextEdit</li></ul> ImageViewerprettyqt.custom_widgets.imageviewer <ul><li>Widget</li></ul> SpanSliderWidgetprettyqt.custom_widgets.editors.spanslider <ul><li>Widget</li></ul> IconBrowserprettyqt.custom_widgets.iconbrowser <ul><li>MainWindow</li></ul> ColorComboBoxprettyqt.custom_widgets.editors.colorcombobox <ul><li>ComboBox</li></ul> IconEditprettyqt.custom_widgets.editors.iconedit <ul><li>Widget</li></ul> ScrollAreaTocWidgetprettyqt.custom_widgets.scrollareatocwidget <ul><li>TreeView</li></ul> StringListEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> VideoSampleprettyqt.custom_widgets.timeline <ul><li>object</li></ul> CodeEditorprettyqt.custom_widgets.codeeditor <ul><li>PlainTextEdit</li></ul> ColorChooserButtonprettyqt.custom_widgets.editors.colorchooserbutton <ul><li>Widget</li></ul> BrushEditprettyqt.custom_widgets.editors.brushedit <ul><li>Widget</li></ul> LogRecordTableViewprettyqt.custom_widgets.logrecordtableview <ul><li>TableView</li></ul> PreviewScrollBarprettyqt.custom_widgets.scrollbars.previewscrollbar <ul><li>ScrollBar</li></ul> FileChooserButtonprettyqt.custom_widgets.editors.filechooserbutton <ul><li>Widget</li></ul> EnumFlagWidgetprettyqt.custom_widgets.editors.enumflagwidget <ul><li>ToolButton</li></ul> SizePolicyEditprettyqt.custom_widgets.editors.sizepolicyedit <ul><li>Widget</li></ul> CollapsibleFrameprettyqt.custom_widgets.collapsibleframe <ul><li>Frame</li></ul> AnnotatedScrollBarprettyqt.custom_widgets.scrollbars.annotatedscrollbar <ul><li>ScrollBar</li></ul> StandardIconsWidgetprettyqt.custom_widgets.standardiconswidget <ul><li>Widget</li></ul> FilterHeaderprettyqt.custom_widgets.itemviews.filterheader <ul><li>HeaderView</li></ul> PaletteEditprettyqt.custom_widgets.editors.paletteedit <ul><li>Widget</li></ul> SliceEditprettyqt.custom_widgets.editors.sliceedit <ul><li>Widget</li></ul> FlowLayoutprettyqt.custom_widgets.layouts.flowlayout <ul><li>Layout</li></ul> ElidedLabelprettyqt.custom_widgets.labels.elidedlabel <ul><li>Frame</li></ul> SpanSliderprettyqt.custom_widgets.editors.spanslider <ul><li>Slider</li></ul> SingleLineTextEditprettyqt.custom_widgets.editors.singlelinetextedit <ul><li>RegexLineEdit</li></ul> <ul><li>PlainTextEdit</li></ul> ListInputprettyqt.custom_widgets.editors.listinput <ul><li>LineEdit</li></ul> FloatLineEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> ClickableLabelprettyqt.custom_widgets.labels.clickablelabel <ul><li>Label</li></ul> CrossFadeWidgetprettyqt.custom_widgets.crossfadewidget <ul><li>Widget</li></ul> AstViewerprettyqt.custom_widgets.astviewer <ul><li>Splitter</li></ul> FlagSelectionWidgetprettyqt.custom_widgets.editors.flagselectionwidget <ul><li>GroupBox</li></ul> HierarchicalHeaderViewprettyqt.custom_widgets.itemviews.hierarchicalheaderview <ul><li>HeaderView</li></ul> MappedCheckBoxprettyqt.custom_widgets.editors.mappedcheckbox <ul><li>CheckBox</li></ul> RectEditprettyqt.custom_widgets.editors.rectedit <ul><li><code>BaseRectEdit</code></li></ul> OrientedTableViewprettyqt.custom_widgets.orientedtableview <ul><li>TableView</li></ul> SubsequenceCompleterprettyqt.custom_widgets.subsequencecompleter <ul><li>Completer</li></ul> LogTextEditprettyqt.custom_widgets.logtextedit <ul><li>PlainTextEdit</li></ul> KeyCombinationEditprettyqt.custom_widgets.editors.keycombinationedit <ul><li>WidgetMixin</li><li>QKeySequenceEdit</li></ul> RegexLineEditprettyqt.custom_widgets.editors.regexlineedit <ul><li>SingleLineTextEdit</li></ul> AutoResizeTextEditprettyqt.custom_widgets.autoresizingtextedit <ul><li><code>AutoResizeTextEditMixin</code></li><li>TextEdit</li></ul> FaderWidgetprettyqt.custom_widgets.faderwidget <ul><li>Widget</li></ul> BoolDictToolButtonprettyqt.custom_widgets.booldicttoolbutton <ul><li>ToolButton</li></ul> InputAndSliderprettyqt.custom_widgets.editors.inputandslider <ul><li>Widget</li></ul> IntLineEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> MultiComboBoxprettyqt.custom_widgets.multicombobox <ul><li>ComboBox</li></ul> RegionEditprettyqt.custom_widgets.editors.rectedit <ul><li><code>BaseRectEdit</code></li></ul> BorderLayoutprettyqt.custom_widgets.layouts.borderlayout <ul><li>Layout</li></ul> Timelineprettyqt.custom_widgets.timeline <ul><li>Widget</li></ul> ObjectBrowserprettyqt.custom_widgets.objectbrowser <ul><li>MainWindow</li></ul> RectFEditprettyqt.custom_widgets.editors.rectedit <ul><li><code>BaseRectEdit</code></li></ul> QObjectHierarchyTreeViewprettyqt.custom_widgets.qobjecthierarchytreeview <ul><li>TreeView</li></ul> IconLabelprettyqt.custom_widgets.labels.iconlabel <ul><li>Widget</li></ul> RoundProgressBarprettyqt.custom_widgets.roundprogressbar <ul><li>Widget</li></ul> CommandPaletteprettyqt.custom_widgets.commandpalette <ul><li>Widget</li></ul> EnumComboBoxprettyqt.custom_widgets.editors.enumcombobox <ul><li>CursorEdit</li></ul> <ul><li>ComboBox</li></ul> StringOrNumberWidgetprettyqt.custom_widgets.editors.stringornumberwidget <ul><li>GroupBox</li></ul> QObjectPropertiesTableViewprettyqt.custom_widgets.qobjectpropertiestableview <ul><li>TableView</li></ul> SmoothScrollBarprettyqt.custom_widgets.scrollbars.smoothscrollbar <ul><li>ScrollBar</li></ul> MultiLineLayoutprettyqt.custom_widgets.layouts.multilinelayout <ul><li>BoxLayout</li></ul> FontChooserButtonprettyqt.custom_widgets.editors.fontchooserbutton <ul><li>Widget</li></ul> PopupInfoprettyqt.custom_widgets.popupinfo <ul><li>Dialog</li></ul> SidebarWidgetprettyqt.custom_widgets.sidebarwidget <ul><li>MainWindow</li></ul> LocaleEditprettyqt.custom_widgets.editors.localeedit <ul><li>ComboBox</li></ul> OptionalWidgetprettyqt.custom_widgets.optionalwidget <ul><li>GroupBox</li></ul> IconWidgetprettyqt.custom_widgets.labels.iconwidget <ul><li>Label</li></ul> WaitingSpinnerprettyqt.custom_widgets.waitingspinner <ul><li><code>BaseWaitingSpinner</code></li></ul> UrlLineEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> FileTreeprettyqt.custom_widgets.itemviews.filetree <ul><li>TreeView</li></ul> RangeEditprettyqt.custom_widgets.editors.rangeedit <ul><li>Widget</li></ul> PointEditprettyqt.custom_widgets.editors.pointedit <ul><li>Widget</li></ul> WidgetEditorprettyqt.custom_widgets.widgeteditor <ul><li>Widget</li></ul> NumFilterWidgetprettyqt.custom_widgets.numfilterwidget <ul><li>Widget</li></ul> SelectionWidgetprettyqt.custom_widgets.editors.selectionwidget <ul><li>GroupBox</li></ul> CursorEditprettyqt.custom_widgets.editors.cursoredit <ul><li>EnumComboBox</li></ul>"},{"location":"additional_modules/custom_widgets/AnnotatedScrollBar.html","title":"AnnotatedScrollBar","text":"<p>Qt Base Class: QScrollBar</p> <p>Signature: <code>QScrollBar(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QScrollBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/AnnotatedScrollBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ScrollBar</code></p> <p>ScrollBar which can highlight user-defined ranges.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\annotatedscrollbar.py</code> <pre><code>class AnnotatedScrollBar(widgets.ScrollBar):\n\"\"\"ScrollBar which can highlight user-defined ranges.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._annotation_color = gui.QColor(\"gold\")\nself._annotations = []\nself._document_length = 100\n@classmethod\ndef create_example(cls):\nwidget = widgets.PlainTextEdit(\"\\n\".join(str(i) for i in range(1000)))\nwidget.v_scrollbar = AnnotatedScrollBar(constants.VERTICAL)\nwidget.v_scrollbar.set_annotations([(10, 20), (50, 60), (82, 85)])\nreturn widget\ndef set_annotations(self, annotations: list[tuple[int, int]]):\nself._annotations = annotations\ndef get_annotations(self) -&gt; list[tuple[int, int]]:\nreturn self._annotations\ndef add_annotation(self, annotation: tuple[int, int]):\nself._annotations.append(annotation)\ndef paintEvent(self, event):\nsuper().paintEvent(event)\nwith gui.Painter(self) as p:\nopt = widgets.QStyleOptionSlider()\nself.initStyleOption(opt)\ngr = self.style().subControlRect(\nCC_ScrollBar, opt, SubControl.SC_ScrollBarGroove, self\n)\nsr = self.style().subControlRect(\nCC_ScrollBar, opt, SubControl.SC_ScrollBarSlider, self\n)\np.setClipRegion(\ngui.QRegion(gr) - gui.QRegion(sr), constants.ClipOperation.IntersectClip\n)\nx, y, w, h = gr.getRect()\nc = gui.QColor(self._annotation_color)\np.setBrush(c)\nc.setAlphaF(0.3)\np.setPen(gui.QPen(c, 2.0))\nscale = 1.0 / self._document_length\nif self.orientation() == constants.VERTICAL:\nrects = [\ncore.QRect(\nx + 1,\ny + h * start * scale - 0.5,\nw - 2,\nh * (end - start) * scale + 1,\n)\nfor start, end in self._annotations\n]\nelse:\nrects = [\ncore.QRect(\nx + w * start * scale - 0.5,\ny + 1,\nw * (end - start) * scale + 1,\nh - 2,\n)\nfor start, end in self._annotations\n]\np.drawRects(rects)\ndef set_annotation_color(self, color: datatypes.ColorType):\nself._annotation_color = colors.get_color(color).as_qt()\ndef get_annotation_color(self) -&gt; gui.QColor:\nreturn self._annotation_color\ndef set_document_length(self, length: int):\nself._document_length = length\ndef get_document_length(self) -&gt; int:\nreturn self._document_length\nannotation_color = core.Property(\ngui.QColor,\nget_annotation_color,\nset_annotation_color,\ndoc=\"Color for the annotated regions\",\n)\nannotations = core.Property(\nlist,\nget_annotations,\nset_annotations,\ndoc=\"Current set of annotations\",\n)\ndocument_length = core.Property(\nint,\nget_document_length,\nset_document_length,\ndoc=\"Total document length\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/AnnotatedScrollBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261497808[\"custom_widgets.AnnotatedScrollBar\"]\n  2103261142720[\"widgets.ScrollBar\"]\n  2103261105280[\"widgets.ScrollBarMixin\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259913616[\"QtWidgets.QScrollBar\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261142720 --&gt; 2103261497808\n  2103261105280 --&gt; 2103261142720\n  2103261112000 --&gt; 2103261105280\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259913616 --&gt; 2103261142720\n  2103259932816 --&gt; 2103259913616\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/AnnotatedScrollBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool <code>annotation_color</code> QColor Color for the annotated regions <code>annotations</code> QVariantList Current set of annotations <code>document_length</code> int Total document length"},{"location":"additional_modules/custom_widgets/AstViewer.html","title":"AstViewer","text":"<p>Qt Base Class: QSplitter</p> <p>Signature: <code>QSplitter(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSplitter(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/AstViewer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Splitter</code></p> Source code in <code>prettyqt\\custom_widgets\\astviewer.py</code> <pre><code>class AstViewer(widgets.Splitter):\ndef __init__(\nself,\nobject_name=\"ast_viewer\",\n**kwargs,\n):\nsuper().__init__(orientation=\"horizontal\", object_name=object_name, **kwargs)\nself.tree = widgets.TreeView()\nself.ast_textedit = widgets.PlainTextEdit()\nself.tabwidget = widgets.TabWidget()\nself.tabwidget.add_tab(self.tree, \"Tree\")\nself.tabwidget.add_tab(self.ast_textedit, \"Dumped\")\nself.textedit = custom_widgets.CodeEditor()\nself.textedit.set_syntaxhighlighter(\"python\")\nself.textedit.textChanged.connect(self._on_text_change)\nself.add(self.tabwidget)\nself.add(self.textedit)\ndef _on_text_change(self):\nself.set_ast(self.textedit.get_value())\ndef _on_current_change(self, new_index: core.ModelIndex, _):\nnode = new_index.data(constants.USER_ROLE)\nif not hasattr(node, \"lineno\"):\nreturn\nwith self.textedit.selecter.current_cursor() as cursor:\ncursor.select_text(\n(node.lineno - 1, node.col_offset),\n(node.end_lineno - 1, node.end_col_offset),\n)\ndef set_ast(self, ast_tree: str):\nif self.tree.model() is None:\nmodel = itemmodels.AstModel(ast_tree, show_root=True, parent=self.tree)\nself.tree.set_model(model)\nself.tree.selectionModel().currentChanged.connect(self._on_current_change)\nelse:\nself.tree.model().set_ast(ast_tree)\nself.tree.show_root(False)\nself.tree.expandAll()\ndumped = ast.dump(self.tree.model().ast_tree, indent=4)\nself.ast_textedit.set_text(dumped)\ndef rename_variable(\nself,\nold: str,\nnew: str,\nignore: list[str] | None = None,\nscope: list[str] | None = None,\n):\nif scope is None:\nscope = [\"main\"]\nif ignore is None:\nignore = []\ntree = self.tree.model().ast_tree\nfor i in ast.iter_fields(tree):\nif not isinstance(a := getattr(tree, i), list):\nif a == old and not {*scope} &amp; {*ignore}:\nsetattr(tree, i, new)\nn = a if isinstance(a, list) else [a]\ns = [tree.name] if tree.__class__.__name__.endswith(\"Def\") else scope\nfor j in n:\nif isinstance(j, ast.AST):\nself.rename_variable(j, old, new, ignore, s)\n</code></pre>"},{"location":"additional_modules/custom_widgets/AstViewer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261351888[\"custom_widgets.AstViewer\"]\n  2103261446928[\"widgets.Splitter\"]\n  2103261445968[\"widgets.SplitterMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259742000[\"QtWidgets.QSplitter\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261446928 --&gt; 2103261351888\n  2103261445968 --&gt; 2103261446928\n  2103261110080 --&gt; 2103261445968\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259742000 --&gt; 2103261446928\n  2103259737200 --&gt; 2103259742000\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/AstViewer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>orientation</code> Qt::Orientation <code>opaqueResize</code> bool <code>handleWidth</code> int <code>childrenCollapsible</code> bool"},{"location":"additional_modules/custom_widgets/AutoResizePlainTextEdit.html","title":"AutoResizePlainTextEdit","text":"<p>Qt Base Class: QPlainTextEdit</p> <p>Signature: <code>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/AutoResizePlainTextEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AutoResizeTextEditMixin</code>, <code>widgets.PlainTextEdit</code></p> <p>PlainTextEdit which adjusts its height to the contained text.</p> Source code in <code>prettyqt\\custom_widgets\\autoresizingtextedit.py</code> <pre><code>class AutoResizePlainTextEdit(AutoResizeTextEditMixin, widgets.PlainTextEdit):\n\"\"\"PlainTextEdit which adjusts its height to the contained text.\"\"\"\ndef get_document_size(self) -&gt; core.QSize:\ndoc = self.document()\nlayout = doc.documentLayout()\nsize = layout.documentSize().toSize()\nblock = doc.firstBlock()\nline_height = layout.blockBoundingRect(block).height() / block.lineCount()\nheight = int(size.height() * line_height + 2 * doc.documentMargin())\nreturn core.QSize(size.width(), height)\n</code></pre>"},{"location":"additional_modules/custom_widgets/AutoResizePlainTextEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261544848[\"custom_widgets.AutoResizePlainTextEdit\"]\n  2103261533328[\"custom_widgets.AutoResizeTextEditMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261367248[\"widgets.PlainTextEdit\"]\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259771760[\"QtWidgets.QPlainTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261533328 --&gt; 2103261544848\n  140736120080256 --&gt; 2103261533328\n  2103261367248 --&gt; 2103261544848\n  2103261397968 --&gt; 2103261367248\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259771760 --&gt; 2103261367248\n  2103259751600 --&gt; 2103259771760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/AutoResizePlainTextEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QPlainTextEdit::LineWrapMode <code>readOnly</code> bool <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>blockCount</code> int <code>maximumBlockCount</code> int <code>backgroundVisible</code> bool <code>centerOnScroll</code> bool <code>placeholderText</code> QString <code>current_line_color</code> QColor Color to use for current line highlighting <code>validation_color</code> QColor Color to use for invalid text"},{"location":"additional_modules/custom_widgets/AutoResizeTextEdit.html","title":"AutoResizeTextEdit","text":"<p>Qt Base Class: QTextEdit</p> <p>Signature: <code>QTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/AutoResizeTextEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AutoResizeTextEditMixin</code>, <code>widgets.TextEdit</code></p> <p>TextEdit which adjusts its height to the contained text.</p> Source code in <code>prettyqt\\custom_widgets\\autoresizingtextedit.py</code> <pre><code>class AutoResizeTextEdit(AutoResizeTextEditMixin, widgets.TextEdit):\n\"\"\"TextEdit which adjusts its height to the contained text.\"\"\"\ndef get_document_size(self) -&gt; core.QSize:\nreturn self.document().documentLayout().documentSize().toSize()\n</code></pre>"},{"location":"additional_modules/custom_widgets/AutoResizeTextEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261541008[\"custom_widgets.AutoResizeTextEdit\"]\n  2103261533328[\"custom_widgets.AutoResizeTextEditMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261226240[\"widgets.TextEdit\"]\n  2103261227200[\"widgets.TextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259755440[\"QtWidgets.QTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261533328 --&gt; 2103261541008\n  140736120080256 --&gt; 2103261533328\n  2103261226240 --&gt; 2103261541008\n  2103261227200 --&gt; 2103261226240\n  2103261131200 --&gt; 2103261227200\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259755440 --&gt; 2103261226240\n  2103259751600 --&gt; 2103259755440\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/AutoResizeTextEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoFormatting</code> QFlags <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QTextEdit::LineWrapMode <code>lineWrapColumnOrWidth</code> int <code>readOnly</code> bool <code>markdown</code> QString <code>html</code> QString <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>acceptRichText</code> bool <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>document</code> QTextDocument <code>placeholderText</code> QString"},{"location":"additional_modules/custom_widgets/BoolDictToolButton.html","title":"BoolDictToolButton","text":"<p>Qt Base Class: QToolButton</p> <p>Signature: <code>QToolButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/BoolDictToolButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ToolButton</code></p> Source code in <code>prettyqt\\custom_widgets\\booldicttoolbutton.py</code> <pre><code>class BoolDictToolButton(widgets.ToolButton):\nvalue_changed = core.Signal(dict)\ndef __init__(\nself,\n*args,\ndct: dict[str, str] | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself.button_menu = widgets.Menu(triggered=self._on_menu_click)\nself.setMenu(self.button_menu)\nself.set_popup_mode(\"instant\")\nif dct:\nself.set_dict(dct)\ndef _on_menu_click(self):\nself.value_changed.emit(self.as_dict())\ndef __getitem__(self, key: str) -&gt; bool:  # type: ignore\nreturn self.button_menu[key].isChecked()\ndef __setitem__(self, key: str, value: bool):\nself.button_menu[key].setChecked(value)\nself.value_changed.emit(self.as_dict())\ndef set_dict(self, dct: dict[str, str]):\nself.button_menu.clear()\nfor k, v in dct.items():\naction = gui.Action(text=v, checkable=True, object_name=k)\nself.button_menu.add(action)\nself.value_changed.emit(self.as_dict())\ndef as_dict(self) -&gt; dict[str, bool]:\nreturn {act.objectName(): act.isChecked() for act in self.button_menu}\n</code></pre>"},{"location":"additional_modules/custom_widgets/BoolDictToolButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261492048[\"custom_widgets.BoolDictToolButton\"]\n  2103261232000[\"widgets.ToolButton\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259904976[\"QtWidgets.QToolButton\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261232000 --&gt; 2103261492048\n  2103261100480 --&gt; 2103261232000\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259904976 --&gt; 2103261232000\n  2103259928016 --&gt; 2103259904976\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/BoolDictToolButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>popupMode</code> QToolButton::ToolButtonPopupMode <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>autoRaise</code> bool <code>arrowType</code> Qt::ArrowType"},{"location":"additional_modules/custom_widgets/BorderLayout.html","title":"BorderLayout","text":"<p>Qt Base Class: QLayout</p> <p>Signature: <code>QLayout(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/BorderLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Layout</code></p> <p>Layout based on 5 Regions (north east, south, west and center).</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\borderlayout.py</code> <pre><code>class BorderLayout(widgets.Layout):\n\"\"\"Layout based on 5 Regions (north east, south, west and center).\"\"\"\nID = \"border\"\nclass Position(enum.IntEnum):\n\"\"\"Item position.\"\"\"\nWest = 0\nNorth = 1\nSouth = 2\nEast = 3\nCenter = 4\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.items: list[ItemWrapper] = []\ndef addItem(self, item: widgets.QWidgetItem):\nself.add_widgetitem(item, BorderLayout.Position.West)\ndef addWidget(\nself,\nwidget: widgets.QWidget,\nposition: Position | None = None,\n):\nposition = BorderLayout.Position.West if position is None else position\nself.add_widgetitem(widgets.WidgetItem(widget), position)\ndef expandingDirections(self) -&gt; constants.Orientation:\nreturn constants.HORIZONTAL | constants.VERTICAL\ndef hasHeightForWidth(self) -&gt; bool:\nreturn False\ndef count(self) -&gt; int:\nreturn len(self.items)\ndef itemAt(self, index: int) -&gt; widgets.QWidgetItem | None:\nreturn self.items[index].item if index &lt; len(self.items) else None\ndef minimumSize(self):\nreturn self.calculate_size(\"minimum\")\ndef setGeometry(self, rect: core.QRect):\ncenter = None\neast_width = 0\nwest_width = 0\nnorth_height = 0\nsouth_height = 0\nsuper().setGeometry(rect)\nfor wrapper in self.items:\nitem = wrapper.item\nmatch wrapper.position:\ncase BorderLayout.Position.North:\nh = item.sizeHint().height()\ngeom = core.Rect(rect.x(), north_height, rect.width(), h)\nitem.setGeometry(geom)\nnorth_height += item.geometry().height() + self.spacing()\ncase BorderLayout.Position.South:\ngeo = item.geometry()\nh = item.sizeHint().height()\ngeom = core.Rect(geo.x(), geo.y(), rect.width(), h)\nitem.setGeometry(geom)\nsouth_height += item.geometry().height() + self.spacing()\ny = rect.y() + rect.height() - south_height + self.spacing()\ngeo = item.geometry()\ngeom = core.Rect(rect.x(), y, geo.width(), geo.height())\nitem.setGeometry(geom)\ncase BorderLayout.Position.Center:\ncenter = wrapper\ncenter_height = rect.height() - north_height - south_height\nfor wrapper in self.items:\nitem = wrapper.item\nmatch wrapper.position:\ncase BorderLayout.Position.West:\nx = rect.x() + west_width\nw = item.sizeHint().width()\ngeom = core.Rect(x, north_height, w, center_height)\nitem.setGeometry(geom)\nwest_width += item.geometry().width() + self.spacing()\ncase BorderLayout.Position.East:\ngeo = item.geometry()\nw = item.sizeHint().width()\ngeom = core.Rect(geo.x(), geo.y(), w, center_height)\nitem.setGeometry(geom)\neast_width += item.geometry().width() + self.spacing()\nx = rect.x() + rect.width() - east_width + self.spacing()\ngeom = core.Rect(x, north_height, geo.width(), geo.height())\nitem.setGeometry(geom)\nif center:\nw = rect.width() - east_width - west_width\nrect = core.Rect(west_width, north_height, w, center_height)\ncenter.item.setGeometry(rect)\ndef sizeHint(self) -&gt; core.Size:\nreturn self.calculate_size(\"size_hint\")\ndef takeAt(self, index: int) -&gt; widgets.QWidgetItem | None:\nif 0 &lt;= index &lt; len(self.items):\nlayout_struct = self.items.pop(index)\nreturn layout_struct.item\nreturn None\ndef add_widgetitem(self, item: widgets.QWidgetItem, position: Position):\nself.items.append(ItemWrapper(item, position))\ndef calculate_size(self, size_type: Literal[\"minimum\", \"size_hint\"]) -&gt; core.Size:\ntotal_size = core.Size()\nPos = BorderLayout.Position\nfor wrapper in self.items:\nitem_size = (\nwrapper.item.minimumSize()\nif size_type == \"minimum\"\nelse wrapper.item.sizeHint()\n)\nif wrapper.position in (Pos.North, Pos.South, Pos.Center):\ntotal_size.setHeight(total_size.height() + item_size.height())\nif wrapper.position in (Pos.West, Pos.East, Pos.Center):\ntotal_size.setWidth(total_size.width() + item_size.width())\nreturn total_size\n</code></pre>"},{"location":"additional_modules/custom_widgets/BorderLayout.html#prettyqt.custom_widgets.layouts.borderlayout.BorderLayout.Position","title":"<code>Position</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Item position.</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\borderlayout.py</code> <pre><code>class Position(enum.IntEnum):\n\"\"\"Item position.\"\"\"\nWest = 0\nNorth = 1\nSouth = 2\nEast = 3\nCenter = 4\n</code></pre>"},{"location":"additional_modules/custom_widgets/BorderLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261500688[\"custom_widgets.BorderLayout\"]\n  2103261443088[\"widgets.Layout\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261443088 --&gt; 2103261500688\n  2103261439248 --&gt; 2103261443088\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260125776 --&gt; 2103261443088\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"additional_modules/custom_widgets/BorderLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"additional_modules/custom_widgets/BrushEdit.html","title":"BrushEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/BrushEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\brushedit.py</code> <pre><code>class BrushEdit(widgets.Widget):\nvalue_changed = core.Signal(gui.QBrush)\ndef __init__(\nself,\n*args,\ncolor: datatypes.ColorAndBrushType | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nlayout = self.set_layout(\"horizontal\", margin=0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_regex_validator(r\"^#(?:[0-9a-fA-F]{6})$\")\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-color-fill\", triggered=self.choose_color)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\nself._current_brush: gui.QBrush = gui.QBrush(gui.QColor(\"white\"))\nif color is not None:\nself.set_current_brush(color)\ndef __repr__(self):\nreturn get_repr(self, self._current_brush)\n@core.Slot()\ndef choose_color(self):\ndlg = widgets.ColorDialog()\nif self._current_brush:\ndlg.setCurrentColor(self._current_brush.color())\nif dlg.exec():\nnew_color = dlg.current_color()\nself.set_current_brush(new_color)\nself.value_changed.emit(new_color)\ndef set_current_brush(self, color: datatypes.ColorType):\nself._current_brush = gui.QBrush(colors.get_color(color))\nself.lineedit.set_text(self._current_brush.color().name().upper())\nicon = iconprovider.for_color(self._current_brush)\nself.button.set_icon(icon)\ndef is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\ndef get_value(self) -&gt; gui.QBrush:\nreturn gui.QBrush(self._current_brush)\ndef set_value(self, value: datatypes.ColorType):\nself.set_current_brush(value)\ncurrent_brush = core.Property(\ngui.QBrush,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently selected Brush\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/BrushEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261554448[\"custom_widgets.BrushEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261554448\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/BrushEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>current_brush</code> QBrush Currently selected Brush"},{"location":"additional_modules/custom_widgets/ClickableLabel.html","title":"ClickableLabel","text":"<p>Qt Base Class: QLabel</p> <p>Signature: <code>QLabel(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QLabel(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ClickableLabel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Label</code></p> <p>A label widget that behaves like a button.</p> Source code in <code>prettyqt\\custom_widgets\\labels\\clickablelabel.py</code> <pre><code>class ClickableLabel(widgets.Label):\n\"\"\"A label widget that behaves like a button.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs, alignment=\"left\")\nself.setFont(gui.QFont(\"Arial\"))\nself.setFixedHeight(24)\nself.set_size_policy(\"minimum\", \"expanding\")\ndef setText(self, text: str):\nfm = gui.FontMetrics(self.font())\nwidth = fm.horizontalAdvance(text)\nself.setFixedWidth(width + 18)\nsuper().setText(text)\ndef enterEvent(self, event: core.QEvent):\nwith self.edit_font() as font:\nfont.setUnderline(True)\nself.set_cursor(\"pointing_hand\")\nself.update()\nreturn super().enterEvent(event)\ndef leaveEvent(self, event: core.QEvent):\nwith self.edit_font() as font:\nfont.setUnderline(False)\nself.unsetCursor()\nreturn super().leaveEvent(event)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ClickableLabel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261523728[\"custom_widgets.ClickableLabel\"]\n  2103261249280[\"widgets.Label\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259742960[\"QtWidgets.QLabel\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261249280 --&gt; 2103261523728\n  2103261110080 --&gt; 2103261249280\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259742960 --&gt; 2103261249280\n  2103259737200 --&gt; 2103259742960\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ClickableLabel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>text</code> QString <code>textFormat</code> Qt::TextFormat <code>pixmap</code> QPixmap <code>scaledContents</code> bool <code>alignment</code> QFlags <code>wordWrap</code> bool <code>margin</code> int <code>indent</code> int <code>openExternalLinks</code> bool <code>textInteractionFlags</code> QFlags <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>elideMode</code> QString Text Elide style"},{"location":"additional_modules/custom_widgets/CodeEditor.html","title":"CodeEditor","text":"<p>Qt Base Class: QPlainTextEdit</p> <p>Signature: <code>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/CodeEditor.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.PlainTextEdit</code></p> <p>Super basic code editor.</p> Source code in <code>prettyqt\\custom_widgets\\codeeditor.py</code> <pre><code>class CodeEditor(widgets.PlainTextEdit):\n\"\"\"Super basic code editor.\"\"\"\ndef __init__(self, language: str = \"python\", **kwargs):\nsuper().__init__(**kwargs)\nself.line_area = LineNumberArea(self)\nself.blockCountChanged.connect(self.update_line_area_width)\nself.updateRequest.connect(self.update_line_area)\nself.set_font(gui.Font.mono(as_qt=True))\nself.update_line_area_width(0)\nself.set_current_line_color(gui.Color(128, 128, 128, 20))\nself.set_syntaxhighlighter(language)\n#     self.delimiter = \"    \"\n#     self.completion_state = 0\n#     self.completing = False\n#     self.cursorPositionChanged.connect(self.reset_completion)\n# def keyPressEvent(self, event):\n#     match event.key():\n#         case constants.Key.Key_Backtab if self.textCursor().hasSelection():\n#             start_cursor = self.get_textCursor()\n#             with start_cursor.edit_block():\n#                 start_pos = start_cursor.selectionStart()\n#                 start_cursor.setPosition(start_pos)\n#                 start_cursor.move_position(\"start_of_line\")\n#                 start_cursor.clearSelection()\n#                 end_cursor = self.get_text_cursor()\n#                 end_pos = end_cursor.selectionEnd()\n#                 end_cursor.setPosition(end_pos)\n#                 end_cursor.move_position(\"start_of_line\")\n#                 delimit_len = len(self.delimiter)\n#                 while start_cursor.anchor() != end_cursor.position():\n#                     start_cursor.move_position(\n#                         \"next_character\", mode=\"keep\", n=delimit_len\n#                     )\n#                     if start_cursor.selectedText() == self.delimiter:\n#                         start_cursor.removeSelectedText()\n#                     start_cursor.move_position(\"next_block\")\n#                 start_cursor.move_position(\n#                     \"next_character\", mode=\"keep\", n=delimit_len\n#                 )\n#                 if start_cursor.selectedText() == self.delimiter:\n#                     start_cursor.removeSelectedText()\n#         case constants.Key.Key_Tab if self.textCursor().hasSelection():\n#             start_cursor = self.get_text_cursor()\n#             with start_cursor.edit_block():\n#                 start_pos = start_cursor.selectionStart()\n#                 start_cursor.setPosition(start_pos)\n#                 start_cursor.move_position(\"start_of_line\")\n#                 end_cursor = self.get_text_cursor()\n#                 end_pos = end_cursor.selectionEnd()\n#                 end_cursor.setPosition(end_pos)\n#                 end_cursor.move_position(\"start_of_line\")\n#                 while start_cursor.position() != end_cursor.position():\n#                     start_cursor.insertText(self.delimiter)\n#                     start_cursor.move_position(\"next_block\")\n#                 start_cursor.insertText(self.delimiter)\n#         case constants.Key.Key_Escape if self.completion_state &gt; 0:\n#             self.completion_state = 0\n#             cursor = self.get_text_cursor()\n#             with cursor.edit_block():\n#                 self.selecter.replace_block_at_cursor(self._orig_text)\n#             self._orig_text == None\n#         case constants.Key.Key_Tab:\n#             if self.is_start():\n#                 self.textCursor().insertText(self.delimiter)\n#             else:\n#                 cursor = self.get_text_cursor()\n#                 with cursor.edit_block():\n#                     self.completing = True\n#                     if self.completion_state == 0:\n#                         self._orig_text = self.textCursor().block().text()\n#                     if self.completion_state &gt; 0:\n#                         self.selecter.replace_block_at_cursor(self._orig_text)\n#                     new_text = self.completer.complete(\n#                         self._orig_text, self.completion_state\n#                     )\n#                     if new_text:\n#                         if new_text.find(\"(\") &gt; 0:\n#                             new_text = new_text[0 : new_text.find(\"(\") + 1]\n#                         self.completion_state += 1\n#                         self.selecter.replace_block_at_cursor(new_text)\n#                     else:\n#                         self.completion_state = 0\n#                         self.selecter.replace_block_at_cursor(self._orig_text)\n#                         self._orig_text == None\n#                 self.completing = False\n#         case _:\n#             return super().keyPressEvent(event)\n# def reset_completion(self):\n#     if not self.completing:\n#         self.completion_state = 0\n# def is_start(self) -&gt; bool:\n#     temp_cursor = self.textCursor()\n#     if temp_cursor.positionInBlock() == 0:\n#         return True\n#     start_text = temp_cursor.block().text()[0 : temp_cursor.positionInBlock()]\n#     delim = set(self.delimiter)\n#     return set(start_text) - delim == set()\ndef resizeEvent(self, event):\nsuper().resizeEvent(event)\ncr = self.contentsRect()\nrect = core.Rect(cr.left(), cr.top(), self.line_area_width(), cr.height())\nself.line_area.setGeometry(rect)\ndef line_area_width(self) -&gt; int:\ndigits = len(str(self.blockCount()))\nreturn 3 + self.fontMetrics().boundingRect(\"9\").width() * digits\ndef update_line_area_width(self, _):\nself.setViewportMargins(self.line_area_width(), 0, 0, 0)\ndef update_line_area(self, rect: core.QRect, dy: int):\nif dy:\nself.line_area.scroll(0, dy)\nelse:\nself.line_area.update(0, rect.y(), self.line_area.width(), rect.height())\nif rect.contains(self.viewport().rect()):\nself.update_line_area_width(0)\ndef line_area_paintevent(self, event):\nwith gui.Painter(self.line_area) as painter:\npainter.fill_rect(event.rect(), \"lightgray\")\nblock = self.firstVisibleBlock()\nblock_number = block.blockNumber()\ntop = self.blockBoundingGeometry(block).translated(self.contentOffset()).top()\nbottom = top + self.blockBoundingRect(block).height()\nwidth = self.line_area.width()\nheight = self.fontMetrics().height()\npainter.set_color(\"black\")\nwhile block.isValid() and (top &lt;= event.rect().bottom()):\nif block.isVisible() and (bottom &gt;= event.rect().top()):\nnumber = str(block_number + 1)\npainter.drawText(\n0, int(top), width, height, constants.ALIGN_RIGHT, number\n)\nblock = block.next()\ntop = bottom\nbottom = top + self.blockBoundingRect(block).height()\nblock_number += 1\n</code></pre>"},{"location":"additional_modules/custom_widgets/CodeEditor.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261341328[\"custom_widgets.CodeEditor\"]\n  2103261367248[\"widgets.PlainTextEdit\"]\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259771760[\"QtWidgets.QPlainTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261367248 --&gt; 2103261341328\n  2103261397968 --&gt; 2103261367248\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259771760 --&gt; 2103261367248\n  2103259751600 --&gt; 2103259771760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/CodeEditor.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QPlainTextEdit::LineWrapMode <code>readOnly</code> bool <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>blockCount</code> int <code>maximumBlockCount</code> int <code>backgroundVisible</code> bool <code>centerOnScroll</code> bool <code>placeholderText</code> QString <code>current_line_color</code> QColor Color to use for current line highlighting <code>validation_color</code> QColor Color to use for invalid text"},{"location":"additional_modules/custom_widgets/CollapsibleFrame.html","title":"CollapsibleFrame","text":"<p>Qt Base Class: QFrame</p> <p>Signature: <code>QFrame(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/CollapsibleFrame.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Frame</code></p> <p>Frame containing another widget which can be collapsed.</p> Source code in <code>prettyqt\\custom_widgets\\collapsibleframe.py</code> <pre><code>class CollapsibleFrame(widgets.Frame):\n\"\"\"Frame containing another widget which can be collapsed.\"\"\"\nexpanded = core.Signal()\ncollapsed = core.Signal()\ndef __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(frame_shape=\"styled_panel\", frame_shadow=\"plain\", **kwargs)\n_layout = self.set_layout(\"vertical\", margin=0, spacing=0)\n# button\nself._button = widgets.ToolButton(\nself,\nclicked=self.on_button_click,\narrow_type=\"right\",\nauto_raise=False,\ntext=text,\nvisible=True,\n)\nself._button.set_style(\"text_beside_icon\")\nself.set_size_policy(\"minimum_expanding\", \"fixed\")\n_layout.addWidget(self._button, 0)\n# group box\nself._panel = widgets.Widget(self, visible=False)\n_layout.addWidget(self._panel)\nself._panel_layout = self._panel.set_layout(\"vertical\", margin=1, spacing=2)\nself._is_collapsed = True\ndef set_title(self, title: str):\nself._button.set_text(title)\ndef add_widget(self, widget: widgets.Widget):\nself._panel_layout.addWidget(widget)\ndef remove_widget(self, widget: widgets.Widget):\nself._panel_layout.removeWidget(widget)\ndef is_expanded(self) -&gt; bool:\nreturn not self._is_collapsed\ndef expand(self):\nself._button.set_arrow_type(\"down\")\nself._panel.setVisible(True)\nself._is_collapsed = False\nself.set_size_policy(\"minimum_expanding\", \"minimum_expanding\")\ndef collapse(self):\nself._panel.setVisible(False)\nself._button.set_arrow_type(\"right\")\nself._is_collapsed = True\nself.set_size_policy(\"preferred\", \"preferred\")\n@core.Slot()\ndef on_button_click(self):\nif self._is_collapsed:\nself.expand()\nself.expanded.emit()\nelse:\nself.collapse()\nself.collapsed.emit()\n</code></pre>"},{"location":"additional_modules/custom_widgets/CollapsibleFrame.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261530448[\"custom_widgets.CollapsibleFrame\"]\n  2103261130240[\"widgets.Frame\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261130240 --&gt; 2103261530448\n  2103261110080 --&gt; 2103261130240\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259737200 --&gt; 2103261130240\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/CollapsibleFrame.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect"},{"location":"additional_modules/custom_widgets/ColorChooserButton.html","title":"ColorChooserButton","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ColorChooserButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\colorchooserbutton.py</code> <pre><code>class ColorChooserButton(widgets.Widget):\nvalue_changed = core.Signal(gui.Color)\ndef __init__(\nself,\n*args,\ncolor: datatypes.ColorType | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nlayout = self.set_layout(\"horizontal\", margin=0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_regex_validator(r\"^#(?:[0-9a-fA-F]{6})$\")\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-color-fill\", triggered=self.choose_color)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\nself._current_color: gui.Color = gui.Color(\"white\")\nif color is not None:\nself.set_current_color(color)\ndef __repr__(self):\nreturn get_repr(self, self._current_color)\n@core.Slot()\ndef choose_color(self):\ndlg = widgets.ColorDialog()\nif self._current_color:\ndlg.setCurrentColor(self._current_color)\nif dlg.exec():\nnew_color = dlg.current_color()\nself.set_current_color(new_color)\nself.value_changed.emit(new_color)\ndef set_current_color(self, color: datatypes.ColorType):\nself._current_color = colors.get_color(color)\nself.lineedit.set_text(self._current_color.name().upper())\nicon = iconprovider.for_color(self._current_color)\nself.button.set_icon(icon)\ndef is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\ndef get_value(self) -&gt; gui.Color:\nreturn self._current_color\ndef set_value(self, value: datatypes.ColorType):\nself.set_current_color(value)\ncurrent_color = core.Property(\ngui.QColor,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently selected color\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ColorChooserButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261325008[\"custom_widgets.ColorChooserButton\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261325008\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ColorChooserButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>current_color</code> QColor Currently selected color"},{"location":"additional_modules/custom_widgets/ColorComboBox.html","title":"ColorComboBox","text":"<p>Qt Base Class: QComboBox</p> <p>Signature: <code>QComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ColorComboBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ComboBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\colorcombobox.py</code> <pre><code>class ColorComboBox(widgets.ComboBox):\nvalue_changed = core.Signal(gui.QColor)\ndef __init__(\nself,\ncolor: datatypes.ColorType | None = None,\nobject_name: str = \"color_combobox\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nself._current_color: gui.QColor = gui.QColor(\"white\")\nfor i in gui.Color.colorNames():\nself.addItem(iconprovider.for_color(i), i)\nif color is not None:\nself.set_current_color(color)\nself.currentTextChanged.connect(self.set_current_color)\ndef __repr__(self):\nreturn get_repr(self, self._current_color)\ndef clear(self):\nself._current_color = gui.QColor(\"white\")\nsuper().clear()\nfor i in gui.Color.colorNames():\nself.addItem(iconprovider.for_color(i), i)\ndef set_current_color(self, color: datatypes.ColorType):\nself._current_color = colors.get_color(color).as_qt()\nfor color_name in gui.Color.colorNames():\nif gui.Color(color_name) == self._current_color:\nself.setCurrentText(color_name)\nreturn\ndef is_valid(self) -&gt; bool:\nreturn self._current_color.isValid()\ndef get_value(self) -&gt; gui.QColor:\nreturn self._current_color\ndef set_value(self, value: datatypes.ColorType):\nself.set_current_color(value)\ncurrent_color = core.Property(\ngui.QColor,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently selected color\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ColorComboBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261307728[\"custom_widgets.ColorComboBox\"]\n  2103261223360[\"widgets.ComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261223360 --&gt; 2103261307728\n  2103261255040 --&gt; 2103261223360\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259869680 --&gt; 2103261223360\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ColorComboBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int <code>current_color</code> QColor Currently selected color"},{"location":"additional_modules/custom_widgets/CommandPalette.html","title":"CommandPalette","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/CommandPalette.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> <p>A Qt command palette widget.</p> Source code in <code>prettyqt\\custom_widgets\\commandpalette.py</code> <pre><code>class CommandPalette(widgets.Widget):\n\"\"\"A Qt command palette widget.\"\"\"\ndef __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nself.setWindowFlags(\nconstants.WindowType.WindowStaysOnTopHint\n| constants.WindowType.FramelessWindowHint\n# | constants.WindowType.ToolTip\n)\nself.set_focus_policy(\"strong\")\nself.setMinimumWidth(700)\nself._line = widgets.LineEdit()\nself.setFocusProxy(self._line)\nself._table = CommandTable()\n# self._line.value_changed.connect(self._table.select_first_row)\nself._line.value_changed.connect(self._table._proxy.set_search_term)\nlayout = self.set_layout(\"vertical\")\nlayout.addWidget(self._line)\nlayout.addWidget(self._table)\nself.add_shortcut(\"Ctrl+P\", self.close)\nself._line.installEventFilter(self)\n# self._line.textChanged.connect(self._on_text_changed)\n# self._table.action_clicked.connect(self._on_action_clicked)\n# self._line.editingFinished.connect(self.hide)\ndef eventFilter(self, source: core.QObject, e: core.QEvent) -&gt; bool:\nif source != self._line or e.type() != core.QEvent.Type.KeyPress:\nreturn super().eventFilter(source, e)\nif e.modifiers() in (\nconstants.KeyboardModifier.NoModifier,\nconstants.KeyboardModifier.KeypadModifier,\n):\nmatch e.key():\ncase constants.Key.Key_Escape:\nself.hide()\nreturn True\ncase constants.Key.Key_Return:\nself.hide()\nself._table.execute_focused()\nreturn True\ncase constants.Key.Key_Up:\nself._table.move_row_selection(-1)\nreturn True\ncase constants.Key.Key_Down:\nself._table.move_row_selection(1)\nreturn True\nreturn super().eventFilter(source, e)\ndef populate_from_widget(self, widget: widgets.QWidget):\nself.add_actions(widget.actions())\nif not callable(widget.parent):\nreturn\nwhile widget := widget.parent():\nself.add_actions(widget.actions())\ndef add_path_actions(self, path):\npath = pathlib.Path(path)\nactions = [gui.Action(str(p)) for p in path.rglob(\"*\") if p.is_file()]\nself.add_actions(actions)\ndef match_color(self) -&gt; str:\n\"\"\"The color used for the matched characters.\"\"\"\nreturn self._table.match_color\ndef set_match_color(self, color):\n\"\"\"Set the color used for the matched characters.\"\"\"\nself._table.match_color = colors.get_color(color).name()\ndef install_to(self, parent: widgets.Widget):\nself.setParent(parent, constants.WindowType.SubWindow)\nself.hide()\n# def focusOutEvent(self, a0: gui.QFocusEvent) -&gt; None:\n#     self.hide()\n#     return super().focusOutEvent(a0)\ndef add_actions(self, actions: Sequence[gui.QAction]):\nself._table._model.add_items(actions)\ndef show(self):\nself._line.setText(\"\")\nself.resize(1000, 300)\nself.position_on(\"screen\")\nsuper().show()\nself.raise_()\nself._line.setFocus()\n</code></pre>"},{"location":"additional_modules/custom_widgets/CommandPalette.html#prettyqt.custom_widgets.commandpalette.CommandPalette.match_color","title":"<code>match_color() -&gt; str</code>","text":"<p>The color used for the matched characters.</p> Source code in <code>prettyqt\\custom_widgets\\commandpalette.py</code> <pre><code>def match_color(self) -&gt; str:\n\"\"\"The color used for the matched characters.\"\"\"\nreturn self._table.match_color\n</code></pre>"},{"location":"additional_modules/custom_widgets/CommandPalette.html#prettyqt.custom_widgets.commandpalette.CommandPalette.set_match_color","title":"<code>set_match_color(color)</code>","text":"<p>Set the color used for the matched characters.</p> Source code in <code>prettyqt\\custom_widgets\\commandpalette.py</code> <pre><code>def set_match_color(self, color):\n\"\"\"Set the color used for the matched characters.\"\"\"\nself._table.match_color = colors.get_color(color).name()\n</code></pre>"},{"location":"additional_modules/custom_widgets/CommandPalette.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261566928[\"custom_widgets.CommandPalette\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261566928\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/CommandPalette.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html","title":"CrossFadeWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\crossfadewidget.py</code> <pre><code>class CrossFadeWidget(widgets.Widget):\ndef __init__(\nself,\npixmap_1: gui.QPixmap | os.PathLike | None = None,\npixmap_2: gui.QPixmap | os.PathLike | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.pixmap_1 = None\nself.pixmap_2 = None\nself.set_pixmap_1(pixmap_1)\nself.set_pixmap_2(pixmap_2)\nself.set_blend_factor(0.0)\nself.timeline = core.TimeLine(finished=self.close)\nself.timeline.value_changed.connect(self.set_blend_factor)\nself.set_size_policy(\"fixed\", \"fixed\")\ndef start_fade(self, duration: int = 500):\nself.timeline.setDuration(duration)\nself.timeline.start()\n# self.show()\ndef set_pixmap_1(self, pixmap: gui.QPixmap | os.PathLike | widgets.QWidget | None):\nself.pixmap_1 = self._get_pixmap(pixmap)\nself.updateGeometry()\nself.repaint()\ndef set_pixmap_2(self, pixmap: gui.QPixmap | os.PathLike | widgets.QWidget | None):\nself.pixmap_2 = self._get_pixmap(pixmap)\nself.updateGeometry()\nself.repaint()\n@staticmethod\ndef _get_pixmap(pixmap: gui.QPixmap | os.PathLike | widgets.QWidget | None):\nmatch pixmap:\ncase gui.QPixmap():\nreturn pixmap\ncase os.PathLike():\nreturn gui.Pixmap(pixmap)\ncase widgets.QWidget():\nreturn pixmap.grab()\ncase None:\nreturn gui.Pixmap()\ndef set_blend_factor(self, factor: float):\nself._blend_factor = factor\nself.repaint()\ndef get_blend_factor(self) -&gt; float:\n\"\"\"Pixmap blending factor between 0.0 and 1.0.\"\"\"\nreturn self._blend_factor\ndef sizeHint(self):\n\"\"\"Return max size of both.\"\"\"\nsize1 = self.pixmap_1.size() if self.pixmap_1 else super().sizeHint()\nsize2 = self.pixmap_2.size() if self.pixmap_2 else super().sizeHint()\nreturn size1.expandedTo(size2)\ndef paintEvent(self, event):\n\"\"\"Paint the interpolated pixmap image.\"\"\"\nwith gui.Painter(self) as p:\np.setClipRect(event.rect())\nfactor = self.get_blend_factor() ** 2\nif self.pixmap_1 and 1.0 - factor:\np.setOpacity(1.0 - factor)\np.drawPixmap(core.Point(0, 0), self.pixmap_1)\nif self.pixmap_2 and factor:\np.setOpacity(factor)\np.drawPixmap(core.Point(0, 0), self.pixmap_2)\nblend_factor = core.Property(\nfloat,\nget_blend_factor,\nset_blend_factor,\ndoc=\"Blend factor between the two pixmaps.\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html#prettyqt.custom_widgets.crossfadewidget.CrossFadeWidget.get_blend_factor","title":"<code>get_blend_factor() -&gt; float</code>","text":"<p>Pixmap blending factor between 0.0 and 1.0.</p> Source code in <code>prettyqt\\custom_widgets\\crossfadewidget.py</code> <pre><code>def get_blend_factor(self) -&gt; float:\n\"\"\"Pixmap blending factor between 0.0 and 1.0.\"\"\"\nreturn self._blend_factor\n</code></pre>"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html#prettyqt.custom_widgets.crossfadewidget.CrossFadeWidget.paintEvent","title":"<code>paintEvent(event)</code>","text":"<p>Paint the interpolated pixmap image.</p> Source code in <code>prettyqt\\custom_widgets\\crossfadewidget.py</code> <pre><code>def paintEvent(self, event):\n\"\"\"Paint the interpolated pixmap image.\"\"\"\nwith gui.Painter(self) as p:\np.setClipRect(event.rect())\nfactor = self.get_blend_factor() ** 2\nif self.pixmap_1 and 1.0 - factor:\np.setOpacity(1.0 - factor)\np.drawPixmap(core.Point(0, 0), self.pixmap_1)\nif self.pixmap_2 and factor:\np.setOpacity(factor)\np.drawPixmap(core.Point(0, 0), self.pixmap_2)\n</code></pre>"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html#prettyqt.custom_widgets.crossfadewidget.CrossFadeWidget.sizeHint","title":"<code>sizeHint()</code>","text":"<p>Return max size of both.</p> Source code in <code>prettyqt\\custom_widgets\\crossfadewidget.py</code> <pre><code>def sizeHint(self):\n\"\"\"Return max size of both.\"\"\"\nsize1 = self.pixmap_1.size() if self.pixmap_1 else super().sizeHint()\nsize2 = self.pixmap_2.size() if self.pixmap_2 else super().sizeHint()\nreturn size1.expandedTo(size2)\n</code></pre>"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261507408[\"custom_widgets.CrossFadeWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261507408\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/CrossFadeWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>blend_factor</code> double Blend factor between the two pixmaps."},{"location":"additional_modules/custom_widgets/CursorEdit.html","title":"CursorEdit","text":"<p>Qt Base Class: QComboBox</p> <p>Signature: <code>QComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/CursorEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>custom_widgets.EnumComboBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\cursoredit.py</code> <pre><code>class CursorEdit(custom_widgets.EnumComboBox):\nvalue_changed = core.Signal(gui.Cursor)\ndef __init__(self, *args, object_name: str = \"cursor_edit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself._set_enum_class(constants.CursorShape)\nself.currentIndexChanged.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; gui.Cursor:\nshape = super().get_value()\nreturn gui.Cursor(shape)\ndef set_value(self, value: gui.Cursor):\nsuper().set_value(value.shape())\nvalue = core.Property(\ngui.Cursor,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently selected cursor\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/CursorEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261552528[\"custom_widgets.CursorEdit\"]\n  2103261550608[\"custom_widgets.EnumComboBox\"]\n  2103261223360[\"widgets.ComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261550608 --&gt; 2103261552528\n  2103261223360 --&gt; 2103261550608\n  2103261255040 --&gt; 2103261223360\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259869680 --&gt; 2103261223360\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/CursorEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int <code>allowNone</code> bool Whether None is allowed as a value <code>enumValue</code> PySide::PyObjectWrapper Currently chosen value <code>value</code> QCursor Currently selected cursor"},{"location":"additional_modules/custom_widgets/ElidedLabel.html","title":"ElidedLabel","text":"<p>Qt Base Class: QFrame</p> <p>Signature: <code>QFrame(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ElidedLabel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Frame</code></p> Source code in <code>prettyqt\\custom_widgets\\labels\\elidedlabel.py</code> <pre><code>class ElidedLabel(widgets.Frame):\nelision_changed = core.Signal(bool)\ndef __init__(\nself,\ntext: str = \"\",\nparent: widgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.elided = False\nself._text = text\nself.set_size_policy(\"expanding\", \"preferred\")\ndef __repr__(self):\nreturn get_repr(self, self.elided_text)\ndef set_text(self, text: str):\nself._text = text\nself.update()\ndef get_text(self) -&gt; str:\nreturn self._text\ndef paintEvent(self, event):\nsuper().paintEvent(event)\nwith gui.Painter(self) as painter:\nmetrics = painter.get_font_metrics()\ndid_elide = False\nline_spacing = metrics.lineSpacing()\ny = 0\nlayout = gui.TextLayout(self._text, painter.font())\nwith layout.process_layout():\nwhile True:\nline = layout.createLine()\nif not line.isValid():\nbreak\nline.setLineWidth(self.width())\nnext_line_y = y + line_spacing\nif self.height() &gt;= next_line_y + line_spacing:\nline.draw(painter, core.PointF(0, y))\ny = next_line_y\nelse:\nlast_line = self._text[line.textStart() :]\nelided_line = metrics.elided_text(\nlast_line, \"right\", self.width()\n)\npainter.drawText(0, y + metrics.ascent(), elided_line)\nline = layout.createLine()\ndid_elide = line.isValid()\nbreak\nif did_elide != self.elided:\nself.elided = did_elide\nself.elision_changed.emit(did_elide)\nelided_text = core.Property(str, get_text, set_text, doc=\"Unelided text\")\n</code></pre>"},{"location":"additional_modules/custom_widgets/ElidedLabel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261506448[\"custom_widgets.ElidedLabel\"]\n  2103261130240[\"widgets.Frame\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261130240 --&gt; 2103261506448\n  2103261110080 --&gt; 2103261130240\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259737200 --&gt; 2103261130240\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ElidedLabel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>elided_text</code> QString Unelided text"},{"location":"additional_modules/custom_widgets/EnumComboBox.html","title":"EnumComboBox","text":"<p>Qt Base Class: QComboBox</p> <p>Signature: <code>QComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ComboBox</code></p> <p>ComboBox presenting options from a python Enum.</p> <p>If the Enum class does not implement <code>__str__</code> then a human readable name is created from the name of the enum member, replacing underscores with spaces.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>class EnumComboBox(widgets.ComboBox):\n\"\"\"ComboBox presenting options from a python Enum.\n    If the Enum class does not implement `__str__` then a human readable name\n    is created from the name of the enum member, replacing underscores with spaces.\n    \"\"\"\n# current_enum_changed = core.Signal(object)\nvalue_changed = core.Signal(enum.Enum)\ndef __init__(self, value=None, object_name: str = \"enum_combobox\", **kwargs):\nself._enum_class = None\nself._allow_none = False\nsuper().__init__(object_name=object_name, **kwargs)\nif value is not None:\nself.set_value(value)\n# self.currentIndexChanged.connect(self._emit_signal)\ndef __repr__(self):\nreturn get_repr(self, self.get_value())\ndef set_allow_none(self, value: bool):\nself._allow_none = value\ndef is_none_allowed(self) -&gt; bool:\nreturn self._allow_none\ndef _set_enum_class(self, enum: enum.EnumMeta | None):\n\"\"\"Set enum class from which members value should be selected.\"\"\"\nif enum == self._enum_class:\nreturn None\nself._enum_class = enum\nsuper().clear()\nif self._allow_none and enum is not None:\nsuper().addItem(NONE_STRING)\nitems = [i.name.replace(\"_\", \" \") for i in self._enum_class.__members__.values()]\nsuper().addItems(items)\ndef get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\ndef is_optional(self) -&gt; bool:\n\"\"\"Return if current enum is with optional annotation.\"\"\"\nreturn self._allow_none\ndef clear(self):\nself._enum_class = None\nself._allow_none = False\nsuper().clear()\ndef get_value(self) -&gt; EnumType | None:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nclass_members = list(self._enum_class.__members__.values())\nif not self._allow_none:\nreturn class_members[self.currentIndex()]\nis_none = self.currentText() == NONE_STRING\nreturn None if is_none else class_members[self.currentIndex() - 1]\ndef set_value(self, value: EnumType | None) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif value is None:\nif not self._allow_none:\nraise ValueError(value)\nself.setCurrentIndex(0)\nreturn\nif not isinstance(value, enum.Enum):\nvalue = self._enum_class(value)\nself._set_enum_class(value.__class__)\nself.setCurrentText(value.name.replace(\"_\", \" \"))\n# def _emit_signal(self):\n#     if self._enum_class is not None:\n#         self.current_enum_changed.emit(self.get_value())\nallowNone = core.Property(\nbool,\nis_none_allowed,\nset_allow_none,\ndoc=\"Whether None is allowed as a value\",\n)\nenumValue = core.Property(\nenum.Enum,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen value\",\n)\n</code></pre> Name Children Inherits CursorEditprettyqt.custom_widgets.editors.cursoredit <ul><li>EnumComboBox</li></ul>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.get_enum_class","title":"<code>get_enum_class() -&gt; enum.EnumMeta | None</code>","text":"<p>Return current Enum class.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.get_value","title":"<code>get_value() -&gt; EnumType | None</code>","text":"<p>Current value as Enum member.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def get_value(self) -&gt; EnumType | None:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nclass_members = list(self._enum_class.__members__.values())\nif not self._allow_none:\nreturn class_members[self.currentIndex()]\nis_none = self.currentText() == NONE_STRING\nreturn None if is_none else class_members[self.currentIndex() - 1]\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.is_optional","title":"<code>is_optional() -&gt; bool</code>","text":"<p>Return if current enum is with optional annotation.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def is_optional(self) -&gt; bool:\n\"\"\"Return if current enum is with optional annotation.\"\"\"\nreturn self._allow_none\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#prettyqt.custom_widgets.editors.enumcombobox.EnumComboBox.set_value","title":"<code>set_value(value: EnumType | None) -&gt; None</code>","text":"<p>Set value with Enum.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumcombobox.py</code> <pre><code>def set_value(self, value: EnumType | None) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif value is None:\nif not self._allow_none:\nraise ValueError(value)\nself.setCurrentIndex(0)\nreturn\nif not isinstance(value, enum.Enum):\nvalue = self._enum_class(value)\nself._set_enum_class(value.__class__)\nself.setCurrentText(value.name.replace(\"_\", \" \"))\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261550608[\"custom_widgets.EnumComboBox\"]\n  2103261223360[\"widgets.ComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261223360 --&gt; 2103261550608\n  2103261255040 --&gt; 2103261223360\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259869680 --&gt; 2103261223360\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/EnumComboBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int <code>allowNone</code> bool Whether None is allowed as a value <code>enumValue</code> PySide::PyObjectWrapper Currently chosen value"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html","title":"EnumFlagWidget","text":"<p>Qt Base Class: QToolButton</p> <p>Signature: <code>QToolButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ToolButton</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>class EnumFlagWidget(widgets.ToolButton):\nvalue_changed = core.Signal(enum.Flag)\ndef __init__(self, *args, object_name: str = \"enum_flag_widget\", **kwargs):\nself._enum_class = None\nself._action_map = {}\nself.button_menu = widgets.Menu(triggered=self._on_menu_click)\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.setMenu(self.button_menu)\nself.set_popup_mode(\"instant\")\ndef _on_menu_click(self):\nvalues = []\nvalue = self.get_value()\nfor i in self._enum_class.__members__.values():\nif i.value == 0:\ncontinue\n# self._action_map[i].setChecked(value &amp; i == i)\nif value &amp; i == i:\nvalues.append(i)\ntext = \" | \".join(i.name for i in values) if values else self._enum_class(0).name\nself.set_text(text)\nself.value_changed.emit(value)\ndef clear(self):\nself._action_map = {}\nself.button_menu.clear()\ndef _set_enum_class(self, enum: enum.EnumMeta | None):\n\"\"\"Set enum class from which members value should be selected.\"\"\"\nif enum == self._enum_class:\nreturn None\nself._enum_class = enum\nself.clear()\nfor i in self._enum_class.__members__.values():\nif i.value == 0:\ncontinue\naction = gui.Action(text=i.name.replace(\"_\", \" \"), checkable=True)\naction.setData(i)\nself._action_map[i] = action\nself.button_menu.add(action)\ndef get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\ndef get_value(self) -&gt; enum.Flag:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nflag = self._enum_class(0)\nfor k, v in self._action_map.items():\nif v.isChecked():\nflag |= k\nreturn flag\ndef set_value(self, value: enum.Flag) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif not isinstance(value, enum.Flag):\nvalue = self._enum_class(value)\nself._set_enum_class(value.__class__)\nif not isinstance(value, self._enum_class):\nraise TypeError(\n\"setValue(self, Enum): argument 1 has unexpected type \"\nf\"{type(value).__name__!r}\"\n)\n# this filter shouldnt be needed, see https://bugreports.qt.io/browse/PYSIDE-2369\nvalues = []\nfor i in self._enum_class.__members__.values():\nif i.value == 0:\ncontinue\nif value &amp; i == i:\nself._action_map[i].setChecked(True)\nvalues.append(i)\ntext = \" | \".join(i.name for i in values) if values else self._enum_class(0).name\nself.set_text(text)\nvalue = core.Property(\nenum.Flag,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html#prettyqt.custom_widgets.editors.enumflagwidget.EnumFlagWidget.get_enum_class","title":"<code>get_enum_class() -&gt; enum.EnumMeta | None</code>","text":"<p>Return current Enum class.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def get_enum_class(self) -&gt; enum.EnumMeta | None:\n\"\"\"Return current Enum class.\"\"\"\nreturn self._enum_class\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html#prettyqt.custom_widgets.editors.enumflagwidget.EnumFlagWidget.get_value","title":"<code>get_value() -&gt; enum.Flag</code>","text":"<p>Current value as Enum member.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def get_value(self) -&gt; enum.Flag:\n\"\"\"Current value as Enum member.\"\"\"\nif self._enum_class is None:\nreturn None\nflag = self._enum_class(0)\nfor k, v in self._action_map.items():\nif v.isChecked():\nflag |= k\nreturn flag\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html#prettyqt.custom_widgets.editors.enumflagwidget.EnumFlagWidget.set_value","title":"<code>set_value(value: enum.Flag) -&gt; None</code>","text":"<p>Set value with Enum.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\enumflagwidget.py</code> <pre><code>def set_value(self, value: enum.Flag) -&gt; None:\n\"\"\"Set value with Enum.\"\"\"\nif not isinstance(value, enum.Flag):\nvalue = self._enum_class(value)\nself._set_enum_class(value.__class__)\nif not isinstance(value, self._enum_class):\nraise TypeError(\n\"setValue(self, Enum): argument 1 has unexpected type \"\nf\"{type(value).__name__!r}\"\n)\n# this filter shouldnt be needed, see https://bugreports.qt.io/browse/PYSIDE-2369\nvalues = []\nfor i in self._enum_class.__members__.values():\nif i.value == 0:\ncontinue\nif value &amp; i == i:\nself._action_map[i].setChecked(True)\nvalues.append(i)\ntext = \" | \".join(i.name for i in values) if values else self._enum_class(0).name\nself.set_text(text)\n</code></pre>"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261317328[\"custom_widgets.EnumFlagWidget\"]\n  2103261232000[\"widgets.ToolButton\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259904976[\"QtWidgets.QToolButton\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261232000 --&gt; 2103261317328\n  2103261100480 --&gt; 2103261232000\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259904976 --&gt; 2103261232000\n  2103259928016 --&gt; 2103259904976\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/EnumFlagWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>popupMode</code> QToolButton::ToolButtonPopupMode <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>autoRaise</code> bool <code>arrowType</code> Qt::ArrowType <code>value</code> PySide::PyObjectWrapper Currently chosen value"},{"location":"additional_modules/custom_widgets/FaderWidget.html","title":"FaderWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FaderWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\faderwidget.py</code> <pre><code>class FaderWidget(widgets.Widget):\npixmap_opacity = 1.0\ndef __init__(\nself,\nold_widget: widgets.QWidget,\nnew_widget: widgets.QWidget,\nduration: int = 300,\n):\nsuper().__init__(new_widget)\npr = gui.Window().devicePixelRatio()\nself.old_pixmap = gui.Pixmap(new_widget.size() * pr)\nself.old_pixmap.setDevicePixelRatio(pr)\nold_widget.render(self.old_pixmap)\nself.timeline = core.TimeLine(duration=duration, finished=self.close)\nself.timeline.value_changed.connect(self.animate)\nself.timeline.start()\nself.resize(new_widget.size())\nself.show()\ndef paintEvent(self, event):\nwith gui.Painter(self) as painter:\npainter.setOpacity(self.pixmap_opacity)\npainter.drawPixmap(0, 0, self.old_pixmap)\ndef animate(self, value: float):\nself.pixmap_opacity = 1.0 - value\nself.repaint()\n</code></pre>"},{"location":"additional_modules/custom_widgets/FaderWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261508368[\"custom_widgets.FaderWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261508368\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FaderWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/FileChooserButton.html","title":"FileChooserButton","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FileChooserButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\filechooserbutton.py</code> <pre><code>class FileChooserButton(widgets.Widget):\nvalue_changed = core.Signal(pathlib.Path)\ndef __init__(\nself,\nextensions: dict[str, list[str]] | None = None,\nmode: widgets.filedialog.AcceptModeStr = \"save\",\nfile_mode: widgets.filedialog.FileModeStr = \"existing_files\",\nroot: None | str | pathlib.Path = None,\nobject_name: str = \"file_chooser_button\",\n**kwargs: Any,\n):\n\"\"\"Initialize FileChooserButton.\n        Args:\n            extensions: dict allowed extensions\n                        form: \"'name': ['.ext1', '.ext2']\"\n            mode: Accept mode (\"save\" or \"load\")\n            file_mode: File mode (\"existing_files\", \"existing_file\", \"any_file\",\n                                  or \"directory\")\n            root: Root path\n            object_name: Object name\n            kwargs: kwargs passed to parent\n        \"\"\"\nsuper().__init__(object_name=object_name, **kwargs)\nself._path: pathlib.Path | None = None\nself._extensions = extensions or []\nself.mode = mode\nself.file_mode = file_mode\nself.root = root\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_read_only()\nlayout.add(self.lineedit)\naction = gui.Action(triggered=self.open_file)\nif self.file_mode == \"directory\":\naction.set_icon(\"mdi.folder-outline\")\nelse:\naction.set_icon(\"mdi.file-outline\")\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, pathlib.Path)\n@core.Slot()\ndef open_file(self):\ndialog = widgets.FileDialog(\nparent=self,\npath_id=\"file_path\",\nmode=self.mode,\npath=self.root,\nfile_mode=self.file_mode,\n)\nif self._extensions:\ndialog.set_extension_filter(self._extensions)\nif not dialog.choose():\nreturn\nself.set_path(dialog.selected_file())\nself.value_changed.emit(self._path)\ndef set_path(self, path: datatypes.PathType | None):\nif path is None:\nself._path = None\nself.lineedit.set_text(\"\")\nelse:\nself._path = pathlib.Path(path)\nself.lineedit.set_text(os.fspath(path))\ndef get_value(self) -&gt; pathlib.Path | None:\nreturn self._path\ndef set_value(self, value: datatypes.PathType | None):\nself.set_path(value)\ndef get_extensions(self) -&gt; list[str]:\nreturn self._extensions\ndef set_extensions(self, extensions: list[str]):\nself._extensions = extensions\n</code></pre>"},{"location":"additional_modules/custom_widgets/FileChooserButton.html#prettyqt.custom_widgets.editors.filechooserbutton.FileChooserButton.__init__","title":"<code>__init__(extensions: dict[str, list[str]] | None = None, mode: widgets.filedialog.AcceptModeStr = 'save', file_mode: widgets.filedialog.FileModeStr = 'existing_files', root: None | str | pathlib.Path = None, object_name: str = 'file_chooser_button', **kwargs: Any)</code>","text":"<p>Initialize FileChooserButton.</p> <p>Parameters:</p> Name Type Description Default <code>extensions</code> <code>dict[str, list[str]] | None</code> <p>dict allowed extensions         form: \"'name': ['.ext1', '.ext2']\"</p> <code>None</code> <code>mode</code> <code>widgets.filedialog.AcceptModeStr</code> <p>Accept mode (\"save\" or \"load\")</p> <code>'save'</code> <code>file_mode</code> <code>widgets.filedialog.FileModeStr</code> <p>File mode (\"existing_files\", \"existing_file\", \"any_file\",                   or \"directory\")</p> <code>'existing_files'</code> <code>root</code> <code>None | str | pathlib.Path</code> <p>Root path</p> <code>None</code> <code>object_name</code> <code>str</code> <p>Object name</p> <code>'file_chooser_button'</code> <code>kwargs</code> <code>Any</code> <p>kwargs passed to parent</p> <code>{}</code> Source code in <code>prettyqt\\custom_widgets\\editors\\filechooserbutton.py</code> <pre><code>def __init__(\nself,\nextensions: dict[str, list[str]] | None = None,\nmode: widgets.filedialog.AcceptModeStr = \"save\",\nfile_mode: widgets.filedialog.FileModeStr = \"existing_files\",\nroot: None | str | pathlib.Path = None,\nobject_name: str = \"file_chooser_button\",\n**kwargs: Any,\n):\n\"\"\"Initialize FileChooserButton.\n    Args:\n        extensions: dict allowed extensions\n                    form: \"'name': ['.ext1', '.ext2']\"\n        mode: Accept mode (\"save\" or \"load\")\n        file_mode: File mode (\"existing_files\", \"existing_file\", \"any_file\",\n                              or \"directory\")\n        root: Root path\n        object_name: Object name\n        kwargs: kwargs passed to parent\n    \"\"\"\nsuper().__init__(object_name=object_name, **kwargs)\nself._path: pathlib.Path | None = None\nself._extensions = extensions or []\nself.mode = mode\nself.file_mode = file_mode\nself.root = root\nlayout = widgets.HBoxLayout(self)\nlayout.set_margin(0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_read_only()\nlayout.add(self.lineedit)\naction = gui.Action(triggered=self.open_file)\nif self.file_mode == \"directory\":\naction.set_icon(\"mdi.folder-outline\")\nelse:\naction.set_icon(\"mdi.file-outline\")\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\n</code></pre>"},{"location":"additional_modules/custom_widgets/FileChooserButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261349968[\"custom_widgets.FileChooserButton\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261349968\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FileChooserButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/FileTree.html","title":"FileTree","text":"<p>Qt Base Class: QTreeView</p> <p>Signature: <code>QTreeView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FileTree.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>class FileTree(widgets.TreeView):\ndef __init__(self, *args, filters: list[str] | None = None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setRootIsDecorated(True)\nself.setup_dragdrop_move()\nmodel = widgets.FileSystemModel()\nmodel.resolve_sym_links(False)\nif filters:\nmodel.set_name_filters(filters, hide=False)\nself.set_model(model)\nself._expanded_ids = []\ndef get_expanded_state(self, root_index: core.ModelIndex | None = None) -&gt; list[str]:\n\"\"\"Get a list of all expanded paths.\n        Can be used to re-expand to the same state.\n        \"\"\"\nroot = root_index or self.rootIndex()\nmodel = self.model()\nself._expanded_ids = []\ndef _save_expanded_on_level(index: core.ModelIndex):\nif not self.isExpanded(index):\nreturn None\nmodel = self.model()\nif index.isValid():\npath = model.data(index, model.Roles.FilePathRole)\nself._expanded_ids.append(path)\nfor i in range(model.rowCount(index)):\nval = model.index(i, 0, index)\n_save_expanded_on_level(val)\nfor i in range(model.rowCount(root)):\n_save_expanded_on_level(model.index(i, 0, root))\nreturn self._expanded_ids\ndef set_expanded_state(\nself, state: list[str], root_index: core.ModelIndex | None = None\n):\n\"\"\"Set all indexes which correspond to given paths to expanded.\"\"\"\nroot = root_index or self.rootIndex()\nmodel = self.model()\nself._expanded_ids = state\ndef _restore_expanded_on_level(index: core.ModelIndex):\nmodel = self.model()\npath = model.data(index, model.Roles.FilePathRole)\nif path not in self._expanded_ids:\nreturn None\nself.setExpanded(index, True)\nif not model.hasChildren(index):\nreturn None\npath = pathlib.Path(path)\nfor it in path.iterdir():\nchild_index = model.index(str(path / it))\n_restore_expanded_on_level(child_index)\nwith self.updates_off():\nfor i in range(model.rowCount(root)):\n_restore_expanded_on_level(model.index(i, 0))\ndef set_root_path(self, path: datatypes.PathType):\n\"\"\"Set tree rootpath to given path.\"\"\"\npath = os.fspath(path)\nself.model().set_root_path(path)\nindex = self.model().index(path)\nself.setRootIndex(index)\n</code></pre>"},{"location":"additional_modules/custom_widgets/FileTree.html#prettyqt.custom_widgets.itemviews.filetree.FileTree.get_expanded_state","title":"<code>get_expanded_state(root_index: core.ModelIndex | None = None) -&gt; list[str]</code>","text":"<p>Get a list of all expanded paths.</p> <p>Can be used to re-expand to the same state.</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def get_expanded_state(self, root_index: core.ModelIndex | None = None) -&gt; list[str]:\n\"\"\"Get a list of all expanded paths.\n    Can be used to re-expand to the same state.\n    \"\"\"\nroot = root_index or self.rootIndex()\nmodel = self.model()\nself._expanded_ids = []\ndef _save_expanded_on_level(index: core.ModelIndex):\nif not self.isExpanded(index):\nreturn None\nmodel = self.model()\nif index.isValid():\npath = model.data(index, model.Roles.FilePathRole)\nself._expanded_ids.append(path)\nfor i in range(model.rowCount(index)):\nval = model.index(i, 0, index)\n_save_expanded_on_level(val)\nfor i in range(model.rowCount(root)):\n_save_expanded_on_level(model.index(i, 0, root))\nreturn self._expanded_ids\n</code></pre>"},{"location":"additional_modules/custom_widgets/FileTree.html#prettyqt.custom_widgets.itemviews.filetree.FileTree.set_expanded_state","title":"<code>set_expanded_state(state: list[str], root_index: core.ModelIndex | None = None)</code>","text":"<p>Set all indexes which correspond to given paths to expanded.</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def set_expanded_state(\nself, state: list[str], root_index: core.ModelIndex | None = None\n):\n\"\"\"Set all indexes which correspond to given paths to expanded.\"\"\"\nroot = root_index or self.rootIndex()\nmodel = self.model()\nself._expanded_ids = state\ndef _restore_expanded_on_level(index: core.ModelIndex):\nmodel = self.model()\npath = model.data(index, model.Roles.FilePathRole)\nif path not in self._expanded_ids:\nreturn None\nself.setExpanded(index, True)\nif not model.hasChildren(index):\nreturn None\npath = pathlib.Path(path)\nfor it in path.iterdir():\nchild_index = model.index(str(path / it))\n_restore_expanded_on_level(child_index)\nwith self.updates_off():\nfor i in range(model.rowCount(root)):\n_restore_expanded_on_level(model.index(i, 0))\n</code></pre>"},{"location":"additional_modules/custom_widgets/FileTree.html#prettyqt.custom_widgets.itemviews.filetree.FileTree.set_root_path","title":"<code>set_root_path(path: datatypes.PathType)</code>","text":"<p>Set tree rootpath to given path.</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filetree.py</code> <pre><code>def set_root_path(self, path: datatypes.PathType):\n\"\"\"Set tree rootpath to given path.\"\"\"\npath = os.fspath(path)\nself.model().set_root_path(path)\nindex = self.model().index(path)\nself.setRootIndex(index)\n</code></pre>"},{"location":"additional_modules/custom_widgets/FileTree.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261363408[\"custom_widgets.FileTree\"]\n  2103261413328[\"widgets.TreeView\"]\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259814960[\"QtWidgets.QTreeView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261413328 --&gt; 2103261363408\n  2103261405648 --&gt; 2103261413328\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259814960 --&gt; 2103261413328\n  2103259770800 --&gt; 2103259814960\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FileTree.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>autoExpandDelay</code> int <code>indentation</code> int <code>rootIsDecorated</code> bool <code>uniformRowHeights</code> bool <code>itemsExpandable</code> bool <code>sortingEnabled</code> bool <code>animated</code> bool <code>allColumnsShowFocus</code> bool <code>wordWrap</code> bool <code>headerHidden</code> bool <code>expandsOnDoubleClick</code> bool"},{"location":"additional_modules/custom_widgets/FilterHeader.html","title":"FilterHeader","text":"<p>Qt Base Class: QHeaderView</p> <p>Signature: <code>QHeaderView(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FilterHeader.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.HeaderView</code></p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\filterheader.py</code> <pre><code>class FilterHeader(widgets.HeaderView):\ndef __init__(self, parent: widgets.TableView):\nself._editors_visible = False\nself._editors = []\nself._proxy = parent.proxifier.get_proxy(\n\"multi_column_filter\",\nrecursive_filtering_enabled=True,\n)\nself._padding = 6\nsuper().__init__(constants.HORIZONTAL, parent)\nself.setStretchLastSection(True)\n# self.setResizeMode(QHeaderView.Stretch)\nself.setDefaultAlignment(constants.ALIGN_CENTER_LEFT)\n# self.setSortIndicatorShown(False)\nself.sectionResized.connect(self._adjust_positions)\nparent.h_scrollbar.valueChanged.connect(self._adjust_positions)\nparent.model_changed.connect(self._update_filter_boxes)\nself.sectionResized.connect(self._adjust_positions)\nself._update_filter_boxes()\nself.update_geometries()\n@classmethod\ndef setup_example(cls):\nw = widgets.TableView()\nwidget = cls(parent=w)\nreturn widget\ndef are_editors_visible(self) -&gt; bool:\nreturn self._editors_visible\ndef set_editors_visible(self, visible: bool):\nself._editors_visible = visible\nfor editor in self._editors:\neditor.setVisible(visible)\nself.updateGeometries()\ndef _update_filter_boxes(self):\n# TODO: deal with column changes by connecting to Model signals.\n# That way we wouldnt have to update all editors on change.\nwhile self._editors:\neditor = self._editors.pop()\neditor.deleteLater()\nself.create_editors()\nself._adjust_positions()\ndef create_editors(self):\n# using parent model here bc we cant guarantee that we are already set to view.\nparent = self.parent()\nmodel = parent.model()\nself._proxy.clear_filters()\nfor i in range(model.columnCount()):\ntyp = model.get_column_type(i)\nif typ is bool:\ndef set_filter(val, i=i):\nself._proxy.set_filter_value(i, val, constants.CHECKSTATE_ROLE)\nname = f\"filter_combo_{i}\"\nwidget = widgets.ComboBox(margin=0, object_name=name, parent=self)\nwidget.add_items(BOOL_ITEMS)\nwidget.value_changed.connect(set_filter)\nelif typ in [int, float]:\ndef set_filter(val, i=i):\nself._proxy.set_filter_value(i, val)\nname = f\"filter_numwidget_{i}\"\nwidget = custom_widgets.NumFilterWidget(\nmargin=0, object_name=name, parent=self\n)\nwidget.filter_changed.connect(set_filter)\ntitle = model.headerData(i, constants.HORIZONTAL, constants.DISPLAY_ROLE)\nwidget.lineedit.setPlaceholderText(f\"Filter {title}...\")\nelif typ is str:\ndef set_filter(val, i=i):\nself._proxy.set_filter_value(i, val)\nname = f\"filter_lineedit_{i}\"\nwidget = widgets.LineEdit(margin=0, object_name=name, parent=self)\nwidget.value_changed.connect(set_filter)\ntitle = model.headerData(i, constants.HORIZONTAL, constants.DISPLAY_ROLE)\nwidget.setPlaceholderText(f\"Filter {title}...\")\nelse:\nwidget = widgets.Widget()\nwidget.show()\nself._editors.append(widget)\ndef sizeHint(self) -&gt; core.QSize:\nsize = super().sizeHint()\nif self._editors:\nheight = self._editors[0].sizeHint().height()\nsize.setHeight(size.height() + height + self._padding)\nreturn size\ndef updateGeometries(self):\nif self._editors:\nheight = self._editors[0].sizeHint().height()\nself.setViewportMargins(0, 0, 0, height + self._padding)\nelse:\nself.setViewportMargins(0, 0, 0, 0)\nsuper().updateGeometries()\nself._adjust_positions()\ndef _adjust_positions(self):\nfor index, editor in enumerate(self._editors):\nheight = editor.sizeHint().height()\ncompensate_y = 0\ncompensate_x = 0\nmatch editor:\ncase widgets.QComboBox():\ncompensate_y = +2\ncase widgets.QPushButton():\ncompensate_y = -1\ncase widgets.QCheckBox():\ncompensate_y = 4\ncompensate_x = 4\ncase widgets.QWidget():\ncompensate_y = -1\neditor.move(\nself.sectionPosition(index) - self.offset() + 1 + compensate_x,\nheight + (self._padding // 2) + compensate_y,\n)\neditor.resize(self.sectionSize(index), height)\ndef set_filter_case_sensitive(self, value: bool):\nself._proxy.set_filter_case_sensitive(value)\ndef clear_filters(self):\nfor editor in self._editors:\neditor.clear()\neditors_visible = core.Property(\nbool,\nare_editors_visible,\nset_editors_visible,\ndoc=\"Whether the filter widgets are visible\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/FilterHeader.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261637152[\"custom_widgets.FilterHeader\"]\n  2103261242560[\"widgets.HeaderView\"]\n  2103261240640[\"widgets.HeaderViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259838000[\"QtWidgets.QHeaderView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261242560 --&gt; 2103261637152\n  2103261240640 --&gt; 2103261242560\n  2103261136960 --&gt; 2103261240640\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259838000 --&gt; 2103261242560\n  2103259770800 --&gt; 2103259838000\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FilterHeader.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>firstSectionMovable</code> bool <code>showSortIndicator</code> bool <code>highlightSections</code> bool <code>stretchLastSection</code> bool <code>cascadingSectionResizes</code> bool <code>defaultSectionSize</code> int <code>minimumSectionSize</code> int <code>maximumSectionSize</code> int <code>defaultAlignment</code> QFlags <code>sortIndicatorClearable</code> bool <code>editors_visible</code> bool Whether the filter widgets are visible"},{"location":"additional_modules/custom_widgets/FlagSelectionWidget.html","title":"FlagSelectionWidget","text":"<p>Qt Base Class: QGroupBox</p> <p>Signature: <code>QGroupBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QGroupBox(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FlagSelectionWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\flagselectionwidget.py</code> <pre><code>class FlagSelectionWidget(widgets.GroupBox):\nvalue_changed = core.Signal(int)\ndef __init__(\nself,\nlabel: str = \"\",\nlayout: Literal[\"horizontal\", \"vertical\"] = \"vertical\",\nobject_name: str = \"flag_selection_widget\",\n**kwargs,\n):\nsuper().__init__(title=label, object_name=object_name, **kwargs)\nself.set_layout(layout)\nself.buttons: dict[widgets.CheckBox, int] = {}\ndef __iter__(self) -&gt; Iterator[tuple[widgets.CheckBox, int]]:\nreturn iter(self.buttons.items())\ndef add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, Iterable):\nself.add(*i)\nelse:\nraise TypeError(\"Invalid item type\")\ndef add(self, title: str, flag: int):\ncheckbox = widgets.CheckBox(title, toggled=self.update_choice)\nself.buttons[checkbox] = flag\nself.box.add(checkbox)\ndef current_choice(self) -&gt; int:\nret_val = 0\nfor btn, flag in self.buttons.items():\nif btn.isChecked():\nret_val |= flag\nreturn int(ret_val)\n@core.Slot(bool)\ndef update_choice(self, checked: bool):\nchoice = self.current_choice()\nself.value_changed.emit(choice)\ndef set_value(self, value: int):\nfor btn, flag in self.buttons.items():\nbtn.setChecked(bool(value &amp; flag))\ndef get_value(self) -&gt; int:\nreturn self.current_choice()\n</code></pre>"},{"location":"additional_modules/custom_widgets/FlagSelectionWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261335568[\"custom_widgets.FlagSelectionWidget\"]\n  2103261445008[\"widgets.GroupBox\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259738160[\"QtWidgets.QGroupBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261445008 --&gt; 2103261335568\n  2103261127360 --&gt; 2103261445008\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259738160 --&gt; 2103261445008\n  2103259691120 --&gt; 2103259738160\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FlagSelectionWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>alignment</code> QFlags <code>flat</code> bool <code>checkable</code> bool <code>checked</code> bool"},{"location":"additional_modules/custom_widgets/FloatLineEdit.html","title":"FloatLineEdit","text":"<p>Qt Base Class: QLineEdit</p> <p>Signature: <code>QLineEdit(self, arg__1: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLineEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FloatLineEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LineEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\lineedits.py</code> <pre><code>class FloatLineEdit(widgets.LineEdit):\nvalue_changed = core.Signal(float)\ndef __init__(self, *args, object_name: str = \"float_lineedit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_validator(\"double\", bottom=0.0)\ndef get_value(self) -&gt; float:\nval = super().get_value()\ntry:\nreturn float(val)\nexcept ValueError:\nreturn 0.0\ndef set_value(self, value: float | str):\nsuper().set_value(str(value))\nvalue = core.Property(\nfloat,\nget_value,\nset_value,\ndoc=\"Current Value as float\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/FloatLineEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261556368[\"custom_widgets.FloatLineEdit\"]\n  2103261134080[\"widgets.LineEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259700720[\"QtWidgets.QLineEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261134080 --&gt; 2103261556368\n  2103261127360 --&gt; 2103261134080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259700720 --&gt; 2103261134080\n  2103259691120 --&gt; 2103259700720\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FloatLineEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>inputMask</code> QString <code>text</code> QString <code>maxLength</code> int <code>frame</code> bool <code>echoMode</code> QLineEdit::EchoMode <code>displayText</code> QString <code>cursorPosition</code> int <code>alignment</code> QFlags <code>modified</code> bool <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>dragEnabled</code> bool <code>readOnly</code> bool <code>undoAvailable</code> bool <code>redoAvailable</code> bool <code>acceptableInput</code> bool <code>placeholderText</code> QString <code>cursorMoveStyle</code> Qt::CursorMoveStyle <code>clearButtonEnabled</code> bool <code>value</code> double Current Value as float"},{"location":"additional_modules/custom_widgets/FlowLayout.html","title":"FlowLayout","text":"<p>Qt Base Class: QLayout</p> <p>Signature: <code>QLayout(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FlowLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Layout</code></p> <p>Layout which adjusts its children based on space available.</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\flowlayout.py</code> <pre><code>class FlowLayout(widgets.Layout):\n\"\"\"Layout which adjusts its children based on space available.\"\"\"\nID = \"flow\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._items = []\ndef __add__(self, other: widgets.QWidget | widgets.QLayout) -&gt; FlowLayout:\nif not isinstance(other, widgets.QWidget | widgets.QLayout):\nraise TypeError\nself.add(other)\nreturn self\ndef __del__(self):\nitem = self.takeAt(0)\nwhile item:\nitem = self.takeAt(0)\ndef addLayout(self, layout: widgets.QLayout):\nwidget = widgets.Widget()\nwidget.setLayout(layout)\nself.addWidget(widget)\ndef addItem(self, item):\nself._items.append(item)\ndef itemAt(self, idx):\ntry:\nreturn self._items[idx]\nexcept IndexError:\npass\ndef takeAt(self, idx):\ntry:\nreturn self._items.pop(idx)\nexcept IndexError:\npass\ndef count(self):\nreturn len(self._items)\ndef hasHeightForWidth(self):\nreturn True\ndef heightForWidth(self, width):\nreturn self._do_layout(core.Rect(0, 0, width, 0), apply_geometry=False)\ndef setGeometry(self, rect):\nsuper().setGeometry(rect)\nself._do_layout(rect, apply_geometry=True)\ndef expandingDirections(self):\nreturn constants.Orientation(0)\ndef minimumSize(self):\nsize = core.QSize()\nfor item in self._items:\nsize = size.expandedTo(item.minimumSize())\nleft, top, right, bottom = self.getContentsMargins()\nreturn size + core.QSize(left + right, top + bottom)\nsizeHint = minimumSize\ndef smart_spacing(self, horizontal: bool = True) -&gt; int:\np = self.parent()\nif p is None:\nreturn -1\nif p.isWidgetType():\nwhich = (\nwidgets.Style.PixelMetric.PM_LayoutHorizontalSpacing\nif horizontal\nelse widgets.Style.PixelMetric.PM_LayoutVerticalSpacing\n)\nreturn p.style().pixelMetric(which, None, p)\nreturn p.spacing()\ndef _do_layout(self, rect: core.QRect, apply_geometry: bool = False) -&gt; int:\nerect = rect.marginsRemoved(self.contentsMargins())\nx, y = erect.x(), erect.y()\nline_height = 0\ndef layout_spacing(wid, horizontal: bool = True):\nif (ans := self.smart_spacing(horizontal)) != -1:\nreturn ans\nif wid is None:\nreturn 0\nreturn wid.style().layoutSpacing(\nwidgets.SizePolicy.ControlType.PushButton,\nwidgets.SizePolicy.ControlType.PushButton,\nconstants.HORIZONTAL if horizontal else constants.VERTICAL,\n)\nlines, current_line = [], []\ngmap = {}\nfor item in self._items:\nisz, wid = item.sizeHint(), item.widget()\nhs, vs = layout_spacing(wid), layout_spacing(wid, False)\nnext_x = x + isz.width() + hs\nif next_x - hs &gt; erect.right() and line_height &gt; 0:\nx = erect.x()\ny = y + line_height + vs\nnext_x = x + isz.width() + hs\nlines.append((line_height, current_line))\ncurrent_line = []\nline_height = 0\nif apply_geometry:\ngmap[item] = x, y, isz\nx = next_x\nline_height = max(line_height, isz.height())\ncurrent_line.append((item, isz.height()))\nlines.append((line_height, current_line))\nif apply_geometry:\nfor line_height, items in lines:\nfor item, item_height in items:\nx, wy, isz = gmap[item]\nif item_height &lt; line_height:\nwy += (line_height - item_height) // 2\nitem.setGeometry(core.Rect(core.Point(x, wy), isz))\nreturn y + line_height - rect.y() + self.contentsMargins().bottom()\n</code></pre>"},{"location":"additional_modules/custom_widgets/FlowLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261522768[\"custom_widgets.FlowLayout\"]\n  2103261443088[\"widgets.Layout\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261443088 --&gt; 2103261522768\n  2103261439248 --&gt; 2103261443088\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260125776 --&gt; 2103261443088\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"additional_modules/custom_widgets/FlowLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"additional_modules/custom_widgets/FontChooserButton.html","title":"FontChooserButton","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/FontChooserButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\fontchooserbutton.py</code> <pre><code>class FontChooserButton(widgets.Widget):\nvalue_changed = core.Signal(gui.Font)\ndef __init__(\nself,\nfont: gui.QFont | str | None = None,\nobject_name: str = \"font_chooser_button\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nself._current_font = None\nlayout = self.set_layout(\"horizontal\", margin=0)\nself.lineedit = widgets.LineEdit(read_only=True)\nself.set_current_font(font)\nlayout.add(self.lineedit)\naction = gui.Action(icon=\"mdi.format-font\", triggered=self.choose_font)\nself.button = widgets.ToolButton()\nself.button.setDefaultAction(action)\nlayout.add(self.button)\ndef __repr__(self):\nreturn get_repr(self, self.current_font)\n@core.Slot()\ndef choose_font(self):\ndlg = widgets.FontDialog()\nif self._current_font:\ndlg.setCurrentFont(self._current_font)\nif dlg.exec():\nself.set_current_font(dlg.current_font())\nself.value_changed.emit(dlg.current_font())\ndef set_current_font(self, font: str | gui.QFont | None):\nmatch font:\ncase str():\nself._current_font = gui.Font(font)\ncase None:\nself._current_font = gui.Font()\ncase _:\nself._current_font = font\nself.lineedit.setText(self._current_font.family())\ndef set_value(self, value: str | gui.QFont):\nself.set_current_font(value)\ndef get_value(self) -&gt; gui.QFont:\nreturn gui.QFont(self._current_font)\ncurrent_font = core.Property(\ngui.QFont,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen font\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/FontChooserButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261362448[\"custom_widgets.FontChooserButton\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261362448\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/FontChooserButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>current_font</code> QFont Currently chosen font"},{"location":"additional_modules/custom_widgets/HierarchicalHeaderView.html","title":"HierarchicalHeaderView","text":"<p>Qt Base Class: QHeaderView</p> <p>Signature: <code>QHeaderView(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/HierarchicalHeaderView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.HeaderView</code></p> <p>Hierarchical header view.</p> <p>This class is a Python port of http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154</p> Source code in <code>prettyqt\\custom_widgets\\itemviews\\hierarchicalheaderview.py</code> <pre><code>class HierarchicalHeaderView(widgets.HeaderView):\n\"\"\"Hierarchical header view.\n    This class is a Python port of\n    http://qt-apps.org/content/show.php/HierarchicalHeaderView?content=103154\n    \"\"\"\nheader_model = None\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, highlight_sections=True, **kwargs)\nself.setSectionsClickable(True)\nself.sectionResized.connect(self.on_section_resized)\nself.show()  # force to be visible\nself.sectionMoved.connect(self._on_section_moved)\ndef init_from_new_model(\nself, orientation: constants.Orientation, model: core.QAbstractItemModel\n):\nis_hor = orientation == constants.HORIZONTAL\nrole = HORIZONTAL_HEADER_DATA_ROLE if is_hor else VERTICAL_HEADER_DATA_ROLE\nself.header_model = model.data(core.ModelIndex(), role)\ndef find_leaf(\nself, index: core.ModelIndex, section_index: int, current_leaf_index: int\n) -&gt; tuple[core.ModelIndex, int]:\nif not index.isValid():\nreturn core.ModelIndex(), current_leaf_index\nmodel = index.model()\nif child_count := model.columnCount(index):\nfor i in range(child_count):\nres, current_leaf_index = self.find_leaf(\nmodel.index(0, i, index), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res, current_leaf_index\nelse:\ncurrent_leaf_index += 1\nif current_leaf_index == section_index:\nreturn index, current_leaf_index\nreturn core.ModelIndex(), current_leaf_index\ndef leaf_index(self, section_index: int) -&gt; core.ModelIndex:\nif self.header_model:\ncurrent_leaf_index = -1\nfor i in range(self.header_model.columnCount()):\nres, current_leaf_index = self.find_leaf(\nself.header_model.index(0, i), section_index, current_leaf_index\n)\nif res.isValid():\nreturn res\nreturn core.ModelIndex()\ndef search_leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nres = []\nif index.isValid():\nmodel = index.model()\nif child_count := index.model().columnCount(index):\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nres += self.search_leafs(leaf)\nelse:\nres.append(index)\nreturn res\ndef leafs(self, index: core.ModelIndex) -&gt; list[core.ModelIndex]:\nleafs = []\nif index.isValid():\nmodel = index.model()\nchild_count = index.model().columnCount(index)\nfor i in range(child_count):\nleaf = model.index(0, i, index)\nleafs += self.search_leafs(leaf)\nreturn leafs\ndef set_foreground_brush(\nself, opt: widgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif foreground_brush := index.data(constants.FOREGROUND_ROLE):\nbrush = gui.QBrush(foreground_brush)\nopt.palette.setBrush(gui.QPalette.ColorRole.ButtonText, brush)\ndef set_background_brush(\nself, opt: widgets.QStyleOptionHeader, index: core.ModelIndex\n):\nif background_brush := index.data(constants.BACKGROUND_ROLE):\nbrush = gui.QBrush(background_brush)\nopt.palette.setBrush(gui.QPalette.ColorRole.Button, brush)\nopt.palette.setBrush(gui.QPalette.ColorRole.Window, brush)\ndef get_cell_size(\nself,\nleaf_index: core.ModelIndex,\nhv: widgets.QHeaderView,\nstyle_options: widgets.QStyleOptionHeader,\n) -&gt; core.QSize:\nres = core.QSize()\nif variant := leaf_index.data(constants.SIZE_HINT_ROLE):\nres = variant\nfnt = var if (var := leaf_index.data(constants.FONT_ROLE)) else hv.font()\nfnt.setBold(True)\nfm = gui.QFontMetrics(fnt)\ntext_size = fm.size(0, leaf_index.data(constants.DISPLAY_ROLE))\nsize = text_size + core.QSize(4, 0)\nif leaf_index.data(constants.USER_ROLE):\nsize.transpose()\ndecoration_size = hv.style().sizeFromContents(\nwidgets.QStyle.ContentsType.CT_HeaderSection,\nstyle_options,\ncore.QSize(),\nhv,\n)\nempty_text_size = fm.size(0, \"\")\nreturn res.expandedTo(size + decoration_size - empty_text_size)\ndef get_current_cell_width(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nhv: widgets.QHeaderView,\n) -&gt; int:\nleafs_list = self.leafs(searched_index)\nif not leafs_list:\nreturn hv.sectionSize(section_index)\noffset = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - offset\nreturn sum(\nhv.sectionSize(first_leaf_section_index + i) for i in range(len(leafs_list))\n)\ndef get_current_cell_left(\nself,\nsearched_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nsection_index: int,\nleft: int,\nhv: widgets.QHeaderView,\n) -&gt; int:\nif leafs_list := self.leafs(searched_index):\nn = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nfirst_leaf_section_index = section_index - n\nfor i in range(n - 1, -1, -1):\nleft -= hv.sectionSize(first_leaf_section_index + i)\nreturn left\ndef paint_horizontal_cell(\nself,\npainter: gui.QPainter,\nhv: widgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: widgets.QStyleOptionHeader,\nsection_rect: core.QRect,\ntop: int,\n) -&gt; int:\nuniopt = widgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nheight = (\nsection_rect.height() - top\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).height()\n)\nleft = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.left(), hv\n)\nwidth = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = core.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = gui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = core.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(core.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn top + height\ndef paint_horizontal_section(\nself,\npainter: gui.QPainter,\nsection_rect: core.QRect,\nlogical_leaf_index: int,\nhv: widgets.QHeaderView,\nstyle_options: widgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\nold_bo = painter.brushOrigin()\ntop = section_rect.y()\nindexes = get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = widgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nif i &lt; len(indexes) - 1:  # Use sortIndicator for inner level only\nreal_style_options.sortIndicator = SortIndicator.None_\n#                if i==0:\n#                    print(self.leafs(indexes[i]), leaf_index)\ntop = self.paint_horizontal_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\ntop,\n)\npainter.setBrushOrigin(old_bo)\ndef paint_vertical_cell(\nself,\npainter: gui.QPainter,\nhv: widgets.QHeaderView,\ncell_index: core.ModelIndex,\nleaf_index: core.ModelIndex,\nlogical_leaf_index: int,\nstyle_options: widgets.QStyleOptionHeader,\nsection_rect: core.QRect,\nleft: int,\n) -&gt; int:\nuniopt = widgets.QStyleOptionHeader(style_options)\nself.set_foreground_brush(uniopt, cell_index)\nself.set_background_brush(uniopt, cell_index)\nwidth = (\nsection_rect.width() - left\nif cell_index == leaf_index\nelse self.get_cell_size(cell_index, hv, uniopt).width()\n)\ntop = self.get_current_cell_left(\ncell_index, leaf_index, logical_leaf_index, section_rect.top(), hv\n)\nheight = self.get_current_cell_width(\ncell_index, leaf_index, logical_leaf_index, hv\n)\nr = core.QRect(left, top, width, height)\nuniopt.text = cell_index.data(constants.DISPLAY_ROLE)\npainter.save()\nuniopt.rect = r\nstyle = hv.style()\nif cell_index.data(constants.USER_ROLE):\nstyle.drawControl(CE.CE_HeaderSection, uniopt, painter, hv)\nm = gui.QTransform()\nm.rotate(-90)\npainter.setWorldTransform(m, True)\nnew_r = core.QRect(0, 0, r.height(), r.width())\nnew_r.moveCenter(core.QPoint(-r.center().y(), r.center().x()))\nuniopt.rect = new_r\nstyle.drawControl(CE.CE_HeaderLabel, uniopt, painter, hv)\nelse:\nstyle.drawControl(CE.CE_Header, uniopt, painter, hv)\npainter.restore()\nreturn left + width\ndef paint_vertical_section(\nself,\npainter: gui.QPainter,\nsection_rect: core.QRect,\nlogical_leaf_index: int,\nhv: widgets.QHeaderView,\nstyle_options: widgets.QStyleOptionHeader,\nleaf_index: core.ModelIndex,\n):\nold_bo = painter.brushOrigin()\nleft = section_rect.x()\nindexes = get_parent_indexes(leaf_index)\nfor i, idx in enumerate(indexes):\nreal_style_options = widgets.QStyleOptionHeader(style_options)\nif i &lt; len(indexes) - 1 and (\nreal_style_options.state &amp; StateFlag.State_Sunken\nor real_style_options.state &amp; StateFlag.State_On\n):\nt = StateFlag.State_Sunken | StateFlag.State_On\nreal_style_options.state = real_style_options.state &amp; ~t\n# FIXME: parent items are not highlighted\nleft = self.paint_vertical_cell(\npainter,\nhv,\nidx,\nleaf_index,\nlogical_leaf_index,\nreal_style_options,\nsection_rect,\nleft,\n)\npainter.setBrushOrigin(old_bo)\ndef _on_section_moved(\nself, logical_index: int, old_visual_index: int, new_visual_index: int\n):\nview = self.parent()\nmodel = view.model()\nif not hasattr(model, \"reorder\"):\nreturn  # reorder underlying data of models with /reorder/ def only\nif getattr(self, \"manual_move\", False):\nself.manual_move = False\nreturn\nself.manual_move = True\nself.moveSection(new_visual_index, old_visual_index)  # cancel move\nif not model.reorder(old_visual_index, new_visual_index, self.orientation()):\nreturn\nrng = sorted((old_visual_index, new_visual_index))\nif self.orientation() == constants.HORIZONTAL:\noptions = [(view.columnWidth(i), i) for i in range(rng[0], rng[1] + 1)]\nfor i, col in enumerate(range(rng[0], rng[1] + 1)):\nview.setColumnWidth(col, options[i][0])\nview.selectColumn(new_visual_index)\nelse:\noptions = [(view.rowHeight(i), i) for i in range(rng[0], rng[1] + 1)]\nfor i, col in enumerate(range(rng[0], rng[1] + 1)):\nview.setRowHeight(col, options[i][0])\nview.selectRow(new_visual_index)\n# FIXME: don't select if sorting is enable?\nif self.isSortIndicatorShown():\nsort_ind_index = next(\n(i for i, o in enumerate(options) if o[1] == self.sortIndicatorSection()),\nNone,\n)\n# sort indicator is among sections being reordered\nif sort_ind_index is not None:\n# FIXME: does unnecessary sorting\nself.setSortIndicator(sort_ind_index + rng[0], self.sortIndicatorOrder())\nmodel.layoutChanged.emit()  # update view\ndef get_style_option_for_cell(self, logical_index: int) -&gt; widgets.QStyleOptionHeader:\nopt = widgets.QStyleOptionHeader()\nself.initStyleOption(opt)\nif self.isSortIndicatorShown() and self.sortIndicatorSection() == logical_index:\nasc = self.sortIndicatorOrder() == constants.ASCENDING\nopt.sortIndicator = SortIndicator.SortDown if asc else SortIndicator.SortUp\nif self.window().isActiveWindow():\nopt.state = opt.state | StateFlag.State_Active\nopt.textAlignment = constants.AlignmentFlag.AlignCenter\nopt.iconAlignment = constants.AlignmentFlag.AlignVCenter\nopt.section = logical_index\nvisual = self.visualIndex(logical_index)\nif self.count() == 1:\nopt.position = SectionPosition.OnlyOneSection\nelif visual == 0:\nopt.position = SectionPosition.Beginning\nelse:\nis_end = visual == self.count() - 1\nopt.position = SectionPosition.End if is_end else SectionPosition.Middle\nsel_model = self.selectionModel()\nif not sel_model:\nreturn opt\nroot_idx = self.rootIndex()\nif self.sectionsClickable() and self.highlightSections():\nif self.orientation() == constants.HORIZONTAL:\nif sel_model.columnIntersectsSelection(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_On\nif sel_model.isColumnSelected(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_Sunken\nelse:\nif sel_model.rowIntersectsSelection(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_On\nif sel_model.isRowSelected(logical_index, root_idx):\nopt.state = opt.state | StateFlag.State_Sunken\nprev_idx = self.logicalIndex(visual - 1)\nnext_idx = self.logicalIndex(visual + 1)\nif self.orientation() == constants.HORIZONTAL:\nprev_selected = sel_model.isColumnSelected(prev_idx, root_idx)\nnext_selected = sel_model.isColumnSelected(next_idx, root_idx)\nelse:\nprev_selected = sel_model.isRowSelected(prev_idx, root_idx)\nnext_selected = sel_model.isRowSelected(next_idx, root_idx)\nif prev_selected and next_selected:\nopt.selectedPosition = SelectedPosition.NextAndPreviousAreSelected\nelif prev_selected:\nopt.selectedPosition = SelectedPosition.PreviousIsSelected\nelif next_selected:\nopt.selectedPosition = SelectedPosition.NextIsSelected\nelse:\nopt.selectedPosition = SelectedPosition.NotAdjacent\nreturn opt\ndef sectionSizeFromContents(self, logical_index: int) -&gt; core.QSize:\nif not self.header_model:\nreturn super().sectionSizeFromContents(logical_index)\ncur_leaf_index = self.leaf_index(logical_index)\nif not cur_leaf_index.isValid():\nreturn super().sectionSizeFromContents(logical_index)\nstyleOption = widgets.QStyleOptionHeader(\nself.get_style_option_for_cell(logical_index)\n)\ns = self.get_cell_size(cur_leaf_index, self, styleOption)\ncur_leaf_index = cur_leaf_index.parent()\nwhile cur_leaf_index.isValid():\ncell_size = self.get_cell_size(cur_leaf_index, self, styleOption)\nif self.orientation() == constants.HORIZONTAL:\ns.setHeight(s.height() + cell_size.height())\nelse:\ns.setWidth(s.width() + cell_size.width())\ncur_leaf_index = cur_leaf_index.parent()\nreturn s\ndef paintSection(self, painter: gui.QPainter, rect: core.QRect, logical_index: int):\nif not rect.isValid():\nsuper().paintSection(painter, rect, logical_index)\nreturn\nleaf_index = self.leaf_index(logical_index)\nif not leaf_index.isValid():\nsuper().paintSection(painter, rect, logical_index)\nreturn\nstyle_option = self.get_style_option_for_cell(logical_index)\nif self.orientation() == constants.HORIZONTAL:\nself.paint_horizontal_section(\npainter,\nrect,\nlogical_index,\nself,\nstyle_option,\nleaf_index,\n)\nelse:\nself.paint_vertical_section(\npainter,\nrect,\nlogical_index,\nself,\nstyle_option,\nleaf_index,\n)\ndef on_section_resized(self, logical_index: int):\nif self.isSectionHidden(logical_index):\nreturn\nleaf_index = self.leaf_index(logical_index)\nif leaf_index.isValid():\nleafs_list = self.leafs(find_root_index(leaf_index))\nstart = leafs_list.index(leaf_index) if leaf_index in leafs_list else -1\nis_horizontal = self.orientation() == constants.HORIZONTAL\nfor _ in range(start, 0, -1):\nlogical_index -= 1\nw = self.viewport().width()\nh = self.viewport().height()\npos = self.sectionViewportPosition(logical_index)\nr = core.QRect(pos, 0, w - pos, h)\nif is_horizontal:\nif self.isRightToLeft():\nr.setRect(0, 0, pos + self.sectionSize(logical_index), h)\nelse:\nr.setRect(0, pos, w, h - pos)\nself.viewport().update(r.normalized())\ndef setModel(self, model: core.QAbstractItemModel):\nsuper().setModel(model)\nmodel.layoutChanged.connect(self._on_layout_change)\nself._on_layout_change()\ndef _on_layout_change(self):\nif model := self.model():\nself.init_from_new_model(self.orientation(), model)\nis_horizontal = self.orientation() == constants.HORIZONTAL\ncount = model.columnCount() if is_horizontal else model.rowCount()\nself.initializeSections(0, count - 1)\n</code></pre>"},{"location":"additional_modules/custom_widgets/HierarchicalHeaderView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261565008[\"custom_widgets.HierarchicalHeaderView\"]\n  2103261242560[\"widgets.HeaderView\"]\n  2103261240640[\"widgets.HeaderViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259838000[\"QtWidgets.QHeaderView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261242560 --&gt; 2103261565008\n  2103261240640 --&gt; 2103261242560\n  2103261136960 --&gt; 2103261240640\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259838000 --&gt; 2103261242560\n  2103259770800 --&gt; 2103259838000\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/HierarchicalHeaderView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>firstSectionMovable</code> bool <code>showSortIndicator</code> bool <code>highlightSections</code> bool <code>stretchLastSection</code> bool <code>cascadingSectionResizes</code> bool <code>defaultSectionSize</code> int <code>minimumSectionSize</code> int <code>maximumSectionSize</code> int <code>defaultAlignment</code> QFlags <code>sortIndicatorClearable</code> bool"},{"location":"additional_modules/custom_widgets/IconBrowser.html","title":"IconBrowser","text":"<p>Qt Base Class: QMainWindow</p> <p>Signature: <code>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/IconBrowser.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.MainWindow</code></p> <p>A small browser window that allows the user to search through all icons.</p> <p>You can also copy the name and python code for the currently selected icon.</p> Source code in <code>prettyqt\\custom_widgets\\iconbrowser.py</code> <pre><code>class IconBrowser(widgets.MainWindow):\n\"\"\"A small browser window that allows the user to search through all icons.\n    You can also copy the name and python code for the currently selected icon.\n    \"\"\"\ndef __init__(self):\nsuper().__init__()\nself.setMinimumSize(500, 500)\nself.set_title(\"Icon Browser\")\nfont_maps = {k: v.charmap for k, v in iconprovider._instance().fonts.items()}\nicon_names = [\nf\"{font_collection}.{icon_name}\"\nfor font_collection, font_data in font_maps.items()\nfor icon_name in font_data\n]\nmodel = IconModel(icon_color=\"text_role\")\nmodel.setStringList(sorted(icon_names))\nself._proxy_model = itemmodels.FuzzyFilterProxyModel()\nself._proxy_model.setSourceModel(model)\nself._proxy_model.set_filter_case_sensitive(True)\nself._proxy_model.set_match_color(None)\nself._listview = widgets.ListView(\nself,\nuniform_item_sizes=True,\nview_mode=\"icon\",\ncontext_menu_policy=\"custom\",\ndouble_clicked=self._copy_icon_text,\nvertical_scroll_bar_policy=\"always_on\",\n)\neventfilter = listviewgridresizeeventfilter.ListViewGridResizeEventFilter(\nparent=self._listview\n)\nself._listview.installEventFilter(eventfilter)\nself._listview.set_model(self._proxy_model)\nself._lineedit = widgets.LineEdit(\nparent=self, text_changed=self._trigger_instant_update\n)\nself._combobox = widgets.ComboBox(\nparent=self,\nminimum_width=75,\ncurrent_index_changed=self._trigger_instant_update,\n)\nself._combobox.addItems([ALL_COLLECTIONS, *sorted(font_maps.keys())])\nsearch_bar_frame = widgets.Frame(self)\nlayout = search_bar_frame.set_layout(\"horizontal\", margin=0)\nlayout.add(self._combobox)\nlayout.add(self._lineedit)\nself._copy_button = widgets.PushButton(\"Copy Name\", clicked=self._copy_icon_text)\nframe = widgets.Frame(self)\nlayout = frame.set_layout(\"vertical\")\nlayout.add(search_bar_frame)\nlayout.add(self._listview)\nlayout.add(self._copy_button)\nself.setCentralWidget(frame)\nself.add_shortcut(\"return\", callback=self._copy_icon_text)\nself._lineedit.setFocus()\nself.position_on(\"screen\")\ndef _trigger_instant_update(self):\n\"\"\"Stop timer used for committing search term and update proxy model instantly.\"\"\"\nself._proxy_model.set_search_term(self._lineedit.text())\ndef _copy_icon_text(self):\n\"\"\"Copy the name of the currently selected icon to the clipboard.\"\"\"\nif indexes := self._listview.selectedIndexes():\nwidgets.Application.copy_to_clipboard(indexes[0].data())\n</code></pre>"},{"location":"additional_modules/custom_widgets/IconBrowser.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261324048[\"custom_widgets.IconBrowser\"]\n  2103261245440[\"widgets.MainWindow\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259730480[\"QtWidgets.QMainWindow\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261245440 --&gt; 2103261324048\n  2103261127360 --&gt; 2103261245440\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259730480 --&gt; 2103261245440\n  2103259691120 --&gt; 2103259730480\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/IconBrowser.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>animated</code> bool <code>documentMode</code> bool <code>tabShape</code> QTabWidget::TabShape <code>dockNestingEnabled</code> bool <code>dockOptions</code> QFlags <code>unifiedTitleAndToolBarOnMac</code> bool"},{"location":"additional_modules/custom_widgets/IconEdit.html","title":"IconEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/IconEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\iconedit.py</code> <pre><code>class IconEdit(widgets.Widget):\nvalue_changed = core.Signal(gui.Icon)\ndef __init__(self, *args, object_name: str = \"icon_edit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; gui.Icon:\nreturn self._value\ndef set_value(self, value: gui.Icon):\nself._value = value\nvalue = core.Property(\ngui.Icon,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen icon\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/IconEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261553488[\"custom_widgets.IconEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261553488\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/IconEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QIcon Currently chosen icon"},{"location":"additional_modules/custom_widgets/IconLabel.html","title":"IconLabel","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/IconLabel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\labels\\iconlabel.py</code> <pre><code>class IconLabel(widgets.Widget):\ndef __init__(\nself,\ntext: str | None = None,\ntooltip: str = \"\",\nicon: datatypes.IconType = \"mdi.help-circle-outline\",\nparent: widgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nself.set_layout(\"horizontal\", spacing=0)\nself.label = widgets.Label(text, margin=10)\nself.label.set_size_policy(horizontal=\"minimum\")\nicon = iconprovider.get_icon(icon)\nself.icon = widgets.Label(tool_tip=tooltip, pixmap=icon.pixmap(20, 20))\nself.icon.set_size_policy(horizontal=\"minimum\")\nself.box.add(self.label)\nself.box.add(self.icon)\nself.box.addStretch()\ndef __getattr__(self, value: str):\nreturn self.label.__getattribute__(value)\ndef __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"additional_modules/custom_widgets/IconLabel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261493008[\"custom_widgets.IconLabel\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261493008\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/IconLabel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/IconWidget.html","title":"IconWidget","text":"<p>Qt Base Class: QLabel</p> <p>Signature: <code>QLabel(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QLabel(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/IconWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Label</code></p> Source code in <code>prettyqt\\custom_widgets\\labels\\iconwidget.py</code> <pre><code>class IconWidget(widgets.Label):\ndef __init__(self, *names, parent: widgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent=parent)\nself._icon: gui.QIcon | None = None\nself._size = core.Size(16, 16)\nself.set_icon(iconprovider._icon(*names, **kwargs))\ndef set_icon(self, _icon: datatypes.IconType):\n\"\"\"Set a new icon().\n        Parameters\n        ----------\n        _icon: qtawesome.icon\n            icon to set\n        \"\"\"\nself._icon = iconprovider.get_icon(_icon)\nself.setPixmap(self._icon.pixmap(self._size))\ndef set_icon_size(self, size: datatypes.SizeType):\nself._size = datatypes.to_size(size)\nself.update()\ndef update(self, *args, **kwargs):\nif self._icon:\nself.setPixmap(self._icon.pixmap(self._size))\nreturn super().update(*args, **kwargs)\n</code></pre>"},{"location":"additional_modules/custom_widgets/IconWidget.html#prettyqt.custom_widgets.labels.iconwidget.IconWidget.set_icon","title":"<code>set_icon(_icon: datatypes.IconType)</code>","text":"<p>Set a new icon().</p>"},{"location":"additional_modules/custom_widgets/IconWidget.html#prettyqt.custom_widgets.labels.iconwidget.IconWidget.set_icon--parameters","title":"Parameters","text":"qtawesome.icon <p>icon to set</p> Source code in <code>prettyqt\\custom_widgets\\labels\\iconwidget.py</code> <pre><code>def set_icon(self, _icon: datatypes.IconType):\n\"\"\"Set a new icon().\n    Parameters\n    ----------\n    _icon: qtawesome.icon\n        icon to set\n    \"\"\"\nself._icon = iconprovider.get_icon(_icon)\nself.setPixmap(self._icon.pixmap(self._size))\n</code></pre>"},{"location":"additional_modules/custom_widgets/IconWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261510288[\"custom_widgets.IconWidget\"]\n  2103261249280[\"widgets.Label\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259742960[\"QtWidgets.QLabel\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261249280 --&gt; 2103261510288\n  2103261110080 --&gt; 2103261249280\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259742960 --&gt; 2103261249280\n  2103259737200 --&gt; 2103259742960\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/IconWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>text</code> QString <code>textFormat</code> Qt::TextFormat <code>pixmap</code> QPixmap <code>scaledContents</code> bool <code>alignment</code> QFlags <code>wordWrap</code> bool <code>margin</code> int <code>indent</code> int <code>openExternalLinks</code> bool <code>textInteractionFlags</code> QFlags <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>elideMode</code> QString Text Elide style"},{"location":"additional_modules/custom_widgets/ImageViewer.html","title":"ImageViewer","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ImageViewer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\imageviewer.py</code> <pre><code>class ImageViewer(widgets.Widget):\ndef __init__(\nself,\nimage: gui.QPixmap | os.PathLike | None = None,\n*,\nshow_border: bool = True,\nshow_size: bool = False,\nborder_width: int = 1,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._border_width = border_width\nself._pixmap = gui.Pixmap()\nself.set_image(image)\nself.setMinimumSize(core.Size(150, 200))\nself.draw_border = show_border\nself.show_size = show_size\ndef set_image(self, pixmap: gui.QPixmap | os.PathLike | None):\nmatch pixmap:\ncase gui.QPixmap():\nself._pixmap = pixmap\ncase os.PathLike():\nself._pixmap = gui.Pixmap.from_file(pixmap)\ncase None:\nself._pixmap = gui.Pixmap()\nself.updateGeometry()\nself.update()\ndef toggle_show_size(self):\nself.show_size ^= True\nself.update()\ndef pixmap(self):\nreturn self._pixmap\ndef sizeHint(self) -&gt; core.QSize:\nreturn self.minimumSize() if self._pixmap.isNull() else self._pixmap.size()\ndef paintEvent(self, event):\nsuper().paintEvent(event)\npmap = self._pixmap\nw, h = pmap.width(), pmap.height()\now, oh = w, h\ncw, ch = self.rect().width(), self.rect().height()\nscaled, nw, nh = fit_image(w, h, cw, ch)\nif scaled:\npmap = pmap.scaled(\nint(nw * pmap.devicePixelRatio()),\nint(nh * pmap.devicePixelRatio()),\nconstants.AspectRatioMode.IgnoreAspectRatio,\nconstants.TransformationMode.SmoothTransformation,\n)\nw = pmap.width() // pmap.devicePixelRatio()\nh = pmap.height() // pmap.devicePixelRatio()\nx = abs(cw - w) // 2\ny = abs(ch - h) // 2\ntarget = core.Rect(int(x), int(y), int(w), int(h))\nwith gui.Painter(self) as p:\np.setRenderHints(\ngui.Painter.RenderHint.Antialiasing\n| gui.Painter.RenderHint.SmoothPixmapTransform\n)\np.drawPixmap(target, pmap)\nif self.draw_border:\npen = gui.Pen()\npen.setWidth(self._border_width)\np.setPen(pen)\np.drawRect(target)\nif self.show_size:\ndraw_size(p, target, ow, oh)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ImageViewer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261512208[\"custom_widgets.ImageViewer\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261512208\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ImageViewer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/InputAndSlider.html","title":"InputAndSlider","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/InputAndSlider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\inputandslider.py</code> <pre><code>class InputAndSlider(widgets.Widget):\nvalue_changed = core.Signal(int)\ndef __init__(\nself,\nbounds: tuple[int, int] | None = None,\nobject_name: str = \"input_and_slider\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nself.path = None\nself.spinbox = widgets.SpinBox()\nself.slider = widgets.Slider()\nlayout = self.set_layout(\"horizontal\", margin=0)\nlayout.add(self.spinbox)\nlayout.add(self.slider)\nif bounds:\nself.set_range(*bounds)\nself.spinbox.valueChanged.connect(self.slider.set_value)\nself.slider.valueChanged.connect(self.spinbox.set_value)\nself.spinbox.valueChanged.connect(self.value_changed)\ndef __getattr__(self, val):\nreturn getattr(self.spinbox, val)\ndef serialize_fields(self):\nreturn dict(path=self.path)\n# def __setstate__(self, state):\n#     self.__init__(state[\"extensions\"])\n#     self.set_path(state[\"path\"])\n#     self.set_enabled(state.get(\"enabled\", True))\ndef set_range(self, min_val: int, max_val: int):\nself.spinbox.set_range(min_val, max_val)\nself.slider.set_range(min_val, max_val)\ndef get_value(self) -&gt; int:\nreturn self.spinbox.get_value()\ndef set_value(self, value: int):\nself.spinbox.set_value(value)\nself.slider.set_value(value)\ndef is_valid(self) -&gt; bool:\nreturn self.spinbox.is_valid()\ndef set_step_size(self, step_size: int):\nself.spinbox.set_step_size(step_size)\nself.slider.set_step_size(step_size)\nself.slider.setTickInterval(step_size)\n</code></pre>"},{"location":"additional_modules/custom_widgets/InputAndSlider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261336528[\"custom_widgets.InputAndSlider\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261336528\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/InputAndSlider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/IntLineEdit.html","title":"IntLineEdit","text":"<p>Qt Base Class: QLineEdit</p> <p>Signature: <code>QLineEdit(self, arg__1: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLineEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/IntLineEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LineEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\lineedits.py</code> <pre><code>class IntLineEdit(widgets.LineEdit):\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, object_name: str = \"int_lineedit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_validator(\"integer\", bottom=0, top=1000000000)\ndef get_value(self) -&gt; int:\nval = super().get_value()\nreturn int(val) if val and val.isnumeric() else 0\ndef set_value(self, value: int | str):\nsuper().set_value(str(value))\nvalue = core.Property(\nint,\nget_value,\nset_value,\ndoc=\"Current Value as integer\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/IntLineEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261565968[\"custom_widgets.IntLineEdit\"]\n  2103261134080[\"widgets.LineEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259700720[\"QtWidgets.QLineEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261134080 --&gt; 2103261565968\n  2103261127360 --&gt; 2103261134080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259700720 --&gt; 2103261134080\n  2103259691120 --&gt; 2103259700720\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/IntLineEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>inputMask</code> QString <code>text</code> QString <code>maxLength</code> int <code>frame</code> bool <code>echoMode</code> QLineEdit::EchoMode <code>displayText</code> QString <code>cursorPosition</code> int <code>alignment</code> QFlags <code>modified</code> bool <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>dragEnabled</code> bool <code>readOnly</code> bool <code>undoAvailable</code> bool <code>redoAvailable</code> bool <code>acceptableInput</code> bool <code>placeholderText</code> QString <code>cursorMoveStyle</code> Qt::CursorMoveStyle <code>clearButtonEnabled</code> bool <code>value</code> int Current Value as integer"},{"location":"additional_modules/custom_widgets/KeyCombinationEdit.html","title":"KeyCombinationEdit","text":"<p>Qt Base Class: QKeySequenceEdit</p> <p>Signature: <code>QKeySequenceEdit(self, keySequence: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QKeySequenceEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/KeyCombinationEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QKeySequenceEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\keycombinationedit.py</code> <pre><code>class KeyCombinationEdit(widgets.WidgetMixin, widgets.QKeySequenceEdit):\nvalue_changed = core.Signal(core.QKeyCombination)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setMaximumSequenceLength(1)\ndef __repr__(self):\nreturn get_repr(self, self.get_value())\ndef _on_value_change(self, val):\nself.value_changed.emit(val[0])\ndef set_value(self, value: datatypes.KeyCombinationType):\nif not isinstance(value, gui.QKeySequence):\nvalue = gui.KeySequence(value)\nif len(value) == 0:\nself.clear()\nelse:\nself.setKeySequence(gui.KeySequence(value[0]))\ndef get_value(self) -&gt; str:\nseq = self.keySequence()\nreturn seq[0].toString() if seq.count() &gt; 0 else \"\"\ndef is_valid(self) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"additional_modules/custom_widgets/KeyCombinationEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261557328[\"custom_widgets.KeyCombinationEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259736240[\"QtWidgets.QKeySequenceEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261557328\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259736240 --&gt; 2103261557328\n  2103259691120 --&gt; 2103259736240\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/KeyCombinationEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>keySequence</code> QKeySequence <code>clearButtonEnabled</code> bool <code>maximumSequenceLength</code> qlonglong <code>finishingKeyCombinations</code> QList"},{"location":"additional_modules/custom_widgets/LabeledSlider.html","title":"LabeledSlider","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/LabeledSlider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\labeledslider.py</code> <pre><code>class LabeledSlider(widgets.Widget):\nvalue_changed = core.Signal(str)\ndef __init__(\nself,\nlabels: Sequence[str],\norientation: constants.OrientationStr | constants.Orientation = \"horizontal\",\nparent: widgets.QWidget | None = None,\n):\nsuper().__init__(parent=parent)\nif not isinstance(labels, Sequence):\nraise ValueError(\"&lt;labels&gt; must be a sequence.\")\nself.levels = labels\norientation = constants.ORIENTATION.get_enum_value(orientation)\nself.set_layout(constants.ORIENTATION.inverse[orientation], margin=10)\n# gives some space to print labels\nself.left_margin = 10\nself.top_margin = 10\nself.right_margin = 10\nself.bottom_margin = 10\nself.sl = widgets.Slider(\norientation,\ntick_interval=1,\nsingle_step=1,\nminimum=0,\nmaximum=len(self.levels) - 1,\nvalue=0,\n)\nself.sl.value_changed.connect(self._on_value_change)\nif orientation == constants.HORIZONTAL:\nself.sl.set_tick_position(\"below\")\nself.sl.setMinimumWidth(300)\nelse:\nself.sl.set_tick_position(\"left\")\nself.sl.setMinimumHeight(300)\nself.box.add(self.sl)\ndef _on_value_change(self, value: int):\nself.value_changed.emit(self.levels[value])\ndef paintEvent(self, e):\nsuper().paintEvent(e)\nstyle = self.sl.style()\nst_slider = widgets.StyleOptionSlider()\nst_slider.initFrom(self.sl)\nst_slider.orientation = self.sl.orientation()\nlength = style.pixelMetric(\nwidgets.Style.PixelMetric.PM_SliderLength, st_slider, self.sl\n)\navailable = style.pixelMetric(\nwidgets.Style.PixelMetric.PM_SliderSpaceAvailable, st_slider, self.sl\n)\nwith gui.Painter(self) as painter:\nfor v, v_str in enumerate(self.levels):\n# get the size of the label\nrect = painter.get_text_rect(v_str)\nif self.sl.is_horizontal():\nx_loc = widgets.Style.sliderPositionFromValue(\nself.sl.minimum(), self.sl.maximum(), v, available\n)\n# I assume the offset is half the length of slider, therefore\n# + length//2\nx_loc += length // 2\n# left bound of the text = center - half of text width + L_margin\nleft = x_loc - rect.width() // 2 + self.left_margin\nbottom = self.rect().bottom()\n# enlarge margins if clipping\nif v == self.sl.minimum():\nif left &lt;= 0:\nself.left_margin = rect.width() // 2 - x_loc\nself.bottom_margin = max(self.bottom_margin, rect.height())\nself.adjust_margins()\nif v == self.sl.maximum() and rect.width() // 2 &gt;= self.right_margin:\nself.right_margin = rect.width() // 2\nself.adjust_margins()\nelse:\ny_loc = widgets.Style.sliderPositionFromValue(\nself.sl.minimum(),\nself.sl.maximum(),\nv,\navailable,\nupsideDown=True,\n)\nbottom = (\ny_loc + length // 2 + rect.height() // 2 + self.top_margin - 3\n)\n# there is a 3 px offset that I can't attribute to any metric\nleft = self.left_margin - rect.width()\nif left &lt;= 0:\nself.left_margin = rect.width() + 2\nself.adjust_margins()\npainter.drawText(left, bottom, v_str)\n@classmethod\ndef setup_example(cls):\nreturn cls(labels=[\"a\", \"b\", \"c\"])\ndef adjust_margins(self):\nself.box.setContentsMargins(\nself.left_margin,\nself.top_margin,\nself.right_margin,\nself.bottom_margin,\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/LabeledSlider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261348048[\"custom_widgets.LabeledSlider\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261348048\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/LabeledSlider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/ListInput.html","title":"ListInput","text":"<p>Qt Base Class: QLineEdit</p> <p>Signature: <code>QLineEdit(self, arg__1: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLineEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ListInput.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LineEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\listinput.py</code> <pre><code>class ListInput(widgets.LineEdit):\nvalue_changed = core.Signal(list)\ndef __init__(\nself,\nvalue: list[float] | str = \"\",\ntyp: type = int,\nallow_single: bool = False,\nobject_name: str = \"list_input\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nmatch typ:\ncase builtins.int:\nself.set_validator(\"int_list\", allow_single=allow_single)\ncase builtins.float:\nself.set_validator(\"float_list\", allow_single=allow_single)\ncase _:\nraise ValueError(f\"Invalid type {typ}\")\nself.set_value(value)\ndef get_value(self) -&gt; list[float | int]:  # type: ignore[override]\n# TODO: is this best place to deal with exception?\ntry:\nreturn helpers.string_to_num_array(self.text())\nexcept ValueError:\nreturn []\ndef set_value(self, value: list[float] | str):\nif isinstance(value, list):\nvalue = str(value)[1:-1].replace(\" \", \"\")\nself.set_text(value)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ListInput.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261515088[\"custom_widgets.ListInput\"]\n  2103261134080[\"widgets.LineEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259700720[\"QtWidgets.QLineEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261134080 --&gt; 2103261515088\n  2103261127360 --&gt; 2103261134080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259700720 --&gt; 2103261134080\n  2103259691120 --&gt; 2103259700720\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ListInput.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>inputMask</code> QString <code>text</code> QString <code>maxLength</code> int <code>frame</code> bool <code>echoMode</code> QLineEdit::EchoMode <code>displayText</code> QString <code>cursorPosition</code> int <code>alignment</code> QFlags <code>modified</code> bool <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>dragEnabled</code> bool <code>readOnly</code> bool <code>undoAvailable</code> bool <code>redoAvailable</code> bool <code>acceptableInput</code> bool <code>placeholderText</code> QString <code>cursorMoveStyle</code> Qt::CursorMoveStyle <code>clearButtonEnabled</code> bool"},{"location":"additional_modules/custom_widgets/LocaleEdit.html","title":"LocaleEdit","text":"<p>Qt Base Class: QComboBox</p> <p>Signature: <code>QComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/LocaleEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ComboBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\localeedit.py</code> <pre><code>class LocaleEdit(widgets.ComboBox):\nvalue_changed = core.Signal(core.Locale)\ndef __init__(\nself,\nlocale: core.QLocale | None = None,\nobject_name: str = \"locale_edit\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nself._current_locale = core.Locale()\nfor i in core.Locale.get_all_locales():\nself.addItem(i.bcp47Name())\nif locale is not None:\nself.set_current_locale(locale)\nself.currentTextChanged.connect(self.set_current_locale)\ndef __repr__(self):\nreturn get_repr(self, self._current_locale)\ndef clear(self):\nself._current_locale = core.Locale()\nsuper().clear()\nfor i in core.Locale.get_all_locales():\nself.addItem(i.bcp47Name())\n# def _on_value_change(self):\n#     self._value = self.get_value()\n#     self.value_changed.emit(self._value)\ndef set_current_locale(self, locale: core.QLocale | str):\nself._current_locale = core.Locale(locale)\nself.set_current_text(self._current_locale.bcp47Name())\ndef is_valid(self) -&gt; bool:\nreturn self._current_locale.isValid()\ndef get_value(self) -&gt; core.QLocale:\nreturn self._current_locale\ndef set_value(self, value: core.QLocale | str):\nself.set_current_locale(value)\nvalue = core.Property(\ncore.QLocale,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen locale\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/LocaleEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261559248[\"custom_widgets.LocaleEdit\"]\n  2103261223360[\"widgets.ComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261223360 --&gt; 2103261559248\n  2103261255040 --&gt; 2103261223360\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259869680 --&gt; 2103261223360\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/LocaleEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int <code>value</code> QLocale Currently chosen locale"},{"location":"additional_modules/custom_widgets/LogRecordTableView.html","title":"LogRecordTableView","text":"<p>Qt Base Class: QTableView</p> <p>Signature: <code>QTableView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/LogRecordTableView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TableView</code></p> <p>Table view showing a log table.</p> Source code in <code>prettyqt\\custom_widgets\\logrecordtableview.py</code> <pre><code>class LogRecordTableView(widgets.TableView):\n\"\"\"Table view showing a log table.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_selection_behavior(\"rows\")\nself.handler = signallogger.SignalLogger()\ncore.CoreApplication.call_on_exit(lambda: logger.removeHandler(self.handler))\nself.setWordWrap(True)\ndef set_logger(self, logger, level=logging.DEBUG):\nmodel = itemmodels.LogRecordModel(parent=self)\nlogger.addHandler(self.handler)\nself.handler.signals.log_record.connect(model.add)\nself.handler.setLevel(level)\nself.set_model(model)\nself.proxifier[0].modify(color_log, role=constants.BACKGROUND_ROLE)\nself.h_header = custom_widgets.FilterHeader(self)\n</code></pre>"},{"location":"additional_modules/custom_widgets/LogRecordTableView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261538128[\"custom_widgets.LogRecordTableView\"]\n  2103261406608[\"widgets.TableView\"]\n  2103261411408[\"widgets.TableViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259816880[\"QtWidgets.QTableView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261406608 --&gt; 2103261538128\n  2103261411408 --&gt; 2103261406608\n  2103261136960 --&gt; 2103261411408\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259816880 --&gt; 2103261406608\n  2103259770800 --&gt; 2103259816880\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/LogRecordTableView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>showGrid</code> bool <code>gridStyle</code> Qt::PenStyle <code>sortingEnabled</code> bool <code>wordWrap</code> bool <code>cornerButtonEnabled</code> bool"},{"location":"additional_modules/custom_widgets/LogTextEdit.html","title":"LogTextEdit","text":"<p>Qt Base Class: QPlainTextEdit</p> <p>Signature: <code>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/LogTextEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.PlainTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\logtextedit.py</code> <pre><code>class LogTextEdit(widgets.PlainTextEdit):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.rules = []\nself.allow_wheel_zoom()\nself.set_font(gui.Font.mono(as_qt=True))\nself.append_text(f\"Python version: {sys.version}\")\nnew_logger = logging.getLogger()\n# self.handler = signallogger.LineSignalLogger()\n# self.handler.log_line.connect(self.append_text)\nself.handler = signallogger.SignalLogger()\nself.handler.signals.log_record.connect(self.append_record)\ncore.CoreApplication.call_on_exit(lambda: new_logger.removeHandler(self.handler))\nself.handler.setLevel(logging.INFO)\nnew_logger.addHandler(self.handler)\nfmt = logging.Formatter(\"%(asctime)s  %(levelname)s  %(message)s\")\nself.set_formatter(fmt)\ndef set_formatter(self, formatter: logging.Formatter):\nself.formatter = formatter\nrules = [klass(self.formatter) for klass in Highlighter.__subclasses__()]\nself.rules = [r for r in rules if r.is_included]\nself.handler.setFormatter(formatter)\ndef append_record(self, record: logging.LogRecord):\nstart_of_line = len(self.text())\nif self.formatter._fmt is None:\nraise TypeError(\"Formatter does not contain format string\")\nself.append_text(self.formatter._fmt)\nold_fmt = self.textCursor().charFormat()\nwith self.selecter.create_cursor() as c:\nc.move_position(\"end\")\nc.move_position(\"start_of_block\")\nstart_pos = c.position()\nfor r in self.rules:\nline_text = c.select_text(start_pos, \"end_of_block\")\nmatches = list(r.pattern.finditer(line_text))\nfor m in reversed(matches):\npos = m.start(0) + start_of_line\nif start_of_line != 0:\npos += 1\nend = pos + m.end(0) - m.start(0)\nfmt_string = r.format_string(record)\ntry:\nvalue = f\"%{m.group(1)}\" % fmt_string\nexcept (TypeError, ValueError):\nvalue = fmt_string\nc.replace_text(pos, end, value)\nfmt = r.get_format(fmt_string)\nc.setCharFormat(fmt)\nc.clearSelection()\nc.setCharFormat(old_fmt)\n</code></pre>"},{"location":"additional_modules/custom_widgets/LogTextEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261327888[\"custom_widgets.LogTextEdit\"]\n  2103261367248[\"widgets.PlainTextEdit\"]\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259771760[\"QtWidgets.QPlainTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261367248 --&gt; 2103261327888\n  2103261397968 --&gt; 2103261367248\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259771760 --&gt; 2103261367248\n  2103259751600 --&gt; 2103259771760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/LogTextEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QPlainTextEdit::LineWrapMode <code>readOnly</code> bool <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>blockCount</code> int <code>maximumBlockCount</code> int <code>backgroundVisible</code> bool <code>centerOnScroll</code> bool <code>placeholderText</code> QString <code>current_line_color</code> QColor Color to use for current line highlighting <code>validation_color</code> QColor Color to use for invalid text"},{"location":"additional_modules/custom_widgets/MappedCheckBox.html","title":"MappedCheckBox","text":"<p>Qt Base Class: QCheckBox</p> <p>Signature: <code>QCheckBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QCheckBox(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/MappedCheckBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.CheckBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\mappedcheckbox.py</code> <pre><code>class MappedCheckBox(widgets.CheckBox):\ndef __init__(\nself,\n*args,\ntrue_value=True,\nfalse_value=False,\nobject_name: str = \"mapped_checkbox\",\n**kwargs,\n):\nsuper().__init__(*args, object_name=object_name, **kwargs)\ndct = {True: true_value, False: false_value}\nself.map = bidict(dct)\ndef get_value(self):\nreturn self.map[self.isChecked()]\ndef set_value(self, value):\nval = self.map.inverse[value]\nsuper().set_value(val)\n</code></pre>"},{"location":"additional_modules/custom_widgets/MappedCheckBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261319248[\"custom_widgets.MappedCheckBox\"]\n  2103261256960[\"widgets.CheckBox\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259903056[\"QtWidgets.QCheckBox\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261256960 --&gt; 2103261319248\n  2103261100480 --&gt; 2103261256960\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259903056 --&gt; 2103261256960\n  2103259928016 --&gt; 2103259903056\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/MappedCheckBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>tristate</code> bool"},{"location":"additional_modules/custom_widgets/MultiComboBox.html","title":"MultiComboBox","text":"<p>Qt Base Class: QComboBox</p> <p>Signature: <code>QComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/MultiComboBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ComboBox</code></p> <p>ComboBox allowing multiple-choice selection.</p> Source code in <code>prettyqt\\custom_widgets\\multicombobox.py</code> <pre><code>class MultiComboBox(widgets.ComboBox):\n\"\"\"ComboBox allowing multiple-choice selection.\"\"\"\nselectionChanged = core.Signal(list)\ndef __init__(self, parent: widgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent=parent, **kwargs)\nself.setEditable(True)\nself.lineEdit().setReadOnly(True)\nself.setItemDelegate(SizeHintDelegate())\n# Hide and show popup when clicking the line edit\nself.lineEdit().installEventFilter(self)\nself._close_on_lineedit_click = False\n# Prevent popup from closing when clicking on an item\nself.view().viewport().installEventFilter(self)\nself.addItem(\"Show/Hide All\", isChecked=True)\nself.model().itemChanged.connect(self._update_selection)\nself.model().dataChanged.connect(self._update_text)\nself.model().dataChanged.connect(self._emit_current_data)\ndef _emit_current_data(self):\nself.selectionChanged.emit(self.currentData())\ndef _update_selection(self, item: gui.QStandardItem):\nif item.index().row() == 0:\nstate = item.checkState()\nwith self.model().change_layout():\nfor item in self.get_model_items():\nitem.setCheckState(state)\ndef resizeEvent(self, event):\n# Recompute text to elide as needed\nself._update_text()\nsuper().resizeEvent(event)\ndef eventFilter(self, source, event):\nif source == self.lineEdit():\nif event.type() == core.QEvent.Type.MouseButtonRelease:\nif self._close_on_lineedit_click:\nself.hidePopup()\nelse:\nself.showPopup()\nreturn True\nreturn False\nif (\nsource == self.view().viewport()\nand event.type() == core.QEvent.Type.MouseButtonRelease\n):\nindex = self.view().indexAt(event.pos())\nitem = self.model().itemFromIndex(index)\nitem.toggle_checkstate()\nreturn True\nreturn False\ndef showPopup(self):\nsuper().showPopup()\n# When the popup is displayed, a click on the lineedit should close it\nself._close_on_lineedit_click = True\ndef hidePopup(self):\nsuper().hidePopup()\n# Used to prevent immediate reopening when clicking on the lineEdit\nself.startTimer(100)\n# Refresh the display text when closing\nself._update_text()\ndef timerEvent(self, event):\n# After timeout, kill timer, and re-enable click on line edit\nself.killTimer(event.timerId())\nself._close_on_lineedit_click = False\ndef _update_text(self):\ntexts = [item.text() for item in self.get_model_items() if item.is_checked()]\ntext = \", \".join(texts)\n# Compute elided text (with \"...\")\nmetrics = gui.FontMetrics(self.lineEdit().font())\ntext = metrics.elided_text(text, \"right\", self.lineEdit().width())\nself.lineEdit().setText(text)\ndef addItem(self, text: str, data: Any = None, checked: bool = False, **kwargs):\nitem = gui.StandardItem()\nitem.setText(text)\nitem.setData(text if data is None else data, constants.USER_ROLE)\nitem.setFlags(constants.IS_ENABLED | constants.IS_CHECKABLE)\nitem.set_checkstate(checked)\nself.model().appendRow(item)\ndef addItems(\nself,\nitems: list[str | tuple[str, Any]],\nall_checked: bool = False,\n):\nfor item in items:\ndata = item[1] if isinstance(item, tuple) else item\nself.addItem(item, data, all_checked=all_checked)\ndef currentData(\nself, role: constants.ItemDataRole = constants.USER_ROLE\n) -&gt; list[Any]:\nreturn [item.data(role) for item in self.get_model_items() if item.is_checked()]\ndef get_current_options(self) -&gt; list[tuple[str, Any]]:\nreturn [\n(item.text(), item.data(constants.USER_ROLE))\nfor item in self.get_model_items()\nif item.is_checked()\n]\ndef get_model_items(self) -&gt; Generator[gui.QStandardItem, None, None]:\nfor i in range(1, self.model().rowCount()):\nyield self.model().item(i)\ndef set_value(self, items: list[Any]):\nfor item in self.get_model_items():\nif item.data(constants.USER_ROLE) in items:\nitem.setChecked(True)\ndef get_value(self) -&gt; list[Any]:\nreturn self.currentData()\n</code></pre>"},{"location":"additional_modules/custom_widgets/MultiComboBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261303888[\"custom_widgets.MultiComboBox\"]\n  2103261223360[\"widgets.ComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261223360 --&gt; 2103261303888\n  2103261255040 --&gt; 2103261223360\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259869680 --&gt; 2103261223360\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/MultiComboBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int"},{"location":"additional_modules/custom_widgets/MultiLineLayout.html","title":"MultiLineLayout","text":"<p>Qt Base Class: QBoxLayout</p> <p>Signature: <code>QBoxLayout(self, arg__1: PySide6.QtWidgets.QBoxLayout.Direction, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/MultiLineLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.BoxLayout</code></p> <p>Nested Boxlayout.</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\multilinelayout.py</code> <pre><code>class MultiLineLayout(widgets.BoxLayout):\n\"\"\"Nested Boxlayout.\"\"\"\ndef __init__(self, vertical: bool = True, row_number: int = 3, **kwargs):\nself.row_nb = row_number\nself.layouts = []\nself._sub_layout_type = \"box\"\ndirection = self.Direction.TopToBottom if vertical else self.Direction.LeftToRight\nsuper().__init__(direction, **kwargs)\ndef set_direction(\nself, direction: widgets.BoxLayout.Direction | widgets.boxlayout.DirectionStr\n):\nsuper().set_direction(direction)\ndirection = self.get_sub_direction()\nfor layout in self.layouts:\nif isinstance(layout, widgets.QBoxLayout | MultiLineLayout):\nlayout.set_direction(direction)\ndef get_sub_direction(self) -&gt; widgets.BoxLayout.Direction:\nreturn (\nself.Direction.LeftToRight\nif self.get_direction() == \"top_to_bottom\"\nelse self.Direction.TopToBottom\n)\ndef _add_sub_layout(self):\nmatch self._sub_layout_type:\ncase \"box\":\ndirection = self.get_sub_direction()\nlayout = widgets.BoxLayout(direction)\ncase \"grid\":\nlayout = widget.GridLayout()\ncase \"flow\":\nlayout = custom_widgets.FlowLayout()\ncase \"stacked\":\nlayout = widgets.StackedLayout()\ncase \"nested\":\ndirection = self.get_sub_direction()\nlayout = MultiLineLayout(direction)\nsuper().addLayout(layout)\nself.layouts.append(layout)\ndef addWidget(self, widget: widgets.QWidget, **kwargs):\nif not self.layouts or self.layouts[-1].count() == self.row_nb:\nself._add_sub_layout()\nself.layouts[-1].add(widget, **kwargs)\ndef addLayout(self, layout: widgets.QLayout):\nif not self.layouts or self.layouts[-1].count() == self.row_nb:\nself._add_sub_layout()\nself.layouts[-1].add(layout)\ndef addItem(self, item):\nif not self.layouts or self.layouts[-1].count() == self.row_nb:\nself._add_sub_layout()\nself.layouts[-1].add(item)\ndef get_items(self) -&gt; listdelegators.ListDelegator[widgets.QLayoutItem]:\nitems = [i.get_items() for i in self.layouts]\nreturn listdelegators.ListDelegator(itertools.chain(*items))\ndef itemAt(self, idx: int) -&gt; widgets.QLayoutItem | None:\nif len(self.layouts) == 0 or len(self.get_items()) == 0:\nraise IndexError(idx)\n# doesnt seem right?\nreturn None if idx == len(self.get_items()) else self.get_items()[idx]\ndef takeAt(self, idx: int) -&gt; widgets.QLayoutItem | None:  # or 0 according to docs?\nlayout_idx, item_idx = divmod(idx, len(self.layouts))\nlayout = self.layouts[layout_idx]\nitem = layout.takeAt(item_idx)\nfor i, layout in enumerate(self.layouts[layout_idx:-1], start=layout_idx):\nitem = self.layouts[i + 1].takeAt(0)\nlayout.addItem(item)\nif len(self.layouts[-1]) == 0:\nsuper().takeAt(super().count() - 1)\nreturn item\ndef count(self) -&gt; int:\nreturn len(self.get_items())\ndef indexOf(self, item: widgets.QLayoutItem) -&gt; int:\nreturn self.get_items().index(item)\ndef set_sub_layout_type(self, layout_type: str):\nself._sub_layout_type = layout_type\ndef get_sub_layout_type(self) -&gt; str:\nreturn self._sub_layout_type\nsub_layout_type = core.Property(\nstr,\nget_sub_layout_type,\nset_sub_layout_type,\ndoc=\"Layout for the sub layouts\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/MultiLineLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261501648[\"custom_widgets.MultiLineLayout\"]\n  2103261452688[\"widgets.BoxLayout\"]\n  2103261430608[\"widgets.BoxLayoutMixin\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260142096[\"QtWidgets.QBoxLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261452688 --&gt; 2103261501648\n  2103261430608 --&gt; 2103261452688\n  2103261439248 --&gt; 2103261430608\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260142096 --&gt; 2103261452688\n  2103260125776 --&gt; 2103260142096\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"additional_modules/custom_widgets/MultiLineLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint <code>sub_layout_type</code> QString Layout for the sub layouts"},{"location":"additional_modules/custom_widgets/NumFilterWidget.html","title":"NumFilterWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/NumFilterWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> <p>Widget with a button to choose from a comparison op (&gt;=, &gt;, etc) + a lineedit.</p> Source code in <code>prettyqt\\custom_widgets\\numfilterwidget.py</code> <pre><code>class NumFilterWidget(widgets.Widget):\n\"\"\"Widget with a button to choose from a comparison op (&gt;=, &gt;, etc) + a lineedit.\"\"\"\nfilter_changed = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_layout(\"horizontal\", margin=0)\nself.lineedit = widgets.LineEdit()\nself.lineedit.set_validator(\"double\", empty_allowed=True)\nself.op_button = widgets.ToolButton()\nself.op_button.setStyleSheet(\"QToolButton::menu-indicator{width:0px;}\")\nself.box.add(self.op_button)\nself.box.add(self.lineedit)\nself.menu = widgets.Menu(triggered=self._on_menu_click)\nfor comp in [\"=\", \"&lt;=\", \"&lt;\", \"&gt;=\", \"&gt;\"]:\nself.menu.add_action(comp)\nself.op_button.setMenu(self.menu)\nself.op_button.set_popup_mode(\"instant\")\nself.op_button.setText(\"=\")\nself.lineedit.value_changed.connect(self._on_filter_change)\ndef _on_filter_change(self):\nself.filter_changed.emit(self.get_filter_fn())\ndef _on_menu_click(self, action: gui.QAction):\nself.op_button.setText(action.text())\nself._on_filter_change()\ndef get_filter_fn(self) -&gt; Callable:\nval = self.lineedit.get_value()\nif val == \"\":\nreturn lambda x: True\nval = float(val)\nmatch self.op_button.text():\ncase \"=\":\nreturn functools.partial(operator.eq, val)\ncase \"&lt;=\":\nreturn functools.partial(operator.ge, val)\ncase \"&lt;\":\nreturn functools.partial(operator.gt, val)\ncase \"&gt;=\":\nreturn functools.partial(operator.le, val)\ncase \"&gt;\":\nreturn functools.partial(operator.lt, val)\ncase _:\nraise ValueError\n</code></pre>"},{"location":"additional_modules/custom_widgets/NumFilterWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261355728[\"custom_widgets.NumFilterWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261355728\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/NumFilterWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/ObjectBrowser.html","title":"ObjectBrowser","text":"<p>Qt Base Class: QMainWindow</p> <p>Signature: <code>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ObjectBrowser.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.MainWindow</code></p> <p>Info window for python objects.</p> Source code in <code>prettyqt\\custom_widgets\\objectbrowser.py</code> <pre><code>class ObjectBrowser(widgets.MainWindow):\n\"\"\"Info window for python objects.\"\"\"\ndef __init__(self, obj, stack=None, name: str = \"\"):\nsuper().__init__()\nself.set_title(\"Object browser\")\nself.set_icon(\"mdi.language-python\")\nself._auto_refresh = False\nself._refresh_rate = 2\nself._tree_model = itemmodels.PythonObjectTreeModel(obj)\nself._attr_details = [\nKlass(model=self._tree_model) for Klass in DEFAULT_ATTR_DETAILS\n]\n# Toggle auto-refresh on/off\nself.toggle_auto_refresh_action = gui.Action(\ntext=\"Auto-refresh\",\nparent=self,\ncheckable=True,\nstatus_tip=f\"Auto refresh every {self._refresh_rate} seconds\",\n)\nself.toggle_auto_refresh_action.toggled.connect(self.toggle_auto_refresh)\n# Add another refresh action with a different shortcut. An action must be added to\n# a visible widget for it to receive events. It is added to the main windows to\n# prevent it from being displayed again in the menu\nself.refresh_action_f5 = self.add_action(\ntext=\"&amp;Refresh2\", shortcut=\"F5\", triggered=self._tree_model.refresh_tree\n)\nself.central_splitter = widgets.Splitter(\nparent=self, orientation=constants.VERTICAL\n)\nself.setCentralWidget(self.central_splitter)\n# Tree widget\nself.obj_tree = widgets.TreeView(\nroot_is_decorated=True, selection_behavior=\"rows\"\n)\nself.obj_tree.set_model(self._tree_model)\nself.obj_tree.h_header = custom_widgets.FilterHeader(self.obj_tree)\n# Stretch last column?\n# It doesn't play nice when columns are hidden and then shown again.\nself.obj_tree.h_header.setObjectName(\"table_header\")\nself.obj_tree.h_header.setSectionsMovable(True)\nself.obj_tree.h_header.setStretchLastSection(False)\nself.central_splitter.addWidget(self.obj_tree)\n# Bottom pane\nbottom_pane_widget = widgets.Widget()\nbottom_pane_widget.set_layout(\"horizontal\", spacing=0, margin=5)\nself.central_splitter.addWidget(bottom_pane_widget)\ngroup_box = widgets.GroupBox(\"Details\")\nbottom_pane_widget.box.addWidget(group_box)\ngroup_box.set_layout(\"horizontal\", margin=2)\n# Radio buttons\nradio_widget = widgets.Widget()\nradio_widget.set_layout(\"vertical\", margin=0)\nself.button_group = widgets.ButtonGroup(\nself, button_clicked=self._change_details_field\n)\nfor button_id, attr_detail in enumerate(self._attr_details):\nradio_button = widgets.RadioButton(attr_detail.name)\nradio_widget.box.addWidget(radio_button)\nself.button_group.addButton(radio_button, button_id)\nself.button_group.button(0).setChecked(True)\nradio_widget.box.addStretch(1)\ngroup_box.box.addWidget(radio_widget)\nself.editor = widgets.PlainTextEdit(read_only=True, font=gui.Font.mono())\ngroup_box.box.addWidget(self.editor)\n# Splitter parameters\nself.central_splitter.setCollapsible(0, False)\nself.central_splitter.setCollapsible(1, True)\nself.central_splitter.setSizes([400, 200])\nself.central_splitter.setStretchFactor(0, 10)\nself.central_splitter.setStretchFactor(1, 0)\nselection_model = self.obj_tree.selectionModel()\nselection_model.currentRowChanged.connect(self._update_details)\nmenubar = self.menuBar()\nfile_menu = menubar.add_menu(\"&amp;File\")\nfile_menu.add_action(text=\"C&amp;lose\", triggered=self.close, shortcut=\"Ctrl+W\")\nfile_menu.add_action(\ntext=\"E&amp;xit\",\ntriggered=lambda: widgets.app().closeAllWindows(),\nshortcut=\"Ctrl+Q\",\n)\nview_menu = menubar.add_menu(\"&amp;View\")\nview_menu.add_action(\ntext=\"&amp;Refresh\", triggered=self._tree_model.refresh_tree, shortcut=\"Ctrl+R\"\n)\nview_menu.addAction(self.toggle_auto_refresh_action)\nview_menu.addSeparator()\nself.show_cols_submenu = self.obj_tree.h_header.createPopupMenu()\nself.show_cols_submenu.setTitle(\"Table columns\")\nview_menu.add_menu(self.show_cols_submenu)\nview_menu.addSeparator()\nassert self._refresh_rate &gt; 0\nself._refresh_timer = core.Timer(self)\nself._refresh_timer.setInterval(self._refresh_rate * 1000)\nself._refresh_timer.timeout.connect(self._tree_model.refresh_tree)\nself.toggle_auto_refresh_action.setChecked(self._auto_refresh)\n@classmethod\ndef setup_example(cls):\nreturn cls(obj=[\"a\", \"b\", \"c\"])\n@core.Slot(core.ModelIndex, core.ModelIndex)\ndef _update_details(\nself, current_index: core.ModelIndex, _previous_index: core.ModelIndex\n):\n\"\"\"Show the object details in the editor given an index.\"\"\"\nif self.obj_tree.model() is None or not current_index.isValid():\nreturn\nrole = self.obj_tree.get_model(skip_proxies=True).ExtraRoles.TreeItemRole\ntree_item = current_index.data(role)\nself._update_details_for_item(tree_item)\ndef _change_details_field(self, _button_id=None):\n\"\"\"Change the field that is displayed in the details pane.\"\"\"\n# logger.debug(\"_change_details_field: {}\".format(_button_id))\nif self.obj_tree.model() is None:\nreturn\ncurrent_index = self.obj_tree.selectionModel().currentIndex()\nif not current_index.isValid():\nreturn\nrole = self.obj_tree.get_model(skip_proxies=True).ExtraRoles.TreeItemRole\ntree_item = current_index.data(role)\nself._update_details_for_item(tree_item)\ndef _update_details_for_item(self, tree_item):\n\"\"\"Show the object details in the editor given an tree_item.\"\"\"\nbutton_id = self.button_group.checkedId()\nattr_details = self._attr_details[button_id]\ndata = attr_details.get_data(tree_item)\nself.editor.set_text(data)\nself.editor.set_word_wrap_mode(attr_details.line_wrap)\ndef toggle_auto_refresh(self, checked):\n\"\"\"Toggle auto-refresh on/off.\"\"\"\nif checked:\nlogger.info(\"Auto-refresh on. Rate %g seconds\", self._refresh_rate)\nself._refresh_timer.start()\nelse:\nlogger.info(\"Auto-refresh off\")\nself._refresh_timer.stop()\nself._auto_refresh = checked\ndef closeEvent(self, event):\n\"\"\"Called when the window is closed.\"\"\"\nself._refresh_timer.stop()\nself._refresh_timer.timeout.disconnect(self._tree_model.refresh_tree)\nself.toggle_auto_refresh_action.toggled.disconnect(self.toggle_auto_refresh)\nself.refresh_action_f5.triggered.disconnect(self._tree_model.refresh_tree)\nself.button_group.buttonClicked.disconnect(self._change_details_field)\nselection_model = self.obj_tree.selectionModel()\nselection_model.currentRowChanged.disconnect(self._update_details)\nself.close()\nevent.accept()\n</code></pre>"},{"location":"additional_modules/custom_widgets/ObjectBrowser.html#prettyqt.custom_widgets.objectbrowser.ObjectBrowser.closeEvent","title":"<code>closeEvent(event)</code>","text":"<p>Called when the window is closed.</p> Source code in <code>prettyqt\\custom_widgets\\objectbrowser.py</code> <pre><code>def closeEvent(self, event):\n\"\"\"Called when the window is closed.\"\"\"\nself._refresh_timer.stop()\nself._refresh_timer.timeout.disconnect(self._tree_model.refresh_tree)\nself.toggle_auto_refresh_action.toggled.disconnect(self.toggle_auto_refresh)\nself.refresh_action_f5.triggered.disconnect(self._tree_model.refresh_tree)\nself.button_group.buttonClicked.disconnect(self._change_details_field)\nselection_model = self.obj_tree.selectionModel()\nselection_model.currentRowChanged.disconnect(self._update_details)\nself.close()\nevent.accept()\n</code></pre>"},{"location":"additional_modules/custom_widgets/ObjectBrowser.html#prettyqt.custom_widgets.objectbrowser.ObjectBrowser.toggle_auto_refresh","title":"<code>toggle_auto_refresh(checked)</code>","text":"<p>Toggle auto-refresh on/off.</p> Source code in <code>prettyqt\\custom_widgets\\objectbrowser.py</code> <pre><code>def toggle_auto_refresh(self, checked):\n\"\"\"Toggle auto-refresh on/off.\"\"\"\nif checked:\nlogger.info(\"Auto-refresh on. Rate %g seconds\", self._refresh_rate)\nself._refresh_timer.start()\nelse:\nlogger.info(\"Auto-refresh off\")\nself._refresh_timer.stop()\nself._auto_refresh = checked\n</code></pre>"},{"location":"additional_modules/custom_widgets/ObjectBrowser.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261328848[\"custom_widgets.ObjectBrowser\"]\n  2103261245440[\"widgets.MainWindow\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259730480[\"QtWidgets.QMainWindow\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261245440 --&gt; 2103261328848\n  2103261127360 --&gt; 2103261245440\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259730480 --&gt; 2103261245440\n  2103259691120 --&gt; 2103259730480\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ObjectBrowser.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>animated</code> bool <code>documentMode</code> bool <code>tabShape</code> QTabWidget::TabShape <code>dockNestingEnabled</code> bool <code>dockOptions</code> QFlags <code>unifiedTitleAndToolBarOnMac</code> bool"},{"location":"additional_modules/custom_widgets/OptionalWidget.html","title":"OptionalWidget","text":"<p>Qt Base Class: QGroupBox</p> <p>Signature: <code>QGroupBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QGroupBox(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/OptionalWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GroupBox</code></p> <p>Wraps another widget in a GroupBox with and CheckBock and makes it optional.</p> Source code in <code>prettyqt\\custom_widgets\\optionalwidget.py</code> <pre><code>class OptionalWidget(widgets.GroupBox):\n\"\"\"Wraps another widget in a GroupBox with and CheckBock and makes it optional.\"\"\"\nvalue_changed = core.Signal(object)\ndef __init__(\nself,\nwidget: widgets.QWidget,\ntitle: str = \"\",\nparent: widgets.QWidget | None = None,\n):\nsuper().__init__(checkable=True, title=title)\nself.set_layout(\"vertical\")\nself.box.add(widget)\nself.widget = widget\nself.toggled.connect(self.widget.setEnabled)\nself.widget.value_changed.connect(self._on_value_change)\nself.toggled.connect(self._on_enable_change)\ndef _on_value_change(self, val):\nself.value_changed.emit(val)\ndef _on_enable_change(self, val):\nself.widget.setEnabled(val)\nif val:\nself.value_changed.emit(self.widget.get_value())\nelse:\nself.value_changed.emit(None)\ndef __getattr__(self, value: str):\nreturn getattr(self.widget, value)\n@classmethod\ndef setup_example(cls):\nw = widgets.CheckBox(\"Example\")\nreturn cls(widget=w)\n@property\ndef enabled(self) -&gt; bool:\nreturn self.isChecked()\n@enabled.setter\ndef enabled(self, state: bool):\nself.setChecked(state)\ndef get_value(self):\nreturn self.widget.get_value() if self.isChecked() else None\n</code></pre>"},{"location":"additional_modules/custom_widgets/OptionalWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261542928[\"custom_widgets.OptionalWidget\"]\n  2103261445008[\"widgets.GroupBox\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259738160[\"QtWidgets.QGroupBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261445008 --&gt; 2103261542928\n  2103261127360 --&gt; 2103261445008\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259738160 --&gt; 2103261445008\n  2103259691120 --&gt; 2103259738160\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/OptionalWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>alignment</code> QFlags <code>flat</code> bool <code>checkable</code> bool <code>checked</code> bool"},{"location":"additional_modules/custom_widgets/OrientedTableView.html","title":"OrientedTableView","text":"<p>Qt Base Class: QTableView</p> <p>Signature: <code>QTableView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/OrientedTableView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TableView</code></p> <p>TableView class with some convenience methods for oriented tables.</p> Source code in <code>prettyqt\\custom_widgets\\orientedtableview.py</code> <pre><code>class OrientedTableView(widgets.TableView):\n\"\"\"TableView class with some convenience methods for oriented tables.\"\"\"\ndef __init__(\nself, orientation: constants.Orientation | constants.OrientationStr, **kwargs\n):\nsuper().__init__(**kwargs)\nself.orientation = constants.ORIENTATION.get_enum_value(orientation)\n@classmethod\ndef setup_example(cls):\nreturn cls(orientation=\"vertical\")\ndef get_higher_levels(self, levels: int) -&gt; core.ItemSelection:\nmodel = self.model()\nif self.is_horizontal():\n# Get the header's selected columns\n# Removes the higher levels so that only the lowest level of the header\n# affects the data table selection\nreturn core.ItemSelection(\nmodel.index(0, 0), model.index(levels - 2, model.columnCount() - 1)\n)\nelse:\nreturn core.ItemSelection(\nmodel.index(0, 0), model.index(model.rowCount() - 1, levels - 2)\n)\ndef set_section_span(self, row: int, column: int, count: int):\nif self.is_horizontal():\nself.setSpan(row, column, 1, count)\nelse:\nself.setSpan(column, row, count, 1)\ndef sectionAt(self, val: int):\nreturn self.columnAt(val) if self.is_horizontal() else self.rowAt(val)\ndef over_header_edge(self, position: int, margin: int = 3) -&gt; int:\n# Return the index of the column this x position is on the right edge of\nleft = self.sectionAt(position - margin)\nright = self.sectionAt(position + margin)\nif left != right != 0:\n# We're at the left edge of the first column\nreturn left\ndef is_horizontal(self) -&gt; bool:\nreturn self.orientation == constants.HORIZONTAL\ndef sectionWidth(self, val: int):\nreturn self.columnWidth(val) if self.is_horizontal() else self.rowHeight(val)\ndef setSectionWidth(self, section: int, width: int):\nif self.is_horizontal():\nself.setColumnWidth(section, width)\nelse:\nself.setRowHeight(section, width)\ndef get_split_cursor(self) -&gt; gui.Cursor:\nif self.is_horizontal():\nreturn gui.Cursor(constants.CursorShape.SplitHCursor)\nelse:\nreturn gui.Cursor(constants.CursorShape.SplitVCursor)\n</code></pre>"},{"location":"additional_modules/custom_widgets/OrientedTableView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261532368[\"custom_widgets.OrientedTableView\"]\n  2103261406608[\"widgets.TableView\"]\n  2103261411408[\"widgets.TableViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259816880[\"QtWidgets.QTableView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261406608 --&gt; 2103261532368\n  2103261411408 --&gt; 2103261406608\n  2103261136960 --&gt; 2103261411408\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259816880 --&gt; 2103261406608\n  2103259770800 --&gt; 2103259816880\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/OrientedTableView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>showGrid</code> bool <code>gridStyle</code> Qt::PenStyle <code>sortingEnabled</code> bool <code>wordWrap</code> bool <code>cornerButtonEnabled</code> bool"},{"location":"additional_modules/custom_widgets/PaletteEdit.html","title":"PaletteEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/PaletteEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> <p>Simple editor to edit QPalettes.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\paletteedit.py</code> <pre><code>class PaletteEdit(widgets.Widget):\n\"\"\"Simple editor to edit QPalettes.\"\"\"\nvalue_changed = core.Signal(gui.Palette)\ndef __init__(self, *args, object_name: str = \"palette_edit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; gui.Palette:\nreturn self._value\ndef set_value(self, value: gui.Palette):\nself._value = value\nvalue = core.Property(\ngui.Palette,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen palette\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/PaletteEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261555408[\"custom_widgets.PaletteEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261555408\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/PaletteEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QPalette Currently chosen palette"},{"location":"additional_modules/custom_widgets/PointEdit.html","title":"PointEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/PointEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> <p>Simple Editor for QPoints.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\pointedit.py</code> <pre><code>class PointEdit(widgets.Widget):\n\"\"\"Simple Editor for QPoints.\"\"\"\nvalue_changed = core.Signal(core.Point)\ndef __init__(self, *args, object_name: str = \"point_edit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_margin(0)\nself.spinbox_x = widgets.SpinBox(maximum=999999)\nself.spinbox_y = widgets.SpinBox(maximum=999999)\nlayout = self.set_layout(\"horizontal\", margin=0)\nlayout.add(widgets.Label(\"x\", alignment=\"center_right\"))\nlayout.add(self.spinbox_x)\nlayout.add(widgets.Label(\"y\", alignment=\"center_right\"))\nlayout.add(self.spinbox_y)\nself.spinbox_x.value_changed.connect(self._on_value_change)\nself.spinbox_y.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Point:\nreturn core.Point(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\n)\ndef set_value(self, value: datatypes.PointType):\nself._value = datatypes.to_point(value)\nself.spinbox_x.set_value(value.x())\nself.spinbox_y.set_value(value.y())\nvalue = core.Property(\ncore.Point,\nget_value,\nset_value,\nuser=True,\ndoc=\"Current value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/PointEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261560208[\"custom_widgets.PointEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261560208\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/PointEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QPoint Current value"},{"location":"additional_modules/custom_widgets/PopupInfo.html","title":"PopupInfo","text":"<p>Qt Base Class: QDialog</p> <p>Signature: <code>QDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/PopupInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Dialog</code></p> <p>Dialog overlay to show some info to user.</p> Source code in <code>prettyqt\\custom_widgets\\popupinfo.py</code> <pre><code>class PopupInfo(widgets.Dialog):\n\"\"\"Dialog overlay to show some info to user.\"\"\"\n_singleton: PopupInfo | None = None\ndef __init__(self, parent: widgets.QWidget | None = None, text: str | None = None):\nsuper().__init__(parent=parent)\nself.timer = core.Timer(single_shot=True, timeout=self.close)\nself.label = widgets.Label(alignment=\"center\")\nself.iconlabel = widgets.Label()\nself.set_icon(\"mdi.information\")\nself.set_flags(stay_on_top=True, frameless=True, tooltip=True)\nlayout = self.set_layout(\"horizontal\", margin=20, size_constraint=\"minimum\")\nself.set_background_color(\"black\")\nself.label.set_color(\"white\")\nlayout.add(self.iconlabel)\nlayout.add(self.label)\nself.hide()\ndef set_text_color(self, color: datatypes.ColorType):\nself.label.set_color(color)\ndef set_icon(self, icon: datatypes.IconType):\npixmap = iconprovider.get_icon(icon, color=\"white\").pixmap(32)\nself.iconlabel.setPixmap(pixmap)\ndef show_popup(\nself,\ntext: str,\nicon: datatypes.IconType = \"mdi.information\",\ntext_color: datatypes.ColorType = \"white\",\nbackground_color: datatypes.ColorType = \"black\",\nposition=\"screen\",\ntimeout: int = 2500,\n):\nself.set_background_color(background_color)\nself.label.set_color(text_color)\nself.label.setText(text)\nself.set_icon(icon)\nself.adjustSize()\nself.position_on(position, y_offset=-200)\nself.timer.start(timeout)\nself.show()\n@classmethod\ndef popup(\ncls,\ntext: str,\nicon: datatypes.IconType = \"mdi.information\",\ntext_color: datatypes.ColorType = \"white\",\nbackground_color: datatypes.ColorType = \"black\",\nposition=\"screen\",\ntimeout: int = 2500,\n):\nif cls._singleton is None:\ncls._singleton = cls()\npopup = cls._singleton\npopup.set_background_color(background_color)\npopup.label.set_color(text_color)\npopup.label.setText(text)\npopup.set_icon(icon)\npopup.adjustSize()\npopup.position_on(position, y_offset=-200)\npopup.timer.start(timeout)\npopup.show()\n</code></pre>"},{"location":"additional_modules/custom_widgets/PopupInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261346128[\"custom_widgets.PopupInfo\"]\n  2103261214720[\"widgets.Dialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261214720 --&gt; 2103261346128\n  2103261212800 --&gt; 2103261214720\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259840880 --&gt; 2103261214720\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/PopupInfo.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"additional_modules/custom_widgets/PreviewScrollBar.html","title":"PreviewScrollBar","text":"<p>Qt Base Class: QScrollBar</p> <p>Signature: <code>QScrollBar(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QScrollBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/PreviewScrollBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ScrollBar</code></p> <p>Scrollbar showing a small preview of a (Plain)TextEdit.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\previewscrollbar.py</code> <pre><code>class PreviewScrollBar(widgets.ScrollBar):\n\"\"\"Scrollbar showing a small preview of a (Plain)TextEdit.\"\"\"\ndef __init__(self, *args, parent=None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._scrollarea = parent\nself._width = 150\n# self._line_margin = 152\nself._scale = 0.3\n# self.installEventFilter(\"slider_move_to_mouse_click\")\n@classmethod\ndef setup_example(cls):\nw = widgets.PlainTextEdit()\nreturn cls(parent=w)\ndef sizeHint(self):\nexpand = (\ncore.QSize(self._width, 1)\nif self.is_vertical()\nelse core.QSize(1, self._width)\n)\nreturn super().sizeHint().expandedTo(expand)\ndef paintEvent(self, event):\n# viewport = self._scrollarea.viewport()\ndoc = self._scrollarea.document()\nv_scroll = self._scrollarea.v_scrollbar\nsuper().paintEvent(event)\nwith gui.Painter(self) as painter:\npainter.setRenderHint(painter.RenderHint.TextAntialiasing, True)\n# draw background\npainter.save()\nbg_color = gui.Palette().get_color(\"window\")\npainter.setBrush(bg_color)\npainter.drawRect(self.geometry())\npainter.restore()\n# figure out positions\npainter.save()\nfirst_vis_line, last_vis_line = self._scrollarea.get_visible_line_span()\n# start_line = max(0, first_vis_line - self._line_margin)\n# end_line = min(last_vis_line + self._line_margin, doc.blockCount())\n# start_block = doc.findBlockByLineNumber(start_line)\n# end_block = doc.findBlockByLineNumber(end_line)\nopt = widgets.QStyleOptionSlider()\nopt.initFrom(self)\nopt.subControls = widgets.QStyle.SubControl.SC_None\nopt.activeSubControls = widgets.QStyle.SubControl.SC_None\nopt.orientation = self.orientation()\nopt.minimum = self.minimum()\nopt.maximum = self.maximum()\nopt.sliderPosition = self.sliderPosition()\nopt.sliderValue = self.value()\nopt.singleStep = self.singleStep()\nopt.pageStep = self.pageStep()\ngr = self.style().subControlRect(\nwidgets.QStyle.ComplexControl.CC_ScrollBar,\nopt,\nwidgets.QStyle.SubControl.SC_ScrollBarGroove,\nself,\n)\ntextarea_height = 0\nb = doc.begin()\nwhile b != doc.end():\nr = self._scrollarea.blockBoundingRect(b)\ntextarea_height += r.height()\nb = b.next()\nminimap_height = textarea_height * self._scale\nminimap_visible_height = min(minimap_height, v_scroll.height())\n# minimap_fully_visible = minimap_visible_height == minimap_height\nheight_ratio = minimap_height / v_scroll.height()\nmap_scroll_distance = minimap_height - minimap_visible_height\nif v_scroll.maximum():\nscroll_per_value = map_scroll_distance / v_scroll.maximum()\nelse:\nscroll_per_value = 1\n# doc_x_margin = 1\n# doc_height = min(gr.height(), textarea_height)\n# yoffset = 1  # top instead of center-aligned (gr.height() - doc_height) / 2\n# doc_rect = core.QRect(\n#     core.QPoint(gr.left() + doc_x_margin, yoffset + gr.top()),\n#     QSize(gr.width() - doc_x_margin, doc_height),\n# )\n# self.map_grove_rect = doc_rect\n# max_ = max(self.maximum() + 1, 1)\n# visible_start = (\n#     self.value() * doc_height / (max_ + self.pageStep())\n#     + doc_rect.top()\n#     + 0.5\n# )\n# visible_end = (self.value() + self.pageStep()) * doc_height / (\n#     max_ + self.pageStep()\n# ) + doc_rect.top()\n# visible_rect = core.QRect(doc_rect)\n# visible_rect.moveTop(visible_start)\n# visible_rect.setHeight(visible_end - visible_start)\n# #  adjust the rectangles\n# slider_rect = self.style().subControlRect(QStyle.CC_ScrollBar, opt,\n# QStyle.SC_ScrollBarSlider, self)\n# slider_rect.setX(doc_x_margin)\n# slider_rect.setWidth(self.width() - doc_x_margin * 2)\n# if ((doc_height + 2 * doc_x_margin &gt;= gr.height()) and\n# (slider_rect.height() &gt; visible_rect.height() + 2))\n#     visible_rect.adjust(2, 0, -3, 0)\n#  else:\n#     visible_rect.adjust(1, 0, -1, 2)\n#     slider_rect.setTop(visible_rect.top() - 1)\n#     slider_rect.setBottom(visible_rect.bottom() + 1)\npainter.scale(self._scale, self._scale)\noffset = -(\nv_scroll.value() * scroll_per_value * (1 / self._scale)\n)  # height_ratio * (1/self._scale))\n# scale = self.height() / self._scrollarea.get_pixel_height()\nb = doc.begin()\ntop = v_scroll.height() * (1 / self._scale)\ncount = 0\nwhile b != doc.end():\nr = self._scrollarea.blockBoundingRect(b)\nif b.isVisible() and top &gt;= offset &gt;= 0:\nlayout = b.layout()\ncount += 1\nlayout.draw(painter, core.QPointF(0, offset))\noffset += r.height()\nb = b.next()\npainter.restore()\n# pos = v_scroll.value() / v_scroll.maximum()\npainter.setBrush(gui.QColor(120, 120, 120, 120))\n# slider_rect = self.style().subControlRect(\n#     widgets.QStyle.ComplexControl.CC_ScrollBar,\n#     opt,\n#     widgets.QStyle.SubControl.SC_ScrollBarSlider,\n#     self,\n# )\nhandle_rect_height = (\n(last_vis_line - first_vis_line)\n/ doc.blockCount()\n* gr.height()\n* height_ratio\n)\nhandle_rect_y_pos = first_vis_line / doc.blockCount() * gr.height()\nhandle_rect_y_pos *= v_scroll.height() / (\nv_scroll.height() + handle_rect_height\n)\npainter.drawRoundedRect(\n0, int(handle_rect_y_pos), self._width, int(handle_rect_height), 5, 5\n)\ndef minimap_y_to_std_y(self, y: int) -&gt; int:\n#  Check if the minimap fills the whole scrollbar\nif self.std_grove_rect.height() == self.map_grove_rect.height():\nreturn y\n#  check if y is on the step up/down\nif (y &lt; self.std_grove_rect.top()) or (y &gt; self.std_grove_rect.bottom()):\nreturn y\nif y &lt; self.map_grove_rect.top():\nreturn self.std_grove_rect.top() + 1\nif y &gt; self.map_grove_rect.bottom():\nreturn self.std_grove_rect.bottom() - 1\n#  check for div/0\nif self.map_grove_rect.height() == 0:\nreturn y\nnewY = (\n(y - self.map_grove_rect.top())\n* self.std_grove_rect.height()\n/ self.map_grove_rect.height()\n)\nnewY += self.std_grove_rect.top()\nreturn newY\n</code></pre>"},{"location":"additional_modules/custom_widgets/PreviewScrollBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261489168[\"custom_widgets.PreviewScrollBar\"]\n  2103261142720[\"widgets.ScrollBar\"]\n  2103261105280[\"widgets.ScrollBarMixin\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259913616[\"QtWidgets.QScrollBar\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261142720 --&gt; 2103261489168\n  2103261105280 --&gt; 2103261142720\n  2103261112000 --&gt; 2103261105280\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259913616 --&gt; 2103261142720\n  2103259932816 --&gt; 2103259913616\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/PreviewScrollBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool"},{"location":"additional_modules/custom_widgets/QObjectHierarchyTreeView.html","title":"QObjectHierarchyTreeView","text":"<p>Qt Base Class: QTreeView</p> <p>Signature: <code>QTreeView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/QObjectHierarchyTreeView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\qobjecthierarchytreeview.py</code> <pre><code>class QObjectHierarchyTreeView(widgets.TreeView):\nobject_selected = core.Signal(core.QObject)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_indentation(10)\nself.h_header.resize_sections()\nself.setRootIsDecorated(True)\nself.setWordWrap(True)\ndef select_object(self, qobject: core.QObject):\nmodel = self.get_model(skip_proxies=True)\nif index := model.search_tree(qobject, model.Roles.WidgetRole):\nself.set_current_index(index[0], current=True)\nself.scroll_to(index[0])\ndef set_qobject(self, qobject: core.QObject):\nmodel = itemmodels.WidgetHierarchyModel(qobject, parent=self)\nself.set_model(model)\nself.h_header = custom_widgets.FilterHeader(self)\nself.expandAll()\n</code></pre>"},{"location":"additional_modules/custom_widgets/QObjectHierarchyTreeView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261541968[\"custom_widgets.QObjectHierarchyTreeView\"]\n  2103261413328[\"widgets.TreeView\"]\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259814960[\"QtWidgets.QTreeView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261413328 --&gt; 2103261541968\n  2103261405648 --&gt; 2103261413328\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259814960 --&gt; 2103261413328\n  2103259770800 --&gt; 2103259814960\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/QObjectHierarchyTreeView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>autoExpandDelay</code> int <code>indentation</code> int <code>rootIsDecorated</code> bool <code>uniformRowHeights</code> bool <code>itemsExpandable</code> bool <code>sortingEnabled</code> bool <code>animated</code> bool <code>allColumnsShowFocus</code> bool <code>wordWrap</code> bool <code>headerHidden</code> bool <code>expandsOnDoubleClick</code> bool"},{"location":"additional_modules/custom_widgets/QObjectPropertiesTableView.html","title":"QObjectPropertiesTableView","text":"<p>Qt Base Class: QTableView</p> <p>Signature: <code>QTableView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/QObjectPropertiesTableView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TableView</code></p> Source code in <code>prettyqt\\custom_widgets\\qobjectpropertiestableview.py</code> <pre><code>class QObjectPropertiesTableView(widgets.TableView):\ndef __init__(self, *args, **kwargs):\nself.event_catcher = None\nself._handles: list[core.QMetaObject.Connection] = []\nsuper().__init__(*args, **kwargs)\nself.set_icon(\"mdi.folder\")\nself.set_selection_behavior(\"rows\")\nself.setEditTriggers(self.EditTrigger.AllEditTriggers)\nself.set_delegate(\"editor\", column=1)\ndef set_qobject(\nself,\nqobject: core.QObject,\nupdate_on_event: bool = True,\nupdate_on_signal_emission: bool = True,\n):\nprev_model = self.get_model(skip_proxies=True)\nif prev_model is not None and prev_model._qobject:\nself.unhook()\nmodel = itemmodels.QObjectPropertiesModel(qobject, parent=self)\n# model.dataChanged.connect(self.repaint)\nself.set_model(model)\nif update_on_event:\nself.event_catcher = eventfilters.EventCatcher(\ninclude=[\"resize\", \"move\"], parent=qobject\n)\nlogger.debug(f\"Connected {qobject!r} to {model!r}\")\nself.event_catcher.caught.connect(model.force_layoutchange)\nqobject.installEventFilter(self.event_catcher)\nif update_on_signal_emission:\nmetaobj = core.MetaObject(qobject.metaObject())\nself._handles = metaobj.connect_signals(\nqobject, model.force_layoutchange, only_notifiers=True\n)\ndef unhook(self):\nmodel = self.get_model(skip_proxies=True)\nfor handle in self._handles:\nmodel._qobject.disconnect(handle)\nmodel._qobject.removeEventFilter(self.event_catcher)\nlogger.debug(f\"Disconnected {model._qobject!r} from {self!r}\")\n</code></pre>"},{"location":"additional_modules/custom_widgets/QObjectPropertiesTableView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261534288[\"custom_widgets.QObjectPropertiesTableView\"]\n  2103261406608[\"widgets.TableView\"]\n  2103261411408[\"widgets.TableViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259816880[\"QtWidgets.QTableView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261406608 --&gt; 2103261534288\n  2103261411408 --&gt; 2103261406608\n  2103261136960 --&gt; 2103261411408\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259816880 --&gt; 2103261406608\n  2103259770800 --&gt; 2103259816880\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/QObjectPropertiesTableView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>showGrid</code> bool <code>gridStyle</code> Qt::PenStyle <code>sortingEnabled</code> bool <code>wordWrap</code> bool <code>cornerButtonEnabled</code> bool"},{"location":"additional_modules/custom_widgets/RangeEdit.html","title":"RangeEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RangeEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\rangeedit.py</code> <pre><code>class RangeEdit(widgets.Widget):\nvalue_changed = core.Signal(range)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_margin(0)\nself.spinbox_start = widgets.SpinBox(maximum=999999)\nself.spinbox_stop = widgets.SpinBox(maximum=999999)\nself.spinbox_step = widgets.SpinBox(minimum=1, maximum=999999)\nlayout = self.set_layout(\"horizontal\", margin=0)\nlayout.add(widgets.Label(\"Start\", alignment=\"center_right\"))\nlayout.add(self.spinbox_start)\nlayout.add(widgets.Label(\"Stop\", alignment=\"center_right\"))\nlayout.add(self.spinbox_stop)\nlayout.add(widgets.Label(\"Step\", alignment=\"center_right\"))\nlayout.add(self.spinbox_step)\nself.spinbox_start.value_changed.connect(self._on_value_change)\nself.spinbox_stop.value_changed.connect(self._on_value_change)\nself.spinbox_step.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; range:\nreturn range(\nself.spinbox_start.get_value(),\nself.spinbox_stop.get_value(),\nself.spinbox_step.get_value(),\n)\ndef set_value(self, value: range | tuple[int, int, int]):\nif isinstance(value, tuple):\nvalue = range(*value)\nself._value = value\nself.spinbox_start.set_value(value.start)\nself.spinbox_stop.set_value(value.stop)\nself.spinbox_step.set_value(value.step)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RangeEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261330768[\"custom_widgets.RangeEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261330768\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RangeEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/RectEdit.html","title":"RectEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RectEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseRectEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\rectedit.py</code> <pre><code>class RectEdit(BaseRectEdit):\nTyp = core.QRect\nWidget = widgets.SpinBox\nvalue_changed = core.Signal(core.QRect)\ndef set_value(self, value: datatypes.RectType):\nsuper().set_value(value)\ndef get_value(self) -&gt; core.Rect:\nreturn super().get_value()\nvalue = core.Property(\ncore.QRect,\nget_value,\nset_value,\nuser=True,\ndoc=\"Current value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RectEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261548688[\"custom_widgets.RectEdit\"]\n  2103261567888[\"custom_widgets.BaseRectEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261567888 --&gt; 2103261548688\n  2103261115840 --&gt; 2103261567888\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RectEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QRect Current value"},{"location":"additional_modules/custom_widgets/RectFEdit.html","title":"RectFEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RectFEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseRectEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\rectedit.py</code> <pre><code>class RectFEdit(BaseRectEdit):\nTyp = core.QRectF\nWidget = widgets.DoubleSpinBox\nvalue_changed = core.Signal(core.QRectF)\ndef set_value(self, value: datatypes.RectFType):\nsuper().set_value(value)\ndef get_value(self) -&gt; core.RectF:\nreturn super().get_value()\nvalue = core.Property(\ncore.QRectF,\nget_value,\nset_value,\nuser=True,\ndoc=\"Current value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RectFEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261558288[\"custom_widgets.RectFEdit\"]\n  2103261567888[\"custom_widgets.BaseRectEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261567888 --&gt; 2103261558288\n  2103261115840 --&gt; 2103261567888\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RectFEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QRectF Current value"},{"location":"additional_modules/custom_widgets/RegexInput.html","title":"RegexInput","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RegexInput.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\regexinput.py</code> <pre><code>class RegexInput(widgets.Widget):\nLABEL_MAP = dict(\nmultiline=\"MultiLine\",\nignorecase=\"Ignore case\",\nascii=\"ASCII-only matching\",\ndotall=\"Dot matches newline\",\nverbose=\"Ignore whitespace\",\n)\nVALUE_MAP = dict(\nmultiline=re.MULTILINE,\nignorecase=re.IGNORECASE,\nascii=re.ASCII,\ndotall=re.DOTALL,\nverbose=re.VERBOSE,\n)\nFlags = RegexFlag\ncore.Enum(Flags)\nvalue_changed = core.Signal(object)\ndef __init__(\nself,\nshow_flags: bool = True,\nshow_error: bool = True,\nobject_name: str = \"regex_input\",\n**kwargs,\n):\nsuper().__init__(object_name=object_name, **kwargs)\nself.set_layout(\"grid\", margin=0)\nself.label_error = widgets.Label()\nself.label_error.set_color(\"highlight_role\")\nself.lineedit = custom_widgets.RegexLineEdit()\nval = self.lineedit.validator\nval.error_occured.connect(self.label_error.set_text)\nval.pattern_updated.connect(self.value_changed)\nself.tb_flags = custom_widgets.BoolDictToolButton(\ntext=\"Flags\", icon=\"mdi.flag-variant-outline\"\n)\nself.box[0, 0:1] = self.lineedit\nif show_flags:\nself.box[0, 2] = self.tb_flags\nif show_error:\nself.box[1, 0:2] = self.label_error\nself.tb_flags.value_changed.connect(self._on_value_change)\nself.tb_flags.set_dict(self.LABEL_MAP)\ndef _on_value_change(self):\ntry:\nval = self.get_value()\nexcept sre_constants.error:\nreturn\nelse:\nself.value_changed.emit(val)\ndef get_pattern(self) -&gt; str:\nreturn self.lineedit.text()\ndef set_pattern(self, value: str):\nself.lineedit.set_text(value)\ndef get_flags(self) -&gt; int:\nret_val = self.Flags(0)\nfor identifier, flag in self.VALUE_MAP.items():\nif self.tb_flags[identifier]:\nret_val |= flag\nreturn ret_val\ndef set_flags(self, value: int):\nfor identifier, flag in self.VALUE_MAP.items():\nself.tb_flags[identifier] = bool(value &amp; flag)\ndef set_value(self, value: str | Pattern | None):\nmatch value:\ncase None:\nself.set_pattern(\"\")\nself.set_flags(self.Flags(0))\ncase str():\nself.set_pattern(value)\nself.set_flags(self.Flags(0))\ncase _:\nself.set_pattern(value.pattern)\nself.set_flags(self.Flags(value.flags))\ndef get_value(self) -&gt; Pattern:\nreturn re.compile(self.get_pattern(), self.get_flags())\ndef is_valid(self) -&gt; bool:\nreturn self.lineedit.is_valid()\npattern = core.Property(\nstr,\nget_pattern,\nset_pattern,\nuser=True,\ndoc=\"Current pattern as text\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RegexInput.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261331728[\"custom_widgets.RegexInput\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261331728\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RegexInput.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>pattern</code> QString Current pattern as text"},{"location":"additional_modules/custom_widgets/RegexLineEdit.html","title":"RegexLineEdit","text":"<p>Qt Base Class: QPlainTextEdit</p> <p>Signature: <code>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RegexLineEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>custom_widgets.SingleLineTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\regexlineedit.py</code> <pre><code>class RegexLineEdit(custom_widgets.SingleLineTextEdit):\ndef __init__(self, *args, object_name: str = \"regex_lineedit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_syntaxhighlighter(\"regex\")\nself.set_margin(0)\nval = validators.RegexPatternValidator()\nself.set_validator(val)\ndef set_value(self, value: datatypes.PatternAndStringType | None):\nmatch value:\ncase None:\nself.set_text(\"\")\ncase _:\nself.set_text(datatypes.to_py_pattern(value).pattern)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RegexLineEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261311568[\"custom_widgets.RegexLineEdit\"]\n  2103261564048[\"custom_widgets.SingleLineTextEdit\"]\n  2103261367248[\"widgets.PlainTextEdit\"]\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259771760[\"QtWidgets.QPlainTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261564048 --&gt; 2103261311568\n  2103261367248 --&gt; 2103261564048\n  2103261397968 --&gt; 2103261367248\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259771760 --&gt; 2103261367248\n  2103259751600 --&gt; 2103259771760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RegexLineEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QPlainTextEdit::LineWrapMode <code>readOnly</code> bool <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>blockCount</code> int <code>maximumBlockCount</code> int <code>backgroundVisible</code> bool <code>centerOnScroll</code> bool <code>placeholderText</code> QString <code>current_line_color</code> QColor Color to use for current line highlighting <code>validation_color</code> QColor Color to use for invalid text"},{"location":"additional_modules/custom_widgets/RegionEdit.html","title":"RegionEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RegionEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseRectEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\rectedit.py</code> <pre><code>class RegionEdit(BaseRectEdit):\nWidget = widgets.SpinBox\nvalue_changed = core.Signal(gui.QRegion)\nTyp = gui.QRegion\ndef get_value(self) -&gt; gui.Region:\nreturn gui.Region(\nself.spinbox_x.get_value(),\nself.spinbox_y.get_value(),\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\ndef set_value(self, value: gui.QRegion):\nif isinstance(value, tuple):\nvalue = gui.Region(*value)\nself._value = value\nbounding_rect = value.boundingRect()\nself.spinbox_x.set_value(bounding_rect.x())\nself.spinbox_y.set_value(bounding_rect.y())\nself.spinbox_width.set_value(bounding_rect.width())\nself.spinbox_height.set_value(bounding_rect.height())\nvalue = core.Property(\ngui.Region,\nget_value,\nset_value,\nuser=True,\ndoc=\"Current value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RegionEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261549648[\"custom_widgets.RegionEdit\"]\n  2103261567888[\"custom_widgets.BaseRectEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261567888 --&gt; 2103261549648\n  2103261115840 --&gt; 2103261567888\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RegionEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QRegion Current value"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html","title":"RoundProgressBar","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>class RoundProgressBar(widgets.Widget):\nclass Position(float, enum.Enum):\n\"\"\"Start position of progress bar in degrees.\"\"\"\nLeft = 180.0\nTop = 90.0\nRight = 0.0\nBottom = -90.0\nclass BarStyle(enum.IntEnum):\n\"\"\"Progress bar style.\"\"\"\nDonut = 1\nPie = 2\nLine = 3\nExpand = 4\nclass ValueType(enum.IntEnum):\n\"\"\"Value type.\"\"\"\nvalue = 1\npercent = 2\nmaximum = 3\ndef __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent)\nself._min_value = 0.0\nself._max_value = 100.0\nself.current_value = 0.0\nself.null_pos = self.Position.Top\nself.bar_style: RoundProgressBar.BarStyle = self.BarStyle.Donut\nself.outline_pen_width = 1.0\nself.data_pen_width = 1.0\nself._rebuild_brush = False\nself.number_format = \"%p%\"\nself.decimals = 1\nself._update_flags: ValueTypeStr = \"percent\"\nself.gradient_data: Sequence[gui.QColor] = []\ndef minimum(self):\nreturn self._min_value\ndef maximum(self):\nreturn self._max_value\n# SETTERS -------------------------------------------------------\ndef set_null_position(self, position: RoundProgressBar.Position):\nif position != self.null_pos:\nself.null_pos = position\nself._rebuild_brush = True\nself.update()\ndef get_null_position(self):\nreturn self.null_pos\ndef set_bar_style(self, style: BarStyleStr | RoundProgressBar.BarStyle):\nif isinstance(style, str):\nBAR_STYLE = dict(\ndonut=RoundProgressBar.BarStyle.Donut,\npie=RoundProgressBar.BarStyle.Pie,\nline=RoundProgressBar.BarStyle.Line,\nexpand=RoundProgressBar.BarStyle.Expand,\n)\nstyle = BAR_STYLE[style]\nif style != self.bar_style:\nself.bar_style = style\nself._rebuild_brush = True\nself.update()\ndef set_outline_pen_width(self, width: float):\nif width != self.outline_pen_width:\nself.outline_pen_width = width\nself.update()\ndef set_data_pen_width(self, width: float):\nif width != self.data_pen_width:\nself.data_pen_width = width\nself.update()\ndef set_data_colors(self, stop_points: list[gui.QColor]):\nif stop_points != self.gradient_data:\nself.gradient_data = stop_points\nself._rebuild_brush = True\nself.update()\ndef set_format(self, val: str):\nif val != self.number_format:\nself.number_format = val\nself._value_format_changed()\ndef set_decimals(self, count: int):\nif count &gt;= 0 and count != self.decimals:\nself.decimals = count\nself._value_format_changed()\n# SLOTS ---------------------------------------------------------\n@core.Slot(float, float)\ndef set_range(self, minval: float, maxval: float):\nself._min_value = min(minval, maxval)\nself._max_value = max(minval, maxval)\nself.current_value = min(\nself._max_value, max(self._min_value, self.current_value)\n)\nself._rebuild_brush = True\nself.update()\n@core.Slot(float)\ndef setMinimum(self, val: float):\nself.set_range(val, self._max_value)\n@core.Slot(float)\ndef setMaximum(self, val: float):\nself.set_range(self._min_value, val)\n@core.Slot(float)\ndef set_value(self, val: float):\nif self.current_value != val:\nself.current_value = min(self._max_value, max(self._min_value, val))\nself.update()\ndef get_value(self) -&gt; float:\nreturn self.current_value\n# PAINTING ------------------------------------------------------\ndef paintEvent(self, event: gui.PaintEvent):\nouter_radius = min(self.width(), self.height())\nrect = core.RectF(1, 1, outer_radius - 2, outer_radius - 2)\nwith gui.Painter(self) as painter:\npainter.use_antialiasing()\nif self.bar_style != self.BarStyle.Line:\nself._rebuild_data_brush_if_needed()\npainter.fillRect(0, 0, outer_radius, outer_radius, self.palette().window())\nself._draw_base(painter, rect)\nself._draw_value(painter, rect, self.current_value)\ninner_rect, inner_radius = self._calculate_inner_rect(outer_radius)\nself._draw_inner_background(painter, inner_rect)\nself._draw_text(painter, inner_rect, inner_radius, self.current_value)\ndef _draw_base(self, painter: gui.Painter, rect: core.RectF):\nmatch self.bar_style:\ncase self.BarStyle.Donut:\ncolor = self.palette().shadow().color()\npainter.set_pen(color=color, width=self.outline_pen_width)\npainter.setBrush(self.palette().base())\npainter.drawEllipse(rect)\ncase self.BarStyle.Line:\nbase_color = self.palette().base().color()\npainter.set_pen(color=base_color, width=self.outline_pen_width)\npainter.setBrush(constants.BrushStyle.NoBrush)\nwidth = self.outline_pen_width / 2\nadjusted = rect.adjusted(width, width, -width, -width)\npainter.drawEllipse(adjusted)\ncase self.BarStyle.Pie | self.BarStyle.Expand:\nbase_color = self.palette().base().color()\npainter.set_pen(color=base_color, width=self.outline_pen_width)\npainter.setBrush(self.palette().base())\npainter.drawEllipse(rect)\ndef _draw_value(self, painter: gui.Painter, rect: core.RectF, value: float):\nif value == self._min_value:\nreturn\ndiff = self.current_value - self._min_value\nvalue_range = self._max_value - self._min_value\ndelta = max(value_range / diff, 0)\nmatch self.bar_style:\ncase self.BarStyle.Expand:\npainter.setBrush(self.palette().highlight())\ncolor = self.palette().shadow().color()\npainter.set_pen(color=color, width=self.data_pen_width)\nradius = (rect.height() / 2) / delta\npainter.drawEllipse(rect.center(), radius, radius)\ncase self.BarStyle.Line:\ncolor = self.palette().highlight().color()\npainter.set_pen(color=color, width=self.data_pen_width)\npainter.setBrush(constants.BrushStyle.NoBrush)\npen_width = self.outline_pen_width / 2\nadjusted = rect.adjusted(pen_width, pen_width, -pen_width, -pen_width)\nif value == self._max_value:\npainter.drawEllipse(adjusted)\nelse:\narc_length = 360 / delta\narc_length = int(-arc_length * 16)\npainter.drawArc(adjusted, int(self.null_pos * 16), arc_length)\ncase self.BarStyle.Donut | self.BarStyle.Pie:\ndata_path = gui.PainterPath()\ndata_path.set_fill_rule(\"winding\")\nif value == self._max_value:\ndata_path.addEllipse(rect)\nelse:\narc_length = 360 / delta\ncenter_point = rect.center()\ndata_path.moveTo(center_point)\ndata_path.arcTo(rect, self.null_pos, -arc_length)\ndata_path.lineTo(center_point)\npainter.setBrush(self.palette().highlight())\nshadow_color = self.palette().shadow().color()\npainter.set_pen(color=shadow_color, width=self.data_pen_width)\npainter.drawPath(data_path)\ndef _calculate_inner_rect(self, outer_radius: float) -&gt; tuple[core.RectF, float]:\nif self.bar_style in (self.BarStyle.Line, self.BarStyle.Expand):\ninner_radius = outer_radius - self.outline_pen_width\nelse:\ninner_radius = outer_radius * 0.75\ndelta = (outer_radius - inner_radius) / 2\ninner_rect = core.RectF(delta, delta, inner_radius, inner_radius)\nreturn inner_rect, inner_radius\ndef _draw_inner_background(self, painter: gui.Painter, inner_rect: core.RectF):\nif self.bar_style == self.BarStyle.Donut:\npainter.setBrush(self.palette().base())\npainter.drawEllipse(inner_rect)\ndef _draw_text(\nself,\npainter: gui.Painter,\ninner_rect: core.RectF,\ninner_radius: float,\nvalue: float,\n):\nif not self.number_format:\nreturn\nfont = self.get_font()\nfont.setPixelSize(10)\nmetrics = gui.FontMetricsF(font)\nmax_width = metrics.horizontalAdvance(self._value_to_text(self._max_value))\ndelta = inner_radius / max_width\nfont_size = int(font.pixelSize() * delta * 0.75)\nfont.setPixelSize(max(font_size, 1))\npainter.setFont(font)\npainter.setPen(self.palette().text().color())\ntext = self._value_to_text(value)\npainter.drawText(inner_rect, constants.ALIGN_CENTER, text)  # type: ignore\ndef _value_to_text(self, value: float) -&gt; str:\ntext_to_draw = self.number_format\nmatch self._update_flags:\ncase \"value\":\nval = round(value, self.decimals)\nreturn text_to_draw.replace(r\"%v\", str(val))\ncase \"percent\":\ndiff = self._max_value - self._min_value\npct = (value - self._min_value) / diff * 100\nval = round(pct, self.decimals)\nreturn text_to_draw.replace(r\"%p\", str(val))\ncase \"max\":\nval = round(self._max_value - self._min_value + 1, self.decimals)\nreturn text_to_draw.replace(r\"%m\", str(val))\ncase _:\nraise ValueError(self._update_flags)\ndef _value_format_changed(self):\nfor k, v in VALUE_MAP.items():\nif k in self.number_format:\nself._update_flags = v\nself.update()\ndef _rebuild_data_brush_if_needed(self):\nif not self._rebuild_brush or not self.gradient_data:\nreturn\nself._rebuild_brush = False\nif self.bar_style == \"expand\":\ndata_brush = gui.RadialGradient(0.5, 0.5, 0.5, 0.5, 0.5)\nfor i in self.gradient_data:\ndata_brush[i[0]] = i[1]\nelse:\ndata_brush = gui.ConicalGradient(0.5, 0.5, self.null_pos)\nfor i in self.gradient_data:\ndata_brush[1 - i[0]] = i[1]\ndata_brush.set_coordinate_mode(\"stretch_to_device\")\nwith self.edit_palette() as palette:\npalette.set_brush(\"highlight\", data_brush)\nnullPosition = core.Property(\nenum.Enum,\nget_null_position,\nset_null_position,\ndoc=\"Position for value = 0\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.BarStyle","title":"<code>BarStyle</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Progress bar style.</p> Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>class BarStyle(enum.IntEnum):\n\"\"\"Progress bar style.\"\"\"\nDonut = 1\nPie = 2\nLine = 3\nExpand = 4\n</code></pre>"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.Position","title":"<code>Position</code>","text":"<p>             Bases: <code>float</code>, <code>enum.Enum</code></p> <p>Start position of progress bar in degrees.</p> Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>class Position(float, enum.Enum):\n\"\"\"Start position of progress bar in degrees.\"\"\"\nLeft = 180.0\nTop = 90.0\nRight = 0.0\nBottom = -90.0\n</code></pre>"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html#prettyqt.custom_widgets.roundprogressbar.RoundProgressBar.ValueType","title":"<code>ValueType</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Value type.</p> Source code in <code>prettyqt\\custom_widgets\\roundprogressbar.py</code> <pre><code>class ValueType(enum.IntEnum):\n\"\"\"Value type.\"\"\"\nvalue = 1\npercent = 2\nmaximum = 3\n</code></pre>"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261353808[\"custom_widgets.RoundProgressBar\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261353808\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/RoundProgressBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>nullPosition</code> PySide::PyObjectWrapper Position for value = 0"},{"location":"additional_modules/custom_widgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>custom_widgets</li> <li>LabeledSlider</li> <li>RegexInput</li> <li>SizeEdit</li> <li>AutoResizePlainTextEdit</li> <li>ImageViewer</li> <li>SpanSliderWidget</li> <li>IconBrowser</li> <li>ColorComboBox</li> <li>IconEdit</li> <li>ScrollAreaTocWidget</li> <li>StringListEdit</li> <li>VideoSample</li> <li>CodeEditor</li> <li>ColorChooserButton</li> <li>BrushEdit</li> <li>LogRecordTableView</li> <li>PreviewScrollBar</li> <li>FileChooserButton</li> <li>EnumFlagWidget</li> <li>SizePolicyEdit</li> <li>CollapsibleFrame</li> <li>AnnotatedScrollBar</li> <li>StandardIconsWidget</li> <li>FilterHeader</li> <li>PaletteEdit</li> <li>SliceEdit</li> <li>FlowLayout</li> <li>ElidedLabel</li> <li>SpanSlider</li> <li>SingleLineTextEdit</li> <li>ListInput</li> <li>FloatLineEdit</li> <li>ClickableLabel</li> <li>CrossFadeWidget</li> <li>AstViewer</li> <li>FlagSelectionWidget</li> <li>HierarchicalHeaderView</li> <li>MappedCheckBox</li> <li>RectEdit</li> <li>OrientedTableView</li> <li>SubsequenceCompleter</li> <li>LogTextEdit</li> <li>KeyCombinationEdit</li> <li>RegexLineEdit</li> <li>AutoResizeTextEdit</li> <li>FaderWidget</li> <li>BoolDictToolButton</li> <li>InputAndSlider</li> <li>IntLineEdit</li> <li>MultiComboBox</li> <li>RegionEdit</li> <li>BorderLayout</li> <li>Timeline</li> <li>ObjectBrowser</li> <li>RectFEdit</li> <li>QObjectHierarchyTreeView</li> <li>IconLabel</li> <li>RoundProgressBar</li> <li>CommandPalette</li> <li>EnumComboBox</li> <li>StringOrNumberWidget</li> <li>QObjectPropertiesTableView</li> <li>SmoothScrollBar</li> <li>MultiLineLayout</li> <li>FontChooserButton</li> <li>PopupInfo</li> <li>SidebarWidget</li> <li>LocaleEdit</li> <li>OptionalWidget</li> <li>IconWidget</li> <li>WaitingSpinner</li> <li>UrlLineEdit</li> <li>FileTree</li> <li>RangeEdit</li> <li>PointEdit</li> <li>WidgetEditor</li> <li>NumFilterWidget</li> <li>SelectionWidget</li> <li>CursorEdit</li> </ul>"},{"location":"additional_modules/custom_widgets/ScrollAreaTocWidget.html","title":"ScrollAreaTocWidget","text":"<p>Qt Base Class: QTreeView</p> <p>Signature: <code>QTreeView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/ScrollAreaTocWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>class ScrollAreaTocWidget(widgets.TreeView):\nsection_changed = core.Signal()\nScrollMode = ScrollMode\ncore.Enum(ScrollMode)\ndef __init__(\nself,\nscrollarea: widgets.QScrollArea,\norientation: constants.Orientation\n| constants.OrientationStr = constants.VERTICAL,\nwidget_class: type = widgets.QWidget,\n**kwargs,\n) -&gt; None:\n\"\"\"A TreeView which can show a Table-of-contents list based on a given ScrollArea.\n        With default settings, it will scan the widgets contained in the scrollArea for\n         a windowTitle.\n        These widgets will be shown in the TreeView, and the TreeView selection will be\n        synced to what is currently visible in the ScrollArea.\n        This basically emulates the behaviour of many websites\n        (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html])\n        or from VS code settings.\n        You can set up the Toc Tree by passing a ScrollArea instance:\n        ```py\n        widget = widgets.Widget()\n        layout = widget.set_layout(\"horizontal\")\n        scrollarea = widgets.ScrollArea()\n        # add some widgets to the ScrollArea here\n        # ...\n        toc = ScrollAreaTocWidget(scrollarea)\n        layout.add(toc)\n        layout.add(scrollarea)\n        ```\n        The Toc tree can be configured to use other properties for populating\n        than windowTitle.\n        You can also set a widget class filter if you only want a specific widget\n        class to be shown.\n        The widget supports 3 different scroll modes:\n        1) Single: Only one row in the Tree will be highlighted. (the one which equals\n        the topmost one from the scrollArea)\n        2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown.\n        3) HeadersOnly: like Single, but only highlights top-level widgets from the\n                        ScrollArea.\n        There are also two different expand modes to choose from:\n        1) ExpandAll: All subsections are always expanded.\n        2) on_focus: Only the section containing the focused item is expanded.\n        This widget is used by [ConfigWidget](configwidget.md).\n        \"\"\"\n# TODO: not sure if parent should always equal scrollarea...\"\"\"\nself._WidgetClass = widget_class\nself._scroll_mode = ScrollMode.Single\nself._always_expanded = False\nself._last_visible = None\nself.scrollarea = scrollarea\nsuper().__init__(scrollarea, **kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself.setFixedWidth(200)\nself.h_header.hide()\nself.h_header.setStretchLastSection(True)\nself.setAlternatingRowColors(False)\nself.setRootIsDecorated(False)\n# self.setStyleSheet(\n#     \"\"\"::item:hover {background: transparent; border-color:transparent}\n#     ::item:selected { border-color:transparent;\n#     border-style:outset; border-width:2px; color:black; }\"\"\"\n# )\nif self._orientation == constants.VERTICAL:\nscrollarea.v_scrollbar.valueChanged.connect(self._on_scroll)\nelse:\nscrollarea.h_scrollbar.valueChanged.connect(self._on_scroll)\nself.set_widget(scrollarea)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"scrollMode\": SCROLL_MODE}\nreturn maps\ndef showEvent(self, event):\nsuper().showEvent(event)\nself._on_scroll()\n@classmethod\ndef setup_example(cls):\nscrollarea = widgets.ScrollArea()\nw = widgets.Widget()\nscrollarea.set_widget(w)\nreturn cls(scrollarea)\ndef set_widget(self, widget: widgets.QScrollArea):\n\"\"\"Set the ScrollArea widget to follow.\"\"\"\nif widget.widget() is None:\nraise RuntimeError(\"No widget set on ScrollArea.\")\nself.scrollarea = widget\nmodel = ScrollAreaTocModel(\nwidget.widget(),\nshow_root=True,\nparent=self.scrollarea,\nwidget_class=self._WidgetClass,\n)\nself.set_model(model)\nself.proxy = self.proxifier.set_sort_filter_proxy(\nrecursive_filtering_enabled=True\n)\nself.proxy.set_filter_case_sensitive(False)\nself.show_root(False)\nwidget.widget().installEventFilter(self)\nself.selectionModel().currentRowChanged.connect(self._on_current_change)\nself.selectionModel().selectionChanged.connect(self._on_selection_change)\n# if self._always_expanded:\nself.expandAll()\ndef _on_current_change(self, new, old):\nif self.model() is None:\nreturn\nis_vertical = self._orientation == constants.VERTICAL\narea = self.scrollarea\nscrollbar = area.v_scrollbar if is_vertical else area.h_scrollbar\nwith self.signal_blocked(scrollbar.valueChanged, self._on_scroll):\nwidget = self.model().data(new, role=constants.USER_ROLE)\narea.scroll_to_bottom()\narea.ensureWidgetVisible(widget, 10, 10)\ndef _on_selection_change(self, new, old):\nif self.model() is None:\nreturn\nwidgets = [i.data(constants.USER_ROLE) for i in self.selected_indexes()]\nself.get_model(skip_proxies=True).set_highlighted_widgets(widgets)\ndef _on_scroll(self):\nmodel: ScrollAreaTocModel | None = self.model()\nif model is None:\nreturn\nvisible_widgets = self.scrollarea.get_visible_widgets(typ=self._WidgetClass)\nif not visible_widgets or visible_widgets == self._last_visible:\nreturn\nself._last_visible = visible_widgets\nsig = self.selectionModel().currentRowChanged\nwith self.signal_blocked(sig, self._on_current_change):\nself.select_index(None)\nif not self._always_expanded:\nself.collapseAll()\nmatch self.get_scroll_mode():\ncase \"multi\":\nindexes = model.search_tree(visible_widgets, constants.USER_ROLE)\nfor index in indexes:\nchildren = model.get_child_indexes(index)\n# only select if all children selected.\n# if all(c in indexes for c in children):\n# highlight when no children or when first child is visible.\nif not children or children[0] in indexes:\nself.select_index(index, clear=False)\nself.set_expanded(indexes)\nself.scroll_to(indexes[0])\nself.scroll_to(indexes[-1])\ncase \"headers_only\":\nif indexes := model.search_tree(\nvisible_widgets,\nrole=constants.USER_ROLE,\nmax_results=1,\n):\nself.set_current_index(indexes[0])\nself.scroll_to(indexes[0])\ncase \"single\":\nif indexes := model.search_tree(visible_widgets, constants.USER_ROLE):\nviewport = self.scrollarea.viewport()\n# sort indexes by closest distance to top\nindexes.sort(\nkey=lambda x: abs(\nx.data(constants.USER_ROLE)\n.map_to(viewport, x.data(constants.USER_ROLE).rect())\n.top()\n),\n)\nself.collapseAll()\nself.model().fetchMore(indexes[0])\nself.set_current_index(indexes[0])\nself.scroll_to(indexes[0])\ncase _:\nraise ValueError(self._scroll_mode)\n# model.set_highlighted_indexes(indexes)\ndef wheelEvent(self, e):\nself.scrollarea.wheelEvent(e)\ndef eventFilter(self, source: core.QObject, event: core.QEvent) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.ChildAdded:\nself._on_scroll()\nreturn False\ndef _scrollMode(self) -&gt; ScrollMode:\nreturn self._scroll_mode\ndef get_scroll_mode(self) -&gt; ScrollModeStr:\nreturn SCROLL_MODE.inverse[self._scrollMode()]\ndef set_scroll_mode(self, mode: ScrollMode | ScrollModeStr):\nself._scroll_mode = SCROLL_MODE.get_enum_value(mode)\ndef is_always_expanded(self) -&gt; bool:\nreturn self._always_expanded\ndef set_always_expanded(self, always_expanded: bool):\nself._always_expanded = always_expanded\nscrollMode = core.Property(\nenum.Enum,\n_scrollMode,\nset_scroll_mode,\ndoc=\"Scrolling mode\",\n)\nalways_expanded = core.Property(\nbool,\nis_always_expanded,\nset_always_expanded,\ndoc=\"Whether the tree is always expanded.\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ScrollAreaTocWidget.html#prettyqt.custom_widgets.scrollareatocwidget.ScrollAreaTocWidget.__init__","title":"<code>__init__(scrollarea: widgets.QScrollArea, orientation: constants.Orientation | constants.OrientationStr = constants.VERTICAL, widget_class: type = widgets.QWidget, **kwargs: type) -&gt; None</code>","text":"<p>A TreeView which can show a Table-of-contents list based on a given ScrollArea.</p> <p>With default settings, it will scan the widgets contained in the scrollArea for  a windowTitle. These widgets will be shown in the TreeView, and the TreeView selection will be synced to what is currently visible in the ScrollArea. This basically emulates the behaviour of many websites (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html]) or from VS code settings.</p> <p>You can set up the Toc Tree by passing a ScrollArea instance:</p> <pre><code>widget = widgets.Widget()\nlayout = widget.set_layout(\"horizontal\")\nscrollarea = widgets.ScrollArea()\n# add some widgets to the ScrollArea here\n# ...\ntoc = ScrollAreaTocWidget(scrollarea)\nlayout.add(toc)\nlayout.add(scrollarea)\n</code></pre> <p>The Toc tree can be configured to use other properties for populating than windowTitle. You can also set a widget class filter if you only want a specific widget class to be shown.</p> <p>The widget supports 3 different scroll modes:</p> <p>1) Single: Only one row in the Tree will be highlighted. (the one which equals the topmost one from the scrollArea) 2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown. 3) HeadersOnly: like Single, but only highlights top-level widgets from the                 ScrollArea.</p> <p>There are also two different expand modes to choose from:</p> <p>1) ExpandAll: All subsections are always expanded. 2) on_focus: Only the section containing the focused item is expanded.</p> <p>This widget is used by ConfigWidget.</p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>def __init__(\nself,\nscrollarea: widgets.QScrollArea,\norientation: constants.Orientation\n| constants.OrientationStr = constants.VERTICAL,\nwidget_class: type = widgets.QWidget,\n**kwargs,\n) -&gt; None:\n\"\"\"A TreeView which can show a Table-of-contents list based on a given ScrollArea.\n    With default settings, it will scan the widgets contained in the scrollArea for\n     a windowTitle.\n    These widgets will be shown in the TreeView, and the TreeView selection will be\n    synced to what is currently visible in the ScrollArea.\n    This basically emulates the behaviour of many websites\n    (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html])\n    or from VS code settings.\n    You can set up the Toc Tree by passing a ScrollArea instance:\n    ```py\n    widget = widgets.Widget()\n    layout = widget.set_layout(\"horizontal\")\n    scrollarea = widgets.ScrollArea()\n    # add some widgets to the ScrollArea here\n    # ...\n    toc = ScrollAreaTocWidget(scrollarea)\n    layout.add(toc)\n    layout.add(scrollarea)\n    ```\n    The Toc tree can be configured to use other properties for populating\n    than windowTitle.\n    You can also set a widget class filter if you only want a specific widget\n    class to be shown.\n    The widget supports 3 different scroll modes:\n    1) Single: Only one row in the Tree will be highlighted. (the one which equals\n    the topmost one from the scrollArea)\n    2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown.\n    3) HeadersOnly: like Single, but only highlights top-level widgets from the\n                    ScrollArea.\n    There are also two different expand modes to choose from:\n    1) ExpandAll: All subsections are always expanded.\n    2) on_focus: Only the section containing the focused item is expanded.\n    This widget is used by [ConfigWidget](configwidget.md).\n    \"\"\"\n# TODO: not sure if parent should always equal scrollarea...\"\"\"\nself._WidgetClass = widget_class\nself._scroll_mode = ScrollMode.Single\nself._always_expanded = False\nself._last_visible = None\nself.scrollarea = scrollarea\nsuper().__init__(scrollarea, **kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself.setFixedWidth(200)\nself.h_header.hide()\nself.h_header.setStretchLastSection(True)\nself.setAlternatingRowColors(False)\nself.setRootIsDecorated(False)\n# self.setStyleSheet(\n#     \"\"\"::item:hover {background: transparent; border-color:transparent}\n#     ::item:selected { border-color:transparent;\n#     border-style:outset; border-width:2px; color:black; }\"\"\"\n# )\nif self._orientation == constants.VERTICAL:\nscrollarea.v_scrollbar.valueChanged.connect(self._on_scroll)\nelse:\nscrollarea.h_scrollbar.valueChanged.connect(self._on_scroll)\nself.set_widget(scrollarea)\n</code></pre>"},{"location":"additional_modules/custom_widgets/ScrollAreaTocWidget.html#prettyqt.custom_widgets.scrollareatocwidget.ScrollAreaTocWidget.set_widget","title":"<code>set_widget(widget: widgets.QScrollArea)</code>","text":"<p>Set the ScrollArea widget to follow.</p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>def set_widget(self, widget: widgets.QScrollArea):\n\"\"\"Set the ScrollArea widget to follow.\"\"\"\nif widget.widget() is None:\nraise RuntimeError(\"No widget set on ScrollArea.\")\nself.scrollarea = widget\nmodel = ScrollAreaTocModel(\nwidget.widget(),\nshow_root=True,\nparent=self.scrollarea,\nwidget_class=self._WidgetClass,\n)\nself.set_model(model)\nself.proxy = self.proxifier.set_sort_filter_proxy(\nrecursive_filtering_enabled=True\n)\nself.proxy.set_filter_case_sensitive(False)\nself.show_root(False)\nwidget.widget().installEventFilter(self)\nself.selectionModel().currentRowChanged.connect(self._on_current_change)\nself.selectionModel().selectionChanged.connect(self._on_selection_change)\n# if self._always_expanded:\nself.expandAll()\n</code></pre>"},{"location":"additional_modules/custom_widgets/ScrollAreaTocWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261349008[\"custom_widgets.ScrollAreaTocWidget\"]\n  2103261413328[\"widgets.TreeView\"]\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259814960[\"QtWidgets.QTreeView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261413328 --&gt; 2103261349008\n  2103261405648 --&gt; 2103261413328\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259814960 --&gt; 2103261413328\n  2103259770800 --&gt; 2103259814960\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/ScrollAreaTocWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>autoExpandDelay</code> int <code>indentation</code> int <code>rootIsDecorated</code> bool <code>uniformRowHeights</code> bool <code>itemsExpandable</code> bool <code>sortingEnabled</code> bool <code>animated</code> bool <code>allColumnsShowFocus</code> bool <code>wordWrap</code> bool <code>headerHidden</code> bool <code>expandsOnDoubleClick</code> bool <code>scrollMode</code> PySide::PyObjectWrapper Scrolling mode <code>always_expanded</code> bool Whether the tree is always expanded."},{"location":"additional_modules/custom_widgets/SelectionWidget.html","title":"SelectionWidget","text":"<p>Qt Base Class: QGroupBox</p> <p>Signature: <code>QGroupBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QGroupBox(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SelectionWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\selectionwidget.py</code> <pre><code>class SelectionWidget(widgets.GroupBox):\nvalue_changed = core.Signal(object)\ndef __init__(\nself,\nlabel: str = \"\",\nlayout: constants.OrientationStr = \"horizontal\",\nobject_name: str = \"selection_widget\",\n**kwargs,\n):\nsuper().__init__(title=label, object_name=object_name, **kwargs)\nself.set_layout(layout)\nself.widget_custom: widgets.Widget | None = None\nself.rb_other = widgets.RadioButton()\nself.buttons: dict[widgets.RadioButton, Any] = {}\ndef __iter__(self) -&gt; Iterator[tuple[widgets.RadioButton, Any]]:\nreturn iter(self.buttons.items())\ndef add_items(self, items: Iterable | Mapping):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.add(v, k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.add(i)\ndef select_radio_by_data(self, value):\nfor rb, data in self.buttons.items():\nif data == value:\nrb.setChecked(True)\nbreak\ndef add(self, title: str, data=None, icon: datatypes.IconType = None):\n# TODO: make use of icon kwarg\nrb = widgets.RadioButton(title)\nrb.toggled.connect(self.update_choice)\nself.buttons[rb] = data\nif len(self.buttons) == 1:\nwith rb.signals_blocked():\nrb.set_value(True)\nself.box.add(rb)\ndef add_tooltip_icon(self, text: str):\nlabel = widgets.Label(text)\nlabel.setToolTip(text)\nicon = iconprovider.get_icon(\"mdi.help-circle-outline\")\npixmap = icon.pixmap(20, 20)\nlabel.setPixmap(pixmap)\nself.box.add(label)\ndef add_custom(\nself,\nlabel: str = \"Other\",\ntyp: TypeStr = \"string\",\ndefault: None | float | str = None,\nregex: str | None = None,\n):\nmatch typ:\ncase \"string\":\nself.widget_custom = widgets.LineEdit()\ncase \"int\":\nself.widget_custom = widgets.SpinBox()\ncase \"float\":\nself.widget_custom = widgets.DoubleSpinBox()\ncase _:\nraise ValueError(typ)\n# TODO: Enable this or add BAR radio and option.\nself.widget_custom.set_disabled()  # type: ignore\nif default is not None:\nself.widget_custom.set_value(default)  # type: ignore\nself.rb_other.setText(label)\nself.rb_other.toggled.connect(self.widget_custom.set_enabled)  # type: ignore\nself.widget_custom.value_changed.connect(  # type: ignore\nlambda: self.update_choice(True)\n)\nif regex and typ == \"string\":\nself.widget_custom.set_regex_validator(regex)  # type: ignore\nlayout = widgets.HBoxLayout()\nlayout.add(self.rb_other)\nlayout.add(self.widget_custom)\nself.box.add(layout)\ndef current_choice(self) -&gt; Any:\nfor k, v in self.buttons.items():\nif k.isChecked():\nreturn v\nif self.rb_other.isChecked() and self.widget_custom is not None:\nreturn self.widget_custom.get_value()\nreturn None\n@core.Slot(bool)\ndef update_choice(self, checked: bool):\nif not checked:\nreturn\nif (choice := self.current_choice()) is not None:\nself.value_changed.emit(choice)\ndef set_value(self, value):\nself.select_radio_by_data(value)\ndef get_value(self):\nreturn self.current_choice()\n</code></pre>"},{"location":"additional_modules/custom_widgets/SelectionWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261339408[\"custom_widgets.SelectionWidget\"]\n  2103261445008[\"widgets.GroupBox\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259738160[\"QtWidgets.QGroupBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261445008 --&gt; 2103261339408\n  2103261127360 --&gt; 2103261445008\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259738160 --&gt; 2103261445008\n  2103259691120 --&gt; 2103259738160\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SelectionWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>alignment</code> QFlags <code>flat</code> bool <code>checkable</code> bool <code>checked</code> bool"},{"location":"additional_modules/custom_widgets/SidebarWidget.html","title":"SidebarWidget","text":"<p>Qt Base Class: QMainWindow</p> <p>Signature: <code>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SidebarWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.MainWindow</code></p> Source code in <code>prettyqt\\custom_widgets\\sidebarwidget.py</code> <pre><code>class SidebarWidget(widgets.MainWindow):\nSETTINGS_BUTTON_HEIGHT = 28\ndef __init__(\nself,\n*args,\nshow_settings: bool = False,\nmain_layout: widgets.widget.LayoutStr | widgets.QLayout = \"vertical\",\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._button_width = 100\nself._style: constants.ToolButtonStyleStr = \"text_below_icon\"\nself.button_map: dict[widgets.QWidget, widgets.QToolButton] = {}\nself.icon_map: dict[widgets.QWidget, gui.Icon] = {}\nself.sidebar = widgets.ToolBar(\ncontext_menu_policy=\"prevent\",\nfloatable=True,\nobject_name=\"SidebarWidget\",\nwindow_title=\"Sidebar\",\n)\nself.sidebar.set_style(self._style)\nself.sidebar.set_allowed_areas(\"all\")\nself.settings_menu = widgets.Menu()\nself.sidebar.set_icon_size(int(self._button_width * 0.7))\nif show_settings:\nself.settings_btn = self.sidebar.add_menu_button(\n\"\", icon=\"mdi.wrench\", menu=self.settings_menu\n)\nself.settings_btn.setFixedSize(\nself._button_width, self.SETTINGS_BUTTON_HEIGHT\n)\nself.settings_btn.set_style(\"icon\")\nself.sidebar.orientationChanged.connect(self._on_orientation_change)\nself.sidebar.add_separator()\nself.spacer_action = self.sidebar.add_spacer()\nself.add_toolbar(self.sidebar, \"left\")\nself.area = widgets.Widget()\nself.area.set_layout(\"stacked\")\nw = widgets.Widget()\nw.set_layout(main_layout)\nself.main_layout = w.box\nself.main_layout.set_margin(0)\nself.main_layout += self.area\nself.setCentralWidget(w)\ndef _on_orientation_change(self, orientation: constants.Orientation):\nif orientation == constants.HORIZONTAL:\nself.settings_btn.setFixedSize(34, 34)\nelse:\nself.settings_btn.setFixedSize(\nself._button_width, self.SETTINGS_BUTTON_HEIGHT\n)\ndef add_tab(\nself,\nitem: widgets.QWidget,\ntitle: str,\nicon: datatypes.IconType | None = None,\nshow: bool = False,\nshortcut: str | None = None,\narea: AreaStr = \"top\",\n):\nself.area.box.add(item)\nact = gui.Action(\ntext=title,\nicon=icon,\nshortcut=shortcut or \"\",\nparent=self.sidebar,\ncheckable=True,\ntriggered=lambda: self.set_tab(item),\n)\nself.addAction(act)\nbutton = widgets.ToolButton(self.sidebar)\nbutton.setDefaultAction(act)\nbutton.setFixedWidth(self._button_width)\nbutton.set_style(self._style)\nif area == \"top\":\nself.sidebar.insertWidget(self.spacer_action, button)\nelse:\nself.sidebar.addWidget(button)\nif len(self.area.box) == 1:\nbutton.setChecked(True)\nself.button_map[item] = button\nself.icon_map[item] = iconprovider.get_icon(icon)\nif show:\nself.area.box.setCurrentWidget(item)\ndef set_marker(\nself, item: str | int | widgets.Widget, color: datatypes.ColorType = \"red\"\n):\nwidget = item if isinstance(item, widgets.QWidget) else self._get_widget(item)\nif widget == self._get_current_widget():\nreturn\ntemplate = self.icon_map[widget]\npx = template.pixmap(100, 100)\nwith gui.Painter(px) as painter:\ndot = gui.Pixmap.create_dot(color)\npainter.drawPixmap(0, 0, dot)\nicon = gui.Icon(px)\nself.button_map[widget].setIcon(icon)\ndef _get_widget(self, item: str | int | widgets.Widget):\n\"\"\"Returns widget page specified by name, offset or content.\"\"\"\nmatch item:\ncase int():\nreturn self.area.box[item]\ncase str():\nw = self.area.find_child(widgets.QWidget, name=item, recursive=False)\nif w not in self.area.box:\nraise ValueError(\"Layout does not contain the chosen widget\")\nreturn w\ncase _:\nraise TypeError(item)\ndef _get_current_widget(self) -&gt; widgets.QWidget:\n\"\"\"Returns the currently selected widget page.\"\"\"\nfor k, v in self.button_map.items():\nif v.isChecked():\nreturn k\nraise RuntimeError(\"no page activated.\")\ndef set_tab(self, item: str | int | widgets.QWidget):\nwidget = item if isinstance(item, widgets.QWidget) else self._get_widget(item)\ncurrent = self.area.box.currentWidget()\nself.button_map[current].setChecked(False)\nself.area.box.setCurrentWidget(widget)\nself.button_map[widget].setChecked(True)\ndef add_spacer(self) -&gt; gui.QAction:\nreturn self.sidebar.add_spacer()\ndef add_separator(self, text: str | None = None, area: AreaStr = \"top\"):\nif area == \"top\":\nself.sidebar.add_separator(text, before=self.spacer_action)\nelse:\nself.sidebar.add_separator(text)\ndef add_action(self, *args, area: AreaStr = \"top\", **kwargs):\nact = args[0] if args else gui.Action(**kwargs)\nself.addAction(act)\nbutton = widgets.ToolButton(self.sidebar)\nbutton.setDefaultAction(act)\nbutton.setFixedWidth(self._button_width)\nbutton.set_style(self._style)\nif area == \"top\":\nself.sidebar.insertWidget(self.spacer_action, button)\nelse:\nself.sidebar.addWidget(button)\nreturn act\n</code></pre>"},{"location":"additional_modules/custom_widgets/SidebarWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261329808[\"custom_widgets.SidebarWidget\"]\n  2103261245440[\"widgets.MainWindow\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259730480[\"QtWidgets.QMainWindow\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261245440 --&gt; 2103261329808\n  2103261127360 --&gt; 2103261245440\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259730480 --&gt; 2103261245440\n  2103259691120 --&gt; 2103259730480\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SidebarWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>animated</code> bool <code>documentMode</code> bool <code>tabShape</code> QTabWidget::TabShape <code>dockNestingEnabled</code> bool <code>dockOptions</code> QFlags <code>unifiedTitleAndToolBarOnMac</code> bool"},{"location":"additional_modules/custom_widgets/SingleLineTextEdit.html","title":"SingleLineTextEdit","text":"<p>Qt Base Class: QPlainTextEdit</p> <p>Signature: <code>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SingleLineTextEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.PlainTextEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\singlelinetextedit.py</code> <pre><code>class SingleLineTextEdit(widgets.PlainTextEdit):\ndef __init__(self, *args, object_name: str = \"singleline_textedit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.textChanged.connect(self._on_text_changed)\nfont_metrics = self.get_font_metrics()\nrow_height = font_metrics.lineSpacing()\nself.setFixedHeight(int(row_height * 1.5))\nself.set_size_policy(vertical=\"fixed\")\nself.set_line_wrap_mode(\"none\")\nself.set_scrollbar_policy(\"always_off\")\ndef _on_text_changed(self):\ntext = self.text()\nwith self.selecter.current_cursor() as c:\npos = c.position()\nnum_linebreaks = text.count(\"\\n\")\nwith self.signals_blocked():\nself.set_text(text.replace(\"\\n\", \"\"))\nc.setPosition(pos - num_linebreaks)\n</code></pre> Name Children Inherits RegexLineEditprettyqt.custom_widgets.editors.regexlineedit <ul><li>SingleLineTextEdit</li></ul>"},{"location":"additional_modules/custom_widgets/SingleLineTextEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261564048[\"custom_widgets.SingleLineTextEdit\"]\n  2103261367248[\"widgets.PlainTextEdit\"]\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259771760[\"QtWidgets.QPlainTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261367248 --&gt; 2103261564048\n  2103261397968 --&gt; 2103261367248\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259771760 --&gt; 2103261367248\n  2103259751600 --&gt; 2103259771760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SingleLineTextEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QPlainTextEdit::LineWrapMode <code>readOnly</code> bool <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>blockCount</code> int <code>maximumBlockCount</code> int <code>backgroundVisible</code> bool <code>centerOnScroll</code> bool <code>placeholderText</code> QString <code>current_line_color</code> QColor Color to use for current line highlighting <code>validation_color</code> QColor Color to use for invalid text"},{"location":"additional_modules/custom_widgets/SizeEdit.html","title":"SizeEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SizeEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\sizeedit.py</code> <pre><code>class SizeEdit(widgets.Widget):\nvalue_changed = core.Signal(core.Size)\ndef __init__(self, *args, object_name: str = \"size_edit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_margin(0)\nself.spinbox_width = widgets.SpinBox(maximum=999999)\nself.spinbox_height = widgets.SpinBox(maximum=999999)\nlayout = self.set_layout(\"horizontal\", margin=0)\nlayout.add(widgets.Label(\"width\", alignment=\"center_right\"))\nlayout.add(self.spinbox_width)\nlayout.add(widgets.Label(\"height\", alignment=\"center_right\"))\nlayout.add(self.spinbox_height)\nself.spinbox_width.value_changed.connect(self._on_value_change)\nself.spinbox_height.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Size:\nreturn core.Size(\nself.spinbox_width.get_value(),\nself.spinbox_height.get_value(),\n)\ndef set_value(self, value: datatypes.SizeType):\nif isinstance(value, tuple):\nvalue = core.Size(*value)\nself._value = value\nself.spinbox_width.set_value(value.width())\nself.spinbox_height.set_value(value.height())\nvalue = core.Property(\ncore.Size,\nget_value,\nset_value,\nuser=True,\ndoc=\"Current value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SizeEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261561168[\"custom_widgets.SizeEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261561168\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SizeEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QSize Current value"},{"location":"additional_modules/custom_widgets/SizePolicyEdit.html","title":"SizePolicyEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SizePolicyEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\sizepolicyedit.py</code> <pre><code>class SizePolicyEdit(widgets.Widget):\nvalue_changed = core.Signal(widgets.QSizePolicy)\ndef __init__(self, *args, object_name: str = \"sizepolicy_edit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_margin(0)\nself.cb_horizontal = widgets.ComboBox()\nself.cb_vertical = widgets.ComboBox()\nself.cb_control_type = widgets.ComboBox()\nlayout = self.set_layout(\"horizontal\", margin=0)\nlayout.add(widgets.Label(\"Horizontal:\", alignment=\"center_right\"))\nlayout.add(self.cb_horizontal)\nlayout.add(widgets.Label(\"Vertical:\", alignment=\"center_right\"))\nlayout.add(self.cb_vertical)\nlayout.add(widgets.Label(\"Control type:\", alignment=\"center_right\"))\nlayout.add(self.cb_control_type)\nself.cb_vertical.add_items(widgets.sizepolicy.SIZE_POLICY.keys())\nself.cb_horizontal.add_items(widgets.sizepolicy.SIZE_POLICY.keys())\nself.cb_control_type.add_items(widgets.sizepolicy.CONTROL_TYPE.keys())\nself.cb_horizontal.value_changed.connect(self._on_value_change)\nself.cb_vertical.value_changed.connect(self._on_value_change)\nself.cb_control_type.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; core.Point:\npolicy = widgets.SizePolicy()\npolicy.set_horizontal_policy(self.cb_horizontal.get_value())\npolicy.set_vertical_policy(self.cb_vertical.get_value())\npolicy.set_control_type(self.cb_control_type.get_value())\nreturn policy\ndef set_value(self, value: widgets.QSizePolicy):\nself._value = value\nself.cb_horizontal.set_value(\nwidgets.sizepolicy.SIZE_POLICY.inverse[value.horizontalPolicy()]\n)\nself.cb_vertical.set_value(\nwidgets.sizepolicy.SIZE_POLICY.inverse[value.verticalPolicy()]\n)\nself.cb_control_type.set_value(\nwidgets.sizepolicy.CONTROL_TYPE.inverse[value.controlType()]\n)\nvalue = core.Property(\nwidgets.QSizePolicy,\nget_value,\nset_value,\nuser=True,\ndoc=\"Current value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SizePolicyEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261563088[\"custom_widgets.SizePolicyEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261563088\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SizePolicyEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>value</code> QSizePolicy Current value"},{"location":"additional_modules/custom_widgets/SliceEdit.html","title":"SliceEdit","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SliceEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> <p>Simple editor to edit slices.</p> Source code in <code>prettyqt\\custom_widgets\\editors\\sliceedit.py</code> <pre><code>class SliceEdit(widgets.Widget):\n\"\"\"Simple editor to edit slices.\"\"\"\nvalue_changed = core.Signal(slice)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_margin(0)\nself.checkbox_start = widgets.CheckBox()\nself.checkbox_stop = widgets.CheckBox()\nself.checkbox_step = widgets.CheckBox()\nself.spinbox_start = widgets.SpinBox(maximum=999999)\nself.spinbox_stop = widgets.SpinBox(maximum=999999)\nself.spinbox_step = widgets.SpinBox(maximum=999999)\nlayout = self.set_layout(\"horizontal\", margin=0)\nlayout.add(widgets.Label(\"Start\", alignment=\"center_right\"))\nlayout.add(self.checkbox_start)\nlayout.add(self.spinbox_start)\nlayout.add(widgets.Label(\"Stop\", alignment=\"center_right\"))\nlayout.add(self.checkbox_stop)\nlayout.add(self.spinbox_stop)\nlayout.add(widgets.Label(\"Step\", alignment=\"center_right\"))\nlayout.add(self.checkbox_step)\nlayout.add(self.spinbox_step)\nself.checkbox_start.value_changed.connect(self.spinbox_start.setEnabled)\nself.checkbox_stop.value_changed.connect(self.spinbox_stop.setEnabled)\nself.checkbox_step.value_changed.connect(self.spinbox_step.setEnabled)\nself.spinbox_start.value_changed.connect(self._on_value_change)\nself.spinbox_stop.value_changed.connect(self._on_value_change)\nself.spinbox_step.value_changed.connect(self._on_value_change)\ndef _on_value_change(self):\nself._value = self.get_value()\nself.value_changed.emit(self._value)\ndef get_value(self) -&gt; slice:\nreturn slice(\nself.spinbox_start.get_value(),\nself.spinbox_stop.get_value(),\nself.spinbox_step.get_value(),\n)\ndef set_value(self, value: slice | tuple[int | None, int | None, int | None]):\nif isinstance(value, tuple):\nvalue = slice(*value)\nself.checkbox_start.set_value(value.start is not None)\nself.checkbox_stop.set_value(value.stop is not None)\nself.checkbox_step.set_value(value.step is not None)\nself.spinbox_start.setEnabled(value.start is not None)\nself.spinbox_stop.setEnabled(value.stop is not None)\nself.spinbox_step.setEnabled(value.step is not None)\nif value.start is not None:\nself.spinbox_start.set_value(value.start)\nif value.stop is not None:\nself.spinbox_stop.set_value(value.stop)\nif value.step is not None:\nself.spinbox_step.set_value(value.step)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SliceEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261309648[\"custom_widgets.SliceEdit\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261309648\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SliceEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/SmoothScrollBar.html","title":"SmoothScrollBar","text":"<p>Qt Base Class: QScrollBar</p> <p>Signature: <code>QScrollBar(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QScrollBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SmoothScrollBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ScrollBar</code></p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\smoothscrollbar.py</code> <pre><code>class SmoothScrollBar(widgets.ScrollBar):\nscroll_ended = core.Signal()\ndef __init__(\nself,\norientation: constants.Orientation | constants.OrientationStr = \"horizontal\",\nparent: widgets.QAbstractScrollArea | None = None,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr | core.QEasingCurve.Type = \"out_cubic\",\ntrigger: bool = False,\n):\nsuper().__init__(orientation, parent)\nself._value = self.value()\nself.widget = parent\nself._animation = core.PropertyAnimation()\nself._animation.apply_to(self.value)\nself._animation.set_easing(easing)\nself._animation.setDuration(animation_duration)\nself._animation.finished.connect(self.scroll_ended)\nself.widget.viewport().installEventFilter(self)\nif trigger:\nself.widget.h_scrollbar.valueChanged.connect(gui.Cursor.fake_mouse_move)\ndef mouseMoveEvent(self, e):\nself._animation.stop()\nself._value = self.value()\nsuper().mouseMoveEvent(e)\ndef mousePressEvent(self, e):\nself._animation.stop()\nself._value = self.value()\nsuper().mousePressEvent(e)\ndef mouseReleaseEvent(self, e):\nself._animation.stop()\nself._value = self.value()\nsuper().mouseReleaseEvent(e)\ndef setValue(self, value: int):\nif value == self.value():\nreturn\nself._animation.stop()\nself.scroll_ended.emit()\nself._animation.set_range(self.value(), value)\nself._animation.start()\ndef scroll_by_value(self, value: int):\n\"\"\"Scroll by given distance.\"\"\"\nself._value += value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\ndef scroll_to(self, value: int):\n\"\"\"Scroll to given position.\"\"\"\nself._value = value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\ndef reset_value(self, value):\nself._value = value\ndef eventFilter(self, source, event) -&gt; bool:\nif event.type() == core.Event.Type.Wheel and source == self.widget.viewport():\nself.widget.v_scrollbar.scroll_by_value(-event.angleDelta().y())\nreturn True\nreturn False\ndef set_animation_duration(self, duration: int):\nself._animation.setDuration(duration)\ndef get_animation_duration(self) -&gt; int:\nreturn self._animation.duration()\ndef set_animation_easing(\nself,\neasing: core.easingcurve.TypeStr | core.QEasingCurve.Type = \"out_cubic\",\n):\nself._animation.set_easing(easing)\ndef get_animation_easing(self) -&gt; core.easingcurve.TypeStr:\nreturn self._animation.get_easing()\ndef animationEasing(self) -&gt; core.QEasingCurve.Type:\nreturn self._animation.type()\nanimation_duration = core.Property(\nint,\nset_animation_duration,\nget_animation_duration,\ndoc=\"Duration for the animation\",\n)\nanimation_easing = core.Property(\ncore.EasingCurve.Type,\nset_animation_easing,\nget_animation_easing,\ndoc=\"Animation easing type\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SmoothScrollBar.html#prettyqt.custom_widgets.scrollbars.smoothscrollbar.SmoothScrollBar.scroll_by_value","title":"<code>scroll_by_value(value: int)</code>","text":"<p>Scroll by given distance.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\smoothscrollbar.py</code> <pre><code>def scroll_by_value(self, value: int):\n\"\"\"Scroll by given distance.\"\"\"\nself._value += value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SmoothScrollBar.html#prettyqt.custom_widgets.scrollbars.smoothscrollbar.SmoothScrollBar.scroll_to","title":"<code>scroll_to(value: int)</code>","text":"<p>Scroll to given position.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\smoothscrollbar.py</code> <pre><code>def scroll_to(self, value: int):\n\"\"\"Scroll to given position.\"\"\"\nself._value = value\nself._value = min(max(self.minimum(), self._value), self.maximum())\nself.setValue(self._value)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SmoothScrollBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261517968[\"custom_widgets.SmoothScrollBar\"]\n  2103261142720[\"widgets.ScrollBar\"]\n  2103261105280[\"widgets.ScrollBarMixin\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259913616[\"QtWidgets.QScrollBar\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261142720 --&gt; 2103261517968\n  2103261105280 --&gt; 2103261142720\n  2103261112000 --&gt; 2103261105280\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259913616 --&gt; 2103261142720\n  2103259932816 --&gt; 2103259913616\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SmoothScrollBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool <code>animation_duration</code> int Duration for the animation <code>animation_easing</code> PySide::PyObjectWrapper Animation easing type"},{"location":"additional_modules/custom_widgets/SpanSlider.html","title":"SpanSlider","text":"<p>Qt Base Class: QSlider</p> <p>Signature: <code>QSlider(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSlider(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SpanSlider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Slider</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\spanslider.py</code> <pre><code>class SpanSlider(widgets.Slider):\nvalue_changed = core.Signal(object)\nlower_pos_changed = core.Signal(float)\nupper_pos_changed = core.Signal(float)\nslider_pressed = core.Signal(object)\ndef __init__(self, *args, object_name: str = \"span_slider\", **kwargs):\nsuper().__init__(\"horizontal\", *args, object_name=object_name, **kwargs)\nself.rangeChanged.connect(self.update_range)\nself.sliderReleased.connect(self._move_pressed_handle)\nself.lower_val = 0.0\nself.upper_val = 0.0\nself.lower_pos = 0.0\nself.upper_pos = 0.0\nself.offset = 0\nself.position = 0.0\nself.last_pressed: str | None = None\nself.upper_pressed = widgets.Style.SubControl.SC_None\nself.lower_pressed = widgets.Style.SubControl.SC_None\nself.movement: MovementModeStr = \"no_crossing\"\nself._main_control: Literal[\"lower\", \"upper\"] = \"lower\"\nself._first_movement = False\nself._block_tracking = False\ndark_color = self.palette().color(gui.Palette.ColorRole.Dark)\nself.gradient_left = dark_color.lighter(110)\nself.gradient_right = dark_color.lighter(110)\ndef mousePressEvent(self, event):\nif self.minimum() == self.maximum() or event.buttons() ^ event.button():\nevent.ignore()\nreturn\nself.upper_pressed = self._handle_mouse_press(\nevent.position(), self.upper_pressed, self.upper_val, \"upper\"\n)\nif self.upper_pressed != HANDLE_STYLE:\nself.lower_pressed = self._handle_mouse_press(\nevent.position(), self.lower_pressed, self.lower_val, \"lower\"\n)\nself._first_movement = True\nevent.accept()\ndef mouseMoveEvent(self, event):\nif self.lower_pressed != HANDLE_STYLE and self.upper_pressed != HANDLE_STYLE:\nevent.ignore()\nreturn\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\nm = self.style().pixelMetric(\nwidgets.Style.PixelMetric.PM_MaximumDragDistance, opt, self\n)\npixel_pos = int(self.pick(event.position()) - self.offset)\nnew_pos = float(self._pixel_pos_to_value(pixel_pos))\nif m &gt;= 0:\nr = self.rect().adjusted(-m, -m, m, m)\nif not r.contains(event.position().toPoint()):\nnew_pos = self.position\n# pick the preferred handle on the first movement\nif self._first_movement:\nif self.lower_val == self.upper_val:\nif new_pos &lt; self.get_lower_value():\nself._swap_controls()\nself._first_movement = False\nelse:\nself._first_movement = False\nmatch HANDLE_STYLE, self.movement:\ncase self.lower_pressed, \"no_crossing\":\nnew_pos = min(new_pos, self.upper_val)\nself.set_lower_pos(new_pos)\ncase self.lower_pressed, \"no_overlap\":\nnew_pos = min(new_pos, self.upper_val - 1)\nself.set_lower_pos(new_pos)\ncase self.lower_pressed, \"free\" if new_pos &gt; self.upper_val:\nself._swap_controls()\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"no_crossing\":\nnew_pos = max(new_pos, self.get_lower_value())\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"no_overlap\":\nnew_pos = max(new_pos, self.get_lower_value() + 1)\nself.set_upper_pos(new_pos)\ncase self.upper_pressed, \"free\" if new_pos &lt; self.lower_val:\nself._swap_controls()\nself.set_lower_pos(new_pos)\nevent.accept()\ndef mouseReleaseEvent(self, event):\nsuper().mouseReleaseEvent(event)\nself.setSliderDown(False)\nself.lower_pressed = self.upper_pressed = widgets.Style.SubControl.SC_None\nself.update()\ndef paintEvent(self, event):\npainter = widgets.StylePainter(self)\n# ticks\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\nopt.subControls = widgets.Style.SubControl.SC_SliderTickmarks\npainter.draw_complex_control(\"slider\", opt)\n# groove\nopt.sliderPosition = 20\nopt.sliderValue = 0\nopt.subControls = GROOVE_STYLE\npainter.draw_complex_control(\"slider\", opt)\n# handle rects\nopt.sliderPosition = int(self.lower_pos)\nlr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nlrv = self.pick(lr.center())\nopt.sliderPosition = int(self.upper_pos)\nur = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nurv = self.pick(ur.center())\n# span\nminv = min(lrv, urv)\nmaxv = max(lrv, urv)\nc = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self).center()\nif self.is_horizontal():\nrect = core.Rect(core.Point(minv, c.y() - 2), core.Point(maxv, c.y() + 1))\nelse:\nrect = core.Rect(core.Point(c.x() - 2, minv), core.Point(c.x() + 1, maxv))\nself._draw_span(painter, rect)\n# handles\nif self.last_pressed == \"lower\":\nself.draw_handle(painter, \"upper\")\nself.draw_handle(painter, \"lower\")\nelse:\nself.draw_handle(painter, \"lower\")\nself.draw_handle(painter, \"upper\")\ndef get_lower_value(self) -&gt; float:\nreturn min(self.lower_val, self.upper_val)\ndef set_lower_value(self, lower: float):\nself.set_span(lower, self.upper_val)\ndef get_upper_value(self) -&gt; float:\nreturn max(self.lower_val, self.upper_val)\ndef set_upper_value(self, upper: float):\nself.set_span(self.lower_val, upper)\ndef on_value_change(self):\nself.value_changed.emit((self.lower_val, self.upper_val))\ndef get_value(self) -&gt; tuple[float, float]:\nreturn (self.lower_val, self.upper_val)\ndef set_value(self, value: tuple[float, float]):\nself.set_lower_value(value[0])\nself.set_upper_value(value[1])\ndef get_movement_mode(self) -&gt; MovementModeStr:\nreturn self.movement\ndef set_movement_mode(self, mode: MovementModeStr):\n\"\"\"Set movement mode.\n        Args:\n            mode: movement mode for the main window\n        Raises:\n            ValueError: movement mode type does not exist\n        \"\"\"\nif mode not in MOVEMENT_MODE:\nraise ValueError(\"Invalid movement mode\")\nself.movement = mode\ndef set_span(self, lower: float, upper: float):\nlow = clamp(min(lower, upper), self.minimum(), self.maximum())\nupp = clamp(max(lower, upper), self.minimum(), self.maximum())\nchanged = False\nif low != self.lower_val:\nself.lower_val = low\nself.lower_pos = low\nchanged = True\nif upp != self.upper_val:\nself.upper_val = upp\nself.upper_pos = upp\nchanged = True\nif changed:\nself.on_value_change()\nself.update()\ndef set_lower_pos(self, lower: float):\nif self.lower_pos == lower:\nreturn\nself.lower_pos = lower\nif not self.hasTracking():\nself.update()\nif self.isSliderDown():\nself.lower_pos_changed.emit(lower)\nif self.hasTracking() and not self._block_tracking:\nmain = self._main_control == \"lower\"\nself.trigger_action(\"move\", main)\ndef set_upper_pos(self, upper: float):\nif self.upper_pos == upper:\nreturn\nself.upper_pos = upper\nif not self.hasTracking():\nself.update()\nif self.isSliderDown():\nself.upper_pos_changed.emit(upper)\nif self.hasTracking() and not self._block_tracking:\nmain = self._main_control == \"upper\"\nself.trigger_action(\"move\", main)\ndef set_left_color(self, color: datatypes.ColorType):\nself.gradient_left = colors.get_color(color)\nself.update()\ndef set_right_color(self, color: datatypes.ColorType):\nself.gradient_right = colors.get_color(color)\nself.update()\ndef _move_pressed_handle(self):\nif self.last_pressed == \"lower\":\nif self.lower_pos != self.lower_val:\nmain = self._main_control == \"lower\"\nself.trigger_action(\"move\", main)\nelif self.last_pressed == \"upper\" and self.upper_pos != self.upper_val:\nmain = self._main_control == \"upper\"\nself.trigger_action(\"move\", main)\ndef pick(self, p: datatypes.PointType) -&gt; int:\nif isinstance(p, tuple):\nreturn p[0] if self.is_horizontal() else p[1]\nelse:\nreturn p.x() if self.is_horizontal() else p.y()\ndef trigger_action(self, action: ActionStr, main: bool):\nvalue = 0.0\nno = False\nup = False\nmy_min = self.minimum()\nmy_max = self.maximum()\nself._block_tracking = True\nmain_control = main and self._main_control == \"upper\"\nalt_control = not main and self._main_control == \"lower\"\nis_upper_handle = main_control or alt_control\nval = self.upper_val if is_upper_handle else self.lower_val\nmatch action:\ncase \"single_step_add\":\nup = is_upper_handle\nvalue = clamp(val + self.singleStep(), my_min, my_max)\ncase \"single_step_sub\":\nup = is_upper_handle\nvalue = clamp(val - self.singleStep(), my_min, my_max)\ncase \"to_minimum\":\nup = is_upper_handle\nvalue = my_min\ncase \"to_maximum\":\nup = is_upper_handle\nvalue = my_max\ncase \"move\":\nup = is_upper_handle\nno = True\ncase \"none\":\nno = True\nif not no and not up:\nmatch self.movement:\ncase \"no_crossing\":\nvalue = min(value, self.upper_val)\ncase \"no_overlap\":\nvalue = min(value, self.upper_val - 1)\ncase \"free\" if value &gt; self.upper_val:\nself._swap_controls()\nself.set_upper_pos(value)\ncase \"free\":\nself.set_lower_pos(value)\nelif not no:\nmatch self.movement:\ncase \"no_crossing\":\nvalue = max(value, self.lower_val)\ncase \"no_overlap\":\nvalue = max(value, self.lower_val + 1)\ncase \"free\" if value &lt; self.lower_val:\nself._swap_controls()\nself.set_lower_pos(value)\ncase \"free\":\nself.set_upper_pos(value)\nself._block_tracking = False\nself.set_lower_value(self.lower_pos)\nself.set_upper_value(self.upper_pos)\ndef _swap_controls(self):\nself.lower_val, self.upper_val = self.upper_val, self.lower_val\nself.lower_pressed, self.upper_pressed = self.upper_pressed, self.lower_pressed\nself.last_pressed = \"upper\" if self.last_pressed == \"lower\" else \"lower\"\nself._main_control = \"upper\" if self._main_control == \"lower\" else \"lower\"\ndef update_range(self, min_, max_):\n# set_span() takes care of keeping span in range\nself.set_span(self.lower_val, self.upper_val)\ndef _setup_painter(\nself,\npainter: widgets.StylePainter,\norientation: Literal[\"horizontal\", \"vertical\"],\nx1: int,\ny1: int,\nx2: int,\ny2: int,\n):\nhighlight = self.palette().color(gui.Palette.ColorRole.Highlight)\ngradient = gui.LinearGradient(x1, y1, x2, y2)\ngradient[0] = highlight.darker(120)\ngradient[1] = highlight.lighter(108)\npainter.setBrush(gradient)\nval = 130 if orientation == \"horizontal\" else 150\npainter.set_pen(color=highlight.darker(val), width=0)\ndef _draw_span(self, painter: widgets.StylePainter, rect: core.Rect):\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\npainter.set_pen(color=self.gradient_left, width=0)\ngroove = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self)\nif opt.is_horizontal():\ngroove.adjust(0, 0, -1, 0)\nself._setup_painter(\npainter,\nopt.get_orientation(),\ngroove.center().x(),\ngroove.top(),\ngroove.center().x(),\ngroove.bottom(),\n)\nelse:\ngroove.adjust(0, 0, 0, -1)\nself._setup_painter(\npainter,\nopt.get_orientation(),\ngroove.left(),\ngroove.center().y(),\ngroove.right(),\ngroove.center().y(),\n)\n# draw groove\nintersected = core.RectF(rect.intersected(groove))\ngradient = gui.LinearGradient(intersected.topLeft(), intersected.topRight())\ngradient[0] = self.gradient_left\ngradient[1] = self.gradient_right\npainter.fillRect(intersected, gradient)\ndef draw_handle(self, painter: widgets.StylePainter, handle: HandleStr):\nopt = self.get_style_option(handle)\nopt.subControls = HANDLE_STYLE\npressed = self.lower_pressed if handle == \"lower\" else self.upper_pressed\nif pressed == HANDLE_STYLE:\nopt.activeSubControls = pressed\nopt.state |= widgets.Style.StateFlag.State_Sunken\npainter.draw_complex_control(\"slider\", opt)\ndef get_style_option(self, handle: HandleStr) -&gt; widgets.StyleOptionSlider:\noption = widgets.StyleOptionSlider()\nself.initStyleOption(option)\nif handle == \"lower\":\noption.sliderPosition = int(self.lower_pos)\noption.sliderValue = int(self.lower_val)\nelse:\noption.sliderPosition = int(self.upper_pos)\noption.sliderValue = int(self.upper_val)\nreturn option\ndef _handle_mouse_press(\nself, pos: core.QPointF, control, value: float, handle: HandleStr\n):\nopt = self.get_style_option(handle)\nold_control = control\ncontrol = self.style().hitTestComplexControl(\nSLIDER_STYLE, opt, pos.toPoint(), self\n)\nsr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nif control == HANDLE_STYLE:\nself.position = value\nself.offset = self.pick(pos.toPoint() - sr.topLeft())\nself.last_pressed = handle\nself.setSliderDown(True)\nself.slider_pressed.emit(handle)\nif control != old_control:\nself.update(sr)\nreturn control\ndef _pixel_pos_to_value(self, pos: int) -&gt; int:\nopt = widgets.StyleOptionSlider()\nself.initStyleOption(opt)\ngr = self.style().subControlRect(SLIDER_STYLE, opt, GROOVE_STYLE, self)\nsr = self.style().subControlRect(SLIDER_STYLE, opt, HANDLE_STYLE, self)\nif self.is_horizontal():\nlen_slider = sr.width()\nslider_min = gr.x()\nslider_end = gr.right()\nelse:\nlen_slider = sr.height()\nslider_min = gr.y()\nslider_end = gr.bottom()\nreturn widgets.Style.sliderValueFromPosition(\nself.minimum(),\nself.maximum(),\npos - slider_min,\nslider_end - len_slider + 1 - slider_min,\nopt.upsideDown,\n)\nlower_value = core.Property(\nfloat,\nget_lower_value,\nset_lower_value,\ndoc=\"Lower value\",\n)\nupper_value = core.Property(\nfloat,\nget_upper_value,\nset_upper_value,\ndoc=\"Upper value\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/SpanSlider.html#prettyqt.custom_widgets.editors.spanslider.SpanSlider.set_movement_mode","title":"<code>set_movement_mode(mode: MovementModeStr)</code>","text":"<p>Set movement mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>MovementModeStr</code> <p>movement mode for the main window</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>movement mode type does not exist</p> Source code in <code>prettyqt\\custom_widgets\\editors\\spanslider.py</code> <pre><code>def set_movement_mode(self, mode: MovementModeStr):\n\"\"\"Set movement mode.\n    Args:\n        mode: movement mode for the main window\n    Raises:\n        ValueError: movement mode type does not exist\n    \"\"\"\nif mode not in MOVEMENT_MODE:\nraise ValueError(\"Invalid movement mode\")\nself.movement = mode\n</code></pre>"},{"location":"additional_modules/custom_widgets/SpanSlider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261350928[\"custom_widgets.SpanSlider\"]\n  2103261219520[\"widgets.Slider\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259931856[\"QtWidgets.QSlider\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261219520 --&gt; 2103261350928\n  2103261112000 --&gt; 2103261219520\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259931856 --&gt; 2103261219520\n  2103259932816 --&gt; 2103259931856\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SpanSlider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool <code>tickPosition</code> QSlider::TickPosition <code>tickInterval</code> int <code>lower_value</code> double Lower value <code>upper_value</code> double Upper value"},{"location":"additional_modules/custom_widgets/SpanSliderWidget.html","title":"SpanSliderWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SpanSliderWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\spanslider.py</code> <pre><code>class SpanSliderWidget(widgets.Widget):\ndef __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nself.set_layout(\"grid\")\nself.slider = SpanSlider()\nself.label_lower = widgets.Label()\nself.label_upper = widgets.Label()\nself.box[0, 0:3] = self.slider\nself.box[1, 0] = self.label_lower\nself.box[1, 3] = self.label_upper\nself.slider.value_changed.connect(self.on_value_change)\ndef __getattr__(self, value):\nreturn self.slider.__getattribute__(value)\ndef on_value_change(self):\nself.label_lower.set_text(str(self.slider.lower_pos))\nself.label_upper.set_text(str(self.slider.upper_pos))\n</code></pre>"},{"location":"additional_modules/custom_widgets/SpanSliderWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261340368[\"custom_widgets.SpanSliderWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261340368\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/SpanSliderWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/StandardIconsWidget.html","title":"StandardIconsWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/StandardIconsWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> <p>Dialog showing standard icons.</p> Source code in <code>prettyqt\\custom_widgets\\standardiconswidget.py</code> <pre><code>class StandardIconsWidget(widgets.Widget):\n\"\"\"Dialog showing standard icons.\"\"\"\ndef __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent)\nlayout = custom_widgets.MultiLineLayout(parent=self)\nfor k in widgets.style.STANDARD_PIXMAP:\nicon_layout = widgets.HBoxLayout()\nicon = widgets.Application.get_style_icon(k)\nlabel = widgets.Label(pixmap=icon.pixmap(32, 32))\nicon_layout.addWidget(label)\nicon_layout.addWidget(widgets.LineEdit(k))\nlayout.addLayout(icon_layout)\nself.set_layout(layout)\nself.set_title(\"Standard Platform Icons\")\nicon = widgets.Application.get_style_icon(\"titlebar_menu_button\")\nself.set_icon(icon)\n</code></pre>"},{"location":"additional_modules/custom_widgets/StandardIconsWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261358608[\"custom_widgets.StandardIconsWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261358608\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/StandardIconsWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/StringListEdit.html","title":"StringListEdit","text":"<p>Qt Base Class: QLineEdit</p> <p>Signature: <code>QLineEdit(self, arg__1: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLineEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/StringListEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LineEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\lineedits.py</code> <pre><code>class StringListEdit(widgets.LineEdit):\nvalue_changed = core.Signal(list)\ndef __init__(self, *args, object_name: str = \"str_list_lineedit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\ndef _on_value_change(self):\nvalue = self.get_value()\nself.value_changed.emit(value)\ndef get_value(self) -&gt; list[str]:\nval = super().get_value()\nreturn val.split(\",\")\ndef set_value(self, value: Sequence[str]):\nsuper().set_value(\",\".join(value))\nvalue = core.Property(\nlist,\nget_value,\nset_value,\ndoc=\"Current Value as list\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/StringListEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261562128[\"custom_widgets.StringListEdit\"]\n  2103261134080[\"widgets.LineEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259700720[\"QtWidgets.QLineEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261134080 --&gt; 2103261562128\n  2103261127360 --&gt; 2103261134080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259700720 --&gt; 2103261134080\n  2103259691120 --&gt; 2103259700720\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/StringListEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>inputMask</code> QString <code>text</code> QString <code>maxLength</code> int <code>frame</code> bool <code>echoMode</code> QLineEdit::EchoMode <code>displayText</code> QString <code>cursorPosition</code> int <code>alignment</code> QFlags <code>modified</code> bool <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>dragEnabled</code> bool <code>readOnly</code> bool <code>undoAvailable</code> bool <code>redoAvailable</code> bool <code>acceptableInput</code> bool <code>placeholderText</code> QString <code>cursorMoveStyle</code> Qt::CursorMoveStyle <code>clearButtonEnabled</code> bool <code>value</code> QVariantList Current Value as list"},{"location":"additional_modules/custom_widgets/StringOrNumberWidget.html","title":"StringOrNumberWidget","text":"<p>Qt Base Class: QGroupBox</p> <p>Signature: <code>QGroupBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QGroupBox(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/StringOrNumberWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GroupBox</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\stringornumberwidget.py</code> <pre><code>class StringOrNumberWidget(widgets.GroupBox):\nvalue_changed = core.Signal(object)\ndef __init__(self, *args, object_name: str = \"string_or_number_widget\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_layout(\"vertical\")\nself.rb_lineedit = widgets.RadioButton(\"String\", checked=True)\nself.lineedit = widgets.LineEdit()\nself.rb_spinbox = widgets.RadioButton(\"Number\")\nself.spinbox = widgets.DoubleSpinBox()\nlayout_lineedit = widgets.HBoxLayout()\nlayout_lineedit.add(self.rb_lineedit)\nlayout_lineedit.add(self.lineedit)\nlayout_spinbox = widgets.HBoxLayout()\nlayout_spinbox.add(self.rb_spinbox)\nlayout_spinbox.add(self.spinbox)\nself.box.add(layout_lineedit)\nself.box.add(layout_spinbox)\nself.rb_spinbox.toggled.connect(self.spinbox.setEnabled)\nself.rb_spinbox.toggled.connect(self.lineedit.setDisabled)\nself.rb_lineedit.toggled.connect(self.lineedit.setEnabled)\nself.rb_lineedit.toggled.connect(self.spinbox.setDisabled)\nself.spinbox.value_changed.connect(self.on_value_change)\nself.lineedit.value_changed.connect(self.on_value_change)\ndef on_value_change(self):\nvalue = self.get_value()\nself.value_changed.emit(value)\ndef get_value(self) -&gt; float | str:\nif not self.rb_spinbox.isChecked():\nreturn self.lineedit.get_value()\nval = self.spinbox.get_value()\nreturn int(val) if val.is_integer() else val\ndef set_value(self, value: float | str):\nmatch value:\ncase str():\nself.rb_lineedit.setChecked(True)\nself.lineedit.set_value(value)\ncase int() | float():\nself.rb_spinbox.setChecked(True)\nself.spinbox.set_value(value)\ncase _:\nraise TypeError(f\"Invalid Type for set_value: {type(value)}\")\n</code></pre>"},{"location":"additional_modules/custom_widgets/StringOrNumberWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261304848[\"custom_widgets.StringOrNumberWidget\"]\n  2103261445008[\"widgets.GroupBox\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259738160[\"QtWidgets.QGroupBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261445008 --&gt; 2103261304848\n  2103261127360 --&gt; 2103261445008\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259738160 --&gt; 2103261445008\n  2103259691120 --&gt; 2103259738160\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/StringOrNumberWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>alignment</code> QFlags <code>flat</code> bool <code>checkable</code> bool <code>checked</code> bool"},{"location":"additional_modules/custom_widgets/SubsequenceCompleter.html","title":"SubsequenceCompleter","text":"<p>Qt Base Class: QCompleter</p> <p>Signature: <code>QCompleter(self, completions: Sequence[str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCompleter(self, model: PySide6.QtCore.QAbstractItemModel, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCompleter(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/SubsequenceCompleter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Completer</code></p> <p>QCompleter specialised for subsequence matching.</p> Source code in <code>prettyqt\\custom_widgets\\subsequencecompleter.py</code> <pre><code>class SubsequenceCompleter(widgets.Completer):\n\"\"\"QCompleter specialised for subsequence matching.\"\"\"\ndef __init__(self, *args):\nsuper().__init__(*args)\nself.completion_search_term = \"\"\nself.source_model = None\nself.set_completion_mode(\"unfiltered_popup\")\nself.proxy_model = itemmodels.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.set_case_sensitive(False)\nself._force_next_update = True\nself.path_updated.connect(self._on_path_updated)\nself.setCompletionRole(constants.DISPLAY_ROLE)\ndef setModel(self, model: core.QAbstractItemModel):\nself.source_model = model\nself.proxy_model = itemmodels.SubsequenceSortFilterProxyModel(parent=self)\nself.proxy_model.setFilterCaseSensitivity(self.caseSensitivity())\nself.proxy_model.set_search_term(self.completion_search_term)\nself.proxy_model.setSourceModel(self.source_model)\nsuper().setModel(self.proxy_model)\nself.proxy_model.invalidateRowsFilter()\n# self.proxy_model.sort(0)\nself._force_next_update = True\n# def __getattr__(self, key):\n#     return getattr(self.proxy_model, key)\ndef set_case_sensitive(self, value: bool):\nsuper().set_case_sensitive(value)\nself.proxy_model.set_filter_case_sensitive(value)\ndef _on_path_updated(self, path: str):\nif path == self.completion_search_term:\nreturn None\nself.completion_search_term = path\ncount = self.completionCount()\nif count or len(self.completion_search_term) &lt;= 1 or self._force_next_update:\nself.proxy_model.set_search_term(self.completion_search_term)\nif count &gt; 1:\nself.proxy_model.sort(0)\nself._force_next_update = False\nself.proxy_model.invalidateRowsFilter()  # force sorting/filtering\n</code></pre>"},{"location":"additional_modules/custom_widgets/SubsequenceCompleter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261344208[\"custom_widgets.SubsequenceCompleter\"]\n  2103261400848[\"widgets.Completer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261044800[\"QtWidgets.QCompleter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261400848 --&gt; 2103261344208\n  2103255067472 --&gt; 2103261400848\n  140736120080256 --&gt; 2103255067472\n  2103261044800 --&gt; 2103261400848\n  2103254677056 --&gt; 2103261044800\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/custom_widgets/SubsequenceCompleter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>completionPrefix</code> QString <code>modelSorting</code> QCompleter::ModelSorting <code>filterMode</code> QFlags <code>completionMode</code> QCompleter::CompletionMode <code>completionColumn</code> int <code>completionRole</code> int <code>maxVisibleItems</code> int <code>caseSensitivity</code> Qt::CaseSensitivity <code>wrapAround</code> bool"},{"location":"additional_modules/custom_widgets/Timeline.html","title":"Timeline","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/Timeline.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>class Timeline(widgets.Widget):\nposition_changed = core.Signal(int)\nselection_changed = core.Signal(VideoSample)\ndef __init__(self, duration: int, length: int):\nsuper().__init__()\nself.set_title(\"Timeline\")\nself.duration = duration\nself.length = length\n# Set variables\nself.set_background_color(BACKGROUND_COLOR)\nself.set_text_color(TEXT_COLOR)\nself.set_text_font(FONT)\nself._position = None\nself.pointer_time_pos = 0.0\nself.selected_sample = None\nself._clicking = False  # Check if mouse left button is being pressed\nself._is_in = False  # check if user is in the widget\nself.video_samples: list[VideoSample] = []  # List of video samples\nself.setMouseTracking(True)  # Mouse events\nself.setAutoFillBackground(True)  # background\nself.setGeometry(300, 300, self.length, 200)\n# Set Background\nwith self.edit_palette() as pal:\npal.set_color(\"window\", self.background_color)\ndef __len__(self):\nreturn len(self.video_samples)\ndef __getitem__(self, index: int) -&gt; VideoSample:\nreturn self.video_samples[index]\ndef __setitem__(self, index: int, value: VideoSample):\nself.video_samples[index] = value\ndef __delitem__(self, index: int):\ndel self.video_samples[index]\ndef __add__(self, other: VideoSample) -&gt; Timeline:\nself.add(other)\nreturn self\n@classmethod\ndef setup_example(cls):\nreturn cls(duration=60, length=60)\ndef add_sample(\nself,\nduration: int,\ncolor: datatypes.ColorType = \"yellow\",\npicture: gui.QPixmap | None = None,\n) -&gt; VideoSample:\nsample = VideoSample(duration, color, picture)\nself.add(sample)\nreturn sample\ndef add(self, sample: VideoSample):\nself.video_samples.append(sample)\ndef paintEvent(self, event):\n# Draw time\nscale = self.get_scale()\nwith gui.Painter(self) as qp:\nqp.set_color(self.text_color)\nqp.setFont(self.text_font)\nqp.use_antialiasing()\nw = 0\nwidth = self.width()\nwhile (w := w + 100) &lt;= width:\nmsecs = int(w * scale * 1000)\ntime_string = str(core.Time(0, 0, 0, 0).add_msecs(msecs))\nrect = core.Rect(w - 50, 0, 100, 100)\nqp.drawText(rect, constants.ALIGN_H_CENTER, time_string)\n# Draw down line\nqp.set_pen(color=PEN_COLOR, width=5)\nqp.drawLine(0, 40, width, 40)\n# Draw dash lines\npoint = 0\nqp.set_pen(color=self.text_color)\nqp.drawLine(0, 40, width, 40)\nwhile point &lt;= width:\ny2 = 30 if point % 30 != 0 else 20\nqp.drawLine(3 * point, 40, 3 * point, y2)\npoint += 10\nif self._position is not None and self._is_in:\nx_pos = int(self._position.x())\nqp.drawLine(x_pos, 0, x_pos, 40)\npoly = gui.Polygon()\nif self._position is not None:\nval = int(self.pointer_time_pos / self.get_scale())\nline = core.Line(val, 40, val, self.height())\npoly.add_points((val - 10, 20), (val + 10, 20), (val, 40))\nelse:\nline = core.Line(0, 0, 0, self.height())\npoly.add_points((-10, 20), (10, 20), (0, 40))\n# Draw samples\nt = 0.0\nfor sample in self.video_samples:\nscaled_dur = sample.duration / scale\nscaled_t = t / scale\nt += sample.duration\n# Clear clip path\nwith qp.clip_path() as path:\nrect = core.RectF(scaled_t, 50, scaled_dur, 200)\npath.addRoundedRect(rect, 10, 10)\n# Draw sample\npath = gui.PainterPath()\nqp.set_pen(color=sample.color)\nrect = core.RectF(scaled_t, 50, scaled_dur, 50)\npath.addRoundedRect(rect, 10, 10)\nsample.start_pos = scaled_t\nsample.end_pos = scaled_t + scaled_dur\nqp.fillPath(path, sample.color)\nqp.drawPath(path)\n# Draw preview pictures\nif sample.picture is None:\ncontinue\npic_width = sample.picture.size().width()\nif pic_width &lt; scaled_dur:\nwidth = float(pic_width)\npic = sample.picture\nelse:\nwidth = scaled_dur\npic = sample.picture.copy(0, 0, int(scaled_dur), 45)\nwith qp.clip_path() as path:\nrect = core.RectF(scaled_t, 52.5, width, 45)\npath.addRoundedRect(rect, 10, 10)\nqp.drawPixmap(int(scaled_t), int(52.5), int(width), 45, pic)\n# Clear clip path\nwith qp.clip_path() as path:\npath.add_rect(self.rect())\n# Draw pointer\nqp.set_color(PEN_COLOR)\nqp.set_brush(PEN_COLOR)\nqp.drawPolygon(poly)\nqp.drawLine(line)\ndef mouseMoveEvent(self, e):\nself._position = e.position()\n# if mouse is being pressed, update pointer\nif self._clicking:\nx = self._position.x()\nself.position_changed.emit(x)\nself._check_selection(x)\nself.pointer_time_pos = x * self.get_scale()\nself.update()\ndef mousePressEvent(self, e):\nif e.button() == constants.MouseButton.LeftButton:\nx = e.position().x()\nself.position_changed.emit(x)\nself.pointer_time_pos = x * self.get_scale()\nself._check_selection(x)\nself.update()\nself._clicking = True  # Set clicking check to true\ndef mouseReleaseEvent(self, e):\nif e.button() == constants.MouseButton.LeftButton:\nself._clicking = False  # Set clicking check to false\ndef enterEvent(self, e):\nself._is_in = True\ndef leaveEvent(self, e):\nself._is_in = False\nself.update()\ndef _check_selection(self, x: int):\n# Check if user clicked in video sample\nfor sample in self.video_samples:\nif sample.start_pos &lt; x &lt; sample.end_pos:\nsample.color = gui.Color(PEN_COLOR)\nif self.selected_sample is not sample:\nself.selected_sample = sample\nself.selection_changed.emit(sample)\nelse:\nsample.color = sample.def_color\ndef get_scale(self) -&gt; float:\nreturn self.duration / self.width()\ndef set_background_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.background_color = color\ndef set_text_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.text_color = color\ndef set_text_font(self, font: gui.QFont):\nself.text_font = font\n</code></pre>"},{"location":"additional_modules/custom_widgets/Timeline.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261361488[\"custom_widgets.Timeline\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261361488\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/Timeline.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/custom_widgets/UrlLineEdit.html","title":"UrlLineEdit","text":"<p>Qt Base Class: QLineEdit</p> <p>Signature: <code>QLineEdit(self, arg__1: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLineEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/UrlLineEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LineEdit</code></p> Source code in <code>prettyqt\\custom_widgets\\editors\\lineedits.py</code> <pre><code>class UrlLineEdit(widgets.LineEdit):\nvalue_changed = core.Signal(core.QUrl)\ndef __init__(self, *args, object_name: str = \"float_lineedit\", **kwargs):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.set_validator(\"website\")\ndef get_value(self) -&gt; core.QUrl:\nval = super().get_value()\nreturn core.QUrl.fromUserInput(val)\ndef set_value(self, value: core.QUrl | str):\nsuper().set_value(value.toString() if isinstance(value, core.QUrl) else value)\nvalue = core.Property(\ncore.QUrl,\nget_value,\nset_value,\ndoc=\"Current Value as QUrl\",\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/UrlLineEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261551568[\"custom_widgets.UrlLineEdit\"]\n  2103261134080[\"widgets.LineEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259700720[\"QtWidgets.QLineEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261134080 --&gt; 2103261551568\n  2103261127360 --&gt; 2103261134080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259700720 --&gt; 2103261134080\n  2103259691120 --&gt; 2103259700720\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/UrlLineEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>inputMask</code> QString <code>text</code> QString <code>maxLength</code> int <code>frame</code> bool <code>echoMode</code> QLineEdit::EchoMode <code>displayText</code> QString <code>cursorPosition</code> int <code>alignment</code> QFlags <code>modified</code> bool <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>dragEnabled</code> bool <code>readOnly</code> bool <code>undoAvailable</code> bool <code>redoAvailable</code> bool <code>acceptableInput</code> bool <code>placeholderText</code> QString <code>cursorMoveStyle</code> Qt::CursorMoveStyle <code>clearButtonEnabled</code> bool <code>value</code> QUrl Current Value as QUrl"},{"location":"additional_modules/custom_widgets/VideoSample.html","title":"VideoSample","text":""},{"location":"additional_modules/custom_widgets/VideoSample.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\custom_widgets\\timeline.py</code> <pre><code>class VideoSample:\ndef __init__(\nself,\nduration: float,\ncolor: datatypes.ColorType = \"yellow\",\npicture: gui.QPixmap | None = None,\n):\nself.duration = duration\nself.color = colors.get_color(color)  # Floating color\nself.def_color = colors.get_color(color)  # DefaultColor\nself.picture = None if picture is None else picture.scaledToHeight(45)\nself.start_pos = 0.0  # Initial position\nself.end_pos = self.duration  # End position\n</code></pre>"},{"location":"additional_modules/custom_widgets/VideoSample.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261357648[\"custom_widgets.VideoSample\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261357648</code></pre>"},{"location":"additional_modules/custom_widgets/WaitingSpinner.html","title":"WaitingSpinner","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/WaitingSpinner.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseWaitingSpinner</code></p> Source code in <code>prettyqt\\custom_widgets\\waitingspinner.py</code> <pre><code>class WaitingSpinner(BaseWaitingSpinner):\ndef __init__(\nself,\nparent: widgets.QWidget | None = None,\ncenter_on_parent: bool = True,\ndisable_parent: bool = True,\nmodality: constants.ModalityStr = \"none\",\nadditional_disabled=None,\n):\nsuper().__init__(parent=parent, modality=modality)\nself._center_on_parent = center_on_parent\nself._disable_parent = disable_parent\nself.additional_disabled = additional_disabled or []\ndef paintEvent(self, event):\nself._update_position()\nsuper().paintEvent(event)\ndef start(self):\nself._update_position()\nsuper().start()\nif self.parentWidget and self._disable_parent:\nself.parentWidget().setEnabled(False)\nfor item in self.additional_disabled:\nitem.setEnabled(False)\ndef stop(self):\nsuper().stop()\nif self.parentWidget() and self._disable_parent:\nself.parentWidget().setEnabled(True)\nfor item in self.additional_disabled:\nitem.setEnabled(True)\ndef _update_position(self):\nparent = self.parentWidget()\nif parent and self._center_on_parent:\nself.move(\nparent.width() // 2 - self.width() // 2,\nparent.height() // 2 - self.height() // 2,\n)\n</code></pre>"},{"location":"additional_modules/custom_widgets/WaitingSpinner.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261338448[\"custom_widgets.WaitingSpinner\"]\n  2103261337488[\"custom_widgets.BaseWaitingSpinner\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261337488 --&gt; 2103261338448\n  2103261115840 --&gt; 2103261337488\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/WaitingSpinner.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>color</code> QColor <code>roundness</code> double Roundness value <code>line_num</code> int Number of lines for the spinner <code>line_length</code> int Length of the spinner lines <code>line_width</code> int Width of the spinner lines <code>minimum_trail_opacity</code> double Minimum opacity of the Trail <code>revolutions_per_second</code> double Rotation speed of the spinner <code>trail_fade_percentage</code> double Trail fade percentage"},{"location":"additional_modules/custom_widgets/WidgetEditor.html","title":"WidgetEditor","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/custom_widgets/WidgetEditor.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\custom_widgets\\widgeteditor.py</code> <pre><code>class WidgetEditor(widgets.Widget):\nvalue_changed = core.Signal(object)\ndef __init__(self, qobject: core.QObject, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_layout(\"form\")\nself._qobject = qobject\nself._initial_prop_values = {}\nself.event_catcher = eventfilters.EventCatcher(\ninclude=[\"resize\", \"move\"], parent=self._qobject\n)\nself.event_catcher.caught.connect(self._update_editors)\nself._qobject.installEventFilter(self.event_catcher)\nself.set_minimum_size(800, 1000)\nself._editors = bidict()\nself._metaobj = core.MetaObject(self._qobject.metaObject())\nfor i, prop in enumerate(self._metaobj.get_properties()):\nvalue = prop.read(self._qobject)\n# typ = prop.get_meta_type().get_type()\nname = prop.name()\nlogger.info(f\"setting {name} editor to {value}\")\nwidget = datatypes.get_editor_for_value(value)\nif widget is None:\nlogger.warning(f\"No editor found for {value!r}\")\ncontinue\nwidget.set_value(value)\nwidget.value_changed.connect(self._on_value_change)\nwidget.setEnabled(prop.isWritable())\nlabel = helpers.to_snake(prop.name()).replace(\"_\", \" \")\nself.box[i, \"left\"] = widgets.Label(label)\nself.box[i, \"right\"] = widget\nself._initial_prop_values[name] = value\nself._editors[name] = widget\nif prop.hasNotifySignal():\nnotify_signal = prop.get_notify_signal()\nsignal_name = notify_signal.get_name()\nsignal = self._qobject.__getattribute__(signal_name)\nsignal.connect(self._update_editors)\n@classmethod\ndef setup_example(cls):\nscrollarea = widgets.ScrollArea()\nreturn cls(scrollarea)\ndef _on_value_change(self):\neditor = self.sender()\nprop_name = self._editors.inverse[editor]\nprop = self._metaobj.get_property(prop_name)\nvalue = editor.get_value()\nvalue = datatypes.make_qtype(value)\n# logger.debug(f\"setting {prop_name} to {value}\")\nprop.write(self._qobject, value)\n# brute force\nif isinstance(self._qobject, widgets.QWidget):\nself._qobject.updateGeometry()\nself._qobject.repaint()\nif (parent := self._qobject.parentWidget()) is not None:\nparent.updateGeometry()\nparent.repaint()\ndef _update_editors(self):\nfor prop_name, editor in self._editors.items():\nvalue = self._qobject.property(prop_name)\neditor.set_value(value)\n</code></pre>"},{"location":"additional_modules/custom_widgets/WidgetEditor.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261527568[\"custom_widgets.WidgetEditor\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261527568\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/custom_widgets/WidgetEditor.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/debugging/index.html","title":"debugging","text":"Name Children Inherits QObjectDetailsDialogprettyqt.debugging.qobjectdetailsdialog <ul><li>MainWindow</li></ul> QtLoggerprettyqt.debugging <ul><li>Handler</li></ul> ProxyComparerWidgetprettyqt.debugging.proxycomparerwidget <ul><li>Splitter</li></ul> TracebackDialogprettyqt.debugging.tracebackdialog <ul><li>Dialog</li></ul> ErrorMessageBoxprettyqt.debugging.errormessagebox <ul><li>MessageBox</li></ul> Stalkerprettyqt.debugging.stalker <ul><li>Object</li></ul> MessageHandlerprettyqt.debugging.messagehandler <ul><li>object</li></ul>"},{"location":"additional_modules/debugging/ErrorMessageBox.html","title":"ErrorMessageBox","text":"<p>Qt Base Class: QMessageBox</p> <p>Signature: <code>QMessageBox(self, icon: PySide6.QtWidgets.QMessageBox.Icon, title: str, text: str, buttons: PySide6.QtWidgets.QMessageBox.StandardButton = Instance(QMessageBox.StandardButton.NoButton), parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Instance(Qt.Dialog | Qt.MSWindowsFixedSizeDialogHint)) -&gt; None QMessageBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/debugging/ErrorMessageBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.MessageBox</code></p> <p>An message box widget for displaying Python exception.</p> Source code in <code>prettyqt\\debugging\\errormessagebox.py</code> <pre><code>class ErrorMessageBox(widgets.MessageBox):\n\"\"\"An message box widget for displaying Python exception.\"\"\"\ndef __init__(self, title: str, text_or_exception: str | Exception, parent=None):\nif isinstance(text_or_exception, str):\ntext = text_or_exception\nexc = None\nelse:\ntext = str(text_or_exception)\nexc = text_or_exception\nsuper().__init__(\n# icon=MBox.Icon.Critical,\nwindow_title=title,\ntext=str(text)[:1000],\nbuttons=[\"ok\", \"help\", \"close\"],\nparent=parent,\n)\nself._exc = exc\ntraceback_button = self.get_button(\"help\")\ntraceback_button.setText(\"Show trackback\")\nclose_button = self.get_button(\"close\")\nclose_button.setText(\"Quit application\")\ndef exec(self):\nmatch super().exec():\ncase widgets.MessageBox.StandardButton.Help:\ntb = self._get_traceback()\ndlg = debugging.TracebackDialog(self)\ndlg.setText(tb)\ndlg.exec()\ncase widgets.MessageBox.StandardButton.Close:\nsys.exit(1)\ncase widgets.MessageBox.StandardButton.Ok:\nreturn True\n@classmethod\ndef setup_example(cls):\nreturn cls(\"Title\", \"Test message\")\n@classmethod\ndef from_exc(cls, e: Exception, parent=None):\n\"\"\"Construct message box from a exception.\"\"\"\nreturn cls(type(e).__name__, e, parent)\n@classmethod\ndef raise_(cls, e: Exception, parent=None):\n\"\"\"Raise exception in the message box.\"\"\"\n# unwrap EmitLoopError\nreturn cls.from_exc(e, parent=parent).exec()\ndef _get_traceback(self):\nreturn (\ntraceback.format_exc()\nif self._exc is None\nelse get_tb_formatter(gui.Font.mono().family())(self._exc, as_html=True)\n)\n@classmethod\ndef _excepthook(cls, exc_type: type[Exception], exc_value: Exception, exc_traceback):\n\"\"\"Exception hook used during application execution.\"\"\"\ntb = \"\".join(traceback.format_exception(exc_type, exc_value, exc_traceback))\nlogger.error(tb)\nreturn ErrorMessageBox.raise_(exc_value, parent=None)\n</code></pre>"},{"location":"additional_modules/debugging/ErrorMessageBox.html#prettyqt.debugging.errormessagebox.ErrorMessageBox.from_exc","title":"<code>from_exc(e: Exception, parent: Exception = None)</code>  <code>classmethod</code>","text":"<p>Construct message box from a exception.</p> Source code in <code>prettyqt\\debugging\\errormessagebox.py</code> <pre><code>@classmethod\ndef from_exc(cls, e: Exception, parent=None):\n\"\"\"Construct message box from a exception.\"\"\"\nreturn cls(type(e).__name__, e, parent)\n</code></pre>"},{"location":"additional_modules/debugging/ErrorMessageBox.html#prettyqt.debugging.errormessagebox.ErrorMessageBox.raise_","title":"<code>raise_(e: Exception, parent: Exception = None)</code>  <code>classmethod</code>","text":"<p>Raise exception in the message box.</p> Source code in <code>prettyqt\\debugging\\errormessagebox.py</code> <pre><code>@classmethod\ndef raise_(cls, e: Exception, parent=None):\n\"\"\"Raise exception in the message box.\"\"\"\n# unwrap EmitLoopError\nreturn cls.from_exc(e, parent=parent).exec()\n</code></pre>"},{"location":"additional_modules/debugging/ErrorMessageBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261877152[\"debugging.ErrorMessageBox\"]\n  2103261198400[\"widgets.MessageBox\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259821680[\"QtWidgets.QMessageBox\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261198400 --&gt; 2103261877152\n  2103261212800 --&gt; 2103261198400\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259821680 --&gt; 2103261198400\n  2103259840880 --&gt; 2103259821680\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/debugging/ErrorMessageBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>text</code> QString <code>icon</code> QMessageBox::Icon <code>iconPixmap</code> QPixmap <code>textFormat</code> Qt::TextFormat <code>standardButtons</code> QFlags <code>detailedText</code> QString <code>informativeText</code> QString <code>textInteractionFlags</code> QFlags"},{"location":"additional_modules/debugging/MessageHandler.html","title":"MessageHandler","text":""},{"location":"additional_modules/debugging/MessageHandler.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\debugging\\messagehandler.py</code> <pre><code>class MessageHandler:\ndef __init__(self, logger: logging.Logger):\nself._logger = logger\nself._previous_handler = None\ndef install(self):\nself._previous_handler = QtCore.qInstallMessageHandler(self)\ndef uninstall(self):\nif self._previous_handler is None:\nQtCore.qInstallMessageHandler(self._previous_handler)\ndef __enter__(self):\nself.install()\nreturn self\ndef __exit__(self, *args):\nself.uninstall()\ndef __call__(\nself,\nmsgtype: QtCore.QtMsgType,\ncontext: QtCore.QMessageLogContext,\nmessage: str,\n):\nctx = dict.fromkeys([\"category\", \"file\", \"function\", \"line\"])\nwith contextlib.suppress(UnicodeDecodeError):\nctx[\"category\"] = context.category\nwith contextlib.suppress(UnicodeDecodeError):\nctx[\"file\"] = context.file\nwith contextlib.suppress(UnicodeDecodeError):\nctx[\"function\"] = context.function\nwith contextlib.suppress(UnicodeDecodeError):\nctx[\"line\"] = context.line\nlevel = LOG_MAP[msgtype]\nself._logger.log(level, message, extra=ctx)\n</code></pre>"},{"location":"additional_modules/debugging/MessageHandler.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261891552[\"debugging.MessageHandler\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261891552</code></pre>"},{"location":"additional_modules/debugging/ProxyComparerWidget.html","title":"ProxyComparerWidget","text":"<p>Qt Base Class: QSplitter</p> <p>Signature: <code>QSplitter(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSplitter(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"additional_modules/debugging/ProxyComparerWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Splitter</code></p> <p>Splitter widget showing a comparison view between a proxy and its sourceModels.</p> Source code in <code>prettyqt\\debugging\\proxycomparerwidget.py</code> <pre><code>class ProxyComparerWidget(widgets.Splitter):\n\"\"\"Splitter widget showing a comparison view between a proxy and its sourceModels.\"\"\"\ndef __init__(\nself,\nmodel: core.QAbstractProxyModel,\nitemview: Literal[\"tree\", \"table\", \"list\"]\n| type[widgets.QAbstractItemView] = \"table\",\ndelegate: widgets.abstractitemview.DelegateStr\n| widgets.QItemDelegate\n| None = \"editor\",\nlink_selections: bool = True,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.model_itemviews = []\nself.linker = None\n# determine ItemView class for the models\nmatch itemview:\ncase \"tree\":\nView = widgets.TreeView\ncase \"table\":\nView = widgets.TableView\ncase \"list\":\nView = widgets.ListView\ncase type():\nView = itemview\ncase _:\nraise TypeError(itemview)\n# collect models\nmodels = []\nwhile isinstance(model, core.QAbstractProxyModel):\nmodels.append(model)\nmodel = model.sourceModel()\nmodels.append(model)\n# add column for each model\nfor model in reversed(models):\ncontainer = widgets.Widget()\nlayout = container.set_layout(\"vertical\")\ntable = View()\ntable.set_model(model)\ntable.set_delegate(delegate)\nself.model_itemviews.append(table)\nprop_table = custom_widgets.QObjectPropertiesTableView()\nprop_table.set_qobject(model)\nheader = widgets.Label(type(model).__name__)\nlayout.add(header)\ncol_splitter = widgets.Splitter(\"vertical\")\ncol_splitter.add(table)\ncol_splitter.add(prop_table)\nlayout.add(col_splitter)\nself.add(container)\nif link_selections:\nself.linker = itemmodels.LinkedSelectionModel(*self.model_itemviews)\n@classmethod\ndef setup_example(cls):\nfrom prettyqt import debugging\ntable = debugging.example_table()\ntable.proxifier.transpose()\ntable.proxifier.to_list()\nreturn cls(table.model())\n</code></pre>"},{"location":"additional_modules/debugging/ProxyComparerWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499362592[\"debugging.ProxyComparerWidget\"]\n  2103261446928[\"widgets.Splitter\"]\n  2103261445968[\"widgets.SplitterMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259742000[\"QtWidgets.QSplitter\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261446928 --&gt; 2103499362592\n  2103261445968 --&gt; 2103261446928\n  2103261110080 --&gt; 2103261445968\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259742000 --&gt; 2103261446928\n  2103259737200 --&gt; 2103259742000\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/debugging/ProxyComparerWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>orientation</code> Qt::Orientation <code>opaqueResize</code> bool <code>handleWidth</code> int <code>childrenCollapsible</code> bool"},{"location":"additional_modules/debugging/QObjectDetailsDialog.html","title":"QObjectDetailsDialog","text":"<p>Qt Base Class: QMainWindow</p> <p>Signature: <code>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/debugging/QObjectDetailsDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.MainWindow</code></p> <p>A dialog containing information about a QObject.</p> Source code in <code>prettyqt\\debugging\\qobjectdetailsdialog.py</code> <pre><code>class QObjectDetailsDialog(widgets.MainWindow):\n\"\"\"A dialog containing information about a QObject.\"\"\"\ndef __init__(\nself,\nqobject: core.QObject,\n*args,\nobject_name=\"qobject_details_dialog\",\n**kwargs,\n):\nsuper().__init__(*args, object_name=object_name, **kwargs)\nself.qobject = qobject\nself.console = ipython.InProcessIPythonWidget(self)\nself.console.push_vars(dict(app=widgets.app(), qobject=qobject))\nself.tabwidget, self.propertyview = get_tabbed(qobject)\nself.hierarchyview = custom_widgets.QObjectHierarchyTreeView()\nself.hierarchyview.set_qobject(qobject)\nsel_model = self.hierarchyview.selectionModel()\nsel_model.currentRowChanged.connect(self._current_changed)\nself.logtable = custom_widgets.LogRecordTableView()\nself.logtable.set_logger(logging.getLogger())\nw = widgets.Widget()\nw.set_layout(\"vertical\")\nself.stalkers = []\nstalker = debugging.Stalker(qobject, log_level=logging.DEBUG)\nstalker.hook()\nself.stalkers.append(stalker)\nfor widget in qobject.find_children(widgets.QWidget):\nstalker = debugging.Stalker(widget, log_level=logging.DEBUG)\nstalker.hook()\nfn = functools.partial(self._on_widget_click, widget)\nstalker.leftclick_detected.connect(fn)\nself.stalkers.append(stalker)\n# mdi_area = widgets.GraphicsView()\n# subwindow = widgets.GraphicsProxyWidget ()\n# # mdi_area.installEventFilter(self)\n# # subwindow.installEventFilter(self)\n# subwindow.set_widget(qobject)\n# mdi_area.scene().add(subwindow)\nwidget = widgets.Widget()\nlayout = widget.set_layout(\"horizontal\")\nlayout.add(qobject)\nself.set_central_widget(widget)\n# qobject.position_on(widget)\nself.add_dockwidget(self.hierarchyview, window_title=\"Hierarchy view\")\nself.add_dockwidget(self.tabwidget, window_title=\"Property view\")\nself.add_dockwidget(self.logtable, window_title=\"Log\", visible=False)\nself.add_dockwidget(self.console, window_title=\"Console\", visible=False)\nself.menubar = self.menuBar()\naction = widgets.mainwindow.PopupMenuAction(\"Docks\", parent=self)\nself.menubar.add_action(action)\nself.position_on(\"screen\", scale_ratio=0.8)\n@classmethod\ndef setup_example(cls):\nreturn None\ndef eventFilter(self, source, event):\nmatch event.type():\ncase core.QEvent.Type.MouseButtonRelease:\nraise ValueError\nreturn False\ndef closeEvent(self, event):\nfor stalker in self.stalkers:\nstalker.unhook()\nsuper().closeEvent(event)\ndef _current_changed(self, new, old):\n# logger.info(f\"{new=} {old=}\")\nrole = self.hierarchyview.get_model(skip_proxies=True).Roles.WidgetRole\nif (qobject := self.hierarchyview.current_data(role)) is not None:\nself.propertyview.set_qobject(qobject)\ndef _on_widget_click(self, widget):\nlogger.info(repr(widget))\nself.hierarchyview.select_object(widget)\n@classmethod\ndef setup_example(cls):\nw = widgets.PlainTextEdit()\nreturn cls(w)\n</code></pre>"},{"location":"additional_modules/debugging/QObjectDetailsDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499356832[\"debugging.QObjectDetailsDialog\"]\n  2103261245440[\"widgets.MainWindow\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259730480[\"QtWidgets.QMainWindow\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261245440 --&gt; 2103499356832\n  2103261127360 --&gt; 2103261245440\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259730480 --&gt; 2103261245440\n  2103259691120 --&gt; 2103259730480\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/debugging/QObjectDetailsDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>animated</code> bool <code>documentMode</code> bool <code>tabShape</code> QTabWidget::TabShape <code>dockNestingEnabled</code> bool <code>dockOptions</code> QFlags <code>unifiedTitleAndToolBarOnMac</code> bool"},{"location":"additional_modules/debugging/QtLogger.html","title":"QtLogger","text":""},{"location":"additional_modules/debugging/QtLogger.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>logging.Handler</code></p> Source code in <code>prettyqt\\debugging\\__init__.py</code> <pre><code>class QtLogger(logging.Handler):\ndef emit(self, record: logging.LogRecord):\nmatch record.level:\ncase logging.DEBUG:\nQtCore.qDebug(self.format(record))\ncase logging.INFO:\nQtCore.qInfo(self.format(record))\ncase logging.WARNING:\nQtCore.qWarning(self.format(record))\ncase logging.CRITICAL:\nQtCore.qCritical(self.format(record))\ncase logging.CRITICAL:\nQtCore.qFatal(self.format(record))\n</code></pre>"},{"location":"additional_modules/debugging/QtLogger.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499363552[\"debugging.QtLogger\"]\n  2103200270048[\"logging.Handler\"]\n  2103200289248[\"logging.Filterer\"]\n  140736120080256[\"builtins.object\"]\n  2103200270048 --&gt; 2103499363552\n  2103200289248 --&gt; 2103200270048\n  140736120080256 --&gt; 2103200289248</code></pre>"},{"location":"additional_modules/debugging/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>debugging</li> <li>QObjectDetailsDialog</li> <li>QtLogger</li> <li>ProxyComparerWidget</li> <li>TracebackDialog</li> <li>ErrorMessageBox</li> <li>Stalker</li> <li>MessageHandler</li> </ul>"},{"location":"additional_modules/debugging/Stalker.html","title":"Stalker","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/debugging/Stalker.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.Object</code></p> Source code in <code>prettyqt\\debugging\\stalker.py</code> <pre><code>class Stalker(core.Object):\n# @core.Enum\n# class LogLevel(enum.IntEnum):\n#     \"\"\"Log level.\"\"\"\n#     DEBUG = logging.DEBUG\n#     INFO = logging.INFO\n#     WARNING = logging.WARNING\n#     CRITICAL = logging.CRITICAL\n#     ERROR = logging.ERROR\nkeypress_detected = core.Signal(str)\nleftclick_detected = core.Signal(core.QPointF)\nrightclick_detected = core.Signal(core.QPointF)\nevent_detected = core.Signal(core.QEvent)\nsignal_emitted = core.Signal(core.MetaMethod, object)  # signal, args\nsignal_connected = core.Signal(core.MetaMethod)\nsignal_disconnected = core.Signal(core.MetaMethod)\ndef __init__(\nself,\nqobject: core.QObject,\ninclude=None,\nexclude=None,\n**kwargs,\n):\nself._log_level = logging.INFO\nsuper().__init__(**kwargs)\nself._obj = qobject\nself._meta = core.MetaObject(self._obj.metaObject())\nself.counter: collections.defaultdict[int] = collections.defaultdict(int)\nself.signal_counter: collections.defaultdict[int] = collections.defaultdict(int)\nself.exclude = [\"meta_call\", \"timer\"] if exclude is None else exclude\nself.include = include\nself._handles: list[core.QMetaObject.Connection] = []\ndef __enter__(self):\nself.hook()\nreturn self\ndef __exit__(self, typ, value, traceback):\nself.unhook()\n@property\ndef eventsignals(self):\nreturn EventSignaller(self._obj)\ndef hook(self):\n# enable event logging by installing EventCatcher, which includes logging\nself.eventcatcher = eventfilters.EventCatcher(\nself.include, self.exclude, self._on_event_detected, parent=self._obj\n)\nself._obj.installEventFilter(self.eventcatcher)\n# enable logging of signals emitted by connecting all signals to our fn\nfor signal in self._meta.get_signals(only_notifiers=False):\nsignal_name = signal.get_name()\n# PyQt reports non-existing signals in MetaObject.\nif hasattr(self._obj, signal_name):\nsignal_instance = self._obj.__getattribute__(signal_name)\nfn = self._on_signal_emitted(signal)\nhandle = signal_instance.connect(fn)\nself._handles.append(handle)\nself.log(f\"Stalking {len(self._handles)} signals\")\n# enable logging of all signal (dis)connections by hooking to connectNotify\nself.old_connectNotify = self._obj.connectNotify\nself.old_disconnectNotify = self._obj.disconnectNotify\nself._obj.connectNotify = self._on_signal_connected\nself._obj.disconnectNotify = self._on_signal_disconnected\n# self._obj.destroyed.connect(self.unhook)\n# self.destroyed.connect(self.unhook)\ndef unhook(self):\nif self.eventcatcher is None:\nlogger.warning(\"unhook() called before hook()\")\nreturn None\n\"\"\"Clean up our mess.\"\"\"\nself._obj.connectNotify = self.old_connectNotify\nself._obj.disconnectNotify = self.old_disconnectNotify\nself.old_connectNotify = None\nself.old_disconnectNotify = None\nfor handle in self._handles:\nself._obj.disconnect(handle)\nself._handles = []\nwith contextlib.suppress(RuntimeError):\nself._obj.removeEventFilter(self.eventcatcher)\ndef log(self, message: str):\nif self.log_level:\nwith contextlib.suppress(RuntimeError):\nlogger.log(self._log_level, f\"{self._obj!r}: {message}\")\ndef _on_signal_connected(self, qsignal: core.QMetaMethod):\nsignal = core.MetaMethod(qsignal)\nself.log(f\"Connected signal {signal.get_name()}\")\nself.signal_connected.emit(signal)\ndef _on_signal_disconnected(self, qsignal: core.QMetaMethod):\nsignal = core.MetaMethod(qsignal)\nself.log(f\"Disconnected signal {signal.get_name()}\")\nself.signal_disconnected.emit(signal)\ndef _on_event_detected(self, event) -&gt; bool:\n\"\"\"Used for EventCatcher, returns false to not eat signals.\"\"\"\ntry:\nself.event_detected.emit(event)\nexcept RuntimeError:\nreturn\nmatch event.type():\ncase core.Event.Type.KeyPress:\ncombo = gui.KeySequence(event.keyCombination()).toString()\nself.keypress_detected.emit(combo)\ncase core.Event.Type.MouseButtonRelease:\nif event.button() == constants.MouseButton.LeftButton:\nself.leftclick_detected.emit(event.position())\nif event.button() == constants.MouseButton.RightButton:\nself.rightclick_detected.emit(event.position())\nself.log(f\"Received event {event.type()!r}\")\nself.counter[event.type()] += 1\nreturn False\ndef _on_signal_emitted(self, signal: core.MetaMethod):\ndef fn(*args, **kwargs):\ntry:\nself.signal_emitted.emit(signal, args)\nself.signal_counter[signal.get_name()] += 1\nself.log(f\"Emitted signal {signal.get_name()}{args}\")\nexcept RuntimeError:\npass\nreturn fn\ndef set_log_level(self, level: int):\nself._log_level = level\ndef get_log_level(self) -&gt; int:\nreturn self._log_level\ndef count_children(self, type_filter: type[T] = core.QObject) -&gt; collections.Counter:\nobjects = self.findChildren(type_filter)\nreturn collections.Counter([type(o) for o in objects])\ndef show(self):\nfrom prettyqt import custom_widgets\nwidget = custom_widgets.LogRecordTableView()\nwidget.set_logger(logger, level=self.log_level)\nwidget.show()\nlog_level = core.Property(\nint,\nget_log_level,\nset_log_level,\ndoc=\"Level to use for logging\",\n)\n</code></pre>"},{"location":"additional_modules/debugging/Stalker.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499328992[\"debugging.Stalker\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255068432 --&gt; 2103499328992\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/debugging/Stalker.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>log_level</code> int Level to use for logging"},{"location":"additional_modules/debugging/TracebackDialog.html","title":"TracebackDialog","text":"<p>Qt Base Class: QDialog</p> <p>Signature: <code>QDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/debugging/TracebackDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Dialog</code></p> <p>A dialog box that shows Python traceback.</p> Source code in <code>prettyqt\\debugging\\tracebackdialog.py</code> <pre><code>class TracebackDialog(widgets.Dialog):\n\"\"\"A dialog box that shows Python traceback.\"\"\"\ndef __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent, window_title=\"Traceback\")\nlayout = self.set_layout(\"vertical\")\nself._text = widgets.TextEdit(self, read_only=True, line_wrap_mode=\"none\")\nself._text.setFontFamily(gui.Font.mono().family())\nlayout.addWidget(self._text)\nself.resize(600, 400)\ndef setText(self, text: str):\n\"\"\"Always set text as a HTML text.\"\"\"\nself._text.setHtml(text)\n</code></pre>"},{"location":"additional_modules/debugging/TracebackDialog.html#prettyqt.debugging.tracebackdialog.TracebackDialog.setText","title":"<code>setText(text: str)</code>","text":"<p>Always set text as a HTML text.</p> Source code in <code>prettyqt\\debugging\\tracebackdialog.py</code> <pre><code>def setText(self, text: str):\n\"\"\"Always set text as a HTML text.\"\"\"\nself._text.setHtml(text)\n</code></pre>"},{"location":"additional_modules/debugging/TracebackDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499361632[\"debugging.TracebackDialog\"]\n  2103261214720[\"widgets.Dialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261214720 --&gt; 2103499361632\n  2103261212800 --&gt; 2103261214720\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259840880 --&gt; 2103261214720\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/debugging/TracebackDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"additional_modules/eventfilters/index.html","title":"eventfilters","text":"Name Children Inherits TextUpdateEventFilterprettyqt.eventfilters.timelabeleventfilter <ul><li>TimeLabelEventFilter</li><li>DateLabelEventFilter</li></ul> <ul><li>BaseEventFilter</li></ul> AutoSizeColumnsEventFilterprettyqt.eventfilters.autosizecolumnseventfilter <ul><li>BaseEventFilter</li></ul> SectionAutoSpanEventFilterprettyqt.eventfilters.sectionautospaneventfilter <ul><li>BaseEventFilter</li></ul> DateLabelEventFilterprettyqt.eventfilters.timelabeleventfilter <ul><li>TextUpdateEventFilter</li></ul> BaseEventFilterprettyqt.eventfilters.baseeventfilter <ul><li>AnimatedToolTipEventFilter</li><li>AutoSizeColumnsEventFilter</li><li>EventCatcher</li><li>HoverIconEventFilter</li><li>ListViewGridResizeEventFilter</li><li>SectionAutoSpanEventFilter</li><li>SliderMoveToMouseClickEventFilter</li><li>TextUpdateEventFilter</li></ul> <ul><li>Object</li></ul> SliderMoveToMouseClickEventFilterprettyqt.eventfilters.slidermovetomouseclickeventfilter <ul><li>BaseEventFilter</li></ul> AnimatedToolTipEventFilterprettyqt.eventfilters.animatedtooltipeventfilter <ul><li>BaseEventFilter</li></ul> HoverIconEventFilterprettyqt.eventfilters.hovericoneventfilter <ul><li>BaseEventFilter</li></ul> TimeLabelEventFilterprettyqt.eventfilters.timelabeleventfilter <ul><li>TextUpdateEventFilter</li></ul> ListViewGridResizeEventFilterprettyqt.eventfilters.listviewgridresizeeventfilter <ul><li>BaseEventFilter</li></ul> EventCatcherprettyqt.eventfilters.eventcatcher <ul><li>BaseEventFilter</li></ul>"},{"location":"additional_modules/eventfilters/AnimatedToolTipEventFilter.html","title":"AnimatedToolTipEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/AnimatedToolTipEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\animatedtooltipeventfilter.py</code> <pre><code>class AnimatedToolTipEventFilter(eventfilters.BaseEventFilter):\nID = \"animated_tooltip\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.tool_tip = widgets.Label()\nself.tool_tip.set_flags(frameless=True, tooltip=True)\nself.tool_tip.set_attributes(\ntransparent_for_mouse_events=True,\nno_system_background=True,\ntranslucent_background=True,\n)\nself.tool_tip.hide()\nself.slide_anim = animations.SlideAnimation(self.tool_tip, duration=1000)\nself.slide_anim.apply_to(self.tool_tip)\nself.fade_anim = animations.FadeInAnimation(duration=1000)\nself.fade_anim.apply_to(self.tool_tip)\nself.animation = self.slide_anim | self.fade_anim\ndef eventFilter(self, obj: widgets.QWidget, event: core.QEvent) -&gt; bool:\nmatch event.type():\ncase core.QEvent.Type.Enter:\n# self.tool_tip.adjustSize()\nself.tool_tip.setText(obj.toolTip())\nself.tool_tip.show()\nposition = \"bottom\"\ndistance = 100\ncenter = obj.rect().center()\nmatch position:\ncase \"top\":\ncenter.setY(obj.rect().bottom())\ndelta = core.Point(0, distance)\ncase \"bottom\":\ncenter.setY(obj.rect().top())\ndelta = core.Point(0, -distance)\ncase \"left\":\ncenter.setX(obj.rect().right())\ndelta = core.Point(distance, 0)\ncase \"right\":\ncenter.setX(obj.rect().left())\ndelta = core.Point(-distance, 0)\ncenter = obj.mapToGlobal(center)\nself.slide_anim.set_start_value(center + delta)\nself.slide_anim.set_end_value(center)\nself.animation.start_animation()\ncase core.QEvent.Type.Leave:\nself.tool_tip.hide()\nself.animation.stop()\ncase core.QEvent.Type.ToolTip:\nreturn True\nreturn super().eventFilter(obj, event)\n</code></pre>"},{"location":"additional_modules/eventfilters/AnimatedToolTipEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261543888[\"eventfilters.AnimatedToolTipEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261543888\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/AnimatedToolTipEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/AutoSizeColumnsEventFilter.html","title":"AutoSizeColumnsEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/AutoSizeColumnsEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\autosizecolumnseventfilter.py</code> <pre><code>class AutoSizeColumnsEventFilter(eventfilters.BaseEventFilter):\nID = \"autosize_columns\"\ndef __init__(\nself,\nparent: widgets.TableView | widgets.TreeView,\norientation: constants.Orientation\n| constants.OrientationStr = constants.VERTICAL,\n):\nsuper().__init__(parent)\nself._widget = parent\nself.orientation = constants.ORIENTATION.get_enum_value(orientation)\nparent.model_changed.connect(self._on_model_change)\nself._autosized_sections = set()\nself.last_span: tuple[int, int] | None = None\nif self.orientation == constants.VERTICAL:\nparent.h_scrollbar.valueChanged.connect(self._on_scroll)\nelse:\nparent.v_scrollbar.valueChanged.connect(self._on_scroll)\n# if sel_model := parent.selectionModel():\n#     sel_model.currentColumnChanged.connect(self._resize_current_col_to_content)\ndef _on_model_change(self):\nself._autosized_sections = set()\n# sel_model = self._widget.selectionModel()\n# sel_model.currentColumnChanged.connect(self._resize_current_col_to_content)\ndef eventFilter(self, obj, event: core.Event) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.Resize:\nself._on_scroll()\nreturn False\nreturn super().eventFilter(obj, event)\n# def _resize_current_col_to_content(self, new_index, old_index):\n#     if new_index.column() not in self._autosized_sections:\n#         # ensure the requested column is fully into view after resizing\n#         self._widget.resize_visible_columns_to_contents()\n#         self._widget.scrollTo(new_index)\ndef _on_scroll(self):\nif self.orientation == constants.VERTICAL:\ncolcount = self._widget.model().columnCount()\nspan = self._widget.get_visible_section_span(\"horizontal\")\nif span == self.last_span:\nreturn\nself.last_span = span\ncol, end = span\nwidth = self._widget.viewport().width()\nwhile col &lt;= end:\nif col not in self._autosized_sections:\nself._autosized_sections.add(col)\nself._widget.resizeColumnToContents(col)\ncol += 1\nend = self._widget.columnAt(width)\nend = colcount if end == -1 else end\nelse:\nrowcount = self._widget.model().rowCount()\nspan = self._widget.get_visible_section_span(\"vertical\")\nif span == self.last_span:\nreturn\nself.last_span = span\nrow, end = span\nheight = self._widget.viewport().height()\nwhile row &lt;= end:\nif row not in self._autosized_sections:\nself._autosized_sections.add(row)\nself._widget.resizeRowToContents(row)\nrow += 1\nend = self._widget.rowAt(height)\nend = rowcount if end == -1 else end\n</code></pre>"},{"location":"additional_modules/eventfilters/AutoSizeColumnsEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261526608[\"eventfilters.AutoSizeColumnsEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261526608\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/AutoSizeColumnsEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/BaseEventFilter.html","title":"BaseEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/BaseEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.Object</code></p> Source code in <code>prettyqt\\eventfilters\\baseeventfilter.py</code> <pre><code>class BaseEventFilter(core.Object):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not self.objectName():\nself.setObjectName(type(self).__name__)\n@contextlib.contextmanager\ndef applied_to(self, obj):\nobj.installEventFilter(self)\nyield obj\nobj.removeEventFilter(self)\n</code></pre> Name Children Inherits AnimatedToolTipEventFilterprettyqt.eventfilters.animatedtooltipeventfilter <ul><li>BaseEventFilter</li></ul> AutoSizeColumnsEventFilterprettyqt.eventfilters.autosizecolumnseventfilter <ul><li>BaseEventFilter</li></ul> EventCatcherprettyqt.eventfilters.eventcatcher <ul><li>BaseEventFilter</li></ul> HoverIconEventFilterprettyqt.eventfilters.hovericoneventfilter <ul><li>BaseEventFilter</li></ul> ListViewGridResizeEventFilterprettyqt.eventfilters.listviewgridresizeeventfilter <ul><li>BaseEventFilter</li></ul> SectionAutoSpanEventFilterprettyqt.eventfilters.sectionautospaneventfilter <ul><li>BaseEventFilter</li></ul> SliderMoveToMouseClickEventFilterprettyqt.eventfilters.slidermovetomouseclickeventfilter <ul><li>BaseEventFilter</li></ul> TextUpdateEventFilterprettyqt.eventfilters.timelabeleventfilter <ul><li>TimeLabelEventFilter</li><li>DateLabelEventFilter</li></ul> <ul><li>BaseEventFilter</li></ul>"},{"location":"additional_modules/eventfilters/BaseEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/BaseEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/DateLabelEventFilter.html","title":"DateLabelEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/DateLabelEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextUpdateEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\timelabeleventfilter.py</code> <pre><code>class DateLabelEventFilter(TextUpdateEventFilter):\nID = \"date_label\"\ndef __init__(self, parent, date_format: str = \"dd.MM.yyyy\", **kwargs):\nself._format = date_format\nsuper().__init__(parent, **kwargs)\ndef _update_text(self):\ntime = core.Date.get_current_date()\nself.parent().set_text(time.toString(self._format))\n</code></pre>"},{"location":"additional_modules/eventfilters/DateLabelEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261540048[\"eventfilters.DateLabelEventFilter\"]\n  2103261536208[\"eventfilters.TextUpdateEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261536208 --&gt; 2103261540048\n  2103261524688 --&gt; 2103261536208\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/DateLabelEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/EventCatcher.html","title":"EventCatcher","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/EventCatcher.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\eventcatcher.py</code> <pre><code>class EventCatcher(eventfilters.BaseEventFilter):\nID = \"eventcatcher\"\ncaught = core.Signal(core.QEvent)\ndef __init__(\nself,\ninclude: core.QEvent.Type\n| core.event.TypeStr\n| Sequence[core.QEvent.Type | core.event.TypeStr]\n| None = None,\nexclude: core.QEvent.Type\n| core.event.TypeStr\n| Sequence[core.QEvent.Type | core.event.TypeStr]\n| None = None,\ndo_filter: bool | Callable[[core.QEvent], bool] = False,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nmatch include:\ncase str():\nself.include = [core.event.TYPE[include]]\ncase Sequence():\nself.include = [\ncore.event.TYPE[i] if isinstance(i, str) else i for i in include\n]\ncase core.QEvent.Type():\nself.include = [include]\ncase None:\nself.include = []\ncase _:\nraise ValueError(include)\nmatch exclude:\ncase str():\nself.exclude = [core.event.TYPE[exclude]]\ncase Sequence():\nself.exclude = [\ncore.event.TYPE[i] if isinstance(i, str) else i for i in exclude\n]\ncase core.QEvent.Type():\nself.exclude = [exclude]\ncase None:\nself.exclude = []\ncase _:\nraise ValueError(exclude)\nself.do_filter = do_filter\ndef eventFilter(self, source: core.QObject, event: core.QEvent) -&gt; bool:\nif (not self.include or event.type() in self.include) and (\nnot self.exclude or event.type() not in self.exclude\n):\nself.caught.emit(event)\n# logger.debug(f\"{source!r}: {event.type()!r}\")\nval = self.do_filter(event) if callable(self.do_filter) else self.do_filter\nif not isinstance(val, bool):\nlogger.warning(f\"Non-bool value returned for {source!r}: {val} \")\nreturn bool(val)\nreturn False\n</code></pre>"},{"location":"additional_modules/eventfilters/EventCatcher.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261528528[\"eventfilters.EventCatcher\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261528528\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/EventCatcher.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/HoverIconEventFilter.html","title":"HoverIconEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/HoverIconEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\hovericoneventfilter.py</code> <pre><code>class HoverIconEventFilter(eventfilters.BaseEventFilter):\ndef __init__(self, normal, hover, pressed=None, parent=None):\nsuper().__init__(parent)\nself.normal = normal\nself.hover = hover\nself.pressed = pressed\ndef eventFilter(self, obj, event: core.Event) -&gt; bool:\n# if obj is not self.parent():\n#     return super().eventFilter(obj, event)\nmatch event.type():\ncase core.Event.Type.Enter | core.Event.Type.MouseButtonRelease if self.hover:\nobj.set_icon(self.hover)\ncase core.Event.Type.Leave:\nobj.set_icon(self.normal)\ncase core.Event.Type.MouseButtonPress if self.pressed:\nobj.set_icon(self.pressed)\nreturn super().eventFilter(obj, event)\n</code></pre>"},{"location":"additional_modules/eventfilters/HoverIconEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261531408[\"eventfilters.HoverIconEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261531408\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/HoverIconEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/ListViewGridResizeEventFilter.html","title":"ListViewGridResizeEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/ListViewGridResizeEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> <p>Eventfilter that scales grid size of ListViews.</p> Source code in <code>prettyqt\\eventfilters\\listviewgridresizeeventfilter.py</code> <pre><code>class ListViewGridResizeEventFilter(eventfilters.BaseEventFilter):\n\"\"\"Eventfilter that scales grid size of ListViews.\"\"\"\nID = \"listview_grid_resize\"\ndef __init__(\nself, num_columns: int = 5, parent: widgets.ListView | None = None, **kwargs\n):\nsuper().__init__(parent=parent, **kwargs)\nself._view_columns = num_columns\ndef eventFilter(self, source, event: core.Event) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.Resize:\nself._resize(source)\nreturn super().eventFilter(source, event)\ndef _resize(self, source: widgets.ListView):\nwidth = source.width() - 30\n# The minus 30 above ensures we don't end up with an item width that\n# can't be drawn the expected number of times across the view without\n# being wrapped. Without this, the view can flicker during resize\ntile_width = int(width / self._view_columns)\nicon_width = int(tile_width * 0.8)\nsource.setGridSize(core.QSize(tile_width, tile_width))\nsource.setIconSize(core.QSize(icon_width, icon_width))\n</code></pre>"},{"location":"additional_modules/eventfilters/ListViewGridResizeEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261529488[\"eventfilters.ListViewGridResizeEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261529488\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/ListViewGridResizeEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>eventfilters</li> <li>TextUpdateEventFilter</li> <li>AutoSizeColumnsEventFilter</li> <li>SectionAutoSpanEventFilter</li> <li>DateLabelEventFilter</li> <li>BaseEventFilter</li> <li>SliderMoveToMouseClickEventFilter</li> <li>AnimatedToolTipEventFilter</li> <li>HoverIconEventFilter</li> <li>TimeLabelEventFilter</li> <li>ListViewGridResizeEventFilter</li> <li>EventCatcher</li> </ul>"},{"location":"additional_modules/eventfilters/SectionAutoSpanEventFilter.html","title":"SectionAutoSpanEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/SectionAutoSpanEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\sectionautospaneventfilter.py</code> <pre><code>class SectionAutoSpanEventFilter(eventfilters.BaseEventFilter):\nID = \"autospan_sections\"\ndef __init__(\nself,\nparent: widgets.TableView | widgets.TreeView,\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\n):\nsuper().__init__(parent)\nself._widget = parent\nself._last_start = None\nself._last_end = None\nself.orientation = constants.ORIENTATION.get_enum_value(orientation)\nif self.orientation == constants.HORIZONTAL:\nparent.h_scrollbar.valueChanged.connect(self._update_spans)\nelse:\nparent.v_scrollbar.valueChanged.connect(self._update_spans)\nparent.model().headerDataChanged.connect(self._on_force_update)\nparent.model_changed.connect(self._on_force_update)\nparent.installEventFilter(self)\nself._update_spans()\n# sel_model = parent.selectionModel()\n# if not sel_model:\n#     return\ndef _on_force_update(self):\nself._update_spans(True)\ndef eventFilter(self, obj, event: core.Event) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.Resize:\nself._update_spans()\nreturn False\nreturn super().eventFilter(obj, event)\ndef _update_spans(self, force: bool = False):\ncols = self._widget.get_visible_section_span(\"horizontal\", margin=1)\nrows = self._widget.get_visible_section_span(\"vertical\", margin=1)\nstart = (rows[0], cols[0])\nend = (rows[1], cols[1])\nif start == self._last_start and end == self._last_end and not force:\nreturn\nself._last_start = start\nself._last_end = end\nself._widget.clearSpans()\nself._widget.auto_span(orientation=self.orientation, start=start, end=end)\n</code></pre>"},{"location":"additional_modules/eventfilters/SectionAutoSpanEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261525648[\"eventfilters.SectionAutoSpanEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261525648\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/SectionAutoSpanEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/SliderMoveToMouseClickEventFilter.html","title":"SliderMoveToMouseClickEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/SliderMoveToMouseClickEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\slidermovetomouseclickeventfilter.py</code> <pre><code>class SliderMoveToMouseClickEventFilter(eventfilters.BaseEventFilter):\nID = \"slider_move_to_mouse_click\"\ndef _move_to_mouse_position(self, scrollbar: widgets.QScrollBar, point: core.QPoint):\nopt = widgets.StyleOptionSlider()\nscrollbar.initStyleOption(opt)\ncontrol = scrollbar.style().hitTestComplexControl(\nCC.CC_ScrollBar, opt, point, scrollbar\n)\nif control not in {SC.SC_ScrollBarAddPage, SC.SC_ScrollBarSubPage}:\nreturn\n# scroll here\ngr = scrollbar.style().subControlRect(\nCC.CC_ScrollBar, opt, SC.SC_ScrollBarGroove, scrollbar\n)\nsr = scrollbar.style().subControlRect(\nCC.CC_ScrollBar, opt, SC.SC_ScrollBarSlider, scrollbar\n)\nif scrollbar.orientation() == constants.Orientation.Horizontal:\npos = point.x()\nslider_length = sr.width()\nslider_min = gr.x()\nslider_max = gr.right() - slider_length + 1\nif scrollbar.layoutDirection() == constants.LayoutDirection.RightToLeft:\nopt.upsideDown = not opt.upsideDown\nelse:\npos = point.y()\nslider_length = sr.height()\nslider_min = gr.y()\nslider_max = gr.bottom() - slider_length + 1\nvalue = widgets.QStyle.sliderValueFromPosition(\nscrollbar.minimum(),\nscrollbar.maximum(),\npos - slider_min - slider_length // 2,\nslider_max - slider_min,\nopt.upsideDown,\n)\nscrollbar.setValue(value)\ndef eventFilter(self, source: widgets.QScrollBar, event: core.QEvent):\nmatch event.type():\ncase core.QEvent.Type.MouseMove:\nif event.buttons() &amp; constants.MouseButton.LeftButton:\npoint = event.position().toPoint()\nself._move_to_mouse_position(source, point)\ncase core.QEvent.Type.MouseButtonPress:\nif event.button() == constants.MouseButton.LeftButton:\npoint = event.position().toPoint()\nself._move_to_mouse_position(source, point)\nreturn False\n</code></pre>"},{"location":"additional_modules/eventfilters/SliderMoveToMouseClickEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261547728[\"eventfilters.SliderMoveToMouseClickEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261547728\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/SliderMoveToMouseClickEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/TextUpdateEventFilter.html","title":"TextUpdateEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/TextUpdateEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>eventfilters.BaseEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\timelabeleventfilter.py</code> <pre><code>class TextUpdateEventFilter(eventfilters.BaseEventFilter):\ndef __init__(self, parent, interval: int = 1000, **kwargs):\nsuper().__init__(parent, **kwargs)\nparent.startTimer(interval)\nself._update_text()\ndef eventFilter(self, obj, event: core.QEvent) -&gt; bool:\n# if obj is not self.parent():\n#     return super().eventFilter(obj, event)\nmatch event.type():\ncase core.Event.Type.Timer:\nself._update_text()\nreturn True\nreturn super().eventFilter(obj, event)\ndef _update_text(self):\nreturn NotImplemented\n</code></pre> Name Children Inherits TimeLabelEventFilterprettyqt.eventfilters.timelabeleventfilter <ul><li>TextUpdateEventFilter</li></ul> DateLabelEventFilterprettyqt.eventfilters.timelabeleventfilter <ul><li>TextUpdateEventFilter</li></ul>"},{"location":"additional_modules/eventfilters/TextUpdateEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261536208[\"eventfilters.TextUpdateEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261524688 --&gt; 2103261536208\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/TextUpdateEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/eventfilters/TimeLabelEventFilter.html","title":"TimeLabelEventFilter","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/eventfilters/TimeLabelEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextUpdateEventFilter</code></p> Source code in <code>prettyqt\\eventfilters\\timelabeleventfilter.py</code> <pre><code>class TimeLabelEventFilter(TextUpdateEventFilter):\nID = \"time_label\"\ndef __init__(self, parent, time_format: str = \"hh:mm:ss\", **kwargs):\nself._format = time_format\nsuper().__init__(parent, **kwargs)\ndef _update_text(self):\ntime = core.Time.get_current_time()\nself.parent().set_text(time.toString(self._format))\n</code></pre>"},{"location":"additional_modules/eventfilters/TimeLabelEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261537168[\"eventfilters.TimeLabelEventFilter\"]\n  2103261536208[\"eventfilters.TextUpdateEventFilter\"]\n  2103261524688[\"eventfilters.BaseEventFilter\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261536208 --&gt; 2103261537168\n  2103261524688 --&gt; 2103261536208\n  2103255068432 --&gt; 2103261524688\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/eventfilters/TimeLabelEventFilter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/iconprovider/index.html","title":"iconprovider","text":"Name Children Inherits FontErrorprettyqt.iconprovider.iconic_fontException for font errors. <ul><li>Exception</li></ul> IconicFontprettyqt.iconprovider.iconic_fontMain class for managing iconic fonts. <ul><li>object</li></ul> IconFontprettyqt.iconproviderClass describing an Icon font. <ul><li>object</li></ul>"},{"location":"additional_modules/iconprovider/FontError.html","title":"FontError","text":""},{"location":"additional_modules/iconprovider/FontError.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>Exception</code></p> <p>Exception for font errors.</p> Source code in <code>prettyqt\\iconprovider\\iconic_font.py</code> <pre><code>class FontError(Exception):\n\"\"\"Exception for font errors.\"\"\"\n</code></pre>"},{"location":"additional_modules/iconprovider/FontError.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260773136[\"iconprovider.FontError\"]\n  140736120050128[\"builtins.Exception\"]\n  140736120050960[\"builtins.BaseException\"]\n  140736120080256[\"builtins.object\"]\n  140736120050128 --&gt; 2103260773136\n  140736120050960 --&gt; 140736120050128\n  140736120080256 --&gt; 140736120050960</code></pre>"},{"location":"additional_modules/iconprovider/IconFont.html","title":"IconFont","text":""},{"location":"additional_modules/iconprovider/IconFont.html#docstrings","title":"DocStrings","text":"<p>Class describing an Icon font.</p> Source code in <code>prettyqt\\iconprovider\\__init__.py</code> <pre><code>@dataclass\nclass IconFont:\n\"\"\"Class describing an Icon font.\"\"\"\nprefix: str\nfont_path: str\ncharmap_path: str\nmd5: str\nstylename: str | None = None\npath: pathlib.Path = paths.ICON_FONT_PATH\ndef __post_init__(self):\nhash_val = None if SYSTEM_FONTS else self.md5\nid_ = gui.FontDatabase.add_font(self.path / self.font_path, ttf_hash=hash_val)\nloaded_font_families = gui.FontDatabase.applicationFontFamilies(id_)\nself.font_id = id_\nself.font_name = loaded_font_families[0]\nwith (self.path / self.charmap_path).open(\"r\") as codes:\nself.charmap = json.load(codes, object_hook=hook)\ndef __dir__(self):\nicons = [i.replace(\"-\", \"_\") for i in self.charmap]\nreturn list(super().__dir__()) + icons\ndef __getattr__(self, name: str):\nreturn f\"{self.prefix}.{name.replace('_', '-')}\"\ndef is_valid(self) -&gt; bool:\nreturn len(gui.FontDatabase.applicationFontFamilies(self.font_id)) &gt; 0\ndef get_font(self, size: float) -&gt; gui.Font:\nfont = gui.Font(self.font_name)\nfont.setPixelSize(round(size))\nif self.stylename:  # solid style\nfont.setStyleName(self.stylename)\nreturn font\n</code></pre>"},{"location":"additional_modules/iconprovider/IconFont.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260775056[\"iconprovider.IconFont\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260775056</code></pre>"},{"location":"additional_modules/iconprovider/IconicFont.html","title":"IconicFont","text":""},{"location":"additional_modules/iconprovider/IconicFont.html#docstrings","title":"DocStrings","text":"<p>Main class for managing iconic fonts.</p> Source code in <code>prettyqt\\iconprovider\\iconic_font.py</code> <pre><code>class IconicFont:\n\"\"\"Main class for managing iconic fonts.\"\"\"\ndef __init__(self, *args):\nsuper().__init__()\nself.icon_cache = {}\nself.fonts = {font.prefix: font for font in args}\ndef paint(\nself,\npainter: gui.Painter,\nrect: QtCore.QRect,\nmode: gui.QIcon.Mode,\nstate: gui.QIcon.State,\noptions: Iterable[dict[str, Any]],\n):\ncolor_str, char = COLOR_OPTIONS[state][mode]\nfor opt in options:\npainter.save()\ncolor = gui.Color(opt[color_str])\npainter.setPen(color)\n# A 16 pixel-high icon yields a font size of 14, which is pixel perfect\n# for font-awesome. 16 * 0.875 = 14\n# The reason why the glyph size is smaller than the icon size is to\n# account for font bearing.\ndraw_size = round(0.875 * rect.height() * opt[\"scale_factor\"])\n# Animation setup hook\nif (animation := opt.get(\"animation\")) is not None:\nanimation.setup(painter, rect)\nfont = self.fonts[opt[\"prefix\"]].get_font(draw_size)\npainter.setFont(font)\nif \"offset\" in opt:\nrect.translate(\nround(opt[\"offset\"][0] * rect.width()),\nround(opt[\"offset\"][1] * rect.height()),\n)\nx_center = rect.width() * 0.5\ny_center = rect.height() * 0.5\npainter.translate(x_center, y_center)\ntransform = gui.Transform()\nif opt.get(\"vflip\") is True:\ntransform.scale(1, -1)\nif opt.get(\"hflip\") is True:\ntransform.scale(-1, 1)\nif \"rotated\" in opt:\ntransform.rotate(opt[\"rotated\"])\npainter.setTransform(transform, True)\npainter.translate(-x_center, -y_center)\nif (opacity := opt.get(\"opacity\")) is not None:\npainter.setOpacity(opacity)\npainter.drawText(rect, int(constants.ALIGN_CENTER), opt[char])  # type: ignore\npainter.restore()\ndef has_valid_font_ids(self) -&gt; bool:\n\"\"\"Validates instance's font ids are loaded to QFontDatabase.\n        It is possible that QFontDatabase was reset or QApplication was recreated\n        in both cases it is possible that font is not available.\n        \"\"\"\n# Check stored font ids are still available\nreturn all(font.is_valid() for font in self.fonts.values())\ndef icon(self, *names, **kwargs) -&gt; gui.QIcon:\n\"\"\"Returns a gui.QIcon object corresponding to the provided icon name.\"\"\"\ncache_key = f\"{names}{kwargs}\"\nif cache_key in self.icon_cache:\nreturn self.icon_cache[cache_key]\nopts = kwargs.pop(\"options\", [{}] * len(names))\nif len(opts) != len(names):\nraise TypeError(f'\"options\" must be a list of size {len(names)}')\nparsed_options = [self._parse_options(o, kwargs, n) for o, n in zip(opts, names)]\nengine = chariconengine.CharIconEngine(self, parsed_options)\nicon = gui.QIcon(engine)\nself.icon_cache[cache_key] = icon\nreturn icon\ndef _parse_options(\nself, specific_options: dict, general_options: dict, name: str\n) -&gt; dict[str, Any]:\noptions = dict(_default_options, **general_options) | specific_options\n# Handle icons for modes (Active, Disabled, Selected, Normal)\n# and states (On, Off)\nchar = options.get(\"char\", name)\non = options.get(\"on\", char)\noff = options.get(\"off\", char)\nactive = options.get(\"active\", on)\nselected = options.get(\"selected\", active)\ndisabled = options.get(\"disabled\", char)\non_active = options.get(\"on_active\", active)\non_selected = options.get(\"on_selected\", selected)\non_disabled = options.get(\"on_disabled\", disabled)\noff_active = options.get(\"off_active\", active)\noff_selected = options.get(\"off_selected\", selected)\noff_disabled = options.get(\"off_disabled\", disabled)\nicon_dict = {\n\"char\": char,\n\"on\": on,\n\"off\": off,\n\"active\": active,\n\"selected\": selected,\n\"disabled\": disabled,\n\"on_active\": on_active,\n\"on_selected\": on_selected,\n\"on_disabled\": on_disabled,\n\"off_active\": off_active,\n\"off_selected\": off_selected,\n\"off_disabled\": off_disabled,\n}\nnames = [icon_dict.get(kw, name) for kw in ICON_KW]\nchars = []\nfor name in names:\nif \".\" not in name:\nraise Exception(\"Invalid icon name\")\nprefix, n = name.split(\".\")\nif prefix not in self.fonts:\nraise Exception(f\"Invalid font prefix {prefix!r}\")\nif n not in self.fonts[prefix].charmap:\nraise Exception(f\"Invalid icon name {n!r} in font {prefix!r}\")\nchars.append(self.fonts[prefix].charmap[n])\noptions |= dict(zip(*(ICON_KW, chars)))\noptions[\"prefix\"] = prefix\n# Handle colors for modes (Active, Disabled, Selected, Normal)\n# and states (On, Off)\ncolor = options.get(\"color\")\noptions.setdefault(\"color_on\", color)\noptions.setdefault(\"color_active\", options[\"color_on\"])\noptions.setdefault(\"color_selected\", options[\"color_active\"])\noptions.setdefault(\"color_on_active\", options[\"color_active\"])\noptions.setdefault(\"color_on_selected\", options[\"color_selected\"])\noptions.setdefault(\"color_on_disabled\", options[\"color_disabled\"])\noptions.setdefault(\"color_off\", color)\noptions.setdefault(\"color_off_active\", options[\"color_active\"])\noptions.setdefault(\"color_off_selected\", options[\"color_selected\"])\noptions.setdefault(\"color_off_disabled\", options[\"color_disabled\"])\nreturn options\n</code></pre>"},{"location":"additional_modules/iconprovider/IconicFont.html#prettyqt.iconprovider.iconic_font.IconicFont.has_valid_font_ids","title":"<code>has_valid_font_ids() -&gt; bool</code>","text":"<p>Validates instance's font ids are loaded to QFontDatabase.</p> <p>It is possible that QFontDatabase was reset or QApplication was recreated in both cases it is possible that font is not available.</p> Source code in <code>prettyqt\\iconprovider\\iconic_font.py</code> <pre><code>def has_valid_font_ids(self) -&gt; bool:\n\"\"\"Validates instance's font ids are loaded to QFontDatabase.\n    It is possible that QFontDatabase was reset or QApplication was recreated\n    in both cases it is possible that font is not available.\n    \"\"\"\n# Check stored font ids are still available\nreturn all(font.is_valid() for font in self.fonts.values())\n</code></pre>"},{"location":"additional_modules/iconprovider/IconicFont.html#prettyqt.iconprovider.iconic_font.IconicFont.icon","title":"<code>icon(*names, **kwargs) -&gt; gui.QIcon</code>","text":"<p>Returns a gui.QIcon object corresponding to the provided icon name.</p> Source code in <code>prettyqt\\iconprovider\\iconic_font.py</code> <pre><code>def icon(self, *names, **kwargs) -&gt; gui.QIcon:\n\"\"\"Returns a gui.QIcon object corresponding to the provided icon name.\"\"\"\ncache_key = f\"{names}{kwargs}\"\nif cache_key in self.icon_cache:\nreturn self.icon_cache[cache_key]\nopts = kwargs.pop(\"options\", [{}] * len(names))\nif len(opts) != len(names):\nraise TypeError(f'\"options\" must be a list of size {len(names)}')\nparsed_options = [self._parse_options(o, kwargs, n) for o, n in zip(opts, names)]\nengine = chariconengine.CharIconEngine(self, parsed_options)\nicon = gui.QIcon(engine)\nself.icon_cache[cache_key] = icon\nreturn icon\n</code></pre>"},{"location":"additional_modules/iconprovider/IconicFont.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260774096[\"iconprovider.IconicFont\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260774096</code></pre>"},{"location":"additional_modules/iconprovider/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>iconprovider</li> <li>FontError</li> <li>IconicFont</li> <li>IconFont</li> </ul>"},{"location":"additional_modules/ipython/index.html","title":"ipython","text":"Name Children Inherits OutOfProcessIPythonWidgetprettyqt.ipython.outofprocessipythonwidgetConvenience class for a live IPython console widget running out-of-process. <ul><li>BaseIPythonWidget</li></ul> InProcessIPythonWidgetprettyqt.ipython.inprocessipythonwidgetConvenience class for a live IPython console widget. <ul><li>BaseIPythonWidget</li></ul> BaseIPythonWidgetprettyqt.ipython.baseipythonwidgetConvenience class for a live IPython console widget running out-of-process. <ul><li>InProcessIPythonWidget</li><li>OutOfProcessIPythonWidget</li></ul> <ul><li>RichJupyterWidget</li><li>WidgetMixin</li></ul>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html","title":"BaseIPythonWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>RichJupyterWidget</code>, <code>widgets.WidgetMixin</code></p> <p>Convenience class for a live IPython console widget running out-of-process.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>class BaseIPythonWidget(RichJupyterWidget, widgets.WidgetMixin):\n\"\"\"Convenience class for a live IPython console widget running out-of-process.\"\"\"\ncode_executed = core.Signal(str)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(\ngui_completion=\"droplist\",  # 'plain', 'droplist', 'ncurses'\nkind=\"rich\",  # 'plain', 'rich', only applies when no custom control set.\npaging=\"vsplit\",  # h  'inside', 'hsplit', 'vsplit', 'custom', 'none'\n# custom_control=widgets.TextEdit,\n# custom_page_control=widgets.TextEdit,\n)\nself.banner = \"IPython Console\"\nself.font_size = 6\n# self.gui_completion = \"droplist\"\nwidgets.Application.call_on_exit(self.shutdown)\n# self.exit_requested.connect(self.shutdown)\nwidgets.Application.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\nself.adjust_style_to_palette()\n@classmethod\ndef setup_example(cls):\nreturn None\ndef set_completion_mode(self, mode: CompletionmodeStr):\nself._set_completion_widget(mode)\ndef get_completion_mode(self) -&gt; CompletionmodeStr:\nreturn self.gui_completion\n@property\ndef texteditor(self) -&gt; widgets.QPlainTextEdit:  # to shut up linters\nreturn self._control\ndef adjust_style_to_palette(self):\n\"\"\"Adjust coloring of the terminal to current palette.\"\"\"\npal = widgets.Application.get_palette()\nstyle = \"linux\" if pal.is_dark() else \"lightbg\"\nself.set_default_style(style)\ndef shutdown(self):\n\"\"\"Stop IPython and cleanup.\"\"\"\nreturn NotImplemented\ndef buffer(self) -&gt; str:\n\"\"\"Get current code block.\"\"\"\nreturn self.input_buffer\ndef set_buffer(self, code: str) -&gt; None:\n\"\"\"Set code string to Jupyter QtConsole buffer.\"\"\"\nself.input_buffer = \"\"\nif not isinstance(code, str):\nraise ValueError(f\"Cannot set {type(code)}.\")\ncursor = self.texteditor.textCursor()\nlines = code.split(\"\\n\")\nfor line in lines[:-1]:\ncursor.insertText(line + \"\\n\")\nself._insert_continuation_prompt(cursor)  # insert \"...:\"\ncursor.insertText(lines[-1])\nreturn None\ndef insert_text(self, text: str) -&gt; None:\ncursor = self.texteditor.textCursor()\ncursor.insertText(text)\nreturn None\ndef set_temp_text(self, text: str) -&gt; None:\ncursor = self.texteditor.textCursor()\ncursor.removeSelectedText()\npos = cursor.position()\ncursor.insertText(text)\ncursor.setPosition(pos)\ncursor.setPosition(pos + len(text), gui.TextCursor.MoveMode.KeepAnchor)\nself.texteditor.setTextCursor(cursor)\nreturn None\ndef get_selected_text(self) -&gt; str:\n\"\"\"Return the selected text.\"\"\"\ncursor = self.texteditor.textCursor()\nreturn cursor.selection().toPlainText()\ndef clear(self):\n\"\"\"Clear the terminal.\"\"\"\nself.texteditor.clear()\ndef print_text(self, text: str, before_prompt: bool = False):\n\"\"\"Print some plain text to the console.\"\"\"\nself._append_plain_text(text)\ndef execute(\nself,\nsource: str | None = None,\nhidden: bool = False,\ninteractive: bool = False,\n):\n\"\"\"Execute a command in the frame of the console widget.\"\"\"\nif source is None:\nsource = self.input_buffer\nsuper().execute(source=source, hidden=hidden, interactive=interactive)\nself.code_executed.emit(source)\nreturn None\ncompletion_mode = core.Property(\nstr,\nget_completion_mode,\nset_completion_mode,\ndoc=\"Completion mode for the widget\",\n)\n</code></pre> Name Children Inherits InProcessIPythonWidgetprettyqt.ipython.inprocessipythonwidgetConvenience class for a live IPython console widget. <ul><li>BaseIPythonWidget</li></ul> OutOfProcessIPythonWidgetprettyqt.ipython.outofprocessipythonwidgetConvenience class for a live IPython console widget running out-of-process. <ul><li>BaseIPythonWidget</li></ul>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.adjust_style_to_palette","title":"<code>adjust_style_to_palette()</code>","text":"<p>Adjust coloring of the terminal to current palette.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def adjust_style_to_palette(self):\n\"\"\"Adjust coloring of the terminal to current palette.\"\"\"\npal = widgets.Application.get_palette()\nstyle = \"linux\" if pal.is_dark() else \"lightbg\"\nself.set_default_style(style)\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.buffer","title":"<code>buffer() -&gt; str</code>","text":"<p>Get current code block.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def buffer(self) -&gt; str:\n\"\"\"Get current code block.\"\"\"\nreturn self.input_buffer\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.clear","title":"<code>clear()</code>","text":"<p>Clear the terminal.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def clear(self):\n\"\"\"Clear the terminal.\"\"\"\nself.texteditor.clear()\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.execute","title":"<code>execute(source: str | None = None, hidden: bool = False, interactive: bool = False)</code>","text":"<p>Execute a command in the frame of the console widget.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def execute(\nself,\nsource: str | None = None,\nhidden: bool = False,\ninteractive: bool = False,\n):\n\"\"\"Execute a command in the frame of the console widget.\"\"\"\nif source is None:\nsource = self.input_buffer\nsuper().execute(source=source, hidden=hidden, interactive=interactive)\nself.code_executed.emit(source)\nreturn None\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.get_selected_text","title":"<code>get_selected_text() -&gt; str</code>","text":"<p>Return the selected text.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def get_selected_text(self) -&gt; str:\n\"\"\"Return the selected text.\"\"\"\ncursor = self.texteditor.textCursor()\nreturn cursor.selection().toPlainText()\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.print_text","title":"<code>print_text(text: str, before_prompt: bool = False)</code>","text":"<p>Print some plain text to the console.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def print_text(self, text: str, before_prompt: bool = False):\n\"\"\"Print some plain text to the console.\"\"\"\nself._append_plain_text(text)\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.set_buffer","title":"<code>set_buffer(code: str) -&gt; None</code>","text":"<p>Set code string to Jupyter QtConsole buffer.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def set_buffer(self, code: str) -&gt; None:\n\"\"\"Set code string to Jupyter QtConsole buffer.\"\"\"\nself.input_buffer = \"\"\nif not isinstance(code, str):\nraise ValueError(f\"Cannot set {type(code)}.\")\ncursor = self.texteditor.textCursor()\nlines = code.split(\"\\n\")\nfor line in lines[:-1]:\ncursor.insertText(line + \"\\n\")\nself._insert_continuation_prompt(cursor)  # insert \"...:\"\ncursor.insertText(lines[-1])\nreturn None\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#prettyqt.ipython.baseipythonwidget.BaseIPythonWidget.shutdown","title":"<code>shutdown()</code>","text":"<p>Stop IPython and cleanup.</p> Source code in <code>prettyqt\\ipython\\baseipythonwidget.py</code> <pre><code>def shutdown(self):\n\"\"\"Stop IPython and cleanup.\"\"\"\nreturn NotImplemented\n</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499202272[\"ipython.BaseIPythonWidget\"]\n  2103499227232[\"rich_jupyter_widget.RichJupyterWidget\"]\n  2103499201312[\"rich_jupyter_widget.RichIPythonWidget\"]\n  2103499198432[\"jupyter_widget.JupyterWidget\"]\n  2103499225312[\"jupyter_widget.IPythonWidget\"]\n  2103499187872[\"frontend_widget.FrontendWidget\"]\n  2103499212832[\"history_console_widget.HistoryConsoleWidget\"]\n  2103499195552[\"console_widget.ConsoleWidget\"]\n  2103499214752[\"util.NewBase\"]\n  2103269052256[\"configurable.LoggingConfigurable\"]\n  2103269035936[\"configurable.Configurable\"]\n  2103264148896[\"traitlets.HasTraits\"]\n  2103264141216[\"traitlets.HasDescriptors\"]\n  140736120080256[\"builtins.object\"]\n  2103499194592[\"util.SuperQClass\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103499032672[\"base_frontend_mixin.BaseFrontendMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499227232 --&gt; 2103499202272\n  2103499201312 --&gt; 2103499227232\n  2103499198432 --&gt; 2103499201312\n  2103499225312 --&gt; 2103499198432\n  2103499187872 --&gt; 2103499225312\n  2103499212832 --&gt; 2103499187872\n  2103499195552 --&gt; 2103499212832\n  2103499214752 --&gt; 2103499195552\n  2103269052256 --&gt; 2103499214752\n  2103269035936 --&gt; 2103269052256\n  2103264148896 --&gt; 2103269035936\n  2103264141216 --&gt; 2103264148896\n  140736120080256 --&gt; 2103264141216\n  2103499194592 --&gt; 2103499214752\n  2103259691120 --&gt; 2103499194592\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712\n  2103499032672 --&gt; 2103499187872\n  140736120080256 --&gt; 2103499032672\n  2103261127360 --&gt; 2103499202272\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"additional_modules/ipython/BaseIPythonWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>completion_mode</code> QString Completion mode for the widget"},{"location":"additional_modules/ipython/InProcessIPythonWidget.html","title":"InProcessIPythonWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/ipython/InProcessIPythonWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ipython.BaseIPythonWidget</code></p> <p>Convenience class for a live IPython console widget.</p> Source code in <code>prettyqt\\ipython\\inprocessipythonwidget.py</code> <pre><code>class InProcessIPythonWidget(ipython.BaseIPythonWidget):\n\"\"\"Convenience class for a live IPython console widget.\"\"\"\nevaluated = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.kernel_manager = QtInProcessKernelManager()\nself.kernel_manager.start_kernel(show_banner=False)\nself.kernel_manager.kernel.log.setLevel(logging.CRITICAL)\nself.kernel_manager.kernel.gui = \"qt\"\nif importlib.util.find_spec(\"matplotlib\"):\nself.kernel_manager.kernel.shell.enable_matplotlib(gui=\"inline\")\nself.kernel_client = self._kernel_manager.client()\nself.kernel_client.start_channels()\ndef shutdown(self):\nlogger.info(\"shutting down IPython kernel...\")\nself.kernel_client.stop_channels()\nself.kernel_manager.shutdown_kernel()\nlogger.info(\"shutdown successful.\")\ndef push_vars(self, var_dict):\n\"\"\"Send python objects to IPYthon namespace.\n        Given a dictionary containing name / value pairs, push those variables\n        to the IPython console widget.\n        \"\"\"\nself.kernel_manager.kernel.shell.push(var_dict)\nfor key in var_dict:\nself._append_plain_text(f'\\nadded \"{key}\" object to namespace\\n', True)\ndef eval(self, obj_name):\n\"\"\"Pull object with name *obj_name from namespace.\"\"\"\ntry:\ndata = self.kernel_manager.kernel.shell.ev(obj_name)\nexcept NameError as e:\nlogger.exception(e)\nreturn None\nself._append_plain_text(f'\\nread \"{obj_name}\" object to namespace\\n', True)\nself.evaluated.emit(data)\nreturn data\n</code></pre>"},{"location":"additional_modules/ipython/InProcessIPythonWidget.html#prettyqt.ipython.inprocessipythonwidget.InProcessIPythonWidget.eval","title":"<code>eval(obj_name)</code>","text":"<p>Pull object with name *obj_name from namespace.</p> Source code in <code>prettyqt\\ipython\\inprocessipythonwidget.py</code> <pre><code>def eval(self, obj_name):\n\"\"\"Pull object with name *obj_name from namespace.\"\"\"\ntry:\ndata = self.kernel_manager.kernel.shell.ev(obj_name)\nexcept NameError as e:\nlogger.exception(e)\nreturn None\nself._append_plain_text(f'\\nread \"{obj_name}\" object to namespace\\n', True)\nself.evaluated.emit(data)\nreturn data\n</code></pre>"},{"location":"additional_modules/ipython/InProcessIPythonWidget.html#prettyqt.ipython.inprocessipythonwidget.InProcessIPythonWidget.push_vars","title":"<code>push_vars(var_dict)</code>","text":"<p>Send python objects to IPYthon namespace.</p> <p>Given a dictionary containing name / value pairs, push those variables to the IPython console widget.</p> Source code in <code>prettyqt\\ipython\\inprocessipythonwidget.py</code> <pre><code>def push_vars(self, var_dict):\n\"\"\"Send python objects to IPYthon namespace.\n    Given a dictionary containing name / value pairs, push those variables\n    to the IPython console widget.\n    \"\"\"\nself.kernel_manager.kernel.shell.push(var_dict)\nfor key in var_dict:\nself._append_plain_text(f'\\nadded \"{key}\" object to namespace\\n', True)\n</code></pre>"},{"location":"additional_modules/ipython/InProcessIPythonWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499331872[\"ipython.InProcessIPythonWidget\"]\n  2103499202272[\"ipython.BaseIPythonWidget\"]\n  2103499227232[\"rich_jupyter_widget.RichJupyterWidget\"]\n  2103499201312[\"rich_jupyter_widget.RichIPythonWidget\"]\n  2103499198432[\"jupyter_widget.JupyterWidget\"]\n  2103499225312[\"jupyter_widget.IPythonWidget\"]\n  2103499187872[\"frontend_widget.FrontendWidget\"]\n  2103499212832[\"history_console_widget.HistoryConsoleWidget\"]\n  2103499195552[\"console_widget.ConsoleWidget\"]\n  2103499214752[\"util.NewBase\"]\n  2103269052256[\"configurable.LoggingConfigurable\"]\n  2103269035936[\"configurable.Configurable\"]\n  2103264148896[\"traitlets.HasTraits\"]\n  2103264141216[\"traitlets.HasDescriptors\"]\n  140736120080256[\"builtins.object\"]\n  2103499194592[\"util.SuperQClass\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103499032672[\"base_frontend_mixin.BaseFrontendMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499202272 --&gt; 2103499331872\n  2103499227232 --&gt; 2103499202272\n  2103499201312 --&gt; 2103499227232\n  2103499198432 --&gt; 2103499201312\n  2103499225312 --&gt; 2103499198432\n  2103499187872 --&gt; 2103499225312\n  2103499212832 --&gt; 2103499187872\n  2103499195552 --&gt; 2103499212832\n  2103499214752 --&gt; 2103499195552\n  2103269052256 --&gt; 2103499214752\n  2103269035936 --&gt; 2103269052256\n  2103264148896 --&gt; 2103269035936\n  2103264141216 --&gt; 2103264148896\n  140736120080256 --&gt; 2103264141216\n  2103499194592 --&gt; 2103499214752\n  2103259691120 --&gt; 2103499194592\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712\n  2103499032672 --&gt; 2103499187872\n  140736120080256 --&gt; 2103499032672\n  2103261127360 --&gt; 2103499202272\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"additional_modules/ipython/InProcessIPythonWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>completion_mode</code> QString Completion mode for the widget"},{"location":"additional_modules/ipython/OutOfProcessIPythonWidget.html","title":"OutOfProcessIPythonWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/ipython/OutOfProcessIPythonWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ipython.BaseIPythonWidget</code></p> <p>Convenience class for a live IPython console widget running out-of-process.</p> Source code in <code>prettyqt\\ipython\\outofprocessipythonwidget.py</code> <pre><code>class OutOfProcessIPythonWidget(ipython.BaseIPythonWidget):\n\"\"\"Convenience class for a live IPython console widget running out-of-process.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\ntemp_path = core.Dir.get_temp_path()\nself.connection_file = temp_path / f\"connection-{os.getpid()}.json\"\nself.p = multiprocessing.Process(target=run_server, args=(self.connection_file,))\nself.p.daemon = True\nself.p.start()\nlogger.info(\"waiting for connection file creation....\")\nfor _ in range(500):\nif self.connection_file.exists() and self.connection_file.stat().st_size &gt; 0:\nbreak\nwidgets.app().sleep(0.1)\nelse:\nraise FileNotFoundError(self.connection_file)\nlogger.info(\"Connection file found. Opening channels.\")\nkernel_client = QtKernelClient(connection_file=os.fspath(self.connection_file))\nkernel_client.load_connection_file()  # can throw FileNotFoundError\nkernel_client.start_channels()\nself.kernel_client = kernel_client\ndef shutdown(self):\n\"\"\"Stop IPython server process and clean up.\"\"\"\nlogger.info(\"shutting down IPython MP kernel\")\nself.kernel_client.stop_channels()\nself.kernel_client.shutdown()\nself.p.terminate()\nself.connection_file.unlink(missing_ok=True)\nlogger.info(\"shutdown successful.\")\n</code></pre>"},{"location":"additional_modules/ipython/OutOfProcessIPythonWidget.html#prettyqt.ipython.outofprocessipythonwidget.OutOfProcessIPythonWidget.shutdown","title":"<code>shutdown()</code>","text":"<p>Stop IPython server process and clean up.</p> Source code in <code>prettyqt\\ipython\\outofprocessipythonwidget.py</code> <pre><code>def shutdown(self):\n\"\"\"Stop IPython server process and clean up.\"\"\"\nlogger.info(\"shutting down IPython MP kernel\")\nself.kernel_client.stop_channels()\nself.kernel_client.shutdown()\nself.p.terminate()\nself.connection_file.unlink(missing_ok=True)\nlogger.info(\"shutdown successful.\")\n</code></pre>"},{"location":"additional_modules/ipython/OutOfProcessIPythonWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499355872[\"ipython.OutOfProcessIPythonWidget\"]\n  2103499202272[\"ipython.BaseIPythonWidget\"]\n  2103499227232[\"rich_jupyter_widget.RichJupyterWidget\"]\n  2103499201312[\"rich_jupyter_widget.RichIPythonWidget\"]\n  2103499198432[\"jupyter_widget.JupyterWidget\"]\n  2103499225312[\"jupyter_widget.IPythonWidget\"]\n  2103499187872[\"frontend_widget.FrontendWidget\"]\n  2103499212832[\"history_console_widget.HistoryConsoleWidget\"]\n  2103499195552[\"console_widget.ConsoleWidget\"]\n  2103499214752[\"util.NewBase\"]\n  2103269052256[\"configurable.LoggingConfigurable\"]\n  2103269035936[\"configurable.Configurable\"]\n  2103264148896[\"traitlets.HasTraits\"]\n  2103264141216[\"traitlets.HasDescriptors\"]\n  140736120080256[\"builtins.object\"]\n  2103499194592[\"util.SuperQClass\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103499032672[\"base_frontend_mixin.BaseFrontendMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499202272 --&gt; 2103499355872\n  2103499227232 --&gt; 2103499202272\n  2103499201312 --&gt; 2103499227232\n  2103499198432 --&gt; 2103499201312\n  2103499225312 --&gt; 2103499198432\n  2103499187872 --&gt; 2103499225312\n  2103499212832 --&gt; 2103499187872\n  2103499195552 --&gt; 2103499212832\n  2103499214752 --&gt; 2103499195552\n  2103269052256 --&gt; 2103499214752\n  2103269035936 --&gt; 2103269052256\n  2103264148896 --&gt; 2103269035936\n  2103264141216 --&gt; 2103264148896\n  140736120080256 --&gt; 2103264141216\n  2103499194592 --&gt; 2103499214752\n  2103259691120 --&gt; 2103499194592\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712\n  2103499032672 --&gt; 2103499187872\n  140736120080256 --&gt; 2103499032672\n  2103261127360 --&gt; 2103499202272\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"additional_modules/ipython/OutOfProcessIPythonWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>completion_mode</code> QString Completion mode for the widget"},{"location":"additional_modules/ipython/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>ipython</li> <li>OutOfProcessIPythonWidget</li> <li>InProcessIPythonWidget</li> <li>BaseIPythonWidget</li> </ul>"},{"location":"additional_modules/itemdelegates/index.html","title":"itemdelegates","text":"<p>Module containing custom delegate classes.</p> <p>PrettyQt offers an extended Item delegate with support for a large number of different data types.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul> Name Children Inherits HtmlItemDelegateprettyqt.itemdelegates.htmlitemdelegate <ul><li><code>BaseMarkupDelegate</code></li></ul> ProgressBarDelegateprettyqt.itemdelegates.progressbardelegate <ul><li>StyledItemDelegate</li></ul> WidgetDelegateprettyqt.itemdelegates.widgetdelegate <ul><li>StyledItemDelegate</li></ul> StarDelegateprettyqt.itemdelegates.stardelegate <ul><li>StyledItemDelegate</li></ul> EditorDelegateprettyqt.itemdelegates.editordelegate <ul><li>StyledItemDelegate</li></ul> NoFocusDelegateprettyqt.itemdelegates.nofocusdelegate <ul><li>StyledItemDelegate</li></ul> RadioDelegateprettyqt.itemdelegates.radiodelegate <ul><li>StyledItemDelegate</li></ul> MarkdownItemDelegateprettyqt.itemdelegates.htmlitemdelegate <ul><li><code>BaseMarkupDelegate</code></li></ul> RenderLinkDelegateprettyqt.itemdelegates.renderlinkdelegate <ul><li>StyledItemDelegate</li></ul> IconDelegateprettyqt.itemdelegates.icondelegate <ul><li>StyledItemDelegate</li></ul> ButtonDelegateprettyqt.itemdelegates.buttondelegate <ul><li>StyledItemDelegate</li></ul>"},{"location":"additional_modules/itemdelegates/ButtonDelegate.html","title":"ButtonDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/ButtonDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate to show a button inside a table cell.</p> Source code in <code>prettyqt\\itemdelegates\\buttondelegate.py</code> <pre><code>class ButtonDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate to show a button inside a table cell.\"\"\"\nID = \"button\"\ndef __init__(\nself,\nparent: widgets.QAbstractItemView,\nrole: constants.ItemDataRole = constants.USER_ROLE,\n):\nsuper().__init__(parent)\nparent.setMouseTracking(True)\nself.btn = widgets.PushButton(parent=parent)\nself.method_role = role\nself.btn.hide()\nself.current_edited_index = core.ModelIndex()\nparent.entered.connect(self.cell_entered)\n#     parent.viewport().installEventFilter(self)\n# def eventFilter(self, source, event) -&gt; bool:\n#     if event.type() == event.Type.MouseMove:\n#         return True\n#     return super().eventFilter(source, event)\ndef updateEditorGeometry(\nself,\neditor: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\neditor.setGeometry(option.rect)\ndef createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nbtn_callback = index.data(self.method_role)\nif btn_callback is None:\nreturn\nreturn widgets.PushButton(parent=parent, text=index.data(), clicked=btn_callback)\ndef setEditorData(self, editor: widgets.QWidget, index: core.ModelIndex):\npass\n# editor.setProperty(\"test\", \"aa\")\n# editor.setText(index.data())\ndef setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\npass\n# model.setData(index, editor.property(\"test\"))\ndef cell_entered(self, index: core.ModelIndex):\n# index = self.parent().indexFromItem(item)\nparent: widgets.QAbstractItemView = self.parent()  # type: ignore\nif parent.isPersistentEditorOpen(index):\nparent.closePersistentEditor(self.current_edited_index)\nif parent.itemDelegateForIndex(index) is self:\n# if index.data(self.method_role) is not None:\nparent.openPersistentEditor(index)\nparent.setCurrentIndex(index)\nself.current_edited_index = index\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nif index.data(self.method_role) is None:\nsuper().paint(painter, option, index)\nreturn\nself.btn.setGeometry(option.rect)\nself.btn.setText(index.data())\nif option.state &amp; widgets.Style.StateFlag.State_MouseOver:\npainter.fillRect(option.rect, option.palette.highlight())\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\npainter.fillRect(option.rect, option.palette.highlight())\npixmap = self.btn.grab()\npainter.drawPixmap(option.rect, pixmap)\n</code></pre>"},{"location":"additional_modules/itemdelegates/ButtonDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261513168[\"itemdelegates.ButtonDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261513168\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/ButtonDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: button</p>"},{"location":"additional_modules/itemdelegates/EditorDelegate.html","title":"EditorDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/EditorDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate which supports editing a large range of data types.</p> <p>Allows editing a large range of different types from Qt, builtin libraries as well as some Numpy types.</p> <p>The Delegate also has an extended displayText method to show a repr-like string for different data types.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul> Source code in <code>prettyqt\\itemdelegates\\editordelegate.py</code> <pre><code>class EditorDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate which supports editing a large range of data types.\n    Allows editing a large range of different types from Qt, builtin libraries as well\n    as some Numpy types.\n    The Delegate also has an extended displayText method to show a repr-like string for\n    different data types.\n    The following data types are supported:\n    * bool\n    * enum.Flag\n    * enum.Enum\n    * int\n    * float\n    * str\n    * range\n    * slice\n    * list of ints\n    * list of floats\n    * list of strings\n    * pathlib.Path\n    * re.Pattern\n    * datetime.date\n    * datetime.time\n    * datetime.datetime\n    * QtCore.QRegularExpression\n    * QtCore.QTime\n    * QtCore.QDate\n    * QtCore.QDateTime\n    * QtCore.QPoint\n    * QtCore.QPointF\n    * QtCore.QRect\n    * QtCore.QRectF\n    * QtCore.QRection\n    * QtCore.QKeyCombination\n    * QtCore.QLocale\n    * QtCore.QSize\n    * QtCore.QSizeF\n    * QtCore.QUrl\n    * QtGui.QFont\n    * QtGui.QKeySequence\n    * QtGui.QPalette\n    * QtGui.QColor\n    * QtGui.QBrush\n    * QtGui.QCursor\n    * QtGui.QIcon\n    * QtWidgets.QSizePolicy\n    If numpy is installed, the following types are supported, too:\n    * numpy.floating\n    * numpy.integer\n    * numpy.str_\n    * numpy.datetime64\n    * numpy.bool_\n    \"\"\"\nID = \"editor\"\ndef __init__(\nself,\n*args,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\nvalidator: gui.QValidator\n| widgets.lineedit.ValidatorStr\n| datatypes.PatternType\n| None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._role = role\nself._validator = validator\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n# if not self.is_supported_type(value):\n#     option = widgets.StyleOptionViewItem(option)\n#     option.state &amp;= ~widgets.QStyle.StateFlag.State_Enabled\nfrom prettyqt import itemdelegates\nmatch value := self._data_for_index(index, self._role):\ncase gui.QIcon():\nicon_delegate = itemdelegates.IconDelegate()\nicon_delegate.paint(painter, option, index)\nreturn\ncase enum.Enum():  # PySide6 needs this when using Views\noption.text = value.name\noption.widget.style().drawControl(\nwidgets.QStyle.ControlElement.CE_ItemViewItem, option, painter\n)\ncase _:\nsuper().paint(painter, option, index)\ndef createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nval = self._data_for_index(index, self._role)\nlogger.info(f\"creating editor for {val!r}...\")\nif isinstance(val, list):\nwidget = datatypes.get_editor_for_value_list(val, parent)\nelse:\nwidget = datatypes.get_editor_for_value(val, parent)\nif widget is None:\nlogger.warning(f\"Could not find editor for {val!r} ({type(val)})\")\nreturn None\nif self._validator and isinstance(\nwidget, widgets.LineEdit | widgets.AbstractSpinBoxMixin\n):\nwidget.set_validator(self._validator, append=True)\nwidget.setAutoFillBackground(True)\nwidget.set_focus_policy(\"strong\")\nreturn widget\ndef setEditorData(self, editor: widgets.QWidget, index: core.ModelIndex):\nvalue = self._data_for_index(index, self._role)\nlogger.info(f\"setting data for {editor!r} to {value!r}\")\neditor.set_value(value)\ndef setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\nif (value := editor.get_value()) is not None:\nlogger.info(f\"setting data for {model!r} to {value!r}\")\nmodel.setData(index, value, self._role)\n# self.closeEditor.emit(editor, self.EndEditHint.NoHint)\nself.commitData.emit(editor)\ndef displayText(self, value: Any, locale: core.QLocale) -&gt; str:\nreturn datatypes.to_string(value, locale)\n</code></pre>"},{"location":"additional_modules/itemdelegates/EditorDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261490128[\"itemdelegates.EditorDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261490128\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/EditorDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: editor</p>"},{"location":"additional_modules/itemdelegates/HtmlItemDelegate.html","title":"HtmlItemDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/HtmlItemDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseMarkupDelegate</code></p> <p>Delegate do display HTML text.</p> Source code in <code>prettyqt\\itemdelegates\\htmlitemdelegate.py</code> <pre><code>class HtmlItemDelegate(BaseMarkupDelegate):\n\"\"\"Delegate do display HTML text.\"\"\"\nID = \"html\"\ndef set_text(self, text: str):\nself.doc.setHtml(text)\n</code></pre>"},{"location":"additional_modules/itemdelegates/HtmlItemDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261519888[\"itemdelegates.HtmlItemDelegate\"]\n  2103261502608[\"itemdelegates.BaseMarkupDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261502608 --&gt; 2103261519888\n  2103261418128 --&gt; 2103261502608\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/HtmlItemDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: html</p>"},{"location":"additional_modules/itemdelegates/IconDelegate.html","title":"IconDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/IconDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate to paint QIcons, QPixmaps, QColors and QImages.</p> Source code in <code>prettyqt\\itemdelegates\\icondelegate.py</code> <pre><code>class IconDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate to paint QIcons, QPixmaps, QColors and QImages.\"\"\"\nID = \"icon\"\ndef __init__(self, role: constants.ItemDataRole = constants.USER_ROLE, **kwargs):\nself._role = role\nself.margin = 10\nsuper().__init__(**kwargs)\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n\"\"\"Override to paint an icon based on given Pixmap / Color / Icon.\n        Pixmap / Color / Icon must be set to '_role'\n        Args:\n            painter (gui.QPainter): painter to paint the icon\n            option (widgets.QStyleOptionViewItem): state of the item to be displayed\n            index (core.ModelIndex): index which gets decorated\n        \"\"\"\nsuper().paint(painter, option, index)\nvalue = index.data(self._role)\nif not value:\nreturn\nmode = gui.Icon.Mode.Normal\nif not option.state &amp; widgets.Style.StateFlag.State_Enabled:\nmode = gui.Icon.Mode.Disabled\nelif option.state &amp; widgets.Style.StateFlag.State_Selected:\nmode = gui.Icon.Mode.Selected\nmatch value:\ncase gui.QPixmap():\nicon = gui.QIcon(value)\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase gui.QColor():\npixmap = gui.QPixmap(option.decorationSize)\npixmap.fill(value)\nicon = gui.QIcon(pixmap)\ncase gui.QImage():\nicon = gui.QIcon(gui.QPixmap.fromImage(value))\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase gui.QIcon():\nicon = value\nis_on = option.state &amp; widgets.Style.StateFlag.State_Open\nstate = gui.Icon.State.On if is_on else gui.Icon.State.Off\nactual_size = option.icon.actualSize(option.decorationSize, mode, state)\noption.decorationSize.boundedTo(actual_size)\ncase _:\nraise ValueError(value)\nr = core.Rect(core.Point(), option.decorationSize)\nr.moveCenter(option.rect.center())\nr.setRight(option.rect.right() - self.margin)\nstate = (\ngui.Icon.State.On\nif option.state &amp; widgets.Style.StateFlag.State_Open\nelse gui.Icon.State.Off\n)\nalignment = constants.ALIGN_RIGHT | constants.ALIGN_V_CENTER\nicon.paint(painter, r, alignment, mode, state)\n</code></pre>"},{"location":"additional_modules/itemdelegates/IconDelegate.html#prettyqt.itemdelegates.icondelegate.IconDelegate.paint","title":"<code>paint(painter: gui.QPainter, option: widgets.QStyleOptionViewItem, index: core.ModelIndex)</code>","text":"<p>Override to paint an icon based on given Pixmap / Color / Icon.</p> <p>Pixmap / Color / Icon must be set to '_role'</p> <p>Parameters:</p> Name Type Description Default <code>painter</code> <code>gui.QPainter</code> <p>painter to paint the icon</p> required <code>option</code> <code>widgets.QStyleOptionViewItem</code> <p>state of the item to be displayed</p> required <code>index</code> <code>core.ModelIndex</code> <p>index which gets decorated</p> required Source code in <code>prettyqt\\itemdelegates\\icondelegate.py</code> <pre><code>def paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n\"\"\"Override to paint an icon based on given Pixmap / Color / Icon.\n    Pixmap / Color / Icon must be set to '_role'\n    Args:\n        painter (gui.QPainter): painter to paint the icon\n        option (widgets.QStyleOptionViewItem): state of the item to be displayed\n        index (core.ModelIndex): index which gets decorated\n    \"\"\"\nsuper().paint(painter, option, index)\nvalue = index.data(self._role)\nif not value:\nreturn\nmode = gui.Icon.Mode.Normal\nif not option.state &amp; widgets.Style.StateFlag.State_Enabled:\nmode = gui.Icon.Mode.Disabled\nelif option.state &amp; widgets.Style.StateFlag.State_Selected:\nmode = gui.Icon.Mode.Selected\nmatch value:\ncase gui.QPixmap():\nicon = gui.QIcon(value)\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase gui.QColor():\npixmap = gui.QPixmap(option.decorationSize)\npixmap.fill(value)\nicon = gui.QIcon(pixmap)\ncase gui.QImage():\nicon = gui.QIcon(gui.QPixmap.fromImage(value))\noption.decorationSize = int(value.size() / value.devicePixelRatio())\ncase gui.QIcon():\nicon = value\nis_on = option.state &amp; widgets.Style.StateFlag.State_Open\nstate = gui.Icon.State.On if is_on else gui.Icon.State.Off\nactual_size = option.icon.actualSize(option.decorationSize, mode, state)\noption.decorationSize.boundedTo(actual_size)\ncase _:\nraise ValueError(value)\nr = core.Rect(core.Point(), option.decorationSize)\nr.moveCenter(option.rect.center())\nr.setRight(option.rect.right() - self.margin)\nstate = (\ngui.Icon.State.On\nif option.state &amp; widgets.Style.StateFlag.State_Open\nelse gui.Icon.State.Off\n)\nalignment = constants.ALIGN_RIGHT | constants.ALIGN_V_CENTER\nicon.paint(painter, r, alignment, mode, state)\n</code></pre>"},{"location":"additional_modules/itemdelegates/IconDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261514128[\"itemdelegates.IconDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261514128\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/IconDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: icon</p>"},{"location":"additional_modules/itemdelegates/MarkdownItemDelegate.html","title":"MarkdownItemDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/MarkdownItemDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseMarkupDelegate</code></p> <p>Delegate do display Markdown text.</p> Source code in <code>prettyqt\\itemdelegates\\htmlitemdelegate.py</code> <pre><code>class MarkdownItemDelegate(BaseMarkupDelegate):\n\"\"\"Delegate do display Markdown text.\"\"\"\nID = \"markdown\"\ndef __init__(self, *args, mode: str = \"github\", **kwargs):\nsuper().__init__(*args, **kwargs)\nself._mode = mode\ndef set_text(self, text: str):\nFeat = self.doc.MarkdownFeature\nmatch self._mode:\ncase \"no_html\":\nself.doc.setMarkdown(text, Feat.MarkdownNoHTML)\ncase \"commonmark\":\nself.doc.setMarkdown(text, Feat.MarkdownDialectCommonMark)\ncase \"github\" | \"\":\nself.doc.setMarkdown(text, Feat.MarkdownDialectGitHub)\ncase _:\nraise ValueError(self._mode)\ndef get_markup_mode(self, str):\nreturn self._mode\ndef set_markup_mode(self, mode: str):\nself._mode = mode\nmarkup_mode = core.Property(\nstr,\nget_markup_mode,\nset_markup_mode,\ndoc=\"Which markdown dialect to use.\",\n)\n</code></pre>"},{"location":"additional_modules/itemdelegates/MarkdownItemDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261499728[\"itemdelegates.MarkdownItemDelegate\"]\n  2103261502608[\"itemdelegates.BaseMarkupDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261502608 --&gt; 2103261499728\n  2103261418128 --&gt; 2103261502608\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/MarkdownItemDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>markup_mode</code> QString Which markdown dialect to use. <p>Delegate ID: markdown</p>"},{"location":"additional_modules/itemdelegates/NoFocusDelegate.html","title":"NoFocusDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/NoFocusDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate to remove dotted border on cell focus.</p> Source code in <code>prettyqt\\itemdelegates\\nofocusdelegate.py</code> <pre><code>class NoFocusDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate to remove dotted border on cell focus.\"\"\"\nID = \"no_focus\"\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nif option.state &amp; widgets.Style.StateFlag.State_HasFocus:\noption.state = option.state ^ widgets.Style.StateFlag.State_HasFocus\nsuper().paint(painter, option, index)\n</code></pre>"},{"location":"additional_modules/itemdelegates/NoFocusDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261493968[\"itemdelegates.NoFocusDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261493968\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/NoFocusDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: no_focus</p>"},{"location":"additional_modules/itemdelegates/ProgressBarDelegate.html","title":"ProgressBarDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/ProgressBarDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate to show a value in form of a progress bar.</p> Source code in <code>prettyqt\\itemdelegates\\progressbardelegate.py</code> <pre><code>class ProgressBarDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate to show a value in form of a progress bar.\"\"\"\nID = \"progress_bar\"\ndef __init__(\nself,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\ntotal: int = 100,\n**kwargs,\n):\nself._role = role\nself._total = total\nsuper().__init__(**kwargs)\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nprogress = index.data(self._role)\nopt = widgets.StyleOptionProgressBar()\nopt.rect = option.rect\nopt.minimum = 0\nopt.maximum = self._total\nopt.progress = progress\nopt.text = f\"{progress}%\"\nopt.textVisible = True\nopt.state |= widgets.Style.StateFlag.State_Horizontal\nwidgets.Application.style().drawControl(\nwidgets.Style.ControlElement.CE_ProgressBar, opt, painter\n)\ndef set_total(self, total: int):\nself._total = total\ndef get_total(self) -&gt; int:\nreturn self._total\ndef set_role(self, role: constants.ItemDataRole):\nself._role = role\ndef get_role(self) -&gt; constants.ItemDataRole:\nreturn self._role\ntotal = core.Property(\nint,\nget_total,\nset_total,\ndoc=\"Total value for the progress bar\",\n)\nrole = core.Property(\nconstants.ItemDataRole,\nget_role,\nset_role,\ndoc=\"Role to use for the progress bar value\",\n)\n</code></pre>"},{"location":"additional_modules/itemdelegates/ProgressBarDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261496848[\"itemdelegates.ProgressBarDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261496848\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/ProgressBarDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>total</code> int Total value for the progress bar <code>role</code> PySide::PyObjectWrapper Role to use for the progress bar value <p>Delegate ID: progress_bar</p>"},{"location":"additional_modules/itemdelegates/RadioDelegate.html","title":"RadioDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/RadioDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\itemdelegates\\radiodelegate.py</code> <pre><code>class RadioDelegate(widgets.StyledItemDelegate):\nID = \"radio\"\ndef __init__(self, parent: widgets.QWidget, items: Iterable[str]):\nsuper().__init__(parent)\nself.items = items\nself.choices: list[int | None] = [None for _ in self.items]\ndef createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n) -&gt; widgets.Widget:\neditor = widgets.Widget(parent=parent, margin=0, auto_fill_background=True)\n# create a button group to keep track of the checked radio\neditor.button_group = widgets.ButtonGroup()\n# adding the widget as an argument to the layout constructor automatically\n# applies it to the widget\nlayout = editor.set_layout(\"horizontal\", margin=0)\nfor i, k in enumerate(self.items):\nrb = widgets.RadioButton(k)\nlayout.addWidget(rb)\n# prevent the radio to get focus from keyboard or mouse\nrb.set_focus_policy(\"none\")\nrb.installEventFilter(self)\neditor.button_group.addButton(rb, i)\n# add a stretch to always align contents to the left\nlayout.addStretch(1)\n# set a property that will be used for the mask\neditor.setProperty(\"offMask\", gui.Region(editor.rect()))  # type: ignore\neditor.installEventFilter(self)\nreturn editor\ndef eventFilter(self, source: core.QObject, event: core.QEvent) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.MouseButtonPress:\nif isinstance(source, widgets.QRadioButton):\nif not source.parent().hasFocus():\n# the parent has no focus, set it and ignore the click\nsource.parent().setFocus()\nreturn True\nelif not source.hasFocus():\n# the container has been clicked, check\nsource.setFocus()\ncase core.Event.Type.FocusIn:\n# event received as a consequence of setFocus\n# clear the mask to show it completely\nsource.clearMask()\ncase core.Event.Type.FocusOut:\n# another widget has requested focus, set the mask\nsource.setMask(source.property(\"offMask\"))\n# update the table viewport to get rid of possible\n# grid lines left after masking\nsource.parent().update()\nreturn super().eventFilter(source, event)\ndef updateEditorGeometry(\nself,\neditor: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nrect = core.Rect(option.rect)\nmin_width = editor.minimumSizeHint().width()\nif rect.width() &lt; min_width:\nrect.setWidth(min_width)\neditor.setGeometry(rect)\n# create a new mask based on the option rectangle, then apply it\nmask = gui.Region(0, 0, option.rect.width(), option.rect.height())\neditor.setProperty(\"offMask\", mask)  # type: ignore\neditor.setMask(mask)\ndef setEditorData(self, editor: widgets.QWidget, index: core.ModelIndex):\nvalue = index.data(constants.DISPLAY_ROLE)  # type: ignore\nif value in self.items:\neditor.button_group.button(self.items.index(value)).setChecked(True)\ndef setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\nbutton = editor.button_group.checkedId()\nif button &gt;= 0:\nmodel.setData(\nindex, self.items[button], constants.DISPLAY_ROLE  # type: ignore\n)\nself.choices[button] = index.row()\n</code></pre>"},{"location":"additional_modules/itemdelegates/RadioDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261509328[\"itemdelegates.RadioDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261509328\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/RadioDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: radio</p>"},{"location":"additional_modules/itemdelegates/RenderLinkDelegate.html","title":"RenderLinkDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/RenderLinkDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\itemdelegates\\renderlinkdelegate.py</code> <pre><code>class RenderLinkDelegate(widgets.StyledItemDelegate):\nID = \"render_link\"\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\ntext = index.data()\nif not text:\nreturn\noption = widgets.StyleOptionViewItem(option)\nself.initStyleOption(option, index)\npainter.save()\nif option.state and widgets.Style.StateFlag.State_MouseOver:\nfont = option.font\nfont.setUnderline(True)\npainter.setFont(font)\npainter.setPen(option.palette.link().color())\nrect = option.rect.toRectF()\npainter.drawText(rect, constants.ALIGN_CENTER_LEFT, text)\npainter.restore()\ndef editorEvent(\nself,\nevent,\nmodel: core.QAbstractItemModel,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\ntext = index.data()\nfont = index.data(constants.FONT_ROLE) or gui.GuiApplication.font()\n# alignment = index.data(constants.ALIGNMENT_ROLE)\nfm = gui.FontMetricsF(font)\nrect = option.rect.toRectF()\nb_rect = fm.get_bounding_rect(rect, constants.ALIGN_CENTER_LEFT, text)\nif (\nevent.type() == core.QEvent.Type.MouseButtonPress\nand event.button() == constants.MouseButton.LeftButton  # type: ignore\nand b_rect.contains(event.position())  # type: ignore\n):\ntext = index.data()\ngui.DesktopServices.open_url(text)\nreturn True\nreturn False\n</code></pre>"},{"location":"additional_modules/itemdelegates/RenderLinkDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261491088[\"itemdelegates.RenderLinkDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261491088\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/RenderLinkDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: render_link</p>"},{"location":"additional_modules/itemdelegates/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>itemdelegates</li> <li>HtmlItemDelegate</li> <li>ProgressBarDelegate</li> <li>WidgetDelegate</li> <li>StarDelegate</li> <li>EditorDelegate</li> <li>NoFocusDelegate</li> <li>RadioDelegate</li> <li>MarkdownItemDelegate</li> <li>RenderLinkDelegate</li> <li>IconDelegate</li> <li>ButtonDelegate</li> </ul>"},{"location":"additional_modules/itemdelegates/StarDelegate.html","title":"StarDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>A delegate class that allows us to render our star ratings.</p> Source code in <code>prettyqt\\itemdelegates\\stardelegate.py</code> <pre><code>class StarDelegate(widgets.StyledItemDelegate):\n\"\"\"A delegate class that allows us to render our star ratings.\"\"\"\nID = \"star\"\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nstar_rating = StarRating(index.data())\n# If the row is currently selected, we need to make sure we\n# paint the background accordingly.\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\n# The original C++ example used option.palette.foreground() to\n# get the brush for painting, but there are a couple of\n# problems with that:\n#   - foreground() is obsolete now, use windowText() instead\n#   - more importantly, windowText() just returns a brush\n#     containing a flat color, where sometimes the style\n#     would have a nice subtle gradient or something.\n# Here we just use the brush of the painter object that's\n# passed in to us, which keeps the row highlighting nice\n# and consistent.\npainter.fillRect(option.rect, painter.brush())\n# Now that we've painted the background, call star_rating.paint()\n# to paint the stars.\nstar_rating.paint(painter, option.rect, option.palette)\ndef sizeHint(self, option: widgets.QStyleOptionViewItem, index: core.ModelIndex):\n\"\"\"Return the size needed to display the item in a QSize object.\"\"\"\nstar_rating = StarRating(index.data())\nreturn star_rating.sizeHint()\n# The next 4 methods handle the custom editing that we need to do.\n# If this were just a display delegate, paint() and sizeHint() would\n# be all we needed.\ndef createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n\"\"\"Create and return the StarEditor object we'll use to edit the StarRating.\"\"\"\neditor = StarEditor(parent)\neditor.editing_finished.connect(self.commitAndCloseEditor)\nreturn editor\ndef setEditorData(self, editor: StarEditor, index: core.ModelIndex):\n\"\"\"Set the data to be displayed and edited by our custom editor.\"\"\"\neditor.set_star_rating(index.data())\ndef setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\n\"\"\"Get the data from our custom editor and stuffs it into the model.\"\"\"\nmodel.setData(index, editor.star_rating.star_count)\ndef commitAndCloseEditor(self):\neditor = self.sender()\n# The commitData signal must be emitted when we've finished editing\n# and need to write our changed back to the model.\nself.commitData.emit(editor)\nself.closeEditor.emit(editor, self.EndEditHint.NoHint)\n</code></pre>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#prettyqt.itemdelegates.stardelegate.StarDelegate.createEditor","title":"<code>createEditor(parent: widgets.QWidget, option: widgets.QStyleOptionViewItem, index: core.ModelIndex)</code>","text":"<p>Create and return the StarEditor object we'll use to edit the StarRating.</p> Source code in <code>prettyqt\\itemdelegates\\stardelegate.py</code> <pre><code>def createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n\"\"\"Create and return the StarEditor object we'll use to edit the StarRating.\"\"\"\neditor = StarEditor(parent)\neditor.editing_finished.connect(self.commitAndCloseEditor)\nreturn editor\n</code></pre>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#prettyqt.itemdelegates.stardelegate.StarDelegate.setEditorData","title":"<code>setEditorData(editor: StarEditor, index: core.ModelIndex)</code>","text":"<p>Set the data to be displayed and edited by our custom editor.</p> Source code in <code>prettyqt\\itemdelegates\\stardelegate.py</code> <pre><code>def setEditorData(self, editor: StarEditor, index: core.ModelIndex):\n\"\"\"Set the data to be displayed and edited by our custom editor.\"\"\"\neditor.set_star_rating(index.data())\n</code></pre>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#prettyqt.itemdelegates.stardelegate.StarDelegate.setModelData","title":"<code>setModelData(editor: widgets.QWidget, model: core.QAbstractItemModel, index: core.ModelIndex)</code>","text":"<p>Get the data from our custom editor and stuffs it into the model.</p> Source code in <code>prettyqt\\itemdelegates\\stardelegate.py</code> <pre><code>def setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\n\"\"\"Get the data from our custom editor and stuffs it into the model.\"\"\"\nmodel.setData(index, editor.star_rating.star_count)\n</code></pre>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#prettyqt.itemdelegates.stardelegate.StarDelegate.sizeHint","title":"<code>sizeHint(option: widgets.QStyleOptionViewItem, index: core.ModelIndex)</code>","text":"<p>Return the size needed to display the item in a QSize object.</p> Source code in <code>prettyqt\\itemdelegates\\stardelegate.py</code> <pre><code>def sizeHint(self, option: widgets.QStyleOptionViewItem, index: core.ModelIndex):\n\"\"\"Return the size needed to display the item in a QSize object.\"\"\"\nstar_rating = StarRating(index.data())\nreturn star_rating.sizeHint()\n</code></pre>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261511248[\"itemdelegates.StarDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261511248\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/StarDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: star</p>"},{"location":"additional_modules/itemdelegates/WidgetDelegate.html","title":"WidgetDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemdelegates/WidgetDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> Source code in <code>prettyqt\\itemdelegates\\widgetdelegate.py</code> <pre><code>class WidgetDelegate(widgets.StyledItemDelegate):\nID = \"widget\"\ndef __init__(\nself,\nrole: constants.ItemDataRole = constants.USER_ROLE,\nparent: widgets.QAbstractItemView | None = None,\n):\nsuper().__init__(parent)\nself._widget_role = role\nself._editors = {}\nself._cache_editors = True\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nvalue = self._editor_for_index(index)\nif not isinstance(value, widgets.QWidget):\nsuper().paint(painter, option, index)\nreturn\nvalue.setGeometry(option.rect)\nif option.state &amp; widgets.Style.StateFlag.State_MouseOver:\npainter.fillRect(option.rect, option.palette.highlight())\nif option.state &amp; widgets.Style.StateFlag.State_Selected:\npainter.fillRect(option.rect, option.palette.highlight())\npixmap = value.grab()\npainter.drawPixmap(option.rect, pixmap)\n# super().paint(painter, option, index)\ndef _editor_for_index(self, index: core.ModelIndex) -&gt; widgets.QWidget:\n# using index.data() does not work with PyQt6, it casts widgets to QObjects\nmodel = index.model()\neditor = model.data(index, self._widget_role)\nif not self._cache_editors:\nreturn editor\n# two reasons for caching:  1) possibly performance. 2) keeping a reference\n# perhaps it would be nicer to just cache the currently chosen editor, not sure.\nkey = str((index.row(), index.column()))\nwhile (index := index.parent()).isValid():\nkey += str((index.row(), index.column()))\nif key in self._editors:\nreturn self._editors[key]\nself._editors[key] = editor\nreturn editor\ndef createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\neditor = self._editor_for_index(index)\nif isinstance(editor, widgets.QWidget):\nmetaobj = core.MetaObject(editor.metaObject())\neditor = metaobj.copy(editor)\neditor.setParent(parent)\neditor.setAutoFillBackground(True)\nreturn editor\nreturn super().createEditor(parent, option, index)\ndef setEditorData(self, editor: widgets.QWidget, index: core.ModelIndex):\npass\ndef setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\norig = self._editor_for_index(index)\nif isinstance(orig, widgets.QWidget):\nmetaobj = core.MetaObject(orig.metaObject())\nif user_prop := metaobj.get_user_property():\nvalue = user_prop.read(editor)\nuser_prop.write(orig, value)\ndef sizeHint(self, option: widgets.QStyleOptionViewItem, index: core.ModelIndex):\neditor = self._editor_for_index(index)\nif isinstance(editor, widgets.QWidget):\nreturn editor.sizeHint()\nelse:\nreturn super().sizeHint(option, index)\ndef updateEditorGeometry(\nself,\neditor: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\npass\n</code></pre>"},{"location":"additional_modules/itemdelegates/WidgetDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261504528[\"itemdelegates.WidgetDelegate\"]\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261418128 --&gt; 2103261504528\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemdelegates/WidgetDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Delegate ID: widget</p>"},{"location":"additional_modules/itemmodels/index.html","title":"itemmodels","text":"<p>Module containing ItemModels for common data structures.</p> <p>PrettyQt includes a large amount of ItemModels for Qt-based types, Python built-in types as well as for different data structures of external libraries.</p> <ul> <li>All models are proper views on data structures, not populated StandardItemModels.</li> <li>Boolean values are always handled via CheckState role, both for editing and displaying.</li> <li>Some of the models should be used in conjunction with the EditorDelegate. That delegate supports editing a large amount of different datatypes and should be the preferred choice for most models.</li> <li>In general, the models are unstyled (with some few exceptions. Styling should be done via the extensive proxy system which is baked into PrettyQt.</li> </ul> Name Children Inherits BaseFieldsModelprettyqt.itemmodels.basefieldsmodel <ul><li>DataClassFieldsModel</li></ul> <ul><li>AbstractTableModel</li></ul> SliceIdentityProxyModelprettyqt.itemmodels.proxies.sliceidentityproxymodel <ul><li>SliceDisplayTextProxyModel</li><li>SliceChangeIconSizeProxyModel</li><li>SliceFilterProxyModel</li><li>SliceCheckableProxyModel</li><li>SliceCheckableTreeProxyModel</li><li>SliceAppearanceProxyModel</li><li>SliceChangeFlagsProxyModel</li><li>SliceColorValuesProxyModel</li><li>SliceColorCategoriesProxyModel</li><li>SliceValueTransformationProxyModel</li><li>...</li></ul> <ul><li>IdentityProxyModel</li></ul> ChangeHeadersProxyModelprettyqt.itemmodels.proxies.changeheadersproxymodel <ul><li>IdentityProxyModel</li></ul> ItemModelResolverprettyqt.itemmodels.itemmodelresolverAllows globbing ItemModels. <ul><li><code>BaseResolver</code></li></ul> ListMixinprettyqt.itemmodels.listmixin <ul><li>NestedModel</li><li>FrameInfoModel</li><li>MappingModel</li><li>ModelIndexModel</li></ul> <ul><li>object</li></ul> ActionsModelprettyqt.itemmodels.actionsmodel <ul><li>ColumnTableModel</li></ul> ColumnTableModelprettyqt.itemmodels.columnitemmodel <ul><li>LogRecordModel</li><li>ActionsModel</li><li>StorageInfoModel</li><li>ShortcutsModel</li></ul> <ul><li><code>ColumnItemModelMixin</code></li><li>AbstractTableModel</li></ul> FrameInfoModelprettyqt.itemmodels.frameinfomodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> SubsetFilterProxyModelprettyqt.itemmodels.proxies.subsetfilterproxymodel <ul><li>SortFilterProxyModel</li></ul> ColumnJoinerProxyModelprettyqt.itemmodels.proxies.columnjoinerproxymodel <ul><li>AbstractProxyModel</li></ul> SliceAppearanceProxyModelprettyqt.itemmodels.proxies.sliceappearanceproxymodel <ul><li>SliceIdentityProxyModel</li></ul> WidgetHierarchyModelprettyqt.itemmodels.widgethierarchymodel <ul><li><code>BaseHierarchyModel</code></li></ul> ColumnItemprettyqt.itemmodels.columnitemmodelDetermines how an object attribute is shown. <ul><li><code>DistributionColumn</code></li><li><code>NameColumn</code></li><li><code>ValueColumn</code></li><li><code>TypeColumn</code></li><li><code>LevelNameColumn</code></li><li><code>FileNameColumn</code></li><li><code>FunctionNameColumn</code></li><li><code>LineNoColumn</code></li><li><code>ModuleColumn</code></li><li><code>CreatedColumn</code></li><li>...</li></ul> <ul><li>object</li></ul> MultiColumnFilterProxyModelprettyqt.itemmodels.proxies.multicolumnfilterproxymodel <ul><li>SortFilterProxyModel</li></ul> SliceCheckableProxyModelprettyqt.itemmodels.proxies.slicecheckableproxymodel <ul><li>SliceIdentityProxyModel</li></ul> AppearanceProxyModelprettyqt.itemmodels.proxies.appearanceproxymodel <ul><li>IdentityProxyModel</li></ul> TupleTreeModelprettyqt.itemmodels.tupletreemodel <ul><li>TreeModel</li></ul> DataClassModelprettyqt.itemmodels.dataclassmodel <ul><li>BaseDataclassModel</li></ul> BaseDataclassModelprettyqt.itemmodels.basedataclassmodel <ul><li>DataClassModel</li></ul> <ul><li>AbstractTableModel</li></ul> MappingModelprettyqt.itemmodels.mappingmodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> ValueFilterProxyModelprettyqt.itemmodels.proxies.valuefilterproxymodel <ul><li>SortFilterProxyModel</li></ul> SelectionMixinprettyqt.itemmodels.selectionmixin <ul><li>object</li></ul> AstModelprettyqt.itemmodels.astmodel <ul><li>TreeModel</li></ul> PythonObjectTreeModelprettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItemModel</li></ul> SliceChangeFlagsProxyModelprettyqt.itemmodels.proxies.slicechangeflagsproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SubClassTreeModelprettyqt.itemmodels.classtreemodel <ul><li><code>BaseClassTreeModel</code></li></ul> LogRecordModelprettyqt.itemmodels.logrecordmodel <ul><li>ColumnTableModel</li></ul> SliceMapRoleProxyModelprettyqt.itemmodels.proxies.slicemaproleproxymodel <ul><li>SliceIdentityProxyModel</li></ul> LayoutHierarchyModelprettyqt.itemmodels.widgethierarchymodel <ul><li><code>BaseHierarchyModel</code></li></ul> SliceColorCategoriesProxyModelprettyqt.itemmodels.proxies.slicecolorcategoriesproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceValueTransformationProxyModelprettyqt.itemmodels.proxies.slicevaluetransformationproxymodel <ul><li>SliceIdentityProxyModel</li></ul> ImportlibTreeModelprettyqt.itemmodels.importlibdistributionmodel <ul><li>ColumnItemModel</li></ul> LinkedSelectionModelprettyqt.itemmodels.proxies.linkedselectionmodel <ul><li>ItemSelectionModel</li></ul> SliceChangeIconSizeProxyModelprettyqt.itemmodels.proxies.slicechangeiconsizeproxymodel <ul><li>SliceIdentityProxyModel</li></ul> MeltProxyModelprettyqt.itemmodels.proxies.meltproxymodel <ul><li>AbstractProxyModel</li></ul> NestedItemprettyqt.itemmodels.nesteditem <ul><li>object</li></ul> QObjectPropertiesModelprettyqt.itemmodels.qobjectpropertiesmodel <ul><li>AbstractTableModel</li></ul> NestedModelprettyqt.itemmodels.nestedmodel <ul><li>ListMixin</li><li>ModelMixin</li><li>AbstractItemModel</li></ul> ShortcutsModelprettyqt.itemmodels.shortcutsmodel <ul><li>ColumnTableModel</li></ul> SliceHighlightCurrentProxyModelprettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel <ul><li>SliceIdentityProxyModel</li></ul> ProxyMapperprettyqt.itemmodels.proxies.proxymapper <ul><li>Object</li></ul> ModelMixinprettyqt.itemmodels.modelmixin <ul><li>NestedModel</li></ul> <ul><li>object</li></ul> SliceColorValuesProxyModelprettyqt.itemmodels.proxies.slicecolorvaluesproxymodel <ul><li>SliceIdentityProxyModel</li></ul> TableToListProxyModelprettyqt.itemmodels.proxies.tabletolistproxymodel <ul><li>IdentityProxyModel</li></ul> HighlightMouseProxyModelprettyqt.itemmodels.proxies.highlightmouseproxymodel <ul><li>IdentityProxyModel</li></ul> XmlModelprettyqt.itemmodels.xmlmodel <ul><li>BaseXmlModel</li></ul> ColumnItemModelprettyqt.itemmodels.columnitemmodel <ul><li>ImportlibTreeModel</li><li>JsonModel</li><li>BaseXmlModel</li><li>PythonObjectTreeModel</li></ul> <ul><li><code>ColumnItemModelMixin</code></li><li>TreeModel</li></ul> ModelIndexModelprettyqt.itemmodels.modelindexmodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> ParentClassTreeModelprettyqt.itemmodels.classtreemodel <ul><li><code>BaseClassTreeModel</code></li></ul> PredicateFilterProxyModelprettyqt.itemmodels.proxies.predicatefilterproxymodel <ul><li>SortFilterProxyModel</li></ul> SliceCheckableTreeProxyModelprettyqt.itemmodels.proxies.slicecheckableproxymodel <ul><li>SliceIdentityProxyModel</li></ul> ModuleInfoModelprettyqt.itemmodels.moduleinfomodel <ul><li>TreeModel</li></ul> RangeFilterProxyModelprettyqt.itemmodels.proxies.rangefilterproxymodel <ul><li>SortFilterProxyModel</li></ul> FlattenTreeProxyModelprettyqt.itemmodels.proxies.flattentreeproxymodel <ul><li>AbstractProxyModel</li></ul> FuzzyFilterProxyModelprettyqt.itemmodels.proxies.fuzzyfilterproxymodel <ul><li>SortFilterProxyModel</li></ul> RegexMatchesModelprettyqt.itemmodels.regexmatchesmodel <ul><li>AbstractTableModel</li></ul> JsonModelprettyqt.itemmodels.jsonmodel <ul><li>ColumnItemModel</li></ul> SliceFilterProxyModelprettyqt.itemmodels.proxies.slicefilterproxymodel <ul><li>SliceIdentityProxyModel</li></ul> BaseXmlModelprettyqt.itemmodels.xmlmodel <ul><li>XmlModel</li></ul> <ul><li>ColumnItemModel</li></ul> SliceToMarkdownProxyModelprettyqt.itemmodels.proxies.slicetomarkdownproxymodel <ul><li>SliceIdentityProxyModel</li></ul> StorageInfoModelprettyqt.itemmodels.storageinfomodel <ul><li>ColumnTableModel</li></ul> WidgetsDetailsModelprettyqt.itemmodels.widgetsdetailsmodel <ul><li>AbstractTableModel</li></ul> TreeModelprettyqt.itemmodels.treemodel <ul><li>ColumnItemModel</li><li>AstModel</li><li><code>BaseClassTreeModel</code></li><li>ModuleInfoModel</li><li>TupleTreeModel</li><li><code>BaseHierarchyModel</code></li><li>MarkdownModel</li><li><code>ScrollAreaTocModel</code></li></ul> <ul><li>AbstractItemModel</li></ul> ColumnOrderProxyModelprettyqt.itemmodels.proxies.columnorderproxymodel <ul><li>IdentityProxyModel</li></ul> SliceDisplayTextProxyModelprettyqt.itemmodels.proxies.slicedisplaytextproxymodel <ul><li>SliceIdentityProxyModel</li></ul> DataClassFieldsModelprettyqt.itemmodels.dataclassfieldsmodel <ul><li>BaseFieldsModel</li></ul>"},{"location":"additional_modules/itemmodels/ActionsModel.html","title":"ActionsModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ActionsModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnTableModel</code></p> <p>Table model to display a list of QActions.</p> <p>All properties of the Action can be edited.</p> Source code in <code>prettyqt\\itemmodels\\actionsmodel.py</code> <pre><code>class ActionsModel(itemmodels.ColumnTableModel):\n\"\"\"Table model to display a list of QActions.\n    All properties of the Action can be edited.\n    \"\"\"\nSUPPORTS = Sequence[gui.QAction]\nCOLUMNS = [\nNameColumn,\nToolTipColumn,\nShortcutColumn,\nCheckStateColumn,\nPriorityColumn,\nUsageCountColumn,\n]\ndef __init__(self, actions: list[gui.QAction], parent: core.QObject | None = None):\nsuper().__init__(actions, self.COLUMNS, parent=parent)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (gui.QAction(), *_):\nreturn True\ncase _:\nreturn False\n</code></pre>"},{"location":"additional_modules/itemmodels/ActionsModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256854752[\"itemmodels.ActionsModel\"]\n  2103256731872[\"itemmodels.ColumnTableModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256731872 --&gt; 2103256854752\n  2103256729952 --&gt; 2103256731872\n  140736120080256 --&gt; 2103256729952\n  2103254409488 --&gt; 2103256731872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[PySide6.QtGui.QAction]</code></p>"},{"location":"additional_modules/itemmodels/ActionsModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/AppearanceProxyModel.html","title":"AppearanceProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/AppearanceProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the \"style roles\" of the source model.</p> <p>In contrast to SliceAppearanceProxyModel, this one works in a more \"static\" way, meaning that you can change the color / font / alignment of indexes via model.setData even when the source model is not item-based (like a StandardItemModel).</p>"},{"location":"additional_modules/itemmodels/AppearanceProxyModel.html#prettyqt.itemmodels.AppearanceProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\nproxy = itemmodels.AppearanceProxyModel()\nproxy.set_source_model(model)\nproxy.setData(proxy.index(0, 0), gui.QColor(\"red\"), role=constants.FOREGROUND_ROLE)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\appearanceproxymodel.py</code> <pre><code>class AppearanceProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model for changing the \"style roles\" of the source model.\n    In contrast to\n    [SliceAppearanceProxyModel](../proxymodels/sliceappearanceproxymodel.md),\n    this one works in a more \"static\" way, meaning that you can change the\n    color / font / alignment of indexes via model.setData even when the source model\n    is not item-based (like a StandardItemModel).\n    ### Example:\n    ```py\n    model = MyModel()\n    proxy = itemmodels.AppearanceProxyModel()\n    proxy.set_source_model(model)\n    proxy.setData(proxy.index(0, 0), gui.QColor(\"red\"), role=constants.FOREGROUND_ROLE)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"appearance\"\nICON = \"mdi.palette-outline\"\ndef __init__(\nself,\nforeground_default=None,\nbackground_default=None,\nfont_default=None,\nalignment_default=None,\n**kwargs,\n):\nself._foregrounds = collections.defaultdict(lambda: None)\nself._backgrounds = collections.defaultdict(lambda: None)\nself._alignments = collections.defaultdict(lambda: None)\nself._fonts = collections.defaultdict(lambda: None)\nself._foreground_default = foreground_default\nself._background_default = background_default\nself._font_default = font_default\nself._alignment_default = alignment_default\nsuper().__init__(**kwargs)\n# def setSourceModel(self, model):\n#     if (curr_model := self.sourceModel()) is not None:\n#         # curr_model.dataChanged.disconnect(self._reset)\n#         curr_model.columnsInserted.disconnect(self._reset)\n#         curr_model.columnsRemoved.disconnect(self._reset)\n#         curr_model.columnsMoved.disconnect(self._reset)\n#     with self.reset_model():\n#         super().setSourceModel(model)\n#     # model.dataChanged.connect(self._reset)\n#     model.columnsInserted.connect(self._reset)\n#     model.columnsRemoved.connect(self._reset)\n#     model.columnsMoved.connect(self._reset)\n# def _reset(self):\n#     self._foregrounds = collections.defaultdict(lambda: None)\n#     self._backgrounds = collections.defaultdict(lambda: None)\n#     self._alignments = collections.defaultdict(lambda: None)\n#     self._fonts = collections.defaultdict(lambda: None)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nkey = self.get_index_key(index, include_column=True)\nmatch role:\ncase constants.FOREGROUND_ROLE:\nself._foregrounds[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase constants.BACKGROUND_ROLE:\nself._backgrounds[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase constants.FONT_ROLE:\nself._fonts[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase constants.ALIGNMENT_ROLE:\nself._alignments[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase _:\nreturn super().setData(index, value, role)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nkey = self.get_index_key(index, include_column=True)\nmatch role:\ncase constants.FOREGROUND_ROLE:\nif val := self._foregrounds[key]:\nreturn val\nmatch self._foreground_default:\ncase type() | Callable():\nreturn self._foreground_default()\ncase None:\nreturn super().data(index, role)\ncase _:\nreturn self._foreground_default\ncase constants.BACKGROUND_ROLE:\nif val := self._backgrounds[key]:\nreturn val\nmatch self._background_default:\ncase type() | Callable():\nreturn self._background_default()\ncase None:\nreturn super().data(index, role)\ncase _:\nreturn self._background_default\ncase constants.FONT_ROLE:\nif val := self._fonts[key]:\nreturn val\nmatch self._font_default:\ncase type() | Callable():\nreturn self._font_default()\ncase None:\nreturn super().data(index, role)\ncase _:\nreturn self._font_default\ncase constants.ALIGNMENT_ROLE:\nval = self._alignments[key]\nreturn val or self._alignment_default\ncase _:\nreturn super().data(index, role)\ndef set_font_default(self, font: QtGui.QFont | str):\nself._font_default = QtGui.QFont(font)\nself._fonts = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_font_default(self) -&gt; QtGui.QFont:\nreturn self._font_default\ndef set_foreground_default(self, foreground: QtGui.QColor | QtGui.QBrush | str):\nif isinstance(foreground, str):\nforeground = QtGui.QColor(foreground)\nself._foreground_default = foreground\nself._foregrounds = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_foreground_default(self) -&gt; QtGui.QColor:\nreturn self._foreground_default\ndef set_background_default(self, background: QtGui.QColor | QtGui.QBrush | str):\nif isinstance(background, str):\nbackground = QtGui.QColor(background)\nself._background_default = background\nself._backgrounds = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_background_default(self) -&gt; QtGui.QFont:\nreturn self._background_default\ndef set_alignment_default(\nself, alignment: constants.AlignmentFlag | constants.AlignmentStr\n):\nif isinstance(alignment, str):\nalignment = constants.ALIGNMENTS[alignment]\nself._alignment_default = alignment\nself._alignments = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_alignment_default(self) -&gt; constants.AlignmentFlag:\nreturn self._alignment_default\nfont_default = core.Property(\nQtGui.QFont,\nget_font_default,\nset_font_default,\ndoc=\"Default font for whole table\",\n)\nforeground_default = core.Property(\nobject,\nget_foreground_default,\nset_foreground_default,\ndoc=\"Default foreground for whole table\",\n)\nbackground_default = core.Property(\nobject,\nget_background_default,\nset_background_default,\ndoc=\"Default background for whole table\",\n)\nalignment_default = core.Property(\nconstants.AlignmentFlag,\nget_alignment_default,\nset_alignment_default,\ndoc=\"Default alignment for whole table\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/AppearanceProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256652192[\"itemmodels.AppearanceProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254404688 --&gt; 2103256652192\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/AppearanceProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>font_default</code> QFont Default font for whole table <code>foreground_default</code> PySide::PyObjectWrapper Default foreground for whole table <code>background_default</code> PySide::PyObjectWrapper Default background for whole table <code>alignment_default</code> PySide::PyObjectWrapper Default alignment for whole table"},{"location":"additional_modules/itemmodels/AstModel.html","title":"AstModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/AstModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.TreeModel</code></p> <p>Tree model to display an Abstract syntax tree.</p> <p>The model shows a tree of all nodes from an abstract syntax tree They are part of the builtin <code>ast</code> module.</p>"},{"location":"additional_modules/itemmodels/AstModel.html#prettyqt.itemmodels.AstModel--example","title":"Example:","text":"<pre><code>import ast\nview = TreeView()\ncode = pathlib.Path(__file__).read_text()\ntree = ast.parse(code)\nmodel = AstModel(tree)\nview.set_model(model)\n</code></pre> Source code in <code>prettyqt\\itemmodels\\astmodel.py</code> <pre><code>class AstModel(itemmodels.TreeModel):\n\"\"\"Tree model to display an Abstract syntax tree.\n    The model shows a tree of all nodes from an\n    [abstract syntax tree](https://docs.python.org/3/library/ast.html#node-classes)\n    They are part of the builtin `ast` module.\n    ### Example:\n    ```py\n    import ast\n    view = TreeView()\n    code = pathlib.Path(__file__).read_text()\n    tree = ast.parse(code)\n    model = AstModel(tree)\n    view.set_model(model)\n    ```\n    \"\"\"\n@core.Enum\nclass Roles(enum.IntEnum):\nNodeRole = constants.USER_ROLE\nSUPPORTS = ast.AST\nHEADER = [\n\"Node type\",\n\"Name\",\n\"Line range\",\n\"Column range\",\n\"Code segement\",\n\"Docstring\",\n]\ndef __init__(self, ast_tree, **kwargs):\nsuper().__init__(None, **kwargs)\nself.ast_tree = None\nself.code = \"\"\nself.set_ast(ast_tree)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, ast.AST)\ndef columnCount(self, parent=None):\nreturn len(self.HEADER) if self.ast_tree is not None else 0\ndef set_ast(self, ast_tree: ast.AST | str = \"\"):\n\"\"\"Set an AST tree for the model.\n        Arguments:\n            ast_tree: Abstract syntax tree\n        \"\"\"\nmatch ast_tree:\ncase str():\ncode = ast_tree\ntry:\nnode = ast.parse(ast_tree)\nexcept SyntaxError as e:\nlogger.debug(f\"caught {e!r} when building AST\")\nreturn\ncase ast.AST():\ncode = ast.unparse(ast_tree)\nnode = ast.parse(code)  # makin a circle to make sure line numbers match.\ncase _:\nraise TypeError(ast_tree)\nnode = ast.fix_missing_locations(node)\nwith self.reset_model():\nself.ast_tree = node\nself.set_root_item(node)\nself.code = code\n# def find_lineno(self, index):\n#     # not needed, thx to ast.fix_missing_locations\n#     while not hasattr(node := index.data(constants.USER_ROLE), \"lineno\"):\n#         index = index.parent()\n#     return node.lineno\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch orientation, role, section:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE, _:\nreturn self.HEADER[section]\nreturn None\ndef data(self, index: core.ModelIndex, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\nnode = self.data_by_index(index).obj\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn type(node).__name__\ncase constants.DISPLAY_ROLE, 1:\nmatch node:\ncase _ if type(node) in NODE_MAP:\nreturn NODE_MAP[type(node)]\ncase (\nast.Name(id=name)\n| ast.arg(arg=name)\n| ast.Constant(value=name)\n| ast.alias(name=name)\n| ast.ClassDef(name=name)\n| ast.FunctionDef(name=name)\n):\nreturn name\ncase str():\nreturn node\ncase constants.DISPLAY_ROLE, 2:\nif hasattr(node, \"lineno\"):\nreturn (\nf\"{node.lineno} - {node.end_lineno}\"\nif node.lineno != node.end_lineno\nelse str(node.lineno)\n)\ncase constants.DISPLAY_ROLE, 3:\nif hasattr(node, \"col_offset\"):\nreturn (\nf\"{node.col_offset} - {node.end_col_offset}\"\nif node.col_offset != node.end_col_offset\nelse str(node.col_offset)\n)\ncase constants.DISPLAY_ROLE, 4:\nreturn ast.get_source_segment(self.code, node)\ncase constants.FONT_ROLE, 4 | 5:\nreturn SOURCE_FONT\ncase constants.DISPLAY_ROLE, 5:\ntry:\nreturn ast.get_docstring(node)\nexcept TypeError:\nreturn None\ncase self.Roles.NodeRole, _:\nreturn node\ndef _fetch_object_children(self, item: AstModel.TreeItem) -&gt; list[AstModel.TreeItem]:\nreturn [self.TreeItem(obj=i) for i in ast.iter_child_nodes(item.obj)]\ndef _has_children(self, item: AstModel.TreeItem) -&gt; bool:\nif item.obj is None:\nreturn False\nreturn any(True for _ in ast.iter_child_nodes(item.obj))\ndef rename_variable(\nself,\nold: str,\nnew: str,\nroot_tree: ast.AST | None = None,\nignore: list[str] | None = None,\nscope: list[str] | None = None,\n):\nif scope is None:\nscope = [\"main\"]\nif ignore is None:\nignore = []\nif root_tree is None:\nroot_tree = self.ast_tree\nfor i in ast.iter_fields(root_tree):\nif not isinstance(a := getattr(root_tree, i), list):\nif a == old and not {*scope} &amp; {*ignore}:\nsetattr(root_tree, i, new)\nn = a if isinstance(a, list) else [a]\ns = [root_tree.name] if type(root_tree).__name__.endswith(\"Def\") else scope\nfor j in n:\nif isinstance(j, ast.AST):\nself.rename_variable(j, old, new, ignore, s)\ndef get_variable_names(self):\ncurrent_names = set()\nfor node in ast.walk(self.ast_tree):\nmatch node:\ncase ast.Name(id=name) | ast.arg(arg=name):\ncurrent_names.add(name)\nreturn current_names\n</code></pre>"},{"location":"additional_modules/itemmodels/AstModel.html#prettyqt.itemmodels.astmodel.AstModel.set_ast","title":"<code>set_ast(ast_tree: ast.AST | str = '')</code>","text":"<p>Set an AST tree for the model.</p> <p>Parameters:</p> Name Type Description Default <code>ast_tree</code> <code>ast.AST | str</code> <p>Abstract syntax tree</p> <code>''</code> Source code in <code>prettyqt\\itemmodels\\astmodel.py</code> <pre><code>def set_ast(self, ast_tree: ast.AST | str = \"\"):\n\"\"\"Set an AST tree for the model.\n    Arguments:\n        ast_tree: Abstract syntax tree\n    \"\"\"\nmatch ast_tree:\ncase str():\ncode = ast_tree\ntry:\nnode = ast.parse(ast_tree)\nexcept SyntaxError as e:\nlogger.debug(f\"caught {e!r} when building AST\")\nreturn\ncase ast.AST():\ncode = ast.unparse(ast_tree)\nnode = ast.parse(code)  # makin a circle to make sure line numbers match.\ncase _:\nraise TypeError(ast_tree)\nnode = ast.fix_missing_locations(node)\nwith self.reset_model():\nself.ast_tree = node\nself.set_root_item(node)\nself.code = code\n</code></pre>"},{"location":"additional_modules/itemmodels/AstModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256787552[\"itemmodels.AstModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254308688 --&gt; 2103256787552\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'ast.AST'&gt;</code></p>"},{"location":"additional_modules/itemmodels/AstModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/BaseDataclassModel.html","title":"BaseDataclassModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/BaseDataclassModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\basedataclassmodel.py</code> <pre><code>class BaseDataclassModel(core.AbstractTableModel):\nDELEGATE_DEFAULT = \"editor\"\ndef __init__(self, items: Sequence, **kwargs):\nsuper().__init__(**kwargs)\nself.items = items\nklasses = [type(i) for i in items]\nself.Class = classhelpers.lca_type(klasses)\nlogger.debug(f\"{type(self).__name__}: found common ancestor {self.Class}\")\nself._fields = self.get_fields()\nself._field_names = list(self._fields.keys())\ndef get_fields(self):\nreturn NotImplemented\ndef columnCount(self, parent=None):\nreturn len(self._fields)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role, section:\ncase constants.VERTICAL, constants.DISPLAY_ROLE, _:\ninstance = self.items[section]\nreturn type(instance).__name__\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE, _:\nreturn self._field_names[section]\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nfield_name = self._field_names[index.column()]\ninstance = self.items[index.row()]\nvalue = getattr(instance, field_name)\nmatch role:\ncase constants.DISPLAY_ROLE if not isinstance(value, bool):\nreturn repr(value)\ncase constants.CHECKSTATE_ROLE if isinstance(value, bool):\nreturn self.to_checkstate(value)\ncase constants.USER_ROLE | constants.EDIT_ROLE:\nreturn value\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nfield_name = self._field_names[index.column()]\ninstance = self.items[index.row()]\nmatch role:\ncase constants.EDIT_ROLE | constants.USER_ROLE:\nwith self.reset_model():\nsetattr(instance, field_name, value)\nreturn True\ncase constants.CHECKSTATE_ROLE:\nwith self.reset_model():\nsetattr(instance, field_name, bool(value))\nreturn True\nreturn False\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.items)\ndef flags(self, parent: core.ModelIndex) -&gt; constants.ItemFlag:\n\"\"\"Override.\n        BaseClass implementation just tries to set attribute with same value to test\n        if field is writable. If possible, subclasses should find a more efficient way.\n        \"\"\"\nif not parent.isValid():\nreturn super().flags(parent)\nfield_name = self._field_names[parent.column()]\ninstance = self.items[parent.row()]\n# need to cover not parent.isValid()?\nval = getattr(instance, field_name)\nwith contextlib.suppress(Exception):\nsetattr(instance, field_name, val)\nif isinstance(val, bool):\nreturn super().flags(parent) | constants.IS_CHECKABLE\nelse:\nreturn super().flags(parent) | constants.IS_EDITABLE\nreturn super().flags(parent)\n</code></pre> Name Children Inherits DataClassModelprettyqt.itemmodels.dataclassmodel <ul><li>BaseDataclassModel</li></ul>"},{"location":"additional_modules/itemmodels/BaseDataclassModel.html#prettyqt.itemmodels.basedataclassmodel.BaseDataclassModel.flags","title":"<code>flags(parent: core.ModelIndex) -&gt; constants.ItemFlag</code>","text":"<p>Override.</p> <p>BaseClass implementation just tries to set attribute with same value to test if field is writable. If possible, subclasses should find a more efficient way.</p> Source code in <code>prettyqt\\itemmodels\\basedataclassmodel.py</code> <pre><code>def flags(self, parent: core.ModelIndex) -&gt; constants.ItemFlag:\n\"\"\"Override.\n    BaseClass implementation just tries to set attribute with same value to test\n    if field is writable. If possible, subclasses should find a more efficient way.\n    \"\"\"\nif not parent.isValid():\nreturn super().flags(parent)\nfield_name = self._field_names[parent.column()]\ninstance = self.items[parent.row()]\n# need to cover not parent.isValid()?\nval = getattr(instance, field_name)\nwith contextlib.suppress(Exception):\nsetattr(instance, field_name, val)\nif isinstance(val, bool):\nreturn super().flags(parent) | constants.IS_CHECKABLE\nelse:\nreturn super().flags(parent) | constants.IS_EDITABLE\nreturn super().flags(parent)\n</code></pre>"},{"location":"additional_modules/itemmodels/BaseDataclassModel.html#prettyqt.itemmodels.basedataclassmodel.BaseDataclassModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\itemmodels\\basedataclassmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.items)\n</code></pre>"},{"location":"additional_modules/itemmodels/BaseDataclassModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256803872[\"itemmodels.BaseDataclassModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254409488 --&gt; 2103256803872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Recommended delegate: 'editor'</p>"},{"location":"additional_modules/itemmodels/BaseDataclassModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/BaseFieldsModel.html","title":"BaseFieldsModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/BaseFieldsModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\basefieldsmodel.py</code> <pre><code>class BaseFieldsModel(core.AbstractTableModel):\nHEADER: list[str] = []\nDELEGATE_DEFAULT = \"editor\"\ndef __init__(self, instance, **kwargs):\nself._instance = instance\nself._fields = self.get_fields(instance)\nself._field_names = list(self._fields.keys())\nsuper().__init__(**kwargs)\nself.set_instance(instance)\ndef get_fields(self, instance) -&gt; dict[str, Any]:\nreturn NotImplemented\ndef set_instance(self, instance):\nself._instance = instance\nself._fields = self.get_fields(instance)\nself._field_names = list(self._fields.keys())\nself.update_all()\ndef columnCount(self, parent=None) -&gt; int:\nreturn len(self.HEADER)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[section]\ncase constants.VERTICAL, constants.DISPLAY_ROLE:\nreturn self._field_names[section]\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif not index.isValid():\nreturn None\nmatch role, index.column():\ncase constants.USER_ROLE | constants.EDIT_ROLE, _:\nfield_name = self._field_names[index.row()]\nsetattr(self._instance, field_name, value)\nself.update_row(index.row())\nreturn True\nreturn False\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self._field_names)\ndef _is_writable(self, field_name: str) -&gt; bool:\n\"\"\"Dumb check, set same value and check if it works.\n        Should be overridden by subclasses if possible.\n        \"\"\"\nval = getattr(self._instance, field_name)\nwith contextlib.suppress(Exception):\nsetattr(self._instance, field_name, val)\nreturn True\nreturn False\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nfield_name = self._field_names[index.row()]\nif index.column() == 0:\nif self._is_writable(field_name):\nreturn super().flags(index) | constants.IS_EDITABLE\nreturn super().flags(index)\n</code></pre> Name Children Inherits DataClassFieldsModelprettyqt.itemmodels.dataclassfieldsmodel <ul><li>BaseFieldsModel</li></ul>"},{"location":"additional_modules/itemmodels/BaseFieldsModel.html#prettyqt.itemmodels.basefieldsmodel.BaseFieldsModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\itemmodels\\basefieldsmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self._field_names)\n</code></pre>"},{"location":"additional_modules/itemmodels/BaseFieldsModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256795232[\"itemmodels.BaseFieldsModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254409488 --&gt; 2103256795232\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Recommended delegate: 'editor'</p>"},{"location":"additional_modules/itemmodels/BaseFieldsModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/BaseXmlModel.html","title":"BaseXmlModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/BaseXmlModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnItemModel</code></p> Source code in <code>prettyqt\\itemmodels\\xmlmodel.py</code> <pre><code>class BaseXmlModel(itemmodels.ColumnItemModel):\nICON = \"mdi.xml\"\nCOLUMNS = [TagColumn, TextColumn, TailColumn, AttributeColumn]\ndef __init__(self, obj, **kwargs):\nsuper().__init__(obj=obj, columns=self.COLUMNS, show_root=True, **kwargs)\nclass Roles(enum.IntEnum):\nNodeRole = constants.USER_ROLE + 24245\ndef _has_children(self, item: XmlModel.TreeItem) -&gt; bool:\nreturn len(item.obj) &gt; 0\ndef _fetch_object_children(self, item: XmlModel.TreeItem) -&gt; list[XmlModel.TreeItem]:\nreturn [self.TreeItem(obj=i) for i in item.obj]\n</code></pre> Name Children Inherits XmlModelprettyqt.itemmodels.xmlmodel <ul><li>BaseXmlModel</li></ul>"},{"location":"additional_modules/itemmodels/BaseXmlModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256831712[\"itemmodels.BaseXmlModel\"]\n  2103256730912[\"itemmodels.ColumnItemModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256730912 --&gt; 2103256831712\n  2103256729952 --&gt; 2103256730912\n  140736120080256 --&gt; 2103256729952\n  2103254308688 --&gt; 2103256730912\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/BaseXmlModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/ChangeHeadersProxyModel.html","title":"ChangeHeadersProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ChangeHeadersProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the header data (either horizontal or vertical).</p> <p>Header data can either be changed by passing a list with same length as source length or by passing a dictionary with index as key and new value as value (Example: {1: \"abc\", 3: \"def\"} changes section 1 to \"abc\" and section 3 to \"def\") Apart from the regular use case of changing the text, the other roles can be changed, too.</p>"},{"location":"additional_modules/itemmodels/ChangeHeadersProxyModel.html#prettyqt.itemmodels.ChangeHeadersProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.change_headers(header=[\"x\", \"y\", \"z\"],\norientation=constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE\n)\ntable.show()\n# or\nmodel = MyModel()\nproxy = ChangeHeadersProxyModel(\nheader=[\"x\", \"y\", \"z\"], orientation=constants.VERTICAL\n)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\changeheadersproxymodel.py</code> <pre><code>class ChangeHeadersProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model for changing the header data (either horizontal or vertical).\n    Header data can either be changed by passing a list with same length as source length\n    or by passing a dictionary with index as key and new value as value\n    (Example: {1: \"abc\", 3: \"def\"} changes section 1 to \"abc\" and section 3 to \"def\")\n    Apart from the regular use case of changing the text, the other roles can be changed,\n    too.\n    ### Example\n    ```py\n    table.proxifier.change_headers(header=[\"x\", \"y\", \"z\"],\n        orientation=constants.HORIZONTAL,\n        role=constants.DISPLAY_ROLE\n    )\n    table.show()\n    # or\n    model = MyModel()\n    proxy = ChangeHeadersProxyModel(\n        header=[\"x\", \"y\", \"z\"], orientation=constants.VERTICAL\n    )\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"change_headers\"\nICON = \"table-headers-eye\"\ndef __init__(\nself,\nheader: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself._header = header\nself._role = role\ndef setSourceModel(self, model):\nheader_len = (\nmodel.columnCount()\nif self._orientation == constants.HORIZONTAL\nelse model.rowCount()\n)\nif isinstance(self._header, list) and len(self._header) != header_len:\nraise ValueError(\"list needs to be same list as header\")\nsuper().setSourceModel(model)\ndef get_header(self) -&gt; list[int]:\nreturn self._header\ndef set_header(\nself,\nheader: list[str] | dict[int, str],\norientation: constants.Orientation | constants.OrientationStr,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nwith self.reset_model():\nself._header = header\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself._role = role\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation == self._orientation and role == self._role:\nif isinstance(self._header, dict) and section in self._header:\nreturn self._header[section]\nelif isinstance(self._header, list):\nreturn self._header[section]\nreturn self.sourceModel().headerData(section, orientation, role)\nheader = core.Property(\nobject,\nget_header,\nset_header,\ndoc=\"New headers (dict / list)\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/ChangeHeadersProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256625312[\"itemmodels.ChangeHeadersProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254404688 --&gt; 2103256625312\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ChangeHeadersProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>header</code> PySide::PyObjectWrapper New headers (dict / list)"},{"location":"additional_modules/itemmodels/ColumnItem.html","title":"ColumnItem","text":""},{"location":"additional_modules/itemmodels/ColumnItem.html#docstrings","title":"DocStrings","text":"<p>Determines how an object attribute is shown.</p> Source code in <code>prettyqt\\itemmodels\\columnitemmodel.py</code> <pre><code>class ColumnItem:\n\"\"\"Determines how an object attribute is shown.\"\"\"\nmodel: core.QAbstractItemModel\nname: str = \"\"\ndoc: str = \"&lt;no help available&gt;\"\ncol_visible: bool = True\nwidth: int | str = SMALL_COL_WIDTH\nline_wrap: gui.textoption.WordWrapModeStr = \"none\"\nselectable: bool = True\nenabled: bool = True\neditable: bool = False\ncheckable: bool = False\ntristate: bool = False\ndef __init__(self, model: core.QAbstractItemModel):\nself.model = model\ndef get_name(self) -&gt; str:\nreturn self.name\ndef get_flags(self, tree_item):\nflag = constants.NO_FLAGS\nif self.selectable:\nflag |= constants.IS_SELECTABLE\nif self.enabled:\nflag |= constants.IS_ENABLED\nif self.editable:\nflag |= constants.IS_EDITABLE\nif self.checkable:\nflag |= constants.IS_CHECKABLE\nif self.tristate:\nflag |= constants.IS_USER_TRISTATE\nreturn flag\ndef get_data(self, item, role):\nreturn NotImplemented\ndef set_data(self, item, value, role):\nreturn NotImplemented\ndef get_width(self) -&gt; int:\nmatch self.width:\ncase \"small\":\nreturn SMALL_COL_WIDTH\ncase \"medium\":\nreturn MEDIUM_COL_WIDTH\ncase int():\nreturn self.width\ncase _:\nraise ValueError(self.width)\n@staticmethod\ndef to_checkstate(value: bool):\nreturn constants.CheckState.Checked if value else constants.CheckState.Unchecked\n</code></pre> Name Children Inherits <code>DistributionColumn</code>prettyqt.itemmodels.importlibdistributionmodel <ul><li><code>NameColumn</code></li><li><code>VersionColumn</code></li><li><code>ConstraintsColumn</code></li><li><code>MarkerColumn</code></li><li><code>SummaryColumn</code></li><li><code>HomepageColumn</code></li><li><code>AuthorColumn</code></li><li><code>LicenseColumn</code></li></ul> <ul><li>ColumnItem</li></ul> <code>NameColumn</code>prettyqt.itemmodels.jsonmodel <ul><li>ColumnItem</li></ul> <code>ValueColumn</code>prettyqt.itemmodels.jsonmodel <ul><li>ColumnItem</li></ul> <code>TypeColumn</code>prettyqt.itemmodels.jsonmodel <ul><li>ColumnItem</li></ul> <code>LevelNameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>FileNameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>FunctionNameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>LineNoColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>ModuleColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>CreatedColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>ProcessColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>ThreadColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>ProcessNameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>ThreadNameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>RelativeCreatedColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>NameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>PathNameColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>MessageColumn</code>prettyqt.itemmodels.logrecordmodel <ul><li>ColumnItem</li></ul> <code>XmlColumnItem</code>prettyqt.itemmodels.xmlmodel <ul><li><code>TagColumn</code></li><li><code>TextColumn</code></li><li><code>TailColumn</code></li><li><code>AttributeColumn</code></li></ul> <ul><li>ColumnItem</li></ul> <code>NameColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>DescriptionColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>PathColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>StrColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>ReprColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>TypeColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>ClassColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>LengthColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>IdColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>AttributeColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>IsCallableColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>IsRoutineColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>IsBuiltinColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>PredicateColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>PrettyPrintColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>DocStringColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>CommentsColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>ModuleColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>FileColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>SourceFileColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>SourceCodeColumn</code>prettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItem</li></ul> <code>NameColumn</code>prettyqt.itemmodels.actionsmodel <ul><li>ColumnItem</li></ul> <code>ToolTipColumn</code>prettyqt.itemmodels.actionsmodel <ul><li>ColumnItem</li></ul> <code>ShortcutColumn</code>prettyqt.itemmodels.actionsmodel <ul><li>ColumnItem</li></ul> <code>PriorityColumn</code>prettyqt.itemmodels.actionsmodel <ul><li>ColumnItem</li></ul> <code>CheckStateColumn</code>prettyqt.itemmodels.actionsmodel <ul><li>ColumnItem</li></ul> <code>UsageCountColumn</code>prettyqt.itemmodels.actionsmodel <ul><li>ColumnItem</li></ul> <code>RootPathColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>VolumeNameColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>DeviceColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>FileSystemColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>TotalColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>FreeColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>AvailableColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>ReadyColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>ReadOnlyColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>ValidColumn</code>prettyqt.itemmodels.storageinfomodel <ul><li>ColumnItem</li></ul> <code>WhatsThisColumn</code>prettyqt.itemmodels.shortcutsmodel <ul><li>ColumnItem</li></ul> <code>EnabledColumn</code>prettyqt.itemmodels.shortcutsmodel <ul><li>ColumnItem</li></ul> <code>ShortcutColumn</code>prettyqt.itemmodels.shortcutsmodel <ul><li>ColumnItem</li></ul> <code>ContextColumn</code>prettyqt.itemmodels.shortcutsmodel <ul><li>ColumnItem</li></ul> <code>AutoRepeatColumn</code>prettyqt.itemmodels.shortcutsmodel <ul><li>ColumnItem</li></ul> <code>ParentColumn</code>prettyqt.itemmodels.shortcutsmodel <ul><li>ColumnItem</li></ul>"},{"location":"additional_modules/itemmodels/ColumnItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256699232[\"itemmodels.ColumnItem\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103256699232</code></pre>"},{"location":"additional_modules/itemmodels/ColumnItemModel.html","title":"ColumnItemModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ColumnItemModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ColumnItemModelMixin</code>, <code>itemmodels.TreeModel</code></p> Source code in <code>prettyqt\\itemmodels\\columnitemmodel.py</code> <pre><code>class ColumnItemModel(ColumnItemModelMixin, itemmodels.TreeModel):\ndef __init__(\nself,\nobj=None,\ncolumns: Sequence[type[ColumnItem]] = [],\nmime_type: str | None = None,\nshow_root: bool = True,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._root_item = self.TreeItem(obj=obj)\nself._show_root = show_root\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\nself.set_root_item(obj)\ndef columnCount(self, parent=None):\nreturn len(self._attr_cols)\n</code></pre> Name Children Inherits ImportlibTreeModelprettyqt.itemmodels.importlibdistributionmodel <ul><li>ColumnItemModel</li></ul> JsonModelprettyqt.itemmodels.jsonmodel <ul><li>ColumnItemModel</li></ul> BaseXmlModelprettyqt.itemmodels.xmlmodel <ul><li>XmlModel</li></ul> <ul><li>ColumnItemModel</li></ul> PythonObjectTreeModelprettyqt.itemmodels.pythonobjecttreemodel <ul><li>ColumnItemModel</li></ul>"},{"location":"additional_modules/itemmodels/ColumnItemModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256730912[\"itemmodels.ColumnItemModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256729952 --&gt; 2103256730912\n  140736120080256 --&gt; 2103256729952\n  2103254308688 --&gt; 2103256730912\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ColumnItemModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/ColumnJoinerProxyModel.html","title":"ColumnJoinerProxyModel","text":"<p>Qt Base Class: QAbstractProxyModel</p> <p>Signature: <code>QAbstractProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ColumnJoinerProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model which joins the contents of several columns.</p> <p>The columns are joined based on a formatter and appended to the end of the model as a new column.</p> <p>The formatter must look like <code>{0} - {1}: {4}</code>. The format codes are then populated with the content of given columns, in this case it would be <code>{Text of column 0} - {Text of Column 1}: {Text of Column 4}</code></p>"},{"location":"additional_modules/itemmodels/ColumnJoinerProxyModel.html#prettyqt.itemmodels.ColumnJoinerProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.join_columns(formatter=\"{0} - {2}\", header=\"New column\")\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnJoinerProxyModel()\nproxy.set_source_model(model)\nproxy.add_column(formatter=\"{0} - {2}\", header=\"New column\")\nproxy.add_column(formatter=\"{4}: {5}\", header=\"Another column\")\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\columnjoinerproxymodel.py</code> <pre><code>class ColumnJoinerProxyModel(core.AbstractProxyModel):\n\"\"\"Proxy model which joins the contents of several columns.\n    The columns are joined based on a formatter and appended to the end of the model\n    as a new column.\n    The formatter must look like `{0} - {1}: {4}`.\n    The format codes are then populated with the content of given columns,\n    in this case it would be `{Text of column 0} - {Text of Column 1}: {Text of Column 4}`\n    ### Example\n    ```py\n    table.proxifier.join_columns(formatter=\"{0} - {2}\", header=\"New column\")\n    table.show()\n    # or\n    model = MyModel()\n    proxy = ColumnJoinerProxyModel()\n    proxy.set_source_model(model)\n    proxy.add_column(formatter=\"{0} - {2}\", header=\"New column\")\n    proxy.add_column(formatter=\"{4}: {5}\", header=\"Another column\")\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"column_join\"\nICON = \"mdi.table-column-plus-before\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.mapping = []\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn (\n0\nif self.sourceModel() is None\nelse self.sourceModel().columnCount(parent) + len(self.mapping)\n)\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn self.sourceModel().rowCount()\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\ncolumn = index.column()\nif self.is_additional_column(column):\nflags = self.mapping[column - self.columnCount()].flags\nreturn (\nflags\nif flags is not None\nelse constants.IS_ENABLED | constants.IS_SELECTABLE\n)\nreturn self.sourceModel().flags(index)\ndef is_additional_column(self, column: int):\ncol_count = self.sourceModel().columnCount()\nreturn column &gt;= col_count\ndef index(self, row: int, column: int, parent: core.ModelIndex | None = None):\nparent = parent or core.ModelIndex()\nif self.is_additional_column(column):\nreturn self.createIndex(row, column, core.ModelIndex())\nreturn self.sourceModel().index(row, column, parent)\ndef parent(self, index=None):\nif index is None:\nreturn super().parent()\nif self.is_additional_column(index.column()):\nreturn core.ModelIndex()\nreturn self.sourceModel().parent(index)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ncol_count = self.sourceModel().columnCount()\ncolumn = index.column()\nif self.is_additional_column(column):\nif role == constants.DISPLAY_ROLE:\nmapper = self.mapping[column - col_count]\nformatter = mapper.formatter\nfield_names = [\nfield_name\nfor (\n_literal_text,\nfield_name,\n_format_spec,\n_conversion,\n) in string.Formatter().parse(formatter)\n# if field_name is not None\n]\nmatch formatter:\ncase str():\nfor name in field_names:\nidx = self.index(index.row(), int(name), index.parent())\ndata = self.data(idx)\nformatter = formatter.replace(f\"{{{name}}}\", data)\nreturn formatter\ncase Callable():\nreturn formatter(index)\nreturn None\nreturn super().data(index, role)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation == constants.HORIZONTAL and self.is_additional_column(section):\nif role == constants.DISPLAY_ROLE:\nmapper = self.mapping[section - self.columnCount()]\nreturn mapper.header\nreturn None\nreturn super().headerData(section, orientation, role)\ndef mapToSource(self, proxy_index):\nif not proxy_index.isValid():\nreturn core.ModelIndex()\ncolumn = proxy_index.column()\nif self.is_additional_column(column):\nreturn core.ModelIndex()\nreturn self.sourceModel().index(proxy_index.row(), column, proxy_index.parent())\ndef mapFromSource(self, index):\nif self.is_additional_column(index.column()):\nreturn core.ModelIndex()\nreturn self.sourceModel().index(index.row(), index.column(), index.parent())\ndef add_mapping(\nself, header: str, formatter: str, flags: constants.ItemFlag | None = None\n):\n\"\"\"Add a new column to the table.\n        Arguments:\n            header: Label used for the section header.\n            formatter: String formatter (example \"{0}: {1}\")\n            flags: ItemFlags for new column\n        \"\"\"\nself.mapping.append(ColumnMapping(formatter, header, flags))\n</code></pre>"},{"location":"additional_modules/itemmodels/ColumnJoinerProxyModel.html#prettyqt.itemmodels.proxies.columnjoinerproxymodel.ColumnJoinerProxyModel.add_mapping","title":"<code>add_mapping(header: str, formatter: str, flags: constants.ItemFlag | None = None)</code>","text":"<p>Add a new column to the table.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Label used for the section header.</p> required <code>formatter</code> <code>str</code> <p>String formatter (example \"{0}: {1}\")</p> required <code>flags</code> <code>constants.ItemFlag | None</code> <p>ItemFlags for new column</p> <code>None</code> Source code in <code>prettyqt\\itemmodels\\proxies\\columnjoinerproxymodel.py</code> <pre><code>def add_mapping(\nself, header: str, formatter: str, flags: constants.ItemFlag | None = None\n):\n\"\"\"Add a new column to the table.\n    Arguments:\n        header: Label used for the section header.\n        formatter: String formatter (example \"{0}: {1}\")\n        flags: ItemFlags for new column\n    \"\"\"\nself.mapping.append(ColumnMapping(formatter, header, flags))\n</code></pre>"},{"location":"additional_modules/itemmodels/ColumnJoinerProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256654112[\"itemmodels.ColumnJoinerProxyModel\"]\n  2103254410448[\"core.AbstractProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254410448 --&gt; 2103256654112\n  2103254406608 --&gt; 2103254410448\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254619456 --&gt; 2103254410448\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ColumnJoinerProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel"},{"location":"additional_modules/itemmodels/ColumnOrderProxyModel.html","title":"ColumnOrderProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ColumnOrderProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which reorders the columns of the source model.</p> <p>Proxy model which reorders / hides the columns of the source model by passing a list containing the new order. Order indexes can either be an integer or the Column header. If not all indexes are part of the list, then the missing sections will be hidden.</p>"},{"location":"additional_modules/itemmodels/ColumnOrderProxyModel.html#prettyqt.itemmodels.ColumnOrderProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.reorder_columns(order=[3, 2, 0])\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnOrderProxyModel(order=[3, 2, 0])\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\columnorderproxymodel.py</code> <pre><code>class ColumnOrderProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model which reorders the columns of the source model.\n    Proxy model which reorders / hides the columns of the source model by passing a list\n    containing the new order. Order indexes can either be an integer or the Column header.\n    If not all indexes are part of the list, then the missing sections will be hidden.\n    ### Example\n    ```py\n    table.proxifier.reorder_columns(order=[3, 2, 0])\n    table.show()\n    # or\n    model = MyModel()\n    proxy = ColumnOrderProxyModel(order=[3, 2, 0])\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"column_order\"\nICON = \"mdi.reorder-vertical\"\ndef __init__(self, order: list[int | str], **kwargs):\nself._column_order = order\nsuper().__init__(**kwargs)\nself.set_column_order(order)\ndef get_column_order(self) -&gt; list[int]:\nreturn self._column_order\ndef setSourceModel(self, model):\nsuper().setSourceModel(model)\nself._resolve_string_indexes()\ndef _resolve_string_indexes(self):\nnew_order = []\nsource = self.sourceModel()\nfor index in self._column_order:\nif isinstance(index, str):\nfor i in range(source.columnCount()):\nv = source.headerData(i, constants.HORIZONTAL, constants.DISPLAY_ROLE)\nif v == index:\nindex = i\nbreak\nelse:\nraise ValueError(index)\nnew_order.append(index)\nself._column_order = new_order\ndef set_column_order(self, order: list[int | str]):\nwith self.reset_model():\nself._column_order = order\nif self.sourceModel() is not None:\nself._resolve_string_indexes()\ndef mapToSource(self, proxy_index: core.ModelIndex) -&gt; core.ModelIndex:\nif not proxy_index.isValid():\nreturn core.ModelIndex()\nreturn self.sourceModel().createIndex(\nproxy_index.row(),\nself._column_order[proxy_index.column()],\nproxy_index.internalPointer(),\n)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\nif not source_index.isValid():\nreturn core.ModelIndex()\nproxy_column = self._column_order.index(source_index.column())\nreturn self.createIndex(\nsource_index.row(), proxy_column, source_index.internalPointer()\n)\ndef sibling(self, row: int, column: int, index: core.ModelIndex) -&gt; core.ModelIndex:\nif column &gt;= len(self._column_order):\nreturn core.ModelIndex()\nreturn self.index(row, column, index.parent())\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation == constants.HORIZONTAL:\nsection = self._column_order[section]\nreturn self.sourceModel().headerData(section, orientation, role)\ndef hasChildren(self, parent_index: core.ModelIndex) -&gt; bool:\nif self.sourceModel() is None or parent_index.column() &gt; 0:\nreturn False\nsource_parent = self.mapToSource(parent_index).sibling(parent_index.row(), 0)\nreturn self.sourceModel().rowCount(source_parent) &gt; 0\ndef parent(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nsource_parent = self.mapToSource(index).parent()\nif not source_parent.isValid():\nreturn core.ModelIndex()\nreturn self.createIndex(source_parent.row(), 0, source_parent.internalPointer())\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0 or self.sourceModel() is None:\nreturn core.ModelIndex()\nsource_parent = self.mapToSource(parent).sibling(parent.row(), 0)\nsource_index = self.sourceModel().index(\nrow, self._column_order[column], source_parent\n)\nif not source_index.isValid():\nreturn core.ModelIndex()\nreturn self.createIndex(row, column, source_index.internalPointer())\ndef columnCount(self, index: core.ModelIndex | None = None) -&gt; int:\nindex = index or core.ModelIndex()\nreturn len(self._column_order)\ndef rowCount(self, index: core.ModelIndex | None = None) -&gt; int:\nindex = index or core.ModelIndex()\nif self.sourceModel() is None or index.column() &gt; 0:\nreturn 0\nsource_parent = self.mapToSource(index).sibling(index.row(), 0)\nreturn self.sourceModel().rowCount(source_parent)\norder = core.Property(\nlist,\nget_column_order,\nset_column_order,\ndoc=\"Column order\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/ColumnOrderProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256645472[\"itemmodels.ColumnOrderProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254404688 --&gt; 2103256645472\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ColumnOrderProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>order</code> QVariantList Column order"},{"location":"additional_modules/itemmodels/ColumnTableModel.html","title":"ColumnTableModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ColumnTableModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ColumnItemModelMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\columnitemmodel.py</code> <pre><code>class ColumnTableModel(ColumnItemModelMixin, core.AbstractTableModel):\ndef __init__(\nself,\nitems: Sequence,\ncolumns: Sequence[ColumnItem],\nmime_type: str | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.items = items\nself.mime_type = mime_type\nself._attr_cols = []\nself.set_columns(columns)\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self.items)\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self._attr_cols)\ndef data_by_index(self, index: core.ModelIndex):\nreturn self.items[index.row()]\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n):\nif role == constants.USER_ROLE:\nself.items[index.row()] = value\nself.update_row(index.row())\nreturn True\nreturn super().setData(index, value, role)\ndef removeRows(self, row: int, count: int, parent):\nend_row = row + count - 1\nwith self.remove_rows(row, end_row, parent):\nfor i in range(end_row, row - 1, -1):\nself.items.pop(i)\nreturn True\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif not mime_data.hasFormat(self.mime_type):\nreturn False\n# Since we only drop in between items, parent_index must be invalid,\n# and we use the row arg to know where the drop took place.\nif parent_index.isValid():\nreturn False\nindexes = mime_data.get_json_data(self.mime_type)\npos = row if row &lt; len(self.items) and row != -1 else len(self.items)\nrem_offset = sum(i &lt;= pos for i in indexes)\nnew = [self.items[i] for i in indexes]\nwith self.change_layout():\nfor i in sorted(indexes, reverse=True):\nself.items.pop(i)\nfor item in reversed(new):\nself.items.insert(pos - rem_offset, item)\nreturn False\ndef sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self._attr_cols[ncol].label:\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\ndef add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\ndef add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i, _ in enumerate(items):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\ndef remove_items(self, offsets: Iterable[int]):\nfor offset in sorted(offsets, reverse=True):\nself.removeRow(offset)\n</code></pre> Name Children Inherits LogRecordModelprettyqt.itemmodels.logrecordmodel <ul><li>ColumnTableModel</li></ul> ActionsModelprettyqt.itemmodels.actionsmodel <ul><li>ColumnTableModel</li></ul> StorageInfoModelprettyqt.itemmodels.storageinfomodel <ul><li>ColumnTableModel</li></ul> ShortcutsModelprettyqt.itemmodels.shortcutsmodel <ul><li>ColumnTableModel</li></ul>"},{"location":"additional_modules/itemmodels/ColumnTableModel.html#prettyqt.itemmodels.columnitemmodel.ColumnTableModel.add","title":"<code>add(item: Any, position: int | None = None)</code>","text":"<p>Append provided item to the list.</p> Source code in <code>prettyqt\\itemmodels\\columnitemmodel.py</code> <pre><code>def add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\n</code></pre>"},{"location":"additional_modules/itemmodels/ColumnTableModel.html#prettyqt.itemmodels.columnitemmodel.ColumnTableModel.add_items","title":"<code>add_items(items: Iterable[Any], position: int | None = None)</code>","text":"<p>Append a list of items to the list.</p> Source code in <code>prettyqt\\itemmodels\\columnitemmodel.py</code> <pre><code>def add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i, _ in enumerate(items):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\n</code></pre>"},{"location":"additional_modules/itemmodels/ColumnTableModel.html#prettyqt.itemmodels.columnitemmodel.ColumnTableModel.sort","title":"<code>sort(ncol: int, order: int)</code>","text":"<p>Sort table by given column number.</p> Source code in <code>prettyqt\\itemmodels\\columnitemmodel.py</code> <pre><code>def sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self._attr_cols[ncol].label:\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\n</code></pre>"},{"location":"additional_modules/itemmodels/ColumnTableModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256731872[\"itemmodels.ColumnTableModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256729952 --&gt; 2103256731872\n  140736120080256 --&gt; 2103256729952\n  2103254409488 --&gt; 2103256731872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ColumnTableModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/DataClassFieldsModel.html","title":"DataClassFieldsModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/DataClassFieldsModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.BaseFieldsModel</code></p> <p>Table model to display the fields and their metadata of an dataclass.</p> <p>Frozen dataclasses are read-only, otherwise the data can be modified.</p> Source code in <code>prettyqt\\itemmodels\\dataclassfieldsmodel.py</code> <pre><code>class DataClassFieldsModel(itemmodels.BaseFieldsModel):\n\"\"\"Table model to display the fields and their metadata of an dataclass.\n    Frozen dataclasses are read-only, otherwise the data can be modified.\n    \"\"\"\nSUPPORTS = datatypes.IsDataclass\nHEADER = [\n\"Field name\",\n\"Value\",\n\"Type\",\n\"Default\",\n\"In __init__\",\n\"In __repr__\",\n\"Compare\",\n\"Hash\",\n\"Metadata\",\n\"Keyword only\",\n]\ndef __init__(self, instance: datatypes.IsDataclass, **kwargs):\nsuper().__init__(instance, **kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, datatypes.IsDataclass)\ndef get_fields(self, instance: datatypes.IsDataclass) -&gt; dict[str, Any]:\nfields = dataclasses.fields(instance)\nreturn {field.name: field for field in fields}\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nfield_name = self._field_names[index.row()]\nfield = self._fields[field_name]\nvalue = getattr(self._instance, field_name)\nmatch role, index.column():\ncase constants.FONT_ROLE, 0:\nfont = QtGui.QFont()\nfont.setBold(True)\nreturn font\ncase constants.DISPLAY_ROLE, 0:\nreturn repr(value)\ncase constants.EDIT_ROLE, 0:\nreturn value\ncase constants.DISPLAY_ROLE, 1:\nreturn field.type\ncase constants.FONT_ROLE, 1:\nfont = QtGui.QFont()\nfont.setItalic(True)\nreturn font\ncase constants.DISPLAY_ROLE, 2:\nreturn field.default\ncase constants.CHECKSTATE_ROLE, 3:\nreturn self.to_checkstate(field.init)\ncase constants.CHECKSTATE_ROLE, 4:\nreturn self.to_checkstate(field.repr)\ncase constants.CHECKSTATE_ROLE, 5:\nreturn self.to_checkstate(field.compare)\ncase constants.CHECKSTATE_ROLE, 6:\nreturn self.to_checkstate(field.hash)\ncase constants.DISPLAY_ROLE, 7:\nreturn str(field.metadata)\ncase constants.CHECKSTATE_ROLE, 8:\nreturn self.to_checkstate(field.kw_only)\ncase constants.USER_ROLE, _:\nreturn value\ndef _is_writable(self, field_name: str) -&gt; bool:\nreturn not self._instance.__dataclass_params__.frozen\n</code></pre>"},{"location":"additional_modules/itemmodels/DataClassFieldsModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256797152[\"itemmodels.DataClassFieldsModel\"]\n  2103256795232[\"itemmodels.BaseFieldsModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256795232 --&gt; 2103256797152\n  2103254409488 --&gt; 2103256795232\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Recommended delegate: 'editor'</p> <p>Info</p> <p>Supported data type: <code>&lt;class 'prettyqt.utils.datatypes.IsDataclass'&gt;</code></p>"},{"location":"additional_modules/itemmodels/DataClassFieldsModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/DataClassModel.html","title":"DataClassModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/DataClassModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.BaseDataclassModel</code></p> <p>Table model to display a list of dataclasses.</p> Source code in <code>prettyqt\\itemmodels\\dataclassmodel.py</code> <pre><code>class DataClassModel(itemmodels.BaseDataclassModel):\n\"\"\"Table model to display a list of dataclasses.\"\"\"\nSUPPORTS = Sequence[datatypes.IsDataclass]\ndef __init__(self, items: Sequence[datatypes.IsDataclass], **kwargs):\nsuper().__init__(items, **kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (datatypes.IsDataclass(), *_):\nreturn True\ncase _:\nreturn False\ndef get_fields(self) -&gt; dict[str, Any]:\nfields = dataclasses.fields(self.Class)\nreturn {field.name: field for field in fields}\ndef flags(self, parent: core.ModelIndex) -&gt; constants.ItemFlag:\nif not parent.isValid():\nreturn super().flags(parent)\nif self.Class.__dataclass_params__.frozen:\nsuper().flags(parent)\nfield_name = self._field_names[parent.column()]\ninstance = self.items[parent.row()]\n# need to cover not parent.isValid()?\nval = getattr(instance, field_name)\nif isinstance(val, bool):\nreturn super().flags(parent) | constants.IS_CHECKABLE\nelse:\nreturn super().flags(parent) | constants.IS_EDITABLE\n</code></pre>"},{"location":"additional_modules/itemmodels/DataClassModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256789472[\"itemmodels.DataClassModel\"]\n  2103256803872[\"itemmodels.BaseDataclassModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256803872 --&gt; 2103256789472\n  2103254409488 --&gt; 2103256803872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Recommended delegate: 'editor'</p> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[prettyqt.utils.datatypes.IsDataclass]</code></p>"},{"location":"additional_modules/itemmodels/DataClassModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/FlattenTreeProxyModel.html","title":"FlattenTreeProxyModel","text":"<p>Qt Base Class: QAbstractProxyModel</p> <p>Signature: <code>QAbstractProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/FlattenTreeProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractProxyModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\flattentreeproxymodel.py</code> <pre><code>class FlattenTreeProxyModel(core.AbstractProxyModel):\nID = \"flatten_tree\"\ndef __init__(self, parent: widgets.QWidget | None = None, **kwargs):\nself._leaves_only = False\nself._show_path = False\nself._source_column = 0\nself.PATH_SEPARATOR = \" / \"\nself._source_root_index = core.ModelIndex()\nself._source_key: list[tuple[int, ...]] = []\nself._source_offset: dict[tuple[int, ...], int] = {}\nsuper().__init__(parent, **kwargs)\ndef setSourceModel(self, model: core.QAbstractItemModel):\nif (old_model := self.sourceModel()) is not None:\nold_model.dataChanged.disconnect(self._source_data_changed)\nold_model.rowsInserted.disconnect(self._on_reset)\nold_model.rowsRemoved.disconnect(self._on_reset)\nold_model.rowsMoved.disconnect(self._on_row_move)\nwith self.reset_model():\nsuper().setSourceModel(model)\nself._update_mapping()\nmodel.dataChanged.connect(self._source_data_changed)\nmodel.rowsInserted.connect(self._on_reset)\nmodel.rowsRemoved.connect(self._on_reset)\nmodel.rowsMoved.connect(self._on_row_move)\ndef set_source_column(self, column: int):\nwith self.reset_model():\nself._source_column = column\nself._update_mapping()\ndef get_source_column(self) -&gt; int:\nreturn self._source_column\ndef set_root_index(self, root_index: core.ModelIndex):\nwith self.reset_model():\nself._source_root_index = root_index\nself._update_mapping()\ndef get_root_index(self) -&gt; core.ModelIndex:\nreturn self._source_root_index\ndef set_leaves_only(self, leaves_only: bool):\nif leaves_only != self._leaves_only:\nwith self.reset_model():\nself._leaves_only = leaves_only\nself._update_mapping()\ndef is_leaves_only(self) -&gt; bool:\nreturn self._leaves_only\ndef set_show_path(self, show: bool):\nif show != self._show_path:\nwith self.reset_model():\nself._show_path = show\ndef is_path_shown(self) -&gt; bool:\nreturn self._show_path\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\nif not source_index.isValid():\nreturn source_index\nkey = self.get_index_key(source_index)\nrow = self._source_offset[key] + source_index.row()\nreturn self.index(row, 0)\ndef mapToSource(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nif not index.isValid():\nreturn index\nrow = index.row()\nsource_key_path = self._source_key[row]\nreturn self.source_index_from_key(source_key_path)\ndef index(\nself, row: int, column: int = 0, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nreturn (\ncore.ModelIndex()\nif parent.isValid()\nelse self.createIndex(row, column, row)  # object=row)\n)\ndef parent(self, child=None) -&gt; core.ModelIndex:\nreturn super().parent() if child is None else core.ModelIndex()\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self._source_key)\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else 1\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nflags = super().flags(index)\nreturn flags\n# this would disable non-leave items\n# index = self.mapToSource(index)\n# model = self.sourceModel()\n# enabled = flags &amp; constants.ItemFlag.ItemIsEnabled\n# if model is not None and model.rowCount(index) &gt; 0 and enabled:\n#     flags ^= constants.ItemFlag.ItemIsEnabled\n# return flags\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role == constants.DISPLAY_ROLE and self._show_path:\nindex = self.mapToSource(index)\nmodel = self.sourceModel()\npath = model.get_breadcrumbs_path(index)\nreturn self.PATH_SEPARATOR.join(str(i) for i in path)\nreturn super().data(index, role)\ndef _update_mapping(self):\nif self.sourceModel() is None:\nreturn\nself._source_key, self._source_offset = self.get_source_mapping(self._leaves_only)\ndef _source_data_changed(self, top: core.ModelIndex, bottom: core.ModelIndex):\nchanged_indexes = [top.sibling(i, 0) for i in range(top.row(), bottom.row() + 1)]\nfor ind in changed_indexes:\nself.dataChanged.emit(ind, ind)\ndef _on_reset(self, parent: core.ModelIndex, start: int, end: int):\nwith self.reset_model():\nself._update_mapping()\ndef _on_row_move(\nself, source_parent, source_start, source_end, dest_parent, dest_row\n):\nwith self.reset_model():\nself._update_mapping()\nleaves_only = core.Property(\nbool,\nis_leaves_only,\nset_leaves_only,\ndoc=\"Whether to only show the tree leaves\",\n)\nshow_path = core.Property(\nbool,\nis_path_shown,\nset_show_path,\ndoc=\"Show the complete path in first column\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/FlattenTreeProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256634912[\"itemmodels.FlattenTreeProxyModel\"]\n  2103254410448[\"core.AbstractProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254410448 --&gt; 2103256634912\n  2103254406608 --&gt; 2103254410448\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254619456 --&gt; 2103254410448\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/FlattenTreeProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>leaves_only</code> bool Whether to only show the tree leaves <code>show_path</code> bool Show the complete path in first column"},{"location":"additional_modules/itemmodels/FrameInfoModel.html","title":"FrameInfoModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/FrameInfoModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ListMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\frameinfomodel.py</code> <pre><code>class FrameInfoModel(itemmodels.ListMixin, core.AbstractTableModel):\nHEADER = [\"Filename\", \"Line number\", \"Function\", \"Code context\", \"Index\", \"Positions\"]\nSUPPORTS = Sequence[inspect.FrameInfo | inspect.Traceback]\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (inspect.FrameInfo(), *_) | (inspect.Traceback(), *_):\nreturn True\ncase _:\nreturn False\ndef columnCount(self, parent=None) -&gt; int:\nreturn len(self.HEADER)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[section]\ncase constants.VERTICAL, constants.DISPLAY_ROLE:\nreturn str(section)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nfield = self.items[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn field.filename\ncase constants.DISPLAY_ROLE, 1:\nreturn field.lineno\ncase constants.DISPLAY_ROLE, 2:\nreturn field.function\ncase constants.DISPLAY_ROLE, 3:\nlines = []\npretty = \"\"\nfor line in field.code_context:\nwhile line.startswith(\" \"):\npretty += \"\u00b7\"\nline = line[1:]\npretty += line\nlines.append(pretty)\nreturn \"\\n\".join(lines)\ncase constants.FONT_ROLE, 3:\nreturn SOURCE_FONT\ncase constants.DISPLAY_ROLE, 4:\nreturn field.index\ncase constants.DISPLAY_ROLE, 5:\np = field.positions\nreturn f\"{p.lineno} - {p.end_lineno}, {p.col_offset} {p.end_col_offset}\"\ncase constants.ALIGNMENT_ROLE, _:\nreturn constants.ALIGN_CENTER_LEFT\n</code></pre>"},{"location":"additional_modules/itemmodels/FrameInfoModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256793312[\"itemmodels.FrameInfoModel\"]\n  2103254425808[\"itemmodels.ListMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254425808 --&gt; 2103256793312\n  140736120080256 --&gt; 2103254425808\n  2103254409488 --&gt; 2103256793312\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[inspect.FrameInfo | inspect.Traceback]</code></p>"},{"location":"additional_modules/itemmodels/FrameInfoModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/FuzzyFilterProxyModel.html","title":"FuzzyFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/FuzzyFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel which sorts the results based on a matching score.</p> <p>The matching score evaluates metrics like upper/lower casing, distance of filter character to match character and some more. Best matches are shown at the top.</p> <p>The matching score is exposed as a custom UserRole (FuzzyFilterProxyModel.Roles.SortRole) The proxymodel replaces the text from the display role in the given filter column with HTML code in order to color the letter matches. A backup from the original text is made available in the BackupRole. Based on the original text, the proxy calculates a score for the match and makes it available via the SortRole. To display the html code properly, a HtmlItemDelegate is needed.</p>"},{"location":"additional_modules/itemmodels/FuzzyFilterProxyModel.html#prettyqt.itemmodels.FuzzyFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = itemmodels.FuzzyFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\fuzzyfilterproxymodel.py</code> <pre><code>class FuzzyFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A FilterProxyModel which sorts the results based on a matching score.\n    The matching score evaluates metrics like upper/lower casing, distance of\n    filter character to match character and some more.\n    Best matches are shown at the top.\n    The matching score is exposed as a custom UserRole\n    (FuzzyFilterProxyModel.Roles.SortRole)\n    The proxymodel replaces the text from the display role in the given filter column\n    with HTML code in order to color the letter matches. A backup from the original text\n    is made available in the BackupRole. Based on the original text, the proxy calculates\n    a score for the match and makes it available via the SortRole.\n    To display the html code properly, a HtmlItemDelegate is needed.\n    ### Example\n    ```py\n    proxy = itemmodels.FuzzyFilterProxyModel()\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"fuzzy\"\nclass Roles(enum.IntEnum):\n\"\"\"Addional roles.\"\"\"\nBackupRole = constants.USER_ROLE + 65\nSortRole = constants.SORT_ROLE\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, filter_mode=\"fuzzy\", **kwargs)\nself._search_term = \"\"\nself._match_color: gui.QColor = gui.Color(\"blue\")\nself.sort(0, constants.DESCENDING)\ndef set_match_color(self, color: datatypes.ColorType | None):\nself._match_color = colors.get_color(color) if color else gui.QColor()\ndef get_match_color(self) -&gt; gui.QColor:\nreturn self._match_color\ndef lessThan(self, left: core.ModelIndex, right: core.ModelIndex):\nif not self._search_term:\nreturn super().lessThan(left, right)\nif left.data() is None or right.data() is None:\nreturn True\n# since fuzzy scores are cached, it should be fine to do this here.\nleft_data = fuzzy.fuzzy_match(self._search_term, str(left.data()))\nright_data = fuzzy.fuzzy_match(self._search_term, str(right.data()))\nreturn left_data &lt; right_data\ndef set_search_term(self, search_term: str):\nself._search_term = search_term\nsuper().set_search_term(search_term)\nself.invalidate()\ndef get_search_term(self):\nreturn self._search_term\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nfilter_column = self.filterKeyColumn()\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, _ if index.column() == filter_column:\nlabel = super().data(index, constants.DISPLAY_ROLE)\nreturn (\nfuzzy.color_text(\nself._search_term,\nstr(label),\nself._match_color.name(),\nself.is_filter_case_sensitive(),\n)\nif self._search_term and self._match_color.isValid() and label\nelse label\n)\n# case constants.DISPLAY_ROLE, 1:\n#     idx = self.index(index.row(), filter_column)\n#     label = super().data(idx, constants.DISPLAY_ROLE)\n#     if label is None:\n#         return None\n#     result = fuzzy.fuzzy_match(self._search_term, str(label))\n#     return str(result[1])\ncase self.Roles.BackupRole, _:\nreturn super().data(index, constants.DISPLAY_ROLE)\ncase self.Roles.SortRole, _:\nidx = self.index(index.row(), filter_column)\nlabel = super().data(idx, constants.DISPLAY_ROLE)\nresult = fuzzy.fuzzy_match(self._search_term, label)\nreturn result[1]\ncase _, _:\nreturn super().data(index, role)\nsearch_term = core.Property(\nstr,\nget_search_term,\nset_search_term,\ndoc=\"Current search term\",\n)\nmatch_color = core.Property(\ngui.QColor,\nget_match_color,\nset_match_color,\ndoc=\"Color to use for match coloring\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/FuzzyFilterProxyModel.html#prettyqt.itemmodels.proxies.fuzzyfilterproxymodel.FuzzyFilterProxyModel.Roles","title":"<code>Roles</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Addional roles.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\fuzzyfilterproxymodel.py</code> <pre><code>class Roles(enum.IntEnum):\n\"\"\"Addional roles.\"\"\"\nBackupRole = constants.USER_ROLE + 65\nSortRole = constants.SORT_ROLE\n</code></pre>"},{"location":"additional_modules/itemmodels/FuzzyFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256649312[\"itemmodels.FuzzyFilterProxyModel\"]\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254426768 --&gt; 2103256649312\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/FuzzyFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering <code>search_term</code> QString Current search term <code>match_color</code> QColor Color to use for match coloring"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html","title":"HighlightMouseProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same row / column as mouse position.</p> <p>The proxy can work in four different modes.</p> <ul> <li>column: The column the mouse is currently hovering over is highlighted.</li> <li>row: The row the mouse is currently hovering over is highlighted.</li> <li>both: Combination of column and row mode.</li> <li>single: only the hovered cell is highlighted.</li> </ul> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>class HighlightMouseProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model which highlights all cells with same row / column as mouse position.\n    The proxy can work in four different modes.\n    * column: The column the mouse is currently hovering over is highlighted.\n    * row: The row the mouse is currently hovering over is highlighted.\n    * both: Combination of column and row mode.\n    * single: only the hovered cell is highlighted.\n    \"\"\"\nID = \"highlight_mouse\"\nICON = \"mdi.cursor-default-click-outline\"\ndef __init__(\nself,\nparent: widgets.QAbstractItemView,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"both\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(parent, **kwargs)\n# TODO: this should be done in proxifier I think,\n# ItemModel shouldnt know about widget.\nparent.setMouseTracking(True)\nparent.entered.connect(self.cell_entered)\nparent.installEventFilter(self)\ndef eventFilter(self, source, event):\nmatch event.type():\ncase core.Event.Type.Leave:\nself._current_row = None\nself._current_column = None\nself.force_layoutchange()\nreturn False\ndef cell_entered(self, index):\nself._current_row = index.row()\nself._current_column = index.column()\nself.force_layoutchange()\ndef set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\ndef get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\ndef set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\ndef get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role != constants.BACKGROUND_ROLE:\nreturn super().data(index, role)\nis_in_row = index.row() == self._current_row\nis_in_column = index.column() == self._current_column\nmatch self._mode:\ncase \"column\" if is_in_column:\nreturn self._highlight_color\ncase \"row\" if is_in_row:\nreturn self._highlight_color\ncase \"both\" if is_in_row or is_in_column:\nreturn self._highlight_color\ncase \"single\" if is_in_row and is_in_column:\nreturn self._highlight_color\ncase _:\nreturn super().data(index, role)\nhighlightMode = core.Property(\nstr,\nget_highlight_mode,\nset_highlight_mode,\ndoc=\"Highlight mode\",\n)\nhighlightColor = core.Property(\nQtGui.QColor,\nget_highlight_color,\nset_highlight_color,\ndoc=\"Color to use for highlighting\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256655072[\"itemmodels.HighlightMouseProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254404688 --&gt; 2103256655072\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/HighlightMouseProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>highlightMode</code> QString Highlight mode <code>highlightColor</code> QColor Color to use for highlighting"},{"location":"additional_modules/itemmodels/ImportlibTreeModel.html","title":"ImportlibTreeModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ImportlibTreeModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnItemModel</code></p> <p>Model showing the dependency tree of a distribution.</p> Source code in <code>prettyqt\\itemmodels\\importlibdistributionmodel.py</code> <pre><code>class ImportlibTreeModel(itemmodels.ColumnItemModel):\n\"\"\"Model showing the dependency tree of a distribution.\"\"\"\n@core.Enum\nclass Roles(enum.IntEnum):\nDistributionRole = constants.USER_ROLE + 43255\nSUPPORTS = metadata.Distribution | str\nTreeItem = DistTreeItem\nIS_RECURSIVE = True\nCOLUMNS = [\nNameColumn,\nVersionColumn,\nConstraintsColumn,\nMarkerColumn,\nSummaryColumn,\nHomepageColumn,\nAuthorColumn,\nLicenseColumn,\n]\ndef __init__(\nself,\nobj: metadata.Distribution | str,\nshow_root: bool = False,\nparent: core.QObject | None = None,\n):\nif isinstance(obj, str):\nobj = metadata.distribution(obj)\nsuper().__init__(\nobj=obj, columns=self.COLUMNS, parent=parent, show_root=show_root\n)\n@classmethod\ndef setup_example(cls):\nfrom prettyqt import widgets\nmodel = cls(\"prettyqt\")\ntable = widgets.TreeView(word_wrap=False)\ntable.set_model(model)\ntable.set_delegate(\"render_link\", column=5)\ntable.expand_all(depth=4)\nreturn table\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, metadata.Distribution)\n@classmethod\ndef from_system(cls, parent: core.QObject | None = None) -&gt; Self:\ndistributions = list_system_modules()\nreturn cls(distributions, parent)\n@classmethod\ndef from_package(cls, package_name: str, parent: core.QObject | None = None) -&gt; Self:\ndistributions = list_package_requirements(package_name)\nreturn cls(distributions, parent)\ndef _has_children(self, item: ImportlibTreeModel.TreeItem) -&gt; bool:\nreturn bool(item.requires)\ndef _fetch_object_children(self, item: DistTreeItem) -&gt; list[DistTreeItem]:\nreturn [\nDistTreeItem(obj=dist, parent=item)\nfor dist in list_package_requirements(item.metadata[\"Name\"])\n]\n</code></pre>"},{"location":"additional_modules/itemmodels/ImportlibTreeModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256783712[\"itemmodels.ImportlibTreeModel\"]\n  2103256730912[\"itemmodels.ColumnItemModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256730912 --&gt; 2103256783712\n  2103256729952 --&gt; 2103256730912\n  140736120080256 --&gt; 2103256729952\n  2103254308688 --&gt; 2103256730912\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Warning</p> <p>Model can be recursive, so be careful with iterating whole tree.</p> <p>Info</p> <p>Supported data type: <code>importlib.metadata.Distribution | str</code></p>"},{"location":"additional_modules/itemmodels/ImportlibTreeModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/ItemModelResolver.html","title":"ItemModelResolver","text":""},{"location":"additional_modules/itemmodels/ItemModelResolver.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>baseresolver.BaseResolver</code></p> <p>Allows globbing ItemModels.</p> Source code in <code>prettyqt\\itemmodels\\itemmodelresolver.py</code> <pre><code>class ItemModelResolver(baseresolver.BaseResolver):\n\"\"\"Allows globbing ItemModels.\"\"\"\ndef __init__(\nself,\nmodel: core.QAbstractItemModel,\npath_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\nignore_case: bool = False,\n):\n\"\"\"Resolve any `ModelIndex` paths using role `path_role`.\n        Arguments:\n            model: Model to search\n            path_role: ItemDataRole to be used for resolving\n            ignore_case: Enable case insensisitve handling.\n        \"\"\"\nsuper().__init__(ignore_case=ignore_case)\nself.model = model\nself.path_role = path_role\nself.fetch_more = True\ndef get_parent(self, node):\nreturn node.parent()\ndef get_children(self, node):\nif self.fetch_more:\nwhile self.model.canFetchMore(node):\nself.model.fetchMore(node)\nreturn [self.model.index(i, 0, node) for i in range(self.model.rowCount(node))]\ndef get_root(self, node):\nreturn core.ModelIndex()\ndef get_attribute(self, node):\nreturn str(node.data(self.path_role))\ndef get(self, path: str, root_node=None):\npath = f\"/None{path}\"\nreturn super().get(path, root_node or core.ModelIndex())\ndef glob(self, path: str, root_node=None):\npath = f\"/None{path}\"\nreturn super().glob(path, root_node or core.ModelIndex())\n</code></pre>"},{"location":"additional_modules/itemmodels/ItemModelResolver.html#prettyqt.itemmodels.itemmodelresolver.ItemModelResolver.__init__","title":"<code>__init__(model: core.QAbstractItemModel, path_role: constants.ItemDataRole = constants.DISPLAY_ROLE, ignore_case: bool = False)</code>","text":"<p>Resolve any <code>ModelIndex</code> paths using role <code>path_role</code>.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>core.QAbstractItemModel</code> <p>Model to search</p> required <code>path_role</code> <code>constants.ItemDataRole</code> <p>ItemDataRole to be used for resolving</p> <code>constants.DISPLAY_ROLE</code> <code>ignore_case</code> <code>bool</code> <p>Enable case insensisitve handling.</p> <code>False</code> Source code in <code>prettyqt\\itemmodels\\itemmodelresolver.py</code> <pre><code>def __init__(\nself,\nmodel: core.QAbstractItemModel,\npath_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\nignore_case: bool = False,\n):\n\"\"\"Resolve any `ModelIndex` paths using role `path_role`.\n    Arguments:\n        model: Model to search\n        path_role: ItemDataRole to be used for resolving\n        ignore_case: Enable case insensisitve handling.\n    \"\"\"\nsuper().__init__(ignore_case=ignore_case)\nself.model = model\nself.path_role = path_role\nself.fetch_more = True\n</code></pre>"},{"location":"additional_modules/itemmodels/ItemModelResolver.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256656032[\"itemmodels.ItemModelResolver\"]\n  2103254431568[\"utils.BaseResolver\"]\n  140736120080256[\"builtins.object\"]\n  2103254431568 --&gt; 2103256656032\n  140736120080256 --&gt; 2103254431568</code></pre>"},{"location":"additional_modules/itemmodels/JsonModel.html","title":"JsonModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/JsonModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnItemModel</code></p> Source code in <code>prettyqt\\itemmodels\\jsonmodel.py</code> <pre><code>class JsonModel(itemmodels.ColumnItemModel):\nCOLUMNS = [NameColumn, ValueColumn, TypeColumn]\nSUPPORTS = Mapping\ndef __init__(\nself,\nobj: Any,\nshow_root: bool = True,\n**kwargs,\n):\nsuper().__init__(\nobj=JsonItem(key=\"\", value=obj, typ=type(obj)),\ncolumns=self.COLUMNS,\nshow_root=show_root,\n**kwargs,\n)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, Mapping)\ndef _has_children(self, item: JsonModel.TreeItem) -&gt; bool:\nreturn isinstance(item.obj.value, dict | list | set) and bool(item.obj.value)\ndef _fetch_object_children(\nself, item: JsonModel.TreeItem\n) -&gt; list[JsonModel.TreeItem]:\n\"\"\"Fetch the children of a Python object.\n        Returns: list of treeitem.TreeItems\n        \"\"\"\n# items = []\nmatch item.obj.value:\ncase Mapping():\nreturn [\nself.TreeItem(obj=JsonItem(key=k, value=v, typ=type(v)))\nfor k, v in item.obj.value.items()\n]\ncase Iterable() if not isinstance(item.obj.value, str):\nreturn [\nself.TreeItem(obj=JsonItem(key=k, value=v, typ=type(v)))\nfor k, v in enumerate(item.obj.value)\n]\ncase _:\nreturn [\nself.TreeItem(\nobj=JsonItem(\nkey=\"key\",\nvalue=repr(item.obj.value),\ntyp=type(item.obj.value),\n)\n)\n]\n</code></pre>"},{"location":"additional_modules/itemmodels/JsonModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256786592[\"itemmodels.JsonModel\"]\n  2103256730912[\"itemmodels.ColumnItemModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256730912 --&gt; 2103256786592\n  2103256729952 --&gt; 2103256730912\n  140736120080256 --&gt; 2103256729952\n  2103254308688 --&gt; 2103256730912\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'collections.abc.Mapping'&gt;</code></p>"},{"location":"additional_modules/itemmodels/JsonModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/LayoutHierarchyModel.html","title":"LayoutHierarchyModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/LayoutHierarchyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseHierarchyModel</code></p> <p>Tree model showing the layout hierarchy of widgets.</p> Source code in <code>prettyqt\\itemmodels\\widgethierarchymodel.py</code> <pre><code>class LayoutHierarchyModel(BaseHierarchyModel):\n\"\"\"Tree model showing the layout hierarchy of widgets.\"\"\"\nSUPPORTS = \"widgets.QWidget\"\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nfrom prettyqt import widgets\nreturn isinstance(instance, widgets.QWidget)\ndef _fetch_object_children(\nself, item: LayoutHierarchyModel.TreeItem\n) -&gt; list[LayoutHierarchyModel.TreeItem]:\nfrom prettyqt import widgets\nmatch item.obj:\ncase (\nwidgets.QSplitter()\n| widgets.QToolBox()\n| widgets.QStackedWidget()\n| widgets.QTabWidget()\n):\nitems = [item.obj.widget(i) for i in range(item.obj.count())]\ncase widgets.QWidget():\nlayout = item.obj.layout()\nitems = [layout.itemAt(i) for i in range(layout.count())]\nitems = [w if (w := i.widget()) else i.layout() for i in items]\ncase widgets.QLayout():\nlayout = item.obj\nitems = [layout.itemAt(i) for i in range(layout.count())]\nitems = [w if (w := i.widget()) else i.layout() for i in items]\ncase _:\nraise ValueError(item)\nreturn [self.TreeItem(obj=i) for i in items]\ndef _has_children(self, item: LayoutHierarchyModel.TreeItem) -&gt; bool:\nfrom prettyqt import widgets\nmatch item.obj:\ncase (\nwidgets.QSplitter()\n| widgets.QToolBox()\n| widgets.QStackedWidget()\n| widgets.QTabWidget()\n| widgets.QLayout()\n):\nreturn item.obj.count() &gt; 0\ncase _:\nlayout = item.obj.layout()\nreturn False if layout is None else layout.count() &gt; 0\n</code></pre>"},{"location":"additional_modules/itemmodels/LayoutHierarchyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256877792[\"itemmodels.LayoutHierarchyModel\"]\n  2103256880672[\"itemmodels.BaseHierarchyModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256880672 --&gt; 2103256877792\n  2103254308688 --&gt; 2103256880672\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>widgets.QWidget</code></p>"},{"location":"additional_modules/itemmodels/LayoutHierarchyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>base_class_name</code> QString Class to use for the columns."},{"location":"additional_modules/itemmodels/LinkedSelectionModel.html","title":"LinkedSelectionModel","text":"<p>Qt Base Class: QItemSelectionModel</p> <p>Signature: <code>QItemSelectionModel(self, model: PySide6.QtCore.QAbstractItemModel, parent: PySide6.QtCore.QObject) -&gt; None QItemSelectionModel(self, model: Optional[PySide6.QtCore.QAbstractItemModel] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/LinkedSelectionModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ItemSelectionModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\linkedselectionmodel.py</code> <pre><code>class LinkedSelectionModel(core.ItemSelectionModel):\n# TODO: atm this doesnt need to inherit from ItemSelectionModel.\n# Not sure if there is any advantage in doing so...\n# Otherwise we could rename to SelectionLinker and just inherit from\n# object / core.Object\ndef __init__(\nself,\n*itemviews,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._itemviews = itemviews\nself._models = [w.model() for w in itemviews]\nself._mapper = itemmodels.ProxyMapper(*self._models)\nfor w in itemviews:\nw.selectionModel().currentChanged.connect(self._on_current_change)\nw.selectionModel().selectionChanged.connect(self._on_selection_change)\ndef _on_current_change(self, new: core.ModelIndex, _):\nsource = self.sender().model()\nsource_index = self._models.index(source)\ntarget_indexes = list(range(len(self._models)))\ntarget_indexes.remove(source_index)\nfor target_index in target_indexes:\nmapped = self._mapper.map_index(\nsource=source_index, target=target_index, index=new\n)\nself._itemviews[target_index].setCurrentIndex(mapped)\ndef _on_selection_change(self, new: core.QItemSelection, _):\nsource_model = self.sender().model()\nsource_index = self._models.index(source_model)\ntarget_indexes = list(range(len(self._models)))\ntarget_indexes.remove(source_index)\nfor target_index in target_indexes:\nselected = self._mapper.map_selection(\nsource=source_index, target=target_index, selection=new\n)\nsel_model = self._itemviews[target_index].selectionModel()\nsel_model.select(selected, sel_model.SelectionFlag.Select)\n</code></pre>"},{"location":"additional_modules/itemmodels/LinkedSelectionModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256630112[\"itemmodels.LinkedSelectionModel\"]\n  2103254378768[\"core.ItemSelectionModel\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254711616[\"QtCore.QItemSelectionModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254378768 --&gt; 2103256630112\n  2103255067472 --&gt; 2103254378768\n  140736120080256 --&gt; 2103255067472\n  2103254711616 --&gt; 2103254378768\n  2103254677056 --&gt; 2103254711616\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/LinkedSelectionModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>model</code> QAbstractItemModel <code>hasSelection</code> bool <code>currentIndex</code> QModelIndex <code>selection</code> QItemSelection <code>selectedIndexes</code> QList"},{"location":"additional_modules/itemmodels/ListMixin.html","title":"ListMixin","text":""},{"location":"additional_modules/itemmodels/ListMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>class ListMixin:\nSORT_METHODS: dict[int, Callable]\nMIME_TYPE: str = \"\"\ndef __init__(self, *args, items=None, **kwargs):\nsuper().__init__(*args, **kwargs)  # type: ignore\nself.items = items or []\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif role == constants.USER_ROLE:\nself.items[index.row()] = value\nself.update_row(index.row())\nreturn True\nreturn super().setData(index, value, role)  # type: ignore\ndef removeRows(self, row: int, count: int, parent):\n# called by default implementation of QAbstractItemModel::startDrag\nend_row = row + count - 1\nwith self.remove_rows(row, end_row, parent):\nfor i in range(end_row, row - 1, -1):\nself.items.pop(i)\nreturn True\n# def insertRows(self, row: int, count: int, parent):\n#     # called by default implementation of QAbstractItemModel::dropMimeData\n#     end_row = row + count - 1\n#     with self.insert_rows(row, end_row, parent):\n#         for i in range(end_row, row - 1, -1):\n#             self.items.insert(i,)\n#     return True\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Required override for AbstractitemModels.\"\"\"\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.items)\ndef data_by_index(self, index):\nreturn self.items[index.row()]\ndef dropMimeData(self, mime_data, action, row, column, parent_index):\nif not mime_data.hasFormat(self.MIME_TYPE):\nreturn False\n# Since we only drop in between items, parent_index must be invalid,\n# and we use the row arg to know where the drop took place.\nif parent_index.isValid():\nreturn False\nindexes = mime_data.get_json_data(self.MIME_TYPE)\npos = row if row &lt; len(self.items) and row != -1 else len(self.items)\nrem_offset = sum(i &lt;= pos for i in indexes)\nnew = [self.items[i] for i in indexes]\nwith self.change_layout():\nfor i in sorted(indexes, reverse=True):\nself.items.pop(i)\nfor item in reversed(new):\nself.items.insert(pos - rem_offset, item)\nreturn False\ndef sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self.SORT_METHODS.get(ncol):\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\ndef add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\ndef add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i in range(len(items)):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\ndef remove_items(self, offsets: Iterable[int]):\nfor offset in sorted(offsets, reverse=True):\nself.removeRow(offset)\ndef supportedDropActions(self):\nreturn constants.MOVE_ACTION\ndef mimeTypes(self):\nreturn [self.MIME_TYPE]\ndef mimeData(self, indexes):\n\"\"\"AbstractItemModel override, defines the data used for drag and drop.\n        atm this just returns the positions (not sure if this is perfect)\n        \"\"\"\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\n# list interface\ndef pop(self, row=None):\nif row is None:\nrow = len(self.items) - 1\nresult = self.items[row]\nself.removeRow(row)\nreturn result\ndef __getitem__(self, row):\nreturn self.items[row]\ndef __setitem__(self, row: int | slice, value):\nmatch row:\ncase slice():\nrng = range(row.start or 0, row.stop or len(self.items), row.step or 1)\nfor count, i in enumerate(rng):\nif i &lt; self.rowCount():\nindex = self.index(i)\nself.setData(i, value[count], role=constants.USER_ROLE)\nelse:\nself.items.append(value[count])\ncase int():\nindex = self.index(row)\nself.setData(index, value, role=constants.USER_ROLE)\ncase _:\nraise ValueError(row)\ndef __len__(self):\nreturn len(self.items)\ndef insert(self, row: int, value):\nwith self.insert_row(row):\nself.items.insert(row, value)\ndef append(self, value):\nrow = len(self.items)\nself.insert(row, value)\ndef extend(self, values):\npos = len(self.items)\nwith self.insert_rows(pos, pos + len(values)):\nself.items.extend(values)\ndef set_list(self, values):\n\"\"\"Set the model to a new list.\"\"\"\nwith self.reset_model():\nself.items = values\ndef remove(self, item):\nif item in self.items:\npos = self.items.index(item)\nwith self.remove_row(pos):\nself.items.remove(item)\n</code></pre> Name Children Inherits NestedModelprettyqt.itemmodels.nestedmodel <ul><li>ListMixin</li><li>ModelMixin</li><li>AbstractItemModel</li></ul> FrameInfoModelprettyqt.itemmodels.frameinfomodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> MappingModelprettyqt.itemmodels.mappingmodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> ModelIndexModelprettyqt.itemmodels.modelindexmodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul>"},{"location":"additional_modules/itemmodels/ListMixin.html#prettyqt.itemmodels.listmixin.ListMixin.add","title":"<code>add(item: Any, position: int | None = None)</code>","text":"<p>Append provided item to the list.</p> Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>def add(self, item: Any, position: int | None = None):\n\"\"\"Append provided item to the list.\"\"\"\nself.add_items(items=[item], position=position)\nreturn item\n</code></pre>"},{"location":"additional_modules/itemmodels/ListMixin.html#prettyqt.itemmodels.listmixin.ListMixin.add_items","title":"<code>add_items(items: Iterable[Any], position: int | None = None)</code>","text":"<p>Append a list of items to the list.</p> Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>def add_items(self, items: Iterable[Any], position: int | None = None):\n\"\"\"Append a list of items to the list.\"\"\"\nif position is None:\nposition = len(self.items)\nitems = list(items)\nwith self.insert_rows(position, position + len(items) - 1):\nfor i in range(len(items)):\nself.items.insert(i + position, items[i])\n# self.items.extend(items)\nreturn items\n</code></pre>"},{"location":"additional_modules/itemmodels/ListMixin.html#prettyqt.itemmodels.listmixin.ListMixin.mimeData","title":"<code>mimeData(indexes)</code>","text":"<p>AbstractItemModel override, defines the data used for drag and drop.</p> <p>atm this just returns the positions (not sure if this is perfect)</p> Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>def mimeData(self, indexes):\n\"\"\"AbstractItemModel override, defines the data used for drag and drop.\n    atm this just returns the positions (not sure if this is perfect)\n    \"\"\"\nmime_data = core.MimeData()\ndata = [i.row() for i in indexes if i.column() == 0]\nmime_data.set_json_data(self.MIME_TYPE, data)\nreturn mime_data\n</code></pre>"},{"location":"additional_modules/itemmodels/ListMixin.html#prettyqt.itemmodels.listmixin.ListMixin.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Required override for AbstractitemModels.</p> Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Required override for AbstractitemModels.\"\"\"\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 or parent.isValid() else len(self.items)\n</code></pre>"},{"location":"additional_modules/itemmodels/ListMixin.html#prettyqt.itemmodels.listmixin.ListMixin.set_list","title":"<code>set_list(values)</code>","text":"<p>Set the model to a new list.</p> Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>def set_list(self, values):\n\"\"\"Set the model to a new list.\"\"\"\nwith self.reset_model():\nself.items = values\n</code></pre>"},{"location":"additional_modules/itemmodels/ListMixin.html#prettyqt.itemmodels.listmixin.ListMixin.sort","title":"<code>sort(ncol: int, order: int)</code>","text":"<p>Sort table by given column number.</p> Source code in <code>prettyqt\\itemmodels\\listmixin.py</code> <pre><code>def sort(self, ncol: int, order):\n\"\"\"Sort table by given column number.\"\"\"\nis_asc = order == constants.ASCENDING\nif sorter := self.SORT_METHODS.get(ncol):\nwith self.change_layout():\nself.items.sort(key=sorter, reverse=is_asc)\n</code></pre>"},{"location":"additional_modules/itemmodels/ListMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254425808[\"itemmodels.ListMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103254425808</code></pre>"},{"location":"additional_modules/itemmodels/LogRecordModel.html","title":"LogRecordModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/LogRecordModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\logrecordmodel.py</code> <pre><code>class LogRecordModel(itemmodels.ColumnTableModel):\nCOLUMNS = [\nLevelNameColumn,\nFileNameColumn,\nFunctionNameColumn,\nLineNoColumn,\nMessageColumn,\nModuleColumn,\nCreatedColumn,\nProcessColumn,\nThreadColumn,\nProcessNameColumn,\nThreadNameColumn,\nRelativeCreatedColumn,\nNameColumn,\nPathNameColumn,\n]\nSUPPORTS = Sequence[logging.LogRecord]\ndef __init__(self, **kwargs):\nsuper().__init__(items=[], columns=self.COLUMNS, **kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (logging.LogRecord(), *_):\nreturn True\ncase _:\nreturn False\n</code></pre>"},{"location":"additional_modules/itemmodels/LogRecordModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256832672[\"itemmodels.LogRecordModel\"]\n  2103256731872[\"itemmodels.ColumnTableModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256731872 --&gt; 2103256832672\n  2103256729952 --&gt; 2103256731872\n  140736120080256 --&gt; 2103256729952\n  2103254409488 --&gt; 2103256731872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[logging.LogRecord]</code></p>"},{"location":"additional_modules/itemmodels/LogRecordModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/MappingModel.html","title":"MappingModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/MappingModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ListMixin</code>, <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\mappingmodel.py</code> <pre><code>class MappingModel(itemmodels.ListMixin, core.AbstractTableModel):\nSUPPORTS = Sequence[dict]\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (dict(), *_):\nreturn True\ncase _:\nreturn False\ndef columnCount(self, index: core.ModelIndex | None = None):\nreturn len(self.items[0]) if self.items else 0\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn list(self.items[0].keys())[section]\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nitem = self.data_by_index(index)\nmatch role:\ncase constants.DISPLAY_ROLE:\nkey = self.headerData(index.column(), constants.HORIZONTAL)\nreturn item[key]\n</code></pre>"},{"location":"additional_modules/itemmodels/MappingModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256834592[\"itemmodels.MappingModel\"]\n  2103254425808[\"itemmodels.ListMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254425808 --&gt; 2103256834592\n  140736120080256 --&gt; 2103254425808\n  2103254409488 --&gt; 2103256834592\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[dict]</code></p>"},{"location":"additional_modules/itemmodels/MappingModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/MeltProxyModel.html","title":"MeltProxyModel","text":"<p>Qt Base Class: QAbstractProxyModel</p> <p>Signature: <code>QAbstractProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model to unpivot a table from wide format to long format.</p> <p>Works same way as pandas.melt.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>class MeltProxyModel(core.AbstractProxyModel):\n\"\"\"Proxy model to unpivot a table from wide format to long format.\n    Works same way as [pandas.melt](https://shorturl.at/bhGI3).\n    \"\"\"\nID = \"melt\"\nICON = \"mdi6.table-pivot\"\ndef __init__(\nself,\nid_columns: list[int],\nvar_name: str = \"Variable\",\nvalue_name: str = \"Value\",\n**kwargs,\n):\nself._id_columns = id_columns\nself._var_name = var_name\nself._value_name = value_name\nsuper().__init__(**kwargs)\n@property\ndef value_columns(self) -&gt; list[int]:\ncolcount = self.sourceModel().columnCount()\nreturn [i for i in range(colcount) if i not in self._id_columns]\ndef rowCount(self, index: core.ModelIndex | None = None) -&gt; int:\nreturn self.sourceModel().rowCount() * len(self.value_columns)\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if self.sourceModel() is None else len(self._id_columns) + 2\ndef is_source_column(self, column: int) -&gt; bool:\nreturn 0 &lt;= column &lt; self.columnCount() - 2\ndef is_variable_column(self, column: int) -&gt; bool:\nreturn column == self.columnCount() - 2\ndef is_value_column(self, column: int) -&gt; bool:\nreturn column == self.columnCount() - 1\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ncolumn = index.column()\nif self.is_variable_column(column) and role == constants.DISPLAY_ROLE:\ncol = index.row() // self.sourceModel().rowCount()\nreturn self.sourceModel().headerData(\nself.value_columns[col], constants.HORIZONTAL\n)\nreturn super().data(index, role)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation != constants.HORIZONTAL:\nreturn str(section)\nif self.is_variable_column(section):\nreturn self._var_name or \"Variable\"\nelif self.is_value_column(section):\nreturn self._value_name or \"Value\"\nelse:\nsection = self.get_source_column_for_proxy_column(section)\nreturn self.sourceModel().headerData(section, orientation, role)\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\n# TODO: broken\nparent = parent or core.ModelIndex()\nif column not in self._id_columns:\nreturn self.createIndex(row, column, core.ModelIndex())\ncol_pos = self.get_source_column_for_proxy_column(column)\nrow_pos = row % self.sourceModel().rowCount()\nreturn self.sourceModel().index(row_pos, col_pos, parent)\ndef parent(self, index: core.ModelIndex):\nif not self.is_source_column(index.column()):\nreturn core.ModelIndex()\nreturn self.sourceModel().parent(index)\ndef get_source_column_for_proxy_column(self, column: int) -&gt; int:\nreturn self._id_columns.index(column)\ndef get_proxy_column_for_source_column(self, column: int) -&gt; int:\nreturn column - sum(column &gt; col for col in self._id_columns)\ndef mapToSource(self, proxy_index: core.ModelIndex) -&gt; core.ModelIndex:\nsource = self.sourceModel()\nif source is None or not proxy_index.isValid():\nreturn core.ModelIndex()\nrow, column = proxy_index.row(), proxy_index.column()\nrow_count = source.rowCount()\nif self.is_variable_column(column):\nreturn core.ModelIndex()\nelif self.is_value_column(column):\nsource_col = self.value_columns[row // row_count]\nsource_row = row % row_count\nreturn source.index(source_row, source_col, core.ModelIndex())\nelse:\nsource_col = self.get_source_column_for_proxy_column(column)\nsource_row = row % row_count\nreturn source.index(source_row, source_col)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n# TODO: this is still broken.\nsource = self.sourceModel()\nif source is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow, col = source_index.row(), source_index.column()\n# we can only really return a corresponding index for the value columns.\n# Var column is completely virtual and the id columns would have multiple\n# source indexes which correspond to the proxy index.\nif col not in self.value_columns:\nreturn core.ModelIndex()\n# TODO: convert row / col\nreturn source.index(row, col, core.ModelIndex())\ndef get_id_columns(self) -&gt; list[int]:\n\"\"\"Get list of identifier columns.\"\"\"\nreturn self._id_columns\ndef set_id_columns(self, columns: list[int]):\n\"\"\"Set identifier variable columns.\"\"\"\nwith self.reset_model():\nself._id_columns = columns\ndef get_var_name(self) -&gt; str:\n\"\"\"Get variable column header.\"\"\"\nreturn self._var_name\ndef set_var_name(self, name: str):\n\"\"\"Set header for variable column.\"\"\"\nself._var_name = name\nsection = self.columnCount() - 2\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\ndef get_value_name(self) -&gt; str:\n\"\"\"Get value column header.\"\"\"\nreturn self._value_name\ndef set_value_name(self, name: str):\n\"\"\"Set header for value column.\"\"\"\nself._value_name = name\nsection = self.columnCount() - 1\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\nid_columns = core.Property(\nlist,\nget_id_columns,\nset_id_columns,\ndoc=\"Columns to use as identifier variables\",\n)\nvar_name = core.Property(\nstr,\nget_var_name,\nset_var_name,\ndoc=\"Header for variable column\",\n)\nvalue_name = core.Property(\nstr,\nget_value_name,\nset_value_name,\ndoc=\"Header for value column\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.get_id_columns","title":"<code>get_id_columns() -&gt; list[int]</code>","text":"<p>Get list of identifier columns.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def get_id_columns(self) -&gt; list[int]:\n\"\"\"Get list of identifier columns.\"\"\"\nreturn self._id_columns\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.get_value_name","title":"<code>get_value_name() -&gt; str</code>","text":"<p>Get value column header.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def get_value_name(self) -&gt; str:\n\"\"\"Get value column header.\"\"\"\nreturn self._value_name\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.get_var_name","title":"<code>get_var_name() -&gt; str</code>","text":"<p>Get variable column header.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def get_var_name(self) -&gt; str:\n\"\"\"Get variable column header.\"\"\"\nreturn self._var_name\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.set_id_columns","title":"<code>set_id_columns(columns: list[int])</code>","text":"<p>Set identifier variable columns.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def set_id_columns(self, columns: list[int]):\n\"\"\"Set identifier variable columns.\"\"\"\nwith self.reset_model():\nself._id_columns = columns\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.set_value_name","title":"<code>set_value_name(name: str)</code>","text":"<p>Set header for value column.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def set_value_name(self, name: str):\n\"\"\"Set header for value column.\"\"\"\nself._value_name = name\nsection = self.columnCount() - 1\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.set_var_name","title":"<code>set_var_name(name: str)</code>","text":"<p>Set header for variable column.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def set_var_name(self, name: str):\n\"\"\"Set header for variable column.\"\"\"\nself._var_name = name\nsection = self.columnCount() - 2\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\n</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256644512[\"itemmodels.MeltProxyModel\"]\n  2103254410448[\"core.AbstractProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254410448 --&gt; 2103256644512\n  2103254406608 --&gt; 2103254410448\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254619456 --&gt; 2103254410448\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/MeltProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>id_columns</code> QVariantList Columns to use as identifier variables <code>var_name</code> QString Header for variable column <code>value_name</code> QString Header for value column"},{"location":"additional_modules/itemmodels/ModelIndexModel.html","title":"ModelIndexModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ModelIndexModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ListMixin</code>, <code>core.AbstractTableModel</code></p> <p>Table model for displaying a the data of a list of ModelIndexes.</p>"},{"location":"additional_modules/itemmodels/ModelIndexModel.html#prettyqt.itemmodels.ModelIndexModel--example","title":"Example:","text":"<pre><code># get indexes from some random model\nmy_model = ParentClassTreeModel(widgets.QWidget, show_mro=True)\nindexes = list(my_model.iter_tree(fetch_more=True))\nmodel = ModelIndexModel(indexes=indexes)\n</code></pre> Source code in <code>prettyqt\\itemmodels\\modelindexmodel.py</code> <pre><code>class ModelIndexModel(itemmodels.ListMixin, core.AbstractTableModel):\n\"\"\"Table model for displaying a the data of a list of ModelIndexes.\n    ### Example:\n    ```py\n    # get indexes from some random model\n    my_model = ParentClassTreeModel(widgets.QWidget, show_mro=True)\n    indexes = list(my_model.iter_tree(fetch_more=True))\n    model = ModelIndexModel(indexes=indexes)\n    ```\n    \"\"\"\nSUPPORTS = Sequence[core.QModelIndex]\nID = \"modelindex\"\nFIXED_HEADER = [\"Path\", \"Row\", \"Column\", \"Flags\"]\ndef __init__(\nself,\nindexes: list[core.ModelIndex],\n**kwargs,\n):\nself._use_model_roles = False\nsuper().__init__(**kwargs)\nself.items = indexes\nself._update_columns()\ndef _update_columns(self):\nif self.items and self._use_model_roles:\n# we assume here that all indexes have some model.\nmodel = self.items[0].model()\nroles = bidict({i: v.data().decode() for i, v in model.roleNames().items()})\nself.role_mapping = roles.inverse\nself.role_headers = list(roles.values())\nelse:\nself.role_mapping = {\nf\"{k.capitalize()} role\": v for k, v in constants.ITEM_DATA_ROLE.items()\n}\nself.role_headers = list(self.role_mapping.keys())\ndef setup_delegates(self, view):\nfor i, v in enumerate(self.role_mapping.values(), start=len(self.FIXED_HEADER)):\nview.set_delegate(\"editor\", column=i, data_role=v)\n@property\ndef headers(self):\nreturn self.FIXED_HEADER + self.role_headers\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (core.ModelIndex(), *_):\nreturn True\ncase _:\nreturn False\ndef columnCount(self, parent=None) -&gt; int:\nreturn len(self.headers)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.headers[section]\ncase constants.VERTICAL, constants.DISPLAY_ROLE:\nreturn str(section)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nidx = self.items[index.row()]\nheader = self.headers[index.column()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\n#  pieces = self.get_breadcrumbs_path()\npieces = self.get_index_key(idx, include_column=True)\nreturn \" / \".join(str(i) for i in pieces)\ncase constants.DISPLAY_ROLE, 1:\nreturn idx.row()\ncase constants.DISPLAY_ROLE, 2:\nreturn idx.column()\ncase constants.DISPLAY_ROLE, 3:\nroles = constants.ITEM_FLAG.get_list(idx.flags())\nreturn \" / \".join(roles)\ncase constants.DISPLAY_ROLE, _:\nrole = self.role_mapping[header]\nreturn repr(idx.data(role))\ncase _ as role, _:\n# print(self.headers[column], role)\nreturn idx.data(role)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nidx = self.items[index.row()]\nidx.model().setData(idx, value, role)\nself.update_row(index.row())\nreturn True\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nreturn super().flags(index) | constants.IS_EDITABLE\n# idx = self.items[index.row()]\n# return idx.flags()\ndef set_use_model_roles(self, value: bool):\nself._use_model_roles = value\ndef is_using_model_roles(self) -&gt; bool:\nreturn self._use_model_roles\nuse_model_roles = core.Property(\nbool,\nis_using_model_roles,\nset_use_model_roles,\ndoc=\"Whether to use model.roleNames() for the columns.\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/ModelIndexModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256823072[\"itemmodels.ModelIndexModel\"]\n  2103254425808[\"itemmodels.ListMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254425808 --&gt; 2103256823072\n  140736120080256 --&gt; 2103254425808\n  2103254409488 --&gt; 2103256823072\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[PySide6.QtCore.QModelIndex]</code></p>"},{"location":"additional_modules/itemmodels/ModelIndexModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>use_model_roles</code> bool Whether to use model.roleNames() for the columns."},{"location":"additional_modules/itemmodels/ModelMixin.html","title":"ModelMixin","text":""},{"location":"additional_modules/itemmodels/ModelMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\itemmodels\\modelmixin.py</code> <pre><code>class ModelMixin:\nDTYPE_ROLE = constants.USER_ROLE + 1  # type: ignore\nHEADER = [\"Name\"]\nLABELS: dict = {}\nCHECKSTATE: dict = {}\nTOOLTIPS: dict = {}\nDECORATIONS: dict = {}\nSET_DATA: dict = {}\ncontent_type = \"\"\ndef headerData(\nself,\noffset: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[offset]\ndef columnCount(self, parent=None):\nreturn len(self.HEADER)\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\n\"\"\"Override for AbstractitemModel base method.\n        returns corresponding flags for cell of supplied index\n        \"\"\"\nif not index.isValid():\nreturn constants.DROP_ENABLED\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nitem = self.data_by_index(index)\nmatch role:\ncase constants.DECORATION_ROLE:\nif fn := self.DECORATIONS.get(index.column()):\nreturn fn(item)\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE:\nif fn := self.LABELS.get(index.column()):\nreturn fn(item)\ncase constants.TOOLTIP_ROLE:\nif fn := self.TOOLTIPS.get(index.column()):\nreturn fn(item)\ncase constants.CHECKSTATE_ROLE:\nif fn := self.CHECKSTATE.get(index.column()):\nreturn fn(item)\ncase constants.USER_ROLE:\nreturn item\ncase _:\nreturn None\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif role == constants.EDIT_ROLE:\nif not value:\nreturn False\nitem = self.data_by_index(index)\nif fn := self.SET_DATA.get(index.column()):\nfn(item, value)\nself.update_row(index.row())\nreturn True\n</code></pre> Name Children Inherits NestedModelprettyqt.itemmodels.nestedmodel <ul><li>ListMixin</li><li>ModelMixin</li><li>AbstractItemModel</li></ul>"},{"location":"additional_modules/itemmodels/ModelMixin.html#prettyqt.itemmodels.modelmixin.ModelMixin.flags","title":"<code>flags(index: core.ModelIndex) -&gt; constants.ItemFlag</code>","text":"<p>Override for AbstractitemModel base method.</p> <p>returns corresponding flags for cell of supplied index</p> Source code in <code>prettyqt\\itemmodels\\modelmixin.py</code> <pre><code>def flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\n\"\"\"Override for AbstractitemModel base method.\n    returns corresponding flags for cell of supplied index\n    \"\"\"\nif not index.isValid():\nreturn constants.DROP_ENABLED\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\n</code></pre>"},{"location":"additional_modules/itemmodels/ModelMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256732832[\"itemmodels.ModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103256732832</code></pre>"},{"location":"additional_modules/itemmodels/ModuleInfoModel.html","title":"ModuleInfoModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ModuleInfoModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.TreeModel</code></p> <p>Tree Model to display a module hierarchy (using pkgutil).</p> Source code in <code>prettyqt\\itemmodels\\moduleinfomodel.py</code> <pre><code>class ModuleInfoModel(itemmodels.TreeModel):\n\"\"\"Tree Model to display a module hierarchy (using pkgutil).\"\"\"\nHEADER = [\"Name\", \"Path\", \"Is Package\"]\nSUPPORTS = str | os.PathLike | types.ModuleType | pkgutil.ModuleInfo\ndef __init__(self, obj, **kwargs):\nmatch obj:\ncase str() | os.PathLike():\npath = pathlib.Path(obj)\nobj = pkgutil.ModuleInfo(\nmodule_finder=machinery.FileFinder(str(path.parent)),\nname=path.name,\nispkg=True,\n)\ncase types.ModuleType():\npath = pathlib.Path(obj)\nobj = pkgutil.ModuleInfo(\nmodule_finder=machinery.FileFinder(str(path.parent)),\nname=path.name,\nispkg=True,\n)\ncase pkgutil.ModuleInfo():\npass\ncase _:\nraise TypeError(obj)\nsuper().__init__(obj, **kwargs)\n@core.Enum\nclass Roles(enum.IntEnum):\nModuleInfoRole = constants.USER_ROLE + 2\ndef columnCount(self, parent=None):\nreturn len(self.HEADER)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role, section:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE, _:\nreturn self.HEADER[section]\nreturn None\ndef data(self, index: core.ModelIndex, role=constants.DISPLAY_ROLE):\nif not index.isValid():\nreturn None\ninfo = self.data_by_index(index).obj\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn info.name\ncase constants.DISPLAY_ROLE, 1:\nreturn str(info.module_finder.path)\ncase constants.CHECKSTATE_ROLE, 2:\nreturn self.to_checkstate(info.ispkg)\ncase self.Roles.ModuleInfoRole:\nreturn info\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, pkgutil.ModuleInfo | types.ModuleType)\ndef _fetch_object_children(\nself, item: ModuleInfoModel.TreeItem\n) -&gt; list[ModuleInfoModel.TreeItem]:\nreturn [\nself.TreeItem(obj=i)\nfor i in pkgutil.iter_modules(\n[f\"{item.obj.module_finder.path}\\\\{item.obj.name}\"]\n)\n]\ndef _has_children(self, item: ModuleInfoModel.TreeItem) -&gt; bool:\npath = [f\"{item.obj.module_finder.path}\\\\{item.obj.name}\"]\nreturn any(pkgutil.iter_modules(path))\n</code></pre>"},{"location":"additional_modules/itemmodels/ModuleInfoModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256804832[\"itemmodels.ModuleInfoModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254308688 --&gt; 2103256804832\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>str | os.PathLike | module | pkgutil.ModuleInfo</code></p>"},{"location":"additional_modules/itemmodels/ModuleInfoModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/MultiColumnFilterProxyModel.html","title":"MultiColumnFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/MultiColumnFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A SortFilterProxyModel which filters based on multiple columns in one go.</p> <p>This proxy uses seperate search term / values for each column in order to filter the source model, thus avoiding to layer proxy models in case you want to filter based on several columns. That way it is less demanding since filtering for all columns is done in one go.</p>"},{"location":"additional_modules/itemmodels/MultiColumnFilterProxyModel.html#prettyqt.itemmodels.MultiColumnFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = itemmodels.MultiColumnFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\multicolumnfilterproxymodel.py</code> <pre><code>class MultiColumnFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A SortFilterProxyModel which filters based on multiple columns in one go.\n    This proxy uses seperate search term / values for each column in order to filter\n    the source model, thus avoiding to layer proxy models in case you want to filter\n    based on several columns. That way it is less demanding since filtering\n    for all columns is done in one go.\n    ### Example\n    ```py\n    proxy = itemmodels.MultiColumnFilterProxyModel()\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"multi_column_filter\"\ndef __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: dict[int, Filter] = {}\nself.setRecursiveFilteringEnabled(True)\ndef clear_filters(self):\nself._filters = {}\nself.invalidateRowsFilter()\ndef set_filter_value(\nself,\ncolumn: int,\nvalue: str,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif value == \"\" or value is None:  # False is a valid value.\ndel self._filters[column]\nelse:\nself._filters[column] = Filter(column=column, value=value, role=role)\nself.invalidateRowsFilter()\ndef setFilterKeyColumn(self, column: int):\nraise NotImplementedError(\"Not supported.\")\ndef setFilterRole(self, column: int):\nraise NotImplementedError(\"Not supported.\")\ndef filterAcceptsRow(self, row, parent):\nsource = self.sourceModel()\nfor k, v in self._filters.items():\nindex = source.index(row, k, parent)\ndata = source.data(index, v.role)\nsearch_val = v.value\nmatch search_val:\ncase str():\nsearch_val = str(search_val)\ndata = str(data)\nif self.filterMode == \"fuzzy\" and not fuzzy.fuzzy_match_simple(\nsearch_val,\ndata,\ncase_sensitive=self.is_filter_case_sensitive(),\n):\nreturn False\nif not self.is_filter_case_sensitive():\nsearch_val = search_val.lower()\ndata = data.lower()\nif not data.startswith(search_val):\nreturn False\ncase Callable():\nreturn search_val(data)\ncase _:\nif data != search_val:\nreturn False\nreturn True\n</code></pre>"},{"location":"additional_modules/itemmodels/MultiColumnFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256637792[\"itemmodels.MultiColumnFilterProxyModel\"]\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254426768 --&gt; 2103256637792\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/MultiColumnFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering"},{"location":"additional_modules/itemmodels/NestedItem.html","title":"NestedItem","text":""},{"location":"additional_modules/itemmodels/NestedItem.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\itemmodels\\nesteditem.py</code> <pre><code>class NestedItem:\nitem_name = \"not_defined\"\ndef __init__(\nself,\nparent: Self | None = None,\ndynamic_name: str | None = None,\ncount: int | None = None,\nchildren: Sequence[Self] | None = None,\n):\nself.parent = parent\nself.dynamic_name = dynamic_name or self.item_name\nself.count = count\n# self.timestamp = kwargs.pop(\"timestamp\", time.time())\nself.children: Sequence[Self] = []\nif children:\nself.add_children(children)\ndef __iter__(self) -&gt; Iterator[Self]:\nreturn iter(self.children)\ndef add_children(self, children: Sequence[Self]):\nfor child in children:\nchild.parent = self\nself.children.extend(children)\ndef append_child(self, item: Self):\nitem.parent_item = self\nself.children.append(item)\ndef insert_children(self, idx: int, items: Sequence[Self]):\nself.children[idx:idx] = items\nfor item in items:\nitem.parent_item = self\ndef child(self, row: int) -&gt; Self:\nreturn self.children[row]\ndef row(self) -&gt; int:\n\"\"\"Return row number.\n        returns row position of item inside parent`s children\n        returns 0 if no parent available\n        Returns:\n            row number\n        \"\"\"\nreturn self.parent.children.index(self) if self.parent else 0\ndef iter_tree(\nself,\nname: str | None = None,\nyield_self: bool = True,\nrecursive: bool = True,\nlevel: int = 0,\ncount: int = 0,\nassign_names: bool = True,\n):\n\"\"\"Yield children from bottom to top, yield self at end.\n        assigns dynamic vars count, level and dynamic name\n        \"\"\"\nif name is None:\nname = self.item_name\nfor i, c in enumerate(self.children, start=1):\ncount += 1\nlevel += 1\nwith_suffix = f\"{name}_{i}\" if len(self.children) &gt; 1 else name\nif recursive:\nyield from c.iter_tree(\nwith_suffix, yield_self=False, level=level, count=count\n)\nif assign_names:\nc.dynamic_name, c.count = with_suffix, count\nyield c\nlevel -= 1\nif yield_self:\nif assign_names:\nself.dynamic_name, self.count = name, 0\nyield self\n</code></pre>"},{"location":"additional_modules/itemmodels/NestedItem.html#prettyqt.itemmodels.nesteditem.NestedItem.iter_tree","title":"<code>iter_tree(name: str | None = None, yield_self: bool = True, recursive: bool = True, level: int = 0, count: int = 0, assign_names: bool = True)</code>","text":"<p>Yield children from bottom to top, yield self at end.</p> <p>assigns dynamic vars count, level and dynamic name</p> Source code in <code>prettyqt\\itemmodels\\nesteditem.py</code> <pre><code>def iter_tree(\nself,\nname: str | None = None,\nyield_self: bool = True,\nrecursive: bool = True,\nlevel: int = 0,\ncount: int = 0,\nassign_names: bool = True,\n):\n\"\"\"Yield children from bottom to top, yield self at end.\n    assigns dynamic vars count, level and dynamic name\n    \"\"\"\nif name is None:\nname = self.item_name\nfor i, c in enumerate(self.children, start=1):\ncount += 1\nlevel += 1\nwith_suffix = f\"{name}_{i}\" if len(self.children) &gt; 1 else name\nif recursive:\nyield from c.iter_tree(\nwith_suffix, yield_self=False, level=level, count=count\n)\nif assign_names:\nc.dynamic_name, c.count = with_suffix, count\nyield c\nlevel -= 1\nif yield_self:\nif assign_names:\nself.dynamic_name, self.count = name, 0\nyield self\n</code></pre>"},{"location":"additional_modules/itemmodels/NestedItem.html#prettyqt.itemmodels.nesteditem.NestedItem.row","title":"<code>row() -&gt; int</code>","text":"<p>Return row number.</p> <p>returns row position of item inside parent`s children returns 0 if no parent available</p> Source code in <code>prettyqt\\itemmodels\\nesteditem.py</code> <pre><code>def row(self) -&gt; int:\n\"\"\"Return row number.\n    returns row position of item inside parent`s children\n    returns 0 if no parent available\n    Returns:\n        row number\n    \"\"\"\nreturn self.parent.children.index(self) if self.parent else 0\n</code></pre>"},{"location":"additional_modules/itemmodels/NestedItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256736672[\"itemmodels.NestedItem\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103256736672</code></pre>"},{"location":"additional_modules/itemmodels/NestedModel.html","title":"NestedModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/NestedModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ListMixin</code>, <code>itemmodels.ModelMixin</code>, <code>core.AbstractItemModel</code></p> Source code in <code>prettyqt\\itemmodels\\nestedmodel.py</code> <pre><code>class NestedModel(  # type: ignore\nitemmodels.ListMixin, itemmodels.ModelMixin, core.AbstractItemModel\n):\nDEFAULT_FLAGS = (\nconstants.DRAG_ENABLED  # type: ignore\n| constants.IS_ENABLED\n| constants.IS_SELECTABLE\n)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.root = Root()\nself.items = self.root.children\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn constants.NO_FLAGS\nif index.column() in self.SET_DATA:\nreturn self.DEFAULT_FLAGS | constants.IS_EDITABLE\nreturn self.DEFAULT_FLAGS\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn (\nlen(parent.internalPointer().children)\nif parent.isValid()\nelse len(self.items)\n)\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nif not self.hasIndex(row, column, parent):\nreturn core.ModelIndex()\nparent_item = parent.internalPointer()\nif not parent_item:\nparent_item = self.root\nreturn self.createIndex(row, column, parent_item.children[row])\ndef parent(self, index: core.ModelIndex | None = None) -&gt; core.ModelIndex:\n# hacky way to let the case without any arguments get through.\n# not really nice, a proper dispatch library would be better.\n# functools.singledispatchmethod doesnt work here.\nif index is None:\nreturn super().parent()\nif not index.isValid():\nreturn core.ModelIndex()\nif item := index.internalPointer():\nreturn (\ncore.ModelIndex()\nif item.parent in [self.root, None]\nelse self.createIndex(item.parent.row(), 0, item.parent)\n)\nelse:\nreturn core.ModelIndex()\ndef data_by_index(self, index):\nreturn index.internalPointer()\ndef json(self, root=None) -&gt; dict:\n\"\"\"Serialise model as JSON-compliant dictionary.\n        Arguments:\n            root (JsonTreeItem, optional): Serialise from here\n                defaults to the the top-level item\n        Returns:\n            model as dict\n        \"\"\"\nroot = root or self.root\nreturn root.as_json()\n</code></pre>"},{"location":"additional_modules/itemmodels/NestedModel.html#prettyqt.itemmodels.nestedmodel.NestedModel.json","title":"<code>json(root = None) -&gt; dict</code>","text":"<p>Serialise model as JSON-compliant dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>JsonTreeItem</code> <p>Serialise from here defaults to the the top-level item</p> <code>None</code> Source code in <code>prettyqt\\itemmodels\\nestedmodel.py</code> <pre><code>def json(self, root=None) -&gt; dict:\n\"\"\"Serialise model as JSON-compliant dictionary.\n    Arguments:\n        root (JsonTreeItem, optional): Serialise from here\n            defaults to the the top-level item\n    Returns:\n        model as dict\n    \"\"\"\nroot = root or self.root\nreturn root.as_json()\n</code></pre>"},{"location":"additional_modules/itemmodels/NestedModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256734752[\"itemmodels.NestedModel\"]\n  2103254425808[\"itemmodels.ListMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103256732832[\"itemmodels.ModelMixin\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254425808 --&gt; 2103256734752\n  140736120080256 --&gt; 2103254425808\n  2103256732832 --&gt; 2103256734752\n  140736120080256 --&gt; 2103256732832\n  2103254405648 --&gt; 2103256734752\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/NestedModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/ParentClassTreeModel.html","title":"ParentClassTreeModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ParentClassTreeModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseClassTreeModel</code></p> <p>Tree model to display the parent class tree of a python class.</p> <p>Class hierarchy example</p> Parentclass treeMRO tree <pre><code>from prettyqt import itemmodels, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = itemmodels.ParentClassTreeModel(widgets.TreeWidget)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> </p> <pre><code>from prettyqt import itemmodels, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = itemmodels.ParentClassTreeModel(widgets.TreeWidget, mro=True)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p> </p> Source code in <code>prettyqt\\itemmodels\\classtreemodel.py</code> <pre><code>class ParentClassTreeModel(BaseClassTreeModel):\n\"\"\"Tree model to display the parent class tree of a python class.\n    !!! Example \"Class hierarchy example\"\n        === \"Parentclass tree\"\n            ```py\n            from prettyqt import itemmodels, widgets\n            app = widgets.app()\n            widget = widgets.TreeView()\n            model = itemmodels.ParentClassTreeModel(widgets.TreeWidget)\n            widget.set_model(model)\n            widget.show()\n            ```\n            &lt;figure markdown&gt;\n              ![Image title](treewidget_parentclasses.png)\n            &lt;/figure&gt;\n        === \"MRO tree\"\n            ```py\n            from prettyqt import itemmodels, widgets\n            app = widgets.app()\n            widget = widgets.TreeView()\n            model = itemmodels.ParentClassTreeModel(widgets.TreeWidget, mro=True)\n            widget.set_model(model)\n            widget.show()\n            ```\n            &lt;figure markdown&gt;\n              ![Image title](treewidget_mro.png)\n            &lt;/figure&gt;\n    \"\"\"\nSUPPORTS = type\ndef __init__(self, *args, **kwargs):\nself._show_mro = False\nsuper().__init__(*args, **kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, type)\ndef _fetch_object_children(\nself, item: ParentClassTreeModel.TreeItem\n) -&gt; list[ParentClassTreeModel.TreeItem]:\nif self._show_mro:\nreturn [self.TreeItem(obj=i) for i in item.obj.mro()[1:]]\nelse:\nreturn [self.TreeItem(obj=i) for i in item.obj.__bases__]\ndef _has_children(self, item: ParentClassTreeModel.TreeItem) -&gt; bool:\nif item.obj is None:\nreturn False\nreturn len(item.obj.__bases__) &gt; 0\ndef set_show_mro(self, show: bool):\n\"\"\"Toggles mro mode on or off.\n        Arguments:\n            show: toggle mro mode on/off\n        \"\"\"\nself._show_mro = show\ndef get_show_mro(self) -&gt; bool:\n\"\"\"Returns True if mro mode is turned on.\"\"\"\nreturn self._show_mro\nshow_mro = core.Property(\nbool,\nget_show_mro,\nset_show_mro,\ndoc=\"Whether children items should be the ordered mro.\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/ParentClassTreeModel.html#prettyqt.itemmodels.classtreemodel.ParentClassTreeModel.get_show_mro","title":"<code>get_show_mro() -&gt; bool</code>","text":"<p>Returns True if mro mode is turned on.</p> Source code in <code>prettyqt\\itemmodels\\classtreemodel.py</code> <pre><code>def get_show_mro(self) -&gt; bool:\n\"\"\"Returns True if mro mode is turned on.\"\"\"\nreturn self._show_mro\n</code></pre>"},{"location":"additional_modules/itemmodels/ParentClassTreeModel.html#prettyqt.itemmodels.classtreemodel.ParentClassTreeModel.set_show_mro","title":"<code>set_show_mro(show: bool)</code>","text":"<p>Toggles mro mode on or off.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>toggle mro mode on/off</p> required Source code in <code>prettyqt\\itemmodels\\classtreemodel.py</code> <pre><code>def set_show_mro(self, show: bool):\n\"\"\"Toggles mro mode on or off.\n    Arguments:\n        show: toggle mro mode on/off\n    \"\"\"\nself._show_mro = show\n</code></pre>"},{"location":"additional_modules/itemmodels/ParentClassTreeModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256792352[\"itemmodels.ParentClassTreeModel\"]\n  2103256788512[\"itemmodels.BaseClassTreeModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256788512 --&gt; 2103256792352\n  2103254308688 --&gt; 2103256788512\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'type'&gt;</code></p>"},{"location":"additional_modules/itemmodels/ParentClassTreeModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>show_mro</code> bool Whether children items should be the ordered mro."},{"location":"additional_modules/itemmodels/PredicateFilterProxyModel.html","title":"PredicateFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/PredicateFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A simple filter proxy model with settable filter predicates.</p>"},{"location":"additional_modules/itemmodels/PredicateFilterProxyModel.html#prettyqt.itemmodels.PredicateFilterProxyModel--example","title":"Example:","text":"<pre><code>proxy = PredicateFilterProxyModel()\nproxy.add_filter(lambda value: value &lt; 1)\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\predicatefilterproxymodel.py</code> <pre><code>class PredicateFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A simple filter proxy model with settable filter predicates.\n    ### Example:\n    ```py\n    proxy = PredicateFilterProxyModel()\n    proxy.add_filter(lambda value: value &lt; 1)\n    ```\n    \"\"\"\nID = \"predicate_filter\"\ndef __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: list[Callable[[Any], bool]] = []\ndef clear_filters(self):\nself._filters = []\nself.invalidateFilter()\ndef add_filter(self, predicate: Callable[[Any], bool]):\nself._filters.append(predicate)\nself.invalidateFilter()\ndef filterAcceptsRow(self, row, parent):\nsource = self.sourceModel()\ncol = self.filterKeyColumn()\nrole = self.filterRole()\nindex = source.index(row, col, parent)\ndata = source.data(index, role)\ndef apply(f: Callable):\ntry:\nreturn f(data)\nexcept (TypeError, ValueError):\nreturn False\nreturn all(apply(f) for f in self._filters)\n</code></pre>"},{"location":"additional_modules/itemmodels/PredicateFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256653152[\"itemmodels.PredicateFilterProxyModel\"]\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254426768 --&gt; 2103256653152\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/PredicateFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering"},{"location":"additional_modules/itemmodels/ProxyMapper.html","title":"ProxyMapper","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ProxyMapper.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.Object</code></p> <p>Class to map indexes / ItemSelections from one proxy to another.</p> <p>Also handles cases like: <pre><code>            Root model\n                |\n           shared proxy\n           /                      Proxy_1_1     Proxy_2_1\n          |            |\n        Proxy_1_2     Proxy_2_2\n</code></pre> When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then mapFromSource / mapSelectionFromSource to get down to 2_2.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>class ProxyMapper(core.Object):\n\"\"\"Class to map indexes / ItemSelections from one proxy to another.\n    Also handles cases like:\n    ```\n                Root model\n                    |\n               shared proxy\n               /          \\\n            Proxy_1_1     Proxy_2_1\n              |            |\n            Proxy_1_2     Proxy_2_2\n    ```\n    When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here),\n    use mapToSource / mapSelectionFromSource until it gets there,\n    and then mapFromSource / mapSelectionFromSource to get down to 2_2.\n    \"\"\"\ndef __init__(\nself,\n*proxies: core.QAbstractItemModel,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nchains = [get_proxy_chain(proxy) for proxy in proxies]\ncommon_list = [\nelement\nfor element in chains[0]\nif all(element in sublist for sublist in chains[1:])\n]\nif not common_list:\nraise RuntimeError(\"No common source model\")\ncommon_source = common_list[0]\nlogger.debug(f\"Common source: {common_source}\")\nself._chains = [chain[: chain.index(common_source)] for chain in chains]\ndef map_index(\nself, source: int, target: int, index: core.ModelIndex\n) -&gt; core.ModelIndex:\n\"\"\"Map index from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nindex = model.mapToSource(index)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nindex = model.mapFromSource(index)\nreturn index\ndef map_selection(\nself, source: int, target: int, selection: core.QItemSelection\n) -&gt; core.QItemSelection:\n\"\"\"Map selection from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nselection = model.mapSelectionToSource(selection)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nselection = model.mapSelectionFromSource(selection)\nreturn selection\n</code></pre>"},{"location":"additional_modules/itemmodels/ProxyMapper.html#prettyqt.itemmodels.proxies.proxymapper.ProxyMapper.map_index","title":"<code>map_index(source: int, target: int, index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source to target.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>def map_index(\nself, source: int, target: int, index: core.ModelIndex\n) -&gt; core.ModelIndex:\n\"\"\"Map index from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nindex = model.mapToSource(index)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nindex = model.mapFromSource(index)\nreturn index\n</code></pre>"},{"location":"additional_modules/itemmodels/ProxyMapper.html#prettyqt.itemmodels.proxies.proxymapper.ProxyMapper.map_selection","title":"<code>map_selection(source: int, target: int, selection: core.QItemSelection) -&gt; core.QItemSelection</code>","text":"<p>Map selection from source to target.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>def map_selection(\nself, source: int, target: int, selection: core.QItemSelection\n) -&gt; core.QItemSelection:\n\"\"\"Map selection from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nselection = model.mapSelectionToSource(selection)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nselection = model.mapSelectionFromSource(selection)\nreturn selection\n</code></pre>"},{"location":"additional_modules/itemmodels/ProxyMapper.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256656992[\"itemmodels.ProxyMapper\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255068432 --&gt; 2103256656992\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ProxyMapper.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/PythonObjectTreeModel.html","title":"PythonObjectTreeModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/PythonObjectTreeModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnItemModel</code></p> Source code in <code>prettyqt\\itemmodels\\pythonobjecttreemodel.py</code> <pre><code>class PythonObjectTreeModel(itemmodels.ColumnItemModel):\nTreeItem = PythonObjectTreeItem\nIS_RECURSIVE = True\nICON = \"mdi.python\"\nSUPPORTS = object\nCOLUMNS = [\nNameColumn,\nDescriptionColumn,\nPathColumn,\nStrColumn,\nReprColumn,\nLengthColumn,\nTypeColumn,\nClassColumn,\nIdColumn,\nAttributeColumn,\nIsCallableColumn,\nIsRoutineColumn,\nIsBuiltinColumn,\nPredicateColumn,\nModuleColumn,\n# FileColumn,\n# SourceFileColumn,\n]\ndef __init__(self, obj, parent=None):\nsuper().__init__(obj, self.COLUMNS, show_root=False, parent=parent)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn True\ndef get_path_for_index(self, index: core.ModelIndex) -&gt; str:\n\"\"\"Get the path for the object referenced by index.\n        ### Example:\n        ```\n        An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n        ```\n        \"\"\"\n# TODO: not used yet, better rework ColumnItemModel first\ntreeitem = index.data(constants.USER_ROLE)\nif treeitem is None:\nreturn\nprev_data = treeitem.obj\npieces = []\nwhile (index := index.parent()).isValid():\ntreeitem = index.data(constants.USER_ROLE)\ndata = treeitem.obj\nmatch data:\ncase Mapping():\nfor k, v in data.items():\nif v is prev_data:\npieces.append(f\"[{k!r}]\")\nbreak\ncase Iterable():\npieces.append(f\"[{data.index(prev_data)}]\")\ncase _:\n# or should this be treeitem.obj_name?\npieces.append(f\".{prev_data.__name__}\")\nprev_data = data\npieces.append(treeitem.obj_name)\nlogger.info(pieces)\nreturn \"\".join(reversed(pieces))\ndef _fetch_object_children(\nself, treeitem: PythonObjectTreeItem\n) -&gt; list[PythonObjectTreeItem]:\n\"\"\"Fetch the children of a Python object.\n        Returns: list of PythonObjectTreeItems\n        \"\"\"\nobj_children = []\npath_strings = []\nobj = treeitem.obj\nobj_path = treeitem.obj_path\nif isinstance(obj, list | tuple | set | frozenset):\nobj_children = [(str(i), j) for i, j in sorted(enumerate(obj))]\npath_strings = [\nf\"{obj_path}[{i[0]}]\" if obj_path else i[0] for i in obj_children\n]\nelif isinstance(obj, Mapping):\nobj_children = list(obj.items())\npath_strings = [\nf\"{obj_path}[{item[0]!r}]\" if obj_path else item[0]\nfor item in obj_children\n]\nis_attr_list = [False] * len(obj_children)\n# Object attributes\nfor attr_name, attr_value in sorted(inspect.getmembers(obj)):\nobj_children.append((attr_name, attr_value))\npath_strings.append(f\"{obj_path}.{attr_name}\" if obj_path else attr_name)\nis_attr_list.append(True)\nreturn [\nPythonObjectTreeItem(obj=val, name=name, obj_path=p, is_attribute=is_attr)\nfor (name, val), p, is_attr in zip(obj_children, path_strings, is_attr_list)\n]\ndef _aux_refresh_tree(self, tree_index: core.ModelIndex):\n\"\"\"Refresh the tree nodes recursively, auxiliary.\n        If the underlying Python object has been changed, we don't want to delete the old\n        tree model and create a new one from scratch because this loses all information\n        about which nodes are fetched and expanded. Instead the old tree model is updated.\n        Using the difflib from the standard library it is determined for a parent node\n        which child nodes should be added or removed. This is done based on the node names\n        only, not on the node contents (the underlying Python objects). Testing the\n        underlying nodes for equality is potentially slow. It is faster to let the\n        refreshNode function emit the dataChanged signal for all cells.\n        \"\"\"\ntree_item = self.data_by_index(tree_index)\nif not tree_item.children_fetched:\nreturn None\nold_items = tree_item.children\nnew_items = self._fetch_object_children(tree_item)\nold_item_names = [(item.obj_name, item.is_attribute) for item in old_items]\nnew_item_names = [(item.obj_name, item.is_attribute) for item in new_items]\nseq_matcher = SequenceMatcher(\nisjunk=None, a=old_item_names, b=new_item_names, autojunk=False\n)\nopcodes = seq_matcher.get_opcodes()\nlogger.debug(\"(reversed) opcodes: %s\", list(reversed(opcodes)))\nfor tag, i1, i2, j1, j2 in reversed(opcodes):\nmatch tag:\ncase \"equal\":\n# when node names are equal is aux_refresh_tree called recursively.\nfor old_row, new_row in zip(range(i1, i2), range(j1, j2)):\nold_items[old_row].obj = new_items[new_row].obj\nchild_index = self.index(old_row, 0, parent=tree_index)\nself._aux_refresh_tree(child_index)\ncase \"replace\":\n# Remove the old item and insert the new. The old item may have child\n# nodes which indices must be removed by Qt, otherwise it crashes.\nfirst = i1  # row number of first that will be removed\nlast = i1 + i2 - 1  # row number of last element after insertion\nwith self.remove_rows(first, last, tree_index):\ndel tree_item.children[i1:i2]\nfirst = i1  # row number of first element after insertion\nlast = i1 + j2 - j1 - 1  # row number of last element after insertion\nwith self.insert_rows(first, last, tree_index):\ntree_item.insert_children(i1, new_items[j1:j2])\ncase \"delete\":\nfirst = i1  # row number of first that will be removed\nlast = i1 + i2 - 1  # row number of last element after insertion\nwith self.remove_rows(first, last, tree_index):\ndel tree_item.children[i1:i2]\ncase \"insert\":\nfirst = i1\nlast = i1 + j2 - j1 - 1\nwith self.insert_rows(first, last, tree_index):\ntree_item.insert_children(i1, new_items[j1:j2])\ncase _:\nraise ValueError(f\"Invalid tag: {tag}\")\ndef refresh_tree(self):\nif self._show_root:\nindex = self.createIndex(0, 0, self.inspected_item)\nelse:\nindex = self.root_index()\n\"\"\"Refresh the tree model from the underlying root object.\"\"\"\nself._aux_refresh_tree(index)\n# Emit the dataChanged signal for all cells. This is faster than checking which\n# nodes have changed, which may be slow for some underlying Python objects.\nself.update_all()\n</code></pre>"},{"location":"additional_modules/itemmodels/PythonObjectTreeModel.html#prettyqt.itemmodels.pythonobjecttreemodel.PythonObjectTreeModel.get_path_for_index","title":"<code>get_path_for_index(index: core.ModelIndex) -&gt; str</code>","text":"<p>Get the path for the object referenced by index.</p>"},{"location":"additional_modules/itemmodels/PythonObjectTreeModel.html#prettyqt.itemmodels.pythonobjecttreemodel.PythonObjectTreeModel.get_path_for_index--example","title":"Example:","text":"<pre><code>An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n</code></pre> Source code in <code>prettyqt\\itemmodels\\pythonobjecttreemodel.py</code> <pre><code>def get_path_for_index(self, index: core.ModelIndex) -&gt; str:\n\"\"\"Get the path for the object referenced by index.\n    ### Example:\n    ```\n    An.example = {\"a\": [b, c, {\"d\": e}]} -&gt; path of e: An.example[\"a\"][2][\"d\"]\n    ```\n    \"\"\"\n# TODO: not used yet, better rework ColumnItemModel first\ntreeitem = index.data(constants.USER_ROLE)\nif treeitem is None:\nreturn\nprev_data = treeitem.obj\npieces = []\nwhile (index := index.parent()).isValid():\ntreeitem = index.data(constants.USER_ROLE)\ndata = treeitem.obj\nmatch data:\ncase Mapping():\nfor k, v in data.items():\nif v is prev_data:\npieces.append(f\"[{k!r}]\")\nbreak\ncase Iterable():\npieces.append(f\"[{data.index(prev_data)}]\")\ncase _:\n# or should this be treeitem.obj_name?\npieces.append(f\".{prev_data.__name__}\")\nprev_data = data\npieces.append(treeitem.obj_name)\nlogger.info(pieces)\nreturn \"\".join(reversed(pieces))\n</code></pre>"},{"location":"additional_modules/itemmodels/PythonObjectTreeModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256848992[\"itemmodels.PythonObjectTreeModel\"]\n  2103256730912[\"itemmodels.ColumnItemModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256730912 --&gt; 2103256848992\n  2103256729952 --&gt; 2103256730912\n  140736120080256 --&gt; 2103256729952\n  2103254308688 --&gt; 2103256730912\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Warning</p> <p>Model can be recursive, so be careful with iterating whole tree.</p> <p>Info</p> <p>Supported data type: <code>&lt;class 'object'&gt;</code></p>"},{"location":"additional_modules/itemmodels/PythonObjectTreeModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/QObjectPropertiesModel.html","title":"QObjectPropertiesModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/QObjectPropertiesModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\qobjectpropertiesmodel.py</code> <pre><code>class QObjectPropertiesModel(core.AbstractTableModel):\nHEADER = [\n\"Property name\",\n\"Value\",\n\"Type\",\n\"User property\",\n\"Readable\",\n\"Writable\",\n\"Resettable\",\n\"Bindable\",\n\"Designable\",\n\"Constant\",\n\"Final\",\n\"Required\",\n\"Valid\",\n\"Stored\",\n\"Notifier\",\n\"User Type\",\n# \"Enumerator\",\n]\nSUPPORTS = core.QObject\ndef __init__(self, qobject: core.QObject, **kwargs):\nself._qobject = qobject\nself._metaobj = core.MetaObject(self._qobject.metaObject())\nsuper().__init__(**kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, core.QObject)\ndef set_qobject(self, qobject):\nwith self.reset_model():\nself._qobject = qobject\nself._metaobj = core.MetaObject(self._qobject.metaObject())\ndef columnCount(self, parent=None) -&gt; int:\nreturn len(self.HEADER)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[section]\ncase constants.VERTICAL, constants.DISPLAY_ROLE:\nprop = self._metaobj.get_property(section)\nreturn prop.propertyIndex()\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nprop = self._metaobj.get_property(index.row())\nmatch role, index.column():\ncase constants.BACKGROUND_ROLE, _:\nreturn QtGui.QColor(\"lightblue\") if prop.isUser() else None\ncase constants.DISPLAY_ROLE, 0:\nreturn prop.name()\ncase constants.FONT_ROLE, 0:\nfont = QtGui.QFont()\nfont.setBold(True)\nreturn font\ncase constants.DISPLAY_ROLE | constants.EDIT_ROLE, 1:\nreturn prop.read(self._qobject)\ncase constants.DISPLAY_ROLE, 2:\nreturn prop.get_meta_type().get_name()\ncase constants.FONT_ROLE, 2:\nfont = QtGui.QFont()\nfont.setItalic(True)\nreturn font\ncase constants.CHECKSTATE_ROLE, 3:\nreturn self.to_checkstate(prop.isUser())\ncase constants.CHECKSTATE_ROLE, 4:\nreturn self.to_checkstate(prop.isReadable())\ncase constants.CHECKSTATE_ROLE, 5:\nreturn self.to_checkstate(prop.isWritable())\ncase constants.CHECKSTATE_ROLE, 6:\nreturn self.to_checkstate(prop.isResettable())\ncase constants.CHECKSTATE_ROLE, 7:\nreturn self.to_checkstate(prop.isBindable())\ncase constants.CHECKSTATE_ROLE, 8:\nreturn self.to_checkstate(prop.isDesignable())\ncase constants.CHECKSTATE_ROLE, 9:\nreturn self.to_checkstate(prop.isConstant())\ncase constants.CHECKSTATE_ROLE, 10:\nreturn self.to_checkstate(prop.isFinal())\ncase constants.CHECKSTATE_ROLE, 11:\nreturn self.to_checkstate(prop.isRequired())\ncase constants.CHECKSTATE_ROLE, 12:\nreturn self.to_checkstate(prop.isValid())\ncase constants.CHECKSTATE_ROLE, 13:\nreturn self.to_checkstate(prop.isStored())\ncase constants.DISPLAY_ROLE, 14:\nnotifier = prop.get_notify_signal()\nreturn \"\" if notifier is None else notifier.get_name()\ncase constants.DISPLAY_ROLE, 15:\nreturn prop.userType()\n# case constants.DISPLAY_ROLE, 8:\n#     enumerator = prop.get_enumerator()\n#     return \"\" if enumerator is None else enumerator.get_name()\ncase constants.USER_ROLE, _:\nreturn prop.read(self._qobject)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nprop = self._metaobj.get_property(index.row())\nmatch role, index.column():\ncase constants.USER_ROLE | constants.EDIT_ROLE, _:\nprop.write(self._qobject, value)\nself.update_row(index.row())\nreturn True\nreturn False\ndef rowCount(self, parent: core.QModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else self._metaobj.propertyCount()\ndef flags(self, index: core.QModelIndex) -&gt; constants.ItemFlag:\nprop = self._metaobj.get_property(index.row())\nif index.column() == 1 and prop.isWritable():\nreturn super().flags(index) | constants.IS_EDITABLE\nreturn super().flags(index)\n</code></pre>"},{"location":"additional_modules/itemmodels/QObjectPropertiesModel.html#prettyqt.itemmodels.qobjectpropertiesmodel.QObjectPropertiesModel.rowCount","title":"<code>rowCount(parent: core.QModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\itemmodels\\qobjectpropertiesmodel.py</code> <pre><code>def rowCount(self, parent: core.QModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else self._metaobj.propertyCount()\n</code></pre>"},{"location":"additional_modules/itemmodels/QObjectPropertiesModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256890272[\"itemmodels.QObjectPropertiesModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254409488 --&gt; 2103256890272\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'PySide6.QtCore.QObject'&gt;</code></p>"},{"location":"additional_modules/itemmodels/QObjectPropertiesModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/RangeFilterProxyModel.html","title":"RangeFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/RangeFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\rangefilterproxymodel.py</code> <pre><code>class RangeFilterProxyModel(core.SortFilterProxyModel):\nID = \"range_filter\"\ndef __init__(self, min_value=None, max_value=None, **kwargs):\nself._min_value = min_value\nself._max_value = max_value\nsuper().__init__(**kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.get_range)\ndef filterAcceptsRow(self, source_row: int, parent: core.ModelIndex) -&gt; bool:\ncolumn = self.filterKeyColumn()\nrole = self.filterRole()\nsource_model = self.sourceModel()\nidx = source_model.index(source_row, column, parent)\nvalue = source_model.data(idx, role)\nif self._min_value is not None and value &lt; self._min_value:\nreturn False\nreturn self._max_value is None or value &lt;= self._max_value\ndef set_min_value(self, value: float | int | None):\nself._min_value = value\nself.invalidateRowsFilter()\ndef get_min_value(self) -&gt; float | int:\nif self._min_value is None:\nreturn -float(\"inf\")\nreturn self._min_value\ndef set_max_value(self, value: float | int):\nself._max_value = value\nself.invalidateRowsFilter()\ndef get_max_value(self) -&gt; float | int:\nif self._max_value is None:\nreturn float(\"inf\")\nreturn self._max_value\ndef set_range(self, rng: tuple[float | int | None, float | int | None]):\nself._min_value, self._max_value = rng\nself.invalidateRowsFilter()\ndef get_range(self) -&gt; tuple[float | int | None, float | int | None]:\nreturn (self._min_value, self._max_value)\nmin_value = core.Property(\nfloat,\nget_min_value,\nset_min_value,\ndoc=\"Minimum allowed value\",\n)\nmax_value = core.Property(\nfloat,\nget_max_value,\nset_max_value,\ndoc=\"Maximum allowed value\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/RangeFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256651232[\"itemmodels.RangeFilterProxyModel\"]\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254426768 --&gt; 2103256651232\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/RangeFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering <code>min_value</code> double Minimum allowed value <code>max_value</code> double Maximum allowed value"},{"location":"additional_modules/itemmodels/RegexMatchesModel.html","title":"RegexMatchesModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/RegexMatchesModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\regexmatchesmodel.py</code> <pre><code>class RegexMatchesModel(core.AbstractTableModel):\nHEADER = [\"Start\", \"End\", \"Value\", \"Groups\"]\nSUPPORTS = list[re.Match]\ndef __init__(self, matches: list | None = None, **kwargs):\nsuper().__init__(**kwargs)\nself.matches = matches or []\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (re.Match(), *_):\nreturn True\ncase _:\nreturn False\ndef columnCount(self, parent=None):\nreturn len(self.HEADER)\ndef headerData(  # type: ignore\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self.HEADER[section]\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nitem = self.matches[index.row()]\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn str(item.span()[0])\ncase constants.DISPLAY_ROLE, 1:\nreturn str(item.span()[1])\ncase constants.DISPLAY_ROLE, 2:\nreturn repr(item.group())\ncase constants.DISPLAY_ROLE, 3:\nreturn str(len(item.groups()))\ncase constants.USER_ROLE, _:\nreturn item.span()\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.matches)\n</code></pre>"},{"location":"additional_modules/itemmodels/RegexMatchesModel.html#prettyqt.itemmodels.regexmatchesmodel.RegexMatchesModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\itemmodels\\regexmatchesmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.matches)\n</code></pre>"},{"location":"additional_modules/itemmodels/RegexMatchesModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256735712[\"itemmodels.RegexMatchesModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254409488 --&gt; 2103256735712\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>list[re.Match]</code></p>"},{"location":"additional_modules/itemmodels/RegexMatchesModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>itemmodels</li> <li>BaseFieldsModel</li> <li>SliceIdentityProxyModel</li> <li>ChangeHeadersProxyModel</li> <li>ItemModelResolver</li> <li>ListMixin</li> <li>ActionsModel</li> <li>ColumnTableModel</li> <li>FrameInfoModel</li> <li>SubsetFilterProxyModel</li> <li>ColumnJoinerProxyModel</li> <li>SliceAppearanceProxyModel</li> <li>WidgetHierarchyModel</li> <li>ColumnItem</li> <li>MultiColumnFilterProxyModel</li> <li>SliceCheckableProxyModel</li> <li>AppearanceProxyModel</li> <li>TupleTreeModel</li> <li>DataClassModel</li> <li>BaseDataclassModel</li> <li>MappingModel</li> <li>ValueFilterProxyModel</li> <li>SelectionMixin</li> <li>AstModel</li> <li>PythonObjectTreeModel</li> <li>SliceChangeFlagsProxyModel</li> <li>SubClassTreeModel</li> <li>LogRecordModel</li> <li>SliceMapRoleProxyModel</li> <li>LayoutHierarchyModel</li> <li>SliceColorCategoriesProxyModel</li> <li>SliceValueTransformationProxyModel</li> <li>ImportlibTreeModel</li> <li>LinkedSelectionModel</li> <li>SliceChangeIconSizeProxyModel</li> <li>MeltProxyModel</li> <li>NestedItem</li> <li>QObjectPropertiesModel</li> <li>NestedModel</li> <li>ShortcutsModel</li> <li>SliceHighlightCurrentProxyModel</li> <li>ProxyMapper</li> <li>ModelMixin</li> <li>SliceColorValuesProxyModel</li> <li>TableToListProxyModel</li> <li>HighlightMouseProxyModel</li> <li>XmlModel</li> <li>ColumnItemModel</li> <li>ModelIndexModel</li> <li>ParentClassTreeModel</li> <li>PredicateFilterProxyModel</li> <li>SliceCheckableTreeProxyModel</li> <li>ModuleInfoModel</li> <li>RangeFilterProxyModel</li> <li>FlattenTreeProxyModel</li> <li>FuzzyFilterProxyModel</li> <li>RegexMatchesModel</li> <li>JsonModel</li> <li>SliceFilterProxyModel</li> <li>BaseXmlModel</li> <li>SliceToMarkdownProxyModel</li> <li>StorageInfoModel</li> <li>WidgetsDetailsModel</li> <li>TreeModel</li> <li>ColumnOrderProxyModel</li> <li>SliceDisplayTextProxyModel</li> <li>DataClassFieldsModel</li> </ul>"},{"location":"additional_modules/itemmodels/SelectionMixin.html","title":"SelectionMixin","text":""},{"location":"additional_modules/itemmodels/SelectionMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\itemmodels\\selectionmixin.py</code> <pre><code>class SelectionMixin:\nCHECKSTATE: dict[int, Callable] = {}  # column: identifier\ndataChanged: core.Signal\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.selected = {}\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif not index.isValid():\nreturn False\nelif role == constants.CHECKSTATE_ROLE:\nname = self._get_selection_id(index)\nself.selected[name] = not self.selected[name]\nself.dataChanged.emit(index, index)\nreturn True\nreturn super().setData(index, value, role)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn False\nif role == constants.CHECKSTATE_ROLE and index.column() == 0:\nname = self._get_selection_id(index)\nselected = self.selected.get(name, False)\nif name not in self.selected:\nself.selected[name] = selected\nreturn selected\nreturn super().data(index, role)\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nflags = super().flags(index)\nif index.column() in self.CHECKSTATE:\nreturn flags | constants.IS_CHECKABLE\nreturn flags\ndef _get_selection_id(self, index: core.ModelIndex):\nitem = index.data(constants.USER_ROLE)\nif id_fn := self.CHECKSTATE.get(index.column()):\nreturn id_fn(item)\n</code></pre>"},{"location":"additional_modules/itemmodels/SelectionMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254420048[\"itemmodels.SelectionMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103254420048</code></pre>"},{"location":"additional_modules/itemmodels/ShortcutsModel.html","title":"ShortcutsModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ShortcutsModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\shortcutsmodel.py</code> <pre><code>class ShortcutsModel(itemmodels.ColumnTableModel):\nCOLUMNS = [\nWhatsThisColumn,\nEnabledColumn,\nShortcutColumn,\nAutoRepeatColumn,\nContextColumn,\nParentColumn,\n]\nSUPPORTS = gui.QShortcut\ndef __init__(self, shortcuts: Sequence[gui.QShortcut], parent=None):\nsuper().__init__(shortcuts, self.COLUMNS, parent=parent)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (gui.QShortcut(), *_):\nreturn True\ncase _:\nreturn False\n</code></pre>"},{"location":"additional_modules/itemmodels/ShortcutsModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256888352[\"itemmodels.ShortcutsModel\"]\n  2103256731872[\"itemmodels.ColumnTableModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256731872 --&gt; 2103256888352\n  2103256729952 --&gt; 2103256731872\n  140736120080256 --&gt; 2103256729952\n  2103254409488 --&gt; 2103256731872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'PySide6.QtGui.QShortcut'&gt;</code></p>"},{"location":"additional_modules/itemmodels/ShortcutsModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/SliceAppearanceProxyModel.html","title":"SliceAppearanceProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceAppearanceProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceappearanceproxymodel.py</code> <pre><code>class SliceAppearanceProxyModel(itemmodels.SliceIdentityProxyModel):\nID = \"slice_appearance\"\nICON = \"mdi.palette-outline\"\ndef __init__(\nself,\nforeground: gui.QColor | gui.QBrush | str | None = None,\nbackground: gui.QColor | gui.QBrush | str | None = None,\nfont: str | gui.QFont | None = None,\nalignment: constants.AlignmentFlag | constants.AlignmentStr | None = None,\noverride: bool = True,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._foreground = gui.QColor()\nself.set_foreground(foreground)\nself._background = gui.QColor()\nself.set_background(background)\nself._font = gui.QFont()\nself.set_font(font)\nself._alignment = constants.ALIGN_CENTER_LEFT\nself.set_alignment(alignment)\nself._override = override\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ndata = super().data(index, role)\nif not self.indexer_contains(index):\nreturn data\nif self._override or data is None:\nmatch role:\ncase constants.FOREGROUND_ROLE:\nreturn self._foreground if self._foreground.isValid() else None\ncase constants.BACKGROUND_ROLE:\nreturn self._background if self._background.isValid() else None\ncase constants.FONT_ROLE:\nreturn self._font\ncase constants.ALIGNMENT_ROLE:\nreturn self._alignment\nreturn super().data(index, role)\ndef set_font(self, font: gui.QFont | str | None):\nself._font = gui.QFont(font) if font else gui.QFont()\nself.update_all()\ndef get_font(self) -&gt; gui.QFont:\nreturn self._font or gui.QFont()\ndef set_foreground(self, foreground: datatypes.ColorAndBrushType | None):\nmatch foreground:\ncase None:\nforeground = gui.QColor()\ncase gui.QBrush():\nforeground = foreground.color()\ncase _:\nforeground = colors.get_color(foreground).as_qt()\nself._foreground = foreground\nself.update_all()\ndef get_foreground(self) -&gt; gui.QColor:\nreturn self._foreground\ndef set_background(self, background: datatypes.ColorAndBrushType | None):\nmatch background:\ncase None:\nbackground = gui.QColor()\ncase gui.QBrush():\nbackground = background.color()\ncase _:\nbackground = colors.get_color(background).as_qt()\nself._background = background\nself.update_all()\ndef get_background(self) -&gt; gui.QColor:\nreturn self._background\ndef set_alignment(\nself, alignment: constants.AlignmentFlag | constants.AlignmentStr | None\n):\nmatch alignment:\ncase None:\nalignment = constants.ALIGN_CENTER_LEFT\ncase str() | constants.AlignmentFlag():\nalignment = constants.ALIGNMENTS.get_enum_value(alignment)\nself._alignment = alignment\nself.update_all()\ndef get_alignment(self) -&gt; constants.AlignmentFlag:\nreturn self._alignment\nfont_value = core.Property(\ngui.QFont,\nget_font,\nset_font,\ndoc=\"Font to use for overriding\",\n)\nforeground_value = core.Property(\ngui.QColor,\nget_foreground,\nset_foreground,\ndoc=\"Foreground to use for overriding\",\n)\nbackground_value = core.Property(\ngui.QColor,\nget_background,\nset_background,\ndoc=\"Background to use for overriding\",\n)\nalignment_value = core.Property(\nconstants.AlignmentFlag,\nget_alignment,\nset_alignment,\ndoc=\"Alignment to use for overriding\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceAppearanceProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256889312[\"itemmodels.SliceAppearanceProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256889312\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceAppearanceProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>font_value</code> QFont Font to use for overriding <code>foreground_value</code> QColor Foreground to use for overriding <code>background_value</code> QColor Background to use for overriding <code>alignment_value</code> PySide::PyObjectWrapper Alignment to use for overriding"},{"location":"additional_modules/itemmodels/SliceChangeFlagsProxyModel.html","title":"SliceChangeFlagsProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceChangeFlagsProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to selectively change the ItemFlags of the source model.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicechangeflagsproxymodel.py</code> <pre><code>class SliceChangeFlagsProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to selectively change the ItemFlags of the source model.\"\"\"\nID = \"change_flags\"\nICON = \"mdi.flag\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._flags_to_remove: constants.ItemFlag = constants.ItemFlag(0)\nself._flags_to_add: constants.ItemFlag = constants.ItemFlag(0)\n# def setData(\n#     self,\n#     index: core.ModelIndex,\n#     value: Any,\n#     role: constants.ItemDataRole = constants.EDIT_ROLE,\n# ) -&gt; bool:\n#     if self.indexer.contains(index):\n#         logger.warning(\"Trying to set data on region covered by read-only proxy\")\n#         return False\n#     return super().setData(index, value, role)\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nflags = super().flags(index)\nif self.indexer_contains(index):\nfor flag in self._flags_to_remove:\nflags &amp;= ~flag\nfor flag in self._flags_to_add:\nflags |= flag\nreturn flags\ndef set_flags_to_add(self, flags: constants.ItemFlag):\nwith self.change_layout():\nself._flags_to_add = flags\ndef get_flags_to_add(self) -&gt; constants.ItemFlag:\nreturn self._flags_to_add\ndef set_flags_to_remove(self, flags: constants.ItemFlag):\nwith self.change_layout():\nself._flags_to_remove = flags\ndef get_flags_to_remove(self) -&gt; constants.ItemFlag:\nreturn self._flags_to_remove\nflags_to_add = core.Property(\nconstants.ItemFlag,\nget_flags_to_add,\nset_flags_to_add,\ndoc=\"Flags to set\",\n)\nflags_to_remove = core.Property(\nconstants.ItemFlag,\nget_flags_to_remove,\nset_flags_to_remove,\ndoc=\"Flags to unset\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceChangeFlagsProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256879712[\"itemmodels.SliceChangeFlagsProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256879712\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceChangeFlagsProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>flags_to_add</code> PySide::PyObjectWrapper Flags to set <code>flags_to_remove</code> PySide::PyObjectWrapper Flags to unset"},{"location":"additional_modules/itemmodels/SliceChangeIconSizeProxyModel.html","title":"SliceChangeIconSizeProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceChangeIconSizeProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model which changes the icon size of the Decoration role.</p> <p>Supports QColors, QPixmaps and QIcons in DecorationRole.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicechangeiconsizeproxymodel.py</code> <pre><code>class SliceChangeIconSizeProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model which changes the icon size of the Decoration role.\n    Supports QColors, QPixmaps and QIcons in DecorationRole.\n    \"\"\"\nID = \"change_icon_size\"\nICON = \"mdi.resize\"\ndef __init__(self, size: datatypes.SizeType, **kwargs):\nsuper().__init__(**kwargs)\nself._size = datatypes.to_size(size)\nself._cache = {}\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role == constants.DECORATION_ROLE and self.indexer_contains(index):\noriginal = super().data(index, role)\nmatch original:\ncase gui.QIcon():\nhashed = original.cacheKey()\nif hashed in self._cache:\nreturn self._cache[hashed]\np = original.pixmap(self._size)\nself._cache[hashed] = p\nreturn p\ncase gui.QColor():\nhashed = original.name()\nif hashed in self._cache:\nreturn self._cache[hashed]\np = gui.QPixmap(self._size)\np.fill(original)\nself._cache[hashed] = p\nreturn p\ncase gui.QPixmap():\nhashed = original.cacheKey()\nif hashed in self._cache:\nreturn self._cache[hashed]\np = original.scaled(self._size)\nself._cache[hashed] = p\nreturn p\nreturn super().data(index, role)\ndef set_icon_size(self, size: core.QSize):\nself._cache = {}\nself._size = size\ndef get_icon_size(self) -&gt; core.QSize:\nreturn self._size\nicon_size = core.Property(\ncore.QSize,\nget_icon_size,\nset_icon_size,\ndoc=\"New icon size\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceChangeIconSizeProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256875872[\"itemmodels.SliceChangeIconSizeProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256875872\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceChangeIconSizeProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>icon_size</code> QSize New icon size"},{"location":"additional_modules/itemmodels/SliceCheckableProxyModel.html","title":"SliceCheckableProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceCheckableProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to make a model checkable.</p>"},{"location":"additional_modules/itemmodels/SliceCheckableProxyModel.html#prettyqt.itemmodels.SliceCheckableProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceCheckableProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecheckableproxymodel.py</code> <pre><code>class SliceCheckableProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to make a model checkable.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table.proxifier[::2, 2:].modify(xyz)\n    table.show()\n    # or\n    indexer = (slice(None, None, 2), slice(2, None))\n    proxy = itemmodels.SliceCheckableProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"checkable\"\ncheckstate_changed = core.Signal(core.ModelIndex, bool)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: set[tuple[int, int]] = set()\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn super().flags(index)\nif self.indexer_contains(index):\nreturn super().flags(index) | constants.IS_CHECKABLE\nreturn super().flags(index)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nkey = self.get_index_key(index, include_column=True)\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nreturn key in self._checked\nreturn super().data(index, role)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nkey = self.get_index_key(index, include_column=True)\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nif is_checked := key in self._checked:\nself._checked.remove(key)\nelse:\nself._checked.add(key)\nself.update_row(index.row())\nself.checkstate_changed.emit(index, not is_checked)\nreturn True\nreturn super().setData(index, role)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceCheckableProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256883552[\"itemmodels.SliceCheckableProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256883552\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceCheckableProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy"},{"location":"additional_modules/itemmodels/SliceCheckableTreeProxyModel.html","title":"SliceCheckableTreeProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceCheckableTreeProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to make a tree model checkable.</p> <p>In contrast to SliceCheckableProxyModel, any checkstate change is propagated to parent and child indexes. (child indexes will also get the new checkstate, parent indexes will become partially checked if needed.)</p>"},{"location":"additional_modules/itemmodels/SliceCheckableTreeProxyModel.html#prettyqt.itemmodels.SliceCheckableTreeProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TreeView()\ntable.set_model(model)\ntable.proxifier[:, 0].set_checkable(tree=True)\ntable.show()\n# or\nproxy = itemmodels.SliceCheckableTreeProxyModel(indexer=0)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecheckableproxymodel.py</code> <pre><code>class SliceCheckableTreeProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to make a tree model checkable.\n    In contrast to SliceCheckableProxyModel, any checkstate change is propagated to\n    parent and child indexes. (child indexes will also get the new checkstate, parent\n    indexes will become partially checked if needed.)\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TreeView()\n    table.set_model(model)\n    table.proxifier[:, 0].set_checkable(tree=True)\n    table.show()\n    # or\n    proxy = itemmodels.SliceCheckableTreeProxyModel(indexer=0)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"checkable_tree\"\ncheckstate_changed = core.Signal(core.ModelIndex, constants.CheckState)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: dict[tuple[int, int], constants.CheckState] = {}\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn super().flags(index)\nif self.indexer_contains(index):\n# TODO: do i need to mess with ItemDataFlag.ItemIsTristate?\nreturn super().flags(index) | constants.IS_CHECKABLE\nreturn super().flags(index)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nkey = self.get_index_key(index, include_column=True)\nreturn self._checked.get(key, constants.CheckState.Unchecked)\nreturn super().data(index, role)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nself.set_checkstate(index, recursive=True)\nreturn super().setData(index, role)\ndef set_checkstate(self, index: core.ModelIndex, recursive=False):\nkey = self.get_index_key(index, include_column=True)\ncurrent = self._checked.get(key)\nmatch current:\ncase constants.CheckState.Checked:\nval = constants.CheckState.Unchecked\ncase _:\nval = constants.CheckState.Checked\nself._checked[key] = val\nif recursive:\nself.set_child_states(index, val)\nself.set_parent_states(index)\nself.dataChanged.emit(index, index)\nself.checkstate_changed.emit(index, val)\nreturn True\ndef set_parent_states(self, index: core.ModelIndex):\nindexes = []\nwhile (index := index.parent()).isValid():\nindexes.append(index)\nfor idx in reversed(indexes):\niterator = self.iter_tree(index)\n# next(iterator) # first one is ourself, throw it away\nstates = []\nfor index in iterator:\nstate = index.data(constants.CHECKSTATE_ROLE)\nstates.append(state)\nif all(state is True for state in states):\nval = True\nelif all(state is False for state in states):\nval = False\nelse:\nval = constants.CheckState.PartiallyChecked\nkey = self.get_index_key(idx, include_column=True)\nlogger.debug(f\"Setting {key} to {val}\")\nself._checked[key] = val\nself.dataChanged.emit(idx, idx)\nself.checkstate_changed.emit(idx, val)\ndef set_child_states(self, index, state):\niterator = self.iter_tree(index)\nnext(iterator)  # first one is ourself, throw it away\nfor child_index in iterator:\nkey = self.get_index_key(child_index, include_column=True)\nself._checked[key] = state\nself.dataChanged.emit(child_index, child_index)\nself.checkstate_changed.emit(child_index, state)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceCheckableTreeProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256882592[\"itemmodels.SliceCheckableTreeProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256882592\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceCheckableTreeProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html","title":"SliceColorCategoriesProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to apply coloring to categories.</p>"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html#prettyqt.itemmodels.SliceColorCategoriesProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.color_categories()\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = itemmodels.SliceColorCategoriesProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecolorcategoriesproxymodel.py</code> <pre><code>class SliceColorCategoriesProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to apply coloring to categories.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.color_categories()\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = itemmodels.SliceColorCategoriesProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"color_categories\"\nICON = \"mdi.palette-outline\"\ndef __init__(self, *args, **kwargs):\nself._role = constants.DISPLAY_ROLE\nself._color_map = {}\nself.color_generator = itertools.cycle(gui.Palette().iter_colors())\nself._color_none = False\nself._cast_to_str = False\nsuper().__init__(*args, **kwargs)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index):\nreturn super().data(index, role)\nmatch role:\ncase constants.BACKGROUND_ROLE:\nreturn self.get_color_for_index(index)\ncase _:\nreturn super().data(index, role)\ndef get_color_for_index(self, index):\nvalue = super().data(index, self._role)\nkey = str(value) if self._cast_to_str else value\nmatch value:\ncase None if not self._color_none:\nreturn None\ncase _:\nif key in self._color_map:\nreturn self._color_map[key]\nnew = next(self.color_generator)\nself._color_map[key] = new\nreturn self._color_map[key]\ndef is_none_colored(self) -&gt; bool:\nreturn self._color_none\ndef set_none_colored(self, val: bool):\nwith self.change_layout():\nself._color_none = val\ndef is_casted_to_str(self) -&gt; bool:\nreturn self._cast_to_str\ndef set_cast_to_str(self, val: bool):\nwith self.change_layout():\nself._color_map = {}\nself.color_generator = itertools.cycle(gui.Palette().iter_colors())\nself._cast_to_str = val\ncolor_none = core.Property(\nbool,\nis_none_colored,\nset_none_colored,\ndoc=\"Whether None-values should also get colored\",\n)\n\"\"\"Color ItemData with value `None`.\"\"\"\ncast_to_str = core.Property(\nbool,\nis_casted_to_str,\nset_cast_to_str,\ndoc=\"Cast values to string in order to color / group them\",\n)\n\"\"\"Cast all values to a string for deciding whether cells are in same category.\"\"\"\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html#prettyqt.itemmodels.proxies.slicecolorcategoriesproxymodel.SliceColorCategoriesProxyModel.cast_to_str","title":"<code>cast_to_str = core.Property(bool, is_casted_to_str, set_cast_to_str, doc='Cast values to string in order to color / group them')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Cast all values to a string for deciding whether cells are in same category.</p>"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html#prettyqt.itemmodels.proxies.slicecolorcategoriesproxymodel.SliceColorCategoriesProxyModel.color_none","title":"<code>color_none = core.Property(bool, is_none_colored, set_none_colored, doc='Whether None-values should also get colored')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Color ItemData with value <code>None</code>.</p>"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256646432[\"itemmodels.SliceColorCategoriesProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256646432\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceColorCategoriesProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>color_none</code> bool Whether None-values should also get colored <code>cast_to_str</code> bool Cast values to string in order to color / group them"},{"location":"additional_modules/itemmodels/SliceColorValuesProxyModel.html","title":"SliceColorValuesProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceColorValuesProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Model to color cells of a numerical table based on their value.</p> <p>By default, \"high\" numbers are colored red, \"low\" are colored green.</p> <p>Possible modes are: * All: Highlight all cells within given slice * Column: Highlight all cells of same column as current if cell is within given slice. * Row: Highlight all cells of same row as current if cell is within given slice.</p> <p>The last two modes have the advantage that nothing needs to be computed in advance, min/max values are calculated on-the fly.</p>"},{"location":"additional_modules/itemmodels/SliceColorValuesProxyModel.html#prettyqt.itemmodels.SliceColorValuesProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.color_values(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = itemmodels.SliceColorValuesProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecolorvaluesproxymodel.py</code> <pre><code>class SliceColorValuesProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Model to color cells of a numerical table based on their value.\n    By default, \"high\" numbers are colored red, \"low\" are colored green.\n    Possible modes are:\n    * All: Highlight all cells within given slice\n    * Column: Highlight all cells of same column as current if cell is within given slice.\n    * Row: Highlight all cells of same row as current if cell is within given slice.\n    The last two modes have the advantage that nothing needs to be computed in advance,\n    min/max values are calculated on-the fly.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.color_values(mode=\"all\")\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = itemmodels.SliceColorValuesProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"color_values\"\nICON = \"mdi.palette-outline\"\nColorMode = ColorMode\ncore.Enum(ColorMode)\ndef __init__(self, *args, mode: ColorMode = ColorMode.Visible, **kwargs):\nself._mode = mode\nself._low_color = gui.QColor(\"green\")\nself._high_color = gui.QColor(\"red\")\nsuper().__init__(*args, **kwargs)\nself._max = 0.0\nself._role = constants.EDIT_ROLE\nself._last_span = ((-1, -1), (-1, -1))\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"colorMode\": COLOR_MODE}\nreturn maps\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index):\nreturn super().data(index, role)\nval = super().data(index, self._role)\nmatch role:\ncase constants.BACKGROUND_ROLE if isinstance(val, int | float):\nreturn self.get_color_for_index(index)\ncase _:\nreturn super().data(index, role)\ndef get_color_for_index(self, index: core.ModelIndex) -&gt; gui.QColor:\nmatch self._mode:\ncase self.ColorMode.Seen:\ndata = index.data(self._role)\nnew_max = max(self._max, abs(data))\nif new_max != self._max:\nself._max = new_max\nself.update_all()\nvalue = data / self._max\nreturn self.get_color_for_value(abs(value))\ncase self.ColorMode.Visible:\nwidget = self.parent()\nh_span = widget.get_visible_section_span(\"horizontal\")\nv_span = widget.get_visible_section_span(\"vertical\")\nif (span := (h_span, v_span)) != self._last_span:\nself._last_span = span\nmodel = self.sourceModel()\n# TODO: we probably should clamp based on self._indexer.\ndelegator = model[v_span[0] : v_span[1], h_span[0] : h_span[1]]\ndata = delegator.data(self._role)\ndata = [i for i in data if isinstance(i, int | float)]\nmax_ = max(data) if data else 1.0\nself._max = max_\ntop_left = self.index(v_span[0], h_span[0])\nbottom_right = self.index(v_span[1], h_span[1])\n# or do we need to update_all()?\nself.dataChanged.emit(top_left, bottom_right)\nelse:\nmax_ = self._max\ndata = abs(index.data(self._role))\nmax_ = abs(max(abs(max_), data))\nreturn self.get_color_for_value(data / max_)\ndef get_color_for_value(self, value: float) -&gt; gui.QColor:\ncol = helpers.get_color_percentage(\nself._low_color.getRgb(), self._high_color.getRgb(), value * 100\n)\nreturn gui.QColor(*col)\ndef set_low_color(self, color: datatypes.ColorType):\nself._low_color = colors.get_color(color).as_qt()\ndef set_high_color(self, color: datatypes.ColorType):\nself._high_color = colors.get_color(color).as_qt()\ndef get_low_color(self) -&gt; gui.QColor:\nreturn self._low_color\ndef get_high_color(self) -&gt; gui.QColor:\nreturn self._high_color\ndef set_color_mode(self, mode: SliceColorValuesProxyModel.ColorMode | ColorModeStr):\nself._mode = COLOR_MODE.get_enum_value(mode)\ndef get_color_mode(self) -&gt; SliceColorValuesProxyModel.ColorMode:\nreturn self._mode\ncolor_mode = core.Property(\nColorMode,\nget_color_mode,\nset_color_mode,\ndoc=\"Mode to use for coloring\",\n)\nlow_color = core.Property(\ngui.QColor,\nget_low_color,\nset_low_color,\ndoc=\"Color for lower end of color spectrum\",\n)\nhigh_color = core.Property(\ngui.QColor,\nget_high_color,\nset_high_color,\ndoc=\"Color for upper end of color spectrum\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceColorValuesProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256886432[\"itemmodels.SliceColorValuesProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256886432\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceColorValuesProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>color_mode</code> PySide::PyObjectWrapper Mode to use for coloring <code>low_color</code> QColor Color for lower end of color spectrum <code>high_color</code> QColor Color for upper end of color spectrum"},{"location":"additional_modules/itemmodels/SliceDisplayTextProxyModel.html","title":"SliceDisplayTextProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceDisplayTextProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to convert and format non-str values for the DisplayRole.</p> <p>Usually, formatting of numbers etc is done by the ItemDelegate. By moving the formatting into a proxy layer instead, we can keep the ItemDelegate spot free for other stuff.</p> <p>Information about string formatting:</p> <p>https://docs.python.org/3/library/string.html#format-specification-mini-language</p>"},{"location":"additional_modules/itemmodels/SliceDisplayTextProxyModel.html#prettyqt.itemmodels.SliceDisplayTextProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.format_text(int_format=\"{:0&gt;2d}\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = SliceDisplayTextProxyModel(indexer=indexer, float_format=\"{:.4f}\")\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicedisplaytextproxymodel.py</code> <pre><code>class SliceDisplayTextProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to convert and format non-str values for the DisplayRole.\n    Usually, formatting of numbers etc is done by the ItemDelegate.\n    By moving the formatting into a proxy layer instead, we can keep the ItemDelegate\n    spot free for other stuff.\n    Information about string formatting:\n    https://docs.python.org/3/library/string.html#format-specification-mini-language\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.format_text(int_format=\"{:0&gt;2d}\")\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = SliceDisplayTextProxyModel(indexer=indexer, float_format=\"{:.4f}\")\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nself._int_format = \"{:.4f}\"\nself._float_format = \"{:.4f}\"\nself._datetime_format = \"%m/%d/%Y, %H:%M:%S\"\nself._date_format = \"%m/%d/%Y\"\nself._time_format = \"%H:%M:%S\"\n# self._force_override = False\nsuper().__init__(*args, **kwargs)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index) or role != constants.DISPLAY_ROLE:\nreturn super().data(index, role)\ndata = index.data()\nmatch data:\ncase int():\nreturn self._int_format.format(data)\ncase float():\nreturn self._float_format.format(data)\ncase core.QDateTime():\nreturn data.toString(self._datetime_format)\ncase datetime.datetime():\nreturn data.strftime(self._datetime_format)\ncase core.QTime():\nreturn data.toString(self._time_format)\ncase datetime.time():\nreturn data.strftime(self._time_format)\ncase core.QDate():\nreturn data.toString(self._date_format)\ncase datetime.date():\nreturn data.strftime(self._date_format)\ncase _:\nreturn super().data(index, role)\ndef set_int_format(self, fmt: str):\nself._int_format = fmt\ndef get_int_format(self) -&gt; str:\nreturn self._int_format\ndef set_float_format(self, fmt: str):\nself._float_format = fmt\ndef get_float_format(self) -&gt; str:\nreturn self._float_format\ndef set_datetime_format(self, fmt: str):\nself._datetime_format = fmt\ndef get_datetime_format(self, fmt) -&gt; str:\nreturn self._datetime_format\ndef set_date_format(self, fmt: str):\nself._date_format = fmt\ndef get_date_format(self, fmt) -&gt; str:\nreturn self._date_format\ndef set_time_format(self, fmt: str):\nself._time_format = fmt\ndef get_time_format(self, fmt) -&gt; str:\nreturn self._time_format\nint_format = core.Property(\nstr,\nget_int_format,\nset_int_format,\ndoc=\"String format for integers\",\n)\nfloat_format = core.Property(\nstr,\nget_float_format,\nset_float_format,\ndoc=\"String format for floats\",\n)\ndatetime_format = core.Property(\nstr,\nget_datetime_format,\nset_datetime_format,\ndoc=\"String format for datetime objects\",\n)\ndate_format = core.Property(\nstr,\nget_date_format,\nset_date_format,\ndoc=\"String format for date objects\",\n)\ntime_format = core.Property(\nstr,\nget_time_format,\nset_time_format,\ndoc=\"String format for time objects\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceDisplayTextProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256874912[\"itemmodels.SliceDisplayTextProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256874912\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceDisplayTextProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>int_format</code> QString String format for integers <code>float_format</code> QString String format for floats <code>datetime_format</code> QString String format for datetime objects <code>date_format</code> QString String format for date objects <code>time_format</code> QString String format for time objects"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html","title":"SliceFilterProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to filter an item view based on python slicing syntax.</p> <p>Since slicing operations are bijective, this model can filter without looping through rows or columns. Thus, this should perform much better than a SortFilterProxyModel with a column filter. (O(1) instead of O(n))</p>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#prettyqt.itemmodels.SliceFilterProxyModel--example","title":"Example","text":"<p>To filter out every second row, and cut off the the first two columns:</p> <pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].filter()\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>class SliceFilterProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to filter an item view based on python slicing syntax.\n    Since slicing operations are bijective, this model can filter without\n    looping through rows or columns. Thus, this should perform much better than a\n    SortFilterProxyModel with a column filter. (O(1) instead of O(n))\n    ### Example\n    To filter out every second row, and cut off the the first two columns:\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table.proxifier[::2, 2:].filter()\n    table.show()\n    # or\n    indexer = (slice(None, None, 2), slice(2, None))\n    proxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"slice_filter\"\nICON = \"mdi.table-filter\"\ndef rowCount(self, index: core.ModelIndex | None = None) -&gt; int:\nrowcount = super().rowCount()\n# TODO: not sure if slice.stop = 0 is covered correctly?\nreturn min(rowcount, self.get_row_slice().stop or rowcount)\ndef columnCount(self, index: core.ModelIndex | None = None) -&gt; int:\ncolcount = super().columnCount()\nreturn min(colcount, self.get_column_slice().stop or colcount)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Map header data to proxy by calculating position from slice values.\n        source pos = slice start + proxy pos * slice step)\n        \"\"\"\nis_horizontal = orientation == constants.HORIZONTAL\nrng = self.get_column_range() if is_horizontal else self.get_row_range()\npos = rng.start + section * rng.step\nreturn super().headerData(pos, orientation, role)\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nsource = self.sourceModel()\nif row &lt; 0 or column &lt; 0 or source is None:\nreturn core.ModelIndex()\nsource_parent = self.mapToSource(parent)\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * column)\nrow_pos = row_range.start + (row_range.step * row)\nsource_index = source.index(row_pos, col_pos, source_parent)\nreturn self.mapFromSource(source_index)\ndef mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index to source by calculating position from slice values.\n        source pos = slice start + proxy pos * slice step)\n        \"\"\"\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * proxy_idx.column())\nrow_pos = row_range.start + (row_range.step * proxy_idx.row())\nreturn source.index(row_pos, col_pos)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index from source by calculating position based on slice values.\n        proxy pos = source pos - slice start / slice step\n        \"\"\"\nif self.sourceModel() is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow_pos = self.position_in_row_slice(source_index.row())\ncol_pos = self.position_in_column_slice(source_index.column())\nreturn self.createIndex(row_pos, col_pos, source_index.internalPointer())\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#prettyqt.itemmodels.proxies.slicefilterproxymodel.SliceFilterProxyModel.headerData","title":"<code>headerData(section: int, orientation: constants.Orientation, role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Map header data to proxy by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>def headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Map header data to proxy by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nis_horizontal = orientation == constants.HORIZONTAL\nrng = self.get_column_range() if is_horizontal else self.get_row_range()\npos = rng.start + section * rng.step\nreturn super().headerData(pos, orientation, role)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#prettyqt.itemmodels.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapFromSource","title":"<code>mapFromSource(source_index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source by calculating position based on slice values.</p> <p>proxy pos = source pos - slice start / slice step</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index from source by calculating position based on slice values.\n    proxy pos = source pos - slice start / slice step\n    \"\"\"\nif self.sourceModel() is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow_pos = self.position_in_row_slice(source_index.row())\ncol_pos = self.position_in_column_slice(source_index.column())\nreturn self.createIndex(row_pos, col_pos, source_index.internalPointer())\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#prettyqt.itemmodels.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapToSource","title":"<code>mapToSource(proxy_idx: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index to source by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index to source by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * proxy_idx.column())\nrow_pos = row_range.start + (row_range.step * proxy_idx.row())\nreturn source.index(row_pos, col_pos)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256878752[\"itemmodels.SliceFilterProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256878752\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html","title":"SliceHighlightCurrentProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same data as current index.</p> <p>Highlights all cells with same content in given role as currently focused cell with a user-specified color.</p> <p>Possible modes are:</p> <ul> <li><code>all</code>: Highlight all cells with same value.</li> <li><code>column</code>: Highlight all cells with same value and same column as current.</li> <li><code>row</code>: Highlight all cells with same value and same row as current.</li> </ul>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.SliceHighlightCurrentProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.highlight_current(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.selectionModel().currentChanged.connect(proxy.highlight_index)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>class SliceHighlightCurrentProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model which highlights all cells with same data as current index.\n    Highlights all cells with same content in given role as currently focused cell\n    with a user-specified color.\n    Possible modes are:\n    * `all`: Highlight all cells with same value.\n    * `column`: Highlight all cells with same value and same column as current.\n    * `row`: Highlight all cells with same value and same row as current.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.highlight_current(mode=\"all\")\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.selectionModel().currentChanged.connect(proxy.highlight_index)\n    table.show()\n    ```\n    \"\"\"\nID = \"highlight_current\"\ndef __init__(\nself,\nrole=constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"column\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(**kwargs)\ndef set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\ndef get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\ndef set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\ndef get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\ndef set_highlight_role(self, mode: constants.ItemDataRole):\n\"\"\"Set highlight mode.\"\"\"\nself._data_role = mode\ndef get_highlight_role(self) -&gt; constants.ItemDataRole:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._data_role\ndef set_highlight_column(self, column: int):\nwith self.change_layout():\nself._current_column = column\ndef get_highlight_column(self) -&gt; int:\nreturn self._current_column\ndef set_highlight_row(self, row: int):\nwith self.change_layout():\nself._current_row = row\ndef get_highlight_row(self) -&gt; int:\nreturn self._current_row\ndef set_current_value(self, value):\nwith self.change_layout():\nself._current_value = value\ndef highlight_index(self, index: core.ModelIndex):\nwith self.change_layout():\nself._current_value = index.data(self._data_role)  # super().data(index, role)\nself._current_row = index.row()\nself._current_column = index.column()\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif (\nrole == constants.BACKGROUND_ROLE\nand index.data(self._data_role) == self._current_value\nand self.indexer_contains(index)\nand (\n(self._mode == \"column\" and index.column() == self._current_column)\nor (\nself._mode == \"row\"\nand (index.row() == self._current_row)\nor self._mode == \"all\"\n)\n)\n):\nreturn self._highlight_color\nreturn super().data(index, role)\nhighlightMode = core.Property(\nstr,\nget_highlight_mode,\nset_highlight_mode,\ndoc=\"Highlight mode\",\n)\nhighlightColor = core.Property(\nQtGui.QColor,\nget_highlight_color,\nset_highlight_color,\ndoc=\"Color to use for highlighting\",\n)\nhighlightRole = core.Property(\nconstants.ItemDataRole,\nget_highlight_role,\nset_highlight_role,\ndoc=\"ItemRole to use for highlighting\",\n)\nhighlight_column = core.Property(\nint,\nget_highlight_column,\nset_highlight_column,\ndoc=\"Currently highlighted column\",\n)\nhighlight_row = core.Property(\nint,\nget_highlight_row,\nset_highlight_row,\ndoc=\"Currently highlighted row\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_role","title":"<code>get_highlight_role() -&gt; constants.ItemDataRole</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_role(self) -&gt; constants.ItemDataRole:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._data_role\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_role","title":"<code>set_highlight_role(mode: constants.ItemDataRole)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_role(self, mode: constants.ItemDataRole):\n\"\"\"Set highlight mode.\"\"\"\nself._data_role = mode\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256642592[\"itemmodels.SliceHighlightCurrentProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256642592\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceHighlightCurrentProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>highlightMode</code> QString Highlight mode <code>highlightColor</code> QColor Color to use for highlighting <code>highlightRole</code> PySide::PyObjectWrapper ItemRole to use for highlighting <code>highlight_column</code> int Currently highlighted column <code>highlight_row</code> int Currently highlighted row"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html","title":"SliceIdentityProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Base model for slice proxy models.</p> <p>By itself, this proxy does nothing. It just provides all needed helper functions to deal with slices. <code>indexer_contains</code> should be just by subclasses in order to check whether the proxy should be applied.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>class SliceIdentityProxyModel(core.IdentityProxyModel):\n\"\"\"Base model for slice proxy models.\n    By itself, this proxy does nothing.\n    It just provides all needed helper functions to deal with slices.\n    `indexer_contains` should be just by subclasses in order to check whether the proxy\n    should be applied.\n    \"\"\"\ndef __init__(self, indexer=None, **kwargs):\nsuper().__init__(**kwargs)\nself._indexer = (slice(None), slice(None))\nself.set_indexer(indexer)\ndef indexer_contains(self, index: core.ModelIndex | tuple[int, int]) -&gt; bool:\n\"\"\"Check whether given ModelIndex is included in our Indexer.\"\"\"\nif isinstance(index, core.ModelIndex):\nindex = (index.row(), index.column())\ncol_slice = self.get_column_slice()\nrow_slice = self.get_row_slice()\nsource = self.sourceModel()\ncol_slice = self.update_slice_boundaries(col_slice, count=source.columnCount())\nrow_slice = self.update_slice_boundaries(row_slice, count=source.rowCount())\n# logger.info(f\"{col_slice=} {row_slice=}\")\nto_check = (row_slice, col_slice)  # instead of _indexer, for negative indexes.\nreturn helpers.is_position_in_index(*index, to_check)\ndef update_slice_boundaries(self, sl: slice, count: int) -&gt; slice:\n\"\"\"Update slice boundaries by resolving negative indexes.\"\"\"\n# Not sure yet whats the best approach here and which cases I should support...\n# if sl.end is larger than count, clip it (or perhaps throw exception?)\n# if sl.stop is not None and sl.stop &gt;= count:\n#     sl = slice(sl.start, count, sl.step)\n# resolve negative start value\nif sl.start is not None and sl.start &lt; 0:\nstart = count + sl.start\nend = count + sl.stop\n# end = start + (sl.stop - sl.start)\nif start &lt; 0:\nraise IndexError(sl.start)\nsl = slice(start, end, sl.step)\n# if sl.stop is not None and sl.stop &lt; 0:\n#     stop = source.columnCount() + sl.stop\n#     if stop &lt; 0:\n#         raise IndexError(sl.stop)\n#     sl = slice(sl.start, stop, sl.step)\nreturn sl\ndef set_indexer(self, indexer):\n\"\"\"Takes basically anything which is common to use for __getitem__.\"\"\"\nmatch indexer:\ncase None:\nself._indexer = (slice(None), slice(None))\ncase int() as column:\nself.set_column_slice(column)\ncase slice() as col_slice:\nself._indexer = (col_slice, slice(None))\ncase row_slice, col_slice:\nself.set_column_slice(col_slice)\nself.set_row_slice(row_slice)\ncase _:\nraise TypeError(indexer)\ndef get_column_slice(self) -&gt; slice:\nmatch self._indexer:\ncase None | (_, None):\nreturn slice(None)\ncase (_, slice() as col_slice):\nreturn col_slice\ncase _:\nraise TypeError(self._indexer)\ndef get_row_slice(self) -&gt; slice:\nmatch self._indexer:\ncase None | (None, _):\nreturn slice(None)\ncase (slice() as row_slice, _):\nreturn row_slice\ncase _:\nraise TypeError(self._indexer)\ndef set_column_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the column slice.\"\"\"\nmatch value:\ncase slice() as col_slice:\nsl = col_slice\ncase int() as col:\nsl = slice(col, col + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (self.get_row_slice(), sl)\ndef set_row_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the row slice.\"\"\"\nmatch value:\ncase slice() as row_slice:\nsl = row_slice\ncase int() as row:\nsl = slice(row, row + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (sl, self.get_column_slice())\ndef get_row_range(self) -&gt; range:\n\"\"\"Return a range for the row slice with valid start / stop / step values.\"\"\"\nsl = self.get_row_slice()\nrow_count = self.sourceModel().rowCount()\nreturn range(sl.start or 0, sl.stop or row_count, sl.step or 1)\ndef get_column_range(self) -&gt; range:\n\"\"\"Return a range for the column slice with valid start / stop / step values.\"\"\"\nsl = self.get_column_slice()\ncol_count = self.sourceModel().columnCount()\nreturn range(sl.start or 0, sl.stop or col_count, sl.step or 1)\ndef position_in_column_slice(self, col: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(col) if slice would be a list.\"\"\"\nsl = self.get_column_slice()\nreturn int((col - (sl.start or 0)) / (sl.step or 1))\ndef position_in_row_slice(self, row: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(row) if slice would be a list.\"\"\"\nsl = self.get_row_slice()\nreturn int((row - (sl.start or 0)) / (sl.step or 1))\n# The Qt typesystems dont like slices (or ranges / tuples)\n# seems what works is to throw tuples at a QtProperty declared as list.\n# otherwise change this to list getters/setters.\ndef get_column_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the column slice.\"\"\"\nsl = self.get_column_slice()\nreturn (sl.start, sl.stop, sl.step)\ndef get_row_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the row slice.\"\"\"\nsl = self.get_row_slice()\nreturn (sl.start, sl.stop, sl.step)\ncolumn_slice = core.Property(\nlist,\nget_column_tuple,\nset_column_slice,\ndoc=\"Column slice to include for the proxy\",\n)\nrow_slice = core.Property(\nlist,\nget_row_tuple,\nset_column_slice,\ndoc=\"Row slice to include for the proxy\",\n)\n</code></pre> Name Children Inherits SliceDisplayTextProxyModelprettyqt.itemmodels.proxies.slicedisplaytextproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceChangeIconSizeProxyModelprettyqt.itemmodels.proxies.slicechangeiconsizeproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceFilterProxyModelprettyqt.itemmodels.proxies.slicefilterproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceCheckableProxyModelprettyqt.itemmodels.proxies.slicecheckableproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceCheckableTreeProxyModelprettyqt.itemmodels.proxies.slicecheckableproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceAppearanceProxyModelprettyqt.itemmodels.proxies.sliceappearanceproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceChangeFlagsProxyModelprettyqt.itemmodels.proxies.slicechangeflagsproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceColorValuesProxyModelprettyqt.itemmodels.proxies.slicecolorvaluesproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceColorCategoriesProxyModelprettyqt.itemmodels.proxies.slicecolorcategoriesproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceValueTransformationProxyModelprettyqt.itemmodels.proxies.slicevaluetransformationproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceHighlightCurrentProxyModelprettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceMapRoleProxyModelprettyqt.itemmodels.proxies.slicemaproleproxymodel <ul><li>SliceIdentityProxyModel</li></ul> SliceToMarkdownProxyModelprettyqt.itemmodels.proxies.slicetomarkdownproxymodel <ul><li>SliceIdentityProxyModel</li></ul>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_range","title":"<code>get_column_range() -&gt; range</code>","text":"<p>Return a range for the column slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_range(self) -&gt; range:\n\"\"\"Return a range for the column slice with valid start / stop / step values.\"\"\"\nsl = self.get_column_slice()\ncol_count = self.sourceModel().columnCount()\nreturn range(sl.start or 0, sl.stop or col_count, sl.step or 1)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_tuple","title":"<code>get_column_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the column slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the column slice.\"\"\"\nsl = self.get_column_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_range","title":"<code>get_row_range() -&gt; range</code>","text":"<p>Return a range for the row slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_range(self) -&gt; range:\n\"\"\"Return a range for the row slice with valid start / stop / step values.\"\"\"\nsl = self.get_row_slice()\nrow_count = self.sourceModel().rowCount()\nreturn range(sl.start or 0, sl.stop or row_count, sl.step or 1)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_tuple","title":"<code>get_row_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the row slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the row slice.\"\"\"\nsl = self.get_row_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.indexer_contains","title":"<code>indexer_contains(index: core.ModelIndex | tuple[int, int]) -&gt; bool</code>","text":"<p>Check whether given ModelIndex is included in our Indexer.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def indexer_contains(self, index: core.ModelIndex | tuple[int, int]) -&gt; bool:\n\"\"\"Check whether given ModelIndex is included in our Indexer.\"\"\"\nif isinstance(index, core.ModelIndex):\nindex = (index.row(), index.column())\ncol_slice = self.get_column_slice()\nrow_slice = self.get_row_slice()\nsource = self.sourceModel()\ncol_slice = self.update_slice_boundaries(col_slice, count=source.columnCount())\nrow_slice = self.update_slice_boundaries(row_slice, count=source.rowCount())\n# logger.info(f\"{col_slice=} {row_slice=}\")\nto_check = (row_slice, col_slice)  # instead of _indexer, for negative indexes.\nreturn helpers.is_position_in_index(*index, to_check)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_column_slice","title":"<code>position_in_column_slice(col: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(col) if slice would be a list.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_column_slice(self, col: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(col) if slice would be a list.\"\"\"\nsl = self.get_column_slice()\nreturn int((col - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_row_slice","title":"<code>position_in_row_slice(row: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(row) if slice would be a list.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_row_slice(self, row: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(row) if slice would be a list.\"\"\"\nsl = self.get_row_slice()\nreturn int((row - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_column_slice","title":"<code>set_column_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the column slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_column_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the column slice.\"\"\"\nmatch value:\ncase slice() as col_slice:\nsl = col_slice\ncase int() as col:\nsl = slice(col, col + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (self.get_row_slice(), sl)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_indexer","title":"<code>set_indexer(indexer)</code>","text":"<p>Takes basically anything which is common to use for getitem.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_indexer(self, indexer):\n\"\"\"Takes basically anything which is common to use for __getitem__.\"\"\"\nmatch indexer:\ncase None:\nself._indexer = (slice(None), slice(None))\ncase int() as column:\nself.set_column_slice(column)\ncase slice() as col_slice:\nself._indexer = (col_slice, slice(None))\ncase row_slice, col_slice:\nself.set_column_slice(col_slice)\nself.set_row_slice(row_slice)\ncase _:\nraise TypeError(indexer)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_row_slice","title":"<code>set_row_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the row slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_row_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the row slice.\"\"\"\nmatch value:\ncase slice() as row_slice:\nsl = row_slice\ncase int() as row:\nsl = slice(row, row + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (sl, self.get_column_slice())\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.update_slice_boundaries","title":"<code>update_slice_boundaries(sl: slice, count: int) -&gt; slice</code>","text":"<p>Update slice boundaries by resolving negative indexes.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def update_slice_boundaries(self, sl: slice, count: int) -&gt; slice:\n\"\"\"Update slice boundaries by resolving negative indexes.\"\"\"\n# Not sure yet whats the best approach here and which cases I should support...\n# if sl.end is larger than count, clip it (or perhaps throw exception?)\n# if sl.stop is not None and sl.stop &gt;= count:\n#     sl = slice(sl.start, count, sl.step)\n# resolve negative start value\nif sl.start is not None and sl.start &lt; 0:\nstart = count + sl.start\nend = count + sl.stop\n# end = start + (sl.stop - sl.start)\nif start &lt; 0:\nraise IndexError(sl.start)\nsl = slice(start, end, sl.step)\n# if sl.stop is not None and sl.stop &lt; 0:\n#     stop = source.columnCount() + sl.stop\n#     if stop &lt; 0:\n#         raise IndexError(sl.stop)\n#     sl = slice(sl.start, stop, sl.step)\nreturn sl\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceIdentityProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy"},{"location":"additional_modules/itemmodels/SliceMapRoleProxyModel.html","title":"SliceMapRoleProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceMapRoleProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model for mapping one role to another.</p> <p>Mapping can be changed by passing a dictionary with source role as key and target_role as value. Py passing an optional converter function, values which are mapped can be modified.</p>"},{"location":"additional_modules/itemmodels/SliceMapRoleProxyModel.html#prettyqt.itemmodels.SliceMapRoleProxyModel--example","title":"Example","text":"<pre><code>source_model = FsSpecTreemodel(\"file\")\ntable = widgets.TableView()\nmapping = {source_model.Roles.ProtocolPathRole: constants.DISPLAY_ROLE}\nmodel = SliceMapRoleProxyModel(mapping, indexer=0, parent=table)\nmodel.setSourceModel(source_model)\ntable.set_model(model)\ntable.show()\n# or\ntable.proxifier.map_role(source_model.Roles.ProtocolPathRole, constants.DISPLAY_ROLE)\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicemaproleproxymodel.py</code> <pre><code>class SliceMapRoleProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model for mapping one role to another.\n    Mapping can be changed by passing a dictionary with source role as key and target_role\n    as value.\n    Py passing an optional converter function, values which are mapped can be modified.\n    ### Example\n    ```py\n    source_model = FsSpecTreemodel(\"file\")\n    table = widgets.TableView()\n    mapping = {source_model.Roles.ProtocolPathRole: constants.DISPLAY_ROLE}\n    model = SliceMapRoleProxyModel(mapping, indexer=0, parent=table)\n    model.setSourceModel(source_model)\n    table.set_model(model)\n    table.show()\n    # or\n    table.proxifier.map_role(source_model.Roles.ProtocolPathRole, constants.DISPLAY_ROLE)\n    ```\n    \"\"\"\nID = \"map_role\"\nICON = \"mdi.directions-fork\"\ndef __init__(\nself,\nmapping: Mapping[constants.ItemDataRole, constants.ItemDataRole],\nconverter: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._mapping = bidict(mapping)\nself._converter = converter\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role in self._mapping.inverse and self.indexer_contains(index):\nvalue = super().data(index, self._mapping.inverse[role])\nreturn self._converter(value) if self._converter else value\nreturn super().data(index, role)\ndef set_mapping(\nself,\nmapping: Mapping[constants.ItemDataRole, constants.ItemDataRole],\n):\nwith self.reset_model():\nself._mapping = bidict(mapping)\ndef get_mapping(self) -&gt; Mapping[constants.ItemDataRole, constants.ItemDataRole]:\nreturn self._mapping\nmapping = core.Property(\ndict,\nget_mapping,\nset_mapping,\ndoc=\"Mapping of ItemRoles\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceMapRoleProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256648352[\"itemmodels.SliceMapRoleProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256648352\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceMapRoleProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy <code>mapping</code> QVariantMap Mapping of ItemRoles"},{"location":"additional_modules/itemmodels/SliceToMarkdownProxyModel.html","title":"SliceToMarkdownProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceToMarkdownProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model which transforms cell contents to markdown.</p> <p>Mainly used for documentation files. Text is formatted based on FontRole, Checkstate role, etc.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicetomarkdownproxymodel.py</code> <pre><code>class SliceToMarkdownProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model which transforms cell contents to markdown.\n    Mainly used for documentation files.\n    Text is formatted based on FontRole, Checkstate role, etc.\n    \"\"\"\nID = \"to_markdown\"\nICON = \"mdi.palette-outline\"\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index):\nreturn super().data(index, role)\nif role != constants.DISPLAY_ROLE:\nreturn None\n# self.strip_styling = True\n# if role != constants.DISPLAY_ROLE and self.strip_styling:\n#     return None\nlabel = super().data(index, constants.DISPLAY_ROLE)\ncheckstate = super().data(index, constants.CHECKSTATE_ROLE)\n# if not label and checkstate is None:\n#     return \"\"\nlabel = escaped(str(label) if label is not None else \"\")\nif label:\n# background = super().data(index, constants.BACKGROUND_ROLE)\nforeground = super().data(index, constants.FOREGROUND_ROLE)\nif isinstance(foreground, gui.QColor):\nlabel = f'&lt;span style=\"color:{foreground.name()}\"&gt;{label}&lt;/span&gt;'\nfont = super().data(index, constants.FONT_ROLE)\nif font and font.bold():\nlabel = f\"**{label}**\"\nif font and font.italic():\nlabel = f\"*{label}*\"\nmatch checkstate:\ncase True | constants.CheckState.Checked | 2:\n# :black_square_button:\nlabel = f\"\u2611 {label}\"\ncase False | constants.CheckState.Unchecked | 0:\n# :heavy_check_mark:\nlabel = f\"\u2610 {label}\"\nreturn label\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceToMarkdownProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256647392[\"itemmodels.SliceToMarkdownProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256647392\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceToMarkdownProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html","title":"SliceValueTransformationProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>A proxy model which transforms cell contents based on a Callable.</p>"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html#prettyqt.itemmodels.SliceValueTransformationProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n</code></pre> <p>or</p> <pre><code>indexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceValueTransformationProxyModel(indexer=indexer)\nproxy.set_source_model(model)\nproxy.add_transformer(lambda x: x + \"something\", selector=lambda x: \"abc\" in x)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>class SliceValueTransformationProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"A proxy model which transforms cell contents based on a Callable.\n    ### Example:\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table.proxifier[::2, 2:].modify(xyz)\n    table.show()\n    ```\n    or\n    ```py\n    indexer = (slice(None, None, 2), slice(2, None))\n    proxy = itemmodels.SliceValueTransformationProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    proxy.add_transformer(lambda x: x + \"something\", selector=lambda x: \"abc\" in x)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"value_transformation\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._transformers: list[Transformer] = []\ndef clear(self):\n\"\"\"Clear all transformers.\"\"\"\nself._transformers = []\ndef add_transformer(\nself,\nfn: Callable[[Any], Any],\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nselector: Callable[[Any], bool] | None = None,\nselector_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Add a transformer for given role.\n        If a selector callable is given, the transformer will only be applied if the\n        selector returns True.\n        The selector receives the content of given data role as an argument.\n        Arguments:\n            fn: Callable to transform data of given role\n            role: Data role to transform\n            selector: Callable to filter the indexes which should be transformed\n            selector_role: Role to use for the selector callable\n        \"\"\"\ntr = Transformer(\nfn=fn,\nrole=role,\nselector=selector,\nselector_role=selector_role,\n)\nself._transformers.append(tr)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nval = super().data(index, role)\nif not self.indexer_contains(index):\nreturn val\nfor t in self._transformers:\nif t.role == role:\nselector_val = super().data(index, t.selector_role)\nif t.selector is None or t.selector(selector_val):\nval = t.fn(selector_val)\nreturn val\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html#prettyqt.itemmodels.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.add_transformer","title":"<code>add_transformer(fn: Callable[[Any], Any], role: constants.ItemDataRole = constants.DISPLAY_ROLE, selector: Callable[[Any], bool] | None = None, selector_role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Add a transformer for given role.</p> <p>If a selector callable is given, the transformer will only be applied if the selector returns True. The selector receives the content of given data role as an argument.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Any], Any]</code> <p>Callable to transform data of given role</p> required <code>role</code> <code>constants.ItemDataRole</code> <p>Data role to transform</p> <code>constants.DISPLAY_ROLE</code> <code>selector</code> <code>Callable[[Any], bool] | None</code> <p>Callable to filter the indexes which should be transformed</p> <code>None</code> <code>selector_role</code> <code>constants.ItemDataRole</code> <p>Role to use for the selector callable</p> <code>constants.DISPLAY_ROLE</code> Source code in <code>prettyqt\\itemmodels\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def add_transformer(\nself,\nfn: Callable[[Any], Any],\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nselector: Callable[[Any], bool] | None = None,\nselector_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Add a transformer for given role.\n    If a selector callable is given, the transformer will only be applied if the\n    selector returns True.\n    The selector receives the content of given data role as an argument.\n    Arguments:\n        fn: Callable to transform data of given role\n        role: Data role to transform\n        selector: Callable to filter the indexes which should be transformed\n        selector_role: Role to use for the selector callable\n    \"\"\"\ntr = Transformer(\nfn=fn,\nrole=role,\nselector=selector,\nselector_role=selector_role,\n)\nself._transformers.append(tr)\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html#prettyqt.itemmodels.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.clear","title":"<code>clear()</code>","text":"<p>Clear all transformers.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def clear(self):\n\"\"\"Clear all transformers.\"\"\"\nself._transformers = []\n</code></pre>"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256643552[\"itemmodels.SliceValueTransformationProxyModel\"]\n  2103256887392[\"itemmodels.SliceIdentityProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256887392 --&gt; 2103256643552\n  2103254404688 --&gt; 2103256887392\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"additional_modules/itemmodels/SliceValueTransformationProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>column_slice</code> QVariantList Column slice to include for the proxy <code>row_slice</code> QVariantList Row slice to include for the proxy"},{"location":"additional_modules/itemmodels/StorageInfoModel.html","title":"StorageInfoModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/StorageInfoModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.ColumnTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\storageinfomodel.py</code> <pre><code>class StorageInfoModel(itemmodels.ColumnTableModel):\nCOLUMNS = [\nRootPathColumn,\nVolumeNameColumn,\nDeviceColumn,\nFileSystemColumn,\nTotalColumn,\nFreeColumn,\nAvailableColumn,\nReadyColumn,\nReadOnlyColumn,\nValidColumn,\n]\nSUPPORTS = Sequence[core.QStorageInfo]\ndef __init__(self, volumes: list[core.QStorageInfo], parent=None):\nsuper().__init__(volumes, self.COLUMNS, parent=parent)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (core.QStorageInfo(), *_):\nreturn True\ncase _:\nreturn False\n</code></pre>"},{"location":"additional_modules/itemmodels/StorageInfoModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256862432[\"itemmodels.StorageInfoModel\"]\n  2103256731872[\"itemmodels.ColumnTableModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256731872 --&gt; 2103256862432\n  2103256729952 --&gt; 2103256731872\n  140736120080256 --&gt; 2103256729952\n  2103254409488 --&gt; 2103256731872\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[PySide6.QtCore.QStorageInfo]</code></p>"},{"location":"additional_modules/itemmodels/StorageInfoModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/SubClassTreeModel.html","title":"SubClassTreeModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SubClassTreeModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseClassTreeModel</code></p> <p>Model to display the subclass tree of a python class.</p> <pre><code>from prettyqt import itemmodels, widgets\napp = widgets.app()\nwidget = widgets.TreeView()\nmodel = itemmodels.SubClassTreeModel(core.AbstractItemModelMixin)\nwidget.set_model(model)\nwidget.show()\n</code></pre> <p></p> Source code in <code>prettyqt\\itemmodels\\classtreemodel.py</code> <pre><code>class SubClassTreeModel(BaseClassTreeModel):\n\"\"\"Model to display the subclass tree of a python class.\n    ```py\n    from prettyqt import itemmodels, widgets\n    app = widgets.app()\n    widget = widgets.TreeView()\n    model = itemmodels.SubClassTreeModel(core.AbstractItemModelMixin)\n    widget.set_model(model)\n    widget.show()\n    ```\n    &lt;figure markdown&gt;\n      ![Image title](abstractitemmodelmixin_subclasses.png)\n    &lt;/figure&gt;\n    \"\"\"\nSUPPORTS = type | types.UnionType\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, type | types.UnionType)\ndef _fetch_object_children(\nself, item: SubClassTreeModel.TreeItem\n) -&gt; list[SubClassTreeModel.TreeItem]:\nif isinstance(item.obj, types.UnionType):\nreturn [self.TreeItem(obj=i) for i in get_args(item.obj)]\nreturn [self.TreeItem(obj=i) for i in item.obj.__subclasses__()]\ndef _has_children(self, item: SubClassTreeModel.TreeItem) -&gt; bool:\nif item.obj is None:\nreturn False\nif isinstance(item.obj, types.UnionType):\nreturn True\nreturn len(item.obj.__subclasses__()) &gt; 0\n</code></pre>"},{"location":"additional_modules/itemmodels/SubClassTreeModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256756832[\"itemmodels.SubClassTreeModel\"]\n  2103256788512[\"itemmodels.BaseClassTreeModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256788512 --&gt; 2103256756832\n  2103254308688 --&gt; 2103256788512\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>type | types.UnionType</code></p>"},{"location":"additional_modules/itemmodels/SubClassTreeModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/SubsetFilterProxyModel.html","title":"SubsetFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/SubsetFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel to filter based on slices, ranges, indexes or Callables.</p>"},{"location":"additional_modules/itemmodels/SubsetFilterProxyModel.html#prettyqt.itemmodels.SubsetFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = itemmodels.SubsetFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\subsetfilterproxymodel.py</code> <pre><code>class SubsetFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A FilterProxyModel to filter based on slices, ranges, indexes or Callables.\n    ### Example\n    ```py\n    proxy = itemmodels.SubsetFilterProxyModel()\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"subset\"\ndef __init__(\nself,\nrow_filter: slice | range | int | Container[int] | Callable | None,\ncolumn_filter: slice | range | int | Container[int] | Callable | None,\n**kwargs,\n):\nself.row_filter = row_filter\nself.column_filter = column_filter\nsuper().__init__(**kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.row_filter, self.column_filter)\ndef filterAcceptsColumn(self, source_column: int, parent: core.ModelIndex) -&gt; bool:\nmatch self.column_filter:\ncase slice() | range():\nreturn helpers.is_in_slice(self.column_filter, source_column)\ncase int():\nreturn source_column == self.column_filter\ncase Container():\nreturn source_column in self.column_filter\ncase Callable():\nreturn self.column_filter(source_column)\ncase None:\nreturn True\ncase _:\nraise ValueError(self.column_filter)\ndef filterAcceptsRow(self, source_row: int, parent: core.ModelIndex) -&gt; bool:\nmatch self.row_filter:\ncase slice() | range():\nreturn helpers.is_in_slice(self.row_filter, source_row)\ncase int():\nreturn source_row == self.row_filter\ncase Container():\nreturn source_row in self.row_filter\ncase Callable():\nreturn self.row_filter(source_row)\ncase None:\nreturn True\ncase _:\nraise ValueError(self.row_filter)\n</code></pre>"},{"location":"additional_modules/itemmodels/SubsetFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256639712[\"itemmodels.SubsetFilterProxyModel\"]\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254426768 --&gt; 2103256639712\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/SubsetFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering"},{"location":"additional_modules/itemmodels/TableToListProxyModel.html","title":"TableToListProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/TableToListProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model to flatten a table to a list.</p> <p>Reshapes a table by concatenating all columns into one large column, so that the new rowCount equals to sourceModel rowCount * sourceModel columnCount. If a verticalHeader is available, it will show the original position of the cell.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\tabletolistproxymodel.py</code> <pre><code>class TableToListProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model to flatten a table to a list.\n    Reshapes a table by concatenating all columns into one large column,\n    so that the new rowCount equals to sourceModel rowCount * sourceModel columnCount.\n    If a verticalHeader is available, it will show the original position of the cell.\n    \"\"\"\nID = \"table_to_list\"\nICON = \"mdi6.table-pivot\"\ndef __init__(self, *args, header_title: str = \"\", **kwargs):\nsuper().__init__(*args, **kwargs)\nself._header_title = header_title\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if self.sourceModel() is None else 1\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self._header_title or None\ncase constants.VERTICAL, constants.DISPLAY_ROLE:\ncol_section = section % super().columnCount()\nrow_section = section // super().columnCount()\npre = super().headerData(col_section, constants.HORIZONTAL, role)\npost = super().headerData(row_section, constants.VERTICAL, role)\npre_str = col_section if pre is None else pre\npost_str = row_section if post is None else post\nreturn f\"{pre_str} | {post_str}\"\nreturn None\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nsource = self.sourceModel()\nreturn 0 if source is None else source.rowCount() * source.columnCount()\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nsource = self.sourceModel()\nif row &lt; 0 or column &lt; 0 or source is None:\nreturn core.ModelIndex()\nsource_parent = self.mapToSource(parent)\ncolcount = source.columnCount()\nsource_index = source.index(row // colcount, row % colcount, source_parent)\nreturn self.mapFromSource(source_index)\ndef mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\nrow = proxy_idx.row()\ncolcount = source.columnCount()\nreturn source.index(row // colcount, row % colcount)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\nsource = self.sourceModel()\nif source is None or not source_index.isValid():\nreturn core.ModelIndex()\nr = source_index.row() * source.columnCount() + source_index.column()\nreturn self.createIndex(r, 0, source_index.internalPointer())\ndef set_header_title(self, title: str):\nself._header_title = title\nself.headerDataChanged.emit(constants.HORIZONTAL, 0, 0)\ndef get_header_title(self) -&gt; str:\nreturn self._header_title\nheader_title = core.Property(\nstr,\nget_header_title,\nset_header_title,\ndoc=\"Column header for resulting column\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/TableToListProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256640672[\"itemmodels.TableToListProxyModel\"]\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254404688 --&gt; 2103256640672\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/TableToListProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>header_title</code> QString Column header for resulting column"},{"location":"additional_modules/itemmodels/TreeModel.html","title":"TreeModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/TreeModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModel</code></p> <p>TreeModel which is used as a base for most TreeModels implemented.</p> <p>Tree gets dynamically populated whenever the the indexes get \"expanded\".</p> <p>basically, only 2 methods need to be defined in order to build the tree:</p> <p>def _fetch_object_children(self, TreeModel.TreeItem) -&gt; list[TreeModel.TreeItem]:     ...</p> <p>def _has_children(self, TreeModel.TreeItem) -&gt; bool:     ...</p> <p>Subclasses can override TreeModel.TreeItem if a child TreeItem class should be used for the root.</p> Source code in <code>prettyqt\\itemmodels\\treemodel.py</code> <pre><code>class TreeModel(core.AbstractItemModel):\n\"\"\"TreeModel which is used as a base for most TreeModels implemented.\n    Tree gets dynamically populated whenever the the indexes get \"expanded\".\n    basically, only 2 methods need to be defined in order to build the tree:\n    def _fetch_object_children(self, TreeModel.TreeItem) -&gt; list[TreeModel.TreeItem]:\n        ...\n    def _has_children(self, TreeModel.TreeItem) -&gt; bool:\n        ...\n    Subclasses can override TreeModel.TreeItem if a child TreeItem class should be used\n    for the root.\n    \"\"\"\nTreeItem = TreeItem\ndef __init__(self, obj=None, show_root: bool = True, **kwargs):\nsuper().__init__(**kwargs)\nself._root_item = self.TreeItem(obj=obj)\nself._show_root = show_root\nself.set_root_item(obj)\n@property\ndef show_root(self) -&gt; bool:\n\"\"\"Return True if the inspected node is visible.\n        In that case an invisible root node has been added.\n        \"\"\"\nreturn self._show_root\ndef set_root_item(self, obj):\nif self._show_root:\nself._root_item = self.TreeItem(obj=None)\nself._root_item.children_fetched = True\nself.inspected_item = self.TreeItem(obj=obj)\nself._root_item.append_child(self.inspected_item)\n# root_index = self.index(0, 0)\n# self.fetchMore(self.index(0, 0, root_index))\nelse:\n# The root itself will be invisible\nself._root_item = self.TreeItem(obj=obj)\nself.inspected_item = self._root_item\nroot_index = self.index(0, 0)\nself.fetchMore(root_index)\n@property\ndef root_item(self) -&gt; TreeModel.TreeItem:\nreturn self._root_item\ndef data_by_index(self, index: core.ModelIndex) -&gt; TreeModel.TreeItem:\nreturn index.internalPointer() if index.isValid() else self.root_item\ndef index_for_item(\nself, item: TreeModel.TreeItem, column: int = 0\n) -&gt; core.ModelIndex:\nif item == self.root_item:\nreturn core.ModelIndex()\nparent = item.parent_item or self.root_item\nif (not parent) or (len(parent.children) == 0):\nreturn None\nrow = parent.children.index(item)\nreturn self.createIndex(row, column, item)\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nif not self.hasIndex(row, column, parent):\nreturn core.ModelIndex()\nparent_item = self.data_by_index(parent)\nchild_item = parent_item.children[row]\nreturn self.createIndex(row, column, child_item)\ndef parent(self, index: core.ModelIndex | None = None) -&gt; core.ModelIndex:\n# hacky way to let the case without any arguments get through.\n# not really nice, a proper dispatch library would be better.\n# functools.singledispatchmethod doesnt work here.\nindex = index or core.ModelIndex()\nif not index.isValid():\nreturn core.ModelIndex()\nchild_item = self.data_by_index(index)\nparent_item = child_item.parent_item\nif parent_item is None or parent_item == self.root_item:\nreturn core.ModelIndex()\nreturn self.createIndex(parent_item.row(), 0, parent_item)\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.column() &gt; 0 else len(self.data_by_index(parent).children)\ndef hasChildren(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\ntreeitem = self.data_by_index(parent)\nif self._show_root and treeitem == self._root_item:\nreturn True\nreturn self._has_children(treeitem)\ndef canFetchMore(self, parent: core.ModelIndex | None = None):\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nelse:\nreturn not self.data_by_index(parent).children_fetched\ndef fetchMore(self, parent: core.ModelIndex | None = None):\n\"\"\"Fetch the children given the model index of a parent node.\n        Adds the children to the parent.\n        \"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn\nparent_item = self.data_by_index(parent)\nif parent_item.children_fetched:\nreturn\ntree_items = self._fetch_object_children(parent_item)\nwith self.insert_rows(0, len(tree_items) - 1, parent):\nfor tree_item in tree_items:\nparent_item.append_child(tree_item)\nparent_item.children_fetched = True\ndef _fetch_object_children(self, treeitem) -&gt; list[TreeModel.TreeItem]:\nreturn treeitem.children\ndef _has_children(self, treeitem) -&gt; bool:\nreturn treeitem.has_children\n</code></pre> Name Children Inherits ColumnItemModelprettyqt.itemmodels.columnitemmodel <ul><li>ImportlibTreeModel</li><li>JsonModel</li><li>BaseXmlModel</li><li>PythonObjectTreeModel</li></ul> <ul><li><code>ColumnItemModelMixin</code></li><li>TreeModel</li></ul> AstModelprettyqt.itemmodels.astmodel <ul><li>TreeModel</li></ul> <code>BaseClassTreeModel</code>prettyqt.itemmodels.classtreemodel <ul><li>SubClassTreeModel</li><li>ParentClassTreeModel</li></ul> <ul><li>TreeModel</li></ul> ModuleInfoModelprettyqt.itemmodels.moduleinfomodel <ul><li>TreeModel</li></ul> TupleTreeModelprettyqt.itemmodels.tupletreemodel <ul><li>TreeModel</li></ul> <code>BaseHierarchyModel</code>prettyqt.itemmodels.widgethierarchymodel <ul><li>WidgetHierarchyModel</li><li>LayoutHierarchyModel</li></ul> <ul><li>TreeModel</li></ul> MarkdownModelprettyqt.prettyqtmarkdown.markdownmodel <ul><li>TreeModel</li></ul> <code>ScrollAreaTocModel</code>prettyqt.custom_widgets.scrollareatocwidget <ul><li>TreeModel</li></ul>"},{"location":"additional_modules/itemmodels/TreeModel.html#prettyqt.itemmodels.treemodel.TreeModel.show_root","title":"<code>show_root: bool</code>  <code>property</code>","text":"<p>Return True if the inspected node is visible.</p> <p>In that case an invisible root node has been added.</p>"},{"location":"additional_modules/itemmodels/TreeModel.html#prettyqt.itemmodels.treemodel.TreeModel.fetchMore","title":"<code>fetchMore(parent: core.ModelIndex | None = None)</code>","text":"<p>Fetch the children given the model index of a parent node.</p> <p>Adds the children to the parent.</p> Source code in <code>prettyqt\\itemmodels\\treemodel.py</code> <pre><code>def fetchMore(self, parent: core.ModelIndex | None = None):\n\"\"\"Fetch the children given the model index of a parent node.\n    Adds the children to the parent.\n    \"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn\nparent_item = self.data_by_index(parent)\nif parent_item.children_fetched:\nreturn\ntree_items = self._fetch_object_children(parent_item)\nwith self.insert_rows(0, len(tree_items) - 1, parent):\nfor tree_item in tree_items:\nparent_item.append_child(tree_item)\nparent_item.children_fetched = True\n</code></pre>"},{"location":"additional_modules/itemmodels/TreeModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/TreeModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/TupleTreeModel.html","title":"TupleTreeModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/TupleTreeModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.TreeModel</code></p> <p>Base Tree Model to display a dict[tuple[Any], str] data structure.</p> <p>The dictionary keys are tuples of path parts, like (\"path\", \"to\", \"something\")</p> <pre><code>model = TupleTreeModel({(\"a\"): \"test2\", (\"a\", \"b\"): \"test\", (\"a\", \"b\", \"c\"): \"test3\"})\ntable = widgets.TreeView()\ntable.set_model(model)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\tupletreemodel.py</code> <pre><code>class TupleTreeModel(itemmodels.TreeModel):\n\"\"\"Base Tree Model to display a dict[tuple[Any], str] data structure.\n    The dictionary keys are tuples of path parts, like (\"path\", \"to\", \"something\")\n    ```py\n    model = TupleTreeModel({(\"a\"): \"test2\", (\"a\", \"b\"): \"test\", (\"a\", \"b\", \"c\"): \"test3\"})\n    table = widgets.TreeView()\n    table.set_model(model)\n    table.show()\n    ```\n    \"\"\"\nSUPPORTS = dict[tuple[Hashable, ...] | pathlib.Path, str]\nHEADER = [\"Name\"]\ndef __init__(self, mapping: dict, **kwargs):\nsuper().__init__((), **kwargs)\nself.mapping = {(): \"root\"} | mapping\ndef columnCount(self, parent: core.ModelIndex | None = None):\nreturn len(self.HEADER)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role, section:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE, _:\nreturn self.HEADER[section]\nreturn None\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\ntup = self.data_by_index(index).obj\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn str(self.mapping[tup])\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase dict() if all(\nisinstance(k, pathlib.Path | tuple) for k in instance.keys() and instance\n):\nreturn True\nreturn False\ndef _fetch_object_children(\nself, item: TupleTreeModel.TreeItem\n) -&gt; list[TupleTreeModel.TreeItem]:\nparts = item.obj.parts if isinstance(item.obj, pathlib.Path) else item.obj\nreturn [\nself.TreeItem(obj=k)\nfor k in self.mapping.keys()\nif len(k) == len(parts) + 1\nand all(parent_part == k[i] for i, parent_part in enumerate(parts))\n]\ndef _has_children(self, item: TupleTreeModel.TreeItem) -&gt; bool:\nparts = item.obj.parts if isinstance(item.obj, pathlib.Path) else item.obj\nreturn any(\nlen(k) == len(parts) + 1\nand all(parent_part == k[i] for i, parent_part in enumerate(parts))\nfor k in self.mapping.keys()\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/TupleTreeModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256836512[\"itemmodels.TupleTreeModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254308688 --&gt; 2103256836512\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>dict[tuple[collections.abc.Hashable, ...] | pathlib.Path, str]</code></p>"},{"location":"additional_modules/itemmodels/TupleTreeModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/ValueFilterProxyModel.html","title":"ValueFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/ValueFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>Proxy model for filtering based on non-str values.</p> <p>Sometimes it is needed to filter for non-str values, especially when it is required to filter based on a different role than DisplayRole.</p> <p>Same as the Qt QSortFilterProxyModel, this proxy respects the filterRole and filterKeyColumn properties.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\valuefilterproxymodel.py</code> <pre><code>class ValueFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"Proxy model for filtering based on non-str values.\n    Sometimes it is needed to filter for non-str values, especially when it is required\n    to filter based on a different role than DisplayRole.\n    Same as the Qt QSortFilterProxyModel, this proxy respects the filterRole and\n    filterKeyColumn properties.\n    \"\"\"\nID = \"value_filter\"\ndef __init__(self, filter_value=None, **kwargs):\nself._filter_value = filter_value\nsuper().__init__(**kwargs)\ndef __repr__(self):\nreturn get_repr(self, self._filter_value)\ndef filterAcceptsRow(self, source_row: int, parent: core.ModelIndex) -&gt; bool:\nif self._filter_value is None:\nreturn True\ncolumn = self.filterKeyColumn()\nrole = self.filterRole()\nsource_model = self.sourceModel()\nidx = source_model.index(source_row, column, parent)\nvalue = source_model.data(idx, role)\nreturn value == self._filter_value\ndef set_filter_value(self, value):\n\"\"\"Set the filter value.\"\"\"\nself._filter_value = value\nself.invalidateRowsFilter()\ndef get_filter_value(self):\n\"\"\"Get the filter value.\"\"\"\nreturn self._filter_value\nfilter_value = core.Property(\nobject,\nget_filter_value,\nset_filter_value,\nuser=True,\ndoc=\"Value to use for filtering\",\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/ValueFilterProxyModel.html#prettyqt.itemmodels.proxies.valuefilterproxymodel.ValueFilterProxyModel.get_filter_value","title":"<code>get_filter_value()</code>","text":"<p>Get the filter value.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\valuefilterproxymodel.py</code> <pre><code>def get_filter_value(self):\n\"\"\"Get the filter value.\"\"\"\nreturn self._filter_value\n</code></pre>"},{"location":"additional_modules/itemmodels/ValueFilterProxyModel.html#prettyqt.itemmodels.proxies.valuefilterproxymodel.ValueFilterProxyModel.set_filter_value","title":"<code>set_filter_value(value)</code>","text":"<p>Set the filter value.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\valuefilterproxymodel.py</code> <pre><code>def set_filter_value(self, value):\n\"\"\"Set the filter value.\"\"\"\nself._filter_value = value\nself.invalidateRowsFilter()\n</code></pre>"},{"location":"additional_modules/itemmodels/ValueFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256650272[\"itemmodels.ValueFilterProxyModel\"]\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254426768 --&gt; 2103256650272\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/itemmodels/ValueFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering <code>filter_value</code> PySide::PyObjectWrapper Value to use for filtering"},{"location":"additional_modules/itemmodels/WidgetHierarchyModel.html","title":"WidgetHierarchyModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/WidgetHierarchyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseHierarchyModel</code></p> <p>Tree model showing the child tree of a QObject.</p> Source code in <code>prettyqt\\itemmodels\\widgethierarchymodel.py</code> <pre><code>class WidgetHierarchyModel(BaseHierarchyModel):\n\"\"\"Tree model showing the child tree of a QObject.\"\"\"\nSUPPORTS = core.QObject\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, core.QObject)\ndef _fetch_object_children(\nself, item: WidgetHierarchyModel.TreeItem\n) -&gt; list[WidgetHierarchyModel.TreeItem]:\nreturn [\nself.TreeItem(obj=i)\nfor i in item.obj.findChildren(\nself.BaseClass, None, constants.FindChildOption.FindDirectChildrenOnly\n)\n]\ndef _has_children(self, item: WidgetHierarchyModel.TreeItem) -&gt; bool:\nreturn bool(\nitem.obj.findChildren(\nself.BaseClass, None, constants.FindChildOption.FindDirectChildrenOnly\n)\n)\n</code></pre>"},{"location":"additional_modules/itemmodels/WidgetHierarchyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256885472[\"itemmodels.WidgetHierarchyModel\"]\n  2103256880672[\"itemmodels.BaseHierarchyModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256880672 --&gt; 2103256885472\n  2103254308688 --&gt; 2103256880672\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>&lt;class 'PySide6.QtCore.QObject'&gt;</code></p>"},{"location":"additional_modules/itemmodels/WidgetHierarchyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>base_class_name</code> QString Class to use for the columns."},{"location":"additional_modules/itemmodels/WidgetsDetailsModel.html","title":"WidgetsDetailsModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/WidgetsDetailsModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractTableModel</code></p> Source code in <code>prettyqt\\itemmodels\\widgetsdetailsmodel.py</code> <pre><code>class WidgetsDetailsModel(core.AbstractTableModel):\nSUPPORTS = Sequence[core.QObject]\ndef __init__(self, items: Sequence[core.QObject], **kwargs):\nsuper().__init__(**kwargs)\nself.items = items\ncommon_ancestor = classhelpers.find_common_ancestor([type(i) for i in self.items])\nlogger.debug(f\"{type(self).__name__}: found common ancestor {common_ancestor}\")\nself.props = core.MetaObject(common_ancestor.staticMetaObject).get_properties(\nonly_stored=True\n)\nself.props.sort(key=lambda x: x.get_name())\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (core.QObject(), *_):\nreturn True\ncase _:\nreturn False\ndef columnCount(self, parent: core.ModelIndex | None = None):\nreturn len(self.props)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role, section:\ncase constants.VERTICAL, constants.DISPLAY_ROLE, _:\nwidget = self.items[section]\nreturn repr(widget)\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE, _:\nreturn self.props[section].get_name()\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nprop = self.props[index.column()]\nwidget = self.items[index.row()]\nvalue = prop.read(widget)\nif isinstance(value, bool) and role == constants.CHECKSTATE_ROLE:\nreturn self.to_checkstate(value)\nmatch role:\ncase (\nconstants.DISPLAY_ROLE | constants.EDIT_ROLE | constants.USER_ROLE\n) if not isinstance(value, bool):\nreturn value\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nprop = self.props[index.column()]\nwidget = self.items[index.row()]\nmatch role:\ncase constants.USER_ROLE | constants.EDIT_ROLE:\nwith self.reset_model():\nprop.write(widget, value)\n# self.update_row(index.row())\nreturn True\ncase constants.CHECKSTATE_ROLE:\nwith self.reset_model():\nprop.write(widget, bool(value))\n# self.update_row(index.row())\nreturn True\nreturn False\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.items)\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nprop = self.props[index.column()]\nif prop.isWritable() and prop.get_python_type() is bool:\nreturn super().flags(index) | constants.IS_CHECKABLE\nif prop.isWritable():\nreturn super().flags(index) | constants.IS_EDITABLE\nreturn constants.IS_SELECTABLE\n</code></pre>"},{"location":"additional_modules/itemmodels/WidgetsDetailsModel.html#prettyqt.itemmodels.widgetsdetailsmodel.WidgetsDetailsModel.rowCount","title":"<code>rowCount(parent: core.ModelIndex | None = None) -&gt; int</code>","text":"<p>Override for AbstractitemModel base method.</p> Source code in <code>prettyqt\\itemmodels\\widgetsdetailsmodel.py</code> <pre><code>def rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n\"\"\"Override for AbstractitemModel base method.\"\"\"\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0:\nreturn 0\nreturn 0 if parent.isValid() else len(self.items)\n</code></pre>"},{"location":"additional_modules/itemmodels/WidgetsDetailsModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256876832[\"itemmodels.WidgetsDetailsModel\"]\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254409488 --&gt; 2103256876832\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>collections.abc.Sequence[PySide6.QtCore.QObject]</code></p>"},{"location":"additional_modules/itemmodels/WidgetsDetailsModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/itemmodels/XmlModel.html","title":"XmlModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/itemmodels/XmlModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseXmlModel</code></p> <p>Semi-lazy xml model. Fetches all direct child nodes when needed.</p> <p>Model cant be modified, that only really makes sense for a full DOM implementation.</p> Source code in <code>prettyqt\\itemmodels\\xmlmodel.py</code> <pre><code>class XmlModel(BaseXmlModel):\n\"\"\"Semi-lazy xml model. Fetches all direct child nodes when needed.\n    Model cant be modified, that only really makes sense for a full DOM implementation.\n    \"\"\"\nSUPPORTS = io.StringIO | str | datatypes.IsTreeIterator | ET.ElementTree\ndef __init__(\nself,\nobj: str | datatypes.IsTreeIterator | ET.ElementTree,\nshow_root: bool = True,\n**kwargs,\n):\nmatch obj:\ncase io.StringIO():\ncontext = ET.iterparse(obj, events=(\"start\",))\n_, root = next(context)\ncase str():\ncontext = ET.iterparse(io.StringIO(obj), events=(\"start\",))\n_, root = next(context)\ncase datatypes.IsTreeIterator():\n_, root = next(obj)\ncase ET.ElementTree():\nxml_str = ET.tostring(obj._root, encoding=\"unicode\")\ncontext = ET.iterparse(io.StringIO(xml_str), events=(\"start\",))\n_, root = next(context)\ncase _:\nraise TypeError(obj)\nsuper().__init__(obj=root, **kwargs)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase datatypes.IsTreeIterator() | ET.ElementTree():\nreturn True\ncase _:\nreturn False\ndef get_parent_node(self, node_or_index: core.ModelIndex | ET.Element):\n# only lxml has Element.getparent()\n# for builtin Elements we need to go through indexes since we do not have a\n# full ElementTree.\n# might be worth having two XML models, a lazy one and a full-featured one.\n# Then we could use xpath to get parent here.\nif isinstance(node_or_index, core.ModelIndex):\nindex = node_or_index\nelif indexes := self.search_tree(\nnode_or_index, role=self.Roles.NodeRole, max_results=1\n):\nindex = indexes[0]\nelse:\nreturn None\nparent = index.parent()\nreturn parent.data(self.Roles.NodeRole)\n</code></pre>"},{"location":"additional_modules/itemmodels/XmlModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256839392[\"itemmodels.XmlModel\"]\n  2103256831712[\"itemmodels.BaseXmlModel\"]\n  2103256730912[\"itemmodels.ColumnItemModel\"]\n  2103256729952[\"itemmodels.ColumnItemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256831712 --&gt; 2103256839392\n  2103256730912 --&gt; 2103256831712\n  2103256729952 --&gt; 2103256730912\n  140736120080256 --&gt; 2103256729952\n  2103254308688 --&gt; 2103256730912\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre> <p>Info</p> <p>Supported data type: <code>_io.StringIO | str | prettyqt.utils.datatypes.IsTreeIterator | xml.etree.ElementTree.ElementTree</code></p>"},{"location":"additional_modules/itemmodels/XmlModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/paths/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>paths</li> </ul>"},{"location":"additional_modules/prettyqtmarkdown/index.html","title":"prettyqtmarkdown","text":"Name Children Inherits MarkdownModelprettyqt.prettyqtmarkdown.markdownmodel <ul><li>TreeModel</li></ul> DependencyTableprettyqt.prettyqtmarkdown.itemmodeltable <ul><li>ItemModelTable</li></ul> MarkdownWidgetprettyqt.prettyqtmarkdown.markdownwidget <ul><li>Widget</li></ul> PropertyTableprettyqt.prettyqtmarkdown.propertytable <ul><li><code>MkTable</code></li></ul> WidgetScreenShotprettyqt.prettyqtmarkdown.widgetscreenshot <ul><li><code>MkBinaryImage</code></li></ul> PrettyQtDiagramprettyqt.prettyqtmarkdown.prettyqtdiagram <ul><li>object</li></ul> ItemModelTableprettyqt.prettyqtmarkdown.itemmodeltableTable which can display Qt ItemModels. <ul><li>DependencyTable</li></ul> <ul><li><code>MkTable</code></li></ul> PrettyQtClassPageprettyqt.prettyqtmarkdown.prettyqtclasspage <ul><li><code>MkClassPage</code></li></ul>"},{"location":"additional_modules/prettyqtmarkdown/DependencyTable.html","title":"DependencyTable","text":""},{"location":"additional_modules/prettyqtmarkdown/DependencyTable.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ItemModelTable</code></p> Source code in <code>prettyqt\\prettyqtmarkdown\\itemmodeltable.py</code> <pre><code>class DependencyTable(ItemModelTable):\ndef __init__(self, distribution: str | metadata.Distribution = \"prettyqt\"):\nmodel = itemmodels.ImportlibTreeModel(distribution)\nproxy = itemmodels.ColumnOrderProxyModel(\norder=[\"Name\", \"Constraints\", \"Extra\", \"Summary\", \"Homepage\"],\nsource_model=model,\n)\nsuper().__init__(proxy)\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/DependencyTable.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256632992[\"prettyqtmarkdown.DependencyTable\"]\n  2103256636832[\"prettyqtmarkdown.ItemModelTable\"]\n  2103243913296[\"mktable.MkTable\"]\n  2103243916176[\"mknode.MkNode\"]\n  2103243924816[\"node.Node\"]\n  140736120080256[\"builtins.object\"]\n  2103256636832 --&gt; 2103256632992\n  2103243913296 --&gt; 2103256636832\n  2103243916176 --&gt; 2103243913296\n  2103243924816 --&gt; 2103243916176\n  140736120080256 --&gt; 2103243924816</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/ItemModelTable.html","title":"ItemModelTable","text":""},{"location":"additional_modules/prettyqtmarkdown/ItemModelTable.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>mknodes.MkTable</code></p> <p>Table which can display Qt ItemModels.</p> <p>The given ItemModel will get proxied with a ProxyModel which translates data from some of the ItemRoles to Markup styling, and afterwords converted to a Markup table.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>core.AbstractItemModelMixin</code> <p>The ItemModel to display.</p> required <code>use_checkstate_role</code> <code>bool</code> <p>whether to display the CheckStateRole value if available.</p> <code>True</code> <code>kwargs</code> <code>Any</code> <p>Keyword arguments passed to get_table_data.</p> <code>{}</code> Source code in <code>prettyqt\\prettyqtmarkdown\\itemmodeltable.py</code> <pre><code>class ItemModelTable(mknodes.MkTable):\n\"\"\"Table which can display Qt ItemModels.\n    The given ItemModel will get proxied with a ProxyModel which translates\n    data from some of the ItemRoles to Markup styling, and afterwords converted\n    to a Markup table.\n    Arguments:\n        model: The ItemModel to display.\n        use_checkstate_role: whether to display the CheckStateRole value if available.\n        kwargs: Keyword arguments passed to get_table_data.\n    \"\"\"\ndef __init__(\nself,\nmodel: core.AbstractItemModelMixin,\nuse_checkstate_role: bool = True,\n**kwargs: Any,\n):\nproxy = itemmodels.SliceToMarkdownProxyModel(None, source_model=model)\ndata, h_header, _ = proxy.get_table_data(\nuse_checkstate_role=use_checkstate_role, **kwargs\n)\ndata = list(zip(*data))\nsuper().__init__(data, columns=h_header)\n</code></pre> Name Children Inherits DependencyTableprettyqt.prettyqtmarkdown.itemmodeltable <ul><li>ItemModelTable</li></ul>"},{"location":"additional_modules/prettyqtmarkdown/ItemModelTable.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256636832[\"prettyqtmarkdown.ItemModelTable\"]\n  2103243913296[\"mktable.MkTable\"]\n  2103243916176[\"mknode.MkNode\"]\n  2103243924816[\"node.Node\"]\n  140736120080256[\"builtins.object\"]\n  2103243913296 --&gt; 2103256636832\n  2103243916176 --&gt; 2103243913296\n  2103243924816 --&gt; 2103243916176\n  140736120080256 --&gt; 2103243924816</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownModel.html","title":"MarkdownModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>itemmodels.TreeModel</code></p> Source code in <code>prettyqt\\prettyqtmarkdown\\markdownmodel.py</code> <pre><code>class MarkdownModel(itemmodels.TreeModel):\nclass Roles:\nMarkdownRole = constants.USER_ROLE + 5325\ndef columnCount(self, index: core.ModelIndex | None = None) -&gt; int:\nreturn 3\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ndata = self.data_by_index(index).obj\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, 0:\nreturn repr(data)\ncase constants.DISPLAY_ROLE, 1:\nreturn data.to_markdown().count(\"\\n\")\n# case constants.DISPLAY_ROLE, 2:\n#     return data.to_markdown()\ncase self.Roles.MarkdownRole, _:\nreturn data.to_markdown()\ndef _fetch_object_children(self, item) -&gt; list[MarkdownModel.TreeItem]:\nreturn [self.TreeItem(i) for i in item.obj.children]\ndef _has_children(self, item) -&gt; bool:\nreturn len(item.obj.children) &gt; 0\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256657952[\"prettyqtmarkdown.MarkdownModel\"]\n  2103254308688[\"itemmodels.TreeModel\"]\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254308688 --&gt; 2103256657952\n  2103254405648 --&gt; 2103254308688\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/prettyqtmarkdown/MarkdownWidget.html","title":"MarkdownWidget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code></p> Source code in <code>prettyqt\\prettyqtmarkdown\\markdownwidget.py</code> <pre><code>class MarkdownWidget(widgets.Widget):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.tree = widgets.TreeView()\nself.textbox = custom_widgets.CodeEditor()\nself.textbox.set_syntaxhighlighter(\"markdown\")\nlayout = self.set_layout(\"grid\")\nlayout[0, 0] = self.tree\nlayout[0, 1] = self.textbox\ndef set_markdown(self, item: mknodes.MkNode):\nmodel = prettyqtmarkdown.MarkdownModel(item)\nself.tree.set_model(model)\nself.tree.selectionModel().currentRowChanged.connect(self._on_current_change)\ndef _on_current_change(self, new, old):\ntext = new.data(new.model().Roles.MarkdownRole)\nself.textbox.set_text(text)\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261635232[\"prettyqtmarkdown.MarkdownWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261115840 --&gt; 2103261635232\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/MarkdownWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"additional_modules/prettyqtmarkdown/PrettyQtClassPage.html","title":"PrettyQtClassPage","text":""},{"location":"additional_modules/prettyqtmarkdown/PrettyQtClassPage.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>mknodes.MkClassPage</code></p> Source code in <code>prettyqt\\prettyqtmarkdown\\prettyqtclasspage.py</code> <pre><code>class PrettyQtClassPage(mknodes.MkClassPage):\ndef _build(self):\nif qt_parent := classhelpers.get_qt_parent_class(self.klass):\nself.append(f\"Qt Base Class: {helpers.link_for_class(qt_parent)}\")\nself.append(f\"Signature: `{qt_parent.__doc__}`\")\nsuper()._build()\nif issubclass(self.klass, itemmodels.SliceIdentityProxyModel):\nadmonition = mknodes.MkAdmonition(SLICE_PROXY_INFO)\nself.append(admonition)\nif (\nissubclass(self.klass, core.AbstractItemModelMixin)\nand self.klass.IS_RECURSIVE\n):\nadmonition = mknodes.MkAdmonition(RECURSIVE_MODEL_INFO, \"warning\")\nself.append(admonition)\nif (\nissubclass(self.klass, core.AbstractItemModelMixin)\nand self.klass.DELEGATE_DEFAULT is not None\n):\nmsg = f\"Recommended delegate: {self.klass.DELEGATE_DEFAULT!r}\"\nadmonition = mknodes.MkAdmonition(msg)\nself.append(admonition)\nif issubclass(self.klass, core.AbstractItemModelMixin) and hasattr(\nself.klass, \"SUPPORTS\"\n):\nmsg = f\"Supported data type: `{self.klass.SUPPORTS}`\"\nadmonition = mknodes.MkAdmonition(msg)\nself.append(admonition)\nif issubclass(self.klass, core.QObject):\ntable = prettyqtmarkdown.PropertyTable(self.klass, header=\"Property table\")\nself.append(table)\nif hasattr(self.klass, \"ID\") and issubclass(self.klass, gui.Validator):\nself.append(f\"\\n\\nValidator ID: **{self.klass.ID}**\\n\\n\")\nif hasattr(self.klass, \"ID\") and issubclass(\nself.klass, widgets.AbstractItemDelegateMixin\n):\nself.append(f\"\\n\\nDelegate ID: **{self.klass.ID}**\\n\\n\")\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/PrettyQtClassPage.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261645792[\"prettyqtmarkdown.PrettyQtClassPage\"]\n  2103243928656[\"mkclasspage.MkClassPage\"]\n  2103243958416[\"mkpage.MkPage\"]\n  2103243909456[\"mkcontainer.MkContainer\"]\n  2103243916176[\"mknode.MkNode\"]\n  2103243924816[\"node.Node\"]\n  140736120080256[\"builtins.object\"]\n  2103243928656 --&gt; 2103261645792\n  2103243958416 --&gt; 2103243928656\n  2103243909456 --&gt; 2103243958416\n  2103243916176 --&gt; 2103243909456\n  2103243924816 --&gt; 2103243916176\n  140736120080256 --&gt; 2103243924816</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/PrettyQtDiagram.html","title":"PrettyQtDiagram","text":""},{"location":"additional_modules/prettyqtmarkdown/PrettyQtDiagram.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\prettyqtmarkdown\\prettyqtdiagram.py</code> <pre><code>class PrettyQtDiagram:\npass\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/PrettyQtDiagram.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261640032[\"prettyqtmarkdown.PrettyQtDiagram\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261640032</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/PropertyTable.html","title":"PropertyTable","text":""},{"location":"additional_modules/prettyqtmarkdown/PropertyTable.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>mknodes.MkTable</code></p> Source code in <code>prettyqt\\prettyqtmarkdown\\propertytable.py</code> <pre><code>class PropertyTable(mknodes.MkTable):\ndef __init__(\nself,\nqobject: type[core.QObject],\nuser_prop_name: str | None = None,\nheader: str = \"\",\n):\nlines = []\nheaders = [\"Qt Property\", \"Type\", \"Doc\"]\nproperties = core.MetaObject(qobject.staticMetaObject).get_properties()\ndoc_dict = core.Property.get_doc_dict(qobject)\nfor prop in properties:\nproperty_name = f\"`{prop.get_name()}`\"\nif prop.get_name() == user_prop_name:\nproperty_name += \" *(User property)*\"\n# if (flag := prop.get_enumerator()):\nmeta_type = prop.get_meta_type()\nlabel = (meta_type.get_name() or \"\").rstrip(\"*\")\ndoc = doc_dict.get(prop.get_name(), \"\")\n# mark = \"x\" if prop.get_name() == user_prop_name else \"\"\nsections = [property_name, f\"**{label}**\", doc]\nlines.append(sections)\nsuper().__init__(columns=headers, data=list(zip(*lines)), header=header)\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/PropertyTable.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261640992[\"prettyqtmarkdown.PropertyTable\"]\n  2103243913296[\"mktable.MkTable\"]\n  2103243916176[\"mknode.MkNode\"]\n  2103243924816[\"node.Node\"]\n  140736120080256[\"builtins.object\"]\n  2103243913296 --&gt; 2103261640992\n  2103243916176 --&gt; 2103243913296\n  2103243924816 --&gt; 2103243916176\n  140736120080256 --&gt; 2103243924816</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>prettyqtmarkdown</li> <li>MarkdownModel</li> <li>DependencyTable</li> <li>MarkdownWidget</li> <li>PropertyTable</li> <li>WidgetScreenShot</li> <li>PrettyQtDiagram</li> <li>ItemModelTable</li> <li>PrettyQtClassPage</li> </ul>"},{"location":"additional_modules/prettyqtmarkdown/WidgetScreenShot.html","title":"WidgetScreenShot","text":""},{"location":"additional_modules/prettyqtmarkdown/WidgetScreenShot.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>mknodes.MkBinaryImage</code></p> Source code in <code>prettyqt\\prettyqtmarkdown\\widgetscreenshot.py</code> <pre><code>class WidgetScreenShot(mknodes.MkBinaryImage):\ndef __init__(\nself,\nwidget: widgets.QWidget,\npath: str,\ncaption: str = \"\",\ntitle: str = \"Image title\",\nheader: str = \"\",\nresize_to: datatypes.SizeType | None = None,\n):\nlogger.info(f\"Screenshot for {widget}\")\nwidget.setAttribute(constants.WidgetAttribute.WA_DontShowOnScreen)\n# widget.add(widget)\nwidgets.app().processEvents()\nwidget.show()\nwidgets.app().processEvents()\nwidget.adjustSize()\nwidgets.app().processEvents()\npixmap = widget.grab()\nwidgets.app().processEvents()\nwidget.hide()\nwidgets.app().processEvents()\nba = core.ByteArray()\nbuffer = core.QBuffer(ba)\nbuffer.open(core.QIODeviceBase.OpenModeFlag.WriteOnly)\npixmap.save(buffer, \"PNG\")\nsuper().__init__(\ndata=ba.data(), path=path, header=header, caption=caption, title=title\n)\n</code></pre>"},{"location":"additional_modules/prettyqtmarkdown/WidgetScreenShot.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261648672[\"prettyqtmarkdown.WidgetScreenShot\"]\n  2103243925776[\"mkbinaryimage.MkBinaryImage\"]\n  2103243911376[\"mkimage.MkImage\"]\n  2103243916176[\"mknode.MkNode\"]\n  2103243924816[\"node.Node\"]\n  140736120080256[\"builtins.object\"]\n  2103243925776 --&gt; 2103261648672\n  2103243911376 --&gt; 2103243925776\n  2103243916176 --&gt; 2103243911376\n  2103243924816 --&gt; 2103243916176\n  140736120080256 --&gt; 2103243924816</code></pre>"},{"location":"additional_modules/qt/index.html","title":"qt","text":"<p>Provides Qt init stuff.</p>"},{"location":"additional_modules/qt/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>qt</li> </ul>"},{"location":"additional_modules/qtpandas/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>qtpandas</li> </ul>"},{"location":"additional_modules/syntaxhighlighters/index.html","title":"syntaxhighlighters","text":"<p>syntaxhighlighters module.</p> <p>contains some custom syntax highlighers</p> Name Children Inherits YamlHighlighterprettyqt.syntaxhighlighters.yamlhighlighter <ul><li>SyntaxHighlighter</li></ul> SelectedWordHighlighterprettyqt.syntaxhighlighters.selectedwordhighlighter <ul><li>SyntaxHighlighter</li></ul> JsonHighlighterprettyqt.syntaxhighlighters.jsonhighlighter <ul><li>SyntaxHighlighter</li></ul> RegexMatchHighlighterprettyqt.syntaxhighlighters.regexmatchhighlighter <ul><li>SyntaxHighlighter</li></ul> PygmentsHighlighterprettyqt.syntaxhighlighters.pygmentshighlighter <ul><li>SyntaxHighlighter</li></ul> HighlightRuleprettyqt.syntaxhighlighters.highlightruleHighlightRule(regex: 'str | list[str]' = '', color: 'str' = 'black', italic: 'bool' = False, bold: 'bool' = False, minimal: 'bool' = False, font_size: 'float | None' = None, nth: 'int' = 0, fmt: 'gui.TextCharFormat' = &lt;factory&gt;) <ul><li><code>Rule</code></li><li><code>Rule</code></li><li><code>Rule</code></li></ul> <ul><li>object</li></ul> MarkdownHighlighterprettyqt.syntaxhighlighters.markdownhighlighter <ul><li>SyntaxHighlighter</li></ul> PythonHighlighterprettyqt.syntaxhighlighters.pythonhighlighter <ul><li>SyntaxHighlighter</li></ul>"},{"location":"additional_modules/syntaxhighlighters/HighlightRule.html","title":"HighlightRule","text":""},{"location":"additional_modules/syntaxhighlighters/HighlightRule.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\syntaxhighlighters\\highlightrule.py</code> <pre><code>@dataclass\nclass HighlightRule:\nregex: str | list[str] = \"\"\ncolor: str = \"black\"\nitalic: bool = False\nbold: bool = False\nminimal: bool = False\nfont_size: float | None = None\nnth: int = 0\ncompiled = None\nfmt: gui.TextCharFormat = field(default_factory=gui.TextCharFormat)\ndef __init_subclass__(cls):\nsuper().__init_subclass__()\nif isinstance(cls.regex, str):\ncls.compiled = re.compile(cls.regex)\n# cls.compiled.setMinimal(True)\nelse:\ncls.compiled = [re.compile(r) for r in cls.regex]\ncls.fmt = cls.get_format()\n@classmethod\ndef get_format(cls) -&gt; gui.TextCharFormat:\nfmt = gui.TextCharFormat()\nfmt.setFontItalic(cls.italic)\nfmt.set_foreground_color(cls.color)\nif cls.font_size:\nfmt.setFontPointSize(cls.font_size)\nif cls.bold:\nfmt.set_font_weight(\"bold\")\nreturn fmt\n</code></pre> Name Children Inherits <code>Rule</code>prettyqt.syntaxhighlighters.markdownhighlighter <ul><li><code>Link</code></li><li>Image</li><li><code>Heading1</code></li><li><code>Heading2</code></li><li><code>Heading3</code></li><li><code>Heading4</code></li><li><code>Heading5</code></li><li><code>Heading6</code></li><li><code>Emphasis</code></li><li><code>Strong</code></li><li>...</li></ul> <ul><li>HighlightRule</li></ul> <code>Rule</code>prettyqt.syntaxhighlighters.pythonhighlighter <ul><li><code>Keyword</code></li><li><code>Operator</code></li><li><code>Bracket</code></li><li><code>Self</code></li><li><code>String</code></li><li><code>Def</code></li><li><code>Class</code></li><li><code>Comment</code></li><li><code>Number</code></li></ul> <ul><li>HighlightRule</li></ul> <code>Rule</code>prettyqt.syntaxhighlighters.yamlhighlighter <ul><li><code>Bool</code></li><li><code>Decimal</code></li><li><code>Rule2</code></li><li><code>Rule3</code></li><li><code>ListMember</code></li><li><code>DocumentStart</code></li><li><code>Brackets</code></li><li><code>Rule7</code></li><li><code>Rule8</code></li><li><code>DocType</code></li><li>...</li></ul> <ul><li>HighlightRule</li></ul>"},{"location":"additional_modules/syntaxhighlighters/HighlightRule.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261262720[\"syntaxhighlighters.HighlightRule\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261262720</code></pre>"},{"location":"additional_modules/syntaxhighlighters/JsonHighlighter.html","title":"JsonHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/JsonHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\jsonhighlighter.py</code> <pre><code>class JsonHighlighter(gui.SyntaxHighlighter):\ndef highlightBlock(self, text: str):\n\"\"\"Highlight a block of code using the rules outlined in the Constructor.\"\"\"\nfor m in BRACKETS.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], SYMBOL_FORMAT)\ntext.replace('\\\\\"', \"  \")\nfor m in REGEXP1.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], NAME_FORMAT)\nfor m in REGEXP2.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], VALUE_FORMAT)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/JsonHighlighter.html#prettyqt.syntaxhighlighters.jsonhighlighter.JsonHighlighter.highlightBlock","title":"<code>highlightBlock(text: str)</code>","text":"<p>Highlight a block of code using the rules outlined in the Constructor.</p> Source code in <code>prettyqt\\syntaxhighlighters\\jsonhighlighter.py</code> <pre><code>def highlightBlock(self, text: str):\n\"\"\"Highlight a block of code using the rules outlined in the Constructor.\"\"\"\nfor m in BRACKETS.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], SYMBOL_FORMAT)\ntext.replace('\\\\\"', \"  \")\nfor m in REGEXP1.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], NAME_FORMAT)\nfor m in REGEXP2.finditer(text):\nself.setFormat(m.span()[0], m.span()[1] - m.span()[0], VALUE_FORMAT)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/JsonHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261231040[\"syntaxhighlighters.JsonHighlighter\"]\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256724192 --&gt; 2103261231040\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/syntaxhighlighters/JsonHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/syntaxhighlighters/MarkdownHighlighter.html","title":"MarkdownHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/MarkdownHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\markdownhighlighter.py</code> <pre><code>class MarkdownHighlighter(gui.SyntaxHighlighter):\nRULES = Rule.__subclasses__()\ndef highlightBlock(self, text: str):\nsuper().highlightBlock(text)\nself.setCurrentBlockState(0)\nself._match_multiline(text, *TRI_SINGLE)\ndef _match_multiline(\nself, text: str, delimiter: core.RegularExpression, style: gui.TextCharFormat\n):\n# If inside triple-single quotes, start at 0\nif self.previousBlockState() == 1:\nstart = 0\nadd = 0\n# Otherwise, look for the delimiter on this line\nelse:\nmatch = delimiter.match(text)\nif not match.hasMatch():\nreturn\nstart = match.capturedStart()\nadd = match.capturedLength()\n# As long as there's a delimiter match on this line...\nwhile start &gt;= 0:\n# Look for the ending delimiter\nmatch = delimiter.match(text, start + add)\nend = match.capturedStart()\n# Ending delimiter on this line?\nif end &gt;= add:\nlength = end + match.capturedLength()\nself.setCurrentBlockState(0)\n# No; multi-line string\nelse:\nself.setCurrentBlockState(1)\nlength = len(text)\nself.setFormat(start, length - start + add, style)\n# Look for the next match\nstart = delimiter.match(text, start + length).capturedStart()\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/MarkdownHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261269440[\"syntaxhighlighters.MarkdownHighlighter\"]\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256724192 --&gt; 2103261269440\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/syntaxhighlighters/MarkdownHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/syntaxhighlighters/PygmentsHighlighter.html","title":"PygmentsHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/PygmentsHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> <p>Syntax highlighter that uses Pygments for parsing.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>class PygmentsHighlighter(gui.SyntaxHighlighter):\n\"\"\"Syntax highlighter that uses Pygments for parsing.\"\"\"\n# ---------------------------------------------------------------------------\n#  \"QSyntaxHighlighter\" interface\n# ---------------------------------------------------------------------------\ndef __init__(\nself,\nparent: gui.QTextDocument,\nlexer: str,\nstyle: None | StyleStr = None,\n):\nsuper().__init__(parent)\nself._document = self.document()\nself._formatter = html.HtmlFormatter(nowrap=True)\nself._style = None\nself._stylename = \"\"\nif style is None:\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\nself.set_style(style)\nif lexer == \"regex\":\nself._lexer = lexers.load_lexer_from_file(str(paths.RE_LEXER_PATH))\nelse:\nself._lexer = lexers.get_lexer_by_name(lexer)\ndef __repr__(self):\nreturn get_repr(self, lexer=self._lexer.aliases[0])\ndef highlightBlock(self, string):\n\"\"\"Highlight a block of text.\"\"\"\nif (prev_data := self.currentBlock().previous().userData()) is not None:\nself._lexer._saved_state_stack = prev_data.syntax_stack\nelif hasattr(self._lexer, \"_saved_state_stack\"):\ndel self._lexer._saved_state_stack\n# Lex the text using Pygments\nindex = 0\nfor token, text in self._lexer.get_tokens(string):\nlength = qstring_length(text)\nself.setFormat(index, length, self._get_format(token))\nindex += length\nif hasattr(self._lexer, \"_saved_state_stack\"):\ndata = gui.TextBlockUserData(syntax_stack=self._lexer._saved_state_stack)\nself.currentBlock().setUserData(data)\n# Clean up for the next go-round.\ndel self._lexer._saved_state_stack\n# ---------------------------------------------------------------------------\n# \"PygmentsHighlighter\" interface\n# ---------------------------------------------------------------------------\ndef set_style(self, style: None | StyleStr):\nmatch style:\ncase None:\nself.adjust_style_to_palette()\nreturn\ncase str():\nself._style = styles.get_style_by_name(style)\nself._stylename = style\ncase _:\nraise TypeError(style)\nself._clear_caches()\ndef get_style(self) -&gt; StyleStr:\nreturn self._stylename\ndef adjust_style_to_palette(self):\npal = gui.GuiApplication.get_palette()\nstyle = \"monokai\" if pal.is_dark() else \"default\"\nself.set_style(style)\ndef set_style_sheet(self, stylesheet: str):\n\"\"\"Sets a CSS stylesheet.\n        The classes in the stylesheet should correspond to those generated by:\n            pygmentize -S &lt;style&gt; -f html\n        Note that \"set_style\" and \"set_style_sheet\" completely override each\n        other, i.e. they cannot be used in conjunction.\n        \"\"\"\nself._document.setDefaultStyleSheet(stylesheet)\nself._style = None\nself._clear_caches()\n# ---------------------------------------------------------------------------\n# Protected interface\n# ---------------------------------------------------------------------------\ndef _clear_caches(self):\n\"\"\"Clear caches for brushes and formats.\"\"\"\n_get_brush.cache_clear()\nself._get_format.cache_clear()\n@functools.cache  # noqa: B019\ndef _get_format(self, token: str) -&gt; gui.QTextCharFormat:\n\"\"\"Returns a QTextCharFormat for token or None.\"\"\"\nif self._style is None:\nreturn self._get_format_from_document(token, self._document)\nelse:\nreturn _get_format_from_style(token, self._style)\ndef _get_format_from_document(\nself, token: str, document: gui.QTextDocument\n) -&gt; gui.QTextCharFormat:\n\"\"\"Return a QTextCharFormat for token from document.\"\"\"\n_, html = next(self._formatter._format_lines([(token, \"dummy\")]))\ndocument.setHtml(html)\nreturn gui.TextCursor(document).charFormat()\nstyle = core.Property(\nstr,\nget_style,\nset_style,\ndoc=\"Pygments style for the highlighter\",\n)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/PygmentsHighlighter.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.highlightBlock","title":"<code>highlightBlock(string)</code>","text":"<p>Highlight a block of text.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pygmentshighlighter.py</code> <pre><code>def highlightBlock(self, string):\n\"\"\"Highlight a block of text.\"\"\"\nif (prev_data := self.currentBlock().previous().userData()) is not None:\nself._lexer._saved_state_stack = prev_data.syntax_stack\nelif hasattr(self._lexer, \"_saved_state_stack\"):\ndel self._lexer._saved_state_stack\n# Lex the text using Pygments\nindex = 0\nfor token, text in self._lexer.get_tokens(string):\nlength = qstring_length(text)\nself.setFormat(index, length, self._get_format(token))\nindex += length\nif hasattr(self._lexer, \"_saved_state_stack\"):\ndata = gui.TextBlockUserData(syntax_stack=self._lexer._saved_state_stack)\nself.currentBlock().setUserData(data)\n# Clean up for the next go-round.\ndel self._lexer._saved_state_stack\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/PygmentsHighlighter.html#prettyqt.syntaxhighlighters.pygmentshighlighter.PygmentsHighlighter.set_style_sheet","title":"<code>set_style_sheet(stylesheet: str)</code>","text":"<p>Sets a CSS stylesheet.</p> The classes in the stylesheet should correspond to those generated by <p>pygmentize -S"},{"location":"additional_modules/syntaxhighlighters/PythonHighlighter.html","title":"PythonHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/PythonHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> <p>Syntax highlighter for the Python language.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pythonhighlighter.py</code> <pre><code>class PythonHighlighter(gui.SyntaxHighlighter):\n\"\"\"Syntax highlighter for the Python language.\"\"\"\nRULES = Rule.__subclasses__()\ndef highlightBlock(self, text: str):\n\"\"\"Apply syntax highlighting to the given block of text.\"\"\"\n# Do other syntax formatting\nsuper().highlightBlock(text)\nself.setCurrentBlockState(0)\n# Do multi-line strings\nif not self.match_multiline(text, *TRI_SINGLE):\nself.match_multiline(text, *TRI_DOUBLE)\ndef match_multiline(\nself,\ntext: str,\ndelimiter: core.RegularExpression,\nin_state: int,\nstyle: gui.TextCharFormat,\n):\n\"\"\"Do highlighting of multi-line strings.\n        ``delimiter`` should be a\n        ``core.RegExp`` for triple-single-quotes or triple-double-quotes, and\n        ``in_state`` should be a unique integer to represent the corresponding\n        state changes when inside those strings. Returns True if we're still\n        inside a multi-line string when this function is finished.\n        \"\"\"\n# If inside triple-single quotes, start at 0\nif self.previousBlockState() == in_state:\nstart = 0\nadd = 0\n# Otherwise, look for the delimiter on this line\nelse:\nmatch = delimiter.match(text)\nif not match.hasMatch():\nreturn\nstart = match.capturedStart()\nadd = match.capturedLength()\n# As long as there's a delimiter match on this line...\nwhile start &gt;= 0:\n# Look for the ending delimiter\nmatch = delimiter.match(text, start + add)\nend = match.capturedStart()\n# Ending delimiter on this line?\nif end &gt;= add:\nlength = end - start + add + match.capturedLength()\nself.setCurrentBlockState(0)\n# No; multi-line string\nelse:\nself.setCurrentBlockState(in_state)\nlength = len(text) - start + add\n# Apply formatting\nself.setFormat(start, length, style)\n# Look for the next match\nstart = delimiter.match(text, start + length).capturedStart()\n# Return True if still inside a multi-line string, False otherwise\nreturn self.currentBlockState() == in_state\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/PythonHighlighter.html#prettyqt.syntaxhighlighters.pythonhighlighter.PythonHighlighter.highlightBlock","title":"<code>highlightBlock(text: str)</code>","text":"<p>Apply syntax highlighting to the given block of text.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pythonhighlighter.py</code> <pre><code>def highlightBlock(self, text: str):\n\"\"\"Apply syntax highlighting to the given block of text.\"\"\"\n# Do other syntax formatting\nsuper().highlightBlock(text)\nself.setCurrentBlockState(0)\n# Do multi-line strings\nif not self.match_multiline(text, *TRI_SINGLE):\nself.match_multiline(text, *TRI_DOUBLE)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/PythonHighlighter.html#prettyqt.syntaxhighlighters.pythonhighlighter.PythonHighlighter.match_multiline","title":"<code>match_multiline(text: str, delimiter: core.RegularExpression, in_state: int, style: gui.TextCharFormat)</code>","text":"<p>Do highlighting of multi-line strings.</p> <p><code>delimiter</code> should be a <code>core.RegExp</code> for triple-single-quotes or triple-double-quotes, and <code>in_state</code> should be a unique integer to represent the corresponding state changes when inside those strings. Returns True if we're still inside a multi-line string when this function is finished.</p> Source code in <code>prettyqt\\syntaxhighlighters\\pythonhighlighter.py</code> <pre><code>def match_multiline(\nself,\ntext: str,\ndelimiter: core.RegularExpression,\nin_state: int,\nstyle: gui.TextCharFormat,\n):\n\"\"\"Do highlighting of multi-line strings.\n    ``delimiter`` should be a\n    ``core.RegExp`` for triple-single-quotes or triple-double-quotes, and\n    ``in_state`` should be a unique integer to represent the corresponding\n    state changes when inside those strings. Returns True if we're still\n    inside a multi-line string when this function is finished.\n    \"\"\"\n# If inside triple-single quotes, start at 0\nif self.previousBlockState() == in_state:\nstart = 0\nadd = 0\n# Otherwise, look for the delimiter on this line\nelse:\nmatch = delimiter.match(text)\nif not match.hasMatch():\nreturn\nstart = match.capturedStart()\nadd = match.capturedLength()\n# As long as there's a delimiter match on this line...\nwhile start &gt;= 0:\n# Look for the ending delimiter\nmatch = delimiter.match(text, start + add)\nend = match.capturedStart()\n# Ending delimiter on this line?\nif end &gt;= add:\nlength = end - start + add + match.capturedLength()\nself.setCurrentBlockState(0)\n# No; multi-line string\nelse:\nself.setCurrentBlockState(in_state)\nlength = len(text) - start + add\n# Apply formatting\nself.setFormat(start, length, style)\n# Look for the next match\nstart = delimiter.match(text, start + length).capturedStart()\n# Return True if still inside a multi-line string, False otherwise\nreturn self.currentBlockState() == in_state\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/PythonHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261374928[\"syntaxhighlighters.PythonHighlighter\"]\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256724192 --&gt; 2103261374928\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/syntaxhighlighters/PythonHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/syntaxhighlighters/RegexMatchHighlighter.html","title":"RegexMatchHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/RegexMatchHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\regexmatchhighlighter.py</code> <pre><code>class RegexMatchHighlighter(gui.SyntaxHighlighter):\ndef __init__(self, document=None):\nsuper().__init__(document)\nself.spans: list[tuple[int, int]] | None = []\ndef set_spans(self, spans: list[tuple[int, int]] | None):\nself.spans = spans\n# print(self.spans)\nself.rehighlight()\ndef _colorize(self, line_pos: int, match_len: int, match_num: int):\nfmt = FORMAT_1 if match_num % 2 == 0 else FORMAT_2\nself.setFormat(line_pos, match_len, fmt)\ndef highlightBlock(self, text: str):\nblock = self.currentBlock()\n# line_no = block.blockNumber()\n# if line_no == 0:\n#     self.setCurrentBlockState(-1)\nstart_char = block.position()\nend_char = start_char + block.length()\nif not self.spans or not text:\nreturn None\nfor i, (start, end) in enumerate(self.spans):\nif end &lt; start_char:\ncontinue\nif start &gt; end_char:\nbreak\nstarts_in_line = start_char &lt;= start &lt;= end_char\nends_in_line = start_char &lt;= end &lt;= end_char\nif starts_in_line and ends_in_line or not ends_in_line and starts_in_line:\n# print(f\"in line: {line_pos} - {line_pos + match_len}\")\nself._colorize(start - start_char, end - start, i)\nelif ends_in_line:\n# if self.previousBlockState() == 1:\n# print(f\"ends: {end}\")\nself._colorize(0, end - start, i)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/RegexMatchHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261377808[\"syntaxhighlighters.RegexMatchHighlighter\"]\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256724192 --&gt; 2103261377808\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/syntaxhighlighters/RegexMatchHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/syntaxhighlighters/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>syntaxhighlighters</li> <li>YamlHighlighter</li> <li>SelectedWordHighlighter</li> <li>JsonHighlighter</li> <li>RegexMatchHighlighter</li> <li>PygmentsHighlighter</li> <li>HighlightRule</li> <li>MarkdownHighlighter</li> <li>PythonHighlighter</li> </ul>"},{"location":"additional_modules/syntaxhighlighters/SelectedWordHighlighter.html","title":"SelectedWordHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/SelectedWordHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\selectedwordhighlighter.py</code> <pre><code>class SelectedWordHighlighter(gui.SyntaxHighlighter):\ndef __init__(self, parent: gui.QTextDocument | None = None):\nsuper().__init__(parent)\nself._selection_term = \"\"\nself._mode = \"word\"\nself._highlight_format = gui.TextCharFormat()\nself._highlight_format.setBackground(gui.Color(255, 210, 120))\nself._highlight_format.setFontWeight(gui.QFont.Weight.Bold)\nself._highlight_pattern = None\nself._widget = parent.parent()\nself._widget.selectionChanged.connect(self._filter_selection_for_single_word)\ndef set_selection_term(self, term: str):\nif term == self._selection_term:\nreturn\nself._selection_term = term\nself._update()\ndef _update(self):\nmatch self._mode:\ncase \"all\":\nsearch_pattern = self._selection_term\ncase \"word\":\nsearch_pattern = f\"\\\\b{self._selection_term}\\\\b\"\ncase _:\nraise ValueError(self._mode)\nself._highlight_pattern = core.RegularExpression(search_pattern)\nself.rehighlight()\ndef get_selection_term(self) -&gt; str:\nreturn self._selection_term\ndef set_selection_mode(self, mode: ModeStr):\nif mode == self._mode:\nreturn\nself._mode = mode\nself._update()\ndef get_selection_mode(self) -&gt; ModeStr:\nreturn self._mode\ndef highlightBlock(self, text):\nif len(self._selection_term) &gt; 1:\nself._apply_highlight(text)\ndef _apply_highlight(self, text):\nfor m in self._highlight_pattern.finditer(text):\nlength = m.span()[1] - m.span()[0]\nself.setFormat(m.span()[0], length, self._highlight_format)\ndef _filter_selection_for_single_word(self):\ntc = self._widget.selecter.get_text_cursor()\ncurrent_selection = tc.selectedText()\nif not PAT.split(current_selection):  # SkipEmptyParts\nself.set_selection_term(\"\")\nreturn\ntc.select_text(\"start_of_word\", \"end_of_word\")\nterm = current_selection if current_selection == tc.selectedText() else \"\"\nself.set_selection_term(term)\nselectionTerm = core.Property(\nstr,\nget_selection_term,\nset_selection_term,\ndoc=\"String to highlight in the document\",\n)\nselectionMode = core.Property(\nstr,\nget_selection_mode,\nset_selection_mode,\ndoc=\"Selection mode\",\n)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/SelectedWordHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261390288[\"syntaxhighlighters.SelectedWordHighlighter\"]\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256724192 --&gt; 2103261390288\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/syntaxhighlighters/SelectedWordHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>selectionTerm</code> QString String to highlight in the document <code>selectionMode</code> QString Selection mode"},{"location":"additional_modules/syntaxhighlighters/YamlHighlighter.html","title":"YamlHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"additional_modules/syntaxhighlighters/YamlHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.SyntaxHighlighter</code></p> Source code in <code>prettyqt\\syntaxhighlighters\\yamlhighlighter.py</code> <pre><code>class YamlHighlighter(gui.SyntaxHighlighter):\nRULES = Rule.__subclasses__()\ndef highlightBlock(self, text: str):\nsuper().highlightBlock(text)\nself.setCurrentBlockState(0)\nstart_index = 0\nif self.previousBlockState() != 1:\nstart_index = COMMENT_START.match(text).capturedStart()\nif start_index &gt;= 0:\ncomment_len = len(text) - start_index\nself.setFormat(start_index, comment_len, COMMENT_FORMAT)\n</code></pre>"},{"location":"additional_modules/syntaxhighlighters/YamlHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261397008[\"syntaxhighlighters.YamlHighlighter\"]\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256724192 --&gt; 2103261397008\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/syntaxhighlighters/YamlHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"additional_modules/utils/index.html","title":"utils","text":"<p>Module containing helper functions.</p> Name Children Inherits InvalidParamErrorprettyqt.utilsException raised for invalid params in method calls. <ul><li>ValueError</li></ul> bidictprettyqt.utils <ul><li>bidict</li></ul>"},{"location":"additional_modules/utils/InvalidParamError.html","title":"InvalidParamError","text":""},{"location":"additional_modules/utils/InvalidParamError.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ValueError</code></p> <p>Exception raised for invalid params in method calls.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>param value which caused the error</p> required <code>valid_options</code> <code>Iterable</code> <p>allowed options</p> required Source code in <code>prettyqt\\utils\\__init__.py</code> <pre><code>class InvalidParamError(ValueError):\n\"\"\"Exception raised for invalid params in method calls.\n    Args:\n        value: param value which caused the error\n        valid_options: allowed options\n    \"\"\"\ndef __init__(self, value: Any, valid_options: Iterable):\nself.value = value\nopts = \" / \".join(repr(opt) for opt in valid_options)\nself.message = f\"Invalid value: {value!r}. Allowed options are {opts}.\"\nsuper().__init__(self.message)\n</code></pre>"},{"location":"additional_modules/utils/InvalidParamError.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254884112[\"utils.InvalidParamError\"]\n  140736120047216[\"builtins.ValueError\"]\n  140736120050128[\"builtins.Exception\"]\n  140736120050960[\"builtins.BaseException\"]\n  140736120080256[\"builtins.object\"]\n  140736120047216 --&gt; 2103254884112\n  140736120050128 --&gt; 140736120047216\n  140736120050960 --&gt; 140736120050128\n  140736120080256 --&gt; 140736120050960</code></pre>"},{"location":"additional_modules/utils/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>utils</li> <li>InvalidParamError</li> <li>bidict</li> </ul>"},{"location":"additional_modules/utils/bidict.html","title":"bidict","text":""},{"location":"additional_modules/utils/bidict.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>bdct.bidict[KT, VT]</code></p> Source code in <code>prettyqt\\utils\\__init__.py</code> <pre><code>class bidict(bdct.bidict[KT, VT]):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (dict(),):\nsuper().__init__(args[0])\ncase _:\nsuper().__init__(kwargs)\ndef __getitem__(self, item) -&gt; VT:\ntry:\nreturn super().__getitem__(item)\nexcept KeyError as e:\nraise InvalidParamError(item, list(self.keys())) from e\ndef get_list(self, flag: enum.Enum) -&gt; list[KT]:\nreturn [k for k, v in self.items() if v &amp; flag]\ndef get_dict(self, flag: enum.Enum) -&gt; dict[KT, VT]:\nreturn {k: v &amp; flag for k, v in self.items()}\n# def get_flag(self, **kwargs) -&gt; dict[str, Any]:\n#     for k, v in kwargs.items():\n#     if isinstance(flag, enum.Enum):\n#         flag = flag.value\n#     return {k: v &amp; flag for k, v in self.items()}\ndef merge_flags(self, flags: Iterable[KT]) -&gt; VT:\nreturn functools.reduce(operator.ior, [self[t] for t in flags])\ndef get_enum_value(self, value: KT | VT) -&gt; VT:\nreturn self[value] if isinstance(value, str) else value\ndef get_str_value(self, value: KT | VT) -&gt; KT:\nreturn value if isinstance(value, str) else self.inverse[value]\n</code></pre>"},{"location":"additional_modules/utils/bidict.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254851472[\"utils.bidict\"]\n  2103254850512[\"bidict.bidict\"]\n  2103254863952[\"bidict.MutableBidict\"]\n  2103254859152[\"bidict.BidictBase\"]\n  2103254857232[\"bidict.BidirectionalMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  140736120080256[\"builtins.object\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103200355760[\"typing.Generic\"]\n  2103254860112[\"bidict.MutableBidirectionalMapping\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103254850512 --&gt; 2103254851472\n  2103254863952 --&gt; 2103254850512\n  2103254859152 --&gt; 2103254863952\n  2103254857232 --&gt; 2103254859152\n  2103189039504 --&gt; 2103254857232\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640\n  2103200355760 --&gt; 2103254857232\n  140736120080256 --&gt; 2103200355760\n  2103254860112 --&gt; 2103254863952\n  2103254857232 --&gt; 2103254860112\n  2103189029904 --&gt; 2103254860112\n  2103189039504 --&gt; 2103189029904\n  2103200355760 --&gt; 2103254860112</code></pre>"},{"location":"additional_modules/validators/index.html","title":"validators","text":"Name Children Inherits FunctionValidatorprettyqt.validators.functionvalidator <ul><li>Validator</li></ul> ScientificIntegerValidatorprettyqt.validators.scientificvalidators <ul><li><code>BaseScientificValidator</code></li></ul> BlacklistValidatorprettyqt.validators.blacklistvalidator <ul><li>NotZeroValidator</li><li>NotEmptyValidator</li></ul> <ul><li>Validator</li></ul> MonotonicListValidatorprettyqt.validators.monotoniclistvalidator <ul><li>Validator</li></ul> ScientificFloatValidatorprettyqt.validators.scientificvalidators <ul><li><code>BaseScientificValidator</code></li></ul> RegexPatternValidatorprettyqt.validators.regexpatternvalidator <ul><li>Validator</li></ul> PythonCodeValidatorprettyqt.validators.pythoncodevalidator <ul><li>Validator</li></ul> ColorValidatorprettyqt.validators.colorvalidator <ul><li>Validator</li></ul> EmptyValidatorprettyqt.validators.whitelistvalidator <ul><li>WhitelistValidator</li></ul> JsonValidatorprettyqt.validators.jsonvalidator <ul><li>Validator</li></ul> FloatListValidatorprettyqt.validators.regexvalidators <ul><li><code>BaseRegexValidator</code></li></ul> OrValidatorprettyqt.validators.compositevalidator <ul><li><code>CompositeValidator</code></li></ul> NotZeroValidatorprettyqt.validators.blacklistvalidator <ul><li>BlacklistValidator</li></ul> TextLengthValidatorprettyqt.validators.textlengthvalidator <ul><li>Validator</li></ul> HexValidatorprettyqt.validators.hexvalidator <ul><li>Validator</li></ul> NotStrictValidatorprettyqt.validators.notstrictvalidator <ul><li>Validator</li></ul> QssValidatorprettyqt.validators.qssvalidator <ul><li>Validator</li></ul> WhitelistValidatorprettyqt.validators.whitelistvalidator <ul><li>EmptyValidator</li></ul> <ul><li>Validator</li></ul> NotEmptyValidatorprettyqt.validators.blacklistvalidator <ul><li>BlacklistValidator</li></ul> AlphaNumericValidatorprettyqt.validators.alphanumericvalidator <ul><li>Validator</li></ul> PathValidatorprettyqt.validators.pathvalidator <ul><li>Validator</li></ul> IntListValidatorprettyqt.validators.regexvalidators <ul><li><code>BaseRegexValidator</code></li></ul> AndValidatorprettyqt.validators.compositevalidator <ul><li><code>CompositeValidator</code></li></ul> IntegerValidatorprettyqt.validators.integervalidator <ul><li>Validator</li></ul>"},{"location":"additional_modules/validators/AlphaNumericValidator.html","title":"AlphaNumericValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/AlphaNumericValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether only alphanumeric characters are included.</p> Source code in <code>prettyqt\\validators\\alphanumericvalidator.py</code> <pre><code>class AlphaNumericValidator(gui.Validator):\n\"\"\"Validator which checks whether only alphanumeric characters are included.\"\"\"\nID = \"alphanumeric\"\ndef __eq__(self, other: object):\nreturn isinstance(other, AlphaNumericValidator)\ndef validate(self, text: str, pos: int = 0):\nif text.replace(\"_\", \"\").isalnum():\nreturn self.State.Acceptable, text, pos\nreturn self.State.Invalid, text, pos\n</code></pre>"},{"location":"additional_modules/validators/AlphaNumericValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261480528[\"validators.AlphaNumericValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261480528\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/AlphaNumericValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: alphanumeric</p>"},{"location":"additional_modules/validators/AndValidator.html","title":"AndValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/AndValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>CompositeValidator</code></p> <p>Validator to AND-combine other validators.</p> Source code in <code>prettyqt\\validators\\compositevalidator.py</code> <pre><code>class AndValidator(CompositeValidator):\n\"\"\"Validator to AND-combine other validators.\"\"\"\nID = \"and\"\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[gui.QValidator.State, str, int]:\nvals = [v.validate(text, pos)[0] for v in self.validators]  # type: ignore\nif self.State.Invalid in vals:\nreturn self.State.Invalid, text, pos\nelif self.State.Intermediate in vals:\nreturn self.State.Intermediate, text, pos\nelse:\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"additional_modules/validators/AndValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261460368[\"validators.AndValidator\"]\n  2103261483408[\"validators.CompositeValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261483408 --&gt; 2103261460368\n  2103260959376 --&gt; 2103261483408\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/AndValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: and</p>"},{"location":"additional_modules/validators/BlacklistValidator.html","title":"BlacklistValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/BlacklistValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which excludes a fixed list of strings.</p> Source code in <code>prettyqt\\validators\\blacklistvalidator.py</code> <pre><code>class BlacklistValidator(gui.Validator):\n\"\"\"Validator which excludes a fixed list of strings.\"\"\"\nID = \"blacklist\"\ndef __init__(\nself,\noptions: list[str] | None = None,\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself._options = options\ndef __eq__(self, other: object):\nreturn isinstance(other, BlacklistValidator) and self._options == other._options\ndef validate(self, text: str, pos: int = 0):\nif any(option == text for option in self._options):\nreturn self.State.Invalid, text, pos\nreturn self.State.Acceptable, text, pos\n</code></pre> Name Children Inherits NotZeroValidatorprettyqt.validators.blacklistvalidator <ul><li>BlacklistValidator</li></ul> NotEmptyValidatorprettyqt.validators.blacklistvalidator <ul><li>BlacklistValidator</li></ul>"},{"location":"additional_modules/validators/BlacklistValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261470928[\"validators.BlacklistValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261470928\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/BlacklistValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: blacklist</p>"},{"location":"additional_modules/validators/ColorValidator.html","title":"ColorValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/ColorValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks for strings representing a color.</p> Source code in <code>prettyqt\\validators\\colorvalidator.py</code> <pre><code>class ColorValidator(gui.Validator):\n\"\"\"Validator which checks for strings representing a color.\"\"\"\nID = \"color\"\ndef __eq__(self, other: object):\nreturn isinstance(other, ColorValidator)\ndef validate(self, text: str, pos: int = 0) -&gt; tuple[gui.QValidator.State, str, int]:\ncolor = gui.Color(text)\nif color.isValid():\nreturn self.State.Acceptable, text, pos\nelse:\nreturn self.State.Intermediate, text, pos\n</code></pre>"},{"location":"additional_modules/validators/ColorValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261481488[\"validators.ColorValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261481488\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/ColorValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: color</p>"},{"location":"additional_modules/validators/EmptyValidator.html","title":"EmptyValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/EmptyValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>WhitelistValidator</code></p> Source code in <code>prettyqt\\validators\\whitelistvalidator.py</code> <pre><code>class EmptyValidator(WhitelistValidator):\nID = \"empty\"\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself._options = [\"\"]\n</code></pre>"},{"location":"additional_modules/validators/EmptyValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261495888[\"validators.EmptyValidator\"]\n  2103261498768[\"validators.WhitelistValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261498768 --&gt; 2103261495888\n  2103260959376 --&gt; 2103261498768\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/EmptyValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: empty</p>"},{"location":"additional_modules/validators/FloatListValidator.html","title":"FloatListValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/FloatListValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseRegexValidator</code></p> <p>Validator which checks whether given string is a comma-separated list of floats.</p> Source code in <code>prettyqt\\validators\\regexvalidators.py</code> <pre><code>class FloatListValidator(BaseRegexValidator):\n\"\"\"Validator which checks whether given string is a comma-separated list of floats.\"\"\"\nID = \"float_list\"\ndef __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\")\nelse:\nself.set_regex(\nr\"^(\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)(\\s*,\\s*-?\\d+(\\.\\d+)?)*$\"\n)\ndef __reduce__(self):\nreturn type(self), (self.allow_single,)\ndef __repr__(self):\nreturn get_repr(self, allow_single=self.allow_single)\n</code></pre>"},{"location":"additional_modules/validators/FloatListValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261488208[\"validators.FloatListValidator\"]\n  2103261475728[\"validators.BaseRegexValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261475728 --&gt; 2103261488208\n  2103260959376 --&gt; 2103261475728\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/FloatListValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: float_list</p>"},{"location":"additional_modules/validators/FunctionValidator.html","title":"FunctionValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/FunctionValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks based on a given Callable.</p> <p>Allows for quickly creating a validator without subclassing.</p> Source code in <code>prettyqt\\validators\\functionvalidator.py</code> <pre><code>class FunctionValidator(gui.Validator):\n\"\"\"Validator which checks based on a given Callable.\n    Allows for quickly creating a validator without subclassing.\n    \"\"\"\nID = \"function\"\ndef __init__(self, fn: Callable[[str], bool], parent=None):\nsuper().__init__(parent)\nself._fn = fn\ndef __eq__(self, other: object):\nreturn isinstance(other, FunctionValidator) and other._fn == self._fn\ndef validate(self, text: str, pos: int = 0) -&gt; tuple[gui.QValidator.State, str, int]:\nif self._fn(text):\nreturn self.State.Acceptable, text, pos\nreturn self.State.Invalid, text, pos\n</code></pre>"},{"location":"additional_modules/validators/FunctionValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261472848[\"validators.FunctionValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261472848\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/FunctionValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: function</p>"},{"location":"additional_modules/validators/HexValidator.html","title":"HexValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/HexValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks for hexadecimal values.</p> Source code in <code>prettyqt\\validators\\hexvalidator.py</code> <pre><code>class HexValidator(gui.Validator):\n\"\"\"Validator which checks for hexadecimal values.\"\"\"\nID = \"hex\"\ndef __init__(self, maximum: int | None = None, parent=None):\nsuper().__init__(parent)\nself._maximum = maximum\ndef __eq__(self, other: object):\nreturn isinstance(other, HexValidator) and other._maximum == self._maximum\ndef validate(self, text: str, pos: int = 0) -&gt; tuple[gui.QValidator.State, str, int]:\ntry:\nval = int(text, 0)\nexcept ValueError:\nreturn self.State.Intermediate, text, pos\nif self._maximum is not None and val &gt; self._maximum:\nreturn self.State.Invalid, text, pos\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"additional_modules/validators/HexValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261469968[\"validators.HexValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261469968\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/HexValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: hex</p>"},{"location":"additional_modules/validators/IntListValidator.html","title":"IntListValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/IntListValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseRegexValidator</code></p> <p>Validator which checks whether given string is a comma-separated list of ints.</p> Source code in <code>prettyqt\\validators\\regexvalidators.py</code> <pre><code>class IntListValidator(BaseRegexValidator):\n\"\"\"Validator which checks whether given string is a comma-separated list of ints.\"\"\"\nID = \"int_list\"\ndef __init__(self, allow_single: bool = True, parent: QtCore.QObject | None = None):\nsuper().__init__(parent=parent)\nself.allow_single = allow_single\nif allow_single:\nself.set_regex(r\"^(\\d+)(,\\s*\\d+)*$\")\nelse:\nself.set_regex(r\"^[0-9][0-9\\,]+[0-9]$\")\ndef __reduce__(self):\nreturn type(self), (self.allow_single,)\ndef __repr__(self):\nreturn get_repr(self, allow_single=self.allow_single)\n</code></pre>"},{"location":"additional_modules/validators/IntListValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261476688[\"validators.IntListValidator\"]\n  2103261475728[\"validators.BaseRegexValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261475728 --&gt; 2103261476688\n  2103260959376 --&gt; 2103261475728\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/IntListValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: int_list</p>"},{"location":"additional_modules/validators/IntegerValidator.html","title":"IntegerValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/IntegerValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator to check for integer values.</p> <p>In contrast to IntValidator provided by Qt, this validator is not bound to a restricted value range.</p> Source code in <code>prettyqt\\validators\\integervalidator.py</code> <pre><code>class IntegerValidator(gui.Validator):\n\"\"\"Validator to check for integer values.\n    In contrast to IntValidator provided by Qt, this validator is not bound to\n    a restricted value range.\n    \"\"\"\nID = \"integer\"\ndef __init__(\nself,\nbottom: int | None = None,\ntop: int | None = None,\nparent: core.QObject | None = None,\n):\nsuper().__init__(parent)\nself._bottom = -sys.maxsize if bottom is None else bottom\nself._top = sys.maxsize if top is None else top\ndef set_range(self, lower: int | None, upper: int | None):\nself.set_top(upper)\nself.set_bottom(lower)\ndef get_range(self) -&gt; tuple[int, int]:\nreturn (self._bottom, self._top)\ndef set_bottom(self, bottom: int | None):\nself._bottom = -sys.maxsize if bottom is None else bottom\ndef get_bottom(self) -&gt; int:\nreturn self._bottom\ndef set_top(self, top: int | None):\nself._top = sys.maxsize if top is None else top\ndef get_top(self) -&gt; int:\nreturn self._top\ndef validate(self, text: str, pos: int):\nif not text.lstrip(\"-\"):\nreturn self.State.Intermediate, text, len(text)\nif text.lstrip(\"-\").isnumeric():\nleft = float(\"-inf\") if self._bottom is None else self._bottom\nright = float(\"inf\") if self._top is None else self._top\nif left &lt;= int(text) &lt;= right:\nreturn self.State.Acceptable, text, len(text)\nreturn self.State.Invalid, text, len(text)\nbottom = core.Property(\nint,\nget_bottom,\nset_bottom,\ndoc=\"Minimum value\",\n)\ntop = core.Property(\nint,\nget_top,\nset_top,\ndoc=\"Maximum value\",\n)\n</code></pre>"},{"location":"additional_modules/validators/IntegerValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261474768[\"validators.IntegerValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261474768\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/IntegerValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>bottom</code> int Minimum value <code>top</code> int Maximum value <p>Validator ID: integer</p>"},{"location":"additional_modules/validators/JsonValidator.html","title":"JsonValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/JsonValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks for strings which can be parsed as JSON.</p> Source code in <code>prettyqt\\validators\\jsonvalidator.py</code> <pre><code>class JsonValidator(gui.Validator):\n\"\"\"Validator which checks for strings which can be parsed as JSON.\"\"\"\nID = \"json\"\ndef __eq__(self, other: object):\nreturn isinstance(other, JsonValidator)\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[gui.QValidator.State, str, int]:\ntry:\njson.loads(text)\nreturn self.State.Acceptable, text, pos\nexcept json.decoder.JSONDecodeError:\nreturn self.State.Intermediate, text, pos\n</code></pre>"},{"location":"additional_modules/validators/JsonValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261463248[\"validators.JsonValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261463248\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/JsonValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: json</p>"},{"location":"additional_modules/validators/MonotonicListValidator.html","title":"MonotonicListValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/MonotonicListValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string contains a monotonic list.</p> Source code in <code>prettyqt\\validators\\monotoniclistvalidator.py</code> <pre><code>class MonotonicListValidator(gui.Validator):\n\"\"\"Validator which checks whether given string contains a monotonic list.\"\"\"\nID = \"monotonic\"\ndef __init__(self, kind: str = \"increasing\", parent=None):\nsuper().__init__(parent)\nself._kind = kind\ndef __eq__(self, other: object):\nreturn isinstance(other, MonotonicListValidator) and other._kind == self._kind\ndef validate(self, string: str, pos: int) -&gt; tuple[gui.Validator.State, str, int]:\nif self._kind != \"increasing\":\nstring = string[::-1]\nfor i, c in enumerate(string, start=1):\nif c not in \"+-., 0123456789\":\nreturn self.State.Invalid, string, i\nif pos == len(string) &gt;= 2 and string[-1] == \" \" and string[-2].isdigit():\nstring = f\"{string[:-1]}, \"\npos += 1\nprev = None\nfor valuestr in re_custom_sep.split(string.strip()):\ntry:\nvalue = float(valuestr)\nexcept ValueError:  # noqa: PERF203\nreturn self.State.Intermediate, string, pos\nif prev is not None and value &lt;= prev:\nreturn self.State.Intermediate, string, pos\nprev = value\nreturn self.State.Acceptable, string, pos\n</code></pre>"},{"location":"additional_modules/validators/MonotonicListValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261485328[\"validators.MonotonicListValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261485328\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/MonotonicListValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: monotonic</p>"},{"location":"additional_modules/validators/NotEmptyValidator.html","title":"NotEmptyValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/NotEmptyValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BlacklistValidator</code></p> Source code in <code>prettyqt\\validators\\blacklistvalidator.py</code> <pre><code>class NotEmptyValidator(BlacklistValidator):\nID = \"not_empty\"\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself._options = [\"\"]\n</code></pre>"},{"location":"additional_modules/validators/NotEmptyValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261482448[\"validators.NotEmptyValidator\"]\n  2103261470928[\"validators.BlacklistValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261470928 --&gt; 2103261482448\n  2103260959376 --&gt; 2103261470928\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/NotEmptyValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: not_empty</p>"},{"location":"additional_modules/validators/NotStrictValidator.html","title":"NotStrictValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/NotStrictValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which turns Invalid state into Intermediate state.</p> Source code in <code>prettyqt\\validators\\notstrictvalidator.py</code> <pre><code>class NotStrictValidator(gui.Validator):\n\"\"\"Validator which turns Invalid state into Intermediate state.\"\"\"\nID = \"not_strict\"\ndef __init__(self, validator: gui.QValidator | None = None, **kwargs):\nself._validator = validator\nsuper().__init__(**kwargs)\ndef __eq__(self, other: object):\nreturn (\nisinstance(other, NotStrictValidator) and other._validator == self._validator\n)\ndef validate(self, text: str, pos: int = 0) -&gt; tuple[gui.QValidator.State, str, int]:\nstate, text, pos = self._validator.validate(text, pos)\nis_invalid = state == self.State.Invalid\nreturn self.State.Intermediate if is_invalid else state, text, pos\n</code></pre>"},{"location":"additional_modules/validators/NotStrictValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261484368[\"validators.NotStrictValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261484368\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/NotStrictValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: not_strict</p>"},{"location":"additional_modules/validators/NotZeroValidator.html","title":"NotZeroValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/NotZeroValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BlacklistValidator</code></p> Source code in <code>prettyqt\\validators\\blacklistvalidator.py</code> <pre><code>class NotZeroValidator(BlacklistValidator):\nID = \"not_zero\"\ndef __init__(self, parent: QtCore.QObject | None = None):\nsuper().__init__(parent)\nself._options = [\"0\"]\n</code></pre>"},{"location":"additional_modules/validators/NotZeroValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261486288[\"validators.NotZeroValidator\"]\n  2103261470928[\"validators.BlacklistValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261470928 --&gt; 2103261486288\n  2103260959376 --&gt; 2103261470928\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/NotZeroValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: not_zero</p>"},{"location":"additional_modules/validators/OrValidator.html","title":"OrValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/OrValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>CompositeValidator</code></p> <p>Validator to OR-combine other validators.</p> Source code in <code>prettyqt\\validators\\compositevalidator.py</code> <pre><code>class OrValidator(CompositeValidator):\n\"\"\"Validator to OR-combine other validators.\"\"\"\nID = \"or\"\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[gui.QValidator.State, str, int]:\nvals = [v.validate(text, pos)[0] for v in self.validators]  # type: ignore\nif self.State.Acceptable in vals:\nreturn self.State.Acceptable, text, pos\nelif self.State.Intermediate in vals:\nreturn self.State.Intermediate, text, pos\nelse:\nreturn self.State.Invalid, text, pos\n</code></pre>"},{"location":"additional_modules/validators/OrValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261471888[\"validators.OrValidator\"]\n  2103261483408[\"validators.CompositeValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261483408 --&gt; 2103261471888\n  2103260959376 --&gt; 2103261483408\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/OrValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: or</p>"},{"location":"additional_modules/validators/PathValidator.html","title":"PathValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/PathValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is a valid path.</p> Source code in <code>prettyqt\\validators\\pathvalidator.py</code> <pre><code>class PathValidator(gui.Validator):\n\"\"\"Validator which checks whether given string is a valid path.\"\"\"\nID = \"path\"\ndef __init__(self, *args, **kwargs):\nself._mode = \"any\"\nsuper().__init__(*args, **kwargs)\ndef __eq__(self, other: object):\nreturn isinstance(other, PathValidator) and self._mode == other._mode\ndef validate(self, text: str, pos: int = 0):\npath = pathlib.Path(text)\nif not path.exists():\nreturn self.State.Intermediate, text, pos\nmatch self._mode:\ncase \"any\":\nreturn self.State.Acceptable, text, pos\ncase \"file\" if path.is_file():\nreturn self.State.Acceptable, text, pos\ncase \"folder\" if path.is_dir():\nreturn self.State.Acceptable, text, pos\nreturn self.State.Intermediate, text, pos\ndef set_mode(self, mode: ModeStr):\nself._mode = mode\ndef get_mode(self) -&gt; ModeStr:\nreturn self._mode\nmode = core.Property(\nstr,\nget_mode,\nset_mode,\ndoc=\"Whether text can be any, an existing file or an existing folder\",\n)\n</code></pre>"},{"location":"additional_modules/validators/PathValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261464208[\"validators.PathValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261464208\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/PathValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>mode</code> QString Whether text can be any, an existing file or an existing folder <p>Validator ID: path</p>"},{"location":"additional_modules/validators/PythonCodeValidator.html","title":"PythonCodeValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/PythonCodeValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is valid Python code.</p> Source code in <code>prettyqt\\validators\\pythoncodevalidator.py</code> <pre><code>class PythonCodeValidator(gui.Validator):\n\"\"\"Validator which checks whether given string is valid Python code.\"\"\"\nID = \"python_code\"\ndef __eq__(self, other: object):\nreturn isinstance(other, PythonCodeValidator)\ndef validate(self, text: str, pos: int = 0) -&gt; tuple[gui.QValidator.State, str, int]:\ntry:\nast.parse(text)\nreturn self.State.Acceptable, text, pos\nexcept SyntaxError:\nreturn self.State.Intermediate, text, pos\n</code></pre>"},{"location":"additional_modules/validators/PythonCodeValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261467088[\"validators.PythonCodeValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261467088\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/PythonCodeValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: python_code</p>"},{"location":"additional_modules/validators/QssValidator.html","title":"QssValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/QssValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is a parseable css string.</p> Source code in <code>prettyqt\\validators\\qssvalidator.py</code> <pre><code>class QssValidator(gui.Validator):\n\"\"\"Validator which checks whether given string is a parseable css string.\"\"\"\nID = \"qss\"\ndef __eq__(self, other: object):\nreturn isinstance(other, QssValidator)\ndef validate(self, text: str, pos: int = 0) -&gt; tuple[gui.QValidator.State, str, int]:\nwith contextlib.suppress(ValueError):\nif not text or parser.parse(text):\nreturn self.State.Acceptable, text, pos\nreturn self.State.Intermediate, text, pos\n</code></pre>"},{"location":"additional_modules/validators/QssValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261468048[\"validators.QssValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261468048\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/QssValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: qss</p>"},{"location":"additional_modules/validators/RegexPatternValidator.html","title":"RegexPatternValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/RegexPatternValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given string is a parseable regex pattern.</p> Source code in <code>prettyqt\\validators\\regexpatternvalidator.py</code> <pre><code>class RegexPatternValidator(gui.Validator):\n\"\"\"Validator which checks whether given string is a parseable regex pattern.\"\"\"\nID = \"regex_pattern\"\nerror_occured = core.Signal(str)\npattern_updated = core.Signal(object)\ndef __repr__(self):\nreturn get_repr(self)\ndef __eq__(self, other: object):\nreturn isinstance(other, type(self))\ndef validate(  # type: ignore\nself, text: str, pos: int = 0\n) -&gt; tuple[gui.QValidator.State, str, int]:\n# if text == \"\":\n#     self.compiled = None\n#     return (self.Intermediate, text, pos)\ntry:\ncompiled = re.compile(text)\nexcept sre_constants.error as e:\nself.error_occured.emit(str(e))\nself.pattern_updated.emit(None)\nreturn self.State.Intermediate, text, pos\nelse:\nself.error_occured.emit(\"\")\nself.pattern_updated.emit(compiled)\nreturn self.State.Acceptable, text, pos\n</code></pre>"},{"location":"additional_modules/validators/RegexPatternValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261469008[\"validators.RegexPatternValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261469008\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/RegexPatternValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: regex_pattern</p>"},{"location":"additional_modules/validators/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>validators</li> <li>FunctionValidator</li> <li>ScientificIntegerValidator</li> <li>BlacklistValidator</li> <li>MonotonicListValidator</li> <li>ScientificFloatValidator</li> <li>RegexPatternValidator</li> <li>PythonCodeValidator</li> <li>ColorValidator</li> <li>EmptyValidator</li> <li>JsonValidator</li> <li>FloatListValidator</li> <li>OrValidator</li> <li>NotZeroValidator</li> <li>TextLengthValidator</li> <li>HexValidator</li> <li>NotStrictValidator</li> <li>QssValidator</li> <li>WhitelistValidator</li> <li>NotEmptyValidator</li> <li>AlphaNumericValidator</li> <li>PathValidator</li> <li>IntListValidator</li> <li>AndValidator</li> <li>IntegerValidator</li> </ul>"},{"location":"additional_modules/validators/ScientificFloatValidator.html","title":"ScientificFloatValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/ScientificFloatValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseScientificValidator</code></p> <p>This is a validator for float values represented as strings in scientific notation.</p> <p>(i.e. \"1.35e-9\", \".24E+8\", \"14e3\" etc.) Also supports SI unit prefix like 'M', 'n' etc.</p> Source code in <code>prettyqt\\validators\\scientificvalidators.py</code> <pre><code>class ScientificFloatValidator(BaseScientificValidator):\n\"\"\"This is a validator for float values represented as strings in scientific notation.\n    (i.e. \"1.35e-9\", \".24E+8\", \"14e3\" etc.)\n    Also supports SI unit prefix like 'M', 'n' etc.\n    \"\"\"\nID = \"scientific_float\"\nre_pattern = re.compile(\nr\"(\\s*([+-]?)(\\d+\\.\\d+|\\.\\d+|\\d+\\.?)([eE][+-]?\\d+)?\\s?([YZEPTGMkm\u00b5unpfazy]?)\\s*)\",\nflags=re.UNICODE,\n)\ngroup_map = {\"match\": 0, \"sign\": 1, \"mantissa\": 2, \"exponent\": 3, \"si\": 4}\ndef validate(self, string, position):\nif (\nstring.strip() in \"+.-.\"\nor string.strip() in list(\"YZEPTGMkm\u00b5unpfazy\")\nor re.match(r\"[+-]?(in$|i$)\", string, re.IGNORECASE)\n):\nreturn self.State.Intermediate, string, position\n# Accept input of [+-]inf. Not case sensitive.\nif re.match(r\"[+-]?\\binf$\", string, re.IGNORECASE):\nreturn self.State.Acceptable, string.lower(), position\nif not (group_dict := self.get_group_dict(string)):\nreturn (\n(self.State.Intermediate, string, position)\nif string[position - 1] in \"eE-+.\" and \"i\" not in string.lower()\nelse (self.State.Invalid, \"\", position)\n)\nif group_dict[\"match\"] == string:\nreturn self.State.Acceptable, string, position\nif string.count(\".\") &gt; 1:\nreturn self.State.Invalid, group_dict[\"match\"], position\nposition = min(position, len(string))\nif string[position - 1] in \"eE-+\" and \"i\" not in string.lower():\nreturn self.State.Intermediate, string, position\nreturn self.State.Invalid, group_dict[\"match\"], position\n</code></pre>"},{"location":"additional_modules/validators/ScientificFloatValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261516048[\"validators.ScientificFloatValidator\"]\n  2103261494928[\"validators.BaseScientificValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261494928 --&gt; 2103261516048\n  2103260959376 --&gt; 2103261494928\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/ScientificFloatValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: scientific_float</p>"},{"location":"additional_modules/validators/ScientificIntegerValidator.html","title":"ScientificIntegerValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/ScientificIntegerValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BaseScientificValidator</code></p> <p>This is a validator for int values represented as strings in scientific notation.</p> <p>Using engineering notation only positive exponents are allowed (i.e. \"1e9\", \"2E+8\", \"14e+3\" etc.) Also supports non-fractional SI unit prefix like 'M', 'k' etc.</p> Source code in <code>prettyqt\\validators\\scientificvalidators.py</code> <pre><code>class ScientificIntegerValidator(BaseScientificValidator):\n\"\"\"This is a validator for int values represented as strings in scientific notation.\n    Using engineering notation only positive exponents are allowed\n    (i.e. \"1e9\", \"2E+8\", \"14e+3\" etc.)\n    Also supports non-fractional SI unit prefix like 'M', 'k' etc.\n    \"\"\"\nID = \"scientific_integer\"\nre_pattern = re.compile(\nr\"(([+-]?\\d+)([eE]\\+?\\d+)?\\s?([YZEPTGMk])?\\s*)\", flags=re.UNICODE\n)\ngroup_map = {\"match\": 0, \"mantissa\": 1, \"exponent\": 2, \"si\": 3}\ndef validate(self, string, position):\nif not string.strip() or string.strip() in list(\"YZEPTGMk\"):\nreturn self.State.Intermediate, string, position\nif not (group_dict := self.get_group_dict(string)):\nreturn self.State.Invalid, \"\", position\nif group_dict[\"match\"] == string:\nreturn self.State.Acceptable, string, position\nposition = min(position, len(string))\nif string[position - 1] in \"eE-+\":\nreturn self.State.Intermediate, string, position\nreturn self.State.Invalid, group_dict[\"match\"], position\n</code></pre>"},{"location":"additional_modules/validators/ScientificIntegerValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261487248[\"validators.ScientificIntegerValidator\"]\n  2103261494928[\"validators.BaseScientificValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261494928 --&gt; 2103261487248\n  2103260959376 --&gt; 2103261494928\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/ScientificIntegerValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: scientific_integer</p>"},{"location":"additional_modules/validators/TextLengthValidator.html","title":"TextLengthValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/TextLengthValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which checks whether given text has a specific length.</p> Source code in <code>prettyqt\\validators\\textlengthvalidator.py</code> <pre><code>class TextLengthValidator(gui.Validator):\n\"\"\"Validator which checks whether given text has a specific length.\"\"\"\nID = \"text_length\"\ndef __init__(\nself,\nminimum: int | None = None,\nmaximum: int | None = None,\nparent: core.QObject | None = None,\n):\nsuper().__init__(parent)\nself._minimum = 0 if minimum is None else minimum\nself._maximum = sys.maxsize if maximum is None else maximum\ndef set_range(self, minimum: int | None, maximum: int | None):\nself._minimum = 0 if minimum is None else minimum\nself._maximum = sys.maxsize if maximum is None else maximum\ndef get_range(self) -&gt; tuple[int | None, int | None]:\nreturn (self._minimum, self._maximum)\ndef set_minimum(self, minimum: int | None):\nself._minimum = 0 if minimum is None else minimum\ndef get_minimum(self) -&gt; int:\nreturn self._minimum\ndef set_maximum(self, maximum: int | None):\nself._maximum = sys.maxsize if maximum is None else maximum\ndef get_maximum(self) -&gt; int:\nreturn self._maximum\ndef validate(self, text: str, pos: int):\nif self._minimum &lt;= len(text) &lt;= self._maximum:\nreturn self.State.Acceptable, text, len(text)\nif len(text) &lt;= self._maximum:\nreturn self.State.Intermediate, text, len(text)\nreturn self.State.Invalid, text, len(text)\nminimum = core.Property(\nint,\nget_minimum,\nset_minimum,\ndoc=\"Minimum text length\",\n)\nmaximum = core.Property(\nint,\nget_maximum,\nset_maximum,\ndoc=\"Maximum text length\",\n)\n</code></pre>"},{"location":"additional_modules/validators/TextLengthValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261517008[\"validators.TextLengthValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261517008\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/TextLengthValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>minimum</code> int Minimum text length <code>maximum</code> int Maximum text length <p>Validator ID: text_length</p>"},{"location":"additional_modules/validators/WhitelistValidator.html","title":"WhitelistValidator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"additional_modules/validators/WhitelistValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.Validator</code></p> <p>Validator which allows a fixed list of strings.</p> Source code in <code>prettyqt\\validators\\whitelistvalidator.py</code> <pre><code>class WhitelistValidator(gui.Validator):\n\"\"\"Validator which allows a fixed list of strings.\"\"\"\nID = \"whitelist\"\ndef __init__(\nself,\noptions: list[str] | None = None,\nparent: QtCore.QObject | None = None,\n):\nsuper().__init__(parent)\nself._options = options\ndef __eq__(self, other: object):\nreturn isinstance(other, WhitelistValidator) and self._options == other._options\ndef validate(self, text: str, pos: int = 0):\nif any(option == text for option in self._options):\nreturn self.State.Acceptable, text, pos\nif any(option.startswith(text) for option in self._options):\nreturn self.State.Intermediate, text, pos\nreturn self.State.Invalid, text, pos\n</code></pre> Name Children Inherits EmptyValidatorprettyqt.validators.whitelistvalidator <ul><li>WhitelistValidator</li></ul>"},{"location":"additional_modules/validators/WhitelistValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261498768[\"validators.WhitelistValidator\"]\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260959376 --&gt; 2103261498768\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"additional_modules/validators/WhitelistValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <p>Validator ID: whitelist</p>"},{"location":"api_guidelines/bindings.html","title":"Bindings","text":"<p>PrettyQt includes its own layer to both support PySide6 and PyQt6. The logic for choosing one of these frameworks mirrors the one from QtPy, which is the most widely used package for supporting multiple Qt bindings. That should ensure that this framework can be used in conjunction with other packages which build on QtPy.</p> <p>The logic for choosing one the bindings basically works like this:</p> <ol> <li>If one of the two bindings was already imported, use that binding.</li> <li>Check the environment variable <code>QT_API</code> and try to import that binding.</li> <li>If that binding is not installed, try the other one.</li> </ol> <p>PrettyQt only supports the most recent versions (LTS 6.5) of these bindings. Reason for that is that these are the first versions which are basically on par feature-wise with Qt5. For the future, PrettyQt will at least support Qt Versions back to the last LTS version.</p> <p>For a long time, PyQt was the only really usable binding. Especially PySide2 was buggy to an extent that it was almost unusable for more complex applications. That changed greatly in recent months up to a point where it is today at least on par with PyQt6.</p> <p>Starting with 6.5.2, my personal recommendation would be to use PySide6, mainly for excellent support and for pushing features which go beyond just generating a 1:1 binding. (<code>\\__feature__</code> imports, opaque containers, PyPy compatibility, ...)</p>"},{"location":"api_guidelines/bindings.html#differences-between-frameworks","title":"Differences between Frameworks:","text":"<p>This list will try to keep track about the (subtle) differences between bindings encountered during developing.</p> <ul> <li>PyQt cannot handle <code>type</code> as a Property. (TypeError: unable to convert a Python 'PyQt6.sip.wrappertype' object to a C++ 'PyQt_PyObject' instance)</li> <li>PySide6 offers opaque containers for some types (<code>QIntList</code> etc.)</li> <li>QCoreApplication is missing some signals for PyQt6 even though the MetaObject reports them to exist. (<code>applicationNameChanged</code>, <code>applicationVersionChanged</code>, <code>organizationNameChanged</code>, <code>organizationDomainChanged</code>)</li> <li>PyQt6 is missing <code>.parent()</code> signature for several ItemViewClasses (only the overload <code>.parent(QModelIndex)</code> exists)</li> <li>PyQt6 allows monkey-patching classes (<code>instance.__class__ = SomeClass</code>, PySide6 does not</li> <li>PyQt6 allows passing keyword arguments to the class definition, PySide6 does not.</li> </ul>"},{"location":"api_guidelines/general.html","title":"General","text":"<p>To allow for an easy switch, the API layer provided by PrettyQt should be consistent and predictable. When knowing the following guidelines, it should be easy to guess how PrettyQt can be used:</p> <ul> <li>Every Qt namespace has an equivalent module, named lowerase and with the \"Qt\"-prefix removed.</li> </ul> <p><pre><code>from prettyqt import core, widgets, svg\n</code></pre> (There\u00b4s one exception: QtHelp becomes qthelp in order to not shadow the builtin \"help\" method.)</p> <ul> <li>Every Qt class has an equivalent class with the Q-prefix removed, placed in the corresponding namespace mentioned above. This class derives from the Qt class and a mixin from this framework. The \"original\" Qt classes are still available in the same module.</li> </ul> <pre><code>widget = widgets.Widget()  # our enriched class\nqwidget = widgets.QWidget()  # the original Qt class\ncurve = core.EasingCurve()\nqcurve = core.QEasingCurve()\n</code></pre> <ul> <li>The Qt-inherited API should still work as-is. If any method is overriden by this framework (only very few cases where this happens), it should still be allowed to call it with the original Qt signature.</li> </ul> <pre><code>widget = widgets.Widget()\nwidget.setMinimumSize(core.QSize(10, 10))\n</code></pre> <ul> <li>Naming of the equivalent PrettyQt methods should follow a consistent scheme. Setters are lower-cased and snake-cased, getters are lower-cased, snake-cased and have a get_ prepended to avoid name clashes. If any lower-cased, snake-cased method name is not provided by PrettyQt, it will call the original method via <code>__getattr__</code>. (The last point only applies to classes which inherit from QObject.)</li> </ul> <pre><code>from prettyqt import constants, widgets\nwidget = widgets.Widget()\nwidget.set_modality(\"window\")\n# constants namespace contains, among other things, everything from QtCore.Qt\nwidget.set_modality(constants.WindowModality.WindowModal)\nassert widget.get_modality() == \"window\"\nassert widget.modality() == constants.WindowModality.WindowModal  # original method still available\n</code></pre> <ul> <li>Using strings instead of Enums is also possible for setting properties via the constructor.</li> </ul> <pre><code>widget = widgets.Widget(modality=\"window\")\n</code></pre> <ul> <li> <p>The layer aims to be thin, with no significant overhead. Developers should still use common sense when it comes to using the subclasses vs the original Qt classes though. In loops which get called very often (like paintEvent), it probably still makes sense in lot of cases to not use any subclasses for performance reasons. It should also be mentioned that Qt does not accept derived classes in some places. (for example as a return value for QAbstractItemModel.data())</p> </li> <li> <p>PrettyQt tries to align with Qt\u00b4s module hierarchy, meaning that <code>core</code> module does not import stuff from <code>QtGui / gui</code>, <code>gui</code> module does not import <code>QtWidgets / widgets</code> etc. In cases where it is not possible,</p> </li> </ul>"},{"location":"api_guidelines/types.html","title":"Types","text":"<p>PrettyQt loosens type restrictions for the Qt API calls. Here is a short list how support for types is extended:</p> <p>QtGui.QColor</p> <ul> <li><code>Sequence[int, int, int]</code></li> <li><code>Sequence[int, int, int, int]</code></li> <li><code>str</code> (Color name or #color hex value)</li> <li><code>str</code> (Color role from palette. Example* \"window_role\", \"highlight_role\")</li> </ul> <p>Example: <pre><code>effect = widgets.GraphicsColorizeEffect()\neffect.set_color(\"window_role\")\neffect.set_color((30, 30, 50))\neffect.set_color(\"green\")\n</code></pre></p> <p>QtGui.QIcon</p> <ul> <li><code>pathlib.Path</code> (path to an icon)</li> <li><code>str</code> (icon name, like \"mdi.information\")</li> </ul> <p>Example: <pre><code>button = widgets.PushButton()\nbutton.set_icon(\"mdi.information\")\nbutton.set_icon(pathlib.Path(\"path/to/icon.png\"))\n</code></pre></p> <p>QtCore.QTime</p> <ul> <li><code>datetime.time</code> (https://docs.python.org/3/library/datetime.html#datetime.time)</li> <li><code>str</code> (which can be parsed from dat)</li> </ul> <p>Example: <pre><code>widget = widgets.TimeEdit()\nwidget.set_time(\"02:04:00\")\n</code></pre></p> <p>QtCore.QRegularExpression</p> <ul> <li><code>str</code> (containing the regex pattern)</li> <li><code>re.Pattern</code></li> </ul> <p>Example: <pre><code>proxy = core.SortFilterProxyModel()\npattern = re.complile(\"[a-z]\")\nproxy.set_filter_regular_expression(pattern)\n</code></pre></p> <p>QtCore.QUrl</p> <ul> <li><code>str</code></li> <li><code>os.PathLike</code> (when appropriate)</li> <li><code>urllib.parse.ParseResult</code></li> </ul> <p>Example: <pre><code>page = webenginecore.WebEnginePage()\npage.set_url(\"http://www.github.com/phil65/prettyqt\")\n</code></pre></p> <p>QtCore.QByteArray</p> <ul> <li><code>str</code></li> <li><code>bytes</code></li> </ul> <p>Example: <pre><code>animation = core.PropertyAnimation()\nanimation.set_property_animation(\"pos\")\n</code></pre></p> <p>QtCore.QMargins</p> <ul> <li><code>tuple[int, int, int, int]</code> (left, top, right, bottom)</li> <li><code>tuple[int, int]</code> (left/right, top/bottom)</li> <li><code>int</code></li> <li><code>None</code> (same as 0)</li> <li><code>QtCore.QMarginsF</code></li> </ul> <p>Example: <pre><code>chart = charts.Chart()\nchart.set_margins((4, 2, 0, 0))\nchart.set_margins((1, 2))\nchart.set_margins(5)\nchart.set_margins(None)\n</code></pre></p> <p>QtCore.QPoint</p> <ul> <li><code>tuple[int, int]</code></li> <li><code>QtCore.QPointF</code></li> </ul> <p>Example: <pre><code>point = core.Line()\npoint.set_p1((4, 2))\n</code></pre></p> <p>QtCore.QPointF</p> <ul> <li><code>tuple[float, float]</code></li> <li><code>tuple[int, int]</code></li> <li><code>QtCore.QPoint</code></li> </ul> <p>QtCore.QSize</p> <ul> <li><code>tuple[int, int]</code></li> <li><code>QtCore.QSizeF</code></li> </ul> <p>QtCore.QSizeF</p> <ul> <li><code>tuple[float, float]</code></li> <li><code>QtCore.QSize</code></li> </ul>"},{"location":"features/animating.html","title":"Animating","text":"<p>PrettyQt makes it easy to animate your widgets. All animation-related methods are available via the Widget.fx attribute. Easy one-liners to bring</p>"},{"location":"features/animating.html#some-examples","title":"some Examples:","text":"<pre><code># a lot of animations depend on current geometry.\n# It\u00b4s advisable to show widget first so that it gets layouted.\nwidget = widget.Label(\"I will get animated.\")\nwidget.show()\n# start a general fade animation with fixed start/end\nwidget.fx[\"windowOpacity\"].animate(start=0, end=1, duration=1000)\n# Transition widget size from current value to (500, 500)\nwidget.fx[\"size\"].transition_to((500, 500), duration=1000)\n# Transition widget size from current value to (500, 500)\nwidget.fx[\"pos\"].transition_from((0, -100), duration=1000)\n# fade-in when widget gets clicked\nwidget.fx[\"windowOpacity\"].animate_on_event(\"mouse_button_press\", start=0, end=1)\n# convenience method for mentioned fade-in\nwidget.fx.fade_in(start=0, end=1, start=500)\n# start a zoom animation\nwidget.fx.zoom(start=1, end=1.5, duration=400)\n# start a slide animation 100px to the right\nwidget.fx.slide(start=(0, 0), end=(100, 0), duration=400)\n</code></pre> <p>Animating stylesheet values is also possible easily:</p> <p>TODO.</p>"},{"location":"features/delegates.html","title":"Delegates","text":"<p>Several additional delegates are supplied by PrettyQt.</p> Delegate Description EditorDelegate regular delegate supporting many data types HtmlItemDelegate supports HTML for text IconDelegate NoFocusDelegate hides focus frame ProgressBarDelegate displays a percentage value as a progress bar RadioDelegate RenderLinkDelegate renders a string as link and makes it clickable StarDelegate WidgetDelegate <p>The most important one is the \"EditorDelegate\", which basically works like the default delegate, but supports editing a larger amount of datatypes.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul>"},{"location":"features/layouts.html","title":"Layouts","text":""},{"location":"features/layouts.html#context-manager-to-build-layouts","title":"Context manager to build layouts","text":"<pre><code>from prettyqt import widgets\nwidget = widgets.Widget()\nlayout = widget.set_layout(\"horizontal\")\nwith layout.get_sub_layout(\"splitter\", orientation=\"horizontal\") as layout:\nwith layout.get_sub_layout(\"flow\") as layout:\nlayout += widgets.PushButton(\"Flow 1\")\nlayout += widgets.RadioButton(\"Flow 2\")\nlayout += widgets.PushButton(\"Flow 3\")\nlayout += widgets.RadioButton(\"Flow 4\")\nlayout += widgets.PlainTextEdit(\"Splitter middle\")\nlayout += widgets.PlainTextEdit(\"Splitter right\")\nwith layout.get_sub_layout(\"splitter\", orientation=\"vertical\") as layout:\nlayout += widgets.PlainTextEdit(\"Splitter top\")\nlayout += widgets.PlainTextEdit(\"Splitter middle\")\nwith layout.get_sub_layout(\"scroll\", orientation=\"vertical\") as layout:\nlayout += widgets.PlainTextEdit(\"ScrollArea top\")\nlayout += widgets.PlainTextEdit(\"ScrollArea middle\")\nbutton = layout.add(widgets.PushButton(\"ScrollArea Bottom\"))\nwith layout.get_sub_layout(\"horizontal\") as layout:\nlayout += widgets.PlainTextEdit(\"HorizontalLayout left\")\nlayout += widgets.PlainTextEdit(\"HorizontalLayout right\")\nwith layout.get_sub_layout(\"grid\") as layout:\nlayout[0, 0] = widgets.PushButton(\"Grid topleft\")\nlayout[0, 1] = widgets.RadioButton(\"Grid topright\")\nlayout[1, 0:1] = widgets.PushButton(\"Grid bottom\")\nlayout += widgets.RadioButton(\"Flow 4\")\n</code></pre>"},{"location":"features/layouts.html#setting-a-layout","title":"Setting a layout","text":"<p>Layouts can be also be set by an identifier:</p> <p><pre><code>layout = widget.set_layout(\"horizontal\")\n# equals\nlayout = widgets.HBoxLayout()\nwidget.set_layout(layout)\n</code></pre> Available layouts:</p> <ul> <li> <p>Qt layouts:</p> <ul> <li>\"horizontal\"</li> <li>\"vertical\"</li> <li>\"grid\"</li> <li>\"form\"</li> <li>\"stacked\"</li> </ul> </li> <li> <p>custom layouts:</p> <ul> <li>\"multiline\"</li> <li>\"border\"</li> <li>\"flow\"</li> </ul> </li> </ul> <p>Info</p> <p>Any layout which inherits from widgets.LayoutMixin can be set using an identifier.</p> <pre><code>class MyLayoutSubClass(widgets.BoxLayout):  # BoxLayout inherits from LayoutMixin\nID = \"some_identifier\"   # this one will be usable for set_layout.\n</code></pre>"},{"location":"features/layouts.html#accessing-widgets-inside-a-layout","title":"Accessing widgets inside a layout","text":"<p>All layouts support slicing, including the possibility to apply batch operations:</p> <pre><code>widgets = layout[:4]  # take the first 4 widgets\nwidgets = layout[::2] # take every second widget\nwidgets[2:8:2].set_visible(False)  # hide widgets with index 2, 4, 6, 8\nsizes = widgets[5:].size()  # returns a list with the sizes of widget with index 5 and following.\n</code></pre> <p>As shown, operations on slices are forwarded to each widget which is part of the slice. No need to loop over the whole layout.</p> <p>The same principles also apply to splitters, toolboxes and TabWidgets.</p> <pre><code>splitter[2:5].set_font(\"Consolas\")\n</code></pre>"},{"location":"features/pandas.html","title":"Pandas","text":"<p>Pandas is a very popular python library for working with tabular data.</p> <p>PrettyQt contains a range of tools to work with pandas data structures.</p>"},{"location":"features/pandas.html#models","title":"Models","text":"<p>PrettyQt includes multiple models to display Pandas dataframes. One of the key \"issues\" is that in contrast to QAbstractTableModels, a pandas DataFrame can have MultiIndexes. PrettyQt offers several approaches to display these MultiIndexes.</p> <p>PandasDataFrameModel is a very simple model which is displaying MultiIndexes by joining the multiple index levels using a separator. (the separator value is exposed as a Qt Property)</p> <p>In addition, two composed widgets are included which consist of three different tables (one for data, one for the index, one for the headers) which are synced on scrolling / resizing.</p> <p>There is also a model to get a detailed view on an index and another one to display the categories of a pandas category column.</p>"},{"location":"features/pandas.html#proxies","title":"Proxies","text":"<p>Since working with pandas often means working with tables containing several hundred thousands of rows, the default QSortFilterProxyModel does not work that well.</p> <p>PrettyQt includes several proxy models which try to improve this.</p> <p>PandasStringColumnFilterProxyModel can be used to filter a column based on a search string. Instead of looping over the cells, a filter index is built using NumPy operations. This makes filtering super fast, even with several thousands of rows. A quick benchmark showed an almost 100x (!!) performance increase compared to QSortFilterProxyModel.</p> <p>PandasEvalFilterProxyModel works in a similar way, but filtering is done by a Python statement. (example: '\"a\" &gt; 10' would show all rows where the value of column \"a\" is greater than 10.)</p> <p>To display heatmaps, PrettyQt also includes a proxy model to color the cells according to their values. That proxy model includes several modes, also including modes which dont need to pre-compute min-max values,</p>"},{"location":"features/pandas.html#eventfilters","title":"EventFilters","text":"<p>To prettify the mentioned composed widgets, an EventFilter is included which sets row / column spans on-the-fly.</p>"},{"location":"features/pandas.html#scikit-learn","title":"Scikit-learn","text":"<p>Lastly, there are also models included to display Scikit-Learn estimators and their characteristics.</p>"},{"location":"features/pandasproxies.html","title":"Pandas proxies","text":"Proxy Description PandasStringColumnFilterProxyModel A fast FilterProxyModel for pandas DataFrame str columns. PandasEvalFilterProxyModel A pandas.eval based FilterProxyModel. PandasMultiStringColumnFilterModel A ProxyModel to filter based on contents of multiple columns."},{"location":"features/proxies.html","title":"Proxy models","text":"<p>Every class containing the AbstractItemViewMixin (<code>widgets.TreeView</code>, <code>widgets.TableView</code>, ...) has quick access to proxy superpowers hidden behind the \"proxifier\" attribute. The following section will give an overview about the included proxies and how to apply them.</p>"},{"location":"features/proxies.html#slice-proxies","title":"Slice proxies","text":"<p>PrettyQt introduces a base proxy model which allows its subclasses to be selectively applied to the source model by using python slicing syntax. They can get quickly set up via our Proxifier.</p> <p>Example:</p> <pre><code>model = MyTableModel()\ntable = widgets.TableView()\ntable.set_model(model)\n# lets change the appearance a bit.\n# Set the font color of column 2 and 3 to red and font to Courier.\ntable.proxifier[:, 2:4].style(foreground=\"red\", font=\"Courier\")\n# Cut off last column and only show last 50 lines.\ntable.proxifier[:50, :-1].filter()\n# Set first 20 lines of these 50 lines to read_only\ntable.proxifier[:20, :].change_flags(editable=False)\n# Make first column checkable and trigger callback on checkstate change.\ntable.proxifier[0].make_checkable(callback=my_callback)\n</code></pre> <p>Every call here basically adds another ProxyModel layer (all based on SliceIdentityProxyModel). The proxy models should all perform very well with large tables since they never need to loop over the whole column / row range.</p> <p>The proxifier attribute basically gives quick access to set up these proxies.</p> <p><pre><code>table.proxifier[:-1, 5::2].filter()\n</code></pre> basically equals something like:</p> <pre><code>proxy = SliceFilterProxyModel(indexer=(slice(None, -1, 1), slice(5, None, 2)))\nproxy.setSourceModel(table.model())\ntable.set_model(proxy)\n</code></pre> <p>If you want to apply a slice proxy to all cells of the model, use slices without start and stop values:</p> <pre><code>table.proxifier[:, :].style(background=\"green\")\n</code></pre> <p>Here is a short overview of the included slice proxies:</p> Proxy Description SliceFilterProxyModel Show only selected slice of given source model. SliceAppearanceProxyModel Applies styling to given slice by overriding font, color and alignment roles. SliceChangeFlagsProxyModel Selectively change the ItemFlags of the model SliceChangeIconSizeProxymodel Allows to change the size of the Icon / Pixmap shown for DecorationRole. SliceCheckableProxyModel Makes an area of the table checkable and triggers a callback on checkstate change. SliceCheckableTreeProxyModel Makes an area of a tree checkable and triggers a callback on checkstate change. SliceColorValuesProxyModel Color an area with numerical values based on their value. SliceDisplayTextProxyModel Format non-str DisplayRole values according to formatter strings. SliceMapRoleProxyModel Map an ItemDataRole to another. SliceValueTransformationProxyModel Changes the values of any data role of given slice area based on a callback."},{"location":"features/proxies.html#sortfilter-proxies","title":"Sort/Filter proxies.","text":"<p>In addition to the mentioned SliceFilterProxyModel, PrettyQt also contains several proxies based on QSortFilterProxyModel. These can be more powerful than the mentioned SliceFilterProxyModel, but scale with O(1) in respect to row / column count. (meaning that things might get slower for very large tables or when several proxies are layered on top of each other.) Some of these proxies might partly overlap in functionality, but theres always a best one one for each use case to pick.</p> Proxy Description FuzzyFilterProxyModel Model for implementing a CommandPalette a la SubimeText. ValueFilterProxymodel Similar to QSortFilterProxyModel, but also works with non-str values. SubsetFilterProxyModel Filter based on slices, index, a filter function, a list of indexes (like columns [0, 3, 7]) PredicateFilterProxyModel Filter based on predicates. RangeFilterProxyModel Filter based on min/max values of a numerical column. MulticolumnFilterProxyModel can take a seperate search term / value for each column."},{"location":"features/proxies.html#reshape-styling-proxies","title":"Reshape / Styling proxies","text":"Proxy Description TableToListProxyModel Stack all columns into one single column FlattenTreeProxyModel Moves all rows up to the root level. MeltProxyModel Unpivot a Table from wide to long format. ColumnOrderProxyModel Reorder columns and hide columns. ChangeHeadersProxyModel Change horizontal / vertical headers. AppearanceProxyModel Proxy model to change styling."},{"location":"features/proxies.html#proxies-for-pandas-models","title":"Proxies for pandas models","text":"Proxy Description PandasStringColumnFilterProxyModel A fast FilterProxyModel for pandas DataFrame str columns. PandasEvalFilterProxyModel A pandas.eval based FilterProxyModel. PandasMultiStringColumnFilterModel A ProxyModel to filter based on contents of multiple columns."},{"location":"features/proxies.html#other-proxies","title":"Other Proxies","text":"Proxy Description HighlightMouseProxymodel Highlight regions the mouse cursor is hovering over."},{"location":"features/proxies.html#miscellaneous","title":"Miscellaneous","text":"Class Description ProxyMapper A helper for mapping indexes between proxies in any proxy tree. LinkedSelectionModel A SelectionModel which keeps indexes of any amount of proxies / source models in sync. ProxyComparerWidget A widget to compare a proxy chain, useful for debugging."},{"location":"features/reshapeproxies.html","title":"Reshape / Styling proxies","text":"Proxy Description TableToListProxyModel Stack all columns into one single column FlattenTreeProxyModel Moves all rows up to the root level. MeltProxyModel Unpivot a Table from wide to long format. ColumnOrderProxyModel Reorder columns and hide columns. ChangeHeadersProxyModel Change horizontal / vertical headers. AppearanceProxyModel Proxy model to change styling."},{"location":"features/sliceproxies.html","title":"Slice proxies","text":"<p>PrettyQt introduces a base proxy model which allows its subclasses to be selectively applied to the source model by using python slicing syntax. They can get quickly set up via our Proxifier.</p> <p>Example:</p> <pre><code>model = MyTableModel()\ntable = widgets.TableView()\ntable.set_model(model)\n# lets change the appearance a bit.\n# Set the font color of column 2 and 3 to red and font to Courier.\ntable.proxifier[:, 2:4].style(foreground=\"red\", font=\"Courier\")\n# Cut off last column and only show last 50 lines.\ntable.proxifier[:50, :-1].filter()\n# Set first 20 lines of these 50 lines to read_only\ntable.proxifier[:20, :].change_flags(editable=False)\n# Make first column checkable and trigger callback on checkstate change.\ntable.proxifier[0].make_checkable(callback=my_callback)\n</code></pre> <p>Every call here basically adds another ProxyModel layer (all based on SliceIdentityProxyModel). The proxy models should all perform very well with large tables since they never need to loop over the whole column / row range.</p> <p>The proxifier attribute basically gives quick access to set up these proxies.</p> <p><pre><code>table.proxifier[:-1, 5::2].filter()\n</code></pre> basically equals something like:</p> <pre><code>proxy = SliceFilterProxyModel(indexer=(slice(None, -1, 1), slice(5, None, 2)))\nproxy.setSourceModel(table.model())\ntable.set_model(proxy)\n</code></pre> <p>If you want to apply a slice proxy to all cells of the model, use slices without start and stop values:</p> <pre><code>table.proxifier[:, :].style(background=\"green\")\n</code></pre> <p>Here is a short overview of the included slice proxies:</p> Proxy Description SliceFilterProxyModel Show only selected slice of given source model. SliceAppearanceProxyModel Applies styling to given slice by overriding font, color and alignment roles. SliceChangeFlagsProxyModel Selectively change the ItemFlags of the model SliceChangeIconSizeProxymodel Allows to change the size of the Icon / Pixmap shown for DecorationRole. SliceCheckableProxyModel Makes an area of the table checkable and triggers a callback on checkstate change. SliceCheckableTreeProxyModel Makes an area of a tree checkable and triggers a callback on checkstate change. SliceColorValuesProxyModel Color an area with numerical values based on their value. SliceDisplayTextProxyModel Format non-str DisplayRole values according to formatter strings. SliceMapRoleProxyModel Map an ItemDataRole to another. SliceValueTransformationProxyModel Changes the values of any data role of given slice area based on a callback."},{"location":"features/sortfilterproxies.html","title":"Sort / Filter proxies","text":"<p>In addition to the mentioned SliceFilterProxyModel, PrettyQt also contains several proxies based on QSortFilterProxyModel. These can be more powerful than the mentioned SliceFilterProxyModel, but scale with O(1) in respect to row / column count. (meaning that things might get slower for very large tables or when several proxies are layered on top of each other.) Some of these proxies might partly overlap in functionality, but theres always a best one one for each use case to pick.</p> Proxy Description FuzzyFilterProxyModel Model for implementing a CommandPalette a la SubimeText. ValueFilterProxymodel Similar to QSortFilterProxyModel, but also works with non-str values. SubsetFilterProxyModel Filter based on slices, index, a filter function, a list of indexes (like columns [0, 3, 7]) PredicateFilterProxyModel Filter based on predicates. RangeFilterProxyModel Filter based on min/max values of a numerical column. MulticolumnFilterProxyModel can take a seperate search term / value for each column."},{"location":"features/tools.html","title":"Tools","text":""},{"location":"features/tools.html#tools","title":"Tools","text":"Class Description ProxyMapper A helper for mapping indexes between proxies in any proxy tree. LinkedSelectionModel A SelectionModel which keeps indexes of any amount of proxies / source models in sync. ProxyComparerWidget A widget to compare a proxy chain, useful for debugging."},{"location":"features/validators.html","title":"Validators","text":"<p>PrettyQt includes a range of pre-defined validators.</p> <p>The following validators are included:</p> Validator Description <code>AlphanumericValidator</code> Allows alphanumeric chars <code>BlacklistValidator</code> Forbid a list of strings as input <code>ColorValidator</code> Allows strings which can be parsed as a color <code>HexValidator</code> <code>IntegerValidator</code> <code>JsonValidator</code> Allows strings which can be parsed by json.loads. <code>MonotonicListValidator</code> Allows strings representing a monotonic list. <code>PathValidator</code> allows strings which represent an existing path. Can be set to either accept files, folders or both <code>PythonCodeValidator</code> Allows a string which can be parsed by ast.parse <code>QssValidator</code> Allows a string which can be parsed as CSS <code>RegexPatternValidator</code> Allows a string which can be parsed as a regular expression <code>IntListValidator</code> Allows a comma separated list of integers <code>FloatListValidator</code> Allows a comma separated list of floats <code>ScientificIntegerValidator</code> For integers in scientific annotation. also allows SI unit prefix like 'M', 'n' etc. <code>ScientificFloatValidator</code> For floats in scientific annotation. also allows SI unit prefix like 'M', 'n' etc. <code>TextLengthValidator</code> Allows limiting textlength to a given minimum / maximum <code>WhitelistValidator</code> Whitelist specific strings <code>FunctionValidator</code> Validate string based on a Callable (Signature: Callable[[str], bool]) <code>NotStrictValidator</code> Validator which takes other validators and converts Invalid State to Intermediate State <code>AndValidator</code> Validator which can be used to AND-combine other validators <code>AndValidator</code> Validator which can be used to OR-combine other validators <p>Apart from LineEdits, ComboBoxes and SpinBoxes, PlainTextEdits also gained the ability to take a validator.</p> <p>The set_validator method also gained a \"strict\" keyword argument, which wraps the passed validator into a NotStrictValidator, effectively removing the \"Invalid\" state. That way there never is a situation where the user input is ignored, which might be preferred in a lot of situations.</p> <p>The acceptance of \"\" may also be overriden explicitely by setting the \"allow_empty\" keyword argument.</p> <p>Validators which inherit from gui.Validator also can be combined.</p> <p>Example: <pre><code>val_1 = BlackListValidator([\"Blacklisted word\"])\nval_2 = AlphanumericValidator()\nand_validator = val_1 &amp; val_2  # returns an AndValidator\nval_1 = AlphanumericValidator()\nval_2 = RegularExpressionValidator(\"some_regex\")\nor_val = val_1 | val_2 # returns an OrValidator\n</code></pre> Validators can also be set by an id. Since everything is typed with Literals, the possible ids should be shown by your IDE. <pre><code>lineedit.set_validator(\"float\")\n</code></pre></p>"},{"location":"features/widgets.html","title":"Widgets","text":"<p>Since this library is huge, I will try to give an overview about some modules and mention some of the included \"highlights\".</p> <ul> <li>All setters and getters for Enum properties have an equivalent method taking a string:</li> </ul> <p><pre><code>widget = QtWidgets.QWidget()\nwidget.setSizeAdjustPolicy(widget.SizeAdjustPolicy.AdjustToContents)\n</code></pre> becomes:</p> <pre><code>widgets = widgets.Widget()\nwidget.set_size_adjust_policy(\"adjust_to_contents\")\n</code></pre> <p>Everything is fully typed with Literals, so you should get a very nice IDE experience.</p> <p>The same also applies to getters, with the rule that everything is prefixed with \"get_\" in order to avoid name collisions.</p> <p><pre><code>assert widget.sizeAdjustPolicy() == widget.SizeAdjustPolicy.AdjustToContents\n</code></pre> becomes <pre><code>assert widget.get_size_adjust_policy() == \"adjust_to_contents\"\n</code></pre></p> <p>Note that these new setters and getters are \"optional\" to use. The \"old\" methods are still fully accessible. As a general rule, the library tries to be 100% \"backwards-compatible\".</p> <p>Slicing:</p> <p>A lot of QObjects fully support slicing via getitem. To allow easy batch manipulation, the returned list can delegate method calls to all of its members.</p>"},{"location":"features/widgets.html#some-examples","title":"Some Examples:","text":"<pre><code>model = AVeryNiceTableModel()\n# get indexes of first row:\nindexes = model[:, 0]\n# get indexes of very second column\nindexes = model[:, ::2]\n# batch operations:\n# return list containing data from UserRole for given slice.\ndata = model[2:5, 1:10:2].data(constants.USER_ROLE)\n# now we check out the same for widgets.\n# lets say we have a HBoxLayout containing many items.\nlayout = widgets.HBoxLayout()\n... # populate it with many widgets.\n# Only show first 5 widgets.\nlayout[5:].set_visible(False)\n# get a list containing the width of every 2nd widget in the layout.\nwidths = layout[::2].width()\n# trigger a fade-in animation for first 3 widgets\nlayout[:3].fx.fade_in(duration=1000)\n</code></pre> <p>Validators:</p> <p>PrettyQt ships a large number of predefined validators.</p> <pre><code># Validators can also be combined. The resulting CompositeValidator checks if all containing validators accept the input.\n\n# set_validator also gained a non-strict mode.\n# That way the \"lowest\" result of the validator becomes \"Intermediate\", since the Qt behaviour of ignoring keypresses when state goes to invalid might not be wanted.\n</code></pre>"},{"location":"features/delegates/editordelegate.html","title":"EditorDelegate","text":"<p>             Bases: <code>widgets.StyledItemDelegate</code></p> <p>Delegate which supports editing a large range of data types.</p> <p>Allows editing a large range of different types from Qt, builtin libraries as well as some Numpy types.</p> <p>The Delegate also has an extended displayText method to show a repr-like string for different data types.</p> <p>The following data types are supported:</p> <ul> <li>bool</li> <li>enum.Flag</li> <li>enum.Enum</li> <li>int</li> <li>float</li> <li>str</li> <li>range</li> <li>slice</li> <li>list of ints</li> <li>list of floats</li> <li>list of strings</li> <li>pathlib.Path</li> <li>re.Pattern</li> <li>datetime.date</li> <li>datetime.time</li> <li>datetime.datetime</li> <li>QtCore.QRegularExpression</li> <li>QtCore.QTime</li> <li>QtCore.QDate</li> <li>QtCore.QDateTime</li> <li>QtCore.QPoint</li> <li>QtCore.QPointF</li> <li>QtCore.QRect</li> <li>QtCore.QRectF</li> <li>QtCore.QRection</li> <li>QtCore.QKeyCombination</li> <li>QtCore.QLocale</li> <li>QtCore.QSize</li> <li>QtCore.QSizeF</li> <li>QtCore.QUrl</li> <li>QtGui.QFont</li> <li>QtGui.QKeySequence</li> <li>QtGui.QPalette</li> <li>QtGui.QColor</li> <li>QtGui.QBrush</li> <li>QtGui.QCursor</li> <li>QtGui.QIcon</li> <li>QtWidgets.QSizePolicy</li> </ul> <p>If numpy is installed, the following types are supported, too:</p> <ul> <li>numpy.floating</li> <li>numpy.integer</li> <li>numpy.str_</li> <li>numpy.datetime64</li> <li>numpy.bool_</li> </ul> Source code in <code>prettyqt\\itemdelegates\\editordelegate.py</code> <pre><code>class EditorDelegate(widgets.StyledItemDelegate):\n\"\"\"Delegate which supports editing a large range of data types.\n    Allows editing a large range of different types from Qt, builtin libraries as well\n    as some Numpy types.\n    The Delegate also has an extended displayText method to show a repr-like string for\n    different data types.\n    The following data types are supported:\n    * bool\n    * enum.Flag\n    * enum.Enum\n    * int\n    * float\n    * str\n    * range\n    * slice\n    * list of ints\n    * list of floats\n    * list of strings\n    * pathlib.Path\n    * re.Pattern\n    * datetime.date\n    * datetime.time\n    * datetime.datetime\n    * QtCore.QRegularExpression\n    * QtCore.QTime\n    * QtCore.QDate\n    * QtCore.QDateTime\n    * QtCore.QPoint\n    * QtCore.QPointF\n    * QtCore.QRect\n    * QtCore.QRectF\n    * QtCore.QRection\n    * QtCore.QKeyCombination\n    * QtCore.QLocale\n    * QtCore.QSize\n    * QtCore.QSizeF\n    * QtCore.QUrl\n    * QtGui.QFont\n    * QtGui.QKeySequence\n    * QtGui.QPalette\n    * QtGui.QColor\n    * QtGui.QBrush\n    * QtGui.QCursor\n    * QtGui.QIcon\n    * QtWidgets.QSizePolicy\n    If numpy is installed, the following types are supported, too:\n    * numpy.floating\n    * numpy.integer\n    * numpy.str_\n    * numpy.datetime64\n    * numpy.bool_\n    \"\"\"\nID = \"editor\"\ndef __init__(\nself,\n*args,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\nvalidator: gui.QValidator\n| widgets.lineedit.ValidatorStr\n| datatypes.PatternType\n| None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nself._role = role\nself._validator = validator\ndef paint(\nself,\npainter: gui.QPainter,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\n# if not self.is_supported_type(value):\n#     option = widgets.StyleOptionViewItem(option)\n#     option.state &amp;= ~widgets.QStyle.StateFlag.State_Enabled\nfrom prettyqt import itemdelegates\nmatch value := self._data_for_index(index, self._role):\ncase gui.QIcon():\nicon_delegate = itemdelegates.IconDelegate()\nicon_delegate.paint(painter, option, index)\nreturn\ncase enum.Enum():  # PySide6 needs this when using Views\noption.text = value.name\noption.widget.style().drawControl(\nwidgets.QStyle.ControlElement.CE_ItemViewItem, option, painter\n)\ncase _:\nsuper().paint(painter, option, index)\ndef createEditor(\nself,\nparent: widgets.QWidget,\noption: widgets.QStyleOptionViewItem,\nindex: core.ModelIndex,\n):\nval = self._data_for_index(index, self._role)\nlogger.info(f\"creating editor for {val!r}...\")\nif isinstance(val, list):\nwidget = datatypes.get_editor_for_value_list(val, parent)\nelse:\nwidget = datatypes.get_editor_for_value(val, parent)\nif widget is None:\nlogger.warning(f\"Could not find editor for {val!r} ({type(val)})\")\nreturn None\nif self._validator and isinstance(\nwidget, widgets.LineEdit | widgets.AbstractSpinBoxMixin\n):\nwidget.set_validator(self._validator, append=True)\nwidget.setAutoFillBackground(True)\nwidget.set_focus_policy(\"strong\")\nreturn widget\ndef setEditorData(self, editor: widgets.QWidget, index: core.ModelIndex):\nvalue = self._data_for_index(index, self._role)\nlogger.info(f\"setting data for {editor!r} to {value!r}\")\neditor.set_value(value)\ndef setModelData(\nself,\neditor: widgets.QWidget,\nmodel: core.QAbstractItemModel,\nindex: core.ModelIndex,\n):\nif (value := editor.get_value()) is not None:\nlogger.info(f\"setting data for {model!r} to {value!r}\")\nmodel.setData(index, value, self._role)\n# self.closeEditor.emit(editor, self.EndEditHint.NoHint)\nself.commitData.emit(editor)\ndef displayText(self, value: Any, locale: core.QLocale) -&gt; str:\nreturn datatypes.to_string(value, locale)\n</code></pre>"},{"location":"features/layouts/multilinelayout.html","title":"MultiLineLayout","text":"<p>             Bases: <code>widgets.BoxLayout</code></p> <p>Nested Boxlayout.</p> Source code in <code>prettyqt\\custom_widgets\\layouts\\multilinelayout.py</code> <pre><code>class MultiLineLayout(widgets.BoxLayout):\n\"\"\"Nested Boxlayout.\"\"\"\ndef __init__(self, vertical: bool = True, row_number: int = 3, **kwargs):\nself.row_nb = row_number\nself.layouts = []\nself._sub_layout_type = \"box\"\ndirection = self.Direction.TopToBottom if vertical else self.Direction.LeftToRight\nsuper().__init__(direction, **kwargs)\ndef set_direction(\nself, direction: widgets.BoxLayout.Direction | widgets.boxlayout.DirectionStr\n):\nsuper().set_direction(direction)\ndirection = self.get_sub_direction()\nfor layout in self.layouts:\nif isinstance(layout, widgets.QBoxLayout | MultiLineLayout):\nlayout.set_direction(direction)\ndef get_sub_direction(self) -&gt; widgets.BoxLayout.Direction:\nreturn (\nself.Direction.LeftToRight\nif self.get_direction() == \"top_to_bottom\"\nelse self.Direction.TopToBottom\n)\ndef _add_sub_layout(self):\nmatch self._sub_layout_type:\ncase \"box\":\ndirection = self.get_sub_direction()\nlayout = widgets.BoxLayout(direction)\ncase \"grid\":\nlayout = widget.GridLayout()\ncase \"flow\":\nlayout = custom_widgets.FlowLayout()\ncase \"stacked\":\nlayout = widgets.StackedLayout()\ncase \"nested\":\ndirection = self.get_sub_direction()\nlayout = MultiLineLayout(direction)\nsuper().addLayout(layout)\nself.layouts.append(layout)\ndef addWidget(self, widget: widgets.QWidget, **kwargs):\nif not self.layouts or self.layouts[-1].count() == self.row_nb:\nself._add_sub_layout()\nself.layouts[-1].add(widget, **kwargs)\ndef addLayout(self, layout: widgets.QLayout):\nif not self.layouts or self.layouts[-1].count() == self.row_nb:\nself._add_sub_layout()\nself.layouts[-1].add(layout)\ndef addItem(self, item):\nif not self.layouts or self.layouts[-1].count() == self.row_nb:\nself._add_sub_layout()\nself.layouts[-1].add(item)\ndef get_items(self) -&gt; listdelegators.ListDelegator[widgets.QLayoutItem]:\nitems = [i.get_items() for i in self.layouts]\nreturn listdelegators.ListDelegator(itertools.chain(*items))\ndef itemAt(self, idx: int) -&gt; widgets.QLayoutItem | None:\nif len(self.layouts) == 0 or len(self.get_items()) == 0:\nraise IndexError(idx)\n# doesnt seem right?\nreturn None if idx == len(self.get_items()) else self.get_items()[idx]\ndef takeAt(self, idx: int) -&gt; widgets.QLayoutItem | None:  # or 0 according to docs?\nlayout_idx, item_idx = divmod(idx, len(self.layouts))\nlayout = self.layouts[layout_idx]\nitem = layout.takeAt(item_idx)\nfor i, layout in enumerate(self.layouts[layout_idx:-1], start=layout_idx):\nitem = self.layouts[i + 1].takeAt(0)\nlayout.addItem(item)\nif len(self.layouts[-1]) == 0:\nsuper().takeAt(super().count() - 1)\nreturn item\ndef count(self) -&gt; int:\nreturn len(self.get_items())\ndef indexOf(self, item: widgets.QLayoutItem) -&gt; int:\nreturn self.get_items().index(item)\ndef set_sub_layout_type(self, layout_type: str):\nself._sub_layout_type = layout_type\ndef get_sub_layout_type(self) -&gt; str:\nreturn self._sub_layout_type\nsub_layout_type = core.Property(\nstr,\nget_sub_layout_type,\nset_sub_layout_type,\ndoc=\"Layout for the sub layouts\",\n)\n</code></pre>"},{"location":"features/proxymodels/appearanceproxymodel.html","title":"AppearanceProxyModel","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the \"style roles\" of the source model.</p> <p>In contrast to SliceAppearanceProxyModel, this one works in a more \"static\" way, meaning that you can change the color / font / alignment of indexes via model.setData even when the source model is not item-based (like a StandardItemModel).</p>"},{"location":"features/proxymodels/appearanceproxymodel.html#prettyqt.itemmodels.AppearanceProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\nproxy = itemmodels.AppearanceProxyModel()\nproxy.set_source_model(model)\nproxy.setData(proxy.index(0, 0), gui.QColor(\"red\"), role=constants.FOREGROUND_ROLE)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\appearanceproxymodel.py</code> <pre><code>class AppearanceProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model for changing the \"style roles\" of the source model.\n    In contrast to\n    [SliceAppearanceProxyModel](../proxymodels/sliceappearanceproxymodel.md),\n    this one works in a more \"static\" way, meaning that you can change the\n    color / font / alignment of indexes via model.setData even when the source model\n    is not item-based (like a StandardItemModel).\n    ### Example:\n    ```py\n    model = MyModel()\n    proxy = itemmodels.AppearanceProxyModel()\n    proxy.set_source_model(model)\n    proxy.setData(proxy.index(0, 0), gui.QColor(\"red\"), role=constants.FOREGROUND_ROLE)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"appearance\"\nICON = \"mdi.palette-outline\"\ndef __init__(\nself,\nforeground_default=None,\nbackground_default=None,\nfont_default=None,\nalignment_default=None,\n**kwargs,\n):\nself._foregrounds = collections.defaultdict(lambda: None)\nself._backgrounds = collections.defaultdict(lambda: None)\nself._alignments = collections.defaultdict(lambda: None)\nself._fonts = collections.defaultdict(lambda: None)\nself._foreground_default = foreground_default\nself._background_default = background_default\nself._font_default = font_default\nself._alignment_default = alignment_default\nsuper().__init__(**kwargs)\n# def setSourceModel(self, model):\n#     if (curr_model := self.sourceModel()) is not None:\n#         # curr_model.dataChanged.disconnect(self._reset)\n#         curr_model.columnsInserted.disconnect(self._reset)\n#         curr_model.columnsRemoved.disconnect(self._reset)\n#         curr_model.columnsMoved.disconnect(self._reset)\n#     with self.reset_model():\n#         super().setSourceModel(model)\n#     # model.dataChanged.connect(self._reset)\n#     model.columnsInserted.connect(self._reset)\n#     model.columnsRemoved.connect(self._reset)\n#     model.columnsMoved.connect(self._reset)\n# def _reset(self):\n#     self._foregrounds = collections.defaultdict(lambda: None)\n#     self._backgrounds = collections.defaultdict(lambda: None)\n#     self._alignments = collections.defaultdict(lambda: None)\n#     self._fonts = collections.defaultdict(lambda: None)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nkey = self.get_index_key(index, include_column=True)\nmatch role:\ncase constants.FOREGROUND_ROLE:\nself._foregrounds[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase constants.BACKGROUND_ROLE:\nself._backgrounds[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase constants.FONT_ROLE:\nself._fonts[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase constants.ALIGNMENT_ROLE:\nself._alignments[key] = value\nself.dataChanged.emit(index, index)\nreturn True\ncase _:\nreturn super().setData(index, value, role)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nkey = self.get_index_key(index, include_column=True)\nmatch role:\ncase constants.FOREGROUND_ROLE:\nif val := self._foregrounds[key]:\nreturn val\nmatch self._foreground_default:\ncase type() | Callable():\nreturn self._foreground_default()\ncase None:\nreturn super().data(index, role)\ncase _:\nreturn self._foreground_default\ncase constants.BACKGROUND_ROLE:\nif val := self._backgrounds[key]:\nreturn val\nmatch self._background_default:\ncase type() | Callable():\nreturn self._background_default()\ncase None:\nreturn super().data(index, role)\ncase _:\nreturn self._background_default\ncase constants.FONT_ROLE:\nif val := self._fonts[key]:\nreturn val\nmatch self._font_default:\ncase type() | Callable():\nreturn self._font_default()\ncase None:\nreturn super().data(index, role)\ncase _:\nreturn self._font_default\ncase constants.ALIGNMENT_ROLE:\nval = self._alignments[key]\nreturn val or self._alignment_default\ncase _:\nreturn super().data(index, role)\ndef set_font_default(self, font: QtGui.QFont | str):\nself._font_default = QtGui.QFont(font)\nself._fonts = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_font_default(self) -&gt; QtGui.QFont:\nreturn self._font_default\ndef set_foreground_default(self, foreground: QtGui.QColor | QtGui.QBrush | str):\nif isinstance(foreground, str):\nforeground = QtGui.QColor(foreground)\nself._foreground_default = foreground\nself._foregrounds = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_foreground_default(self) -&gt; QtGui.QColor:\nreturn self._foreground_default\ndef set_background_default(self, background: QtGui.QColor | QtGui.QBrush | str):\nif isinstance(background, str):\nbackground = QtGui.QColor(background)\nself._background_default = background\nself._backgrounds = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_background_default(self) -&gt; QtGui.QFont:\nreturn self._background_default\ndef set_alignment_default(\nself, alignment: constants.AlignmentFlag | constants.AlignmentStr\n):\nif isinstance(alignment, str):\nalignment = constants.ALIGNMENTS[alignment]\nself._alignment_default = alignment\nself._alignments = collections.defaultdict(lambda: None)\nself.update_all()\ndef get_alignment_default(self) -&gt; constants.AlignmentFlag:\nreturn self._alignment_default\nfont_default = core.Property(\nQtGui.QFont,\nget_font_default,\nset_font_default,\ndoc=\"Default font for whole table\",\n)\nforeground_default = core.Property(\nobject,\nget_foreground_default,\nset_foreground_default,\ndoc=\"Default foreground for whole table\",\n)\nbackground_default = core.Property(\nobject,\nget_background_default,\nset_background_default,\ndoc=\"Default background for whole table\",\n)\nalignment_default = core.Property(\nconstants.AlignmentFlag,\nget_alignment_default,\nset_alignment_default,\ndoc=\"Default alignment for whole table\",\n)\n</code></pre>"},{"location":"features/proxymodels/appearanceproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description font_default <code>QFont</code> Default font for whole table foreground_default <code>QColor</code> or <code>QBrush</code> Default foureground for whole table background_default <code>QColor</code> or <code>QBrush</code> Default background for whole table alignment_default <code>AlignmentFlag</code> Default alignment for whole table"},{"location":"features/proxymodels/changeheadersproxymodel.html","title":"ChangeHeadersProxymodel","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model for changing the header data (either horizontal or vertical).</p> <p>Header data can either be changed by passing a list with same length as source length or by passing a dictionary with index as key and new value as value (Example: {1: \"abc\", 3: \"def\"} changes section 1 to \"abc\" and section 3 to \"def\") Apart from the regular use case of changing the text, the other roles can be changed, too.</p>"},{"location":"features/proxymodels/changeheadersproxymodel.html#prettyqt.itemmodels.ChangeHeadersProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.change_headers(header=[\"x\", \"y\", \"z\"],\norientation=constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE\n)\ntable.show()\n# or\nmodel = MyModel()\nproxy = ChangeHeadersProxyModel(\nheader=[\"x\", \"y\", \"z\"], orientation=constants.VERTICAL\n)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\changeheadersproxymodel.py</code> <pre><code>class ChangeHeadersProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model for changing the header data (either horizontal or vertical).\n    Header data can either be changed by passing a list with same length as source length\n    or by passing a dictionary with index as key and new value as value\n    (Example: {1: \"abc\", 3: \"def\"} changes section 1 to \"abc\" and section 3 to \"def\")\n    Apart from the regular use case of changing the text, the other roles can be changed,\n    too.\n    ### Example\n    ```py\n    table.proxifier.change_headers(header=[\"x\", \"y\", \"z\"],\n        orientation=constants.HORIZONTAL,\n        role=constants.DISPLAY_ROLE\n    )\n    table.show()\n    # or\n    model = MyModel()\n    proxy = ChangeHeadersProxyModel(\n        header=[\"x\", \"y\", \"z\"], orientation=constants.VERTICAL\n    )\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"change_headers\"\nICON = \"table-headers-eye\"\ndef __init__(\nself,\nheader: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself._header = header\nself._role = role\ndef setSourceModel(self, model):\nheader_len = (\nmodel.columnCount()\nif self._orientation == constants.HORIZONTAL\nelse model.rowCount()\n)\nif isinstance(self._header, list) and len(self._header) != header_len:\nraise ValueError(\"list needs to be same list as header\")\nsuper().setSourceModel(model)\ndef get_header(self) -&gt; list[int]:\nreturn self._header\ndef set_header(\nself,\nheader: list[str] | dict[int, str],\norientation: constants.Orientation | constants.OrientationStr,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nwith self.reset_model():\nself._header = header\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself._role = role\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation == self._orientation and role == self._role:\nif isinstance(self._header, dict) and section in self._header:\nreturn self._header[section]\nelif isinstance(self._header, list):\nreturn self._header[section]\nreturn self.sourceModel().headerData(section, orientation, role)\nheader = core.Property(\nobject,\nget_header,\nset_header,\ndoc=\"New headers (dict / list)\",\n)\n</code></pre>"},{"location":"features/proxymodels/changeheadersproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description header <code>dict</code> or <code>list</code> Default font for whole table"},{"location":"features/proxymodels/columnjoinerproxymodel.html","title":"ColumnJoinerProxyModel","text":"<p>ColumnJoinerProxyModel</p> Without proxyWith proxy <p><pre><code>data = dict(first=[\"John\", \"Mary\"], last=[\"Doe\", \"Bo\"])\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier.add_column(header=\"Full name\", formatter=\"{1}, {0}\")\ntable.show()\n</code></pre> </p> <p><pre><code>data = dict(first=[\"John\", \"Mary\"], last=[\"Doe\", \"Bo\"])\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier.add_column(header=\"Full name\", formatter=\"{1}, {0}\")\ntable.show()\n</code></pre> </p> <p>             Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model which joins the contents of several columns.</p> <p>The columns are joined based on a formatter and appended to the end of the model as a new column.</p> <p>The formatter must look like <code>{0} - {1}: {4}</code>. The format codes are then populated with the content of given columns, in this case it would be <code>{Text of column 0} - {Text of Column 1}: {Text of Column 4}</code></p>"},{"location":"features/proxymodels/columnjoinerproxymodel.html#prettyqt.itemmodels.ColumnJoinerProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.join_columns(formatter=\"{0} - {2}\", header=\"New column\")\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnJoinerProxyModel()\nproxy.set_source_model(model)\nproxy.add_column(formatter=\"{0} - {2}\", header=\"New column\")\nproxy.add_column(formatter=\"{4}: {5}\", header=\"Another column\")\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\columnjoinerproxymodel.py</code> <pre><code>class ColumnJoinerProxyModel(core.AbstractProxyModel):\n\"\"\"Proxy model which joins the contents of several columns.\n    The columns are joined based on a formatter and appended to the end of the model\n    as a new column.\n    The formatter must look like `{0} - {1}: {4}`.\n    The format codes are then populated with the content of given columns,\n    in this case it would be `{Text of column 0} - {Text of Column 1}: {Text of Column 4}`\n    ### Example\n    ```py\n    table.proxifier.join_columns(formatter=\"{0} - {2}\", header=\"New column\")\n    table.show()\n    # or\n    model = MyModel()\n    proxy = ColumnJoinerProxyModel()\n    proxy.set_source_model(model)\n    proxy.add_column(formatter=\"{0} - {2}\", header=\"New column\")\n    proxy.add_column(formatter=\"{4}: {5}\", header=\"Another column\")\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"column_join\"\nICON = \"mdi.table-column-plus-before\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.mapping = []\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn (\n0\nif self.sourceModel() is None\nelse self.sourceModel().columnCount(parent) + len(self.mapping)\n)\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nreturn self.sourceModel().rowCount()\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\ncolumn = index.column()\nif self.is_additional_column(column):\nflags = self.mapping[column - self.columnCount()].flags\nreturn (\nflags\nif flags is not None\nelse constants.IS_ENABLED | constants.IS_SELECTABLE\n)\nreturn self.sourceModel().flags(index)\ndef is_additional_column(self, column: int):\ncol_count = self.sourceModel().columnCount()\nreturn column &gt;= col_count\ndef index(self, row: int, column: int, parent: core.ModelIndex | None = None):\nparent = parent or core.ModelIndex()\nif self.is_additional_column(column):\nreturn self.createIndex(row, column, core.ModelIndex())\nreturn self.sourceModel().index(row, column, parent)\ndef parent(self, index=None):\nif index is None:\nreturn super().parent()\nif self.is_additional_column(index.column()):\nreturn core.ModelIndex()\nreturn self.sourceModel().parent(index)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ncol_count = self.sourceModel().columnCount()\ncolumn = index.column()\nif self.is_additional_column(column):\nif role == constants.DISPLAY_ROLE:\nmapper = self.mapping[column - col_count]\nformatter = mapper.formatter\nfield_names = [\nfield_name\nfor (\n_literal_text,\nfield_name,\n_format_spec,\n_conversion,\n) in string.Formatter().parse(formatter)\n# if field_name is not None\n]\nmatch formatter:\ncase str():\nfor name in field_names:\nidx = self.index(index.row(), int(name), index.parent())\ndata = self.data(idx)\nformatter = formatter.replace(f\"{{{name}}}\", data)\nreturn formatter\ncase Callable():\nreturn formatter(index)\nreturn None\nreturn super().data(index, role)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation == constants.HORIZONTAL and self.is_additional_column(section):\nif role == constants.DISPLAY_ROLE:\nmapper = self.mapping[section - self.columnCount()]\nreturn mapper.header\nreturn None\nreturn super().headerData(section, orientation, role)\ndef mapToSource(self, proxy_index):\nif not proxy_index.isValid():\nreturn core.ModelIndex()\ncolumn = proxy_index.column()\nif self.is_additional_column(column):\nreturn core.ModelIndex()\nreturn self.sourceModel().index(proxy_index.row(), column, proxy_index.parent())\ndef mapFromSource(self, index):\nif self.is_additional_column(index.column()):\nreturn core.ModelIndex()\nreturn self.sourceModel().index(index.row(), index.column(), index.parent())\ndef add_mapping(\nself, header: str, formatter: str, flags: constants.ItemFlag | None = None\n):\n\"\"\"Add a new column to the table.\n        Arguments:\n            header: Label used for the section header.\n            formatter: String formatter (example \"{0}: {1}\")\n            flags: ItemFlags for new column\n        \"\"\"\nself.mapping.append(ColumnMapping(formatter, header, flags))\n</code></pre>"},{"location":"features/proxymodels/columnjoinerproxymodel.html#prettyqt.itemmodels.proxies.columnjoinerproxymodel.ColumnJoinerProxyModel.add_mapping","title":"<code>add_mapping(header: str, formatter: str, flags: constants.ItemFlag | None = None)</code>","text":"<p>Add a new column to the table.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Label used for the section header.</p> required <code>formatter</code> <code>str</code> <p>String formatter (example \"{0}: {1}\")</p> required <code>flags</code> <code>constants.ItemFlag | None</code> <p>ItemFlags for new column</p> <code>None</code> Source code in <code>prettyqt\\itemmodels\\proxies\\columnjoinerproxymodel.py</code> <pre><code>def add_mapping(\nself, header: str, formatter: str, flags: constants.ItemFlag | None = None\n):\n\"\"\"Add a new column to the table.\n    Arguments:\n        header: Label used for the section header.\n        formatter: String formatter (example \"{0}: {1}\")\n        flags: ItemFlags for new column\n    \"\"\"\nself.mapping.append(ColumnMapping(formatter, header, flags))\n</code></pre>"},{"location":"features/proxymodels/columnorderproxymodel.html","title":"ColumnOrderProxyModel","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which reorders the columns of the source model.</p> <p>Proxy model which reorders / hides the columns of the source model by passing a list containing the new order. Order indexes can either be an integer or the Column header. If not all indexes are part of the list, then the missing sections will be hidden.</p>"},{"location":"features/proxymodels/columnorderproxymodel.html#prettyqt.itemmodels.ColumnOrderProxyModel--example","title":"Example","text":"<pre><code>table.proxifier.reorder_columns(order=[3, 2, 0])\ntable.show()\n# or\nmodel = MyModel()\nproxy = ColumnOrderProxyModel(order=[3, 2, 0])\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\columnorderproxymodel.py</code> <pre><code>class ColumnOrderProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model which reorders the columns of the source model.\n    Proxy model which reorders / hides the columns of the source model by passing a list\n    containing the new order. Order indexes can either be an integer or the Column header.\n    If not all indexes are part of the list, then the missing sections will be hidden.\n    ### Example\n    ```py\n    table.proxifier.reorder_columns(order=[3, 2, 0])\n    table.show()\n    # or\n    model = MyModel()\n    proxy = ColumnOrderProxyModel(order=[3, 2, 0])\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"column_order\"\nICON = \"mdi.reorder-vertical\"\ndef __init__(self, order: list[int | str], **kwargs):\nself._column_order = order\nsuper().__init__(**kwargs)\nself.set_column_order(order)\ndef get_column_order(self) -&gt; list[int]:\nreturn self._column_order\ndef setSourceModel(self, model):\nsuper().setSourceModel(model)\nself._resolve_string_indexes()\ndef _resolve_string_indexes(self):\nnew_order = []\nsource = self.sourceModel()\nfor index in self._column_order:\nif isinstance(index, str):\nfor i in range(source.columnCount()):\nv = source.headerData(i, constants.HORIZONTAL, constants.DISPLAY_ROLE)\nif v == index:\nindex = i\nbreak\nelse:\nraise ValueError(index)\nnew_order.append(index)\nself._column_order = new_order\ndef set_column_order(self, order: list[int | str]):\nwith self.reset_model():\nself._column_order = order\nif self.sourceModel() is not None:\nself._resolve_string_indexes()\ndef mapToSource(self, proxy_index: core.ModelIndex) -&gt; core.ModelIndex:\nif not proxy_index.isValid():\nreturn core.ModelIndex()\nreturn self.sourceModel().createIndex(\nproxy_index.row(),\nself._column_order[proxy_index.column()],\nproxy_index.internalPointer(),\n)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\nif not source_index.isValid():\nreturn core.ModelIndex()\nproxy_column = self._column_order.index(source_index.column())\nreturn self.createIndex(\nsource_index.row(), proxy_column, source_index.internalPointer()\n)\ndef sibling(self, row: int, column: int, index: core.ModelIndex) -&gt; core.ModelIndex:\nif column &gt;= len(self._column_order):\nreturn core.ModelIndex()\nreturn self.index(row, column, index.parent())\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation == constants.HORIZONTAL:\nsection = self._column_order[section]\nreturn self.sourceModel().headerData(section, orientation, role)\ndef hasChildren(self, parent_index: core.ModelIndex) -&gt; bool:\nif self.sourceModel() is None or parent_index.column() &gt; 0:\nreturn False\nsource_parent = self.mapToSource(parent_index).sibling(parent_index.row(), 0)\nreturn self.sourceModel().rowCount(source_parent) &gt; 0\ndef parent(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nsource_parent = self.mapToSource(index).parent()\nif not source_parent.isValid():\nreturn core.ModelIndex()\nreturn self.createIndex(source_parent.row(), 0, source_parent.internalPointer())\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nif parent.column() &gt; 0 or self.sourceModel() is None:\nreturn core.ModelIndex()\nsource_parent = self.mapToSource(parent).sibling(parent.row(), 0)\nsource_index = self.sourceModel().index(\nrow, self._column_order[column], source_parent\n)\nif not source_index.isValid():\nreturn core.ModelIndex()\nreturn self.createIndex(row, column, source_index.internalPointer())\ndef columnCount(self, index: core.ModelIndex | None = None) -&gt; int:\nindex = index or core.ModelIndex()\nreturn len(self._column_order)\ndef rowCount(self, index: core.ModelIndex | None = None) -&gt; int:\nindex = index or core.ModelIndex()\nif self.sourceModel() is None or index.column() &gt; 0:\nreturn 0\nsource_parent = self.mapToSource(index).sibling(index.row(), 0)\nreturn self.sourceModel().rowCount(source_parent)\norder = core.Property(\nlist,\nget_column_order,\nset_column_order,\ndoc=\"Column order\",\n)\n</code></pre>"},{"location":"features/proxymodels/columnorderproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode"},{"location":"features/proxymodels/flattentreeproxymodel.html","title":"FlattenTreeProxyModel","text":"<p>Proxy model to flatten a tree to appear like a table.</p>"},{"location":"features/proxymodels/flattentreeproxymodel.html#example","title":"Example","text":"<p>Original model:</p> <p>MeltProxyModel</p> Without proxyWith proxyPath modeLeaves only mode <p><pre><code>table = widgets.TreeView()\nsource_model = itemmodels.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\n# table.proxifier.flatten()\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = itemmodels.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\ntable.proxifier.flatten()\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = itemmodels.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\ntable.proxifier.flatten(show_path=True)\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = itemmodels.ParentClassTreeModel(widgets.Frame)\ntable.set_model(source_model)\ntable.proxifier.flatten(leaves_only=True)\n</code></pre> </p> <pre><code>table.proxifier.flatten()\n# or\nproxy = itemmodels.FlattenTreeProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\n</code></pre>"},{"location":"features/proxymodels/flattentreeproxymodel.html#api","title":"API","text":"<p>             Bases: <code>core.AbstractProxyModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\flattentreeproxymodel.py</code> <pre><code>class FlattenTreeProxyModel(core.AbstractProxyModel):\nID = \"flatten_tree\"\ndef __init__(self, parent: widgets.QWidget | None = None, **kwargs):\nself._leaves_only = False\nself._show_path = False\nself._source_column = 0\nself.PATH_SEPARATOR = \" / \"\nself._source_root_index = core.ModelIndex()\nself._source_key: list[tuple[int, ...]] = []\nself._source_offset: dict[tuple[int, ...], int] = {}\nsuper().__init__(parent, **kwargs)\ndef setSourceModel(self, model: core.QAbstractItemModel):\nif (old_model := self.sourceModel()) is not None:\nold_model.dataChanged.disconnect(self._source_data_changed)\nold_model.rowsInserted.disconnect(self._on_reset)\nold_model.rowsRemoved.disconnect(self._on_reset)\nold_model.rowsMoved.disconnect(self._on_row_move)\nwith self.reset_model():\nsuper().setSourceModel(model)\nself._update_mapping()\nmodel.dataChanged.connect(self._source_data_changed)\nmodel.rowsInserted.connect(self._on_reset)\nmodel.rowsRemoved.connect(self._on_reset)\nmodel.rowsMoved.connect(self._on_row_move)\ndef set_source_column(self, column: int):\nwith self.reset_model():\nself._source_column = column\nself._update_mapping()\ndef get_source_column(self) -&gt; int:\nreturn self._source_column\ndef set_root_index(self, root_index: core.ModelIndex):\nwith self.reset_model():\nself._source_root_index = root_index\nself._update_mapping()\ndef get_root_index(self) -&gt; core.ModelIndex:\nreturn self._source_root_index\ndef set_leaves_only(self, leaves_only: bool):\nif leaves_only != self._leaves_only:\nwith self.reset_model():\nself._leaves_only = leaves_only\nself._update_mapping()\ndef is_leaves_only(self) -&gt; bool:\nreturn self._leaves_only\ndef set_show_path(self, show: bool):\nif show != self._show_path:\nwith self.reset_model():\nself._show_path = show\ndef is_path_shown(self) -&gt; bool:\nreturn self._show_path\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\nif not source_index.isValid():\nreturn source_index\nkey = self.get_index_key(source_index)\nrow = self._source_offset[key] + source_index.row()\nreturn self.index(row, 0)\ndef mapToSource(self, index: core.ModelIndex) -&gt; core.ModelIndex:\nif not index.isValid():\nreturn index\nrow = index.row()\nsource_key_path = self._source_key[row]\nreturn self.source_index_from_key(source_key_path)\ndef index(\nself, row: int, column: int = 0, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nreturn (\ncore.ModelIndex()\nif parent.isValid()\nelse self.createIndex(row, column, row)  # object=row)\n)\ndef parent(self, child=None) -&gt; core.ModelIndex:\nreturn super().parent() if child is None else core.ModelIndex()\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else len(self._source_key)\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if parent.isValid() else 1\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nflags = super().flags(index)\nreturn flags\n# this would disable non-leave items\n# index = self.mapToSource(index)\n# model = self.sourceModel()\n# enabled = flags &amp; constants.ItemFlag.ItemIsEnabled\n# if model is not None and model.rowCount(index) &gt; 0 and enabled:\n#     flags ^= constants.ItemFlag.ItemIsEnabled\n# return flags\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role == constants.DISPLAY_ROLE and self._show_path:\nindex = self.mapToSource(index)\nmodel = self.sourceModel()\npath = model.get_breadcrumbs_path(index)\nreturn self.PATH_SEPARATOR.join(str(i) for i in path)\nreturn super().data(index, role)\ndef _update_mapping(self):\nif self.sourceModel() is None:\nreturn\nself._source_key, self._source_offset = self.get_source_mapping(self._leaves_only)\ndef _source_data_changed(self, top: core.ModelIndex, bottom: core.ModelIndex):\nchanged_indexes = [top.sibling(i, 0) for i in range(top.row(), bottom.row() + 1)]\nfor ind in changed_indexes:\nself.dataChanged.emit(ind, ind)\ndef _on_reset(self, parent: core.ModelIndex, start: int, end: int):\nwith self.reset_model():\nself._update_mapping()\ndef _on_row_move(\nself, source_parent, source_start, source_end, dest_parent, dest_row\n):\nwith self.reset_model():\nself._update_mapping()\nleaves_only = core.Property(\nbool,\nis_leaves_only,\nset_leaves_only,\ndoc=\"Whether to only show the tree leaves\",\n)\nshow_path = core.Property(\nbool,\nis_path_shown,\nset_show_path,\ndoc=\"Show the complete path in first column\",\n)\n</code></pre>"},{"location":"features/proxymodels/flattentreeproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description show_path <code>bool</code> Show full path in first column leaves_only <code>bool</code> Only include tree leaves"},{"location":"features/proxymodels/fuzzyfilterproxymodel.html","title":"FuzzyFilterProxyModel","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel which sorts the results based on a matching score.</p> <p>The matching score evaluates metrics like upper/lower casing, distance of filter character to match character and some more. Best matches are shown at the top.</p> <p>The matching score is exposed as a custom UserRole (FuzzyFilterProxyModel.Roles.SortRole) The proxymodel replaces the text from the display role in the given filter column with HTML code in order to color the letter matches. A backup from the original text is made available in the BackupRole. Based on the original text, the proxy calculates a score for the match and makes it available via the SortRole. To display the html code properly, a HtmlItemDelegate is needed.</p>"},{"location":"features/proxymodels/fuzzyfilterproxymodel.html#prettyqt.itemmodels.FuzzyFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = itemmodels.FuzzyFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\fuzzyfilterproxymodel.py</code> <pre><code>class FuzzyFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A FilterProxyModel which sorts the results based on a matching score.\n    The matching score evaluates metrics like upper/lower casing, distance of\n    filter character to match character and some more.\n    Best matches are shown at the top.\n    The matching score is exposed as a custom UserRole\n    (FuzzyFilterProxyModel.Roles.SortRole)\n    The proxymodel replaces the text from the display role in the given filter column\n    with HTML code in order to color the letter matches. A backup from the original text\n    is made available in the BackupRole. Based on the original text, the proxy calculates\n    a score for the match and makes it available via the SortRole.\n    To display the html code properly, a HtmlItemDelegate is needed.\n    ### Example\n    ```py\n    proxy = itemmodels.FuzzyFilterProxyModel()\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"fuzzy\"\nclass Roles(enum.IntEnum):\n\"\"\"Addional roles.\"\"\"\nBackupRole = constants.USER_ROLE + 65\nSortRole = constants.SORT_ROLE\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, filter_mode=\"fuzzy\", **kwargs)\nself._search_term = \"\"\nself._match_color: gui.QColor = gui.Color(\"blue\")\nself.sort(0, constants.DESCENDING)\ndef set_match_color(self, color: datatypes.ColorType | None):\nself._match_color = colors.get_color(color) if color else gui.QColor()\ndef get_match_color(self) -&gt; gui.QColor:\nreturn self._match_color\ndef lessThan(self, left: core.ModelIndex, right: core.ModelIndex):\nif not self._search_term:\nreturn super().lessThan(left, right)\nif left.data() is None or right.data() is None:\nreturn True\n# since fuzzy scores are cached, it should be fine to do this here.\nleft_data = fuzzy.fuzzy_match(self._search_term, str(left.data()))\nright_data = fuzzy.fuzzy_match(self._search_term, str(right.data()))\nreturn left_data &lt; right_data\ndef set_search_term(self, search_term: str):\nself._search_term = search_term\nsuper().set_search_term(search_term)\nself.invalidate()\ndef get_search_term(self):\nreturn self._search_term\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not index.isValid():\nreturn None\nfilter_column = self.filterKeyColumn()\nmatch role, index.column():\ncase constants.DISPLAY_ROLE, _ if index.column() == filter_column:\nlabel = super().data(index, constants.DISPLAY_ROLE)\nreturn (\nfuzzy.color_text(\nself._search_term,\nstr(label),\nself._match_color.name(),\nself.is_filter_case_sensitive(),\n)\nif self._search_term and self._match_color.isValid() and label\nelse label\n)\n# case constants.DISPLAY_ROLE, 1:\n#     idx = self.index(index.row(), filter_column)\n#     label = super().data(idx, constants.DISPLAY_ROLE)\n#     if label is None:\n#         return None\n#     result = fuzzy.fuzzy_match(self._search_term, str(label))\n#     return str(result[1])\ncase self.Roles.BackupRole, _:\nreturn super().data(index, constants.DISPLAY_ROLE)\ncase self.Roles.SortRole, _:\nidx = self.index(index.row(), filter_column)\nlabel = super().data(idx, constants.DISPLAY_ROLE)\nresult = fuzzy.fuzzy_match(self._search_term, label)\nreturn result[1]\ncase _, _:\nreturn super().data(index, role)\nsearch_term = core.Property(\nstr,\nget_search_term,\nset_search_term,\ndoc=\"Current search term\",\n)\nmatch_color = core.Property(\ngui.QColor,\nget_match_color,\nset_match_color,\ndoc=\"Color to use for match coloring\",\n)\n</code></pre>"},{"location":"features/proxymodels/fuzzyfilterproxymodel.html#prettyqt.itemmodels.proxies.fuzzyfilterproxymodel.FuzzyFilterProxyModel.Roles","title":"<code>Roles</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Addional roles.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\fuzzyfilterproxymodel.py</code> <pre><code>class Roles(enum.IntEnum):\n\"\"\"Addional roles.\"\"\"\nBackupRole = constants.USER_ROLE + 65\nSortRole = constants.SORT_ROLE\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html","title":"HighlightMouseProxyModel","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same row / column as mouse position.</p> <p>The proxy can work in four different modes.</p> <ul> <li>column: The column the mouse is currently hovering over is highlighted.</li> <li>row: The row the mouse is currently hovering over is highlighted.</li> <li>both: Combination of column and row mode.</li> <li>single: only the hovered cell is highlighted.</li> </ul> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>class HighlightMouseProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model which highlights all cells with same row / column as mouse position.\n    The proxy can work in four different modes.\n    * column: The column the mouse is currently hovering over is highlighted.\n    * row: The row the mouse is currently hovering over is highlighted.\n    * both: Combination of column and row mode.\n    * single: only the hovered cell is highlighted.\n    \"\"\"\nID = \"highlight_mouse\"\nICON = \"mdi.cursor-default-click-outline\"\ndef __init__(\nself,\nparent: widgets.QAbstractItemView,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"both\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(parent, **kwargs)\n# TODO: this should be done in proxifier I think,\n# ItemModel shouldnt know about widget.\nparent.setMouseTracking(True)\nparent.entered.connect(self.cell_entered)\nparent.installEventFilter(self)\ndef eventFilter(self, source, event):\nmatch event.type():\ncase core.Event.Type.Leave:\nself._current_row = None\nself._current_column = None\nself.force_layoutchange()\nreturn False\ndef cell_entered(self, index):\nself._current_row = index.row()\nself._current_column = index.column()\nself.force_layoutchange()\ndef set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\ndef get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\ndef set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\ndef get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role != constants.BACKGROUND_ROLE:\nreturn super().data(index, role)\nis_in_row = index.row() == self._current_row\nis_in_column = index.column() == self._current_column\nmatch self._mode:\ncase \"column\" if is_in_column:\nreturn self._highlight_color\ncase \"row\" if is_in_row:\nreturn self._highlight_color\ncase \"both\" if is_in_row or is_in_column:\nreturn self._highlight_color\ncase \"single\" if is_in_row and is_in_column:\nreturn self._highlight_color\ncase _:\nreturn super().data(index, role)\nhighlightMode = core.Property(\nstr,\nget_highlight_mode,\nset_highlight_mode,\ndoc=\"Highlight mode\",\n)\nhighlightColor = core.Property(\nQtGui.QColor,\nget_highlight_color,\nset_highlight_color,\ndoc=\"Color to use for highlighting\",\n)\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#prettyqt.itemmodels.proxies.highlightmouseproxymodel.HighlightMouseProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\highlightmouseproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"features/proxymodels/highlightmouseproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlight mode highlight_color <code>gui.QColor</code> Color to use for highlighting"},{"location":"features/proxymodels/meltproxymodel.html","title":"MeltProxyModel","text":"<p>MeltProxyModel</p> Without proxyWith proxy <p><pre><code>app = widgets.app()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier.melt(id_columns=[0, 1])\ntable.show()\n</code></pre> </p> <p><pre><code>app = widgets.app()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier.melt(id_columns=[0, 1])\ntable.show()\n</code></pre> </p> <p>             Bases: <code>core.AbstractProxyModel</code></p> <p>Proxy model to unpivot a table from wide format to long format.</p> <p>Works same way as pandas.melt.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>class MeltProxyModel(core.AbstractProxyModel):\n\"\"\"Proxy model to unpivot a table from wide format to long format.\n    Works same way as [pandas.melt](https://shorturl.at/bhGI3).\n    \"\"\"\nID = \"melt\"\nICON = \"mdi6.table-pivot\"\ndef __init__(\nself,\nid_columns: list[int],\nvar_name: str = \"Variable\",\nvalue_name: str = \"Value\",\n**kwargs,\n):\nself._id_columns = id_columns\nself._var_name = var_name\nself._value_name = value_name\nsuper().__init__(**kwargs)\n@property\ndef value_columns(self) -&gt; list[int]:\ncolcount = self.sourceModel().columnCount()\nreturn [i for i in range(colcount) if i not in self._id_columns]\ndef rowCount(self, index: core.ModelIndex | None = None) -&gt; int:\nreturn self.sourceModel().rowCount() * len(self.value_columns)\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if self.sourceModel() is None else len(self._id_columns) + 2\ndef is_source_column(self, column: int) -&gt; bool:\nreturn 0 &lt;= column &lt; self.columnCount() - 2\ndef is_variable_column(self, column: int) -&gt; bool:\nreturn column == self.columnCount() - 2\ndef is_value_column(self, column: int) -&gt; bool:\nreturn column == self.columnCount() - 1\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ncolumn = index.column()\nif self.is_variable_column(column) and role == constants.DISPLAY_ROLE:\ncol = index.row() // self.sourceModel().rowCount()\nreturn self.sourceModel().headerData(\nself.value_columns[col], constants.HORIZONTAL\n)\nreturn super().data(index, role)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif orientation != constants.HORIZONTAL:\nreturn str(section)\nif self.is_variable_column(section):\nreturn self._var_name or \"Variable\"\nelif self.is_value_column(section):\nreturn self._value_name or \"Value\"\nelse:\nsection = self.get_source_column_for_proxy_column(section)\nreturn self.sourceModel().headerData(section, orientation, role)\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\n# TODO: broken\nparent = parent or core.ModelIndex()\nif column not in self._id_columns:\nreturn self.createIndex(row, column, core.ModelIndex())\ncol_pos = self.get_source_column_for_proxy_column(column)\nrow_pos = row % self.sourceModel().rowCount()\nreturn self.sourceModel().index(row_pos, col_pos, parent)\ndef parent(self, index: core.ModelIndex):\nif not self.is_source_column(index.column()):\nreturn core.ModelIndex()\nreturn self.sourceModel().parent(index)\ndef get_source_column_for_proxy_column(self, column: int) -&gt; int:\nreturn self._id_columns.index(column)\ndef get_proxy_column_for_source_column(self, column: int) -&gt; int:\nreturn column - sum(column &gt; col for col in self._id_columns)\ndef mapToSource(self, proxy_index: core.ModelIndex) -&gt; core.ModelIndex:\nsource = self.sourceModel()\nif source is None or not proxy_index.isValid():\nreturn core.ModelIndex()\nrow, column = proxy_index.row(), proxy_index.column()\nrow_count = source.rowCount()\nif self.is_variable_column(column):\nreturn core.ModelIndex()\nelif self.is_value_column(column):\nsource_col = self.value_columns[row // row_count]\nsource_row = row % row_count\nreturn source.index(source_row, source_col, core.ModelIndex())\nelse:\nsource_col = self.get_source_column_for_proxy_column(column)\nsource_row = row % row_count\nreturn source.index(source_row, source_col)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n# TODO: this is still broken.\nsource = self.sourceModel()\nif source is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow, col = source_index.row(), source_index.column()\n# we can only really return a corresponding index for the value columns.\n# Var column is completely virtual and the id columns would have multiple\n# source indexes which correspond to the proxy index.\nif col not in self.value_columns:\nreturn core.ModelIndex()\n# TODO: convert row / col\nreturn source.index(row, col, core.ModelIndex())\ndef get_id_columns(self) -&gt; list[int]:\n\"\"\"Get list of identifier columns.\"\"\"\nreturn self._id_columns\ndef set_id_columns(self, columns: list[int]):\n\"\"\"Set identifier variable columns.\"\"\"\nwith self.reset_model():\nself._id_columns = columns\ndef get_var_name(self) -&gt; str:\n\"\"\"Get variable column header.\"\"\"\nreturn self._var_name\ndef set_var_name(self, name: str):\n\"\"\"Set header for variable column.\"\"\"\nself._var_name = name\nsection = self.columnCount() - 2\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\ndef get_value_name(self) -&gt; str:\n\"\"\"Get value column header.\"\"\"\nreturn self._value_name\ndef set_value_name(self, name: str):\n\"\"\"Set header for value column.\"\"\"\nself._value_name = name\nsection = self.columnCount() - 1\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\nid_columns = core.Property(\nlist,\nget_id_columns,\nset_id_columns,\ndoc=\"Columns to use as identifier variables\",\n)\nvar_name = core.Property(\nstr,\nget_var_name,\nset_var_name,\ndoc=\"Header for variable column\",\n)\nvalue_name = core.Property(\nstr,\nget_value_name,\nset_value_name,\ndoc=\"Header for value column\",\n)\n</code></pre> <pre><code>table.proxifier.melt(id_columns=[0, 1])\n# equals\nproxy = itemmodels.MeltProxyModel(id_columns=[0, 1])\nproxy.set_source_model(table.model())\ntable.set_model(proxy)\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.get_id_columns","title":"<code>get_id_columns() -&gt; list[int]</code>","text":"<p>Get list of identifier columns.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def get_id_columns(self) -&gt; list[int]:\n\"\"\"Get list of identifier columns.\"\"\"\nreturn self._id_columns\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.get_value_name","title":"<code>get_value_name() -&gt; str</code>","text":"<p>Get value column header.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def get_value_name(self) -&gt; str:\n\"\"\"Get value column header.\"\"\"\nreturn self._value_name\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.get_var_name","title":"<code>get_var_name() -&gt; str</code>","text":"<p>Get variable column header.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def get_var_name(self) -&gt; str:\n\"\"\"Get variable column header.\"\"\"\nreturn self._var_name\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.set_id_columns","title":"<code>set_id_columns(columns: list[int])</code>","text":"<p>Set identifier variable columns.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def set_id_columns(self, columns: list[int]):\n\"\"\"Set identifier variable columns.\"\"\"\nwith self.reset_model():\nself._id_columns = columns\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.set_value_name","title":"<code>set_value_name(name: str)</code>","text":"<p>Set header for value column.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def set_value_name(self, name: str):\n\"\"\"Set header for value column.\"\"\"\nself._value_name = name\nsection = self.columnCount() - 1\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#prettyqt.itemmodels.proxies.meltproxymodel.MeltProxyModel.set_var_name","title":"<code>set_var_name(name: str)</code>","text":"<p>Set header for variable column.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\meltproxymodel.py</code> <pre><code>def set_var_name(self, name: str):\n\"\"\"Set header for variable column.\"\"\"\nself._var_name = name\nsection = self.columnCount() - 2\nself.headerDataChanged.emit(constants.HORIZONTAL, section, section)\n</code></pre>"},{"location":"features/proxymodels/meltproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description id_columns <code>list[int]</code> Columns to use as identifier variables var_name <code>str</code> Header for variable column value_name <code>str</code> Header for value column"},{"location":"features/proxymodels/multicolumnfilterproxymodel.html","title":"MultiColumnFilterProxyModel","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A SortFilterProxyModel which filters based on multiple columns in one go.</p> <p>This proxy uses seperate search term / values for each column in order to filter the source model, thus avoiding to layer proxy models in case you want to filter based on several columns. That way it is less demanding since filtering for all columns is done in one go.</p> <p>This model is used by the FilterHeader widget in order to filter a table in one go, avoiding the need to layer multiple proxy models.</p>"},{"location":"features/proxymodels/multicolumnfilterproxymodel.html#prettyqt.itemmodels.MultiColumnFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = itemmodels.MultiColumnFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\multicolumnfilterproxymodel.py</code> <pre><code>class MultiColumnFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A SortFilterProxyModel which filters based on multiple columns in one go.\n    This proxy uses seperate search term / values for each column in order to filter\n    the source model, thus avoiding to layer proxy models in case you want to filter\n    based on several columns. That way it is less demanding since filtering\n    for all columns is done in one go.\n    ### Example\n    ```py\n    proxy = itemmodels.MultiColumnFilterProxyModel()\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"multi_column_filter\"\ndef __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: dict[int, Filter] = {}\nself.setRecursiveFilteringEnabled(True)\ndef clear_filters(self):\nself._filters = {}\nself.invalidateRowsFilter()\ndef set_filter_value(\nself,\ncolumn: int,\nvalue: str,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif value == \"\" or value is None:  # False is a valid value.\ndel self._filters[column]\nelse:\nself._filters[column] = Filter(column=column, value=value, role=role)\nself.invalidateRowsFilter()\ndef setFilterKeyColumn(self, column: int):\nraise NotImplementedError(\"Not supported.\")\ndef setFilterRole(self, column: int):\nraise NotImplementedError(\"Not supported.\")\ndef filterAcceptsRow(self, row, parent):\nsource = self.sourceModel()\nfor k, v in self._filters.items():\nindex = source.index(row, k, parent)\ndata = source.data(index, v.role)\nsearch_val = v.value\nmatch search_val:\ncase str():\nsearch_val = str(search_val)\ndata = str(data)\nif self.filterMode == \"fuzzy\" and not fuzzy.fuzzy_match_simple(\nsearch_val,\ndata,\ncase_sensitive=self.is_filter_case_sensitive(),\n):\nreturn False\nif not self.is_filter_case_sensitive():\nsearch_val = search_val.lower()\ndata = data.lower()\nif not data.startswith(search_val):\nreturn False\ncase Callable():\nreturn search_val(data)\ncase _:\nif data != search_val:\nreturn False\nreturn True\n</code></pre>"},{"location":"features/proxymodels/pandasevalfilterproxymodel.html","title":"PandasEvalFilterProxyModel","text":"<p>             Bases: <code>BasePandasIndexFilterProxyModel</code></p> Source code in <code>prettyqt\\qtpandas\\pandasmodels\\pandasindexfilterproxymodel.py</code> <pre><code>class PandasEvalFilterProxyModel(BasePandasIndexFilterProxyModel):\nID = \"pandas_eval_filter\"\ndef __init__(self, **kwargs):\nself._expression = \"\"\nsuper().__init__(**kwargs)\ndef set_expression(self, expression: str):\nself._expression = expression\nif not self._expression:\nself._reset_filter_index(True)\nself._update_mapping()\ntry:\nself._filter_index = df.eval(self._expression)\nself._filter_index = self._filter_index.to_numpy()\n# df.eval doesnt neccessarily return a bool index. If not, show nothing.\nif self._filter_index.dtype != bool:\nself._reset_filter_index(False)\nexcept Exception:\nself._reset_filter_index(False)\nself._update_mapping()\ndef get_expression(self) -&gt; str:\nreturn self._expression\nexpression = core.Property(\nstr,\nget_expression,\nset_expression,\ndoc=\"Expression to use for filtering\",\n)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/pandasmultistringcolumnfilterproxymodel.html","title":"PandasMultiStringColumnFilterProxyModel","text":"<p>             Bases: <code>BasePandasIndexFilterProxyModel</code></p> Source code in <code>prettyqt\\qtpandas\\pandasmodels\\pandasindexfilterproxymodel.py</code> <pre><code>class PandasMultiStringColumnFilterProxyModel(BasePandasIndexFilterProxyModel):\ndef __init__(self, **kwargs):\nself._filters: dict[str, str] = {}\nsuper().__init__(**kwargs)\ndef set_filters(self, filters: dict[str, str]):\nself._filters = filters\ndf = self.get_source_model(skip_proxies=True).df\n# workaround-ish way to implement \"startswith\" as an expression\nfilters = [f\"('{v}' &lt;= `{k}` &lt;= '{v}~')\" for k, v in self._filters.items()]\nexpr = \" &amp; \".join(filters)\ntry:\nself._filter_index = df.eval(expr)\nself._filter_index = self._filter_index.to_numpy()\nif self._filter_index.dtype != bool:\nself._filter_index = self._filter_index.astype(bool)\nexcept Exception:\nself._reset_filter_index(False)\nself._update_mapping()\ndef get_filters(self) -&gt; dict[str, str]:\nreturn self._filters\nfilters = core.Property(\ndict,\nget_filters,\nset_filters,\ndoc=\"Dictionary containing a Column-&gt;EvalStr mapping\",\n)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/pandasstringcolumnfilterproxymodel.html","title":"PandasStringColumnFilterProxyModel","text":"<p>             Bases: <code>BasePandasIndexFilterProxyModel</code></p> <p>Basically filters a dataframe based on df.iloc[:, column].str.somemethod(term).</p> Source code in <code>prettyqt\\qtpandas\\pandasmodels\\pandasindexfilterproxymodel.py</code> <pre><code>class PandasStringColumnFilterProxyModel(BasePandasIndexFilterProxyModel):\n\"\"\"Basically filters a dataframe based on df.iloc[:, column].str.somemethod(term).\"\"\"\nID = \"pandas_str_filter\"\ndef __init__(self, **kwargs):\nself._filter_column = 0\nself._filter_mode = \"startswith\"\nself._case_sensitive = True\nself._flags = 0\nself._search_term = \"\"\nself._na_value = False\nsuper().__init__(**kwargs)\ndef set_search_term(self, search_term: str):\nself._search_term = search_term\nif not self._search_term:\nself._reset_filter_index(init_value=True)\nself._update_mapping()\nreturn\ndf = self.get_source_model(skip_proxies=True).df\nmatch self.filter_mode:\ncase \"startswith\":\nself._filter_index = df.iloc[:, self._filter_column].str.startswith(\nself._search_term, na=self._na_value\n)\ncase \"endswith\":\nself._filter_index = df.iloc[:, self._filter_column].str.endswith(\nself._search_term, na=self._na_value\n)\ncase \"contains\":\nself._filter_index = df.iloc[:, self._filter_column].str.contains(\nself._search_term,\ncase=self._case_sensitive,\nflags=self._flags,\nna=self._na_value,\n)\ncase \"match\":\nself._filter_index = df.iloc[:, self._filter_column].str.match(\nself._search_term,\ncase=self._case_sensitive,\nflags=self._flags,\nna=self._na_value,\n)\nself._filter_index = self._filter_index.to_numpy()\n# this is needed for new StringDtype, otherwise much slower.\nif self._filter_index.dtype == object:\nself._filter_index = self._filter_index.astype(bool)\nself._update_mapping()\ndef get_search_term(self) -&gt; str:\nreturn self._search_term\ndef set_filter_column(self, column: int):\nself._filter_column = column\ndef get_filter_column(self) -&gt; int:\nreturn self._filter_column\ndef set_filter_mode(self, mode: FilterModeStr):\nself._filter_mode = mode\ndef get_filter_mode(self) -&gt; FilterModeStr:\nreturn self._filter_mode\ndef set_case_sensitive(self, mode: bool):\nself._case_sensitive = mode\ndef is_case_sensitive(self) -&gt; bool:\nreturn self._case_sensitive\ndef set_flags(self, flags: int):\nself._flags = flags\ndef get_flags(self) -&gt; int:\nreturn self._flags\ndef set_na_value(self, value: bool):\nself._na_value = value\ndef get_na_value(self) -&gt; bool:\nreturn self._na_value\nsearch_term = core.Property(\nstr,\nget_search_term,\nset_search_term,\ndoc=\"Term to use for filtering\",\n)\nfilter_column = core.Property(\nint,\nget_filter_column,\nset_filter_column,\ndoc=\"Column to use for filtering\",\n)\nfilter_mode = core.Property(\nstr,\nget_filter_mode,\nset_filter_mode,\ndoc=\"Filter mode\",\n)\ncase_sensitive = core.Property(\nbool,\nis_case_sensitive,\nset_case_sensitive,\ndoc=\"Case sensitivity of the filter. Does not apply to start/endswith.\",\n)\nre_flags = core.Property(\nint,\nget_flags,\nset_flags,\ndoc=\"Regex Flags for match and contains mode\",\n)\nna_value = core.Property(\nbool,\nget_na_value,\nset_na_value,\ndoc=\"NA value\",\n)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/predicatefilterproxymodel.html","title":"PredicateFilterProxyModel","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A simple filter proxy model with settable filter predicates.</p>"},{"location":"features/proxymodels/predicatefilterproxymodel.html#prettyqt.itemmodels.PredicateFilterProxyModel--example","title":"Example:","text":"<pre><code>proxy = PredicateFilterProxyModel()\nproxy.add_filter(lambda value: value &lt; 1)\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\predicatefilterproxymodel.py</code> <pre><code>class PredicateFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A simple filter proxy model with settable filter predicates.\n    ### Example:\n    ```py\n    proxy = PredicateFilterProxyModel()\n    proxy.add_filter(lambda value: value &lt; 1)\n    ```\n    \"\"\"\nID = \"predicate_filter\"\ndef __init__(self, parent=None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself._filters: list[Callable[[Any], bool]] = []\ndef clear_filters(self):\nself._filters = []\nself.invalidateFilter()\ndef add_filter(self, predicate: Callable[[Any], bool]):\nself._filters.append(predicate)\nself.invalidateFilter()\ndef filterAcceptsRow(self, row, parent):\nsource = self.sourceModel()\ncol = self.filterKeyColumn()\nrole = self.filterRole()\nindex = source.index(row, col, parent)\ndata = source.data(index, role)\ndef apply(f: Callable):\ntry:\nreturn f(data)\nexcept (TypeError, ValueError):\nreturn False\nreturn all(apply(f) for f in self._filters)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html","title":"Proxifier","text":"<p>The proxifier object offers a more declarative way to set up proxy models.</p> <pre><code>model = MyTableModel()\ntable = widgets.TableView()\ntable.set_model(model)\n# lets change the appearance a bit.\n# Set the font color of column 2 and 3 to red and font to Courier.\ntable.proxifier[:, 2:4].style(foreground=\"red\", font=\"Courier\")\n# Cut off last column and only show last 50 lines.\ntable.proxifier[:50, :-1].filter()\n# Set first 20 lines of these 50 lines to read_only\ntable.proxifier[:20, :].change_flags(editable=False)\n# Make first column checkable and trigger callback on checkstate change.\ntable.proxifier[0].make_checkable(callback=my_callback)\n</code></pre> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>class Proxifier:\ndef __init__(self, widget: widgets.QAbstractItemView):\nself._widget = widget\nself._wrapper = None\ndef __getitem__(self, value: slice) -&gt; Sliced:\n\"\"\"Return a Sliced Object.\"\"\"\nlogger.debug(f\"Building {value!r} ProxyModel for {self._widget!r}\")\nself._wrapper = Sliced(indexer=value, widget=self._widget, proxifier=self)\nreturn self._wrapper\ndef __getattr__(self, name: str):\nindexer = (slice(None, None, None), slice(None, None, None))\nself._wrapper = Sliced(indexer=indexer, widget=self._widget, proxifier=self)\nif hasattr(self._wrapper, name):\nreturn getattr(self._wrapper, name)\nelse:\nraise AttributeError(name)\ndef transpose(self) -&gt; core.TransposeProxyModel:\n\"\"\"Transpose rows/columns.\n        Wraps current model with a TransposeProxyModel.\n        \"\"\"\nproxy = core.TransposeProxyModel(\nparent=self._widget, source_model=self._widget.model()\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef flatten(\nself, show_path: bool = False, leaves_only: bool = False\n) -&gt; itemmodels.FlattenTreeProxyModel:\n\"\"\"Wraps model in a Proxy which flattens tree to one column.\n        Arguments:\n            show_path: Whether the first column should show the full tree path.\n            leaves_only: whether the proxied model should return only tree leaves.\n        \"\"\"\n# ss = \"\"\"QTreeView::branch{border-image: url(none.png);}\"\"\"\n# self._widget.set_stylesheet(ss)\nfrom prettyqt import itemmodels\nproxy = itemmodels.FlattenTreeProxyModel(\nparent=self._widget,\nshow_path=show_path,\nleaves_only=leaves_only,\nsource_model=self._widget.model(),\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef melt(\nself, id_columns: list[int], var_name: str = \"Variable\", value_name: str = \"Value\"\n) -&gt; itemmodels.MeltProxyModel:\n\"\"\"Wraps model in a Proxy which unpivots the table to a long format.\n        Arguments:\n            id_columns: Identifier variables\n            var_name: header to use for variable column\n            value_name: header to use for value_name\n        \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.MeltProxyModel(\nid_columns=id_columns,\nvar_name=var_name,\nvalue_name=value_name,\nparent=self._widget,\nsource_model=self._widget.model(),\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef reorder_columns(self, order: list[int]) -&gt; itemmodels.ColumnOrderProxyModel:\n\"\"\"Reorder columns to given order.\n        Wraps current model with a ColumnOrderProxyModel which rearranges columns to given\n        order.\n        Arguments:\n            order: list of indexes. Does not need to include all column indexes,\n                  missing ones will be hidden.\n        \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.ColumnOrderProxyModel(\norder=order, parent=self._widget, source_model=self._widget.model()\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef to_list(self) -&gt; itemmodels.TableToListProxyModel:\n\"\"\"Convert table to a list.\n        Wraps model with a TableToListProxyModel which reshapes table to one column\n        by concatenating the seperatate columns into a one-columned list.\n        \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.TableToListProxyModel(\nparent=self._widget, source_model=self._widget.model()\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef add_column(\nself,\nheader: str,\nformatter: str,\nflags: constants.ItemFlag | None = None,\n) -&gt; itemmodels.ColumnJoinerProxyModel:\n\"\"\"Add a new column with given header to the table.\n        Column content can be defined by a formatter.\n        Arguments:\n            header: Title for section header\n            formatter: String formatter (Example: \"{2} - {4}\" would result in\n                       &lt;displayRole of column 2&gt; - &lt;displayRole of column4&gt;\n            flags: ItemFlags for new column (default: Enabled and selectable)\n        \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.ColumnJoinerProxyModel(\nparent=self._widget, source_model=self._widget.model()\n)\nproxy.add_mapping(header=header, formatter=formatter, flags=flags)\nself._widget.set_model(proxy)\nreturn proxy\ndef change_headers(\nself,\nheaders: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; itemmodels.ChangeHeadersProxyModel:\n\"\"\"Change headers of source model.\n        Wraps current model with a ChangeHeadersProxyModel.\n        Arguments:\n            headers: new headers to use\n            orientation: orientation of the header which should be modified.\n            role: Header role to change\n        \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.ChangeHeadersProxyModel(\nheader=headers,\nrole=role,\norientation=orientation,\nparent=self._widget,\nsource_model=self._widget.model(),\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef set_sort_filter_proxy(self, **kwargs) -&gt; core.SortFilterProxyModel:\nproxy = core.SortFilterProxyModel(\nparent=self._widget, source_model=self._widget.model(), **kwargs\n)\nself._widget.set_model(proxy)\nreturn proxy\ndef get_proxy(self, proxy: ProxyStr, **kwargs) -&gt; core.QAbstractProxyModel:\nKlass = classhelpers.get_class_for_id(core.AbstractProxyModelMixin, proxy)\nproxy_instance = Klass(\nparent=self._widget, source_model=self._widget.model(), **kwargs\n)\nself._widget.set_model(proxy_instance)\nreturn proxy_instance\ndef map_to(\nself,\nindex_or_selection: core.ModelIndex | core.QItemSelection,\ntarget: widgets.QAbstractItemView | core.QAbstractItemModel,\n) -&gt; core.ModelIndex | core.QItemSelection:\n\"\"\"Map index or selection to given target.\n        Arguments:\n            index_or_selection: What should be mapped.\n            target: Either an ItemView or a (proxy) model which is linked to our current\n                    model.\n        \"\"\"\nif isinstance(target, widgets.QAbstractItemView):\ntarget = target.model()\nmapper = itemmodels.ProxyMapper(self._widget.model(), target)\nmatch index_or_selection:\ncase core.ModelIndex():\nreturn mapper.map_index(source=0, target=1, index=index_or_selection)\ncase core.QItemSelection():\nreturn mapper.map_selection(\nsource=0, target=1, selection=index_or_selection\n)\ncase _:\nraise TypeError(index_or_selection)\ndef map_from(\nself,\nindex_or_selection: core.ModelIndex | core.QItemSelection,\nsource: widgets.QAbstractItemView | core.QAbstractItemModel,\n) -&gt; core.ModelIndex | core.QItemSelection:\n\"\"\"Map index or selection from given source.\n        Arguments:\n            index_or_selection: What should be mapped.\n            source: Either an ItemView or a (proxy) model which is linked to our current\n                    model.\n        \"\"\"\nif isinstance(source, widgets.QAbstractItemView):\nsource = source.model()\nmapper = itemmodels.ProxyMapper(self._widget.model(), source)\nmatch index_or_selection:\ncase core.ModelIndex():\nreturn mapper.map_index(source=1, target=0, index=index_or_selection)\ncase core.QItemSelection():\nreturn mapper.map_selection(\nsource=1, target=0, selection=index_or_selection\n)\ncase _:\nraise TypeError(index_or_selection)\ndef sync_current_selection_with(\nself,\ntarget: widgets.QAbstractItemView | core.QAbstractItemModel,\n):\n\"\"\"Map index or selection from given source.\n        Arguments:\n            target: Either an ItemView or a (proxy) model which is linked to our current\n                    model.\n        \"\"\"\nif isinstance(target, widgets.QAbstractItemView):\ntarget = target.model()\nitemmodels.ProxyMapper(self._widget.model(), target)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.__getitem__","title":"<code>__getitem__(value: slice) -&gt; Sliced</code>","text":"<p>Return a Sliced Object.</p> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def __getitem__(self, value: slice) -&gt; Sliced:\n\"\"\"Return a Sliced Object.\"\"\"\nlogger.debug(f\"Building {value!r} ProxyModel for {self._widget!r}\")\nself._wrapper = Sliced(indexer=value, widget=self._widget, proxifier=self)\nreturn self._wrapper\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.add_column","title":"<code>add_column(header: str, formatter: str, flags: constants.ItemFlag | None = None) -&gt; itemmodels.ColumnJoinerProxyModel</code>","text":"<p>Add a new column with given header to the table.</p> <p>Column content can be defined by a formatter.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>str</code> <p>Title for section header</p> required <code>formatter</code> <code>str</code> <p>String formatter (Example: \"{2} - {4}\" would result in         -  required <code>flags</code> <code>constants.ItemFlag | None</code> <p>ItemFlags for new column (default: Enabled and selectable)</p> <code>None</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def add_column(\nself,\nheader: str,\nformatter: str,\nflags: constants.ItemFlag | None = None,\n) -&gt; itemmodels.ColumnJoinerProxyModel:\n\"\"\"Add a new column with given header to the table.\n    Column content can be defined by a formatter.\n    Arguments:\n        header: Title for section header\n        formatter: String formatter (Example: \"{2} - {4}\" would result in\n                   &lt;displayRole of column 2&gt; - &lt;displayRole of column4&gt;\n        flags: ItemFlags for new column (default: Enabled and selectable)\n    \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.ColumnJoinerProxyModel(\nparent=self._widget, source_model=self._widget.model()\n)\nproxy.add_mapping(header=header, formatter=formatter, flags=flags)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.change_headers","title":"<code>change_headers(headers: list[Any] | dict[int, Any], orientation: constants.Orientation | constants.OrientationStr = constants.HORIZONTAL, role: constants.ItemDataRole = constants.DISPLAY_ROLE) -&gt; itemmodels.ChangeHeadersProxyModel</code>","text":"<p>Change headers of source model.</p> <p>Wraps current model with a ChangeHeadersProxyModel.</p> <p>Parameters:</p> Name Type Description Default <code>headers</code> <code>list[Any] | dict[int, Any]</code> <p>new headers to use</p> required <code>orientation</code> <code>constants.Orientation | constants.OrientationStr</code> <p>orientation of the header which should be modified.</p> <code>constants.HORIZONTAL</code> <code>role</code> <code>constants.ItemDataRole</code> <p>Header role to change</p> <code>constants.DISPLAY_ROLE</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def change_headers(\nself,\nheaders: list[Any] | dict[int, Any],\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; itemmodels.ChangeHeadersProxyModel:\n\"\"\"Change headers of source model.\n    Wraps current model with a ChangeHeadersProxyModel.\n    Arguments:\n        headers: new headers to use\n        orientation: orientation of the header which should be modified.\n        role: Header role to change\n    \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.ChangeHeadersProxyModel(\nheader=headers,\nrole=role,\norientation=orientation,\nparent=self._widget,\nsource_model=self._widget.model(),\n)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.flatten","title":"<code>flatten(show_path: bool = False, leaves_only: bool = False) -&gt; itemmodels.FlattenTreeProxyModel</code>","text":"<p>Wraps model in a Proxy which flattens tree to one column.</p> <p>Parameters:</p> Name Type Description Default <code>show_path</code> <code>bool</code> <p>Whether the first column should show the full tree path.</p> <code>False</code> <code>leaves_only</code> <code>bool</code> <p>whether the proxied model should return only tree leaves.</p> <code>False</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def flatten(\nself, show_path: bool = False, leaves_only: bool = False\n) -&gt; itemmodels.FlattenTreeProxyModel:\n\"\"\"Wraps model in a Proxy which flattens tree to one column.\n    Arguments:\n        show_path: Whether the first column should show the full tree path.\n        leaves_only: whether the proxied model should return only tree leaves.\n    \"\"\"\n# ss = \"\"\"QTreeView::branch{border-image: url(none.png);}\"\"\"\n# self._widget.set_stylesheet(ss)\nfrom prettyqt import itemmodels\nproxy = itemmodels.FlattenTreeProxyModel(\nparent=self._widget,\nshow_path=show_path,\nleaves_only=leaves_only,\nsource_model=self._widget.model(),\n)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.map_from","title":"<code>map_from(index_or_selection: core.ModelIndex | core.QItemSelection, source: widgets.QAbstractItemView | core.QAbstractItemModel) -&gt; core.ModelIndex | core.QItemSelection</code>","text":"<p>Map index or selection from given source.</p> <p>Parameters:</p> Name Type Description Default <code>index_or_selection</code> <code>core.ModelIndex | core.QItemSelection</code> <p>What should be mapped.</p> required <code>source</code> <code>widgets.QAbstractItemView | core.QAbstractItemModel</code> <p>Either an ItemView or a (proxy) model which is linked to our current     model.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def map_from(\nself,\nindex_or_selection: core.ModelIndex | core.QItemSelection,\nsource: widgets.QAbstractItemView | core.QAbstractItemModel,\n) -&gt; core.ModelIndex | core.QItemSelection:\n\"\"\"Map index or selection from given source.\n    Arguments:\n        index_or_selection: What should be mapped.\n        source: Either an ItemView or a (proxy) model which is linked to our current\n                model.\n    \"\"\"\nif isinstance(source, widgets.QAbstractItemView):\nsource = source.model()\nmapper = itemmodels.ProxyMapper(self._widget.model(), source)\nmatch index_or_selection:\ncase core.ModelIndex():\nreturn mapper.map_index(source=1, target=0, index=index_or_selection)\ncase core.QItemSelection():\nreturn mapper.map_selection(\nsource=1, target=0, selection=index_or_selection\n)\ncase _:\nraise TypeError(index_or_selection)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.map_to","title":"<code>map_to(index_or_selection: core.ModelIndex | core.QItemSelection, target: widgets.QAbstractItemView | core.QAbstractItemModel) -&gt; core.ModelIndex | core.QItemSelection</code>","text":"<p>Map index or selection to given target.</p> <p>Parameters:</p> Name Type Description Default <code>index_or_selection</code> <code>core.ModelIndex | core.QItemSelection</code> <p>What should be mapped.</p> required <code>target</code> <code>widgets.QAbstractItemView | core.QAbstractItemModel</code> <p>Either an ItemView or a (proxy) model which is linked to our current     model.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def map_to(\nself,\nindex_or_selection: core.ModelIndex | core.QItemSelection,\ntarget: widgets.QAbstractItemView | core.QAbstractItemModel,\n) -&gt; core.ModelIndex | core.QItemSelection:\n\"\"\"Map index or selection to given target.\n    Arguments:\n        index_or_selection: What should be mapped.\n        target: Either an ItemView or a (proxy) model which is linked to our current\n                model.\n    \"\"\"\nif isinstance(target, widgets.QAbstractItemView):\ntarget = target.model()\nmapper = itemmodels.ProxyMapper(self._widget.model(), target)\nmatch index_or_selection:\ncase core.ModelIndex():\nreturn mapper.map_index(source=0, target=1, index=index_or_selection)\ncase core.QItemSelection():\nreturn mapper.map_selection(\nsource=0, target=1, selection=index_or_selection\n)\ncase _:\nraise TypeError(index_or_selection)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.melt","title":"<code>melt(id_columns: list[int], var_name: str = 'Variable', value_name: str = 'Value') -&gt; itemmodels.MeltProxyModel</code>","text":"<p>Wraps model in a Proxy which unpivots the table to a long format.</p> <p>Parameters:</p> Name Type Description Default <code>id_columns</code> <code>list[int]</code> <p>Identifier variables</p> required <code>var_name</code> <code>str</code> <p>header to use for variable column</p> <code>'Variable'</code> <code>value_name</code> <code>str</code> <p>header to use for value_name</p> <code>'Value'</code> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def melt(\nself, id_columns: list[int], var_name: str = \"Variable\", value_name: str = \"Value\"\n) -&gt; itemmodels.MeltProxyModel:\n\"\"\"Wraps model in a Proxy which unpivots the table to a long format.\n    Arguments:\n        id_columns: Identifier variables\n        var_name: header to use for variable column\n        value_name: header to use for value_name\n    \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.MeltProxyModel(\nid_columns=id_columns,\nvar_name=var_name,\nvalue_name=value_name,\nparent=self._widget,\nsource_model=self._widget.model(),\n)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.reorder_columns","title":"<code>reorder_columns(order: list[int]) -&gt; itemmodels.ColumnOrderProxyModel</code>","text":"<p>Reorder columns to given order.</p> <p>Wraps current model with a ColumnOrderProxyModel which rearranges columns to given order.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>list[int]</code> <p>list of indexes. Does not need to include all column indexes,   missing ones will be hidden.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def reorder_columns(self, order: list[int]) -&gt; itemmodels.ColumnOrderProxyModel:\n\"\"\"Reorder columns to given order.\n    Wraps current model with a ColumnOrderProxyModel which rearranges columns to given\n    order.\n    Arguments:\n        order: list of indexes. Does not need to include all column indexes,\n              missing ones will be hidden.\n    \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.ColumnOrderProxyModel(\norder=order, parent=self._widget, source_model=self._widget.model()\n)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.sync_current_selection_with","title":"<code>sync_current_selection_with(target: widgets.QAbstractItemView | core.QAbstractItemModel)</code>","text":"<p>Map index or selection from given source.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>widgets.QAbstractItemView | core.QAbstractItemModel</code> <p>Either an ItemView or a (proxy) model which is linked to our current     model.</p> required Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def sync_current_selection_with(\nself,\ntarget: widgets.QAbstractItemView | core.QAbstractItemModel,\n):\n\"\"\"Map index or selection from given source.\n    Arguments:\n        target: Either an ItemView or a (proxy) model which is linked to our current\n                model.\n    \"\"\"\nif isinstance(target, widgets.QAbstractItemView):\ntarget = target.model()\nitemmodels.ProxyMapper(self._widget.model(), target)\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.to_list","title":"<code>to_list() -&gt; itemmodels.TableToListProxyModel</code>","text":"<p>Convert table to a list.</p> <p>Wraps model with a TableToListProxyModel which reshapes table to one column by concatenating the seperatate columns into a one-columned list.</p> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def to_list(self) -&gt; itemmodels.TableToListProxyModel:\n\"\"\"Convert table to a list.\n    Wraps model with a TableToListProxyModel which reshapes table to one column\n    by concatenating the seperatate columns into a one-columned list.\n    \"\"\"\nfrom prettyqt import itemmodels\nproxy = itemmodels.TableToListProxyModel(\nparent=self._widget, source_model=self._widget.model()\n)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/proxifier.html#prettyqt.utils.proxifier.Proxifier.transpose","title":"<code>transpose() -&gt; core.TransposeProxyModel</code>","text":"<p>Transpose rows/columns.</p> <p>Wraps current model with a TransposeProxyModel.</p> Source code in <code>prettyqt\\utils\\proxifier.py</code> <pre><code>def transpose(self) -&gt; core.TransposeProxyModel:\n\"\"\"Transpose rows/columns.\n    Wraps current model with a TransposeProxyModel.\n    \"\"\"\nproxy = core.TransposeProxyModel(\nparent=self._widget, source_model=self._widget.model()\n)\nself._widget.set_model(proxy)\nreturn proxy\n</code></pre>"},{"location":"features/proxymodels/rangefilterproxymodel.html","title":"RangeFilterProxyModel","text":"<p>             Bases: <code>core.Object</code></p> <p>Class to map indexes / ItemSelections from one proxy to another.</p> <p>Also handles cases like: <pre><code>            Root model\n                |\n           shared proxy\n           /                      Proxy_1_1     Proxy_2_1\n          |            |\n        Proxy_1_2     Proxy_2_2\n</code></pre> When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then mapFromSource / mapSelectionFromSource to get down to 2_2.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>class ProxyMapper(core.Object):\n\"\"\"Class to map indexes / ItemSelections from one proxy to another.\n    Also handles cases like:\n    ```\n                Root model\n                    |\n               shared proxy\n               /          \\\n            Proxy_1_1     Proxy_2_1\n              |            |\n            Proxy_1_2     Proxy_2_2\n    ```\n    When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here),\n    use mapToSource / mapSelectionFromSource until it gets there,\n    and then mapFromSource / mapSelectionFromSource to get down to 2_2.\n    \"\"\"\ndef __init__(\nself,\n*proxies: core.QAbstractItemModel,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nchains = [get_proxy_chain(proxy) for proxy in proxies]\ncommon_list = [\nelement\nfor element in chains[0]\nif all(element in sublist for sublist in chains[1:])\n]\nif not common_list:\nraise RuntimeError(\"No common source model\")\ncommon_source = common_list[0]\nlogger.debug(f\"Common source: {common_source}\")\nself._chains = [chain[: chain.index(common_source)] for chain in chains]\ndef map_index(\nself, source: int, target: int, index: core.ModelIndex\n) -&gt; core.ModelIndex:\n\"\"\"Map index from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nindex = model.mapToSource(index)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nindex = model.mapFromSource(index)\nreturn index\ndef map_selection(\nself, source: int, target: int, selection: core.QItemSelection\n) -&gt; core.QItemSelection:\n\"\"\"Map selection from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nselection = model.mapSelectionToSource(selection)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nselection = model.mapSelectionFromSource(selection)\nreturn selection\n</code></pre>"},{"location":"features/proxymodels/rangefilterproxymodel.html#prettyqt.itemmodels.proxies.proxymapper.ProxyMapper.map_index","title":"<code>map_index(source: int, target: int, index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source to target.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>def map_index(\nself, source: int, target: int, index: core.ModelIndex\n) -&gt; core.ModelIndex:\n\"\"\"Map index from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nindex = model.mapToSource(index)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nindex = model.mapFromSource(index)\nreturn index\n</code></pre>"},{"location":"features/proxymodels/rangefilterproxymodel.html#prettyqt.itemmodels.proxies.proxymapper.ProxyMapper.map_selection","title":"<code>map_selection(source: int, target: int, selection: core.QItemSelection) -&gt; core.QItemSelection</code>","text":"<p>Map selection from source to target.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>def map_selection(\nself, source: int, target: int, selection: core.QItemSelection\n) -&gt; core.QItemSelection:\n\"\"\"Map selection from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nselection = model.mapSelectionToSource(selection)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nselection = model.mapSelectionFromSource(selection)\nreturn selection\n</code></pre>"},{"location":"features/proxymodels/sliceappearanceproxymodel.html","title":"SliceAppearanceProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceappearanceproxymodel.py</code> <pre><code>class SliceAppearanceProxyModel(itemmodels.SliceIdentityProxyModel):\nID = \"slice_appearance\"\nICON = \"mdi.palette-outline\"\ndef __init__(\nself,\nforeground: gui.QColor | gui.QBrush | str | None = None,\nbackground: gui.QColor | gui.QBrush | str | None = None,\nfont: str | gui.QFont | None = None,\nalignment: constants.AlignmentFlag | constants.AlignmentStr | None = None,\noverride: bool = True,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._foreground = gui.QColor()\nself.set_foreground(foreground)\nself._background = gui.QColor()\nself.set_background(background)\nself._font = gui.QFont()\nself.set_font(font)\nself._alignment = constants.ALIGN_CENTER_LEFT\nself.set_alignment(alignment)\nself._override = override\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\ndata = super().data(index, role)\nif not self.indexer_contains(index):\nreturn data\nif self._override or data is None:\nmatch role:\ncase constants.FOREGROUND_ROLE:\nreturn self._foreground if self._foreground.isValid() else None\ncase constants.BACKGROUND_ROLE:\nreturn self._background if self._background.isValid() else None\ncase constants.FONT_ROLE:\nreturn self._font\ncase constants.ALIGNMENT_ROLE:\nreturn self._alignment\nreturn super().data(index, role)\ndef set_font(self, font: gui.QFont | str | None):\nself._font = gui.QFont(font) if font else gui.QFont()\nself.update_all()\ndef get_font(self) -&gt; gui.QFont:\nreturn self._font or gui.QFont()\ndef set_foreground(self, foreground: datatypes.ColorAndBrushType | None):\nmatch foreground:\ncase None:\nforeground = gui.QColor()\ncase gui.QBrush():\nforeground = foreground.color()\ncase _:\nforeground = colors.get_color(foreground).as_qt()\nself._foreground = foreground\nself.update_all()\ndef get_foreground(self) -&gt; gui.QColor:\nreturn self._foreground\ndef set_background(self, background: datatypes.ColorAndBrushType | None):\nmatch background:\ncase None:\nbackground = gui.QColor()\ncase gui.QBrush():\nbackground = background.color()\ncase _:\nbackground = colors.get_color(background).as_qt()\nself._background = background\nself.update_all()\ndef get_background(self) -&gt; gui.QColor:\nreturn self._background\ndef set_alignment(\nself, alignment: constants.AlignmentFlag | constants.AlignmentStr | None\n):\nmatch alignment:\ncase None:\nalignment = constants.ALIGN_CENTER_LEFT\ncase str() | constants.AlignmentFlag():\nalignment = constants.ALIGNMENTS.get_enum_value(alignment)\nself._alignment = alignment\nself.update_all()\ndef get_alignment(self) -&gt; constants.AlignmentFlag:\nreturn self._alignment\nfont_value = core.Property(\ngui.QFont,\nget_font,\nset_font,\ndoc=\"Font to use for overriding\",\n)\nforeground_value = core.Property(\ngui.QColor,\nget_foreground,\nset_foreground,\ndoc=\"Foreground to use for overriding\",\n)\nbackground_value = core.Property(\ngui.QColor,\nget_background,\nset_background,\ndoc=\"Background to use for overriding\",\n)\nalignment_value = core.Property(\nconstants.AlignmentFlag,\nget_alignment,\nset_alignment,\ndoc=\"Alignment to use for overriding\",\n)\n</code></pre>"},{"location":"features/proxymodels/sliceappearanceproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description font_value <code>QFont</code> Font to use foreground_value <code>QColor</code>, <code>QBrush</code> Foreground to use background_value <code>QColor</code>, <code>QBrush</code> Background to use alignment_value 'AlignmentFlag' Alignment to use"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html","title":"SliceChangeFlagsProxyModel","text":"<p>SliceChangeFlagsProxyModel</p> Without proxyWith proxy <p><pre><code>table = widgets.TreeView()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nsource_model = gui.StandardItemModel.from_dict(data)\ntable.set_model(source_model)\n# table.proxifier.change_flags(enabled=False)\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\ndata = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nsource_model = gui.StandardItemModel.from_dict(data)\ntable.set_model(source_model)\ntable.proxifier.change_flags(enabled=False)\n</code></pre> </p> <p>Supports changing all ItemRoles by passing keyword arguments.</p> <p>Possible keyword arguments:</p> <ul> <li><code>selectable</code>: ItemFlag.ItemIsSelectable,</li> <li><code>editable</code>: ItemFlag.ItemIsEditable,</li> <li><code>drag_enabled</code>: ItemFlag.ItemIsDragEnabled,</li> <li><code>drop_enabled</code>: ItemFlag.ItemIsDropEnabled,</li> <li><code>user_checkable</code>: ItemFlag.ItemIsUserCheckable,</li> <li><code>enabled</code>: ItemFlag.ItemIsEnabled,</li> <li><code>auto_tristate</code>: ItemFlag.ItemIsAutoTristate,</li> <li><code>never_has_children</code>: ItemFlag.ItemNeverHasChildren,</li> <li><code>user_tristate</code>: ItemFlag.ItemIsUserTristate,</li> </ul>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html#example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].change_flags(readable=False)\ntable.show()\n</code></pre> <p>or</p> <pre><code>indexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceChangeFlagsProxyModel(indexer=indexer, readable=False)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html#api","title":"API","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to selectively change the ItemFlags of the source model.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicechangeflagsproxymodel.py</code> <pre><code>class SliceChangeFlagsProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to selectively change the ItemFlags of the source model.\"\"\"\nID = \"change_flags\"\nICON = \"mdi.flag\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._flags_to_remove: constants.ItemFlag = constants.ItemFlag(0)\nself._flags_to_add: constants.ItemFlag = constants.ItemFlag(0)\n# def setData(\n#     self,\n#     index: core.ModelIndex,\n#     value: Any,\n#     role: constants.ItemDataRole = constants.EDIT_ROLE,\n# ) -&gt; bool:\n#     if self.indexer.contains(index):\n#         logger.warning(\"Trying to set data on region covered by read-only proxy\")\n#         return False\n#     return super().setData(index, value, role)\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nflags = super().flags(index)\nif self.indexer_contains(index):\nfor flag in self._flags_to_remove:\nflags &amp;= ~flag\nfor flag in self._flags_to_add:\nflags |= flag\nreturn flags\ndef set_flags_to_add(self, flags: constants.ItemFlag):\nwith self.change_layout():\nself._flags_to_add = flags\ndef get_flags_to_add(self) -&gt; constants.ItemFlag:\nreturn self._flags_to_add\ndef set_flags_to_remove(self, flags: constants.ItemFlag):\nwith self.change_layout():\nself._flags_to_remove = flags\ndef get_flags_to_remove(self) -&gt; constants.ItemFlag:\nreturn self._flags_to_remove\nflags_to_add = core.Property(\nconstants.ItemFlag,\nget_flags_to_add,\nset_flags_to_add,\ndoc=\"Flags to set\",\n)\nflags_to_remove = core.Property(\nconstants.ItemFlag,\nget_flags_to_remove,\nset_flags_to_remove,\ndoc=\"Flags to unset\",\n)\n</code></pre>"},{"location":"features/proxymodels/slicechangeflagsproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows flags_to_add <code>ItemFlag</code> Flags which are set to True flags_to_remove <code>ItemFlag</code> Flags which are set to False <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicechangeiconsizeproxymodel.html","title":"SliceChangeIconSizeProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model which changes the icon size of the Decoration role.</p> <p>Supports QColors, QPixmaps and QIcons in DecorationRole.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicechangeiconsizeproxymodel.py</code> <pre><code>class SliceChangeIconSizeProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model which changes the icon size of the Decoration role.\n    Supports QColors, QPixmaps and QIcons in DecorationRole.\n    \"\"\"\nID = \"change_icon_size\"\nICON = \"mdi.resize\"\ndef __init__(self, size: datatypes.SizeType, **kwargs):\nsuper().__init__(**kwargs)\nself._size = datatypes.to_size(size)\nself._cache = {}\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role == constants.DECORATION_ROLE and self.indexer_contains(index):\noriginal = super().data(index, role)\nmatch original:\ncase gui.QIcon():\nhashed = original.cacheKey()\nif hashed in self._cache:\nreturn self._cache[hashed]\np = original.pixmap(self._size)\nself._cache[hashed] = p\nreturn p\ncase gui.QColor():\nhashed = original.name()\nif hashed in self._cache:\nreturn self._cache[hashed]\np = gui.QPixmap(self._size)\np.fill(original)\nself._cache[hashed] = p\nreturn p\ncase gui.QPixmap():\nhashed = original.cacheKey()\nif hashed in self._cache:\nreturn self._cache[hashed]\np = original.scaled(self._size)\nself._cache[hashed] = p\nreturn p\nreturn super().data(index, role)\ndef set_icon_size(self, size: core.QSize):\nself._cache = {}\nself._size = size\ndef get_icon_size(self) -&gt; core.QSize:\nreturn self._size\nicon_size = core.Property(\ncore.QSize,\nget_icon_size,\nset_icon_size,\ndoc=\"New icon size\",\n)\n</code></pre> <p>SliceChangeIconSizeProxyModel</p> Without proxyWith proxy <p><pre><code>table = widgets.TreeView()\nsource_model = widgets.FileSystemModel()\n...\ntable.set_model(source_model)\n# table.proxifier.change_icon_size(size=(30, 30))\n</code></pre> </p> <p><pre><code>table = widgets.TreeView()\nsource_model = widgets.FileSystemModel()\n...\ntable.set_model(source_model)\ntable.proxifier.change_icon_size(size=(30, 30))\n</code></pre> </p> <p>Note</p> <p>This is a slice proxy and can be selectively applied to a model.</p>"},{"location":"features/proxymodels/slicechangeiconsizeproxymodel.html#example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TreeView()\ntable.set_model(model)\ntable[0].proxify.change_icon_size(size=20)\ntable.show()\n# or\nproxy = itemmodels.SliceFilterProxyModel(indexer=0, size=20)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre>"},{"location":"features/proxymodels/slicechangeiconsizeproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows icon_size <code>core.QSize</code> Icon size for DecorationRole <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicecheckableproxymodel.html","title":"SliceCheckableProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to make a model checkable.</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicecheckableproxymodel.html#prettyqt.itemmodels.SliceCheckableProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceCheckableProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecheckableproxymodel.py</code> <pre><code>class SliceCheckableProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to make a model checkable.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table.proxifier[::2, 2:].modify(xyz)\n    table.show()\n    # or\n    indexer = (slice(None, None, 2), slice(2, None))\n    proxy = itemmodels.SliceCheckableProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"checkable\"\ncheckstate_changed = core.Signal(core.ModelIndex, bool)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: set[tuple[int, int]] = set()\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn super().flags(index)\nif self.indexer_contains(index):\nreturn super().flags(index) | constants.IS_CHECKABLE\nreturn super().flags(index)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nkey = self.get_index_key(index, include_column=True)\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nreturn key in self._checked\nreturn super().data(index, role)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nkey = self.get_index_key(index, include_column=True)\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nif is_checked := key in self._checked:\nself._checked.remove(key)\nelse:\nself._checked.add(key)\nself.update_row(index.row())\nself.checkstate_changed.emit(index, not is_checked)\nreturn True\nreturn super().setData(index, role)\n</code></pre>"},{"location":"features/proxymodels/slicecheckableproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicecheckabletreeproxymodel.html","title":"SliceCheckableTreeProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to make a tree model checkable.</p> <p>In contrast to SliceCheckableProxyModel, any checkstate change is propagated to parent and child indexes. (child indexes will also get the new checkstate, parent indexes will become partially checked if needed.)</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicecheckabletreeproxymodel.html#prettyqt.itemmodels.SliceCheckableTreeProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TreeView()\ntable.set_model(model)\ntable.proxifier[:, 0].set_checkable(tree=True)\ntable.show()\n# or\nproxy = itemmodels.SliceCheckableTreeProxyModel(indexer=0)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecheckableproxymodel.py</code> <pre><code>class SliceCheckableTreeProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to make a tree model checkable.\n    In contrast to SliceCheckableProxyModel, any checkstate change is propagated to\n    parent and child indexes. (child indexes will also get the new checkstate, parent\n    indexes will become partially checked if needed.)\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TreeView()\n    table.set_model(model)\n    table.proxifier[:, 0].set_checkable(tree=True)\n    table.show()\n    # or\n    proxy = itemmodels.SliceCheckableTreeProxyModel(indexer=0)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"checkable_tree\"\ncheckstate_changed = core.Signal(core.ModelIndex, constants.CheckState)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._checked: dict[tuple[int, int], constants.CheckState] = {}\ndef flags(self, index: core.ModelIndex) -&gt; constants.ItemFlag:\nif not index.isValid():\nreturn super().flags(index)\nif self.indexer_contains(index):\n# TODO: do i need to mess with ItemDataFlag.ItemIsTristate?\nreturn super().flags(index) | constants.IS_CHECKABLE\nreturn super().flags(index)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nkey = self.get_index_key(index, include_column=True)\nreturn self._checked.get(key, constants.CheckState.Unchecked)\nreturn super().data(index, role)\ndef setData(\nself,\nindex: core.ModelIndex,\nvalue: Any,\nrole: constants.ItemDataRole = constants.EDIT_ROLE,\n) -&gt; bool:\nif role == constants.CHECKSTATE_ROLE and self.indexer_contains(index):\nself.set_checkstate(index, recursive=True)\nreturn super().setData(index, role)\ndef set_checkstate(self, index: core.ModelIndex, recursive=False):\nkey = self.get_index_key(index, include_column=True)\ncurrent = self._checked.get(key)\nmatch current:\ncase constants.CheckState.Checked:\nval = constants.CheckState.Unchecked\ncase _:\nval = constants.CheckState.Checked\nself._checked[key] = val\nif recursive:\nself.set_child_states(index, val)\nself.set_parent_states(index)\nself.dataChanged.emit(index, index)\nself.checkstate_changed.emit(index, val)\nreturn True\ndef set_parent_states(self, index: core.ModelIndex):\nindexes = []\nwhile (index := index.parent()).isValid():\nindexes.append(index)\nfor idx in reversed(indexes):\niterator = self.iter_tree(index)\n# next(iterator) # first one is ourself, throw it away\nstates = []\nfor index in iterator:\nstate = index.data(constants.CHECKSTATE_ROLE)\nstates.append(state)\nif all(state is True for state in states):\nval = True\nelif all(state is False for state in states):\nval = False\nelse:\nval = constants.CheckState.PartiallyChecked\nkey = self.get_index_key(idx, include_column=True)\nlogger.debug(f\"Setting {key} to {val}\")\nself._checked[key] = val\nself.dataChanged.emit(idx, idx)\nself.checkstate_changed.emit(idx, val)\ndef set_child_states(self, index, state):\niterator = self.iter_tree(index)\nnext(iterator)  # first one is ourself, throw it away\nfor child_index in iterator:\nkey = self.get_index_key(child_index, include_column=True)\nself._checked[key] = state\nself.dataChanged.emit(child_index, child_index)\nself.checkstate_changed.emit(child_index, state)\n</code></pre>"},{"location":"features/proxymodels/slicecheckabletreeproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicecolorcategoriesproxymodel.html","title":"SliceColorCategoriesProxyModel","text":"<p>SliceColorCategoriesProxyModel</p> Without proxyWith proxy <p><pre><code>val_range = range(0, 100, 10)\ndata = dict(\na=random.sample(val_range, k=10),\nb=random.sample(val_range, k=10),\nc=random.sample(val_range, k=10),\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier[:, :].color_values()\n</code></pre> </p> <p><pre><code>val_range = range(0, 100, 10)\ndata = dict(\na=random.sample(val_range, k=10),\nb=random.sample(val_range, k=10),\nc=random.sample(val_range, k=10),\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[:, :].color_values()\n</code></pre> </p> <p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to apply coloring to categories.</p>"},{"location":"features/proxymodels/slicecolorcategoriesproxymodel.html#prettyqt.itemmodels.SliceColorCategoriesProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.color_categories()\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = itemmodels.SliceColorCategoriesProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecolorcategoriesproxymodel.py</code> <pre><code>class SliceColorCategoriesProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to apply coloring to categories.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.color_categories()\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = itemmodels.SliceColorCategoriesProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"color_categories\"\nICON = \"mdi.palette-outline\"\ndef __init__(self, *args, **kwargs):\nself._role = constants.DISPLAY_ROLE\nself._color_map = {}\nself.color_generator = itertools.cycle(gui.Palette().iter_colors())\nself._color_none = False\nself._cast_to_str = False\nsuper().__init__(*args, **kwargs)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index):\nreturn super().data(index, role)\nmatch role:\ncase constants.BACKGROUND_ROLE:\nreturn self.get_color_for_index(index)\ncase _:\nreturn super().data(index, role)\ndef get_color_for_index(self, index):\nvalue = super().data(index, self._role)\nkey = str(value) if self._cast_to_str else value\nmatch value:\ncase None if not self._color_none:\nreturn None\ncase _:\nif key in self._color_map:\nreturn self._color_map[key]\nnew = next(self.color_generator)\nself._color_map[key] = new\nreturn self._color_map[key]\ndef is_none_colored(self) -&gt; bool:\nreturn self._color_none\ndef set_none_colored(self, val: bool):\nwith self.change_layout():\nself._color_none = val\ndef is_casted_to_str(self) -&gt; bool:\nreturn self._cast_to_str\ndef set_cast_to_str(self, val: bool):\nwith self.change_layout():\nself._color_map = {}\nself.color_generator = itertools.cycle(gui.Palette().iter_colors())\nself._cast_to_str = val\ncolor_none = core.Property(\nbool,\nis_none_colored,\nset_none_colored,\ndoc=\"Whether None-values should also get colored\",\n)\n\"\"\"Color ItemData with value `None`.\"\"\"\ncast_to_str = core.Property(\nbool,\nis_casted_to_str,\nset_cast_to_str,\ndoc=\"Cast values to string in order to color / group them\",\n)\n\"\"\"Cast all values to a string for deciding whether cells are in same category.\"\"\"\n</code></pre>"},{"location":"features/proxymodels/slicecolorcategoriesproxymodel.html#prettyqt.itemmodels.proxies.slicecolorcategoriesproxymodel.SliceColorCategoriesProxyModel.cast_to_str","title":"<code>cast_to_str = core.Property(bool, is_casted_to_str, set_cast_to_str, doc='Cast values to string in order to color / group them')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Cast all values to a string for deciding whether cells are in same category.</p>"},{"location":"features/proxymodels/slicecolorcategoriesproxymodel.html#prettyqt.itemmodels.proxies.slicecolorcategoriesproxymodel.SliceColorCategoriesProxyModel.color_none","title":"<code>color_none = core.Property(bool, is_none_colored, set_none_colored, doc='Whether None-values should also get colored')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Color ItemData with value <code>None</code>.</p>"},{"location":"features/proxymodels/slicecolorcategoriesproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode highlight_color <code>gui.QColor</code> Color to use for highlighted cells highlight_role <code>constants.ItemDataRole</code> Role to use for comparing"},{"location":"features/proxymodels/slicecolorvaluesproxymodel.html","title":"SliceColorValuesProxyModel","text":"<p>SliceColorValuesProxyModel</p> Without proxyWith proxy <p><pre><code>val_range = range(0, 100, 10)\ndata = dict(\na=random.sample(val_range, k=10),\nb=random.sample(val_range, k=10),\nc=random.sample(val_range, k=10),\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier[:, :].color_values()\n</code></pre> </p> <p><pre><code>val_range = range(0, 100, 10)\ndata = dict(\na=random.sample(val_range, k=10),\nb=random.sample(val_range, k=10),\nc=random.sample(val_range, k=10),\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[:, :].color_values()\n</code></pre> </p> <p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Model to color cells of a numerical table based on their value.</p> <p>By default, \"high\" numbers are colored red, \"low\" are colored green.</p> <p>Possible modes are: * All: Highlight all cells within given slice * Column: Highlight all cells of same column as current if cell is within given slice. * Row: Highlight all cells of same row as current if cell is within given slice.</p> <p>The last two modes have the advantage that nothing needs to be computed in advance, min/max values are calculated on-the fly.</p>"},{"location":"features/proxymodels/slicecolorvaluesproxymodel.html#prettyqt.itemmodels.SliceColorValuesProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.color_values(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = itemmodels.SliceColorValuesProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicecolorvaluesproxymodel.py</code> <pre><code>class SliceColorValuesProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Model to color cells of a numerical table based on their value.\n    By default, \"high\" numbers are colored red, \"low\" are colored green.\n    Possible modes are:\n    * All: Highlight all cells within given slice\n    * Column: Highlight all cells of same column as current if cell is within given slice.\n    * Row: Highlight all cells of same row as current if cell is within given slice.\n    The last two modes have the advantage that nothing needs to be computed in advance,\n    min/max values are calculated on-the fly.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.color_values(mode=\"all\")\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = itemmodels.SliceColorValuesProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"color_values\"\nICON = \"mdi.palette-outline\"\nColorMode = ColorMode\ncore.Enum(ColorMode)\ndef __init__(self, *args, mode: ColorMode = ColorMode.Visible, **kwargs):\nself._mode = mode\nself._low_color = gui.QColor(\"green\")\nself._high_color = gui.QColor(\"red\")\nsuper().__init__(*args, **kwargs)\nself._max = 0.0\nself._role = constants.EDIT_ROLE\nself._last_span = ((-1, -1), (-1, -1))\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"colorMode\": COLOR_MODE}\nreturn maps\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index):\nreturn super().data(index, role)\nval = super().data(index, self._role)\nmatch role:\ncase constants.BACKGROUND_ROLE if isinstance(val, int | float):\nreturn self.get_color_for_index(index)\ncase _:\nreturn super().data(index, role)\ndef get_color_for_index(self, index: core.ModelIndex) -&gt; gui.QColor:\nmatch self._mode:\ncase self.ColorMode.Seen:\ndata = index.data(self._role)\nnew_max = max(self._max, abs(data))\nif new_max != self._max:\nself._max = new_max\nself.update_all()\nvalue = data / self._max\nreturn self.get_color_for_value(abs(value))\ncase self.ColorMode.Visible:\nwidget = self.parent()\nh_span = widget.get_visible_section_span(\"horizontal\")\nv_span = widget.get_visible_section_span(\"vertical\")\nif (span := (h_span, v_span)) != self._last_span:\nself._last_span = span\nmodel = self.sourceModel()\n# TODO: we probably should clamp based on self._indexer.\ndelegator = model[v_span[0] : v_span[1], h_span[0] : h_span[1]]\ndata = delegator.data(self._role)\ndata = [i for i in data if isinstance(i, int | float)]\nmax_ = max(data) if data else 1.0\nself._max = max_\ntop_left = self.index(v_span[0], h_span[0])\nbottom_right = self.index(v_span[1], h_span[1])\n# or do we need to update_all()?\nself.dataChanged.emit(top_left, bottom_right)\nelse:\nmax_ = self._max\ndata = abs(index.data(self._role))\nmax_ = abs(max(abs(max_), data))\nreturn self.get_color_for_value(data / max_)\ndef get_color_for_value(self, value: float) -&gt; gui.QColor:\ncol = helpers.get_color_percentage(\nself._low_color.getRgb(), self._high_color.getRgb(), value * 100\n)\nreturn gui.QColor(*col)\ndef set_low_color(self, color: datatypes.ColorType):\nself._low_color = colors.get_color(color).as_qt()\ndef set_high_color(self, color: datatypes.ColorType):\nself._high_color = colors.get_color(color).as_qt()\ndef get_low_color(self) -&gt; gui.QColor:\nreturn self._low_color\ndef get_high_color(self) -&gt; gui.QColor:\nreturn self._high_color\ndef set_color_mode(self, mode: SliceColorValuesProxyModel.ColorMode | ColorModeStr):\nself._mode = COLOR_MODE.get_enum_value(mode)\ndef get_color_mode(self) -&gt; SliceColorValuesProxyModel.ColorMode:\nreturn self._mode\ncolor_mode = core.Property(\nColorMode,\nget_color_mode,\nset_color_mode,\ndoc=\"Mode to use for coloring\",\n)\nlow_color = core.Property(\ngui.QColor,\nget_low_color,\nset_low_color,\ndoc=\"Color for lower end of color spectrum\",\n)\nhigh_color = core.Property(\ngui.QColor,\nget_high_color,\nset_high_color,\ndoc=\"Color for upper end of color spectrum\",\n)\n</code></pre>"},{"location":"features/proxymodels/slicecolorvaluesproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode highlight_color <code>gui.QColor</code> Color to use for highlighted cells highlight_role <code>constants.ItemDataRole</code> Role to use for comparing"},{"location":"features/proxymodels/slicedisplaytextproxymodel.html","title":"SliceDisplayTextProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to convert and format non-str values for the DisplayRole.</p> <p>Usually, formatting of numbers etc is done by the ItemDelegate. By moving the formatting into a proxy layer instead, we can keep the ItemDelegate spot free for other stuff.</p> <p>Information about string formatting:</p> <p>https://docs.python.org/3/library/string.html#format-specification-mini-language</p>"},{"location":"features/proxymodels/slicedisplaytextproxymodel.html#prettyqt.itemmodels.SliceDisplayTextProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.format_text(int_format=\"{:0&gt;2d}\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = SliceDisplayTextProxyModel(indexer=indexer, float_format=\"{:.4f}\")\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicedisplaytextproxymodel.py</code> <pre><code>class SliceDisplayTextProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to convert and format non-str values for the DisplayRole.\n    Usually, formatting of numbers etc is done by the ItemDelegate.\n    By moving the formatting into a proxy layer instead, we can keep the ItemDelegate\n    spot free for other stuff.\n    Information about string formatting:\n    https://docs.python.org/3/library/string.html#format-specification-mini-language\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.format_text(int_format=\"{:0&gt;2d}\")\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = SliceDisplayTextProxyModel(indexer=indexer, float_format=\"{:.4f}\")\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\ndef __init__(self, *args, **kwargs):\nself._int_format = \"{:.4f}\"\nself._float_format = \"{:.4f}\"\nself._datetime_format = \"%m/%d/%Y, %H:%M:%S\"\nself._date_format = \"%m/%d/%Y\"\nself._time_format = \"%H:%M:%S\"\n# self._force_override = False\nsuper().__init__(*args, **kwargs)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif not self.indexer_contains(index) or role != constants.DISPLAY_ROLE:\nreturn super().data(index, role)\ndata = index.data()\nmatch data:\ncase int():\nreturn self._int_format.format(data)\ncase float():\nreturn self._float_format.format(data)\ncase core.QDateTime():\nreturn data.toString(self._datetime_format)\ncase datetime.datetime():\nreturn data.strftime(self._datetime_format)\ncase core.QTime():\nreturn data.toString(self._time_format)\ncase datetime.time():\nreturn data.strftime(self._time_format)\ncase core.QDate():\nreturn data.toString(self._date_format)\ncase datetime.date():\nreturn data.strftime(self._date_format)\ncase _:\nreturn super().data(index, role)\ndef set_int_format(self, fmt: str):\nself._int_format = fmt\ndef get_int_format(self) -&gt; str:\nreturn self._int_format\ndef set_float_format(self, fmt: str):\nself._float_format = fmt\ndef get_float_format(self) -&gt; str:\nreturn self._float_format\ndef set_datetime_format(self, fmt: str):\nself._datetime_format = fmt\ndef get_datetime_format(self, fmt) -&gt; str:\nreturn self._datetime_format\ndef set_date_format(self, fmt: str):\nself._date_format = fmt\ndef get_date_format(self, fmt) -&gt; str:\nreturn self._date_format\ndef set_time_format(self, fmt: str):\nself._time_format = fmt\ndef get_time_format(self, fmt) -&gt; str:\nreturn self._time_format\nint_format = core.Property(\nstr,\nget_int_format,\nset_int_format,\ndoc=\"String format for integers\",\n)\nfloat_format = core.Property(\nstr,\nget_float_format,\nset_float_format,\ndoc=\"String format for floats\",\n)\ndatetime_format = core.Property(\nstr,\nget_datetime_format,\nset_datetime_format,\ndoc=\"String format for datetime objects\",\n)\ndate_format = core.Property(\nstr,\nget_date_format,\nset_date_format,\ndoc=\"String format for date objects\",\n)\ntime_format = core.Property(\nstr,\nget_time_format,\nset_time_format,\ndoc=\"String format for time objects\",\n)\n</code></pre>"},{"location":"features/proxymodels/slicedisplaytextproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description int_format <code>str</code> String format for integers float_format <code>str</code> String format for floats datetime_format <code>str</code> String format for datetime objects date_format <code>str</code> String format for date objects time_format <code>str</code> String format for time objects"},{"location":"features/proxymodels/slicefilterproxymodel.html","title":"SliceFilterProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model to filter an item view based on python slicing syntax.</p> <p>Since slicing operations are bijective, this model can filter without looping through rows or columns. Thus, this should perform much better than a SortFilterProxyModel with a column filter. (O(1) instead of O(n))</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.itemmodels.SliceFilterProxyModel--example","title":"Example","text":"<p>To filter out every second row, and cut off the the first two columns:</p> <pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].filter()\ntable.show()\n# or\nindexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>class SliceFilterProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model to filter an item view based on python slicing syntax.\n    Since slicing operations are bijective, this model can filter without\n    looping through rows or columns. Thus, this should perform much better than a\n    SortFilterProxyModel with a column filter. (O(1) instead of O(n))\n    ### Example\n    To filter out every second row, and cut off the the first two columns:\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table.proxifier[::2, 2:].filter()\n    table.show()\n    # or\n    indexer = (slice(None, None, 2), slice(2, None))\n    proxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"slice_filter\"\nICON = \"mdi.table-filter\"\ndef rowCount(self, index: core.ModelIndex | None = None) -&gt; int:\nrowcount = super().rowCount()\n# TODO: not sure if slice.stop = 0 is covered correctly?\nreturn min(rowcount, self.get_row_slice().stop or rowcount)\ndef columnCount(self, index: core.ModelIndex | None = None) -&gt; int:\ncolcount = super().columnCount()\nreturn min(colcount, self.get_column_slice().stop or colcount)\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Map header data to proxy by calculating position from slice values.\n        source pos = slice start + proxy pos * slice step)\n        \"\"\"\nis_horizontal = orientation == constants.HORIZONTAL\nrng = self.get_column_range() if is_horizontal else self.get_row_range()\npos = rng.start + section * rng.step\nreturn super().headerData(pos, orientation, role)\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nsource = self.sourceModel()\nif row &lt; 0 or column &lt; 0 or source is None:\nreturn core.ModelIndex()\nsource_parent = self.mapToSource(parent)\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * column)\nrow_pos = row_range.start + (row_range.step * row)\nsource_index = source.index(row_pos, col_pos, source_parent)\nreturn self.mapFromSource(source_index)\ndef mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index to source by calculating position from slice values.\n        source pos = slice start + proxy pos * slice step)\n        \"\"\"\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * proxy_idx.column())\nrow_pos = row_range.start + (row_range.step * proxy_idx.row())\nreturn source.index(row_pos, col_pos)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index from source by calculating position based on slice values.\n        proxy pos = source pos - slice start / slice step\n        \"\"\"\nif self.sourceModel() is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow_pos = self.position_in_row_slice(source_index.row())\ncol_pos = self.position_in_column_slice(source_index.column())\nreturn self.createIndex(row_pos, col_pos, source_index.internalPointer())\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.itemmodels.proxies.slicefilterproxymodel.SliceFilterProxyModel.headerData","title":"<code>headerData(section: int, orientation: constants.Orientation, role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Map header data to proxy by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>def headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Map header data to proxy by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nis_horizontal = orientation == constants.HORIZONTAL\nrng = self.get_column_range() if is_horizontal else self.get_row_range()\npos = rng.start + section * rng.step\nreturn super().headerData(pos, orientation, role)\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.itemmodels.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapFromSource","title":"<code>mapFromSource(source_index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source by calculating position based on slice values.</p> <p>proxy pos = source pos - slice start / slice step</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index from source by calculating position based on slice values.\n    proxy pos = source pos - slice start / slice step\n    \"\"\"\nif self.sourceModel() is None or not source_index.isValid():\nreturn core.ModelIndex()\nrow_pos = self.position_in_row_slice(source_index.row())\ncol_pos = self.position_in_column_slice(source_index.column())\nreturn self.createIndex(row_pos, col_pos, source_index.internalPointer())\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#prettyqt.itemmodels.proxies.slicefilterproxymodel.SliceFilterProxyModel.mapToSource","title":"<code>mapToSource(proxy_idx: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index to source by calculating position from slice values.</p> <p>source pos = slice start + proxy pos * slice step)</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicefilterproxymodel.py</code> <pre><code>def mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\n\"\"\"Map index to source by calculating position from slice values.\n    source pos = slice start + proxy pos * slice step)\n    \"\"\"\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\ncol_range = self.get_column_range()\nrow_range = self.get_row_range()\ncol_pos = col_range.start + (col_range.step * proxy_idx.column())\nrow_pos = row_range.start + (row_range.step * proxy_idx.row())\nreturn source.index(row_pos, col_pos)\n</code></pre>"},{"location":"features/proxymodels/slicefilterproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html","title":"SliceHighlightCurrentProxyModel","text":"<p>ColumnJoinerProxyModel</p> Without proxyRow modeColumn modeAll mode <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\n# table.proxifier[:, ::2].highlight_current(mode=\"column\")\n</code></pre> </p> <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\ntable.proxifier[:, ::2].highlight_current(mode=\"row\")\n</code></pre> </p> <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\ntable.proxifier[:, ::2].highlight_current(mode=\"column\")\n</code></pre> </p> <p><pre><code>dct = dict(\na=[\"a\", \"b\", \"a\", \"b\"],\nb=[\"a\", \"b\", \"a\", \"b\"],\nc=[\"a\", \"b\", \"a\", \"b\"],\nd=[\"b\", \"a\", \"b\", \"a\"],\ne=[\"a\", \"b\", \"a\", \"a\"],\n)\nmodel = gui.StandardItemModel.from_dict(dct)\ntable = widgets.TableView()\ntable.set_model(model)\n# apply proxy to every 2nd column\ntable.proxifier[:, ::2].highlight_current(mode=\"all\")\n</code></pre> </p>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#api","title":"API","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model which highlights all cells with same data as current index.</p> <p>Highlights all cells with same content in given role as currently focused cell with a user-specified color.</p> <p>Possible modes are:</p> <ul> <li><code>all</code>: Highlight all cells with same value.</li> <li><code>column</code>: Highlight all cells with same value and same column as current.</li> <li><code>row</code>: Highlight all cells with same value and same row as current.</li> </ul>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.SliceHighlightCurrentProxyModel--example","title":"Example","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable[:, :3].proxify.highlight_current(mode=\"all\")\ntable.show()\n# or\nindexer = (slice(None), slice(None, 3))\nproxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.selectionModel().currentChanged.connect(proxy.highlight_index)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>class SliceHighlightCurrentProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model which highlights all cells with same data as current index.\n    Highlights all cells with same content in given role as currently focused cell\n    with a user-specified color.\n    Possible modes are:\n    * `all`: Highlight all cells with same value.\n    * `column`: Highlight all cells with same value and same column as current.\n    * `row`: Highlight all cells with same value and same row as current.\n    ### Example\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table[:, :3].proxify.highlight_current(mode=\"all\")\n    table.show()\n    # or\n    indexer = (slice(None), slice(None, 3))\n    proxy = itemmodels.SliceFilterProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.selectionModel().currentChanged.connect(proxy.highlight_index)\n    table.show()\n    ```\n    \"\"\"\nID = \"highlight_current\"\ndef __init__(\nself,\nrole=constants.DISPLAY_ROLE,\nmode: HighlightModeStr = \"column\",\nhighlight_color: datatypes.ColorType = \"red\",\n**kwargs,\n):\nself._mode = mode\nself._current_value = ...  # Sentinel value\nself._data_role = role\nself._current_column = None\nself._current_row = None\nself._highlight_color = colors.get_color(highlight_color).as_qt()\nsuper().__init__(**kwargs)\ndef set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\ndef get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\ndef set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\ndef get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\ndef set_highlight_role(self, mode: constants.ItemDataRole):\n\"\"\"Set highlight mode.\"\"\"\nself._data_role = mode\ndef get_highlight_role(self) -&gt; constants.ItemDataRole:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._data_role\ndef set_highlight_column(self, column: int):\nwith self.change_layout():\nself._current_column = column\ndef get_highlight_column(self) -&gt; int:\nreturn self._current_column\ndef set_highlight_row(self, row: int):\nwith self.change_layout():\nself._current_row = row\ndef get_highlight_row(self) -&gt; int:\nreturn self._current_row\ndef set_current_value(self, value):\nwith self.change_layout():\nself._current_value = value\ndef highlight_index(self, index: core.ModelIndex):\nwith self.change_layout():\nself._current_value = index.data(self._data_role)  # super().data(index, role)\nself._current_row = index.row()\nself._current_column = index.column()\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif (\nrole == constants.BACKGROUND_ROLE\nand index.data(self._data_role) == self._current_value\nand self.indexer_contains(index)\nand (\n(self._mode == \"column\" and index.column() == self._current_column)\nor (\nself._mode == \"row\"\nand (index.row() == self._current_row)\nor self._mode == \"all\"\n)\n)\n):\nreturn self._highlight_color\nreturn super().data(index, role)\nhighlightMode = core.Property(\nstr,\nget_highlight_mode,\nset_highlight_mode,\ndoc=\"Highlight mode\",\n)\nhighlightColor = core.Property(\nQtGui.QColor,\nget_highlight_color,\nset_highlight_color,\ndoc=\"Color to use for highlighting\",\n)\nhighlightRole = core.Property(\nconstants.ItemDataRole,\nget_highlight_role,\nset_highlight_role,\ndoc=\"ItemRole to use for highlighting\",\n)\nhighlight_column = core.Property(\nint,\nget_highlight_column,\nset_highlight_column,\ndoc=\"Currently highlighted column\",\n)\nhighlight_row = core.Property(\nint,\nget_highlight_row,\nset_highlight_row,\ndoc=\"Currently highlighted row\",\n)\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_color","title":"<code>get_highlight_color() -&gt; QtGui.QColor</code>","text":"<p>Get color used for higlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_color(self) -&gt; QtGui.QColor:\n\"\"\"Get color used for higlighting cells.\"\"\"\nreturn self._highlight_color\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_mode","title":"<code>get_highlight_mode() -&gt; HighlightModeStr</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_mode(self) -&gt; HighlightModeStr:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._highlight_mode\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.get_highlight_role","title":"<code>get_highlight_role() -&gt; constants.ItemDataRole</code>","text":"<p>Get highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def get_highlight_role(self) -&gt; constants.ItemDataRole:\n\"\"\"Get highlight mode.\"\"\"\nreturn self._data_role\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_color","title":"<code>set_highlight_color(color: datatypes.ColorType)</code>","text":"<p>Set color used for highlighting cells.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_color(self, color: datatypes.ColorType):\n\"\"\"Set color used for highlighting cells.\"\"\"\nself._highlight_color = colors.get_color(color).as_qt()\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_mode","title":"<code>set_highlight_mode(mode: HighlightModeStr)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_mode(self, mode: HighlightModeStr):\n\"\"\"Set highlight mode.\"\"\"\nself._highlight_mode = mode\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#prettyqt.itemmodels.proxies.slicehighlightcurrentproxymodel.SliceHighlightCurrentProxyModel.set_highlight_role","title":"<code>set_highlight_role(mode: constants.ItemDataRole)</code>","text":"<p>Set highlight mode.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicehighlightcurrentproxymodel.py</code> <pre><code>def set_highlight_role(self, mode: constants.ItemDataRole):\n\"\"\"Set highlight mode.\"\"\"\nself._data_role = mode\n</code></pre>"},{"location":"features/proxymodels/slicehighlightcurrentproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description highlight_mode <code>str</code> Highlighting mode highlight_color <code>gui.QColor</code> Color to use for highlighted cells highlight_role <code>constants.ItemDataRole</code> Role to use for comparing"},{"location":"features/proxymodels/sliceidentityproxymodel.html","title":"SliceIdentityProxyModel","text":"<p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Base model for slice proxy models.</p> <p>By itself, this proxy does nothing. It just provides all needed helper functions to deal with slices. <code>indexer_contains</code> should be just by subclasses in order to check whether the proxy should be applied.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>class SliceIdentityProxyModel(core.IdentityProxyModel):\n\"\"\"Base model for slice proxy models.\n    By itself, this proxy does nothing.\n    It just provides all needed helper functions to deal with slices.\n    `indexer_contains` should be just by subclasses in order to check whether the proxy\n    should be applied.\n    \"\"\"\ndef __init__(self, indexer=None, **kwargs):\nsuper().__init__(**kwargs)\nself._indexer = (slice(None), slice(None))\nself.set_indexer(indexer)\ndef indexer_contains(self, index: core.ModelIndex | tuple[int, int]) -&gt; bool:\n\"\"\"Check whether given ModelIndex is included in our Indexer.\"\"\"\nif isinstance(index, core.ModelIndex):\nindex = (index.row(), index.column())\ncol_slice = self.get_column_slice()\nrow_slice = self.get_row_slice()\nsource = self.sourceModel()\ncol_slice = self.update_slice_boundaries(col_slice, count=source.columnCount())\nrow_slice = self.update_slice_boundaries(row_slice, count=source.rowCount())\n# logger.info(f\"{col_slice=} {row_slice=}\")\nto_check = (row_slice, col_slice)  # instead of _indexer, for negative indexes.\nreturn helpers.is_position_in_index(*index, to_check)\ndef update_slice_boundaries(self, sl: slice, count: int) -&gt; slice:\n\"\"\"Update slice boundaries by resolving negative indexes.\"\"\"\n# Not sure yet whats the best approach here and which cases I should support...\n# if sl.end is larger than count, clip it (or perhaps throw exception?)\n# if sl.stop is not None and sl.stop &gt;= count:\n#     sl = slice(sl.start, count, sl.step)\n# resolve negative start value\nif sl.start is not None and sl.start &lt; 0:\nstart = count + sl.start\nend = count + sl.stop\n# end = start + (sl.stop - sl.start)\nif start &lt; 0:\nraise IndexError(sl.start)\nsl = slice(start, end, sl.step)\n# if sl.stop is not None and sl.stop &lt; 0:\n#     stop = source.columnCount() + sl.stop\n#     if stop &lt; 0:\n#         raise IndexError(sl.stop)\n#     sl = slice(sl.start, stop, sl.step)\nreturn sl\ndef set_indexer(self, indexer):\n\"\"\"Takes basically anything which is common to use for __getitem__.\"\"\"\nmatch indexer:\ncase None:\nself._indexer = (slice(None), slice(None))\ncase int() as column:\nself.set_column_slice(column)\ncase slice() as col_slice:\nself._indexer = (col_slice, slice(None))\ncase row_slice, col_slice:\nself.set_column_slice(col_slice)\nself.set_row_slice(row_slice)\ncase _:\nraise TypeError(indexer)\ndef get_column_slice(self) -&gt; slice:\nmatch self._indexer:\ncase None | (_, None):\nreturn slice(None)\ncase (_, slice() as col_slice):\nreturn col_slice\ncase _:\nraise TypeError(self._indexer)\ndef get_row_slice(self) -&gt; slice:\nmatch self._indexer:\ncase None | (None, _):\nreturn slice(None)\ncase (slice() as row_slice, _):\nreturn row_slice\ncase _:\nraise TypeError(self._indexer)\ndef set_column_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the column slice.\"\"\"\nmatch value:\ncase slice() as col_slice:\nsl = col_slice\ncase int() as col:\nsl = slice(col, col + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (self.get_row_slice(), sl)\ndef set_row_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the row slice.\"\"\"\nmatch value:\ncase slice() as row_slice:\nsl = row_slice\ncase int() as row:\nsl = slice(row, row + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (sl, self.get_column_slice())\ndef get_row_range(self) -&gt; range:\n\"\"\"Return a range for the row slice with valid start / stop / step values.\"\"\"\nsl = self.get_row_slice()\nrow_count = self.sourceModel().rowCount()\nreturn range(sl.start or 0, sl.stop or row_count, sl.step or 1)\ndef get_column_range(self) -&gt; range:\n\"\"\"Return a range for the column slice with valid start / stop / step values.\"\"\"\nsl = self.get_column_slice()\ncol_count = self.sourceModel().columnCount()\nreturn range(sl.start or 0, sl.stop or col_count, sl.step or 1)\ndef position_in_column_slice(self, col: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(col) if slice would be a list.\"\"\"\nsl = self.get_column_slice()\nreturn int((col - (sl.start or 0)) / (sl.step or 1))\ndef position_in_row_slice(self, row: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(row) if slice would be a list.\"\"\"\nsl = self.get_row_slice()\nreturn int((row - (sl.start or 0)) / (sl.step or 1))\n# The Qt typesystems dont like slices (or ranges / tuples)\n# seems what works is to throw tuples at a QtProperty declared as list.\n# otherwise change this to list getters/setters.\ndef get_column_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the column slice.\"\"\"\nsl = self.get_column_slice()\nreturn (sl.start, sl.stop, sl.step)\ndef get_row_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the row slice.\"\"\"\nsl = self.get_row_slice()\nreturn (sl.start, sl.stop, sl.step)\ncolumn_slice = core.Property(\nlist,\nget_column_tuple,\nset_column_slice,\ndoc=\"Column slice to include for the proxy\",\n)\nrow_slice = core.Property(\nlist,\nget_row_tuple,\nset_column_slice,\ndoc=\"Row slice to include for the proxy\",\n)\n</code></pre> <p>Read more about slices.</p>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_range","title":"<code>get_column_range() -&gt; range</code>","text":"<p>Return a range for the column slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_range(self) -&gt; range:\n\"\"\"Return a range for the column slice with valid start / stop / step values.\"\"\"\nsl = self.get_column_slice()\ncol_count = self.sourceModel().columnCount()\nreturn range(sl.start or 0, sl.stop or col_count, sl.step or 1)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_column_tuple","title":"<code>get_column_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the column slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_column_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the column slice.\"\"\"\nsl = self.get_column_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_range","title":"<code>get_row_range() -&gt; range</code>","text":"<p>Return a range for the row slice with valid start / stop / step values.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_range(self) -&gt; range:\n\"\"\"Return a range for the row slice with valid start / stop / step values.\"\"\"\nsl = self.get_row_slice()\nrow_count = self.sourceModel().rowCount()\nreturn range(sl.start or 0, sl.stop or row_count, sl.step or 1)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.get_row_tuple","title":"<code>get_row_tuple() -&gt; tuple[int | None, int | None, int | None]</code>","text":"<p>Get tuple representation of the row slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def get_row_tuple(self) -&gt; tuple[int | None, int | None, int | None]:\n\"\"\"Get tuple representation of the row slice.\"\"\"\nsl = self.get_row_slice()\nreturn (sl.start, sl.stop, sl.step)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.indexer_contains","title":"<code>indexer_contains(index: core.ModelIndex | tuple[int, int]) -&gt; bool</code>","text":"<p>Check whether given ModelIndex is included in our Indexer.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def indexer_contains(self, index: core.ModelIndex | tuple[int, int]) -&gt; bool:\n\"\"\"Check whether given ModelIndex is included in our Indexer.\"\"\"\nif isinstance(index, core.ModelIndex):\nindex = (index.row(), index.column())\ncol_slice = self.get_column_slice()\nrow_slice = self.get_row_slice()\nsource = self.sourceModel()\ncol_slice = self.update_slice_boundaries(col_slice, count=source.columnCount())\nrow_slice = self.update_slice_boundaries(row_slice, count=source.rowCount())\n# logger.info(f\"{col_slice=} {row_slice=}\")\nto_check = (row_slice, col_slice)  # instead of _indexer, for negative indexes.\nreturn helpers.is_position_in_index(*index, to_check)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_column_slice","title":"<code>position_in_column_slice(col: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(col) if slice would be a list.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_column_slice(self, col: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(col) if slice would be a list.\"\"\"\nsl = self.get_column_slice()\nreturn int((col - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.position_in_row_slice","title":"<code>position_in_row_slice(row: int) -&gt; int</code>","text":"<p>Can be interpreted as slice.index(row) if slice would be a list.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def position_in_row_slice(self, row: int) -&gt; int:\n\"\"\"Can be interpreted as slice.index(row) if slice would be a list.\"\"\"\nsl = self.get_row_slice()\nreturn int((row - (sl.start or 0)) / (sl.step or 1))\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_column_slice","title":"<code>set_column_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the column slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_column_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the column slice.\"\"\"\nmatch value:\ncase slice() as col_slice:\nsl = col_slice\ncase int() as col:\nsl = slice(col, col + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (self.get_row_slice(), sl)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_indexer","title":"<code>set_indexer(indexer)</code>","text":"<p>Takes basically anything which is common to use for getitem.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_indexer(self, indexer):\n\"\"\"Takes basically anything which is common to use for __getitem__.\"\"\"\nmatch indexer:\ncase None:\nself._indexer = (slice(None), slice(None))\ncase int() as column:\nself.set_column_slice(column)\ncase slice() as col_slice:\nself._indexer = (col_slice, slice(None))\ncase row_slice, col_slice:\nself.set_column_slice(col_slice)\nself.set_row_slice(row_slice)\ncase _:\nraise TypeError(indexer)\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.set_row_slice","title":"<code>set_row_slice(value: slice | int | None | tuple[int | None, int | None, int | None])</code>","text":"<p>Throw anything at this method in order to set the row slice.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def set_row_slice(\nself, value: slice | int | None | tuple[int | None, int | None, int | None]\n):\n\"\"\"Throw anything at this method in order to set the row slice.\"\"\"\nmatch value:\ncase slice() as row_slice:\nsl = row_slice\ncase int() as row:\nsl = slice(row, row + 1)\ncase None:\nsl = slice(None)\ncase (\nint() | None as start,\nint() | None as stop,\nint() | None as step,\n):\nsl = slice(start, stop, step)\ncase _:\nraise TypeError(value)\nself._indexer = (sl, self.get_column_slice())\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#prettyqt.itemmodels.proxies.sliceidentityproxymodel.SliceIdentityProxyModel.update_slice_boundaries","title":"<code>update_slice_boundaries(sl: slice, count: int) -&gt; slice</code>","text":"<p>Update slice boundaries by resolving negative indexes.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\sliceidentityproxymodel.py</code> <pre><code>def update_slice_boundaries(self, sl: slice, count: int) -&gt; slice:\n\"\"\"Update slice boundaries by resolving negative indexes.\"\"\"\n# Not sure yet whats the best approach here and which cases I should support...\n# if sl.end is larger than count, clip it (or perhaps throw exception?)\n# if sl.stop is not None and sl.stop &gt;= count:\n#     sl = slice(sl.start, count, sl.step)\n# resolve negative start value\nif sl.start is not None and sl.start &lt; 0:\nstart = count + sl.start\nend = count + sl.stop\n# end = start + (sl.stop - sl.start)\nif start &lt; 0:\nraise IndexError(sl.start)\nsl = slice(start, end, sl.step)\n# if sl.stop is not None and sl.stop &lt; 0:\n#     stop = source.columnCount() + sl.stop\n#     if stop &lt; 0:\n#         raise IndexError(sl.stop)\n#     sl = slice(sl.start, stop, sl.step)\nreturn sl\n</code></pre>"},{"location":"features/proxymodels/sliceidentityproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicemaproleproxymodel.html","title":"SliceMapRoleProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>Proxy model for mapping one role to another.</p> <p>Mapping can be changed by passing a dictionary with source role as key and target_role as value. Py passing an optional converter function, values which are mapped can be modified.</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicemaproleproxymodel.html#prettyqt.itemmodels.SliceMapRoleProxyModel--example","title":"Example","text":"<pre><code>source_model = FsSpecTreemodel(\"file\")\ntable = widgets.TableView()\nmapping = {source_model.Roles.ProtocolPathRole: constants.DISPLAY_ROLE}\nmodel = SliceMapRoleProxyModel(mapping, indexer=0, parent=table)\nmodel.setSourceModel(source_model)\ntable.set_model(model)\ntable.show()\n# or\ntable.proxifier.map_role(source_model.Roles.ProtocolPathRole, constants.DISPLAY_ROLE)\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicemaproleproxymodel.py</code> <pre><code>class SliceMapRoleProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"Proxy model for mapping one role to another.\n    Mapping can be changed by passing a dictionary with source role as key and target_role\n    as value.\n    Py passing an optional converter function, values which are mapped can be modified.\n    ### Example\n    ```py\n    source_model = FsSpecTreemodel(\"file\")\n    table = widgets.TableView()\n    mapping = {source_model.Roles.ProtocolPathRole: constants.DISPLAY_ROLE}\n    model = SliceMapRoleProxyModel(mapping, indexer=0, parent=table)\n    model.setSourceModel(source_model)\n    table.set_model(model)\n    table.show()\n    # or\n    table.proxifier.map_role(source_model.Roles.ProtocolPathRole, constants.DISPLAY_ROLE)\n    ```\n    \"\"\"\nID = \"map_role\"\nICON = \"mdi.directions-fork\"\ndef __init__(\nself,\nmapping: Mapping[constants.ItemDataRole, constants.ItemDataRole],\nconverter: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._mapping = bidict(mapping)\nself._converter = converter\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nif role in self._mapping.inverse and self.indexer_contains(index):\nvalue = super().data(index, self._mapping.inverse[role])\nreturn self._converter(value) if self._converter else value\nreturn super().data(index, role)\ndef set_mapping(\nself,\nmapping: Mapping[constants.ItemDataRole, constants.ItemDataRole],\n):\nwith self.reset_model():\nself._mapping = bidict(mapping)\ndef get_mapping(self) -&gt; Mapping[constants.ItemDataRole, constants.ItemDataRole]:\nreturn self._mapping\nmapping = core.Property(\ndict,\nget_mapping,\nset_mapping,\ndoc=\"Mapping of ItemRoles\",\n)\n</code></pre>"},{"location":"features/proxymodels/slicemaproleproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows mapping <code>dict</code> Flags which are set to True <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html","title":"SliceValueTransformationProxyModel","text":"<p>             Bases: <code>itemmodels.SliceIdentityProxyModel</code></p> <p>A proxy model which transforms cell contents based on a Callable.</p> <p>Read more about slices.</p>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#prettyqt.itemmodels.SliceValueTransformationProxyModel--example","title":"Example:","text":"<pre><code>model = MyModel()\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier[::2, 2:].modify(xyz)\ntable.show()\n</code></pre> <p>or</p> <pre><code>indexer = (slice(None, None, 2), slice(2, None))\nproxy = itemmodels.SliceValueTransformationProxyModel(indexer=indexer)\nproxy.set_source_model(model)\nproxy.add_transformer(lambda x: x + \"something\", selector=lambda x: \"abc\" in x)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>class SliceValueTransformationProxyModel(itemmodels.SliceIdentityProxyModel):\n\"\"\"A proxy model which transforms cell contents based on a Callable.\n    ### Example:\n    ```py\n    model = MyModel()\n    table = widgets.TableView()\n    table.set_model(model)\n    table.proxifier[::2, 2:].modify(xyz)\n    table.show()\n    ```\n    or\n    ```py\n    indexer = (slice(None, None, 2), slice(2, None))\n    proxy = itemmodels.SliceValueTransformationProxyModel(indexer=indexer)\n    proxy.set_source_model(model)\n    proxy.add_transformer(lambda x: x + \"something\", selector=lambda x: \"abc\" in x)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"value_transformation\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._transformers: list[Transformer] = []\ndef clear(self):\n\"\"\"Clear all transformers.\"\"\"\nself._transformers = []\ndef add_transformer(\nself,\nfn: Callable[[Any], Any],\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nselector: Callable[[Any], bool] | None = None,\nselector_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Add a transformer for given role.\n        If a selector callable is given, the transformer will only be applied if the\n        selector returns True.\n        The selector receives the content of given data role as an argument.\n        Arguments:\n            fn: Callable to transform data of given role\n            role: Data role to transform\n            selector: Callable to filter the indexes which should be transformed\n            selector_role: Role to use for the selector callable\n        \"\"\"\ntr = Transformer(\nfn=fn,\nrole=role,\nselector=selector,\nselector_role=selector_role,\n)\nself._transformers.append(tr)\ndef data(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\nval = super().data(index, role)\nif not self.indexer_contains(index):\nreturn val\nfor t in self._transformers:\nif t.role == role:\nselector_val = super().data(index, t.selector_role)\nif t.selector is None or t.selector(selector_val):\nval = t.fn(selector_val)\nreturn val\n</code></pre>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#prettyqt.itemmodels.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.add_transformer","title":"<code>add_transformer(fn: Callable[[Any], Any], role: constants.ItemDataRole = constants.DISPLAY_ROLE, selector: Callable[[Any], bool] | None = None, selector_role: constants.ItemDataRole = constants.DISPLAY_ROLE)</code>","text":"<p>Add a transformer for given role.</p> <p>If a selector callable is given, the transformer will only be applied if the selector returns True. The selector receives the content of given data role as an argument.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>Callable[[Any], Any]</code> <p>Callable to transform data of given role</p> required <code>role</code> <code>constants.ItemDataRole</code> <p>Data role to transform</p> <code>constants.DISPLAY_ROLE</code> <code>selector</code> <code>Callable[[Any], bool] | None</code> <p>Callable to filter the indexes which should be transformed</p> <code>None</code> <code>selector_role</code> <code>constants.ItemDataRole</code> <p>Role to use for the selector callable</p> <code>constants.DISPLAY_ROLE</code> Source code in <code>prettyqt\\itemmodels\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def add_transformer(\nself,\nfn: Callable[[Any], Any],\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nselector: Callable[[Any], bool] | None = None,\nselector_role: constants.ItemDataRole = constants.DISPLAY_ROLE,\n):\n\"\"\"Add a transformer for given role.\n    If a selector callable is given, the transformer will only be applied if the\n    selector returns True.\n    The selector receives the content of given data role as an argument.\n    Arguments:\n        fn: Callable to transform data of given role\n        role: Data role to transform\n        selector: Callable to filter the indexes which should be transformed\n        selector_role: Role to use for the selector callable\n    \"\"\"\ntr = Transformer(\nfn=fn,\nrole=role,\nselector=selector,\nselector_role=selector_role,\n)\nself._transformers.append(tr)\n</code></pre>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#prettyqt.itemmodels.proxies.slicevaluetransformationproxymodel.SliceValueTransformationProxyModel.clear","title":"<code>clear()</code>","text":"<p>Clear all transformers.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\slicevaluetransformationproxymodel.py</code> <pre><code>def clear(self):\n\"\"\"Clear all transformers.\"\"\"\nself._transformers = []\n</code></pre>"},{"location":"features/proxymodels/slicevaluetransformationproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description column_slice <code>slice</code> Slice for filtering columns row_slice <code>slice</code> Slice for filtering rows <p>Note</p> <p>Due to Qt limitations, the Qt properties contain a list with 3 items instead of a slice.</p>"},{"location":"features/proxymodels/subsetfilterproxymodel.html","title":"SubsetFilterProxyModel","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>A FilterProxyModel to filter based on slices, ranges, indexes or Callables.</p> <p>Note</p> <p>If you only need filtering based on slices or a single column / row, the SliceFilterProxymodel should be preferred for performance reasons.</p>"},{"location":"features/proxymodels/subsetfilterproxymodel.html#prettyqt.itemmodels.SubsetFilterProxyModel--example","title":"Example","text":"<pre><code>proxy = itemmodels.SubsetFilterProxyModel()\nproxy.set_source_model(model)\ntable.set_model(proxy)\ntable.show()\n</code></pre> Source code in <code>prettyqt\\itemmodels\\proxies\\subsetfilterproxymodel.py</code> <pre><code>class SubsetFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"A FilterProxyModel to filter based on slices, ranges, indexes or Callables.\n    ### Example\n    ```py\n    proxy = itemmodels.SubsetFilterProxyModel()\n    proxy.set_source_model(model)\n    table.set_model(proxy)\n    table.show()\n    ```\n    \"\"\"\nID = \"subset\"\ndef __init__(\nself,\nrow_filter: slice | range | int | Container[int] | Callable | None,\ncolumn_filter: slice | range | int | Container[int] | Callable | None,\n**kwargs,\n):\nself.row_filter = row_filter\nself.column_filter = column_filter\nsuper().__init__(**kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.row_filter, self.column_filter)\ndef filterAcceptsColumn(self, source_column: int, parent: core.ModelIndex) -&gt; bool:\nmatch self.column_filter:\ncase slice() | range():\nreturn helpers.is_in_slice(self.column_filter, source_column)\ncase int():\nreturn source_column == self.column_filter\ncase Container():\nreturn source_column in self.column_filter\ncase Callable():\nreturn self.column_filter(source_column)\ncase None:\nreturn True\ncase _:\nraise ValueError(self.column_filter)\ndef filterAcceptsRow(self, source_row: int, parent: core.ModelIndex) -&gt; bool:\nmatch self.row_filter:\ncase slice() | range():\nreturn helpers.is_in_slice(self.row_filter, source_row)\ncase int():\nreturn source_row == self.row_filter\ncase Container():\nreturn source_row in self.row_filter\ncase Callable():\nreturn self.row_filter(source_row)\ncase None:\nreturn True\ncase _:\nraise ValueError(self.row_filter)\n</code></pre>"},{"location":"features/proxymodels/tabletolistproxymodel.html","title":"TableToListProxyModel","text":"<p>TableToListProxyModel</p> Without proxyWith proxy <p><pre><code>data = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\n# table.proxifier.to_list()\ntable.show()\n</code></pre> </p> <p><pre><code>data = dict(\nfirst=[\"John\", \"Mary\"],\nlast=[\"Doe\", \"Bo\"],\nheight=[5.5, 6.0],\nweight=[130, 150],\n)\nmodel = gui.StandardItemModel.from_dict(data)\ntable = widgets.TableView()\ntable.set_model(model)\ntable.proxifier.to_list()\ntable.show()\n</code></pre> </p> <p>             Bases: <code>core.IdentityProxyModel</code></p> <p>Proxy model to flatten a table to a list.</p> <p>Reshapes a table by concatenating all columns into one large column, so that the new rowCount equals to sourceModel rowCount * sourceModel columnCount. If a verticalHeader is available, it will show the original position of the cell.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\tabletolistproxymodel.py</code> <pre><code>class TableToListProxyModel(core.IdentityProxyModel):\n\"\"\"Proxy model to flatten a table to a list.\n    Reshapes a table by concatenating all columns into one large column,\n    so that the new rowCount equals to sourceModel rowCount * sourceModel columnCount.\n    If a verticalHeader is available, it will show the original position of the cell.\n    \"\"\"\nID = \"table_to_list\"\nICON = \"mdi6.table-pivot\"\ndef __init__(self, *args, header_title: str = \"\", **kwargs):\nsuper().__init__(*args, **kwargs)\nself._header_title = header_title\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nreturn 0 if self.sourceModel() is None else 1\ndef headerData(\nself,\nsection: int,\norientation: constants.Orientation,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; str | None:\nmatch orientation, role:\ncase constants.HORIZONTAL, constants.DISPLAY_ROLE:\nreturn self._header_title or None\ncase constants.VERTICAL, constants.DISPLAY_ROLE:\ncol_section = section % super().columnCount()\nrow_section = section // super().columnCount()\npre = super().headerData(col_section, constants.HORIZONTAL, role)\npost = super().headerData(row_section, constants.VERTICAL, role)\npre_str = col_section if pre is None else pre\npost_str = row_section if post is None else post\nreturn f\"{pre_str} | {post_str}\"\nreturn None\ndef rowCount(self, parent: core.ModelIndex | None = None) -&gt; int:\nparent = parent or core.ModelIndex()\nsource = self.sourceModel()\nreturn 0 if source is None else source.rowCount() * source.columnCount()\ndef index(\nself, row: int, column: int, parent: core.ModelIndex | None = None\n) -&gt; core.ModelIndex:\nparent = parent or core.ModelIndex()\nsource = self.sourceModel()\nif row &lt; 0 or column &lt; 0 or source is None:\nreturn core.ModelIndex()\nsource_parent = self.mapToSource(parent)\ncolcount = source.columnCount()\nsource_index = source.index(row // colcount, row % colcount, source_parent)\nreturn self.mapFromSource(source_index)\ndef mapToSource(self, proxy_idx: core.ModelIndex) -&gt; core.ModelIndex:\nsource = self.sourceModel()\nif source is None or not proxy_idx.isValid():\nreturn core.ModelIndex()\nrow = proxy_idx.row()\ncolcount = source.columnCount()\nreturn source.index(row // colcount, row % colcount)\ndef mapFromSource(self, source_index: core.ModelIndex) -&gt; core.ModelIndex:\nsource = self.sourceModel()\nif source is None or not source_index.isValid():\nreturn core.ModelIndex()\nr = source_index.row() * source.columnCount() + source_index.column()\nreturn self.createIndex(r, 0, source_index.internalPointer())\ndef set_header_title(self, title: str):\nself._header_title = title\nself.headerDataChanged.emit(constants.HORIZONTAL, 0, 0)\ndef get_header_title(self) -&gt; str:\nreturn self._header_title\nheader_title = core.Property(\nstr,\nget_header_title,\nset_header_title,\ndoc=\"Column header for resulting column\",\n)\n</code></pre>"},{"location":"features/proxymodels/tabletolistproxymodel.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description header_title <code>str</code> Header for the resulting column"},{"location":"features/proxymodels/valuefilterproxymodel.html","title":"ValueFilterProxyModel","text":"<p>             Bases: <code>core.SortFilterProxyModel</code></p> <p>Proxy model for filtering based on non-str values.</p> <p>Sometimes it is needed to filter for non-str values, especially when it is required to filter based on a different role than DisplayRole.</p> <p>Same as the Qt QSortFilterProxyModel, this proxy respects the filterRole and filterKeyColumn properties.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\valuefilterproxymodel.py</code> <pre><code>class ValueFilterProxyModel(core.SortFilterProxyModel):\n\"\"\"Proxy model for filtering based on non-str values.\n    Sometimes it is needed to filter for non-str values, especially when it is required\n    to filter based on a different role than DisplayRole.\n    Same as the Qt QSortFilterProxyModel, this proxy respects the filterRole and\n    filterKeyColumn properties.\n    \"\"\"\nID = \"value_filter\"\ndef __init__(self, filter_value=None, **kwargs):\nself._filter_value = filter_value\nsuper().__init__(**kwargs)\ndef __repr__(self):\nreturn get_repr(self, self._filter_value)\ndef filterAcceptsRow(self, source_row: int, parent: core.ModelIndex) -&gt; bool:\nif self._filter_value is None:\nreturn True\ncolumn = self.filterKeyColumn()\nrole = self.filterRole()\nsource_model = self.sourceModel()\nidx = source_model.index(source_row, column, parent)\nvalue = source_model.data(idx, role)\nreturn value == self._filter_value\ndef set_filter_value(self, value):\n\"\"\"Set the filter value.\"\"\"\nself._filter_value = value\nself.invalidateRowsFilter()\ndef get_filter_value(self):\n\"\"\"Get the filter value.\"\"\"\nreturn self._filter_value\nfilter_value = core.Property(\nobject,\nget_filter_value,\nset_filter_value,\nuser=True,\ndoc=\"Value to use for filtering\",\n)\n</code></pre> Qt Property Type Description filter_value <code>Any</code> Value to use for filtering"},{"location":"features/proxymodels/valuefilterproxymodel.html#prettyqt.itemmodels.proxies.valuefilterproxymodel.ValueFilterProxyModel.get_filter_value","title":"<code>get_filter_value()</code>","text":"<p>Get the filter value.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\valuefilterproxymodel.py</code> <pre><code>def get_filter_value(self):\n\"\"\"Get the filter value.\"\"\"\nreturn self._filter_value\n</code></pre>"},{"location":"features/proxymodels/valuefilterproxymodel.html#prettyqt.itemmodels.proxies.valuefilterproxymodel.ValueFilterProxyModel.set_filter_value","title":"<code>set_filter_value(value)</code>","text":"<p>Set the filter value.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\valuefilterproxymodel.py</code> <pre><code>def set_filter_value(self, value):\n\"\"\"Set the filter value.\"\"\"\nself._filter_value = value\nself.invalidateRowsFilter()\n</code></pre>"},{"location":"features/tools/linkedselectionmodel.html","title":"LinkedSelectionModel","text":"<p>             Bases: <code>core.ItemSelectionModel</code></p> Source code in <code>prettyqt\\itemmodels\\proxies\\linkedselectionmodel.py</code> <pre><code>class LinkedSelectionModel(core.ItemSelectionModel):\n# TODO: atm this doesnt need to inherit from ItemSelectionModel.\n# Not sure if there is any advantage in doing so...\n# Otherwise we could rename to SelectionLinker and just inherit from\n# object / core.Object\ndef __init__(\nself,\n*itemviews,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself._itemviews = itemviews\nself._models = [w.model() for w in itemviews]\nself._mapper = itemmodels.ProxyMapper(*self._models)\nfor w in itemviews:\nw.selectionModel().currentChanged.connect(self._on_current_change)\nw.selectionModel().selectionChanged.connect(self._on_selection_change)\ndef _on_current_change(self, new: core.ModelIndex, _):\nsource = self.sender().model()\nsource_index = self._models.index(source)\ntarget_indexes = list(range(len(self._models)))\ntarget_indexes.remove(source_index)\nfor target_index in target_indexes:\nmapped = self._mapper.map_index(\nsource=source_index, target=target_index, index=new\n)\nself._itemviews[target_index].setCurrentIndex(mapped)\ndef _on_selection_change(self, new: core.QItemSelection, _):\nsource_model = self.sender().model()\nsource_index = self._models.index(source_model)\ntarget_indexes = list(range(len(self._models)))\ntarget_indexes.remove(source_index)\nfor target_index in target_indexes:\nselected = self._mapper.map_selection(\nsource=source_index, target=target_index, selection=new\n)\nsel_model = self._itemviews[target_index].selectionModel()\nsel_model.select(selected, sel_model.SelectionFlag.Select)\n</code></pre> <p>An ItemSelectionModel which keeps indexes of any amount of proxies / source models in sync.</p>"},{"location":"features/tools/proxymapper.html","title":"ProxyMapper","text":"<p>             Bases: <code>core.Object</code></p> <p>Class to map indexes / ItemSelections from one proxy to another.</p> <p>Also handles cases like: <pre><code>            Root model\n                |\n           shared proxy\n           /                      Proxy_1_1     Proxy_2_1\n          |            |\n        Proxy_1_2     Proxy_2_2\n</code></pre> When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then mapFromSource / mapSelectionFromSource to get down to 2_2.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>class ProxyMapper(core.Object):\n\"\"\"Class to map indexes / ItemSelections from one proxy to another.\n    Also handles cases like:\n    ```\n                Root model\n                    |\n               shared proxy\n               /          \\\n            Proxy_1_1     Proxy_2_1\n              |            |\n            Proxy_1_2     Proxy_2_2\n    ```\n    When mapping from 1_2 to 2_2, it will find the closest parent (\"shared proxy\" here),\n    use mapToSource / mapSelectionFromSource until it gets there,\n    and then mapFromSource / mapSelectionFromSource to get down to 2_2.\n    \"\"\"\ndef __init__(\nself,\n*proxies: core.QAbstractItemModel,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nchains = [get_proxy_chain(proxy) for proxy in proxies]\ncommon_list = [\nelement\nfor element in chains[0]\nif all(element in sublist for sublist in chains[1:])\n]\nif not common_list:\nraise RuntimeError(\"No common source model\")\ncommon_source = common_list[0]\nlogger.debug(f\"Common source: {common_source}\")\nself._chains = [chain[: chain.index(common_source)] for chain in chains]\ndef map_index(\nself, source: int, target: int, index: core.ModelIndex\n) -&gt; core.ModelIndex:\n\"\"\"Map index from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nindex = model.mapToSource(index)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nindex = model.mapFromSource(index)\nreturn index\ndef map_selection(\nself, source: int, target: int, selection: core.QItemSelection\n) -&gt; core.QItemSelection:\n\"\"\"Map selection from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nselection = model.mapSelectionToSource(selection)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nselection = model.mapSelectionFromSource(selection)\nreturn selection\n</code></pre> <p>When having a complex proxy tree like:</p> <pre><code>classDiagram\n  Shared_proxy &lt;|-- Proxy_1_1\n  Shared_proxy &lt;|-- Proxy_2_1\n  Proxy_1_1 &lt;|-- Proxy_1_2\n  Proxy_2_1 &lt;|-- Proxy_2_2\n  Root_model &lt;-- Shared_proxy\n  class Proxy_1_1{\n  }\n  class Proxy_2_1{\n  }\n  class Root_model{\n  }</code></pre> <p>then the ProxyMapper can be used to map indexes and ItemSelections easily between any of the proxies.</p> <pre><code>mapper = ProxyMapper(proxy_1_2, proxy_2_1)\nindex = proxy_1_2.index(0, 0)\nmapped_index = mapper.map_index(source=0, target=1, index)\n</code></pre> <p>The mapper will find the closest parent (\"shared_proxy\" here), use mapToSource / mapSelectionFromSource until it gets there, and then use mapFromSource / mapSelectionFromSource to get down to 2_1.</p>"},{"location":"features/tools/proxymapper.html#prettyqt.itemmodels.proxies.proxymapper.ProxyMapper.map_index","title":"<code>map_index(source: int, target: int, index: core.ModelIndex) -&gt; core.ModelIndex</code>","text":"<p>Map index from source to target.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>def map_index(\nself, source: int, target: int, index: core.ModelIndex\n) -&gt; core.ModelIndex:\n\"\"\"Map index from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nindex = model.mapToSource(index)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nindex = model.mapFromSource(index)\nreturn index\n</code></pre>"},{"location":"features/tools/proxymapper.html#prettyqt.itemmodels.proxies.proxymapper.ProxyMapper.map_selection","title":"<code>map_selection(source: int, target: int, selection: core.QItemSelection) -&gt; core.QItemSelection</code>","text":"<p>Map selection from source to target.</p> Source code in <code>prettyqt\\itemmodels\\proxies\\proxymapper.py</code> <pre><code>def map_selection(\nself, source: int, target: int, selection: core.QItemSelection\n) -&gt; core.QItemSelection:\n\"\"\"Map selection from source to target.\"\"\"\nfor model in self._chains[source]:\nlogger.debug(f\"mapping from {model!r} to {model.sourceModel()!r}\")\nselection = model.mapSelectionToSource(selection)\nfor model in reversed(self._chains[target]):\nlogger.debug(f\"mapping from {model.sourceModel()!r} to {model!r}\")\nselection = model.mapSelectionFromSource(selection)\nreturn selection\n</code></pre>"},{"location":"features/widgets/annotatedscrollbar.html","title":"AnnotatedScrollBar","text":"<p>ScrollBar which can highlight user-chosen segments.</p> <pre><code>    widget = widgets.PlainTextEdit(\"\\n\".join(str(i) for i in range(1000)))\nwidget.v_scrollbar = AnnotatedScrollBar(constants.VERTICAL)\nwidget.v_scrollbar.set_annotations([(10, 20), (50, 60), (82, 85)])\n</code></pre> <p> </p> Annotated ScrollBar"},{"location":"features/widgets/annotatedscrollbar.html#api","title":"API","text":"<p>             Bases: <code>widgets.ScrollBar</code></p> <p>ScrollBar which can highlight user-defined ranges.</p> Source code in <code>prettyqt\\custom_widgets\\scrollbars\\annotatedscrollbar.py</code> <pre><code>class AnnotatedScrollBar(widgets.ScrollBar):\n\"\"\"ScrollBar which can highlight user-defined ranges.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._annotation_color = gui.QColor(\"gold\")\nself._annotations = []\nself._document_length = 100\n@classmethod\ndef create_example(cls):\nwidget = widgets.PlainTextEdit(\"\\n\".join(str(i) for i in range(1000)))\nwidget.v_scrollbar = AnnotatedScrollBar(constants.VERTICAL)\nwidget.v_scrollbar.set_annotations([(10, 20), (50, 60), (82, 85)])\nreturn widget\ndef set_annotations(self, annotations: list[tuple[int, int]]):\nself._annotations = annotations\ndef get_annotations(self) -&gt; list[tuple[int, int]]:\nreturn self._annotations\ndef add_annotation(self, annotation: tuple[int, int]):\nself._annotations.append(annotation)\ndef paintEvent(self, event):\nsuper().paintEvent(event)\nwith gui.Painter(self) as p:\nopt = widgets.QStyleOptionSlider()\nself.initStyleOption(opt)\ngr = self.style().subControlRect(\nCC_ScrollBar, opt, SubControl.SC_ScrollBarGroove, self\n)\nsr = self.style().subControlRect(\nCC_ScrollBar, opt, SubControl.SC_ScrollBarSlider, self\n)\np.setClipRegion(\ngui.QRegion(gr) - gui.QRegion(sr), constants.ClipOperation.IntersectClip\n)\nx, y, w, h = gr.getRect()\nc = gui.QColor(self._annotation_color)\np.setBrush(c)\nc.setAlphaF(0.3)\np.setPen(gui.QPen(c, 2.0))\nscale = 1.0 / self._document_length\nif self.orientation() == constants.VERTICAL:\nrects = [\ncore.QRect(\nx + 1,\ny + h * start * scale - 0.5,\nw - 2,\nh * (end - start) * scale + 1,\n)\nfor start, end in self._annotations\n]\nelse:\nrects = [\ncore.QRect(\nx + w * start * scale - 0.5,\ny + 1,\nw * (end - start) * scale + 1,\nh - 2,\n)\nfor start, end in self._annotations\n]\np.drawRects(rects)\ndef set_annotation_color(self, color: datatypes.ColorType):\nself._annotation_color = colors.get_color(color).as_qt()\ndef get_annotation_color(self) -&gt; gui.QColor:\nreturn self._annotation_color\ndef set_document_length(self, length: int):\nself._document_length = length\ndef get_document_length(self) -&gt; int:\nreturn self._document_length\nannotation_color = core.Property(\ngui.QColor,\nget_annotation_color,\nset_annotation_color,\ndoc=\"Color for the annotated regions\",\n)\nannotations = core.Property(\nlist,\nget_annotations,\nset_annotations,\ndoc=\"Current set of annotations\",\n)\ndocument_length = core.Property(\nint,\nget_document_length,\nset_document_length,\ndoc=\"Total document length\",\n)\n</code></pre>"},{"location":"features/widgets/annotatedscrollbar.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description annotation_color <code>gui.QColor</code> Highlight color to use annotations <code>list[tuple[int, int]]</code> List of segments to highlight document_length <code>int</code> Base length for the segments (default 100)"},{"location":"features/widgets/astviewer.html","title":"AstViewer","text":"<p>Widget which displays an AST Tree next to the corresponding source code. Selecting a node in the tree will highlight the corresponing text section in source.</p> <pre><code>    widget = custom_widgets.AstViewer()\nwidget.show()\n</code></pre> <p> </p> AstViewer widget"},{"location":"features/widgets/filterheader.html","title":"FilterHeader","text":"<p>A HeaderView subclass which includes LineEdits / Dropdowns with filter possibilities. When setting the header view on an ItemView, a proxy model will be created which is linked to the filter widgets. The correct filter widget is automatically inferred from the content of the columns.</p> <p>So basically everything that needs to be done is the following:</p> <pre><code>model = MyModel()\nwidget = widgets.TableView()\nwidget.set_model(model)\nwidget.h_header = custom_widgets.FilterHeader() # same as setHorizontalHeader()\n</code></pre> <p>and you will get filter capabilities for your table.</p> <p>Note</p> <p>Since the FilterHeader will infer the column content type based on the first few rows, it will only work correctly for tables with homogenous data.</p> <p> </p> FilterHeader widget"},{"location":"features/widgets/proxycomparerwidget.html","title":"Proxycomparerwidget","text":"<p>Widget to compare a proxy model chain. Useful for debugging.</p> <p> </p> ProxyComparerWidget"},{"location":"features/widgets/proxycomparerwidget.html#api","title":"API","text":"<p>             Bases: <code>widgets.Splitter</code></p> <p>Splitter widget showing a comparison view between a proxy and its sourceModels.</p> Source code in <code>prettyqt\\debugging\\proxycomparerwidget.py</code> <pre><code>class ProxyComparerWidget(widgets.Splitter):\n\"\"\"Splitter widget showing a comparison view between a proxy and its sourceModels.\"\"\"\ndef __init__(\nself,\nmodel: core.QAbstractProxyModel,\nitemview: Literal[\"tree\", \"table\", \"list\"]\n| type[widgets.QAbstractItemView] = \"table\",\ndelegate: widgets.abstractitemview.DelegateStr\n| widgets.QItemDelegate\n| None = \"editor\",\nlink_selections: bool = True,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.model_itemviews = []\nself.linker = None\n# determine ItemView class for the models\nmatch itemview:\ncase \"tree\":\nView = widgets.TreeView\ncase \"table\":\nView = widgets.TableView\ncase \"list\":\nView = widgets.ListView\ncase type():\nView = itemview\ncase _:\nraise TypeError(itemview)\n# collect models\nmodels = []\nwhile isinstance(model, core.QAbstractProxyModel):\nmodels.append(model)\nmodel = model.sourceModel()\nmodels.append(model)\n# add column for each model\nfor model in reversed(models):\ncontainer = widgets.Widget()\nlayout = container.set_layout(\"vertical\")\ntable = View()\ntable.set_model(model)\ntable.set_delegate(delegate)\nself.model_itemviews.append(table)\nprop_table = custom_widgets.QObjectPropertiesTableView()\nprop_table.set_qobject(model)\nheader = widgets.Label(type(model).__name__)\nlayout.add(header)\ncol_splitter = widgets.Splitter(\"vertical\")\ncol_splitter.add(table)\ncol_splitter.add(prop_table)\nlayout.add(col_splitter)\nself.add(container)\nif link_selections:\nself.linker = itemmodels.LinkedSelectionModel(*self.model_itemviews)\n@classmethod\ndef setup_example(cls):\nfrom prettyqt import debugging\ntable = debugging.example_table()\ntable.proxifier.transpose()\ntable.proxifier.to_list()\nreturn cls(table.model())\n</code></pre>"},{"location":"features/widgets/scrollareatocwidget.html","title":"ScrollAreaTocWidget","text":""},{"location":"features/widgets/scrollareatocwidget.html#api","title":"API","text":"<p>             Bases: <code>widgets.TreeView</code></p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>class ScrollAreaTocWidget(widgets.TreeView):\nsection_changed = core.Signal()\nScrollMode = ScrollMode\ncore.Enum(ScrollMode)\ndef __init__(\nself,\nscrollarea: widgets.QScrollArea,\norientation: constants.Orientation\n| constants.OrientationStr = constants.VERTICAL,\nwidget_class: type = widgets.QWidget,\n**kwargs,\n) -&gt; None:\n\"\"\"A TreeView which can show a Table-of-contents list based on a given ScrollArea.\n        With default settings, it will scan the widgets contained in the scrollArea for\n         a windowTitle.\n        These widgets will be shown in the TreeView, and the TreeView selection will be\n        synced to what is currently visible in the ScrollArea.\n        This basically emulates the behaviour of many websites\n        (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html])\n        or from VS code settings.\n        You can set up the Toc Tree by passing a ScrollArea instance:\n        ```py\n        widget = widgets.Widget()\n        layout = widget.set_layout(\"horizontal\")\n        scrollarea = widgets.ScrollArea()\n        # add some widgets to the ScrollArea here\n        # ...\n        toc = ScrollAreaTocWidget(scrollarea)\n        layout.add(toc)\n        layout.add(scrollarea)\n        ```\n        The Toc tree can be configured to use other properties for populating\n        than windowTitle.\n        You can also set a widget class filter if you only want a specific widget\n        class to be shown.\n        The widget supports 3 different scroll modes:\n        1) Single: Only one row in the Tree will be highlighted. (the one which equals\n        the topmost one from the scrollArea)\n        2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown.\n        3) HeadersOnly: like Single, but only highlights top-level widgets from the\n                        ScrollArea.\n        There are also two different expand modes to choose from:\n        1) ExpandAll: All subsections are always expanded.\n        2) on_focus: Only the section containing the focused item is expanded.\n        This widget is used by [ConfigWidget](configwidget.md).\n        \"\"\"\n# TODO: not sure if parent should always equal scrollarea...\"\"\"\nself._WidgetClass = widget_class\nself._scroll_mode = ScrollMode.Single\nself._always_expanded = False\nself._last_visible = None\nself.scrollarea = scrollarea\nsuper().__init__(scrollarea, **kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself.setFixedWidth(200)\nself.h_header.hide()\nself.h_header.setStretchLastSection(True)\nself.setAlternatingRowColors(False)\nself.setRootIsDecorated(False)\n# self.setStyleSheet(\n#     \"\"\"::item:hover {background: transparent; border-color:transparent}\n#     ::item:selected { border-color:transparent;\n#     border-style:outset; border-width:2px; color:black; }\"\"\"\n# )\nif self._orientation == constants.VERTICAL:\nscrollarea.v_scrollbar.valueChanged.connect(self._on_scroll)\nelse:\nscrollarea.h_scrollbar.valueChanged.connect(self._on_scroll)\nself.set_widget(scrollarea)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"scrollMode\": SCROLL_MODE}\nreturn maps\ndef showEvent(self, event):\nsuper().showEvent(event)\nself._on_scroll()\n@classmethod\ndef setup_example(cls):\nscrollarea = widgets.ScrollArea()\nw = widgets.Widget()\nscrollarea.set_widget(w)\nreturn cls(scrollarea)\ndef set_widget(self, widget: widgets.QScrollArea):\n\"\"\"Set the ScrollArea widget to follow.\"\"\"\nif widget.widget() is None:\nraise RuntimeError(\"No widget set on ScrollArea.\")\nself.scrollarea = widget\nmodel = ScrollAreaTocModel(\nwidget.widget(),\nshow_root=True,\nparent=self.scrollarea,\nwidget_class=self._WidgetClass,\n)\nself.set_model(model)\nself.proxy = self.proxifier.set_sort_filter_proxy(\nrecursive_filtering_enabled=True\n)\nself.proxy.set_filter_case_sensitive(False)\nself.show_root(False)\nwidget.widget().installEventFilter(self)\nself.selectionModel().currentRowChanged.connect(self._on_current_change)\nself.selectionModel().selectionChanged.connect(self._on_selection_change)\n# if self._always_expanded:\nself.expandAll()\ndef _on_current_change(self, new, old):\nif self.model() is None:\nreturn\nis_vertical = self._orientation == constants.VERTICAL\narea = self.scrollarea\nscrollbar = area.v_scrollbar if is_vertical else area.h_scrollbar\nwith self.signal_blocked(scrollbar.valueChanged, self._on_scroll):\nwidget = self.model().data(new, role=constants.USER_ROLE)\narea.scroll_to_bottom()\narea.ensureWidgetVisible(widget, 10, 10)\ndef _on_selection_change(self, new, old):\nif self.model() is None:\nreturn\nwidgets = [i.data(constants.USER_ROLE) for i in self.selected_indexes()]\nself.get_model(skip_proxies=True).set_highlighted_widgets(widgets)\ndef _on_scroll(self):\nmodel: ScrollAreaTocModel | None = self.model()\nif model is None:\nreturn\nvisible_widgets = self.scrollarea.get_visible_widgets(typ=self._WidgetClass)\nif not visible_widgets or visible_widgets == self._last_visible:\nreturn\nself._last_visible = visible_widgets\nsig = self.selectionModel().currentRowChanged\nwith self.signal_blocked(sig, self._on_current_change):\nself.select_index(None)\nif not self._always_expanded:\nself.collapseAll()\nmatch self.get_scroll_mode():\ncase \"multi\":\nindexes = model.search_tree(visible_widgets, constants.USER_ROLE)\nfor index in indexes:\nchildren = model.get_child_indexes(index)\n# only select if all children selected.\n# if all(c in indexes for c in children):\n# highlight when no children or when first child is visible.\nif not children or children[0] in indexes:\nself.select_index(index, clear=False)\nself.set_expanded(indexes)\nself.scroll_to(indexes[0])\nself.scroll_to(indexes[-1])\ncase \"headers_only\":\nif indexes := model.search_tree(\nvisible_widgets,\nrole=constants.USER_ROLE,\nmax_results=1,\n):\nself.set_current_index(indexes[0])\nself.scroll_to(indexes[0])\ncase \"single\":\nif indexes := model.search_tree(visible_widgets, constants.USER_ROLE):\nviewport = self.scrollarea.viewport()\n# sort indexes by closest distance to top\nindexes.sort(\nkey=lambda x: abs(\nx.data(constants.USER_ROLE)\n.map_to(viewport, x.data(constants.USER_ROLE).rect())\n.top()\n),\n)\nself.collapseAll()\nself.model().fetchMore(indexes[0])\nself.set_current_index(indexes[0])\nself.scroll_to(indexes[0])\ncase _:\nraise ValueError(self._scroll_mode)\n# model.set_highlighted_indexes(indexes)\ndef wheelEvent(self, e):\nself.scrollarea.wheelEvent(e)\ndef eventFilter(self, source: core.QObject, event: core.QEvent) -&gt; bool:\nmatch event.type():\ncase core.Event.Type.ChildAdded:\nself._on_scroll()\nreturn False\ndef _scrollMode(self) -&gt; ScrollMode:\nreturn self._scroll_mode\ndef get_scroll_mode(self) -&gt; ScrollModeStr:\nreturn SCROLL_MODE.inverse[self._scrollMode()]\ndef set_scroll_mode(self, mode: ScrollMode | ScrollModeStr):\nself._scroll_mode = SCROLL_MODE.get_enum_value(mode)\ndef is_always_expanded(self) -&gt; bool:\nreturn self._always_expanded\ndef set_always_expanded(self, always_expanded: bool):\nself._always_expanded = always_expanded\nscrollMode = core.Property(\nenum.Enum,\n_scrollMode,\nset_scroll_mode,\ndoc=\"Scrolling mode\",\n)\nalways_expanded = core.Property(\nbool,\nis_always_expanded,\nset_always_expanded,\ndoc=\"Whether the tree is always expanded.\",\n)\n</code></pre>"},{"location":"features/widgets/scrollareatocwidget.html#prettyqt.custom_widgets.scrollareatocwidget.ScrollAreaTocWidget.__init__","title":"<code>__init__(scrollarea: widgets.QScrollArea, orientation: constants.Orientation | constants.OrientationStr = constants.VERTICAL, widget_class: type = widgets.QWidget, **kwargs: type) -&gt; None</code>","text":"<p>A TreeView which can show a Table-of-contents list based on a given ScrollArea.</p> <p>With default settings, it will scan the widgets contained in the scrollArea for  a windowTitle. These widgets will be shown in the TreeView, and the TreeView selection will be synced to what is currently visible in the ScrollArea. This basically emulates the behaviour of many websites (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html]) or from VS code settings.</p> <p>You can set up the Toc Tree by passing a ScrollArea instance:</p> <pre><code>widget = widgets.Widget()\nlayout = widget.set_layout(\"horizontal\")\nscrollarea = widgets.ScrollArea()\n# add some widgets to the ScrollArea here\n# ...\ntoc = ScrollAreaTocWidget(scrollarea)\nlayout.add(toc)\nlayout.add(scrollarea)\n</code></pre> <p>The Toc tree can be configured to use other properties for populating than windowTitle. You can also set a widget class filter if you only want a specific widget class to be shown.</p> <p>The widget supports 3 different scroll modes:</p> <p>1) Single: Only one row in the Tree will be highlighted. (the one which equals the topmost one from the scrollArea) 2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown. 3) HeadersOnly: like Single, but only highlights top-level widgets from the                 ScrollArea.</p> <p>There are also two different expand modes to choose from:</p> <p>1) ExpandAll: All subsections are always expanded. 2) on_focus: Only the section containing the focused item is expanded.</p> <p>This widget is used by ConfigWidget.</p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>def __init__(\nself,\nscrollarea: widgets.QScrollArea,\norientation: constants.Orientation\n| constants.OrientationStr = constants.VERTICAL,\nwidget_class: type = widgets.QWidget,\n**kwargs,\n) -&gt; None:\n\"\"\"A TreeView which can show a Table-of-contents list based on a given ScrollArea.\n    With default settings, it will scan the widgets contained in the scrollArea for\n     a windowTitle.\n    These widgets will be shown in the TreeView, and the TreeView selection will be\n    synced to what is currently visible in the ScrollArea.\n    This basically emulates the behaviour of many websites\n    (like the [Qt Website][https://doc.qt.io/qt-6/supported-platforms.html])\n    or from VS code settings.\n    You can set up the Toc Tree by passing a ScrollArea instance:\n    ```py\n    widget = widgets.Widget()\n    layout = widget.set_layout(\"horizontal\")\n    scrollarea = widgets.ScrollArea()\n    # add some widgets to the ScrollArea here\n    # ...\n    toc = ScrollAreaTocWidget(scrollarea)\n    layout.add(toc)\n    layout.add(scrollarea)\n    ```\n    The Toc tree can be configured to use other properties for populating\n    than windowTitle.\n    You can also set a widget class filter if you only want a specific widget\n    class to be shown.\n    The widget supports 3 different scroll modes:\n    1) Single: Only one row in the Tree will be highlighted. (the one which equals\n    the topmost one from the scrollArea)\n    2) Multi: All rows which equal to visible widgets in the ScrollArea will be shown.\n    3) HeadersOnly: like Single, but only highlights top-level widgets from the\n                    ScrollArea.\n    There are also two different expand modes to choose from:\n    1) ExpandAll: All subsections are always expanded.\n    2) on_focus: Only the section containing the focused item is expanded.\n    This widget is used by [ConfigWidget](configwidget.md).\n    \"\"\"\n# TODO: not sure if parent should always equal scrollarea...\"\"\"\nself._WidgetClass = widget_class\nself._scroll_mode = ScrollMode.Single\nself._always_expanded = False\nself._last_visible = None\nself.scrollarea = scrollarea\nsuper().__init__(scrollarea, **kwargs)\nself._orientation = constants.ORIENTATION.get_enum_value(orientation)\nself.setFixedWidth(200)\nself.h_header.hide()\nself.h_header.setStretchLastSection(True)\nself.setAlternatingRowColors(False)\nself.setRootIsDecorated(False)\n# self.setStyleSheet(\n#     \"\"\"::item:hover {background: transparent; border-color:transparent}\n#     ::item:selected { border-color:transparent;\n#     border-style:outset; border-width:2px; color:black; }\"\"\"\n# )\nif self._orientation == constants.VERTICAL:\nscrollarea.v_scrollbar.valueChanged.connect(self._on_scroll)\nelse:\nscrollarea.h_scrollbar.valueChanged.connect(self._on_scroll)\nself.set_widget(scrollarea)\n</code></pre>"},{"location":"features/widgets/scrollareatocwidget.html#prettyqt.custom_widgets.scrollareatocwidget.ScrollAreaTocWidget.set_widget","title":"<code>set_widget(widget: widgets.QScrollArea)</code>","text":"<p>Set the ScrollArea widget to follow.</p> Source code in <code>prettyqt\\custom_widgets\\scrollareatocwidget.py</code> <pre><code>def set_widget(self, widget: widgets.QScrollArea):\n\"\"\"Set the ScrollArea widget to follow.\"\"\"\nif widget.widget() is None:\nraise RuntimeError(\"No widget set on ScrollArea.\")\nself.scrollarea = widget\nmodel = ScrollAreaTocModel(\nwidget.widget(),\nshow_root=True,\nparent=self.scrollarea,\nwidget_class=self._WidgetClass,\n)\nself.set_model(model)\nself.proxy = self.proxifier.set_sort_filter_proxy(\nrecursive_filtering_enabled=True\n)\nself.proxy.set_filter_case_sensitive(False)\nself.show_root(False)\nwidget.widget().installEventFilter(self)\nself.selectionModel().currentRowChanged.connect(self._on_current_change)\nself.selectionModel().selectionChanged.connect(self._on_selection_change)\n# if self._always_expanded:\nself.expandAll()\n</code></pre>"},{"location":"features/widgets/scrollareatocwidget.html#qt-properties","title":"Qt Properties","text":"Qt Property Type Description scroll_mode <code>Enum</code> Scroll mode (see above) expand_mode <code>Enum</code> Expand mode (see above)"},{"location":"qt_modules/index.html","title":"prettyqt","text":"<p>Top-level package for PrettyQt.</p>"},{"location":"qt_modules/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>bluetooth</li> <li>charts</li> <li>core</li> <li>designer</li> <li>gui</li> <li>location</li> <li>multimedia</li> <li>multimediawidgets</li> <li>network</li> <li>openglwidgets</li> <li>pdf</li> <li>pdfwidgets</li> <li>positioning</li> <li>printsupport</li> <li>qml</li> <li>qthelp</li> <li>quick</li> <li>quickwidgets</li> <li>spatialaudio</li> <li>statemachine</li> <li>svg</li> <li>svgwidgets</li> <li>texttospeech</li> <li>webchannel</li> <li>webenginecore</li> <li>webenginewidgets</li> <li>widgets</li> <li>prettyqt</li> </ul>"},{"location":"qt_modules/bluetooth/index.html","title":"bluetooth","text":"<p>Provides access to Bluetooth hardware.</p> Name Children Inherits BluetoothSocketprettyqt.bluetooth.bluetoothsocket <ul><li>IODeviceMixin</li><li>QBluetoothSocket</li></ul> BluetoothDeviceDiscoveryAgentprettyqt.bluetooth.bluetoothdevicediscoveryagent <ul><li>ObjectMixin</li><li>QBluetoothDeviceDiscoveryAgent</li></ul> BluetoothServiceDiscoveryAgentprettyqt.bluetooth.bluetoothservicediscoveryagent <ul><li>ObjectMixin</li><li>QBluetoothServiceDiscoveryAgent</li></ul> BluetoothDeviceInfoprettyqt.bluetooth.bluetoothdeviceinfo <ul><li>QBluetoothDeviceInfo</li></ul> BluetoothUuidprettyqt.bluetooth.bluetoothuuid <ul><li>UuidMixin</li><li>QBluetoothUuid</li></ul> BluetoothServerprettyqt.bluetooth.bluetoothserver <ul><li>ObjectMixin</li><li>QBluetoothServer</li></ul> BluetoothLocalDeviceprettyqt.bluetooth.bluetoothlocaldevice <ul><li>ObjectMixin</li><li>QBluetoothLocalDevice</li></ul> BluetoothHostInfoprettyqt.bluetooth.bluetoothhostinfo <ul><li>QBluetoothHostInfo</li></ul> BluetoothServiceInfoprettyqt.bluetooth.bluetoothserviceinfoEnables access to the attributes of a Bluetooth service. <ul><li>QBluetoothServiceInfo</li><li><code>MutableMapping</code></li></ul> BluetoothAddressprettyqt.bluetooth.bluetoothaddress <ul><li>QBluetoothAddress</li></ul>"},{"location":"qt_modules/bluetooth/BluetoothAddress.html","title":"BluetoothAddress","text":"<p>Qt Base Class: QBluetoothAddress</p> <p>Signature: <code>QBluetoothAddress(self) -&gt; None QBluetoothAddress(self, address: str) -&gt; None QBluetoothAddress(self, address: int) -&gt; None QBluetoothAddress(self, other: PySide6.QtBluetooth.QBluetoothAddress) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothAddress.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtBluetooth.QBluetoothAddress</code></p> <p>Assigns an address to the Bluetooth device.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>class BluetoothAddress(QtBluetooth.QBluetoothAddress):\n\"\"\"Assigns an address to the Bluetooth device.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __bool__(self):\n\"\"\"True when address is not null.\"\"\"\nreturn not self.isNull()\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothAddress.html#prettyqt.bluetooth.bluetoothaddress.BluetoothAddress.__bool__","title":"<code>__bool__()</code>","text":"<p>True when address is not null.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothaddress.py</code> <pre><code>def __bool__(self):\n\"\"\"True when address is not null.\"\"\"\nreturn not self.isNull()\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothAddress.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261760992[\"bluetooth.BluetoothAddress\"]\n  2103261730272[\"QtBluetooth.QBluetoothAddress\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103261730272 --&gt; 2103261760992\n  2103206874128 --&gt; 2103261730272\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html","title":"BluetoothDeviceDiscoveryAgent","text":"<p>Qt Base Class: QBluetoothDeviceDiscoveryAgent</p> <p>Signature: <code>QBluetoothDeviceDiscoveryAgent(self, deviceAdapter: PySide6.QtBluetooth.QBluetoothAddress, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QBluetoothDeviceDiscoveryAgent(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothDeviceDiscoveryAgent</code></p> <p>Discovers the Bluetooth devices nearby.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>class BluetoothDeviceDiscoveryAgent(\ncore.ObjectMixin, bluetooth.QBluetoothDeviceDiscoveryAgent\n):\n\"\"\"Discovers the Bluetooth devices nearby.\"\"\"\ndevice_discovered = core.Signal(object)  # bluetooth.BluetoothDeviceInfo casts signal.\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.deviceDiscovered.connect(self._on_device_discovered)\ndef _on_device_discovered(self, info):\ninfo = bluetooth.BluetoothDeviceInfo(info)\nself.device_discovered.emit(info)\n# def set_inquiry_type(self, typ: InquiryTypeStr):\n#     \"\"\"Set inquiry type.\n#     Args:\n#         typ: inquiry type\n#     \"\"\"\n#     self.setInquiryType(INQUIRY_TYPES.get_enum_value(typ))\n# def get_inquiry_type(self) -&gt; InquiryTypeStr:\n#     \"\"\"Get the current inquiry type.\n#     Returns:\n#         inquiry type\n#     \"\"\"\n#     return INQUIRY_TYPES.inverse[self.inquiryType()]\ndef start_discovery(self, classic: bool = True, low_energy: bool = True):\n\"\"\"Start discovery of bluetooth devices.\n        Arguments:\n            classic: use classic method\n            low_energy: use BLE mode\n        \"\"\"\nflag = bluetooth.QBluetoothDeviceDiscoveryAgent.NoMethod\nif classic:\nflag |= bluetooth.QBluetoothDeviceDiscoveryAgent.ClassicMethod\nif low_energy:\nflag |= bluetooth.QBluetoothDeviceDiscoveryAgent.LowEnergyMethod\nself.start(flag)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Get error type if available.\"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_supported_discovery_methods(self) -&gt; list[DiscoveryMethodStr]:\n\"\"\"Return a list of supported discovery methods.\"\"\"\nreturn DISCOVERY_METHODS.get_list(self.supportedDiscoveryMethods())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error type if available.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error type if available.\"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.get_supported_discovery_methods","title":"<code>get_supported_discovery_methods() -&gt; list[DiscoveryMethodStr]</code>","text":"<p>Return a list of supported discovery methods.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def get_supported_discovery_methods(self) -&gt; list[DiscoveryMethodStr]:\n\"\"\"Return a list of supported discovery methods.\"\"\"\nreturn DISCOVERY_METHODS.get_list(self.supportedDiscoveryMethods())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothdevicediscoveryagent.BluetoothDeviceDiscoveryAgent.start_discovery","title":"<code>start_discovery(classic: bool = True, low_energy: bool = True)</code>","text":"<p>Start discovery of bluetooth devices.</p> <p>Parameters:</p> Name Type Description Default <code>classic</code> <code>bool</code> <p>use classic method</p> <code>True</code> <code>low_energy</code> <code>bool</code> <p>use BLE mode</p> <code>True</code> Source code in <code>prettyqt\\bluetooth\\bluetoothdevicediscoveryagent.py</code> <pre><code>def start_discovery(self, classic: bool = True, low_energy: bool = True):\n\"\"\"Start discovery of bluetooth devices.\n    Arguments:\n        classic: use classic method\n        low_energy: use BLE mode\n    \"\"\"\nflag = bluetooth.QBluetoothDeviceDiscoveryAgent.NoMethod\nif classic:\nflag |= bluetooth.QBluetoothDeviceDiscoveryAgent.ClassicMethod\nif low_energy:\nflag |= bluetooth.QBluetoothDeviceDiscoveryAgent.LowEnergyMethod\nself.start(flag)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261773472[\"bluetooth.BluetoothDeviceDiscoveryAgent\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261727392[\"QtBluetooth.QBluetoothDeviceDiscoveryAgent\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261773472\n  140736120080256 --&gt; 2103255067472\n  2103261727392 --&gt; 2103261773472\n  2103254677056 --&gt; 2103261727392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceDiscoveryAgent.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html","title":"BluetoothDeviceInfo","text":"<p>Qt Base Class: QBluetoothDeviceInfo</p> <p>Signature: <code>QBluetoothDeviceInfo(self) -&gt; None QBluetoothDeviceInfo(self, address: PySide6.QtBluetooth.QBluetoothAddress, name: str, classOfDevice: int) -&gt; None QBluetoothDeviceInfo(self, other: PySide6.QtBluetooth.QBluetoothDeviceInfo) -&gt; None QBluetoothDeviceInfo(self, uuid: Union[PySide6.QtBluetooth.QBluetoothUuid, PySide6.QtBluetooth.QBluetoothUuid.CharacteristicType, PySide6.QtBluetooth.QBluetoothUuid.DescriptorType, PySide6.QtBluetooth.QBluetoothUuid.ProtocolUuid, PySide6.QtBluetooth.QBluetoothUuid.ServiceClassUuid, PySide6.QtCore.QUuid], name: str, classOfDevice: int) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>bluetooth.QBluetoothDeviceInfo</code></p> <p>Stores information about the Bluetooth device.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>class BluetoothDeviceInfo(bluetooth.QBluetoothDeviceInfo):\n\"\"\"Stores information about the Bluetooth device.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_address(), self.name())\ndef __bool__(self):\n\"\"\"Return true if device info is valid.\"\"\"\nreturn self.isValid()\ndef get_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Get bluetooth address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.address())\ndef get_device_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of device ids.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.deviceIds()]\ndef get_service_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of service ids.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceIds()]\ndef get_service_uuids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of service UUIDs.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceUuids()]\ndef get_major_device_class(self) -&gt; MajorDeviceClassStr:\n\"\"\"Get major device class.\"\"\"\nreturn MAJOR_DEVICE_CLASS.inverse[self.majorDeviceClass()]\ndef get_minor_device_class(self) -&gt; str:\n\"\"\"Get minor device class.\"\"\"\nmajor = self.get_major_device_class()\nmatch major:\ncase \"computer\":\nflag = mod.MinorComputerClass(self.minorDeviceClass())\nreturn MINOR_COMPUTER_CLASS.inverse[flag]\ncase \"phone\":\nflag = mod.MinorPhoneClass(self.minorDeviceClass())\nreturn MINOR_PHONE_CLASS.inverse[flag]\ncase \"network\":\nflag = mod.MinorNetworkClass(self.minorDeviceClass())\nreturn MINOR_NETWORK_CLASS.inverse[flag]\ncase \"audio_video\":\nflag = mod.MinorAudioVideoClass(self.minorDeviceClass())\nreturn MINOR_AUDIO_VIDEO_CLASS.inverse[flag]\ncase \"peripheral\":\nflag = mod.MinorPeripheralClass(self.minorDeviceClass())\nreturn MINOR_PERIPHERAL_CLASS.inverse[flag]\ncase \"imaging\":\nflag = mod.MinorImagingClass(self.minorDeviceClass())\nreturn MINOR_IMAGING_CLASS.inverse[flag]\ncase \"wearable\":\nflag = mod.MinorWearableClass(self.minorDeviceClass())\nreturn MINOR_WEARABLE_CLASS.inverse[flag]\ncase \"toy\":\nflag = mod.MinorToyClass(self.minorDeviceClass())\nreturn MINOR_TOY_CLASS.inverse[flag]\ncase \"health\":\nflag = mod.MinorHealthClass(self.minorDeviceClass())\nreturn MINOR_HEALTH_CLASS.inverse[flag]\ncase \"uncategorized\":\nreturn \"misc\"\ncase _:\nraise ValueError(major)\ndef get_service_classes(self) -&gt; list[ServiceClassStr]:\n\"\"\"Get list of service classes.\"\"\"\nreturn SERVICE_CLASS.get_list(self.serviceClasses())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.__bool__","title":"<code>__bool__()</code>","text":"<p>Return true if device info is valid.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def __bool__(self):\n\"\"\"Return true if device info is valid.\"\"\"\nreturn self.isValid()\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_address","title":"<code>get_address() -&gt; bluetooth.BluetoothAddress</code>","text":"<p>Get bluetooth address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Get bluetooth address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_device_ids","title":"<code>get_device_ids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"<p>Get list of device ids.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_device_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of device ids.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.deviceIds()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_major_device_class","title":"<code>get_major_device_class() -&gt; MajorDeviceClassStr</code>","text":"<p>Get major device class.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_major_device_class(self) -&gt; MajorDeviceClassStr:\n\"\"\"Get major device class.\"\"\"\nreturn MAJOR_DEVICE_CLASS.inverse[self.majorDeviceClass()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_minor_device_class","title":"<code>get_minor_device_class() -&gt; str</code>","text":"<p>Get minor device class.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_minor_device_class(self) -&gt; str:\n\"\"\"Get minor device class.\"\"\"\nmajor = self.get_major_device_class()\nmatch major:\ncase \"computer\":\nflag = mod.MinorComputerClass(self.minorDeviceClass())\nreturn MINOR_COMPUTER_CLASS.inverse[flag]\ncase \"phone\":\nflag = mod.MinorPhoneClass(self.minorDeviceClass())\nreturn MINOR_PHONE_CLASS.inverse[flag]\ncase \"network\":\nflag = mod.MinorNetworkClass(self.minorDeviceClass())\nreturn MINOR_NETWORK_CLASS.inverse[flag]\ncase \"audio_video\":\nflag = mod.MinorAudioVideoClass(self.minorDeviceClass())\nreturn MINOR_AUDIO_VIDEO_CLASS.inverse[flag]\ncase \"peripheral\":\nflag = mod.MinorPeripheralClass(self.minorDeviceClass())\nreturn MINOR_PERIPHERAL_CLASS.inverse[flag]\ncase \"imaging\":\nflag = mod.MinorImagingClass(self.minorDeviceClass())\nreturn MINOR_IMAGING_CLASS.inverse[flag]\ncase \"wearable\":\nflag = mod.MinorWearableClass(self.minorDeviceClass())\nreturn MINOR_WEARABLE_CLASS.inverse[flag]\ncase \"toy\":\nflag = mod.MinorToyClass(self.minorDeviceClass())\nreturn MINOR_TOY_CLASS.inverse[flag]\ncase \"health\":\nflag = mod.MinorHealthClass(self.minorDeviceClass())\nreturn MINOR_HEALTH_CLASS.inverse[flag]\ncase \"uncategorized\":\nreturn \"misc\"\ncase _:\nraise ValueError(major)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_classes","title":"<code>get_service_classes() -&gt; list[ServiceClassStr]</code>","text":"<p>Get list of service classes.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_classes(self) -&gt; list[ServiceClassStr]:\n\"\"\"Get list of service classes.\"\"\"\nreturn SERVICE_CLASS.get_list(self.serviceClasses())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_ids","title":"<code>get_service_ids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"<p>Get list of service ids.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_ids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of service ids.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceIds()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#prettyqt.bluetooth.bluetoothdeviceinfo.BluetoothDeviceInfo.get_service_uuids","title":"<code>get_service_uuids() -&gt; list[bluetooth.BluetoothUuid]</code>","text":"<p>Get list of service UUIDs.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothdeviceinfo.py</code> <pre><code>def get_service_uuids(self) -&gt; list[bluetooth.BluetoothUuid]:\n\"\"\"Get list of service UUIDs.\"\"\"\nreturn [bluetooth.BluetoothUuid(i) for i in self.serviceUuids()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothDeviceInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261757152[\"bluetooth.BluetoothDeviceInfo\"]\n  2103261701472[\"QtBluetooth.QBluetoothDeviceInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103261701472 --&gt; 2103261757152\n  2103206874128 --&gt; 2103261701472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothHostInfo.html","title":"BluetoothHostInfo","text":"<p>Qt Base Class: QBluetoothHostInfo</p> <p>Signature: <code>QBluetoothHostInfo(self) -&gt; None QBluetoothHostInfo(self, other: PySide6.QtBluetooth.QBluetoothHostInfo) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothHostInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>bluetooth.QBluetoothHostInfo</code></p> <p>Encapsulates the details of a local QBluetooth device.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>class BluetoothHostInfo(bluetooth.QBluetoothHostInfo):\n\"\"\"Encapsulates the details of a local QBluetooth device.\"\"\"\ndef set_address(self, address: bluetooth.QBluetoothAddress | int | str):\n\"\"\"Set address to given value.\"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nself.setAddress(address)\ndef get_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Get address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothHostInfo.html#prettyqt.bluetooth.bluetoothhostinfo.BluetoothHostInfo.get_address","title":"<code>get_address() -&gt; bluetooth.BluetoothAddress</code>","text":"<p>Get address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>def get_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Get address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.address())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothHostInfo.html#prettyqt.bluetooth.bluetoothhostinfo.BluetoothHostInfo.set_address","title":"<code>set_address(address: bluetooth.QBluetoothAddress | int | str)</code>","text":"<p>Set address to given value.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothhostinfo.py</code> <pre><code>def set_address(self, address: bluetooth.QBluetoothAddress | int | str):\n\"\"\"Set address to given value.\"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nself.setAddress(address)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothHostInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261778272[\"bluetooth.BluetoothHostInfo\"]\n  2103261709152[\"QtBluetooth.QBluetoothHostInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103261709152 --&gt; 2103261778272\n  2103206874128 --&gt; 2103261709152\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html","title":"BluetoothLocalDevice","text":"<p>Qt Base Class: QBluetoothLocalDevice</p> <p>Signature: <code>QBluetoothLocalDevice(self, address: PySide6.QtBluetooth.QBluetoothAddress, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QBluetoothLocalDevice(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothLocalDevice</code></p> <p>Enables access to the local Bluetooth device.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>class BluetoothLocalDevice(core.ObjectMixin, bluetooth.QBluetoothLocalDevice):\n\"\"\"Enables access to the local Bluetooth device.\"\"\"\ndef __bool__(self):\n\"\"\"Return True when local device is valid.\"\"\"\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.address())\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERROR.inverse[self.error()]\ndef set_host_mode(self, mode: HostModeStr | HostMode):\n\"\"\"Set host mode.\n        Args:\n            mode: host mode to use\n        \"\"\"\nself.setGridStyle(HOST_MODE.get_enum_value(mode))\ndef get_host_mode(self) -&gt; HostModeStr:\n\"\"\"Return host mode.\n        Returns:\n            host mode\n        \"\"\"\nreturn HOST_MODE.inverse[self.gridStyle()]\ndef get_pairing_status(\nself, address: bluetooth.QBluetoothAddress | int | str\n) -&gt; PairingStr:\n\"\"\"Return pairing status.\n        Arguments:\n            address: bluetooth address\n        Returns:\n            pairing status\n        \"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nreturn PAIRING.inverse[self.pairingStatus(address)]\ndef request_pairing(\nself,\naddress: bluetooth.QBluetoothAddress | int | str,\npairing: PairingStr | Pairing,\n):\n\"\"\"Request a pairing to given bluetooth address.\"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nself.requestPairing(address, PAIRING.get_enum_value(pairing))\ndef get_connected_devices(self) -&gt; list[bluetooth.BluetoothAddress]:\n\"\"\"Get addresses for connected devices.\"\"\"\nreturn [bluetooth.BluetoothAddress(i) for i in self.connectedDevices()]\n@classmethod\ndef for_all_devices(cls) -&gt; list[bluetooth.BluetoothHostInfo]:\n\"\"\"Get host info for all devices.\"\"\"\nreturn [bluetooth.BluetoothHostInfo(i) for i in cls.allDevices()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.__bool__","title":"<code>__bool__()</code>","text":"<p>Return True when local device is valid.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def __bool__(self):\n\"\"\"Return True when local device is valid.\"\"\"\nreturn self.isValid()\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.for_all_devices","title":"<code>for_all_devices() -&gt; list[bluetooth.BluetoothHostInfo]</code>  <code>classmethod</code>","text":"<p>Get host info for all devices.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>@classmethod\ndef for_all_devices(cls) -&gt; list[bluetooth.BluetoothHostInfo]:\n\"\"\"Get host info for all devices.\"\"\"\nreturn [bluetooth.BluetoothHostInfo(i) for i in cls.allDevices()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_connected_devices","title":"<code>get_connected_devices() -&gt; list[bluetooth.BluetoothAddress]</code>","text":"<p>Get addresses for connected devices.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_connected_devices(self) -&gt; list[bluetooth.BluetoothAddress]:\n\"\"\"Get addresses for connected devices.\"\"\"\nreturn [bluetooth.BluetoothAddress(i) for i in self.connectedDevices()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error code.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_host_mode","title":"<code>get_host_mode() -&gt; HostModeStr</code>","text":"<p>Return host mode.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_host_mode(self) -&gt; HostModeStr:\n\"\"\"Return host mode.\n    Returns:\n        host mode\n    \"\"\"\nreturn HOST_MODE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.get_pairing_status","title":"<code>get_pairing_status(address: bluetooth.QBluetoothAddress | int | str) -&gt; PairingStr</code>","text":"<p>Return pairing status.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>bluetooth.QBluetoothAddress | int | str</code> <p>bluetooth address</p> required Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def get_pairing_status(\nself, address: bluetooth.QBluetoothAddress | int | str\n) -&gt; PairingStr:\n\"\"\"Return pairing status.\n    Arguments:\n        address: bluetooth address\n    Returns:\n        pairing status\n    \"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nreturn PAIRING.inverse[self.pairingStatus(address)]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.request_pairing","title":"<code>request_pairing(address: bluetooth.QBluetoothAddress | int | str, pairing: PairingStr | Pairing)</code>","text":"<p>Request a pairing to given bluetooth address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def request_pairing(\nself,\naddress: bluetooth.QBluetoothAddress | int | str,\npairing: PairingStr | Pairing,\n):\n\"\"\"Request a pairing to given bluetooth address.\"\"\"\nif isinstance(address, int | str):\naddress = bluetooth.QBluetoothAddress(address)\nself.requestPairing(address, PAIRING.get_enum_value(pairing))\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#prettyqt.bluetooth.bluetoothlocaldevice.BluetoothLocalDevice.set_host_mode","title":"<code>set_host_mode(mode: HostModeStr | HostMode)</code>","text":"<p>Set host mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>HostModeStr | HostMode</code> <p>host mode to use</p> required Source code in <code>prettyqt\\bluetooth\\bluetoothlocaldevice.py</code> <pre><code>def set_host_mode(self, mode: HostModeStr | HostMode):\n\"\"\"Set host mode.\n    Args:\n        mode: host mode to use\n    \"\"\"\nself.setGridStyle(HOST_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261770592[\"bluetooth.BluetoothLocalDevice\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261691872[\"QtBluetooth.QBluetoothLocalDevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261770592\n  140736120080256 --&gt; 2103255067472\n  2103261691872 --&gt; 2103261770592\n  2103254677056 --&gt; 2103261691872\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothLocalDevice.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/bluetooth/BluetoothServer.html","title":"BluetoothServer","text":"<p>Qt Base Class: QBluetoothServer</p> <p>Signature: <code>QBluetoothServer(self, serverType: PySide6.QtBluetooth.QBluetoothServiceInfo.Protocol, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothServer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothServer</code></p> <p>Uses the RFCOMM or L2cap protocol to communicate with a Bluetooth device.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>class BluetoothServer(core.ObjectMixin, bluetooth.QBluetoothServer):\n\"\"\"Uses the RFCOMM or L2cap protocol to communicate with a Bluetooth device.\"\"\"\ndef __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| bluetooth.QBluetoothServiceInfo.Protocol,\nparent: core.QObject | None = None,\n):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL.get_enum_value(protocol)\nsuper().__init__(protocol, parent)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_server_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\n\"\"\"Get server type.\"\"\"\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.serverType()]\ndef get_server_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Return bluetooth server address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.serverAddress())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServer.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error code.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServer.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_server_address","title":"<code>get_server_address() -&gt; bluetooth.BluetoothAddress</code>","text":"<p>Return bluetooth server address.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_server_address(self) -&gt; bluetooth.BluetoothAddress:\n\"\"\"Return bluetooth server address.\"\"\"\nreturn bluetooth.BluetoothAddress(self.serverAddress())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServer.html#prettyqt.bluetooth.bluetoothserver.BluetoothServer.get_server_type","title":"<code>get_server_type() -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr</code>","text":"<p>Get server type.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserver.py</code> <pre><code>def get_server_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\n\"\"\"Get server type.\"\"\"\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.serverType()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261763872[\"bluetooth.BluetoothServer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261735072[\"QtBluetooth.QBluetoothServer\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261763872\n  140736120080256 --&gt; 2103255067472\n  2103261735072 --&gt; 2103261763872\n  2103254677056 --&gt; 2103261735072\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html","title":"BluetoothServiceDiscoveryAgent","text":"<p>Qt Base Class: QBluetoothServiceDiscoveryAgent</p> <p>Signature: <code>QBluetoothServiceDiscoveryAgent(self, deviceAdapter: PySide6.QtBluetooth.QBluetoothAddress, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QBluetoothServiceDiscoveryAgent(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>bluetooth.QBluetoothServiceDiscoveryAgent</code></p> <p>Enables you to query for Bluetooth services.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>class BluetoothServiceDiscoveryAgent(\ncore.ObjectMixin, bluetooth.QBluetoothServiceDiscoveryAgent\n):\n\"\"\"Enables you to query for Bluetooth services.\"\"\"\ndef start_discovery(self, full: bool = False):\n\"\"\"Start bluetooth service discovery.\n        Arguments:\n            full: full discovery instead of minimal discovery.\n        \"\"\"\nif full:\nflag = bluetooth.QBluetoothServiceDiscoveryAgent.FullDiscovery\nelse:\nflag = bluetooth.QBluetoothServiceDiscoveryAgent.MinimalDiscovery\nself.start(flag)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERRORS.inverse[self.error()]\ndef set_remote_address(\nself, address: str | int | bluetooth.QBluetoothAddress\n) -&gt; bool:\n\"\"\"Set remote address.\n        Arguments:\n            address: address of the remote\n        \"\"\"\naddress = bluetooth.BluetoothAddress(address)\nreturn self.setRemoteAddress(address)\ndef get_discovered_services(self) -&gt; list[bluetooth.BluetoothServiceInfo]:\n\"\"\"Get list of discovered devices.\"\"\"\nreturn [bluetooth.BluetoothServiceInfo(i) for i in self.discoveredServices()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.get_discovered_services","title":"<code>get_discovered_services() -&gt; list[bluetooth.BluetoothServiceInfo]</code>","text":"<p>Get list of discovered devices.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def get_discovered_services(self) -&gt; list[bluetooth.BluetoothServiceInfo]:\n\"\"\"Get list of discovered devices.\"\"\"\nreturn [bluetooth.BluetoothServiceInfo(i) for i in self.discoveredServices()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Get error code.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Get error code.\"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.set_remote_address","title":"<code>set_remote_address(address: str | int | bluetooth.QBluetoothAddress) -&gt; bool</code>","text":"<p>Set remote address.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str | int | bluetooth.QBluetoothAddress</code> <p>address of the remote</p> required Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def set_remote_address(\nself, address: str | int | bluetooth.QBluetoothAddress\n) -&gt; bool:\n\"\"\"Set remote address.\n    Arguments:\n        address: address of the remote\n    \"\"\"\naddress = bluetooth.BluetoothAddress(address)\nreturn self.setRemoteAddress(address)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#prettyqt.bluetooth.bluetoothservicediscoveryagent.BluetoothServiceDiscoveryAgent.start_discovery","title":"<code>start_discovery(full: bool = False)</code>","text":"<p>Start bluetooth service discovery.</p> <p>Parameters:</p> Name Type Description Default <code>full</code> <code>bool</code> <p>full discovery instead of minimal discovery.</p> <code>False</code> Source code in <code>prettyqt\\bluetooth\\bluetoothservicediscoveryagent.py</code> <pre><code>def start_discovery(self, full: bool = False):\n\"\"\"Start bluetooth service discovery.\n    Arguments:\n        full: full discovery instead of minimal discovery.\n    \"\"\"\nif full:\nflag = bluetooth.QBluetoothServiceDiscoveryAgent.FullDiscovery\nelse:\nflag = bluetooth.QBluetoothServiceDiscoveryAgent.MinimalDiscovery\nself.start(flag)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261768672[\"bluetooth.BluetoothServiceDiscoveryAgent\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261683232[\"QtBluetooth.QBluetoothServiceDiscoveryAgent\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261768672\n  140736120080256 --&gt; 2103255067472\n  2103261683232 --&gt; 2103261768672\n  2103254677056 --&gt; 2103261683232\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceDiscoveryAgent.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/bluetooth/BluetoothServiceInfo.html","title":"BluetoothServiceInfo","text":"<p>Qt Base Class: QBluetoothServiceInfo</p> <p>Signature: <code>QBluetoothServiceInfo(self) -&gt; None QBluetoothServiceInfo(self, other: PySide6.QtBluetooth.QBluetoothServiceInfo) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothServiceInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtBluetooth.QBluetoothServiceInfo</code>, <code>MutableMapping</code></p> <p>Enables access to the attributes of a Bluetooth service.</p> <p>Also implements MutableMapping interface, can be used as a dicionary.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>class BluetoothServiceInfo(\nQtBluetooth.QBluetoothServiceInfo, MutableMapping, metaclass=datatypes.QABCMeta\n):\n\"\"\"Enables access to the attributes of a Bluetooth service.\n    Also implements MutableMapping interface, can be used as a dicionary.\n    \"\"\"\ndef __getitem__(self, value: str | int | AttributeId):\nmatch value:\ncase int():\nflag = value\ncase str():\nif value not in ATTRIBUTE_IDS:\nraise KeyError(value)\nflag = ATTRIBUTE_IDS[value].value\ncase AttributeId():\nflag = value.value\ncase _:\nraise KeyError(value)\nreturn self.attribute(flag)\ndef __delitem__(self, value: str | int | AttributeId):\nmatch value:\ncase int():\nflag = value\ncase str():\nflag = ATTRIBUTE_IDS[value].value\ncase AttributeId():\nflag = value.value\nreturn self.removeAttribute(flag)\ndef __setitem__(self, index: str | int | AttributeId, value):\n\"\"\"Set attribute.\"\"\"\nmatch index:\ncase int():\nflag = index\ncase str():\nflag = ATTRIBUTE_IDS[index].value\ncase AttributeId():\nflag = index.value\nreturn self.setAttribute(flag, value)\ndef __contains__(self, value: int) -&gt; bool:\nattr = ATTRIBUTE_IDS.inverse[value]\nreturn self.contains(attr)\ndef __iter__(self):\n\"\"\"Iter the info attributes.\"\"\"\nreturn iter(self.attributes())\ndef __len__(self):\nreturn len(self.attributes())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceInfo.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__iter__","title":"<code>__iter__()</code>","text":"<p>Iter the info attributes.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __iter__(self):\n\"\"\"Iter the info attributes.\"\"\"\nreturn iter(self.attributes())\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceInfo.html#prettyqt.bluetooth.bluetoothserviceinfo.BluetoothServiceInfo.__setitem__","title":"<code>__setitem__(index: str | int | AttributeId, value: str | int | AttributeId)</code>","text":"<p>Set attribute.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothserviceinfo.py</code> <pre><code>def __setitem__(self, index: str | int | AttributeId, value):\n\"\"\"Set attribute.\"\"\"\nmatch index:\ncase int():\nflag = index\ncase str():\nflag = ATTRIBUTE_IDS[index].value\ncase AttributeId():\nflag = index.value\nreturn self.setAttribute(flag, value)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothServiceInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261761952[\"bluetooth.BluetoothServiceInfo\"]\n  2103261731232[\"QtBluetooth.QBluetoothServiceInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103261731232 --&gt; 2103261761952\n  2103206874128 --&gt; 2103261731232\n  140736120080256 --&gt; 2103206874128\n  2103189029904 --&gt; 2103261761952\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothSocket.html","title":"BluetoothSocket","text":"<p>Qt Base Class: QBluetoothSocket</p> <p>Signature: <code>QBluetoothSocket(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QBluetoothSocket(self, socketType: PySide6.QtBluetooth.QBluetoothServiceInfo.Protocol, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothSocket.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IODeviceMixin</code>, <code>bluetooth.QBluetoothSocket</code></p> <p>Enables connection to a Bluetooth device running a bluetooth server.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothsocket.py</code> <pre><code>class BluetoothSocket(core.IODeviceMixin, bluetooth.QBluetoothSocket):\n\"\"\"Enables connection to a Bluetooth device running a bluetooth server.\"\"\"\ndef __init__(\nself,\nprotocol: bluetooth.bluetoothserviceinfo.ProtocolStr\n| bluetooth.QBluetoothServiceInfo.Protocol,\nparent: core.QObject | None = None,\n):\nprotocol = bluetooth.bluetoothserviceinfo.PROTOCOL.get_enum_value(protocol)\nsuper().__init__(protocol, parent)\ndef get_error(self) -&gt; SocketErrorStr:\nreturn SOCKET_ERROR.inverse[self.error()]\ndef get_state(self) -&gt; SocketStateStr:\nreturn SOCKET_STATE.inverse[self.state()]\ndef get_local_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.localAddress())\ndef get_peer_address(self) -&gt; bluetooth.BluetoothAddress:\nreturn bluetooth.BluetoothAddress(self.peerAddress())\ndef get_socket_type(self) -&gt; bluetooth.bluetoothserviceinfo.ProtocolStr:\nreturn bluetooth.bluetoothserviceinfo.PROTOCOL.inverse[self.socketType()]\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothSocket.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261782112[\"bluetooth.BluetoothSocket\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261677472[\"QtBluetooth.QBluetoothSocket\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255106832 --&gt; 2103261782112\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103261677472 --&gt; 2103261782112\n  2103254728896 --&gt; 2103261677472\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothSocket.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/bluetooth/BluetoothUuid.html","title":"BluetoothUuid","text":"<p>Qt Base Class: QBluetoothUuid</p> <p>Signature: <code>QBluetoothUuid(self) -&gt; None QBluetoothUuid(self, uuid: PySide6.QtBluetooth.QBluetoothUuid.CharacteristicType) -&gt; None QBluetoothUuid(self, uuid: PySide6.QtBluetooth.QBluetoothUuid.DescriptorType) -&gt; None QBluetoothUuid(self, uuid: PySide6.QtBluetooth.QBluetoothUuid.ProtocolUuid) -&gt; None QBluetoothUuid(self, uuid: PySide6.QtBluetooth.QBluetoothUuid.ServiceClassUuid) -&gt; None QBluetoothUuid(self, uuid: PySide6.QtCore.QUuid) -&gt; None QBluetoothUuid(self, uuid: str) -&gt; None QBluetoothUuid(self, uuid: int) -&gt; None QBluetoothUuid(self, uuid: int) -&gt; None QBluetoothUuid(self, uuid: Union[PySide6.QtBluetooth.QBluetoothUuid, PySide6.QtBluetooth.QBluetoothUuid.CharacteristicType, PySide6.QtBluetooth.QBluetoothUuid.DescriptorType, PySide6.QtBluetooth.QBluetoothUuid.ProtocolUuid, PySide6.QtBluetooth.QBluetoothUuid.ServiceClassUuid, PySide6.QtCore.QUuid]) -&gt; None</code></p>"},{"location":"qt_modules/bluetooth/BluetoothUuid.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.UuidMixin</code>, <code>QtBluetooth.QBluetoothUuid</code></p> <p>Generates a UUID for each Bluetooth service.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>class BluetoothUuid(core.UuidMixin, QtBluetooth.QBluetoothUuid):\n\"\"\"Generates a UUID for each Bluetooth service.\"\"\"\n@classmethod\ndef characteristic_to_string(cls, characteristic: CharacteristicTypeStr | md) -&gt; str:\n\"\"\"Return string representation for given characteristic.\"\"\"\nreturn cls.characteristicToString(\nCHARACTERISTIC_TYPES.get_enum_value(characteristic)\n)\n@classmethod\ndef descriptor_to_string(cls, descriptor: DescriptorTypeStr | dt) -&gt; str:\n\"\"\"Return string representation for given descriptor.\"\"\"\nreturn cls.descriptorToString(DESCRIPTOR_TYPE.get_enum_value(descriptor))\n@classmethod\ndef protocol_to_string(cls, protocol: ProtocolUuidstr | pu) -&gt; str:\n\"\"\"Return string representation for given protocol.\"\"\"\nreturn cls.protocolToString(PROTOCOL_UUID.get_enum_value(protocol))\n@classmethod\ndef service_class_to_string(cls, service_class: DescriptorTypeStr | su) -&gt; str:\n\"\"\"Return string representation for given service class.\"\"\"\nreturn cls.serviceClassToString(SERVICE_CLASS_UUID.get_enum_value(service_class))\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothUuid.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.characteristic_to_string","title":"<code>characteristic_to_string(characteristic: CharacteristicTypeStr | md) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given characteristic.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef characteristic_to_string(cls, characteristic: CharacteristicTypeStr | md) -&gt; str:\n\"\"\"Return string representation for given characteristic.\"\"\"\nreturn cls.characteristicToString(\nCHARACTERISTIC_TYPES.get_enum_value(characteristic)\n)\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothUuid.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.descriptor_to_string","title":"<code>descriptor_to_string(descriptor: DescriptorTypeStr | dt) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given descriptor.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef descriptor_to_string(cls, descriptor: DescriptorTypeStr | dt) -&gt; str:\n\"\"\"Return string representation for given descriptor.\"\"\"\nreturn cls.descriptorToString(DESCRIPTOR_TYPE.get_enum_value(descriptor))\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothUuid.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.protocol_to_string","title":"<code>protocol_to_string(protocol: ProtocolUuidstr | pu) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given protocol.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef protocol_to_string(cls, protocol: ProtocolUuidstr | pu) -&gt; str:\n\"\"\"Return string representation for given protocol.\"\"\"\nreturn cls.protocolToString(PROTOCOL_UUID.get_enum_value(protocol))\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothUuid.html#prettyqt.bluetooth.bluetoothuuid.BluetoothUuid.service_class_to_string","title":"<code>service_class_to_string(service_class: DescriptorTypeStr | su) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return string representation for given service class.</p> Source code in <code>prettyqt\\bluetooth\\bluetoothuuid.py</code> <pre><code>@classmethod\ndef service_class_to_string(cls, service_class: DescriptorTypeStr | su) -&gt; str:\n\"\"\"Return string representation for given service class.\"\"\"\nreturn cls.serviceClassToString(SERVICE_CLASS_UUID.get_enum_value(service_class))\n</code></pre>"},{"location":"qt_modules/bluetooth/BluetoothUuid.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261753312[\"bluetooth.BluetoothUuid\"]\n  2103255045392[\"core.UuidMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261685152[\"QtBluetooth.QBluetoothUuid\"]\n  2103257805200[\"QtCore.QUuid\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255045392 --&gt; 2103261753312\n  140736120080256 --&gt; 2103255045392\n  2103261685152 --&gt; 2103261753312\n  2103257805200 --&gt; 2103261685152\n  2103206874128 --&gt; 2103257805200\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/bluetooth/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>bluetooth</li> <li>BluetoothSocket</li> <li>BluetoothDeviceDiscoveryAgent</li> <li>BluetoothServiceDiscoveryAgent</li> <li>BluetoothDeviceInfo</li> <li>BluetoothUuid</li> <li>BluetoothServer</li> <li>BluetoothLocalDevice</li> <li>BluetoothHostInfo</li> <li>BluetoothServiceInfo</li> <li>BluetoothAddress</li> </ul>"},{"location":"qt_modules/charts/index.html","title":"charts","text":"<p>The charts module provides a set of easy-to-use chart components.</p> Name Children Inherits AbstractAxisprettyqt.charts.abstractaxis <ul><li>AbstractAxisMixin</li><li>QAbstractAxis</li></ul> AbstractBarSeriesMixinprettyqt.charts.abstractbarseries <ul><li>AbstractBarSeries</li><li>BarSeries</li><li>PercentBarSeries</li><li>HorizontalBarSeries</li><li>HorizontalPercentBarSeries</li><li>StackedBarSeries</li><li>HorizontalStackedBarSeries</li></ul> <ul><li>AbstractSeriesMixin</li></ul> LineSeriesprettyqt.charts.lineseries <ul><li>XYSeriesMixin</li><li>QLineSeries</li></ul> Legendprettyqt.charts.legend <ul><li>GraphicsWidgetMixin</li></ul> LogValueAxisprettyqt.charts.logvalueaxis <ul><li>AbstractAxisMixin</li><li>QLogValueAxis</li></ul> ChartMixinprettyqt.charts.chart <ul><li>Chart</li><li>PolarChart</li></ul> <ul><li>GraphicsWidgetMixin</li></ul> CategoryAxisprettyqt.charts.categoryaxis <ul><li>ValueAxisMixin</li><li>QCategoryAxis</li></ul> ScatterSeriesprettyqt.charts.scatterseries <ul><li>XYSeriesMixin</li><li>QScatterSeries</li></ul> AbstractAxisMixinprettyqt.charts.abstractaxis <ul><li>AbstractAxis</li><li>ValueAxisMixin</li><li>DateTimeAxis</li><li>LogValueAxis</li><li>BarCategoryAxis</li></ul> <ul><li>ObjectMixin</li></ul> XYSeriesMixinprettyqt.charts.xyseries <ul><li>XYSeries</li><li>ScatterSeries</li><li>LineSeries</li></ul> <ul><li>AbstractSeriesMixin</li></ul> BoxSetprettyqt.charts.boxset <ul><li>ObjectMixin</li><li>QBoxSet</li></ul> PieSliceprettyqt.charts.pieslice <ul><li>ObjectMixin</li><li>QPieSlice</li></ul> PolarChartprettyqt.charts.polarchart <ul><li>ChartMixin</li><li>QPolarChart</li></ul> StackedBarSeriesprettyqt.charts.stackedbarseries <ul><li>AbstractBarSeriesMixin</li><li>QStackedBarSeries</li></ul> HorizontalBarSeriesprettyqt.charts.horizontalbarseries <ul><li>AbstractBarSeriesMixin</li><li>QHorizontalBarSeries</li></ul> AbstractSeriesprettyqt.charts.abstractseries <ul><li>AbstractSeriesMixin</li><li>QAbstractSeries</li></ul> AbstractBarSeriesprettyqt.charts.abstractbarseries <ul><li>AbstractBarSeriesMixin</li><li>QAbstractBarSeries</li></ul> AbstractSeriesMixinprettyqt.charts.abstractseries <ul><li>AbstractSeries</li><li>AbstractBarSeriesMixin</li><li>XYSeriesMixin</li></ul> <ul><li>ObjectMixin</li></ul> BarCategoryAxisprettyqt.charts.barcategoryaxis <ul><li>AbstractAxisMixin</li><li>QBarCategoryAxis</li></ul> DateTimeAxisprettyqt.charts.datetimeaxis <ul><li>AbstractAxisMixin</li><li>QDateTimeAxis</li></ul> ValueAxisprettyqt.charts.valueaxis <ul><li>ValueAxisMixin</li><li>QValueAxis</li></ul> XYSeriesprettyqt.charts.xyseries <ul><li>XYSeriesMixin</li><li>QXYSeries</li></ul> CandlestickSetprettyqt.charts.candlestickset <ul><li>ObjectMixin</li><li>QCandlestickSet</li></ul> ValueAxisMixinprettyqt.charts.valueaxis <ul><li>ValueAxis</li><li>CategoryAxis</li></ul> <ul><li>AbstractAxisMixin</li></ul> HorizontalStackedBarSeriesprettyqt.charts.horizontalstackedbarseries <ul><li>AbstractBarSeriesMixin</li><li>QHorizontalStackedBarSeries</li></ul> BarSetprettyqt.charts.barset <ul><li>ObjectMixin</li><li>QBarSet</li></ul> HorizontalPercentBarSeriesprettyqt.charts.horizontalpercentbarseries <ul><li>AbstractBarSeriesMixin</li><li>QHorizontalPercentBarSeries</li></ul> PercentBarSeriesprettyqt.charts.percentbarseries <ul><li>AbstractBarSeriesMixin</li><li>QPercentBarSeries</li></ul> Chartprettyqt.charts.chart <ul><li>ChartMixin</li><li>QChart</li></ul> BarSeriesprettyqt.charts.barseries <ul><li>AbstractBarSeriesMixin</li><li>QBarSeries</li></ul> ChartViewprettyqt.charts.chartview <ul><li>GraphicsViewMixin</li><li>QChartView</li></ul>"},{"location":"qt_modules/charts/AbstractAxis.html","title":"AbstractAxis","text":"<p>Qt Base Class: QAbstractAxis</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/charts/AbstractAxis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractAxisMixin</code>, <code>QtCharts.QAbstractAxis</code></p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>class AbstractAxis(AbstractAxisMixin, QtCharts.QAbstractAxis):\npass\n</code></pre>"},{"location":"qt_modules/charts/AbstractAxis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261829152[\"charts.AbstractAxis\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261812832[\"QtCharts.QAbstractAxis\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261854112 --&gt; 2103261829152\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472\n  2103261812832 --&gt; 2103261829152\n  2103254677056 --&gt; 2103261812832\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/AbstractAxis.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>visible</code> bool <code>lineVisible</code> bool <code>linePen</code> QPen <code>color</code> QColor <code>labelsVisible</code> bool <code>labelsBrush</code> QBrush <code>labelsAngle</code> int <code>labelsFont</code> QFont <code>labelsColor</code> QColor <code>labelsTruncated</code> bool <code>truncateLabels</code> bool <code>gridVisible</code> bool <code>gridLinePen</code> QPen <code>minorGridVisible</code> bool <code>minorGridLinePen</code> QPen <code>gridLineColor</code> QColor <code>minorGridLineColor</code> QColor <code>shadesVisible</code> bool <code>shadesColor</code> QColor <code>shadesBorderColor</code> QColor <code>shadesPen</code> QPen <code>shadesBrush</code> QBrush <code>titleText</code> QString <code>titleBrush</code> QBrush <code>titleVisible</code> bool <code>titleFont</code> QFont <code>orientation</code> Qt::Orientation <code>alignment</code> QFlags <code>reverse</code> bool"},{"location":"qt_modules/charts/AbstractAxisMixin.html","title":"AbstractAxisMixin","text":""},{"location":"qt_modules/charts/AbstractAxisMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>class AbstractAxisMixin(core.ObjectMixin):\ndef get_alignment(self) -&gt; constants.SideStr | None:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nalignment = self.alignment()\nif alignment == constants.ALIGN_NONE:\nreturn None\nreturn constants.SIDES.inverse[alignment]\ndef get_orientation(self) -&gt; constants.OrientationStr | None:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\norientation = self.orientation()\nif orientation == constants.ORIENTATION_NONE:\nreturn None\nreturn constants.ORIENTATION.inverse[orientation]\ndef get_grid_line_color(self) -&gt; gui.Color:\nreturn gui.Color(self.gridLineColor())\ndef get_grid_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.gridLinePen())\ndef get_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.linePen())\ndef get_line_pen_color(self) -&gt; gui.Color:\nreturn gui.Color(self.linePenColor())\ndef get_labels_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelsColor())\ndef get_labels_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.labelsBrush())\ndef get_labels_font(self) -&gt; gui.Font:\nreturn gui.Font(self.labelsFont())\ndef get_title_font(self) -&gt; gui.Font:\nreturn gui.Font(self.titleFont())\ndef get_title_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.titleBrush())\ndef get_shades_color(self) -&gt; gui.Color:\nreturn gui.Color(self.shadesColor())\ndef get_shades_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.shadesBrush())\ndef get_shades_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.shadesPen())\ndef get_shades_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.shadesBorderColor())\ndef get_minor_grid_line_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.minorGridLinePen())\ndef get_minor_grid_line_color(self) -&gt; gui.Color:\nreturn gui.Color(self.minorGridLineColor())\n</code></pre> Name Children Inherits AbstractAxisprettyqt.charts.abstractaxis <ul><li>AbstractAxisMixin</li><li>QAbstractAxis</li></ul> ValueAxisMixinprettyqt.charts.valueaxis <ul><li>ValueAxis</li><li>CategoryAxis</li></ul> <ul><li>AbstractAxisMixin</li></ul> DateTimeAxisprettyqt.charts.datetimeaxis <ul><li>AbstractAxisMixin</li><li>QDateTimeAxis</li></ul> LogValueAxisprettyqt.charts.logvalueaxis <ul><li>AbstractAxisMixin</li><li>QLogValueAxis</li></ul> BarCategoryAxisprettyqt.charts.barcategoryaxis <ul><li>AbstractAxisMixin</li><li>QBarCategoryAxis</li></ul>"},{"location":"qt_modules/charts/AbstractAxisMixin.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_alignment","title":"<code>get_alignment() -&gt; constants.SideStr | None</code>","text":"<p>Return current alignment.</p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_alignment(self) -&gt; constants.SideStr | None:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nalignment = self.alignment()\nif alignment == constants.ALIGN_NONE:\nreturn None\nreturn constants.SIDES.inverse[alignment]\n</code></pre>"},{"location":"qt_modules/charts/AbstractAxisMixin.html#prettyqt.charts.abstractaxis.AbstractAxisMixin.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr | None</code>","text":"<p>Return current orientation.</p> Source code in <code>prettyqt\\charts\\abstractaxis.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr | None:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\norientation = self.orientation()\nif orientation == constants.ORIENTATION_NONE:\nreturn None\nreturn constants.ORIENTATION.inverse[orientation]\n</code></pre>"},{"location":"qt_modules/charts/AbstractAxisMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeries.html","title":"AbstractBarSeries","text":"<p>Qt Base Class: QAbstractBarSeries</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/charts/AbstractBarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractBarSeriesMixin</code>, <code>charts.QAbstractBarSeries</code></p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>class AbstractBarSeries(AbstractBarSeriesMixin, charts.QAbstractBarSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261860832[\"charts.AbstractBarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261860832\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261817632 --&gt; 2103261860832\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html","title":"AbstractBarSeriesMixin","text":""},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractSeriesMixin</code></p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>class AbstractBarSeriesMixin(charts.AbstractSeriesMixin):\ndef __delitem__(self, item: int | charts.QBarSet):\n\"\"\"Implements `del series[0]`.\"\"\"\nif isinstance(item, int):\nbarsets = self.barSets()\nitem = barsets[item]\nself.remove(item)\ndef __getitem__(self, index: int) -&gt; charts.QBarSet:\n\"\"\"Implements `barset = series[1]`.\"\"\"\nbarsets = self.barSets()\nreturn barsets[index]\ndef set_labels_position(\nself, position: LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition\n):\n\"\"\"Set the labels position.\n        Args:\n            position: Labels position\n        \"\"\"\nself.setLabelsPosition(LABELS_POSITIONS.get_enum_value(position))\ndef get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n        Returns:\n            Labels position\n        \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre> Name Children Inherits AbstractBarSeriesprettyqt.charts.abstractbarseries <ul><li>AbstractBarSeriesMixin</li><li>QAbstractBarSeries</li></ul> BarSeriesprettyqt.charts.barseries <ul><li>AbstractBarSeriesMixin</li><li>QBarSeries</li></ul> PercentBarSeriesprettyqt.charts.percentbarseries <ul><li>AbstractBarSeriesMixin</li><li>QPercentBarSeries</li></ul> HorizontalBarSeriesprettyqt.charts.horizontalbarseries <ul><li>AbstractBarSeriesMixin</li><li>QHorizontalBarSeries</li></ul> HorizontalPercentBarSeriesprettyqt.charts.horizontalpercentbarseries <ul><li>AbstractBarSeriesMixin</li><li>QHorizontalPercentBarSeries</li></ul> StackedBarSeriesprettyqt.charts.stackedbarseries <ul><li>AbstractBarSeriesMixin</li><li>QStackedBarSeries</li></ul> HorizontalStackedBarSeriesprettyqt.charts.horizontalstackedbarseries <ul><li>AbstractBarSeriesMixin</li><li>QHorizontalStackedBarSeries</li></ul>"},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.__delitem__","title":"<code>__delitem__(item: int | charts.QBarSet)</code>","text":"<p>Implements <code>del series[0]</code>.</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def __delitem__(self, item: int | charts.QBarSet):\n\"\"\"Implements `del series[0]`.\"\"\"\nif isinstance(item, int):\nbarsets = self.barSets()\nitem = barsets[item]\nself.remove(item)\n</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.__getitem__","title":"<code>__getitem__(index: int) -&gt; charts.QBarSet</code>","text":"<p>Implements <code>barset = series[1]</code>.</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def __getitem__(self, index: int) -&gt; charts.QBarSet:\n\"\"\"Implements `barset = series[1]`.\"\"\"\nbarsets = self.barSets()\nreturn barsets[index]\n</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.get_labels_position","title":"<code>get_labels_position() -&gt; LabelsPositionStr</code>","text":"<p>Return current labels position.</p> Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n    Returns:\n        Labels position\n    \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html#prettyqt.charts.abstractbarseries.AbstractBarSeriesMixin.set_labels_position","title":"<code>set_labels_position(position: LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition)</code>","text":"<p>Set the labels position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition</code> <p>Labels position</p> required Source code in <code>prettyqt\\charts\\abstractbarseries.py</code> <pre><code>def set_labels_position(\nself, position: LabelsPositionStr | charts.QAbstractBarSeries.LabelsPosition\n):\n\"\"\"Set the labels position.\n    Args:\n        position: Labels position\n    \"\"\"\nself.setLabelsPosition(LABELS_POSITIONS.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/charts/AbstractBarSeriesMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/charts/AbstractSeries.html","title":"AbstractSeries","text":"<p>Qt Base Class: QAbstractSeries</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/charts/AbstractSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractSeriesMixin</code>, <code>QtCharts.QAbstractSeries</code></p> Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>class AbstractSeries(AbstractSeriesMixin, QtCharts.QAbstractSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/AbstractSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261862752[\"charts.AbstractSeries\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261858912 --&gt; 2103261862752\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261823392 --&gt; 2103261862752\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/AbstractSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool"},{"location":"qt_modules/charts/AbstractSeriesMixin.html","title":"AbstractSeriesMixin","text":""},{"location":"qt_modules/charts/AbstractSeriesMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\charts\\abstractseries.py</code> <pre><code>class AbstractSeriesMixin(core.ObjectMixin):\npass\n</code></pre> Name Children Inherits AbstractSeriesprettyqt.charts.abstractseries <ul><li>AbstractSeriesMixin</li><li>QAbstractSeries</li></ul> AbstractBarSeriesMixinprettyqt.charts.abstractbarseries <ul><li>AbstractBarSeries</li><li>BarSeries</li><li>PercentBarSeries</li><li>HorizontalBarSeries</li><li>HorizontalPercentBarSeries</li><li>StackedBarSeries</li><li>HorizontalStackedBarSeries</li></ul> <ul><li>AbstractSeriesMixin</li></ul> XYSeriesMixinprettyqt.charts.xyseries <ul><li>XYSeries</li><li>ScatterSeries</li><li>LineSeries</li></ul> <ul><li>AbstractSeriesMixin</li></ul>"},{"location":"qt_modules/charts/AbstractSeriesMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html","title":"BarCategoryAxis","text":"<p>Qt Base Class: QBarCategoryAxis</p> <p>Signature: <code>QBarCategoryAxis(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/BarCategoryAxis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractAxisMixin</code>, <code>charts.QBarCategoryAxis</code></p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>class BarCategoryAxis(charts.AbstractAxisMixin, charts.QBarCategoryAxis):\ndef __delitem__(self, index: str):\n\"\"\"Remove category.\"\"\"\nself.remove(index)\ndef __getitem__(self, index: int) -&gt; str:\n\"\"\"Return category for given index.\"\"\"\nreturn self.categories()[index]\ndef __setitem__(self, index: str, value: str):\n\"\"\"Set category at given index to value.\"\"\"\nself.replace(index, value)\ndef __add__(self, other: str) -&gt; BarCategoryAxis:\n\"\"\"Append another category to axis.\"\"\"\nself.append(other)\nreturn self\n</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__add__","title":"<code>__add__(other: str) -&gt; BarCategoryAxis</code>","text":"<p>Append another category to axis.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __add__(self, other: str) -&gt; BarCategoryAxis:\n\"\"\"Append another category to axis.\"\"\"\nself.append(other)\nreturn self\n</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"<p>Remove category.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __delitem__(self, index: str):\n\"\"\"Remove category.\"\"\"\nself.remove(index)\n</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__getitem__","title":"<code>__getitem__(index: int) -&gt; str</code>","text":"<p>Return category for given index.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __getitem__(self, index: int) -&gt; str:\n\"\"\"Return category for given index.\"\"\"\nreturn self.categories()[index]\n</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html#prettyqt.charts.barcategoryaxis.BarCategoryAxis.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"<p>Set category at given index to value.</p> Source code in <code>prettyqt\\charts\\barcategoryaxis.py</code> <pre><code>def __setitem__(self, index: str, value: str):\n\"\"\"Set category at given index to value.\"\"\"\nself.replace(index, value)\n</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261856992[\"charts.BarCategoryAxis\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261820512[\"QtCharts.QBarCategoryAxis\"]\n  2103261812832[\"QtCharts.QAbstractAxis\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261854112 --&gt; 2103261856992\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472\n  2103261820512 --&gt; 2103261856992\n  2103261812832 --&gt; 2103261820512\n  2103254677056 --&gt; 2103261812832\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/BarCategoryAxis.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>visible</code> bool <code>lineVisible</code> bool <code>linePen</code> QPen <code>color</code> QColor <code>labelsVisible</code> bool <code>labelsBrush</code> QBrush <code>labelsAngle</code> int <code>labelsFont</code> QFont <code>labelsColor</code> QColor <code>labelsTruncated</code> bool <code>truncateLabels</code> bool <code>gridVisible</code> bool <code>gridLinePen</code> QPen <code>minorGridVisible</code> bool <code>minorGridLinePen</code> QPen <code>gridLineColor</code> QColor <code>minorGridLineColor</code> QColor <code>shadesVisible</code> bool <code>shadesColor</code> QColor <code>shadesBorderColor</code> QColor <code>shadesPen</code> QPen <code>shadesBrush</code> QBrush <code>titleText</code> QString <code>titleBrush</code> QBrush <code>titleVisible</code> bool <code>titleFont</code> QFont <code>orientation</code> Qt::Orientation <code>alignment</code> QFlags <code>reverse</code> bool <code>categories</code> QStringList <code>min</code> QString <code>max</code> QString <code>count</code> int"},{"location":"qt_modules/charts/BarSeries.html","title":"BarSeries","text":"<p>Qt Base Class: QBarSeries</p> <p>Signature: <code>QBarSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/BarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>charts.QBarSeries</code></p> Source code in <code>prettyqt\\charts\\barseries.py</code> <pre><code>class BarSeries(charts.AbstractBarSeriesMixin, charts.QBarSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/BarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261861792[\"charts.BarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261816672[\"QtCharts.QBarSeries\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261861792\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261816672 --&gt; 2103261861792\n  2103261817632 --&gt; 2103261816672\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/BarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/BarSet.html","title":"BarSet","text":"<p>Qt Base Class: QBarSet</p> <p>Signature: <code>QBarSet(self, label: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/BarSet.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QBarSet</code></p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>class BarSet(core.ObjectMixin, QtCharts.QBarSet):\ndef __delitem__(self, index: int):\n\"\"\"Delete bar at given index.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.remove(index)\ndef __getitem__(self, index: int) -&gt; float:\n\"\"\"Get bar from given index.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nreturn self.at(index)\ndef __setitem__(self, index: int, value: float):\n\"\"\"Set bar at given index to value.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.replace(index, value)\ndef __repr__(self):\nreturn get_repr(self, self.label())\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"qt_modules/charts/BarSet.html#prettyqt.charts.barset.BarSet.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"<p>Delete bar at given index.</p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __delitem__(self, index: int):\n\"\"\"Delete bar at given index.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.remove(index)\n</code></pre>"},{"location":"qt_modules/charts/BarSet.html#prettyqt.charts.barset.BarSet.__getitem__","title":"<code>__getitem__(index: int) -&gt; float</code>","text":"<p>Get bar from given index.</p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __getitem__(self, index: int) -&gt; float:\n\"\"\"Get bar from given index.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nreturn self.at(index)\n</code></pre>"},{"location":"qt_modules/charts/BarSet.html#prettyqt.charts.barset.BarSet.__setitem__","title":"<code>__setitem__(index: int, value: float)</code>","text":"<p>Set bar at given index to value.</p> Source code in <code>prettyqt\\charts\\barset.py</code> <pre><code>def __setitem__(self, index: int, value: float):\n\"\"\"Set bar at given index to value.\"\"\"\nif not (0 &lt;= index &lt; self.count()):\nraise KeyError(index)\nself.replace(index, value)\n</code></pre>"},{"location":"qt_modules/charts/BarSet.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261851232[\"charts.BarSet\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261804192[\"QtCharts.QBarSet\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261851232\n  140736120080256 --&gt; 2103255067472\n  2103261804192 --&gt; 2103261851232\n  2103254677056 --&gt; 2103261804192\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/BarSet.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>label</code> QString <code>pen</code> QPen <code>brush</code> QBrush <code>labelBrush</code> QBrush <code>labelFont</code> QFont <code>color</code> QColor <code>borderColor</code> QColor <code>labelColor</code> QColor"},{"location":"qt_modules/charts/BoxSet.html","title":"BoxSet","text":"<p>Qt Base Class: QBoxSet</p> <p>Signature: <code>QBoxSet(self, label: str = '', parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QBoxSet(self, le: float, lq: float, m: float, uq: float, ue: float, label: str = '', parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/BoxSet.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QBoxSet</code></p> Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>class BoxSet(core.ObjectMixin, QtCharts.QBoxSet):\ndef __repr__(self):\nreturn get_repr(\nself,\nself[\"lower_extreme\"],\nself[\"lower_quartile\"],\nself[\"median\"],\nself[\"upper_quartile\"],\nself[\"upper_extreme\"],\nself.label(),\n)\ndef __getitem__(\nself, index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions\n) -&gt; float:\n\"\"\"Returns the value of the box-and-whiskers item specified by index.\"\"\"\nif type(index) is not int:\nindex = VALUE_POSITION.get_enum_value(index).value\nif not (0 &lt;= index &lt;= 4):\nraise KeyError(index)\nreturn self.at(index)\ndef __setitem__(\nself, index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions, value: int\n):\n\"\"\"Sets the value specified by value in the position specified by index.\"\"\"\nif type(index) is not int:\nindex = VALUE_POSITION.get_enum_value(index).value\nif not (0 &lt;= index &lt;= 4):\nraise KeyError(index)\nself.setValue(index, value)\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"qt_modules/charts/BoxSet.html#prettyqt.charts.boxset.BoxSet.__getitem__","title":"<code>__getitem__(index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions) -&gt; float</code>","text":"<p>Returns the value of the box-and-whiskers item specified by index.</p> Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __getitem__(\nself, index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions\n) -&gt; float:\n\"\"\"Returns the value of the box-and-whiskers item specified by index.\"\"\"\nif type(index) is not int:\nindex = VALUE_POSITION.get_enum_value(index).value\nif not (0 &lt;= index &lt;= 4):\nraise KeyError(index)\nreturn self.at(index)\n</code></pre>"},{"location":"qt_modules/charts/BoxSet.html#prettyqt.charts.boxset.BoxSet.__setitem__","title":"<code>__setitem__(index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions, value: int)</code>","text":"<p>Sets the value specified by value in the position specified by index.</p> Source code in <code>prettyqt\\charts\\boxset.py</code> <pre><code>def __setitem__(\nself, index: int | ValuePositionStr | QtCharts.QBoxSet.ValuePositions, value: int\n):\n\"\"\"Sets the value specified by value in the position specified by index.\"\"\"\nif type(index) is not int:\nindex = VALUE_POSITION.get_enum_value(index).value\nif not (0 &lt;= index &lt;= 4):\nraise KeyError(index)\nself.setValue(index, value)\n</code></pre>"},{"location":"qt_modules/charts/BoxSet.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261852192[\"charts.BoxSet\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261800352[\"QtCharts.QBoxSet\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261852192\n  140736120080256 --&gt; 2103255067472\n  2103261800352 --&gt; 2103261852192\n  2103254677056 --&gt; 2103261800352\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/BoxSet.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>pen</code> QPen <code>brush</code> QBrush"},{"location":"qt_modules/charts/CandlestickSet.html","title":"CandlestickSet","text":"<p>Qt Base Class: QCandlestickSet</p> <p>Signature: <code>QCandlestickSet(self, open: float, high: float, low: float, close: float, timestamp: float = 0.0, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCandlestickSet(self, timestamp: float = 0.0, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/CandlestickSet.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QCandlestickSet</code></p> Source code in <code>prettyqt\\charts\\candlestickset.py</code> <pre><code>class CandlestickSet(core.ObjectMixin, QtCharts.QCandlestickSet):\ndef __repr__(self):\nreturn get_repr(\nself, self.open(), self.high(), self.low(), self.close(), self.timestamp()\n)\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre>"},{"location":"qt_modules/charts/CandlestickSet.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261853152[\"charts.CandlestickSet\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261792672[\"QtCharts.QCandlestickSet\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261853152\n  140736120080256 --&gt; 2103255067472\n  2103261792672 --&gt; 2103261853152\n  2103254677056 --&gt; 2103261792672\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/CandlestickSet.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>timestamp</code> double <code>open</code> double <code>high</code> double <code>low</code> double <code>close</code> double <code>brush</code> QBrush <code>pen</code> QPen"},{"location":"qt_modules/charts/CategoryAxis.html","title":"CategoryAxis","text":"<p>Qt Base Class: QCategoryAxis</p> <p>Signature: <code>QCategoryAxis(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/CategoryAxis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.ValueAxisMixin</code>, <code>charts.QCategoryAxis</code></p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>class CategoryAxis(charts.ValueAxisMixin, charts.QCategoryAxis):\ndef __delitem__(self, index: str):\n\"\"\"Remove category label.\"\"\"\nself.remove(index)\ndef __getitem__(self, label: int | slice) -&gt; str | list[str]:\n\"\"\"Get category label from given index.\"\"\"\nreturn self.categoriesLabels()[label]\ndef __setitem__(self, index: str, value: str):\n\"\"\"Set label at given index to value.\"\"\"\nself.replaceLabel(index, value)\ndef __iter__(self) -&gt; Iterator[str]:\n\"\"\"Iterate through all category labels.\"\"\"\nreturn iter(self.categoriesLabels())\ndef __add__(self, other: tuple[str, int]) -&gt; CategoryAxis:\n\"\"\"Append another category.\"\"\"\nself.append(*other)\nreturn self\ndef __len__(self):\n\"\"\"Return category label count from axis.\"\"\"\nreturn self.count()\ndef set_labels_position(\nself, position: LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition\n):\n\"\"\"Set the labels position.\n        Args:\n            position: labels position\n        \"\"\"\nself.setLabelsPosition(LABELS_POSITIONS.get_enum_value(position))\ndef get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n        Returns:\n            labels position\n        \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.__add__","title":"<code>__add__(other: tuple[str, int]) -&gt; CategoryAxis</code>","text":"<p>Append another category.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __add__(self, other: tuple[str, int]) -&gt; CategoryAxis:\n\"\"\"Append another category.\"\"\"\nself.append(*other)\nreturn self\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.__delitem__","title":"<code>__delitem__(index: str)</code>","text":"<p>Remove category label.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __delitem__(self, index: str):\n\"\"\"Remove category label.\"\"\"\nself.remove(index)\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.__getitem__","title":"<code>__getitem__(label: int | slice) -&gt; str | list[str]</code>","text":"<p>Get category label from given index.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __getitem__(self, label: int | slice) -&gt; str | list[str]:\n\"\"\"Get category label from given index.\"\"\"\nreturn self.categoriesLabels()[label]\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.__iter__","title":"<code>__iter__() -&gt; Iterator[str]</code>","text":"<p>Iterate through all category labels.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __iter__(self) -&gt; Iterator[str]:\n\"\"\"Iterate through all category labels.\"\"\"\nreturn iter(self.categoriesLabels())\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.__len__","title":"<code>__len__()</code>","text":"<p>Return category label count from axis.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __len__(self):\n\"\"\"Return category label count from axis.\"\"\"\nreturn self.count()\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.__setitem__","title":"<code>__setitem__(index: str, value: str)</code>","text":"<p>Set label at given index to value.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def __setitem__(self, index: str, value: str):\n\"\"\"Set label at given index to value.\"\"\"\nself.replaceLabel(index, value)\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.get_labels_position","title":"<code>get_labels_position() -&gt; LabelsPositionStr</code>","text":"<p>Return current labels position.</p> Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def get_labels_position(self) -&gt; LabelsPositionStr:\n\"\"\"Return current labels position.\n    Returns:\n        labels position\n    \"\"\"\nreturn LABELS_POSITIONS.inverse[self.labelsPosition()]\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#prettyqt.charts.categoryaxis.CategoryAxis.set_labels_position","title":"<code>set_labels_position(position: LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition)</code>","text":"<p>Set the labels position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition</code> <p>labels position</p> required Source code in <code>prettyqt\\charts\\categoryaxis.py</code> <pre><code>def set_labels_position(\nself, position: LabelsPositionStr | charts.QCategoryAxis.AxisLabelsPosition\n):\n\"\"\"Set the labels position.\n    Args:\n        position: labels position\n    \"\"\"\nself.setLabelsPosition(LABELS_POSITIONS.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261856032[\"charts.CategoryAxis\"]\n  2103261822432[\"charts.ValueAxisMixin\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261846432[\"QtCharts.QCategoryAxis\"]\n  2103261841632[\"QtCharts.QValueAxis\"]\n  2103261812832[\"QtCharts.QAbstractAxis\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261822432 --&gt; 2103261856032\n  2103261854112 --&gt; 2103261822432\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472\n  2103261846432 --&gt; 2103261856032\n  2103261841632 --&gt; 2103261846432\n  2103261812832 --&gt; 2103261841632\n  2103254677056 --&gt; 2103261812832\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/CategoryAxis.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>visible</code> bool <code>lineVisible</code> bool <code>linePen</code> QPen <code>color</code> QColor <code>labelsVisible</code> bool <code>labelsBrush</code> QBrush <code>labelsAngle</code> int <code>labelsFont</code> QFont <code>labelsColor</code> QColor <code>labelsTruncated</code> bool <code>truncateLabels</code> bool <code>gridVisible</code> bool <code>gridLinePen</code> QPen <code>minorGridVisible</code> bool <code>minorGridLinePen</code> QPen <code>gridLineColor</code> QColor <code>minorGridLineColor</code> QColor <code>shadesVisible</code> bool <code>shadesColor</code> QColor <code>shadesBorderColor</code> QColor <code>shadesPen</code> QPen <code>shadesBrush</code> QBrush <code>titleText</code> QString <code>titleBrush</code> QBrush <code>titleVisible</code> bool <code>titleFont</code> QFont <code>orientation</code> Qt::Orientation <code>alignment</code> QFlags <code>reverse</code> bool <code>tickCount</code> int <code>min</code> double <code>max</code> double <code>labelFormat</code> QString <code>minorTickCount</code> int <code>tickAnchor</code> double <code>tickInterval</code> double <code>tickType</code> QValueAxis::TickType <code>startValue</code> double <code>count</code> int <code>categoriesLabels</code> QStringList <code>labelsPosition</code> QCategoryAxis::AxisLabelsPosition"},{"location":"qt_modules/charts/Chart.html","title":"Chart","text":"<p>Qt Base Class: QChart</p> <p>Signature: <code>QChart(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None, wFlags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QChart(self, type: PySide6.QtCharts.QChart.ChartType, parent: PySide6.QtWidgets.QGraphicsItem, wFlags: PySide6.QtCore.Qt.WindowType) -&gt; None</code></p>"},{"location":"qt_modules/charts/Chart.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ChartMixin</code>, <code>charts.QChart</code></p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>class Chart(ChartMixin, charts.QChart):\npass\n</code></pre>"},{"location":"qt_modules/charts/Chart.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261878112[\"charts.Chart\"]\n  2103261872352[\"charts.ChartMixin\"]\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103261786912[\"QtCharts.QChart\"]\n  2103260153616[\"QtWidgets.QGraphicsWidget\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103261872352 --&gt; 2103261878112\n  2103261170560 --&gt; 2103261872352\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440\n  2103261786912 --&gt; 2103261878112\n  2103260153616 --&gt; 2103261786912\n  2103260155536 --&gt; 2103260153616\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056\n  2103259646960 --&gt; 2103260153616\n  2103206874128 --&gt; 2103259646960</code></pre>"},{"location":"qt_modules/charts/Chart.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double <code>palette</code> QPalette <code>font</code> QFont <code>layoutDirection</code> Qt::LayoutDirection <code>size</code> QSizeF <code>minimumSize</code> QSizeF <code>preferredSize</code> QSizeF <code>maximumSize</code> QSizeF <code>sizePolicy</code> QSizePolicy <code>focusPolicy</code> Qt::FocusPolicy <code>windowFlags</code> QFlags <code>windowTitle</code> QString <code>geometry</code> QRectF <code>autoFillBackground</code> bool <code>layout</code> QGraphicsLayout <code>theme</code> QChart::ChartTheme <code>title</code> QString <code>backgroundVisible</code> bool <code>dropShadowEnabled</code> bool <code>backgroundRoundness</code> double <code>animationOptions</code> QFlags <code>animationDuration</code> int <code>animationEasingCurve</code> QEasingCurve <code>margins</code> QMargins <code>chartType</code> QChart::ChartType <code>plotAreaBackgroundVisible</code> bool <code>localizeNumbers</code> bool <code>locale</code> QLocale <code>plotArea</code> QRectF"},{"location":"qt_modules/charts/ChartMixin.html","title":"ChartMixin","text":""},{"location":"qt_modules/charts/ChartMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsWidgetMixin</code></p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>class ChartMixin(widgets.GraphicsWidgetMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.max_x = 0\nself.max_y = 0\nself.min_x = 0\nself.min_y = 0\nself.adjust_style_to_palette()\ngui.GuiApplication.styleHints().colorSchemeChanged.connect(\nself.adjust_style_to_palette\n)\ndef adjust_style_to_palette(self):\n\"\"\"Adjusts the chart theme to current Palette.\n        Checks if palette is dark-ish and applies an appropriate theme to the chart.\n        \"\"\"\npal = gui.GuiApplication.get_palette()\nstyle = \"Dark\" if pal.is_dark() else \"Light\"\nself.set_theme(style)\ndef get_axes(\nself,\norientation: constants.OrientationStr | constants.Orientation | None = None,\nseries: charts.QAbstractBarSeries | None = None,\n) -&gt; list[charts.QAbstractAxis]:\n\"\"\"Get axes of chart.\n        Arguments:\n            orientation: Orientation of the axes that should get returned.\n            series: Series to return axes for. Returns all axes if None.\n        \"\"\"\nif orientation is None:\norientation = constants.HORIZONTAL | constants.VERTICAL\nreturn self.axes(constants.ORIENTATION.get_enum_value(orientation), series)\ndef update_boundaries(self):\n\"\"\"Set new min/max values based on axis.\"\"\"\nif axis_x := self.get_axes(\"horizontal\"):\nself.max_x = axis_x[0].max()\nself.min_x = axis_x[0].min()\nif axis_y := self.get_axes(\"vertical\"):\nself.max_y = axis_y[0].max()\nself.min_y = axis_y[0].min()\ndef hide_legend(self):\nself.legend().hide()\ndef show_legend(self):\nself.legend().show()\ndef get_legend(self) -&gt; charts.Legend:\nreturn charts.Legend(self.legend())\ndef set_legend_alignment(\nself, alignment: constants.SideStr | constants.AlignmentFlag\n):\n\"\"\"Set alignment of the chart legend.\"\"\"\nself.legend().setAlignment(constants.SIDES.get_enum_value(alignment))\ndef set_theme(self, theme_name: ThemeStr | charts.QChart.ChartTheme):\nself.setTheme(THEMES.get_enum_value(theme_name))\ndef set_margins(self, margins: datatypes.MarginsType):\nmargins = datatypes.to_margins(margins)\nself.setMargins(margins)\ndef set_animation_options(\nself, option: AnimationOptionStr | charts.QChart.AnimationOption\n):\nself.setAnimationOptions(ANIMATION_OPTIONS.get_enum_value(option))\ndef apply_nice_numbers(self):\n\"\"\"Adjust both axis to display nice round numbers.\"\"\"\nfor axis in self.get_axes():\naxis.applyNiceNumbers()\ndef zoom_by_factor(self, factor: float):\n\"\"\"Zoom in/out by factor (1.0 = no change).\n        Make sure that we dont zoom out too far\n        \"\"\"\nself.zoom(factor)\nif axis_x := self.get_axes(\"horizontal\"):\nif axis_x[0].min() &lt; self.min_x:\naxis_x[0].setMin(self.min_x)\nif axis_x[0].max() &gt; self.max_x:\naxis_x[0].setMax(self.max_x)\nif axis_y := self.get_axes(\"vertical\"):\nif axis_y[0].max() &gt; self.max_y:\naxis_y[0].setMax(self.max_y)\n# always bottom-align when zooming for now. should perhaps become optional.\n# if axis_y[0].min() &lt; self.min_y:\naxis_y[0].setMin(max(0, self.min_y))\ndef get_chart_type(self) -&gt; ChartTypeStr:\nreturn CHART_TYPES.inverse[self.chartType()]\ndef get_margins(self) -&gt; core.Margins:\nreturn core.Margins(self.margins())\ndef get_plot_area(self) -&gt; core.RectF:\nreturn core.RectF(self.plotArea())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_theme(self) -&gt; ThemeStr:\nreturn THEMES.inverse[self.theme()]\ndef get_animation_options(self) -&gt; list[AnimationOptionStr]:\nreturn ANIMATION_OPTIONS.get_list(self.animationOptions())\ndef get_animation_easing_curve(self) -&gt; core.EasingCurve:\nreturn core.EasingCurve(self.animationEasingCurve())\n</code></pre> Name Children Inherits Chartprettyqt.charts.chart <ul><li>ChartMixin</li><li>QChart</li></ul> PolarChartprettyqt.charts.polarchart <ul><li>ChartMixin</li><li>QPolarChart</li></ul>"},{"location":"qt_modules/charts/ChartMixin.html#prettyqt.charts.chart.ChartMixin.adjust_style_to_palette","title":"<code>adjust_style_to_palette()</code>","text":"<p>Adjusts the chart theme to current Palette.</p> <p>Checks if palette is dark-ish and applies an appropriate theme to the chart.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def adjust_style_to_palette(self):\n\"\"\"Adjusts the chart theme to current Palette.\n    Checks if palette is dark-ish and applies an appropriate theme to the chart.\n    \"\"\"\npal = gui.GuiApplication.get_palette()\nstyle = \"Dark\" if pal.is_dark() else \"Light\"\nself.set_theme(style)\n</code></pre>"},{"location":"qt_modules/charts/ChartMixin.html#prettyqt.charts.chart.ChartMixin.apply_nice_numbers","title":"<code>apply_nice_numbers()</code>","text":"<p>Adjust both axis to display nice round numbers.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def apply_nice_numbers(self):\n\"\"\"Adjust both axis to display nice round numbers.\"\"\"\nfor axis in self.get_axes():\naxis.applyNiceNumbers()\n</code></pre>"},{"location":"qt_modules/charts/ChartMixin.html#prettyqt.charts.chart.ChartMixin.get_axes","title":"<code>get_axes(orientation: constants.OrientationStr | constants.Orientation | None = None, series: charts.QAbstractBarSeries | None = None) -&gt; list[charts.QAbstractAxis]</code>","text":"<p>Get axes of chart.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation | None</code> <p>Orientation of the axes that should get returned.</p> <code>None</code> <code>series</code> <code>charts.QAbstractBarSeries | None</code> <p>Series to return axes for. Returns all axes if None.</p> <code>None</code> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def get_axes(\nself,\norientation: constants.OrientationStr | constants.Orientation | None = None,\nseries: charts.QAbstractBarSeries | None = None,\n) -&gt; list[charts.QAbstractAxis]:\n\"\"\"Get axes of chart.\n    Arguments:\n        orientation: Orientation of the axes that should get returned.\n        series: Series to return axes for. Returns all axes if None.\n    \"\"\"\nif orientation is None:\norientation = constants.HORIZONTAL | constants.VERTICAL\nreturn self.axes(constants.ORIENTATION.get_enum_value(orientation), series)\n</code></pre>"},{"location":"qt_modules/charts/ChartMixin.html#prettyqt.charts.chart.ChartMixin.set_legend_alignment","title":"<code>set_legend_alignment(alignment: constants.SideStr | constants.AlignmentFlag)</code>","text":"<p>Set alignment of the chart legend.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def set_legend_alignment(\nself, alignment: constants.SideStr | constants.AlignmentFlag\n):\n\"\"\"Set alignment of the chart legend.\"\"\"\nself.legend().setAlignment(constants.SIDES.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/charts/ChartMixin.html#prettyqt.charts.chart.ChartMixin.update_boundaries","title":"<code>update_boundaries()</code>","text":"<p>Set new min/max values based on axis.</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def update_boundaries(self):\n\"\"\"Set new min/max values based on axis.\"\"\"\nif axis_x := self.get_axes(\"horizontal\"):\nself.max_x = axis_x[0].max()\nself.min_x = axis_x[0].min()\nif axis_y := self.get_axes(\"vertical\"):\nself.max_y = axis_y[0].max()\nself.min_y = axis_y[0].min()\n</code></pre>"},{"location":"qt_modules/charts/ChartMixin.html#prettyqt.charts.chart.ChartMixin.zoom_by_factor","title":"<code>zoom_by_factor(factor: float)</code>","text":"<p>Zoom in/out by factor (1.0 = no change).</p> <p>Make sure that we dont zoom out too far</p> Source code in <code>prettyqt\\charts\\chart.py</code> <pre><code>def zoom_by_factor(self, factor: float):\n\"\"\"Zoom in/out by factor (1.0 = no change).\n    Make sure that we dont zoom out too far\n    \"\"\"\nself.zoom(factor)\nif axis_x := self.get_axes(\"horizontal\"):\nif axis_x[0].min() &lt; self.min_x:\naxis_x[0].setMin(self.min_x)\nif axis_x[0].max() &gt; self.max_x:\naxis_x[0].setMax(self.max_x)\nif axis_y := self.get_axes(\"vertical\"):\nif axis_y[0].max() &gt; self.max_y:\naxis_y[0].setMax(self.max_y)\n# always bottom-align when zooming for now. should perhaps become optional.\n# if axis_y[0].min() &lt; self.min_y:\naxis_y[0].setMin(max(0, self.min_y))\n</code></pre>"},{"location":"qt_modules/charts/ChartMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261872352[\"charts.ChartMixin\"]\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103261170560 --&gt; 2103261872352\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440</code></pre>"},{"location":"qt_modules/charts/ChartView.html","title":"ChartView","text":"<p>Qt Base Class: QChartView</p> <p>Signature: <code>QChartView(self, chart: PySide6.QtCharts.QChart, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QChartView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/ChartView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsViewMixin</code>, <code>charts.QChartView</code></p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>class ChartView(widgets.GraphicsViewMixin, charts.QChartView):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], charts.QChart):\nself.setChart(charts.Chart())\nself.setRenderHint(gui.Painter.RenderHint.Antialiasing)\nself.set_rubber_band(\"rectangle\")\n# self.setDragMode(self.RubberBandDrag)\ndef keyPressEvent(self, event: gui.QKeyEvent):\n\"\"\"Handle keypress events to allow navigation via keyboard.\"\"\"\nmatch event.key():\ncase constants.Key.Key_Escape:\nself.chart().zoomReset()\ncase constants.Key.Key_Plus:\nself.chart().zoom_by_factor(ZOOM_IN_FACTOR)\ncase constants.Key.Key_Minus:\nself.chart().zoom_by_factor(ZOOM_OUT_FACTOR)\ncase constants.Key.Key_Left:\nself.chart().scroll(-SCROLL_STEP_SIZE, 0)\ncase constants.Key.Key_Right:\nself.chart().scroll(SCROLL_STEP_SIZE, 0)\ncase constants.Key.Key_Up:\nself.chart().scroll(0, SCROLL_STEP_SIZE)\ncase constants.Key.Key_Down:\nself.chart().scroll(0, -SCROLL_STEP_SIZE)\ncase constants.Key.Key_0:\nself.chart().apply_nice_numbers()\ncase _:\nsuper().keyPressEvent(event)\nreturn\nevent.accept()\ndef wheelEvent(self, event: gui.QWheelEvent):\n\"\"\"Handle wheel event for zooming.\"\"\"\nfct = ZOOM_IN_FACTOR if event.angleDelta().y() &gt; 0 else ZOOM_OUT_FACTOR\nself.chart().zoom_by_factor(fct)\nevent.accept()\ndef mouseReleaseEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == constants.MouseButton.RightButton:\nwidgets.Application.restoreOverrideCursor()\nevent.accept()\nreturn\nsuper().mouseReleaseEvent(event)\ndef mousePressEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == constants.MouseButton.RightButton:\nwidgets.Application.set_override_cursor(\"size_all\")\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mousePressEvent(event)\ndef mouseMoveEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\n# pan the chart with a middle mouse drag\nif event.buttons() &amp; constants.MouseButton.RightButton:  # type: ignore\nif not self.last_mouse_pos:\nreturn\npos_diff = event.position() - self.last_mouse_pos\nself.chart().scroll(-pos_diff.x(), pos_diff.y())\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mouseMoveEvent(event)\n@core.Slot()\ndef save_as_image(self):\n\"\"\"Let user choose folder and save chart as an image file.\"\"\"\ndlg = widgets.FileDialog(mode=\"save\", caption=\"Save image\")\nfilters = {\"Bmp files\": [\".bmp\"], \"Jpeg files\": [\".jpg\"], \"Png files\": [\".png\"]}\ndlg.set_extension_filter(filters)\nfilename = dlg.open_file()\nif not filename:\nreturn\nself.chart().show_legend()\nimage = self.get_image()\nimage.save(str(filename[0]))\nself.chart().hide_legend()\ndef set_rubber_band(self, typ: RubberBandStr | charts.QChartView.RubberBand):\n\"\"\"Set the rubber band type.\n        Args:\n            typ: rubber band type\n        \"\"\"\nself.setRubberBand(RUBBER_BAND.get_enum_value(typ))\ndef get_rubber_band(self) -&gt; RubberBandStr:\n\"\"\"Return current rubber band type.\n        Returns:\n            Rubber band type\n        \"\"\"\nreturn RUBBER_BAND.inverse[self.rubberBand()]\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.get_rubber_band","title":"<code>get_rubber_band() -&gt; RubberBandStr</code>","text":"<p>Return current rubber band type.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def get_rubber_band(self) -&gt; RubberBandStr:\n\"\"\"Return current rubber band type.\n    Returns:\n        Rubber band type\n    \"\"\"\nreturn RUBBER_BAND.inverse[self.rubberBand()]\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.keyPressEvent","title":"<code>keyPressEvent(event: gui.QKeyEvent)</code>","text":"<p>Handle keypress events to allow navigation via keyboard.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def keyPressEvent(self, event: gui.QKeyEvent):\n\"\"\"Handle keypress events to allow navigation via keyboard.\"\"\"\nmatch event.key():\ncase constants.Key.Key_Escape:\nself.chart().zoomReset()\ncase constants.Key.Key_Plus:\nself.chart().zoom_by_factor(ZOOM_IN_FACTOR)\ncase constants.Key.Key_Minus:\nself.chart().zoom_by_factor(ZOOM_OUT_FACTOR)\ncase constants.Key.Key_Left:\nself.chart().scroll(-SCROLL_STEP_SIZE, 0)\ncase constants.Key.Key_Right:\nself.chart().scroll(SCROLL_STEP_SIZE, 0)\ncase constants.Key.Key_Up:\nself.chart().scroll(0, SCROLL_STEP_SIZE)\ncase constants.Key.Key_Down:\nself.chart().scroll(0, -SCROLL_STEP_SIZE)\ncase constants.Key.Key_0:\nself.chart().apply_nice_numbers()\ncase _:\nsuper().keyPressEvent(event)\nreturn\nevent.accept()\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.mouseMoveEvent","title":"<code>mouseMoveEvent(event: gui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mouseMoveEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\n# pan the chart with a middle mouse drag\nif event.buttons() &amp; constants.MouseButton.RightButton:  # type: ignore\nif not self.last_mouse_pos:\nreturn\npos_diff = event.position() - self.last_mouse_pos\nself.chart().scroll(-pos_diff.x(), pos_diff.y())\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mouseMoveEvent(event)\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.mousePressEvent","title":"<code>mousePressEvent(event: gui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mousePressEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == constants.MouseButton.RightButton:\nwidgets.Application.set_override_cursor(\"size_all\")\nself.last_mouse_pos = event.position()\nevent.accept()\nsuper().mousePressEvent(event)\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.mouseReleaseEvent","title":"<code>mouseReleaseEvent(event: gui.QMouseEvent)</code>","text":"<p>Override to allow dragging the chart.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def mouseReleaseEvent(self, event: gui.QMouseEvent):\n\"\"\"Override to allow dragging the chart.\"\"\"\nif event.button() == constants.MouseButton.RightButton:\nwidgets.Application.restoreOverrideCursor()\nevent.accept()\nreturn\nsuper().mouseReleaseEvent(event)\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.save_as_image","title":"<code>save_as_image()</code>","text":"<p>Let user choose folder and save chart as an image file.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>@core.Slot()\ndef save_as_image(self):\n\"\"\"Let user choose folder and save chart as an image file.\"\"\"\ndlg = widgets.FileDialog(mode=\"save\", caption=\"Save image\")\nfilters = {\"Bmp files\": [\".bmp\"], \"Jpeg files\": [\".jpg\"], \"Png files\": [\".png\"]}\ndlg.set_extension_filter(filters)\nfilename = dlg.open_file()\nif not filename:\nreturn\nself.chart().show_legend()\nimage = self.get_image()\nimage.save(str(filename[0]))\nself.chart().hide_legend()\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.set_rubber_band","title":"<code>set_rubber_band(typ: RubberBandStr | charts.QChartView.RubberBand)</code>","text":"<p>Set the rubber band type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>RubberBandStr | charts.QChartView.RubberBand</code> <p>rubber band type</p> required Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def set_rubber_band(self, typ: RubberBandStr | charts.QChartView.RubberBand):\n\"\"\"Set the rubber band type.\n    Args:\n        typ: rubber band type\n    \"\"\"\nself.setRubberBand(RUBBER_BAND.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#prettyqt.charts.chartview.ChartView.wheelEvent","title":"<code>wheelEvent(event: gui.QWheelEvent)</code>","text":"<p>Handle wheel event for zooming.</p> Source code in <code>prettyqt\\charts\\chartview.py</code> <pre><code>def wheelEvent(self, event: gui.QWheelEvent):\n\"\"\"Handle wheel event for zooming.\"\"\"\nfct = ZOOM_IN_FACTOR if event.angleDelta().y() &gt; 0 else ZOOM_OUT_FACTOR\nself.chart().zoom_by_factor(fct)\nevent.accept()\n</code></pre>"},{"location":"qt_modules/charts/ChartView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261876192[\"charts.ChartView\"]\n  2103261159040[\"widgets.GraphicsViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261775392[\"QtCharts.QChartView\"]\n  2103259783280[\"QtWidgets.QGraphicsView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261159040 --&gt; 2103261876192\n  2103261131200 --&gt; 2103261159040\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103261775392 --&gt; 2103261876192\n  2103259783280 --&gt; 2103261775392\n  2103259751600 --&gt; 2103259783280\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/charts/ChartView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>backgroundBrush</code> QBrush <code>foregroundBrush</code> QBrush <code>interactive</code> bool <code>sceneRect</code> QRectF <code>alignment</code> QFlags <code>renderHints</code> QFlags <code>dragMode</code> QGraphicsView::DragMode <code>cacheMode</code> QFlags <code>transformationAnchor</code> QGraphicsView::ViewportAnchor <code>resizeAnchor</code> QGraphicsView::ViewportAnchor <code>viewportUpdateMode</code> QGraphicsView::ViewportUpdateMode <code>rubberBandSelectionMode</code> Qt::ItemSelectionMode <code>optimizationFlags</code> QFlags"},{"location":"qt_modules/charts/DateTimeAxis.html","title":"DateTimeAxis","text":"<p>Qt Base Class: QDateTimeAxis</p> <p>Signature: <code>QDateTimeAxis(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/DateTimeAxis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractAxisMixin</code>, <code>charts.QDateTimeAxis</code></p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>class DateTimeAxis(charts.AbstractAxisMixin, charts.QDateTimeAxis):\ndef set_min(self, minimum: datatypes.DateTimeType):\n\"\"\"Set minimum value for axis.\"\"\"\nminimum = datatypes.to_datetime(minimum)\nself.setMin(minimum)\ndef get_min(self) -&gt; datetime.datetime:\nreturn self.min().toPython()\ndef set_max(self, maximum: datatypes.DateTimeType):\n\"\"\"Set maximum value for axis.\"\"\"\nmaximum = datatypes.to_datetime(maximum)\nself.setMax(maximum)\ndef get_max(self) -&gt; datetime.datetime:\nreturn self.max().toPython()\ndef set_range(self, minimum: datatypes.DateTimeType, maximum: datatypes.DateTimeType):\n\"\"\"Set value range of datetime axis.\"\"\"\nself.setRange(datatypes.to_datetime(minimum), datatypes.to_datetime(maximum))\n</code></pre>"},{"location":"qt_modules/charts/DateTimeAxis.html#prettyqt.charts.datetimeaxis.DateTimeAxis.set_max","title":"<code>set_max(maximum: datatypes.DateTimeType)</code>","text":"<p>Set maximum value for axis.</p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def set_max(self, maximum: datatypes.DateTimeType):\n\"\"\"Set maximum value for axis.\"\"\"\nmaximum = datatypes.to_datetime(maximum)\nself.setMax(maximum)\n</code></pre>"},{"location":"qt_modules/charts/DateTimeAxis.html#prettyqt.charts.datetimeaxis.DateTimeAxis.set_min","title":"<code>set_min(minimum: datatypes.DateTimeType)</code>","text":"<p>Set minimum value for axis.</p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def set_min(self, minimum: datatypes.DateTimeType):\n\"\"\"Set minimum value for axis.\"\"\"\nminimum = datatypes.to_datetime(minimum)\nself.setMin(minimum)\n</code></pre>"},{"location":"qt_modules/charts/DateTimeAxis.html#prettyqt.charts.datetimeaxis.DateTimeAxis.set_range","title":"<code>set_range(minimum: datatypes.DateTimeType, maximum: datatypes.DateTimeType)</code>","text":"<p>Set value range of datetime axis.</p> Source code in <code>prettyqt\\charts\\datetimeaxis.py</code> <pre><code>def set_range(self, minimum: datatypes.DateTimeType, maximum: datatypes.DateTimeType):\n\"\"\"Set value range of datetime axis.\"\"\"\nself.setRange(datatypes.to_datetime(minimum), datatypes.to_datetime(maximum))\n</code></pre>"},{"location":"qt_modules/charts/DateTimeAxis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261871392[\"charts.DateTimeAxis\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261849312[\"QtCharts.QDateTimeAxis\"]\n  2103261812832[\"QtCharts.QAbstractAxis\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261854112 --&gt; 2103261871392\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472\n  2103261849312 --&gt; 2103261871392\n  2103261812832 --&gt; 2103261849312\n  2103254677056 --&gt; 2103261812832\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/DateTimeAxis.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>visible</code> bool <code>lineVisible</code> bool <code>linePen</code> QPen <code>color</code> QColor <code>labelsVisible</code> bool <code>labelsBrush</code> QBrush <code>labelsAngle</code> int <code>labelsFont</code> QFont <code>labelsColor</code> QColor <code>labelsTruncated</code> bool <code>truncateLabels</code> bool <code>gridVisible</code> bool <code>gridLinePen</code> QPen <code>minorGridVisible</code> bool <code>minorGridLinePen</code> QPen <code>gridLineColor</code> QColor <code>minorGridLineColor</code> QColor <code>shadesVisible</code> bool <code>shadesColor</code> QColor <code>shadesBorderColor</code> QColor <code>shadesPen</code> QPen <code>shadesBrush</code> QBrush <code>titleText</code> QString <code>titleBrush</code> QBrush <code>titleVisible</code> bool <code>titleFont</code> QFont <code>orientation</code> Qt::Orientation <code>alignment</code> QFlags <code>reverse</code> bool <code>tickCount</code> int <code>min</code> QDateTime <code>max</code> QDateTime <code>format</code> QString"},{"location":"qt_modules/charts/HorizontalBarSeries.html","title":"HorizontalBarSeries","text":"<p>Qt Base Class: QHorizontalBarSeries</p> <p>Signature: <code>QHorizontalBarSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/HorizontalBarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>charts.QHorizontalBarSeries</code></p> Source code in <code>prettyqt\\charts\\horizontalbarseries.py</code> <pre><code>class HorizontalBarSeries(charts.AbstractBarSeriesMixin, charts.QHorizontalBarSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/HorizontalBarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261864672[\"charts.HorizontalBarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261840672[\"QtCharts.QHorizontalBarSeries\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261864672\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261840672 --&gt; 2103261864672\n  2103261817632 --&gt; 2103261840672\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/HorizontalBarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/HorizontalPercentBarSeries.html","title":"HorizontalPercentBarSeries","text":"<p>Qt Base Class: QHorizontalPercentBarSeries</p> <p>Signature: <code>QHorizontalPercentBarSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/HorizontalPercentBarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>charts.QHorizontalPercentBarSeries</code></p> Source code in <code>prettyqt\\charts\\horizontalpercentbarseries.py</code> <pre><code>class HorizontalPercentBarSeries(\ncharts.AbstractBarSeriesMixin, charts.QHorizontalPercentBarSeries\n):\npass\n</code></pre>"},{"location":"qt_modules/charts/HorizontalPercentBarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261865632[\"charts.HorizontalPercentBarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261814752[\"QtCharts.QHorizontalPercentBarSeries\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261865632\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261814752 --&gt; 2103261865632\n  2103261817632 --&gt; 2103261814752\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/HorizontalPercentBarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/HorizontalStackedBarSeries.html","title":"HorizontalStackedBarSeries","text":"<p>Qt Base Class: QHorizontalStackedBarSeries</p> <p>Signature: <code>QHorizontalStackedBarSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/HorizontalStackedBarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>charts.QHorizontalStackedBarSeries</code></p> Source code in <code>prettyqt\\charts\\horizontalstackedbarseries.py</code> <pre><code>class HorizontalStackedBarSeries(\ncharts.AbstractBarSeriesMixin, charts.QHorizontalStackedBarSeries\n):\npass\n</code></pre>"},{"location":"qt_modules/charts/HorizontalStackedBarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261867552[\"charts.HorizontalStackedBarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261819552[\"QtCharts.QHorizontalStackedBarSeries\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261867552\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261819552 --&gt; 2103261867552\n  2103261817632 --&gt; 2103261819552\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/HorizontalStackedBarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/Legend.html","title":"Legend","text":""},{"location":"qt_modules/charts/Legend.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsWidgetMixin</code></p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>class Legend(widgets.GraphicsWidgetMixin):\ndef __init__(self, item: QtCharts.QLegend):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef set_alignment(self, alignment: constants.SideStr | QtCharts.QLegend.MarkerShape):\n\"\"\"Set the alignment of the legend.\n        Args:\n            alignment: alignment for the legend\n        \"\"\"\nself.setAlignment(constants.SIDES.get_enum_value(alignment))\ndef get_alignment(self) -&gt; constants.SideStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.SIDES.inverse[self.alignment()]\ndef set_marker_shape(self, shape: MarkerShapeStr):\n\"\"\"Set the marker shape.\n        Args:\n            shape: marker shape\n        \"\"\"\nself.setMarkerShape(MARKER_SHAPES.get_enum_value(shape))\ndef get_marker_shape(self) -&gt; MarkerShapeStr:\n\"\"\"Return current marker shape.\n        Returns:\n            Marker shape\n        \"\"\"\nreturn MARKER_SHAPES.inverse[self.markerShape()]\ndef get_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.borderColor())\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_label_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelColor())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre>"},{"location":"qt_modules/charts/Legend.html#prettyqt.charts.legend.Legend.get_alignment","title":"<code>get_alignment() -&gt; constants.SideStr</code>","text":"<p>Return current alignment.</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_alignment(self) -&gt; constants.SideStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.SIDES.inverse[self.alignment()]\n</code></pre>"},{"location":"qt_modules/charts/Legend.html#prettyqt.charts.legend.Legend.get_marker_shape","title":"<code>get_marker_shape() -&gt; MarkerShapeStr</code>","text":"<p>Return current marker shape.</p> Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def get_marker_shape(self) -&gt; MarkerShapeStr:\n\"\"\"Return current marker shape.\n    Returns:\n        Marker shape\n    \"\"\"\nreturn MARKER_SHAPES.inverse[self.markerShape()]\n</code></pre>"},{"location":"qt_modules/charts/Legend.html#prettyqt.charts.legend.Legend.set_alignment","title":"<code>set_alignment(alignment: constants.SideStr | QtCharts.QLegend.MarkerShape)</code>","text":"<p>Set the alignment of the legend.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.SideStr | QtCharts.QLegend.MarkerShape</code> <p>alignment for the legend</p> required Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def set_alignment(self, alignment: constants.SideStr | QtCharts.QLegend.MarkerShape):\n\"\"\"Set the alignment of the legend.\n    Args:\n        alignment: alignment for the legend\n    \"\"\"\nself.setAlignment(constants.SIDES.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/charts/Legend.html#prettyqt.charts.legend.Legend.set_marker_shape","title":"<code>set_marker_shape(shape: MarkerShapeStr)</code>","text":"<p>Set the marker shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>MarkerShapeStr</code> <p>marker shape</p> required Source code in <code>prettyqt\\charts\\legend.py</code> <pre><code>def set_marker_shape(self, shape: MarkerShapeStr):\n\"\"\"Set the marker shape.\n    Args:\n        shape: marker shape\n    \"\"\"\nself.setMarkerShape(MARKER_SHAPES.get_enum_value(shape))\n</code></pre>"},{"location":"qt_modules/charts/Legend.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261888672[\"charts.Legend\"]\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103261170560 --&gt; 2103261888672\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440</code></pre>"},{"location":"qt_modules/charts/LineSeries.html","title":"LineSeries","text":"<p>Qt Base Class: QLineSeries</p> <p>Signature: <code>QLineSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/LineSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.XYSeriesMixin</code>, <code>charts.QLineSeries</code></p> <p>QLineSeries with some custom properties.</p> Source code in <code>prettyqt\\charts\\lineseries.py</code> <pre><code>class LineSeries(charts.XYSeriesMixin, charts.QLineSeries):\n\"\"\"QLineSeries with some custom properties.\"\"\"\n</code></pre>"},{"location":"qt_modules/charts/LineSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261890592[\"charts.LineSeries\"]\n  2103261868512[\"charts.XYSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261824352[\"QtCharts.QLineSeries\"]\n  2103261826272[\"QtCharts.QXYSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261868512 --&gt; 2103261890592\n  2103261858912 --&gt; 2103261868512\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261824352 --&gt; 2103261890592\n  2103261826272 --&gt; 2103261824352\n  2103261823392 --&gt; 2103261826272\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/LineSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>pointsVisible</code> bool <code>color</code> QColor <code>selectedColor</code> QColor <code>pointLabelsFormat</code> QString <code>pointLabelsVisible</code> bool <code>pointLabelsFont</code> QFont <code>pointLabelsColor</code> QColor <code>pointLabelsClipping</code> bool <code>bestFitLineVisible</code> bool <code>bestFitLineColor</code> QColor"},{"location":"qt_modules/charts/LogValueAxis.html","title":"LogValueAxis","text":"<p>Qt Base Class: QLogValueAxis</p> <p>Signature: <code>QLogValueAxis(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/LogValueAxis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractAxisMixin</code>, <code>charts.QLogValueAxis</code></p> Source code in <code>prettyqt\\charts\\logvalueaxis.py</code> <pre><code>class LogValueAxis(charts.AbstractAxisMixin, charts.QLogValueAxis):\npass\n</code></pre>"},{"location":"qt_modules/charts/LogValueAxis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261857952[\"charts.LogValueAxis\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261848352[\"QtCharts.QLogValueAxis\"]\n  2103261812832[\"QtCharts.QAbstractAxis\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261854112 --&gt; 2103261857952\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472\n  2103261848352 --&gt; 2103261857952\n  2103261812832 --&gt; 2103261848352\n  2103254677056 --&gt; 2103261812832\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/LogValueAxis.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>visible</code> bool <code>lineVisible</code> bool <code>linePen</code> QPen <code>color</code> QColor <code>labelsVisible</code> bool <code>labelsBrush</code> QBrush <code>labelsAngle</code> int <code>labelsFont</code> QFont <code>labelsColor</code> QColor <code>labelsTruncated</code> bool <code>truncateLabels</code> bool <code>gridVisible</code> bool <code>gridLinePen</code> QPen <code>minorGridVisible</code> bool <code>minorGridLinePen</code> QPen <code>gridLineColor</code> QColor <code>minorGridLineColor</code> QColor <code>shadesVisible</code> bool <code>shadesColor</code> QColor <code>shadesBorderColor</code> QColor <code>shadesPen</code> QPen <code>shadesBrush</code> QBrush <code>titleText</code> QString <code>titleBrush</code> QBrush <code>titleVisible</code> bool <code>titleFont</code> QFont <code>orientation</code> Qt::Orientation <code>alignment</code> QFlags <code>reverse</code> bool <code>min</code> double <code>max</code> double <code>labelFormat</code> QString <code>base</code> double <code>tickCount</code> int <code>minorTickCount</code> int"},{"location":"qt_modules/charts/PercentBarSeries.html","title":"PercentBarSeries","text":"<p>Qt Base Class: QPercentBarSeries</p> <p>Signature: <code>QPercentBarSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/PercentBarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>charts.QPercentBarSeries</code></p> Source code in <code>prettyqt\\charts\\percentbarseries.py</code> <pre><code>class PercentBarSeries(charts.AbstractBarSeriesMixin, charts.QPercentBarSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/PercentBarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261863712[\"charts.PercentBarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261839712[\"QtCharts.QPercentBarSeries\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261863712\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261839712 --&gt; 2103261863712\n  2103261817632 --&gt; 2103261839712\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/PercentBarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/PieSlice.html","title":"PieSlice","text":"<p>Qt Base Class: QPieSlice</p> <p>Signature: <code>QPieSlice(self, label: str, value: float, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QPieSlice(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/PieSlice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtCharts.QPieSlice</code></p> Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>class PieSlice(core.ObjectMixin, QtCharts.QPieSlice):\ndef __repr__(self):\nreturn get_repr(self, self.label(), self.value())\ndef set_label_position(\nself, position: LabelPositionStr | QtCharts.QPieSlice.LabelPosition\n):\n\"\"\"Set the label position.\n        Args:\n            position: label position\n        \"\"\"\nself.setLabelPosition(LABEL_POSITION.get_enum_value(position))\ndef get_label_position(self) -&gt; LabelPositionStr:\n\"\"\"Return current label position.\n        Returns:\n            label position\n        \"\"\"\nreturn LABEL_POSITION.inverse[self.labelPosition()]\ndef get_label_font(self) -&gt; gui.Font:\nreturn gui.Font(self.labelFont())\ndef get_label_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.labelBrush())\ndef get_label_color(self) -&gt; gui.Color:\nreturn gui.Color(self.labelColor())\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_border_color(self) -&gt; gui.Color:\nreturn gui.Color(self.borderColor())\n</code></pre>"},{"location":"qt_modules/charts/PieSlice.html#prettyqt.charts.pieslice.PieSlice.get_label_position","title":"<code>get_label_position() -&gt; LabelPositionStr</code>","text":"<p>Return current label position.</p> Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def get_label_position(self) -&gt; LabelPositionStr:\n\"\"\"Return current label position.\n    Returns:\n        label position\n    \"\"\"\nreturn LABEL_POSITION.inverse[self.labelPosition()]\n</code></pre>"},{"location":"qt_modules/charts/PieSlice.html#prettyqt.charts.pieslice.PieSlice.set_label_position","title":"<code>set_label_position(position: LabelPositionStr | QtCharts.QPieSlice.LabelPosition)</code>","text":"<p>Set the label position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>LabelPositionStr | QtCharts.QPieSlice.LabelPosition</code> <p>label position</p> required Source code in <code>prettyqt\\charts\\pieslice.py</code> <pre><code>def set_label_position(\nself, position: LabelPositionStr | QtCharts.QPieSlice.LabelPosition\n):\n\"\"\"Set the label position.\n    Args:\n        position: label position\n    \"\"\"\nself.setLabelPosition(LABEL_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/charts/PieSlice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261821472[\"charts.PieSlice\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261777312[\"QtCharts.QPieSlice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261821472\n  140736120080256 --&gt; 2103255067472\n  2103261777312 --&gt; 2103261821472\n  2103254677056 --&gt; 2103261777312\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/PieSlice.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>label</code> QString <code>value</code> double <code>labelVisible</code> bool <code>labelPosition</code> QPieSlice::LabelPosition <code>exploded</code> bool <code>pen</code> QPen <code>borderColor</code> QColor <code>borderWidth</code> int <code>brush</code> QBrush <code>color</code> QColor <code>labelBrush</code> QBrush <code>labelColor</code> QColor <code>labelFont</code> QFont <code>labelArmLengthFactor</code> double <code>explodeDistanceFactor</code> double <code>percentage</code> double <code>startAngle</code> double <code>angleSpan</code> double"},{"location":"qt_modules/charts/PolarChart.html","title":"PolarChart","text":"<p>Qt Base Class: QPolarChart</p> <p>Signature: <code>QPolarChart(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None, wFlags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/charts/PolarChart.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.ChartMixin</code>, <code>charts.QPolarChart</code></p> Source code in <code>prettyqt\\charts\\polarchart.py</code> <pre><code>class PolarChart(charts.ChartMixin, charts.QPolarChart):\ndef add_axis(\nself,\naxis: charts.QAbstractAxis,\norientation: PolarOrientationStr | charts.QPolarChart.PolarOrientation,\n):\n\"\"\"Add axis with given orientation.\"\"\"\nself.addAxis(axis, POLAR_ORIENTATIONS.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/charts/PolarChart.html#prettyqt.charts.polarchart.PolarChart.add_axis","title":"<code>add_axis(axis: charts.QAbstractAxis, orientation: PolarOrientationStr | charts.QPolarChart.PolarOrientation)</code>","text":"<p>Add axis with given orientation.</p> Source code in <code>prettyqt\\charts\\polarchart.py</code> <pre><code>def add_axis(\nself,\naxis: charts.QAbstractAxis,\norientation: PolarOrientationStr | charts.QPolarChart.PolarOrientation,\n):\n\"\"\"Add axis with given orientation.\"\"\"\nself.addAxis(axis, POLAR_ORIENTATIONS.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/charts/PolarChart.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261882912[\"charts.PolarChart\"]\n  2103261872352[\"charts.ChartMixin\"]\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103261759072[\"QtCharts.QPolarChart\"]\n  2103261786912[\"QtCharts.QChart\"]\n  2103260153616[\"QtWidgets.QGraphicsWidget\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103261872352 --&gt; 2103261882912\n  2103261170560 --&gt; 2103261872352\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440\n  2103261759072 --&gt; 2103261882912\n  2103261786912 --&gt; 2103261759072\n  2103260153616 --&gt; 2103261786912\n  2103260155536 --&gt; 2103260153616\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056\n  2103259646960 --&gt; 2103260153616\n  2103206874128 --&gt; 2103259646960</code></pre>"},{"location":"qt_modules/charts/PolarChart.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double <code>palette</code> QPalette <code>font</code> QFont <code>layoutDirection</code> Qt::LayoutDirection <code>size</code> QSizeF <code>minimumSize</code> QSizeF <code>preferredSize</code> QSizeF <code>maximumSize</code> QSizeF <code>sizePolicy</code> QSizePolicy <code>focusPolicy</code> Qt::FocusPolicy <code>windowFlags</code> QFlags <code>windowTitle</code> QString <code>geometry</code> QRectF <code>autoFillBackground</code> bool <code>layout</code> QGraphicsLayout <code>theme</code> QChart::ChartTheme <code>title</code> QString <code>backgroundVisible</code> bool <code>dropShadowEnabled</code> bool <code>backgroundRoundness</code> double <code>animationOptions</code> QFlags <code>animationDuration</code> int <code>animationEasingCurve</code> QEasingCurve <code>margins</code> QMargins <code>chartType</code> QChart::ChartType <code>plotAreaBackgroundVisible</code> bool <code>localizeNumbers</code> bool <code>locale</code> QLocale <code>plotArea</code> QRectF"},{"location":"qt_modules/charts/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>charts</li> <li>AbstractAxis</li> <li>AbstractBarSeriesMixin</li> <li>LineSeries</li> <li>Legend</li> <li>LogValueAxis</li> <li>ChartMixin</li> <li>CategoryAxis</li> <li>ScatterSeries</li> <li>AbstractAxisMixin</li> <li>XYSeriesMixin</li> <li>BoxSet</li> <li>PieSlice</li> <li>PolarChart</li> <li>StackedBarSeries</li> <li>HorizontalBarSeries</li> <li>AbstractSeries</li> <li>AbstractBarSeries</li> <li>AbstractSeriesMixin</li> <li>BarCategoryAxis</li> <li>DateTimeAxis</li> <li>ValueAxis</li> <li>XYSeries</li> <li>CandlestickSet</li> <li>ValueAxisMixin</li> <li>HorizontalStackedBarSeries</li> <li>BarSet</li> <li>HorizontalPercentBarSeries</li> <li>PercentBarSeries</li> <li>Chart</li> <li>BarSeries</li> <li>ChartView</li> </ul>"},{"location":"qt_modules/charts/ScatterSeries.html","title":"ScatterSeries","text":"<p>Qt Base Class: QScatterSeries</p> <p>Signature: <code>QScatterSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/ScatterSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.XYSeriesMixin</code>, <code>charts.QScatterSeries</code></p> Source code in <code>prettyqt\\charts\\scatterseries.py</code> <pre><code>class ScatterSeries(charts.XYSeriesMixin, charts.QScatterSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/ScatterSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261870432[\"charts.ScatterSeries\"]\n  2103261868512[\"charts.XYSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261811872[\"QtCharts.QScatterSeries\"]\n  2103261826272[\"QtCharts.QXYSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261868512 --&gt; 2103261870432\n  2103261858912 --&gt; 2103261868512\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261811872 --&gt; 2103261870432\n  2103261826272 --&gt; 2103261811872\n  2103261823392 --&gt; 2103261826272\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/ScatterSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>pointsVisible</code> bool <code>color</code> QColor <code>selectedColor</code> QColor <code>pointLabelsFormat</code> QString <code>pointLabelsVisible</code> bool <code>pointLabelsFont</code> QFont <code>pointLabelsColor</code> QColor <code>pointLabelsClipping</code> bool <code>bestFitLineVisible</code> bool <code>bestFitLineColor</code> QColor <code>color</code> QColor <code>borderColor</code> QColor <code>markerShape</code> QScatterSeries::MarkerShape <code>markerSize</code> double <code>brush</code> QBrush"},{"location":"qt_modules/charts/StackedBarSeries.html","title":"StackedBarSeries","text":"<p>Qt Base Class: QStackedBarSeries</p> <p>Signature: <code>QStackedBarSeries(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/StackedBarSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractBarSeriesMixin</code>, <code>charts.QStackedBarSeries</code></p> Source code in <code>prettyqt\\charts\\stackedbarseries.py</code> <pre><code>class StackedBarSeries(charts.AbstractBarSeriesMixin, charts.QStackedBarSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/StackedBarSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261866592[\"charts.StackedBarSeries\"]\n  2103261859872[\"charts.AbstractBarSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261832032[\"QtCharts.QStackedBarSeries\"]\n  2103261817632[\"QtCharts.QAbstractBarSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261859872 --&gt; 2103261866592\n  2103261858912 --&gt; 2103261859872\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261832032 --&gt; 2103261866592\n  2103261817632 --&gt; 2103261832032\n  2103261823392 --&gt; 2103261817632\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/StackedBarSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>barWidth</code> double <code>count</code> int <code>labelsVisible</code> bool <code>labelsFormat</code> QString <code>labelsPosition</code> QAbstractBarSeries::LabelsPosition <code>labelsAngle</code> double <code>labelsPrecision</code> int"},{"location":"qt_modules/charts/ValueAxis.html","title":"ValueAxis","text":"<p>Qt Base Class: QValueAxis</p> <p>Signature: <code>QValueAxis(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/charts/ValueAxis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ValueAxisMixin</code>, <code>charts.QValueAxis</code></p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>class ValueAxis(ValueAxisMixin, charts.QValueAxis):\npass\n</code></pre>"},{"location":"qt_modules/charts/ValueAxis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261855072[\"charts.ValueAxis\"]\n  2103261822432[\"charts.ValueAxisMixin\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261841632[\"QtCharts.QValueAxis\"]\n  2103261812832[\"QtCharts.QAbstractAxis\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261822432 --&gt; 2103261855072\n  2103261854112 --&gt; 2103261822432\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472\n  2103261841632 --&gt; 2103261855072\n  2103261812832 --&gt; 2103261841632\n  2103254677056 --&gt; 2103261812832\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/ValueAxis.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>visible</code> bool <code>lineVisible</code> bool <code>linePen</code> QPen <code>color</code> QColor <code>labelsVisible</code> bool <code>labelsBrush</code> QBrush <code>labelsAngle</code> int <code>labelsFont</code> QFont <code>labelsColor</code> QColor <code>labelsTruncated</code> bool <code>truncateLabels</code> bool <code>gridVisible</code> bool <code>gridLinePen</code> QPen <code>minorGridVisible</code> bool <code>minorGridLinePen</code> QPen <code>gridLineColor</code> QColor <code>minorGridLineColor</code> QColor <code>shadesVisible</code> bool <code>shadesColor</code> QColor <code>shadesBorderColor</code> QColor <code>shadesPen</code> QPen <code>shadesBrush</code> QBrush <code>titleText</code> QString <code>titleBrush</code> QBrush <code>titleVisible</code> bool <code>titleFont</code> QFont <code>orientation</code> Qt::Orientation <code>alignment</code> QFlags <code>reverse</code> bool <code>tickCount</code> int <code>min</code> double <code>max</code> double <code>labelFormat</code> QString <code>minorTickCount</code> int <code>tickAnchor</code> double <code>tickInterval</code> double <code>tickType</code> QValueAxis::TickType"},{"location":"qt_modules/charts/ValueAxisMixin.html","title":"ValueAxisMixin","text":""},{"location":"qt_modules/charts/ValueAxisMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractAxisMixin</code></p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>class ValueAxisMixin(charts.AbstractAxisMixin):\ndef set_tick_type(self, tick_type: TickTypeStr | charts.QValueAxis.TickType):\n\"\"\"Set the tick type of the legend.\n        Args:\n            tick_type: tick type for the legend\n        \"\"\"\nself.setTickType(TICK_TYPES.get_enum_value(tick_type))\ndef get_tick_type(self) -&gt; TickTypeStr:\n\"\"\"Return current tick type.\n        Returns:\n            tick_type\n        \"\"\"\nreturn TICK_TYPES.inverse[self.tickType()]\n</code></pre> Name Children Inherits ValueAxisprettyqt.charts.valueaxis <ul><li>ValueAxisMixin</li><li>QValueAxis</li></ul> CategoryAxisprettyqt.charts.categoryaxis <ul><li>ValueAxisMixin</li><li>QCategoryAxis</li></ul>"},{"location":"qt_modules/charts/ValueAxisMixin.html#prettyqt.charts.valueaxis.ValueAxisMixin.get_tick_type","title":"<code>get_tick_type() -&gt; TickTypeStr</code>","text":"<p>Return current tick type.</p> Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>def get_tick_type(self) -&gt; TickTypeStr:\n\"\"\"Return current tick type.\n    Returns:\n        tick_type\n    \"\"\"\nreturn TICK_TYPES.inverse[self.tickType()]\n</code></pre>"},{"location":"qt_modules/charts/ValueAxisMixin.html#prettyqt.charts.valueaxis.ValueAxisMixin.set_tick_type","title":"<code>set_tick_type(tick_type: TickTypeStr | charts.QValueAxis.TickType)</code>","text":"<p>Set the tick type of the legend.</p> <p>Parameters:</p> Name Type Description Default <code>tick_type</code> <code>TickTypeStr | charts.QValueAxis.TickType</code> <p>tick type for the legend</p> required Source code in <code>prettyqt\\charts\\valueaxis.py</code> <pre><code>def set_tick_type(self, tick_type: TickTypeStr | charts.QValueAxis.TickType):\n\"\"\"Set the tick type of the legend.\n    Args:\n        tick_type: tick type for the legend\n    \"\"\"\nself.setTickType(TICK_TYPES.get_enum_value(tick_type))\n</code></pre>"},{"location":"qt_modules/charts/ValueAxisMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261822432[\"charts.ValueAxisMixin\"]\n  2103261854112[\"charts.AbstractAxisMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261854112 --&gt; 2103261822432\n  2103255067472 --&gt; 2103261854112\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/charts/XYSeries.html","title":"XYSeries","text":"<p>Qt Base Class: QXYSeries</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/charts/XYSeries.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>XYSeriesMixin</code>, <code>charts.QXYSeries</code></p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>class XYSeries(XYSeriesMixin, charts.QXYSeries):\npass\n</code></pre>"},{"location":"qt_modules/charts/XYSeries.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261869472[\"charts.XYSeries\"]\n  2103261868512[\"charts.XYSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261826272[\"QtCharts.QXYSeries\"]\n  2103261823392[\"QtCharts.QAbstractSeries\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261868512 --&gt; 2103261869472\n  2103261858912 --&gt; 2103261868512\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472\n  2103261826272 --&gt; 2103261869472\n  2103261823392 --&gt; 2103261826272\n  2103254677056 --&gt; 2103261823392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/charts/XYSeries.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>name</code> QString <code>visible</code> bool <code>opacity</code> double <code>type</code> QAbstractSeries::SeriesType <code>useOpenGL</code> bool <code>pointsVisible</code> bool <code>color</code> QColor <code>selectedColor</code> QColor <code>pointLabelsFormat</code> QString <code>pointLabelsVisible</code> bool <code>pointLabelsFont</code> QFont <code>pointLabelsColor</code> QColor <code>pointLabelsClipping</code> bool <code>bestFitLineVisible</code> bool <code>bestFitLineColor</code> QColor"},{"location":"qt_modules/charts/XYSeriesMixin.html","title":"XYSeriesMixin","text":""},{"location":"qt_modules/charts/XYSeriesMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>charts.AbstractSeriesMixin</code></p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>class XYSeriesMixin(charts.AbstractSeriesMixin):\ndef __setitem__(self, index: int, val: datatypes.PointFType):\n\"\"\"Set point at given index to value.\"\"\"\nself.replace(index, datatypes.to_pointf(val))\ndef __delitem__(self, index: int):\n\"\"\"Remove point with given index.\"\"\"\nself.remove(index)\n# def __setstate__(self, state):\n#     self.append(state[\"points\"])\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __add__(self, other: datatypes.PointFType) -&gt; XYSeries:\n\"\"\"Append a point to the Series.\"\"\"\nself.append(datatypes.to_pointf(other))\nreturn self\ndef get_points(self) -&gt; list[core.QPoint]:\nif prettyqt.qt.API == \"pyqt6\":\nreturn [self.at(i) for i in range(self.count())]\nelse:\nreturn self.points()\ndef get_pen(self) -&gt; gui.Pen:\nreturn gui.Pen(self.pen())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\n</code></pre> Name Children Inherits XYSeriesprettyqt.charts.xyseries <ul><li>XYSeriesMixin</li><li>QXYSeries</li></ul> ScatterSeriesprettyqt.charts.scatterseries <ul><li>XYSeriesMixin</li><li>QScatterSeries</li></ul> LineSeriesprettyqt.charts.lineseries <ul><li>XYSeriesMixin</li><li>QLineSeries</li></ul>"},{"location":"qt_modules/charts/XYSeriesMixin.html#prettyqt.charts.xyseries.XYSeriesMixin.__add__","title":"<code>__add__(other: datatypes.PointFType) -&gt; XYSeries</code>","text":"<p>Append a point to the Series.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __add__(self, other: datatypes.PointFType) -&gt; XYSeries:\n\"\"\"Append a point to the Series.\"\"\"\nself.append(datatypes.to_pointf(other))\nreturn self\n</code></pre>"},{"location":"qt_modules/charts/XYSeriesMixin.html#prettyqt.charts.xyseries.XYSeriesMixin.__delitem__","title":"<code>__delitem__(index: int)</code>","text":"<p>Remove point with given index.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __delitem__(self, index: int):\n\"\"\"Remove point with given index.\"\"\"\nself.remove(index)\n</code></pre>"},{"location":"qt_modules/charts/XYSeriesMixin.html#prettyqt.charts.xyseries.XYSeriesMixin.__setitem__","title":"<code>__setitem__(index: int, val: datatypes.PointFType)</code>","text":"<p>Set point at given index to value.</p> Source code in <code>prettyqt\\charts\\xyseries.py</code> <pre><code>def __setitem__(self, index: int, val: datatypes.PointFType):\n\"\"\"Set point at given index to value.\"\"\"\nself.replace(index, datatypes.to_pointf(val))\n</code></pre>"},{"location":"qt_modules/charts/XYSeriesMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261868512[\"charts.XYSeriesMixin\"]\n  2103261858912[\"charts.AbstractSeriesMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261858912 --&gt; 2103261868512\n  2103255067472 --&gt; 2103261858912\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/index.html","title":"core","text":"<p>Core non-graphical classes used by other modules.</p> Name Children Inherits EasingCurveprettyqt.core.easingcurve <ul><li><code>SerializeMixin</code></li><li>QEasingCurve</li></ul> MetaPropertyprettyqt.core.metapropertyMeta-data about a property. <ul><li>object</li></ul> AbstractNativeEventFilterprettyqt.core.abstractnativeeventfilter <ul><li>QAbstractNativeEventFilter</li></ul> AbstractTableModelprettyqt.core.abstracttablemodel <ul><li>ColumnTableModel</li><li>RegexMatchesModel</li><li>FrameInfoModel</li><li>BaseFieldsModel</li><li>BaseDataclassModel</li><li>MappingModel</li><li>ModelIndexModel</li><li>QObjectPropertiesModel</li><li>WidgetsDetailsModel</li></ul> <ul><li>AbstractTableModelMixin</li><li>QAbstractTableModel</li></ul> Fileprettyqt.core.file <ul><li>FileMixin</li><li>QFile</li></ul> Dirprettyqt.core.dir <ul><li>QDir</li></ul> TextStreamprettyqt.core.textstream <ul><li>QTextStream</li></ul> PersistentModelIndexprettyqt.core.persistentmodelindex <ul><li>QPersistentModelIndex</li></ul> AbstractEventDispatcherprettyqt.core.abstracteventdispatcher <ul><li>ObjectMixin</li><li>QAbstractEventDispatcher</li></ul> DateTimeprettyqt.core._datetime <ul><li>QDateTime</li></ul> PluginLoaderprettyqt.core.pluginloader <ul><li>ObjectMixin</li><li>QPluginLoader</li></ul> KeyCombinationprettyqt.core.keycombination <ul><li><code>SerializeMixin</code></li><li>QKeyCombination</li></ul> Eventprettyqt.core.event <ul><li>QEvent</li></ul> IODeviceprettyqt.core.iodevice <ul><li>IODeviceMixin</li><li>QIODevice</li></ul> SizeFprettyqt.core.sizef <ul><li>QSizeF</li></ul> AbstractAnimationprettyqt.core.abstractanimation <ul><li>AbstractAnimationMixin</li><li>QAbstractAnimation</li></ul> Resourceprettyqt.core.resource <ul><li>QResource</li></ul> ProcessEnvironmentprettyqt.core.processenvironmentHolds the environment variables that can be passed to a program. <ul><li>QProcessEnvironment</li><li><code>MutableMapping</code></li></ul> MetaMethodprettyqt.core.metamethodMeta-data about an member method. <ul><li>object</li></ul> SortFilterProxyModelprettyqt.core.sortfilterproxymodel <ul><li>FuzzyFilterProxyModel</li><li>MultiColumnFilterProxyModel</li><li>SubsetFilterProxyModel</li><li>ValueFilterProxyModel</li><li>RangeFilterProxyModel</li><li>PredicateFilterProxyModel</li></ul> <ul><li>AbstractProxyModelMixin</li><li>QSortFilterProxyModel</li></ul> AbstractProxyModelprettyqt.core.abstractproxymodel <ul><li>FlattenTreeProxyModel</li><li>MeltProxyModel</li><li>ColumnJoinerProxyModel</li></ul> <ul><li>AbstractProxyModelMixin</li><li>QAbstractProxyModel</li></ul> IODeviceMixinprettyqt.core.iodevice <ul><li>IODevice</li><li>FileDeviceMixin</li><li>Buffer</li><li>Process</li><li>BluetoothSocket</li><li>AbstractSocketMixin</li><li>LocalSocket</li></ul> <ul><li>ObjectMixin</li></ul> TemporaryFileprettyqt.core.temporaryfile <ul><li>FileMixin</li><li>QTemporaryFile</li></ul> ByteArrayprettyqt.core.bytearray <ul><li>QByteArray</li></ul> VariantAnimationMixinprettyqt.core.variantanimation <ul><li>VariantAnimation</li><li>PropertyAnimation</li></ul> <ul><li>AbstractAnimationMixin</li></ul> EventLoopprettyqt.core.eventloop <ul><li>ObjectMixin</li><li>QEventLoop</li></ul> ConcatenateTablesProxyModelprettyqt.core.concatenatetablesproxymodel <ul><li>AbstractItemModelMixin</li><li>QConcatenateTablesProxyModel</li></ul> ItemSelectionRangeprettyqt.core.itemselectionrange <ul><li>QItemSelectionRange</li></ul> FileDeviceMixinprettyqt.core.filedeviceInterface for reading from and writing to open files. <ul><li>FileDevice</li><li>FileMixin</li><li>SaveFile</li></ul> <ul><li>IODeviceMixin</li></ul> RegularExpressionMatchprettyqt.core.regularexpressionmatch <ul><li>QRegularExpressionMatch</li></ul> AbstractAnimationMixinprettyqt.core.abstractanimationThe base of all animations. <ul><li>AbstractAnimation</li><li>VariantAnimationMixin</li><li>PauseAnimation</li><li>AnimationGroupMixin</li></ul> <ul><li>ObjectMixin</li></ul> Runnableprettyqt.core.runnable <ul><li><code>Worker</code></li></ul> <ul><li>QRunnable</li></ul> DeadlineTimerprettyqt.core.deadlinetimer <ul><li>QDeadlineTimer</li></ul> ElapsedTimerprettyqt.core.elapsedtimer <ul><li>QElapsedTimer</li></ul> LineFprettyqt.core.linef <ul><li>QLineF</li></ul> XmlStreamReaderprettyqt.core.xmlstreamreader <ul><li>QXmlStreamReader</li></ul> LockFileprettyqt.core.lockfile <ul><li>QLockFile</li></ul> ItemSelectionModelprettyqt.core.itemselectionmodel <ul><li>LinkedSelectionModel</li></ul> <ul><li>ObjectMixin</li><li>QItemSelectionModel</li></ul> VariantAnimationprettyqt.core.variantanimation <ul><li>CursorMoveAnimation</li></ul> <ul><li>VariantAnimationMixin</li><li>QVariantAnimation</li></ul> MetaTypeprettyqt.core.metatype <ul><li>QMetaType</li></ul> Lineprettyqt.core.line <ul><li>QLine</li></ul> DirIteratorprettyqt.core.diriterator <ul><li>QDirIterator</li></ul> FileDeviceprettyqt.core.filedevice <ul><li>FileDeviceMixin</li><li>QFileDevice</li></ul> PropertyAnimationprettyqt.core.propertyanimation <ul><li>SlideAnimation</li><li>TextAnimation</li></ul> <ul><li>VariantAnimationMixin</li><li>QPropertyAnimation</li></ul> ObjectMixinprettyqt.core.object <ul><li>Object</li><li>SocketNotifier</li><li>SharedMemory</li><li>SignalMapper</li><li>TimeLine</li><li>AbstractEventDispatcher</li><li>EventLoop</li><li>AbstractAnimationMixin</li><li><code>TranslatorMixin</code></li><li>CoreApplicationMixin</li><li>...</li></ul> <ul><li>object</li></ul> CryptographicHashprettyqt.core.cryptographichash <ul><li>QCryptographicHash</li></ul> StringListModelMixinprettyqt.core.stringlistmodel <ul><li>StringListModel</li><li>HelpIndexModel</li></ul> <ul><li>AbstractListModelMixin</li></ul> CommandLineOptionprettyqt.core.commandlineoption <ul><li>QCommandLineOption</li></ul> MimeTypeprettyqt.core.mimetype <ul><li>QMimeType</li></ul> DataStreamprettyqt.core.datastream <ul><li>QDataStream</li></ul> ItemSelectionprettyqt.core.itemselection <ul><li>QItemSelection</li></ul> PauseAnimationprettyqt.core.pauseanimation <ul><li>AbstractAnimationMixin</li><li>QPauseAnimation</li></ul> Semaphoreprettyqt.core.semaphore <ul><li>QSemaphore</li></ul> Collatorprettyqt.core.collator <ul><li>QCollator</li></ul> IdentityProxyModelprettyqt.core.identityproxymodel <ul><li>SliceIdentityProxyModel</li><li>TableToListProxyModel</li><li>ColumnOrderProxyModel</li><li>AppearanceProxyModel</li><li>ChangeHeadersProxyModel</li><li>HighlightMouseProxyModel</li></ul> <ul><li>AbstractProxyModelMixin</li><li>QIdentityProxyModel</li></ul> SaveFileprettyqt.core.savefile <ul><li>FileDeviceMixin</li><li>QSaveFile</li></ul> Sizeprettyqt.core.size <ul><li>QSize</li></ul> AbstractItemModelMixinprettyqt.core.abstractitemmodel <ul><li>AbstractItemModel</li><li>AbstractProxyModelMixin</li><li>AbstractListModelMixin</li><li>AbstractTableModelMixin</li><li>ConcatenateTablesProxyModel</li><li>StandardItemModel</li><li>FileSystemModel</li><li>PdfBookmarkModel</li><li>PdfSearchModel</li><li>HelpContentModel</li></ul> <ul><li>ObjectMixin</li></ul> ByteArrayMatcherprettyqt.core.bytearraymatcher <ul><li>QByteArrayMatcher</li></ul> Objectprettyqt.core.object <ul><li><code>Signals</code></li><li>ProxyMapper</li><li>Animator</li><li>BaseEventFilter</li><li><code>Signals</code></li><li><code>EventSignaller</code></li><li>Stalker</li><li>PlaceManager</li></ul> <ul><li>ObjectMixin</li><li>QObject</li></ul> MetaObjectprettyqt.core.metaobjectContains meta-information about Qt objects. <ul><li>object</li></ul> CollatorSortKeyprettyqt.core.collatorsortkey <ul><li>QCollatorSortKey</li></ul> Calendarprettyqt.core._calendar <ul><li>QCalendar</li></ul> TextBoundaryFinderprettyqt.core.textboundaryfinder <ul><li>QTextBoundaryFinder</li></ul> AnimationGroupMixinprettyqt.core.animationgroup <ul><li>AnimationGroup</li><li>ParallelAnimationGroup</li><li>SequentialAnimationGroup</li></ul> <ul><li>AbstractAnimationMixin</li></ul> Mutexprettyqt.core.mutex <ul><li>QMutex</li></ul> StandardPathsprettyqt.core.standardpaths <ul><li>QStandardPaths</li></ul> AbstractItemModelprettyqt.core.abstractitemmodel <ul><li>TreeModel</li><li>NestedModel</li></ul> <ul><li>AbstractItemModelMixin</li><li>QAbstractItemModel</li></ul> Bufferprettyqt.core.buffer <ul><li>IODeviceMixin</li><li>QBuffer</li></ul> FileInfoprettyqt.core.fileinfo <ul><li>QFileInfo</li></ul> LoggingCategoryprettyqt.core.loggingcategory <ul><li>QLoggingCategory</li></ul> Threadprettyqt.core.thread <ul><li>QThread</li></ul> Urlprettyqt.core.url <ul><li><code>SerializeMixin</code></li><li>QUrl</li></ul> SocketNotifierprettyqt.core.socketnotifier <ul><li>ObjectMixin</li><li>QSocketNotifier</li></ul> Marginsprettyqt.core.margins <ul><li>QMargins</li></ul> ModelRoleDataprettyqt.core.modelroledata <ul><li>QModelRoleData</li></ul> JsonDocumentprettyqt.core.jsondocument <ul><li>QJsonDocument</li></ul> CoreApplicationMixinprettyqt.core.coreapplication <ul><li>CoreApplication</li><li>GuiApplicationMixin</li></ul> <ul><li>ObjectMixin</li></ul> ThreadPoolprettyqt.core.threadpool <ul><li>ObjectMixin</li><li>QThreadPool</li></ul> Settingsprettyqt.core.settingsSettings class which wraps everything into a dict to preserve data types. <ul><li><code>Settings_</code></li></ul> AnimationGroupprettyqt.core.animationgroup <ul><li>AnimationGroupMixin</li><li>QAnimationGroup</li></ul> UuidMixinprettyqt.core.uuid <ul><li>Uuid</li><li>BluetoothUuid</li></ul> <ul><li>object</li></ul> Dateprettyqt.core.date <ul><li>QDate</li></ul> CommandLineParserprettyqt.core.commandlineparser <ul><li>QCommandLineParser</li></ul> AbstractProxyModelMixinprettyqt.core.abstractproxymodel <ul><li>AbstractProxyModel</li><li>IdentityProxyModel</li><li>SortFilterProxyModel</li><li>TransposeProxyModel</li></ul> <ul><li>AbstractItemModelMixin</li></ul> Processprettyqt.core.process <ul><li>IODeviceMixin</li><li>QProcess</li></ul> Translatorprettyqt.core.translator <ul><li><code>TranslatorMixin</code></li><li>QTranslator</li></ul> MimeDataprettyqt.core.mimedata <ul><li>ObjectMixin</li><li>QMimeData</li></ul> OperatingSystemVersionprettyqt.core.operatingsystemversion <ul><li>QOperatingSystemVersion</li></ul> SharedMemoryprettyqt.core.sharedmemory <ul><li>ObjectMixin</li><li>QSharedMemory</li></ul> BasicTimerprettyqt.core.basictimer <ul><li>QBasicTimer</li></ul> AbstractTableModelMixinprettyqt.core.abstracttablemodel <ul><li>AbstractTableModel</li></ul> <ul><li>AbstractItemModelMixin</li></ul> FileSelectorprettyqt.core.fileselector <ul><li>ObjectMixin</li><li>QFileSelector</li></ul> TemporaryDirprettyqt.core.temporarydir <ul><li>QTemporaryDir</li></ul> CoreApplicationprettyqt.core.coreapplication <ul><li>CoreApplicationMixin</li><li>QCoreApplication</li></ul> MimeDatabaseprettyqt.core.mimedatabase <ul><li>QMimeDatabase</li></ul> ParallelAnimationGroupprettyqt.core.parallelanimationgroup <ul><li>ZoomAnimation</li></ul> <ul><li>AnimationGroupMixin</li><li>QParallelAnimationGroup</li></ul> MetaEnumprettyqt.core.metaenumMeta-data about an enumerator. <ul><li>object</li></ul> SignalBlockerprettyqt.core.signalblocker <ul><li>QSignalBlocker</li></ul> AbstractListModelprettyqt.core.abstractlistmodel <ul><li>AbstractListModelMixin</li><li>QAbstractListModel</li></ul> AbstractListModelMixinprettyqt.core.abstractlistmodel <ul><li>AbstractListModel</li><li>StringListModelMixin</li></ul> <ul><li>AbstractItemModelMixin</li></ul> FileSystemWatcherprettyqt.core.filesystemwatcher <ul><li>ObjectMixin</li><li>QFileSystemWatcher</li></ul> StorageInfoprettyqt.core.storageinfo <ul><li>QStorageInfo</li></ul> SequentialAnimationGroupprettyqt.core.sequentialanimationgroup <ul><li>AnimationGroupMixin</li><li>QSequentialAnimationGroup</li></ul> TimeLineprettyqt.core.timeline <ul><li>ObjectMixin</li><li>QTimeLine</li></ul> SignalMapperprettyqt.core.signalmapper <ul><li>ObjectMixin</li><li>QSignalMapper</li></ul> Libraryprettyqt.core.library <ul><li>ObjectMixin</li><li>QLibrary</li></ul> VersionNumberprettyqt.core.versionnumber <ul><li>QVersionNumber</li></ul> Uuidprettyqt.core.uuid <ul><li>UuidMixin</li><li>QUuid</li></ul> RandomGeneratorprettyqt.core.randomgenerator <ul><li>QRandomGenerator</li></ul> Propertyprettyqt.core.propertyTemplate class that enables automatic property bindings. <ul><li>Property</li></ul> TransposeProxyModelprettyqt.core.transposeproxymodel <ul><li>AbstractProxyModelMixin</li><li>QTransposeProxyModel</li></ul> StringListModelprettyqt.core.stringlistmodel <ul><li><code>IconModel</code></li></ul> <ul><li>StringListModelMixin</li><li>QStringListModel</li></ul> Timeprettyqt.core._time <ul><li>QTime</li></ul> FileMixinprettyqt.core.file <ul><li>File</li><li>TemporaryFile</li></ul> <ul><li>FileDeviceMixin</li></ul> RegularExpressionMatchIteratorprettyqt.core.regularexpressionmatchiterator <ul><li>QRegularExpressionMatchIterator</li></ul> Timerprettyqt.core.timer <ul><li><code>AnimationTimer</code></li></ul> <ul><li>ObjectMixin</li><li>QTimer</li></ul> UrlQueryprettyqt.core.urlqueryWay to manipulate a key-value pairs in a URL's query. <ul><li>QUrlQuery</li><li><code>MutableMapping</code></li></ul> Localeprettyqt.core._locale <ul><li>QLocale</li></ul> TimeZoneprettyqt.core.timezone <ul><li>QTimeZone</li></ul> MarginsFprettyqt.core.marginsf <ul><li>QMarginsF</li></ul> JsonValueprettyqt.core.jsonvalue <ul><li>QJsonValue</li></ul> RegularExpressionprettyqt.core.regularexpression <ul><li>QRegularExpression</li></ul> LibraryInfoprettyqt.core.libraryinfo <ul><li>QLibraryInfo</li></ul>"},{"location":"qt_modules/core/AbstractAnimation.html","title":"AbstractAnimation","text":"<p>Qt Base Class: QAbstractAnimation</p> <p>Signature: <code>QAbstractAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractAnimationMixin</code>, <code>core.QAbstractAnimation</code></p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>class AbstractAnimation(AbstractAnimationMixin, core.QAbstractAnimation):\npass\n</code></pre>"},{"location":"qt_modules/core/AbstractAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255081872[\"core.AbstractAnimation\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255082832 --&gt; 2103255081872\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254626176 --&gt; 2103255081872\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int"},{"location":"qt_modules/core/AbstractAnimationMixin.html","title":"AbstractAnimationMixin","text":""},{"location":"qt_modules/core/AbstractAnimationMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>The base of all animations.</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>class AbstractAnimationMixin(core.ObjectMixin):\n\"\"\"The base of all animations.\"\"\"\ndef __len__(self):\nreturn self.duration()\ndef __and__(self, other: core.QAbstractAnimation) -&gt; core.SequentialAnimationGroup:\ngroup = core.SequentialAnimationGroup()\ngroup.addAnimation(self)\ngroup.addAnimation(other)\nreturn group\ndef __or__(self, other: core.QAbstractAnimation) -&gt; core.ParallelAnimationGroup:\ngroup = core.ParallelAnimationGroup()\ngroup.addAnimation(self)\ngroup.addAnimation(other)\nreturn group\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"direction\": DIRECTION, \"state\": STATE}\nreturn maps\ndef toggle_direction(self):\nDirection = AbstractAnimation.Direction\nis_forward = self.direction() == Direction.Forward\ndirection = Direction.Backward if is_forward else Direction.Forward\nself.setDirection(direction)\ndef set_direction(self, direction: DirectionStr | core.QAbstractAnimation.Direction):\n\"\"\"Set animation direction.\n        Args:\n            direction: animation direction\n        \"\"\"\nself.setDirection(DIRECTION.get_enum_value(direction))\ndef get_direction(self) -&gt; DirectionStr:\n\"\"\"Get the current animation direction.\n        Returns:\n            animation direction\n        \"\"\"\nreturn DIRECTION.inverse[self.direction()]\ndef get_state(self) -&gt; StateStr:\n\"\"\"Get the current animation state.\n        Returns:\n            animation state\n        \"\"\"\nreturn STATE.inverse[self.state()]\ndef start_animation(\nself,\npolicy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = \"keep\",\ninterval: int = 0,\nsingle_shot: bool = True,\n):\n\"\"\"Start the animation.\n        Args:\n            policy: animation policy\n            interval: time interval / delay for timer\n            single_shot: whether animation gets triggered once or in intervals\n        \"\"\"\nif policy in DELETION_POLICY:\npolicy = DELETION_POLICY[policy]\nif interval:\nfn = functools.partial(self.start, policy)\nself.start_callback_timer(fn, interval, single_shot=single_shot)\nelse:\nself.start(policy)\ndef restart_animation(\nself,\npolicy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = \"keep\",\n):\n\"\"\"Restart the animation.\n        Args:\n            policy: animation policy\n        \"\"\"\nself.stop()\nself.start_animation(policy)\ndef run(self, delay: int = 0, single_shot: bool = True):\nself.start_callback_timer(self.start, delay, single_shot=single_shot)\n</code></pre> Name Children Inherits AbstractAnimationprettyqt.core.abstractanimation <ul><li>AbstractAnimationMixin</li><li>QAbstractAnimation</li></ul> VariantAnimationMixinprettyqt.core.variantanimation <ul><li>VariantAnimation</li><li>PropertyAnimation</li></ul> <ul><li>AbstractAnimationMixin</li></ul> PauseAnimationprettyqt.core.pauseanimation <ul><li>AbstractAnimationMixin</li><li>QPauseAnimation</li></ul> AnimationGroupMixinprettyqt.core.animationgroup <ul><li>AnimationGroup</li><li>ParallelAnimationGroup</li><li>SequentialAnimationGroup</li></ul> <ul><li>AbstractAnimationMixin</li></ul>"},{"location":"qt_modules/core/AbstractAnimationMixin.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.get_direction","title":"<code>get_direction() -&gt; DirectionStr</code>","text":"<p>Get the current animation direction.</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def get_direction(self) -&gt; DirectionStr:\n\"\"\"Get the current animation direction.\n    Returns:\n        animation direction\n    \"\"\"\nreturn DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"qt_modules/core/AbstractAnimationMixin.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Get the current animation state.</p> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Get the current animation state.\n    Returns:\n        animation state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"qt_modules/core/AbstractAnimationMixin.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.restart_animation","title":"<code>restart_animation(policy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = 'keep')</code>","text":"<p>Restart the animation.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy</code> <p>animation policy</p> <code>'keep'</code> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def restart_animation(\nself,\npolicy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = \"keep\",\n):\n\"\"\"Restart the animation.\n    Args:\n        policy: animation policy\n    \"\"\"\nself.stop()\nself.start_animation(policy)\n</code></pre>"},{"location":"qt_modules/core/AbstractAnimationMixin.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.set_direction","title":"<code>set_direction(direction: DirectionStr | core.QAbstractAnimation.Direction)</code>","text":"<p>Set animation direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>DirectionStr | core.QAbstractAnimation.Direction</code> <p>animation direction</p> required Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def set_direction(self, direction: DirectionStr | core.QAbstractAnimation.Direction):\n\"\"\"Set animation direction.\n    Args:\n        direction: animation direction\n    \"\"\"\nself.setDirection(DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"qt_modules/core/AbstractAnimationMixin.html#prettyqt.core.abstractanimation.AbstractAnimationMixin.start_animation","title":"<code>start_animation(policy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = 'keep', interval: int = 0, single_shot: bool = True)</code>","text":"<p>Start the animation.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy</code> <p>animation policy</p> <code>'keep'</code> <code>interval</code> <code>int</code> <p>time interval / delay for timer</p> <code>0</code> <code>single_shot</code> <code>bool</code> <p>whether animation gets triggered once or in intervals</p> <code>True</code> Source code in <code>prettyqt\\core\\abstractanimation.py</code> <pre><code>def start_animation(\nself,\npolicy: DeletionPolicyStr | core.QAbstractAnimation.DeletionPolicy = \"keep\",\ninterval: int = 0,\nsingle_shot: bool = True,\n):\n\"\"\"Start the animation.\n    Args:\n        policy: animation policy\n        interval: time interval / delay for timer\n        single_shot: whether animation gets triggered once or in intervals\n    \"\"\"\nif policy in DELETION_POLICY:\npolicy = DELETION_POLICY[policy]\nif interval:\nfn = functools.partial(self.start, policy)\nself.start_callback_timer(fn, interval, single_shot=single_shot)\nelse:\nself.start(policy)\n</code></pre>"},{"location":"qt_modules/core/AbstractAnimationMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/AbstractEventDispatcher.html","title":"AbstractEventDispatcher","text":"<p>Qt Base Class: QAbstractEventDispatcher</p> <p>Signature: <code>QAbstractEventDispatcher(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractEventDispatcher.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QAbstractEventDispatcher</code></p> <p>Interface to manage Qt's event queue.</p> Source code in <code>prettyqt\\core\\abstracteventdispatcher.py</code> <pre><code>class AbstractEventDispatcher(core.ObjectMixin, core.QAbstractEventDispatcher):\n\"\"\"Interface to manage Qt's event queue.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/AbstractEventDispatcher.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255040592[\"core.AbstractEventDispatcher\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254624256[\"QtCore.QAbstractEventDispatcher\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255040592\n  140736120080256 --&gt; 2103255067472\n  2103254624256 --&gt; 2103255040592\n  2103254677056 --&gt; 2103254624256\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractEventDispatcher.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/AbstractItemModel.html","title":"AbstractItemModel","text":"<p>Qt Base Class: QAbstractItemModel</p> <p>Signature: <code>QAbstractItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractItemModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractItemModelMixin</code>, <code>core.QAbstractItemModel</code></p> <p>The abstract interface for item model classes.</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>class AbstractItemModel(AbstractItemModelMixin, core.QAbstractItemModel):\n\"\"\"The abstract interface for item model classes.\"\"\"\n</code></pre> Name Children Inherits TreeModelprettyqt.itemmodels.treemodel <ul><li>ColumnItemModel</li><li>AstModel</li><li><code>BaseClassTreeModel</code></li><li>ModuleInfoModel</li><li>TupleTreeModel</li><li><code>BaseHierarchyModel</code></li><li>MarkdownModel</li><li><code>ScrollAreaTocModel</code></li></ul> <ul><li>AbstractItemModel</li></ul> NestedModelprettyqt.itemmodels.nestedmodel <ul><li>ListMixin</li><li>ModelMixin</li><li>AbstractItemModel</li></ul>"},{"location":"qt_modules/core/AbstractItemModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254405648[\"core.AbstractItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254372048 --&gt; 2103254405648\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254592576 --&gt; 2103254405648\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractItemModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/AbstractItemModelMixin.html","title":"AbstractItemModelMixin","text":""},{"location":"qt_modules/core/AbstractItemModelMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>class AbstractItemModelMixin(core.ObjectMixin):\nIS_RECURSIVE = False  # for docs\nDELEGATE_DEFAULT = None\nDEFAULT_FLAGS = (\nconstants.DRAG_ENABLED | constants.IS_ENABLED | constants.IS_SELECTABLE\n)\ndef __repr__(self):\nreturn f\"{type(self).__name__}: ({self.rowCount()}, {self.columnCount()})\"\ndef __len__(self) -&gt; int:\nreturn self.rowCount()\ndef __add__(self, other: core.QAbstractItemModel) -&gt; core.ConcatenateTablesProxyModel:\nproxy = core.ConcatenateTablesProxyModel()\nproxy.addSourceModel(self)\nproxy.addSourceModel(other)\nreturn proxy\n@overload\ndef __getitem__(self, index: tuple[int, int] | int) -&gt; core.ModelIndex:\n...\n@overload\ndef __getitem__(\nself, index: tuple[slice, int] | tuple[int, slice] | tuple[slice, slice]\n) -&gt; listdelegators.ListDelegator[core.ModelIndex]:\n...\ndef __getitem__(\nself, index: tuple[int | slice, int | slice]\n) -&gt; core.ModelIndex | listdelegators.ListDelegator[core.ModelIndex]:\n# TODO: do proxies need mapToSource here?\nrowcount = self.rowCount()\ncolcount = self.columnCount()\nmatch index:\ncase int() as row, int() as col:\nif row &gt;= rowcount or col &gt;= rowcount:\nraise IndexError(index)\nreturn self.index(row, col)\ncase (row, col):\nindexes = [\nself.index(i, j)\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount)\n]\nreturn listdelegators.ListDelegator(indexes)\ncase int() as row:\nif row &gt;= rowcount:\nraise IndexError(index)\n# this here breaks PySide6 IPython test...\nreturn self.index(row, 0)\ncase _:\nraise TypeError(index)\ndef set_data(\nself,\nindex: tuple[int | slice, int | slice] | core.ModelIndex,\nvalue: Any,\nrole=constants.EDIT_ROLE,\n):\nmatch index:\ncase core.ModelIndex():\nself.setData(index, value, role)\ncase (row, col):\nrowcount = self.rowCount()\ncolcount = self.columnCount()\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount):\nself.setData(self.index(i, j), value, role)\ncase _:\nraise TypeError(index)\ndef check_index(\nself,\nindex: core.ModelIndex,\n*,\nindex_is_valid: bool = False,\ndo_not_use_parent: bool = False,\nparent_is_invalid: bool = False,\n) -&gt; bool:\nflag = core.QAbstractItemModel.CheckIndexOption.NoOption\nif index_is_valid:\nflag |= core.QAbstractItemModel.CheckIndexOption.IndexIsValid\nif do_not_use_parent:\nflag |= core.QAbstractItemModel.CheckIndexOption.DoNotUseParent\nif parent_is_invalid:\nflag |= core.QAbstractItemModel.CheckIndexOption.ParentIsInvalid\ncheck_flag = core.QAbstractItemModel.CheckIndexOption(0) | flag\nreturn self.checkIndex(index, check_flag)\n@contextlib.contextmanager\ndef change_layout(self):\n\"\"\"Context manager to change the layout.\n        wraps calls with correct signals\n        emitted at beginning: layoutAboutToBeChanged\n        emitted at end: layoutChanged\n        \"\"\"\nself.layoutAboutToBeChanged.emit()\nyield None\nself.layoutChanged.emit()\n@contextlib.contextmanager\ndef reset_model(self):\n\"\"\"Context manager to reset the model.\n        wraps calls with correct signals\n        emitted at beginning: beginResetModel\n        emitted at end: endResetModel\n        \"\"\"\nself.beginResetModel()\nyield None\nself.endResetModel()\ndef get_column_type(\nself,\ncolumn: int,\n*,\nrows_to_check: int = 10,\nrole=constants.DISPLAY_ROLE,\n) -&gt; type | None:\n\"\"\"Guess column data type by checking values of first rows with given role.\"\"\"\nto_check = min(rows_to_check, self.rowCount())\nif to_check == 0:\nreturn None\n# cant combine these or make them a generator, so we do two list comps.\nindexes = [self.index(row, column) for row in range(to_check)]\nvalues = [self.data(i, role=role) for i in indexes]\nif all(isinstance(i, bool) for i in values):\nreturn bool\nif all(isinstance(i, str) for i in values):\nreturn str\nif all(isinstance(i, int) for i in values):\nreturn int\nif all(isinstance(i, float) for i in values):\nreturn float\ncheck_values = [self.data(i, role=constants.CHECKSTATE_ROLE) for i in indexes]\nreturn bool if None not in check_values else None\ndef update_row(self, row: int):\nstart_index = self.index(row, 0)\nend_index = self.index(row, self.columnCount() - 1)\nself.dataChanged.emit(start_index, end_index)\ndef update_all(self):\ntop_left = self.index(0, 0)\nbottom_right = self.index(self.rowCount() - 1, self.columnCount() - 1)\nself.dataChanged.emit(top_left, bottom_right)\n@contextlib.contextmanager\ndef remove_row(self, row: int, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nself.beginRemoveRows(parent, row, row)\nyield None\nself.endRemoveRows()\n@contextlib.contextmanager\ndef remove_rows(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: core.ModelIndex | None = None,\n):\nparent = core.ModelIndex() if parent is None else parent\nfirst = first or 0\nlast = last if last is not None else self.rowCount()\nself.beginRemoveRows(parent, first, last)\nyield None\nself.endRemoveRows()\n@contextlib.contextmanager\ndef remove_columns(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: core.ModelIndex | None = None,\n):\nparent = core.ModelIndex() if parent is None else parent\nfirst = first or 0\nlast = last if last is not None else self.rowCount()\nself.beginRemoveColumns(parent, first, last)\nyield None\nself.endRemoveColumns()\n@contextlib.contextmanager\ndef insert_row(self, row: int, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nself.beginInsertRows(parent, row, row)\nyield None\nself.endInsertRows()\n@contextlib.contextmanager\ndef insert_rows(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: core.ModelIndex | None = None,\n):\nparent = core.ModelIndex() if parent is None else parent\nfirst = first or 0\nlast = last if last is not None else self.rowCount()\nself.beginInsertRows(parent, first, last)\nyield None\nself.endInsertRows()\n@contextlib.contextmanager\ndef append_rows(self, num_rows: int, parent: core.ModelIndex | None = None):\nparent = core.ModelIndex() if parent is None else parent\nrow_count = self.rowCount()\nself.beginInsertRows(parent, row_count, row_count + num_rows - 1)\nyield None\nself.endInsertRows()\n@contextlib.contextmanager\ndef insert_columns(\nself,\nfirst: int | None = None,\nlast: int | None = None,\nparent: core.ModelIndex | None = None,\n):\nparent = core.ModelIndex() if parent is None else parent\nfirst = first or 0\nlast = last if last is not None else self.rowCount()\nself.beginInsertColumns(parent, first, last)\nyield None\nself.endInsertColumns()\ndef force_reset(self):\nself.beginResetModel()\nself.endResetModel()\ndef force_layoutchange(self):\nself.layoutAboutToBeChanged.emit()\nself.layoutChanged.emit()\ndef get_role_names(self) -&gt; bidict[int, str]:\nreturn bidict({i: v.data().decode() for i, v in self.roleNames().items()})\ndef get_breadcrumbs_path(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; list[str]:\n\"\"\"Get the path for the given index.\n        Returns a list containing data of all indexes up to the root for given role.\n        \"\"\"\npieces = [index.data(role)]\nwhile (index := index.parent()).isValid():\npieces.insert(0, index.data(role))\nreturn pieces\ndef iter_tree(\nself,\nparent_index: core.ModelIndex | None = None,\n*,\ndepth: int | None = None,\nfetch_more: bool = False,\n) -&gt; Iterator[core.ModelIndex]:\n\"\"\"Iter through all indexes of the model tree.\n        Arguments:\n            parent_index: parent index\n            depth: maximum iteration depth\n            fetch_more: call fetchMore for all indexes until canFetchMore returns False\n        \"\"\"\nif parent_index is None:\n# TODO: does this always equal AbstractItemView.rootIndex()?\n# parent_index = self.index(0, 0)\nparent_index = core.ModelIndex()\nif parent_index.isValid():\nyield parent_index\nif fetch_more:\nwhile self.canFetchMore(parent_index):\nself.fetchMore(parent_index)\nif depth is not None and (depth := depth - 1) &lt; 0:\nreturn\nfor i in range(self.rowCount(parent_index)):\nchild_index = self.index(i, 0, parent_index)\nyield from self.iter_tree(child_index, depth=depth, fetch_more=fetch_more)\ndef search_tree(\nself,\nvalue: Any,\n*,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nparent_index: core.ModelIndex | None = None,\nmax_results: int | None = None,\ndepth: int | None = None,\n) -&gt; listdelegators.ListDelegator[core.ModelIndex]:\n\"\"\"Search the tree for indexes with a given value in given role.\n        Compared to QAbstractItemModel.match, this method allows to set a maximum\n        search depth and passing several values to search for as a list.\n        Arguments:\n            value: Item or list of items to search for.\n            role: Index role to search in.\n            parent_index: start index for searching. If None, whole tree is searched.\n            max_results: stop searching after x amount of hits. 'None' means no limit.\n            depth: search depth. Search depth. 'None' means no limit.\n        \"\"\"\nresults = []\n# This makes it impossible to search for lists. I think thats fine.\nif not isinstance(value, list):\nvalue = [value]\nfor idx in self.iter_tree(parent_index, depth=depth):\nif self.data(idx, role) in value:\nresults.append(idx)\nif len(results) == max_results:\nbreak\nreturn listdelegators.ListDelegator(results)\ndef get_child_indexes(\nself, index: core.ModelIndex\n) -&gt; listdelegators.ListDelegator[core.ModelIndex]:\n\"\"\"Get all child indexes for given index (first column only).\n        To get indexes recursively, use iter_tree.\n        Arguments:\n            index: ModelIndex to get children from\n        \"\"\"\nindexes = [self.index(i, 0, index) for i in range(self.rowCount(index))]\nreturn listdelegators.ListDelegator(indexes)\ndef get_index_key(\nself,\nindex: core.ModelIndex,\n*,\ninclude_column: bool = False,\nparent_index: core.ModelIndex | None = None,\n) -&gt; tuple[tuple[int, int], ...]:\n\"\"\"Return a key tuple for given ModelIndex.\n        The key tuple consists either of row integers or (row, column) indices\n        describing the index position from top to bottom.\n        Arguments:\n            index: ModelIndex to get a key for\n            include_column: whether to include the column in the index key.\n            parent_index: Get key up to given ModelIndex. By default, get key up to root.\n        \"\"\"\nkey_path = []\nparent = index\nwhile parent.isValid() and parent != parent_index:\nkey = (parent.row(), parent.column()) if include_column else parent.row()\nkey_path.append(key)\nparent = parent.parent()\nreturn tuple(reversed(key_path))\ndef index_from_key(\nself,\nkey_path: Sequence[tuple[int, int] | int],\n*,\nparent_index: core.ModelIndex | None = None,\n) -&gt; core.ModelIndex:\n\"\"\"Return a  ModelIndex for the given key path.\n        Arguments:\n            key_path: Key path to get an index for.\n                      Should be a sequence of either (row, column)  or row indices\n            parent_index: ModelIndex to start indexing from. Defaults to root index.\n        \"\"\"\nreturn modelhelpers.index_from_key(self, key_path, parent_index=parent_index)\n@staticmethod\ndef to_checkstate(value: bool):\nreturn constants.CheckState.Checked if value else constants.CheckState.Unchecked\ndef get_header_index_for_value(\nself,\nlabel,\norientation: constants.Orientation\n| constants.OrientationStr = constants.HORIZONTAL,\n*,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; int | None:\no = constants.ORIENTATION.get_enum_value(orientation)\ncount = self.columnCount() if o == constants.HORIZONTAL else self.rowCount()\nreturn next(\n(i for i in range(count) if self.headerData(i, o, role) == label), None\n)\ndef get_table_data(\nself,\n*,\ninclude_index: bool = False,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nx_range: slice | int | None = None,\ny_range: slice | int | None = None,\nparent_index: core.ModelIndex | None = None,\nuse_checkstate_role: bool = False,\n):\nparent_index = parent_index or core.ModelIndex()\n# if self.canFetchMore(parent_index):\n#     self.fetchMore(parent_index)\nmatch x_range:\ncase None:\ncolrange = range(self.columnCount(parent_index))\ncase slice():\nstop = x_range.stop or self.columnCount(parent_index)\ncolrange = range(x_range.start or 0, stop, x_range.step or 1)\ncase int():\ncolrange = range(x_range, x_range + 1)\ncase _:\nraise TypeError(x_range)\nmatch y_range:\ncase None:\nrowrange = range(self.rowCount(parent_index))\ncase slice():\nstop = y_range.stop or self.rowCount(parent_index)\nrowrange = range(y_range.start or 0, stop, y_range.step or 1)\ncase int():\nrowrange = range(y_range, y_range + 1)\ncase _:\nraise TypeError(y_range)\ndata = [\n[self.index(i, j, parent_index).data(role) for j in colrange]\nfor i in rowrange\n]\nif use_checkstate_role:\ncheck_data, _, __ = self.get_table_data(\nrole=constants.CHECKSTATE_ROLE,\nx_range=x_range,\ny_range=y_range,\nparent_index=parent_index,\n)\nfor i, row in enumerate(data):\nfor j, _column in enumerate(row):\nif check_data[i][j] is not None:\ndata[i][j] = bool(check_data[i][j])\nh_header = [self.headerData(i, constants.HORIZONTAL) for i in colrange]\nv_header = (\n[self.headerData(i, constants.VERTICAL) for i in rowrange]\nif include_index\nelse None\n)\nreturn data, h_header, v_header\ndef to_dataframe(self, **kwargs):\nimport pandas as pd\ndata, h_header, v_header = self.get_table_data(**kwargs)\nreturn pd.DataFrame(data=data, columns=h_header, index=v_header)\n</code></pre> Name Children Inherits AbstractItemModelprettyqt.core.abstractitemmodel <ul><li>TreeModel</li><li>NestedModel</li></ul> <ul><li>AbstractItemModelMixin</li><li>QAbstractItemModel</li></ul> AbstractProxyModelMixinprettyqt.core.abstractproxymodel <ul><li>AbstractProxyModel</li><li>IdentityProxyModel</li><li>SortFilterProxyModel</li><li>TransposeProxyModel</li></ul> <ul><li>AbstractItemModelMixin</li></ul> AbstractListModelMixinprettyqt.core.abstractlistmodel <ul><li>AbstractListModel</li><li>StringListModelMixin</li></ul> <ul><li>AbstractItemModelMixin</li></ul> AbstractTableModelMixinprettyqt.core.abstracttablemodel <ul><li>AbstractTableModel</li></ul> <ul><li>AbstractItemModelMixin</li></ul> ConcatenateTablesProxyModelprettyqt.core.concatenatetablesproxymodel <ul><li>AbstractItemModelMixin</li><li>QConcatenateTablesProxyModel</li></ul> StandardItemModelprettyqt.gui.standarditemmodel <ul><li>AbstractItemModelMixin</li><li>QStandardItemModel</li></ul> FileSystemModelprettyqt.widgets.filesystemmodel <ul><li><code>FileSystemModelMixin</code></li><li>AbstractItemModelMixin</li><li>QFileSystemModel</li></ul> PdfBookmarkModelprettyqt.pdf.pdfbookmarkmodel <ul><li>AbstractItemModelMixin</li><li>QPdfBookmarkModel</li></ul> PdfSearchModelprettyqt.pdf.pdfsearchmodel <ul><li>AbstractItemModelMixin</li><li>QPdfSearchModel</li></ul> HelpContentModelprettyqt.qthelp.helpcontentmodelModel that supplies content to views. <ul><li>AbstractItemModelMixin</li></ul>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.change_layout","title":"<code>change_layout()</code>","text":"<p>Context manager to change the layout.</p> <p>wraps calls with correct signals emitted at beginning: layoutAboutToBeChanged emitted at end: layoutChanged</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef change_layout(self):\n\"\"\"Context manager to change the layout.\n    wraps calls with correct signals\n    emitted at beginning: layoutAboutToBeChanged\n    emitted at end: layoutChanged\n    \"\"\"\nself.layoutAboutToBeChanged.emit()\nyield None\nself.layoutChanged.emit()\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_breadcrumbs_path","title":"<code>get_breadcrumbs_path(index: core.ModelIndex, role: constants.ItemDataRole = constants.DISPLAY_ROLE) -&gt; list[str]</code>","text":"<p>Get the path for the given index.</p> <p>Returns a list containing data of all indexes up to the root for given role.</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_breadcrumbs_path(\nself,\nindex: core.ModelIndex,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\n) -&gt; list[str]:\n\"\"\"Get the path for the given index.\n    Returns a list containing data of all indexes up to the root for given role.\n    \"\"\"\npieces = [index.data(role)]\nwhile (index := index.parent()).isValid():\npieces.insert(0, index.data(role))\nreturn pieces\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_child_indexes","title":"<code>get_child_indexes(index: core.ModelIndex) -&gt; listdelegators.ListDelegator[core.ModelIndex]</code>","text":"<p>Get all child indexes for given index (first column only).</p> <p>To get indexes recursively, use iter_tree.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>core.ModelIndex</code> <p>ModelIndex to get children from</p> required Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_child_indexes(\nself, index: core.ModelIndex\n) -&gt; listdelegators.ListDelegator[core.ModelIndex]:\n\"\"\"Get all child indexes for given index (first column only).\n    To get indexes recursively, use iter_tree.\n    Arguments:\n        index: ModelIndex to get children from\n    \"\"\"\nindexes = [self.index(i, 0, index) for i in range(self.rowCount(index))]\nreturn listdelegators.ListDelegator(indexes)\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_column_type","title":"<code>get_column_type(column: int, *, rows_to_check: int = 10, role: int = constants.DISPLAY_ROLE) -&gt; type | None</code>","text":"<p>Guess column data type by checking values of first rows with given role.</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_column_type(\nself,\ncolumn: int,\n*,\nrows_to_check: int = 10,\nrole=constants.DISPLAY_ROLE,\n) -&gt; type | None:\n\"\"\"Guess column data type by checking values of first rows with given role.\"\"\"\nto_check = min(rows_to_check, self.rowCount())\nif to_check == 0:\nreturn None\n# cant combine these or make them a generator, so we do two list comps.\nindexes = [self.index(row, column) for row in range(to_check)]\nvalues = [self.data(i, role=role) for i in indexes]\nif all(isinstance(i, bool) for i in values):\nreturn bool\nif all(isinstance(i, str) for i in values):\nreturn str\nif all(isinstance(i, int) for i in values):\nreturn int\nif all(isinstance(i, float) for i in values):\nreturn float\ncheck_values = [self.data(i, role=constants.CHECKSTATE_ROLE) for i in indexes]\nreturn bool if None not in check_values else None\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.get_index_key","title":"<code>get_index_key(index: core.ModelIndex, *, include_column: bool = False, parent_index: core.ModelIndex | None = None) -&gt; tuple[tuple[int, int], ...]</code>","text":"<p>Return a key tuple for given ModelIndex.</p> <p>The key tuple consists either of row integers or (row, column) indices describing the index position from top to bottom.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>core.ModelIndex</code> <p>ModelIndex to get a key for</p> required <code>include_column</code> <code>bool</code> <p>whether to include the column in the index key.</p> <code>False</code> <code>parent_index</code> <code>core.ModelIndex | None</code> <p>Get key up to given ModelIndex. By default, get key up to root.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def get_index_key(\nself,\nindex: core.ModelIndex,\n*,\ninclude_column: bool = False,\nparent_index: core.ModelIndex | None = None,\n) -&gt; tuple[tuple[int, int], ...]:\n\"\"\"Return a key tuple for given ModelIndex.\n    The key tuple consists either of row integers or (row, column) indices\n    describing the index position from top to bottom.\n    Arguments:\n        index: ModelIndex to get a key for\n        include_column: whether to include the column in the index key.\n        parent_index: Get key up to given ModelIndex. By default, get key up to root.\n    \"\"\"\nkey_path = []\nparent = index\nwhile parent.isValid() and parent != parent_index:\nkey = (parent.row(), parent.column()) if include_column else parent.row()\nkey_path.append(key)\nparent = parent.parent()\nreturn tuple(reversed(key_path))\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.index_from_key","title":"<code>index_from_key(key_path: Sequence[tuple[int, int] | int], *, parent_index: core.ModelIndex | None = None) -&gt; core.ModelIndex</code>","text":"<p>Return a  ModelIndex for the given key path.</p> <p>Parameters:</p> Name Type Description Default <code>key_path</code> <code>Sequence[tuple[int, int] | int]</code> <p>Key path to get an index for.       Should be a sequence of either (row, column)  or row indices</p> required <code>parent_index</code> <code>core.ModelIndex | None</code> <p>ModelIndex to start indexing from. Defaults to root index.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def index_from_key(\nself,\nkey_path: Sequence[tuple[int, int] | int],\n*,\nparent_index: core.ModelIndex | None = None,\n) -&gt; core.ModelIndex:\n\"\"\"Return a  ModelIndex for the given key path.\n    Arguments:\n        key_path: Key path to get an index for.\n                  Should be a sequence of either (row, column)  or row indices\n        parent_index: ModelIndex to start indexing from. Defaults to root index.\n    \"\"\"\nreturn modelhelpers.index_from_key(self, key_path, parent_index=parent_index)\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.iter_tree","title":"<code>iter_tree(parent_index: core.ModelIndex | None = None, *, depth: int | None = None, fetch_more: bool = False) -&gt; Iterator[core.ModelIndex]</code>","text":"<p>Iter through all indexes of the model tree.</p> <p>Parameters:</p> Name Type Description Default <code>parent_index</code> <code>core.ModelIndex | None</code> <p>parent index</p> <code>None</code> <code>depth</code> <code>int | None</code> <p>maximum iteration depth</p> <code>None</code> <code>fetch_more</code> <code>bool</code> <p>call fetchMore for all indexes until canFetchMore returns False</p> <code>False</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def iter_tree(\nself,\nparent_index: core.ModelIndex | None = None,\n*,\ndepth: int | None = None,\nfetch_more: bool = False,\n) -&gt; Iterator[core.ModelIndex]:\n\"\"\"Iter through all indexes of the model tree.\n    Arguments:\n        parent_index: parent index\n        depth: maximum iteration depth\n        fetch_more: call fetchMore for all indexes until canFetchMore returns False\n    \"\"\"\nif parent_index is None:\n# TODO: does this always equal AbstractItemView.rootIndex()?\n# parent_index = self.index(0, 0)\nparent_index = core.ModelIndex()\nif parent_index.isValid():\nyield parent_index\nif fetch_more:\nwhile self.canFetchMore(parent_index):\nself.fetchMore(parent_index)\nif depth is not None and (depth := depth - 1) &lt; 0:\nreturn\nfor i in range(self.rowCount(parent_index)):\nchild_index = self.index(i, 0, parent_index)\nyield from self.iter_tree(child_index, depth=depth, fetch_more=fetch_more)\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.reset_model","title":"<code>reset_model()</code>","text":"<p>Context manager to reset the model.</p> <p>wraps calls with correct signals emitted at beginning: beginResetModel emitted at end: endResetModel</p> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>@contextlib.contextmanager\ndef reset_model(self):\n\"\"\"Context manager to reset the model.\n    wraps calls with correct signals\n    emitted at beginning: beginResetModel\n    emitted at end: endResetModel\n    \"\"\"\nself.beginResetModel()\nyield None\nself.endResetModel()\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#prettyqt.core.abstractitemmodel.AbstractItemModelMixin.search_tree","title":"<code>search_tree(value: Any, *, role: constants.ItemDataRole = constants.DISPLAY_ROLE, parent_index: core.ModelIndex | None = None, max_results: int | None = None, depth: int | None = None) -&gt; listdelegators.ListDelegator[core.ModelIndex]</code>","text":"<p>Search the tree for indexes with a given value in given role.</p> <p>Compared to QAbstractItemModel.match, this method allows to set a maximum search depth and passing several values to search for as a list.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Item or list of items to search for.</p> required <code>role</code> <code>constants.ItemDataRole</code> <p>Index role to search in.</p> <code>constants.DISPLAY_ROLE</code> <code>parent_index</code> <code>core.ModelIndex | None</code> <p>start index for searching. If None, whole tree is searched.</p> <code>None</code> <code>max_results</code> <code>int | None</code> <p>stop searching after x amount of hits. 'None' means no limit.</p> <code>None</code> <code>depth</code> <code>int | None</code> <p>search depth. Search depth. 'None' means no limit.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractitemmodel.py</code> <pre><code>def search_tree(\nself,\nvalue: Any,\n*,\nrole: constants.ItemDataRole = constants.DISPLAY_ROLE,\nparent_index: core.ModelIndex | None = None,\nmax_results: int | None = None,\ndepth: int | None = None,\n) -&gt; listdelegators.ListDelegator[core.ModelIndex]:\n\"\"\"Search the tree for indexes with a given value in given role.\n    Compared to QAbstractItemModel.match, this method allows to set a maximum\n    search depth and passing several values to search for as a list.\n    Arguments:\n        value: Item or list of items to search for.\n        role: Index role to search in.\n        parent_index: start index for searching. If None, whole tree is searched.\n        max_results: stop searching after x amount of hits. 'None' means no limit.\n        depth: search depth. Search depth. 'None' means no limit.\n    \"\"\"\nresults = []\n# This makes it impossible to search for lists. I think thats fine.\nif not isinstance(value, list):\nvalue = [value]\nfor idx in self.iter_tree(parent_index, depth=depth):\nif self.data(idx, role) in value:\nresults.append(idx)\nif len(results) == max_results:\nbreak\nreturn listdelegators.ListDelegator(results)\n</code></pre>"},{"location":"qt_modules/core/AbstractItemModelMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/AbstractListModel.html","title":"AbstractListModel","text":"<p>Qt Base Class: QAbstractListModel</p> <p>Signature: <code>QAbstractListModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractListModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractListModelMixin</code>, <code>core.QAbstractListModel</code></p> <p>Abstract model that can be subclassed to create one-dimensional list models.</p> Source code in <code>prettyqt\\core\\abstractlistmodel.py</code> <pre><code>class AbstractListModel(AbstractListModelMixin, core.QAbstractListModel):\n\"\"\"Abstract model that can be subclassed to create one-dimensional list models.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/AbstractListModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254423888[\"core.AbstractListModel\"]\n  2103254407568[\"core.AbstractListModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254590656[\"QtCore.QAbstractListModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254407568 --&gt; 2103254423888\n  2103254372048 --&gt; 2103254407568\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254590656 --&gt; 2103254423888\n  2103254592576 --&gt; 2103254590656\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractListModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/AbstractListModelMixin.html","title":"AbstractListModelMixin","text":""},{"location":"qt_modules/core/AbstractListModelMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\core\\abstractlistmodel.py</code> <pre><code>class AbstractListModelMixin(core.AbstractItemModelMixin):\npass\n</code></pre> Name Children Inherits AbstractListModelprettyqt.core.abstractlistmodel <ul><li>AbstractListModelMixin</li><li>QAbstractListModel</li></ul> StringListModelMixinprettyqt.core.stringlistmodel <ul><li>StringListModel</li><li>HelpIndexModel</li></ul> <ul><li>AbstractListModelMixin</li></ul>"},{"location":"qt_modules/core/AbstractListModelMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254407568[\"core.AbstractListModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254372048 --&gt; 2103254407568\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/AbstractNativeEventFilter.html","title":"AbstractNativeEventFilter","text":"<p>Qt Base Class: QAbstractNativeEventFilter</p> <p>Signature: <code>QAbstractNativeEventFilter(self) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractNativeEventFilter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QAbstractNativeEventFilter</code></p> <p>Interface for receiving native events, such as MSG or XCB event structs.</p> Source code in <code>prettyqt\\core\\abstractnativeeventfilter.py</code> <pre><code>class AbstractNativeEventFilter(QtCore.QAbstractNativeEventFilter):\n\"\"\"Interface for receiving native events, such as MSG or XCB event structs.\"\"\"\ndef install(self):\n# theres also QCoreApplication::installNativeEventFilter. Not sure abt difference\nQtCore.QAbstractEventDispatcher.instance().installNativeEventFilter(self)\n</code></pre>"},{"location":"qt_modules/core/AbstractNativeEventFilter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255031952[\"core.AbstractNativeEventFilter\"]\n  2103254617536[\"QtCore.QAbstractNativeEventFilter\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254617536 --&gt; 2103255031952\n  2103206874128 --&gt; 2103254617536\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractProxyModel.html","title":"AbstractProxyModel","text":"<p>Qt Base Class: QAbstractProxyModel</p> <p>Signature: <code>QAbstractProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractProxyModelMixin</code>, <code>core.QAbstractProxyModel</code></p> <p>Base class for proxy item models that can do sorting, filtering and processing.</p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>class AbstractProxyModel(AbstractProxyModelMixin, core.QAbstractProxyModel):\n\"\"\"Base class for proxy item models that can do sorting, filtering and processing.\"\"\"\n</code></pre> Name Children Inherits FlattenTreeProxyModelprettyqt.itemmodels.proxies.flattentreeproxymodel <ul><li>AbstractProxyModel</li></ul> MeltProxyModelprettyqt.itemmodels.proxies.meltproxymodel <ul><li>AbstractProxyModel</li></ul> ColumnJoinerProxyModelprettyqt.itemmodels.proxies.columnjoinerproxymodel <ul><li>AbstractProxyModel</li></ul>"},{"location":"qt_modules/core/AbstractProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254410448[\"core.AbstractProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254406608 --&gt; 2103254410448\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254619456 --&gt; 2103254410448\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel"},{"location":"qt_modules/core/AbstractProxyModelMixin.html","title":"AbstractProxyModelMixin","text":""},{"location":"qt_modules/core/AbstractProxyModelMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>class AbstractProxyModelMixin(core.AbstractItemModelMixin):\nID = \"\"\nICON = \"mdi.table-edit\"\ndef __pretty__(\nself, fmt: Callable[[Any], Any], **kwargs: Any\n) -&gt; Generator[Any, None, None]:\nyield f\"{type(self).__name__}(\"\nyield 1\n# yield 1\nyield f\"objectName={self.objectName()}\"\nyield 0\nfor k, v in self.get_properties(include_super=False).items():\nyield f\"{k}={v!r}\"\nyield 0\nmodel = self.sourceModel()\nif hasattr(model, \"__pretty__\"):\nyield from model.__pretty__(fmt, **kwargs)\nyield 0\nyield -1\n# yield -1\nyield \")\"\ndef parent(self, *args):\n# workaround: PyQt6 QIdentityproxymodel.parent() missing\nif not args and qt.API == \"pyqt6\":\nreturn core.QAbstractProxyModel.parent(self)\nreturn super().parent(*args)\ndef first_item_index(self) -&gt; core.ModelIndex:\n\"\"\"Return the first child of the root item.\"\"\"\n# We cannot just call the same function of the source model because the first node\n# there may be hidden.\nproxy_root_index = self.mapFromSource(core.ModelIndex())\nreturn self.index(0, 0, proxy_root_index)\ndef get_source_model(self, skip_proxies: bool = True):\nmodel = self.sourceModel()\nif skip_proxies:\nwhile isinstance(model, core.QAbstractProxyModel):\nmodel = model.sourceModel()\nreturn model\ndef remove(self):\nparent = self.parent()\nmodels = parent.get_models()\nidx = models.index(self)\nif idx == len(models) - 1:\nparent.set_model(models[idx - 1])\nself.setSourceModel(None)\nelif idx == 0 and len(models) &gt; 0:\nparent.set_model(models[1])\nelif idx &gt; 0 and len(models) &gt; 2:\nmodels[idx - 1].setSourceModel(models[idx + 1])\nself.setSourceModel(None)\ndef get_source_mapping(self, leaves_only: bool = False):\n_source_key = []\n_source_offset = {}\nsource = self.sourceModel()\ndef create_mapping(\nmodel,\nindex: core.ModelIndex,\nkey_path: tuple[int, ...],\nleaves_only: bool = False,\n):\nif (rowcount := model.rowCount(index)) &gt; 0:\nif not leaves_only:\n_source_offset[key_path] = len(_source_offset)\n_source_key.append(key_path)\nfor i in range(rowcount):\nchild = model.index(i, 0, index)\ncreate_mapping(model, child, (*key_path, i), leaves_only=leaves_only)\nelse:\n_source_offset[key_path] = len(_source_offset)\n_source_key.append(key_path)\nfor i in range(source.rowCount()):\ncreate_mapping(source, source.index(i, 0), (i,), leaves_only=leaves_only)\nreturn _source_key, _source_offset\ndef source_index_from_key(\nself,\nkey_path: Sequence[tuple[int, int] | int],\nparent_index: core.ModelIndex | None = None,\n) -&gt; core.ModelIndex:\n\"\"\"Return a QModelIndex of the sourceModel for the given key.\n        Arguments:\n            key_path: Key path to get an index for.\n                      Should be a sequence of either (row, column)  or row indices\n            parent_index: ModelIndex to start indexing from. Defaults to root index.\n        \"\"\"\nmodel = self.sourceModel()\nreturn modelhelpers.index_from_key(model, key_path, parent_index)\n</code></pre> Name Children Inherits AbstractProxyModelprettyqt.core.abstractproxymodel <ul><li>FlattenTreeProxyModel</li><li>MeltProxyModel</li><li>ColumnJoinerProxyModel</li></ul> <ul><li>AbstractProxyModelMixin</li><li>QAbstractProxyModel</li></ul> IdentityProxyModelprettyqt.core.identityproxymodel <ul><li>SliceIdentityProxyModel</li><li>TableToListProxyModel</li><li>ColumnOrderProxyModel</li><li>AppearanceProxyModel</li><li>ChangeHeadersProxyModel</li><li>HighlightMouseProxyModel</li></ul> <ul><li>AbstractProxyModelMixin</li><li>QIdentityProxyModel</li></ul> SortFilterProxyModelprettyqt.core.sortfilterproxymodel <ul><li>FuzzyFilterProxyModel</li><li>MultiColumnFilterProxyModel</li><li>SubsetFilterProxyModel</li><li>ValueFilterProxyModel</li><li>RangeFilterProxyModel</li><li>PredicateFilterProxyModel</li></ul> <ul><li>AbstractProxyModelMixin</li><li>QSortFilterProxyModel</li></ul> TransposeProxyModelprettyqt.core.transposeproxymodel <ul><li>AbstractProxyModelMixin</li><li>QTransposeProxyModel</li></ul>"},{"location":"qt_modules/core/AbstractProxyModelMixin.html#prettyqt.core.abstractproxymodel.AbstractProxyModelMixin.first_item_index","title":"<code>first_item_index() -&gt; core.ModelIndex</code>","text":"<p>Return the first child of the root item.</p> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>def first_item_index(self) -&gt; core.ModelIndex:\n\"\"\"Return the first child of the root item.\"\"\"\n# We cannot just call the same function of the source model because the first node\n# there may be hidden.\nproxy_root_index = self.mapFromSource(core.ModelIndex())\nreturn self.index(0, 0, proxy_root_index)\n</code></pre>"},{"location":"qt_modules/core/AbstractProxyModelMixin.html#prettyqt.core.abstractproxymodel.AbstractProxyModelMixin.source_index_from_key","title":"<code>source_index_from_key(key_path: Sequence[tuple[int, int] | int], parent_index: core.ModelIndex | None = None) -&gt; core.ModelIndex</code>","text":"<p>Return a QModelIndex of the sourceModel for the given key.</p> <p>Parameters:</p> Name Type Description Default <code>key_path</code> <code>Sequence[tuple[int, int] | int]</code> <p>Key path to get an index for.       Should be a sequence of either (row, column)  or row indices</p> required <code>parent_index</code> <code>core.ModelIndex | None</code> <p>ModelIndex to start indexing from. Defaults to root index.</p> <code>None</code> Source code in <code>prettyqt\\core\\abstractproxymodel.py</code> <pre><code>def source_index_from_key(\nself,\nkey_path: Sequence[tuple[int, int] | int],\nparent_index: core.ModelIndex | None = None,\n) -&gt; core.ModelIndex:\n\"\"\"Return a QModelIndex of the sourceModel for the given key.\n    Arguments:\n        key_path: Key path to get an index for.\n                  Should be a sequence of either (row, column)  or row indices\n        parent_index: ModelIndex to start indexing from. Defaults to root index.\n    \"\"\"\nmodel = self.sourceModel()\nreturn modelhelpers.index_from_key(model, key_path, parent_index)\n</code></pre>"},{"location":"qt_modules/core/AbstractProxyModelMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/AbstractTableModel.html","title":"AbstractTableModel","text":"<p>Qt Base Class: QAbstractTableModel</p> <p>Signature: <code>QAbstractTableModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AbstractTableModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractTableModelMixin</code>, <code>core.QAbstractTableModel</code></p> <p>Abstract model that can be subclassed to create table models.</p> Source code in <code>prettyqt\\core\\abstracttablemodel.py</code> <pre><code>class AbstractTableModel(AbstractTableModelMixin, core.QAbstractTableModel):\n\"\"\"Abstract model that can be subclassed to create table models.\"\"\"\n</code></pre> Name Children Inherits ColumnTableModelprettyqt.itemmodels.columnitemmodel <ul><li>LogRecordModel</li><li>ActionsModel</li><li>StorageInfoModel</li><li>ShortcutsModel</li></ul> <ul><li><code>ColumnItemModelMixin</code></li><li>AbstractTableModel</li></ul> RegexMatchesModelprettyqt.itemmodels.regexmatchesmodel <ul><li>AbstractTableModel</li></ul> FrameInfoModelprettyqt.itemmodels.frameinfomodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> BaseFieldsModelprettyqt.itemmodels.basefieldsmodel <ul><li>DataClassFieldsModel</li></ul> <ul><li>AbstractTableModel</li></ul> BaseDataclassModelprettyqt.itemmodels.basedataclassmodel <ul><li>DataClassModel</li></ul> <ul><li>AbstractTableModel</li></ul> MappingModelprettyqt.itemmodels.mappingmodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> ModelIndexModelprettyqt.itemmodels.modelindexmodel <ul><li>ListMixin</li><li>AbstractTableModel</li></ul> QObjectPropertiesModelprettyqt.itemmodels.qobjectpropertiesmodel <ul><li>AbstractTableModel</li></ul> WidgetsDetailsModelprettyqt.itemmodels.widgetsdetailsmodel <ul><li>AbstractTableModel</li></ul>"},{"location":"qt_modules/core/AbstractTableModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254409488[\"core.AbstractTableModel\"]\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254605056[\"QtCore.QAbstractTableModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254415248 --&gt; 2103254409488\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254605056 --&gt; 2103254409488\n  2103254592576 --&gt; 2103254605056\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AbstractTableModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/AbstractTableModelMixin.html","title":"AbstractTableModelMixin","text":""},{"location":"qt_modules/core/AbstractTableModelMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code></p> Source code in <code>prettyqt\\core\\abstracttablemodel.py</code> <pre><code>class AbstractTableModelMixin(core.AbstractItemModelMixin):\nDEFAULT_FLAGS = (\nconstants.DRAG_ENABLED\n| constants.IS_ENABLED\n| constants.IS_SELECTABLE\n| constants.NO_CHILDREN\n)\n</code></pre> Name Children Inherits AbstractTableModelprettyqt.core.abstracttablemodel <ul><li>ColumnTableModel</li><li>RegexMatchesModel</li><li>FrameInfoModel</li><li>BaseFieldsModel</li><li>BaseDataclassModel</li><li>MappingModel</li><li>ModelIndexModel</li><li>QObjectPropertiesModel</li><li>WidgetsDetailsModel</li></ul> <ul><li>AbstractTableModelMixin</li><li>QAbstractTableModel</li></ul>"},{"location":"qt_modules/core/AbstractTableModelMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254415248[\"core.AbstractTableModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254372048 --&gt; 2103254415248\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/AnimationGroup.html","title":"AnimationGroup","text":"<p>Qt Base Class: QAnimationGroup</p> <p>Signature: <code>QAnimationGroup(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/AnimationGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AnimationGroupMixin</code>, <code>core.QAnimationGroup</code></p> <p>Abstract base class for groups of animations.</p> Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>class AnimationGroup(AnimationGroupMixin, core.QAnimationGroup):\n\"\"\"Abstract base class for groups of animations.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/AnimationGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255078032[\"core.AnimationGroup\"]\n  2103255077072[\"core.AnimationGroupMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254633856[\"QtCore.QAnimationGroup\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255077072 --&gt; 2103255078032\n  2103255082832 --&gt; 2103255077072\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254633856 --&gt; 2103255078032\n  2103254626176 --&gt; 2103254633856\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/AnimationGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int"},{"location":"qt_modules/core/AnimationGroupMixin.html","title":"AnimationGroupMixin","text":""},{"location":"qt_modules/core/AnimationGroupMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractAnimationMixin</code></p> Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>class AnimationGroupMixin(core.AbstractAnimationMixin):\n@overload\ndef __getitem__(self, index: int) -&gt; core.QAbstractAnimation:\n...\n@overload\ndef __getitem__(\nself, index: slice\n) -&gt; listdelegators.ListDelegator[core.QAbstractAnimation]:\n...\ndef __getitem__(self, index: int | slice):\ncount = self.animationCount()\nmatch index:\ncase int():\nif index &lt; 0:\nindex = count + index\nif index &gt;= count:\nraise IndexError(index)\nanim = self.animationAt(index)\nif anim is None:\nraise KeyError(index)\nreturn anim\ncase slice():\nstop = index.stop or count\nrng = range(index.start or 0, stop, index.step or 1)\nanims = [self.animationAt(i) for i in rng]\nreturn listdelegators.ListDelegator(anims)\ncase _:\nraise TypeError(index)\ndef __setitem__(self, index: int, value: core.QAbstractAnimation):\nif not (0 &lt;= index &lt; self.animationCount()):\nraise KeyError(index)\nself.takeAnimation(index)\nself.insertAnimation(index, value)\ndef __len__(self):\nreturn self.animationCount()\ndef __delitem__(self, index: int):\nif not (0 &lt;= index &lt; self.animationCount()):\nraise KeyError(index)\nself.takeAnimation(index)\ndef __add__(self, other: core.QAbstractAnimation):\nself.addAnimation(other)\nreturn self\ndef targetObject(self) -&gt; widgets.QWidget:\n\"\"\"Return shared targetObject if existing.\"\"\"\ntargets = [\nanim.targetObject()\nfor i in range(self.animationCount())\nif isinstance((anim := self.animationAt(i)), core.QPropertyAnimation)\n]\nif len(targets) != self.animationCount() or len(set(targets)) != 1:\nraise RuntimeError(\"Could not find shared targetObject for all animations.\")\nreturn targets[0]\ndef add_property_animation(self, obj: Callable) -&gt; core.PropertyAnimation:\nanim = core.PropertyAnimation()\nanim.apply_to(obj)\nself.addAnimation(anim)\nreturn anim\n</code></pre> Name Children Inherits AnimationGroupprettyqt.core.animationgroup <ul><li>AnimationGroupMixin</li><li>QAnimationGroup</li></ul> ParallelAnimationGroupprettyqt.core.parallelanimationgroup <ul><li>ZoomAnimation</li></ul> <ul><li>AnimationGroupMixin</li><li>QParallelAnimationGroup</li></ul> SequentialAnimationGroupprettyqt.core.sequentialanimationgroup <ul><li>AnimationGroupMixin</li><li>QSequentialAnimationGroup</li></ul>"},{"location":"qt_modules/core/AnimationGroupMixin.html#prettyqt.core.animationgroup.AnimationGroupMixin.targetObject","title":"<code>targetObject() -&gt; widgets.QWidget</code>","text":"<p>Return shared targetObject if existing.</p> Source code in <code>prettyqt\\core\\animationgroup.py</code> <pre><code>def targetObject(self) -&gt; widgets.QWidget:\n\"\"\"Return shared targetObject if existing.\"\"\"\ntargets = [\nanim.targetObject()\nfor i in range(self.animationCount())\nif isinstance((anim := self.animationAt(i)), core.QPropertyAnimation)\n]\nif len(targets) != self.animationCount() or len(set(targets)) != 1:\nraise RuntimeError(\"Could not find shared targetObject for all animations.\")\nreturn targets[0]\n</code></pre>"},{"location":"qt_modules/core/AnimationGroupMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255077072[\"core.AnimationGroupMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255082832 --&gt; 2103255077072\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/BasicTimer.html","title":"BasicTimer","text":"<p>Qt Base Class: QBasicTimer</p> <p>Signature: <code>QBasicTimer(self) -&gt; None</code></p>"},{"location":"qt_modules/core/BasicTimer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QBasicTimer</code></p> <p>Timer events for objects.</p> Source code in <code>prettyqt\\core\\basictimer.py</code> <pre><code>class BasicTimer(core.QBasicTimer):\n\"\"\"Timer events for objects.\"\"\"\ndef __bool__(self):\nreturn self.isActive()\ndef start_timer(\nself, msec: int, obj: core.QObject, timer_type: constants.TimerTypeStr\n):\nself.start(msec, constants.TIMER_TYPE.get_enum_value(timer_type), obj)\n</code></pre>"},{"location":"qt_modules/core/BasicTimer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255037712[\"core.BasicTimer\"]\n  2103254618496[\"QtCore.QBasicTimer\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254618496 --&gt; 2103255037712\n  2103206874128 --&gt; 2103254618496\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Buffer.html","title":"Buffer","text":"<p>Qt Base Class: QBuffer</p> <p>Signature: <code>QBuffer(self, buf: Union[PySide6.QtCore.QByteArray, bytes], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QBuffer(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Buffer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IODeviceMixin</code>, <code>core.QBuffer</code></p> <p>QIODevice interface for a QByteArray.</p> Source code in <code>prettyqt\\core\\buffer.py</code> <pre><code>class Buffer(core.IODeviceMixin, core.QBuffer):\n\"\"\"QIODevice interface for a QByteArray.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/Buffer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255102032[\"core.Buffer\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254584896[\"QtCore.QBuffer\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255106832 --&gt; 2103255102032\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254584896 --&gt; 2103255102032\n  2103254728896 --&gt; 2103254584896\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/Buffer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/ByteArray.html","title":"ByteArray","text":"<p>Qt Base Class: QByteArray</p> <p>Signature: <code>QByteArray(self) -&gt; None QByteArray(self, arg__1: bytearray) -&gt; None QByteArray(self, arg__1: bytes) -&gt; None QByteArray(self, arg__1: bytes, size: int = -1) -&gt; None QByteArray(self, arg__1: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None QByteArray(self, size: int, c: int) -&gt; None</code></p>"},{"location":"qt_modules/core/ByteArray.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QByteArray</code></p> <p>Array of bytes.</p> Source code in <code>prettyqt\\core\\bytearray.py</code> <pre><code>class ByteArray(QtCore.QByteArray):\n\"\"\"Array of bytes.\"\"\"\ndef __reduce__(self):\nreturn type(self), (bytes(self),)\n</code></pre>"},{"location":"qt_modules/core/ByteArray.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255090512[\"core.ByteArray\"]\n  2103254830656[\"QtCore.QByteArray\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254830656 --&gt; 2103255090512\n  2103206874128 --&gt; 2103254830656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ByteArrayMatcher.html","title":"ByteArrayMatcher","text":"<p>Qt Base Class: QByteArrayMatcher</p> <p>Signature: <code>QByteArrayMatcher(self) -&gt; None QByteArrayMatcher(self, other: Union[PySide6.QtCore.QByteArrayMatcher, bytes]) -&gt; None QByteArrayMatcher(self, pattern: bytes, length: int = -1) -&gt; None QByteArrayMatcher(self, pattern: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None</code></p>"},{"location":"qt_modules/core/ByteArrayMatcher.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QByteArrayMatcher</code></p> <p>Holds a sequence of bytes that can be quickly matched in a byte array.</p> Source code in <code>prettyqt\\core\\bytearraymatcher.py</code> <pre><code>class ByteArrayMatcher(QtCore.QByteArrayMatcher):\n\"\"\"Holds a sequence of bytes that can be quickly matched in a byte array.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_pattern())\ndef get_pattern(self) -&gt; bytes:\nreturn bytes(self.pattern())\n</code></pre>"},{"location":"qt_modules/core/ByteArrayMatcher.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255084752[\"core.ByteArrayMatcher\"]\n  2103254828736[\"QtCore.QByteArrayMatcher\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254828736 --&gt; 2103255084752\n  2103206874128 --&gt; 2103254828736\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Calendar.html","title":"Calendar","text":"<p>Qt Base Class: QCalendar</p> <p>Signature: <code>QCalendar(self) -&gt; None QCalendar(self, QCalendar: PySide6.QtCore.QCalendar) -&gt; None QCalendar(self, id: PySide6.QtCore.QCalendar.SystemId) -&gt; None QCalendar(self, name: str) -&gt; None QCalendar(self, system: PySide6.QtCore.QCalendar.System) -&gt; None</code></p>"},{"location":"qt_modules/core/Calendar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QCalendar</code></p> <p>Describes calendar systems.</p> Source code in <code>prettyqt\\core\\_calendar.py</code> <pre><code>class Calendar(core.QCalendar):\n\"\"\"Describes calendar systems.\"\"\"\ndef __init__(self, system: str | core.QCalendar.System = \"gregorian\"):\ntyp = system if isinstance(system, core.QCalendar.System) else SYSTEM[system]\nsuper().__init__(typ)\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef __reduce__(self):\nreturn type(self), (self.name(),)\n# def __bool__(self):\n#     return self.isValid()\ndef get_date_from_parts(self, year: int, month: int, day: int) -&gt; core.Date:\nreturn core.Date(self.dateFromParts(year, month, day))\n</code></pre>"},{"location":"qt_modules/core/Calendar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254397008[\"core.Calendar\"]\n  2103254812416[\"QtCore.QCalendar\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254812416 --&gt; 2103254397008\n  2103206874128 --&gt; 2103254812416\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Collator.html","title":"Collator","text":"<p>Qt Base Class: QCollator</p> <p>Signature: <code>QCollator(self) -&gt; None QCollator(self, arg__1: PySide6.QtCore.QCollator) -&gt; None QCollator(self, locale: Union[PySide6.QtCore.QLocale, PySide6.QtCore.QLocale.Language]) -&gt; None</code></p>"},{"location":"qt_modules/core/Collator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QCollator</code></p> <p>Compares strings according to a localized collation algorithm.</p> Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>class Collator(core.QCollator):\n\"\"\"Compares strings according to a localized collation algorithm.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_locale())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n        Args:\n            state: case sensitive\n        \"\"\"\nsensitivity = (\nconstants.CaseSensitivity.CaseSensitive\nif state\nelse constants.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\ndef is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n        Returns:\n            case sensitivity\n        \"\"\"\nreturn bool(self.caseSensitivity())\ndef get_sort_key(self, string: str) -&gt; core.CollatorSortKey:\nreturn core.CollatorSortKey(self.sortKey(string))\n</code></pre>"},{"location":"qt_modules/core/Collator.html#prettyqt.core.collator.Collator.is_case_sensitive","title":"<code>is_case_sensitive() -&gt; bool</code>","text":"<p>Return case sensitivity.</p> Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n    Returns:\n        case sensitivity\n    \"\"\"\nreturn bool(self.caseSensitivity())\n</code></pre>"},{"location":"qt_modules/core/Collator.html#prettyqt.core.collator.Collator.set_case_sensitive","title":"<code>set_case_sensitive(state: bool)</code>","text":"<p>Set case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>case sensitive</p> required Source code in <code>prettyqt\\core\\collator.py</code> <pre><code>def set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n    Args:\n        state: case sensitive\n    \"\"\"\nsensitivity = (\nconstants.CaseSensitivity.CaseSensitive\nif state\nelse constants.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"qt_modules/core/Collator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254421008[\"core.Collator\"]\n  2103254804736[\"QtCore.QCollator\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254804736 --&gt; 2103254421008\n  2103206874128 --&gt; 2103254804736\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/CollatorSortKey.html","title":"CollatorSortKey","text":"<p>Qt Base Class: QCollatorSortKey</p> <p>Signature: <code>QCollatorSortKey(self, other: PySide6.QtCore.QCollatorSortKey) -&gt; None</code></p>"},{"location":"qt_modules/core/CollatorSortKey.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QCollatorSortKey</code></p> <p>Can be used to speed up string collation.</p> Source code in <code>prettyqt\\core\\collatorsortkey.py</code> <pre><code>class CollatorSortKey(QtCore.QCollatorSortKey):\n\"\"\"Can be used to speed up string collation.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/CollatorSortKey.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254413328[\"core.CollatorSortKey\"]\n  2103254822976[\"QtCore.QCollatorSortKey\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254822976 --&gt; 2103254413328\n  2103206874128 --&gt; 2103254822976\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/CommandLineOption.html","title":"CommandLineOption","text":"<p>Qt Base Class: QCommandLineOption</p> <p>Signature: <code>QCommandLineOption(self, name: str) -&gt; None QCommandLineOption(self, name: str, description: str, valueName: str = '', defaultValue: str = '') -&gt; None QCommandLineOption(self, names: Sequence[str]) -&gt; None QCommandLineOption(self, names: Sequence[str], description: str, valueName: str = '', defaultValue: str = '') -&gt; None QCommandLineOption(self, other: PySide6.QtCore.QCommandLineOption) -&gt; None</code></p>"},{"location":"qt_modules/core/CommandLineOption.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QCommandLineOption</code></p> <p>Defines a possible command-line option.</p> Source code in <code>prettyqt\\core\\commandlineoption.py</code> <pre><code>class CommandLineOption(core.QCommandLineOption):\n\"\"\"Defines a possible command-line option.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/CommandLineOption.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254412368[\"core.CommandLineOption\"]\n  2103254801856[\"QtCore.QCommandLineOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254801856 --&gt; 2103254412368\n  2103206874128 --&gt; 2103254801856\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/CommandLineParser.html","title":"CommandLineParser","text":"<p>Qt Base Class: QCommandLineParser</p> <p>Signature: <code>QCommandLineParser(self) -&gt; None</code></p>"},{"location":"qt_modules/core/CommandLineParser.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QCommandLineParser</code></p> <p>Means for handling the command line options.</p> Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>class CommandLineParser(core.QCommandLineParser):\n\"\"\"Means for handling the command line options.\"\"\"\ndef set_single_dash_word_option_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the single dash word option mode.\n        Args:\n            mode: single dash word option mode\n        \"\"\"\nself.setSingleDashWordOptionMode(SINGLE_DASH_WORD.get_enum_value(mode))\ndef set_options_after_positional_arguments_mode(\nself, mode: SingleDashWordStr | mod.SingleDashWordOptionMode\n):\n\"\"\"Set the options after positional arguments mode.\n        Args:\n            mode: options after positional arguments mode\n        \"\"\"\nval = OPTIONS_AFTER_POS_ARG.get_enum_value(mode)\nself.setOptionsAfterPositionalArgumentsMode(val)\ndef add_option(\nself,\nname: str,\ndescription: str | None = None,\nvalue_name: str | None = None,\ndefault_value: str | None = None,\n) -&gt; core.CommandLineOption:\nif description is None:\ndescription = \"\"\nif value_name is None:\nvalue_name = \"\"\nif default_value is None:\ndefault_value = \"\"\noption = core.CommandLineOption(name, description, value_name, default_value)\nself.addOption(option)\nreturn option\n</code></pre>"},{"location":"qt_modules/core/CommandLineParser.html#prettyqt.core.commandlineparser.CommandLineParser.set_options_after_positional_arguments_mode","title":"<code>set_options_after_positional_arguments_mode(mode: SingleDashWordStr | mod.SingleDashWordOptionMode)</code>","text":"<p>Set the options after positional arguments mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SingleDashWordStr | mod.SingleDashWordOptionMode</code> <p>options after positional arguments mode</p> required Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def set_options_after_positional_arguments_mode(\nself, mode: SingleDashWordStr | mod.SingleDashWordOptionMode\n):\n\"\"\"Set the options after positional arguments mode.\n    Args:\n        mode: options after positional arguments mode\n    \"\"\"\nval = OPTIONS_AFTER_POS_ARG.get_enum_value(mode)\nself.setOptionsAfterPositionalArgumentsMode(val)\n</code></pre>"},{"location":"qt_modules/core/CommandLineParser.html#prettyqt.core.commandlineparser.CommandLineParser.set_single_dash_word_option_mode","title":"<code>set_single_dash_word_option_mode(mode: SingleDashWordStr)</code>","text":"<p>Set the single dash word option mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SingleDashWordStr</code> <p>single dash word option mode</p> required Source code in <code>prettyqt\\core\\commandlineparser.py</code> <pre><code>def set_single_dash_word_option_mode(self, mode: SingleDashWordStr):\n\"\"\"Set the single dash word option mode.\n    Args:\n        mode: single dash word option mode\n    \"\"\"\nself.setSingleDashWordOptionMode(SINGLE_DASH_WORD.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/core/CommandLineParser.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254422928[\"core.CommandLineParser\"]\n  2103254799936[\"QtCore.QCommandLineParser\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254799936 --&gt; 2103254422928\n  2103206874128 --&gt; 2103254799936\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ConcatenateTablesProxyModel.html","title":"ConcatenateTablesProxyModel","text":"<p>Qt Base Class: QConcatenateTablesProxyModel</p> <p>Signature: <code>QConcatenateTablesProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/ConcatenateTablesProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code>, <code>core.QConcatenateTablesProxyModel</code></p> <p>Proxies multiple source models, concatenating their rows.</p> Source code in <code>prettyqt\\core\\concatenatetablesproxymodel.py</code> <pre><code>class ConcatenateTablesProxyModel(\ncore.AbstractItemModelMixin, core.QConcatenateTablesProxyModel\n):\n\"\"\"Proxies multiple source models, concatenating their rows.\"\"\"\nID = \"concatenate\"\ndef parent(self, *args):\n# workaround: PyQt6 QConcatenateTablesProxyModel.parent() missing\nif not args and qt.API == \"pyqt6\":\nreturn core.QAbstractItemModel.parent(self)\nreturn super().parent(*args)\n</code></pre>"},{"location":"qt_modules/core/ConcatenateTablesProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254419088[\"core.ConcatenateTablesProxyModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254603136[\"QtCore.QConcatenateTablesProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254372048 --&gt; 2103254419088\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254603136 --&gt; 2103254419088\n  2103254592576 --&gt; 2103254603136\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ConcatenateTablesProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/CoreApplication.html","title":"CoreApplication","text":"<p>Qt Base Class: QCoreApplication</p> <p>Signature: <code>QCoreApplication(self) -&gt; None QCoreApplication(self, arg__1: Sequence[str]) -&gt; None</code></p>"},{"location":"qt_modules/core/CoreApplication.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>CoreApplicationMixin</code>, <code>core.QCoreApplication</code></p> <p>Event loop for Qt applications without UI.</p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>class CoreApplication(CoreApplicationMixin, core.QCoreApplication):\n\"\"\"Event loop for Qt applications without UI.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/CoreApplication.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255095312[\"core.CoreApplication\"]\n  2103255110672[\"core.CoreApplicationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254798976[\"QtCore.QCoreApplication\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255110672 --&gt; 2103255095312\n  2103255067472 --&gt; 2103255110672\n  140736120080256 --&gt; 2103255067472\n  2103254798976 --&gt; 2103255095312\n  2103254677056 --&gt; 2103254798976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/CoreApplication.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>applicationName</code> QString <code>applicationVersion</code> QString <code>organizationName</code> QString <code>organizationDomain</code> QString <code>quitLockEnabled</code> bool"},{"location":"qt_modules/core/CoreApplicationMixin.html","title":"CoreApplicationMixin","text":""},{"location":"qt_modules/core/CoreApplicationMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>class CoreApplicationMixin(core.ObjectMixin):\ntranslators: dict[str, core.Translator] = {}\n@classmethod\ndef call_on_exit(cls, func: Callable):\ninstance = cls.instance()\nif instance is None:\nraise RuntimeError(\"No QApplication running\")\ninstance.aboutToQuit.connect(func)\n@classmethod\ndef get_application_file_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.applicationFilePath())\n@classmethod\ndef get_application_dir_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.applicationDirPath())\n@classmethod\ndef add_library_path(cls, path: datatypes.PathType):\ncls.addLibraryPath(os.fspath(path))\n@classmethod\ndef get_library_paths(cls) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(i) for i in cls.libraryPaths()]\ndef set_application_name(self, name: str):\nif os.name == \"nt\" and name and not getattr(sys, \"frozen\", False):\nimport ctypes\nctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(name)\nself.setApplicationName(name)\ndef set_metadata(\nself,\napp_name: str | None = None,\napp_version: None | datatypes.SemanticVersionType = None,\norg_name: str | None = None,\norg_domain: str | None = None,\n):\nif app_name is not None:\nself.setApplicationName(app_name)\nmatch app_version:\ncase None:\npass\ncase core.QVersionNumber():\napp_version = app_version.toString()\nself.setApplicationVersion(app_version)\ncase tuple():\napp_version = \".\".join(str(i) for i in app_version)\nself.setApplicationVersion(app_version)\ncase str():\nself.setApplicationVersion(app_version)\ncase _:\nraise TypeError(app_version)\nif org_name is not None:\nself.setOrganizationName(org_name)\nif org_domain is not None:\nself.setOrganizationDomain(org_domain)\n@classmethod\ndef load_language_file(cls, file: datatypes.PathType) -&gt; core.Translator:\ntranslator = core.Translator()\ntranslator.load_file(file)\ncls.installTranslator(translator)\ncls.translators[str(file)] = translator\nreturn translator\n@classmethod\ndef load_language(cls, language: str) -&gt; core.Translator:\ntranslator = core.Translator.for_language(language)\ncls.installTranslator(translator)\ncls.translators[language] = translator\nreturn translator\ndef post_event(\nself,\nobj: core.QObject,\nevent: core.QEvent,\npriority: int | constants.EventPriorityStr = \"normal\",\n):\nmatch priority:\ncase int():\nprio = priority\ncase str():\nprio = constants.EVENT_PRIORITY[priority]\ncase _:\nraise TypeError(priority)\nreturn self.postEvent(obj, event, prio)\ndef in_main_thread(self) -&gt; bool:\n\"\"\"Check if we are in the thread in which QApplication object was created.\n        Returns:\n            True if we are in the main thread, False otherwise.\n        \"\"\"\nreturn self.thread() == core.Thread.currentThread()\ndef main_loop(self) -&gt; int:\nreturn self.exec()\n@staticmethod\ndef restart():\nos.execl(sys.executable, sys.executable, *sys.argv)\n</code></pre> Name Children Inherits CoreApplicationprettyqt.core.coreapplication <ul><li>CoreApplicationMixin</li><li>QCoreApplication</li></ul> GuiApplicationMixinprettyqt.gui.guiapplication <ul><li>GuiApplication</li><li><code>ApplicationMixin</code></li></ul> <ul><li>CoreApplicationMixin</li></ul>"},{"location":"qt_modules/core/CoreApplicationMixin.html#prettyqt.core.coreapplication.CoreApplicationMixin.in_main_thread","title":"<code>in_main_thread() -&gt; bool</code>","text":"<p>Check if we are in the thread in which QApplication object was created.</p> Source code in <code>prettyqt\\core\\coreapplication.py</code> <pre><code>def in_main_thread(self) -&gt; bool:\n\"\"\"Check if we are in the thread in which QApplication object was created.\n    Returns:\n        True if we are in the main thread, False otherwise.\n    \"\"\"\nreturn self.thread() == core.Thread.currentThread()\n</code></pre>"},{"location":"qt_modules/core/CoreApplicationMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255110672[\"core.CoreApplicationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103255110672\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/CryptographicHash.html","title":"CryptographicHash","text":"<p>Qt Base Class: QCryptographicHash</p> <p>Signature: <code>QCryptographicHash(self, method: PySide6.QtCore.QCryptographicHash.Algorithm) -&gt; None</code></p>"},{"location":"qt_modules/core/CryptographicHash.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QCryptographicHash</code></p> <p>Way to generate cryptographic hashes.</p> Source code in <code>prettyqt\\core\\cryptographichash.py</code> <pre><code>class CryptographicHash(QtCore.QCryptographicHash):\n\"\"\"Way to generate cryptographic hashes.\"\"\"\ndef __init__(self, method: QtCore.QCryptographicHash.Algorithm | AlgorithmStr):\nif isinstance(method, QtCore.QCryptographicHash.Algorithm):\narg = method\nelse:\narg = ALGORITHM[method]\nsuper().__init__(arg)\n# def __str__(self):\n#     return bytes(self.result()).decode()\ndef __bytes__(self):\nreturn self.get_result()\ndef get_result(self) -&gt; bytes:\nreturn bytes(self.result())\n@staticmethod\ndef get_hash_length(\nmethod: AlgorithmStr | QtCore.QCryptographicHash.Algorithm,\n) -&gt; int:\nreturn CryptographicHash.hashLength(ALGORITHM.get_enum_value(method))\n</code></pre>"},{"location":"qt_modules/core/CryptographicHash.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255051152[\"core.CryptographicHash\"]\n  2103254794176[\"QtCore.QCryptographicHash\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254794176 --&gt; 2103255051152\n  2103206874128 --&gt; 2103254794176\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/DataStream.html","title":"DataStream","text":"<p>Qt Base Class: QDataStream</p> <p>Signature: <code>QDataStream(self) -&gt; None QDataStream(self, arg__1: PySide6.QtCore.QIODevice) -&gt; None QDataStream(self, arg__1: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None QDataStream(self, arg__1: Union[PySide6.QtCore.QByteArray, bytes], flags: PySide6.QtCore.QIODeviceBase.OpenModeFlag) -&gt; None</code></p>"},{"location":"qt_modules/core/DataStream.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QDataStream</code></p> <p>Serialization of binary data to a QIODevice.</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>class DataStream(QtCore.QDataStream):\n\"\"\"Serialization of binary data to a QIODevice.\"\"\"\ndef set_byte_order(self, order: ByteOrderStr | QtCore.QDataStream.ByteOrder):\n\"\"\"Set byte order.\n        Args:\n            order: byte order to use\n        \"\"\"\nself.setByteOrder(BYTE_ORDER.get_enum_value(order))\ndef get_byte_order(self) -&gt; ByteOrderStr:\n\"\"\"Return byte order.\n        Returns:\n            byte order\n        \"\"\"\nreturn BYTE_ORDER.inverse[self.byteOrder()]\ndef set_status(self, status: StatusStr):\n\"\"\"Set status.\n        Args:\n            status: status to use\n        \"\"\"\nself.setStatus(STATUS.get_enum_value(status))\ndef get_status(self) -&gt; StatusStr:\n\"\"\"Return status.\n        Returns:\n            status\n        \"\"\"\nreturn STATUS.inverse[self.status()]\ndef set_floating_point_precision(\nself,\nprecision: FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision,\n):\n\"\"\"Set floating point precision.\n        Args:\n            precision: floating point precision\n        \"\"\"\nself.setFloatingPointPrecision(FLOATING_POINT_PRECISION.get_enum_value(precision))\ndef get_floating_point_precision(self) -&gt; FloatingPointPrecisionStr:\n\"\"\"Return floating point precision.\n        Returns:\n            floating point precision\n        \"\"\"\nreturn FLOATING_POINT_PRECISION.inverse[self.floatingPointPrecision()]\n@classmethod\ndef create_bytearray(cls, data: datatypes.QtSerializableType) -&gt; QtCore.QByteArray:\nba = QtCore.QByteArray()\nstream = cls(ba, QtCore.QIODeviceBase.OpenModeFlag.WriteOnly)\nstream &lt;&lt; data\nreturn ba\n@classmethod\ndef write_bytearray(\ncls, ba: datatypes.ByteArrayType, write_to: datatypes.QtSerializableType\n):\nba = datatypes.to_bytearray(ba)\nstream = cls(ba, QtCore.QIODeviceBase.OpenModeFlag.ReadOnly)\nstream &gt;&gt; write_to\n@classmethod\ndef copy_data(\ncls, source: datatypes.QtSerializableType, dest: datatypes.QtSerializableType\n):\nba = cls.create_bytearray(source)\ncls.write_bytearray(ba, dest)\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#prettyqt.core.datastream.DataStream.get_byte_order","title":"<code>get_byte_order() -&gt; ByteOrderStr</code>","text":"<p>Return byte order.</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_byte_order(self) -&gt; ByteOrderStr:\n\"\"\"Return byte order.\n    Returns:\n        byte order\n    \"\"\"\nreturn BYTE_ORDER.inverse[self.byteOrder()]\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#prettyqt.core.datastream.DataStream.get_floating_point_precision","title":"<code>get_floating_point_precision() -&gt; FloatingPointPrecisionStr</code>","text":"<p>Return floating point precision.</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_floating_point_precision(self) -&gt; FloatingPointPrecisionStr:\n\"\"\"Return floating point precision.\n    Returns:\n        floating point precision\n    \"\"\"\nreturn FLOATING_POINT_PRECISION.inverse[self.floatingPointPrecision()]\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#prettyqt.core.datastream.DataStream.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Return status.</p> Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Return status.\n    Returns:\n        status\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#prettyqt.core.datastream.DataStream.set_byte_order","title":"<code>set_byte_order(order: ByteOrderStr | QtCore.QDataStream.ByteOrder)</code>","text":"<p>Set byte order.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>ByteOrderStr | QtCore.QDataStream.ByteOrder</code> <p>byte order to use</p> required Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_byte_order(self, order: ByteOrderStr | QtCore.QDataStream.ByteOrder):\n\"\"\"Set byte order.\n    Args:\n        order: byte order to use\n    \"\"\"\nself.setByteOrder(BYTE_ORDER.get_enum_value(order))\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#prettyqt.core.datastream.DataStream.set_floating_point_precision","title":"<code>set_floating_point_precision(precision: FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision)</code>","text":"<p>Set floating point precision.</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision</code> <p>floating point precision</p> required Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_floating_point_precision(\nself,\nprecision: FloatingPointPrecisionStr | QtCore.QDataStream.FloatingPointPrecision,\n):\n\"\"\"Set floating point precision.\n    Args:\n        precision: floating point precision\n    \"\"\"\nself.setFloatingPointPrecision(FLOATING_POINT_PRECISION.get_enum_value(precision))\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#prettyqt.core.datastream.DataStream.set_status","title":"<code>set_status(status: StatusStr)</code>","text":"<p>Set status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>StatusStr</code> <p>status to use</p> required Source code in <code>prettyqt\\core\\datastream.py</code> <pre><code>def set_status(self, status: StatusStr):\n\"\"\"Set status.\n    Args:\n        status: status to use\n    \"\"\"\nself.setStatus(STATUS.get_enum_value(status))\n</code></pre>"},{"location":"qt_modules/core/DataStream.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255092432[\"core.DataStream\"]\n  2103254797056[\"QtCore.QDataStream\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254797056 --&gt; 2103255092432\n  2103254651136 --&gt; 2103254797056\n  2103206874128 --&gt; 2103254651136\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Date.html","title":"Date","text":"<p>Qt Base Class: QDate</p> <p>Signature: <code>QDate(self) -&gt; None QDate(self, QDate: PySide6.QtCore.QDate) -&gt; None QDate(self, y: int, m: int, d: int) -&gt; None QDate(self, y: int, m: int, d: int, cal: PySide6.QtCore.QCalendar) -&gt; None</code></p>"},{"location":"qt_modules/core/Date.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QDate</code></p> <p>Date functions.</p> Source code in <code>prettyqt\\core\\date.py</code> <pre><code>class Date(QtCore.QDate):\n\"\"\"Date functions.\"\"\"\ndef __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]  # type: ignore\nreturn f\"{type(self).__name__}({template}\"\ndef __str__(self):\nreturn self.toString(\"yyyy-MM-dd\")\ndef __format__(self, format_spec: str):\nreturn self.toString(format_spec)\n@property\ndef _year(self) -&gt; int:\nreturn self.year()\n@property\ndef _month(self) -&gt; int:\nreturn self.month()\n@property\ndef _day(self) -&gt; int:\nreturn self.day()\n__match_args__ = (\"_year\", \"_month\", \"_day\")\ndef __reduce__(self):\nreturn type(self), (self.year(), self.month(), self.day())\ndef add_days(self, days: int) -&gt; Self:\nreturn type(self)(self.addDays(days))\ndef add_months(self, months: int, calendar: QtCore.QCalendar | None = None) -&gt; Self:\nif calendar:\nreturn type(self)(self.addMonths(months, calendar))\nelse:\nreturn type(self)(self.addMonths(months))\ndef add_years(self, years: int, calendar: QtCore.QCalendar | None = None) -&gt; Self:\nif calendar:\nreturn type(self)(self.addYears(years, calendar))\nelse:\nreturn type(self)(self.addYears(years))\n@classmethod\ndef get_current_date(cls) -&gt; Self:\nreturn cls(cls.currentDate())\n@classmethod\ndef from_string(cls, text: str, date_format: constants.DateFormatStr | str) -&gt; Self:\nif date_format in constants.DATE_FORMAT:\ndate_format = constants.DATE_FORMAT[date_format]\nreturn cls(cls.fromString(text, date_format))\ndef replace(\nself, year: int | None = None, month: int | None = None, day: int | None = None\n):\nself.setDate(\nyear if year is not None else self.year(),\nmonth if month is not None else self.month(),\nday if day is not None else self.day(),\n)\n</code></pre>"},{"location":"qt_modules/core/Date.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255029072[\"core.Date\"]\n  2103254841216[\"QtCore.QDate\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254841216 --&gt; 2103255029072\n  2103206874128 --&gt; 2103254841216\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/DateTime.html","title":"DateTime","text":"<p>Qt Base Class: QDateTime</p> <p>Signature: <code>QDateTime(self) -&gt; None QDateTime(self, arg__1: int, arg__2: int, arg__3: int, arg__4: int, arg__5: int, arg__6: int) -&gt; None QDateTime(self, arg__1: int, arg__2: int, arg__3: int, arg__4: int, arg__5: int, arg__6: int, arg__7: int, arg__8: PySide6.QtCore.Qt.TimeSpec = Instance(Qt.LocalTime)) -&gt; None QDateTime(self, arg__1: int, arg__2: int, arg__3: int, arg__4: int, arg__5: int, arg__6: int, arg__7: int, arg__8: int = Instance(Qt.LocalTime)) -&gt; None QDateTime(self, date: PySide6.QtCore.QDate, time: PySide6.QtCore.QTime) -&gt; None QDateTime(self, date: PySide6.QtCore.QDate, time: PySide6.QtCore.QTime, spec: PySide6.QtCore.Qt.TimeSpec, offsetSeconds: int = 0) -&gt; None QDateTime(self, date: PySide6.QtCore.QDate, time: PySide6.QtCore.QTime, timeZone: Union[PySide6.QtCore.QTimeZone, PySide6.QtCore.QTimeZone.Initialization]) -&gt; None QDateTime(self, other: PySide6.QtCore.QDateTime) -&gt; None</code></p>"},{"location":"qt_modules/core/DateTime.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QDateTime</code></p> <p>DateTime funcitons.</p> Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>class DateTime(core.QDateTime):\n\"\"\"DateTime funcitons.\"\"\"\ndef __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]\nreturn f\"{type(self).__name__}({template}\"\ndef __str__(self):\nreturn self.toString(\"yyyy-MM-dd hh:mm:ss.zzzzzz\")\ndef __reduce__(self):\nreturn type(self), (self.date(), self.time(), self.get_timezone())\ndef __format__(self, format_spec: constants.DateFormatStr):\nif format_spec in constants.DATE_FORMAT:\nreturn self.to_format(format_spec)\nreturn self.toString(format_spec)\n@classmethod\ndef from_seconds(cls, seconds: float) -&gt; Self:\nnew = cls()\nnew.setMSecsSinceEpoch(int(seconds * 1000))\nreturn new\ndef get_value(self) -&gt; datetime.datetime:\nreturn self.toPython()\ndef get_date(self) -&gt; core.Date:\nreturn core.Date(self.date())\ndef get_time(self) -&gt; core.Time:\nreturn core.Time(self.time())\ndef get_timezone(self) -&gt; core.TimeZone:\nreturn core.TimeZone(self.timeZone())\ndef set_timezone(self, zone: str | core.QTimeZone):\nif isinstance(zone, str):\nself.setTimeZone(core.TimeZone(zone))\nelse:\nself.setTimeZone(zone)\ndef set_time_spec(self, spec: constants.TimeSpecStr | constants.TimeSpec):\n\"\"\"Set the time specification.\n        Args:\n            spec: time specification to use\n        \"\"\"\nself.setTimeSpec(constants.TIME_SPEC[spec])\ndef get_time_spec(self) -&gt; constants.TimeSpecStr:\n\"\"\"Return current time specification.\n        Returns:\n            time specification\n        \"\"\"\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\ndef to_format(self, fmt: constants.DateFormatStr):\nreturn self.toString(constants.DATE_FORMAT[fmt])\n</code></pre>"},{"location":"qt_modules/core/DateTime.html#prettyqt.core._datetime.DateTime.get_time_spec","title":"<code>get_time_spec() -&gt; constants.TimeSpecStr</code>","text":"<p>Return current time specification.</p> Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def get_time_spec(self) -&gt; constants.TimeSpecStr:\n\"\"\"Return current time specification.\n    Returns:\n        time specification\n    \"\"\"\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\n</code></pre>"},{"location":"qt_modules/core/DateTime.html#prettyqt.core._datetime.DateTime.set_time_spec","title":"<code>set_time_spec(spec: constants.TimeSpecStr | constants.TimeSpec)</code>","text":"<p>Set the time specification.</p> <p>Parameters:</p> Name Type Description Default <code>spec</code> <code>constants.TimeSpecStr | constants.TimeSpec</code> <p>time specification to use</p> required Source code in <code>prettyqt\\core\\_datetime.py</code> <pre><code>def set_time_spec(self, spec: constants.TimeSpecStr | constants.TimeSpec):\n\"\"\"Set the time specification.\n    Args:\n        spec: time specification to use\n    \"\"\"\nself.setTimeSpec(constants.TIME_SPEC[spec])\n</code></pre>"},{"location":"qt_modules/core/DateTime.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255007952[\"core.DateTime\"]\n  2103254833536[\"QtCore.QDateTime\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254833536 --&gt; 2103255007952\n  2103206874128 --&gt; 2103254833536\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/DeadlineTimer.html","title":"DeadlineTimer","text":"<p>Qt Base Class: QDeadlineTimer</p> <p>Signature: <code>QDeadlineTimer(self, QDeadlineTimer: Union[PySide6.QtCore.QDeadlineTimer, PySide6.QtCore.QDeadlineTimer.ForeverConstant, PySide6.QtCore.Qt.TimerType, int]) -&gt; None QDeadlineTimer(self, arg__1: PySide6.QtCore.QDeadlineTimer.ForeverConstant, type_: PySide6.QtCore.Qt.TimerType = Instance(Qt.CoarseTimer)) -&gt; None QDeadlineTimer(self, msecs: int, type: PySide6.QtCore.Qt.TimerType = Instance(Qt.CoarseTimer)) -&gt; None QDeadlineTimer(self, type_: PySide6.QtCore.Qt.TimerType = Instance(Qt.CoarseTimer)) -&gt; None</code></p>"},{"location":"qt_modules/core/DeadlineTimer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QDeadlineTimer</code></p> <p>Marks a deadline in the future.</p> Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>class DeadlineTimer(QtCore.QDeadlineTimer):\n\"\"\"Marks a deadline in the future.\"\"\"\ndef set_type(self, typ: constants.TimerTypeStr | constants.TimerType):\n\"\"\"Set the timer type.\n        Args:\n            typ: timer type\n        \"\"\"\nself.setTimerType(constants.TIMER_TYPE.get_enum_value(typ))\ndef get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n        Returns:\n            timer type\n        \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"qt_modules/core/DeadlineTimer.html#prettyqt.core.deadlinetimer.DeadlineTimer.get_type","title":"<code>get_type() -&gt; constants.TimerTypeStr</code>","text":"<p>Return current timer type.</p> Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>def get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n    Returns:\n        timer type\n    \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"qt_modules/core/DeadlineTimer.html#prettyqt.core.deadlinetimer.DeadlineTimer.set_type","title":"<code>set_type(typ: constants.TimerTypeStr | constants.TimerType)</code>","text":"<p>Set the timer type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>constants.TimerTypeStr | constants.TimerType</code> <p>timer type</p> required Source code in <code>prettyqt\\core\\deadlinetimer.py</code> <pre><code>def set_type(self, typ: constants.TimerTypeStr | constants.TimerType):\n\"\"\"Set the timer type.\n    Args:\n        typ: timer type\n    \"\"\"\nself.setTimerType(constants.TIMER_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/core/DeadlineTimer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255066512[\"core.DeadlineTimer\"]\n  2103254774016[\"QtCore.QDeadlineTimer\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254774016 --&gt; 2103255066512\n  2103206874128 --&gt; 2103254774016\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Dir.html","title":"Dir","text":"<p>Qt Base Class: QDir</p> <p>Signature: <code>QDir(self, arg__1: Union[PySide6.QtCore.QDir, str]) -&gt; None QDir(self, path: Union[str, bytes, os.PathLike, NoneType]) -&gt; None QDir(self, path: Union[str, bytes, os.PathLike], nameFilter: str, sort: PySide6.QtCore.QDir.SortFlag = Instance(QDir.SortFlags(QDir.SortFlag.Name | QDir.SortFlag.IgnoreCase)), filter: PySide6.QtCore.QDir.Filter = Instance(QDir.Filter.AllEntries)) -&gt; None</code></p>"},{"location":"qt_modules/core/Dir.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QDir</code></p> <p>Access to directory structures and their contents.</p> Source code in <code>prettyqt\\core\\dir.py</code> <pre><code>class Dir(core.QDir):\n\"\"\"Access to directory structures and their contents.\"\"\"\ndef __getattr__(self, attr: str):\nreturn getattr(self.to_path(), attr)\ndef __repr__(self):\nreturn get_repr(self, self.absolutePath())\ndef __str__(self):\nreturn self.absolutePath()\ndef __reduce__(self):\nreturn type(self), (self.absolutePath(),)\ndef __truediv__(self, other: datatypes.PathType) -&gt; pathlib.Path:\nreturn self.to_path() / os.fspath(other)\ndef __fspath__(self) -&gt; str:\nreturn self.absolutePath()\ndef __bool__(self):\nreturn self.exists()\ndef __abs__(self) -&gt; str:\nreturn self.absolutePath()\n@property\ndef _absolutePath(self) -&gt; str:\nreturn self.absolutePath()\n__match_args__ = (\"_absolutePath\",)\ndef to_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absolutePath())\ndef set_filter(self, *filters: FilterStr):\nflags = FILTERS.merge_flags(filters)\nself.setFilter(flags)\ndef get_filter(self) -&gt; list[FilterStr]:\nreturn FILTERS.get_list(self.filter())\ndef get_entry_info_list(\nself, sort_mode: SortFlagStr = \"no_sort\", filters: FilterStr = \"none\"\n) -&gt; list[core.FileInfo]:\nreturn [\ncore.FileInfo(i)\nfor i in self.entryInfoList(\nsort=SORT_FLAG[sort_mode],\nfilters=self.Filter.AllEntries | FILTERS[filters],\n)\n]\ndef get_entry_list(\nself, sort_mode: SortFlagStr = \"no_sort\", filters: FilterStr = \"none\"\n) -&gt; list[pathlib.Path]:\nreturn [\npathlib.Path(i)\nfor i in self.entryList(sort=SORT_FLAG[sort_mode], filters=FILTERS[filters])\n]\n@classmethod\ndef get_current(cls) -&gt; Self:\nreturn cls(cls.current())\n@classmethod\ndef get_home(cls) -&gt; Self:\nreturn cls(cls.home())\n@classmethod\ndef get_current_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.currentPath())\n@classmethod\ndef get_home_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.homePath())\n@classmethod\ndef get_temp_path(cls) -&gt; pathlib.Path:\nreturn pathlib.Path(cls.tempPath())\n@classmethod\ndef get_drives(cls) -&gt; list[core.FileInfo]:\nreturn [core.FileInfo(i) for i in cls.drives()]\n@classmethod\ndef add_search_path(cls, prefix: str, path: datatypes.PathType):\ncls.addSearchPath(prefix, os.fspath(path))\n@classmethod\ndef set_search_paths(cls, prefix: str, paths: Iterable[datatypes.PathType]):\ncls.setSearchPaths(prefix, [os.fspath(p) for p in paths])\n</code></pre>"},{"location":"qt_modules/core/Dir.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254376848[\"core.Dir\"]\n  2103254796096[\"QtCore.QDir\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254796096 --&gt; 2103254376848\n  2103206874128 --&gt; 2103254796096\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/DirIterator.html","title":"DirIterator","text":"<p>Qt Base Class: QDirIterator</p> <p>Signature: <code>QDirIterator(self, dir: Union[PySide6.QtCore.QDir, str], flags: PySide6.QtCore.QDirIterator.IteratorFlag = Instance(PySide6.QtCore.QDirIterator.IteratorFlag.NoIteratorFlags)) -&gt; None QDirIterator(self, path: str, filter: PySide6.QtCore.QDir.Filter, flags: PySide6.QtCore.QDirIterator.IteratorFlag = Instance(PySide6.QtCore.QDirIterator.IteratorFlag.NoIteratorFlags)) -&gt; None QDirIterator(self, path: str, flags: PySide6.QtCore.QDirIterator.IteratorFlag = Instance(PySide6.QtCore.QDirIterator.IteratorFlag.NoIteratorFlags)) -&gt; None QDirIterator(self, path: str, nameFilters: Sequence[str], filters: PySide6.QtCore.QDir.Filter = Instance(QDir.NoFilter), flags: PySide6.QtCore.QDirIterator.IteratorFlag = Instance(PySide6.QtCore.QDirIterator.IteratorFlag.NoIteratorFlags)) -&gt; None</code></p>"},{"location":"qt_modules/core/DirIterator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QDirIterator</code></p> <p>Iterator for directory entrylists.</p> Source code in <code>prettyqt\\core\\diriterator.py</code> <pre><code>class DirIterator(core.QDirIterator):\n\"\"\"Iterator for directory entrylists.\"\"\"\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.hasNext():\nreturn self.next()\nraise StopIteration\ndef get_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.filePath())\ndef get_file_info(self) -&gt; core.FileInfo:\nreturn core.FileInfo(self.fileInfo())\n</code></pre>"},{"location":"qt_modules/core/DirIterator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254403728[\"core.DirIterator\"]\n  2103254768256[\"QtCore.QDirIterator\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254768256 --&gt; 2103254403728\n  2103206874128 --&gt; 2103254768256\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/EasingCurve.html","title":"EasingCurve","text":"<p>Qt Base Class: QEasingCurve</p> <p>Signature: <code>QEasingCurve(self, other: Union[PySide6.QtCore.QEasingCurve, PySide6.QtCore.QEasingCurve.Type]) -&gt; None QEasingCurve(self, type: PySide6.QtCore.QEasingCurve.Type = Instance(PySide6.QtCore.QEasingCurve.Type.Linear)) -&gt; None</code></p>"},{"location":"qt_modules/core/EasingCurve.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QEasingCurve</code></p> <p>Easing curves for controlling animation.</p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>class EasingCurve(serializemixin.SerializeMixin, QtCore.QEasingCurve):\n\"\"\"Easing curves for controlling animation.\"\"\"\ndef __init__(self, other_or_type: TypeStr | int | QtCore.QEasingCurve = \"linear\"):\nif isinstance(other_or_type, str) and other_or_type in TYPE:\ntyp = TYPE[other_or_type]\nelse:\ntyp = other_or_type\nsuper().__init__(typ)\ndef __getitem__(self, value: float) -&gt; float:\nreturn self.valueForProgress(value)\ndef __repr__(self):\nreturn get_repr(self, self.get_type())\ndef set_custom_type(self, method: CurveMethod):\nself.setCustomType(method)\ndef get_custom_type(self) -&gt; CurveMethod:\nreturn self.customType()  # type: ignore\ndef set_type(self, typ: TypeStr | QtCore.QEasingCurve.Type):\n\"\"\"Set easing curve type.\n        Args:\n            typ: easing curve type\n        \"\"\"\nself.setType(TYPE.get_enum_value(typ))\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Get the current easing curve type.\n        Returns:\n            easing curve type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/core/EasingCurve.html#prettyqt.core.easingcurve.EasingCurve.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Get the current easing curve type.</p> Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Get the current easing curve type.\n    Returns:\n        easing curve type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/core/EasingCurve.html#prettyqt.core.easingcurve.EasingCurve.set_type","title":"<code>set_type(typ: TypeStr | QtCore.QEasingCurve.Type)</code>","text":"<p>Set easing curve type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>TypeStr | QtCore.QEasingCurve.Type</code> <p>easing curve type</p> required Source code in <code>prettyqt\\core\\easingcurve.py</code> <pre><code>def set_type(self, typ: TypeStr | QtCore.QEasingCurve.Type):\n\"\"\"Set easing curve type.\n    Args:\n        typ: easing curve type\n    \"\"\"\nself.setType(TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/core/EasingCurve.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255064592[\"core.EasingCurve\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254772096[\"QtCore.QEasingCurve\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103255064592\n  140736120080256 --&gt; 2103255032912\n  2103254772096 --&gt; 2103255064592\n  2103206874128 --&gt; 2103254772096\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ElapsedTimer.html","title":"ElapsedTimer","text":"<p>Qt Base Class: QElapsedTimer</p> <p>Signature: <code>QElapsedTimer(self) -&gt; None QElapsedTimer(self, QElapsedTimer: PySide6.QtCore.QElapsedTimer) -&gt; None</code></p>"},{"location":"qt_modules/core/ElapsedTimer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QElapsedTimer</code></p> <p>Fast way to calculate elapsed times.</p> Source code in <code>prettyqt\\core\\elapsedtimer.py</code> <pre><code>class ElapsedTimer(QtCore.QElapsedTimer):\n\"\"\"Fast way to calculate elapsed times.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef get_clock_type(self) -&gt; ClockTypeStr:\n\"\"\"Return current clock type.\n        Returns:\n            clock type\n        \"\"\"\nreturn CLOCK_TYPE.inverse[self.clockType()]\n</code></pre>"},{"location":"qt_modules/core/ElapsedTimer.html#prettyqt.core.elapsedtimer.ElapsedTimer.get_clock_type","title":"<code>get_clock_type() -&gt; ClockTypeStr</code>","text":"<p>Return current clock type.</p> Source code in <code>prettyqt\\core\\elapsedtimer.py</code> <pre><code>def get_clock_type(self) -&gt; ClockTypeStr:\n\"\"\"Return current clock type.\n    Returns:\n        clock type\n    \"\"\"\nreturn CLOCK_TYPE.inverse[self.clockType()]\n</code></pre>"},{"location":"qt_modules/core/ElapsedTimer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255050192[\"core.ElapsedTimer\"]\n  2103254762496[\"QtCore.QElapsedTimer\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254762496 --&gt; 2103255050192\n  2103206874128 --&gt; 2103254762496\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Event.html","title":"Event","text":"<p>Qt Base Class: QEvent</p> <p>Signature: <code>QEvent(self, arg__1: PySide6.QtCore.QEvent) -&gt; None QEvent(self, type: PySide6.QtCore.QEvent.Type) -&gt; None</code></p>"},{"location":"qt_modules/core/Event.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QEvent</code></p> <p>The base class of all event classes. Event objects contain event parameters.</p> Source code in <code>prettyqt\\core\\event.py</code> <pre><code>class Event(QtCore.QEvent):\n\"\"\"The base class of all event classes. Event objects contain event parameters.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.type())\n</code></pre>"},{"location":"qt_modules/core/Event.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254852432[\"core.Event\"]\n  2103254757696[\"QtCore.QEvent\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254757696 --&gt; 2103254852432\n  2103206874128 --&gt; 2103254757696\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/EventLoop.html","title":"EventLoop","text":"<p>Qt Base Class: QEventLoop</p> <p>Signature: <code>QEventLoop(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/EventLoop.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QEventLoop</code></p> <p>Means of entering and leaving an event loop.</p> Source code in <code>prettyqt\\core\\eventloop.py</code> <pre><code>class EventLoop(core.ObjectMixin, core.QEventLoop):\n\"\"\"Means of entering and leaving an event loop.\"\"\"\ndef __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself._executing = False\ndef execute(\nself,\nuser_input: bool = True,\nsocket_notifiers: bool = True,\nwait_for_more: bool = False,\n) -&gt; int:\nif self._executing:\nraise AssertionError(\"Eventloop is already running!\")\nself._executing = True\nflag = core.QEventLoop.ProcessEventsFlag(0)\nif not user_input:\nflag |= 1\nif not socket_notifiers:\nflag |= 2\nif wait_for_more:\nflag |= 4\nstatus = self.exec(flag)\nself._executing = False\nreturn status\n</code></pre>"},{"location":"qt_modules/core/EventLoop.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255041552[\"core.EventLoop\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254759616[\"QtCore.QEventLoop\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255041552\n  140736120080256 --&gt; 2103255067472\n  2103254759616 --&gt; 2103255041552\n  2103254677056 --&gt; 2103254759616\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/EventLoop.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/File.html","title":"File","text":"<p>Qt Base Class: QFile</p> <p>Signature: <code>QFile(self) -&gt; None QFile(self, name: Union[str, bytes, os.PathLike]) -&gt; None QFile(self, name: Union[str, bytes, os.PathLike], parent: PySide6.QtCore.QObject) -&gt; None QFile(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/core/File.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>FileMixin</code>, <code>core.QFile</code></p> <p>Interface for reading from and writing to files.</p> Source code in <code>prettyqt\\core\\file.py</code> <pre><code>class File(FileMixin, core.QFile):\n\"\"\"Interface for reading from and writing to files.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/File.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255105872[\"core.File\"]\n  2103255104912[\"core.FileMixin\"]\n  2103255099152[\"core.FileDeviceMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254751936[\"QtCore.QFile\"]\n  2103254741376[\"QtCore.QFileDevice\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255104912 --&gt; 2103255105872\n  2103255099152 --&gt; 2103255104912\n  2103255106832 --&gt; 2103255099152\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254751936 --&gt; 2103255105872\n  2103254741376 --&gt; 2103254751936\n  2103254728896 --&gt; 2103254741376\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/File.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/FileDevice.html","title":"FileDevice","text":"<p>Qt Base Class: QFileDevice</p> <p>Signature: <code>QFileDevice(self) -&gt; None QFileDevice(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/core/FileDevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>FileDeviceMixin</code>, <code>core.QFileDevice</code></p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>class FileDevice(FileDeviceMixin, core.QFileDevice):\npass\n</code></pre>"},{"location":"qt_modules/core/FileDevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255100112[\"core.FileDevice\"]\n  2103255099152[\"core.FileDeviceMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254741376[\"QtCore.QFileDevice\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255099152 --&gt; 2103255100112\n  2103255106832 --&gt; 2103255099152\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254741376 --&gt; 2103255100112\n  2103254728896 --&gt; 2103254741376\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/FileDevice.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/FileDeviceMixin.html","title":"FileDeviceMixin","text":""},{"location":"qt_modules/core/FileDeviceMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IODeviceMixin</code></p> <p>Interface for reading from and writing to open files.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>class FileDeviceMixin(core.IODeviceMixin):\n\"\"\"Interface for reading from and writing to open files.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.fileName())\ndef __str__(self):\nreturn self.fileName()\n# def __fspath__(self) -&gt; str:\n#     return self.fileName()\ndef get_permissions(self) -&gt; list[PermissionStr]:\nreturn PERMISSIONS.get_list(self.permissions())\ndef set_file_time(\nself,\nfile_time: datatypes.DateTimeType,\ntyp: FileTimeStr | core.QFileDevice.FileTime,\n) -&gt; bool:\n\"\"\"Set file time.\n        Args:\n            file_time: file time to set\n            typ: file time type\n        \"\"\"\nfile_time = datatypes.to_datetime(file_time)\nreturn self.setFileTime(file_time, FILE_TIME.get_enum_value(typ))  # type: ignore\ndef get_file_time(\nself, typ: FileTimeStr | core.QFileDevice.FileTime\n) -&gt; datetime.datetime | None:\n\"\"\"Return current file time.\n        Returns:\n            file time\n        \"\"\"\nif date := self.fileTime(FILE_TIME.get_enum_value(typ)):\nreturn date.toPython()  # type: ignore\nreturn None\ndef get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n        Returns:\n            file error status\n        \"\"\"\nreturn FILE_ERROR.inverse[self.error()]\ndef is_readable(self) -&gt; bool:\n\"\"\"Returns whether file has ReadUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.ReadUser\ndef is_writable(self) -&gt; bool:\n\"\"\"Returns whether file has WriteUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.WriteUser\ndef is_executable(self) -&gt; bool:\n\"\"\"Returns whether file has ExeUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.ExeUser\n</code></pre> Name Children Inherits FileDeviceprettyqt.core.filedevice <ul><li>FileDeviceMixin</li><li>QFileDevice</li></ul> FileMixinprettyqt.core.file <ul><li>File</li><li>TemporaryFile</li></ul> <ul><li>FileDeviceMixin</li></ul> SaveFileprettyqt.core.savefile <ul><li>FileDeviceMixin</li><li>QSaveFile</li></ul>"},{"location":"qt_modules/core/FileDeviceMixin.html#prettyqt.core.filedevice.FileDeviceMixin.get_error","title":"<code>get_error() -&gt; FileErrorStr</code>","text":"<p>Return file error status.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_error(self) -&gt; FileErrorStr:\n\"\"\"Return file error status.\n    Returns:\n        file error status\n    \"\"\"\nreturn FILE_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/core/FileDeviceMixin.html#prettyqt.core.filedevice.FileDeviceMixin.get_file_time","title":"<code>get_file_time(typ: FileTimeStr | core.QFileDevice.FileTime) -&gt; datetime.datetime | None</code>","text":"<p>Return current file time.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def get_file_time(\nself, typ: FileTimeStr | core.QFileDevice.FileTime\n) -&gt; datetime.datetime | None:\n\"\"\"Return current file time.\n    Returns:\n        file time\n    \"\"\"\nif date := self.fileTime(FILE_TIME.get_enum_value(typ)):\nreturn date.toPython()  # type: ignore\nreturn None\n</code></pre>"},{"location":"qt_modules/core/FileDeviceMixin.html#prettyqt.core.filedevice.FileDeviceMixin.is_executable","title":"<code>is_executable() -&gt; bool</code>","text":"<p>Returns whether file has ExeUser permission flag.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def is_executable(self) -&gt; bool:\n\"\"\"Returns whether file has ExeUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.ExeUser\n</code></pre>"},{"location":"qt_modules/core/FileDeviceMixin.html#prettyqt.core.filedevice.FileDeviceMixin.is_readable","title":"<code>is_readable() -&gt; bool</code>","text":"<p>Returns whether file has ReadUser permission flag.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def is_readable(self) -&gt; bool:\n\"\"\"Returns whether file has ReadUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.ReadUser\n</code></pre>"},{"location":"qt_modules/core/FileDeviceMixin.html#prettyqt.core.filedevice.FileDeviceMixin.is_writable","title":"<code>is_writable() -&gt; bool</code>","text":"<p>Returns whether file has WriteUser permission flag.</p> Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def is_writable(self) -&gt; bool:\n\"\"\"Returns whether file has WriteUser permission flag.\"\"\"\nreturn self.permissions() &amp; core.QFileDevice.Permission.WriteUser\n</code></pre>"},{"location":"qt_modules/core/FileDeviceMixin.html#prettyqt.core.filedevice.FileDeviceMixin.set_file_time","title":"<code>set_file_time(file_time: datatypes.DateTimeType, typ: FileTimeStr | core.QFileDevice.FileTime) -&gt; bool</code>","text":"<p>Set file time.</p> <p>Parameters:</p> Name Type Description Default <code>file_time</code> <code>datatypes.DateTimeType</code> <p>file time to set</p> required <code>typ</code> <code>FileTimeStr | core.QFileDevice.FileTime</code> <p>file time type</p> required Source code in <code>prettyqt\\core\\filedevice.py</code> <pre><code>def set_file_time(\nself,\nfile_time: datatypes.DateTimeType,\ntyp: FileTimeStr | core.QFileDevice.FileTime,\n) -&gt; bool:\n\"\"\"Set file time.\n    Args:\n        file_time: file time to set\n        typ: file time type\n    \"\"\"\nfile_time = datatypes.to_datetime(file_time)\nreturn self.setFileTime(file_time, FILE_TIME.get_enum_value(typ))  # type: ignore\n</code></pre>"},{"location":"qt_modules/core/FileDeviceMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255099152[\"core.FileDeviceMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255106832 --&gt; 2103255099152\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/FileInfo.html","title":"FileInfo","text":"<p>Qt Base Class: QFileInfo</p> <p>Signature: <code>QFileInfo(self) -&gt; None QFileInfo(self, dir: Union[PySide6.QtCore.QDir, str], file: Union[str, bytes, os.PathLike]) -&gt; None QFileInfo(self, file: Union[str, bytes, os.PathLike]) -&gt; None QFileInfo(self, file: PySide6.QtCore.QFileDevice) -&gt; None QFileInfo(self, fileinfo: PySide6.QtCore.QFileInfo) -&gt; None</code></p>"},{"location":"qt_modules/core/FileInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QFileInfo</code></p> <p>System-independent file information.</p> Source code in <code>prettyqt\\core\\fileinfo.py</code> <pre><code>class FileInfo(core.QFileInfo):\n\"\"\"System-independent file information.\"\"\"\ndef __init__(self, *args, **kwargs):\nif len(args) == 1 and isinstance(args[0], os.PathLike):\nsuper().__init__(os.fspath(args[0]))\nelse:\nsuper().__init__(*args, **kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.absoluteFilePath())\n@property\ndef _absoluteFilePath(self) -&gt; str:\nreturn self.absoluteFilePath()\n__match_args__ = (\"_absoluteFilePath\",)\ndef __str__(self):\nreturn self.absoluteFilePath()\ndef __fspath__(self) -&gt; str:\nreturn self.absoluteFilePath()\ndef __getattr__(self, attr: str) -&gt; Any:\nreturn getattr(self.get_absolute_file_path(), attr)\ndef __reduce__(self):\nreturn type(self), (self.absoluteFilePath(),)\ndef get_dir(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.dir().absolutePath())\ndef get_absolute_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absoluteFilePath())\ndef get_birth_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.birthTime())\ndef get_metadata_change_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.metadataChangeTime())\ndef get_last_modified(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastModified())\ndef get_last_read(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastRead())\n</code></pre>"},{"location":"qt_modules/core/FileInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254389328[\"core.FileInfo\"]\n  2103254708736[\"QtCore.QFileInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254708736 --&gt; 2103254389328\n  2103206874128 --&gt; 2103254708736\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/FileMixin.html","title":"FileMixin","text":""},{"location":"qt_modules/core/FileMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.FileDeviceMixin</code></p> Source code in <code>prettyqt\\core\\file.py</code> <pre><code>class FileMixin(core.FileDeviceMixin):\npass\n</code></pre> Name Children Inherits Fileprettyqt.core.file <ul><li>FileMixin</li><li>QFile</li></ul> TemporaryFileprettyqt.core.temporaryfile <ul><li>FileMixin</li><li>QTemporaryFile</li></ul>"},{"location":"qt_modules/core/FileMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255104912[\"core.FileMixin\"]\n  2103255099152[\"core.FileDeviceMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255099152 --&gt; 2103255104912\n  2103255106832 --&gt; 2103255099152\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/FileSelector.html","title":"FileSelector","text":"<p>Qt Base Class: QFileSelector</p> <p>Signature: <code>QFileSelector(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/FileSelector.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QFileSelector</code></p> <p>Convenient way of selecting file variants.</p> Source code in <code>prettyqt\\core\\fileselector.py</code> <pre><code>class FileSelector(core.ObjectMixin, core.QFileSelector):\n\"\"\"Convenient way of selecting file variants.\"\"\"\ndef select_path(self, path: datatypes.PathType) -&gt; str:\nreturn self.select(os.fspath(path))\ndef select_url(self, url: datatypes.UrlType) -&gt; core.Url:\nif isinstance(url, str):\nurl = core.QUrl(url)\nreturn core.Url(self.select(url))\n</code></pre>"},{"location":"qt_modules/core/FileSelector.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255111632[\"core.FileSelector\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254740416[\"QtCore.QFileSelector\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255111632\n  140736120080256 --&gt; 2103255067472\n  2103254740416 --&gt; 2103255111632\n  2103254677056 --&gt; 2103254740416\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/FileSelector.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/FileSystemWatcher.html","title":"FileSystemWatcher","text":"<p>Qt Base Class: QFileSystemWatcher</p> <p>Signature: <code>QFileSystemWatcher(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QFileSystemWatcher(self, paths: Sequence[str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/FileSystemWatcher.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QFileSystemWatcher</code></p> <p>Interface for monitoring files and directories for modifications.</p> Source code in <code>prettyqt\\core\\filesystemwatcher.py</code> <pre><code>class FileSystemWatcher(core.ObjectMixin, core.QFileSystemWatcher):\n\"\"\"Interface for monitoring files and directories for modifications.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.directories() + self.files())\ndef get_directories(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.directories()]\ndef get_files(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.files()]\ndef get_paths(self) -&gt; list[pathlib.Path]:\nreturn self.get_directories() + self.get_files()\ndef add_path(self, path: datatypes.PathType) -&gt; bool:\nreturn self.addPath(os.fspath(path))\ndef add_paths(self, paths: Iterable[datatypes.PathType]):\nself.addPaths([os.fspath(p) for p in paths])\n</code></pre>"},{"location":"qt_modules/core/FileSystemWatcher.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255103952[\"core.FileSystemWatcher\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254739456[\"QtCore.QFileSystemWatcher\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255103952\n  140736120080256 --&gt; 2103255067472\n  2103254739456 --&gt; 2103255103952\n  2103254677056 --&gt; 2103254739456\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/FileSystemWatcher.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/IODevice.html","title":"IODevice","text":"<p>Qt Base Class: QIODevice</p> <p>Signature: <code>QIODevice(self) -&gt; None QIODevice(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/core/IODevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>IODeviceMixin</code>, <code>core.QIODevice</code></p> <p>The base interface class of all I/O devices in Qt.</p> Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>class IODevice(IODeviceMixin, core.QIODevice):\n\"\"\"The base interface class of all I/O devices in Qt.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/IODevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255098192[\"core.IODevice\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255106832 --&gt; 2103255098192\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254728896 --&gt; 2103255098192\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/IODevice.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/IODeviceMixin.html","title":"IODeviceMixin","text":""},{"location":"qt_modules/core/IODeviceMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\core\\iodevice.py</code> <pre><code>class IODeviceMixin(core.ObjectMixin):\ndef __len__(self):\nreturn self.size()\n@contextlib.contextmanager\ndef open_file(self, mode: OpenModeStr | mod.OpenModeFlag):\nself.open(OPEN_MODES.get_enum_value(mode))\nyield self\nself.close()\ndef get_open_mode(self) -&gt; OpenModeStr:\nreturn OPEN_MODES.inverse[self.openMode()]\n</code></pre> Name Children Inherits IODeviceprettyqt.core.iodevice <ul><li>IODeviceMixin</li><li>QIODevice</li></ul> FileDeviceMixinprettyqt.core.filedeviceInterface for reading from and writing to open files. <ul><li>FileDevice</li><li>FileMixin</li><li>SaveFile</li></ul> <ul><li>IODeviceMixin</li></ul> Bufferprettyqt.core.buffer <ul><li>IODeviceMixin</li><li>QBuffer</li></ul> Processprettyqt.core.process <ul><li>IODeviceMixin</li><li>QProcess</li></ul> BluetoothSocketprettyqt.bluetooth.bluetoothsocket <ul><li>IODeviceMixin</li><li>QBluetoothSocket</li></ul> AbstractSocketMixinprettyqt.network.abstractsocket <ul><li>AbstractSocket</li><li>TcpSocket</li><li>UdpSocket</li></ul> <ul><li>IODeviceMixin</li></ul> LocalSocketprettyqt.network.localsocket <ul><li>IODeviceMixin</li><li>QLocalSocket</li></ul>"},{"location":"qt_modules/core/IODeviceMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/IdentityProxyModel.html","title":"IdentityProxyModel","text":"<p>Qt Base Class: QIdentityProxyModel</p> <p>Signature: <code>QIdentityProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/IdentityProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractProxyModelMixin</code>, <code>core.QIdentityProxyModel</code></p> <p>Proxies its source model unmodified.</p> Source code in <code>prettyqt\\core\\identityproxymodel.py</code> <pre><code>class IdentityProxyModel(core.AbstractProxyModelMixin, core.QIdentityProxyModel):\n\"\"\"Proxies its source model unmodified.\"\"\"\nID = \"identity\"\n</code></pre> Name Children Inherits SliceIdentityProxyModelprettyqt.itemmodels.proxies.sliceidentityproxymodel <ul><li>SliceDisplayTextProxyModel</li><li>SliceChangeIconSizeProxyModel</li><li>SliceFilterProxyModel</li><li>SliceCheckableProxyModel</li><li>SliceCheckableTreeProxyModel</li><li>SliceAppearanceProxyModel</li><li>SliceChangeFlagsProxyModel</li><li>SliceColorValuesProxyModel</li><li>SliceColorCategoriesProxyModel</li><li>SliceValueTransformationProxyModel</li><li>...</li></ul> <ul><li>IdentityProxyModel</li></ul> TableToListProxyModelprettyqt.itemmodels.proxies.tabletolistproxymodel <ul><li>IdentityProxyModel</li></ul> ColumnOrderProxyModelprettyqt.itemmodels.proxies.columnorderproxymodel <ul><li>IdentityProxyModel</li></ul> AppearanceProxyModelprettyqt.itemmodels.proxies.appearanceproxymodel <ul><li>IdentityProxyModel</li></ul> ChangeHeadersProxyModelprettyqt.itemmodels.proxies.changeheadersproxymodel <ul><li>IdentityProxyModel</li></ul> HighlightMouseProxyModelprettyqt.itemmodels.proxies.highlightmouseproxymodel <ul><li>IdentityProxyModel</li></ul>"},{"location":"qt_modules/core/IdentityProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254404688[\"core.IdentityProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254622336[\"QtCore.QIdentityProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254406608 --&gt; 2103254404688\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254622336 --&gt; 2103254404688\n  2103254619456 --&gt; 2103254622336\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/IdentityProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel"},{"location":"qt_modules/core/ItemSelection.html","title":"ItemSelection","text":"<p>Qt Base Class: QItemSelection</p> <p>Signature: <code>QItemSelection(self) -&gt; PySide6.QtCore.QItemSelection QItemSelection(self, QItemSelection: PySide6.QtCore.QItemSelection) -&gt; None QItemSelection(self, topLeft: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex], bottomRight: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex]) -&gt; None</code></p>"},{"location":"qt_modules/core/ItemSelection.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QItemSelection</code></p> <p>Manages information about selected items in a model.</p> Source code in <code>prettyqt\\core\\itemselection.py</code> <pre><code>class ItemSelection(QtCore.QItemSelection):\n\"\"\"Manages information about selected items in a model.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/ItemSelection.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254379728[\"core.ItemSelection\"]\n  2103254642496[\"QtCore.QItemSelection\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254642496 --&gt; 2103254379728\n  2103206874128 --&gt; 2103254642496\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ItemSelectionModel.html","title":"ItemSelectionModel","text":"<p>Qt Base Class: QItemSelectionModel</p> <p>Signature: <code>QItemSelectionModel(self, model: PySide6.QtCore.QAbstractItemModel, parent: PySide6.QtCore.QObject) -&gt; None QItemSelectionModel(self, model: Optional[PySide6.QtCore.QAbstractItemModel] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/ItemSelectionModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QItemSelectionModel</code></p> <p>Keeps track of a view's selected items.</p> Source code in <code>prettyqt\\core\\itemselectionmodel.py</code> <pre><code>class ItemSelectionModel(core.ObjectMixin, core.QItemSelectionModel):\n\"\"\"Keeps track of a view's selected items.\"\"\"\ndef __contains__(self, index: core.ModelIndex) -&gt; bool:\nreturn self.isSelected(index)\ndef set_current_index(self, index, flag: SelectionFlagStr):\nself.setCurrentIndex(index, SELECTION_FLAG[flag])\n</code></pre> Name Children Inherits LinkedSelectionModelprettyqt.itemmodels.proxies.linkedselectionmodel <ul><li>ItemSelectionModel</li></ul>"},{"location":"qt_modules/core/ItemSelectionModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254378768[\"core.ItemSelectionModel\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254711616[\"QtCore.QItemSelectionModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103254378768\n  140736120080256 --&gt; 2103255067472\n  2103254711616 --&gt; 2103254378768\n  2103254677056 --&gt; 2103254711616\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ItemSelectionModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>model</code> QAbstractItemModel <code>hasSelection</code> bool <code>currentIndex</code> QModelIndex <code>selection</code> QItemSelection <code>selectedIndexes</code> QList"},{"location":"qt_modules/core/ItemSelectionRange.html","title":"ItemSelectionRange","text":"<p>Qt Base Class: QItemSelectionRange</p> <p>Signature: <code>QItemSelectionRange(self) -&gt; None QItemSelectionRange(self, QItemSelectionRange: PySide6.QtCore.QItemSelectionRange) -&gt; None QItemSelectionRange(self, index: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex]) -&gt; None QItemSelectionRange(self, topL: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex], bottomR: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex]) -&gt; None</code></p>"},{"location":"qt_modules/core/ItemSelectionRange.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QItemSelectionRange</code></p> <p>Manages information about a range of selected items in a model.</p> Source code in <code>prettyqt\\core\\itemselectionrange.py</code> <pre><code>class ItemSelectionRange(core.QItemSelectionRange):\n\"\"\"Manages information about a range of selected items in a model.\"\"\"\ndef __contains__(self, other: core.ModelIndex):\nreturn self.contains(other)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __iter__(self) -&gt; Iterator[core.ModelIndex]:\nreturn iter(self.indexes())  # type: ignore\ndef __len__(self):\nreturn len(self.indexes())\ndef __and__(self, other: core.QItemSelectionRange):\nreturn self.intersected(other)\n</code></pre>"},{"location":"qt_modules/core/ItemSelectionRange.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254402768[\"core.ItemSelectionRange\"]\n  2103254658816[\"QtCore.QItemSelectionRange\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254658816 --&gt; 2103254402768\n  2103206874128 --&gt; 2103254658816\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/JsonDocument.html","title":"JsonDocument","text":"<p>Qt Base Class: QJsonDocument</p> <p>Signature: <code>QJsonDocument(self) -&gt; None QJsonDocument(self, array: PySide6.QtCore.QJsonArray) -&gt; None QJsonDocument(self, object: Dict[str, PySide6.QtCore.QJsonValue]) -&gt; None QJsonDocument(self, other: PySide6.QtCore.QJsonDocument) -&gt; None</code></p>"},{"location":"qt_modules/core/JsonDocument.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QJsonDocument</code></p> <p>Way to read and write JSON documents.</p> Source code in <code>prettyqt\\core\\jsondocument.py</code> <pre><code>class JsonDocument(core.QJsonDocument):\n\"\"\"Way to read and write JSON documents.\"\"\"\ndef __str__(self):\nreturn str(self.toVariant())\ndef __format__(self, fmt):\nif fmt in JSON_FORMAT:\nreturn self.to_string(fmt == \"indented\")\nreturn super().__format__(fmt)\ndef __repr__(self):\nreturn get_repr(self, self.toVariant())\ndef __getitem__(self, index: int | str):\nval = self.array() if self.isArray() else self.object()\nreturn core.JsonValue(val[index])  # type: ignore\ndef __setitem__(self, index: int | str, value):\nif self.isArray():\nif not isinstance(index, int):\nraise TypeError\narray = self.array()\narray[index] = value\nself.setArray(array)\nelif self.isObject():\nif not isinstance(index, str):\nraise TypeError\nobj = self.object()\nobj[index] = value\nself.setObject(obj)\ndef to_string(self, indented: bool = False) -&gt; str:\nflag = self.JsonFormat.Indented if indented else self.JsonFormat.Compact\nreturn self.toJson(flag).data().decode()\n@classmethod\ndef from_variant(cls, obj) -&gt; Self:\ndoc = cls.fromVariant(obj)\nnew = cls()\nif doc.isArray():\nnew.setArray(doc.array())\nelse:\nnew.setObject(doc.object())\nreturn new\n</code></pre>"},{"location":"qt_modules/core/JsonDocument.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254414288[\"core.JsonDocument\"]\n  2103254669376[\"QtCore.QJsonDocument\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254669376 --&gt; 2103254414288\n  2103206874128 --&gt; 2103254669376\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/JsonValue.html","title":"JsonValue","text":"<p>Qt Base Class: QJsonValue</p> <p>Signature: <code>QJsonValue(self, a: PySide6.QtCore.QJsonArray) -&gt; None QJsonValue(self, arg__1: PySide6.QtCore.QJsonValue.Type = Instance(PySide6.QtCore.QJsonValue.Type.Null)) -&gt; None QJsonValue(self, b: bool) -&gt; None QJsonValue(self, n: float) -&gt; None QJsonValue(self, n: int) -&gt; None QJsonValue(self, o: Dict[str, PySide6.QtCore.QJsonValue]) -&gt; None QJsonValue(self, other: Union[PySide6.QtCore.QJsonValue, PySide6.QtCore.QJsonValue.Type, bool, PySide6.QtCore.QJsonArray, Dict[str, PySide6.QtCore.QJsonValue], str, bytes, float, int]) -&gt; None QJsonValue(self, s: str) -&gt; None QJsonValue(self, s: bytes) -&gt; None QJsonValue(self, v: int) -&gt; None</code></p>"},{"location":"qt_modules/core/JsonValue.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QJsonValue</code></p> <p>Encapsulates a value in JSON.</p> Source code in <code>prettyqt\\core\\jsonvalue.py</code> <pre><code>class JsonValue(QtCore.QJsonValue):\n\"\"\"Encapsulates a value in JSON.\"\"\"\ndef __str__(self):\nreturn str(self.toVariant())\ndef __repr__(self):\nreturn get_repr(self, self.toVariant())\n</code></pre>"},{"location":"qt_modules/core/JsonValue.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254417168[\"core.JsonValue\"]\n  2103254646336[\"QtCore.QJsonValue\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254646336 --&gt; 2103254417168\n  2103206874128 --&gt; 2103254646336\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/KeyCombination.html","title":"KeyCombination","text":"<p>Qt Base Class: QKeyCombination</p> <p>Signature: <code>QKeyCombination(self, arg__1: Union[PySide6.QtCore.QKeyCombination, PySide6.QtCore.Qt.KeyboardModifier, PySide6.QtCore.Qt.Key]) -&gt; None QKeyCombination(self, key: PySide6.QtCore.Qt.Key = Instance(Qt.Key_unknown)) -&gt; None QKeyCombination(self, modifiers: PySide6.QtCore.Qt.KeyboardModifier, key: PySide6.QtCore.Qt.Key = Instance(Qt.Key_unknown)) -&gt; None QKeyCombination(self, modifiers: PySide6.QtCore.Qt.Modifier, key: PySide6.QtCore.Qt.Key) -&gt; None</code></p>"},{"location":"qt_modules/core/KeyCombination.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QKeyCombination</code></p> <p>Stores a combination of a key with optional modifiers.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>class KeyCombination(serializemixin.SerializeMixin, QtCore.QKeyCombination):\n\"\"\"Stores a combination of a key with optional modifiers.\"\"\"\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in MODIFIERS.inverse.values():\nmods = args[0].split(\"+\")\nqtmod = functools.reduce(or_, [MODIFIERS[m] for m in mods])\nsuper().__init__(qtmod, Keys.No)\nreturn\ncase (str(),):\n*mods, btn = args[0].split(\"+\")\n# get modifiler\nqtmod = (\nfunctools.reduce(or_, [MODIFIERS[m] for m in mods])\nif mods\nelse Mod.NoModifier\n)\n# get button\nif btn in _SYMBOLS:\nbtn = _SYMBOLS[btn]\nif btn.isalnum():\nbtn = btn.upper()\nqtkey = getattr(Key, f\"Key_{btn}\") if btn != \"{}\" else Keys.Any\nsuper().__init__(qtmod, qtkey)\ncase (QtCore.QEvent(),):\nmodifier = args[0].modifiers()\nmodifier ^= Mod.KeypadModifier\nkey = args[0].key()\nif key in MODIFIER_KEYS:  # modifier only\nkey = Keys.No\nsuper().__init__(key, modifier)\ncase _:\nsuper().__init__(*args, **kwargs)\ndef __eq__(self, other):\nif isinstance(other, str | Key):\nother = KeyCombination(other)\nreturn super().__eq__(other)\ndef __add__(self, other):\nfrom prettyqt import gui\nreturn gui.KeySequence(self, other)\ndef __repr__(self):\nreturn get_repr(self, self.key(), self.keyboardModifiers())\ndef is_typing(self) -&gt; bool:\n\"\"\"True if key is a letter or number.\"\"\"\nmod_ok = self.keyboardModifiers() in (Mod.NoModifier, Mod.ShiftModifier)\nkey = self.key()\nkey_ok = (\nKey.Key_Exclam &lt;= key &lt;= Key.Key_ydiaeresis\nor Keys.ALPHA &lt;= key &lt;= Keys.OMEGA\nor Keys.CYR_A &lt;= key &lt;= Keys.CYR_YA\n)\nreturn mod_ok and key_ok\ndef is_moving(self) -&gt; bool:\n\"\"\"True if arrows are pushed.\"\"\"\nreturn self.key() in ARROW_KEYS\ndef is_moving_func(self) -&gt; bool:\n\"\"\"True if function arrows are pushed.\"\"\"\nreturn self.key() in FUNC_ARROW_KEYS\ndef has_modifier(self, modifier: constants.KeyboardModifierStr) -&gt; bool:\n\"\"\"True if keycombo contains modifier.\"\"\"\nreturn bool(self.keyboardModifiers() &amp; constants.KEYBOARD_MODIFIERS[modifier])\ndef has_key(self) -&gt; bool:\n\"\"\"True if non-modifier key is pressed.\"\"\"\nreturn self.key() != Keys.No\ndef get_key(self) -&gt; constants.KeyStr:\nreturn constants.KEY.inverse[self.key()]\ndef get_modifiers(self) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(self.keyboardModifiers())\n</code></pre>"},{"location":"qt_modules/core/KeyCombination.html#prettyqt.core.keycombination.KeyCombination.has_key","title":"<code>has_key() -&gt; bool</code>","text":"<p>True if non-modifier key is pressed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def has_key(self) -&gt; bool:\n\"\"\"True if non-modifier key is pressed.\"\"\"\nreturn self.key() != Keys.No\n</code></pre>"},{"location":"qt_modules/core/KeyCombination.html#prettyqt.core.keycombination.KeyCombination.has_modifier","title":"<code>has_modifier(modifier: constants.KeyboardModifierStr) -&gt; bool</code>","text":"<p>True if keycombo contains modifier.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def has_modifier(self, modifier: constants.KeyboardModifierStr) -&gt; bool:\n\"\"\"True if keycombo contains modifier.\"\"\"\nreturn bool(self.keyboardModifiers() &amp; constants.KEYBOARD_MODIFIERS[modifier])\n</code></pre>"},{"location":"qt_modules/core/KeyCombination.html#prettyqt.core.keycombination.KeyCombination.is_moving","title":"<code>is_moving() -&gt; bool</code>","text":"<p>True if arrows are pushed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_moving(self) -&gt; bool:\n\"\"\"True if arrows are pushed.\"\"\"\nreturn self.key() in ARROW_KEYS\n</code></pre>"},{"location":"qt_modules/core/KeyCombination.html#prettyqt.core.keycombination.KeyCombination.is_moving_func","title":"<code>is_moving_func() -&gt; bool</code>","text":"<p>True if function arrows are pushed.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_moving_func(self) -&gt; bool:\n\"\"\"True if function arrows are pushed.\"\"\"\nreturn self.key() in FUNC_ARROW_KEYS\n</code></pre>"},{"location":"qt_modules/core/KeyCombination.html#prettyqt.core.keycombination.KeyCombination.is_typing","title":"<code>is_typing() -&gt; bool</code>","text":"<p>True if key is a letter or number.</p> Source code in <code>prettyqt\\core\\keycombination.py</code> <pre><code>def is_typing(self) -&gt; bool:\n\"\"\"True if key is a letter or number.\"\"\"\nmod_ok = self.keyboardModifiers() in (Mod.NoModifier, Mod.ShiftModifier)\nkey = self.key()\nkey_ok = (\nKey.Key_Exclam &lt;= key &lt;= Key.Key_ydiaeresis\nor Keys.ALPHA &lt;= key &lt;= Keys.OMEGA\nor Keys.CYR_A &lt;= key &lt;= Keys.CYR_YA\n)\nreturn mod_ok and key_ok\n</code></pre>"},{"location":"qt_modules/core/KeyCombination.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254401808[\"core.KeyCombination\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103257941520[\"QtCore.QKeyCombination\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103254401808\n  140736120080256 --&gt; 2103255032912\n  2103257941520 --&gt; 2103254401808\n  2103206874128 --&gt; 2103257941520\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Library.html","title":"Library","text":"<p>Qt Base Class: QLibrary</p> <p>Signature: <code>QLibrary(self, fileName: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QLibrary(self, fileName: str, verNum: int, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QLibrary(self, fileName: str, version: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QLibrary(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Library.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QLibrary</code></p> <p>Loads shared libraries at runtime.</p> Source code in <code>prettyqt\\core\\library.py</code> <pre><code>class Library(core.ObjectMixin, core.QLibrary):\n\"\"\"Loads shared libraries at runtime.\"\"\"\ndef __bool__(self):\nreturn self.isLoaded()\ndef __repr__(self):\nreturn get_repr(self, self.fileName())\ndef get_load_hints(self) -&gt; list[LoadHintStr]:\nreturn LOAD_HINTS.get_list(self.loadHints())\ndef set_load_hints(self, **kwargs):\nflag = core.QLibrary.LoadHint(0)\nfor k, v in kwargs.items():\nif v is True:\nflag |= LOAD_HINTS[k]\nself.setLoadHints(flag)\n</code></pre>"},{"location":"qt_modules/core/Library.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254416208[\"core.Library\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254710656[\"QtCore.QLibrary\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103254416208\n  140736120080256 --&gt; 2103255067472\n  2103254710656 --&gt; 2103254416208\n  2103254677056 --&gt; 2103254710656\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Library.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>fileName</code> QString <code>loadHints</code> QFlags"},{"location":"qt_modules/core/LibraryInfo.html","title":"LibraryInfo","text":"<p>Qt Base Class: QLibraryInfo</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/core/LibraryInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QLibraryInfo</code></p> <p>Information about the Qt library.</p> Source code in <code>prettyqt\\core\\libraryinfo.py</code> <pre><code>class LibraryInfo(core.QLibraryInfo):\n\"\"\"Information about the Qt library.\"\"\"\n@classmethod\ndef get_location(cls, location: LocationStr) -&gt; pathlib.Path:\npath = cls.path(LOCATION.get_enum_value(location))\nreturn pathlib.Path(path)\n@classmethod\ndef get_version(cls) -&gt; core.VersionNumber:\nreturn core.VersionNumber(cls.version())\n</code></pre>"},{"location":"qt_modules/core/LibraryInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255080912[\"core.LibraryInfo\"]\n  2103257935760[\"QtCore.QLibraryInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257935760 --&gt; 2103255080912\n  2103206874128 --&gt; 2103257935760\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Line.html","title":"Line","text":"<p>Qt Base Class: QLine</p> <p>Signature: <code>QLine(self) -&gt; None QLine(self, QLine: PySide6.QtCore.QLine) -&gt; None QLine(self, pt1: PySide6.QtCore.QPoint, pt2: PySide6.QtCore.QPoint) -&gt; None QLine(self, x1: int, y1: int, x2: int, y2: int) -&gt; None</code></p>"},{"location":"qt_modules/core/Line.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QLine</code></p> <p>Two-dimensional vector using integer precision.</p> Source code in <code>prettyqt\\core\\line.py</code> <pre><code>class Line(core.QLine):\n\"\"\"Two-dimensional vector using integer precision.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_p1(), self.get_p2())\n@property\ndef _x1(self) -&gt; int:\nreturn self.get_x1()\n@property\ndef _y1(self) -&gt; int:\nreturn self.y1()\n@property\ndef _x2(self) -&gt; int:\nreturn self.x2()\n@property\ndef _y2(self) -&gt; int:\nreturn self.y2()\n__match_args__ = (\"_x1\", \"_y1\", \"_x2\", \"_y2\")\ndef __reduce__(self):\nreturn type(self), (self.get_p1(), self.get_p1())\ndef __abs__(self) -&gt; float:\np = self.get_p2() - self.get_p1()\nreturn math.sqrt((p.x() * p.x()) + (p.y() * p.y()))\ndef __reversed__(self) -&gt; Self:\nreturn type(self)(self.get_p2(), self.get_p1())\ndef __iter__(self) -&gt; Iterator[core.Point]:\nyield self.get_p1()\nyield self.get_p2()\ndef __getitem__(self, index: Literal[0, 1]) -&gt; core.Point:\nmatch index:\ncase 0:\nreturn self.get_p1()\ncase 1:\nreturn self.get_p2()\ncase _:\nraise IndexError(index)\ndef __setitem__(self, index: Literal[0, 1], value: datatypes.PointType):\nmatch index:\ncase 0:\nself.set_p1(value)\ncase 1:\nself.set_p2(value)\ncase _:\nraise KeyError(index)\ndef get_p1(self) -&gt; core.Point:\nreturn core.Point(self.p1())\ndef set_p1(self, point: datatypes.PointType):\nself.setP1(datatypes.to_point(point))\ndef get_p2(self) -&gt; core.Point:\nreturn core.Point(self.p2())\ndef set_p2(self, point: datatypes.PointType):\nself.setP2(datatypes.to_point(point))\ndef get_center(self) -&gt; core.Point:\nreturn core.Point(self.center())\n</code></pre>"},{"location":"qt_modules/core/Line.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255042512[\"core.Line\"]\n  2103257934800[\"QtCore.QLine\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257934800 --&gt; 2103255042512\n  2103206874128 --&gt; 2103257934800\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/LineF.html","title":"LineF","text":"<p>Qt Base Class: QLineF</p> <p>Signature: <code>QLineF(self) -&gt; None QLineF(self, QLineF: Union[PySide6.QtCore.QLineF, PySide6.QtCore.QLine]) -&gt; None QLineF(self, line: PySide6.QtCore.QLine) -&gt; None QLineF(self, pt1: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint], pt2: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint]) -&gt; None QLineF(self, x1: float, y1: float, x2: float, y2: float) -&gt; None</code></p>"},{"location":"qt_modules/core/LineF.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QLineF</code></p> <p>Two-dimensional vector using floating point precision.</p> Source code in <code>prettyqt\\core\\linef.py</code> <pre><code>class LineF(core.QLineF):\n\"\"\"Two-dimensional vector using floating point precision.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_p1(), self.get_p2())\n@property\ndef _x1(self) -&gt; float:\nreturn self.get_x1()\n@property\ndef _y1(self) -&gt; float:\nreturn self.y1()\n@property\ndef _x2(self) -&gt; float:\nreturn self.x2()\n@property\ndef _y2(self) -&gt; float:\nreturn self.y2()\n__match_args__ = (\"_x1\", \"_y1\", \"_x2\", \"_y2\")\ndef __reduce__(self):\nreturn type(self), (self.get_p1(), self.get_p1())\ndef __reversed__(self):\nreturn LineF(self.get_p2(), self.get_p1())\ndef __abs__(self) -&gt; float:\nreturn self.length()\ndef __iter__(self) -&gt; Iterator[core.PointF]:\nyield self.get_p1()\nyield self.get_p2()\ndef __getitem__(self, index: Literal[0, 1]) -&gt; core.PointF:\nmatch index:\ncase 0:\nreturn self.get_p1()\ncase 1:\nreturn self.get_p2()\ncase _:\nraise KeyError(index)\ndef __setitem__(self, index: Literal[0, 1], value: datatypes.PointFType):\nmatch index:\ncase 0:\nself.set_p1(value)\ncase 1:\nself.set_p2(value)\ncase _:\nraise KeyError(index)\ndef set_p1(self, point: datatypes.PointFType):\nself.setP1(datatypes.to_pointf(point))\ndef get_p1(self) -&gt; core.PointF:\nreturn core.PointF(self.p1())\ndef set_p2(self, point: datatypes.PointFType):\nself.setP2(datatypes.to_pointf(point))\ndef get_p2(self) -&gt; core.PointF:\nreturn core.PointF(self.p2())\ndef get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\ndef get_normal_vector(self) -&gt; Self:\nreturn type(self)(self.normalVector())\ndef get_unit_vector(self) -&gt; Self:\nreturn type(self)(self.unitVector())\ndef to_line(self) -&gt; core.Line:\nreturn core.Line(self.toLine())\n</code></pre>"},{"location":"qt_modules/core/LineF.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255033872[\"core.LineF\"]\n  2103257944400[\"QtCore.QLineF\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257944400 --&gt; 2103255033872\n  2103206874128 --&gt; 2103257944400\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Locale.html","title":"Locale","text":"<p>Qt Base Class: QLocale</p> <p>Signature: <code>QLocale(self) -&gt; None QLocale(self, language: PySide6.QtCore.QLocale.Language, script: PySide6.QtCore.QLocale.Script = Instance(QLocale.Script.AnyScript), territory: PySide6.QtCore.QLocale.Country = Instance(QLocale.Country.AnyTerritory)) -&gt; None QLocale(self, language: PySide6.QtCore.QLocale.Language, territory: PySide6.QtCore.QLocale.Country) -&gt; None QLocale(self, name: str) -&gt; None QLocale(self, other: Union[PySide6.QtCore.QLocale, PySide6.QtCore.QLocale.Language]) -&gt; None</code></p>"},{"location":"qt_modules/core/Locale.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QLocale</code></p> <p>Converts between numbers and their string representations in various languages.</p> Source code in <code>prettyqt\\core\\_locale.py</code> <pre><code>class Locale(QtCore.QLocale):\n\"\"\"Converts between numbers and their string representations in various languages.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.bcp47Name())\ndef __reduce__(self):\nreturn type(self), (self.bcp47Name(),)\ndef get_flag_unicode(self):\nname = self.name().split(\"_\")[1]\nname = [c for c in name.lower() if c.isalnum()]\nreturn \"\".join([chr(ord(c.upper()) + OFFSET) for c in name])\n@classmethod\ndef get_system_locale(cls) -&gt; Self:\nreturn cls(cls.system())\n@classmethod\ndef get_c_locale(cls) -&gt; Self:\nreturn cls(cls.c())\n@classmethod\ndef get_system_language(cls) -&gt; str:\nreturn cls.get_system_locale().uiLanguages()[0]\ndef get_country(self):\nreturn COUNTRY.inverse[self.country()]\ndef get_measurement_system(self) -&gt; MeasurementSystemStr:\nreturn MEASUREMENT_SYSTEM.inverse[self.measurementSystem()]\ndef get_formatted_data_size(\nself, size: int, precision: int = 2, fmt: DataSizeFormatStr = \"iec\"\n) -&gt; str:\nif size &lt; 0:\nreturn \"\"\nreturn self.formattedDataSize(size, precision, DATA_SIZE_FORMAT[fmt])\ndef get_first_day_of_week(self) -&gt; constants.DayOfWeekStr:\nreturn constants.DAY_OF_WEEK.inverse[self.firstDayOfWeek()]\ndef get_text_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.textDirection()]\ndef get_weekdays(self) -&gt; list[constants.DayOfWeekStr]:\nreturn [constants.DAY_OF_WEEK.inverse[i] for i in self.weekdays()]\ndef get_day_name(self, day: int, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dayName(day, FORMAT_TYPE[format_type])\ndef get_month_name(self, month: int, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.monthName(month, FORMAT_TYPE[format_type])\ndef get_standalone_day_name(\nself, day: int, format_type: FormatTypeStr = \"long\"\n) -&gt; str:\nreturn self.standaloneDayName(day, FORMAT_TYPE[format_type])\ndef get_time_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.timeFormat(FORMAT_TYPE[format_type])\ndef get_date_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dateFormat(FORMAT_TYPE[format_type])\ndef get_datetime_format(self, format_type: FormatTypeStr = \"long\") -&gt; str:\nreturn self.dateTimeFormat(FORMAT_TYPE[format_type])\ndef to_datetime(\nself, text: str, format_type: FormatTypeStr | str = \"long\"\n) -&gt; QtCore.QDateTime:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.toDateTime(text, format_type)\ndef to_date(\nself, text: str, format_type: FormatTypeStr | str = \"long\"\n) -&gt; QtCore.QDate:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.toDate(text, format_type)\ndef to_time(\nself, text: str, format_type: FormatTypeStr | str = \"long\"\n) -&gt; QtCore.QTime:\nif format_type in {\"long\", \"short\", \"narrow\"}:\nformat_type = FORMAT_TYPE[format_type]\nreturn self.to_time(text, format_type)\ndef get_standalone_month_name(\nself, month: int, format_type: FormatTypeStr = \"long\"\n) -&gt; str:\nreturn self.standaloneMonthName(month, FORMAT_TYPE[format_type])\ndef quote_string(self, string: str, alternate_style: bool = False) -&gt; str:\nflag = (\nself.QuotationStyle.AlternateQuotation\nif alternate_style\nelse self.QuotationStyle.StandardQuotation\n)\nreturn self.quoteString(string, flag)\n@classmethod\ndef get_all_locales(cls) -&gt; list[Self]:\nreturn [\ncls(i)\nfor i in cls.matchingLocales(\ncls.Language.AnyLanguage, cls.Script.AnyScript, cls.Country.AnyCountry\n)\n]\n</code></pre>"},{"location":"qt_modules/core/Locale.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255072272[\"core.Locale\"]\n  2103257878160[\"QtCore.QLocale\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257878160 --&gt; 2103255072272\n  2103206874128 --&gt; 2103257878160\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/LockFile.html","title":"LockFile","text":"<p>Qt Base Class: QLockFile</p> <p>Signature: <code>QLockFile(self, fileName: str) -&gt; None</code></p>"},{"location":"qt_modules/core/LockFile.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QLockFile</code></p> <p>Locking between processes using a file.</p> Source code in <code>prettyqt\\core\\lockfile.py</code> <pre><code>class LockFile(QtCore.QLockFile):\n\"\"\"Locking between processes using a file.\"\"\"\ndef __init__(self, path: datatypes.PathType):\nsuper().__init__(os.fspath(path))\ndef get_error(self) -&gt; LockErrorStr:\nreturn LOCK_ERROR.inverse[self.error()]\n@contextlib.contextmanager\ndef lock_file(self):\nself.lock()\nyield self\nself.unlock()\n</code></pre>"},{"location":"qt_modules/core/LockFile.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255107792[\"core.LockFile\"]\n  2103257908880[\"QtCore.QLockFile\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257908880 --&gt; 2103255107792\n  2103206874128 --&gt; 2103257908880\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/LoggingCategory.html","title":"LoggingCategory","text":"<p>Qt Base Class: QLoggingCategory</p> <p>Signature: <code>QLoggingCategory(self, category: bytes, severityLevel: PySide6.QtCore.QtMsgType = Instance(PySide6.QtCore.QtMsgType.QtDebugMsg)) -&gt; None</code></p>"},{"location":"qt_modules/core/LoggingCategory.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QLoggingCategory</code></p> <p>Represents a category, or 'area' in the logging infrastructure.</p> Source code in <code>prettyqt\\core\\loggingcategory.py</code> <pre><code>class LoggingCategory(QtCore.QLoggingCategory):\n\"\"\"Represents a category, or 'area' in the logging infrastructure.\"\"\"\ndef get_level(self) -&gt; MsgTypeStr:\nif self.isDebugEnabled():\nreturn \"debug\"\nelif self.isInfoEnabled():\nreturn \"info\"\nelif self.isWarningEnabled():\nreturn \"warning\"\nelif self.isCriticalEnabled():\nreturn \"critical\"\nelse:\nreturn \"fatal\"\ndef set_enabled(\nself,\nlevel: MsgTypeStr,\n):\nself.setEnabled(MSG_TYPE[level], True)\ndef set_disabled(self, level: MsgTypeStr):\nself.setEnabled(MSG_TYPE[level], False)\n</code></pre>"},{"location":"qt_modules/core/LoggingCategory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254962832[\"core.LoggingCategory\"]\n  2103257907920[\"QtCore.QLoggingCategory\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257907920 --&gt; 2103254962832\n  2103206874128 --&gt; 2103257907920\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Margins.html","title":"Margins","text":"<p>Qt Base Class: QMargins</p> <p>Signature: <code>QMargins(self) -&gt; None QMargins(self, QMargins: PySide6.QtCore.QMargins) -&gt; None QMargins(self, left: int, top: int, right: int, bottom: int) -&gt; None</code></p>"},{"location":"qt_modules/core/Margins.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QMargins</code></p> <p>Defines the four margins of a rectangle.</p> Source code in <code>prettyqt\\core\\margins.py</code> <pre><code>class Margins(QtCore.QMargins):\n\"\"\"Defines the four margins of a rectangle.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.left(), self.top(), self.right(), self.bottom())\ndef __reduce__(self):\nreturn type(self), (self.left(), self.top(), self.right(), self.bottom())\n@property\ndef _left(self) -&gt; int:\nreturn self.left()\n@property\ndef _top(self) -&gt; int:\nreturn self.top()\n@property\ndef _right(self) -&gt; int:\nreturn self.right()\n@property\ndef _bottom(self) -&gt; int:\nreturn self.bottom()\n__match_args__ = (\"_left\", \"_top\", \"_right\", \"_bottom\")\ndef __bool__(self):\nreturn not self.isNull()\ndef __iter__(self) -&gt; Iterator[int]:\nyield self.left()\nyield self.top()\nyield self.right()\nyield self.bottom()\n</code></pre>"},{"location":"qt_modules/core/Margins.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255053072[\"core.Margins\"]\n  2103257906960[\"QtCore.QMargins\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257906960 --&gt; 2103255053072\n  2103206874128 --&gt; 2103257906960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/MarginsF.html","title":"MarginsF","text":"<p>Qt Base Class: QMarginsF</p> <p>Signature: <code>QMarginsF(self) -&gt; None QMarginsF(self, QMarginsF: Union[PySide6.QtCore.QMarginsF, PySide6.QtCore.QMargins]) -&gt; None QMarginsF(self, left: float, top: float, right: float, bottom: float) -&gt; None QMarginsF(self, margins: PySide6.QtCore.QMargins) -&gt; None</code></p>"},{"location":"qt_modules/core/MarginsF.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QMarginsF</code></p> <p>Defines the four margins of a rectangle (floating point precision).</p> Source code in <code>prettyqt\\core\\marginsf.py</code> <pre><code>class MarginsF(QtCore.QMarginsF):\n\"\"\"Defines the four margins of a rectangle (floating point precision).\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.left(), self.top(), self.right(), self.bottom())\n@property\ndef _left(self) -&gt; float:\nreturn self.left()\n@property\ndef _top(self) -&gt; float:\nreturn self.top()\n@property\ndef _right(self) -&gt; float:\nreturn self.right()\n@property\ndef _bottom(self) -&gt; float:\nreturn self.bottom()\n__match_args__ = (\"_left\", \"_top\", \"_right\", \"_bottom\")\ndef __reduce__(self):\nreturn type(self), (self.left(), self.top(), self.right(), self.bottom())\ndef __bool__(self):\nreturn not self.isNull()\ndef __iter__(self) -&gt; Iterator[float]:\nyield self.left()\nyield self.top()\nyield self.right()\nyield self.bottom()\n</code></pre>"},{"location":"qt_modules/core/MarginsF.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255039632[\"core.MarginsF\"]\n  2103257874320[\"QtCore.QMarginsF\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257874320 --&gt; 2103255039632\n  2103206874128 --&gt; 2103257874320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/MetaEnum.html","title":"MetaEnum","text":""},{"location":"qt_modules/core/MetaEnum.html#docstrings","title":"DocStrings","text":"<p>Meta-data about an enumerator.</p> Source code in <code>prettyqt\\core\\metaenum.py</code> <pre><code>class MetaEnum:\n\"\"\"Meta-data about an enumerator.\"\"\"\ndef __init__(self, metaenum: QtCore.QMetaEnum):\nself.item = metaenum\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __bool__(self):\nreturn self.item.isValid()\ndef __getitem__(self, index: str | tuple[str, str]) -&gt; int:\nmatch index:\ncase str():\nresult = self.item.keyToValue(index)[0]  # type: ignore\ncase (str(), str()):\nval = \"|\".join(index)\nresult = self.item.keysToValue(val)[0]  # type: ignore\ncase _:\nraise TypeError(index)\nif result == -1:\nraise KeyError(index)\nreturn result  # type: ignore\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef __len__(self):\nreturn self.item.keyCount()\ndef get_enum_name(self) -&gt; str:\nreturn self.item.enumName()  # type: ignore\ndef get_scope(self) -&gt; str:\nreturn self.item.scope()  # type: ignore\ndef get_scope_object(self):\nscope = self.get_scope()\nreturn QtCore.Qt if scope == \"Qt\" else classhelpers.get_class_by_name(scope)\ndef get_name(self) -&gt; str:\nreturn self.item.name()  # type: ignore\ndef list_options(self):\nreturn [self.value(i) for i in range(self.keyCount())]\n</code></pre>"},{"location":"qt_modules/core/MetaEnum.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255062672[\"core.MetaEnum\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103255062672</code></pre>"},{"location":"qt_modules/core/MetaMethod.html","title":"MetaMethod","text":""},{"location":"qt_modules/core/MetaMethod.html#docstrings","title":"DocStrings","text":"<p>Meta-data about an member method.</p> Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>class MetaMethod:\n\"\"\"Meta-data about an member method.\"\"\"\ndef __init__(self, metamethod: core.QMetaMethod):\nself.item = metamethod\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __bool__(self):\nreturn self.item.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef get_access(self) -&gt; AccessStr:\nreturn ACCESS.inverse[self.item.access()]\ndef get_method_type(self) -&gt; MethodTypeStr:\nreturn METHOD_TYPE.inverse[self.item.methodType()]\ndef get_method_signature(self) -&gt; str:\nreturn self.item.methodSignature().data().decode()\ndef get_normalized_method_signature(self) -&gt; str:\n\"\"\"Returns something like 'objectNameChanged(QString)'.\"\"\"\nsig = self.item.methodSignature()\nnormalized = core.QMetaObject.normalizedSignature(sig.data().decode())\nreturn normalized.data().decode()\ndef get_name(self) -&gt; str:\nreturn self.item.name().data().decode()\ndef get_parameters(self) -&gt; list[core.MetaType]:\ncount = self.parameterCount()\nreturn [core.MetaType(self.parameterMetaType(i).id()) for i in range(count)]\ndef get_return_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.returnMetaType().id())\ndef get_parameter_types(self) -&gt; list[str]:\n\"\"\"Returns sth. like ['QString'].\"\"\"\nreturn [i.data().decode() for i in self.parameterTypes()]\n</code></pre>"},{"location":"qt_modules/core/MetaMethod.html#prettyqt.core.metamethod.MetaMethod.get_normalized_method_signature","title":"<code>get_normalized_method_signature() -&gt; str</code>","text":"<p>Returns something like 'objectNameChanged(QString)'.</p> Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_normalized_method_signature(self) -&gt; str:\n\"\"\"Returns something like 'objectNameChanged(QString)'.\"\"\"\nsig = self.item.methodSignature()\nnormalized = core.QMetaObject.normalizedSignature(sig.data().decode())\nreturn normalized.data().decode()\n</code></pre>"},{"location":"qt_modules/core/MetaMethod.html#prettyqt.core.metamethod.MetaMethod.get_parameter_types","title":"<code>get_parameter_types() -&gt; list[str]</code>","text":"<p>Returns sth. like ['QString'].</p> Source code in <code>prettyqt\\core\\metamethod.py</code> <pre><code>def get_parameter_types(self) -&gt; list[str]:\n\"\"\"Returns sth. like ['QString'].\"\"\"\nreturn [i.data().decode() for i in self.parameterTypes()]\n</code></pre>"},{"location":"qt_modules/core/MetaMethod.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255049232[\"core.MetaMethod\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103255049232</code></pre>"},{"location":"qt_modules/core/MetaObject.html","title":"MetaObject","text":""},{"location":"qt_modules/core/MetaObject.html#docstrings","title":"DocStrings","text":"<p>Contains meta-information about Qt objects.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>class MetaObject:\n\"\"\"Contains meta-information about Qt objects.\"\"\"\ndef __init__(self, metaobject: core.QMetaObject):\nself.item = metaobject\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_super_class(self) -&gt; MetaObject | None:\n\"\"\"Get SuperClass MetaObject.\"\"\"\nreturn MetaObject(klass) if (klass := self.superClass()) is not None else None\ndef get_all_super_classes(self) -&gt; list[MetaObject]:\n\"\"\"Get SuperClass MetaObject.\"\"\"\nklasses = []\nwhile klass := self.superClass():\nklasses.append(MetaObject(klass))\nreturn klasses\ndef get_name(self) -&gt; str:\n\"\"\"Get MetaObject class name.\"\"\"\nreturn self.className()\ndef get_class_info(self, include_super: bool = True) -&gt; dict[str, str]:\n\"\"\"Get MetaObject class info.\n        Arguments:\n            include_super: Whether to include class info from parent classes.\n        \"\"\"\nstart = 0 if include_super else self.item.classInfoOffset()\ncount = self.item.classInfoCount()\nclassinfos = [self.item.classInfo(i) for i in range(start, count)]\nreturn {i.name(): i.value() for i in classinfos}\ndef get_method(self, index: int | str) -&gt; core.MetaMethod:\n\"\"\"Get MetaMethod based on index or name.\n        Arguments:\n            index: index or method name\n        \"\"\"\nif isinstance(index, int):\nmethod = core.MetaMethod(self.item.method(index))\nif not method.isValid():\nraise KeyError(index)\nreturn method\nfor method in self.get_methods():\nif method.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn method\nraise KeyError(index)\ndef get_enum(self, index: int | str) -&gt; core.MetaEnum:\n\"\"\"Get MetaEnum based on index or name.\n        Arguments:\n            index: index or Enum name\n        \"\"\"\nif isinstance(index, int):\nenum = core.MetaEnum(self.item.enumerator(index))\nif not enum.isValid():\nraise KeyError(index)\nreturn enum\nfor enumerator in self.get_enums():\nif enumerator.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn enumerator\nraise KeyError(index)\ndef has_property(self, name: str):\n\"\"\"Check if a property with given name exists.\n        Only checks for non-dynamic properties.\n        Arguments:\n            name: property name\n        \"\"\"\ntry:\nself.get_property(name)\nreturn True\nexcept KeyError:\nreturn False\ndef get_property(self, index: int | str) -&gt; core.MetaProperty:\n\"\"\"Get MetaProperty based on index or name.\n        Only returns non-dynamic properties.\n        Arguments:\n            index: index or property name\n        \"\"\"\nif isinstance(index, int):\nprop = core.MetaProperty(self.item.property(index))\nif not prop.isValid():\nraise KeyError(index)\nreturn prop\nfor prop in self.get_properties():\nif prop.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn prop\nraise KeyError(index)\ndef get_constructor(self, index: int | str) -&gt; core.MetaMethod:\n\"\"\"Get ctor MetaMethod based on index or name.\n        Arguments:\n            index: index or constructor name\n        \"\"\"\nif isinstance(index, int):\nmethod = core.MetaMethod(self.item.constructor(index))\nif not method.isValid():\nraise KeyError(index)\nreturn method\nfor method in self.get_constructors():\nif method.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn method\nraise KeyError(index)\ndef get_methods(\nself,\ninclude_super: bool = True,\ntype_filter: core.metamethod.MethodTypeStr | None = None,\nfilter_internal: bool = True,\n) -&gt; list[core.MetaMethod]:\n\"\"\"Get all MetaMethods based on given criteria.\n        Arguments:\n            include_super: Whether to include Methods from parent classes\n            type_filter: Method type to filter for.\n            filter_internal: Filter Qt-internal methods\n        \"\"\"\nstart = 0 if include_super else self.item.methodOffset()\nmethods = [\nmethod\nfor i in range(start, self.item.methodCount())\nif not (method := self.get_method(i)).get_name().startswith(\"_q_\")\nor not filter_internal\n]\nif type_filter is None:\nreturn methods\nelse:\nreturn [i for i in methods if i.get_method_type() == type_filter]\ndef get_enums(self, include_super: bool = True) -&gt; list[core.MetaEnum]:\n\"\"\"Get all MetaEnums based on given criteria.\n        Arguments:\n            include_super: Whether to include Enums from parent classes.\n        \"\"\"\nstart = 0 if include_super else self.item.enumeratorOffset()\nreturn [self.get_enum(i) for i in range(start, self.item.enumeratorCount())]\ndef get_constructors(self) -&gt; list[core.MetaMethod]:\n\"\"\"Get all ctor MetaMethods.\"\"\"\ncount = self.item.constructorCount()\nreturn [core.MetaMethod(self.item.constructor(i)) for i in range(count)]\ndef get_properties(\nself,\ninclude_super: bool = True,\nonly_writable: bool = False,\nonly_stored: bool = False,\nonly_bindable: bool = False,\nonly_designable: bool = False,\nonly_final: bool = False,\nonly_required: bool = False,\nonly_enum_type: bool = False,\nonly_flag_type: bool = False,\nonly_with_notifiers: bool = False,\nonly_with_type_name: str = \"\",\n) -&gt; list[core.MetaProperty]:\n\"\"\"Get all MetaProperties based on given criteria.\n        Arguments:\n            include_super: Whether to include properties from parent classes,\n            only_writable: Whether to filter for writable properties.\n            only_stored: Whether to filter for stored properties.\n            only_bindable: Whether to filter for bindable properties.\n            only_designable: Whether to filter for designable properties.\n            only_final: Whether to filter for final properties.\n            only_required: Whether to filter for required properties.\n            only_enum_type: Whether to filter for Enum type properties.\n            only_flag_type: Whether to filter for Flag_type properties.\n            only_with_notifiers: Whether to filter for properties with notifier.\n            only_with_type_name: Only include properties with given give name as type.\n        \"\"\"\nstart = 0 if include_super else self.item.propertyOffset()\ncount = self.item.propertyCount()\nprop_list = []\nfor i in range(start, count):\nprop = self.item.property(i)\nif (\n(only_writable and not prop.isWritable())\nor (only_stored and not prop.isStored())\nor (only_bindable and not prop.isBindable())\nor (only_designable and not prop.isDesignable())\nor (only_final and not prop.isFinal())\nor (only_required and not prop.isRequired())\nor (only_enum_type and not prop.isEnumType())\nor (only_flag_type and not prop.isFlagType())\nor (only_with_notifiers and not prop.hasNotifier())\nor (only_with_type_name and prop.typeName() != only_with_type_name)\n):\ncontinue\nprop_list.append(core.MetaProperty(prop))\nreturn prop_list\ndef get_property_values(\nself, qobject: core.QObject, cast_types: bool = False\n) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary containing all MetaProperties values from given qobject.\n        Arguments:\n            qobject: QObject to get properties from\n            cast_types: Whether to cast types to PrettyQt classes.\n        \"\"\"\nvals = {prop.get_name(): prop.read(qobject) for prop in self.get_properties()}\nif cast_types:\nreturn {k: datatypes.make_serializable(v) for k, v in vals.items()}\nelse:\nreturn vals\ndef get_signals(\nself, include_super: bool = True, only_notifiers: bool = False\n) -&gt; list[core.MetaMethod]:\n\"\"\"Get all signal MetaMethods based on given criteria.\n        Arguments:\n            include_super: Whether to include Signals from parent classes\n            only_notifiers: Whether to filter for property notifier signals\n        \"\"\"\nif only_notifiers:\nreturn [  # type: ignore\nprop.get_notify_signal()\nfor prop in self.get_properties(include_super)\nif prop.hasNotifySignal()\n]\nelse:\nreturn self.get_methods(include_super=include_super, type_filter=\"signal\")\ndef get_slots(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\n\"\"\"Get all slot MetaMethods based on given criteria.\n        Arguments:\n            include_super: Whether to include Slots from parent classes\n        \"\"\"\nreturn self.get_methods(include_super=include_super, type_filter=\"slot\")\ndef get_plain_methods(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\n\"\"\"Get all plain MetaMethods based on given criteria.\n        Arguments:\n            include_super: Whether to include plain methods from parent classes\n        \"\"\"\nreturn self.get_methods(include_super=include_super, type_filter=\"method\")\ndef get_meta_type(self) -&gt; core.MetaType:\n\"\"\"Get Meta type of this MetaObject.\"\"\"\nreturn core.MetaType(self.metaType().id())\ndef get_user_property(self) -&gt; core.MetaProperty | None:\n\"\"\"Get MetaProperty marked as userprop.\"\"\"\nreturn core.MetaProperty(p) if (p := self.userProperty()).isValid() else None\n# just experimenting\n@classmethod\ndef invoke_method(\ncls,\nobj: core.QObject,\nmethod: str,\n*args,\nconnection_type: constants.ConnectionTypeStr = \"auto\",\n):\nconn = constants.CONNECTION_TYPE[connection_type]\nargs = tuple(core.Q_ARG(type(arg), arg) for arg in args)\nreturn cls.invokeMethod(obj, method, conn, *args)\ndef get_new_instance(self, *args, **kwargs):\nargs = tuple(core.Q_ARG(type(i), i) for i in args)\nkwargs = {k: core.Q_ARG(type(v), v) for k, v in kwargs.items()}\n# requires core.QGenericArgumentHolder for PySide6\nself.newInstance(*args, **kwargs)\ndef connect_signals(\nself,\nsource_qobject: core.QObject,\nfn_or_qobject: Callable | core.QObject,\nonly_notifiers: bool = False,\n) -&gt; list[core.QMetaObject.Connection]:\n\"\"\"Connect all signals of a given qobject.\n        Either connect all signals to a function or connect each signal\n        to the corresponding signal of the receiver.\n        \"\"\"\nhandles = []\nfor signal in self.get_signals(only_notifiers=only_notifiers):\nsignal_name = signal.get_name()\nif not hasattr(source_qobject, signal_name):\n# PyQt6 reports applicationNameChanged for QCoreApplication,\n# but it doesnt exist...\nlogger.warning(f\"Signal {signal_name} does not exist.\")\ncontinue\nsignal_instance = source_qobject.__getattribute__(signal_name)\nslot = (\nfn_or_qobject.__getattribute__(signal_name)\nif isinstance(fn_or_qobject, core.QObject)\nelse fn_or_qobject\n)\nhandle = signal_instance.connect(slot)\nhandles.append(handle)\nlogger.debug(f\"connected {len(handles)} signals to {fn_or_qobject}.\")\nreturn handles\ndef copy(self, qobject: T, forward_signals: bool = True) -&gt; T:\n\"\"\"Create a copy of given QObject.\n        Arguments:\n            qobject: QObject to create a copied instance for.\n            forward_signals: Whether to connect all signals from qobject to the new\n                             instance.\n        \"\"\"\ntry:\nnew = type(qobject)()\nexcept TypeError:\n# this should should cover most cases.\nnew = type(qobject)(qobject.orientation())\nfor prop in self.get_properties(only_writable=True):\nval = prop.read(qobject)\nprop.write(new, val)\nif forward_signals:\nself.connect_signals(new, qobject)\nlogger.debug(f\"copied {qobject!r}\")\nreturn new\n@classmethod\ndef copy_properties_to(cls, source: core.QObject, target: core.QObject):\n\"\"\"Sets all properties of target to value of source.\n        Only sets properties which exist for both QObjects.\n        Arguments:\n            source: Source QObject\n            target: Target QObject\n        \"\"\"\nsource_metaobj = cls(source.metaObject())\ntarget_metaobj = cls(target.metaObject())\nfor prop in target_metaobj.get_properties(only_writable=True):\nif source_metaobj.has_property(prop_name := prop.get_name()):\ntarget.setProperty(prop_name, source.property(prop_name))\ndef get_property_class_affiliations(self) -&gt; dict[str, list[core.MetaProperty]]:\n\"\"\"Get a mapping of class -&gt; property affiliations.\"\"\"\nmapper = {}\nmetaclass = self\nwhile metaclass is not None:\nmapper[metaclass.get_name()] = [\nmetaclass.get_property(i)\nfor i in range(metaclass.propertyOffset(), metaclass.propertyCount())\n]\nmetaclass = metaclass.get_super_class()\nreturn mapper\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.connect_signals","title":"<code>connect_signals(source_qobject: core.QObject, fn_or_qobject: Callable | core.QObject, only_notifiers: bool = False) -&gt; list[core.QMetaObject.Connection]</code>","text":"<p>Connect all signals of a given qobject.</p> <p>Either connect all signals to a function or connect each signal to the corresponding signal of the receiver.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def connect_signals(\nself,\nsource_qobject: core.QObject,\nfn_or_qobject: Callable | core.QObject,\nonly_notifiers: bool = False,\n) -&gt; list[core.QMetaObject.Connection]:\n\"\"\"Connect all signals of a given qobject.\n    Either connect all signals to a function or connect each signal\n    to the corresponding signal of the receiver.\n    \"\"\"\nhandles = []\nfor signal in self.get_signals(only_notifiers=only_notifiers):\nsignal_name = signal.get_name()\nif not hasattr(source_qobject, signal_name):\n# PyQt6 reports applicationNameChanged for QCoreApplication,\n# but it doesnt exist...\nlogger.warning(f\"Signal {signal_name} does not exist.\")\ncontinue\nsignal_instance = source_qobject.__getattribute__(signal_name)\nslot = (\nfn_or_qobject.__getattribute__(signal_name)\nif isinstance(fn_or_qobject, core.QObject)\nelse fn_or_qobject\n)\nhandle = signal_instance.connect(slot)\nhandles.append(handle)\nlogger.debug(f\"connected {len(handles)} signals to {fn_or_qobject}.\")\nreturn handles\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.copy","title":"<code>copy(qobject: T, forward_signals: bool = True) -&gt; T</code>","text":"<p>Create a copy of given QObject.</p> <p>Parameters:</p> Name Type Description Default <code>qobject</code> <code>T</code> <p>QObject to create a copied instance for.</p> required <code>forward_signals</code> <code>bool</code> <p>Whether to connect all signals from qobject to the new              instance.</p> <code>True</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def copy(self, qobject: T, forward_signals: bool = True) -&gt; T:\n\"\"\"Create a copy of given QObject.\n    Arguments:\n        qobject: QObject to create a copied instance for.\n        forward_signals: Whether to connect all signals from qobject to the new\n                         instance.\n    \"\"\"\ntry:\nnew = type(qobject)()\nexcept TypeError:\n# this should should cover most cases.\nnew = type(qobject)(qobject.orientation())\nfor prop in self.get_properties(only_writable=True):\nval = prop.read(qobject)\nprop.write(new, val)\nif forward_signals:\nself.connect_signals(new, qobject)\nlogger.debug(f\"copied {qobject!r}\")\nreturn new\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.copy_properties_to","title":"<code>copy_properties_to(source: core.QObject, target: core.QObject)</code>  <code>classmethod</code>","text":"<p>Sets all properties of target to value of source.</p> <p>Only sets properties which exist for both QObjects.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>core.QObject</code> <p>Source QObject</p> required <code>target</code> <code>core.QObject</code> <p>Target QObject</p> required Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>@classmethod\ndef copy_properties_to(cls, source: core.QObject, target: core.QObject):\n\"\"\"Sets all properties of target to value of source.\n    Only sets properties which exist for both QObjects.\n    Arguments:\n        source: Source QObject\n        target: Target QObject\n    \"\"\"\nsource_metaobj = cls(source.metaObject())\ntarget_metaobj = cls(target.metaObject())\nfor prop in target_metaobj.get_properties(only_writable=True):\nif source_metaobj.has_property(prop_name := prop.get_name()):\ntarget.setProperty(prop_name, source.property(prop_name))\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_all_super_classes","title":"<code>get_all_super_classes() -&gt; list[MetaObject]</code>","text":"<p>Get SuperClass MetaObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_all_super_classes(self) -&gt; list[MetaObject]:\n\"\"\"Get SuperClass MetaObject.\"\"\"\nklasses = []\nwhile klass := self.superClass():\nklasses.append(MetaObject(klass))\nreturn klasses\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_class_info","title":"<code>get_class_info(include_super: bool = True) -&gt; dict[str, str]</code>","text":"<p>Get MetaObject class info.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include class info from parent classes.</p> <code>True</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_class_info(self, include_super: bool = True) -&gt; dict[str, str]:\n\"\"\"Get MetaObject class info.\n    Arguments:\n        include_super: Whether to include class info from parent classes.\n    \"\"\"\nstart = 0 if include_super else self.item.classInfoOffset()\ncount = self.item.classInfoCount()\nclassinfos = [self.item.classInfo(i) for i in range(start, count)]\nreturn {i.name(): i.value() for i in classinfos}\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_constructor","title":"<code>get_constructor(index: int | str) -&gt; core.MetaMethod</code>","text":"<p>Get ctor MetaMethod based on index or name.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | str</code> <p>index or constructor name</p> required Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_constructor(self, index: int | str) -&gt; core.MetaMethod:\n\"\"\"Get ctor MetaMethod based on index or name.\n    Arguments:\n        index: index or constructor name\n    \"\"\"\nif isinstance(index, int):\nmethod = core.MetaMethod(self.item.constructor(index))\nif not method.isValid():\nraise KeyError(index)\nreturn method\nfor method in self.get_constructors():\nif method.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn method\nraise KeyError(index)\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_constructors","title":"<code>get_constructors() -&gt; list[core.MetaMethod]</code>","text":"<p>Get all ctor MetaMethods.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_constructors(self) -&gt; list[core.MetaMethod]:\n\"\"\"Get all ctor MetaMethods.\"\"\"\ncount = self.item.constructorCount()\nreturn [core.MetaMethod(self.item.constructor(i)) for i in range(count)]\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_enum","title":"<code>get_enum(index: int | str) -&gt; core.MetaEnum</code>","text":"<p>Get MetaEnum based on index or name.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | str</code> <p>index or Enum name</p> required Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_enum(self, index: int | str) -&gt; core.MetaEnum:\n\"\"\"Get MetaEnum based on index or name.\n    Arguments:\n        index: index or Enum name\n    \"\"\"\nif isinstance(index, int):\nenum = core.MetaEnum(self.item.enumerator(index))\nif not enum.isValid():\nraise KeyError(index)\nreturn enum\nfor enumerator in self.get_enums():\nif enumerator.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn enumerator\nraise KeyError(index)\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_enums","title":"<code>get_enums(include_super: bool = True) -&gt; list[core.MetaEnum]</code>","text":"<p>Get all MetaEnums based on given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include Enums from parent classes.</p> <code>True</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_enums(self, include_super: bool = True) -&gt; list[core.MetaEnum]:\n\"\"\"Get all MetaEnums based on given criteria.\n    Arguments:\n        include_super: Whether to include Enums from parent classes.\n    \"\"\"\nstart = 0 if include_super else self.item.enumeratorOffset()\nreturn [self.get_enum(i) for i in range(start, self.item.enumeratorCount())]\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_meta_type","title":"<code>get_meta_type() -&gt; core.MetaType</code>","text":"<p>Get Meta type of this MetaObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_meta_type(self) -&gt; core.MetaType:\n\"\"\"Get Meta type of this MetaObject.\"\"\"\nreturn core.MetaType(self.metaType().id())\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_method","title":"<code>get_method(index: int | str) -&gt; core.MetaMethod</code>","text":"<p>Get MetaMethod based on index or name.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | str</code> <p>index or method name</p> required Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_method(self, index: int | str) -&gt; core.MetaMethod:\n\"\"\"Get MetaMethod based on index or name.\n    Arguments:\n        index: index or method name\n    \"\"\"\nif isinstance(index, int):\nmethod = core.MetaMethod(self.item.method(index))\nif not method.isValid():\nraise KeyError(index)\nreturn method\nfor method in self.get_methods():\nif method.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn method\nraise KeyError(index)\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_methods","title":"<code>get_methods(include_super: bool = True, type_filter: core.metamethod.MethodTypeStr | None = None, filter_internal: bool = True) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all MetaMethods based on given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include Methods from parent classes</p> <code>True</code> <code>type_filter</code> <code>core.metamethod.MethodTypeStr | None</code> <p>Method type to filter for.</p> <code>None</code> <code>filter_internal</code> <code>bool</code> <p>Filter Qt-internal methods</p> <code>True</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_methods(\nself,\ninclude_super: bool = True,\ntype_filter: core.metamethod.MethodTypeStr | None = None,\nfilter_internal: bool = True,\n) -&gt; list[core.MetaMethod]:\n\"\"\"Get all MetaMethods based on given criteria.\n    Arguments:\n        include_super: Whether to include Methods from parent classes\n        type_filter: Method type to filter for.\n        filter_internal: Filter Qt-internal methods\n    \"\"\"\nstart = 0 if include_super else self.item.methodOffset()\nmethods = [\nmethod\nfor i in range(start, self.item.methodCount())\nif not (method := self.get_method(i)).get_name().startswith(\"_q_\")\nor not filter_internal\n]\nif type_filter is None:\nreturn methods\nelse:\nreturn [i for i in methods if i.get_method_type() == type_filter]\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_name","title":"<code>get_name() -&gt; str</code>","text":"<p>Get MetaObject class name.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_name(self) -&gt; str:\n\"\"\"Get MetaObject class name.\"\"\"\nreturn self.className()\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_plain_methods","title":"<code>get_plain_methods(include_super: bool = True) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all plain MetaMethods based on given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include plain methods from parent classes</p> <code>True</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_plain_methods(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\n\"\"\"Get all plain MetaMethods based on given criteria.\n    Arguments:\n        include_super: Whether to include plain methods from parent classes\n    \"\"\"\nreturn self.get_methods(include_super=include_super, type_filter=\"method\")\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_properties","title":"<code>get_properties(include_super: bool = True, only_writable: bool = False, only_stored: bool = False, only_bindable: bool = False, only_designable: bool = False, only_final: bool = False, only_required: bool = False, only_enum_type: bool = False, only_flag_type: bool = False, only_with_notifiers: bool = False, only_with_type_name: str = '') -&gt; list[core.MetaProperty]</code>","text":"<p>Get all MetaProperties based on given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include properties from parent classes,</p> <code>True</code> <code>only_writable</code> <code>bool</code> <p>Whether to filter for writable properties.</p> <code>False</code> <code>only_stored</code> <code>bool</code> <p>Whether to filter for stored properties.</p> <code>False</code> <code>only_bindable</code> <code>bool</code> <p>Whether to filter for bindable properties.</p> <code>False</code> <code>only_designable</code> <code>bool</code> <p>Whether to filter for designable properties.</p> <code>False</code> <code>only_final</code> <code>bool</code> <p>Whether to filter for final properties.</p> <code>False</code> <code>only_required</code> <code>bool</code> <p>Whether to filter for required properties.</p> <code>False</code> <code>only_enum_type</code> <code>bool</code> <p>Whether to filter for Enum type properties.</p> <code>False</code> <code>only_flag_type</code> <code>bool</code> <p>Whether to filter for Flag_type properties.</p> <code>False</code> <code>only_with_notifiers</code> <code>bool</code> <p>Whether to filter for properties with notifier.</p> <code>False</code> <code>only_with_type_name</code> <code>str</code> <p>Only include properties with given give name as type.</p> <code>''</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_properties(\nself,\ninclude_super: bool = True,\nonly_writable: bool = False,\nonly_stored: bool = False,\nonly_bindable: bool = False,\nonly_designable: bool = False,\nonly_final: bool = False,\nonly_required: bool = False,\nonly_enum_type: bool = False,\nonly_flag_type: bool = False,\nonly_with_notifiers: bool = False,\nonly_with_type_name: str = \"\",\n) -&gt; list[core.MetaProperty]:\n\"\"\"Get all MetaProperties based on given criteria.\n    Arguments:\n        include_super: Whether to include properties from parent classes,\n        only_writable: Whether to filter for writable properties.\n        only_stored: Whether to filter for stored properties.\n        only_bindable: Whether to filter for bindable properties.\n        only_designable: Whether to filter for designable properties.\n        only_final: Whether to filter for final properties.\n        only_required: Whether to filter for required properties.\n        only_enum_type: Whether to filter for Enum type properties.\n        only_flag_type: Whether to filter for Flag_type properties.\n        only_with_notifiers: Whether to filter for properties with notifier.\n        only_with_type_name: Only include properties with given give name as type.\n    \"\"\"\nstart = 0 if include_super else self.item.propertyOffset()\ncount = self.item.propertyCount()\nprop_list = []\nfor i in range(start, count):\nprop = self.item.property(i)\nif (\n(only_writable and not prop.isWritable())\nor (only_stored and not prop.isStored())\nor (only_bindable and not prop.isBindable())\nor (only_designable and not prop.isDesignable())\nor (only_final and not prop.isFinal())\nor (only_required and not prop.isRequired())\nor (only_enum_type and not prop.isEnumType())\nor (only_flag_type and not prop.isFlagType())\nor (only_with_notifiers and not prop.hasNotifier())\nor (only_with_type_name and prop.typeName() != only_with_type_name)\n):\ncontinue\nprop_list.append(core.MetaProperty(prop))\nreturn prop_list\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_property","title":"<code>get_property(index: int | str) -&gt; core.MetaProperty</code>","text":"<p>Get MetaProperty based on index or name.</p> <p>Only returns non-dynamic properties.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | str</code> <p>index or property name</p> required Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property(self, index: int | str) -&gt; core.MetaProperty:\n\"\"\"Get MetaProperty based on index or name.\n    Only returns non-dynamic properties.\n    Arguments:\n        index: index or property name\n    \"\"\"\nif isinstance(index, int):\nprop = core.MetaProperty(self.item.property(index))\nif not prop.isValid():\nraise KeyError(index)\nreturn prop\nfor prop in self.get_properties():\nif prop.get_name() in [index, helpers.to_lower_camel(index)]:\nreturn prop\nraise KeyError(index)\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_property_class_affiliations","title":"<code>get_property_class_affiliations() -&gt; dict[str, list[core.MetaProperty]]</code>","text":"<p>Get a mapping of class -&gt; property affiliations.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property_class_affiliations(self) -&gt; dict[str, list[core.MetaProperty]]:\n\"\"\"Get a mapping of class -&gt; property affiliations.\"\"\"\nmapper = {}\nmetaclass = self\nwhile metaclass is not None:\nmapper[metaclass.get_name()] = [\nmetaclass.get_property(i)\nfor i in range(metaclass.propertyOffset(), metaclass.propertyCount())\n]\nmetaclass = metaclass.get_super_class()\nreturn mapper\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_property_values","title":"<code>get_property_values(qobject: core.QObject, cast_types: bool = False) -&gt; dict[str, Any]</code>","text":"<p>Get a dictionary containing all MetaProperties values from given qobject.</p> <p>Parameters:</p> Name Type Description Default <code>qobject</code> <code>core.QObject</code> <p>QObject to get properties from</p> required <code>cast_types</code> <code>bool</code> <p>Whether to cast types to PrettyQt classes.</p> <code>False</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_property_values(\nself, qobject: core.QObject, cast_types: bool = False\n) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary containing all MetaProperties values from given qobject.\n    Arguments:\n        qobject: QObject to get properties from\n        cast_types: Whether to cast types to PrettyQt classes.\n    \"\"\"\nvals = {prop.get_name(): prop.read(qobject) for prop in self.get_properties()}\nif cast_types:\nreturn {k: datatypes.make_serializable(v) for k, v in vals.items()}\nelse:\nreturn vals\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_signals","title":"<code>get_signals(include_super: bool = True, only_notifiers: bool = False) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all signal MetaMethods based on given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include Signals from parent classes</p> <code>True</code> <code>only_notifiers</code> <code>bool</code> <p>Whether to filter for property notifier signals</p> <code>False</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_signals(\nself, include_super: bool = True, only_notifiers: bool = False\n) -&gt; list[core.MetaMethod]:\n\"\"\"Get all signal MetaMethods based on given criteria.\n    Arguments:\n        include_super: Whether to include Signals from parent classes\n        only_notifiers: Whether to filter for property notifier signals\n    \"\"\"\nif only_notifiers:\nreturn [  # type: ignore\nprop.get_notify_signal()\nfor prop in self.get_properties(include_super)\nif prop.hasNotifySignal()\n]\nelse:\nreturn self.get_methods(include_super=include_super, type_filter=\"signal\")\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_slots","title":"<code>get_slots(include_super: bool = True) -&gt; list[core.MetaMethod]</code>","text":"<p>Get all slot MetaMethods based on given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>include_super</code> <code>bool</code> <p>Whether to include Slots from parent classes</p> <code>True</code> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_slots(self, include_super: bool = True) -&gt; list[core.MetaMethod]:\n\"\"\"Get all slot MetaMethods based on given criteria.\n    Arguments:\n        include_super: Whether to include Slots from parent classes\n    \"\"\"\nreturn self.get_methods(include_super=include_super, type_filter=\"slot\")\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_super_class","title":"<code>get_super_class() -&gt; MetaObject | None</code>","text":"<p>Get SuperClass MetaObject.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_super_class(self) -&gt; MetaObject | None:\n\"\"\"Get SuperClass MetaObject.\"\"\"\nreturn MetaObject(klass) if (klass := self.superClass()) is not None else None\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.get_user_property","title":"<code>get_user_property() -&gt; core.MetaProperty | None</code>","text":"<p>Get MetaProperty marked as userprop.</p> Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def get_user_property(self) -&gt; core.MetaProperty | None:\n\"\"\"Get MetaProperty marked as userprop.\"\"\"\nreturn core.MetaProperty(p) if (p := self.userProperty()).isValid() else None\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#prettyqt.core.metaobject.MetaObject.has_property","title":"<code>has_property(name: str)</code>","text":"<p>Check if a property with given name exists.</p> <p>Only checks for non-dynamic properties.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>property name</p> required Source code in <code>prettyqt\\core\\metaobject.py</code> <pre><code>def has_property(self, name: str):\n\"\"\"Check if a property with given name exists.\n    Only checks for non-dynamic properties.\n    Arguments:\n        name: property name\n    \"\"\"\ntry:\nself.get_property(name)\nreturn True\nexcept KeyError:\nreturn False\n</code></pre>"},{"location":"qt_modules/core/MetaObject.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255035792[\"core.MetaObject\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103255035792</code></pre>"},{"location":"qt_modules/core/MetaProperty.html","title":"MetaProperty","text":""},{"location":"qt_modules/core/MetaProperty.html#docstrings","title":"DocStrings","text":"<p>Meta-data about a property.</p> Source code in <code>prettyqt\\core\\metaproperty.py</code> <pre><code>class MetaProperty:\n\"\"\"Meta-data about a property.\"\"\"\ndef __init__(self, metaproperty: core.QMetaProperty):\nself.item = metaproperty\ndef __bool__(self):\nreturn self.item.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_name(self) -&gt; str:\nreturn self.item.name()  # type: ignore\ndef get_meta_type(self) -&gt; core.MetaType:\nreturn core.MetaType(self.userType())  # same as self.metaType().id()\ndef get_python_type(self) -&gt; type:\nreturn self.get_meta_type().get_type()\ndef get_notify_signal(self) -&gt; core.MetaMethod | None:\nif (signal := self.notifySignal()).isValid():\nreturn core.MetaMethod(signal)\nreturn None\ndef get_enumerator(self) -&gt; core.MetaEnum | None:\nif (enumerator := self.enumerator()).isValid():\nreturn core.MetaEnum(enumerator)\nreturn None\ndef get_enumerator_type(self) -&gt; Literal[\"flag\", \"enum\"] | None:\nif self.isFlagType():\nreturn \"flag\"\nelif self.isEnumType():\nreturn \"enum\"\nelse:\nreturn None\n</code></pre>"},{"location":"qt_modules/core/MetaProperty.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255048272[\"core.MetaProperty\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103255048272</code></pre>"},{"location":"qt_modules/core/MetaType.html","title":"MetaType","text":"<p>Qt Base Class: QMetaType</p> <p>Signature: <code>QMetaType(self) -&gt; None QMetaType(self, arg__1: PySide6.QtCore.QMetaType.Type) -&gt; None QMetaType(self, arg__1: type) -&gt; None QMetaType(self, type: int) -&gt; None</code></p>"},{"location":"qt_modules/core/MetaType.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QMetaType</code></p> <p>Manages named types in the meta-object system.</p> Source code in <code>prettyqt\\core\\metatype.py</code> <pre><code>class MetaType(QtCore.QMetaType):\n\"\"\"Manages named types in the meta-object system.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.get_name())\n@classmethod\ndef get_regular_types(cls):\nreturn [\nmeta for i in range(TYPE_END_INDEX + 1) if (meta := MetaType(i)).isValid()\n]\n@classmethod\ndef get_enum_types(cls):\nreturn [\nmeta\nfor i in range(ENUM_START_INDEX, ENUM_END_INDEX + 1)\nif (meta := MetaType(i)).isValid()\n]\ndef get_name(self) -&gt; str | None:\nreturn name.decode() if isinstance(name := self.name(), bytes) else name\ndef get_type_name(self) -&gt; str:\nreturn TYPE.inverse[QtCore.QMetaType.Type(self.id())]\ndef is_enumeration(self) -&gt; bool:\nreturn bool(self.flags() &amp; QtCore.QMetaType.TypeFlag.IsEnumeration)\n# def get_meta_object(self) -&gt; core.MetaObject:  # apparently doesnt exist in bindings\n#     return core.MetaObject(self.metaObject())\n# @classmethod  # and this one gives deprecated message\n# def get_meta_object_for_type(cls, typ: int) -&gt; core.MetaObject:\n#     return core.MetaObject(cls.metaObjectForType(typ))\ndef get_type(self) -&gt; type:\nmeta_type = QtCore.QMetaType.Type(self.id())\nmatch meta_type:\ncase QtCore.QMetaType.Type.Bool:\nreturn bool\ncase QtCore.QMetaType.Type.Int | QtCore.QMetaType.Type.UInt:\nreturn int\ncase QtCore.QMetaType.Type.Double | QtCore.QMetaType.Type.Float:\nreturn float\ncase QtCore.QMetaType.Type.QChar | QtCore.QMetaType.Type.QString:\nreturn str\ncase QtCore.QMetaType.Type.QByteArray:\nreturn bytes\ncase QtCore.QMetaType.Type.QVariantList | QtCore.QMetaType.Type.QStringList:\nreturn list\ncase QtCore.QMetaType.Type.QVariantMap:\nreturn dict\ncase QtCore.QMetaType.Type.QSize:\nreturn QtCore.QSize\ncase QtCore.QMetaType.Type.QSizeF:\nreturn QtCore.QSizeF\ncase QtCore.QMetaType.Type.QTime:\nreturn QtCore.QTime\ncase QtCore.QMetaType.Type.QDate:\nreturn QtCore.QDate\ncase QtCore.QMetaType.Type.QDateTime:\nreturn QtCore.QDateTime\ncase QtCore.QMetaType.Type.QRect:\nreturn QtCore.QRect\ncase QtCore.QMetaType.Type.QRectF:\nreturn QtCore.QRectF\ncase QtCore.QMetaType.Type.QLine:\nreturn QtCore.QLine\ncase QtCore.QMetaType.Type.QLineF:\nreturn QtCore.QLineF\ncase QtCore.QMetaType.Type.QPoint:\nreturn QtCore.QPoint\ncase QtCore.QMetaType.Type.QPointF:\nreturn QtCore.QPointF\ncase QtCore.QMetaType.Type.QRegularExpression:\nreturn QtCore.QRegularExpression\ncase QtCore.QMetaType.Type.QLocale:\nreturn QtCore.QLocale\ncase QtCore.QMetaType.Type.QUrl:\nreturn QtCore.QUrl\ncase _ if self.is_enumeration():\nreturn enum.Enum\nfrom prettyqt.qt import QtGui\nmatch meta_type:\ncase QtCore.QMetaType.Type.QPolygon:\nreturn QtGui.QPolygon\ncase QtCore.QMetaType.Type.QPolygonF:\nreturn QtGui.QPolygonF\ncase QtCore.QMetaType.Type.QTextLength:\nreturn QtGui.QTextLength\ncase QtCore.QMetaType.Type.QRegion:\nreturn QtGui.QRegion\ncase QtCore.QMetaType.Type.QPalette:\nreturn QtGui.QPalette\ncase QtCore.QMetaType.Type.QColor:\nreturn QtGui.QColor\ncase QtCore.QMetaType.Type.QPen:\nreturn QtGui.QPen\ncase QtCore.QMetaType.Type.QFont:\nreturn QtGui.QFont\ncase QtCore.QMetaType.Type.QBrush:\nreturn QtGui.QBrush\ncase QtCore.QMetaType.Type.QImage:\nreturn QtGui.QImage\ncase QtCore.QMetaType.Type.QPixmap:\nreturn QtGui.QPixmap\ncase QtCore.QMetaType.Type.QTransform:\nreturn QtGui.QTransform\ncase QtCore.QMetaType.Type.QKeySequence:\nreturn QtGui.QKeySequence\ncase QtCore.QMetaType.Type.QVector3D:\nreturn QtGui.QVector3D\ncase QtCore.QMetaType.Type.QVector4D:\nreturn QtGui.QVector4D\ncase QtCore.QMetaType.Type.QCursor:\nreturn QtGui.QCursor\ncase QtCore.QMetaType.Type.QIcon:\nreturn QtGui.QIcon\ncase QtCore.QMetaType.Type.QVariant:\nreturn object\ncase QtCore.QMetaType.Type.QEasingCurve:\nreturn QtCore.QEasingCurve\ncase QtCore.QMetaType.Type.QObjectStar:\nreturn QtCore.QObject\nfrom prettyqt.qt import QtWidgets\nmatch meta_type:\ncase QtCore.QMetaType.Type.QSizePolicy:\nreturn QtWidgets.QSizePolicy\ncase _:\nreturn object\n</code></pre>"},{"location":"qt_modules/core/MetaType.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255058832[\"core.MetaType\"]\n  2103257896400[\"QtCore.QMetaType\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257896400 --&gt; 2103255058832\n  2103206874128 --&gt; 2103257896400\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/MimeData.html","title":"MimeData","text":"<p>Qt Base Class: QMimeData</p> <p>Signature: <code>QMimeData(self) -&gt; None</code></p>"},{"location":"qt_modules/core/MimeData.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QMimeData</code></p> <p>Container for data that records information about its MIME type.</p> Source code in <code>prettyqt\\core\\mimedata.py</code> <pre><code>class MimeData(core.ObjectMixin, core.QMimeData):\n\"\"\"Container for data that records information about its MIME type.\"\"\"\ndef __len__(self):\nreturn len(self.formats())\n# def __getitem__(self, index: str) -&gt; str:\n#     return self.get_data(index)\n# def __setitem__(self, index: str, value: datatypes.ByteArrayType):\n#     value = datatypes.to_bytearray(value)\n#     self.setData(index, value)\ndef __contains__(self, fmt: str):\nreturn self.hasFormat(fmt)\ndef __delitem__(self, index: str):\nself.removeFormat(index)\ndef set_data(self, mime_type: str, data: str):\nself.setData(mime_type, core.QByteArray(data.encode()))\ndef set_json_data(self, mime_type: str, data: datatypes.JSONType):\nself.setData(mime_type, core.QByteArray(helpers.dump_json(data)))\ndef get_data(self, mime_type: str) -&gt; str:\nreturn bytes(self.data(mime_type)).decode()\ndef get_json_data(self, mime_type: str) -&gt; datatypes.JSONType:\ndata = self.data(mime_type)\nreturn helpers.load_json(bytes(data))\ndef keys(self) -&gt; list[str]:\nreturn self.formats()\ndef values(self) -&gt; Iterator[Any]:\nreturn (self.get_data(key) for key in self.formats())\ndef set_data_for_extension(self, extension: str, string: str):\nif mimetype := DB.get_mime_types_for_filename(f\".{extension}\"):\nself.setData(mimetype[0].name(), string.encode())\nelse:\nraise ValueError(extension)\ndef set_path_data(self, paths: Iterable[datatypes.PathType]):\nurls = [core.Url.from_local_file(p) for p in paths]\nself.setUrls(urls)\ndef set_urls(self, paths: Iterable[datatypes.PathType]):\nurls = [core.Url(p) for p in paths]\nself.setUrls(urls)\ndef get_urls(self) -&gt; list[core.Url]:\nreturn [core.Url(url) for url in self.urls()]\n@classmethod\ndef for_file(\ncls,\npath: datatypes.PathType | core.QFileInfo,\nmatch_mode: core.mimedatabase.MatchModeStr = \"default\",\n) -&gt; MimeData:\ndb = core.MimeDatabase()\nmime_type = db.get_mime_type_for_file(path, match_mode)\nreturn cls(mime_type)\ndef to_dict(self) -&gt; dict[str, bytes]:\nreturn {i: self.data(i).data() for i in self.formats()}\n@classmethod\ndef clone(cls, other: core.QMimeData) -&gt; Self:\nmime = cls()\nfor fmt in other.formats():\nmime.setData(fmt, other.data(fmt))\nreturn mime\n</code></pre>"},{"location":"qt_modules/core/MimeData.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254373968[\"core.MimeData\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254702016[\"QtCore.QMimeData\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103254373968\n  140736120080256 --&gt; 2103255067472\n  2103254702016 --&gt; 2103254373968\n  2103254677056 --&gt; 2103254702016\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/MimeData.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/MimeDatabase.html","title":"MimeDatabase","text":"<p>Qt Base Class: QMimeDatabase</p> <p>Signature: <code>QMimeDatabase(self) -&gt; None</code></p>"},{"location":"qt_modules/core/MimeDatabase.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QMimeDatabase</code></p> <p>Maintains a database of MIME types.</p> Source code in <code>prettyqt\\core\\mimedatabase.py</code> <pre><code>class MimeDatabase(core.QMimeDatabase):\n\"\"\"Maintains a database of MIME types.\"\"\"\ndef get_mime_type_for_file(\nself,\npath: datatypes.PathType | core.QFileInfo,\nmatch_mode: MatchModeStr | core.QMimeDatabase.MatchMode = \"default\",\n) -&gt; core.MimeType:\nif isinstance(path, os.PathLike):\npath = os.fspath(path)\nmime_type = self.mimeTypeForFile(path, MATCH_MODE.get_enum_value(match_mode))\nreturn core.MimeType(mime_type)\ndef get_mime_type_for_data(\nself, data: datatypes.ByteArrayType | core.QIODevice\n) -&gt; core.MimeType:\nreturn core.MimeType(self.mimeTypeForData(data))\ndef get_mime_type_for_filename_and_data(\nself, filename: os.PathLike, data: datatypes.ByteArrayType | core.QIODevice\n) -&gt; core.MimeType:\npath = os.fspath(filename)\nreturn core.MimeType(self.mimeTypeForFileNameAndData(path, data))\ndef get_mime_type_for_name(self, name: str) -&gt; core.MimeType:\nreturn core.MimeType(self.mimeTypeForName(name))\ndef get_mime_type_for_url(self, url: core.QUrl | str) -&gt; core.MimeType:\nurl = core.QUrl(url) if isinstance(url, str) else url\nreturn core.MimeType(self.mimeTypeForUrl(url))\ndef get_mime_types_for_filename(\nself, filename: datatypes.PathType\n) -&gt; list[core.MimeType]:\npath = os.fspath(filename)\nreturn [core.MimeType(i) for i in self.mimeTypesForFileName(path)]\n</code></pre>"},{"location":"qt_modules/core/MimeDatabase.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254382608[\"core.MimeDatabase\"]\n  2103257884880[\"QtCore.QMimeDatabase\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257884880 --&gt; 2103254382608\n  2103206874128 --&gt; 2103257884880\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/MimeType.html","title":"MimeType","text":"<p>Qt Base Class: QMimeType</p> <p>Signature: <code>QMimeType(self) -&gt; None QMimeType(self, other: PySide6.QtCore.QMimeType) -&gt; None</code></p>"},{"location":"qt_modules/core/MimeType.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QMimeType</code></p> <p>Describes types of file or data, represented by a MIME type string.</p> Source code in <code>prettyqt\\core\\mimetype.py</code> <pre><code>class MimeType(QtCore.QMimeType):\n\"\"\"Describes types of file or data, represented by a MIME type string.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"qt_modules/core/MimeType.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254396048[\"core.MimeType\"]\n  2103257893520[\"QtCore.QMimeType\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257893520 --&gt; 2103254396048\n  2103206874128 --&gt; 2103257893520\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ModelRoleData.html","title":"ModelRoleData","text":"<p>Qt Base Class: QModelRoleData</p> <p>Signature: <code>QModelRoleData(self, QModelRoleData: PySide6.QtCore.QModelRoleData) -&gt; None QModelRoleData(self, role: int) -&gt; None</code></p>"},{"location":"qt_modules/core/ModelRoleData.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QModelRoleData</code></p> <p>Holds a role and the data associated to that role.</p> Source code in <code>prettyqt\\core\\modelroledata.py</code> <pre><code>class ModelRoleData(QtCore.QModelRoleData):\n\"\"\"Holds a role and the data associated to that role.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/ModelRoleData.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255036752[\"core.ModelRoleData\"]\n  2103257895440[\"QtCore.QModelRoleData\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257895440 --&gt; 2103255036752\n  2103206874128 --&gt; 2103257895440\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Mutex.html","title":"Mutex","text":"<p>Qt Base Class: QMutex</p> <p>Signature: <code>QMutex(self) -&gt; None</code></p>"},{"location":"qt_modules/core/Mutex.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QMutex</code></p> <p>Access serialization between threads.</p> Source code in <code>prettyqt\\core\\mutex.py</code> <pre><code>class Mutex(QtCore.QMutex):\n\"\"\"Access serialization between threads.\"\"\"\n@contextlib.contextmanager\ndef lock_mutex(self, timeout: int | None = None):\nif timeout is None:\ntimeout = -1\nyield self.tryLock(timeout)\nself.unlock()\n</code></pre>"},{"location":"qt_modules/core/Mutex.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255044432[\"core.Mutex\"]\n  2103254587776[\"QtCore.QMutex\"]\n  2103254601216[\"QtCore.QBasicMutex\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254587776 --&gt; 2103255044432\n  2103254601216 --&gt; 2103254587776\n  2103206874128 --&gt; 2103254601216\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Object.html","title":"Object","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Object.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ObjectMixin</code>, <code>core.QObject</code></p> <p>The base class of all Qt objects.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>class Object(ObjectMixin, core.QObject):\n\"\"\"The base class of all Qt objects.\"\"\"\n</code></pre> Name Children Inherits <code>Signals</code>prettyqt.core.threadpool <ul><li>Object</li></ul> ProxyMapperprettyqt.itemmodels.proxies.proxymapper <ul><li>Object</li></ul> Animatorprettyqt.animations.animator <ul><li>Object</li></ul> BaseEventFilterprettyqt.eventfilters.baseeventfilter <ul><li>AnimatedToolTipEventFilter</li><li>AutoSizeColumnsEventFilter</li><li>EventCatcher</li><li>HoverIconEventFilter</li><li>ListViewGridResizeEventFilter</li><li>SectionAutoSpanEventFilter</li><li>SliderMoveToMouseClickEventFilter</li><li>TextUpdateEventFilter</li></ul> <ul><li>Object</li></ul> <code>Signals</code>prettyqt.utils.signallogger <ul><li>Object</li></ul> <code>EventSignaller</code>prettyqt.debugging.stalker <ul><li>Object</li></ul> Stalkerprettyqt.debugging.stalker <ul><li>Object</li></ul> PlaceManagerprettyqt.location.placemanager <ul><li>Object</li></ul>"},{"location":"qt_modules/core/Object.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Object.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/ObjectMixin.html","title":"ObjectMixin","text":""},{"location":"qt_modules/core/ObjectMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>class ObjectMixin:\ndef __init__(self, *args, **kwargs):\nself._eventfilters = set()\n# klass = type(self)\n# if issubclass(klass, core.QObject) and klass not in _properties:\n#     metaobj = core.MetaObject(klass.staticMetaObject)\n#     _properties[klass] = [i.get_name() for i in metaobj.get_properties()]\n#     _signals[klass] = [i.get_name() for i in metaobj.get_signals()]\nnew = {}\nif kwargs:\nmapper = self._get_map()\nprops = get_properties(type(self))\nsignals = get_signals(type(self))\nfor k, v in kwargs.items():\n# this allows snake_case naming.\ncamel_k = helpers.to_lower_camel(k)\nif camel_k != k and camel_k in kwargs:\nlogger.warning(f\"{k} defined twice: {v} / {kwargs[camel_k]}\")\n# allow str values instead of enum\nif camel_k in mapper and isinstance(v, str):\nnew[camel_k] = mapper[camel_k][v]\n# allow str values for common icon kwargs\nelif camel_k in {\"windowIcon\", \"icon\"} and isinstance(v, str):\nfrom prettyqt import iconprovider\nnew[camel_k] = iconprovider.get_icon(v)\n# kwargs which need camel-casing\nelif camel_k in props or camel_k in signals:\nnew[camel_k] = v\nelse:\nnew[k] = v\nsuper().__init__(*args, **new)\ndef _get_map(self):\n\"\"\"Can be implemented by subclasses to support str -&gt; Enum conversion.\n        To get data from all subclasses, we always fetch _get_map from super(),\n        append our own shit and return it.\n        \"\"\"\nreturn {}\ndef __pretty__(\nself, fmt: Callable[[Any], Any], **kwargs: Any\n) -&gt; Generator[Any, None, None]:\nyield f\"{type(self).__name__}(\"\nyield 1\nfor k, v in self.get_properties(only_writable=True).items():\nyield f\"{k}={v!r}\"\nyield 0\nfor ef in self._eventfilters:\nyield f\"Eventfilter={ef.__class__.__name__}\"\nyield 0\nyield -1\nyield \")\"\n# def __repr__(self):  # we already monkeypatch QObject\n#     return get_repr(self, self.objectName())\ndef __setstate__(self, state):\nself.set_properties(state)\ndef __getstate__(self):\nreturn self.get_properties()\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __getattr__(self, val):\ncameled = helpers.to_lower_camel(val)\nif cameled in dir(self):\nreturn getattr(self, cameled)\nraise AttributeError(val)\ndef installEventFilter(self, filter_: core.QObject | str, **kwargs):\n\"\"\"Override to also allow setting eventfilters by name.\"\"\"\nif filter_ in self._eventfilters:\nlogger.warning(f\"Installing same EventFilter multiple times to {self}.\")\nreturn\nmatch filter_:\ncase core.QObject():\npass\ncase str():\nfrom prettyqt import eventfilters\nKlass = classhelpers.get_class_for_id(\neventfilters.BaseEventFilter, filter_\n)\nfilter_ = Klass(parent=self, **kwargs)\ncase _:\nraise ValueError(filter_)\nself._eventfilters.add(filter_)\nsuper().installEventFilter(filter_)\ndef removeEventFilter(self, eventfilter: core.QObject):\nif eventfilter not in self._eventfilters:\nlogger.warning(\"Trying to remove non-installed EventFilter.\")\nreturn\nself._eventfilters.remove(eventfilter)\nsuper().removeEventFilter(eventfilter)\ndef add_callback_for_event(\nself,\ncallback: Callable[[core.QEvent], bool],\ninclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None,\nexclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None,\n) -&gt; eventfilters.EventCatcher:\n\"\"\"Connect widget events to a callback.\n        if include is set, it behaves like a whitelist.\n        if exclude is set, it behaves like a blacklist.\n        The QEvent is passed to the callback as an argument, and the callback\n        needs to return True or False to indicate whether the Event should be filtered.\n        Arguments:\n            callback: Callback to execute when event is triggered\n            include: Events to include\n            exclude: Events to exclude\n        \"\"\"\nfrom prettyqt import eventfilters\neventfilter = eventfilters.EventCatcher(include, exclude, callback, parent=self)\nself.installEventFilter(eventfilter)\nreturn eventfilter\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.get_properties()\n# dct = {}\n# for klass in reversed(inspect.getmro(type(self))):\n#     if \"serialize_fields\" in klass.__dict__:\n#         data = klass.serialize_fields(self)  # type: ignore\n#         dct |= data\n# return dct\n@contextlib.contextmanager\ndef signals_blocked(self):\n\"\"\"Context manager to temporarily block emitting signals.\"\"\"\nblocked = self.blockSignals(True)\nyield self\nself.blockSignals(blocked)\n@contextlib.contextmanager\ndef signal_blocked(\nself, signal: core.SignalInstance, receiver: Callable | core.SignalInstance\n):\n\"\"\"Context manager to temporarily disconnect specific signal.\"\"\"\nsignal.disconnect(receiver)\nyield self\nsignal.connect(receiver)\n@contextlib.contextmanager\ndef properties_set_to(self, **kwargs):\n\"\"\"Context manager to temporarily set properties to different values.\"\"\"\nprops = {k: self.property(k) for k in kwargs}\nfor k, v in kwargs.items():\nself.setProperty(k, v)\nyield self\nfor k, v in props.items():\nself.setProperty(k, v)\ndef to_json(self):\ndct = self.__getstate__()\nfor k, v in dct.items():\nif isinstance(v, ObjectMixin):\ndct[k] = v.to_json()\nreturn dct\ndef set_unique_id(self):\n\"\"\"Set unique objectName.\"\"\"\nclass_name = type(self).__name__\ncount = next(counter_dict[class_name])\nself.setObjectName(f\"{class_name}_{count}\")\n@classmethod\ndef get_qt_base_class(cls) -&gt; type[core.QObject] | None:\nreturn classhelpers.get_qt_parent_class(cls)\n@classmethod\ndef get_static_metaobject(cls) -&gt; core.MetaObject:\nreturn core.MetaObject(cls.staticMetaObject)\ndef get_metaobject(self) -&gt; core.MetaObject:\nreturn core.MetaObject(self.metaObject())\ndef find_children(\nself,\ntyp: type[T] = core.QObject,\nname: str | datatypes.PatternType | None = None,\nrecursive: bool = True,\nproperty_selector: dict[str, datatypes.VariantType | Callable] | None = None,\nonly_prettyqt_classes: bool = False,\n) -&gt; listdelegators.ListDelegator[T]:\n\"\"\"Find children with given type and name.\n        Children can be filtered by passing a property selector dictionary.\n        It must contain the property name for keys and either a value which must be set\n        or a predicate function which gets the property value as an argument\n        and must return True if the child should be included.\n        Arguments:\n            typ: Subclass of QObject (can also be a UnionType)\n            name: ObjectName filter. None includes all.\n            recursive: whether to search for children recursively.\n            property_selector: dict containing PropertyName -&gt; Value/Predicate pairs.\n            only_prettyqt_classes: only include objects with prettyqt superpowers.\n        Returns:\n            list of QObjects\n        \"\"\"\nif isinstance(name, re.Pattern):\nname = core.RegularExpression(name)\nif recursive:\nflag = constants.FindChildOption.FindChildrenRecursively\nelse:\nflag = constants.FindChildOption.FindDirectChildrenOnly\nmatch typ:\ncase types.UnionType():\nobjects = [\ni\nfor t in get_args(typ)\nfor i in self.findChildren(t, name=name, options=flag)\n]\ncase type():\nobjects = self.findChildren(typ, name=name, options=flag)\ncase _:\nraise TypeError(typ)\nif property_selector:\nobjects = [\no\nfor o in objects\nfor k, v in property_selector.items()\nif (callable(v) and v(o.property(k)))\nor (not callable(v) and o.property(k) == v)\n]\nif only_prettyqt_classes:\nobjects = [i for i in objects if i.__module__.startswith(\"prettyqt\")]\nreturn listdelegators.ListDelegator(objects)\ndef find_child(\nself,\ntyp: type[T] = core.QObject,\nname: str | core.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; T | None:\n\"\"\"Find a child with given type and name.\"\"\"\nif recursive:\nflag = constants.FindChildOption.FindChildrenRecursively\nelse:\nflag = constants.FindChildOption.FindDirectChildrenOnly\nmatch typ:\ncase types.UnionType():\nreturn next(\n(item for item in self.find_children(typ, name, recursive=recursive)),\nNone,\n)\ncase _:\nreturn self.findChild(typ, name, flag)  # type: ignore\ndef find_parent(\nself, typ: type[T] = core.QObject, name: str | None = None\n) -&gt; T | None:\n\"\"\"Find parent with given type or name.\"\"\"\nnode = self\nwhile node:\nnode = node.parent()\nif isinstance(node, typ) and (name is None or node.objectName() == name):\nreturn node\nreturn None\ndef start_timer(\nself,\ninterval: int | str,\ntimer_type: constants.TimerTypeStr = \"coarse\",\n) -&gt; int | None:\n\"\"\"Start a timer and return the timer id, to be used in timerEvent.\"\"\"\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nresult = self.startTimer(interval, constants.TIMER_TYPE[timer_type])\nreturn None if result == 0 else result\ndef start_callback_timer(\nself,\ncallback: Callable,\ninterval: int | str,\nsingle_shot: bool = False,\ntimer_type: constants.TimerTypeStr = \"coarse\",\n) -&gt; core.Timer:\n\"\"\"Start timer and execute callback when timeout reached.\"\"\"\ninterval = helpers.parse_time(interval) if isinstance(interval, str) else interval\ntimer = core.Timer(\nself,\nsingle_shot=single_shot,\ninterval=interval,\ntimer_type=timer_type,\ntimeout=callback,\n)\ntimer.start()\nreturn timer\ndef get_properties(\nself,\ninclude_super: bool = True,\ncast: bool = True,\nonly_writable: bool = False,\nonly_nonempty: bool = False,\n) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary containing all properties and their values.\"\"\"\nmetaobj = self.get_metaobject()\nprops = metaobj.get_properties(\ninclude_super=include_super, only_writable=only_writable\n)\ndct = {}\nfor i in props:\nif i.get_name() in [\"children\", \"frameShadow\", \"state\"]:\ncontinue\nval = i.read(self)\nif only_nonempty:\nmatch val:\ncase _ if hasattr(val, \"isNull\"):\ninclude = not val.isNull()\ncase _ if hasattr(val, \"isEmpty\"):\ninclude = not val.isEmpty()\ncase _ if hasattr(val, \"isValid\"):\ninclude = val.isValid()\ncase _:\ninclude = bool(val)\nelse:\ninclude = True\nif not include:\ncontinue\ndct[i.name()] = datatypes.make_serializable(val) if cast else val\nreturn dct\ndef set_properties(self, props: dict[str, Any], include_super: bool = True):\n\"\"\"Set properties from a dictionary.\"\"\"\nmetaobj = self.get_metaobject()\nmetaprops = metaobj.get_properties(include_super=include_super)\nfor metaprop in metaprops:\nif (name := metaprop.name()) in props:\nvalue = props[name]\nmetaprop.write(self, value)\ndef get_dynamic_properties(self) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary with all dynamic properties.\"\"\"\nreturn {\n(k := i.data().decode()): self.property(k)\nfor i in self.dynamicPropertyNames()\n}\ndef bind_property(cls, object_name: str, prop_name: str) -&gt; property:\ndef getter(self):\nreturn self.findChild(cls, object_name).property(prop_name)\ndef setter(self, value):\nself.findChild(cls, object_name).setProperty(prop_name, value)\nreturn property(getter, setter)\n</code></pre> Name Children Inherits Objectprettyqt.core.object <ul><li><code>Signals</code></li><li>ProxyMapper</li><li>Animator</li><li>BaseEventFilter</li><li><code>Signals</code></li><li><code>EventSignaller</code></li><li>Stalker</li><li>PlaceManager</li></ul> <ul><li>ObjectMixin</li><li>QObject</li></ul> SocketNotifierprettyqt.core.socketnotifier <ul><li>ObjectMixin</li><li>QSocketNotifier</li></ul> SharedMemoryprettyqt.core.sharedmemory <ul><li>ObjectMixin</li><li>QSharedMemory</li></ul> SignalMapperprettyqt.core.signalmapper <ul><li>ObjectMixin</li><li>QSignalMapper</li></ul> TimeLineprettyqt.core.timeline <ul><li>ObjectMixin</li><li>QTimeLine</li></ul> AbstractEventDispatcherprettyqt.core.abstracteventdispatcher <ul><li>ObjectMixin</li><li>QAbstractEventDispatcher</li></ul> EventLoopprettyqt.core.eventloop <ul><li>ObjectMixin</li><li>QEventLoop</li></ul> AbstractAnimationMixinprettyqt.core.abstractanimationThe base of all animations. <ul><li>AbstractAnimation</li><li>VariantAnimationMixin</li><li>PauseAnimation</li><li>AnimationGroupMixin</li></ul> <ul><li>ObjectMixin</li></ul> <code>TranslatorMixin</code>prettyqt.core.translator <ul><li>Translator</li></ul> <ul><li>ObjectMixin</li></ul> CoreApplicationMixinprettyqt.core.coreapplication <ul><li>CoreApplication</li><li>GuiApplicationMixin</li></ul> <ul><li>ObjectMixin</li></ul> FileSystemWatcherprettyqt.core.filesystemwatcher <ul><li>ObjectMixin</li><li>QFileSystemWatcher</li></ul> FileSelectorprettyqt.core.fileselector <ul><li>ObjectMixin</li><li>QFileSelector</li></ul> IODeviceMixinprettyqt.core.iodevice <ul><li>IODevice</li><li>FileDeviceMixin</li><li>Buffer</li><li>Process</li><li>BluetoothSocket</li><li>AbstractSocketMixin</li><li>LocalSocket</li></ul> <ul><li>ObjectMixin</li></ul> <code>Settings_</code>prettyqt.core.settingsPersistent platform-independent application settings. <ul><li>Settings</li></ul> <ul><li>ObjectMixin</li><li>QSettings</li><li><code>MutableMapping</code></li></ul> Timerprettyqt.core.timer <ul><li><code>AnimationTimer</code></li></ul> <ul><li>ObjectMixin</li><li>QTimer</li></ul> MimeDataprettyqt.core.mimedata <ul><li>ObjectMixin</li><li>QMimeData</li></ul> ThreadPoolprettyqt.core.threadpool <ul><li>ObjectMixin</li><li>QThreadPool</li></ul> ItemSelectionModelprettyqt.core.itemselectionmodel <ul><li>LinkedSelectionModel</li></ul> <ul><li>ObjectMixin</li><li>QItemSelectionModel</li></ul> AbstractItemModelMixinprettyqt.core.abstractitemmodel <ul><li>AbstractItemModel</li><li>AbstractProxyModelMixin</li><li>AbstractListModelMixin</li><li>AbstractTableModelMixin</li><li>ConcatenateTablesProxyModel</li><li>StandardItemModel</li><li>FileSystemModel</li><li>PdfBookmarkModel</li><li>PdfSearchModel</li><li>HelpContentModel</li></ul> <ul><li>ObjectMixin</li></ul> Libraryprettyqt.core.library <ul><li>ObjectMixin</li><li>QLibrary</li></ul> PluginLoaderprettyqt.core.pluginloader <ul><li>ObjectMixin</li><li>QPluginLoader</li></ul> <code>StyleHintsMixin</code>prettyqt.gui.stylehints <ul><li>StyleHints</li></ul> <ul><li>ObjectMixin</li></ul> Shortcutprettyqt.gui.shortcut <ul><li>ObjectMixin</li><li>QShortcut</li></ul> Dragprettyqt.gui.drag <ul><li>ObjectMixin</li><li>QDrag</li></ul> WindowMixinprettyqt.gui.window <ul><li>Window</li><li>PaintDeviceWindowMixin</li><li><code>QuickWindowMixin</code></li></ul> <ul><li>ObjectMixin</li><li>SurfaceMixin</li></ul> Clipboardprettyqt.gui.clipboardAccess to the window system clipboard. <ul><li>ObjectMixin</li></ul> InputMethodprettyqt.gui.inputmethod <ul><li>ObjectMixin</li></ul> SessionManagerprettyqt.gui.sessionmanager <ul><li>ObjectMixin</li></ul> ValidatorMixinprettyqt.gui.validator <ul><li>Validator</li><li>RegularExpressionValidator</li><li>IntValidator</li><li>DoubleValidator</li></ul> <ul><li>ObjectMixin</li></ul> <code>TextDocumentMixin</code>prettyqt.gui.textdocument <ul><li>TextDocument</li></ul> <ul><li>ObjectMixin</li></ul> Movieprettyqt.gui.movie <ul><li>ObjectMixin</li><li>QMovie</li></ul> PdfWriterprettyqt.gui.pdfwriter <ul><li>ObjectMixin</li><li>PagedPaintDeviceMixin</li><li>QPdfWriter</li></ul> TextObjectMixinprettyqt.gui.textobject <ul><li>TextObject</li><li>TextBlockGroup</li><li><code>TextFrameMixin</code></li></ul> <ul><li>ObjectMixin</li></ul> AbstractTextDocumentLayoutMixinprettyqt.gui.abstracttextdocumentlayout <ul><li>AbstractTextDocumentLayout</li><li>PlainTextDocumentLayout</li></ul> <ul><li>ObjectMixin</li></ul> <code>SyntaxHighlighterMixin</code>prettyqt.gui.syntaxhighlighter <ul><li>SyntaxHighlighter</li></ul> <ul><li>ObjectMixin</li></ul> <code>UndoStackMixin</code>prettyqt.gui.undostack <ul><li>UndoStack</li></ul> <ul><li>ObjectMixin</li></ul> <code>UndoGroupMixin</code>prettyqt.gui.undogroup <ul><li>UndoGroup</li></ul> <ul><li>ObjectMixin</li></ul> ActionMixinprettyqt.gui.action <ul><li>Action</li><li>WidgetAction</li></ul> <ul><li>ObjectMixin</li></ul> ActionGroupprettyqt.gui.actiongroup <ul><li>ObjectMixin</li><li>QActionGroup</li></ul> StyleMixinprettyqt.widgets.style <ul><li>Style</li><li>CommonStyleMixin</li></ul> <ul><li>ObjectMixin</li></ul> WidgetMixinprettyqt.widgets.widget <ul><li>Widget</li><li>FrameMixin</li><li>FocusFrame</li><li>AbstractSliderMixin</li><li>AbstractButtonMixin</li><li>LineEdit</li><li>AbstractSpinBoxMixin</li><li><code>RubberBandMixin</code></li><li>DialogButtonBox</li><li>DialogMixin</li><li>...</li></ul> <ul><li>ObjectMixin</li><li>PaintDeviceMixin</li></ul> GraphicsTransformMixinprettyqt.widgets.graphicstransform <ul><li>GraphicsTransform</li><li>GraphicsRotation</li><li>GraphicsScale</li></ul> <ul><li>ObjectMixin</li></ul> GraphicsObjectMixinprettyqt.widgets.graphicsobject <ul><li>GraphicsObject</li><li>GraphicsTextItem</li><li>GraphicsWidgetMixin</li><li>GraphicsVideoItem</li><li>GraphicsSvgItem</li></ul> <ul><li>ObjectMixin</li><li>GraphicsItemMixin</li></ul> GraphicsEffectMixinprettyqt.widgets.graphicseffect <ul><li>GraphicsEffect</li><li>GraphicsBlurEffect</li><li>GraphicsColorizeEffect</li><li>GraphicsDropShadowEffect</li><li>GraphicsOpacityEffect</li></ul> <ul><li>ObjectMixin</li></ul> GraphicsSceneprettyqt.widgets.graphicsscene <ul><li>ObjectMixin</li><li>QGraphicsScene</li></ul> Completerprettyqt.widgets.completer <ul><li>SubsequenceCompleter</li></ul> <ul><li>ObjectMixin</li><li>QCompleter</li></ul> Scrollerprettyqt.widgets.scrollerEnables kinetic scrolling for any scrolling widget or graphics item. <ul><li>ObjectMixin</li></ul> AbstractItemDelegateMixinprettyqt.widgets.abstractitemdelegate <ul><li>AbstractItemDelegate</li><li>ItemDelegate</li><li>StyledItemDelegate</li></ul> <ul><li>ObjectMixin</li></ul> SystemTrayIconprettyqt.widgets.systemtrayicon <ul><li>ObjectMixin</li><li>QSystemTrayIcon</li></ul> LayoutMixinprettyqt.widgets.layout <ul><li>Layout</li><li>FormLayout</li><li><code>BoxLayoutMixin</code></li><li>StackedLayout</li><li>GridLayout</li></ul> <ul><li>ObjectMixin</li><li>LayoutItemMixin</li></ul> ButtonGroupprettyqt.widgets.buttongroup <ul><li>ObjectMixin</li><li>QButtonGroup</li></ul> DataWidgetMapperprettyqt.widgets.datawidgetmapper <ul><li>ObjectMixin</li><li>QDataWidgetMapper</li></ul> GestureMixinprettyqt.widgets.gesture <ul><li>Gesture</li><li>TapGesture</li><li>TapAndHoldGesture</li><li>PanGesture</li><li>PinchGesture</li><li><code>SwipeGestureMixin</code></li></ul> <ul><li>ObjectMixin</li></ul> BluetoothLocalDeviceprettyqt.bluetooth.bluetoothlocaldevice <ul><li>ObjectMixin</li><li>QBluetoothLocalDevice</li></ul> BluetoothServerprettyqt.bluetooth.bluetoothserver <ul><li>ObjectMixin</li><li>QBluetoothServer</li></ul> BluetoothDeviceDiscoveryAgentprettyqt.bluetooth.bluetoothdevicediscoveryagent <ul><li>ObjectMixin</li><li>QBluetoothDeviceDiscoveryAgent</li></ul> BluetoothServiceDiscoveryAgentprettyqt.bluetooth.bluetoothservicediscoveryagent <ul><li>ObjectMixin</li><li>QBluetoothServiceDiscoveryAgent</li></ul> BarSetprettyqt.charts.barset <ul><li>ObjectMixin</li><li>QBarSet</li></ul> BoxSetprettyqt.charts.boxset <ul><li>ObjectMixin</li><li>QBoxSet</li></ul> CandlestickSetprettyqt.charts.candlestickset <ul><li>ObjectMixin</li><li>QCandlestickSet</li></ul> PieSliceprettyqt.charts.pieslice <ul><li>ObjectMixin</li><li>QPieSlice</li></ul> AbstractAxisMixinprettyqt.charts.abstractaxis <ul><li>AbstractAxis</li><li>ValueAxisMixin</li><li>DateTimeAxis</li><li>LogValueAxis</li><li>BarCategoryAxis</li></ul> <ul><li>ObjectMixin</li></ul> AbstractSeriesMixinprettyqt.charts.abstractseries <ul><li>AbstractSeries</li><li>AbstractBarSeriesMixin</li><li>XYSeriesMixin</li></ul> <ul><li>ObjectMixin</li></ul> PyDesignerTaskMenuExtensionprettyqt.designer.pydesignertaskmenuextension <ul><li>ObjectMixin</li><li>QPyDesignerTaskMenuExtension</li></ul> DesignerFormEditorInterfaceprettyqt.designer.designerformeditorinterface <ul><li>ObjectMixin</li><li>QDesignerFormEditorInterface</li></ul> GeoPositionInfoSourceMixinprettyqt.positioning.geopositioninfosource <ul><li>GeoPositionInfoSource</li><li>NmeaPositionInfoSource</li></ul> <ul><li>ObjectMixin</li></ul> GeoSatelliteInfoSourceprettyqt.positioning.geosatelliteinfosource <ul><li>ObjectMixin</li><li>QGeoSatelliteInfoSource</li></ul> GeoAreaMonitorSourceprettyqt.positioning.geoareamonitorsource <ul><li>ObjectMixin</li><li>QGeoAreaMonitorSource</li></ul> GeoCodingManagerprettyqt.location.geocodingmanagerSupport for geocoding operations. <ul><li>ObjectMixin</li></ul> GeoRoutingManagerprettyqt.location.georoutingmanagerSupport for geographic routing operations. <ul><li>ObjectMixin</li></ul> PlaceReplyMixinprettyqt.location.placereply <ul><li>PlaceReply</li><li>PlaceSearchReply</li><li>PlaceContentReply</li><li>PlaceDetailsReply</li><li>PlaceMatchReply</li><li>PlaceIdReply</li></ul> <ul><li>ObjectMixin</li></ul> GeoServiceProviderprettyqt.location.geoserviceprovider <ul><li>ObjectMixin</li><li>QGeoServiceProvider</li></ul> Cameraprettyqt.multimedia.camera <ul><li>ObjectMixin</li><li>QCamera</li></ul> MediaPlayerprettyqt.multimedia.mediaplayer <ul><li>ObjectMixin</li><li>QMediaPlayer</li></ul> ScreenCaptureprettyqt.multimedia.screencapture <ul><li>ObjectMixin</li><li>QScreenCapture</li></ul> MediaRecorderprettyqt.multimedia.mediarecorder <ul><li>ObjectMixin</li><li>QMediaRecorder</li></ul> NetworkCookieJarprettyqt.network.networkcookiejar <ul><li>ObjectMixin</li><li>QNetworkCookieJar</li></ul> LocalServerprettyqt.network.localserver <ul><li>ObjectMixin</li><li>QLocalServer</li></ul> TcpServerprettyqt.network.tcpserver <ul><li>ObjectMixin</li><li>QTcpServer</li></ul> HttpMultiPartprettyqt.network.httpmultipart <ul><li>ObjectMixin</li><li>QHttpMultiPart</li></ul> NetworkAccessManagerprettyqt.network.networkaccessmanager <ul><li>ObjectMixin</li><li>QNetworkAccessManager</li></ul> PdfDocumentprettyqt.pdf.pdfdocument <ul><li>ObjectMixin</li><li>QPdfDocument</li></ul> QmlExpressionprettyqt.qml.qmlexpression <ul><li>ObjectMixin</li><li>QQmlExpression</li></ul> <code>QmlPropertyMapMixin</code>prettyqt.qml.qmlpropertymap <ul><li>QmlPropertyMap</li></ul> <ul><li>ObjectMixin</li></ul> JSEngineMixinprettyqt.qml.jsengine <ul><li>JSEngine</li><li>QmlEngineMixin</li></ul> <ul><li>ObjectMixin</li></ul> QmlComponentprettyqt.qml.qmlcomponent <ul><li>ObjectMixin</li><li>QQmlComponent</li></ul> HelpEngineCoreMixinprettyqt.qthelp.helpenginecoreThe core functionality of the help system. <ul><li>HelpEngineCore</li><li>HelpEngine</li></ul> <ul><li>ObjectMixin</li></ul> HelpSearchEngineprettyqt.qthelp.helpsearchengine <ul><li>ObjectMixin</li><li>QHelpSearchEngine</li></ul> HelpFilterEngineprettyqt.qthelp.helpfilterengineFiltered view of the help contents. <ul><li>ObjectMixin</li></ul> QuickTextDocumentprettyqt.quick.quicktextdocument <ul><li>ObjectMixin</li><li>QQuickTextDocument</li></ul> QuickRenderControlprettyqt.quick.quickrendercontrol <ul><li>ObjectMixin</li><li>QQuickRenderControl</li></ul> QuickImageResponseprettyqt.quick.quickimageresponse <ul><li>ObjectMixin</li><li>QQuickImageResponse</li></ul> QuickItemGrabResultprettyqt.quick.quickitemgrabresultContains the result from QQuickItem::grabToImage(). <ul><li>ObjectMixin</li></ul> QuickItemMixinprettyqt.quick.quickitem <ul><li>QuickItem</li><li>QuickPaintedItem</li></ul> <ul><li>ObjectMixin</li><li>QmlParserStatusMixin</li></ul> AbstractStateMixinprettyqt.statemachine.abstractstate <ul><li>AbstractState</li><li>FinalState</li><li>HistoryState</li><li><code>StateMixin</code></li></ul> <ul><li>ObjectMixin</li></ul> AbstractTransitionMixinprettyqt.statemachine.abstracttransition <ul><li>AbstractTransition</li><li>EventTransition</li><li>SignalTransition</li></ul> <ul><li>ObjectMixin</li></ul> SvgRendererprettyqt.svg.svgrenderer <ul><li>ObjectMixin</li><li>QSvgRenderer</li></ul> TextToSpeechprettyqt.texttospeech.texttospeech <ul><li>ObjectMixin</li><li>QTextToSpeech</li></ul> AmbientSoundprettyqt.spatialaudio.ambientsound <ul><li>ObjectMixin</li><li>QAmbientSound</li></ul> AudioEngineprettyqt.spatialaudio.audioengine <ul><li>ObjectMixin</li><li>QAudioEngine</li></ul> AudioListenerprettyqt.spatialaudio.audiolistener <ul><li>ObjectMixin</li><li>QAudioListener</li></ul> AudioRoomprettyqt.spatialaudio.audioroom <ul><li>ObjectMixin</li><li>QAudioRoom</li></ul> SpatialSoundprettyqt.spatialaudio.spatialsound <ul><li>ObjectMixin</li><li>QSpatialSound</li></ul> WebChannelprettyqt.webchannel.webchannel <ul><li>ObjectMixin</li><li>QWebChannel</li></ul> WebEngineUrlSchemeHandlerprettyqt.webenginecore.webengineurlschemehandler <ul><li>ObjectMixin</li><li>QWebEngineUrlSchemeHandler</li></ul> WebEnginePageprettyqt.webenginecore.webenginepage <ul><li>ObjectMixin</li><li>QWebEnginePage</li></ul> WebEngineProfileprettyqt.webenginecore.webengineprofile <ul><li>ObjectMixin</li><li>QWebEngineProfile</li></ul>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def __init__(self, *args, **kwargs):\nself._eventfilters = set()\n# klass = type(self)\n# if issubclass(klass, core.QObject) and klass not in _properties:\n#     metaobj = core.MetaObject(klass.staticMetaObject)\n#     _properties[klass] = [i.get_name() for i in metaobj.get_properties()]\n#     _signals[klass] = [i.get_name() for i in metaobj.get_signals()]\nnew = {}\nif kwargs:\nmapper = self._get_map()\nprops = get_properties(type(self))\nsignals = get_signals(type(self))\nfor k, v in kwargs.items():\n# this allows snake_case naming.\ncamel_k = helpers.to_lower_camel(k)\nif camel_k != k and camel_k in kwargs:\nlogger.warning(f\"{k} defined twice: {v} / {kwargs[camel_k]}\")\n# allow str values instead of enum\nif camel_k in mapper and isinstance(v, str):\nnew[camel_k] = mapper[camel_k][v]\n# allow str values for common icon kwargs\nelif camel_k in {\"windowIcon\", \"icon\"} and isinstance(v, str):\nfrom prettyqt import iconprovider\nnew[camel_k] = iconprovider.get_icon(v)\n# kwargs which need camel-casing\nelif camel_k in props or camel_k in signals:\nnew[camel_k] = v\nelse:\nnew[k] = v\nsuper().__init__(*args, **new)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.add_callback_for_event","title":"<code>add_callback_for_event(callback: Callable[[core.QEvent], bool], include: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None, exclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None) -&gt; eventfilters.EventCatcher</code>","text":"<p>Connect widget events to a callback.</p> <p>if include is set, it behaves like a whitelist. if exclude is set, it behaves like a blacklist. The QEvent is passed to the callback as an argument, and the callback needs to return True or False to indicate whether the Event should be filtered.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[core.QEvent], bool]</code> <p>Callback to execute when event is triggered</p> required <code>include</code> <code>core.QEvent.Type | Sequence[core.QEvent.Type] | None</code> <p>Events to include</p> <code>None</code> <code>exclude</code> <code>core.QEvent.Type | Sequence[core.QEvent.Type] | None</code> <p>Events to exclude</p> <code>None</code> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def add_callback_for_event(\nself,\ncallback: Callable[[core.QEvent], bool],\ninclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None,\nexclude: core.QEvent.Type | Sequence[core.QEvent.Type] | None = None,\n) -&gt; eventfilters.EventCatcher:\n\"\"\"Connect widget events to a callback.\n    if include is set, it behaves like a whitelist.\n    if exclude is set, it behaves like a blacklist.\n    The QEvent is passed to the callback as an argument, and the callback\n    needs to return True or False to indicate whether the Event should be filtered.\n    Arguments:\n        callback: Callback to execute when event is triggered\n        include: Events to include\n        exclude: Events to exclude\n    \"\"\"\nfrom prettyqt import eventfilters\neventfilter = eventfilters.EventCatcher(include, exclude, callback, parent=self)\nself.installEventFilter(eventfilter)\nreturn eventfilter\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.find_child","title":"<code>find_child(typ: type[T] = core.QObject, name: str | core.QRegularExpression | None = None, recursive: bool = True) -&gt; T | None</code>","text":"<p>Find a child with given type and name.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_child(\nself,\ntyp: type[T] = core.QObject,\nname: str | core.QRegularExpression | None = None,\nrecursive: bool = True,\n) -&gt; T | None:\n\"\"\"Find a child with given type and name.\"\"\"\nif recursive:\nflag = constants.FindChildOption.FindChildrenRecursively\nelse:\nflag = constants.FindChildOption.FindDirectChildrenOnly\nmatch typ:\ncase types.UnionType():\nreturn next(\n(item for item in self.find_children(typ, name, recursive=recursive)),\nNone,\n)\ncase _:\nreturn self.findChild(typ, name, flag)  # type: ignore\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.find_children","title":"<code>find_children(typ: type[T] = core.QObject, name: str | datatypes.PatternType | None = None, recursive: bool = True, property_selector: dict[str, datatypes.VariantType | Callable] | None = None, only_prettyqt_classes: bool = False) -&gt; listdelegators.ListDelegator[T]</code>","text":"<p>Find children with given type and name.</p> <p>Children can be filtered by passing a property selector dictionary. It must contain the property name for keys and either a value which must be set or a predicate function which gets the property value as an argument and must return True if the child should be included.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>type[T]</code> <p>Subclass of QObject (can also be a UnionType)</p> <code>core.QObject</code> <code>name</code> <code>str | datatypes.PatternType | None</code> <p>ObjectName filter. None includes all.</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>whether to search for children recursively.</p> <code>True</code> <code>property_selector</code> <code>dict[str, datatypes.VariantType | Callable] | None</code> <p>dict containing PropertyName -&gt; Value/Predicate pairs.</p> <code>None</code> <code>only_prettyqt_classes</code> <code>bool</code> <p>only include objects with prettyqt superpowers.</p> <code>False</code> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_children(\nself,\ntyp: type[T] = core.QObject,\nname: str | datatypes.PatternType | None = None,\nrecursive: bool = True,\nproperty_selector: dict[str, datatypes.VariantType | Callable] | None = None,\nonly_prettyqt_classes: bool = False,\n) -&gt; listdelegators.ListDelegator[T]:\n\"\"\"Find children with given type and name.\n    Children can be filtered by passing a property selector dictionary.\n    It must contain the property name for keys and either a value which must be set\n    or a predicate function which gets the property value as an argument\n    and must return True if the child should be included.\n    Arguments:\n        typ: Subclass of QObject (can also be a UnionType)\n        name: ObjectName filter. None includes all.\n        recursive: whether to search for children recursively.\n        property_selector: dict containing PropertyName -&gt; Value/Predicate pairs.\n        only_prettyqt_classes: only include objects with prettyqt superpowers.\n    Returns:\n        list of QObjects\n    \"\"\"\nif isinstance(name, re.Pattern):\nname = core.RegularExpression(name)\nif recursive:\nflag = constants.FindChildOption.FindChildrenRecursively\nelse:\nflag = constants.FindChildOption.FindDirectChildrenOnly\nmatch typ:\ncase types.UnionType():\nobjects = [\ni\nfor t in get_args(typ)\nfor i in self.findChildren(t, name=name, options=flag)\n]\ncase type():\nobjects = self.findChildren(typ, name=name, options=flag)\ncase _:\nraise TypeError(typ)\nif property_selector:\nobjects = [\no\nfor o in objects\nfor k, v in property_selector.items()\nif (callable(v) and v(o.property(k)))\nor (not callable(v) and o.property(k) == v)\n]\nif only_prettyqt_classes:\nobjects = [i for i in objects if i.__module__.startswith(\"prettyqt\")]\nreturn listdelegators.ListDelegator(objects)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.find_parent","title":"<code>find_parent(typ: type[T] = core.QObject, name: str | None = None) -&gt; T | None</code>","text":"<p>Find parent with given type or name.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def find_parent(\nself, typ: type[T] = core.QObject, name: str | None = None\n) -&gt; T | None:\n\"\"\"Find parent with given type or name.\"\"\"\nnode = self\nwhile node:\nnode = node.parent()\nif isinstance(node, typ) and (name is None or node.objectName() == name):\nreturn node\nreturn None\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.get_dynamic_properties","title":"<code>get_dynamic_properties() -&gt; dict[str, Any]</code>","text":"<p>Get a dictionary with all dynamic properties.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_dynamic_properties(self) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary with all dynamic properties.\"\"\"\nreturn {\n(k := i.data().decode()): self.property(k)\nfor i in self.dynamicPropertyNames()\n}\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.get_properties","title":"<code>get_properties(include_super: bool = True, cast: bool = True, only_writable: bool = False, only_nonempty: bool = False) -&gt; dict[str, Any]</code>","text":"<p>Get a dictionary containing all properties and their values.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def get_properties(\nself,\ninclude_super: bool = True,\ncast: bool = True,\nonly_writable: bool = False,\nonly_nonempty: bool = False,\n) -&gt; dict[str, Any]:\n\"\"\"Get a dictionary containing all properties and their values.\"\"\"\nmetaobj = self.get_metaobject()\nprops = metaobj.get_properties(\ninclude_super=include_super, only_writable=only_writable\n)\ndct = {}\nfor i in props:\nif i.get_name() in [\"children\", \"frameShadow\", \"state\"]:\ncontinue\nval = i.read(self)\nif only_nonempty:\nmatch val:\ncase _ if hasattr(val, \"isNull\"):\ninclude = not val.isNull()\ncase _ if hasattr(val, \"isEmpty\"):\ninclude = not val.isEmpty()\ncase _ if hasattr(val, \"isValid\"):\ninclude = val.isValid()\ncase _:\ninclude = bool(val)\nelse:\ninclude = True\nif not include:\ncontinue\ndct[i.name()] = datatypes.make_serializable(val) if cast else val\nreturn dct\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.installEventFilter","title":"<code>installEventFilter(filter_: core.QObject | str, **kwargs: core.QObject | str)</code>","text":"<p>Override to also allow setting eventfilters by name.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def installEventFilter(self, filter_: core.QObject | str, **kwargs):\n\"\"\"Override to also allow setting eventfilters by name.\"\"\"\nif filter_ in self._eventfilters:\nlogger.warning(f\"Installing same EventFilter multiple times to {self}.\")\nreturn\nmatch filter_:\ncase core.QObject():\npass\ncase str():\nfrom prettyqt import eventfilters\nKlass = classhelpers.get_class_for_id(\neventfilters.BaseEventFilter, filter_\n)\nfilter_ = Klass(parent=self, **kwargs)\ncase _:\nraise ValueError(filter_)\nself._eventfilters.add(filter_)\nsuper().installEventFilter(filter_)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.properties_set_to","title":"<code>properties_set_to(**kwargs)</code>","text":"<p>Context manager to temporarily set properties to different values.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef properties_set_to(self, **kwargs):\n\"\"\"Context manager to temporarily set properties to different values.\"\"\"\nprops = {k: self.property(k) for k in kwargs}\nfor k, v in kwargs.items():\nself.setProperty(k, v)\nyield self\nfor k, v in props.items():\nself.setProperty(k, v)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.set_properties","title":"<code>set_properties(props: dict[str, Any], include_super: bool = True)</code>","text":"<p>Set properties from a dictionary.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_properties(self, props: dict[str, Any], include_super: bool = True):\n\"\"\"Set properties from a dictionary.\"\"\"\nmetaobj = self.get_metaobject()\nmetaprops = metaobj.get_properties(include_super=include_super)\nfor metaprop in metaprops:\nif (name := metaprop.name()) in props:\nvalue = props[name]\nmetaprop.write(self, value)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.set_unique_id","title":"<code>set_unique_id()</code>","text":"<p>Set unique objectName.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def set_unique_id(self):\n\"\"\"Set unique objectName.\"\"\"\nclass_name = type(self).__name__\ncount = next(counter_dict[class_name])\nself.setObjectName(f\"{class_name}_{count}\")\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.signal_blocked","title":"<code>signal_blocked(signal: core.SignalInstance, receiver: Callable | core.SignalInstance)</code>","text":"<p>Context manager to temporarily disconnect specific signal.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef signal_blocked(\nself, signal: core.SignalInstance, receiver: Callable | core.SignalInstance\n):\n\"\"\"Context manager to temporarily disconnect specific signal.\"\"\"\nsignal.disconnect(receiver)\nyield self\nsignal.connect(receiver)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.signals_blocked","title":"<code>signals_blocked()</code>","text":"<p>Context manager to temporarily block emitting signals.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>@contextlib.contextmanager\ndef signals_blocked(self):\n\"\"\"Context manager to temporarily block emitting signals.\"\"\"\nblocked = self.blockSignals(True)\nyield self\nself.blockSignals(blocked)\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.start_callback_timer","title":"<code>start_callback_timer(callback: Callable, interval: int | str, single_shot: bool = False, timer_type: constants.TimerTypeStr = 'coarse') -&gt; core.Timer</code>","text":"<p>Start timer and execute callback when timeout reached.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def start_callback_timer(\nself,\ncallback: Callable,\ninterval: int | str,\nsingle_shot: bool = False,\ntimer_type: constants.TimerTypeStr = \"coarse\",\n) -&gt; core.Timer:\n\"\"\"Start timer and execute callback when timeout reached.\"\"\"\ninterval = helpers.parse_time(interval) if isinstance(interval, str) else interval\ntimer = core.Timer(\nself,\nsingle_shot=single_shot,\ninterval=interval,\ntimer_type=timer_type,\ntimeout=callback,\n)\ntimer.start()\nreturn timer\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#prettyqt.core.object.ObjectMixin.start_timer","title":"<code>start_timer(interval: int | str, timer_type: constants.TimerTypeStr = 'coarse') -&gt; int | None</code>","text":"<p>Start a timer and return the timer id, to be used in timerEvent.</p> Source code in <code>prettyqt\\core\\object.py</code> <pre><code>def start_timer(\nself,\ninterval: int | str,\ntimer_type: constants.TimerTypeStr = \"coarse\",\n) -&gt; int | None:\n\"\"\"Start a timer and return the timer id, to be used in timerEvent.\"\"\"\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nresult = self.startTimer(interval, constants.TIMER_TYPE[timer_type])\nreturn None if result == 0 else result\n</code></pre>"},{"location":"qt_modules/core/ObjectMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/OperatingSystemVersion.html","title":"OperatingSystemVersion","text":"<p>Qt Base Class: QOperatingSystemVersion</p> <p>Signature: <code>QOperatingSystemVersion(self, QOperatingSystemVersion: PySide6.QtCore.QOperatingSystemVersion) -&gt; None QOperatingSystemVersion(self, osType: PySide6.QtCore.QOperatingSystemVersion.OSType, vmajor: int, vminor: int = -1, vmicro: int = -1) -&gt; None</code></p>"},{"location":"qt_modules/core/OperatingSystemVersion.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QOperatingSystemVersion</code></p> <p>Information about the operating system version.</p> Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>class OperatingSystemVersion(core.QOperatingSystemVersion):\n\"\"\"Information about the operating system version.\"\"\"\ndef __init__(\nself,\ntyp: core.QOperatingSystemVersion.OSType | str,\nmajor: int,\nminor: int | None = None,\nmicro: int | None = None,\n):\nos_type = OS_TYPE[typ] if isinstance(typ, str) else typ\nif minor is None:\nminor = -1\nif micro is None:\nmicro = -1\nsuper().__init__(os_type, major, minor, micro)\ndef __repr__(self):\nreturn get_repr(\nself,\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n)\n@property\ndef _type(self) -&gt; OsTypeStr:\nreturn self.get_type()\n@property\ndef _majorVersion(self) -&gt; int:\nreturn self.majorVersion()\n@property\ndef _minorVersion(self) -&gt; int:\nreturn self.minorVersion()\n@property\ndef _macroVersion(self) -&gt; int:\nreturn self.macroVersion()\n__match_args__ = (\"_type\", \"_majorVersion\", \"_minorVersion\", \"_macroVersion\")\ndef __reduce__(self):\nreturn (\ntype(self),\n(\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n),\n)\ndef __eq__(self, other):\nreturn (\n(\nself.type() == other.type()\nand self.majorVersion() == other.majorVersion()\nand self.minorVersion() == other.minorVersion()\nand self.microVersion() == other.microVersion()\n)\nif isinstance(other, core.QOperatingSystemVersion)\nelse False\n)\ndef __hash__(self):\nreturn hash(\n(\nself.get_type(),\nself.majorVersion(),\nself.minorVersion(),\nself.microVersion(),\n)\n)\ndef get_type(self) -&gt; OsTypeStr:\n\"\"\"Get current os type.\n        Returns:\n            current os type\n        \"\"\"\nreturn OS_TYPE.inverse[self.type()]\ndef get_versionnumber(self) -&gt; core.VersionNumber:\nreturn core.VersionNumber(\nself.majorVersion(), self.minorVersion(), self.microVersion()\n)\n</code></pre>"},{"location":"qt_modules/core/OperatingSystemVersion.html#prettyqt.core.operatingsystemversion.OperatingSystemVersion.get_type","title":"<code>get_type() -&gt; OsTypeStr</code>","text":"<p>Get current os type.</p> Source code in <code>prettyqt\\core\\operatingsystemversion.py</code> <pre><code>def get_type(self) -&gt; OsTypeStr:\n\"\"\"Get current os type.\n    Returns:\n        current os type\n    \"\"\"\nreturn OS_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/core/OperatingSystemVersion.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255086672[\"core.OperatingSystemVersion\"]\n  2103257871440[\"QtCore.QOperatingSystemVersion\"]\n  2103257900240[\"QtCore.QOperatingSystemVersionBase\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257871440 --&gt; 2103255086672\n  2103257900240 --&gt; 2103257871440\n  2103206874128 --&gt; 2103257900240\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ParallelAnimationGroup.html","title":"ParallelAnimationGroup","text":"<p>Qt Base Class: QParallelAnimationGroup</p> <p>Signature: <code>QParallelAnimationGroup(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/ParallelAnimationGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AnimationGroupMixin</code>, <code>core.QParallelAnimationGroup</code></p> <p>Parallel group of animations.</p> Source code in <code>prettyqt\\core\\parallelanimationgroup.py</code> <pre><code>class ParallelAnimationGroup(core.AnimationGroupMixin, core.QParallelAnimationGroup):\n\"\"\"Parallel group of animations.\"\"\"\ndef set_duration(self, duration: int):\nfor anim in self:\nmatch anim:\n# I dont think we need to support nested Animations here..\ncase core.QVariantAnimation():\nanim.setDuration(duration)\ncase _:\nraise TypeError(\"set_duration only works with QVariantAnimations.\")\n</code></pre> Name Children Inherits ZoomAnimationprettyqt.animations.zoomanimation <ul><li>ParallelAnimationGroup</li></ul>"},{"location":"qt_modules/core/ParallelAnimationGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255078992[\"core.ParallelAnimationGroup\"]\n  2103255077072[\"core.AnimationGroupMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254635776[\"QtCore.QParallelAnimationGroup\"]\n  2103254633856[\"QtCore.QAnimationGroup\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255077072 --&gt; 2103255078992\n  2103255082832 --&gt; 2103255077072\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254635776 --&gt; 2103255078992\n  2103254633856 --&gt; 2103254635776\n  2103254626176 --&gt; 2103254633856\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ParallelAnimationGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int"},{"location":"qt_modules/core/PauseAnimation.html","title":"PauseAnimation","text":"<p>Qt Base Class: QPauseAnimation</p> <p>Signature: <code>QPauseAnimation(self, msecs: int, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QPauseAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/PauseAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractAnimationMixin</code>, <code>core.QPauseAnimation</code></p> <p>Pause for QSequentialAnimationGroup.</p> Source code in <code>prettyqt\\core\\pauseanimation.py</code> <pre><code>class PauseAnimation(core.AbstractAnimationMixin, core.QPauseAnimation):\n\"\"\"Pause for QSequentialAnimationGroup.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.duration())\n</code></pre>"},{"location":"qt_modules/core/PauseAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255076112[\"core.PauseAnimation\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254632896[\"QtCore.QPauseAnimation\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255082832 --&gt; 2103255076112\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254632896 --&gt; 2103255076112\n  2103254626176 --&gt; 2103254632896\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/PauseAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>duration</code> int"},{"location":"qt_modules/core/PersistentModelIndex.html","title":"PersistentModelIndex","text":"<p>Qt Base Class: QPersistentModelIndex</p> <p>Signature: <code>QPersistentModelIndex(self) -&gt; None QPersistentModelIndex(self, index: Union[PySide6.QtCore.QModelIndex, PySide6.QtCore.QPersistentModelIndex]) -&gt; None QPersistentModelIndex(self, other: Union[PySide6.QtCore.QPersistentModelIndex, PySide6.QtCore.QModelIndex]) -&gt; None</code></p>"},{"location":"qt_modules/core/PersistentModelIndex.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QPersistentModelIndex</code></p> <p>Used to locate data in a data model.</p> Source code in <code>prettyqt\\core\\persistentmodelindex.py</code> <pre><code>class PersistentModelIndex(QtCore.QPersistentModelIndex):\n\"\"\"Used to locate data in a data model.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef __getitem__(self, flag: int):\nreturn self.data(flag)\n</code></pre>"},{"location":"qt_modules/core/PersistentModelIndex.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255056912[\"core.PersistentModelIndex\"]\n  2103257889680[\"QtCore.QPersistentModelIndex\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257889680 --&gt; 2103255056912\n  2103206874128 --&gt; 2103257889680\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/PluginLoader.html","title":"PluginLoader","text":"<p>Qt Base Class: QPluginLoader</p> <p>Signature: <code>QPluginLoader(self, fileName: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QPluginLoader(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/PluginLoader.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QPluginLoader</code></p> <p>Load a plugin at runtime.</p> Source code in <code>prettyqt\\core\\pluginloader.py</code> <pre><code>class PluginLoader(core.ObjectMixin, core.QPluginLoader):\n\"\"\"Load a plugin at runtime.\"\"\"\ndef get_load_hints(self) -&gt; list[core.library.LoadHintStr]:\nreturn core.library.LOAD_HINTS.get_list(self.loadHints())\ndef set_load_hints(self, **kwargs):\nflag = core.QLibrary.LoadHint(0)  # type: ignore\nfor k, v in kwargs.items():\nif v is True:\nflag |= core.library.LOAD_HINTS[k]  # type: ignore\nself.setLoadHints(flag)  # type: ignore\n</code></pre>"},{"location":"qt_modules/core/PluginLoader.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254418128[\"core.PluginLoader\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254701056[\"QtCore.QPluginLoader\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103254418128\n  140736120080256 --&gt; 2103255067472\n  2103254701056 --&gt; 2103254418128\n  2103254677056 --&gt; 2103254701056\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/PluginLoader.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>fileName</code> QString <code>loadHints</code> QFlags"},{"location":"qt_modules/core/Process.html","title":"Process","text":"<p>Qt Base Class: QProcess</p> <p>Signature: <code>QProcess(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Process.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IODeviceMixin</code>, <code>core.QProcess</code></p> <p>Used to start external programs and to communicate with them.</p> Source code in <code>prettyqt\\core\\process.py</code> <pre><code>class Process(core.IODeviceMixin, core.QProcess):\n\"\"\"Used to start external programs and to communicate with them.\"\"\"\ndef set_read_channel(\nself, channel: ProcessChannelStr | core.QProcess.ProcessChannelMode\n):\n\"\"\"Set the input channel channel.\n        Args:\n            channel: channel to set\n        \"\"\"\nself.setReadChannel(PROCESS_CHANNELS.get_enum_value(channel))\ndef get_read_channel(self) -&gt; ProcessChannelStr:\nreturn PROCESS_CHANNELS.inverse[self.readChannel()]\ndef close_read_channel(self, channel: ProcessChannelStr):\nself.closeReadChannel(PROCESS_CHANNELS[channel])\ndef set_input_channel_mode(\nself, mode: InputChannelModeStr | core.QProcess.InputChannelMode\n):\n\"\"\"Set the input channel mode.\n        Args:\n            mode: mode to set\n        \"\"\"\nself.setInputChannelMode(INPUT_CHANNEL_MODES.get_enum_value(mode))\ndef get_input_channel_mode(self) -&gt; InputChannelModeStr:\nreturn INPUT_CHANNEL_MODES.inverse[self.inputChannelMode()]\ndef set_process_channel_mode(\nself, mode: ProcessChannelModeStr | core.QProcess.ProcessChannelMode\n):\n\"\"\"Set the process channel mode.\n        Args:\n            mode: mode to set\n        \"\"\"\nself.setProcessChannelMode(PROCESS_CHANNEL_MODES.get_enum_value(mode))\ndef get_process_channel_mode(self) -&gt; ProcessChannelModeStr:\nreturn PROCESS_CHANNEL_MODES.inverse[self.processChannelMode()]\ndef set_state(self, state: ProcessStateStr | core.QProcess.ProcessState):\n\"\"\"Set the process state.\n        Args:\n            state: state to set\n        \"\"\"\nself.setProcessState(PROCESS_STATES.get_enum_value(state))\ndef get_state(self) -&gt; ProcessStateStr:\nreturn PROCESS_STATES.inverse[self.state()]\ndef get_error(self) -&gt; ProcessErrorStr:\nreturn PROCESS_ERRORS.inverse[self.error()]\ndef get_exit_status(self) -&gt; ExitStatusStr:\nreturn EXIT_STATUS.inverse[self.exitStatus()]\ndef get_process_environment(self) -&gt; core.ProcessEnvironment:\nreturn core.ProcessEnvironment(self.processEnvironment())\n@contextlib.contextmanager\ndef edit_process_environment(self):\nenv = self.get_process_environment()\nyield env\nself.setProcessEnvironment(env)\n</code></pre>"},{"location":"qt_modules/core/Process.html#prettyqt.core.process.Process.set_input_channel_mode","title":"<code>set_input_channel_mode(mode: InputChannelModeStr | core.QProcess.InputChannelMode)</code>","text":"<p>Set the input channel mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InputChannelModeStr | core.QProcess.InputChannelMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_input_channel_mode(\nself, mode: InputChannelModeStr | core.QProcess.InputChannelMode\n):\n\"\"\"Set the input channel mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setInputChannelMode(INPUT_CHANNEL_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/core/Process.html#prettyqt.core.process.Process.set_process_channel_mode","title":"<code>set_process_channel_mode(mode: ProcessChannelModeStr | core.QProcess.ProcessChannelMode)</code>","text":"<p>Set the process channel mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ProcessChannelModeStr | core.QProcess.ProcessChannelMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_process_channel_mode(\nself, mode: ProcessChannelModeStr | core.QProcess.ProcessChannelMode\n):\n\"\"\"Set the process channel mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setProcessChannelMode(PROCESS_CHANNEL_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/core/Process.html#prettyqt.core.process.Process.set_read_channel","title":"<code>set_read_channel(channel: ProcessChannelStr | core.QProcess.ProcessChannelMode)</code>","text":"<p>Set the input channel channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>ProcessChannelStr | core.QProcess.ProcessChannelMode</code> <p>channel to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_read_channel(\nself, channel: ProcessChannelStr | core.QProcess.ProcessChannelMode\n):\n\"\"\"Set the input channel channel.\n    Args:\n        channel: channel to set\n    \"\"\"\nself.setReadChannel(PROCESS_CHANNELS.get_enum_value(channel))\n</code></pre>"},{"location":"qt_modules/core/Process.html#prettyqt.core.process.Process.set_state","title":"<code>set_state(state: ProcessStateStr | core.QProcess.ProcessState)</code>","text":"<p>Set the process state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>ProcessStateStr | core.QProcess.ProcessState</code> <p>state to set</p> required Source code in <code>prettyqt\\core\\process.py</code> <pre><code>def set_state(self, state: ProcessStateStr | core.QProcess.ProcessState):\n\"\"\"Set the process state.\n    Args:\n        state: state to set\n    \"\"\"\nself.setProcessState(PROCESS_STATES.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/core/Process.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254390288[\"core.Process\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254712576[\"QtCore.QProcess\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255106832 --&gt; 2103254390288\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254712576 --&gt; 2103254390288\n  2103254728896 --&gt; 2103254712576\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/Process.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/ProcessEnvironment.html","title":"ProcessEnvironment","text":"<p>Qt Base Class: QProcessEnvironment</p> <p>Signature: <code>QProcessEnvironment(self) -&gt; None QProcessEnvironment(self, arg__1: PySide6.QtCore.QProcessEnvironment.Initialization) -&gt; None QProcessEnvironment(self, other: Union[PySide6.QtCore.QProcessEnvironment, PySide6.QtCore.QProcessEnvironment.Initialization]) -&gt; None</code></p>"},{"location":"qt_modules/core/ProcessEnvironment.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QProcessEnvironment</code>, <code>MutableMapping</code></p> <p>Holds the environment variables that can be passed to a program.</p> Source code in <code>prettyqt\\core\\processenvironment.py</code> <pre><code>class ProcessEnvironment(\nQtCore.QProcessEnvironment, MutableMapping, metaclass=datatypes.QABCMeta\n):\n\"\"\"Holds the environment variables that can be passed to a program.\"\"\"\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, other: str):\nreturn self.contains(other)\ndef __getitem__(self, index: str) -&gt; str:\nif index not in self:\nraise KeyError(\"Environment variable not set.\")\nreturn self.value(index)\ndef __delitem__(self, index: str):\nself.remove(index)\ndef __setitem__(self, index: str, value: str):\nreturn self.insert(index, value)\ndef __iter__(self) -&gt; Iterator[str]:\nreturn iter(self.keys())\ndef __len__(self):\nreturn len(self.keys())\n@classmethod\ndef get_system_environment(cls) -&gt; Self:\nreturn cls(cls.systemEnvironment())\n</code></pre>"},{"location":"qt_modules/core/ProcessEnvironment.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255065552[\"core.ProcessEnvironment\"]\n  2103257894480[\"QtCore.QProcessEnvironment\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103257894480 --&gt; 2103255065552\n  2103206874128 --&gt; 2103257894480\n  140736120080256 --&gt; 2103206874128\n  2103189029904 --&gt; 2103255065552\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/core/Property.html","title":"Property","text":"<p>Qt Base Class: Property</p> <p>Signature: <code>&lt;attribute '__doc__' of 'PySide6.QtCore.Property' objects&gt;</code></p>"},{"location":"qt_modules/core/Property.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.Property</code></p> <p>Template class that enables automatic property bindings.</p> Source code in <code>prettyqt\\core\\property.py</code> <pre><code>class Property(QtCore.Property):\n\"\"\"Template class that enables automatic property bindings.\"\"\"\ndef __init__(self, *args, **kwargs):\nself.doc = kwargs.get(\"doc\")\nsuper().__init__(*args, **kwargs)\n@classmethod\ndef get_doc_dict(cls, klass: type):\nimport inspect\nreturn {\nname: member.doc\nfor name, member in inspect.getmembers(klass)\nif isinstance(member, cls) and hasattr(member, \"doc\")\n}\n</code></pre>"},{"location":"qt_modules/core/Property.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254958032[\"core.Property\"]\n  2103254862032[\"QtCore.Property\"]\n  140736120080256[\"builtins.object\"]\n  2103254862032 --&gt; 2103254958032\n  140736120080256 --&gt; 2103254862032</code></pre>"},{"location":"qt_modules/core/PropertyAnimation.html","title":"PropertyAnimation","text":"<p>Qt Base Class: QPropertyAnimation</p> <p>Signature: <code>QPropertyAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QPropertyAnimation(self, target: PySide6.QtCore.QObject, propertyName: Union[PySide6.QtCore.QByteArray, bytes], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/PropertyAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.VariantAnimationMixin</code>, <code>core.QPropertyAnimation</code></p> <p>Animates Qt properties.</p> Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>class PropertyAnimation(core.VariantAnimationMixin, core.QPropertyAnimation):\n\"\"\"Animates Qt properties.\"\"\"\nID = \"property\"\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (core.QObject(), str(), *rest):\nsuper().__init__(args[0], bytes(args[1]), *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"easingCurve\": core.easingcurve.TYPE}\nreturn maps\ndef apply_to(self, method: Callable):\nself.setTargetObject(method.__self__)\nself.set_property_name(method.__name__)\ndef set_property_name(self, name: datatypes.ByteArrayType):\nname = datatypes.to_bytearray(name)\nself.setPropertyName(name)\ndef get_property_name(self) -&gt; str:\nreturn self.propertyName().data().decode()\ndef get_property_value(self) -&gt; Any:\n\"\"\"Return the value of the property which should get animated.\"\"\"\nprop_name = self.get_property_name()\nobj = self.targetObject()\nreturn obj.property(prop_name)\n</code></pre> Name Children Inherits SlideAnimationprettyqt.animations.slideanimation <ul><li>PropertyAnimation</li></ul> TextAnimationprettyqt.animations.textanimation <ul><li>PropertyAnimation</li></ul>"},{"location":"qt_modules/core/PropertyAnimation.html#prettyqt.core.propertyanimation.PropertyAnimation.get_property_value","title":"<code>get_property_value() -&gt; Any</code>","text":"<p>Return the value of the property which should get animated.</p> Source code in <code>prettyqt\\core\\propertyanimation.py</code> <pre><code>def get_property_value(self) -&gt; Any:\n\"\"\"Return the value of the property which should get animated.\"\"\"\nprop_name = self.get_property_name()\nobj = self.targetObject()\nreturn obj.property(prop_name)\n</code></pre>"},{"location":"qt_modules/core/PropertyAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255083792[\"core.PropertyAnimation\"]\n  2103255074192[\"core.VariantAnimationMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254631936[\"QtCore.QPropertyAnimation\"]\n  2103254630976[\"QtCore.QVariantAnimation\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255074192 --&gt; 2103255083792\n  2103255082832 --&gt; 2103255074192\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254631936 --&gt; 2103255083792\n  2103254630976 --&gt; 2103254631936\n  2103254626176 --&gt; 2103254630976\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/PropertyAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>startValue</code> QVariant <code>endValue</code> QVariant <code>currentValue</code> QVariant <code>duration</code> int <code>easingCurve</code> QEasingCurve <code>propertyName</code> QByteArray <code>targetObject</code> QObject"},{"location":"qt_modules/core/RandomGenerator.html","title":"RandomGenerator","text":"<p>Qt Base Class: QRandomGenerator</p> <p>Signature: <code>QRandomGenerator(self, begin: int, end: int) -&gt; None QRandomGenerator(self, other: PySide6.QtCore.QRandomGenerator) -&gt; None QRandomGenerator(self, seedBuffer: int, len: int) -&gt; None QRandomGenerator(self, seedValue: int = 1) -&gt; None</code></p>"},{"location":"qt_modules/core/RandomGenerator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QRandomGenerator</code></p> <p>Allows one to obtain random values from a high-quality Random Number Generator.</p> Source code in <code>prettyqt\\core\\randomgenerator.py</code> <pre><code>class RandomGenerator(QtCore.QRandomGenerator):\n\"\"\"Allows one to obtain random values from a high-quality Random Number Generator.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/RandomGenerator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255047312[\"core.RandomGenerator\"]\n  2103257902160[\"QtCore.QRandomGenerator\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257902160 --&gt; 2103255047312\n  2103206874128 --&gt; 2103257902160\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/RegularExpression.html","title":"RegularExpression","text":"<p>Qt Base Class: QRegularExpression</p> <p>Signature: <code>QRegularExpression(self) -&gt; None QRegularExpression(self, pattern: str, options: PySide6.QtCore.QRegularExpression.PatternOption = Instance(PySide6.QtCore.QRegularExpression.PatternOption.NoPatternOption)) -&gt; None QRegularExpression(self, re: Union[PySide6.QtCore.QRegularExpression, str]) -&gt; None</code></p>"},{"location":"qt_modules/core/RegularExpression.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QRegularExpression</code></p> <p>Pattern matching using regular expressions.</p> Source code in <code>prettyqt\\core\\regularexpression.py</code> <pre><code>class RegularExpression(core.QRegularExpression):\n\"\"\"Pattern matching using regular expressions.\"\"\"\ndef __init__(\nself,\npattern: str | core.QRegularExpression | re.Pattern = \"\",\nflags: core.QRegularExpression.PatternOption = PATTERN_OPTIONS[\"none\"],\n):\nmatch pattern:\ncase core.QRegularExpression():\nsuper().__init__(pattern)\ncase re.Pattern():\nqflag = self.PatternOption(0)\nfor flag in re.RegexFlag(pattern.flags):\nif flag in RE_MAP:\nqflag |= RE_MAP[flag]\nsuper().__init__(pattern.pattern, qflag)\ncase _:\nif isinstance(flags, int):\nflags = core.RegularExpression.PatternOption(flags)  # type: ignore\nsuper().__init__(pattern, flags)  # type: ignore\ndef __repr__(self):\nreturn get_repr(self, self.pattern())\n@property\ndef _pattern(self):\nreturn self.pattern()\n__match_args__ = (\"_pattern\",)\ndef __reduce__(self):\nreturn type(self), (self.pattern(), self.flags)\ndef globalMatch(self, *args, **kwargs) -&gt; core.RegularExpressionMatchIterator:\nit = super().globalMatch(*args, **kwargs)\nreturn core.RegularExpressionMatchIterator(it)\ndef global_match(\nself,\ntext: str,\noffset: int = 0,\nmatch_type: MatchTypeStr = \"normal\",\nanchored: bool = False,\n):\noptions = MATCH_OPTIONS[\"anchored\"] if anchored else MATCH_OPTIONS[\"none\"]\nreturn self.globalMatch(text, offset, MATCH_TYPE[match_type], options)\ndef match(  # type: ignore\nself,\ntext: str,\noffset: int = 0,\nmatch_type: MatchTypeStr | core.QRegularExpression.MatchType = \"normal\",\nanchored: bool = False,\n) -&gt; core.RegularExpressionMatch:\ntyp = MATCH_TYPE[match_type] if isinstance(match_type, str) else match_type\nif isinstance(anchored, bool):\noptions = MATCH_OPTIONS[\"anchored\"] if anchored else MATCH_OPTIONS[\"none\"]\nelse:\noptions = anchored\nmatch = super().match(text, offset, typ, options)\nreturn core.RegularExpressionMatch(match)\ndef fullmatch(\nself, string: str, pos: int = 0, endpos: int | None = None\n) -&gt; core.RegularExpressionMatch | None:\nif endpos:\nstring = string[:endpos]\nmatch = super().match(string, pos)\nif match.hasMatch() and len(string) == match.end() - match.start():\nreturn core.RegularExpressionMatch(match)\nelse:\nreturn None\ndef finditer(\nself, string: str, pos: int = 0, endpos: int | None = None\n) -&gt; Iterator[core.RegularExpressionMatch]:\nfor match in self.globalMatch(string[:endpos], offset=pos):\nmatch.pos = pos\nmatch.endpos = endpos\nmatch.string = string\nyield match\ndef findall(self, string: str, pos: int = 0, endpos: int | None = None) -&gt; list:\nmatches = list(self.globalMatch(string[:endpos], offset=pos))\nreturn [m.groups() if len(m.groups()) &gt; 1 else m.group(0) for m in matches]\ndef subn(self, repl: str | Callable, string: str, count: int = 0) -&gt; tuple[str, int]:\nresult = string\nmatches = self.global_match(string)\nmatches = list(matches)\nif count &gt; 0:\nmatches = matches[:count]\nmatches = list(reversed(matches))\nfor m in matches:\nto_replace = repl if isinstance(repl, str) else repl(m)\nfor j in range(self.groups):\nto_replace = to_replace.replace(rf\"\\g&lt;{j}&gt;\", m.group(j))\nfor k in self.groupindex:\nto_replace = to_replace.replace(rf\"\\g&lt;{k}&gt;\", m.group(k))\nresult = result[: m.start()] + to_replace + result[m.end() :]\nreturn (result, min(len(matches), count))\ndef sub(self, repl: str | Callable, string: str, count: int = 0) -&gt; str:\nres = self.subn(repl, string, count)\nreturn res[0]\ndef search(self, string: str, pos: int = 0, endpos: int | None = None):\nmatch = super().match(string[:endpos], pos)\nreturn match if match.hasMatch() else None\ndef split(self, string: str, maxsplit: int = 0):\nraise NotImplementedError\n# result = []\n# matches = self.global_match(string)\n# matches = list(matches)\n# if 0 &lt; maxsplit &lt;= len(matches):\n#     remainder = string[matches[maxsplit - 1].end() :]\n# else:\n#     remainder = None\n# if maxsplit &gt; 0:\n#     matches = matches[:maxsplit]\n# prev_match = None\n# m = matches[0]\n# if m.start() == 0:\n#     result.append(\"\")\n# else:\n#     result.append(string[0 : m.start()])\n# for g in m.groups():\n#     result.append(g)\n# prev_match = m\n# for m in matches[1:]:\n#     result.append(string[prev_match.end() : m.start()])\n#     for g in m.groups():\n#         result.append(g)\n#     if m.end() == len(string):\n#         result.append(\"\")\n#     prev_match = m\n# if remainder:\n#     result.append(remainder)\n# return result\n@property\ndef groups(self) -&gt; int:\nreturn self.captureCount()\n@property\ndef groupindex(self) -&gt; dict[str, int]:\nreturn {k: i for i, k in enumerate(self.namedCaptureGroups()[1:], start=1)}\n@property\ndef flags(self) -&gt; core.QRegularExpression.PatternOption:\nreturn self.patternOptions()\ndef to_py_pattern(self) -&gt; re.Pattern:\nflag = re.RegexFlag(0)\nfor qflag in self.patternOptions():\nif qflag in RE_MAP.inverse:\nflag |= RE_MAP.inverse[qflag]\nreturn re.compile(self.pattern(), flag)\n</code></pre>"},{"location":"qt_modules/core/RegularExpression.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254384528[\"core.RegularExpression\"]\n  2103257848400[\"QtCore.QRegularExpression\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257848400 --&gt; 2103254384528\n  2103206874128 --&gt; 2103257848400\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/RegularExpressionMatch.html","title":"RegularExpressionMatch","text":"<p>Qt Base Class: QRegularExpressionMatch</p> <p>Signature: <code>QRegularExpressionMatch(self) -&gt; None QRegularExpressionMatch(self, match: PySide6.QtCore.QRegularExpressionMatch) -&gt; None</code></p>"},{"location":"qt_modules/core/RegularExpressionMatch.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QRegularExpressionMatch</code></p> <p>The results of a matching a QRegularExpression against a string.</p> Source code in <code>prettyqt\\core\\regularexpressionmatch.py</code> <pre><code>class RegularExpressionMatch(core.QRegularExpressionMatch):\n\"\"\"The results of a matching a QRegularExpression against a string.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.string = None\nself.pos = None\nself.endpos = None\ndef __repr__(self):\nreturn get_repr(self)\ndef __getitem__(self, item: int | str) -&gt; str:\nif captured := self.captured(item):\nreturn captured\nelse:\nraise KeyError(item)\ndef __bool__(self):\nreturn self.isValid()\ndef get_match_type(self) -&gt; core.regularexpression.MatchTypeStr:\nreturn core.regularexpression.MATCH_TYPE.inverse[self.matchType()]\ndef group(self, *groups: int | str) -&gt; tuple[str, ...] | str:\nmatch len(groups):\ncase 0:\nreturn self.captured(0)\ncase 1:\nreturn self.captured(groups[0])\ncase _:\nreturn tuple(self.captured(i) for i in groups)\ndef groups(self, default=None) -&gt; tuple:\nif self.lastindex is None:\nreturn ()\nreturn tuple(\nself.group(i) if i &lt;= self.lastindex else default\nfor i in range(self.re.captureCount())\n)\ndef groupdict(self, default=None) -&gt; dict[str, Any]:\nif self.lastindex is None:\nreturn {}\ngroups = [\nself.group(i) if i &lt;= self.lastindex else default\nfor i in range(self.re.captureCount())\n]\nnames = self.re.namedCaptureGroups()\nreturn {names[i]: groups[i] for i in range(self.re.captureCount())}\ndef start(self, group: int = 0) -&gt; int:\nreturn self.capturedStart(group)\ndef end(self, group: int = 0) -&gt; int:\nreturn self.capturedEnd(group)\ndef span(self, group: int = 0) -&gt; tuple[int, int]:\nreturn (self.capturedStart(group), self.capturedEnd(group))\n@property\ndef lastindex(self) -&gt; int | None:\nidx = self.lastCapturedIndex()\nreturn None if idx == -1 else idx\n@property\ndef lastgroup(self) -&gt; str | None:\nif self.lastCapturedIndex() == -1:\nreturn None\nreturn self.re.namedCaptureGroups()[self.lastCapturedIndex()]\n@property\ndef re(self) -&gt; core.QRegularExpression:\nreturn self.regularExpression()\n@property\ndef partial(self) -&gt; bool:\nreturn self.hasPartialMatch()\n</code></pre>"},{"location":"qt_modules/core/RegularExpressionMatch.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254386448[\"core.RegularExpressionMatch\"]\n  2103257859920[\"QtCore.QRegularExpressionMatch\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257859920 --&gt; 2103254386448\n  2103206874128 --&gt; 2103257859920\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/RegularExpressionMatchIterator.html","title":"RegularExpressionMatchIterator","text":"<p>Qt Base Class: QRegularExpressionMatchIterator</p> <p>Signature: <code>QRegularExpressionMatchIterator(self) -&gt; None QRegularExpressionMatchIterator(self, iterator: PySide6.QtCore.QRegularExpressionMatchIterator) -&gt; None</code></p>"},{"location":"qt_modules/core/RegularExpressionMatchIterator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QRegularExpressionMatchIterator</code></p> <p>Iterator on the results of a global match of a QRegularExpression.</p> Source code in <code>prettyqt\\core\\regularexpressionmatchiterator.py</code> <pre><code>class RegularExpressionMatchIterator(core.QRegularExpressionMatchIterator):\n\"\"\"Iterator on the results of a global match of a QRegularExpression.\"\"\"\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.hasNext():\nreturn core.RegularExpressionMatch(self.next())\nraise StopIteration\ndef peek_next(self) -&gt; core.RegularExpressionMatch:\nreturn core.RegularExpressionMatch(self.peekNext())\n</code></pre>"},{"location":"qt_modules/core/RegularExpressionMatchIterator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254392208[\"core.RegularExpressionMatchIterator\"]\n  2103257856080[\"QtCore.QRegularExpressionMatchIterator\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257856080 --&gt; 2103254392208\n  2103206874128 --&gt; 2103257856080\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Resource.html","title":"Resource","text":"<p>Qt Base Class: QResource</p> <p>Signature: <code>QResource(self, file: str = '', locale: Union[PySide6.QtCore.QLocale, PySide6.QtCore.QLocale.Language] = Default(QLocale)) -&gt; None</code></p>"},{"location":"qt_modules/core/Resource.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QResource</code></p> <p>Interface for reading directly from resources.</p> Source code in <code>prettyqt\\core\\resource.py</code> <pre><code>class Resource(core.QResource):\n\"\"\"Interface for reading directly from resources.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.absoluteFilePath(), self.get_locale())\ndef __reduce__(self):\nreturn type(self), (self.absoluteFilePath(), self.get_locale())\ndef __bytes__(self):\nreturn bytes(self.uncompressedData())\ndef __bool__(self):\nreturn self.isValid()\ndef __iter__(self) -&gt; Iterator[str]:\nreturn iter(self.children())\ndef get_compression_algorithm(self) -&gt; CompressionStr:\nreturn COMPRESSION.inverse[self.compressionAlgorithm()]\ndef get_absolute_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.absoluteFilePath())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_last_modified(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastModified())\ndef set_file_name(self, path: datatypes.PathType):\nself.setFileName(os.fspath(path))\ndef get_file_name(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.fileName())\n@classmethod\ndef register_resource(cls, path: datatypes.PathType, root: str = \"\"):\ncls.registerResource(os.fspath(path), root)\n</code></pre>"},{"location":"qt_modules/core/Resource.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254369168[\"core.Resource\"]\n  2103257933840[\"QtCore.QResource\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257933840 --&gt; 2103254369168\n  2103206874128 --&gt; 2103257933840\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Runnable.html","title":"Runnable","text":"<p>Qt Base Class: QRunnable</p> <p>Signature: <code>QRunnable(self) -&gt; None</code></p>"},{"location":"qt_modules/core/Runnable.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QRunnable</code></p> <p>The base class for all runnable objects.</p> Source code in <code>prettyqt\\core\\runnable.py</code> <pre><code>class Runnable(QtCore.QRunnable):\n\"\"\"The base class for all runnable objects.\"\"\"\n</code></pre> Name Children Inherits <code>Worker</code>prettyqt.core.threadpool <ul><li>Runnable</li></ul>"},{"location":"qt_modules/core/Runnable.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254370128[\"core.Runnable\"]\n  2103257853200[\"QtCore.QRunnable\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257853200 --&gt; 2103254370128\n  2103206874128 --&gt; 2103257853200\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>core</li> <li>EasingCurve</li> <li>MetaProperty</li> <li>AbstractNativeEventFilter</li> <li>AbstractTableModel</li> <li>File</li> <li>Dir</li> <li>TextStream</li> <li>PersistentModelIndex</li> <li>AbstractEventDispatcher</li> <li>DateTime</li> <li>PluginLoader</li> <li>KeyCombination</li> <li>Event</li> <li>IODevice</li> <li>SizeF</li> <li>AbstractAnimation</li> <li>Resource</li> <li>ProcessEnvironment</li> <li>MetaMethod</li> <li>SortFilterProxyModel</li> <li>AbstractProxyModel</li> <li>IODeviceMixin</li> <li>TemporaryFile</li> <li>ByteArray</li> <li>VariantAnimationMixin</li> <li>EventLoop</li> <li>ConcatenateTablesProxyModel</li> <li>ItemSelectionRange</li> <li>FileDeviceMixin</li> <li>RegularExpressionMatch</li> <li>AbstractAnimationMixin</li> <li>Runnable</li> <li>DeadlineTimer</li> <li>ElapsedTimer</li> <li>LineF</li> <li>XmlStreamReader</li> <li>LockFile</li> <li>ItemSelectionModel</li> <li>VariantAnimation</li> <li>MetaType</li> <li>Line</li> <li>DirIterator</li> <li>FileDevice</li> <li>PropertyAnimation</li> <li>ObjectMixin</li> <li>CryptographicHash</li> <li>StringListModelMixin</li> <li>CommandLineOption</li> <li>MimeType</li> <li>DataStream</li> <li>ItemSelection</li> <li>PauseAnimation</li> <li>Semaphore</li> <li>Collator</li> <li>IdentityProxyModel</li> <li>SaveFile</li> <li>Size</li> <li>AbstractItemModelMixin</li> <li>ByteArrayMatcher</li> <li>Object</li> <li>MetaObject</li> <li>CollatorSortKey</li> <li>Calendar</li> <li>TextBoundaryFinder</li> <li>AnimationGroupMixin</li> <li>Mutex</li> <li>StandardPaths</li> <li>AbstractItemModel</li> <li>Buffer</li> <li>FileInfo</li> <li>LoggingCategory</li> <li>Thread</li> <li>Url</li> <li>SocketNotifier</li> <li>Margins</li> <li>ModelRoleData</li> <li>JsonDocument</li> <li>CoreApplicationMixin</li> <li>ThreadPool</li> <li>Settings</li> <li>AnimationGroup</li> <li>UuidMixin</li> <li>Date</li> <li>CommandLineParser</li> <li>AbstractProxyModelMixin</li> <li>Process</li> <li>Translator</li> <li>MimeData</li> <li>OperatingSystemVersion</li> <li>SharedMemory</li> <li>BasicTimer</li> <li>AbstractTableModelMixin</li> <li>FileSelector</li> <li>TemporaryDir</li> <li>CoreApplication</li> <li>MimeDatabase</li> <li>ParallelAnimationGroup</li> <li>MetaEnum</li> <li>SignalBlocker</li> <li>AbstractListModel</li> <li>AbstractListModelMixin</li> <li>FileSystemWatcher</li> <li>StorageInfo</li> <li>SequentialAnimationGroup</li> <li>TimeLine</li> <li>SignalMapper</li> <li>Library</li> <li>VersionNumber</li> <li>Uuid</li> <li>RandomGenerator</li> <li>Property</li> <li>TransposeProxyModel</li> <li>StringListModel</li> <li>Time</li> <li>FileMixin</li> <li>RegularExpressionMatchIterator</li> <li>Timer</li> <li>UrlQuery</li> <li>Locale</li> <li>TimeZone</li> <li>MarginsF</li> <li>JsonValue</li> <li>RegularExpression</li> <li>LibraryInfo</li> </ul>"},{"location":"qt_modules/core/SaveFile.html","title":"SaveFile","text":"<p>Qt Base Class: QSaveFile</p> <p>Signature: <code>QSaveFile(self, name: str) -&gt; None QSaveFile(self, name: str, parent: PySide6.QtCore.QObject) -&gt; None QSaveFile(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/SaveFile.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.FileDeviceMixin</code>, <code>core.QSaveFile</code></p> <p>Interface for safely writing to files.</p> Source code in <code>prettyqt\\core\\savefile.py</code> <pre><code>class SaveFile(core.FileDeviceMixin, core.QSaveFile):\n\"\"\"Interface for safely writing to files.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/SaveFile.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255101072[\"core.SaveFile\"]\n  2103255099152[\"core.FileDeviceMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254750976[\"QtCore.QSaveFile\"]\n  2103254741376[\"QtCore.QFileDevice\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255099152 --&gt; 2103255101072\n  2103255106832 --&gt; 2103255099152\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254750976 --&gt; 2103255101072\n  2103254741376 --&gt; 2103254750976\n  2103254728896 --&gt; 2103254741376\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/SaveFile.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/Semaphore.html","title":"Semaphore","text":"<p>Qt Base Class: QSemaphore</p> <p>Signature: <code>QSemaphore(self, n: int = 0) -&gt; None</code></p>"},{"location":"qt_modules/core/Semaphore.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QSemaphore</code></p> <p>General counting semaphore.</p> Source code in <code>prettyqt\\core\\semaphore.py</code> <pre><code>class Semaphore(QtCore.QSemaphore):\n\"\"\"General counting semaphore.\"\"\"\n@contextlib.contextmanager\ndef acquire_resources(self, n: int = 1) -&gt; Generator[bool, None, None]:\nyield self.tryAcquire(n)\nself.release(n)\n</code></pre>"},{"location":"qt_modules/core/Semaphore.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255043472[\"core.Semaphore\"]\n  2103257860880[\"QtCore.QSemaphore\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257860880 --&gt; 2103255043472\n  2103206874128 --&gt; 2103257860880\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SequentialAnimationGroup.html","title":"SequentialAnimationGroup","text":"<p>Qt Base Class: QSequentialAnimationGroup</p> <p>Signature: <code>QSequentialAnimationGroup(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/SequentialAnimationGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AnimationGroupMixin</code>, <code>core.QSequentialAnimationGroup</code></p> <p>Sequential group of animations.</p> Source code in <code>prettyqt\\core\\sequentialanimationgroup.py</code> <pre><code>class SequentialAnimationGroup(core.AnimationGroupMixin, core.QSequentialAnimationGroup):\n\"\"\"Sequential group of animations.\"\"\"\ndef reverse(self):\n\"\"\"Reverse animation in-place by switching start and end values.\"\"\"\nfor anim in reversed(list(self)):\nold_start = anim.startValue()\nold_end = anim.endValue()\nanim.setStartValue(old_end)\nanim.setEndValue(old_start)\ndef reversed(self) -&gt; SequentialAnimationGroup:\n\"\"\"Return a reversed copy of the animation.\"\"\"\nnew = core.MetaObject(self.metaObject()).copy(self)\nfor anim in reversed(list(self)):\nanimation = core.MetaObject(anim.get_metaobject()).copy(anim)\nanimation = animation.reversed()\nnew.addAnimation(animation)\nreturn new\ndef append_reversed(self) -&gt; core.SequentialAnimationGroup:\n\"\"\"Return copy of animation with appended reverse animation.\"\"\"\nrevers = self.reversed()\nanimation = core.SequentialAnimationGroup()\nanimation.addAnimation(self)\nanimation.addAnimation(revers)\nreturn animation\n</code></pre>"},{"location":"qt_modules/core/SequentialAnimationGroup.html#prettyqt.core.sequentialanimationgroup.SequentialAnimationGroup.append_reversed","title":"<code>append_reversed() -&gt; core.SequentialAnimationGroup</code>","text":"<p>Return copy of animation with appended reverse animation.</p> Source code in <code>prettyqt\\core\\sequentialanimationgroup.py</code> <pre><code>def append_reversed(self) -&gt; core.SequentialAnimationGroup:\n\"\"\"Return copy of animation with appended reverse animation.\"\"\"\nrevers = self.reversed()\nanimation = core.SequentialAnimationGroup()\nanimation.addAnimation(self)\nanimation.addAnimation(revers)\nreturn animation\n</code></pre>"},{"location":"qt_modules/core/SequentialAnimationGroup.html#prettyqt.core.sequentialanimationgroup.SequentialAnimationGroup.reverse","title":"<code>reverse()</code>","text":"<p>Reverse animation in-place by switching start and end values.</p> Source code in <code>prettyqt\\core\\sequentialanimationgroup.py</code> <pre><code>def reverse(self):\n\"\"\"Reverse animation in-place by switching start and end values.\"\"\"\nfor anim in reversed(list(self)):\nold_start = anim.startValue()\nold_end = anim.endValue()\nanim.setStartValue(old_end)\nanim.setEndValue(old_start)\n</code></pre>"},{"location":"qt_modules/core/SequentialAnimationGroup.html#prettyqt.core.sequentialanimationgroup.SequentialAnimationGroup.reversed","title":"<code>reversed() -&gt; SequentialAnimationGroup</code>","text":"<p>Return a reversed copy of the animation.</p> Source code in <code>prettyqt\\core\\sequentialanimationgroup.py</code> <pre><code>def reversed(self) -&gt; SequentialAnimationGroup:\n\"\"\"Return a reversed copy of the animation.\"\"\"\nnew = core.MetaObject(self.metaObject()).copy(self)\nfor anim in reversed(list(self)):\nanimation = core.MetaObject(anim.get_metaobject()).copy(anim)\nanimation = animation.reversed()\nnew.addAnimation(animation)\nreturn new\n</code></pre>"},{"location":"qt_modules/core/SequentialAnimationGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255087632[\"core.SequentialAnimationGroup\"]\n  2103255077072[\"core.AnimationGroupMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254634816[\"QtCore.QSequentialAnimationGroup\"]\n  2103254633856[\"QtCore.QAnimationGroup\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255077072 --&gt; 2103255087632\n  2103255082832 --&gt; 2103255077072\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254634816 --&gt; 2103255087632\n  2103254633856 --&gt; 2103254634816\n  2103254626176 --&gt; 2103254633856\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SequentialAnimationGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>currentAnimation</code> QAbstractAnimation"},{"location":"qt_modules/core/Settings.html","title":"Settings","text":"<p>Qt Base Class: QSettings</p> <p>Signature: <code>QSettings(self, fileName: str, format: PySide6.QtCore.QSettings.Format, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSettings(self, format: PySide6.QtCore.QSettings.Format, scope: PySide6.QtCore.QSettings.Scope, organization: str, application: str = '', parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSettings(self, organization: str, application: str = '', parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSettings(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSettings(self, scope: PySide6.QtCore.QSettings.Scope, organization: str, application: str = '', parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSettings(self, scope: PySide6.QtCore.QSettings.Scope, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Settings.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>Settings_</code></p> <p>Settings class which wraps everything into a dict to preserve data types.</p> Source code in <code>prettyqt\\core\\settings.py</code> <pre><code>class Settings(Settings_):\n\"\"\"Settings class which wraps everything into a dict to preserve data types.\"\"\"\ndef set_value(self, key: str, value):\nmatch value:\ncase Settings_():\nsetting = dict(value=dict(value), typ=\"subsetting\")\ncase _:\nsetting = dict(value=value, typ=\"regular\")\nsuper().set_value(key, setting)\ndef get_value(self, key: str, default=None):\nif not self.contains(key):\nreturn default\nval = self.value(key)\n# TODO: convert settings dicts back?\nmatch val:\ncase {\"value\": setting}:\nreturn setting\ncase _:\n# this is for migration\nself.set_value(key, val)\nreturn val\n</code></pre>"},{"location":"qt_modules/core/Settings.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254381648[\"core.Settings\"]\n  2103254395088[\"core.Settings_\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254664576[\"QtCore.QSettings\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103254395088 --&gt; 2103254381648\n  2103255067472 --&gt; 2103254395088\n  140736120080256 --&gt; 2103255067472\n  2103254664576 --&gt; 2103254395088\n  2103254677056 --&gt; 2103254664576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103189029904 --&gt; 2103254395088\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/core/Settings.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/SharedMemory.html","title":"SharedMemory","text":"<p>Qt Base Class: QSharedMemory</p> <p>Signature: <code>QSharedMemory(self, key: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSharedMemory(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/SharedMemory.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QSharedMemory</code></p> <p>Access to a shared memory segment.</p> Source code in <code>prettyqt\\core\\sharedmemory.py</code> <pre><code>class SharedMemory(core.ObjectMixin, core.QSharedMemory):\n\"\"\"Access to a shared memory segment.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.key())\ndef __reduce__(self):\nreturn type(self), (self.key())\ndef get_error(self) -&gt; SharedMemoryErrorStr:\nreturn SHARED_MEMORY_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/core/SharedMemory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255070352[\"core.SharedMemory\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254690496[\"QtCore.QSharedMemory\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255070352\n  140736120080256 --&gt; 2103255067472\n  2103254690496 --&gt; 2103255070352\n  2103254677056 --&gt; 2103254690496\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SharedMemory.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/SignalBlocker.html","title":"SignalBlocker","text":"<p>Qt Base Class: QSignalBlocker</p> <p>Signature: <code>QSignalBlocker(self, o: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/core/SignalBlocker.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QSignalBlocker</code></p> <p>Exception-safe wrapper around QObject.blockSignals().</p> Source code in <code>prettyqt\\core\\signalblocker.py</code> <pre><code>class SignalBlocker(QtCore.QSignalBlocker):\n\"\"\"Exception-safe wrapper around QObject.blockSignals().\"\"\"\n</code></pre>"},{"location":"qt_modules/core/SignalBlocker.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255046352[\"core.SignalBlocker\"]\n  2103257846480[\"QtCore.QSignalBlocker\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257846480 --&gt; 2103255046352\n  2103206874128 --&gt; 2103257846480\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SignalMapper.html","title":"SignalMapper","text":"<p>Qt Base Class: QSignalMapper</p> <p>Signature: <code>QSignalMapper(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/SignalMapper.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QSignalMapper</code></p> <p>Bundles signals from identifiable senders.</p> Source code in <code>prettyqt\\core\\signalmapper.py</code> <pre><code>class SignalMapper(core.ObjectMixin, core.QSignalMapper):\n\"\"\"Bundles signals from identifiable senders.\"\"\"\ndef __getitem__(self, index: int | str | core.QObject) -&gt; core.QObject:\nreturn self.mapping(index)\ndef __delitem__(self, index: core.QObject):\nreturn self.removeMappings(index)\ndef __setitem__(self, index: core.QObject, value: int | str | core.QObject):\nself.setMapping(index, value)\n</code></pre>"},{"location":"qt_modules/core/SignalMapper.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255038672[\"core.SignalMapper\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254688576[\"QtCore.QSignalMapper\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255038672\n  140736120080256 --&gt; 2103255067472\n  2103254688576 --&gt; 2103255038672\n  2103254677056 --&gt; 2103254688576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SignalMapper.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/Size.html","title":"Size","text":"<p>Qt Base Class: QSize</p> <p>Signature: <code>QSize(self) -&gt; None QSize(self, QSize: PySide6.QtCore.QSize) -&gt; None QSize(self, w: int, h: int) -&gt; None</code></p>"},{"location":"qt_modules/core/Size.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QSize</code></p> <p>Defines the size of a two-dimensional object using integer point precision.</p> Source code in <code>prettyqt\\core\\size.py</code> <pre><code>class Size(QtCore.QSize):\n\"\"\"Defines the size of a two-dimensional object using integer point precision.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.width(), self.height())\n@property\ndef _width(self) -&gt; int:\nreturn self.width()\n@property\ndef _height(self) -&gt; int:\nreturn self.height()\n__match_args__ = (\"_width\", \"_height\")\ndef __getitem__(self, index) -&gt; int:\nreturn (self.width(), self.height())[index]\ndef __reduce__(self):\nreturn type(self), (self.width(), self.height())\ndef expanded_to(self, size: datatypes.SizeType) -&gt; Self:\nsize = datatypes.to_size(size)\nreturn type(self)(self.expandedTo(size))\ndef shrunk_by(self, margins: datatypes.MarginsType) -&gt; Self:\nmargins = datatypes.to_margins(margins)\nreturn type(self)(self.shrunkBy(margins))\ndef grown_by(self, margins: datatypes.MarginsType) -&gt; Self:\nmargins = datatypes.to_margins(margins)\nreturn type(self)(self.grownBy(margins))\n</code></pre>"},{"location":"qt_modules/core/Size.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254388368[\"core.Size\"]\n  2103257869520[\"QtCore.QSize\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257869520 --&gt; 2103254388368\n  2103206874128 --&gt; 2103257869520\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SizeF.html","title":"SizeF","text":"<p>Qt Base Class: QSizeF</p> <p>Signature: <code>QSizeF(self) -&gt; None QSizeF(self, QSizeF: Union[PySide6.QtCore.QSizeF, PySide6.QtCore.QSize]) -&gt; None QSizeF(self, sz: PySide6.QtCore.QSize) -&gt; None QSizeF(self, w: float, h: float) -&gt; None</code></p>"},{"location":"qt_modules/core/SizeF.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QSizeF</code></p> <p>Defines the size of a two-dimensional object using floating point precision.</p> Source code in <code>prettyqt\\core\\sizef.py</code> <pre><code>class SizeF(QtCore.QSizeF):\n\"\"\"Defines the size of a two-dimensional object using floating point precision.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.width(), self.height())\n@property\ndef _width(self) -&gt; float:\nreturn self.width()\n@property\ndef _height(self) -&gt; float:\nreturn self.height()\n__match_args__ = (\"_width\", \"_height\")\ndef __getitem__(self, index) -&gt; float:\nreturn (self.width(), self.height())[index]\ndef __reduce__(self):\nreturn type(self), (self.width(), self.height())\ndef expanded_to(self, size: datatypes.SizeFType) -&gt; Self:\nsize = datatypes.to_sizef(size)\nreturn type(self)(self.expandedTo(size))\ndef shrunk_by(self, margins: datatypes.MarginsFType) -&gt; Self:\nmargins = datatypes.to_marginsf(margins)\nreturn type(self)(self.shrunkBy(margins))\ndef grown_by(self, margins: datatypes.MarginsFType) -&gt; Self:\nmargins = datatypes.to_marginsf(margins)\nreturn type(self)(self.grownBy(margins))\n</code></pre>"},{"location":"qt_modules/core/SizeF.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254385488[\"core.SizeF\"]\n  2103257861840[\"QtCore.QSizeF\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257861840 --&gt; 2103254385488\n  2103206874128 --&gt; 2103257861840\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SocketNotifier.html","title":"SocketNotifier","text":"<p>Qt Base Class: QSocketNotifier</p> <p>Signature: <code>QSocketNotifier(self, arg__1: object, arg__2: PySide6.QtCore.QSocketNotifier.Type, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSocketNotifier(self, arg__1: PySide6.QtCore.QSocketNotifier.Type, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSocketNotifier(self, socket: int, arg__2: PySide6.QtCore.QSocketNotifier.Type, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/SocketNotifier.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QSocketNotifier</code></p> <p>Support for monitoring activity on a file descriptor.</p> Source code in <code>prettyqt\\core\\socketnotifier.py</code> <pre><code>class SocketNotifier(core.ObjectMixin, core.QSocketNotifier):\n\"\"\"Support for monitoring activity on a file descriptor.\"\"\"\n# def __repr__(self):\n#     return f\"{type(self).__name__}({self.socket()}, {self.type()})\"\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return socket event type.\n        Returns:\n            socket event type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/core/SocketNotifier.html#prettyqt.core.socketnotifier.SocketNotifier.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return socket event type.</p> Source code in <code>prettyqt\\core\\socketnotifier.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return socket event type.\n    Returns:\n        socket event type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/core/SocketNotifier.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255069392[\"core.SocketNotifier\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254689536[\"QtCore.QSocketNotifier\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255069392\n  140736120080256 --&gt; 2103255067472\n  2103254689536 --&gt; 2103255069392\n  2103254677056 --&gt; 2103254689536\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SocketNotifier.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/SortFilterProxyModel.html","title":"SortFilterProxyModel","text":"<p>Qt Base Class: QSortFilterProxyModel</p> <p>Signature: <code>QSortFilterProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/SortFilterProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractProxyModelMixin</code>, <code>core.QSortFilterProxyModel</code></p> <p>Support for sorting and filtering data passed between another model and a view.</p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>class SortFilterProxyModel(core.AbstractProxyModelMixin, core.QSortFilterProxyModel):\n\"\"\"Support for sorting and filtering data passed between another model and a view.\"\"\"\nFilterMode = core.Enum(FilterMode)\ninvalidated = core.Signal()\nfilter_mode_changed = core.Signal(str)\nID = \"sort_filter\"\nICON = \"mdi.table-filter\"\ndef __init__(self, *args, **kwargs):\nself._filter_mode: FilterModeStr = \"wildcard\"\nsuper().__init__(*args, **kwargs)\n#     self._filter_column = 0\n# def setFilterKeyColumn(self, column: int | list[int] | None):\n#     if column is None:\n#         column = -1\n#     self._filter_column = column\n# def filterKeyColumn(self) -&gt; int | list[int] | None:\n#     return self._filter_column\n# def filterAcceptsRow(self, source_row: int, source_index: core.ModelIndex):\n#     column = self.filterKeyColumn()\n#     col_count = self.sourceModel().columnCount()\n#     indexes = [\n#         self.sourceModel().index(source_row, i, source_index) for i in col_count\n#     ]\n#     labels = [self.sourceModel().data(idx) for idx in indexes]\n#     if isinstance(column, int) and source_index.column() == column:\n#         return super().filterAcceptsRow(source_row, source_index)\ndef filterAcceptsRow(self, source_row: int, source_index: core.ModelIndex) -&gt; bool:\nif self._filter_mode != \"fuzzy\":\nreturn super().filterAcceptsRow(source_row, source_index)\ncolumn = self.filterKeyColumn()\nsource_model = self.sourceModel()\nidx = source_model.index(source_row, column, source_index)\ntext = source_model.data(idx)\nreturn fuzzy.fuzzy_match_simple(\nself.filterRegularExpression().pattern(),\ntext,\ncase_sensitive=self.is_filter_case_sensitive(),\n)\ndef invalidate(self):\nsuper().invalidate()\nself.invalidated.emit()\ndef lessThan(self, left, right) -&gt; bool:\nrole = super().sortRole()\nleft_data = left.data(role)\nright_data = right.data(role)\nif left_data is not None and right_data is not None:\nreturn left_data &lt; right_data\nreturn True\ndef sort(\nself,\ncolumn: int | None,\nascending: bool | constants.SortOrder = constants.ASCENDING,\n):\nif isinstance(ascending, bool):\nascending = constants.ASCENDING if ascending else constants.DESCENDING\nif column is None:\ncolumn = -1\nsuper().sort(column, ascending)\ndef setFilterRegularExpression(self, pattern: datatypes.PatternType):\nif isinstance(pattern, re.Pattern):\npattern = core.RegularExpression(pattern)\nsuper().setFilterRegularExpression(pattern)\ndef setFilterString(self, search_str: str):\npat = \".*?\".join(map(re.escape, search_str))\npat = f\"(?=({pat}))\"\nsuper().setFilterRegularExpression(pat)\ndef setFixedFilterList(self, filter_list: Iterable[str]):\npat = \"|\".join(filter_list)\nsuper().setFilterRegularExpression(pat)\ndef set_filter_case_sensitivity(\nself, sensitivity: constants.CaseSensitivityStr | constants.CaseSensitivity\n):\n\"\"\"Set the filter case sensitivity.\n        Args:\n            sensitivity: filter case sensitivity\n        \"\"\"\nvalue = constants.CASE_SENSITIVITY.get_enum_value(sensitivity)\nsuper().setFilterCaseSensitivity(value)\ndef get_filter_case_sensitivity(self) -&gt; constants.CaseSensitivityStr:\n\"\"\"Return current filter case sensitivity.\n        Returns:\n            filter case sensitivity\n        \"\"\"\nreturn constants.CASE_SENSITIVITY.inverse[super().filterCaseSensitivity()]\ndef set_filter_case_sensitive(self, state: bool):\nif state:\nsensitivity = constants.CaseSensitivity.CaseSensitive\nelse:\nsensitivity = constants.CaseSensitivity.CaseInsensitive\nsuper().setFilterCaseSensitivity(sensitivity)\ndef is_filter_case_sensitive(self) -&gt; bool:\nreturn super().filterCaseSensitivity() == constants.CaseSensitivity.CaseSensitive\ndef set_sort_case_sensitive(self, state: bool):\nif state:\nsensitivity = constants.CaseSensitivity.CaseSensitive\nelse:\nsensitivity = constants.CaseSensitivity.CaseInsensitive\nsuper().setSortCaseSensitivity(sensitivity)\ndef is_sort_case_sensitive(self) -&gt; bool:\nreturn super().sortCaseSensitivity() == constants.CaseSensitivity.CaseSensitive\ndef get_filter_regular_expression(self) -&gt; core.RegularExpression:\nreturn core.RegularExpression(self.filterRegularExpression())\ndef set_sort_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setSortRole(role)\ndef set_filter_role(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setFilterRole(role)\ndef get_sort_order(self) -&gt; Literal[\"ascending\", \"descending\"]:\nreturn \"ascending\" if super().sortOrder() == constants.ASCENDING else \"descending\"\ndef set_filter_key_column(self, column: int | None):\nif column is None:\ncolumn = -1\nsuper().setFilterKeyColumn(column)\ndef set_search_term(self, search_term: str | Iterable[str]):\nmatch self._filter_mode:\ncase \"fixed_string\" if isinstance(search_term, list):\nself.setFixedFilterList(search_term)\ncase \"fixed_string\":\nself.setFilterFixedString(search_term)\ncase \"substring\":\nself.setFilterString(search_term)\ncase \"fuzzy\":\nself.setFilterFixedString(search_term)\ncase \"wildcard\":\nself.setFilterWildcard(search_term)\ncase \"regex\":\nself.setFilterRegularExpression(search_term)\ndef get_filter_mode(self) -&gt; FilterModeStr:\nreturn self._filter_mode\ndef set_filter_mode(self, mode: FilterModeStr):\nself._filter_mode = mode\nself.filter_mode_changed.emit(mode)\nfilterMode = core.Property(\nstr,\nget_filter_mode,\nset_filter_mode,\nnotify=filter_mode_changed,\ndoc=\"Mode to use for filtering\",\n)\n</code></pre> Name Children Inherits FuzzyFilterProxyModelprettyqt.itemmodels.proxies.fuzzyfilterproxymodel <ul><li>SortFilterProxyModel</li></ul> MultiColumnFilterProxyModelprettyqt.itemmodels.proxies.multicolumnfilterproxymodel <ul><li>SortFilterProxyModel</li></ul> SubsetFilterProxyModelprettyqt.itemmodels.proxies.subsetfilterproxymodel <ul><li>SortFilterProxyModel</li></ul> ValueFilterProxyModelprettyqt.itemmodels.proxies.valuefilterproxymodel <ul><li>SortFilterProxyModel</li></ul> RangeFilterProxyModelprettyqt.itemmodels.proxies.rangefilterproxymodel <ul><li>SortFilterProxyModel</li></ul> PredicateFilterProxyModelprettyqt.itemmodels.proxies.predicatefilterproxymodel <ul><li>SortFilterProxyModel</li></ul>"},{"location":"qt_modules/core/SortFilterProxyModel.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.get_filter_case_sensitivity","title":"<code>get_filter_case_sensitivity() -&gt; constants.CaseSensitivityStr</code>","text":"<p>Return current filter case sensitivity.</p> Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def get_filter_case_sensitivity(self) -&gt; constants.CaseSensitivityStr:\n\"\"\"Return current filter case sensitivity.\n    Returns:\n        filter case sensitivity\n    \"\"\"\nreturn constants.CASE_SENSITIVITY.inverse[super().filterCaseSensitivity()]\n</code></pre>"},{"location":"qt_modules/core/SortFilterProxyModel.html#prettyqt.core.sortfilterproxymodel.SortFilterProxyModel.set_filter_case_sensitivity","title":"<code>set_filter_case_sensitivity(sensitivity: constants.CaseSensitivityStr | constants.CaseSensitivity)</code>","text":"<p>Set the filter case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>sensitivity</code> <code>constants.CaseSensitivityStr | constants.CaseSensitivity</code> <p>filter case sensitivity</p> required Source code in <code>prettyqt\\core\\sortfilterproxymodel.py</code> <pre><code>def set_filter_case_sensitivity(\nself, sensitivity: constants.CaseSensitivityStr | constants.CaseSensitivity\n):\n\"\"\"Set the filter case sensitivity.\n    Args:\n        sensitivity: filter case sensitivity\n    \"\"\"\nvalue = constants.CASE_SENSITIVITY.get_enum_value(sensitivity)\nsuper().setFilterCaseSensitivity(value)\n</code></pre>"},{"location":"qt_modules/core/SortFilterProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254426768[\"core.SortFilterProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254621376[\"QtCore.QSortFilterProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254406608 --&gt; 2103254426768\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254621376 --&gt; 2103254426768\n  2103254619456 --&gt; 2103254621376\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/SortFilterProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel <code>filterRegularExpression</code> QRegularExpression <code>filterKeyColumn</code> int <code>dynamicSortFilter</code> bool <code>filterCaseSensitivity</code> Qt::CaseSensitivity <code>sortCaseSensitivity</code> Qt::CaseSensitivity <code>isSortLocaleAware</code> bool <code>sortRole</code> int <code>filterRole</code> int <code>recursiveFilteringEnabled</code> bool <code>autoAcceptChildRows</code> bool <code>filterMode</code> QString Mode to use for filtering"},{"location":"qt_modules/core/StandardPaths.html","title":"StandardPaths","text":"<p>Qt Base Class: QStandardPaths</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/core/StandardPaths.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QStandardPaths</code></p> <p>Methods for accessing standard paths.</p> Source code in <code>prettyqt\\core\\standardpaths.py</code> <pre><code>class StandardPaths(QtCore.QStandardPaths):\n\"\"\"Methods for accessing standard paths.\"\"\"\n@classmethod\ndef get_display_name(cls, location: StandardLocationStr) -&gt; str:\nreturn cls.displayName(STANDARD_LOCATION[location])\n@classmethod\ndef get_writable_location(cls, location: StandardLocationStr) -&gt; pathlib.Path | None:\npath = cls.writableLocation(STANDARD_LOCATION[location])\nreturn pathlib.Path(path) if path else None\n@classmethod\ndef get_standard_locations(cls, location: StandardLocationStr) -&gt; list[pathlib.Path]:\npaths = cls.standardLocations(STANDARD_LOCATION[location])\nreturn [pathlib.Path(p) for p in paths]\n</code></pre>"},{"location":"qt_modules/core/StandardPaths.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254421968[\"core.StandardPaths\"]\n  2103257843600[\"QtCore.QStandardPaths\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257843600 --&gt; 2103254421968\n  2103206874128 --&gt; 2103257843600\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/StorageInfo.html","title":"StorageInfo","text":"<p>Qt Base Class: QStorageInfo</p> <p>Signature: <code>QStorageInfo(self) -&gt; None QStorageInfo(self, dir: Union[PySide6.QtCore.QDir, str]) -&gt; None QStorageInfo(self, other: PySide6.QtCore.QStorageInfo) -&gt; None QStorageInfo(self, path: str) -&gt; None</code></p>"},{"location":"qt_modules/core/StorageInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QStorageInfo</code></p> <p>Provides information about currently mounted storage and drives.</p> Source code in <code>prettyqt\\core\\storageinfo.py</code> <pre><code>class StorageInfo(QtCore.QStorageInfo):\n\"\"\"Provides information about currently mounted storage and drives.\"\"\"\ndef __init__(\nself,\npath: QtCore.QStorageInfo | QtCore.QDir | datatypes.PathType | None = None,\n):\nif path is None:\nsuper().__init__()\nelse:\nif isinstance(path, os.PathLike):\npath = os.fspath(path)\nsuper().__init__(path)\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.rootPath())\ndef get_device(self) -&gt; str:\nreturn self.device().data().decode()\ndef get_file_system_type(self) -&gt; str:\nreturn self.fileSystemType().data().decode()\ndef get_subvolume(self) -&gt; str:\nreturn self.subvolume().data().decode()\ndef get_root_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.rootPath())\n@classmethod\ndef get_root(cls) -&gt; Self:\nreturn cls(cls.root())\n@classmethod\ndef get_mounted_volumes(cls) -&gt; list[Self]:\nreturn [cls(i) for i in cls.mountedVolumes()]\n</code></pre>"},{"location":"qt_modules/core/StorageInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254391248[\"core.StorageInfo\"]\n  2103257810960[\"QtCore.QStorageInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257810960 --&gt; 2103254391248\n  2103206874128 --&gt; 2103257810960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/StringListModel.html","title":"StringListModel","text":"<p>Qt Base Class: QStringListModel</p> <p>Signature: <code>QStringListModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QStringListModel(self, strings: Sequence[str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/StringListModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>StringListModelMixin</code>, <code>core.QStringListModel</code></p> <p>Model that supplies strings to views.</p> Source code in <code>prettyqt\\core\\stringlistmodel.py</code> <pre><code>class StringListModel(StringListModelMixin, core.QStringListModel):\n\"\"\"Model that supplies strings to views.\"\"\"\ndef __repr__(self):\nreturn f\"{type(self).__name__}: ({self.rowCount()})\"\ndef columnCount(self, parent: core.ModelIndex | None = None) -&gt; int:\n# columnCount is private for StringListModel, but we need it\n# to avoid workarounds (for example in our Slice proxies).\n# So lets just return 1.\nreturn 1\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nmatch instance:\ncase (str(), *_):\nreturn True\ncase _:\nreturn False\n</code></pre> Name Children Inherits <code>IconModel</code>prettyqt.custom_widgets.iconbrowser <ul><li>StringListModel</li></ul>"},{"location":"qt_modules/core/StringListModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254408528[\"core.StringListModel\"]\n  2103254428688[\"core.StringListModelMixin\"]\n  2103254407568[\"core.AbstractListModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254623296[\"QtCore.QStringListModel\"]\n  2103254590656[\"QtCore.QAbstractListModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254428688 --&gt; 2103254408528\n  2103254407568 --&gt; 2103254428688\n  2103254372048 --&gt; 2103254407568\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254623296 --&gt; 2103254408528\n  2103254590656 --&gt; 2103254623296\n  2103254592576 --&gt; 2103254590656\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/StringListModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/StringListModelMixin.html","title":"StringListModelMixin","text":""},{"location":"qt_modules/core/StringListModelMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractListModelMixin</code></p> Source code in <code>prettyqt\\core\\stringlistmodel.py</code> <pre><code>class StringListModelMixin(core.AbstractListModelMixin):\npass\n</code></pre> Name Children Inherits StringListModelprettyqt.core.stringlistmodel <ul><li><code>IconModel</code></li></ul> <ul><li>StringListModelMixin</li><li>QStringListModel</li></ul> HelpIndexModelprettyqt.qthelp.helpindexmodel <ul><li>StringListModelMixin</li><li>QHelpIndexModel</li></ul>"},{"location":"qt_modules/core/StringListModelMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254428688[\"core.StringListModelMixin\"]\n  2103254407568[\"core.AbstractListModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254407568 --&gt; 2103254428688\n  2103254372048 --&gt; 2103254407568\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/TemporaryDir.html","title":"TemporaryDir","text":"<p>Qt Base Class: QTemporaryDir</p> <p>Signature: <code>QTemporaryDir(self) -&gt; None QTemporaryDir(self, templateName: str) -&gt; None</code></p>"},{"location":"qt_modules/core/TemporaryDir.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QTemporaryDir</code></p> <p>Creates a unique directory for temporary use.</p> Source code in <code>prettyqt\\core\\temporarydir.py</code> <pre><code>class TemporaryDir(QtCore.QTemporaryDir):\n\"\"\"Creates a unique directory for temporary use.\"\"\"\ndef __getattr__(self, attr: str):\nreturn getattr(self.to_path(), attr)\ndef __repr__(self):\nreturn get_repr(self, self.path())\ndef __str__(self):\nreturn self.path()\ndef __bool__(self):\nreturn self.isValid()\ndef __fspath__(self) -&gt; str:\nreturn self.path()\ndef __truediv__(self, other: datatypes.PathType) -&gt; pathlib.Path:\ncurrent = pathlib.Path(self.path())\nreturn current / os.fspath(other)\n# new = current / other\n# if new.suffix == \"\":\n#     return core.Dir(new)\n# else:\n#     return core.File(new)\ndef to_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.path())\n</code></pre>"},{"location":"qt_modules/core/TemporaryDir.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254398928[\"core.TemporaryDir\"]\n  2103257831120[\"QtCore.QTemporaryDir\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257831120 --&gt; 2103254398928\n  2103206874128 --&gt; 2103257831120\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/TemporaryFile.html","title":"TemporaryFile","text":"<p>Qt Base Class: QTemporaryFile</p> <p>Signature: <code>QTemporaryFile(self) -&gt; None QTemporaryFile(self, parent: PySide6.QtCore.QObject) -&gt; None QTemporaryFile(self, templateName: str) -&gt; None QTemporaryFile(self, templateName: str, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/core/TemporaryFile.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.FileMixin</code>, <code>core.QTemporaryFile</code></p> <p>I/O device that operates on temporary files.</p> Source code in <code>prettyqt\\core\\temporaryfile.py</code> <pre><code>class TemporaryFile(core.FileMixin, core.QTemporaryFile):\n\"\"\"I/O device that operates on temporary files.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/TemporaryFile.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254394128[\"core.TemporaryFile\"]\n  2103255104912[\"core.FileMixin\"]\n  2103255099152[\"core.FileDeviceMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254752896[\"QtCore.QTemporaryFile\"]\n  2103254751936[\"QtCore.QFile\"]\n  2103254741376[\"QtCore.QFileDevice\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255104912 --&gt; 2103254394128\n  2103255099152 --&gt; 2103255104912\n  2103255106832 --&gt; 2103255099152\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103254752896 --&gt; 2103254394128\n  2103254751936 --&gt; 2103254752896\n  2103254741376 --&gt; 2103254751936\n  2103254728896 --&gt; 2103254741376\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/core/TemporaryFile.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/TextBoundaryFinder.html","title":"TextBoundaryFinder","text":"<p>Qt Base Class: QTextBoundaryFinder</p> <p>Signature: <code>QTextBoundaryFinder(self) -&gt; None QTextBoundaryFinder(self, other: PySide6.QtCore.QTextBoundaryFinder) -&gt; None QTextBoundaryFinder(self, type: PySide6.QtCore.QTextBoundaryFinder.BoundaryType, str: str, buffer: Optional[bytes] = None, bufferSize: int = 0) -&gt; None QTextBoundaryFinder(self, type: PySide6.QtCore.QTextBoundaryFinder.BoundaryType, string: str) -&gt; None</code></p>"},{"location":"qt_modules/core/TextBoundaryFinder.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QTextBoundaryFinder</code></p> <p>Way of finding Unicode text boundaries in a string.</p> Source code in <code>prettyqt\\core\\textboundaryfinder.py</code> <pre><code>class TextBoundaryFinder(QtCore.QTextBoundaryFinder):\n\"\"\"Way of finding Unicode text boundaries in a string.\"\"\"\ndef __init__(\nself,\nstring_or_other: str | QtCore.QTextBoundaryFinder = \"\",\nboundary_type: (\nQtCore.QTextBoundaryFinder.BoundaryType | BoundaryTypeStr\n) = \"grapheme\",\n):\nif isinstance(string_or_other, QtCore.QTextBoundaryFinder):\nsuper().__init__(string_or_other)\nelse:\nif isinstance(boundary_type, str):\ntyp = BOUNDARY_TYPES[boundary_type]\nelse:\ntyp = boundary_type\nsuper().__init__(typ, string_or_other)\ndef __repr__(self):\nreturn get_repr(self, self.string())\ndef __reduce__(self):\nreturn type(self), (self.string(), self.type())\ndef __iter__(self):\npos = self.position()\nself.setPosition(0)\np = 0\n# if self.isAtBoundary():\n#     yield 0\nwhile p != -1:\np = self.toNextBoundary()\nif p != -1:\nyield p\nself.setPosition(pos)\ndef get_boundary_type(self) -&gt; BoundaryTypeStr:\nreturn BOUNDARY_TYPES.inverse[self.type()]\ndef get_boundary_reasons(self) -&gt; list[BoundaryReasonStr]:\nreturn BOUNDARY_REASONS.get_list(self.boundaryReasons())\n</code></pre>"},{"location":"qt_modules/core/TextBoundaryFinder.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254380688[\"core.TextBoundaryFinder\"]\n  2103257826320[\"QtCore.QTextBoundaryFinder\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257826320 --&gt; 2103254380688\n  2103206874128 --&gt; 2103257826320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/TextStream.html","title":"TextStream","text":"<p>Qt Base Class: QTextStream</p> <p>Signature: <code>QTextStream(self) -&gt; None QTextStream(self, array: Union[PySide6.QtCore.QByteArray, bytes], openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = Instance(PySide6.QtCore.QIODeviceBase.OpenModeFlag.ReadWrite)) -&gt; None QTextStream(self, device: PySide6.QtCore.QIODevice) -&gt; None</code></p>"},{"location":"qt_modules/core/TextStream.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QTextStream</code></p> <p>Convenient interface for reading and writing text.</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>class TextStream(QtCore.QTextStream):\n\"\"\"Convenient interface for reading and writing text.\"\"\"\ndef set_field_alignment(\nself, alignment: FieldAlignmentStr | QtCore.QTextStream.FieldAlignment\n):\n\"\"\"Set the field alignment.\n        Args:\n            alignment: field alignment\n        \"\"\"\nself.setFieldAlignment(FIELD_ALIGNMENT.get_enum_value(alignment))\ndef get_field_alignment(self) -&gt; FieldAlignmentStr:\n\"\"\"Get current field alignment.\n        Returns:\n            current field alignment\n        \"\"\"\nreturn FIELD_ALIGNMENT.inverse[self.fieldAlignment()]\ndef set_status(self, status: StatusStr | QtCore.QTextStream.Status):\n\"\"\"Set the status.\n        Args:\n            status: status\n        \"\"\"\nself.setStatus(STATUS.get_enum_value(status))\ndef get_status(self) -&gt; StatusStr:\n\"\"\"Get current status.\n        Returns:\n            current status\n        \"\"\"\nreturn STATUS.inverse[self.status()]\ndef set_real_number_notation(\nself, notation: RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation\n):\n\"\"\"Set the real number notation.\n        Args:\n            notation: real number notation\n        \"\"\"\nself.setRealNumberNotation(REAL_NUMBER_NOTATION.get_enum_value(notation))\ndef get_real_number_notation(self) -&gt; RealNumberNotationStr:\n\"\"\"Get current real number notation.\n        Returns:\n            current real number notation\n        \"\"\"\nreturn REAL_NUMBER_NOTATION.inverse[self.realNumberNotation()]\ndef read_lines(self) -&gt; Iterator[str]:\nwhile True:\nif msg := self.readLine():\nyield msg\nelse:\nreturn\ndef get_number_flags(self) -&gt; list[NumberFlagStr]:\nreturn NUMBER_FLAGS.get_list(self.numberFlags())\ndef set_number_flags(self, *flags: NumberFlagStr):\nflag = NUMBER_FLAGS.merge_flags(flags)\nself.setNumberFlags(flag)\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#prettyqt.core.textstream.TextStream.get_field_alignment","title":"<code>get_field_alignment() -&gt; FieldAlignmentStr</code>","text":"<p>Get current field alignment.</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_field_alignment(self) -&gt; FieldAlignmentStr:\n\"\"\"Get current field alignment.\n    Returns:\n        current field alignment\n    \"\"\"\nreturn FIELD_ALIGNMENT.inverse[self.fieldAlignment()]\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#prettyqt.core.textstream.TextStream.get_real_number_notation","title":"<code>get_real_number_notation() -&gt; RealNumberNotationStr</code>","text":"<p>Get current real number notation.</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_real_number_notation(self) -&gt; RealNumberNotationStr:\n\"\"\"Get current real number notation.\n    Returns:\n        current real number notation\n    \"\"\"\nreturn REAL_NUMBER_NOTATION.inverse[self.realNumberNotation()]\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#prettyqt.core.textstream.TextStream.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Get current status.</p> Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Get current status.\n    Returns:\n        current status\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#prettyqt.core.textstream.TextStream.set_field_alignment","title":"<code>set_field_alignment(alignment: FieldAlignmentStr | QtCore.QTextStream.FieldAlignment)</code>","text":"<p>Set the field alignment.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>FieldAlignmentStr | QtCore.QTextStream.FieldAlignment</code> <p>field alignment</p> required Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_field_alignment(\nself, alignment: FieldAlignmentStr | QtCore.QTextStream.FieldAlignment\n):\n\"\"\"Set the field alignment.\n    Args:\n        alignment: field alignment\n    \"\"\"\nself.setFieldAlignment(FIELD_ALIGNMENT.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#prettyqt.core.textstream.TextStream.set_real_number_notation","title":"<code>set_real_number_notation(notation: RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation)</code>","text":"<p>Set the real number notation.</p> <p>Parameters:</p> Name Type Description Default <code>notation</code> <code>RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation</code> <p>real number notation</p> required Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_real_number_notation(\nself, notation: RealNumberNotationStr | QtCore.QTextStream.RealNumberNotation\n):\n\"\"\"Set the real number notation.\n    Args:\n        notation: real number notation\n    \"\"\"\nself.setRealNumberNotation(REAL_NUMBER_NOTATION.get_enum_value(notation))\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#prettyqt.core.textstream.TextStream.set_status","title":"<code>set_status(status: StatusStr | QtCore.QTextStream.Status)</code>","text":"<p>Set the status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>StatusStr | QtCore.QTextStream.Status</code> <p>status</p> required Source code in <code>prettyqt\\core\\textstream.py</code> <pre><code>def set_status(self, status: StatusStr | QtCore.QTextStream.Status):\n\"\"\"Set the status.\n    Args:\n        status: status\n    \"\"\"\nself.setStatus(STATUS.get_enum_value(status))\n</code></pre>"},{"location":"qt_modules/core/TextStream.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255073232[\"core.TextStream\"]\n  2103254647296[\"QtCore.QTextStream\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254647296 --&gt; 2103255073232\n  2103254651136 --&gt; 2103254647296\n  2103206874128 --&gt; 2103254651136\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Thread.html","title":"Thread","text":"<p>Qt Base Class: QThread</p> <p>Signature: <code>QThread(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Thread.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QThread</code></p> <p>Platform-independent way to manage threads.</p> Source code in <code>prettyqt\\core\\thread.py</code> <pre><code>class Thread(QtCore.QThread):\n\"\"\"Platform-independent way to manage threads.\"\"\"\ndef get_priority(self) -&gt; PriorityStr:\nreturn PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"qt_modules/core/Thread.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254373008[\"core.Thread\"]\n  2103254787456[\"QtCore.QThread\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254787456 --&gt; 2103254373008\n  2103254677056 --&gt; 2103254787456\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Thread.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/ThreadPool.html","title":"ThreadPool","text":"<p>Qt Base Class: QThreadPool</p> <p>Signature: <code>QThreadPool(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/ThreadPool.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QThreadPool</code></p> <p>Manages a collection of QThreads.</p> <p>Note: signals only work correctly when exclusively using start_worker method.</p> Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>class ThreadPool(core.ObjectMixin, core.QThreadPool):\n\"\"\"Manages a collection of QThreads.\n    Note: signals only work correctly when exclusively using start_worker method.\n    \"\"\"\n__instance: Self | None = None  # a global instance\njob_num_updated = core.Signal(int)\nerror_occured = core.Signal(Exception)\nbusy_state_changed = core.Signal(bool)\ndef __contains__(self, other: core.QThread):\nreturn self.contains(other)\ndef get_thread_priority(self) -&gt; core.thread.PriorityStr:\nreturn core.thread.PRIORITY.inverse[self.threadPriority()]\ndef set_thread_priority(self, priority: core.thread.PriorityStr):\nprio = core.thread.PRIORITY[priority]\nself.setThreadPriority(prio)\n@classmethod\ndef instance(cls) -&gt; Self:\n\"\"\"Return global ThreadPool singleton. (globalInstance always returns Qt type).\"\"\"\nif cls.__instance is None:\ncls.__instance = cls()\nreturn cls.__instance\ndef start_worker(\nself,\nfn_or_worker: Callable | Worker,\nargs: tuple | None = None,\nkwargs: dict | None = None,\npriority: int = 0,\nresult_fn: Callable | None = None,\nfinished_fn: Callable | None = None,\nprogress_fn: Callable | None = None,\nerror_fn: Callable | None = None,\n):\nif isinstance(fn_or_worker, Callable):\nif args is None:\nargs = ()\nif kwargs is None:\nkwargs = {}\nrunnable = Worker(fn_or_worker, *args, **kwargs)\nelse:\nrunnable = fn_or_worker\nrunnable.signals.finished.connect(self._on_job_ended)\nrunnable.signals.error.connect(self._on_job_ended)\nrunnable.signals.error.connect(self._on_exception)\nif result_fn:\nrunnable.signals.result.connect(result_fn)\nif finished_fn:\nrunnable.signals.finished.connect(finished_fn)\nif progress_fn:\nrunnable.signals.progress.connect(progress_fn)\nif error_fn:\nrunnable.signals.error.connect(error_fn)\nthread_count = self.activeThreadCount()\nif thread_count == 0:\nself.busy_state_changed.emit(True)\nself.job_num_updated.emit(thread_count + 1)  # + 1 because we didnt start yet.\nsuper().start(runnable, priority)\ndef _on_job_ended(self):\nthread_count = self.activeThreadCount()\nif thread_count == 1:  # this is the last job\nself.busy_state_changed.emit(False)\nself.job_num_updated.emit(thread_count - 1)  # -1 because we didnt really end yet.\ndef _on_exception(self, exception):\nself.error_occured.emit(exception)\n</code></pre>"},{"location":"qt_modules/core/ThreadPool.html#prettyqt.core.threadpool.ThreadPool.instance","title":"<code>instance() -&gt; Self</code>  <code>classmethod</code>","text":"<p>Return global ThreadPool singleton. (globalInstance always returns Qt type).</p> Source code in <code>prettyqt\\core\\threadpool.py</code> <pre><code>@classmethod\ndef instance(cls) -&gt; Self:\n\"\"\"Return global ThreadPool singleton. (globalInstance always returns Qt type).\"\"\"\nif cls.__instance is None:\ncls.__instance = cls()\nreturn cls.__instance\n</code></pre>"},{"location":"qt_modules/core/ThreadPool.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254397968[\"core.ThreadPool\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254694336[\"QtCore.QThreadPool\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103254397968\n  140736120080256 --&gt; 2103255067472\n  2103254694336 --&gt; 2103254397968\n  2103254677056 --&gt; 2103254694336\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/ThreadPool.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>expiryTimeout</code> int <code>maxThreadCount</code> int <code>activeThreadCount</code> int <code>stackSize</code> uint <code>threadPriority</code> QThread::Priority"},{"location":"qt_modules/core/Time.html","title":"Time","text":"<p>Qt Base Class: QTime</p> <p>Signature: <code>QTime(self) -&gt; None QTime(self, QTime: PySide6.QtCore.QTime) -&gt; None QTime(self, h: int, m: int, s: int = 0, ms: int = 0) -&gt; None</code></p>"},{"location":"qt_modules/core/Time.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QTime</code></p> <p>Clock time functions.</p> Source code in <code>prettyqt\\core\\_time.py</code> <pre><code>class Time(core.QTime):\n\"\"\"Clock time functions.\"\"\"\ndef __repr__(self):\ntemplate = super().__repr__().split(\"(\")[1]  # type: ignore\nreturn f\"{type(self).__name__}({template}\"\ndef __str__(self):\nreturn self.toString()\ndef __reduce__(self):\nreturn type(self), (self.hour(), self.minute(), self.second(), self.msec())\ndef __format__(self, format_spec: str):\nreturn self.toString(format_spec)\n@property\ndef _hour(self) -&gt; int:\nreturn self.hour()\n@property\ndef _minute(self) -&gt; int:\nreturn self.minute()\n@property\ndef _second(self) -&gt; int:\nreturn self.second()\n@property\ndef _msec(self) -&gt; int:\nreturn self.msec()\n__match_args__ = (\"_hour\", \"_minute\", \"_second\", \"_msec\")\ndef add_msecs(self, msecs: int) -&gt; Self:\nreturn type(self)(self.addMSecs(msecs))\ndef add_secs(self, secs: int) -&gt; Self:\nreturn type(self)(self.addSecs(secs))\n@classmethod\ndef get_current_time(cls) -&gt; Self:\nreturn cls(cls.currentTime())\n@classmethod\ndef from_string(cls, *args, **kwargs) -&gt; Self:\nreturn cls(cls.fromString(*args, **kwargs))\n</code></pre>"},{"location":"qt_modules/core/Time.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254998352[\"core.Time\"]\n  2103257825360[\"QtCore.QTime\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257825360 --&gt; 2103254998352\n  2103206874128 --&gt; 2103257825360\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/TimeLine.html","title":"TimeLine","text":"<p>Qt Base Class: QTimeLine</p> <p>Signature: <code>QTimeLine(self, duration: int = 1000, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/TimeLine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QTimeLine</code></p> <p>Timeline for controlling animations.</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>class TimeLine(core.ObjectMixin, core.QTimeLine):\n\"\"\"Timeline for controlling animations.\"\"\"\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"direction\": DIRECTION}\nreturn maps\ndef set_direction(self, direction: DirectionStr | core.QTimeLine.Direction):\n\"\"\"Set the direction.\n        Args:\n            direction: direction\n        \"\"\"\nself.setDirection(DIRECTION.get_enum_value(direction))\ndef get_direction(self) -&gt; DirectionStr:\n\"\"\"Return current direction.\n        Returns:\n            direction\n        \"\"\"\nreturn DIRECTION.inverse[self.direction()]\ndef get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n        Returns:\n            state\n        \"\"\"\nreturn STATE.inverse[self.state()]\ndef set_easing(\nself,\neasing_type: core.easingcurve.TypeStr\n| core.QEasingCurve.Type\n| Callable[[float], float],\n) -&gt; core.EasingCurve:\ncurve = core.EasingCurve()\nif callable(easing_type):\ncurve.set_custom_type(easing_type)\nelse:\ncurve.set_type(easing_type)\nself.setEasingCurve(curve)\nreturn curve\ndef get_easing(self) -&gt; core.easingcurve.TypeStr | Callable[[float], float]:\ncurve = core.EasingCurve(self.easingCurve())\ntyp = curve.get_type()\nreturn curve.get_custom_type() if typ == \"custom\" else typ\n</code></pre>"},{"location":"qt_modules/core/TimeLine.html#prettyqt.core.timeline.TimeLine.get_direction","title":"<code>get_direction() -&gt; DirectionStr</code>","text":"<p>Return current direction.</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_direction(self) -&gt; DirectionStr:\n\"\"\"Return current direction.\n    Returns:\n        direction\n    \"\"\"\nreturn DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"qt_modules/core/TimeLine.html#prettyqt.core.timeline.TimeLine.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"qt_modules/core/TimeLine.html#prettyqt.core.timeline.TimeLine.set_direction","title":"<code>set_direction(direction: DirectionStr | core.QTimeLine.Direction)</code>","text":"<p>Set the direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>DirectionStr | core.QTimeLine.Direction</code> <p>direction</p> required Source code in <code>prettyqt\\core\\timeline.py</code> <pre><code>def set_direction(self, direction: DirectionStr | core.QTimeLine.Direction):\n\"\"\"Set the direction.\n    Args:\n        direction: direction\n    \"\"\"\nself.setDirection(DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"qt_modules/core/TimeLine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255071312[\"core.TimeLine\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254681856[\"QtCore.QTimeLine\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103255071312\n  140736120080256 --&gt; 2103255067472\n  2103254681856 --&gt; 2103255071312\n  2103254677056 --&gt; 2103254681856\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/TimeLine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>duration</code> int <code>updateInterval</code> int <code>currentTime</code> int <code>direction</code> QTimeLine::Direction <code>loopCount</code> int <code>easingCurve</code> QEasingCurve"},{"location":"qt_modules/core/TimeZone.html","title":"TimeZone","text":"<p>Qt Base Class: QTimeZone</p> <p>Signature: <code>QTimeZone(self) -&gt; None QTimeZone(self, ianaId: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None QTimeZone(self, offsetSeconds: int) -&gt; None QTimeZone(self, other: Union[PySide6.QtCore.QTimeZone, PySide6.QtCore.QTimeZone.Initialization]) -&gt; None QTimeZone(self, spec: PySide6.QtCore.QTimeZone.Initialization) -&gt; None QTimeZone(self, zoneId: Union[PySide6.QtCore.QByteArray, bytes], offsetSeconds: int, name: str, abbreviation: str, territory: PySide6.QtCore.QLocale.Country = Instance(QLocale.AnyTerritory), comment: str = '') -&gt; None</code></p>"},{"location":"qt_modules/core/TimeZone.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.QTimeZone</code></p> <p>Identifies how a time representation relates to UTC.</p> Source code in <code>prettyqt\\core\\timezone.py</code> <pre><code>class TimeZone(core.QTimeZone):\n\"\"\"Identifies how a time representation relates to UTC.\"\"\"\ndef __init__(self, *args):\nmatch args:\ncase (str() as string, *rest):\nsuper().__init__(core.QByteArray(string.encode()), *rest)\ncase _:\nsuper().__init__(*args)\ndef __repr__(self):\nreturn get_repr(self, self.get_id())\ndef __str__(self):\nreturn self.get_id()\ndef __reduce__(self):\nreturn type(self), (self.get_id(),)\ndef get_id(self) -&gt; str:\nreturn self.id().data().decode()\ndef get_display_name(\nself,\ndate_time: datatypes.DateTimeType | TimeTypeStr,\nname_type: NameTypeStr | core.QTimeZone.NameType = \"default\",\nlocale: core.QLocale | None = None,\n) -&gt; str:\nif date_time in list(TIME_TYPE) + list(TIME_TYPE.inverse):  # needs rework\ndt = TIME_TYPE.get_enum_value(date_time)\nelse:\ndt = datatypes.to_datetime(date_time)\nreturn self.displayName(\ndt,\nNAME_TYPE.get_enum_value(name_type),\nlocale or core.QLocale(),\n)\ndef get_time_spec(self) -&gt; constants.TimeSpecStr:\nreturn constants.TIME_SPEC.inverse[self.timeSpec()]\n</code></pre>"},{"location":"qt_modules/core/TimeZone.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255055952[\"core.TimeZone\"]\n  2103257950160[\"QtCore.QTimeZone\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257950160 --&gt; 2103255055952\n  2103206874128 --&gt; 2103257950160\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Timer.html","title":"Timer","text":"<p>Qt Base Class: QTimer</p> <p>Signature: <code>QTimer(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Timer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>core.QTimer</code></p> <p>Repetitive and single-shot timers.</p> Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>class Timer(core.ObjectMixin, core.QTimer):\n\"\"\"Repetitive and single-shot timers.\"\"\"\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"timerType\": constants.TIMER_TYPE}\nreturn maps\ndef set_type(self, typ: constants.TimerTypeStr | constants.TimerType):\n\"\"\"Set the timer type.\n        Args:\n            typ: timer type\n        \"\"\"\nself.setTimerType(constants.TIMER_TYPE.get_enum_value(typ))\ndef get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n        Returns:\n            timer type\n        \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\ndef set_interval(self, interval: int | str):\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nself.setInterval(interval)\ndef start_timer(self, interval: None | int | str = None):\nif isinstance(interval, str):\ninterval = helpers.parse_time(interval)\nif interval is None:\nself.start()\nelse:\nself.start(interval)\ndef restart(self):\nself.stop()\nself.start()\n</code></pre> Name Children Inherits <code>AnimationTimer</code>prettyqt.animations.fx <ul><li>Timer</li></ul>"},{"location":"qt_modules/core/Timer.html#prettyqt.core.timer.Timer.get_type","title":"<code>get_type() -&gt; constants.TimerTypeStr</code>","text":"<p>Return current timer type.</p> Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def get_type(self) -&gt; constants.TimerTypeStr:\n\"\"\"Return current timer type.\n    Returns:\n        timer type\n    \"\"\"\nreturn constants.TIMER_TYPE.inverse[self.timerType()]\n</code></pre>"},{"location":"qt_modules/core/Timer.html#prettyqt.core.timer.Timer.set_type","title":"<code>set_type(typ: constants.TimerTypeStr | constants.TimerType)</code>","text":"<p>Set the timer type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>constants.TimerTypeStr | constants.TimerType</code> <p>timer type</p> required Source code in <code>prettyqt\\core\\timer.py</code> <pre><code>def set_type(self, typ: constants.TimerTypeStr | constants.TimerType):\n\"\"\"Set the timer type.\n    Args:\n        typ: timer type\n    \"\"\"\nself.setTimerType(constants.TIMER_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/core/Timer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254375888[\"core.Timer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254680896[\"QtCore.QTimer\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103254375888\n  140736120080256 --&gt; 2103255067472\n  2103254680896 --&gt; 2103254375888\n  2103254677056 --&gt; 2103254680896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Timer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>singleShot</code> bool <code>interval</code> int <code>remainingTime</code> int <code>timerType</code> Qt::TimerType <code>active</code> bool"},{"location":"qt_modules/core/Translator.html","title":"Translator","text":"<p>Qt Base Class: QTranslator</p> <p>Signature: <code>QTranslator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/Translator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TranslatorMixin</code>, <code>core.QTranslator</code></p> <p>Internationalization support for text output.</p> Source code in <code>prettyqt\\core\\translator.py</code> <pre><code>class Translator(TranslatorMixin, core.QTranslator):\n\"\"\"Internationalization support for text output.\"\"\"\n</code></pre>"},{"location":"qt_modules/core/Translator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255102992[\"core.Translator\"]\n  2103255109712[\"core.TranslatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254685696[\"QtCore.QTranslator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255109712 --&gt; 2103255102992\n  2103255067472 --&gt; 2103255109712\n  140736120080256 --&gt; 2103255067472\n  2103254685696 --&gt; 2103255102992\n  2103254677056 --&gt; 2103254685696\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/Translator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/core/TransposeProxyModel.html","title":"TransposeProxyModel","text":"<p>Qt Base Class: QTransposeProxyModel</p> <p>Signature: <code>QTransposeProxyModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/TransposeProxyModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractProxyModelMixin</code>, <code>core.QTransposeProxyModel</code></p> <p>This proxy transposes the source model.</p> Source code in <code>prettyqt\\core\\transposeproxymodel.py</code> <pre><code>class TransposeProxyModel(core.AbstractProxyModelMixin, core.QTransposeProxyModel):\n\"\"\"This proxy transposes the source model.\"\"\"\nID = \"transpose\"\n</code></pre>"},{"location":"qt_modules/core/TransposeProxyModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254424848[\"core.TransposeProxyModel\"]\n  2103254406608[\"core.AbstractProxyModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254620416[\"QtCore.QTransposeProxyModel\"]\n  2103254619456[\"QtCore.QAbstractProxyModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254406608 --&gt; 2103254424848\n  2103254372048 --&gt; 2103254406608\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103254620416 --&gt; 2103254424848\n  2103254619456 --&gt; 2103254620416\n  2103254592576 --&gt; 2103254619456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/TransposeProxyModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceModel</code> QAbstractItemModel"},{"location":"qt_modules/core/Url.html","title":"Url","text":"<p>Qt Base Class: QUrl</p> <p>Signature: <code>QUrl(self) -&gt; None QUrl(self, copy: Union[PySide6.QtCore.QUrl, str]) -&gt; None QUrl(self, url: str, mode: PySide6.QtCore.QUrl.ParsingMode = Instance(QUrl.ParsingMode.TolerantMode)) -&gt; None</code></p>"},{"location":"qt_modules/core/Url.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtCore.QUrl</code></p> <p>Convenient interface for working with URLs.</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>class Url(serializemixin.SerializeMixin, QtCore.QUrl):\n\"\"\"Convenient interface for working with URLs.\"\"\"\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (os.PathLike(), *rest):\npath = os.fspath(args[0])\nif pathlib.Path(path).exists():\npath = self.fromLocalFile(path)\nsuper().__init__(path, *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\n@property\ndef _toString(self) -&gt; str:\nreturn self.toString()\n__match_args__ = (\"_toString\",)\n# def __str__(self):\n#     return self.absolutePath()\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef serialize_fields(self):\nreturn dict(path=self.toString())\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.serialize_fields()\ndef to_string(self) -&gt; str:\nreturn self.toString()\ndef to_path(self) -&gt; pathlib.Path:\n\"\"\"Get pathlib object from the URL.\n        Returns:\n            Path\n        \"\"\"\nreturn pathlib.Path(str(self))\ndef is_local_file(self) -&gt; bool:\nreturn self.isLocalFile()\n@classmethod\ndef from_user_input(cls, url: str, working_dir: str | None = None) -&gt; Self:\nif working_dir is None:\nworking_dir = \"\"\nreturn cls(cls.fromUserInput(url, working_dir))\n@classmethod\ndef from_local_file(cls, path: datatypes.PathType) -&gt; Self:\nurl = cls.fromLocalFile(os.fspath(path))\nreturn cls(url)\ndef _has_explicit_scheme(self) -&gt; bool:\n\"\"\"Check if a url has an explicit scheme given.\"\"\"\nreturn bool(\nself.isValid()\nand self.scheme()\nand (self.host() or self.path())\nand not self.path().startswith(\":\")\n)\ndef is_special_url(self) -&gt; bool:\n\"\"\"Return True if url is an about:... or other special URL.\"\"\"\nreturn self.scheme() in (\"about\", \"file\") if self.isValid() else False\n</code></pre>"},{"location":"qt_modules/core/Url.html#prettyqt.core.url.Url.is_special_url","title":"<code>is_special_url() -&gt; bool</code>","text":"<p>Return True if url is an about:... or other special URL.</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def is_special_url(self) -&gt; bool:\n\"\"\"Return True if url is an about:... or other special URL.\"\"\"\nreturn self.scheme() in (\"about\", \"file\") if self.isValid() else False\n</code></pre>"},{"location":"qt_modules/core/Url.html#prettyqt.core.url.Url.to_path","title":"<code>to_path() -&gt; pathlib.Path</code>","text":"<p>Get pathlib object from the URL.</p> Source code in <code>prettyqt\\core\\url.py</code> <pre><code>def to_path(self) -&gt; pathlib.Path:\n\"\"\"Get pathlib object from the URL.\n    Returns:\n        Path\n    \"\"\"\nreturn pathlib.Path(str(self))\n</code></pre>"},{"location":"qt_modules/core/Url.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255085712[\"core.Url\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254840256[\"QtCore.QUrl\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103255085712\n  140736120080256 --&gt; 2103255032912\n  2103254840256 --&gt; 2103255085712\n  2103206874128 --&gt; 2103254840256\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/UrlQuery.html","title":"UrlQuery","text":"<p>Qt Base Class: QUrlQuery</p> <p>Signature: <code>QUrlQuery(self) -&gt; None QUrlQuery(self, other: PySide6.QtCore.QUrlQuery) -&gt; None QUrlQuery(self, queryString: str) -&gt; None QUrlQuery(self, url: Union[PySide6.QtCore.QUrl, str]) -&gt; None</code></p>"},{"location":"qt_modules/core/UrlQuery.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QUrlQuery</code>, <code>MutableMapping</code></p> <p>Way to manipulate a key-value pairs in a URL's query.</p> Source code in <code>prettyqt\\core\\urlquery.py</code> <pre><code>class UrlQuery(QtCore.QUrlQuery, MutableMapping, metaclass=datatypes.QABCMeta):\n\"\"\"Way to manipulate a key-value pairs in a URL's query.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __contains__(self, key: str):\nreturn self.hasQueryItem(key)\ndef __add__(self, other: dict) -&gt; Self:\nfor k, v in other.items():\nself.addQueryItem(k, str(v))\nreturn self\ndef __delitem__(self, item: str):\nself.removeQueryItem(item)\ndef __setitem__(self, key, value):\nitems = dict(self.queryItems())\nitems[key] = value\nitems = list(items.items())\nself.setQueryItems(items)\ndef __len__(self):\nreturn len(self.queryItems())\ndef __iter__(self):\nreturn iter(i[0] for i in self.queryItems())\ndef __getitem__(self, key: str):\nif not self.hasQueryItem(key):\nraise KeyError(key)\nreturn self.queryItemValue(key)\ndef serialize(self) -&gt; dict[str, Any]:\nreturn dict(path=self.toString())\n</code></pre>"},{"location":"qt_modules/core/UrlQuery.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255088592[\"core.UrlQuery\"]\n  2103257814800[\"QtCore.QUrlQuery\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103257814800 --&gt; 2103255088592\n  2103206874128 --&gt; 2103257814800\n  140736120080256 --&gt; 2103206874128\n  2103189029904 --&gt; 2103255088592\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/core/Uuid.html","title":"Uuid","text":"<p>Qt Base Class: QUuid</p> <p>Signature: <code>QUuid(self) -&gt; None QUuid(self, l: int, w1: int, w2: int, b1: int, b2: int, b3: int, b4: int, b5: int, b6: int, b7: int, b8: int) -&gt; None QUuid(self, string: str) -&gt; None</code></p>"},{"location":"qt_modules/core/Uuid.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>UuidMixin</code>, <code>QtCore.QUuid</code></p> <p>Stores a Universally Unique Identifier (UUID).</p> Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>class Uuid(UuidMixin, QtCore.QUuid):\n\"\"\"Stores a Universally Unique Identifier (UUID).\"\"\"\n</code></pre>"},{"location":"qt_modules/core/Uuid.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255063632[\"core.Uuid\"]\n  2103255045392[\"core.UuidMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103257805200[\"QtCore.QUuid\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255045392 --&gt; 2103255063632\n  140736120080256 --&gt; 2103255045392\n  2103257805200 --&gt; 2103255063632\n  2103206874128 --&gt; 2103257805200\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/UuidMixin.html","title":"UuidMixin","text":""},{"location":"qt_modules/core/UuidMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>class UuidMixin:\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __bool__(self):\nreturn not self.isNull()\ndef __reduce__(self):\nreturn type(self), (self.toString(),)\ndef __format__(self, format_spec: StringFormatStr):\nreturn self.to_string(format_spec)\ndef get_variant(self) -&gt; VariantStr:\nreturn VARIANTS.inverse[self.variant()]\ndef get_version(self) -&gt; VersionStr:\nreturn VERSION.inverse[self.version()]\n@classmethod\ndef create_uuid(cls) -&gt; Self:\n# workaround for PySide2, not able to clone in ctor\nreturn cls(cls.createUuid().toString())\ndef to_string(\nself, fmt: StringFormatStr | QtCore.QUuid.StringFormat = \"with_braces\"\n) -&gt; str:\n\"\"\"Return string representation of the Uuid.\n        Allowed values are \"with_braces\", \"without_braces\", \"id_128\"\n        Args:\n            fmt: Uuid format to use\n        \"\"\"\nreturn self.toString(STRING_FORMATS.get_enum_value(fmt))\n</code></pre> Name Children Inherits Uuidprettyqt.core.uuid <ul><li>UuidMixin</li><li>QUuid</li></ul> BluetoothUuidprettyqt.bluetooth.bluetoothuuid <ul><li>UuidMixin</li><li>QBluetoothUuid</li></ul>"},{"location":"qt_modules/core/UuidMixin.html#prettyqt.core.uuid.UuidMixin.to_string","title":"<code>to_string(fmt: StringFormatStr | QtCore.QUuid.StringFormat = 'with_braces') -&gt; str</code>","text":"<p>Return string representation of the Uuid.</p> <p>Allowed values are \"with_braces\", \"without_braces\", \"id_128\"</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>StringFormatStr | QtCore.QUuid.StringFormat</code> <p>Uuid format to use</p> <code>'with_braces'</code> Source code in <code>prettyqt\\core\\uuid.py</code> <pre><code>def to_string(\nself, fmt: StringFormatStr | QtCore.QUuid.StringFormat = \"with_braces\"\n) -&gt; str:\n\"\"\"Return string representation of the Uuid.\n    Allowed values are \"with_braces\", \"without_braces\", \"id_128\"\n    Args:\n        fmt: Uuid format to use\n    \"\"\"\nreturn self.toString(STRING_FORMATS.get_enum_value(fmt))\n</code></pre>"},{"location":"qt_modules/core/UuidMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255045392[\"core.UuidMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103255045392</code></pre>"},{"location":"qt_modules/core/VariantAnimation.html","title":"VariantAnimation","text":"<p>Qt Base Class: QVariantAnimation</p> <p>Signature: <code>QVariantAnimation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/core/VariantAnimation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>VariantAnimationMixin</code>, <code>core.QVariantAnimation</code></p> <p>Base class for animations.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>class VariantAnimation(VariantAnimationMixin, core.QVariantAnimation):\n\"\"\"Base class for animations.\"\"\"\n</code></pre> Name Children Inherits CursorMoveAnimationprettyqt.animations.cursormoveanimation <ul><li>VariantAnimation</li></ul>"},{"location":"qt_modules/core/VariantAnimation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255075152[\"core.VariantAnimation\"]\n  2103255074192[\"core.VariantAnimationMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254630976[\"QtCore.QVariantAnimation\"]\n  2103254626176[\"QtCore.QAbstractAnimation\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255074192 --&gt; 2103255075152\n  2103255082832 --&gt; 2103255074192\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472\n  2103254630976 --&gt; 2103255075152\n  2103254626176 --&gt; 2103254630976\n  2103254677056 --&gt; 2103254626176\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/VariantAnimation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> QAbstractAnimation::State <code>loopCount</code> int <code>currentTime</code> int <code>currentLoop</code> int <code>direction</code> QAbstractAnimation::Direction <code>duration</code> int <code>startValue</code> QVariant <code>endValue</code> QVariant <code>currentValue</code> QVariant <code>duration</code> int <code>easingCurve</code> QEasingCurve"},{"location":"qt_modules/core/VariantAnimationMixin.html","title":"VariantAnimationMixin","text":""},{"location":"qt_modules/core/VariantAnimationMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractAnimationMixin</code></p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>class VariantAnimationMixin(core.AbstractAnimationMixin):\ndef __getitem__(self, value: float) -&gt; datatypes.Variant:\nreturn self.keyValueAt(value)\ndef __setitem__(self, key: float, value: datatypes.Variant):\nself.setKeyValueAt(key, value)\ndef __iter__(self) -&gt; Iterator[tuple[float, datatypes.Variant]]:\nreturn iter(self.keyValues())\ndef set_easing(\nself,\neasing_type: core.easingcurve.TypeStr\n| core.QEasingCurve.Type\n| Callable[[float], float],\n):\ncurve = core.EasingCurve()\nif callable(easing_type):\ncurve.set_custom_type(easing_type)\nelse:\ncurve.set_type(easing_type)\nself.setEasingCurve(curve)\ndef get_easing(self) -&gt; core.easingcurve.TypeStr | Callable[[float], float]:\ncurve = core.EasingCurve(self.easingCurve())\ntyp = curve.get_type()\nreturn curve.get_custom_type() if typ == \"custom\" else typ\ndef set_range(self, start, end):\nself.setStartValue(start)\nself.setEndValue(end)\ndef reverse(self):\n\"\"\"True reverse instead of just setting direction.\"\"\"\nself.setKeyValues(list(reversed(self.keyValues())))\ndef reversed(self) -&gt; VariantAnimation:\n\"\"\"Return a reversed copy of the animation.\"\"\"\nnew = self.get_metaobject().copy(self)\nnew.reverse()\nreturn new\ndef append_reversed(self) -&gt; Self:\n\"\"\"Append the reversed animation, effectively doubling the duration.\"\"\"\nself.setDuration(self.duration() * 2)\nfirst_part = [(k / 2, v) for k, v in self.keyValues()]\nsecond_part = [(1 - (k / 2), v) for k, v in self.keyValues()]\nkeys = first_part + list(reversed(second_part))[1:]\nself.setKeyValues(keys)\nreturn self\n</code></pre> Name Children Inherits VariantAnimationprettyqt.core.variantanimation <ul><li>CursorMoveAnimation</li></ul> <ul><li>VariantAnimationMixin</li><li>QVariantAnimation</li></ul> PropertyAnimationprettyqt.core.propertyanimation <ul><li>SlideAnimation</li><li>TextAnimation</li></ul> <ul><li>VariantAnimationMixin</li><li>QPropertyAnimation</li></ul>"},{"location":"qt_modules/core/VariantAnimationMixin.html#prettyqt.core.variantanimation.VariantAnimationMixin.append_reversed","title":"<code>append_reversed() -&gt; Self</code>","text":"<p>Append the reversed animation, effectively doubling the duration.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def append_reversed(self) -&gt; Self:\n\"\"\"Append the reversed animation, effectively doubling the duration.\"\"\"\nself.setDuration(self.duration() * 2)\nfirst_part = [(k / 2, v) for k, v in self.keyValues()]\nsecond_part = [(1 - (k / 2), v) for k, v in self.keyValues()]\nkeys = first_part + list(reversed(second_part))[1:]\nself.setKeyValues(keys)\nreturn self\n</code></pre>"},{"location":"qt_modules/core/VariantAnimationMixin.html#prettyqt.core.variantanimation.VariantAnimationMixin.reverse","title":"<code>reverse()</code>","text":"<p>True reverse instead of just setting direction.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def reverse(self):\n\"\"\"True reverse instead of just setting direction.\"\"\"\nself.setKeyValues(list(reversed(self.keyValues())))\n</code></pre>"},{"location":"qt_modules/core/VariantAnimationMixin.html#prettyqt.core.variantanimation.VariantAnimationMixin.reversed","title":"<code>reversed() -&gt; VariantAnimation</code>","text":"<p>Return a reversed copy of the animation.</p> Source code in <code>prettyqt\\core\\variantanimation.py</code> <pre><code>def reversed(self) -&gt; VariantAnimation:\n\"\"\"Return a reversed copy of the animation.\"\"\"\nnew = self.get_metaobject().copy(self)\nnew.reverse()\nreturn new\n</code></pre>"},{"location":"qt_modules/core/VariantAnimationMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255074192[\"core.VariantAnimationMixin\"]\n  2103255082832[\"core.AbstractAnimationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255082832 --&gt; 2103255074192\n  2103255067472 --&gt; 2103255082832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/core/VersionNumber.html","title":"VersionNumber","text":"<p>Qt Base Class: QVersionNumber</p> <p>Signature: <code>QVersionNumber(self) -&gt; None QVersionNumber(self, maj: int) -&gt; None QVersionNumber(self, maj: int, min: int) -&gt; None QVersionNumber(self, maj: int, min: int, mic: int) -&gt; None QVersionNumber(self, seg: Sequence[int]) -&gt; None</code></p>"},{"location":"qt_modules/core/VersionNumber.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QVersionNumber</code></p> <p>Contains a version number with an arbitrary number of segments.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>class VersionNumber(QtCore.QVersionNumber):\n\"\"\"Contains a version number with an arbitrary number of segments.\"\"\"\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),):\nargs = [int(i) for i in args[0].split(\".\")][:3]\ncase (tuple(),):\nargs = args[0]\n# PySide6 Workaround:\ncase (QtCore.QVersionNumber(),):\nargs = (\nargs[0].majorVersion(),\nargs[0].minorVersion(),\nargs[0].microVersion(),\n)\nsuper().__init__(*args, **kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.major(), self.minor(), self.micro())\n@property\ndef _majorVersion(self) -&gt; int:\nreturn self.majorVersion()\n@property\ndef _minorVersion(self) -&gt; int:\nreturn self.minorVersion()\n@property\ndef _microVersion(self) -&gt; int:\nreturn self.microVersion()\n__match_args__ = (\"_majorVersion\", \"_minorVersion\", \"_microVersion\")\ndef __reduce__(self):\nreturn type(self), (self.major(), self.minor(), self.micro())\ndef __str__(self):\nreturn self.toString()\ndef __eq__(self, other):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__eq__(other)\ndef __hash__(self):\nreturn hash((self.major(), self.minor(), self.micro()))\ndef __gt__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__gt__(other)\ndef __ge__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__ge__(other)\ndef __lt__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__lt__(other)\ndef __le__(self, other: datatypes.SemanticVersionType):\nif isinstance(other, str | tuple):\nother = VersionNumber(other)\nreturn super().__le__(other)\n@classmethod\ndef from_string(cls, version_string: str) -&gt; Self:\nreturn cls(cls.fromString(version_string))\n@classmethod\ndef get_qt_version(cls) -&gt; Self:\nreturn cls(*[int(i) for i in QtCore.__version__.split(\".\")])\n@classmethod\ndef get_python_version(cls) -&gt; Self:\nreturn cls(*sys.version_info[:3])\ndef major(self) -&gt; int:\n\"\"\"An integer representing the major version.\"\"\"\nreturn self.majorVersion()\ndef minor(self) -&gt; int:\n\"\"\"An integer representing the minor version.\"\"\"\nreturn self.minorVersion()\ndef micro(self) -&gt; int:\n\"\"\"An integer representing the micro version.\"\"\"\nreturn self.microVersion()\n</code></pre>"},{"location":"qt_modules/core/VersionNumber.html#prettyqt.core.versionnumber.VersionNumber.major","title":"<code>major() -&gt; int</code>","text":"<p>An integer representing the major version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def major(self) -&gt; int:\n\"\"\"An integer representing the major version.\"\"\"\nreturn self.majorVersion()\n</code></pre>"},{"location":"qt_modules/core/VersionNumber.html#prettyqt.core.versionnumber.VersionNumber.micro","title":"<code>micro() -&gt; int</code>","text":"<p>An integer representing the micro version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def micro(self) -&gt; int:\n\"\"\"An integer representing the micro version.\"\"\"\nreturn self.microVersion()\n</code></pre>"},{"location":"qt_modules/core/VersionNumber.html#prettyqt.core.versionnumber.VersionNumber.minor","title":"<code>minor() -&gt; int</code>","text":"<p>An integer representing the minor version.</p> Source code in <code>prettyqt\\core\\versionnumber.py</code> <pre><code>def minor(self) -&gt; int:\n\"\"\"An integer representing the minor version.\"\"\"\nreturn self.minorVersion()\n</code></pre>"},{"location":"qt_modules/core/VersionNumber.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103255079952[\"core.VersionNumber\"]\n  2103257797520[\"QtCore.QVersionNumber\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257797520 --&gt; 2103255079952\n  2103206874128 --&gt; 2103257797520\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/core/XmlStreamReader.html","title":"XmlStreamReader","text":"<p>Qt Base Class: QXmlStreamReader</p> <p>Signature: <code>QXmlStreamReader(self) -&gt; None QXmlStreamReader(self, data: str) -&gt; None QXmlStreamReader(self, device: PySide6.QtCore.QIODevice) -&gt; None</code></p>"},{"location":"qt_modules/core/XmlStreamReader.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtCore.QXmlStreamReader</code></p> <p>Fast parser for reading well-formed XML via a simple streaming API.</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>class XmlStreamReader(QtCore.QXmlStreamReader):\n\"\"\"Fast parser for reading well-formed XML via a simple streaming API.\"\"\"\ndef __iter__(self):\nreturn self\ndef __next__(self):\nwhile not self.atEnd():\nself.readNext()\nif self.hasError():\nraise RuntimeError(self.get_error())\nreturn self\nraise StopIteration\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return file error status.\n        Returns:\n            file error status\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_token_type(self) -&gt; TokenTypeStr:\n\"\"\"Get the current token type.\n        Returns:\n            token type\n        \"\"\"\nreturn TOKEN_TYPE.inverse[self.tokenType()]\ndef read_next(self) -&gt; TokenTypeStr:\n\"\"\"Read the next token and returns its type.\n        Returns:\n            token type\n        \"\"\"\nreturn TOKEN_TYPE.inverse[self.readNext()]\n</code></pre>"},{"location":"qt_modules/core/XmlStreamReader.html#prettyqt.core.xmlstreamreader.XmlStreamReader.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return file error status.</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return file error status.\n    Returns:\n        file error status\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/core/XmlStreamReader.html#prettyqt.core.xmlstreamreader.XmlStreamReader.get_token_type","title":"<code>get_token_type() -&gt; TokenTypeStr</code>","text":"<p>Get the current token type.</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def get_token_type(self) -&gt; TokenTypeStr:\n\"\"\"Get the current token type.\n    Returns:\n        token type\n    \"\"\"\nreturn TOKEN_TYPE.inverse[self.tokenType()]\n</code></pre>"},{"location":"qt_modules/core/XmlStreamReader.html#prettyqt.core.xmlstreamreader.XmlStreamReader.read_next","title":"<code>read_next() -&gt; TokenTypeStr</code>","text":"<p>Read the next token and returns its type.</p> Source code in <code>prettyqt\\core\\xmlstreamreader.py</code> <pre><code>def read_next(self) -&gt; TokenTypeStr:\n\"\"\"Read the next token and returns its type.\n    Returns:\n        token type\n    \"\"\"\nreturn TOKEN_TYPE.inverse[self.readNext()]\n</code></pre>"},{"location":"qt_modules/core/XmlStreamReader.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103254411408[\"core.XmlStreamReader\"]\n  2103257786960[\"QtCore.QXmlStreamReader\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103257786960 --&gt; 2103254411408\n  2103206874128 --&gt; 2103257786960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/index.html","title":"designer","text":"Name Children Inherits FormBuilderprettyqt.designer.formbuilder <ul><li><code>AbstractFormBuilderMixin</code></li><li>QFormBuilder</li></ul> PyDesignerCustomWidgetCollectionprettyqt.designer.pydesignercustomwidgetcollection <ul><li>QPyDesignerCustomWidgetCollection</li></ul> DesignerFormEditorInterfaceprettyqt.designer.designerformeditorinterface <ul><li>ObjectMixin</li><li>QDesignerFormEditorInterface</li></ul> DesignerCustomWidgetInterfaceprettyqt.designer.designercustomwidgetinterface <ul><li>QDesignerCustomWidgetInterface</li></ul> AbstractFormBuilderprettyqt.designer.abstractformbuilder <ul><li><code>AbstractFormBuilderMixin</code></li><li>QAbstractFormBuilder</li></ul> PyDesignerTaskMenuExtensionprettyqt.designer.pydesignertaskmenuextension <ul><li>ObjectMixin</li><li>QPyDesignerTaskMenuExtension</li></ul> AbstractExtensionFactoryprettyqt.designer.abstractextensionfactory <ul><li>QAbstractExtensionFactory</li></ul>"},{"location":"qt_modules/designer/AbstractExtensionFactory.html","title":"AbstractExtensionFactory","text":"<p>Qt Base Class: QAbstractExtensionFactory</p> <p>Signature: <code>QAbstractExtensionFactory(self) -&gt; None</code></p>"},{"location":"qt_modules/designer/AbstractExtensionFactory.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtDesigner.QAbstractExtensionFactory</code></p> <p>Interface for extension factories in Qt Designer.</p> Source code in <code>prettyqt\\designer\\abstractextensionfactory.py</code> <pre><code>class AbstractExtensionFactory(QtDesigner.QAbstractExtensionFactory):\n\"\"\"Interface for extension factories in Qt Designer.\"\"\"\n</code></pre>"},{"location":"qt_modules/designer/AbstractExtensionFactory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499428832[\"designer.AbstractExtensionFactory\"]\n  2103499382752[\"QtDesigner.QAbstractExtensionFactory\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499382752 --&gt; 2103499428832\n  2103206874128 --&gt; 2103499382752\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/AbstractFormBuilder.html","title":"AbstractFormBuilder","text":"<p>Qt Base Class: QAbstractFormBuilder</p> <p>Signature: <code>QAbstractFormBuilder(self) -&gt; None</code></p>"},{"location":"qt_modules/designer/AbstractFormBuilder.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractFormBuilderMixin</code>, <code>QtDesigner.QAbstractFormBuilder</code></p> <p>Default implementation for classes that create user interfaces at run-time.</p> Source code in <code>prettyqt\\designer\\abstractformbuilder.py</code> <pre><code>class AbstractFormBuilder(AbstractFormBuilderMixin, QtDesigner.QAbstractFormBuilder):\n\"\"\"Default implementation for classes that create user interfaces at run-time.\"\"\"\n</code></pre>"},{"location":"qt_modules/designer/AbstractFormBuilder.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499423072[\"designer.AbstractFormBuilder\"]\n  2103499412512[\"designer.AbstractFormBuilderMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499399072[\"QtDesigner.QAbstractFormBuilder\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103499412512 --&gt; 2103499423072\n  140736120080256 --&gt; 2103499412512\n  2103499399072 --&gt; 2103499423072\n  2103206874128 --&gt; 2103499399072\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/DesignerCustomWidgetInterface.html","title":"DesignerCustomWidgetInterface","text":"<p>Qt Base Class: QDesignerCustomWidgetInterface</p> <p>Signature: <code>QDesignerCustomWidgetInterface(self) -&gt; None</code></p>"},{"location":"qt_modules/designer/DesignerCustomWidgetInterface.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtDesigner.QDesignerCustomWidgetInterface</code></p> <p>Enables Qt Designer to access and construct custom widgets.</p> Source code in <code>prettyqt\\designer\\designercustomwidgetinterface.py</code> <pre><code>class DesignerCustomWidgetInterface(QtDesigner.QDesignerCustomWidgetInterface):\n\"\"\"Enables Qt Designer to access and construct custom widgets.\"\"\"\n</code></pre>"},{"location":"qt_modules/designer/DesignerCustomWidgetInterface.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499431712[\"designer.DesignerCustomWidgetInterface\"]\n  2103499391392[\"QtDesigner.QDesignerCustomWidgetInterface\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499391392 --&gt; 2103499431712\n  2103206874128 --&gt; 2103499391392\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/DesignerFormEditorInterface.html","title":"DesignerFormEditorInterface","text":"<p>Qt Base Class: QDesignerFormEditorInterface</p> <p>Signature: <code>QDesignerFormEditorInterface(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/designer/DesignerFormEditorInterface.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtDesigner.QDesignerFormEditorInterface</code></p> <p>Allows you to access Qt Designer's various components.</p> Source code in <code>prettyqt\\designer\\designerformeditorinterface.py</code> <pre><code>class DesignerFormEditorInterface(\ncore.ObjectMixin, QtDesigner.QDesignerFormEditorInterface\n):\n\"\"\"Allows you to access Qt Designer's various components.\"\"\"\n</code></pre>"},{"location":"qt_modules/designer/DesignerFormEditorInterface.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499424992[\"designer.DesignerFormEditorInterface\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499429792[\"QtDesigner.QDesignerFormEditorInterface\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103499424992\n  140736120080256 --&gt; 2103255067472\n  2103499429792 --&gt; 2103499424992\n  2103254677056 --&gt; 2103499429792\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/DesignerFormEditorInterface.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/designer/FormBuilder.html","title":"FormBuilder","text":"<p>Qt Base Class: QFormBuilder</p> <p>Signature: <code>QFormBuilder(self) -&gt; None</code></p>"},{"location":"qt_modules/designer/FormBuilder.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>designer.abstractformbuilder.AbstractFormBuilderMixin</code>, <code>designer.QFormBuilder</code></p> <p>Used to dynamically construct user interfaces from UI files at run-time.</p> Source code in <code>prettyqt\\designer\\formbuilder.py</code> <pre><code>class FormBuilder(\ndesigner.abstractformbuilder.AbstractFormBuilderMixin, designer.QFormBuilder\n):\n\"\"\"Used to dynamically construct user interfaces from UI files at run-time.\"\"\"\n</code></pre>"},{"location":"qt_modules/designer/FormBuilder.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499411552[\"designer.FormBuilder\"]\n  2103499412512[\"designer.AbstractFormBuilderMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499387552[\"QtDesigner.QFormBuilder\"]\n  2103499399072[\"QtDesigner.QAbstractFormBuilder\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103499412512 --&gt; 2103499411552\n  140736120080256 --&gt; 2103499412512\n  2103499387552 --&gt; 2103499411552\n  2103499399072 --&gt; 2103499387552\n  2103206874128 --&gt; 2103499399072\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/PyDesignerCustomWidgetCollection.html","title":"PyDesignerCustomWidgetCollection","text":"<p>Qt Base Class: QPyDesignerCustomWidgetCollection</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/designer/PyDesignerCustomWidgetCollection.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtDesigner.QPyDesignerCustomWidgetCollection</code></p> Source code in <code>prettyqt\\designer\\pydesignercustomwidgetcollection.py</code> <pre><code>class PyDesignerCustomWidgetCollection(QtDesigner.QPyDesignerCustomWidgetCollection):\npass\n</code></pre>"},{"location":"qt_modules/designer/PyDesignerCustomWidgetCollection.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499410592[\"designer.PyDesignerCustomWidgetCollection\"]\n  2103499401952[\"QtDesigner.QPyDesignerCustomWidgetCollection\"]\n  2103499383712[\"QtDesigner.QDesignerCustomWidgetCollectionInterface\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499401952 --&gt; 2103499410592\n  2103499383712 --&gt; 2103499401952\n  2103206874128 --&gt; 2103499383712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/designer/PyDesignerTaskMenuExtension.html","title":"PyDesignerTaskMenuExtension","text":"<p>Qt Base Class: QPyDesignerTaskMenuExtension</p> <p>Signature: <code>QPyDesignerTaskMenuExtension(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/designer/PyDesignerTaskMenuExtension.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtDesigner.QPyDesignerTaskMenuExtension</code></p> Source code in <code>prettyqt\\designer\\pydesignertaskmenuextension.py</code> <pre><code>class PyDesignerTaskMenuExtension(\ncore.ObjectMixin, QtDesigner.QPyDesignerTaskMenuExtension\n):\ndef preferredEditAction(self):\nreturn NotImplemented\ndef taskActions(self):\nreturn NotImplemented\n</code></pre>"},{"location":"qt_modules/designer/PyDesignerTaskMenuExtension.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103499430752[\"designer.PyDesignerTaskMenuExtension\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499372192[\"QtDesigner.QPyDesignerTaskMenuExtension\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103499364512[\"QtDesigner.QDesignerTaskMenuExtension\"]\n  2103255067472 --&gt; 2103499430752\n  140736120080256 --&gt; 2103255067472\n  2103499372192 --&gt; 2103499430752\n  2103254677056 --&gt; 2103499372192\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103499364512 --&gt; 2103499372192\n  2103206874128 --&gt; 2103499364512</code></pre>"},{"location":"qt_modules/designer/PyDesignerTaskMenuExtension.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/designer/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>designer</li> <li>FormBuilder</li> <li>PyDesignerCustomWidgetCollection</li> <li>DesignerFormEditorInterface</li> <li>DesignerCustomWidgetInterface</li> <li>AbstractFormBuilder</li> <li>PyDesignerTaskMenuExtension</li> <li>AbstractExtensionFactory</li> </ul>"},{"location":"qt_modules/gui/index.html","title":"gui","text":"<p>Base classes for graphical user interface (GUI) components.</p> Name Children Inherits AbstractTextDocumentLayoutMixinprettyqt.gui.abstracttextdocumentlayout <ul><li>AbstractTextDocumentLayout</li><li>PlainTextDocumentLayout</li></ul> <ul><li>ObjectMixin</li></ul> TextImageFormatprettyqt.gui.textimageformat <ul><li>TextCharFormatMixin</li><li>QTextImageFormat</li></ul> TextFormatprettyqt.gui.textformat <ul><li>TextFormatMixin</li><li>QTextFormat</li></ul> PainterMixinprettyqt.gui.painter <ul><li>Painter</li><li>StylePainter</li></ul> <ul><li>object</li></ul> RadialGradientprettyqt.gui.radialgradient <ul><li>GradientMixin</li><li>QRadialGradient</li></ul> PaintDeviceMixinprettyqt.gui.paintdevice <ul><li>PaintDevice</li><li>PaintDeviceWindowMixin</li><li>PixmapMixin</li><li>Image</li><li>PagedPaintDeviceMixin</li><li>Picture</li><li>WidgetMixin</li><li>SvgGenerator</li></ul> <ul><li>object</li></ul> SurfaceFormatprettyqt.gui.surfaceformat <ul><li><code>SurfaceFormatMixin</code></li><li>QSurfaceFormat</li></ul> ActionGroupprettyqt.gui.actiongroup <ul><li>ObjectMixin</li><li>QActionGroup</li></ul> TextFrameprettyqt.gui.textframe <ul><li><code>TextFrameMixin</code></li><li>QTextFrame</li></ul> ActionMixinprettyqt.gui.action <ul><li>Action</li><li>WidgetAction</li></ul> <ul><li>ObjectMixin</li></ul> FontDatabaseprettyqt.gui.fontdatabase <ul><li>QFontDatabase</li></ul> Imageprettyqt.gui.image <ul><li><code>SerializeMixin</code></li><li>PaintDeviceMixin</li><li>QImage</li></ul> BackingStoreprettyqt.gui.backingstore <ul><li>QBackingStore</li></ul> TextObjectMixinprettyqt.gui.textobject <ul><li>TextObject</li><li>TextBlockGroup</li><li><code>TextFrameMixin</code></li></ul> <ul><li>ObjectMixin</li></ul> TextListFormatprettyqt.gui.textlistformat <ul><li>TextFormatMixin</li><li>QTextListFormat</li></ul> Painterprettyqt.gui.painter <ul><li>PainterMixin</li><li>QPainter</li></ul> PageLayoutprettyqt.gui.pagelayout <ul><li>QPageLayout</li></ul> PaintDeviceWindowMixinprettyqt.gui.paintdevicewindow <ul><li>PaintDeviceWindow</li><li>RasterWindow</li></ul> <ul><li>WindowMixin</li><li>PaintDeviceMixin</li></ul> Surfaceprettyqt.gui.surface <ul><li>SurfaceMixin</li><li>QSurface</li></ul> TextFormatMixinprettyqt.gui.textformat <ul><li>TextFormat</li><li><code>TextFrameFormatMixin</code></li><li>TextBlockFormat</li><li>TextCharFormatMixin</li><li>TextListFormat</li></ul> <ul><li>object</li></ul> TextObjectInterfaceprettyqt.gui.textobjectinterface <ul><li>QTextObjectInterface</li></ul> ImageWriterprettyqt.gui.imagewriter <ul><li>QImageWriter</li></ul> Movieprettyqt.gui.movie <ul><li>ObjectMixin</li><li>QMovie</li></ul> Clipboardprettyqt.gui.clipboardAccess to the window system clipboard. <ul><li>ObjectMixin</li></ul> Actionprettyqt.gui.action <ul><li><code>PopupMenuAction</code></li><li><code>FullScreenAction</code></li></ul> <ul><li>ActionMixin</li><li>QAction</li></ul> AbstractFileIconProviderMixinprettyqt.gui.abstractfileiconprovider <ul><li>AbstractFileIconProvider</li><li>FileIconProvider</li></ul> <ul><li>object</li></ul> Matrix4x4prettyqt.gui.matrix4x4 <ul><li>QMatrix4x4</li></ul> Polygonprettyqt.gui.polygon <ul><li><code>SerializeMixin</code></li><li>QPolygon</li></ul> FontMetricsprettyqt.gui.fontmetrics <ul><li>QFontMetrics</li></ul> TextDocumentFragmentprettyqt.gui.textdocumentfragment <ul><li>QTextDocumentFragment</li></ul> TextDocumentWriterprettyqt.gui.textdocumentwriter <ul><li>QTextDocumentWriter</li></ul> Pixmapprettyqt.gui.pixmap <ul><li>PixmapMixin</li><li>QPixmap</li></ul> Windowprettyqt.gui.window <ul><li>WindowMixin</li><li>QWindow</li></ul> TextTableCellprettyqt.gui.texttablecell <ul><li>QTextTableCell</li></ul> WindowMixinprettyqt.gui.window <ul><li>Window</li><li>PaintDeviceWindowMixin</li><li><code>QuickWindowMixin</code></li></ul> <ul><li>ObjectMixin</li><li>SurfaceMixin</li></ul> UndoStackprettyqt.gui.undostack <ul><li><code>UndoStackMixin</code></li><li>QUndoStack</li></ul> GuiApplicationMixinprettyqt.gui.guiapplication <ul><li>GuiApplication</li><li><code>ApplicationMixin</code></li></ul> <ul><li>CoreApplicationMixin</li></ul> Fontprettyqt.gui.font <ul><li>QFont</li></ul> IntValidatorprettyqt.gui.intvalidator <ul><li>ValidatorMixin</li><li>QIntValidator</li></ul> TextLineprettyqt.gui.textline <ul><li>QTextLine</li></ul> SessionManagerprettyqt.gui.sessionmanager <ul><li>ObjectMixin</li></ul> TextTableprettyqt.gui.texttable <ul><li><code>TextFrameMixin</code></li><li>QTextTable</li></ul> Vector4Dprettyqt.gui.vector4d <ul><li>QVector4D</li></ul> PainterPathprettyqt.gui.painterpath <ul><li>QPainterPath</li></ul> ConicalGradientprettyqt.gui.conicalgradient <ul><li>GradientMixin</li><li>QConicalGradient</li></ul> Gradientprettyqt.gui.gradient <ul><li>GradientMixin</li><li>QGradient</li></ul> RasterWindowprettyqt.gui.rasterwindow <ul><li>PaintDeviceWindowMixin</li><li>QRasterWindow</li></ul> PaintDeviceprettyqt.gui.paintdevice <ul><li>PaintDeviceMixin</li><li>QPaintDevice</li></ul> AbstractTextDocumentLayoutprettyqt.gui.abstracttextdocumentlayout <ul><li>AbstractTextDocumentLayoutMixin</li><li>QAbstractTextDocumentLayout</li></ul> Iconprettyqt.gui.icon <ul><li><code>SerializeMixin</code></li><li>QIcon</li></ul> GuiApplicationprettyqt.gui.guiapplication <ul><li>GuiApplicationMixin</li><li>QGuiApplication</li></ul> Transformprettyqt.gui.transform <ul><li><code>SerializeMixin</code></li><li>QTransform</li></ul> TextBlockUserDataprettyqt.gui.textblockuserdata <ul><li>QTextBlockUserData</li></ul> TextOptionprettyqt.gui.textoption <ul><li>QTextOption</li></ul> ValidatorMixinprettyqt.gui.validator <ul><li>Validator</li><li>RegularExpressionValidator</li><li>IntValidator</li><li>DoubleValidator</li></ul> <ul><li>ObjectMixin</li></ul> StyleHintsprettyqt.gui.stylehints <ul><li><code>StyleHintsMixin</code></li></ul> TextObjectprettyqt.gui.textobject <ul><li>TextObjectMixin</li><li>QTextObject</li></ul> TextLengthprettyqt.gui.textlength <ul><li>QTextLength</li></ul> PdfWriterprettyqt.gui.pdfwriter <ul><li>ObjectMixin</li><li>PagedPaintDeviceMixin</li><li>QPdfWriter</li></ul> Regionprettyqt.gui.region <ul><li><code>SerializeMixin</code></li><li>QRegion</li></ul> LinearGradientprettyqt.gui.lineargradient <ul><li>GradientMixin</li><li>QLinearGradient</li></ul> PaintDeviceWindowprettyqt.gui.paintdevicewindow <ul><li>PaintDeviceWindowMixin</li><li>QPaintDeviceWindow</li></ul> AbstractFileIconProviderprettyqt.gui.abstractfileiconprovider <ul><li>AbstractFileIconProviderMixin</li><li>QAbstractFileIconProvider</li></ul> SurfaceMixinprettyqt.gui.surface <ul><li>Surface</li><li>WindowMixin</li></ul> <ul><li>object</li></ul> Cursorprettyqt.gui.cursor <ul><li><code>SerializeMixin</code></li><li>QCursor</li></ul> PagedPaintDeviceMixinprettyqt.gui.pagedpaintdevice <ul><li>PagedPaintDevice</li><li>PdfWriter</li><li>Printer</li></ul> <ul><li>PaintDeviceMixin</li></ul> PageSizeprettyqt.gui.pagesize <ul><li>QPageSize</li></ul> Validatorprettyqt.gui.validator <ul><li>AlphaNumericValidator</li><li>BlacklistValidator</li><li>ColorValidator</li><li><code>CompositeValidator</code></li><li>FunctionValidator</li><li>HexValidator</li><li>IntegerValidator</li><li>JsonValidator</li><li>MonotonicListValidator</li><li>NotStrictValidator</li><li>...</li></ul> <ul><li>ValidatorMixin</li><li>QValidator</li></ul> Shortcutprettyqt.gui.shortcut <ul><li>ObjectMixin</li><li>QShortcut</li></ul> SyntaxHighlighterprettyqt.gui.syntaxhighlighter <ul><li>JsonHighlighter</li><li>MarkdownHighlighter</li><li>PygmentsHighlighter</li><li>PythonHighlighter</li><li>RegexMatchHighlighter</li><li>SelectedWordHighlighter</li><li>YamlHighlighter</li></ul> <ul><li><code>SyntaxHighlighterMixin</code></li><li>QSyntaxHighlighter</li></ul> TextBlockGroupprettyqt.gui.textblockgroup <ul><li>TextObjectMixin</li><li>QTextBlockGroup</li></ul> PageRangesprettyqt.gui.pageranges <ul><li>QPageRanges</li></ul> TextFrameFormatprettyqt.gui.textframeformat <ul><li><code>TextFrameFormatMixin</code></li><li>QTextFrameFormat</li></ul> Pictureprettyqt.gui.picture <ul><li><code>SerializeMixin</code></li><li>PaintDeviceMixin</li><li>QPicture</li></ul> StaticTextprettyqt.gui.statictext <ul><li>QStaticText</li></ul> PixmapMixinprettyqt.gui.pixmapOff-screen image representation that can be used as a paint device. <ul><li>Pixmap</li><li>Bitmap</li></ul> <ul><li><code>SerializeMixin</code></li><li>PaintDeviceMixin</li></ul> TextCharFormatMixinprettyqt.gui.textcharformat <ul><li>TextCharFormat</li><li>TextImageFormat</li><li>TextTableCellFormat</li></ul> <ul><li>TextFormatMixin</li></ul> StandardItemprettyqt.gui.standarditem <ul><li><code>SerializeMixin</code></li><li>QStandardItem</li></ul> PagedPaintDeviceprettyqt.gui.pagedpaintdevice <ul><li>PagedPaintDeviceMixin</li><li>QPagedPaintDevice</li></ul> TextBlockprettyqt.gui.textblock <ul><li>QTextBlock</li></ul> InputMethodprettyqt.gui.inputmethod <ul><li>ObjectMixin</li></ul> Dragprettyqt.gui.drag <ul><li>ObjectMixin</li><li>QDrag</li></ul> UndoCommandprettyqt.gui.undocommand <ul><li>QUndoCommand</li></ul> TextTableFormatprettyqt.gui.texttableformat <ul><li><code>TextFrameFormatMixin</code></li><li>QTextTableFormat</li></ul> TextCharFormatprettyqt.gui.textcharformat <ul><li>TextCharFormatMixin</li><li>QTextCharFormat</li></ul> PainterPathStrokerprettyqt.gui.painterpathstroker <ul><li>QPainterPathStroker</li></ul> Brushprettyqt.gui.brush <ul><li><code>SerializeMixin</code></li><li>QBrush</li></ul> IconEngineprettyqt.gui.iconengine <ul><li><code>CharIconEngine</code></li></ul> <ul><li><code>SerializeMixin</code></li><li>QIconEngine</li></ul> Vector3Dprettyqt.gui.vector3d <ul><li>QVector3D</li></ul> DesktopServicesprettyqt.gui.desktopservices <ul><li>QDesktopServices</li></ul> StandardItemModelprettyqt.gui.standarditemmodel <ul><li>AbstractItemModelMixin</li><li>QStandardItemModel</li></ul> Penprettyqt.gui.pen <ul><li><code>SerializeMixin</code></li><li>QPen</li></ul> RegularExpressionValidatorprettyqt.gui.regularexpressionvalidator <ul><li>ValidatorMixin</li><li>QRegularExpressionValidator</li></ul> Screenprettyqt.gui.screenUsed to query screen properties. <ul><li>object</li></ul> UndoGroupprettyqt.gui.undogroup <ul><li><code>UndoGroupMixin</code></li><li>QUndoGroup</li></ul> ImageIOHandlerprettyqt.gui.imageiohandler <ul><li>QImageIOHandler</li></ul> FontMetricsFprettyqt.gui.fontmetricsf <ul><li>QFontMetricsF</li></ul> Paletteprettyqt.gui.palette <ul><li><code>SerializeMixin</code></li><li>QPalette</li></ul> DoubleValidatorprettyqt.gui.doublevalidator <ul><li>ValidatorMixin</li><li>QDoubleValidator</li></ul> PixmapCacheprettyqt.gui.pixmapcache <ul><li>QPixmapCache</li></ul> ImageReaderprettyqt.gui.imagereader <ul><li>QImageReader</li></ul> TextCursorprettyqt.gui.textcursor <ul><li>QTextCursor</li></ul> PolygonFprettyqt.gui.polygonf <ul><li><code>SerializeMixin</code></li><li>QPolygonF</li></ul> TextDocumentprettyqt.gui.textdocument <ul><li><code>TextDocumentMixin</code></li><li>QTextDocument</li></ul> TextLayoutprettyqt.gui.textlayout <ul><li>QTextLayout</li></ul> ColorSpaceprettyqt.gui.colorspace <ul><li><code>SerializeMixin</code></li><li>QColorSpace</li></ul> TextBlockFormatprettyqt.gui.textblockformat <ul><li>TextFormatMixin</li><li>QTextBlockFormat</li></ul> KeySequenceprettyqt.gui.keysequence <ul><li>QKeySequence</li></ul> TextTableCellFormatprettyqt.gui.texttablecellformat <ul><li>TextCharFormatMixin</li><li>QTextTableCellFormat</li></ul> FontInfoprettyqt.gui.fontinfo <ul><li>QFontInfo</li></ul> Colorprettyqt.gui.color <ul><li>QColor</li></ul> GradientMixinprettyqt.gui.gradient <ul><li>Gradient</li><li>LinearGradient</li><li>RadialGradient</li><li>ConicalGradient</li></ul> <ul><li>object</li></ul> Bitmapprettyqt.gui.bitmap <ul><li>PixmapMixin</li><li>QBitmap</li></ul>"},{"location":"qt_modules/gui/AbstractFileIconProvider.html","title":"AbstractFileIconProvider","text":"<p>Qt Base Class: QAbstractFileIconProvider</p> <p>Signature: <code>QAbstractFileIconProvider(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/AbstractFileIconProvider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractFileIconProviderMixin</code>, <code>QtGui.QAbstractFileIconProvider</code></p> <p>File icons for the QFileSystemModel class.</p> Source code in <code>prettyqt\\gui\\abstractfileiconprovider.py</code> <pre><code>class AbstractFileIconProvider(\nAbstractFileIconProviderMixin, QtGui.QAbstractFileIconProvider\n):\n\"\"\"File icons for the QFileSystemModel class.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/AbstractFileIconProvider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256715552[\"gui.AbstractFileIconProvider\"]\n  2103256704992[\"gui.AbstractFileIconProviderMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259368592[\"QtGui.QAbstractFileIconProvider\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256704992 --&gt; 2103256715552\n  140736120080256 --&gt; 2103256704992\n  2103259368592 --&gt; 2103256715552\n  2103206874128 --&gt; 2103259368592\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/AbstractFileIconProviderMixin.html","title":"AbstractFileIconProviderMixin","text":""},{"location":"qt_modules/gui/AbstractFileIconProviderMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\gui\\abstractfileiconprovider.py</code> <pre><code>class AbstractFileIconProviderMixin:\ndef get_type(self, file: core.QFileInfo | datatypes.PathType) -&gt; str:\nif isinstance(file, os.PathLike):\nfile = core.FileInfo(file)\nreturn self.type(file)\n</code></pre> Name Children Inherits AbstractFileIconProviderprettyqt.gui.abstractfileiconprovider <ul><li>AbstractFileIconProviderMixin</li><li>QAbstractFileIconProvider</li></ul> FileIconProviderprettyqt.widgets.fileiconprovider <ul><li>AbstractFileIconProviderMixin</li><li>QFileIconProvider</li></ul>"},{"location":"qt_modules/gui/AbstractFileIconProviderMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256704992[\"gui.AbstractFileIconProviderMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103256704992</code></pre>"},{"location":"qt_modules/gui/AbstractTextDocumentLayout.html","title":"AbstractTextDocumentLayout","text":"<p>Qt Base Class: QAbstractTextDocumentLayout</p> <p>Signature: <code>QAbstractTextDocumentLayout(self, doc: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/gui/AbstractTextDocumentLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractTextDocumentLayoutMixin</code>, <code>QtGui.QAbstractTextDocumentLayout</code></p> <p>Abstract base class used to implement custom layouts for QTextDocuments.</p> Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>class AbstractTextDocumentLayout(\nAbstractTextDocumentLayoutMixin, QtGui.QAbstractTextDocumentLayout\n):\n\"\"\"Abstract base class used to implement custom layouts for QTextDocuments.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/AbstractTextDocumentLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256714592[\"gui.AbstractTextDocumentLayout\"]\n  2103256719392[\"gui.AbstractTextDocumentLayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260872016[\"QtGui.QAbstractTextDocumentLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256719392 --&gt; 2103256714592\n  2103255067472 --&gt; 2103256719392\n  140736120080256 --&gt; 2103255067472\n  2103260872016 --&gt; 2103256714592\n  2103254677056 --&gt; 2103260872016\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/AbstractTextDocumentLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/AbstractTextDocumentLayoutMixin.html","title":"AbstractTextDocumentLayoutMixin","text":""},{"location":"qt_modules/gui/AbstractTextDocumentLayoutMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\abstracttextdocumentlayout.py</code> <pre><code>class AbstractTextDocumentLayoutMixin(core.ObjectMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef __len__(self):\nreturn self.pageCount()\ndef get_block_bounding_rect(self, block: QtGui.QTextBlock) -&gt; core.RectF:\nreturn core.RectF(self.blockBoundingRect(block))\ndef get_frame_bounding_rect(self, frame: QtGui.QTextBlock) -&gt; core.RectF:\nreturn core.RectF(self.frameBoundingRect(frame))\ndef hit_test(self, point: datatypes.PointFType, fuzzy: bool = False) -&gt; int | None:\naccuracy = (\nconstants.HitTestAccuracy.FuzzyHit\nif fuzzy\nelse constants.HitTestAccuracy.ExactHit\n)\nresult = self.hitTest(datatypes.to_pointf(point), accuracy)\nreturn None if result == -1 else result\n</code></pre> Name Children Inherits AbstractTextDocumentLayoutprettyqt.gui.abstracttextdocumentlayout <ul><li>AbstractTextDocumentLayoutMixin</li><li>QAbstractTextDocumentLayout</li></ul> PlainTextDocumentLayoutprettyqt.widgets.plaintextdocumentlayout <ul><li>AbstractTextDocumentLayoutMixin</li><li>QPlainTextDocumentLayout</li></ul>"},{"location":"qt_modules/gui/AbstractTextDocumentLayoutMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256719392[\"gui.AbstractTextDocumentLayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103256719392\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/Action.html","title":"Action","text":"<p>Qt Base Class: QAction</p> <p>Signature: <code>QAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QAction(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QAction(self, text: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/Action.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ActionMixin</code>, <code>gui.QAction</code></p> <p>Abstraction for user commands that can be added to different GUI components.</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>class Action(ActionMixin, gui.QAction):\n\"\"\"Abstraction for user commands that can be added to different GUI components.\"\"\"\n</code></pre> Name Children Inherits <code>PopupMenuAction</code>prettyqt.widgets.mainwindow <ul><li>Action</li></ul> <code>FullScreenAction</code>prettyqt.widgets.mainwindow <ul><li>Action</li></ul>"},{"location":"qt_modules/gui/Action.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256721312[\"gui.Action\"]\n  2103256695392[\"gui.ActionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260873936[\"QtGui.QAction\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256695392 --&gt; 2103256721312\n  2103255067472 --&gt; 2103256695392\n  140736120080256 --&gt; 2103255067472\n  2103260873936 --&gt; 2103256721312\n  2103254677056 --&gt; 2103260873936\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Action.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>checkable</code> bool <code>checked</code> bool <code>enabled</code> bool <code>icon</code> QIcon <code>text</code> QString <code>iconText</code> QString <code>toolTip</code> QString <code>statusTip</code> QString <code>whatsThis</code> QString <code>font</code> QFont <code>shortcut</code> QKeySequence <code>shortcutContext</code> Qt::ShortcutContext <code>autoRepeat</code> bool <code>visible</code> bool <code>menuRole</code> QAction::MenuRole <code>iconVisibleInMenu</code> bool <code>shortcutVisibleInContextMenu</code> bool <code>priority</code> QAction::Priority <code>usage_count</code> int How often the action was triggered"},{"location":"qt_modules/gui/ActionGroup.html","title":"ActionGroup","text":"<p>Qt Base Class: QActionGroup</p> <p>Signature: <code>QActionGroup(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/gui/ActionGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtGui.QActionGroup</code></p> <p>Groups actions together.</p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>class ActionGroup(core.ObjectMixin, QtGui.QActionGroup):\n\"\"\"Groups actions together.\"\"\"\ndef __init__(self, parent: core.QObject | None = None, **kwargs):\nsuper().__init__(parent, **kwargs)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"exclusionPolicy\": EXCLUSION_POLICY}\nreturn maps\ndef __len__(self) -&gt; int:\nreturn len(self.actions())\ndef __getitem__(self, item: int) -&gt; QtGui.QAction:\nreturn self.actions()[item]\ndef set_exclusion_policy(\nself, policy: ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None\n):\n\"\"\"Set exclusion policy to use.\n        Args:\n            policy: exclusion policy to use\n        \"\"\"\nif policy is None:\npolicy = \"none\"\nself.setExclusionPolicy(EXCLUSION_POLICY.get_enum_value(policy))\ndef get_exclusion_policy(self) -&gt; ExclusionPolicyStr:\n\"\"\"Return current exclusion policy.\n        Returns:\n            exclusion policy\n        \"\"\"\nreturn EXCLUSION_POLICY.inverse[self.exclusionPolicy()]\n</code></pre>"},{"location":"qt_modules/gui/ActionGroup.html#prettyqt.gui.actiongroup.ActionGroup.get_exclusion_policy","title":"<code>get_exclusion_policy() -&gt; ExclusionPolicyStr</code>","text":"<p>Return current exclusion policy.</p> Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def get_exclusion_policy(self) -&gt; ExclusionPolicyStr:\n\"\"\"Return current exclusion policy.\n    Returns:\n        exclusion policy\n    \"\"\"\nreturn EXCLUSION_POLICY.inverse[self.exclusionPolicy()]\n</code></pre>"},{"location":"qt_modules/gui/ActionGroup.html#prettyqt.gui.actiongroup.ActionGroup.set_exclusion_policy","title":"<code>set_exclusion_policy(policy: ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None)</code>","text":"<p>Set exclusion policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None</code> <p>exclusion policy to use</p> required Source code in <code>prettyqt\\gui\\actiongroup.py</code> <pre><code>def set_exclusion_policy(\nself, policy: ExclusionPolicyStr | QtGui.QActionGroup.ExclusionPolicy | None\n):\n\"\"\"Set exclusion policy to use.\n    Args:\n        policy: exclusion policy to use\n    \"\"\"\nif policy is None:\npolicy = \"none\"\nself.setExclusionPolicy(EXCLUSION_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/gui/ActionGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256728032[\"gui.ActionGroup\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260855696[\"QtGui.QActionGroup\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103256728032\n  140736120080256 --&gt; 2103255067472\n  2103260855696 --&gt; 2103256728032\n  2103254677056 --&gt; 2103260855696\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/ActionGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>exclusionPolicy</code> QActionGroup::ExclusionPolicy <code>enabled</code> bool <code>visible</code> bool"},{"location":"qt_modules/gui/ActionMixin.html","title":"ActionMixin","text":""},{"location":"qt_modules/gui/ActionMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>class ActionMixin(core.ObjectMixin):\ndef __init__(\nself,\n*args,\ntext: str | None = None,\nicon: datatypes.IconType = None,\ncallback: Callable | None = None,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nif callback is not None:\nself.triggered.connect(callback)\nself._usage_count = 0\nif text:\nself.setText(text)\nif icon:\nself.set_icon(icon)\nself.triggered.connect(self._increase_usage_counter)\ndef __repr__(self) -&gt; str:\nreturn get_repr(self, self.text())\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"priority\": PRIORITIES,\n\"shortcutContext\": constants.SHORTCUT_CONTEXT,\n\"menuRole\": MENU_ROLE,\n}\nreturn maps\ndef _increase_usage_counter(self):\nself._usage_count += 1\ndef get_usage_count(self) -&gt; int:\nreturn self._usage_count\ndef get_type(self) -&gt; Literal[\"menu\", \"separator\", \"widget\", \"regular\"]:\nif self.menu() is not None:\nreturn \"menu\"\nelif self.isSeparator():\nreturn \"separator\"\nelif hasattr(self, \"defaultWidget\"):\nreturn \"widget\"\nelse:\nreturn \"regular\"\ndef set_disabled(self):\nself.setEnabled(False)\ndef set_enabled(self, enabled: bool = True):\nself.setEnabled(enabled)\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\nrich_text: bool = False,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, core.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nif rich_text:\ntooltip = f\"&lt;html&gt;{html.escape(tooltip)}&lt;/html&gt;\"\nsuper().setToolTip(tooltip)\nsetToolTip = set_tooltip\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nsuper().setIcon(icon)\nsetIcon = set_icon\ndef set_shortcut(self, shortcut: None | gui.QKeySequence | str):\nif shortcut is None:\nshortcut = \"\"\nif isinstance(shortcut, str):\nshortcut = gui.KeySequence(\nshortcut, gui.KeySequence.SequenceFormat.PortableText\n)\nsuper().setShortcut(shortcut)\nsetShortcut = set_shortcut\ndef setText(self, text: str | None):\nsuper().setText(text or \"\")\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef get_shortcut(self) -&gt; gui.KeySequence | None:\nshortcut = self.shortcut()\nreturn (\ngui.KeySequence(\nshortcut.toString(), gui.KeySequence.SequenceFormat.PortableText\n)\nif shortcut\nelse None\n)\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef set_menu(self, menu):\nself.setMenu(menu)\ndef set_priority(self, priority: PriorityStr | gui.QAction.Priority):\n\"\"\"Set priority of the action.\n        Args:\n            priority: priority for the action\n        \"\"\"\nsuper().setPriority(PRIORITIES.get_enum_value(priority))\nsetPriority = set_priority\ndef get_priority(self) -&gt; PriorityStr:\n\"\"\"Return current priority.\n        Returns:\n            priority\n        \"\"\"\nreturn PRIORITIES.inverse[self.priority()]\ndef set_shortcut_context(\nself, context: constants.ShortcutContextStr | constants.ShortcutContext\n):\n\"\"\"Set shortcut context.\n        Args:\n            context: shortcut context\n        \"\"\"\nsuper().setShortcutContext(constants.SHORTCUT_CONTEXT.get_enum_value(context))\nsetShortcutContext = set_shortcut_context\ndef get_shortcut_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n        Returns:\n            shortcut context\n        \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[super().shortcutContext()]\ndef set_menu_role(self, role: MenuRoleStr | gui.QAction.MenuRole):\n\"\"\"Set menu role.\n        Args:\n            role: menu role\n        \"\"\"\nsuper().setMenuRole(MENU_ROLE.get_enum_value(role))\nsetMenuRole = set_menu_role\ndef get_menu_role(self) -&gt; MenuRoleStr:\n\"\"\"Return menu role.\n        Returns:\n            menu role\n        \"\"\"\nreturn MENU_ROLE.inverse[super().menuRole()]\ndef show_shortcut_in_contextmenu(self, state: bool = True):\nself.setShortcutVisibleInContextMenu(state)\nusage_count = core.Property(\nint,\nget_usage_count,\ndoc=\"How often the action was triggered\",\n)\n</code></pre> Name Children Inherits Actionprettyqt.gui.action <ul><li><code>PopupMenuAction</code></li><li><code>FullScreenAction</code></li></ul> <ul><li>ActionMixin</li><li>QAction</li></ul> WidgetActionprettyqt.widgets.widgetaction <ul><li>ActionMixin</li><li>QWidgetAction</li></ul>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.get_menu_role","title":"<code>get_menu_role() -&gt; MenuRoleStr</code>","text":"<p>Return menu role.</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_menu_role(self) -&gt; MenuRoleStr:\n\"\"\"Return menu role.\n    Returns:\n        menu role\n    \"\"\"\nreturn MENU_ROLE.inverse[super().menuRole()]\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"<p>Return current priority.</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\n\"\"\"Return current priority.\n    Returns:\n        priority\n    \"\"\"\nreturn PRIORITIES.inverse[self.priority()]\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.get_shortcut_context","title":"<code>get_shortcut_context() -&gt; constants.ShortcutContextStr</code>","text":"<p>Return shortcut context.</p> Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def get_shortcut_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n    Returns:\n        shortcut context\n    \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[super().shortcutContext()]\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nsuper().setIcon(icon)\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.set_menu_role","title":"<code>set_menu_role(role: MenuRoleStr | gui.QAction.MenuRole)</code>","text":"<p>Set menu role.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>MenuRoleStr | gui.QAction.MenuRole</code> <p>menu role</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_menu_role(self, role: MenuRoleStr | gui.QAction.MenuRole):\n\"\"\"Set menu role.\n    Args:\n        role: menu role\n    \"\"\"\nsuper().setMenuRole(MENU_ROLE.get_enum_value(role))\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.set_priority","title":"<code>set_priority(priority: PriorityStr | gui.QAction.Priority)</code>","text":"<p>Set priority of the action.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>PriorityStr | gui.QAction.Priority</code> <p>priority for the action</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_priority(self, priority: PriorityStr | gui.QAction.Priority):\n\"\"\"Set priority of the action.\n    Args:\n        priority: priority for the action\n    \"\"\"\nsuper().setPriority(PRIORITIES.get_enum_value(priority))\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#prettyqt.gui.action.ActionMixin.set_shortcut_context","title":"<code>set_shortcut_context(context: constants.ShortcutContextStr | constants.ShortcutContext)</code>","text":"<p>Set shortcut context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>constants.ShortcutContextStr | constants.ShortcutContext</code> <p>shortcut context</p> required Source code in <code>prettyqt\\gui\\action.py</code> <pre><code>def set_shortcut_context(\nself, context: constants.ShortcutContextStr | constants.ShortcutContext\n):\n\"\"\"Set shortcut context.\n    Args:\n        context: shortcut context\n    \"\"\"\nsuper().setShortcutContext(constants.SHORTCUT_CONTEXT.get_enum_value(context))\n</code></pre>"},{"location":"qt_modules/gui/ActionMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256695392[\"gui.ActionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103256695392\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/BackingStore.html","title":"BackingStore","text":"<p>Qt Base Class: QBackingStore</p> <p>Signature: <code>QBackingStore(self, window: PySide6.QtGui.QWindow) -&gt; None</code></p>"},{"location":"qt_modules/gui/BackingStore.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QBackingStore</code></p> <p>Drawing area for QWindow.</p> Source code in <code>prettyqt\\gui\\backingstore.py</code> <pre><code>class BackingStore(QtGui.QBackingStore):\n\"\"\"Drawing area for QWindow.\"\"\"\n@contextlib.contextmanager\ndef paint_on_region(self, region: QtGui.QRegion):\nself.beginPaint(region)\nyield self\nself.endPaint()\n</code></pre>"},{"location":"qt_modules/gui/BackingStore.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260939216[\"gui.BackingStore\"]\n  2103259403152[\"QtGui.QBackingStore\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259403152 --&gt; 2103260939216\n  2103206874128 --&gt; 2103259403152\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Bitmap.html","title":"Bitmap","text":"<p>Qt Base Class: QBitmap</p> <p>Signature: <code>QBitmap(self) -&gt; None QBitmap(self, QBitmap: Union[PySide6.QtGui.QBitmap, str]) -&gt; None QBitmap(self, arg__1: PySide6.QtCore.QSize) -&gt; None QBitmap(self, arg__1: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -&gt; None QBitmap(self, fileName: str, format: Optional[bytes] = None) -&gt; None QBitmap(self, w: int, h: int) -&gt; None</code></p>"},{"location":"qt_modules/gui/Bitmap.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.PixmapMixin</code>, <code>gui.QBitmap</code></p> <p>Monochrome (1-bit depth) pixmaps.</p> Source code in <code>prettyqt\\gui\\bitmap.py</code> <pre><code>class Bitmap(gui.PixmapMixin, gui.QBitmap):\n\"\"\"Monochrome (1-bit depth) pixmaps.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/Bitmap.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260954576[\"gui.Bitmap\"]\n  2103260951696[\"gui.PixmapMixin\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259364752[\"QtGui.QBitmap\"]\n  2103259370512[\"QtGui.QPixmap\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260951696 --&gt; 2103260954576\n  2103255032912 --&gt; 2103260951696\n  140736120080256 --&gt; 2103255032912\n  2103260963216 --&gt; 2103260951696\n  140736120080256 --&gt; 2103260963216\n  2103259364752 --&gt; 2103260954576\n  2103259370512 --&gt; 2103259364752\n  2103259509712 --&gt; 2103259370512\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Brush.html","title":"Brush","text":"<p>Qt Base Class: QBrush</p> <p>Signature: <code>QBrush(self) -&gt; None QBrush(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -&gt; None QBrush(self, bs: PySide6.QtCore.Qt.BrushStyle) -&gt; None QBrush(self, color: PySide6.QtCore.Qt.GlobalColor, bs: PySide6.QtCore.Qt.BrushStyle = Instance(Qt.SolidPattern)) -&gt; None QBrush(self, color: PySide6.QtCore.Qt.GlobalColor, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -&gt; None QBrush(self, color: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], bs: PySide6.QtCore.Qt.BrushStyle = Instance(Qt.SolidPattern)) -&gt; None QBrush(self, color: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -&gt; None QBrush(self, gradient: Union[PySide6.QtGui.QGradient, PySide6.QtGui.QGradient.Preset]) -&gt; None QBrush(self, image: Union[PySide6.QtGui.QImage, str]) -&gt; None QBrush(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -&gt; None</code></p>"},{"location":"qt_modules/gui/Brush.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QBrush</code></p> <p>Defines the fill pattern of shapes drawn by QPainter.</p> Source code in <code>prettyqt\\gui\\brush.py</code> <pre><code>class Brush(serializemixin.SerializeMixin, gui.QBrush):\n\"\"\"Defines the fill pattern of shapes drawn by QPainter.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_color(), self.get_style())\ndef get_texture_image(self) -&gt; gui.Image | None:\nimg = self.textureImage()\nreturn None if img.isNull() else gui.Image(img)\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_style(self) -&gt; constants.BrushStyleStr:\nreturn constants.BRUSH_STYLE.inverse[self.style()]\ndef set_style(self, style: constants.BrushStyleStr | constants.BrushStyle):\nself.setStyle(constants.BRUSH_STYLE.get_enum_value(style))\ndef set_transform(self, transform: datatypes.TransformType):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform)\n</code></pre>"},{"location":"qt_modules/gui/Brush.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260739536[\"gui.Brush\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259615312[\"QtGui.QBrush\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260739536\n  140736120080256 --&gt; 2103255032912\n  2103259615312 --&gt; 2103260739536\n  2103206874128 --&gt; 2103259615312\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Clipboard.html","title":"Clipboard","text":""},{"location":"qt_modules/gui/Clipboard.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>Access to the window system clipboard.</p> Source code in <code>prettyqt\\gui\\clipboard.py</code> <pre><code>class Clipboard(core.ObjectMixin):\n\"\"\"Access to the window system clipboard.\"\"\"\ndef __init__(self, item: gui.QClipboard):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef set_pixmap(\nself,\npixmap: gui.QPixmap | None,\nmode: ModeStr | gui.QClipboard.Mode = \"clipboard\",\n):\nif pixmap is None:\npixmap = gui.QPixmap()\nself.item.setPixmap(pixmap, MODES.get_enum_value(mode))\ndef get_pixmap(\nself, mode: ModeStr | gui.QClipboard.Mode = \"clipboard\"\n) -&gt; gui.Pixmap | None:\nval = MODES.get_enum_value(mode)\npix = gui.Pixmap(self.item.pixmap(val))\nreturn None if pix.isNull() else pix\ndef set_image(\nself,\nimage: gui.QImage | None,\nmode: ModeStr | gui.QClipboard.Mode = \"clipboard\",\n):\nif image is None:\nimage = gui.QImage()\nself.item.setImage(image, MODES.get_enum_value(mode))\ndef get_image(\nself, mode: ModeStr | gui.QClipboard.Mode = \"clipboard\"\n) -&gt; gui.Image | None:\nimg = gui.Image(self.item.image(MODES.get_enum_value(mode)))\nreturn None if img.isNull() else img\ndef set_mimedata(\nself,\nmimedata: core.QMimeData,\nmode: ModeStr | gui.QClipboard.Mode = \"clipboard\",\n):\nself.item.setMimeData(mimedata, MODES.get_enum_value(mode))\ndef get_mimedata(\nself, mode: ModeStr | gui.QClipboard.Mode = \"clipboard\"\n) -&gt; core.QMimeData:\nreturn self.item.mimeData(MODES.get_enum_value(mode))\ndef set_text(self, text: str, mode: ModeStr | gui.QClipboard.Mode = \"clipboard\"):\nself.item.setText(text, MODES.get_enum_value(mode))\ndef get_text(self, mode: ModeStr | gui.QClipboard.Mode = \"clipboard\") -&gt; str:\nreturn self.item.text(MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/gui/Clipboard.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260956496[\"gui.Clipboard\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103260956496\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/Color.html","title":"Color","text":"<p>Qt Base Class: QColor</p> <p>Signature: <code>QColor(self) -&gt; None QColor(self, arg__1: Any) -&gt; None QColor(self, color: PySide6.QtCore.Qt.GlobalColor) -&gt; None QColor(self, name: str) -&gt; None QColor(self, r: int, g: int, b: int, a: int = 255) -&gt; None QColor(self, rgb: int) -&gt; None QColor(self, rgba64: PySide6.QtGui.QRgba64) -&gt; None QColor(self, spec: PySide6.QtGui.QColor.Spec, a1: int, a2: int, a3: int, a4: int, a5: int = 0) -&gt; None</code></p>"},{"location":"qt_modules/gui/Color.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QColor</code></p> <p>Colors based on RGB, HSV or CMYK values.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>class Color(QtGui.QColor):\n\"\"\"Colors based on RGB, HSV or CMYK values.\"\"\"\ndef __init__(self, *args):\nmatch args:\ncase (QtGui.QColor(),):\nsuper().__init__()\nself.setRgba(args[0].rgba())\ncase (str(),):\nif not is_valid_color(args[0]):\nraise ValueError(args[0])\nsuper().__init__(args[0])\ncase _:\nsuper().__init__(*args)\ndef __repr__(self):\nreturn get_repr(self, self.red(), self.green(), self.blue(), self.alpha())\ndef __str__(self):\nreturn self.name() if self.alpha() == 255 else self.name(self.NameFormat.HexArgb)\ndef __reduce__(self):\nreturn type(self), (self.red(), self.green(), self.blue(), self.alpha())\ndef __format__(self, format_spec: NameStr):\ntry:\nreturn self.get_name(format_spec)\nexcept ValueError:\nreturn super().__format__(format_spec)\n@property\ndef _red(self) -&gt; int:\nreturn self.red()\n@property\ndef _green(self) -&gt; int:\nreturn self.green()\n@property\ndef _blue(self) -&gt; int:\nreturn self.blue()\n@property\ndef _alpha(self) -&gt; int:\nreturn self.alpha()\n__match_args__ = (\"_red\", \"_green\", \"_blue\", \"_alpha\")\ndef serialize(self) -&gt; dict[str, Any]:\nreturn dict(color=self.name())\ndef set_color(self, color: str | tuple):\nif isinstance(color, str):\nself.setNamedColor(color)\nelse:\nself.setRgb(*color)\n@classmethod\ndef from_cmyk(cls, c: float, m: float, y: float, k: float, a: float = 1.0) -&gt; Self:\nreturn cls(cls.fromCmykF(c, m, y, k, a))\n@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, a: float = 1.0) -&gt; Self:\nreturn cls(cls.fromHsvF(h, s, v, a))\n# @classmethod\n# def interpolate_color(\n#     cls,\n#     start: QtGui.QColor,\n#     end: QtGui.QColor,\n#     percent: int,\n#     colorspace: SpecStr | QtGui.QColor.Spec = \"rgb\",\n# ) -&gt; Self:\n#     \"\"\"Get an interpolated color value.\n#     Args:\n#         start: The start color.\n#         end: The end color.\n#         percent: Which value to get (0 - 100)\n#         colorspace: The desired interpolation color system. If None, take\n#                     system from start color.\n#     Return:\n#         The interpolated QColor, with the same spec as the given start color.\n#     \"\"\"\n#     def _get_color(colorspace, start, end):\n#         out = cls()\n#         match colorspace:\n#             case \"rgb\":\n#                 components = helpers.get_color_percentage(\n#                     start.getRgb(), end.getRgb(), percent  # type: ignore\n#                 )\n#                 out.setRgb(*components)\n#             case \"hsv\":\n#                 components = helpers.get_color_percentage(\n#                     start.getHsv(), end.getHsv(), percent  # type: ignore\n#                 )\n#                 out.setHsv(*components)\n#             case \"hsl\":\n#                 components = helpers.get_color_percentage(\n#                     start.getHsl(), end.getHsl(), percent  # type: ignore\n#                 )\n#                 out.setHsl(*components)\n#         return out\n#     match colorspace:\n#         case None:\n#             colorspace = SPEC.inverse[start.spec()]\n#             color = _get_color(colorspace, start, end)\n#         case str() | QtGui.QColor.Spec():\n#             colorspace = SPEC.get_str_value(colorspace)\n#             color = _get_color(colorspace, start, end)\n#         case _:\n#             raise ValueError(\"Invalid colorspace!\")\n#     return cls(color.convert_to(colorspace))\n@classmethod\ndef interpolate_color(\ncls,\nstart: QtGui.QColor,\nend: QtGui.QColor,\npercent: int,\ncolorspace: SpecStr | None = \"rgb\",\n) -&gt; Self:\n\"\"\"Get an interpolated color value.\n        Args:\n            start: The start color.\n            end: The end color.\n            percent: Which value to get (0 - 100)\n            colorspace: The desired interpolation color system,\n                        QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)\n                        If None, start is used except when percent is 100.\n        Return:\n            The interpolated QColor, with the same spec as the given start color.\n        \"\"\"\nif colorspace is None:\nreturn cls(*end.getRgb()) if percent == 100 else cls(*start.getRgb())\nout = cls()\nmatch colorspace:\ncase \"rgb\":\ncomponents = helpers.get_color_percentage(\nstart.getRgb(), end.getRgb(), percent  # type: ignore\n)\nout.setRgb(*components)\ncase \"hsv\":\ncomponents = helpers.get_color_percentage(\nstart.getHsv(), end.getHsv(), percent  # type: ignore\n)\nout.setHsv(*components)\ncase \"hsl\":\ncomponents = helpers.get_color_percentage(\nstart.getHsl(), end.getHsl(), percent  # type: ignore\n)\nout.setHsl(*components)\ncase _:\nraise ValueError(\"Invalid colorspace!\")\nreturn cls(out.convertTo(start.spec()))\ndef is_dark(self) -&gt; bool:\n\"\"\"Check whether a color is 'dark'.\"\"\"\nreturn self.lightness() &lt; 128\ndef get_spec(self) -&gt; SpecStr:\nreturn SPEC.inverse[self.spec()]\ndef convert_to(self, spec: SpecStr) -&gt; Self:\n# return Color(self.convertTo(SPEC[spec]))\ncolor = type(self)()\nmatch spec:\ncase \"rgb\":\nrgb = self.getRgb()\ncolor.setRgb(*rgb)\ncase \"hsv\":\nhsv = self.getHsv()\ncolor.setHsv(*hsv)\ncase \"cmyk\":\ncmyk = self.getCmyk()\ncolor.setCmyk(*cmyk)\ncase \"hsl\":\nhsl = self.getHsl()\ncolor.setHsl(*hsl)\ncase \"extended_rgb\":\nergb = self.getRgbF()\ncolor.setRgbF(*ergb)\nreturn color\ndef get_name(self, name_format: NameStr = \"hex_argb\") -&gt; str:\nmatch name_format:\ncase \"svg_rgb\" | \"svg_argb\" if not self.isValid():\nreturn 'fill=\"\"'\ncase \"svg_rgb\":\nreturn f'fill=\"rgb({self.red()}, {self.green()}, {self.blue()})\"'\ncase \"svg_argb\":\nfill_str = f\"rgb({self.red()}, {self.green()}, {self.blue()})\"\nreturn f'fill=\"{fill_str}\" fill-opacity=\"{self.alpha()}\"'\ncase \"qcss_argb\" | \"qcss_rgb\":\nreturn self.get_css(fmt=\"rgba\" if name_format == \"qcss_argb\" else \"rgb\")\ncase _ if name_format in NAME_FORMAT:\nreturn self.name(NAME_FORMAT[name_format])\ncase _:\nraise ValueError(name_format)\ndef get_css(self, fmt: Literal[\"rgb\", \"rgba\", \"hsva\", \"hsla\"] | None = None) -&gt; str:\ncss_format = fmt or self.spec()\nmatch css_format:\ncase self.Spec.Rgb | \"rgba\":\nstring = \", \".join([str(i) for i in self.getRgb()])\nreturn f\"rgba({string})\"\ncase self.Spec.Hsv | \"hsva\":\nstring = \", \".join([str(i) for i in self.getHsv()])\nreturn f\"hsva({string})\"\ncase self.Spec.Hsl | \"hsla\":\nstring = \", \".join([str(i) for i in self.getHsl()])\nreturn f\"hsla({string})\"\ncase \"rgb\":\nreturn f\"rgb({self.red()}, {self.green()}, {self.blue()})\"\ncase _:\nraise ValueError(css_format)\ndef as_qt(self) -&gt; QtGui.QColor:\nreturn self.convertTo(self.spec())\ndef inverted(self, invert_alpha: bool = False) -&gt; Self:\nreturn type(self)(\n255 - self.red(),\n255 - self.green(),\n255 - self.blue(),\n255 - self.alpha() if invert_alpha else self.alpha(),\n)\ndef drift(self, factor: int = 1.0) -&gt; Self:\n\"\"\"Return color that is lighter or darker than the base color.\"\"\"\nCls = type(self)\nif self == Color(\"#000000\"):\nreturn Cls(Color(\"#050505\").lighter(int(factor * 100)))\nelif self.lightness() &gt; 128:\nreturn Cls(self.darker(int(factor * 100)))\nelse:\nreturn Cls(self.lighter(int(factor * 100)))\n</code></pre>"},{"location":"qt_modules/gui/Color.html#prettyqt.gui.color.Color.drift","title":"<code>drift(factor: int = 1.0) -&gt; Self</code>","text":"<p>Return color that is lighter or darker than the base color.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def drift(self, factor: int = 1.0) -&gt; Self:\n\"\"\"Return color that is lighter or darker than the base color.\"\"\"\nCls = type(self)\nif self == Color(\"#000000\"):\nreturn Cls(Color(\"#050505\").lighter(int(factor * 100)))\nelif self.lightness() &gt; 128:\nreturn Cls(self.darker(int(factor * 100)))\nelse:\nreturn Cls(self.lighter(int(factor * 100)))\n</code></pre>"},{"location":"qt_modules/gui/Color.html#prettyqt.gui.color.Color.interpolate_color","title":"<code>interpolate_color(start: QtGui.QColor, end: QtGui.QColor, percent: int, colorspace: SpecStr | None = 'rgb') -&gt; Self</code>  <code>classmethod</code>","text":"<p>Get an interpolated color value.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>QtGui.QColor</code> <p>The start color.</p> required <code>end</code> <code>QtGui.QColor</code> <p>The end color.</p> required <code>percent</code> <code>int</code> <p>Which value to get (0 - 100)</p> required <code>colorspace</code> <code>SpecStr | None</code> <p>The desired interpolation color system,         QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)         If None, start is used except when percent is 100.</p> <code>'rgb'</code> Return <p>The interpolated QColor, with the same spec as the given start color.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>@classmethod\ndef interpolate_color(\ncls,\nstart: QtGui.QColor,\nend: QtGui.QColor,\npercent: int,\ncolorspace: SpecStr | None = \"rgb\",\n) -&gt; Self:\n\"\"\"Get an interpolated color value.\n    Args:\n        start: The start color.\n        end: The end color.\n        percent: Which value to get (0 - 100)\n        colorspace: The desired interpolation color system,\n                    QColor::{Rgb,Hsv,Hsl} (from QColor::Spec enum)\n                    If None, start is used except when percent is 100.\n    Return:\n        The interpolated QColor, with the same spec as the given start color.\n    \"\"\"\nif colorspace is None:\nreturn cls(*end.getRgb()) if percent == 100 else cls(*start.getRgb())\nout = cls()\nmatch colorspace:\ncase \"rgb\":\ncomponents = helpers.get_color_percentage(\nstart.getRgb(), end.getRgb(), percent  # type: ignore\n)\nout.setRgb(*components)\ncase \"hsv\":\ncomponents = helpers.get_color_percentage(\nstart.getHsv(), end.getHsv(), percent  # type: ignore\n)\nout.setHsv(*components)\ncase \"hsl\":\ncomponents = helpers.get_color_percentage(\nstart.getHsl(), end.getHsl(), percent  # type: ignore\n)\nout.setHsl(*components)\ncase _:\nraise ValueError(\"Invalid colorspace!\")\nreturn cls(out.convertTo(start.spec()))\n</code></pre>"},{"location":"qt_modules/gui/Color.html#prettyqt.gui.color.Color.is_dark","title":"<code>is_dark() -&gt; bool</code>","text":"<p>Check whether a color is 'dark'.</p> Source code in <code>prettyqt\\gui\\color.py</code> <pre><code>def is_dark(self) -&gt; bool:\n\"\"\"Check whether a color is 'dark'.\"\"\"\nreturn self.lightness() &lt; 128\n</code></pre>"},{"location":"qt_modules/gui/Color.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260741456[\"gui.Color\"]\n  2103259601872[\"QtGui.QColor\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259601872 --&gt; 2103260741456\n  2103206874128 --&gt; 2103259601872\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/ColorSpace.html","title":"ColorSpace","text":"<p>Qt Base Class: QColorSpace</p> <p>Signature: <code>QColorSpace(self) -&gt; None QColorSpace(self, colorSpace: Union[PySide6.QtGui.QColorSpace, PySide6.QtGui.QColorSpace.NamedColorSpace]) -&gt; None QColorSpace(self, namedColorSpace: PySide6.QtGui.QColorSpace.NamedColorSpace) -&gt; None QColorSpace(self, primaries: PySide6.QtGui.QColorSpace.Primaries, gamma: float) -&gt; None QColorSpace(self, primaries: PySide6.QtGui.QColorSpace.Primaries, transferFunction: PySide6.QtGui.QColorSpace.TransferFunction, gamma: float = 0.0) -&gt; None QColorSpace(self, primaries: PySide6.QtGui.QColorSpace.Primaries, transferFunctionTable: Sequence[int]) -&gt; None QColorSpace(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redTransferFunctionTable: Sequence[int], greenTransferFunctionTable: Sequence[int], blueTransferFunctionTable: Sequence[int]) -&gt; None QColorSpace(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], transferFunction: PySide6.QtGui.QColorSpace.TransferFunction, gamma: float = 0.0) -&gt; None QColorSpace(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], transferFunctionTable: Sequence[int]) -&gt; None</code></p>"},{"location":"qt_modules/gui/ColorSpace.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QColorSpace</code></p> <p>Color space abstraction.</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>class ColorSpace(serializemixin.SerializeMixin, QtGui.QColorSpace):\n\"\"\"Color space abstraction.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef set_primaries(self, primaries: PrimariesStr | QtGui.QColorSpace.Primaries):\n\"\"\"Set primaries.\n        Args:\n            primaries: primaries to use\n        \"\"\"\nself.setPrimaries(PRIMARIES.get_enum_value(primaries))\ndef get_primaries(self) -&gt; PrimariesStr:\n\"\"\"Return current primaries.\n        Returns:\n            primaries\n        \"\"\"\nreturn PRIMARIES.inverse[self.primaries()]\ndef set_transfer_function(\nself,\nfn: TransformFunctionStr | QtGui.QColorSpace.TransferFunction,\ngamma: float = 0.0,\n):\n\"\"\"Set transfer function.\n        Args:\n            fn: transfer function to use\n            gamma: gamma value\n        \"\"\"\nself.setTransferFunction(TRANSFER_FUNCTION.get_enum_value(fn), gamma)\ndef get_transfer_function(self) -&gt; TransformFunctionStr:\n\"\"\"Return current transfer function.\n        Returns:\n            transfer function\n        \"\"\"\nreturn TRANSFER_FUNCTION.inverse[self.transferFunction()]\n</code></pre>"},{"location":"qt_modules/gui/ColorSpace.html#prettyqt.gui.colorspace.ColorSpace.get_primaries","title":"<code>get_primaries() -&gt; PrimariesStr</code>","text":"<p>Return current primaries.</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def get_primaries(self) -&gt; PrimariesStr:\n\"\"\"Return current primaries.\n    Returns:\n        primaries\n    \"\"\"\nreturn PRIMARIES.inverse[self.primaries()]\n</code></pre>"},{"location":"qt_modules/gui/ColorSpace.html#prettyqt.gui.colorspace.ColorSpace.get_transfer_function","title":"<code>get_transfer_function() -&gt; TransformFunctionStr</code>","text":"<p>Return current transfer function.</p> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def get_transfer_function(self) -&gt; TransformFunctionStr:\n\"\"\"Return current transfer function.\n    Returns:\n        transfer function\n    \"\"\"\nreturn TRANSFER_FUNCTION.inverse[self.transferFunction()]\n</code></pre>"},{"location":"qt_modules/gui/ColorSpace.html#prettyqt.gui.colorspace.ColorSpace.set_primaries","title":"<code>set_primaries(primaries: PrimariesStr | QtGui.QColorSpace.Primaries)</code>","text":"<p>Set primaries.</p> <p>Parameters:</p> Name Type Description Default <code>primaries</code> <code>PrimariesStr | QtGui.QColorSpace.Primaries</code> <p>primaries to use</p> required Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def set_primaries(self, primaries: PrimariesStr | QtGui.QColorSpace.Primaries):\n\"\"\"Set primaries.\n    Args:\n        primaries: primaries to use\n    \"\"\"\nself.setPrimaries(PRIMARIES.get_enum_value(primaries))\n</code></pre>"},{"location":"qt_modules/gui/ColorSpace.html#prettyqt.gui.colorspace.ColorSpace.set_transfer_function","title":"<code>set_transfer_function(fn: TransformFunctionStr | QtGui.QColorSpace.TransferFunction, gamma: float = 0.0)</code>","text":"<p>Set transfer function.</p> <p>Parameters:</p> Name Type Description Default <code>fn</code> <code>TransformFunctionStr | QtGui.QColorSpace.TransferFunction</code> <p>transfer function to use</p> required <code>gamma</code> <code>float</code> <p>gamma value</p> <code>0.0</code> Source code in <code>prettyqt\\gui\\colorspace.py</code> <pre><code>def set_transfer_function(\nself,\nfn: TransformFunctionStr | QtGui.QColorSpace.TransferFunction,\ngamma: float = 0.0,\n):\n\"\"\"Set transfer function.\n    Args:\n        fn: transfer function to use\n        gamma: gamma value\n    \"\"\"\nself.setTransferFunction(TRANSFER_FUNCTION.get_enum_value(fn), gamma)\n</code></pre>"},{"location":"qt_modules/gui/ColorSpace.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256727072[\"gui.ColorSpace\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259586512[\"QtGui.QColorSpace\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103256727072\n  140736120080256 --&gt; 2103255032912\n  2103259586512 --&gt; 2103256727072\n  2103206874128 --&gt; 2103259586512\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/ConicalGradient.html","title":"ConicalGradient","text":"<p>Qt Base Class: QConicalGradient</p> <p>Signature: <code>QConicalGradient(self) -&gt; None QConicalGradient(self, QConicalGradient: PySide6.QtGui.QConicalGradient) -&gt; None QConicalGradient(self, center: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], startAngle: float) -&gt; None QConicalGradient(self, cx: float, cy: float, startAngle: float) -&gt; None</code></p>"},{"location":"qt_modules/gui/ConicalGradient.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.GradientMixin</code>, <code>gui.QConicalGradient</code></p> <p>Used in combination with QBrush to specify a conical gradient brush.</p> Source code in <code>prettyqt\\gui\\conicalgradient.py</code> <pre><code>class ConicalGradient(gui.GradientMixin, gui.QConicalGradient):\n\"\"\"Used in combination with QBrush to specify a conical gradient brush.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_center(), self.angle())\ndef get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\ndef get_css(self) -&gt; str:\n\"\"\"Convert gradient to a CSS string. Can be used for stylesheets.\"\"\"\ncenter = self.center()\ncx, cy = center.x(), center.y()\nstops = self.stops()\nstops = \"\\n\".join(f\"    stop: {stop:f} {color.name()}\" for stop, color in stops)\nspread = self.get_spread()\nreturn (\n\"qconicalgradient(\\n\"\nf\"    cx: {cx}, cy: {cy}, angle: {self.angle()}, spread:{spread},\\n\"\nf\"{stops})\"\n)\n</code></pre>"},{"location":"qt_modules/gui/ConicalGradient.html#prettyqt.gui.conicalgradient.ConicalGradient.get_css","title":"<code>get_css() -&gt; str</code>","text":"<p>Convert gradient to a CSS string. Can be used for stylesheets.</p> Source code in <code>prettyqt\\gui\\conicalgradient.py</code> <pre><code>def get_css(self) -&gt; str:\n\"\"\"Convert gradient to a CSS string. Can be used for stylesheets.\"\"\"\ncenter = self.center()\ncx, cy = center.x(), center.y()\nstops = self.stops()\nstops = \"\\n\".join(f\"    stop: {stop:f} {color.name()}\" for stop, color in stops)\nspread = self.get_spread()\nreturn (\n\"qconicalgradient(\\n\"\nf\"    cx: {cx}, cy: {cy}, angle: {self.angle()}, spread:{spread},\\n\"\nf\"{stops})\"\n)\n</code></pre>"},{"location":"qt_modules/gui/ConicalGradient.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260752976[\"gui.ConicalGradient\"]\n  2103260725136[\"gui.GradientMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259584592[\"QtGui.QConicalGradient\"]\n  2103259545232[\"QtGui.QGradient\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260725136 --&gt; 2103260752976\n  140736120080256 --&gt; 2103260725136\n  2103259584592 --&gt; 2103260752976\n  2103259545232 --&gt; 2103259584592\n  2103206874128 --&gt; 2103259545232\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Cursor.html","title":"Cursor","text":"<p>Qt Base Class: QCursor</p> <p>Signature: <code>QCursor(self) -&gt; None QCursor(self, bitmap: Union[PySide6.QtGui.QBitmap, str], mask: Union[PySide6.QtGui.QBitmap, str], hotX: int = -1, hotY: int = -1) -&gt; None QCursor(self, cursor: Union[PySide6.QtGui.QCursor, PySide6.QtCore.Qt.CursorShape, PySide6.QtGui.QPixmap]) -&gt; None QCursor(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str], hotX: int = -1, hotY: int = -1) -&gt; None QCursor(self, shape: PySide6.QtCore.Qt.CursorShape) -&gt; None</code></p>"},{"location":"qt_modules/gui/Cursor.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QCursor</code></p> <p>Provides a mouse cursor with an arbitrary shape.</p> <p>This class is mainly used to create mouse cursors that are associated with particular widgets and to get and set the position of the mouse cursor. Qt has a number of standard cursor shapes, but you can also make custom cursor shapes based on a QBitmap, a mask and a hotspot. To associate a cursor with a widget, use <code>widget.set_cursor()</code>. To associate a cursor with all widgets (normally for a short period of time), use <code>GuiApplication.set_override_cursor()</code>. To set a cursor shape use <code>QCursor.setShape()</code> or use the QCursor constructor which takes the shape as argument, or you can use one of the predefined cursors defined in the <code>Qt.CursorShape</code> enum. If you want to create a cursor with your own bitmap, either use the QCursor constructor which takes a bitmap and a mask or the constructor which takes a pixmap as arguments. To set or get the position of the mouse cursor use the static methods <code>QCursor.pos()</code> and <code>QCursor.setPos()</code>.</p> <p>!!! note:     It is possible to create a QCursor before QGuiApplication,     but it is not useful except as a place-holder for a real QCursor     created after QGuiApplication.     Attempting to use a QCursor that was created before QGuiApplication will     result in a crash.</p> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>class Cursor(serializemixin.SerializeMixin, gui.QCursor):\n\"\"\"Provides a mouse cursor with an arbitrary shape.\n    This class is mainly used to create mouse cursors that are associated\n    with particular widgets and to get and set the position of the mouse cursor.\n    Qt has a number of standard cursor shapes, but you can also make custom cursor\n    shapes based on a QBitmap, a mask and a hotspot.\n    To associate a cursor with a widget, use `widget.set_cursor()`.\n    To associate a cursor with all widgets (normally for a short period of time),\n    use `GuiApplication.set_override_cursor()`.\n    To set a cursor shape use `QCursor.setShape()` or use the QCursor\n    constructor which takes the shape as argument, or you can use one of the\n    predefined cursors defined in the `Qt.CursorShape` enum.\n    If you want to create a cursor with your own bitmap,\n    either use the QCursor constructor which takes a bitmap and a mask\n    or the constructor which takes a pixmap as arguments.\n    To set or get the position of the mouse cursor use the\n    static methods `QCursor.pos()` and `QCursor.setPos()`.\n    !!! note:\n        It is possible to create a QCursor before QGuiApplication,\n        but it is not useful except as a place-holder for a real QCursor\n        created after QGuiApplication.\n        Attempting to use a QCursor that was created before QGuiApplication will\n        result in a crash.\n    \"\"\"\n@classmethod\ndef fake_mouse_move(cls):\ncls.setPos(cls.pos() + core.Point(0, 1))\ngui.GuiApplication.processEvents()\ncls.setPos(cls.pos() - core.Point(0, 1))\n@classmethod\ndef click(cls, key=constants.MouseButton.LeftButton):\nfrom prettyqt import widgets\napp = widgets.app()\nwidget = app.widgetAt(cls.pos())\nif widget is None:\nreturn\npos = cls.pos().toPointF()\nlocal = pos - widget.mapToGlobal(core.PointF(0, 0))\nlogger.info(f\"sending MouseClick events to {widget} at {local}\")\nevent = gui.QMouseEvent(\ncore.QEvent.Type.MouseButtonPress,\nlocal,\npos,\nkey,\nconstants.MouseButton.NoButton,\nconstants.KeyboardModifier(0),\n)\ncore.CoreApplication.sendEvent(widget, event)\nevent = gui.QMouseEvent(\ncore.QEvent.Type.MouseButtonRelease,\nlocal,\npos,\nkey,\nconstants.MouseButton.NoButton,\nconstants.KeyboardModifier(0),\n)\ncore.CoreApplication.sendEvent(widget, event)\ndef set_shape(self, shape: constants.CursorShapeStr):\n\"\"\"Set cursor shape.\n        Args:\n            shape: shape to use\n        \"\"\"\nself.setShape(constants.CURSOR_SHAPE.get_enum_value(shape))\ndef get_shape(self) -&gt; constants.CursorShapeStr:\n\"\"\"Return current cursor shape.\n        Returns:\n            cursor shape\n        \"\"\"\nreturn constants.CURSOR_SHAPE.inverse[self.shape()]\n@classmethod\ndef get_pos(cls) -&gt; core.Point:\nreturn core.Point(cls.pos())\n@classmethod\ndef set_pos(\ncls,\nwhere: Literal[\"screen\", \"current\"]\n| gui.QScreen\n| widgets.QWidget\n| core.QRect\n| core.QPoint\n| tuple[int, int]\n| tuple[int, int, int, int],\nhow: Literal[\n\"center\",\n\"top\",\n\"left\",\n\"bottom\",\n\"right\",\n\"top_left\",\n\"top_right\",\n\"bottom_left\",\n\"bottom_right\",\n] = \"center\",\nx_offset: int = 0,\ny_offset: int = 0,\nduration: int = 0,\n):\n\"\"\"Position cursor onto screen position / widget / window / screen.\n        Arguments:\n            where: where to position on\n            how: How to align\n            x_offset: additional x offset for final position\n            y_offset: additional y offset for final position\n            duration: movement time\n        \"\"\"\nmatch where:\ncase \"current\":\np = cls.pos()\ngeom = core.Rect(p, p)\ncase core.QPoint():\ngeom = core.Rect(where, where)\ncase (int(), int()):\np = core.Point(*where)\ngeom = core.Rect(p, p)\ncase (int(), int(), int(), int()):\ngeom = core.Rect(*where)\ncase core.QRect():\ngeom = where\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\ncase gui.QScreen():\ngeom = where.geometry()\ncase _ if hasattr(where, \"frameGeometry\"):  # avoiding to import widgets here\ngeom = where.frameGeometry()\ncase _:\nraise TypeError(where)\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top())\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom())\ncase \"left\":\nnew = core.Point(geom.left(), geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right(), geom.center().y())\ncase \"top_right\":\nnew = geom.topRight()\ncase \"top_left\":\nnew = geom.topLeft()\ncase \"bottom_right\":\nnew = geom.bottomRight()\ncase \"bottom_left\":\nnew = geom.bottomLeft()\ncase _:\nraise TypeError(how)\nnew_pos = core.Point(new.x() + x_offset, new.y() + y_offset)\nif duration &gt; 0:\nfrom prettyqt.animations import cursormoveanimation\ncls._cursor_animation = cursormoveanimation.CursorMoveAnimation(\nduration=duration, end=new_pos\n)\ncls._cursor_animation.start()\nelse:\ncls.setPos(new_pos)\n</code></pre>"},{"location":"qt_modules/gui/Cursor.html#prettyqt.gui.cursor.Cursor.get_shape","title":"<code>get_shape() -&gt; constants.CursorShapeStr</code>","text":"<p>Return current cursor shape.</p> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>def get_shape(self) -&gt; constants.CursorShapeStr:\n\"\"\"Return current cursor shape.\n    Returns:\n        cursor shape\n    \"\"\"\nreturn constants.CURSOR_SHAPE.inverse[self.shape()]\n</code></pre>"},{"location":"qt_modules/gui/Cursor.html#prettyqt.gui.cursor.Cursor.set_pos","title":"<code>set_pos(where: Literal['screen', 'current'] | gui.QScreen | widgets.QWidget | core.QRect | core.QPoint | tuple[int, int] | tuple[int, int, int, int], how: Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right'] = 'center', x_offset: int = 0, y_offset: int = 0, duration: int = 0)</code>  <code>classmethod</code>","text":"<p>Position cursor onto screen position / widget / window / screen.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>Literal['screen', 'current'] | gui.QScreen | widgets.QWidget | core.QRect | core.QPoint | tuple[int, int] | tuple[int, int, int, int]</code> <p>where to position on</p> required <code>how</code> <code>Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right']</code> <p>How to align</p> <code>'center'</code> <code>x_offset</code> <code>int</code> <p>additional x offset for final position</p> <code>0</code> <code>y_offset</code> <code>int</code> <p>additional y offset for final position</p> <code>0</code> <code>duration</code> <code>int</code> <p>movement time</p> <code>0</code> Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>@classmethod\ndef set_pos(\ncls,\nwhere: Literal[\"screen\", \"current\"]\n| gui.QScreen\n| widgets.QWidget\n| core.QRect\n| core.QPoint\n| tuple[int, int]\n| tuple[int, int, int, int],\nhow: Literal[\n\"center\",\n\"top\",\n\"left\",\n\"bottom\",\n\"right\",\n\"top_left\",\n\"top_right\",\n\"bottom_left\",\n\"bottom_right\",\n] = \"center\",\nx_offset: int = 0,\ny_offset: int = 0,\nduration: int = 0,\n):\n\"\"\"Position cursor onto screen position / widget / window / screen.\n    Arguments:\n        where: where to position on\n        how: How to align\n        x_offset: additional x offset for final position\n        y_offset: additional y offset for final position\n        duration: movement time\n    \"\"\"\nmatch where:\ncase \"current\":\np = cls.pos()\ngeom = core.Rect(p, p)\ncase core.QPoint():\ngeom = core.Rect(where, where)\ncase (int(), int()):\np = core.Point(*where)\ngeom = core.Rect(p, p)\ncase (int(), int(), int(), int()):\ngeom = core.Rect(*where)\ncase core.QRect():\ngeom = where\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\ncase gui.QScreen():\ngeom = where.geometry()\ncase _ if hasattr(where, \"frameGeometry\"):  # avoiding to import widgets here\ngeom = where.frameGeometry()\ncase _:\nraise TypeError(where)\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top())\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom())\ncase \"left\":\nnew = core.Point(geom.left(), geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right(), geom.center().y())\ncase \"top_right\":\nnew = geom.topRight()\ncase \"top_left\":\nnew = geom.topLeft()\ncase \"bottom_right\":\nnew = geom.bottomRight()\ncase \"bottom_left\":\nnew = geom.bottomLeft()\ncase _:\nraise TypeError(how)\nnew_pos = core.Point(new.x() + x_offset, new.y() + y_offset)\nif duration &gt; 0:\nfrom prettyqt.animations import cursormoveanimation\ncls._cursor_animation = cursormoveanimation.CursorMoveAnimation(\nduration=duration, end=new_pos\n)\ncls._cursor_animation.start()\nelse:\ncls.setPos(new_pos)\n</code></pre>"},{"location":"qt_modules/gui/Cursor.html#prettyqt.gui.cursor.Cursor.set_shape","title":"<code>set_shape(shape: constants.CursorShapeStr)</code>","text":"<p>Set cursor shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>constants.CursorShapeStr</code> <p>shape to use</p> required Source code in <code>prettyqt\\gui\\cursor.py</code> <pre><code>def set_shape(self, shape: constants.CursorShapeStr):\n\"\"\"Set cursor shape.\n    Args:\n        shape: shape to use\n    \"\"\"\nself.setShape(constants.CURSOR_SHAPE.get_enum_value(shape))\n</code></pre>"},{"location":"qt_modules/gui/Cursor.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260778896[\"gui.Cursor\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259583632[\"QtGui.QCursor\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260778896\n  140736120080256 --&gt; 2103255032912\n  2103259583632 --&gt; 2103260778896\n  2103206874128 --&gt; 2103259583632\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/DesktopServices.html","title":"DesktopServices","text":"<p>Qt Base Class: QDesktopServices</p> <p>Signature: <code>QDesktopServices(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/DesktopServices.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QDesktopServices</code></p> <p>Methods for accessing common desktop services.</p> Source code in <code>prettyqt\\gui\\desktopservices.py</code> <pre><code>class DesktopServices(gui.QDesktopServices):\n\"\"\"Methods for accessing common desktop services.\"\"\"\n@classmethod\ndef open_url(cls, location: datatypes.PathType | datatypes.UrlType) -&gt; bool:\nif not isinstance(location, core.QUrl):\nlocation = core.Url.from_user_input(os.fspath(location))\nreturn cls.openUrl(location)\n</code></pre>"},{"location":"qt_modules/gui/DesktopServices.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256701152[\"gui.DesktopServices\"]\n  2103259582672[\"QtGui.QDesktopServices\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259582672 --&gt; 2103256701152\n  2103206874128 --&gt; 2103259582672\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/DoubleValidator.html","title":"DoubleValidator","text":"<p>Qt Base Class: QDoubleValidator</p> <p>Signature: <code>QDoubleValidator(self, bottom: float, top: float, decimals: int, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QDoubleValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/DoubleValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.ValidatorMixin</code>, <code>gui.QDoubleValidator</code></p> <p>Range checking of floating-point numbers.</p> Source code in <code>prettyqt\\gui\\doublevalidator.py</code> <pre><code>class DoubleValidator(gui.ValidatorMixin, gui.QDoubleValidator):\n\"\"\"Range checking of floating-point numbers.\"\"\"\nID = \"double\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setLocale(core.Locale(\"en-En\"))\ndef __repr__(self):\nreturn get_repr(self, self.bottom(), self.top(), self.decimals())\ndef __reduce__(self):\nreturn type(self), (self.bottom(), self.top(), self.decimals()), None\ndef __eq__(self, other: object):\nreturn (\n(\nself.bottom() == other.bottom()\nand self.top() == other.top()\nand self.decimals() == other.decimals()\n)\nif isinstance(other, type(self))\nelse False\n)\ndef set_range(\nself, start: float | None, end: float | None, decimals: int | None = None\n):\nif decimals is None:\ndecimals = -1\nif start is None:\nstart = -float(\"inf\")\nif end is None:\nend = float(\"inf\")\nself.setRange(start, end, decimals)\n</code></pre>"},{"location":"qt_modules/gui/DoubleValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260724176[\"gui.DoubleValidator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260800016[\"QtGui.QDoubleValidator\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260958416 --&gt; 2103260724176\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260800016 --&gt; 2103260724176\n  2103260802896 --&gt; 2103260800016\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/DoubleValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>bottom</code> double <code>top</code> double <code>decimals</code> int <code>notation</code> QDoubleValidator::Notation"},{"location":"qt_modules/gui/Drag.html","title":"Drag","text":"<p>Qt Base Class: QDrag</p> <p>Signature: <code>QDrag(self, dragSource: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/gui/Drag.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>gui.QDrag</code></p> <p>Support for MIME-based drag and drop data transfer.</p> Source code in <code>prettyqt\\gui\\drag.py</code> <pre><code>class Drag(core.ObjectMixin, gui.QDrag):\n\"\"\"Support for MIME-based drag and drop data transfer.\"\"\"\ndef get_pixmap(self) -&gt; gui.Pixmap:\nreturn gui.Pixmap(self.pixmap())\ndef get_default_action(self) -&gt; constants.DropActionStr:\nreturn constants.DROP_ACTION.inverse[self.defaultAction()]\ndef get_drag_cursor(\nself, action: constants.DropActionStr | constants.DropAction\n) -&gt; gui.Pixmap:\npx = self.dragCursor(constants.DROP_ACTION.get_enum_value(action))\nreturn gui.Pixmap(px)\ndef set_drag_cursor(\nself,\ncursor: gui.QPixmap,\naction: constants.DropActionStr | constants.DropAction,\n):\nself.setDragCursor(cursor, constants.DROP_ACTION.get_enum_value(action))\ndef get_supported_actions(self) -&gt; list[constants.DropActionStr]:\nreturn constants.DROP_ACTION.get_list(self.supportedActions())\ndef main_loop(\nself,\nsupported_actions: Iterable[constants.DropActionStr | constants.DropAction]\n| None = None,\ndefault_drop_action: constants.DropActionStr | constants.DropAction | None = None,\n) -&gt; constants.DropActionStr:\nsupported_actions = supported_actions or [constants.DROP_ACTION[\"move\"]]\nflag = constants.DropAction(0)\nfor i in supported_actions:\nflag |= constants.DROP_ACTION.get_enum_value(i)\ndefault_action = constants.DROP_ACTION.get_enum_value(default_drop_action)\nresult = super().exec(flag, default_action)\nreturn constants.DROP_ACTION.inverse[result]\n</code></pre>"},{"location":"qt_modules/gui/Drag.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260944016[\"gui.Drag\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260867216[\"QtGui.QDrag\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103260944016\n  140736120080256 --&gt; 2103255067472\n  2103260867216 --&gt; 2103260944016\n  2103254677056 --&gt; 2103260867216\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Drag.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/Font.html","title":"Font","text":"<p>Qt Base Class: QFont</p> <p>Signature: <code>QFont(self) -&gt; None QFont(self, families: Sequence[str], pointSize: int = -1, weight: int = -1, italic: bool = False) -&gt; None QFont(self, family: str, pointSize: int = -1, weight: int = -1, italic: bool = False) -&gt; None QFont(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -&gt; None QFont(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]], pd: PySide6.QtGui.QPaintDevice) -&gt; None</code></p>"},{"location":"qt_modules/gui/Font.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QFont</code></p> <p>Specifies a query for a font used for drawing text.</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>class Font(gui.QFont):\n\"\"\"Specifies a query for a font used for drawing text.\"\"\"\ndef __repr__(self):\nreturn get_repr(\nself, self.family(), self.pointSize(), self.weight(), self.italic()\n)\ndef __getstate__(self):\nreturn dict(\nfamily=self.family(),\npointsize=self.pointSize(),\nweight=self.weight(),\nitalic=self.italic(),\n)\ndef __setstate__(self, state):\nself.setFamily(state[\"family\"])\nif state[\"pointsize\"] &gt; -1:\nself.setPointSize(state[\"pointsize\"])\nself.setWeight(state[\"weight\"])\nself.setItalic(state[\"italic\"])\n@property\ndef _family(self) -&gt; str:\nreturn self.family()\n__match_args__ = (\"_family\",)\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.__getstate__()\n@property\ndef metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self)\ndef set_size(self, size: int):\nself.setPointSize(size)\n@classmethod\ndef mono(cls, size=8, as_qt: bool = False) -&gt; Self:\nmatch sys.platform:\ncase \"win32\":\nfont = \"Consolas\"\ncase \"darwin\":\nfont = \"Menlo\"\ncase _:\nfont = \"Monospace\"\nif as_qt:\nreturn gui.QFont(font)\nelse:\nreturn cls(font, size)\n# font.setStyleHint()\ndef scaled(self, factor: float) -&gt; Self:\nscaled = type(self)(self)\nif self.pointSizeF() != -1:\nscaled.setPointSizeF(self.pointSizeF() * factor)\nelif self.pixelSize() != -1:\nscaled.setPixelSize(int(self.pixelSize() * factor))\nreturn scaled\ndef set_style_hint(self, hint: StyleHintStr | gui.QFont.StyleHint):\n\"\"\"Set the style hint.\n        Args:\n            hint: style hint\n        \"\"\"\nself.setStyleHint(STYLE_HINTS.get_enum_value(hint))\ndef set_weight(self, weight: WeightStr | gui.QFont.Weight):\n\"\"\"Set the font weight.\n        Args:\n            weight: font weight\n        \"\"\"\nself.setWeight(WEIGHT.get_enum_value(weight))\ndef get_weight(self) -&gt; WeightStr:\n\"\"\"Get current font weight.\n        Returns:\n            current font weight\n        \"\"\"\nreturn WEIGHT.inverse[self.weight()]\ndef set_capitalization(\nself, capitalization: CapitalizationStr | gui.Font.Capitalization\n):\n\"\"\"Set the font capitalization.\n        Args:\n            capitalization: font capitalization\n        \"\"\"\nself.setCapitalization(CAPITALIZATION.get_enum_value(capitalization))\ndef get_capitalization(self) -&gt; CapitalizationStr:\n\"\"\"Get current font capitalization.\n        Returns:\n            current font capitalization\n        \"\"\"\nreturn CAPITALIZATION.inverse[self.capitalization()]\ndef set_hinting_preference(\nself, preference: HintingPreferenceStr | gui.Font.HintingPreference\n):\n\"\"\"Set the hinting preference.\n        Args:\n            preference: hinting preference\n        \"\"\"\nself.setHintingPreference(HINTING_PREFERENCE.get_enum_value(preference))\ndef get_hinting_preference(self) -&gt; HintingPreferenceStr:\n\"\"\"Get current hinting preference.\n        Returns:\n            current hinting preference\n        \"\"\"\nreturn HINTING_PREFERENCE.inverse[self.hintingPreference()]\ndef set_letter_spacing(\nself, typ: SpacingTypeStr | gui.Font.SpacingType, spacing: float\n):\n\"\"\"Set the letter spacing.\n        Args:\n            typ: letter spacing type\n            spacing: spacing\n        \"\"\"\nself.setLetterSpacing(SPACING_TYPE.get_enum_value(typ), spacing)\ndef get_letter_spacing_type(self) -&gt; SpacingTypeStr:\n\"\"\"Get current letter spacing type.\n        Returns:\n            current letter spacing type\n        \"\"\"\nreturn SPACING_TYPE.inverse[self.letterSpacingType()]\ndef set_style(self, style: StyleStr | gui.Font.Style):\n\"\"\"Set the font style.\n        Args:\n            style: font style\n        \"\"\"\nself.setStyle(STYLE.get_enum_value(style))\ndef get_style(self) -&gt; StyleStr:\n\"\"\"Get current font style.\n        Returns:\n            current font style\n        \"\"\"\nreturn STYLE.inverse[self.style()]\ndef set_family(self, family: str, fallback: str | None = None):\n\"\"\"Set the font family.\n        Args:\n            family: font family\n            fallback: fallback font family\n        \"\"\"\nself.setFamily(family)\nfont_info = gui.FontInfo(self)\nif fallback is not None and font_info.family() != family:\nself.setFamily(fallback)\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.get_capitalization","title":"<code>get_capitalization() -&gt; CapitalizationStr</code>","text":"<p>Get current font capitalization.</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_capitalization(self) -&gt; CapitalizationStr:\n\"\"\"Get current font capitalization.\n    Returns:\n        current font capitalization\n    \"\"\"\nreturn CAPITALIZATION.inverse[self.capitalization()]\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.get_hinting_preference","title":"<code>get_hinting_preference() -&gt; HintingPreferenceStr</code>","text":"<p>Get current hinting preference.</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_hinting_preference(self) -&gt; HintingPreferenceStr:\n\"\"\"Get current hinting preference.\n    Returns:\n        current hinting preference\n    \"\"\"\nreturn HINTING_PREFERENCE.inverse[self.hintingPreference()]\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.get_letter_spacing_type","title":"<code>get_letter_spacing_type() -&gt; SpacingTypeStr</code>","text":"<p>Get current letter spacing type.</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_letter_spacing_type(self) -&gt; SpacingTypeStr:\n\"\"\"Get current letter spacing type.\n    Returns:\n        current letter spacing type\n    \"\"\"\nreturn SPACING_TYPE.inverse[self.letterSpacingType()]\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.get_style","title":"<code>get_style() -&gt; StyleStr</code>","text":"<p>Get current font style.</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_style(self) -&gt; StyleStr:\n\"\"\"Get current font style.\n    Returns:\n        current font style\n    \"\"\"\nreturn STYLE.inverse[self.style()]\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.get_weight","title":"<code>get_weight() -&gt; WeightStr</code>","text":"<p>Get current font weight.</p> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def get_weight(self) -&gt; WeightStr:\n\"\"\"Get current font weight.\n    Returns:\n        current font weight\n    \"\"\"\nreturn WEIGHT.inverse[self.weight()]\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_capitalization","title":"<code>set_capitalization(capitalization: CapitalizationStr | gui.Font.Capitalization)</code>","text":"<p>Set the font capitalization.</p> <p>Parameters:</p> Name Type Description Default <code>capitalization</code> <code>CapitalizationStr | gui.Font.Capitalization</code> <p>font capitalization</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_capitalization(\nself, capitalization: CapitalizationStr | gui.Font.Capitalization\n):\n\"\"\"Set the font capitalization.\n    Args:\n        capitalization: font capitalization\n    \"\"\"\nself.setCapitalization(CAPITALIZATION.get_enum_value(capitalization))\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_family","title":"<code>set_family(family: str, fallback: str | None = None)</code>","text":"<p>Set the font family.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>str</code> <p>font family</p> required <code>fallback</code> <code>str | None</code> <p>fallback font family</p> <code>None</code> Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_family(self, family: str, fallback: str | None = None):\n\"\"\"Set the font family.\n    Args:\n        family: font family\n        fallback: fallback font family\n    \"\"\"\nself.setFamily(family)\nfont_info = gui.FontInfo(self)\nif fallback is not None and font_info.family() != family:\nself.setFamily(fallback)\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_hinting_preference","title":"<code>set_hinting_preference(preference: HintingPreferenceStr | gui.Font.HintingPreference)</code>","text":"<p>Set the hinting preference.</p> <p>Parameters:</p> Name Type Description Default <code>preference</code> <code>HintingPreferenceStr | gui.Font.HintingPreference</code> <p>hinting preference</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_hinting_preference(\nself, preference: HintingPreferenceStr | gui.Font.HintingPreference\n):\n\"\"\"Set the hinting preference.\n    Args:\n        preference: hinting preference\n    \"\"\"\nself.setHintingPreference(HINTING_PREFERENCE.get_enum_value(preference))\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_letter_spacing","title":"<code>set_letter_spacing(typ: SpacingTypeStr | gui.Font.SpacingType, spacing: float)</code>","text":"<p>Set the letter spacing.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>SpacingTypeStr | gui.Font.SpacingType</code> <p>letter spacing type</p> required <code>spacing</code> <code>float</code> <p>spacing</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_letter_spacing(\nself, typ: SpacingTypeStr | gui.Font.SpacingType, spacing: float\n):\n\"\"\"Set the letter spacing.\n    Args:\n        typ: letter spacing type\n        spacing: spacing\n    \"\"\"\nself.setLetterSpacing(SPACING_TYPE.get_enum_value(typ), spacing)\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_style","title":"<code>set_style(style: StyleStr | gui.Font.Style)</code>","text":"<p>Set the font style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>StyleStr | gui.Font.Style</code> <p>font style</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_style(self, style: StyleStr | gui.Font.Style):\n\"\"\"Set the font style.\n    Args:\n        style: font style\n    \"\"\"\nself.setStyle(STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_style_hint","title":"<code>set_style_hint(hint: StyleHintStr | gui.QFont.StyleHint)</code>","text":"<p>Set the style hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>StyleHintStr | gui.QFont.StyleHint</code> <p>style hint</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_style_hint(self, hint: StyleHintStr | gui.QFont.StyleHint):\n\"\"\"Set the style hint.\n    Args:\n        hint: style hint\n    \"\"\"\nself.setStyleHint(STYLE_HINTS.get_enum_value(hint))\n</code></pre>"},{"location":"qt_modules/gui/Font.html#prettyqt.gui.font.Font.set_weight","title":"<code>set_weight(weight: WeightStr | gui.QFont.Weight)</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>WeightStr | gui.QFont.Weight</code> <p>font weight</p> required Source code in <code>prettyqt\\gui\\font.py</code> <pre><code>def set_weight(self, weight: WeightStr | gui.QFont.Weight):\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    \"\"\"\nself.setWeight(WEIGHT.get_enum_value(weight))\n</code></pre>"},{"location":"qt_modules/gui/Font.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260760656[\"gui.Font\"]\n  2103259537552[\"QtGui.QFont\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259537552 --&gt; 2103260760656\n  2103206874128 --&gt; 2103259537552\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/FontDatabase.html","title":"FontDatabase","text":"<p>Qt Base Class: QFontDatabase</p> <p>Signature: <code>QFontDatabase(self) -&gt; None QFontDatabase(self, QFontDatabase: PySide6.QtGui.QFontDatabase) -&gt; None</code></p>"},{"location":"qt_modules/gui/FontDatabase.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QFontDatabase</code></p> <p>Information about the fonts available in the underlying window system.</p> Source code in <code>prettyqt\\gui\\fontdatabase.py</code> <pre><code>class FontDatabase(QtGui.QFontDatabase):\n\"\"\"Information about the fonts available in the underlying window system.\"\"\"\nfont_paths: dict[str, int] = {}\n@classmethod\ndef add_fonts_from_folder(cls, path: datatypes.PathType):\npath = pathlib.Path(path)\nfor p in path.iterdir():\nif p.suffix.lower() in [\".ttf\", \".otf\"]:\nlogger.debug(f\"adding font {p!r} to database.\")\ncls.addApplicationFont(str(p))\n@classmethod\ndef add_font(cls, path: datatypes.PathType, ttf_hash: str | None = None) -&gt; int:\npath = pathlib.Path(path)\nfont_id = cls.addApplicationFont(str(path))\nif not cls.applicationFontFamilies(font_id):\nraise RuntimeError(\nf\"Font {path!r} appears to be empty. \"\n\"If you are on Windows 10, please read \"\n\"https://support.microsoft.com/\"\n\"en-us/kb/3053676\"\n)\nif ttf_hash is not None:\ncontent = path.read_bytes()\nif hashlib.md5(content).hexdigest() != ttf_hash:\nraise OSError(f\"Font is corrupt at: {path!r}\")\ncls.font_paths[str(path)] = font_id\nreturn font_id\n@classmethod\ndef remove_font(cls, font: datatypes.PathType | int):\nfont_id = font if isinstance(font, int) else cls.font_paths[str(font)]\ncls.removeApplicationFont(font_id)\n@classmethod\ndef get_system_font(cls, font_type: SystemFontStr | QtGui.QFontDatabase.SystemFont):\nreturn cls.systemFont(SYSTEM_FONT[font_type])\n</code></pre>"},{"location":"qt_modules/gui/FontDatabase.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260758736[\"gui.FontDatabase\"]\n  2103259543312[\"QtGui.QFontDatabase\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259543312 --&gt; 2103260758736\n  2103206874128 --&gt; 2103259543312\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/FontInfo.html","title":"FontInfo","text":"<p>Qt Base Class: QFontInfo</p> <p>Signature: <code>QFontInfo(self, arg__1: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -&gt; None QFontInfo(self, arg__1: Union[PySide6.QtGui.QFontInfo, PySide6.QtGui.QFont]) -&gt; None</code></p>"},{"location":"qt_modules/gui/FontInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QFontInfo</code></p> <p>General information about fonts.</p> Source code in <code>prettyqt\\gui\\fontinfo.py</code> <pre><code>class FontInfo(gui.QFontInfo):\n\"\"\"General information about fonts.\"\"\"\ndef get_style_hint(self) -&gt; gui.font.StyleHintStr:\nreturn gui.font.STYLE_HINTS.inverse[self.styleHint()]\n</code></pre>"},{"location":"qt_modules/gui/FontInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260757776[\"gui.FontInfo\"]\n  2103259550032[\"QtGui.QFontInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259550032 --&gt; 2103260757776\n  2103206874128 --&gt; 2103259550032\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/FontMetrics.html","title":"FontMetrics","text":"<p>Qt Base Class: QFontMetrics</p> <p>Signature: <code>QFontMetrics(self, arg__1: PySide6.QtGui.QFontMetrics) -&gt; None QFontMetrics(self, arg__1: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -&gt; None QFontMetrics(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]], pd: PySide6.QtGui.QPaintDevice) -&gt; None</code></p>"},{"location":"qt_modules/gui/FontMetrics.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QFontMetrics</code></p> <p>Font metrics information.</p> Source code in <code>prettyqt\\gui\\fontmetrics.py</code> <pre><code>class FontMetrics(QtGui.QFontMetrics):\n\"\"\"Font metrics information.\"\"\"\ndef elided_text(\nself,\ntext: str,\nmode: constants.TextElideModeStr | constants.TextElideMode,\nwidth: int,\nflags=0,\n) -&gt; str:\nval = constants.TEXT_ELIDE_MODE.get_enum_value(mode)\nreturn self.elidedText(text, val, width, flags)\ndef get_bounding_rect(self, *args) -&gt; core.Rect:\nreturn core.Rect(self.boundingRect(*args))\ndef get_tight_bounding_rect(self, text: str) -&gt; core.Rect:\nreturn core.Rect(self.tightBoundingRect(text))\n</code></pre>"},{"location":"qt_modules/gui/FontMetrics.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260752016[\"gui.FontMetrics\"]\n  2103259546192[\"QtGui.QFontMetrics\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259546192 --&gt; 2103260752016\n  2103206874128 --&gt; 2103259546192\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/FontMetricsF.html","title":"FontMetricsF","text":"<p>Qt Base Class: QFontMetricsF</p> <p>Signature: <code>QFontMetricsF(self, arg__1: PySide6.QtGui.QFontMetrics) -&gt; None QFontMetricsF(self, arg__1: Union[PySide6.QtGui.QFontMetricsF, PySide6.QtGui.QFontMetrics]) -&gt; None QFontMetricsF(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -&gt; None QFontMetricsF(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]], pd: PySide6.QtGui.QPaintDevice) -&gt; None</code></p>"},{"location":"qt_modules/gui/FontMetricsF.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QFontMetricsF</code></p> <p>Font metrics information.</p> Source code in <code>prettyqt\\gui\\fontmetricsf.py</code> <pre><code>class FontMetricsF(QtGui.QFontMetricsF):\n\"\"\"Font metrics information.\"\"\"\ndef elided_text(\nself,\ntext: str,\nmode: constants.TextElideModeStr | constants.TextElideMode,\nwidth: float,\nflags=0,\n) -&gt; str:\nval = constants.TEXT_ELIDE_MODE.get_enum_value(mode)\nreturn self.elidedText(text, val, width, flags)\ndef get_bounding_rect(self, *args) -&gt; core.RectF:\nreturn core.RectF(self.boundingRect(*args))\ndef get_tight_bounding_rect(self, text: str) -&gt; core.RectF:\nreturn core.RectF(self.tightBoundingRect(text))\n</code></pre>"},{"location":"qt_modules/gui/FontMetricsF.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260756816[\"gui.FontMetricsF\"]\n  2103259542352[\"QtGui.QFontMetricsF\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259542352 --&gt; 2103260756816\n  2103206874128 --&gt; 2103259542352\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Gradient.html","title":"Gradient","text":"<p>Qt Base Class: QGradient</p> <p>Signature: <code>QGradient(self) -&gt; None QGradient(self, QGradient: Union[PySide6.QtGui.QGradient, PySide6.QtGui.QGradient.Preset]) -&gt; None QGradient(self, arg__1: PySide6.QtGui.QGradient.Preset) -&gt; None</code></p>"},{"location":"qt_modules/gui/Gradient.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GradientMixin</code>, <code>gui.QGradient</code></p> <p>Used in combination with QBrush to specify gradient fills.</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>class Gradient(GradientMixin, gui.QGradient):\n\"\"\"Used in combination with QBrush to specify gradient fills.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/Gradient.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260736656[\"gui.Gradient\"]\n  2103260725136[\"gui.GradientMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259545232[\"QtGui.QGradient\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260725136 --&gt; 2103260736656\n  140736120080256 --&gt; 2103260725136\n  2103259545232 --&gt; 2103260736656\n  2103206874128 --&gt; 2103259545232\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/GradientMixin.html","title":"GradientMixin","text":""},{"location":"qt_modules/gui/GradientMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>class GradientMixin:\ndef __setitem__(self, key: float, value: datatypes.ColorType):\nself.set_color_at(key, value)\ndef serialize(self) -&gt; dict[str, Any]:\nreturn dict(\ncoordinate_mode=self.get_coordinate_mode(),\nspread=self.get_spread(),\nstops=self.get_stops(),\n)\ndef set_color_at(self, key: float, color: datatypes.ColorType):\nsuper().setColorAt(key, colors.get_color(color))\ndef set_coordinate_mode(self, mode: CoordinateModeStr | gui.QGradient.CoordinateMode):\n\"\"\"Set the coordinate mode.\n        Args:\n            mode: coordinate mode\n        \"\"\"\nself.setCoordinateMode(COORDINATE_MODE.get_enum_value(mode))\ndef get_coordinate_mode(self) -&gt; CoordinateModeStr:\n\"\"\"Return current coordinate mode.\n        Returns:\n            coordinate mode\n        \"\"\"\nreturn COORDINATE_MODE.inverse[self.coordinateMode()]\ndef set_spread(self, method: SpreadStr | gui.QGradient.Spread):\n\"\"\"Set the spread method.\n        Args:\n            method: spread method\n        \"\"\"\nself.setSpread(SPREAD.get_enum_value(method))\ndef get_spread(self) -&gt; SpreadStr:\n\"\"\"Return current spread method.\n        Returns:\n            spread method\n        \"\"\"\nreturn SPREAD.inverse[self.spread()]\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return current gradient type.\n        Returns:\n            gradient type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\ndef get_stops(self) -&gt; list[tuple[float, gui.Color]]:\nreturn [(i, gui.Color(j)) for (i, j) in self.stops()]\n@classmethod\ndef for_palette(cls, palette: gui.Palette, group: gui.palette.GroupStr = \"active\"):\ngradient = cls()\nfor i, role_name in enumerate(gui.palette.ROLE):\ncolor = palette.get_color(role_name, group)\ngradient.setColorAt(i / len(gui.palette.ROLE), color)\nreturn gradient\ndef change_brightness(self, factor: float):\n# still need to streamline changing brightness across the framework...\n# color.lighter returns a lighter color when arg is &gt; 100 (same for darker)\nfactor = int(factor * 100)\nfor pos, color in grad.stops():\nif factor &gt; 0:\nself.setColorAt(pos, color.lighter(factor))\nelse:\nself.setColorAt(pos, color.darker(-factor))\n</code></pre> Name Children Inherits Gradientprettyqt.gui.gradient <ul><li>GradientMixin</li><li>QGradient</li></ul> LinearGradientprettyqt.gui.lineargradient <ul><li>GradientMixin</li><li>QLinearGradient</li></ul> RadialGradientprettyqt.gui.radialgradient <ul><li>GradientMixin</li><li>QRadialGradient</li></ul> ConicalGradientprettyqt.gui.conicalgradient <ul><li>GradientMixin</li><li>QConicalGradient</li></ul>"},{"location":"qt_modules/gui/GradientMixin.html#prettyqt.gui.gradient.GradientMixin.get_coordinate_mode","title":"<code>get_coordinate_mode() -&gt; CoordinateModeStr</code>","text":"<p>Return current coordinate mode.</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_coordinate_mode(self) -&gt; CoordinateModeStr:\n\"\"\"Return current coordinate mode.\n    Returns:\n        coordinate mode\n    \"\"\"\nreturn COORDINATE_MODE.inverse[self.coordinateMode()]\n</code></pre>"},{"location":"qt_modules/gui/GradientMixin.html#prettyqt.gui.gradient.GradientMixin.get_spread","title":"<code>get_spread() -&gt; SpreadStr</code>","text":"<p>Return current spread method.</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_spread(self) -&gt; SpreadStr:\n\"\"\"Return current spread method.\n    Returns:\n        spread method\n    \"\"\"\nreturn SPREAD.inverse[self.spread()]\n</code></pre>"},{"location":"qt_modules/gui/GradientMixin.html#prettyqt.gui.gradient.GradientMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return current gradient type.</p> Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return current gradient type.\n    Returns:\n        gradient type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/gui/GradientMixin.html#prettyqt.gui.gradient.GradientMixin.set_coordinate_mode","title":"<code>set_coordinate_mode(mode: CoordinateModeStr | gui.QGradient.CoordinateMode)</code>","text":"<p>Set the coordinate mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CoordinateModeStr | gui.QGradient.CoordinateMode</code> <p>coordinate mode</p> required Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def set_coordinate_mode(self, mode: CoordinateModeStr | gui.QGradient.CoordinateMode):\n\"\"\"Set the coordinate mode.\n    Args:\n        mode: coordinate mode\n    \"\"\"\nself.setCoordinateMode(COORDINATE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/gui/GradientMixin.html#prettyqt.gui.gradient.GradientMixin.set_spread","title":"<code>set_spread(method: SpreadStr | gui.QGradient.Spread)</code>","text":"<p>Set the spread method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>SpreadStr | gui.QGradient.Spread</code> <p>spread method</p> required Source code in <code>prettyqt\\gui\\gradient.py</code> <pre><code>def set_spread(self, method: SpreadStr | gui.QGradient.Spread):\n\"\"\"Set the spread method.\n    Args:\n        method: spread method\n    \"\"\"\nself.setSpread(SPREAD.get_enum_value(method))\n</code></pre>"},{"location":"qt_modules/gui/GradientMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260725136[\"gui.GradientMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260725136</code></pre>"},{"location":"qt_modules/gui/GuiApplication.html","title":"GuiApplication","text":"<p>Qt Base Class: QGuiApplication</p> <p>Signature: <code>QGuiApplication(self) -&gt; None QGuiApplication(self, arg__1: Sequence[str]) -&gt; None</code></p>"},{"location":"qt_modules/gui/GuiApplication.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GuiApplicationMixin</code>, <code>gui.QGuiApplication</code></p> <p>Manages the GUI application's control flow and main settings.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>class GuiApplication(GuiApplicationMixin, gui.QGuiApplication):\n\"\"\"Manages the GUI application's control flow and main settings.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/GuiApplication.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260777936[\"gui.GuiApplication\"]\n  2103260776976[\"gui.GuiApplicationMixin\"]\n  2103255110672[\"core.CoreApplicationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260919056[\"QtGui.QGuiApplication\"]\n  2103254798976[\"QtCore.QCoreApplication\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260776976 --&gt; 2103260777936\n  2103255110672 --&gt; 2103260776976\n  2103255067472 --&gt; 2103255110672\n  140736120080256 --&gt; 2103255067472\n  2103260919056 --&gt; 2103260777936\n  2103254798976 --&gt; 2103260919056\n  2103254677056 --&gt; 2103254798976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/GuiApplication.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>applicationName</code> QString <code>applicationVersion</code> QString <code>organizationName</code> QString <code>organizationDomain</code> QString <code>quitLockEnabled</code> bool <code>windowIcon</code> QIcon <code>applicationDisplayName</code> QString <code>desktopFileName</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>platformName</code> QString <code>quitOnLastWindowClosed</code> bool <code>primaryScreen</code> QScreen <code>window_icon_color</code> QString Global window icon color"},{"location":"qt_modules/gui/GuiApplicationMixin.html","title":"GuiApplicationMixin","text":""},{"location":"qt_modules/gui/GuiApplicationMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.CoreApplicationMixin</code></p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>class GuiApplicationMixin(core.CoreApplicationMixin):\npalette_changed = core.Signal(gui.Palette)\ndef __init__(self, *args, **kwargs):\nself._window_icon_color = \"darkcyan\"\nsuper().__init__(*args, **kwargs)\ndef event(self, e):\nmatch e.type():\ncase core.QEvent.Type.ApplicationPaletteChange:\nself.palette_changed.emit(gui.Palette(self.palette()))\nreturn super().event(e)\n@classmethod\n@contextlib.contextmanager\ndef override_cursor(cls, cursor: constants.CursorShapeStr):\ncls.set_override_cursor(cursor)\nyield cursor\ncls.restore_override_cursor()\n@classmethod\ndef set_override_cursor(cls, cursor: constants.CursorShapeStr):\ncrs = gui.Cursor(constants.CURSOR_SHAPE[cursor])\ncls.setOverrideCursor(crs)\n@classmethod\ndef restore_override_cursor(cls):\ncls.restoreOverrideCursor()\n@classmethod\ndef get_clipboard(cls) -&gt; gui.Clipboard:\nreturn gui.Clipboard(cls.clipboard())\n@classmethod\n@contextlib.contextmanager\ndef edit_palette(cls) -&gt; Iterator[gui.Palette]:\npalette = gui.Palette(cls.palette())\nyield palette\ncls.setPalette(palette)\n@classmethod\ndef find_window(cls, h_wnd: SupportsInt) -&gt; gui.QWindow:\nfor window in cls.topLevelWindows():\nif window and int(window.winId()) == int(h_wnd):\nreturn window\nreturn None\ndef set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection\n):\n\"\"\"Set layout direction.\n        Args:\n            direction: layout direction\n        \"\"\"\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\ndef get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n        Returns:\n            layout direction\n        \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n@classmethod\ndef set_high_dpi_scale_factor_rounding_policy(\ncls,\npolicy: constants.HighDpiScaleFactorRoundingPolicyStr\n| constants.HighDpiScaleFactorRoundingPolicy,\n):\n\"\"\"Set high dpi scale factor rounding policy.\n        Args:\n            policy: rounding policy\n        \"\"\"\ncls.setHighDpiScaleFactorRoundingPolicy(\nconstants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.get_enum_value(policy)\n)\n@classmethod\ndef get_high_dpi_scale_factor_rounding_policy(\ncls,\n) -&gt; constants.HighDpiScaleFactorRoundingPolicyStr:\n\"\"\"Get the current high dpi scale factor rounding policy.\n        Returns:\n            rounding policy\n        \"\"\"\nreturn constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.inverse[\ncls.highDpiScaleFactorRoundingPolicy()\n]\n@classmethod\ndef get_application_state(cls) -&gt; list[constants.ApplicationStateStr]:\n\"\"\"Get the current application state.\n        Returns:\n            application state\n        \"\"\"\nreturn [\nk\nfor k, v in constants.APPLICATION_STATES.items()\nif v &amp; cls.applicationState()  # type: ignore\n]\ndef get_primary_screen(self) -&gt; gui.Screen:\nreturn gui.Screen(self.primaryScreen())\ndef get_screen_at(self, point: datatypes.PointType) -&gt; gui.Screen:\np = datatypes.to_point(point)\nreturn gui.Screen(self.screenAt(p))\ndef get_screens(self) -&gt; list[gui.Screen]:\nreturn [gui.Screen(i) for i in self.screens()]\n@classmethod\ndef get_input_method(cls) -&gt; gui.InputMethod:\nreturn gui.InputMethod(cls.inputMethod())\n@classmethod\ndef copy_to_clipboard(cls, text: str):\n\"\"\"Sets clipboard to supplied text.\"\"\"\ncb = cls.clipboard()\ncb.clear(mode=cb.Mode.Clipboard)\ncb.setText(text, mode=cb.Mode.Clipboard)\n@classmethod\ndef get_font(cls) -&gt; gui.Font:\nreturn gui.Font(cls.font())\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the default window icon.\n        Args:\n            icon: icon to use\n        \"\"\"\ncolor = self.get_window_icon_color()\nicon = iconprovider.get_icon(icon, color=color)\nself.setWindowIcon(icon)\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.windowIcon()\nreturn None if icon.isNull() else gui.Icon(self.windowIcon())\n@classmethod\ndef set_palette(cls, palette: constants.ThemeStr | gui.QPalette):\nmatch palette:\ncase \"default\":\npal = gui.Palette()\ncase \"dark\":\npal = gui.Palette.create_dark_palette()\ncase _:\npal = palette\ncls.setPalette(pal)\n@classmethod\ndef get_keyboard_modifiers(cls) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(cls.keyboardModifiers())\n@classmethod\ndef query_keyboard_modifiers(cls) -&gt; list[constants.KeyboardModifierStr]:\nreturn constants.KEYBOARD_MODIFIERS.get_list(cls.queryKeyboardModifiers())\n@classmethod\ndef get_palette(cls) -&gt; gui.Palette:\nreturn gui.Palette(cls.palette())\ndef set_badge_number(self, number: int | None):\nself.setBadgeNumber(number or 0)\ndef set_progress_value(self, value: int, total: int = 100):\nwindows = self.topLevelWindows()\nif not windows:\nreturn None\nif sys.platform.startswith(\"win\"):\nfrom prettyqt.utils.platforms.windows import taskbaritem\nwindow_id = windows[0].winId()\ntb = taskbaritem.TaskBarItem(window_id)\ntb.set_progress_value(value, total)\ndef set_window_icon_color(self, color: datatypes.ColorType):\nself._window_icon_color = colors.get_color(color).name()\ndef get_window_icon_color(self):\nreturn self._window_icon_color\nwindow_icon_color = core.Property(\nstr,\nget_window_icon_color,\nset_window_icon_color,\ndoc=\"Global window icon color\",\n)\n</code></pre> Name Children Inherits GuiApplicationprettyqt.gui.guiapplication <ul><li>GuiApplicationMixin</li><li>QGuiApplication</li></ul> <code>ApplicationMixin</code>prettyqt.widgets.application <ul><li>Application</li></ul> <ul><li>GuiApplicationMixin</li></ul>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.copy_to_clipboard","title":"<code>copy_to_clipboard(text: str)</code>  <code>classmethod</code>","text":"<p>Sets clipboard to supplied text.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef copy_to_clipboard(cls, text: str):\n\"\"\"Sets clipboard to supplied text.\"\"\"\ncb = cls.clipboard()\ncb.clear(mode=cb.Mode.Clipboard)\ncb.setText(text, mode=cb.Mode.Clipboard)\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_application_state","title":"<code>get_application_state() -&gt; list[constants.ApplicationStateStr]</code>  <code>classmethod</code>","text":"<p>Get the current application state.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_application_state(cls) -&gt; list[constants.ApplicationStateStr]:\n\"\"\"Get the current application state.\n    Returns:\n        application state\n    \"\"\"\nreturn [\nk\nfor k, v in constants.APPLICATION_STATES.items()\nif v &amp; cls.applicationState()  # type: ignore\n]\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_high_dpi_scale_factor_rounding_policy","title":"<code>get_high_dpi_scale_factor_rounding_policy() -&gt; constants.HighDpiScaleFactorRoundingPolicyStr</code>  <code>classmethod</code>","text":"<p>Get the current high dpi scale factor rounding policy.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef get_high_dpi_scale_factor_rounding_policy(\ncls,\n) -&gt; constants.HighDpiScaleFactorRoundingPolicyStr:\n\"\"\"Get the current high dpi scale factor rounding policy.\n    Returns:\n        rounding policy\n    \"\"\"\nreturn constants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.inverse[\ncls.highDpiScaleFactorRoundingPolicy()\n]\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_high_dpi_scale_factor_rounding_policy","title":"<code>set_high_dpi_scale_factor_rounding_policy(policy: constants.HighDpiScaleFactorRoundingPolicyStr | constants.HighDpiScaleFactorRoundingPolicy)</code>  <code>classmethod</code>","text":"<p>Set high dpi scale factor rounding policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.HighDpiScaleFactorRoundingPolicyStr | constants.HighDpiScaleFactorRoundingPolicy</code> <p>rounding policy</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>@classmethod\ndef set_high_dpi_scale_factor_rounding_policy(\ncls,\npolicy: constants.HighDpiScaleFactorRoundingPolicyStr\n| constants.HighDpiScaleFactorRoundingPolicy,\n):\n\"\"\"Set high dpi scale factor rounding policy.\n    Args:\n        policy: rounding policy\n    \"\"\"\ncls.setHighDpiScaleFactorRoundingPolicy(\nconstants.HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the default window icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the default window icon.\n    Args:\n        icon: icon to use\n    \"\"\"\ncolor = self.get_window_icon_color()\nicon = iconprovider.get_icon(icon, color=color)\nself.setWindowIcon(icon)\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#prettyqt.gui.guiapplication.GuiApplicationMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr | constants.LayoutDirection)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr | constants.LayoutDirection</code> <p>layout direction</p> required Source code in <code>prettyqt\\gui\\guiapplication.py</code> <pre><code>def set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection\n):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    \"\"\"\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"qt_modules/gui/GuiApplicationMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260776976[\"gui.GuiApplicationMixin\"]\n  2103255110672[\"core.CoreApplicationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255110672 --&gt; 2103260776976\n  2103255067472 --&gt; 2103255110672\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/Icon.html","title":"Icon","text":"<p>Qt Base Class: QIcon</p> <p>Signature: <code>QIcon(self) -&gt; None QIcon(self, engine: PySide6.QtGui.QIconEngine) -&gt; None QIcon(self, fileName: str) -&gt; None QIcon(self, other: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -&gt; None QIcon(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -&gt; None</code></p>"},{"location":"qt_modules/gui/Icon.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QIcon</code></p> <p>Scalable icons in different modes and states.</p> Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>class Icon(serializemixin.SerializeMixin, gui.QIcon):\n\"\"\"Scalable icons in different modes and states.\"\"\"\ndef __repr__(self):\nreturn get_repr(self)\ndef __bool__(self):\nreturn not self.isNull()\ndef __getstate__(self):\npixmap = self.pixmap(256, 256)\nreturn bytes(gui.Pixmap(pixmap))\ndef __setstate__(self, ba):\npx = gui.Pixmap()\npx.__setstate__(ba)\nself.add_pixmap(px)\n@classmethod\ndef for_color(cls, color_str: str) -&gt; Self:\ncolor = gui.Color(color_str)\nbitmap = gui.Pixmap(16, 16)\nbitmap.fill(color)\nreturn cls(bitmap)\n@classmethod\ndef from_char(cls, char: str, background=\"black\", color=\"white\") -&gt; Self:\n\"\"\"Create a QIcon with a given character.\"\"\"\nicon = cls()\nfor size in (16, 32, 64):\npx = gui.Pixmap.create_char(\nchar, background=background, color=color, size=size\n)\nicon.addPixmap(px)\nreturn icon\n@classmethod\ndef from_image(cls, image: gui.QImage) -&gt; Self:\nreturn cls(gui.Pixmap.fromImage(image))\ndef get_available_sizes(\nself,\nmode: ModeStr | gui.QIcon.Mode = \"normal\",\nstate: StateStr | gui.QIcon.State = \"off\",\n) -&gt; list[core.Size]:\nm = MODE.get_enum_value(mode)\ns = STATE.get_enum_value(state)\nreturn [core.Size(i) for i in self.availableSizes(m, s)]\ndef add_pixmap(\nself,\ndata: core.QByteArray | gui.QPixmap | bytes,\nmode: ModeStr | gui.QIcon.Mode = \"normal\",\nstate: StateStr | gui.QIcon.State = \"off\",\n):\nif isinstance(data, bytes):\ndata = core.QByteArray(data)\nif isinstance(data, core.QByteArray):\npixmap = gui.QPixmap()\npixmap.loadFromData(data)\nelse:\npixmap = data\nself.addPixmap(pixmap, MODE.get_enum_value(mode), STATE.get_enum_value(state))\ndef get_pixmap(\nself,\nsize: datatypes.SizeType | int,\nmode: ModeStr | gui.QIcon.Mode = \"normal\",\nstate: StateStr | gui.QIcon.State = \"off\",\n) -&gt; gui.QPixmap:\nsz = datatypes.to_size(size)\nreturn self.pixmap(sz, MODE.get_enum_value(mode), STATE.get_enum_value(state))\ndef get_actual_size(\nself,\nsize: datatypes.SizeType,\nmode: ModeStr | gui.QIcon.Mode = \"normal\",\nstate: StateStr | gui.QIcon.State = \"off\",\n) -&gt; core.Size:\nsz = datatypes.to_size(size)\nm = MODE.get_enum_value(mode)\ns = STATE.get_enum_value(state)\nactual_size = self.actualSize(sz, m, s)\nreturn core.Size(actual_size)\n</code></pre>"},{"location":"qt_modules/gui/Icon.html#prettyqt.gui.icon.Icon.from_char","title":"<code>from_char(char: str, background: str = 'black', color: str = 'white') -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a QIcon with a given character.</p> Source code in <code>prettyqt\\gui\\icon.py</code> <pre><code>@classmethod\ndef from_char(cls, char: str, background=\"black\", color=\"white\") -&gt; Self:\n\"\"\"Create a QIcon with a given character.\"\"\"\nicon = cls()\nfor size in (16, 32, 64):\npx = gui.Pixmap.create_char(\nchar, background=background, color=color, size=size\n)\nicon.addPixmap(px)\nreturn icon\n</code></pre>"},{"location":"qt_modules/gui/Icon.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260917136[\"gui.Icon\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259360912[\"QtGui.QIcon\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260917136\n  140736120080256 --&gt; 2103255032912\n  2103259360912 --&gt; 2103260917136\n  2103206874128 --&gt; 2103259360912\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/IconEngine.html","title":"IconEngine","text":"<p>Qt Base Class: QIconEngine</p> <p>Signature: <code>QIconEngine(self) -&gt; None QIconEngine(self, other: PySide6.QtGui.QIconEngine) -&gt; None</code></p>"},{"location":"qt_modules/gui/IconEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QIconEngine</code></p> <p>Abstract base class for QIcon renderers.</p> Source code in <code>prettyqt\\gui\\iconengine.py</code> <pre><code>class IconEngine(serializemixin.SerializeMixin, gui.QIconEngine):\n\"\"\"Abstract base class for QIcon renderers.\"\"\"\ndef __repr__(self):\nreturn get_repr(self)\ndef __bool__(self):\nreturn not self.isNull()\ndef add_file(\nself,\npath: datatypes.PathType,\nsize: datatypes.SizeType,\nmode: gui.icon.ModeStr | gui.QIcon.Mode,\nstate: gui.icon.StateStr | gui.QIcon.State,\n):\nself.addFile(\nos.fspath(path),\ndatatypes.to_size(size),\ngui.icon.MODE.get_enum_value(mode),\ngui.icon.STATE.get_enum_value(state),\n)\ndef add_pixmap(\nself,\npixmap: gui.QPixmap,\nmode: gui.icon.ModeStr | gui.QIcon.Mode,\nstate: gui.icon.StateStr | gui.QIcon.State,\n):\nself.addPixmap(\npixmap,\ngui.icon.MODE.get_enum_value(mode),\ngui.icon.STATE.get_enum_value(state),\n)\ndef get_actual_size(\nself,\nsize: datatypes.SizeType,\nmode: gui.icon.ModeStr | gui.QIcon.Mode = \"normal\",\nstate: gui.icon.StateStr | gui.QIcon.State = \"off\",\n) -&gt; core.Size:\nreturn core.Size(\nself.actualSize(\ndatatypes.to_size(size),\ngui.icon.MODE.get_enum_value(mode),\ngui.icon.STATE.get_enum_value(state),\n)\n)\ndef get_available_sizes(\nself,\nmode: gui.icon.ModeStr | gui.QIcon.Mode = \"normal\",\nstate: gui.icon.StateStr | gui.QIcon.State = \"off\",\n) -&gt; list[core.Size]:\nreturn [\ncore.Size(i)\nfor i in self.availableSizes(\ngui.icon.MODE.get_enum_value(mode), gui.icon.STATE.get_enum_value(state)\n)\n]\ndef get_pixmap(\nself,\nsize: datatypes.SizeType,\nmode: gui.icon.ModeStr | gui.QIcon.Mode = \"normal\",\nstate: gui.icon.StateStr | gui.QIcon.State = \"off\",\nscale: float | None = None,\n) -&gt; gui.Pixmap:\nif scale is None:\nreturn gui.Pixmap(\nself.pixmap(\ndatatypes.to_size(size),\ngui.icon.MODE.get_enum_value(mode),\ngui.icon.STATE.get_enum_value(state),\n)\n)\nelse:\nreturn gui.Pixmap(\nself.scaledPixmap(\ndatatypes.to_size(size),\ngui.icon.MODE.get_enum_value(mode),\ngui.icon.STATE.get_enum_value(state),\nscale,\n)\n)\n</code></pre> Name Children Inherits <code>CharIconEngine</code>prettyqt.iconprovider.chariconengine <ul><li>IconEngine</li></ul>"},{"location":"qt_modules/gui/IconEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260952656[\"gui.IconEngine\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259549072[\"QtGui.QIconEngine\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260952656\n  140736120080256 --&gt; 2103255032912\n  2103259549072 --&gt; 2103260952656\n  2103206874128 --&gt; 2103259549072\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Image.html","title":"Image","text":"<p>Qt Base Class: QImage</p> <p>Signature: <code>QImage(self) -&gt; None QImage(self, arg__1: str, arg__2: int, arg__3: int, arg__4: PySide6.QtGui.QImage.Format) -&gt; None QImage(self, arg__1: str, arg__2: int, arg__3: int, arg__4: int, arg__5: PySide6.QtGui.QImage.Format) -&gt; None QImage(self, arg__1: Union[PySide6.QtGui.QImage, str]) -&gt; None QImage(self, data: bytes, width: int, height: int, bytesPerLine: int, format: PySide6.QtGui.QImage.Format, cleanupFunction: Optional[Callable] = None, cleanupInfo: Optional[int] = None) -&gt; None QImage(self, data: bytes, width: int, height: int, format: PySide6.QtGui.QImage.Format, cleanupFunction: Optional[Callable] = None, cleanupInfo: Optional[int] = None) -&gt; None QImage(self, fileName: Union[str, bytes, os.PathLike], format: Optional[bytes] = None) -&gt; None QImage(self, size: PySide6.QtCore.QSize, format: PySide6.QtGui.QImage.Format) -&gt; None QImage(self, width: int, height: int, format: PySide6.QtGui.QImage.Format) -&gt; None QImage(self, xpm: Iterable) -&gt; None</code></p>"},{"location":"qt_modules/gui/Image.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code>, <code>gui.QImage</code></p> <p>Hardware-independent image representation with direct access to the pixel data.</p> Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>class Image(serializemixin.SerializeMixin, gui.PaintDeviceMixin, gui.QImage):\n\"\"\"Hardware-independent image representation with direct access to the pixel data.\"\"\"\ndef __setitem__(self, index: tuple[int, int], value):\nself.setPixel(index[0], index[1], value)\ndef __getitem__(self, index: tuple[int, int]) -&gt; int | list[int]:\nmatch index:\ncase int() as row, int() as col:\nreturn self.pixel(row, col)\ncase (row, col):\nrowcount = self.height()\ncolcount = self.width()\nreturn [\nself.pixel(i, j)\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount)\n]\ncase _:\nraise TypeError(index)\n@classmethod\ndef from_ndarray(cls, arr) -&gt; Self:\nimport numpy as np\nheight, width, bytes_per_component = arr.shape\nif arr.dtype in {np.float32, np.float64}:\narr = (255 * arr).round()\narr = arr.astype(np.uint8)\nreturn cls(\narr.data,\nwidth,\nheight,\nbytes_per_component * width,\ngui.QImage.Format.Format_RGB888,\n)\ndef to_ndarray(\nself, fmt: FormatStr | gui.QImage.Format = \"rgb888\", channels: int = 3\n):\nimport numpy as np\nqimage = self.convert_to_format(fmt)\nwidth = qimage.width()\nheight = qimage.height()\nptr = qimage.constBits()\narray = np.array(ptr).reshape(height, width, channels)  # Copies the data\nreturn array\n@classmethod\ndef from_pil(cls, image) -&gt; Self:\n# from https://github.com/python-pillow/Pillow/blob/main/src/PIL/ImageQt.py\nfrom PIL import ImageQt\ndata = ImageQt._toqclass_helper(image)\nimg = cls(data[\"data\"], data[\"size\"][0], data[\"size\"][1], data[\"format\"])\nif data[\"colortable\"]:\nimg.setColorTable(data[\"colortable\"])\nimg.__data = data[\"data\"]\nreturn img\n@classmethod\ndef for_mimetype(cls, path: os.PathLike) -&gt; Self | None:\n\"\"\"Try to create an icon from theme using the file mimetype.\n        E.g.::\n            return self.mimetype_icon(\n                path, fallback=':/icons/text-x-python.png')\n        :param path: file path for which the icon must be created\n        :param fallback: fallback icon path (qrc or file system)\n        :returns: QIcon or None if the file mimetype icon could not be found.\n        \"\"\"\npath = os.fspath(path)\nif mime := mimetypes.guess_type(path)[0]:\nicon = mime.replace(\"/\", \"-\")\n# if system.WINDOWS:\n#     return icons.file()\nif cls.hasThemeIcon(icon):\nicon = cls(cls.fromTheme(icon))\nif not icon.isNull():\nreturn icon\nreturn None  #  gui.Icon.fromTheme(\"text-x-generic\")\ndef to_pil(self):\nfrom PIL import Image as PILImage\nbuffer = core.Buffer()\nbuffer.open(core.Buffer.OpenModeFlag.ReadWrite)\nself.save(buffer, \"PNG\")\nreturn PILImage.open(io.BytesIO(buffer.data()))\ndef invert_pixels(self, invert_alpha: bool = False):\nself.invertPixels(\ngui.QImage.InvertMode.InvertRgba\nif invert_alpha\nelse gui.QImage.InvertMode.InvertRgb\n)\ndef convert_to_format(self, fmt: FormatStr | gui.QImage.Format) -&gt; Self:\nreturn type(self)(self.convertToFormat(FORMAT.get_enum_value(fmt)))\ndef as_bytes(self) -&gt; bytes:\nbits = self.bits()\nif bits is None:\nreturn b\"\"\nmatch API:\ncase \"pyqt6\":\nreturn bits.asstring(self.sizeInBytes())\ncase \"pyside6\":\nreturn bits.tobytes()\n</code></pre>"},{"location":"qt_modules/gui/Image.html#prettyqt.gui.image.Image.for_mimetype","title":"<code>for_mimetype(path: os.PathLike) -&gt; Self | None</code>  <code>classmethod</code>","text":"<p>Try to create an icon from theme using the file mimetype.</p> <p>E.g.::</p> <pre><code>return self.mimetype_icon(\npath, fallback=':/icons/text-x-python.png')\n</code></pre> <p>:param path: file path for which the icon must be created :param fallback: fallback icon path (qrc or file system) :returns: QIcon or None if the file mimetype icon could not be found.</p> Source code in <code>prettyqt\\gui\\image.py</code> <pre><code>@classmethod\ndef for_mimetype(cls, path: os.PathLike) -&gt; Self | None:\n\"\"\"Try to create an icon from theme using the file mimetype.\n    E.g.::\n        return self.mimetype_icon(\n            path, fallback=':/icons/text-x-python.png')\n    :param path: file path for which the icon must be created\n    :param fallback: fallback icon path (qrc or file system)\n    :returns: QIcon or None if the file mimetype icon could not be found.\n    \"\"\"\npath = os.fspath(path)\nif mime := mimetypes.guess_type(path)[0]:\nicon = mime.replace(\"/\", \"-\")\n# if system.WINDOWS:\n#     return icons.file()\nif cls.hasThemeIcon(icon):\nicon = cls(cls.fromTheme(icon))\nif not icon.isNull():\nreturn icon\nreturn None  #  gui.Icon.fromTheme(\"text-x-generic\")\n</code></pre>"},{"location":"qt_modules/gui/Image.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260955536[\"gui.Image\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259391632[\"QtGui.QImage\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260955536\n  140736120080256 --&gt; 2103255032912\n  2103260963216 --&gt; 2103260955536\n  140736120080256 --&gt; 2103260963216\n  2103259391632 --&gt; 2103260955536\n  2103259509712 --&gt; 2103259391632\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/ImageIOHandler.html","title":"ImageIOHandler","text":"<p>Qt Base Class: QImageIOHandler</p> <p>Signature: <code>QImageIOHandler(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/ImageIOHandler.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>mod</code></p> <p>Defines the common image I/O interface for all image formats in Qt.</p> Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>class ImageIOHandler(mod):\n\"\"\"Defines the common image I/O interface for all image formats in Qt.\"\"\"\ndef __getitem__(self, key: ImageOptionStr | mod.ImageOption) -&gt; datatypes.Variant:\nreturn self.get_option(key)\ndef __setitem__(\nself, key: ImageOptionStr | mod.ImageOption, value: datatypes.Variant\n):\nself.set_option(key, value)\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\ndef set_option(\nself, option: ImageOptionStr | mod.ImageOption, value: datatypes.Variant\n):\n\"\"\"Set option to given value.\n        Args:\n            option: option to use\n            value: value to set\n        \"\"\"\nself.setOption(IMAGE_OPTION.get_enum_value(option), value)\ndef get_option(self, option: ImageOptionStr | mod.ImageOption) -&gt; datatypes.Variant:\n\"\"\"Return the value assigned to option.\n        Args:\n            option: option to get\n        Returns:\n            option\n        \"\"\"\nreturn self.option(IMAGE_OPTION.get_enum_value(option))\ndef supports_option(self, option: ImageOptionStr | mod.ImageOption) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n        Args:\n            option: option to check\n        Returns:\n            option\n        \"\"\"\nreturn self.supportsOption(IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"qt_modules/gui/ImageIOHandler.html#prettyqt.gui.imageiohandler.ImageIOHandler.get_option","title":"<code>get_option(option: ImageOptionStr | mod.ImageOption) -&gt; datatypes.Variant</code>","text":"<p>Return the value assigned to option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr | mod.ImageOption</code> <p>option to get</p> required Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def get_option(self, option: ImageOptionStr | mod.ImageOption) -&gt; datatypes.Variant:\n\"\"\"Return the value assigned to option.\n    Args:\n        option: option to get\n    Returns:\n        option\n    \"\"\"\nreturn self.option(IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"qt_modules/gui/ImageIOHandler.html#prettyqt.gui.imageiohandler.ImageIOHandler.set_option","title":"<code>set_option(option: ImageOptionStr | mod.ImageOption, value: datatypes.Variant)</code>","text":"<p>Set option to given value.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr | mod.ImageOption</code> <p>option to use</p> required <code>value</code> <code>datatypes.Variant</code> <p>value to set</p> required Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def set_option(\nself, option: ImageOptionStr | mod.ImageOption, value: datatypes.Variant\n):\n\"\"\"Set option to given value.\n    Args:\n        option: option to use\n        value: value to set\n    \"\"\"\nself.setOption(IMAGE_OPTION.get_enum_value(option), value)\n</code></pre>"},{"location":"qt_modules/gui/ImageIOHandler.html#prettyqt.gui.imageiohandler.ImageIOHandler.supports_option","title":"<code>supports_option(option: ImageOptionStr | mod.ImageOption) -&gt; bool</code>","text":"<p>Return whether the image handler supports given option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>ImageOptionStr | mod.ImageOption</code> <p>option to check</p> required Source code in <code>prettyqt\\gui\\imageiohandler.py</code> <pre><code>def supports_option(self, option: ImageOptionStr | mod.ImageOption) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n    Args:\n        option: option to check\n    Returns:\n        option\n    \"\"\"\nreturn self.supportsOption(IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"qt_modules/gui/ImageIOHandler.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256709792[\"gui.ImageIOHandler\"]\n  2103259531792[\"QtGui.QImageIOHandler\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259531792 --&gt; 2103256709792\n  2103206874128 --&gt; 2103259531792\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/ImageReader.html","title":"ImageReader","text":"<p>Qt Base Class: QImageReader</p> <p>Signature: <code>QImageReader(self) -&gt; None QImageReader(self, device: PySide6.QtCore.QIODevice, format: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray)) -&gt; None QImageReader(self, fileName: str, format: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray)) -&gt; None</code></p>"},{"location":"qt_modules/gui/ImageReader.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QImageReader</code></p> <p>Format independent interface for reading images from files or other devices.</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>class ImageReader(gui.QImageReader):\n\"\"\"Format independent interface for reading images from files or other devices.\"\"\"\ndef __getitem__(self, key: str) -&gt; str:\nreturn self.text(key)\ndef get_error(self) -&gt; ImageReaderErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn IMAGE_READER_ERROR.inverse[self.error()]\ndef get_background_color(self) -&gt; gui.Color:\nreturn gui.Color(self.backgroundColor())\ndef get_clip_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.clipRect())\ndef get_current_image_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.currentImageRect())\ndef get_scaled_clip_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.scaledClipRect())\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef get_scaled_size(self) -&gt; core.Size:\nreturn core.Size(self.scaledSize())\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\ndef get_subtype(self) -&gt; str:\nreturn self.subType().data().decode()\ndef get_supported_subtypes(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedSubTypes()]\ndef set_format(self, fmt: datatypes.ByteArrayType):\nfmt = datatypes.to_bytearray(fmt)\nself.setFormat(fmt)\ndef get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n        Returns:\n            transformation\n        \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\ndef read_image(self) -&gt; gui.Image:\nreturn gui.Image(self.read())\ndef supports_option(\nself, option: gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption\n) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n        Args:\n            option: option to check\n        Returns:\n            option\n        \"\"\"\nreturn self.supportsOption(gui.imageiohandler.IMAGE_OPTION.get_enum_value(option))\n@staticmethod\ndef get_image_format(obj: str | core.QIODevice) -&gt; str:\nreturn ImageReader.imageFormat(obj).data().decode()\n@staticmethod\ndef get_supported_image_formats() -&gt; list[str]:\nreturn [i.data().decode() for i in ImageReader.supportedImageFormats()]\n@staticmethod\ndef get_supported_mime_types() -&gt; list[str]:\nreturn [i.data().decode() for i in ImageReader.supportedMimeTypes()]\n@staticmethod\ndef get_image_formats_for_mime_type(typ: datatypes.ByteArrayType) -&gt; list[str]:\ntyp = datatypes.to_bytearray(typ)\nreturn [i.data().decode() for i in ImageReader.imageFormatsForMimeType(typ)]\n</code></pre>"},{"location":"qt_modules/gui/ImageReader.html#prettyqt.gui.imagereader.ImageReader.get_error","title":"<code>get_error() -&gt; ImageReaderErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_error(self) -&gt; ImageReaderErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn IMAGE_READER_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/gui/ImageReader.html#prettyqt.gui.imagereader.ImageReader.get_transformation","title":"<code>get_transformation() -&gt; gui.imageiohandler.TransformationStr</code>","text":"<p>Return the transformation and orientation the image has been set to.</p> Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n    Returns:\n        transformation\n    \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"qt_modules/gui/ImageReader.html#prettyqt.gui.imagereader.ImageReader.supports_option","title":"<code>supports_option(option: gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption) -&gt; bool</code>","text":"<p>Return whether the image handler supports given option.</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <code>gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption</code> <p>option to check</p> required Source code in <code>prettyqt\\gui\\imagereader.py</code> <pre><code>def supports_option(\nself, option: gui.imageiohandler.ImageOptionStr | gui.QImageIOHandler.ImageOption\n) -&gt; bool:\n\"\"\"Return whether the image handler supports given option.\n    Args:\n        option: option to check\n    Returns:\n        option\n    \"\"\"\nreturn self.supportsOption(gui.imageiohandler.IMAGE_OPTION.get_enum_value(option))\n</code></pre>"},{"location":"qt_modules/gui/ImageReader.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256702112[\"gui.ImageReader\"]\n  2103260912336[\"QtGui.QImageReader\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103260912336 --&gt; 2103256702112\n  2103206874128 --&gt; 2103260912336\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/ImageWriter.html","title":"ImageWriter","text":"<p>Qt Base Class: QImageWriter</p> <p>Signature: <code>QImageWriter(self) -&gt; None QImageWriter(self, device: PySide6.QtCore.QIODevice, format: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None QImageWriter(self, fileName: str, format: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray)) -&gt; None</code></p>"},{"location":"qt_modules/gui/ImageWriter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QImageWriter</code></p> <p>Format independent interface for writing images to files or other devices.</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>class ImageWriter(gui.QImageWriter):\n\"\"\"Format independent interface for writing images to files or other devices.\"\"\"\ndef __setitem__(self, key: str, val: str):\nself.setText(key, val)\ndef get_error(self) -&gt; ImageWriterErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn IMAGE_WRITER_ERROR.inverse[self.error()]\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\ndef get_subtype(self) -&gt; str:\nreturn self.subType().data().decode()\ndef get_supported_image_formats(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedImageFormats()]\ndef get_supported_subtypes(self) -&gt; list[str]:\nreturn [i.data().decode() for i in self.supportedSubTypes()]\ndef set_subtype(self, subtype: datatypes.ByteArrayType):\nsubtype = datatypes.to_bytearray(subtype)\nself.setSubType(subtype)\ndef set_format(self, fmt: datatypes.ByteArrayType):\nfmt = datatypes.to_bytearray(fmt)\nself.setFormat(fmt)\ndef set_transformation(\nself,\norigin: gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation,\n):\n\"\"\"Set the image transformations metadata including orientation.\n        Args:\n            origin: transformation to use\n        \"\"\"\nself.setTransformation(gui.imageiohandler.TRANSFORMATION.get_enum_value(origin))\ndef get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n        Returns:\n            transformation\n        \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"qt_modules/gui/ImageWriter.html#prettyqt.gui.imagewriter.ImageWriter.get_error","title":"<code>get_error() -&gt; ImageWriterErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_error(self) -&gt; ImageWriterErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn IMAGE_WRITER_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/gui/ImageWriter.html#prettyqt.gui.imagewriter.ImageWriter.get_transformation","title":"<code>get_transformation() -&gt; gui.imageiohandler.TransformationStr</code>","text":"<p>Return the transformation and orientation the image has been set to.</p> Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def get_transformation(self) -&gt; gui.imageiohandler.TransformationStr:\n\"\"\"Return the transformation and orientation the image has been set to.\n    Returns:\n        transformation\n    \"\"\"\nreturn gui.imageiohandler.TRANSFORMATION.inverse[self.transformation()]\n</code></pre>"},{"location":"qt_modules/gui/ImageWriter.html#prettyqt.gui.imagewriter.ImageWriter.set_transformation","title":"<code>set_transformation(origin: gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation)</code>","text":"<p>Set the image transformations metadata including orientation.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation</code> <p>transformation to use</p> required Source code in <code>prettyqt\\gui\\imagewriter.py</code> <pre><code>def set_transformation(\nself,\norigin: gui.imageiohandler.TransformationStr | gui.ImageIOHandler.Transformation,\n):\n\"\"\"Set the image transformations metadata including orientation.\n    Args:\n        origin: transformation to use\n    \"\"\"\nself.setTransformation(gui.imageiohandler.TRANSFORMATION.get_enum_value(origin))\n</code></pre>"},{"location":"qt_modules/gui/ImageWriter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256696352[\"gui.ImageWriter\"]\n  2103260911376[\"QtGui.QImageWriter\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103260911376 --&gt; 2103256696352\n  2103206874128 --&gt; 2103260911376\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/InputMethod.html","title":"InputMethod","text":""},{"location":"qt_modules/gui/InputMethod.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\inputmethod.py</code> <pre><code>class InputMethod(core.ObjectMixin):\ndef __init__(self, item: QtGui.QInputMethod):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_anchor_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.anchorRectangle())\ndef get_cursor_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.cursorRectangle())\ndef get_input_item_clip_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.inputItemClipRectangle())\ndef get_input_item_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.inputItemRectangle())\ndef get_keyboard_rectangle(self) -&gt; core.RectF:\nreturn core.RectF(self.keyboardRectangle())\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_input_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.inputDirection()]\n@classmethod\ndef query_focus_object(cls, query: constants.InputMethodQueryStr, argument):\nreturn cls.queryFocusObject(constants.INPUT_METHOD_QUERY[query], argument)\n</code></pre>"},{"location":"qt_modules/gui/InputMethod.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260960336[\"gui.InputMethod\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103260960336\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/IntValidator.html","title":"IntValidator","text":"<p>Qt Base Class: QIntValidator</p> <p>Signature: <code>QIntValidator(self, bottom: int, top: int, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QIntValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/IntValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.ValidatorMixin</code>, <code>gui.QIntValidator</code></p> <p>Validator that ensures a string contains a integer within a specified range.</p> Source code in <code>prettyqt\\gui\\intvalidator.py</code> <pre><code>class IntValidator(gui.ValidatorMixin, gui.QIntValidator):\n\"\"\"Validator that ensures a string contains a integer within a specified range.\"\"\"\nID = \"integer_classic\"\ndef __repr__(self):\nreturn get_repr(self, self.bottom(), self.top())\ndef __getstate__(self):\nreturn dict(bottom=self.bottom(), top=self.top())\ndef __reduce__(self):\nreturn type(self), (self.bottom(), self.top()), None\ndef __eq__(self, other: object):\nreturn (\nself.bottom() == other.bottom() and self.top() == other.top()\nif isinstance(other, type(self))\nelse False\n)\ndef set_range(self, lower: int | None, upper: int | None):\nif lower is None:\nlower = -MAX_VAL\nif upper is None:\nupper = MAX_VAL\nself.setRange(lower, upper)\n</code></pre>"},{"location":"qt_modules/gui/IntValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260744336[\"gui.IntValidator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260817296[\"QtGui.QIntValidator\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260958416 --&gt; 2103260744336\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260817296 --&gt; 2103260744336\n  2103260802896 --&gt; 2103260817296\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/IntValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>bottom</code> int <code>top</code> int"},{"location":"qt_modules/gui/KeySequence.html","title":"KeySequence","text":"<p>Qt Base Class: QKeySequence</p> <p>Signature: <code>QKeySequence(self) -&gt; None QKeySequence(self, k1: int, k2: int = 0, k3: int = 0, k4: int = 0) -&gt; None QKeySequence(self, k1: Union[PySide6.QtCore.QKeyCombination, PySide6.QtCore.Qt.KeyboardModifier, PySide6.QtCore.Qt.Key], k2: Union[PySide6.QtCore.QKeyCombination, PySide6.QtCore.Qt.KeyboardModifier, PySide6.QtCore.Qt.Key] = Instance(QKeyCombination.fromCombined(0)), k3: Union[PySide6.QtCore.QKeyCombination, PySide6.QtCore.Qt.KeyboardModifier, PySide6.QtCore.Qt.Key] = Instance(QKeyCombination.fromCombined(0)), k4: Union[PySide6.QtCore.QKeyCombination, PySide6.QtCore.Qt.KeyboardModifier, PySide6.QtCore.Qt.Key] = Instance(QKeyCombination.fromCombined(0))) -&gt; None QKeySequence(self, key: PySide6.QtGui.QKeySequence.StandardKey) -&gt; None QKeySequence(self, key: str, format: PySide6.QtGui.QKeySequence.SequenceFormat = Instance(PySide6.QtGui.QKeySequence.SequenceFormat.NativeText)) -&gt; None QKeySequence(self, ks: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int]) -&gt; None</code></p>"},{"location":"qt_modules/gui/KeySequence.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QKeySequence</code></p> <p>Encapsulates a key sequence as used by shortcuts.</p> Source code in <code>prettyqt\\gui\\keysequence.py</code> <pre><code>class KeySequence(QtGui.QKeySequence):\n\"\"\"Encapsulates a key sequence as used by shortcuts.\"\"\"\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(),) if args[0] in STANDARD_KEYS:\nsuper().__init__(STANDARD_KEYS[args[0]])\ncase _:\nsuper().__init__(*args, **kwargs)\ndef __str__(self):\nreturn self.toString()\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __reduce__(self):\nreturn type(self), (self.toString(),)\ndef __format__(self, format_spec: SequenceFormatStr):\nif format_spec in SEQUENCE_FORMAT:\nreturn self.toString(SEQUENCE_FORMAT[format_spec])\nreturn super().__format__(format_spec)\ndef __getitem__(self, item) -&gt; core.KeyCombination:\nitem = super().__getitem__(item)\nreturn core.KeyCombination(item)\n@property\ndef _toString(self) -&gt; str:\nreturn self.toString()\n__match_args__ = (\"_toString\",)\ndef get_matches(self, seq: QtGui.QKeySequence | str) -&gt; SequenceMatchStr:\nif isinstance(seq, str):\nseq = KeySequence(seq)\nreturn SEQUENCE_MATCHES.inverse[self.matches(seq)]\n@functools.singledispatchmethod\n@classmethod\ndef to_shortcut_str(cls, key: constants.Key, mod: int = 0) -&gt; str:\nreturn cls(mod | key).toString()\n@to_shortcut_str.register\n@classmethod\ndef _(cls, key: core.QKeyCombination) -&gt; str:\nreturn cls(key).toString()\n@classmethod\ndef get_key_bindings(cls, button) -&gt; list[Self]:\nreturn [cls(i) for i in cls.keyBindings(button)]\n</code></pre>"},{"location":"qt_modules/gui/KeySequence.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260913296[\"gui.KeySequence\"]\n  2103260784656[\"QtGui.QKeySequence\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103260784656 --&gt; 2103260913296\n  2103206874128 --&gt; 2103260784656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/LinearGradient.html","title":"LinearGradient","text":"<p>Qt Base Class: QLinearGradient</p> <p>Signature: <code>QLinearGradient(self) -&gt; None QLinearGradient(self, QLinearGradient: PySide6.QtGui.QLinearGradient) -&gt; None QLinearGradient(self, start: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], finalStop: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -&gt; None QLinearGradient(self, xStart: float, yStart: float, xFinalStop: float, yFinalStop: float) -&gt; None</code></p>"},{"location":"qt_modules/gui/LinearGradient.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.GradientMixin</code>, <code>gui.QLinearGradient</code></p> <p>Used in combination with QBrush to specify a linear gradient brush.</p> Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>class LinearGradient(gui.GradientMixin, gui.QLinearGradient):\n\"\"\"Used in combination with QBrush to specify a linear gradient brush.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_start(), self.get_final_stop())\ndef get_start(self) -&gt; core.PointF:\nreturn core.PointF(self.start())\ndef get_final_stop(self) -&gt; core.PointF:\nreturn core.PointF(self.finalStop())\ndef get_css(self) -&gt; str:\n\"\"\"Convert gradient to a CSS string. Can be used for stylesheets.\"\"\"\nstop, finalStop = self.start(), self.finalStop()\nx1, y1, x2, y2 = stop.x(), stop.y(), finalStop.x(), finalStop.y()\nstops = self.stops()\nstops = \"\\n\".join(f\"    stop: {stop:f} {color.name()}\" for stop, color in stops)\nspread = self.get_spread()\nreturn (\n\"qlineargradient(\\n\"\nf\"    x1: {x1}, y1: {y1}, x2: {x2}, y2: {y2}, spread:{spread},\\n\"\nf\"{stops})\"\n)\n</code></pre>"},{"location":"qt_modules/gui/LinearGradient.html#prettyqt.gui.lineargradient.LinearGradient.get_css","title":"<code>get_css() -&gt; str</code>","text":"<p>Convert gradient to a CSS string. Can be used for stylesheets.</p> Source code in <code>prettyqt\\gui\\lineargradient.py</code> <pre><code>def get_css(self) -&gt; str:\n\"\"\"Convert gradient to a CSS string. Can be used for stylesheets.\"\"\"\nstop, finalStop = self.start(), self.finalStop()\nx1, y1, x2, y2 = stop.x(), stop.y(), finalStop.x(), finalStop.y()\nstops = self.stops()\nstops = \"\\n\".join(f\"    stop: {stop:f} {color.name()}\" for stop, color in stops)\nspread = self.get_spread()\nreturn (\n\"qlineargradient(\\n\"\nf\"    x1: {x1}, y1: {y1}, x2: {x2}, y2: {y2}, spread:{spread},\\n\"\nf\"{stops})\"\n)\n</code></pre>"},{"location":"qt_modules/gui/LinearGradient.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260753936[\"gui.LinearGradient\"]\n  2103260725136[\"gui.GradientMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259541392[\"QtGui.QLinearGradient\"]\n  2103259545232[\"QtGui.QGradient\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260725136 --&gt; 2103260753936\n  140736120080256 --&gt; 2103260725136\n  2103259541392 --&gt; 2103260753936\n  2103259545232 --&gt; 2103259541392\n  2103206874128 --&gt; 2103259545232\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Matrix4x4.html","title":"Matrix4x4","text":"<p>Qt Base Class: QMatrix4x4</p> <p>Signature: <code>QMatrix4x4(self) -&gt; None QMatrix4x4(self, m11: float, m12: float, m13: float, m14: float, m21: float, m22: float, m23: float, m24: float, m31: float, m32: float, m33: float, m34: float, m41: float, m42: float, m43: float, m44: float) -&gt; None QMatrix4x4(self, transform: PySide6.QtGui.QTransform) -&gt; None QMatrix4x4(self, values: Iterable) -&gt; None</code></p>"},{"location":"qt_modules/gui/Matrix4x4.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QMatrix4x4</code></p> <p>Represents a 4x4 transformation matrix in 3D space.</p> Source code in <code>prettyqt\\gui\\matrix4x4.py</code> <pre><code>class Matrix4x4(QtGui.QMatrix4x4):\n\"\"\"Represents a 4x4 transformation matrix in 3D space.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/Matrix4x4.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256688672[\"gui.Matrix4x4\"]\n  2103259520272[\"QtGui.QMatrix4x4\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259520272 --&gt; 2103256688672\n  2103206874128 --&gt; 2103259520272\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Movie.html","title":"Movie","text":"<p>Qt Base Class: QMovie</p> <p>Signature: <code>QMovie(self, device: PySide6.QtCore.QIODevice, format: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray), parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QMovie(self, fileName: str, format: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray), parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QMovie(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/Movie.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtGui.QMovie</code></p> <p>Convenience class for playing movies with QImageReader.</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>class Movie(core.ObjectMixin, QtGui.QMovie):\n\"\"\"Convenience class for playing movies with QImageReader.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.fileName(), self.get_format())\ndef set_cache_mode(self, mode: CacheModeStr | QtGui.QMovie.CacheMode):\n\"\"\"Set cache mode.\n        Args:\n            mode: cache mode\n        \"\"\"\nself.setCacheMode(CACHE_MODE.get_enum_value(mode))\ndef get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current cache mode.\n        Returns:\n            cache mode\n        \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\ndef get_state(self) -&gt; MovieStateStr:\n\"\"\"Get the current state.\n        Returns:\n            state\n        \"\"\"\nreturn MOVIE_STATE.inverse[self.state()]\ndef get_format(self) -&gt; str:\nreturn self.format().data().decode()\n@classmethod\ndef get_supported_formats(cls) -&gt; list[str]:\nreturn [i.data().decode() for i in cls.supportedFormats()]\n</code></pre>"},{"location":"qt_modules/gui/Movie.html#prettyqt.gui.movie.Movie.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Get the current cache mode.</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current cache mode.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\n</code></pre>"},{"location":"qt_modules/gui/Movie.html#prettyqt.gui.movie.Movie.get_state","title":"<code>get_state() -&gt; MovieStateStr</code>","text":"<p>Get the current state.</p> Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def get_state(self) -&gt; MovieStateStr:\n\"\"\"Get the current state.\n    Returns:\n        state\n    \"\"\"\nreturn MOVIE_STATE.inverse[self.state()]\n</code></pre>"},{"location":"qt_modules/gui/Movie.html#prettyqt.gui.movie.Movie.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr | QtGui.QMovie.CacheMode)</code>","text":"<p>Set cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr | QtGui.QMovie.CacheMode</code> <p>cache mode</p> required Source code in <code>prettyqt\\gui\\movie.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr | QtGui.QMovie.CacheMode):\n\"\"\"Set cache mode.\n    Args:\n        mode: cache mode\n    \"\"\"\nself.setCacheMode(CACHE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/gui/Movie.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260759696[\"gui.Movie\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260929616[\"QtGui.QMovie\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103260759696\n  140736120080256 --&gt; 2103255067472\n  2103260929616 --&gt; 2103260759696\n  2103254677056 --&gt; 2103260929616\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Movie.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>speed</code> int <code>cacheMode</code> QMovie::CacheMode"},{"location":"qt_modules/gui/PageLayout.html","title":"PageLayout","text":"<p>Qt Base Class: QPageLayout</p> <p>Signature: <code>QPageLayout(self) -&gt; None QPageLayout(self, other: PySide6.QtGui.QPageLayout) -&gt; None QPageLayout(self, pageSize: Union[PySide6.QtGui.QPageSize, PySide6.QtGui.QPageSize.PageSizeId, PySide6.QtCore.QSize], orientation: PySide6.QtGui.QPageLayout.Orientation, margins: Union[PySide6.QtCore.QMarginsF, PySide6.QtCore.QMargins], units: PySide6.QtGui.QPageLayout.Unit = Instance(QPageLayout.Unit.Point), minMargins: Union[PySide6.QtCore.QMarginsF, PySide6.QtCore.QMargins] = Instance(QMarginsF(0, 0, 0, 0))) -&gt; None</code></p>"},{"location":"qt_modules/gui/PageLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QPageLayout</code></p> <p>Describes the size, orientation and margins of a page.</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>class PageLayout(gui.QPageLayout):\n\"\"\"Describes the size, orientation and margins of a page.\"\"\"\ndef __repr__(self):\nreturn get_repr(self)\ndef set_units(self, unit: UnitStr | gui.QPageLayout.Unit):\n\"\"\"Set unit.\n        Args:\n            unit: unit\n        \"\"\"\nself.setUnits(UNITS.get_enum_value(unit))\ndef get_units(self) -&gt; UnitStr:\n\"\"\"Get the current unit.\n        Returns:\n            unit\n        \"\"\"\nreturn UNITS.inverse[self.units()]\ndef set_mode(self, mode: ModeStr | gui.QPageLayout.Mode):\n\"\"\"Set mode.\n        Args:\n            mode: mode\n        \"\"\"\nself.setMode(MODES.get_enum_value(mode))\ndef get_mode(self) -&gt; ModeStr:\n\"\"\"Get the current mode.\n        Returns:\n            mode\n        \"\"\"\nreturn MODES.inverse[self.mode()]\ndef set_orientation(self, orientation: OrientationStr | gui.QPageLayout.Orientation):\n\"\"\"Set orientation.\n        Args:\n            orientation: orientation\n        \"\"\"\nself.setOrientation(ORIENTATIONS.get_enum_value(orientation))\ndef get_orientation(self) -&gt; OrientationStr:\n\"\"\"Get the current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn ORIENTATIONS.inverse[self.orientation()]\ndef get_page_size(self) -&gt; gui.PageSize:\nreturn gui.PageSize(self.pageSize())\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#prettyqt.gui.pagelayout.PageLayout.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"<p>Get the current mode.</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\n\"\"\"Get the current mode.\n    Returns:\n        mode\n    \"\"\"\nreturn MODES.inverse[self.mode()]\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#prettyqt.gui.pagelayout.PageLayout.get_orientation","title":"<code>get_orientation() -&gt; OrientationStr</code>","text":"<p>Get the current orientation.</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_orientation(self) -&gt; OrientationStr:\n\"\"\"Get the current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn ORIENTATIONS.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#prettyqt.gui.pagelayout.PageLayout.get_units","title":"<code>get_units() -&gt; UnitStr</code>","text":"<p>Get the current unit.</p> Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def get_units(self) -&gt; UnitStr:\n\"\"\"Get the current unit.\n    Returns:\n        unit\n    \"\"\"\nreturn UNITS.inverse[self.units()]\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#prettyqt.gui.pagelayout.PageLayout.set_mode","title":"<code>set_mode(mode: ModeStr | gui.QPageLayout.Mode)</code>","text":"<p>Set mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ModeStr | gui.QPageLayout.Mode</code> <p>mode</p> required Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_mode(self, mode: ModeStr | gui.QPageLayout.Mode):\n\"\"\"Set mode.\n    Args:\n        mode: mode\n    \"\"\"\nself.setMode(MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#prettyqt.gui.pagelayout.PageLayout.set_orientation","title":"<code>set_orientation(orientation: OrientationStr | gui.QPageLayout.Orientation)</code>","text":"<p>Set orientation.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>OrientationStr | gui.QPageLayout.Orientation</code> <p>orientation</p> required Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_orientation(self, orientation: OrientationStr | gui.QPageLayout.Orientation):\n\"\"\"Set orientation.\n    Args:\n        orientation: orientation\n    \"\"\"\nself.setOrientation(ORIENTATIONS.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#prettyqt.gui.pagelayout.PageLayout.set_units","title":"<code>set_units(unit: UnitStr | gui.QPageLayout.Unit)</code>","text":"<p>Set unit.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>UnitStr | gui.QPageLayout.Unit</code> <p>unit</p> required Source code in <code>prettyqt\\gui\\pagelayout.py</code> <pre><code>def set_units(self, unit: UnitStr | gui.QPageLayout.Unit):\n\"\"\"Set unit.\n    Args:\n        unit: unit\n    \"\"\"\nself.setUnits(UNITS.get_enum_value(unit))\n</code></pre>"},{"location":"qt_modules/gui/PageLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260751056[\"gui.PageLayout\"]\n  2103259405072[\"QtGui.QPageLayout\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259405072 --&gt; 2103260751056\n  2103206874128 --&gt; 2103259405072\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PageRanges.html","title":"PageRanges","text":"<p>Qt Base Class: QPageRanges</p> <p>Signature: <code>QPageRanges(self) -&gt; None QPageRanges(self, other: PySide6.QtGui.QPageRanges) -&gt; None</code></p>"},{"location":"qt_modules/gui/PageRanges.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QPageRanges</code></p> <p>Represents a collection of page ranges.</p> Source code in <code>prettyqt\\gui\\pageranges.py</code> <pre><code>class PageRanges(QtGui.QPageRanges):\n\"\"\"Represents a collection of page ranges.\"\"\"\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __getitem__(self, index: int):\nreturn self.get_range_list()[index]\ndef __str__(self):\nreturn self.toString()\ndef __repr__(self):\nreturn get_repr(self, self.get_range_list())\ndef __contains__(self, other: int):\nreturn self.contains(other)\ndef __add__(self, other: int | tuple[int, int]):\nif isinstance(other, int):\nself.addPage(other)\nelse:\nself.addRange(*other)\nreturn self\ndef __len__(self):\nreturn self.lastPage() - self.firstPage()\ndef get_range_list(self) -&gt; list[tuple[int, int]]:\nreturn [(i.from_, i.to) for i in self.toRangeList()]\n</code></pre>"},{"location":"qt_modules/gui/PageRanges.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260910416[\"gui.PageRanges\"]\n  2103259515472[\"QtGui.QPageRanges\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259515472 --&gt; 2103260910416\n  2103206874128 --&gt; 2103259515472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PageSize.html","title":"PageSize","text":"<p>Qt Base Class: QPageSize</p> <p>Signature: <code>QPageSize(self) -&gt; None QPageSize(self, other: Union[PySide6.QtGui.QPageSize, PySide6.QtGui.QPageSize.PageSizeId, PySide6.QtCore.QSize]) -&gt; None QPageSize(self, pageSizeId: PySide6.QtGui.QPageSize.PageSizeId) -&gt; None QPageSize(self, pointSize: PySide6.QtCore.QSize, name: str = '', matchPolicy: PySide6.QtGui.QPageSize.SizeMatchPolicy = Instance(QPageSize.SizeMatchPolicy.FuzzyMatch)) -&gt; None QPageSize(self, size: Union[PySide6.QtCore.QSizeF, PySide6.QtCore.QSize], units: PySide6.QtGui.QPageSize.Unit, name: str = '', matchPolicy: PySide6.QtGui.QPageSize.SizeMatchPolicy = Instance(QPageSize.SizeMatchPolicy.FuzzyMatch)) -&gt; None</code></p>"},{"location":"qt_modules/gui/PageSize.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QPageSize</code></p> <p>Describes the size and name of a defined page size.</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>class PageSize(QtGui.QPageSize):\n\"\"\"Describes the size and name of a defined page size.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_id())\ndef __reduce__(self):\nreturn type(self), (self.id(),)\ndef get_definition_units(self) -&gt; UnitStr:\n\"\"\"Get the definition unit.\n        Returns:\n            unit\n        \"\"\"\nunits = self.definitionUnits()\nif units.value == -1:\nraise ValueError(\"Invalid page size\")\nreturn UNITS.inverse[units]\ndef get_id(self) -&gt; str:\n\"\"\"Get the standard page size id.\n        Returns:\n            page size id\n        \"\"\"\nreturn PAGE_SIZE_ID.inverse[self.id()]\n</code></pre>"},{"location":"qt_modules/gui/PageSize.html#prettyqt.gui.pagesize.PageSize.get_definition_units","title":"<code>get_definition_units() -&gt; UnitStr</code>","text":"<p>Get the definition unit.</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def get_definition_units(self) -&gt; UnitStr:\n\"\"\"Get the definition unit.\n    Returns:\n        unit\n    \"\"\"\nunits = self.definitionUnits()\nif units.value == -1:\nraise ValueError(\"Invalid page size\")\nreturn UNITS.inverse[units]\n</code></pre>"},{"location":"qt_modules/gui/PageSize.html#prettyqt.gui.pagesize.PageSize.get_id","title":"<code>get_id() -&gt; str</code>","text":"<p>Get the standard page size id.</p> Source code in <code>prettyqt\\gui\\pagesize.py</code> <pre><code>def get_id(self) -&gt; str:\n\"\"\"Get the standard page size id.\n    Returns:\n        page size id\n    \"\"\"\nreturn PAGE_SIZE_ID.inverse[self.id()]\n</code></pre>"},{"location":"qt_modules/gui/PageSize.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260746256[\"gui.PageSize\"]\n  2103259512592[\"QtGui.QPageSize\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259512592 --&gt; 2103260746256\n  2103206874128 --&gt; 2103259512592\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PagedPaintDevice.html","title":"PagedPaintDevice","text":"<p>Qt Base Class: QPagedPaintDevice</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/gui/PagedPaintDevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PagedPaintDeviceMixin</code>, <code>gui.QPagedPaintDevice</code></p> Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>class PagedPaintDevice(PagedPaintDeviceMixin, gui.QPagedPaintDevice):\npass\n</code></pre>"},{"location":"qt_modules/gui/PagedPaintDevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260763536[\"gui.PagedPaintDevice\"]\n  2103260762576[\"gui.PagedPaintDeviceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259479952[\"QtGui.QPagedPaintDevice\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260762576 --&gt; 2103260763536\n  2103260963216 --&gt; 2103260762576\n  140736120080256 --&gt; 2103260963216\n  2103259479952 --&gt; 2103260763536\n  2103259509712 --&gt; 2103259479952\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PagedPaintDeviceMixin.html","title":"PagedPaintDeviceMixin","text":""},{"location":"qt_modules/gui/PagedPaintDeviceMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.PaintDeviceMixin</code></p> Source code in <code>prettyqt\\gui\\pagedpaintdevice.py</code> <pre><code>class PagedPaintDeviceMixin(gui.PaintDeviceMixin):\ndef get_page_ranges(self) -&gt; list[gui.PageRanges]:\nreturn [gui.PageRanges(i) for i in self.pageRanges()]\ndef get_page_layout(self) -&gt; gui.PageLayout:\nreturn gui.PageLayout(self.PageLayout())\ndef set_page_ranges(self, ranges: gui.QPageRanges | list[tuple[int, int]]):\nif isinstance(ranges, gui.QPageRanges):\nself.setPageRanges(ranges)\nelse:\nranges = gui.PageRanges()\nfor start, end in ranges:\nranges.addRange(start, end)\ndef set_page_orientation(self, orientation: gui.pagelayout.OrientationStr):\nself.setPageOrientation(gui.pagelayout.ORIENTATIONS[orientation])\n</code></pre> Name Children Inherits PagedPaintDeviceprettyqt.gui.pagedpaintdevice <ul><li>PagedPaintDeviceMixin</li><li>QPagedPaintDevice</li></ul> PdfWriterprettyqt.gui.pdfwriter <ul><li>ObjectMixin</li><li>PagedPaintDeviceMixin</li><li>QPdfWriter</li></ul> Printerprettyqt.printsupport.printer <ul><li>PagedPaintDeviceMixin</li><li>QPrinter</li></ul>"},{"location":"qt_modules/gui/PagedPaintDeviceMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260762576[\"gui.PagedPaintDeviceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216 --&gt; 2103260762576\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/gui/PaintDevice.html","title":"PaintDevice","text":"<p>Qt Base Class: QPaintDevice</p> <p>Signature: <code>QPaintDevice(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/PaintDevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PaintDeviceMixin</code>, <code>QtGui.QPaintDevice</code></p> <p>The base class of objects that can be painted on with QPainter.</p> Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>class PaintDevice(PaintDeviceMixin, QtGui.QPaintDevice):\n\"\"\"The base class of objects that can be painted on with QPainter.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/PaintDevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260949776[\"gui.PaintDevice\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260963216 --&gt; 2103260949776\n  140736120080256 --&gt; 2103260963216\n  2103259509712 --&gt; 2103260949776\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PaintDeviceMixin.html","title":"PaintDeviceMixin","text":""},{"location":"qt_modules/gui/PaintDeviceMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>class PaintDeviceMixin:\ndef get_metric(self, metric: MetricStr | QtGui.QPaintDevice.PaintDeviceMetric) -&gt; int:\n\"\"\"Return metric information.\n        Args:\n            metric: metric information to get\n        Returns:\n            metric information\n        \"\"\"\nreturn self.metric(METRICS.get_enum_value(metric))\n</code></pre> Name Children Inherits PaintDeviceprettyqt.gui.paintdevice <ul><li>PaintDeviceMixin</li><li>QPaintDevice</li></ul> PaintDeviceWindowMixinprettyqt.gui.paintdevicewindow <ul><li>PaintDeviceWindow</li><li>RasterWindow</li></ul> <ul><li>WindowMixin</li><li>PaintDeviceMixin</li></ul> PixmapMixinprettyqt.gui.pixmapOff-screen image representation that can be used as a paint device. <ul><li>Pixmap</li><li>Bitmap</li></ul> <ul><li><code>SerializeMixin</code></li><li>PaintDeviceMixin</li></ul> Imageprettyqt.gui.image <ul><li><code>SerializeMixin</code></li><li>PaintDeviceMixin</li><li>QImage</li></ul> PagedPaintDeviceMixinprettyqt.gui.pagedpaintdevice <ul><li>PagedPaintDevice</li><li>PdfWriter</li><li>Printer</li></ul> <ul><li>PaintDeviceMixin</li></ul> Pictureprettyqt.gui.picture <ul><li><code>SerializeMixin</code></li><li>PaintDeviceMixin</li><li>QPicture</li></ul> WidgetMixinprettyqt.widgets.widget <ul><li>Widget</li><li>FrameMixin</li><li>FocusFrame</li><li>AbstractSliderMixin</li><li>AbstractButtonMixin</li><li>LineEdit</li><li>AbstractSpinBoxMixin</li><li><code>RubberBandMixin</code></li><li>DialogButtonBox</li><li>DialogMixin</li><li>...</li></ul> <ul><li>ObjectMixin</li><li>PaintDeviceMixin</li></ul> SvgGeneratorprettyqt.svg.svggenerator <ul><li>PaintDeviceMixin</li><li>QSvgGenerator</li></ul>"},{"location":"qt_modules/gui/PaintDeviceMixin.html#prettyqt.gui.paintdevice.PaintDeviceMixin.get_metric","title":"<code>get_metric(metric: MetricStr | QtGui.QPaintDevice.PaintDeviceMetric) -&gt; int</code>","text":"<p>Return metric information.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>MetricStr | QtGui.QPaintDevice.PaintDeviceMetric</code> <p>metric information to get</p> required Source code in <code>prettyqt\\gui\\paintdevice.py</code> <pre><code>def get_metric(self, metric: MetricStr | QtGui.QPaintDevice.PaintDeviceMetric) -&gt; int:\n\"\"\"Return metric information.\n    Args:\n        metric: metric information to get\n    Returns:\n        metric information\n    \"\"\"\nreturn self.metric(METRICS.get_enum_value(metric))\n</code></pre>"},{"location":"qt_modules/gui/PaintDeviceMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/gui/PaintDeviceWindow.html","title":"PaintDeviceWindow","text":"<p>Qt Base Class: QPaintDeviceWindow</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/gui/PaintDeviceWindow.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PaintDeviceWindowMixin</code>, <code>gui.QPaintDeviceWindow</code></p> Source code in <code>prettyqt\\gui\\paintdevicewindow.py</code> <pre><code>class PaintDeviceWindow(PaintDeviceWindowMixin, gui.QPaintDeviceWindow):\npass\n</code></pre>"},{"location":"qt_modules/gui/PaintDeviceWindow.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260950736[\"gui.PaintDeviceWindow\"]\n  2103260964176[\"gui.PaintDeviceWindowMixin\"]\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103260786576[\"QtGui.QPaintDeviceWindow\"]\n  2103260797136[\"QtGui.QWindow\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259447312[\"QtGui.QSurface\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103260964176 --&gt; 2103260950736\n  2103260916176 --&gt; 2103260964176\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096\n  2103260963216 --&gt; 2103260964176\n  140736120080256 --&gt; 2103260963216\n  2103260786576 --&gt; 2103260950736\n  2103260797136 --&gt; 2103260786576\n  2103254677056 --&gt; 2103260797136\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259447312 --&gt; 2103260797136\n  2103206874128 --&gt; 2103259447312\n  2103259509712 --&gt; 2103260786576\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/gui/PaintDeviceWindow.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>title</code> QString <code>modality</code> Qt::WindowModality <code>flags</code> QFlags <code>x</code> int <code>y</code> int <code>width</code> int <code>height</code> int <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>visible</code> bool <code>active</code> bool <code>visibility</code> QWindow::Visibility <code>contentOrientation</code> Qt::ScreenOrientation <code>opacity</code> double <code>transientParent</code> QWindow"},{"location":"qt_modules/gui/PaintDeviceWindowMixin.html","title":"PaintDeviceWindowMixin","text":""},{"location":"qt_modules/gui/PaintDeviceWindowMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.WindowMixin</code>, <code>gui.PaintDeviceMixin</code></p> Source code in <code>prettyqt\\gui\\paintdevicewindow.py</code> <pre><code>class PaintDeviceWindowMixin(gui.WindowMixin, gui.PaintDeviceMixin):\npass\n</code></pre> Name Children Inherits PaintDeviceWindowprettyqt.gui.paintdevicewindow <ul><li>PaintDeviceWindowMixin</li><li>QPaintDeviceWindow</li></ul> RasterWindowprettyqt.gui.rasterwindow <ul><li>PaintDeviceWindowMixin</li><li>QRasterWindow</li></ul>"},{"location":"qt_modules/gui/PaintDeviceWindowMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260964176[\"gui.PaintDeviceWindowMixin\"]\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103260916176 --&gt; 2103260964176\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096\n  2103260963216 --&gt; 2103260964176\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/gui/Painter.html","title":"Painter","text":"<p>Qt Base Class: QPainter</p> <p>Signature: <code>QPainter(self) -&gt; None QPainter(self, arg__1: PySide6.QtGui.QPaintDevice) -&gt; None</code></p>"},{"location":"qt_modules/gui/Painter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PainterMixin</code>, <code>gui.QPainter</code></p> <p>Performs low-level painting on widgets and other paint devices.</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>class Painter(PainterMixin, gui.QPainter):\n\"\"\"Performs low-level painting on widgets and other paint devices.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/Painter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260767376[\"gui.Painter\"]\n  2103260766416[\"gui.PainterMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259397392[\"QtGui.QPainter\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260766416 --&gt; 2103260767376\n  140736120080256 --&gt; 2103260766416\n  2103259397392 --&gt; 2103260767376\n  2103206874128 --&gt; 2103259397392\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PainterMixin.html","title":"PainterMixin","text":""},{"location":"qt_modules/gui/PainterMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>class PainterMixin:\ndef __enter__(self):\nreturn self\ndef __exit__(self, typ, value, traceback):\nself.end()\n@contextlib.contextmanager\ndef paint_on(self, obj) -&gt; Iterator[Painter]:\nself.begin(obj)\nyield self\nself.end()\n@contextlib.contextmanager\ndef backup_state(self) -&gt; Iterator[Painter]:\nself.save()\nyield self\nself.restore()\n@contextlib.contextmanager\ndef native_mode(self) -&gt; Iterator[Painter]:\nself.beginNativePainting()\nyield self\nself.endNativePainting()\n@contextlib.contextmanager\ndef edit_pen(self) -&gt; Iterator[gui.Pen]:\npen = gui.Pen(self.pen())\nyield pen\nself.setPen(pen)\n@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\ndef draw_text(\nself,\nposition: datatypes.PointType | datatypes.RectType | datatypes.RectFType,\ntext: str,\nalignment: constants.AlignmentStr = \"center\",\n):\nmatch position:\ncase (_, _):\nposition = core.Point(*position)\ncase (_, _, _, _):\nposition = core.RectF(*position)\nself.drawText(position, constants.ALIGNMENTS[alignment].value, text)\ndef draw_image(\nself,\ntarget: core.QPoint | core.QPointF | core.QRect | core.QRectF,\nframe_buffer: gui.QImage,\n):\nself.set_composition_mode(\"source_atop\")\nself.drawImage(target, frame_buffer)\ndef draw_polygon(\nself,\npoints: (gui.QPolygon | gui.QPolygonF | list[core.QPoint] | list[core.QPointF]),\nfill_rule: constants.FillRuleStr | constants.FillRule = \"odd_even\",\n):\nself.drawPolygon(points, fillRule=constants.FILL_RULE.get_enum_value(fill_rule))\ndef draw_rounded_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\nx_radius: float,\ny_radius: float,\nrelative: bool = False,\n):\nflag = (\nconstants.SizeMode.RelativeSize\nif relative\nelse constants.SizeMode.AbsoluteSize\n)\nself.drawRoundedRect(datatypes.to_rect(rect), x_radius, y_radius, flag)\ndef draw_star(self, size: float = 1.0, fill_rule: constants.FillRuleStr = \"winding\"):\nstar = gui.PolygonF.create_star(size)\nself.drawPolygon(star, constants.FILL_RULE[fill_rule])\ndef draw_diamond(\nself, size: float = 1.0, fill_rule: constants.FillRuleStr = \"winding\"\n):\nstar = gui.PolygonF.create_diamond(size)\nself.drawPolygon(star, constants.FILL_RULE[fill_rule])\ndef use_antialiasing(self):\nself.setRenderHint(self.RenderHint.Antialiasing, True)\ndef fill_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\ncolor: datatypes.ColorType,\npattern: constants.BrushStyleStr | constants.BrushStyle = \"solid\",\n):\ncolor = colors.get_color(color)\nif pattern != \"solid\":\ncolor = gui.Brush(color, constants.BRUSH_STYLE.get_enum_value(pattern))\nself.fillRect(datatypes.to_rect(rect), color)\ndef set_pen(\nself,\nstyle: constants.PenStyleStr | None = \"solid\",\nwidth: float = 1.0,\ncolor: datatypes.ColorType = \"black\",\nbrush: gui.QBrush | None = None,\nmiter_limit: float = 2.0,\njoin_style: constants.JoinStyleStr = \"bevel\",\ncap_style: constants.CapStyleStr = \"square\",\n) -&gt; gui.Pen:\n\"\"\"Set pen to use.\n        Args:\n            style: pen style\n            width: pen width\n            color: pen color\n            brush: pen brush\n            miter_limit: miter limit\n            join_style: pen join style\n            cap_style: pen cap style\n        \"\"\"\npen = gui.Pen()\npen.set_style(style)\nif style in [\"none\", None]:\nself.setPen(pen)\nreturn pen\npen.set_cap_style(cap_style)\npen.set_join_style(join_style)\npen.setMiterLimit(miter_limit)\npen.setWidthF(width)\nif brush is not None:\npen.setBrush(brush)\npen.set_color(color)\nself.setPen(pen)\nreturn pen\ndef get_pen(self) -&gt; gui.Pen:\n\"\"\"Return current pen.\n        Returns:\n            current pen\n        \"\"\"\nreturn gui.Pen(self.pen())\ndef set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.setPen(color)\ndef set_brush(self, brush: gui.QBrush | datatypes.ColorType):\nif not isinstance(brush, gui.QBrush):\nbrush = colors.get_color(brush)\nself.setBrush(brush)\ndef set_transparent_background(self, transparent: bool = True):\nmode = (\nconstants.BGMode.TransparentMode\nif transparent\nelse constants.BGMode.OpaqueMode\n)\nself.setBackgroundMode(mode)\ndef set_composition_mode(\nself, mode: CompositionModeStr | gui.QPainter.CompositionMode\n):\n\"\"\"Set the current composition mode.\n        Arguments:\n            mode: composition mode\n        \"\"\"\nself.setCompositionMode(COMPOSITION_MODE.get_enum_value(mode))\ndef get_composition_mode(self) -&gt; CompositionModeStr:\n\"\"\"Get the current composition mode.\n        Returns:\n            composition mode\n        \"\"\"\nreturn COMPOSITION_MODE.inverse[self.compositionMode()]\ndef set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nself.setTransform(datatypes.to_transform(transform), combine)\ndef get_font_metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self.fontMetrics())\ndef set_clip_path(\nself,\npath: gui.QPainterPath,\noperation: constants.ClipOperationStr | constants.ClipOperation = \"replace\",\n):\nself.setClipPath(path, constants.CLIP_OPERATION.get_enum_value(operation))\ndef get_text_rect(self, text: str) -&gt; core.Rect:\nreturn self.drawText(\ncore.Rect(), constants.TextFlag.TextDontPrint, text\n)  # type: ignore\n@contextlib.contextmanager\ndef clip_path(\nself, operation: constants.ClipOperationStr = \"replace\"\n) -&gt; Iterator[gui.PainterPath]:\npath = gui.PainterPath()\nyield path\nself.set_clip_path(path, operation)\n@contextlib.contextmanager\ndef apply_transform(self, combine: bool = True) -&gt; Iterator[gui.Transform]:\ntransform = gui.Transform()\nyield transform\nself.setTransform(transform, combine)\n@contextlib.contextmanager\ndef offset_by(self, x: int = 0, y: int = 0) -&gt; Iterator[Painter]:\nself.translate(x, y)\nyield self\nself.translate(-x, -y)\n</code></pre> Name Children Inherits Painterprettyqt.gui.painter <ul><li>PainterMixin</li><li>QPainter</li></ul> StylePainterprettyqt.widgets.stylepainter <ul><li>PainterMixin</li><li>QStylePainter</li></ul>"},{"location":"qt_modules/gui/PainterMixin.html#prettyqt.gui.painter.PainterMixin.get_composition_mode","title":"<code>get_composition_mode() -&gt; CompositionModeStr</code>","text":"<p>Get the current composition mode.</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_composition_mode(self) -&gt; CompositionModeStr:\n\"\"\"Get the current composition mode.\n    Returns:\n        composition mode\n    \"\"\"\nreturn COMPOSITION_MODE.inverse[self.compositionMode()]\n</code></pre>"},{"location":"qt_modules/gui/PainterMixin.html#prettyqt.gui.painter.PainterMixin.get_pen","title":"<code>get_pen() -&gt; gui.Pen</code>","text":"<p>Return current pen.</p> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def get_pen(self) -&gt; gui.Pen:\n\"\"\"Return current pen.\n    Returns:\n        current pen\n    \"\"\"\nreturn gui.Pen(self.pen())\n</code></pre>"},{"location":"qt_modules/gui/PainterMixin.html#prettyqt.gui.painter.PainterMixin.set_composition_mode","title":"<code>set_composition_mode(mode: CompositionModeStr | gui.QPainter.CompositionMode)</code>","text":"<p>Set the current composition mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CompositionModeStr | gui.QPainter.CompositionMode</code> <p>composition mode</p> required Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_composition_mode(\nself, mode: CompositionModeStr | gui.QPainter.CompositionMode\n):\n\"\"\"Set the current composition mode.\n    Arguments:\n        mode: composition mode\n    \"\"\"\nself.setCompositionMode(COMPOSITION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/gui/PainterMixin.html#prettyqt.gui.painter.PainterMixin.set_pen","title":"<code>set_pen(style: constants.PenStyleStr | None = 'solid', width: float = 1.0, color: datatypes.ColorType = 'black', brush: gui.QBrush | None = None, miter_limit: float = 2.0, join_style: constants.JoinStyleStr = 'bevel', cap_style: constants.CapStyleStr = 'square') -&gt; gui.Pen</code>","text":"<p>Set pen to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | None</code> <p>pen style</p> <code>'solid'</code> <code>width</code> <code>float</code> <p>pen width</p> <code>1.0</code> <code>color</code> <code>datatypes.ColorType</code> <p>pen color</p> <code>'black'</code> <code>brush</code> <code>gui.QBrush | None</code> <p>pen brush</p> <code>None</code> <code>miter_limit</code> <code>float</code> <p>miter limit</p> <code>2.0</code> <code>join_style</code> <code>constants.JoinStyleStr</code> <p>pen join style</p> <code>'bevel'</code> <code>cap_style</code> <code>constants.CapStyleStr</code> <p>pen cap style</p> <code>'square'</code> Source code in <code>prettyqt\\gui\\painter.py</code> <pre><code>def set_pen(\nself,\nstyle: constants.PenStyleStr | None = \"solid\",\nwidth: float = 1.0,\ncolor: datatypes.ColorType = \"black\",\nbrush: gui.QBrush | None = None,\nmiter_limit: float = 2.0,\njoin_style: constants.JoinStyleStr = \"bevel\",\ncap_style: constants.CapStyleStr = \"square\",\n) -&gt; gui.Pen:\n\"\"\"Set pen to use.\n    Args:\n        style: pen style\n        width: pen width\n        color: pen color\n        brush: pen brush\n        miter_limit: miter limit\n        join_style: pen join style\n        cap_style: pen cap style\n    \"\"\"\npen = gui.Pen()\npen.set_style(style)\nif style in [\"none\", None]:\nself.setPen(pen)\nreturn pen\npen.set_cap_style(cap_style)\npen.set_join_style(join_style)\npen.setMiterLimit(miter_limit)\npen.setWidthF(width)\nif brush is not None:\npen.setBrush(brush)\npen.set_color(color)\nself.setPen(pen)\nreturn pen\n</code></pre>"},{"location":"qt_modules/gui/PainterMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260766416[\"gui.PainterMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260766416</code></pre>"},{"location":"qt_modules/gui/PainterPath.html","title":"PainterPath","text":"<p>Qt Base Class: QPainterPath</p> <p>Signature: <code>QPainterPath(self) -&gt; None QPainterPath(self, other: PySide6.QtGui.QPainterPath) -&gt; None QPainterPath(self, startPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -&gt; None</code></p>"},{"location":"qt_modules/gui/PainterPath.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QPainterPath</code></p> Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>class PainterPath(QtGui.QPainterPath):\ndef __len__(self):\nreturn self.elementCount()\ndef __getitem__(self, index: int) -&gt; QtGui.QPainterPath.Element:\nreturn self.elementAt(index)\ndef __iter__(self) -&gt; Iterator[QtGui.QPainterPath.Element]:\nreturn iter(self.elementAt(i) for i in range(self.elementCount()))\ndef __setitem__(self, index: int, value: tuple[int, int]):\nself.setElementPositionAt(index, *value)\ndef __iadd__(self, other):\nif not isinstance(\nother,\ncore.QPoint | core.QRect | QtGui.QPainterPath | QtGui.QRegion,\n):\nraise ValueError(other)\nself.add(other)\nreturn self\ndef add(self, other: core.QPoint | core.QRect | QtGui.QPainterPath | QtGui.QRegion):\nmatch other:\ncase QtGui.QPolygonF():\nself.addPolygon(other)\ncase QtGui.QPainterPath():\nself.addPath(other)\ncase core.QRect():\nself.addRect(other)\ncase QtGui.QRegion():\nself.addRegion(other)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, item: core.QPointF | core.QRectF | QtGui.QPainterPath):\nreturn self.contains(item)\ndef add_rect(self, rect: datatypes.RectType | datatypes.RectFType):\nself.addRect(datatypes.to_rectf(rect))\ndef set_fill_rule(self, rule: constants.FillRuleStr):\n\"\"\"Set fill rule.\n        Args:\n            rule: fill rule to use\n        \"\"\"\nself.setFillRule(constants.FILL_RULE[rule])\ndef get_fill_rule(self) -&gt; constants.FillRuleStr:\n\"\"\"Return current fill rule.\n        Returns:\n            fill rule\n        \"\"\"\nreturn constants.FILL_RULE.inverse[self.fillRule()]\ndef get_bounding_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.boundingRect())\ndef get_simplified(self) -&gt; PainterPath:\nreturn PainterPath(self.simplified())\ndef to_reversed(self) -&gt; PainterPath:\nreturn PainterPath(self.toReversed())\n@classmethod\ndef create_star(cls, size: int):\npath = cls()\nstar_center_x = size / 2\nstar_center_y = size / 2\nradius_outer = size * 0.35\ngolden_ratio = (1 + math.sqrt(5)) / 2\nradius_inner = radius_outer / (1 + golden_ratio)\ntheta_start = math.pi / 2\ntheta_inc = (2 * math.pi) / 10\nfor n in range(11):\ntheta = theta_start + (n * theta_inc)\ntheta = theta % (2 * math.pi)\nif n % 2 == 0:\nx = radius_outer * math.cos(theta)\ny = radius_outer * math.sin(theta)\nelse:\nx = radius_inner * math.cos(theta)\ny = radius_inner * math.sin(theta)\nx_adj = star_center_x - x\ny_adj = star_center_y - y + 3\nif n == 0:\npath.moveTo(x_adj, y_adj)\nelse:\npath.lineTo(x_adj, y_adj)\nreturn path\n</code></pre>"},{"location":"qt_modules/gui/PainterPath.html#prettyqt.gui.painterpath.PainterPath.get_fill_rule","title":"<code>get_fill_rule() -&gt; constants.FillRuleStr</code>","text":"<p>Return current fill rule.</p> Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def get_fill_rule(self) -&gt; constants.FillRuleStr:\n\"\"\"Return current fill rule.\n    Returns:\n        fill rule\n    \"\"\"\nreturn constants.FILL_RULE.inverse[self.fillRule()]\n</code></pre>"},{"location":"qt_modules/gui/PainterPath.html#prettyqt.gui.painterpath.PainterPath.set_fill_rule","title":"<code>set_fill_rule(rule: constants.FillRuleStr)</code>","text":"<p>Set fill rule.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>constants.FillRuleStr</code> <p>fill rule to use</p> required Source code in <code>prettyqt\\gui\\painterpath.py</code> <pre><code>def set_fill_rule(self, rule: constants.FillRuleStr):\n\"\"\"Set fill rule.\n    Args:\n        rule: fill rule to use\n    \"\"\"\nself.setFillRule(constants.FILL_RULE[rule])\n</code></pre>"},{"location":"qt_modules/gui/PainterPath.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260769296[\"gui.PainterPath\"]\n  2103259497232[\"QtGui.QPainterPath\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259497232 --&gt; 2103260769296\n  2103206874128 --&gt; 2103259497232\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PainterPathStroker.html","title":"PainterPathStroker","text":"<p>Qt Base Class: QPainterPathStroker</p> <p>Signature: <code>QPainterPathStroker(self) -&gt; None QPainterPathStroker(self, pen: Union[PySide6.QtGui.QPen, PySide6.QtCore.Qt.PenStyle, PySide6.QtGui.QColor]) -&gt; None</code></p>"},{"location":"qt_modules/gui/PainterPathStroker.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QPainterPathStroker</code></p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>class PainterPathStroker(gui.QPainterPathStroker):\ndef set_cap_style(self, style: constants.CapStyleStr | constants.PenCapStyle):\n\"\"\"Set cap style to use.\n        Args:\n            style: cap style to use\n        \"\"\"\nself.setCapStyle(constants.CAP_STYLE.get_enum_value(style))\ndef get_cap_style(self) -&gt; constants.CapStyleStr | constants.PenCapStyle:\n\"\"\"Return current cap style.\n        Returns:\n            cap style\n        \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\ndef set_join_style(self, style: constants.JoinStyleStr | constants.PenJoinStyle):\n\"\"\"Set join style to use.\n        Args:\n            style: join style to use\n        \"\"\"\nself.setJoinStyle(constants.JOIN_STYLE.get_enum_value(style))\ndef get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n        Returns:\n            join style\n        \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\ndef create_stroke(self, path: gui.QPainterPath) -&gt; gui.PainterPath:\nreturn gui.PainterPath(self.createStroke(path))\n</code></pre>"},{"location":"qt_modules/gui/PainterPathStroker.html#prettyqt.gui.painterpathstroker.PainterPathStroker.get_cap_style","title":"<code>get_cap_style() -&gt; constants.CapStyleStr | constants.PenCapStyle</code>","text":"<p>Return current cap style.</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def get_cap_style(self) -&gt; constants.CapStyleStr | constants.PenCapStyle:\n\"\"\"Return current cap style.\n    Returns:\n        cap style\n    \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\n</code></pre>"},{"location":"qt_modules/gui/PainterPathStroker.html#prettyqt.gui.painterpathstroker.PainterPathStroker.get_join_style","title":"<code>get_join_style() -&gt; constants.JoinStyleStr</code>","text":"<p>Return current join style.</p> Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n    Returns:\n        join style\n    \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\n</code></pre>"},{"location":"qt_modules/gui/PainterPathStroker.html#prettyqt.gui.painterpathstroker.PainterPathStroker.set_cap_style","title":"<code>set_cap_style(style: constants.CapStyleStr | constants.PenCapStyle)</code>","text":"<p>Set cap style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CapStyleStr | constants.PenCapStyle</code> <p>cap style to use</p> required Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def set_cap_style(self, style: constants.CapStyleStr | constants.PenCapStyle):\n\"\"\"Set cap style to use.\n    Args:\n        style: cap style to use\n    \"\"\"\nself.setCapStyle(constants.CAP_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/PainterPathStroker.html#prettyqt.gui.painterpathstroker.PainterPathStroker.set_join_style","title":"<code>set_join_style(style: constants.JoinStyleStr | constants.PenJoinStyle)</code>","text":"<p>Set join style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.JoinStyleStr | constants.PenJoinStyle</code> <p>join style to use</p> required Source code in <code>prettyqt\\gui\\painterpathstroker.py</code> <pre><code>def set_join_style(self, style: constants.JoinStyleStr | constants.PenJoinStyle):\n\"\"\"Set join style to use.\n    Args:\n        style: join style to use\n    \"\"\"\nself.setJoinStyle(constants.JOIN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/PainterPathStroker.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260772176[\"gui.PainterPathStroker\"]\n  2103259503952[\"QtGui.QPainterPathStroker\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259503952 --&gt; 2103260772176\n  2103206874128 --&gt; 2103259503952\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Palette.html","title":"Palette","text":"<p>Qt Base Class: QPalette</p> <p>Signature: <code>QPalette(self) -&gt; None QPalette(self, button: PySide6.QtCore.Qt.GlobalColor) -&gt; None QPalette(self, button: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -&gt; None QPalette(self, button: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], window: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -&gt; None QPalette(self, palette: Union[PySide6.QtGui.QPalette, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor]) -&gt; None QPalette(self, windowText: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], button: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], light: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], dark: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], mid: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], text: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], bright_text: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], base: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], window: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -&gt; None QPalette(self, windowText: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], window: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], light: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], dark: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], mid: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], text: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], base: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -&gt; None</code></p>"},{"location":"qt_modules/gui/Palette.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QPalette</code></p> <p>Contains color groups for each widget state.</p> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>class Palette(serializemixin.SerializeMixin, gui.QPalette):\n\"\"\"Contains color groups for each widget state.\"\"\"\ndef __getitem__(self, index: RoleStr | gui.QPalette.ColorRole) -&gt; gui.Color:\nreturn self.get_color(index)\ndef __setitem__(\nself, index: RoleStr | gui.QPalette.ColorRole, value: datatypes.ColorType\n):\nself.set_color(index, value)\ndef __repr__(self):\nreturn get_repr(self, self.get_color(\"button\"), self.get_color(\"window\"))\ndef iter_colors(\nself, mode: Literal[\"auto\", \"auto_inverted\", \"dark\", \"light\"] = \"auto\"\n):\nif mode == \"auto\":\nmode = \"dark\" if self.is_dark() else \"light\"\nelif mode == \"auto_inverted\":\nmode = \"light\" if self.is_dark() else \"dark\"\nfor color in gui.Color.colorNames():\nc = gui.Color(color)\nif (c.is_dark() and mode == \"dark\") or (not c.is_dark() and mode == \"light\"):\nyield c.as_qt()\ndef highlight_inactive(self, enable: bool = True):\nif enable:\ncolor = self.color(self.ColorGroup.Active, self.ColorRole.Highlight)\nelse:\npal = gui.Palette()\ncolor = pal.color(self.ColorGroup.Inactive, self.ColorRole.Highlight)\nself.setColor(self.ColorGroup.Inactive, self.ColorRole.Highlight, color)\ndef set_color(\nself,\nrole: RoleStr | gui.QPalette.ColorRole,\ncolor: datatypes.ColorType,\ngroup: GroupStr | gui.QPalette.ColorGroup = \"active\",\n):\ncolor = colors.get_color(color)\nself.setColor(GROUP.get_enum_value(group), ROLE.get_enum_value(role), color)\ndef get_colors(\nself, group: GroupStr | gui.QPalette.ColorGroup = \"active\"\n) -&gt; dict[str, gui.Color]:\nreturn {k: self.get_color(k, group) for k in ROLE}\ndef get_color(\nself,\nrole: RoleStr | gui.QPalette.ColorRole,\ngroup: GroupStr | gui.QPalette.ColorGroup = \"active\",\n) -&gt; gui.Color:\nreturn gui.Color(\nself.color(GROUP.get_enum_value(group), ROLE.get_enum_value(role))\n)\ndef set_brush(\nself,\nrole: RoleStr | gui.QPalette.ColorRole,\nbrush: datatypes.ColorAndBrushType,\ngroup: GroupStr | gui.QPalette.ColorGroup = \"active\",\n):\nif not isinstance(brush, gui.QBrush):\nbrush = gui.Brush(colors.get_color(brush))\nself.setBrush(GROUP.get_enum_value(group), ROLE.get_enum_value(role), brush)\ndef get_brushes(\nself, group: GroupStr | gui.QPalette.ColorGroup = \"active\"\n) -&gt; dict[str, gui.Brush]:\nreturn {k: self.get_brush(k, group) for k in ROLE}\ndef get_brush(\nself,\nrole: RoleStr | gui.QPalette.ColorRole,\ngroup: GroupStr | gui.QPalette.ColorGroup = \"active\",\n) -&gt; gui.Brush:\nreturn gui.Brush(\nself.brush(GROUP.get_enum_value(group), ROLE.get_enum_value(role))\n)\ndef set_color_group(\nself, group: GroupStr | gui.QPalette.ColorGroup, **kwargs: gui.QBrush\n):\n\"\"\"Set the color group.\n        Args:\n            group: color group to use\n            kwargs: keyword arguments passed to setColorGroup\n        \"\"\"\nself.setColorGroup(GROUP.get_enum_value(group), **kwargs)\ndef get_color_group(self) -&gt; GroupStr:\n\"\"\"Return color group.\n        Returns:\n            color group\n        \"\"\"\nreturn GROUP.inverse[self.colorGroup()]\ndef inverted(self) -&gt; Self:\npal = type(self)()\nfor group in GROUP:\nfor role in ROLE:\ncolor = self.get_color(role, group)\npal.set_color(role, color.inverted(), group)\nreturn pal\n@classmethod\ndef create_dark_palette(cls) -&gt; Self:\npal = cls()\npal.set_color(\"window\", gui.Color(53, 53, 53))\npal.set_color(\"window_text\", \"white\")\npal.set_color(\"window_text\", \"grey\", group=\"disabled\")\npal.set_color(\"base\", gui.Color(25, 25, 25))\npal.set_color(\"alternate_base\", gui.Color(53, 53, 53))\npal.set_color(\"tool_tip_base\", \"slategrey\")\npal.set_color(\"tool_tip_base\", \"slategrey\", group=\"inactive\")\npal.set_color(\"tool_tip_text\", \"white\")\npal.set_color(\"tool_tip_text\", \"white\", group=\"inactive\")\npal.set_color(\"text\", \"white\")\npal.set_color(\"text\", \"grey\", group=\"disabled\")\npal.set_color(\"button\", gui.Color(53, 53, 53))\npal.set_color(\"button_text\", \"white\")\npal.set_color(\"button_text\", \"grey\", group=\"disabled\")\npal.set_color(\"bright_text\", \"red\")\npal.set_color(\"link\", \"dodgerblue\")\npal.set_color(\"highlight\", \"dodgerblue\")\npal.set_color(\"highlight\", gui.Color(80, 80, 80), group=\"disabled\")\npal.set_color(\"highlighted_text\", \"black\")\npal.set_color(\"highlighted_text\", \"grey\", group=\"disabled\")\nreturn pal\ndef is_dark(self) -&gt; bool:\ncol = self.color(self.ColorRole.Window)\nreturn max(col.getRgb()[:3]) &lt; 115\n</code></pre>"},{"location":"qt_modules/gui/Palette.html#prettyqt.gui.palette.Palette.get_color_group","title":"<code>get_color_group() -&gt; GroupStr</code>","text":"<p>Return color group.</p> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def get_color_group(self) -&gt; GroupStr:\n\"\"\"Return color group.\n    Returns:\n        color group\n    \"\"\"\nreturn GROUP.inverse[self.colorGroup()]\n</code></pre>"},{"location":"qt_modules/gui/Palette.html#prettyqt.gui.palette.Palette.set_color_group","title":"<code>set_color_group(group: GroupStr | gui.QPalette.ColorGroup, **kwargs: gui.QBrush)</code>","text":"<p>Set the color group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>GroupStr | gui.QPalette.ColorGroup</code> <p>color group to use</p> required <code>kwargs</code> <code>gui.QBrush</code> <p>keyword arguments passed to setColorGroup</p> <code>{}</code> Source code in <code>prettyqt\\gui\\palette.py</code> <pre><code>def set_color_group(\nself, group: GroupStr | gui.QPalette.ColorGroup, **kwargs: gui.QBrush\n):\n\"\"\"Set the color group.\n    Args:\n        group: color group to use\n        kwargs: keyword arguments passed to setColorGroup\n    \"\"\"\nself.setColorGroup(GROUP.get_enum_value(group), **kwargs)\n</code></pre>"},{"location":"qt_modules/gui/Palette.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260740496[\"gui.Palette\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259498192[\"QtGui.QPalette\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260740496\n  140736120080256 --&gt; 2103255032912\n  2103259498192 --&gt; 2103260740496\n  2103206874128 --&gt; 2103259498192\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PdfWriter.html","title":"PdfWriter","text":"<p>Qt Base Class: QPdfWriter</p> <p>Signature: <code>QPdfWriter(self, device: PySide6.QtCore.QIODevice) -&gt; None QPdfWriter(self, filename: str) -&gt; None</code></p>"},{"location":"qt_modules/gui/PdfWriter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>gui.PagedPaintDeviceMixin</code>, <code>gui.QPdfWriter</code></p> <p>Class to generate PDFs that can be used as a paint device.</p> Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>class PdfWriter(core.ObjectMixin, gui.PagedPaintDeviceMixin, gui.QPdfWriter):\n\"\"\"Class to generate PDFs that can be used as a paint device.\"\"\"\ndef set_desktop_resolution(self):\nprimary = gui.app().primaryScreen()\ndpi = primary.logicalDotsPerInch()\nself.setResolution(int(dpi))\ndef set_page_margins(\nself,\nmargins: datatypes.MarginsFType,\nunit: gui.pagelayout.UnitStr | gui.PageLayout.Unit | None = None,\n) -&gt; bool:\nmargins = datatypes.to_marginsf(margins)\nif unit is None:\nreturn self.setPageMargins(margins)\nreturn self.setPageMargins(margins, gui.pagelayout.UNITS.get_enum_value(unit))\ndef get_pdf_version(self) -&gt; gui.pagedpaintdevice.PdfVersionStr:\nreturn gui.pagedpaintdevice.PDF_VERSION.inverse[self.pdfVersion()]\ndef set_pdf_version(\nself,\nversion: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion,\n):\n\"\"\"Set pdf version.\n        Args:\n            version: pdf version\n        \"\"\"\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION.get_enum_value(version))\n</code></pre>"},{"location":"qt_modules/gui/PdfWriter.html#prettyqt.gui.pdfwriter.PdfWriter.set_pdf_version","title":"<code>set_pdf_version(version: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion)</code>","text":"<p>Set pdf version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion</code> <p>pdf version</p> required Source code in <code>prettyqt\\gui\\pdfwriter.py</code> <pre><code>def set_pdf_version(\nself,\nversion: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion,\n):\n\"\"\"Set pdf version.\n    Args:\n        version: pdf version\n    \"\"\"\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION.get_enum_value(version))\n</code></pre>"},{"location":"qt_modules/gui/PdfWriter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256690592[\"gui.PdfWriter\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260762576[\"gui.PagedPaintDeviceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103260835536[\"QtGui.QPdfWriter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259479952[\"QtGui.QPagedPaintDevice\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103255067472 --&gt; 2103256690592\n  140736120080256 --&gt; 2103255067472\n  2103260762576 --&gt; 2103256690592\n  2103260963216 --&gt; 2103260762576\n  140736120080256 --&gt; 2103260963216\n  2103260835536 --&gt; 2103256690592\n  2103254677056 --&gt; 2103260835536\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259479952 --&gt; 2103260835536\n  2103259509712 --&gt; 2103259479952\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/gui/PdfWriter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/Pen.html","title":"Pen","text":"<p>Qt Base Class: QPen</p> <p>Signature: <code>QPen(self) -&gt; None QPen(self, arg__1: PySide6.QtCore.Qt.PenStyle) -&gt; None QPen(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], width: float, s: PySide6.QtCore.Qt.PenStyle = Instance(Qt.SolidLine), c: PySide6.QtCore.Qt.PenCapStyle = Instance(Qt.SquareCap), j: PySide6.QtCore.Qt.PenJoinStyle = Instance(Qt.BevelJoin)) -&gt; None QPen(self, color: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int]) -&gt; None QPen(self, pen: Union[PySide6.QtGui.QPen, PySide6.QtCore.Qt.PenStyle, PySide6.QtGui.QColor]) -&gt; None</code></p>"},{"location":"qt_modules/gui/Pen.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QPen</code></p> <p>Defines how a QPainter should draw lines and outlines of shapes.</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>class Pen(serializemixin.SerializeMixin, gui.QPen):\n\"\"\"Defines how a QPainter should draw lines and outlines of shapes.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_color())\ndef set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nself.setColor(color)\ndef get_color(self) -&gt; gui.Color:\nreturn gui.Color(self.color())\ndef get_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.brush())\ndef set_cap_style(self, style: constants.CapStyleStr | constants.PenCapStyle):\n\"\"\"Set cap style to use.\n        Args:\n            style: cap style to use\n        \"\"\"\nself.setCapStyle(constants.CAP_STYLE.get_enum_value(style))\ndef get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n        Returns:\n            cap style\n        \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\ndef set_join_style(self, style: constants.JoinStyleStr | constants.PenJoinStyle):\n\"\"\"Set join style to use.\n        Args:\n            style: join style to use\n        \"\"\"\nself.setJoinStyle(constants.JOIN_STYLE.get_enum_value(style))\ndef get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n        Returns:\n            join style\n        \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\ndef set_style(\nself, style: constants.PenStyleStr | constants.PenStyle | list[float] | None\n):\n\"\"\"Set pen style to use.\n        Args:\n            style: pen style to use\n        \"\"\"\nif isinstance(style, list):\nself.setDashPattern(style)\nelse:\nif style is None:\nstyle = \"none\"\nself.setStyle(constants.PEN_STYLE.get_enum_value(style))\ndef get_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return current pen style.\n        Returns:\n            pen style\n        \"\"\"\nreturn constants.PEN_STYLE.inverse[self.style()]\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#prettyqt.gui.pen.Pen.get_cap_style","title":"<code>get_cap_style() -&gt; constants.CapStyleStr</code>","text":"<p>Return current cap style.</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_cap_style(self) -&gt; constants.CapStyleStr:\n\"\"\"Return current cap style.\n    Returns:\n        cap style\n    \"\"\"\nreturn constants.CAP_STYLE.inverse[self.capStyle()]\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#prettyqt.gui.pen.Pen.get_join_style","title":"<code>get_join_style() -&gt; constants.JoinStyleStr</code>","text":"<p>Return current join style.</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_join_style(self) -&gt; constants.JoinStyleStr:\n\"\"\"Return current join style.\n    Returns:\n        join style\n    \"\"\"\nreturn constants.JOIN_STYLE.inverse[self.joinStyle()]\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#prettyqt.gui.pen.Pen.get_style","title":"<code>get_style() -&gt; constants.PenStyleStr</code>","text":"<p>Return current pen style.</p> Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def get_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return current pen style.\n    Returns:\n        pen style\n    \"\"\"\nreturn constants.PEN_STYLE.inverse[self.style()]\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#prettyqt.gui.pen.Pen.set_cap_style","title":"<code>set_cap_style(style: constants.CapStyleStr | constants.PenCapStyle)</code>","text":"<p>Set cap style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CapStyleStr | constants.PenCapStyle</code> <p>cap style to use</p> required Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_cap_style(self, style: constants.CapStyleStr | constants.PenCapStyle):\n\"\"\"Set cap style to use.\n    Args:\n        style: cap style to use\n    \"\"\"\nself.setCapStyle(constants.CAP_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#prettyqt.gui.pen.Pen.set_join_style","title":"<code>set_join_style(style: constants.JoinStyleStr | constants.PenJoinStyle)</code>","text":"<p>Set join style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.JoinStyleStr | constants.PenJoinStyle</code> <p>join style to use</p> required Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_join_style(self, style: constants.JoinStyleStr | constants.PenJoinStyle):\n\"\"\"Set join style to use.\n    Args:\n        style: join style to use\n    \"\"\"\nself.setJoinStyle(constants.JOIN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#prettyqt.gui.pen.Pen.set_style","title":"<code>set_style(style: constants.PenStyleStr | constants.PenStyle | list[float] | None)</code>","text":"<p>Set pen style to use.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | constants.PenStyle | list[float] | None</code> <p>pen style to use</p> required Source code in <code>prettyqt\\gui\\pen.py</code> <pre><code>def set_style(\nself, style: constants.PenStyleStr | constants.PenStyle | list[float] | None\n):\n\"\"\"Set pen style to use.\n    Args:\n        style: pen style to use\n    \"\"\"\nif isinstance(style, list):\nself.setDashPattern(style)\nelse:\nif style is None:\nstyle = \"none\"\nself.setStyle(constants.PEN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/Pen.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260764496[\"gui.Pen\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259495312[\"QtGui.QPen\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260764496\n  140736120080256 --&gt; 2103255032912\n  2103259495312 --&gt; 2103260764496\n  2103206874128 --&gt; 2103259495312\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Picture.html","title":"Picture","text":"<p>Qt Base Class: QPicture</p> <p>Signature: <code>QPicture(self, arg__1: Union[PySide6.QtGui.QPicture, int]) -&gt; None QPicture(self, formatVersion: int = -1) -&gt; None</code></p>"},{"location":"qt_modules/gui/Picture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code>, <code>gui.QPicture</code></p> <p>Paint device that records and replays QPainter commands.</p> Source code in <code>prettyqt\\gui\\picture.py</code> <pre><code>class Picture(serializemixin.SerializeMixin, gui.PaintDeviceMixin, gui.QPicture):\n\"\"\"Paint device that records and replays QPainter commands.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/Picture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260771216[\"gui.Picture\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259511632[\"QtGui.QPicture\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260771216\n  140736120080256 --&gt; 2103255032912\n  2103260963216 --&gt; 2103260771216\n  140736120080256 --&gt; 2103260963216\n  2103259511632 --&gt; 2103260771216\n  2103259509712 --&gt; 2103259511632\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Pixmap.html","title":"Pixmap","text":"<p>Qt Base Class: QPixmap</p> <p>Signature: <code>QPixmap(self) -&gt; None QPixmap(self, arg__1: PySide6.QtCore.QSize) -&gt; None QPixmap(self, arg__1: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -&gt; None QPixmap(self, fileName: Union[str, bytes, os.PathLike], format: Optional[bytes] = None, flags: PySide6.QtCore.Qt.ImageConversionFlag = Instance(Qt.AutoColor)) -&gt; None QPixmap(self, image: Union[PySide6.QtGui.QImage, str]) -&gt; None QPixmap(self, w: int, h: int) -&gt; None QPixmap(self, xpm: Iterable) -&gt; None</code></p>"},{"location":"qt_modules/gui/Pixmap.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PixmapMixin</code>, <code>gui.QPixmap</code></p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>class Pixmap(PixmapMixin, gui.QPixmap):\npass\n</code></pre>"},{"location":"qt_modules/gui/Pixmap.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260965136[\"gui.Pixmap\"]\n  2103260951696[\"gui.PixmapMixin\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259370512[\"QtGui.QPixmap\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260951696 --&gt; 2103260965136\n  2103255032912 --&gt; 2103260951696\n  140736120080256 --&gt; 2103255032912\n  2103260963216 --&gt; 2103260951696\n  140736120080256 --&gt; 2103260963216\n  2103259370512 --&gt; 2103260965136\n  2103259509712 --&gt; 2103259370512\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PixmapCache.html","title":"PixmapCache","text":"<p>Qt Base Class: QPixmapCache</p> <p>Signature: <code>QPixmapCache(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/PixmapCache.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QPixmapCache</code></p> <p>Application-wide cache for pixmaps.</p> Source code in <code>prettyqt\\gui\\pixmapcache.py</code> <pre><code>class PixmapCache(QtGui.QPixmapCache):\n\"\"\"Application-wide cache for pixmaps.\"\"\"\ndef __setitem__(self, key: str, value: QtGui.QPixmap):\nself.insert(key, value)\ndef __getitem__(self, key: str) -&gt; QtGui.QPixmap | None:\nreturn self.find(key)\ndef __delitem__(self, key: str):\nself.remove(key)\n</code></pre>"},{"location":"qt_modules/gui/PixmapCache.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260953616[\"gui.PixmapCache\"]\n  2103259461712[\"QtGui.QPixmapCache\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259461712 --&gt; 2103260953616\n  2103206874128 --&gt; 2103259461712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PixmapMixin.html","title":"PixmapMixin","text":""},{"location":"qt_modules/gui/PixmapMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.PaintDeviceMixin</code></p> <p>Off-screen image representation that can be used as a paint device.</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>class PixmapMixin(serializemixin.SerializeMixin, gui.PaintDeviceMixin):\n\"\"\"Off-screen image representation that can be used as a paint device.\"\"\"\ndef __bool__(self):\nreturn not self.isNull()\ndef __eq__(self, other):\nreturn self.toImage() == other.toImage() if isinstance(other, Pixmap) else False\ndef __hash__(self):\nreturn self.cacheKey()\n@classmethod\ndef from_file(cls, path: datatypes.PathType) -&gt; Self:\npath = pathlib.Path(path)\nwith path.open(mode=\"rb\") as f:\ndata = f.read()\n# Create widget\npixmap = cls()\npixmap.loadFromData(core.QByteArray(data))\nreturn pixmap\n@classmethod\ndef from_image(\ncls,\nimg: gui.QImage,\ncolor_preference: constants.ColorPreferenceStr = \"auto\",\ndithering: constants.DitherPreferenceStr = \"diffuse\",\nalpha_dithering: constants.AlphaDitherPreferenceStr = \"threshold\",\nmode_preference: constants.ModePreferenceStr = \"auto\",\n) -&gt; Self:\nflag = constants.ImageConversionFlag(0)\nflag |= constants.COLOR_PREFERENCE.inverse[color_preference]\nflag |= constants.DITHER_PREFERENCE.inverse[dithering]\nflag |= constants.ALPHA_DITHER_PREFERENCE.inverse[alpha_dithering]\nflag |= constants.MODE_PREFERENCE.inverse[mode_preference]\nreturn cls(cls.fromImage(img, flag))\ndef save_to_file(\nself, path: os.PathLike, fmt: str = \"png\", quality: int | None = None\n) -&gt; bool:\nreturn self.save(os.fspath(path), fmt, -1 if quality is None else quality)\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef get_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.rect())\ndef to_image(self) -&gt; gui.Image:\nreturn gui.Image(self.toImage())\ndef rotated(self, rotation: int) -&gt; Pixmap:\nw, h = self.width(), self.height()\npixmap = self.transformed(gui.Transform().rotate(rotation))\nreturn pixmap.copy((pixmap.width() - w) // 2, (pixmap.height() - h) // 2, w, h)\ndef get_image_data_url(self) -&gt; str:\n\"\"\"Render the contents of the pixmap as a data URL (RFC-2397).\n        Returns:\n            datauri : str\n        \"\"\"\ndevice = core.Buffer()\nassert device.open_file(\"read_write\")\nself.save(device, b\"png\")\ndevice.close()\ndata = bytes(device.data())\npayload = base64.b64encode(data).decode(\"ascii\")\nreturn f\"data:image/png;base64,{payload}\"\n@classmethod\ndef create_dot(cls, color: datatypes.ColorType = \"black\", size: int = 16) -&gt; Self:\ncol = colors.get_color(color)\npx = cls(size, size)\npx.fill(constants.GlobalColor.transparent)  # type: ignore\npx_size = px.rect().adjusted(1, 1, -1, -1)\nwith gui.Painter(px) as painter:\npainter.use_antialiasing()\npainter.setBrush(col)\npen_color = gui.Color(15, 15, 15)\npainter.set_pen(color=pen_color, width=1)\npainter.drawEllipse(px_size)\nreturn px\n@classmethod\ndef create_checkerboard_pattern(\ncls, n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType\n) -&gt; Self:\n\"\"\"Construct tileable checkerboard pattern for paint events.\"\"\"\n# Brush will be an nxn checkerboard pattern\npat = cls(2 * n, 2 * n)\nbg0 = colors.get_color(color_1)\nbg1 = colors.get_color(color_2)\nwith gui.Painter(pat) as p:\np.setPen(constants.PenStyle.NoPen)\n# Paint a checkerboard pattern for the color to be overlaid on\np.fillRect(pat.rect(), bg0)\np.fillRect(0, 0, n, n, bg1)\np.fillRect(n, n, 2 * n, 2 * n, bg1)\nreturn pat\n@classmethod\ndef create_char(\ncls,\nchar: str,\nsize: int,\nbackground: datatypes.ColorType = \"black\",\ncolor: datatypes.ColorType = \"white\",\n) -&gt; Self:\npixmap = cls(size, size)\npixmap.fill(constants.GlobalColor.transparent)\nwith gui.Painter(pixmap) as painter:\npainter.setRenderHints(\npainter.RenderHint.Antialiasing\n| painter.RenderHint.TextAntialiasing\n| painter.RenderHint.SmoothPixmapTransform\n)\npainter.set_pen(color=background)\npainter.set_brush(background)\nmargin = 1 + size // 16\ntext_margin = size // 20\nw = size - 2 * margin\nrect = core.RectF(margin, margin, w, w)\npainter.draw_rounded_rect(rect, 30, 30, relative=True)\npainter.set_pen(color=color)\nwith painter.edit_font() as font:  # type: gui.QFont\nfont.setPixelSize(size - 2 * margin - 2 * text_margin)\npainter.draw_text(rect, char, alignment=\"center\")\nreturn pixmap\n</code></pre> Name Children Inherits Pixmapprettyqt.gui.pixmap <ul><li>PixmapMixin</li><li>QPixmap</li></ul> Bitmapprettyqt.gui.bitmap <ul><li>PixmapMixin</li><li>QBitmap</li></ul>"},{"location":"qt_modules/gui/PixmapMixin.html#prettyqt.gui.pixmap.PixmapMixin.create_checkerboard_pattern","title":"<code>create_checkerboard_pattern(n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Construct tileable checkerboard pattern for paint events.</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>@classmethod\ndef create_checkerboard_pattern(\ncls, n: int, color_1: datatypes.ColorType, color_2: datatypes.ColorType\n) -&gt; Self:\n\"\"\"Construct tileable checkerboard pattern for paint events.\"\"\"\n# Brush will be an nxn checkerboard pattern\npat = cls(2 * n, 2 * n)\nbg0 = colors.get_color(color_1)\nbg1 = colors.get_color(color_2)\nwith gui.Painter(pat) as p:\np.setPen(constants.PenStyle.NoPen)\n# Paint a checkerboard pattern for the color to be overlaid on\np.fillRect(pat.rect(), bg0)\np.fillRect(0, 0, n, n, bg1)\np.fillRect(n, n, 2 * n, 2 * n, bg1)\nreturn pat\n</code></pre>"},{"location":"qt_modules/gui/PixmapMixin.html#prettyqt.gui.pixmap.PixmapMixin.get_image_data_url","title":"<code>get_image_data_url() -&gt; str</code>","text":"<p>Render the contents of the pixmap as a data URL (RFC-2397).</p> Source code in <code>prettyqt\\gui\\pixmap.py</code> <pre><code>def get_image_data_url(self) -&gt; str:\n\"\"\"Render the contents of the pixmap as a data URL (RFC-2397).\n    Returns:\n        datauri : str\n    \"\"\"\ndevice = core.Buffer()\nassert device.open_file(\"read_write\")\nself.save(device, b\"png\")\ndevice.close()\ndata = bytes(device.data())\npayload = base64.b64encode(data).decode(\"ascii\")\nreturn f\"data:image/png;base64,{payload}\"\n</code></pre>"},{"location":"qt_modules/gui/PixmapMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260951696[\"gui.PixmapMixin\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103255032912 --&gt; 2103260951696\n  140736120080256 --&gt; 2103255032912\n  2103260963216 --&gt; 2103260951696\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/gui/Polygon.html","title":"Polygon","text":"<p>Qt Base Class: QPolygon</p> <p>Signature: <code>QPolygon(self) -&gt; None QPolygon(self, QPolygon: Union[PySide6.QtGui.QPolygon, Sequence[PySide6.QtCore.QPoint], PySide6.QtCore.QRect]) -&gt; None QPolygon(self, r: PySide6.QtCore.QRect, closed: bool = False) -&gt; None QPolygon(self, v: Sequence[PySide6.QtCore.QPoint]) -&gt; None</code></p>"},{"location":"qt_modules/gui/Polygon.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QPolygon</code></p> <p>List of points using integer precision.</p> Source code in <code>prettyqt\\gui\\polygon.py</code> <pre><code>class Polygon(serializemixin.SerializeMixin, QtGui.QPolygon):\n\"\"\"List of points using integer precision.\"\"\"\ndef __repr__(self):\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef __iter__(self) -&gt; Iterator[core.Point]:\nreturn iter(self.get_point(i) for i in range(self.size()))\ndef __len__(self) -&gt; int:\nreturn self.size()\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, point: datatypes.PointType) -&gt; bool:\nif isinstance(point, tuple):\npoint = core.Point(*point)\nreturn self.containsPoint(point, constants.FillRule.OddEvenFill)\ndef __getitem__(self, index: int) -&gt; core.Point:\nif index &gt;= self.size():\nraise KeyError(index)\nreturn self.get_point(index)\ndef __setitem__(self, index: int, value: datatypes.PointType):\np = core.Point(*value) if isinstance(value, tuple) else value\n# PySide6 workaround: setPoint does not exist\nself.remove(index)\nself.insert(index, p)\ndef __sub__(self, other: QtGui.QPolygon) -&gt; Polygon:\nreturn Polygon(self.subtracted(other))\ndef __and__(self, other: QtGui.QPolygon) -&gt; Polygon:  # &amp;\nreturn Polygon(self.intersected(other))\ndef __xor__(self, other: QtGui.QPolygon) -&gt; Polygon:  # ^\nunion = self | other\nintersect = self &amp; other\nreturn union - intersect\ndef __or__(self, other: QtGui.QPolygon) -&gt; Polygon:  # |\nreturn Polygon(self.united(other))\ndef get_point(self, index: int) -&gt; core.Point:\n# PySide6 doesnt have self.point method\nreturn core.Point(self.value(index))\ndef get_points(self) -&gt; list[core.Point]:\nreturn [self.get_point(i) for i in range(self.size())]\ndef add_points(self, *points: datatypes.PointType):\nfor p in points:\npoint = core.Point(*p) if isinstance(p, tuple) else p\nself.append(point)\ndef get_data_buffer(self, size: int):\nself.resize(size)\nif API == \"pyside6\":\nimport shiboken6\naddress = shiboken6.getCppPointer(self.data())\nbuffer = (ctypes.c_long * 2 * self.size()).from_address(address[0])\nelse:\nbuffer = self.data()\nbuffer.setsize(8 * self.size())\nreturn buffer\n@classmethod\ndef from_xy(cls, xdata, ydata) -&gt; Self:\nimport numpy as np\nsize = len(xdata)\npolyline = cls()\nbuffer = polyline.get_data_buffer(size)\nmemory = np.frombuffer(buffer, np.float64)\nmemory[: (size - 1) * 2 + 1 : 2] = np.array(xdata, dtype=np.float64, copy=False)\nmemory[1 : (size - 1) * 2 + 2 : 2] = np.array(ydata, dtype=np.float64, copy=False)\nreturn polyline\n</code></pre>"},{"location":"qt_modules/gui/Polygon.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260768336[\"gui.Polygon\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259459792[\"QtGui.QPolygon\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260768336\n  140736120080256 --&gt; 2103255032912\n  2103259459792 --&gt; 2103260768336\n  2103206874128 --&gt; 2103259459792\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/PolygonF.html","title":"PolygonF","text":"<p>Qt Base Class: QPolygonF</p> <p>Signature: <code>QPolygonF(self) -&gt; None QPolygonF(self, QPolygonF: Union[PySide6.QtGui.QPolygonF, Sequence[PySide6.QtCore.QPointF], PySide6.QtGui.QPolygon, PySide6.QtCore.QRectF]) -&gt; None QPolygonF(self, a: Union[PySide6.QtGui.QPolygon, Sequence[PySide6.QtCore.QPoint], PySide6.QtCore.QRect]) -&gt; None QPolygonF(self, r: Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect]) -&gt; None QPolygonF(self, v: Sequence[PySide6.QtCore.QPointF]) -&gt; None</code></p>"},{"location":"qt_modules/gui/PolygonF.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QPolygonF</code></p> <p>List of points using floating point precision.</p> Source code in <code>prettyqt\\gui\\polygonf.py</code> <pre><code>class PolygonF(serializemixin.SerializeMixin, gui.QPolygonF):\n\"\"\"List of points using floating point precision.\"\"\"\ndef __repr__(self):\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef __iter__(self) -&gt; Iterator[core.PointF]:\nreturn iter(self.get_point(i) for i in range(self.size()))\ndef __len__(self) -&gt; int:\nreturn self.size()\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __contains__(self, point: datatypes.PointFType) -&gt; bool:\nif isinstance(point, tuple):\npoint = core.PointF(*point)\nreturn self.containsPoint(point, constants.FillRule.OddEvenFill)\ndef __getitem__(self, index: int) -&gt; core.PointF:\nif index &gt;= self.size():\nraise KeyError(index)\nreturn self.get_point(index)\n# def __setitem__(self, index: int, value: datatypes.PointType):\n#     if isinstance(value, tuple):\n#         self.setPoint(index, *value)\n#     else:\n#         self.setPoint(index, value)\ndef __sub__(self, other: gui.QPolygonF) -&gt; Self:\nreturn type(self)(self.subtracted(other))\ndef __and__(self, other: gui.QPolygonF) -&gt; Self:  # &amp;\nreturn type(self)(self.intersected(other))\ndef __xor__(self, other: gui.QPolygonF) -&gt; Self:  # ^\nunion = self | other\nintersect = self &amp; other\nreturn union - intersect\ndef __or__(self, other: gui.QPolygonF) -&gt; Self:  # |\nreturn type(self)(self.united(other))\ndef __eq__(self, other: object) -&gt; bool:\nreturn (\nlist(self) == [other.at(i) for i in range(other.size())]\nif isinstance(other, type(self))\nelse False\n)\ndef get_point(self, index: int) -&gt; core.PointF:\nreturn core.PointF(self.at(index))\ndef get_points(self) -&gt; list[core.PointF]:\nreturn [self.get_point(i) for i in range(self.size())]\ndef add_points(self, *points: datatypes.PointFType):\nfor p in points:\nself.append(datatypes.to_pointf(p))\ndef to_polygon(self) -&gt; gui.Polygon:\nreturn gui.Polygon(self.toPolygon())\n@classmethod\ndef create_star(cls, scale: int = 1) -&gt; Self:\npoly = cls()\npoly.append(core.PointF(0.5 * scale, 0.0))\nfor i in range(1, 5):\nval = 0.8 * i * math.pi\npoint = core.PointF(0.5 * scale * math.cos(val), 0.5 * scale * math.sin(val))\npoly.append(point)\nreturn poly\n@classmethod\ndef create_diamond(cls, scale: int = 1) -&gt; Self:\npoints = [\ncore.PointF(-0.1 * scale, 0.0),\ncore.PointF(0.0, -0.1 * scale),\ncore.PointF(0.1 * scale, 0.0),\ncore.PointF(0.0, 0.1 * scale),\ncore.PointF(-0.1 * scale, 0.0),\n]\npoly = gui.PolygonF()\npoly.add_points(*points)\nreturn poly\ndef get_data_buffer(self, size: int):\nself.resize(size)\nif API == \"pyside6\":\nimport shiboken6\naddress = shiboken6.getCppPointer(self.data())\nbuffer = (ctypes.c_double * 2 * self.size()).from_address(address[0])\nelse:\nbuffer = self.data()\nbuffer.setsize(16 * self.size())\nreturn buffer\n@classmethod\ndef from_xy(cls, xdata, ydata) -&gt; Self:\nimport numpy as np\nsize = len(xdata)\npolyline = cls()\nbuffer = polyline.get_data_buffer(size)\nmemory = np.frombuffer(buffer, np.float64)\nmemory[: (size - 1) * 2 + 1 : 2] = np.array(xdata, dtype=np.float64, copy=False)\nmemory[1 : (size - 1) * 2 + 2 : 2] = np.array(ydata, dtype=np.float64, copy=False)\nreturn polyline\n</code></pre>"},{"location":"qt_modules/gui/PolygonF.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260765456[\"gui.PolygonF\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259467472[\"QtGui.QPolygonF\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260765456\n  140736120080256 --&gt; 2103255032912\n  2103259467472 --&gt; 2103260765456\n  2103206874128 --&gt; 2103259467472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/RadialGradient.html","title":"RadialGradient","text":"<p>Qt Base Class: QRadialGradient</p> <p>Signature: <code>QRadialGradient(self) -&gt; None QRadialGradient(self, QRadialGradient: PySide6.QtGui.QRadialGradient) -&gt; None QRadialGradient(self, center: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], centerRadius: float, focalPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], focalRadius: float) -&gt; None QRadialGradient(self, center: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], radius: float) -&gt; None QRadialGradient(self, center: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], radius: float, focalPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -&gt; None QRadialGradient(self, cx: float, cy: float, centerRadius: float, fx: float, fy: float, focalRadius: float) -&gt; None QRadialGradient(self, cx: float, cy: float, radius: float) -&gt; None QRadialGradient(self, cx: float, cy: float, radius: float, fx: float, fy: float) -&gt; None</code></p>"},{"location":"qt_modules/gui/RadialGradient.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.GradientMixin</code>, <code>gui.QRadialGradient</code></p> <p>Used in combination with QBrush to specify a radial gradient brush.</p> Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>class RadialGradient(gui.GradientMixin, gui.QRadialGradient):\n\"\"\"Used in combination with QBrush to specify a radial gradient brush.\"\"\"\ndef __repr__(self):\nreturn get_repr(\nself,\nself.get_center(),\nself.centerRadius(),\nself.get_focal_point(),\nself.focalRadius(),\n)\ndef get_center(self) -&gt; core.PointF:\nreturn core.PointF(self.center())\ndef get_focal_point(self) -&gt; core.PointF:\nreturn core.PointF(self.focalPoint())\ndef get_css(self) -&gt; str:\n\"\"\"Convert gradient to a CSS string. Can be used for stylesheets.\"\"\"\ncx, cy = self.center().x(), self.center().y()\nfx, fy = self.focalPoint().x(), self.focalPoint().y()\nstops = self.stops()\nstops = \"\\n\".join(f\"    stop: {stop:f} {color.name()}\" for stop, color in stops)\nspread = self.get_spread()\n# couldnt find equivalent for focalRadius on first sight.\nreturn (\n\"qradialgradient(\\n\"\nf\"    cx: {cx}, cy: {cy}, radius: {self.radius()}, fx: {fx}, fy: {fy},\\n\"\nf\"    spread:{spread},\\n\"\nf\"{stops})\"\n)\n</code></pre>"},{"location":"qt_modules/gui/RadialGradient.html#prettyqt.gui.radialgradient.RadialGradient.get_css","title":"<code>get_css() -&gt; str</code>","text":"<p>Convert gradient to a CSS string. Can be used for stylesheets.</p> Source code in <code>prettyqt\\gui\\radialgradient.py</code> <pre><code>def get_css(self) -&gt; str:\n\"\"\"Convert gradient to a CSS string. Can be used for stylesheets.\"\"\"\ncx, cy = self.center().x(), self.center().y()\nfx, fy = self.focalPoint().x(), self.focalPoint().y()\nstops = self.stops()\nstops = \"\\n\".join(f\"    stop: {stop:f} {color.name()}\" for stop, color in stops)\nspread = self.get_spread()\n# couldnt find equivalent for focalRadius on first sight.\nreturn (\n\"qradialgradient(\\n\"\nf\"    cx: {cx}, cy: {cy}, radius: {self.radius()}, fx: {fx}, fy: {fy},\\n\"\nf\"    spread:{spread},\\n\"\nf\"{stops})\"\n)\n</code></pre>"},{"location":"qt_modules/gui/RadialGradient.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260750096[\"gui.RadialGradient\"]\n  2103260725136[\"gui.GradientMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259562512[\"QtGui.QRadialGradient\"]\n  2103259545232[\"QtGui.QGradient\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260725136 --&gt; 2103260750096\n  140736120080256 --&gt; 2103260725136\n  2103259562512 --&gt; 2103260750096\n  2103259545232 --&gt; 2103259562512\n  2103206874128 --&gt; 2103259545232\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/RasterWindow.html","title":"RasterWindow","text":"<p>Qt Base Class: QRasterWindow</p> <p>Signature: <code>QRasterWindow(self, parent: Optional[PySide6.QtGui.QWindow] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/RasterWindow.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.PaintDeviceWindowMixin</code>, <code>gui.QRasterWindow</code></p> <p>Convenience class for using QPainter on a QWindow.</p> Source code in <code>prettyqt\\gui\\rasterwindow.py</code> <pre><code>class RasterWindow(gui.PaintDeviceWindowMixin, gui.QRasterWindow):\n\"\"\"Convenience class for using QPainter on a QWindow.\"\"\"\n</code></pre>"},{"location":"qt_modules/gui/RasterWindow.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260966096[\"gui.RasterWindow\"]\n  2103260964176[\"gui.PaintDeviceWindowMixin\"]\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103260806736[\"QtGui.QRasterWindow\"]\n  2103260786576[\"QtGui.QPaintDeviceWindow\"]\n  2103260797136[\"QtGui.QWindow\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259447312[\"QtGui.QSurface\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103260964176 --&gt; 2103260966096\n  2103260916176 --&gt; 2103260964176\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096\n  2103260963216 --&gt; 2103260964176\n  140736120080256 --&gt; 2103260963216\n  2103260806736 --&gt; 2103260966096\n  2103260786576 --&gt; 2103260806736\n  2103260797136 --&gt; 2103260786576\n  2103254677056 --&gt; 2103260797136\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259447312 --&gt; 2103260797136\n  2103206874128 --&gt; 2103259447312\n  2103259509712 --&gt; 2103260786576\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/gui/RasterWindow.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>title</code> QString <code>modality</code> Qt::WindowModality <code>flags</code> QFlags <code>x</code> int <code>y</code> int <code>width</code> int <code>height</code> int <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>visible</code> bool <code>active</code> bool <code>visibility</code> QWindow::Visibility <code>contentOrientation</code> Qt::ScreenOrientation <code>opacity</code> double <code>transientParent</code> QWindow"},{"location":"qt_modules/gui/Region.html","title":"Region","text":"<p>Qt Base Class: QRegion</p> <p>Signature: <code>QRegion(self) -&gt; None QRegion(self, bitmap: Union[PySide6.QtGui.QBitmap, str]) -&gt; None QRegion(self, pa: Union[PySide6.QtGui.QPolygon, Sequence[PySide6.QtCore.QPoint], PySide6.QtCore.QRect], fillRule: PySide6.QtCore.Qt.FillRule = Instance(Qt.OddEvenFill)) -&gt; None QRegion(self, r: PySide6.QtCore.QRect, t: PySide6.QtGui.QRegion.RegionType = Instance(PySide6.QtGui.QRegion.RegionType.Rectangle)) -&gt; None QRegion(self, region: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -&gt; None QRegion(self, x: int, y: int, w: int, h: int, t: PySide6.QtGui.QRegion.RegionType = Instance(PySide6.QtGui.QRegion.RegionType.Rectangle)) -&gt; None</code></p>"},{"location":"qt_modules/gui/Region.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QRegion</code></p> Source code in <code>prettyqt\\gui\\region.py</code> <pre><code>class Region(serializemixin.SerializeMixin, QtGui.QRegion):\ndef __repr__(self):\nreturn get_repr(self, self.get_bounding_rect(), self.get_shape())\ndef get_bounding_rect(self) -&gt; core.Rect:\nreturn core.Rect(self.boundingRect())\ndef get_shape(self) -&gt; RegionTypeStr:  # workaround for not being able to get shape\nreturn \"rectangle\" if self == Region(self.get_bounding_rect()) else \"ellipse\"\n</code></pre>"},{"location":"qt_modules/gui/Region.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260770256[\"gui.Region\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259453072[\"QtGui.QRegion\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260770256\n  140736120080256 --&gt; 2103255032912\n  2103259453072 --&gt; 2103260770256\n  2103206874128 --&gt; 2103259453072\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/RegularExpressionValidator.html","title":"RegularExpressionValidator","text":"<p>Qt Base Class: QRegularExpressionValidator</p> <p>Signature: <code>QRegularExpressionValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QRegularExpressionValidator(self, re: Union[PySide6.QtCore.QRegularExpression, str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/RegularExpressionValidator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.ValidatorMixin</code>, <code>gui.QRegularExpressionValidator</code></p> <p>Used to check a string against a regular expression.</p> Source code in <code>prettyqt\\gui\\regularexpressionvalidator.py</code> <pre><code>class RegularExpressionValidator(gui.ValidatorMixin, gui.QRegularExpressionValidator):\n\"\"\"Used to check a string against a regular expression.\"\"\"\nID = \"regular_expression\"\ndef __init__(self, *args, **kwargs):\n# allow passing strings as well as re.Pattern to the ctor\nmatch args, kwargs:\ncase (str() as pat, *rest), _:\nsuper().__init__(core.QRegularExpression(pat), *rest, **kwargs)\ncase _, {\"regular_expression\": str() as reg_str, **rest}:\npat = core.QRegularExpression(reg_str)\nsuper().__init__(*args, regular_expression=pat, **rest)\ncase (re.Pattern() as pat,), _:\nsuper().__init__(core.RegularExpression(pat))\ncase _, _:\nsuper().__init__(*args, **kwargs)\ndef __repr__(self):\nreturn get_repr(self, self.regularExpression())\ndef __getstate__(self):\nreturn dict(pattern=core.RegularExpression(self.regularExpression()))\ndef __setstate__(self, state):\nself.setRegularExpression(state[\"pattern\"])\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __eq__(self, other: object):\nreturn (\nself.regularExpression() == other.regularExpression()\nif isinstance(other, type(self))\nelse False\n)\ndef set_regex(\nself,\nregex: datatypes.PatternAndStringType,\nflags=None,\n):\nself.setRegularExpression(datatypes.to_regular_expression(regex))\ndef get_regex(self) -&gt; str:\nval = self.regularExpression()\nreturn val.pattern()\n</code></pre>"},{"location":"qt_modules/gui/RegularExpressionValidator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260961296[\"gui.RegularExpressionValidator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260816336[\"QtGui.QRegularExpressionValidator\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260958416 --&gt; 2103260961296\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260816336 --&gt; 2103260961296\n  2103260802896 --&gt; 2103260816336\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/RegularExpressionValidator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>regularExpression</code> QRegularExpression"},{"location":"qt_modules/gui/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>gui</li> <li>AbstractTextDocumentLayoutMixin</li> <li>TextImageFormat</li> <li>TextFormat</li> <li>PainterMixin</li> <li>RadialGradient</li> <li>PaintDeviceMixin</li> <li>SurfaceFormat</li> <li>ActionGroup</li> <li>TextFrame</li> <li>ActionMixin</li> <li>FontDatabase</li> <li>Image</li> <li>BackingStore</li> <li>TextObjectMixin</li> <li>TextListFormat</li> <li>Painter</li> <li>PageLayout</li> <li>PaintDeviceWindowMixin</li> <li>Surface</li> <li>TextFormatMixin</li> <li>TextObjectInterface</li> <li>ImageWriter</li> <li>Movie</li> <li>Clipboard</li> <li>Action</li> <li>AbstractFileIconProviderMixin</li> <li>Matrix4x4</li> <li>Polygon</li> <li>FontMetrics</li> <li>TextDocumentFragment</li> <li>TextDocumentWriter</li> <li>Pixmap</li> <li>Window</li> <li>TextTableCell</li> <li>WindowMixin</li> <li>UndoStack</li> <li>GuiApplicationMixin</li> <li>Font</li> <li>IntValidator</li> <li>TextLine</li> <li>SessionManager</li> <li>TextTable</li> <li>Vector4D</li> <li>PainterPath</li> <li>ConicalGradient</li> <li>Gradient</li> <li>RasterWindow</li> <li>PaintDevice</li> <li>AbstractTextDocumentLayout</li> <li>Icon</li> <li>GuiApplication</li> <li>Transform</li> <li>TextBlockUserData</li> <li>TextOption</li> <li>ValidatorMixin</li> <li>StyleHints</li> <li>TextObject</li> <li>TextLength</li> <li>PdfWriter</li> <li>Region</li> <li>LinearGradient</li> <li>PaintDeviceWindow</li> <li>AbstractFileIconProvider</li> <li>SurfaceMixin</li> <li>Cursor</li> <li>PagedPaintDeviceMixin</li> <li>PageSize</li> <li>Validator</li> <li>Shortcut</li> <li>SyntaxHighlighter</li> <li>TextBlockGroup</li> <li>PageRanges</li> <li>TextFrameFormat</li> <li>Picture</li> <li>StaticText</li> <li>PixmapMixin</li> <li>TextCharFormatMixin</li> <li>StandardItem</li> <li>PagedPaintDevice</li> <li>TextBlock</li> <li>InputMethod</li> <li>Drag</li> <li>UndoCommand</li> <li>TextTableFormat</li> <li>TextCharFormat</li> <li>PainterPathStroker</li> <li>Brush</li> <li>IconEngine</li> <li>Vector3D</li> <li>DesktopServices</li> <li>StandardItemModel</li> <li>Pen</li> <li>RegularExpressionValidator</li> <li>Screen</li> <li>UndoGroup</li> <li>ImageIOHandler</li> <li>FontMetricsF</li> <li>Palette</li> <li>DoubleValidator</li> <li>PixmapCache</li> <li>ImageReader</li> <li>TextCursor</li> <li>PolygonF</li> <li>TextDocument</li> <li>TextLayout</li> <li>ColorSpace</li> <li>TextBlockFormat</li> <li>KeySequence</li> <li>TextTableCellFormat</li> <li>FontInfo</li> <li>Color</li> <li>GradientMixin</li> <li>Bitmap</li> </ul>"},{"location":"qt_modules/gui/Screen.html","title":"Screen","text":""},{"location":"qt_modules/gui/Screen.html#docstrings","title":"DocStrings","text":"<p>Used to query screen properties.</p> Source code in <code>prettyqt\\gui\\screen.py</code> <pre><code>class Screen:\n\"\"\"Used to query screen properties.\"\"\"\ndef __init__(self, item: gui.QScreen):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.geometry())\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef get_available_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.availableGeometry())\ndef get_available_size(self) -&gt; core.Size:\nreturn core.Size(self.availableSize())\ndef get_available_virtual_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.availableVirtualGeometry())\ndef get_available_virtual_size(self) -&gt; core.Size:\nreturn core.Size(self.availableVirtualSize())\ndef get_virtual_geometry(self) -&gt; core.Rect:\nreturn core.Rect(self.virtualGeometry())\ndef get_virtual_size(self) -&gt; core.Size:\nreturn core.Size(self.virtualSize())\ndef get_native_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.nativeOrientation()]\ndef get_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.orientation()]\ndef get_primary_orientation(self) -&gt; constants.ScreenOrientationStr:\nreturn constants.SCREEN_ORIENTATION.inverse[self.primaryOrientation()]\ndef get_physical_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.physicalSize())\ndef get_angle_between(\nself,\norientation_1: constants.ScreenOrientationStr | constants.ScreenOrientation,\norientation_2: constants.ScreenOrientationStr | constants.ScreenOrientation,\n):\nself.angleBetween(\nconstants.SCREEN_ORIENTATION.get_enum_value(orientation_1),\nconstants.SCREEN_ORIENTATION.get_enum_value(orientation_2),\n)\ndef grab_window(\nself,\nwindow: int = 0,\nx: int = 0,\ny: int = 0,\nwidth: int | None = None,\nheight: int | None = None,\n) -&gt; gui.Pixmap:\nif width is None:\nwidth = -1\nif height is None:\nheight = -1\npx = self.grabWindow(window, x, y, width, height)\nreturn gui.Pixmap(px)\ndef get_virtual_siblings(self) -&gt; list[Screen]:\nreturn [Screen(i) for i in self.virtualSiblings()]\n</code></pre>"},{"location":"qt_modules/gui/Screen.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260944976[\"gui.Screen\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260944976</code></pre>"},{"location":"qt_modules/gui/SessionManager.html","title":"SessionManager","text":""},{"location":"qt_modules/gui/SessionManager.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>class SessionManager(core.ObjectMixin):\ndef __init__(self, item: QtGui.QSessionManager):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef set_restart_hint(self, style: RestartHintStr | QtGui.QSessionManager.RestartHint):\n\"\"\"Set the restart hint.\n        Args:\n            style: restart hint\n        \"\"\"\nself.setRestartHint(RESTART_HINT.get_enum_value(style))\ndef get_restart_hint(self) -&gt; RestartHintStr:\n\"\"\"Return current restart hint.\n        Returns:\n            restart hint\n        \"\"\"\nreturn RESTART_HINT.inverse[self.restartHint()]\n</code></pre>"},{"location":"qt_modules/gui/SessionManager.html#prettyqt.gui.sessionmanager.SessionManager.get_restart_hint","title":"<code>get_restart_hint() -&gt; RestartHintStr</code>","text":"<p>Return current restart hint.</p> Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def get_restart_hint(self) -&gt; RestartHintStr:\n\"\"\"Return current restart hint.\n    Returns:\n        restart hint\n    \"\"\"\nreturn RESTART_HINT.inverse[self.restartHint()]\n</code></pre>"},{"location":"qt_modules/gui/SessionManager.html#prettyqt.gui.sessionmanager.SessionManager.set_restart_hint","title":"<code>set_restart_hint(style: RestartHintStr | QtGui.QSessionManager.RestartHint)</code>","text":"<p>Set the restart hint.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>RestartHintStr | QtGui.QSessionManager.RestartHint</code> <p>restart hint</p> required Source code in <code>prettyqt\\gui\\sessionmanager.py</code> <pre><code>def set_restart_hint(self, style: RestartHintStr | QtGui.QSessionManager.RestartHint):\n\"\"\"Set the restart hint.\n    Args:\n        style: restart hint\n    \"\"\"\nself.setRestartHint(RESTART_HINT.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/SessionManager.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260957456[\"gui.SessionManager\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103260957456\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/Shortcut.html","title":"Shortcut","text":"<p>Qt Base Class: QShortcut</p> <p>Signature: <code>QShortcut(self, arg__1: PySide6.QtGui.QKeySequence.StandardKey, arg__2: PySide6.QtCore.QObject, arg__3: Callable, arg__4: PySide6.QtCore.Qt.ShortcutContext = Instance(Qt.WindowShortcut)) -&gt; None QShortcut(self, arg__1: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], arg__2: PySide6.QtCore.QObject, arg__3: Callable, arg__4: PySide6.QtCore.Qt.ShortcutContext = Instance(Qt.WindowShortcut)) -&gt; None QShortcut(self, key: PySide6.QtGui.QKeySequence.StandardKey, parent: PySide6.QtCore.QObject, member: Optional[bytes] = None, ambiguousMember: Optional[bytes] = None, context: PySide6.QtCore.Qt.ShortcutContext = Instance(Qt.WindowShortcut)) -&gt; None QShortcut(self, key: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], parent: PySide6.QtCore.QObject, member: Optional[bytes] = None, ambiguousMember: Optional[bytes] = None, context: PySide6.QtCore.Qt.ShortcutContext = Instance(Qt.WindowShortcut)) -&gt; None QShortcut(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/gui/Shortcut.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>gui.QShortcut</code></p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>class Shortcut(core.ObjectMixin, gui.QShortcut):\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nargs = (gui.KeySequence(args[0]), *rest)\nsuper().__init__(*args, **kwargs)\ndef __str__(self):\nreturn self.key().toString()\ndef set_context(\nself, context: constants.ShortcutContextStr | constants.ShortcutContext\n):\n\"\"\"Set shortcut context.\n        Args:\n            context: shortcut context\n        \"\"\"\nself.setContext(constants.SHORTCUT_CONTEXT.get_enum_value(context))\ndef get_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n        Returns:\n            shortcut context\n        \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[self.context()]\ndef set_key(\nself,\nkey: datatypes.KeyCombinationType,\n):\nkeysequence = gui.KeySequence(key)\nself.setKey(keysequence)\ndef set_keys(self, keys: Iterable[datatypes.KeyCombinationType]):\nkeysequences = [gui.KeySequence(key) for key in keys]\nself.setKeys(keysequences)\ndef get_key(self) -&gt; gui.KeySequence:\n\"\"\"Return the shortcut's key sequence.\n        Returns:\n            Key sequence\n        \"\"\"\nreturn gui.KeySequence(self.key())\ndef get_keys(self) -&gt; list[gui.KeySequence]:\nreturn [gui.KeySequence(i) for i in self]\n</code></pre>"},{"location":"qt_modules/gui/Shortcut.html#prettyqt.gui.shortcut.Shortcut.get_context","title":"<code>get_context() -&gt; constants.ShortcutContextStr</code>","text":"<p>Return shortcut context.</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_context(self) -&gt; constants.ShortcutContextStr:\n\"\"\"Return shortcut context.\n    Returns:\n        shortcut context\n    \"\"\"\nreturn constants.SHORTCUT_CONTEXT.inverse[self.context()]\n</code></pre>"},{"location":"qt_modules/gui/Shortcut.html#prettyqt.gui.shortcut.Shortcut.get_key","title":"<code>get_key() -&gt; gui.KeySequence</code>","text":"<p>Return the shortcut's key sequence.</p> Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def get_key(self) -&gt; gui.KeySequence:\n\"\"\"Return the shortcut's key sequence.\n    Returns:\n        Key sequence\n    \"\"\"\nreturn gui.KeySequence(self.key())\n</code></pre>"},{"location":"qt_modules/gui/Shortcut.html#prettyqt.gui.shortcut.Shortcut.set_context","title":"<code>set_context(context: constants.ShortcutContextStr | constants.ShortcutContext)</code>","text":"<p>Set shortcut context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>constants.ShortcutContextStr | constants.ShortcutContext</code> <p>shortcut context</p> required Source code in <code>prettyqt\\gui\\shortcut.py</code> <pre><code>def set_context(\nself, context: constants.ShortcutContextStr | constants.ShortcutContext\n):\n\"\"\"Set shortcut context.\n    Args:\n        context: shortcut context\n    \"\"\"\nself.setContext(constants.SHORTCUT_CONTEXT.get_enum_value(context))\n</code></pre>"},{"location":"qt_modules/gui/Shortcut.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260943056[\"gui.Shortcut\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260794256[\"QtGui.QShortcut\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103260943056\n  140736120080256 --&gt; 2103255067472\n  2103260794256 --&gt; 2103260943056\n  2103254677056 --&gt; 2103260794256\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Shortcut.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>key</code> QKeySequence <code>enabled</code> bool <code>autoRepeat</code> bool <code>context</code> Qt::ShortcutContext"},{"location":"qt_modules/gui/StandardItem.html","title":"StandardItem","text":"<p>Qt Base Class: QStandardItem</p> <p>Signature: <code>QStandardItem(self) -&gt; None QStandardItem(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str) -&gt; None QStandardItem(self, other: PySide6.QtGui.QStandardItem) -&gt; None QStandardItem(self, rows: int, columns: int = 1) -&gt; None QStandardItem(self, text: str) -&gt; None</code></p>"},{"location":"qt_modules/gui/StandardItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>gui.QStandardItem</code></p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>class StandardItem(serializemixin.SerializeMixin, gui.QStandardItem):\ndef __repr__(self):\nreturn get_repr(self, self.get_icon(), self.text())\ndef __getitem__(\nself, index: int | slice | tuple[int | slice, int | slice] | core.QModelIndex\n) -&gt; gui.QStandardItem | listdelegators.ListDelegator[gui.QStandardItem]:\nmatch index:\ncase int():\nif index &gt;= self.childCount():\nraise IndexError(index)\nreturn self.child(index)\ncase slice():\nreturn self.__getitem__(index, 0)\ncase int() as row, int() as col:\nreturn self.child(row, col)\ncase (row, col):\nrowcount = self.rowCount()\ncolcount = self.columnCount()\nchildren = [\nself.child(i, j)\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount)\n]\nreturn listdelegators.ListDelegator(children)\ncase _:\nraise TypeError(index)\ndef __delitem__(self, index: int | tuple[int, int]):\nitem = self.takeRow(index) if isinstance(index, int) else self.takeChild(*index)\nif item is None:\nraise KeyError(index)\nreturn item\ndef __iter__(self) -&gt; Iterator[gui.QStandardItem]:\nreturn iter(self.get_children())\ndef __add__(self, other: str | gui.QStandardItem) -&gt; StandardItem:\nmatch other:\ncase gui.QStandardItem() | str():\nself.add(other)\nreturn self\ncase _:\nraise TypeError(\"wrong type for addition\")\ndef get_children(self) -&gt; listdelegators.ListDelegator[gui.QStandardItem]:\nitems = [self.child(index) for index in range(self.rowCount())]\nreturn listdelegators.ListDelegator(items)\ndef add(self, *item: str | gui.QStandardItem):\nfor i in item:\nnew_item = type(self)(i) if isinstance(i, str) else i\nself.appendRow([new_item])\ndef clone(self) -&gt; Self:\nitem = type(self)()\ncore.DataStream.copy_data(self, item)\nreturn item\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef set_checkstate(\nself, state: constants.CheckStateStr | constants.CheckState | bool\n):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        \"\"\"\nif isinstance(state, bool):\nstate = (\nconstants.CheckState.Checked if state else constants.CheckState.Unchecked\n)\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\ndef is_checked(self):\nreturn self.checkState() == constants.CheckState.Checked\ndef toggle_checkstate(self):\nif self.checkState() == constants.CheckState.Checked:\nself.setCheckState(constants.CheckState.Unchecked)\nelse:\nself.setCheckState(constants.CheckState.Checked)\ndef get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\ndef set_text_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the text.\n        Args:\n            alignment: alignment for the format\n        \"\"\"\nself.setTextAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_text_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current text alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.textAlignment()]\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_data(self, data: Any, role: constants.ItemDataRoleStr | int):\nitem_role = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setData(data, item_role)\ndef get_data(self, role: constants.ItemDataRoleStr | int):\nitem_role = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nreturn super().data(item_role)\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\nrich_text: bool = False,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\ns = datatypes.to_size(size)\ntooltip = f'&lt;img src={path!r} width=\"{s.width()}\" height=\"{s.height()}\"&gt;'\nif rich_text:\ntooltip = f\"&lt;html&gt;{html.escape(tooltip)}&lt;/html&gt;\"\nsuper().setToolTip(tooltip)\ndef set_size_hint(self, hint: datatypes.SizeType):\nself.setSizeHint(datatypes.to_size(hint))\ndef add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: gui.QBrush | None = None,\nbackground: gui.QBrush | None = None,\nfont: gui.QFont | None = None,\nselectable: bool = True,\nenabled: bool = True,\neditable: bool = False,\nstatus_tip: str = \"\",\ntool_tip: str = \"\",\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.CheckStateStr | None = None,\nflags: constants.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; Self:\nitem = type(self)(name)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(v, k)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif enabled:\nitem.setEnabled(enabled)\nif editable:\nitem.setEditable(editable)\nif selectable:\nitem.setSelectable(selectable)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.appendRow([item])\nreturn item\n</code></pre>"},{"location":"qt_modules/gui/StandardItem.html#prettyqt.gui.standarditem.StandardItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"qt_modules/gui/StandardItem.html#prettyqt.gui.standarditem.StandardItem.get_text_alignment","title":"<code>get_text_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current text alignment.</p> Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def get_text_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current text alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.textAlignment()]\n</code></pre>"},{"location":"qt_modules/gui/StandardItem.html#prettyqt.gui.standarditem.StandardItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState | bool)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState | bool</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_checkstate(\nself, state: constants.CheckStateStr | constants.CheckState | bool\n):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nif isinstance(state, bool):\nstate = (\nconstants.CheckState.Checked if state else constants.CheckState.Unchecked\n)\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/gui/StandardItem.html#prettyqt.gui.standarditem.StandardItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"qt_modules/gui/StandardItem.html#prettyqt.gui.standarditem.StandardItem.set_text_alignment","title":"<code>set_text_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the text.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the format</p> required Source code in <code>prettyqt\\gui\\standarditem.py</code> <pre><code>def set_text_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the text.\n    Args:\n        alignment: alignment for the format\n    \"\"\"\nself.setTextAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/gui/StandardItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260779856[\"gui.StandardItem\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259424272[\"QtGui.QStandardItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260779856\n  140736120080256 --&gt; 2103255032912\n  2103259424272 --&gt; 2103260779856\n  2103206874128 --&gt; 2103259424272\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/StandardItemModel.html","title":"StandardItemModel","text":"<p>Qt Base Class: QStandardItemModel</p> <p>Signature: <code>QStandardItemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QStandardItemModel(self, rows: int, columns: int, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/StandardItemModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code>, <code>gui.QStandardItemModel</code></p> Source code in <code>prettyqt\\gui\\standarditemmodel.py</code> <pre><code>class StandardItemModel(core.AbstractItemModelMixin, gui.QStandardItemModel):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setItemPrototype(gui.StandardItem())\ndef __getitem__(\nself, index: int | slice | tuple[int | slice, int | slice] | core.QModelIndex\n) -&gt; gui.QStandardItem | listdelegators.ListDelegator[gui.QStandardItem]:\nrowcount = self.rowCount()\ncolcount = self.columnCount()\nmatch index:\ncase int() as row:\nif row &lt; 0:\nrow = row + rowcount\nif index &gt;= self.rowCount():\nraise IndexError(index)\nreturn self.item(index)\ncase slice():\nreturn self.__getitem__(index, 0)\ncase core.QModelIndex():\nreturn self.itemFromIndex(index)\ncase int() as row, int() as col:\nif row &lt; 0:\nrow = row + rowcount\nif col &lt; 0:\ncol = col + colcount\nreturn self.item(row, col)\ncase (row, col):\nitems = [\nself.item(i, j)\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount)\n]\nreturn listdelegators.ListDelegator(items)\ncase _:\nraise TypeError(index)\ndef __delitem__(self, index: int | tuple[int, int]):\nmatch index:\ncase int():\nitem = self.takeRow(index)\ncase (int(), int()):\nitem = self.takeItem(*index)\nif item is None:\nraise KeyError(index)\nreturn item\ndef __iter__(self) -&gt; Iterator[gui.QStandardItem]:\nreturn iter(self.get_children())\ndef __getstate__(self):\nreturn dict(items=[self.item(index) for index in range(self.rowCount())])\ndef __setstate__(self, state):\nfor item in state[\"items\"]:\nself.appendRow([item])\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __add__(self, other: str | gui.QStandardItem) -&gt; StandardItemModel:\nmatch other:\ncase gui.QStandardItem() | str():\nself.add(other)\nreturn self\ncase _:\nraise TypeError(\"wrong type for addition\")\ndef get_children(self) -&gt; listdelegators.ListDelegator[gui.QStandardItem]:\nitems = [self.item(index) for index in range(self.rowCount())]\nreturn listdelegators.ListDelegator(items)\ndef add(self, *item: str | gui.QStandardItem):\nfor i in item:\nnew_item = gui.StandardItem(i) if isinstance(i, str) else i\nself.appendRow([new_item])\ndef find_items(\nself,\ntext: str,\ncolumn: int = 0,\nmode: constants.MatchFlagStr | constants.MatchFlag = \"exact\",\nrecursive: bool = False,\ncase_sensitive: bool = False,\n) -&gt; listdelegators.ListDelegator[gui.QStandardItem]:\nflag = constants.MATCH_FLAGS.get_enum_value(mode)\nif recursive:\nflag |= constants.MatchFlag.MatchRecursive\nif case_sensitive:\nflag |= constants.MatchFlag.MatchCaseSensitive\nitems = self.findItems(text, flag, column)  # type: ignore\nreturn listdelegators.ListDelegator(items)\ndef add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: gui.QBrush | None = None,\nbackground: gui.QBrush | None = None,\nfont: gui.QFont | None = None,\nselectable: bool = True,\nenabled: bool = True,\neditable: bool = False,\nstatus_tip: str = \"\",\ntool_tip: str = \"\",\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | None = None,\nflags: constants.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; gui.StandardItem:\nitem = gui.StandardItem(name)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(v, k)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif enabled:\nitem.setEnabled(enabled)\nif editable:\nitem.setEditable(editable)\nif selectable:\nitem.setSelectable(selectable)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.appendRow([item])\nreturn item\n@classmethod\ndef from_dict(cls, dct: dict, **kwargs):\nmodel = cls(**kwargs)\nmodel.setHorizontalHeaderLabels(list(dct.keys()))\nfor column, v in enumerate(dct.values()):\nfor row, label in enumerate(v):\nitem = gui.StandardItem(str(label))\nitem.setData(label, constants.EDIT_ROLE)\nmodel.setItem(row, column, item)\nreturn model\n</code></pre>"},{"location":"qt_modules/gui/StandardItemModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260780816[\"gui.StandardItemModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260933456[\"QtGui.QStandardItemModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254372048 --&gt; 2103260780816\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103260933456 --&gt; 2103260780816\n  2103254592576 --&gt; 2103260933456\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/StandardItemModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sortRole</code> int"},{"location":"qt_modules/gui/StaticText.html","title":"StaticText","text":"<p>Qt Base Class: QStaticText</p> <p>Signature: <code>QStaticText(self) -&gt; None QStaticText(self, other: PySide6.QtGui.QStaticText) -&gt; None QStaticText(self, text: str) -&gt; None</code></p>"},{"location":"qt_modules/gui/StaticText.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QStaticText</code></p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>class StaticText(QtGui.QStaticText):\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef __str__(self):\nreturn self.text()\ndef get_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.size())\ndef set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n):\n\"\"\"Set the text format.\n        Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"\n        Args:\n            text_format: text format to use\n        \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\ndef get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n        Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"\n        Returns:\n            text format\n        \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\ndef set_performance_hint(\nself, hint: PerformanceHintStr | QtGui.QStaticText.PerformanceHint\n):\n\"\"\"Set the performance hint.\n        Args:\n            hint: performance hint to use\n        \"\"\"\nself.setPerformanceHint(PERFORMANCE_HINT.get_enum_value(hint))\ndef get_performance_hint(self) -&gt; PerformanceHintStr:\n\"\"\"Return current performance hint.\n        Returns:\n            performance hint\n        \"\"\"\nreturn PERFORMANCE_HINT.inverse[self.performanceHint()]\n</code></pre>"},{"location":"qt_modules/gui/StaticText.html#prettyqt.gui.statictext.StaticText.get_performance_hint","title":"<code>get_performance_hint() -&gt; PerformanceHintStr</code>","text":"<p>Return current performance hint.</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_performance_hint(self) -&gt; PerformanceHintStr:\n\"\"\"Return current performance hint.\n    Returns:\n        performance hint\n    \"\"\"\nreturn PERFORMANCE_HINT.inverse[self.performanceHint()]\n</code></pre>"},{"location":"qt_modules/gui/StaticText.html#prettyqt.gui.statictext.StaticText.get_text_format","title":"<code>get_text_format() -&gt; constants.TextFormatStr</code>","text":"<p>Return current text format.</p> <p>Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"</p> Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n    Possible values: \"rich\", \"plain\", \"auto\", \"markdown\"\n    Returns:\n        text format\n    \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"qt_modules/gui/StaticText.html#prettyqt.gui.statictext.StaticText.set_performance_hint","title":"<code>set_performance_hint(hint: PerformanceHintStr | QtGui.QStaticText.PerformanceHint)</code>","text":"<p>Set the performance hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>PerformanceHintStr | QtGui.QStaticText.PerformanceHint</code> <p>performance hint to use</p> required Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def set_performance_hint(\nself, hint: PerformanceHintStr | QtGui.QStaticText.PerformanceHint\n):\n\"\"\"Set the performance hint.\n    Args:\n        hint: performance hint to use\n    \"\"\"\nself.setPerformanceHint(PERFORMANCE_HINT.get_enum_value(hint))\n</code></pre>"},{"location":"qt_modules/gui/StaticText.html#prettyqt.gui.statictext.StaticText.set_text_format","title":"<code>set_text_format(text_format: constants.TextFormatStr | constants.TextFormat)</code>","text":"<p>Set the text format.</p> <p>Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>constants.TextFormatStr | constants.TextFormat</code> <p>text format to use</p> required Source code in <code>prettyqt\\gui\\statictext.py</code> <pre><code>def set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n):\n\"\"\"Set the text format.\n    Allowed values are \"rich\", \"plain\", \"auto\", \"markdown\"\n    Args:\n        text_format: text format to use\n    \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\n</code></pre>"},{"location":"qt_modules/gui/StaticText.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260738576[\"gui.StaticText\"]\n  2103259578832[\"QtGui.QStaticText\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259578832 --&gt; 2103260738576\n  2103206874128 --&gt; 2103259578832\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/StyleHints.html","title":"StyleHints","text":""},{"location":"qt_modules/gui/StyleHints.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>StyleHintsMixin</code></p> Source code in <code>prettyqt\\gui\\stylehints.py</code> <pre><code>class StyleHints(StyleHintsMixin, metaclass=StyleHintsType):\ndef __init__(self, item: QtGui.QStyleHints):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"qt_modules/gui/StyleHints.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260942096[\"gui.StyleHints\"]\n  2103260940176[\"gui.StyleHintsMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260940176 --&gt; 2103260942096\n  2103255067472 --&gt; 2103260940176\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/Surface.html","title":"Surface","text":"<p>Qt Base Class: QSurface</p> <p>Signature: <code>QSurface(self, type: PySide6.QtGui.QSurface.SurfaceClass) -&gt; None</code></p>"},{"location":"qt_modules/gui/Surface.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>SurfaceMixin</code>, <code>QtGui.QSurface</code></p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>class Surface(SurfaceMixin, QtGui.QSurface):\npass\n</code></pre>"},{"location":"qt_modules/gui/Surface.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260947856[\"gui.Surface\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259447312[\"QtGui.QSurface\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260918096 --&gt; 2103260947856\n  140736120080256 --&gt; 2103260918096\n  2103259447312 --&gt; 2103260947856\n  2103206874128 --&gt; 2103259447312\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/SurfaceFormat.html","title":"SurfaceFormat","text":"<p>Qt Base Class: QSurfaceFormat</p> <p>Signature: <code>QSurfaceFormat(self) -&gt; None QSurfaceFormat(self, options: PySide6.QtGui.QSurfaceFormat.FormatOption) -&gt; None QSurfaceFormat(self, other: Union[PySide6.QtGui.QSurfaceFormat, PySide6.QtGui.QSurfaceFormat.FormatOption]) -&gt; None</code></p>"},{"location":"qt_modules/gui/SurfaceFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>SurfaceFormatMixin</code>, <code>QtGui.QSurfaceFormat</code></p> Source code in <code>prettyqt\\gui\\surfaceformat.py</code> <pre><code>class SurfaceFormat(SurfaceFormatMixin, QtGui.QSurfaceFormat):\npass\n</code></pre>"},{"location":"qt_modules/gui/SurfaceFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260946896[\"gui.SurfaceFormat\"]\n  2103260945936[\"gui.SurfaceFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259436752[\"QtGui.QSurfaceFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260945936 --&gt; 2103260946896\n  140736120080256 --&gt; 2103260945936\n  2103259436752 --&gt; 2103260946896\n  2103206874128 --&gt; 2103259436752\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/SurfaceMixin.html","title":"SurfaceMixin","text":""},{"location":"qt_modules/gui/SurfaceMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>class SurfaceMixin:\ndef __repr__(self):\nreturn get_repr(self)\ndef get_surface_class(self) -&gt; SurfaceClassStr:\n\"\"\"Get the current surface class.\n        Returns:\n            surface class\n        \"\"\"\nreturn SURFACE_CLASS.inverse[self.surfaceClass()]\ndef get_surface_type(self) -&gt; SurfaceTypeStr:\n\"\"\"Get the current surface type.\n        Returns:\n            surface type\n        \"\"\"\nreturn SURFACE_TYPES.inverse[self.surfaceType()]\n</code></pre> Name Children Inherits Surfaceprettyqt.gui.surface <ul><li>SurfaceMixin</li><li>QSurface</li></ul> WindowMixinprettyqt.gui.window <ul><li>Window</li><li>PaintDeviceWindowMixin</li><li><code>QuickWindowMixin</code></li></ul> <ul><li>ObjectMixin</li><li>SurfaceMixin</li></ul>"},{"location":"qt_modules/gui/SurfaceMixin.html#prettyqt.gui.surface.SurfaceMixin.get_surface_class","title":"<code>get_surface_class() -&gt; SurfaceClassStr</code>","text":"<p>Get the current surface class.</p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def get_surface_class(self) -&gt; SurfaceClassStr:\n\"\"\"Get the current surface class.\n    Returns:\n        surface class\n    \"\"\"\nreturn SURFACE_CLASS.inverse[self.surfaceClass()]\n</code></pre>"},{"location":"qt_modules/gui/SurfaceMixin.html#prettyqt.gui.surface.SurfaceMixin.get_surface_type","title":"<code>get_surface_type() -&gt; SurfaceTypeStr</code>","text":"<p>Get the current surface type.</p> Source code in <code>prettyqt\\gui\\surface.py</code> <pre><code>def get_surface_type(self) -&gt; SurfaceTypeStr:\n\"\"\"Get the current surface type.\n    Returns:\n        surface type\n    \"\"\"\nreturn SURFACE_TYPES.inverse[self.surfaceType()]\n</code></pre>"},{"location":"qt_modules/gui/SurfaceMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260918096[\"gui.SurfaceMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103260918096</code></pre>"},{"location":"qt_modules/gui/SyntaxHighlighter.html","title":"SyntaxHighlighter","text":"<p>Qt Base Class: QSyntaxHighlighter</p> <p>Signature: <code>QSyntaxHighlighter(self, parent: PySide6.QtCore.QObject) -&gt; None QSyntaxHighlighter(self, parent: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/gui/SyntaxHighlighter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>SyntaxHighlighterMixin</code>, <code>gui.QSyntaxHighlighter</code></p> Source code in <code>prettyqt\\gui\\syntaxhighlighter.py</code> <pre><code>class SyntaxHighlighter(SyntaxHighlighterMixin, gui.QSyntaxHighlighter):\npass\n</code></pre> Name Children Inherits JsonHighlighterprettyqt.syntaxhighlighters.jsonhighlighter <ul><li>SyntaxHighlighter</li></ul> MarkdownHighlighterprettyqt.syntaxhighlighters.markdownhighlighter <ul><li>SyntaxHighlighter</li></ul> PygmentsHighlighterprettyqt.syntaxhighlighters.pygmentshighlighter <ul><li>SyntaxHighlighter</li></ul> PythonHighlighterprettyqt.syntaxhighlighters.pythonhighlighter <ul><li>SyntaxHighlighter</li></ul> RegexMatchHighlighterprettyqt.syntaxhighlighters.regexmatchhighlighter <ul><li>SyntaxHighlighter</li></ul> SelectedWordHighlighterprettyqt.syntaxhighlighters.selectedwordhighlighter <ul><li>SyntaxHighlighter</li></ul> YamlHighlighterprettyqt.syntaxhighlighters.yamlhighlighter <ul><li>SyntaxHighlighter</li></ul>"},{"location":"qt_modules/gui/SyntaxHighlighter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256724192[\"gui.SyntaxHighlighter\"]\n  2103256698272[\"gui.SyntaxHighlighterMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260824976[\"QtGui.QSyntaxHighlighter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256698272 --&gt; 2103256724192\n  2103255067472 --&gt; 2103256698272\n  140736120080256 --&gt; 2103255067472\n  2103260824976 --&gt; 2103256724192\n  2103254677056 --&gt; 2103260824976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/SyntaxHighlighter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/TextBlock.html","title":"TextBlock","text":"<p>Qt Base Class: QTextBlock</p> <p>Signature: <code>QTextBlock(self) -&gt; None QTextBlock(self, o: PySide6.QtGui.QTextBlock) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextBlock.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextBlock</code></p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>class TextBlock(QtGui.QTextBlock):\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef __contains__(self, position: int):\nreturn self.contains(position)\ndef __bool__(self):\nreturn self.isValid()\ndef __str__(self):\nreturn self.text()\ndef get_previous(self) -&gt; TextBlock:\nreturn TextBlock(self.previous())\ndef get_next(self) -&gt; TextBlock:\nreturn TextBlock(self.next())\ndef get_text_direction(self) -&gt; constants.LayoutDirectionStr:\nreturn constants.LAYOUT_DIRECTION.inverse[self.textDirection()]\ndef set_user_data(self, data):\nif isinstance(data, QtGui.QTextBlockUserData):\nself.setUserData(data)\nreturn None\nuser_data = UserData(data)\nself.setUserData(user_data)\ndef get_user_data(self):\nuser_data = self.userData()\nreturn user_data.data if isinstance(user_data, UserData) else user_data\n@contextlib.contextmanager\ndef edit_user_state(self):\nstate = self.userState()\nyield state\nself.setUserState(state)\ndef get_state(self) -&gt; int:\n\"\"\"Get the user state, generally used for syntax highlighting.\n        :return: The block state\n        \"\"\"\nstate = self.userState()\nreturn state if state == -1 else state &amp; 0x0000FFFF\ndef set_state(self, state: int):\n\"\"\"Set the user state, generally used for syntax highlighting.\n        :param state: new state value.\n        \"\"\"\nuser_state = self.userState()\nif user_state == -1:\nuser_state = 0\nhigher_part = user_state &amp; 0x7FFF0000\nstate &amp;= 0x0000FFFF\nstate |= higher_part\nself.setUserState(state)\ndef get_fold_level(self) -&gt; int:\n\"\"\"Get the block fold level.\n        :return: The block fold level\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn (state &amp; 0x03FF0000) &gt;&gt; 16\ndef set_fold_level(self, val: int):\n\"\"\"Set the block fold level.\n        :param val: The new fold level [0-7]\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nval = min(val, 0x3FF)\nstate &amp;= 0x7C00FFFF\nstate |= val &lt;&lt; 16\nself.setUserState(state)\ndef is_fold_trigger(self) -&gt; bool:\n\"\"\"Check if the block is a fold trigger.\n        :return: True if the block is a fold trigger (represented as a node in\n            the fold panel)\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x04000000)\ndef set_fold_trigger(self, val: int):\n\"\"\"Set the block fold trigger flag (True means the block is a fold trigger).\n        :param val: value to set\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x7BFFFFFF\nstate |= val &lt;&lt; 26\nself.setUserState(state)\ndef is_collapsed(self) -&gt; bool:\n\"\"\"Check if the block is expanded or collased.\n        :return: False for an open trigger, True for for closed trigger\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x08000000)\ndef set_collapsed(self, val: int):\n\"\"\"Set the fold trigger state (collapsed or expanded).\n        :param val: The new trigger state (True=collapsed, False=expanded)\n        \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x77FFFFFF\nstate |= val &lt;&lt; 27\nself.setUserState(state)\ndef find_parent_scope(self, limit: int = 5000) -&gt; TextBlock | None:\n\"\"\"Find parent scope, if the block is not a fold trigger.\"\"\"\n# if we moved up for more than n lines, just give up otherwise this\n# would take too much time.\ncounter = 0\noriginal = TextBlock(self)\nstart = TextBlock(self)\nif not self.is_fold_trigger():\n# search level of next non blank line\nwhile start.text().strip() == \"\" and start.isValid():\nstart = start.next()\nref_level = self.get_fold_level() - 1\nstart = original\nwhile (\nstart.blockNumber()\nand counter &lt; limit\nand (not self.is_fold_trigger() or self.get_fold_level() &gt; ref_level)\n):\ncounter += 1\nstart = start.previous()\nreturn TextBlock(start) if counter &lt; limit else None\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.find_parent_scope","title":"<code>find_parent_scope(limit: int = 5000) -&gt; TextBlock | None</code>","text":"<p>Find parent scope, if the block is not a fold trigger.</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def find_parent_scope(self, limit: int = 5000) -&gt; TextBlock | None:\n\"\"\"Find parent scope, if the block is not a fold trigger.\"\"\"\n# if we moved up for more than n lines, just give up otherwise this\n# would take too much time.\ncounter = 0\noriginal = TextBlock(self)\nstart = TextBlock(self)\nif not self.is_fold_trigger():\n# search level of next non blank line\nwhile start.text().strip() == \"\" and start.isValid():\nstart = start.next()\nref_level = self.get_fold_level() - 1\nstart = original\nwhile (\nstart.blockNumber()\nand counter &lt; limit\nand (not self.is_fold_trigger() or self.get_fold_level() &gt; ref_level)\n):\ncounter += 1\nstart = start.previous()\nreturn TextBlock(start) if counter &lt; limit else None\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.get_fold_level","title":"<code>get_fold_level() -&gt; int</code>","text":"<p>Get the block fold level.</p> <p>:return: The block fold level</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_fold_level(self) -&gt; int:\n\"\"\"Get the block fold level.\n    :return: The block fold level\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn (state &amp; 0x03FF0000) &gt;&gt; 16\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.get_state","title":"<code>get_state() -&gt; int</code>","text":"<p>Get the user state, generally used for syntax highlighting.</p> <p>:return: The block state</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def get_state(self) -&gt; int:\n\"\"\"Get the user state, generally used for syntax highlighting.\n    :return: The block state\n    \"\"\"\nstate = self.userState()\nreturn state if state == -1 else state &amp; 0x0000FFFF\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.is_collapsed","title":"<code>is_collapsed() -&gt; bool</code>","text":"<p>Check if the block is expanded or collased.</p> <p>:return: False for an open trigger, True for for closed trigger</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def is_collapsed(self) -&gt; bool:\n\"\"\"Check if the block is expanded or collased.\n    :return: False for an open trigger, True for for closed trigger\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x08000000)\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.is_fold_trigger","title":"<code>is_fold_trigger() -&gt; bool</code>","text":"<p>Check if the block is a fold trigger.</p> <p>:return: True if the block is a fold trigger (represented as a node in     the fold panel)</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def is_fold_trigger(self) -&gt; bool:\n\"\"\"Check if the block is a fold trigger.\n    :return: True if the block is a fold trigger (represented as a node in\n        the fold panel)\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nreturn bool(state &amp; 0x04000000)\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.set_collapsed","title":"<code>set_collapsed(val: int)</code>","text":"<p>Set the fold trigger state (collapsed or expanded).</p> <p>:param val: The new trigger state (True=collapsed, False=expanded)</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_collapsed(self, val: int):\n\"\"\"Set the fold trigger state (collapsed or expanded).\n    :param val: The new trigger state (True=collapsed, False=expanded)\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x77FFFFFF\nstate |= val &lt;&lt; 27\nself.setUserState(state)\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.set_fold_level","title":"<code>set_fold_level(val: int)</code>","text":"<p>Set the block fold level.</p> <p>:param val: The new fold level [0-7]</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_fold_level(self, val: int):\n\"\"\"Set the block fold level.\n    :param val: The new fold level [0-7]\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nval = min(val, 0x3FF)\nstate &amp;= 0x7C00FFFF\nstate |= val &lt;&lt; 16\nself.setUserState(state)\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.set_fold_trigger","title":"<code>set_fold_trigger(val: int)</code>","text":"<p>Set the block fold trigger flag (True means the block is a fold trigger).</p> <p>:param val: value to set</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_fold_trigger(self, val: int):\n\"\"\"Set the block fold trigger flag (True means the block is a fold trigger).\n    :param val: value to set\n    \"\"\"\nstate = self.userState()\nif state == -1:\nstate = 0\nstate &amp;= 0x7BFFFFFF\nstate |= val &lt;&lt; 26\nself.setUserState(state)\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#prettyqt.gui.textblock.TextBlock.set_state","title":"<code>set_state(state: int)</code>","text":"<p>Set the user state, generally used for syntax highlighting.</p> <p>:param state: new state value.</p> Source code in <code>prettyqt\\gui\\textblock.py</code> <pre><code>def set_state(self, state: int):\n\"\"\"Set the user state, generally used for syntax highlighting.\n    :param state: new state value.\n    \"\"\"\nuser_state = self.userState()\nif user_state == -1:\nuser_state = 0\nhigher_part = user_state &amp; 0x7FFF0000\nstate &amp;= 0x0000FFFF\nstate |= higher_part\nself.setUserState(state)\n</code></pre>"},{"location":"qt_modules/gui/TextBlock.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260976656[\"gui.TextBlock\"]\n  2103259435792[\"QtGui.QTextBlock\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259435792 --&gt; 2103260976656\n  2103206874128 --&gt; 2103259435792\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html","title":"TextBlockFormat","text":"<p>Qt Base Class: QTextBlockFormat</p> <p>Signature: <code>QTextBlockFormat(self) -&gt; None QTextBlockFormat(self, QTextBlockFormat: PySide6.QtGui.QTextBlockFormat) -&gt; None QTextBlockFormat(self, fmt: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextBlockFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.TextFormatMixin</code>, <code>gui.QTextBlockFormat</code></p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>class TextBlockFormat(gui.TextFormatMixin, gui.QTextBlockFormat):\ndef set_marker(self, marker: MarkerTypeStr | gui.QTextBlockFormat.MarkerType):\n\"\"\"Set the marker.\n        Args:\n            marker: marker\n        \"\"\"\nself.setMarker(MARKER_TYPE.get_enum_value(marker))\ndef get_marker(self) -&gt; MarkerTypeStr:\n\"\"\"Get current marker.\n        Returns:\n            current marker\n        \"\"\"\nreturn MARKER_TYPE.inverse[self.marker()]\ndef set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the format.\n        Args:\n            alignment: alignment for the format\n        \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef set_page_break_policy(\nself, policy: gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag\n):\n\"\"\"Set page break policy.\n        Args:\n            policy: page break policy\n        \"\"\"\nself.setPageBreakPolicy(gui.textformat.PAGE_BREAK_FLAG.get_enum_value(policy))\ndef get_page_break_policy(self) -&gt; gui.textformat.PageBreakFlagStr:\n\"\"\"Get the current page break policy.\n        Returns:\n            page break policy\n        \"\"\"\nreturn gui.textformat.PAGE_BREAK_FLAG.inverse[self.pageBreakPolicy()]\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#prettyqt.gui.textblockformat.TextBlockFormat.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#prettyqt.gui.textblockformat.TextBlockFormat.get_marker","title":"<code>get_marker() -&gt; MarkerTypeStr</code>","text":"<p>Get current marker.</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_marker(self) -&gt; MarkerTypeStr:\n\"\"\"Get current marker.\n    Returns:\n        current marker\n    \"\"\"\nreturn MARKER_TYPE.inverse[self.marker()]\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#prettyqt.gui.textblockformat.TextBlockFormat.get_page_break_policy","title":"<code>get_page_break_policy() -&gt; gui.textformat.PageBreakFlagStr</code>","text":"<p>Get the current page break policy.</p> Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def get_page_break_policy(self) -&gt; gui.textformat.PageBreakFlagStr:\n\"\"\"Get the current page break policy.\n    Returns:\n        page break policy\n    \"\"\"\nreturn gui.textformat.PAGE_BREAK_FLAG.inverse[self.pageBreakPolicy()]\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#prettyqt.gui.textblockformat.TextBlockFormat.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the format.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the format</p> required Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the format.\n    Args:\n        alignment: alignment for the format\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#prettyqt.gui.textblockformat.TextBlockFormat.set_marker","title":"<code>set_marker(marker: MarkerTypeStr | gui.QTextBlockFormat.MarkerType)</code>","text":"<p>Set the marker.</p> <p>Parameters:</p> Name Type Description Default <code>marker</code> <code>MarkerTypeStr | gui.QTextBlockFormat.MarkerType</code> <p>marker</p> required Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_marker(self, marker: MarkerTypeStr | gui.QTextBlockFormat.MarkerType):\n\"\"\"Set the marker.\n    Args:\n        marker: marker\n    \"\"\"\nself.setMarker(MARKER_TYPE.get_enum_value(marker))\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#prettyqt.gui.textblockformat.TextBlockFormat.set_page_break_policy","title":"<code>set_page_break_policy(policy: gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag)</code>","text":"<p>Set page break policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag</code> <p>page break policy</p> required Source code in <code>prettyqt\\gui\\textblockformat.py</code> <pre><code>def set_page_break_policy(\nself, policy: gui.textformat.PageBreakFlagStr | gui.QTextFormat.PageBreakFlag\n):\n\"\"\"Set page break policy.\n    Args:\n        policy: page break policy\n    \"\"\"\nself.setPageBreakPolicy(gui.textformat.PAGE_BREAK_FLAG.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/gui/TextBlockFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256710752[\"gui.TextBlockFormat\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259419472[\"QtGui.QTextBlockFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256712672 --&gt; 2103256710752\n  140736120080256 --&gt; 2103256712672\n  2103259419472 --&gt; 2103256710752\n  2103254313488 --&gt; 2103259419472\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextBlockGroup.html","title":"TextBlockGroup","text":"<p>Qt Base Class: QTextBlockGroup</p> <p>Signature: <code>QTextBlockGroup(self, doc: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextBlockGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.TextObjectMixin</code>, <code>gui.QTextBlockGroup</code></p> Source code in <code>prettyqt\\gui\\textblockgroup.py</code> <pre><code>class TextBlockGroup(gui.TextObjectMixin, gui.QTextBlockGroup):\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self) -&gt; Iterator[gui.TextBlock]:\nreturn iter(gui.TextBlock(i) for i in self.blockList())\ndef get_blocklist(self) -&gt; list[gui.TextBlock]:\nreturn [gui.TextBlock(i) for i in self.blockList()]\n</code></pre>"},{"location":"qt_modules/gui/TextBlockGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256707872[\"gui.TextBlockGroup\"]\n  2103256720352[\"gui.TextObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260789456[\"QtGui.QTextBlockGroup\"]\n  2103260811536[\"QtGui.QTextObject\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256720352 --&gt; 2103256707872\n  2103255067472 --&gt; 2103256720352\n  140736120080256 --&gt; 2103255067472\n  2103260789456 --&gt; 2103256707872\n  2103260811536 --&gt; 2103260789456\n  2103254677056 --&gt; 2103260811536\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextBlockGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/TextBlockUserData.html","title":"TextBlockUserData","text":"<p>Qt Base Class: QTextBlockUserData</p> <p>Signature: <code>QTextBlockUserData(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextBlockUserData.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextBlockUserData</code></p> <p>Storage for the user data associated with each line.</p> Source code in <code>prettyqt\\gui\\textblockuserdata.py</code> <pre><code>class TextBlockUserData(QtGui.QTextBlockUserData):\n\"\"\"Storage for the user data associated with each line.\"\"\"\ndef __init__(self, **kwds):\nfor key, value in kwds.items():\nsetattr(self, key, value)\nsuper().__init__()\ndef __repr__(self):\nkwargs = {i: getattr(self, i) for i in dir(self) if not i.startswith(\"__\")}\nreturn get_repr(self, **kwargs)\n</code></pre>"},{"location":"qt_modules/gui/TextBlockUserData.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260745296[\"gui.TextBlockUserData\"]\n  2103259430032[\"QtGui.QTextBlockUserData\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259430032 --&gt; 2103260745296\n  2103206874128 --&gt; 2103259430032\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextCharFormat.html","title":"TextCharFormat","text":"<p>Qt Base Class: QTextCharFormat</p> <p>Signature: <code>QTextCharFormat(self) -&gt; None QTextCharFormat(self, QTextCharFormat: PySide6.QtGui.QTextCharFormat) -&gt; None QTextCharFormat(self, fmt: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextCharFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextCharFormatMixin</code>, <code>gui.QTextCharFormat</code></p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>class TextCharFormat(TextCharFormatMixin, gui.QTextCharFormat):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256692512[\"gui.TextCharFormat\"]\n  2103256700192[\"gui.TextCharFormatMixin\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254367248[\"QtGui.QTextCharFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256700192 --&gt; 2103256692512\n  2103256712672 --&gt; 2103256700192\n  140736120080256 --&gt; 2103256712672\n  2103254367248 --&gt; 2103256692512\n  2103254313488 --&gt; 2103254367248\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html","title":"TextCharFormatMixin","text":""},{"location":"qt_modules/gui/TextCharFormatMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.TextFormatMixin</code></p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>class TextCharFormatMixin(gui.TextFormatMixin):\ndef __init__(\nself,\ntext_color: datatypes.ColorType | gui.QBrush = None,\nbold: bool = False,\nitalic: bool = False,\n):\nsuper().__init__()\nif text_color is not None:\nself.set_foreground_color(text_color)\nif bold:\nself.set_font_weight(\"bold\")\nself.setFontItalic(italic)\ndef set_foreground_color(self, color: datatypes.ColorType | gui.QBrush):\nif not isinstance(color, gui.QBrush):\ncolor = colors.get_color(color)\nself.setForeground(color)\ndef set_background_color(self, color: datatypes.ColorType | gui.QBrush):\nif not isinstance(color, gui.QBrush):\ncolor = colors.get_color(color)\nself.setBackground(color)\ndef set_font_weight(self, weight: gui.font.WeightStr | gui.Font.Weight):\n\"\"\"Set the font weight.\n        Args:\n            weight: font weight\n        \"\"\"\nself.setFontWeight(gui.font.WEIGHT.get_enum_value(weight))\ndef get_font_weight(self) -&gt; gui.font.WeightStr:\n\"\"\"Get current font weight.\n        Returns:\n            current font weight\n        \"\"\"\nreturn gui.font.WEIGHT.inverse[self.fontWeight()]\ndef set_underline_style(self, style: UnderlineStyleStr | mod.UnderlineStyle):\n\"\"\"Set the underline style.\n        Args:\n            style: underline style\n        \"\"\"\nself.setUnderlineStyle(UNDERLINE_STYLE.get_enum_value(style))\ndef get_underline_style(self) -&gt; UnderlineStyleStr:\n\"\"\"Get current underline style.\n        Returns:\n            current underline style\n        \"\"\"\nreturn UNDERLINE_STYLE.inverse[self.underlineStyle()]\ndef set_vertical_alignment(\nself, alignment: VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment\n):\n\"\"\"Set the vertical alignment.\n        Args:\n            alignment: vertical alignment\n        \"\"\"\nself.setVerticalAlignment(VERTICAL_ALIGNMENT.get_enum_value(alignment))\ndef get_vertical_alignment(self) -&gt; VerticalAlignmentStr:\n\"\"\"Get current vertical alignment.\n        Returns:\n            current vertical alignment\n        \"\"\"\nreturn VERTICAL_ALIGNMENT.inverse[self.verticalAlignment()]\ndef set_font_style_hint(self, hint: gui.font.StyleHintStr | gui.Font.StyleHint):\n\"\"\"Set the font style hint.\n        Args:\n            hint: font style hint\n        \"\"\"\nself.setFontStyleHint(gui.font.STYLE_HINTS.get_enum_value(hint))\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\n</code></pre> Name Children Inherits TextCharFormatprettyqt.gui.textcharformat <ul><li>TextCharFormatMixin</li><li>QTextCharFormat</li></ul> TextImageFormatprettyqt.gui.textimageformat <ul><li>TextCharFormatMixin</li><li>QTextImageFormat</li></ul> TextTableCellFormatprettyqt.gui.texttablecellformat <ul><li>TextCharFormatMixin</li><li>QTextTableCellFormat</li></ul>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_font_weight","title":"<code>get_font_weight() -&gt; gui.font.WeightStr</code>","text":"<p>Get current font weight.</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_font_weight(self) -&gt; gui.font.WeightStr:\n\"\"\"Get current font weight.\n    Returns:\n        current font weight\n    \"\"\"\nreturn gui.font.WEIGHT.inverse[self.fontWeight()]\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_underline_style","title":"<code>get_underline_style() -&gt; UnderlineStyleStr</code>","text":"<p>Get current underline style.</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_underline_style(self) -&gt; UnderlineStyleStr:\n\"\"\"Get current underline style.\n    Returns:\n        current underline style\n    \"\"\"\nreturn UNDERLINE_STYLE.inverse[self.underlineStyle()]\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.get_vertical_alignment","title":"<code>get_vertical_alignment() -&gt; VerticalAlignmentStr</code>","text":"<p>Get current vertical alignment.</p> Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def get_vertical_alignment(self) -&gt; VerticalAlignmentStr:\n\"\"\"Get current vertical alignment.\n    Returns:\n        current vertical alignment\n    \"\"\"\nreturn VERTICAL_ALIGNMENT.inverse[self.verticalAlignment()]\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_font_style_hint","title":"<code>set_font_style_hint(hint: gui.font.StyleHintStr | gui.Font.StyleHint)</code>","text":"<p>Set the font style hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>gui.font.StyleHintStr | gui.Font.StyleHint</code> <p>font style hint</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_font_style_hint(self, hint: gui.font.StyleHintStr | gui.Font.StyleHint):\n\"\"\"Set the font style hint.\n    Args:\n        hint: font style hint\n    \"\"\"\nself.setFontStyleHint(gui.font.STYLE_HINTS.get_enum_value(hint))\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_font_weight","title":"<code>set_font_weight(weight: gui.font.WeightStr | gui.Font.Weight)</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>gui.font.WeightStr | gui.Font.Weight</code> <p>font weight</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_font_weight(self, weight: gui.font.WeightStr | gui.Font.Weight):\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    \"\"\"\nself.setFontWeight(gui.font.WEIGHT.get_enum_value(weight))\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_underline_style","title":"<code>set_underline_style(style: UnderlineStyleStr | mod.UnderlineStyle)</code>","text":"<p>Set the underline style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>UnderlineStyleStr | mod.UnderlineStyle</code> <p>underline style</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_underline_style(self, style: UnderlineStyleStr | mod.UnderlineStyle):\n\"\"\"Set the underline style.\n    Args:\n        style: underline style\n    \"\"\"\nself.setUnderlineStyle(UNDERLINE_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#prettyqt.gui.textcharformat.TextCharFormatMixin.set_vertical_alignment","title":"<code>set_vertical_alignment(alignment: VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment)</code>","text":"<p>Set the vertical alignment.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment</code> <p>vertical alignment</p> required Source code in <code>prettyqt\\gui\\textcharformat.py</code> <pre><code>def set_vertical_alignment(\nself, alignment: VerticalAlignmentStr | gui.QTextCharFormat.VerticalAlignment\n):\n\"\"\"Set the vertical alignment.\n    Args:\n        alignment: vertical alignment\n    \"\"\"\nself.setVerticalAlignment(VERTICAL_ALIGNMENT.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/gui/TextCharFormatMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256700192[\"gui.TextCharFormatMixin\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103256712672 --&gt; 2103256700192\n  140736120080256 --&gt; 2103256712672</code></pre>"},{"location":"qt_modules/gui/TextCursor.html","title":"TextCursor","text":"<p>Qt Base Class: QTextCursor</p> <p>Signature: <code>QTextCursor(self) -&gt; None QTextCursor(self, block: PySide6.QtGui.QTextBlock) -&gt; None QTextCursor(self, cursor: PySide6.QtGui.QTextCursor) -&gt; None QTextCursor(self, document: PySide6.QtGui.QTextDocument) -&gt; None QTextCursor(self, frame: PySide6.QtGui.QTextFrame) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextCursor.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QTextCursor</code></p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>class TextCursor(gui.QTextCursor):\ndef __str__(self):\nreturn self.selectedText().replace(\"\\u2029\", \"\\n\")\ndef __contains__(self, other):\nreturn (\nself.selectionStart() &lt;= other.selectionStart()\nand self.selectionEnd() &gt;= other.selectionEnd()\n)\ndef move_position(\nself, operation: MoveOperationStr, mode: MoveModeStr = \"move\", n: int = 1\n) -&gt; bool:\nif n &lt; 0:\nraise ValueError(n)\nreturn self.movePosition(MOVE_OPERATION[operation], MOVE_MODE[mode], n)\ndef set_position(self, pos: int | tuple[int, int], mode: MoveModeStr = \"move\"):\n\"\"\"Set cursor to given position.\n        0-indexed.\n        Args:\n            pos: Cursor position\n            mode: Move mode\n        \"\"\"\nmatch pos:\ncase int():\nself.setPosition(pos, MOVE_MODE[mode])\ncase (int() as row, int() as col):\nposition = self.document().find_block_by_number(row).position()\nposition += col\nself.set_position(position, mode=mode)\ncase _:\nraise TypeError(pos)\ndef select(self, selection: SelectionTypeStr | gui.QTextCursor.SelectionType):\nif isinstance(selection, gui.QTextCursor.SelectionType):\nsel = selection\nelse:\nsel = SELECTION_TYPE[selection]\nsuper().select(sel)\ndef span(self) -&gt; tuple[int, int]:\nreturn (self.anchor(), self.position())\ndef get_cursor_position(self) -&gt; tuple[int, int]:\n\"\"\"Return the QTextCursor position.\n        The position is a tuple made up of\n        the line number (0 based) and the column number (0 based).\n        :return: tuple(line, column)\n        \"\"\"\nreturn (self.blockNumber(), self.positionInBlock())\ndef get_selection(self) -&gt; gui.TextDocumentFragment:\nreturn gui.TextDocumentFragment(self.selection())\ndef select_text(\nself,\nstart_pos: int | tuple[int, int] | MoveOperationStr,\nend_pos: int | tuple[int, int] | MoveOperationStr,\n) -&gt; str:\n\"\"\"Select text from start position to end position.\n        Positions can be either an integer index or a move operation\n        Args:\n            start_pos: Start position\n            end_pos: End position\n        \"\"\"\nmatch start_pos:\ncase int() | (int(), int()):\nself.set_position(start_pos)\ncase str():\nself.move_position(start_pos)\ncase _:\nraise TypeError(start_pos)\nmatch end_pos:\ncase int() | (int(), int()):\nself.set_position(end_pos, mode=\"keep\")\ncase str():\nself.move_position(end_pos, mode=\"keep\")\ncase _:\nraise TypeError(end_pos)\nreturn self.selectedText()\ndef replace_text(\nself,\nstart_pos: int,\nend_pos: MoveOperationStr | int,\nto_replace: str,\n):\nself.set_position(start_pos)\nif isinstance(end_pos, int):\nself.set_position(end_pos, mode=\"keep\")\nelse:\nself.move_position(end_pos, mode=\"keep\")\nself.insertText(to_replace)\nself.select_text(start_pos, start_pos + len(to_replace))\n@contextlib.contextmanager\ndef edit_block(self, join_previous: bool = False):\n\"\"\"Context manager for edit blocks. Can be used for undo actions.\"\"\"\nself.joinPreviousEditBlock() if join_previous else self.beginEditBlock()\nyield\nself.endEditBlock()\n</code></pre>"},{"location":"qt_modules/gui/TextCursor.html#prettyqt.gui.textcursor.TextCursor.edit_block","title":"<code>edit_block(join_previous: bool = False)</code>","text":"<p>Context manager for edit blocks. Can be used for undo actions.</p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>@contextlib.contextmanager\ndef edit_block(self, join_previous: bool = False):\n\"\"\"Context manager for edit blocks. Can be used for undo actions.\"\"\"\nself.joinPreviousEditBlock() if join_previous else self.beginEditBlock()\nyield\nself.endEditBlock()\n</code></pre>"},{"location":"qt_modules/gui/TextCursor.html#prettyqt.gui.textcursor.TextCursor.get_cursor_position","title":"<code>get_cursor_position() -&gt; tuple[int, int]</code>","text":"<p>Return the QTextCursor position.</p> <p>The position is a tuple made up of the line number (0 based) and the column number (0 based). :return: tuple(line, column)</p> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def get_cursor_position(self) -&gt; tuple[int, int]:\n\"\"\"Return the QTextCursor position.\n    The position is a tuple made up of\n    the line number (0 based) and the column number (0 based).\n    :return: tuple(line, column)\n    \"\"\"\nreturn (self.blockNumber(), self.positionInBlock())\n</code></pre>"},{"location":"qt_modules/gui/TextCursor.html#prettyqt.gui.textcursor.TextCursor.select_text","title":"<code>select_text(start_pos: int | tuple[int, int] | MoveOperationStr, end_pos: int | tuple[int, int] | MoveOperationStr) -&gt; str</code>","text":"<p>Select text from start position to end position.</p> <p>Positions can be either an integer index or a move operation</p> <p>Parameters:</p> Name Type Description Default <code>start_pos</code> <code>int | tuple[int, int] | MoveOperationStr</code> <p>Start position</p> required <code>end_pos</code> <code>int | tuple[int, int] | MoveOperationStr</code> <p>End position</p> required Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def select_text(\nself,\nstart_pos: int | tuple[int, int] | MoveOperationStr,\nend_pos: int | tuple[int, int] | MoveOperationStr,\n) -&gt; str:\n\"\"\"Select text from start position to end position.\n    Positions can be either an integer index or a move operation\n    Args:\n        start_pos: Start position\n        end_pos: End position\n    \"\"\"\nmatch start_pos:\ncase int() | (int(), int()):\nself.set_position(start_pos)\ncase str():\nself.move_position(start_pos)\ncase _:\nraise TypeError(start_pos)\nmatch end_pos:\ncase int() | (int(), int()):\nself.set_position(end_pos, mode=\"keep\")\ncase str():\nself.move_position(end_pos, mode=\"keep\")\ncase _:\nraise TypeError(end_pos)\nreturn self.selectedText()\n</code></pre>"},{"location":"qt_modules/gui/TextCursor.html#prettyqt.gui.textcursor.TextCursor.set_position","title":"<code>set_position(pos: int | tuple[int, int], mode: MoveModeStr = 'move')</code>","text":"<p>Set cursor to given position.</p> <p>0-indexed.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>int | tuple[int, int]</code> <p>Cursor position</p> required <code>mode</code> <code>MoveModeStr</code> <p>Move mode</p> <code>'move'</code> Source code in <code>prettyqt\\gui\\textcursor.py</code> <pre><code>def set_position(self, pos: int | tuple[int, int], mode: MoveModeStr = \"move\"):\n\"\"\"Set cursor to given position.\n    0-indexed.\n    Args:\n        pos: Cursor position\n        mode: Move mode\n    \"\"\"\nmatch pos:\ncase int():\nself.setPosition(pos, MOVE_MODE[mode])\ncase (int() as row, int() as col):\nposition = self.document().find_block_by_number(row).position()\nposition += col\nself.set_position(position, mode=mode)\ncase _:\nraise TypeError(pos)\n</code></pre>"},{"location":"qt_modules/gui/TextCursor.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260781776[\"gui.TextCursor\"]\n  2103254358608[\"QtGui.QTextCursor\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254358608 --&gt; 2103260781776\n  2103206874128 --&gt; 2103254358608\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextDocument.html","title":"TextDocument","text":"<p>Qt Base Class: QTextDocument</p> <p>Signature: <code>QTextDocument(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QTextDocument(self, text: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextDocument.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextDocumentMixin</code>, <code>gui.QTextDocument</code></p> Source code in <code>prettyqt\\gui\\textdocument.py</code> <pre><code>class TextDocument(TextDocumentMixin, gui.QTextDocument):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextDocument.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260749136[\"gui.TextDocument\"]\n  2103260755856[\"gui.TextDocumentMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260798096[\"QtGui.QTextDocument\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260755856 --&gt; 2103260749136\n  2103255067472 --&gt; 2103260755856\n  140736120080256 --&gt; 2103255067472\n  2103260798096 --&gt; 2103260749136\n  2103254677056 --&gt; 2103260798096\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextDocument.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>undoRedoEnabled</code> bool <code>modified</code> bool <code>pageSize</code> QSizeF <code>defaultFont</code> QFont <code>useDesignMetrics</code> bool <code>layoutEnabled</code> bool <code>size</code> QSizeF <code>textWidth</code> double <code>blockCount</code> int <code>indentWidth</code> double <code>defaultStyleSheet</code> QString <code>maximumBlockCount</code> int <code>documentMargin</code> double <code>baseUrl</code> QUrl"},{"location":"qt_modules/gui/TextDocumentFragment.html","title":"TextDocumentFragment","text":"<p>Qt Base Class: QTextDocumentFragment</p> <p>Signature: <code>QTextDocumentFragment(self) -&gt; None QTextDocumentFragment(self, document: PySide6.QtGui.QTextDocument) -&gt; None QTextDocumentFragment(self, range: PySide6.QtGui.QTextCursor) -&gt; None QTextDocumentFragment(self, rhs: PySide6.QtGui.QTextDocumentFragment) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextDocumentFragment.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QTextDocumentFragment</code></p> Source code in <code>prettyqt\\gui\\textdocumentfragment.py</code> <pre><code>class TextDocumentFragment(gui.QTextDocumentFragment):\ndef __repr__(self):\nreturn get_repr(self, gui.TextDocument(self.toPlainText()))\ndef __str__(self):\nreturn self.toPlainText()\ndef __bool__(self):\nreturn not self.isEmpty()\n@classmethod\ndef from_plain_text(cls, text: str) -&gt; Self:\nreturn cls(cls.fromPlainText(text))\ndef write_to_file(\nself,\npath: datatypes.PathType,\nfmt: gui.textdocumentwriter.FormatStr | bytes | QtCore.QByteArray = \"plaintext\",\n):\nwriter = gui.TextDocumentWriter()\nwriter.set_format(fmt)\nwriter.set_file_name(path)\nreturn writer.write(self)\n</code></pre>"},{"location":"qt_modules/gui/TextDocumentFragment.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260735696[\"gui.TextDocumentFragment\"]\n  2103254363408[\"QtGui.QTextDocumentFragment\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254363408 --&gt; 2103260735696\n  2103206874128 --&gt; 2103254363408\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextDocumentWriter.html","title":"TextDocumentWriter","text":"<p>Qt Base Class: QTextDocumentWriter</p> <p>Signature: <code>QTextDocumentWriter(self) -&gt; None QTextDocumentWriter(self, device: PySide6.QtCore.QIODevice, format: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None QTextDocumentWriter(self, fileName: str, format: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray)) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextDocumentWriter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextDocumentWriter</code></p> Source code in <code>prettyqt\\gui\\textdocumentwriter.py</code> <pre><code>class TextDocumentWriter(QtGui.QTextDocumentWriter):\ndef __repr__(self):\nreturn get_repr(self, self.device(), self.format())\ndef get_format(self) -&gt; FormatStr:\nreturn self.format().data().decode()  # type: ignore\ndef set_format(self, fmt: FormatStr | bytes | core.QByteArray):\nnew = fmt.encode() if isinstance(fmt, str) else fmt\nself.setFormat(new)\ndef set_file_name(self, name: datatypes.PathType):\npath = name if isinstance(name, str) else os.fspath(name)\nself.setFileName(path)\n@classmethod\ndef get_supported_document_formats(cls) -&gt; list[str]:\nreturn [i.data().decode() for i in cls.supportedDocumentFormats()]\n@classmethod\ndef serialize_document(\ncls,\ndocument: QtGui.QTextDocument,\nfmt: FormatStr | bytes | core.QByteArray = \"ODF\",\n) -&gt; bytes:\nbuffer = core.Buffer()\nwriter = cls()\nwriter.setDevice(buffer)\nwriter.set_format(fmt)  # ODF Format\nwriter.write(document)\nreturn buffer.data().data()\n</code></pre>"},{"location":"qt_modules/gui/TextDocumentWriter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260981456[\"gui.TextDocumentWriter\"]\n  2103260920016[\"QtGui.QTextDocumentWriter\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103260920016 --&gt; 2103260981456\n  2103206874128 --&gt; 2103260920016\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextFormat.html","title":"TextFormat","text":"<p>Qt Base Class: QTextFormat</p> <p>Signature: <code>QTextFormat(self) -&gt; None QTextFormat(self, rhs: PySide6.QtGui.QTextFormat) -&gt; None QTextFormat(self, type: int) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextFormatMixin</code>, <code>gui.QTextFormat</code></p> Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>class TextFormat(TextFormatMixin, gui.QTextFormat):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256686752[\"gui.TextFormat\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256712672 --&gt; 2103256686752\n  140736120080256 --&gt; 2103256712672\n  2103254313488 --&gt; 2103256686752\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextFormatMixin.html","title":"TextFormatMixin","text":""},{"location":"qt_modules/gui/TextFormatMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>class TextFormatMixin:\ndef __getitem__(self, key: int):\nreturn self.property(key)\ndef __setitem__(self, key: int, value):\nself.setProperty(key, value)\ndef __contains__(self, key: int):\nreturn self.hasProperty(key)\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self, self.type())\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_brush_property(self, property_id: int) -&gt; gui.Brush:\nreturn gui.Brush(self.brushProperty(property_id))\ndef get_color_property(self, property_id: int) -&gt; gui.Color:\nreturn gui.Color(self.colorProperty(property_id))\ndef get_pen_property(self, property_id: int) -&gt; gui.Pen:\nreturn gui.Pen(self.penProperty(property_id))\ndef set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection\n):\n\"\"\"Set layout direction.\n        Args:\n            direction: layout direction\n        \"\"\"\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\ndef get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n        Returns:\n            layout direction\n        \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\ndef select_full_width(self, value: bool = True):\nprop = gui.QTextFormat.Property.FullWidthSelection\nself.setProperty(prop, value)  # type: ignore\n</code></pre> Name Children Inherits TextFormatprettyqt.gui.textformat <ul><li>TextFormatMixin</li><li>QTextFormat</li></ul> <code>TextFrameFormatMixin</code>prettyqt.gui.textframeformat <ul><li>TextFrameFormat</li><li>TextTableFormat</li></ul> <ul><li>TextFormatMixin</li></ul> TextBlockFormatprettyqt.gui.textblockformat <ul><li>TextFormatMixin</li><li>QTextBlockFormat</li></ul> TextCharFormatMixinprettyqt.gui.textcharformat <ul><li>TextCharFormat</li><li>TextImageFormat</li><li>TextTableCellFormat</li></ul> <ul><li>TextFormatMixin</li></ul> TextListFormatprettyqt.gui.textlistformat <ul><li>TextFormatMixin</li><li>QTextListFormat</li></ul>"},{"location":"qt_modules/gui/TextFormatMixin.html#prettyqt.gui.textformat.TextFormatMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"qt_modules/gui/TextFormatMixin.html#prettyqt.gui.textformat.TextFormatMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr | constants.LayoutDirection)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr | constants.LayoutDirection</code> <p>layout direction</p> required Source code in <code>prettyqt\\gui\\textformat.py</code> <pre><code>def set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection\n):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    \"\"\"\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"qt_modules/gui/TextFormatMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103256712672</code></pre>"},{"location":"qt_modules/gui/TextFrame.html","title":"TextFrame","text":"<p>Qt Base Class: QTextFrame</p> <p>Signature: <code>QTextFrame(self, doc: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextFrame.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextFrameMixin</code>, <code>gui.QTextFrame</code></p> Source code in <code>prettyqt\\gui\\textframe.py</code> <pre><code>class TextFrame(TextFrameMixin, gui.QTextFrame):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextFrame.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256711712[\"gui.TextFrame\"]\n  2103256718432[\"gui.TextFrameMixin\"]\n  2103256720352[\"gui.TextObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260788496[\"QtGui.QTextFrame\"]\n  2103260811536[\"QtGui.QTextObject\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256718432 --&gt; 2103256711712\n  2103256720352 --&gt; 2103256718432\n  2103255067472 --&gt; 2103256720352\n  140736120080256 --&gt; 2103255067472\n  2103260788496 --&gt; 2103256711712\n  2103260811536 --&gt; 2103260788496\n  2103254677056 --&gt; 2103260811536\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextFrame.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/TextFrameFormat.html","title":"TextFrameFormat","text":"<p>Qt Base Class: QTextFrameFormat</p> <p>Signature: <code>QTextFrameFormat(self) -&gt; None QTextFrameFormat(self, QTextFrameFormat: PySide6.QtGui.QTextFrameFormat) -&gt; None QTextFrameFormat(self, fmt: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextFrameFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextFrameFormatMixin</code>, <code>gui.QTextFrameFormat</code></p> Source code in <code>prettyqt\\gui\\textframeformat.py</code> <pre><code>class TextFrameFormat(TextFrameFormatMixin, gui.QTextFrameFormat):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextFrameFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256691552[\"gui.TextFrameFormat\"]\n  2103256704032[\"gui.TextFrameFormatMixin\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254353808[\"QtGui.QTextFrameFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256704032 --&gt; 2103256691552\n  2103256712672 --&gt; 2103256704032\n  140736120080256 --&gt; 2103256712672\n  2103254353808 --&gt; 2103256691552\n  2103254313488 --&gt; 2103254353808\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextImageFormat.html","title":"TextImageFormat","text":"<p>Qt Base Class: QTextImageFormat</p> <p>Signature: <code>QTextImageFormat(self) -&gt; None QTextImageFormat(self, QTextImageFormat: PySide6.QtGui.QTextImageFormat) -&gt; None QTextImageFormat(self, format: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextImageFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.TextCharFormatMixin</code>, <code>gui.QTextImageFormat</code></p> Source code in <code>prettyqt\\gui\\textimageformat.py</code> <pre><code>class TextImageFormat(gui.TextCharFormatMixin, gui.QTextImageFormat):\ndef __bool__(self):\nreturn self.isValid()\n</code></pre>"},{"location":"qt_modules/gui/TextImageFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256703072[\"gui.TextImageFormat\"]\n  2103256700192[\"gui.TextCharFormatMixin\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259429072[\"QtGui.QTextImageFormat\"]\n  2103254367248[\"QtGui.QTextCharFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256700192 --&gt; 2103256703072\n  2103256712672 --&gt; 2103256700192\n  140736120080256 --&gt; 2103256712672\n  2103259429072 --&gt; 2103256703072\n  2103254367248 --&gt; 2103259429072\n  2103254313488 --&gt; 2103254367248\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextLayout.html","title":"TextLayout","text":"<p>Qt Base Class: QTextLayout</p> <p>Signature: <code>QTextLayout(self) -&gt; None QTextLayout(self, b: PySide6.QtGui.QTextBlock) -&gt; None QTextLayout(self, text: str) -&gt; None QTextLayout(self, text: str, font: Union[PySide6.QtGui.QFont, str, Sequence[str]], paintdevice: Optional[PySide6.QtGui.QPaintDevice] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QTextLayout</code></p> Source code in <code>prettyqt\\gui\\textlayout.py</code> <pre><code>class TextLayout(gui.QTextLayout):\ndef __repr__(self):\nreturn get_repr(self, self.text())\n@contextlib.contextmanager\ndef process_layout(self):\nself.beginLayout()\nyield self\nself.endLayout()\ndef get_text_option(self) -&gt; gui.TextOption:\nreturn gui.TextOption(self.textOption())\n</code></pre>"},{"location":"qt_modules/gui/TextLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260962256[\"gui.TextLayout\"]\n  2103259385872[\"QtGui.QTextLayout\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259385872 --&gt; 2103260962256\n  2103206874128 --&gt; 2103259385872\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextLength.html","title":"TextLength","text":"<p>Qt Base Class: QTextLength</p> <p>Signature: <code>QTextLength(self) -&gt; None QTextLength(self, QTextLength: PySide6.QtGui.QTextLength) -&gt; None QTextLength(self, type: PySide6.QtGui.QTextLength.Type, value: float) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextLength.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextLength</code></p> Source code in <code>prettyqt\\gui\\textlength.py</code> <pre><code>class TextLength(QtGui.QTextLength):\ndef __repr__(self):\nreturn get_repr(self, self.type(), self.rawValue())\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return type of this length object.\n        Returns:\n            timer type\n        \"\"\"\nreturn TYPES.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/gui/TextLength.html#prettyqt.gui.textlength.TextLength.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return type of this length object.</p> Source code in <code>prettyqt\\gui\\textlength.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return type of this length object.\n    Returns:\n        timer type\n    \"\"\"\nreturn TYPES.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/gui/TextLength.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256706912[\"gui.TextLength\"]\n  2103254312528[\"QtGui.QTextLength\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254312528 --&gt; 2103256706912\n  2103206874128 --&gt; 2103254312528\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextLine.html","title":"TextLine","text":"<p>Qt Base Class: QTextLine</p> <p>Signature: <code>QTextLine(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextLine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextLine</code></p> Source code in <code>prettyqt\\gui\\textline.py</code> <pre><code>class TextLine(QtGui.QTextLine):\ndef __bool__(self):\nreturn self.isValid()\ndef __repr__(self):\nreturn get_repr(self)\ndef __len__(self):\nreturn self.textLength()\ndef get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\ndef set_position(self, point: datatypes.PointType):\np = core.Point(*point) if isinstance(point, tuple) else point\nself.setPosition(p)\ndef cursor_to_x(\nself, cursor_pos: int, edge: EdgeStr | QtGui.QTextLine.Edge = \"leading\"\n) -&gt; float:\nreturn self.cursorToX(cursor_pos, EDGE.get_enum_value(edge))  # type: ignore\ndef x_to_cursor(\nself,\nx: float,\ncursor_pos: CursorPositionStr\n| QtGui.QTextLine.CursorPosition = \"cursor_between_characters\",\n) -&gt; int:\nreturn self.xToCursor(x, CURSOR_POSITION.get_enum_value(cursor_pos))\n</code></pre>"},{"location":"qt_modules/gui/TextLine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260973776[\"gui.TextLine\"]\n  2103254333648[\"QtGui.QTextLine\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254333648 --&gt; 2103260973776\n  2103206874128 --&gt; 2103254333648\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextListFormat.html","title":"TextListFormat","text":"<p>Qt Base Class: QTextListFormat</p> <p>Signature: <code>QTextListFormat(self) -&gt; None QTextListFormat(self, QTextListFormat: PySide6.QtGui.QTextListFormat) -&gt; None QTextListFormat(self, fmt: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextListFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.TextFormatMixin</code>, <code>gui.QTextListFormat</code></p> Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>class TextListFormat(gui.TextFormatMixin, gui.QTextListFormat):\ndef set_style(self, style: StyleStr | gui.QTextListFormat.Style):\n\"\"\"Set the style.\n        Args:\n            style: style\n        \"\"\"\nself.setStyle(STYLES.get_enum_value(style))\ndef get_style(self) -&gt; StyleStr:\n\"\"\"Get current style.\n        Returns:\n            current style\n        \"\"\"\nreturn STYLES.inverse[self.style()]\n</code></pre>"},{"location":"qt_modules/gui/TextListFormat.html#prettyqt.gui.textlistformat.TextListFormat.get_style","title":"<code>get_style() -&gt; StyleStr</code>","text":"<p>Get current style.</p> Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>def get_style(self) -&gt; StyleStr:\n\"\"\"Get current style.\n    Returns:\n        current style\n    \"\"\"\nreturn STYLES.inverse[self.style()]\n</code></pre>"},{"location":"qt_modules/gui/TextListFormat.html#prettyqt.gui.textlistformat.TextListFormat.set_style","title":"<code>set_style(style: StyleStr | gui.QTextListFormat.Style)</code>","text":"<p>Set the style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>StyleStr | gui.QTextListFormat.Style</code> <p>style</p> required Source code in <code>prettyqt\\gui\\textlistformat.py</code> <pre><code>def set_style(self, style: StyleStr | gui.QTextListFormat.Style):\n\"\"\"Set the style.\n    Args:\n        style: style\n    \"\"\"\nself.setStyle(STYLES.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextListFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256687712[\"gui.TextListFormat\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254351888[\"QtGui.QTextListFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256712672 --&gt; 2103256687712\n  140736120080256 --&gt; 2103256712672\n  2103254351888 --&gt; 2103256687712\n  2103254313488 --&gt; 2103254351888\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextObject.html","title":"TextObject","text":"<p>Qt Base Class: QTextObject</p> <p>Signature: <code>QTextObject(self, doc: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextObject.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextObjectMixin</code>, <code>gui.QTextObject</code></p> Source code in <code>prettyqt\\gui\\textobject.py</code> <pre><code>class TextObject(TextObjectMixin, gui.QTextObject):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextObject.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256723232[\"gui.TextObject\"]\n  2103256720352[\"gui.TextObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260811536[\"QtGui.QTextObject\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256720352 --&gt; 2103256723232\n  2103255067472 --&gt; 2103256720352\n  140736120080256 --&gt; 2103255067472\n  2103260811536 --&gt; 2103256723232\n  2103254677056 --&gt; 2103260811536\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextObject.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/TextObjectInterface.html","title":"TextObjectInterface","text":"<p>Qt Base Class: QTextObjectInterface</p> <p>Signature: <code>QTextObjectInterface(self) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextObjectInterface.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextObjectInterface</code></p> Source code in <code>prettyqt\\gui\\textobjectinterface.py</code> <pre><code>class TextObjectInterface(QtGui.QTextObjectInterface):\npass\n</code></pre>"},{"location":"qt_modules/gui/TextObjectInterface.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260915216[\"gui.TextObjectInterface\"]\n  2103254342288[\"QtGui.QTextObjectInterface\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254342288 --&gt; 2103260915216\n  2103206874128 --&gt; 2103254342288\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextObjectMixin.html","title":"TextObjectMixin","text":""},{"location":"qt_modules/gui/TextObjectMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\textobject.py</code> <pre><code>class TextObjectMixin(core.ObjectMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef get_format(self) -&gt; gui.TextFormat:\nreturn gui.TextFormat(self.format())\n</code></pre> Name Children Inherits TextObjectprettyqt.gui.textobject <ul><li>TextObjectMixin</li><li>QTextObject</li></ul> TextBlockGroupprettyqt.gui.textblockgroup <ul><li>TextObjectMixin</li><li>QTextBlockGroup</li></ul> <code>TextFrameMixin</code>prettyqt.gui.textframe <ul><li>TextFrame</li><li>TextTable</li></ul> <ul><li>TextObjectMixin</li></ul>"},{"location":"qt_modules/gui/TextObjectMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256720352[\"gui.TextObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103256720352\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/TextOption.html","title":"TextOption","text":"<p>Qt Base Class: QTextOption</p> <p>Signature: <code>QTextOption(self) -&gt; None QTextOption(self, alignment: PySide6.QtCore.Qt.AlignmentFlag) -&gt; None QTextOption(self, o: Union[PySide6.QtGui.QTextOption, PySide6.QtCore.Qt.AlignmentFlag]) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextOption.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QTextOption</code></p> Source code in <code>prettyqt\\gui\\textoption.py</code> <pre><code>class TextOption(QtGui.QTextOption):\ndef set_flags(self, **flags):\ncurrent = self.flags()\nfor k, v in flags.items():\nif v:\ncurrent |= FLAG[k]\nelse:\ncurrent &amp;= ~FLAG[k]\nself.setFlags(current)\n</code></pre>"},{"location":"qt_modules/gui/TextOption.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260974736[\"gui.TextOption\"]\n  2103254309648[\"QtGui.QTextOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254309648 --&gt; 2103260974736\n  2103206874128 --&gt; 2103254309648\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextTable.html","title":"TextTable","text":"<p>Qt Base Class: QTextTable</p> <p>Signature: <code>QTextTable(self, doc: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextTable.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.textframe.TextFrameMixin</code>, <code>gui.QTextTable</code></p> Source code in <code>prettyqt\\gui\\texttable.py</code> <pre><code>class TextTable(gui.textframe.TextFrameMixin, gui.QTextTable):\ndef __getitem__(self, index: int | tuple[int, int]) -&gt; gui.TextTableCell:\nif isinstance(index, int):\ncell = gui.TextTableCell(self.cellAt(index))\nelse:\ncell = gui.TextTableCell(self.cellAt(*index))\nif not cell.isValid():\nraise IndexError(index)\nreturn cell\n</code></pre>"},{"location":"qt_modules/gui/TextTable.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256722272[\"gui.TextTable\"]\n  2103256718432[\"gui.TextFrameMixin\"]\n  2103256720352[\"gui.TextObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260812496[\"QtGui.QTextTable\"]\n  2103260788496[\"QtGui.QTextFrame\"]\n  2103260811536[\"QtGui.QTextObject\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256718432 --&gt; 2103256722272\n  2103256720352 --&gt; 2103256718432\n  2103255067472 --&gt; 2103256720352\n  140736120080256 --&gt; 2103255067472\n  2103260812496 --&gt; 2103256722272\n  2103260788496 --&gt; 2103260812496\n  2103260811536 --&gt; 2103260788496\n  2103254677056 --&gt; 2103260811536\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextTable.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/TextTableCell.html","title":"TextTableCell","text":"<p>Qt Base Class: QTextTableCell</p> <p>Signature: <code>QTextTableCell(self) -&gt; None QTextTableCell(self, o: PySide6.QtGui.QTextTableCell) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextTableCell.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.QTextTableCell</code></p> Source code in <code>prettyqt\\gui\\texttablecell.py</code> <pre><code>class TextTableCell(gui.QTextTableCell):\ndef get_format(self) -&gt; gui.TextCharFormat:\n#  .format() seems to crash both bindings?\nreturn gui.TextCharFormat(self.format())\ndef get_first_cursor_position(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.firstCursorPosition())\ndef get_last_cursor_position(self) -&gt; gui.TextCursor:\nreturn gui.TextCursor(self.lastCursorPosition())\n</code></pre>"},{"location":"qt_modules/gui/TextTableCell.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256713632[\"gui.TextTableCell\"]\n  2103254328848[\"QtGui.QTextTableCell\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254328848 --&gt; 2103256713632\n  2103206874128 --&gt; 2103254328848\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html","title":"TextTableCellFormat","text":"<p>Qt Base Class: QTextTableCellFormat</p> <p>Signature: <code>QTextTableCellFormat(self) -&gt; None QTextTableCellFormat(self, QTextTableCellFormat: PySide6.QtGui.QTextTableCellFormat) -&gt; None QTextTableCellFormat(self, fmt: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextTableCellFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.TextCharFormatMixin</code>, <code>gui.QTextTableCellFormat</code></p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>class TextTableCellFormat(gui.TextCharFormatMixin, gui.QTextTableCellFormat):\ndef get_bottom_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.bottomBorderBrush())\ndef set_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set border style.\n        Args:\n            style: border style\n        \"\"\"\nself.setBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\ndef set_bottom_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set bottom border style.\n        Args:\n            style: bottom border style\n        \"\"\"\nself.setBottomBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\ndef get_bottom_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current bottom border style.\n        Returns:\n            bottom border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.bottomBorderStyle()]\ndef get_left_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.leftBorderBrush())\ndef set_left_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set left border style.\n        Args:\n            style: left border style\n        \"\"\"\nself.setLeftBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\ndef get_left_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current left border style.\n        Returns:\n            left border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.leftBorderStyle()]\ndef get_right_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.rightBorderBrush())\ndef set_right_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set right border style.\n        Args:\n            style: right border style\n        \"\"\"\nself.setRightBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\ndef get_right_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current right border style.\n        Returns:\n            right border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.rightBorderStyle()]\ndef get_top_border_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.topBorderBrush())\ndef set_top_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set top border style.\n        Args:\n            style: top border style\n        \"\"\"\nself.setTopBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\ndef get_top_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current top border style.\n        Returns:\n            top border style\n        \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.topBorderStyle()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_bottom_border_style","title":"<code>get_bottom_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current bottom border style.</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_bottom_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current bottom border style.\n    Returns:\n        bottom border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.bottomBorderStyle()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_left_border_style","title":"<code>get_left_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current left border style.</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_left_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current left border style.\n    Returns:\n        left border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.leftBorderStyle()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_right_border_style","title":"<code>get_right_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current right border style.</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_right_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current right border style.\n    Returns:\n        right border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.rightBorderStyle()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.get_top_border_style","title":"<code>get_top_border_style() -&gt; gui.textframeformat.BorderStyleStr</code>","text":"<p>Get the current top border style.</p> Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def get_top_border_style(self) -&gt; gui.textframeformat.BorderStyleStr:\n\"\"\"Get the current top border style.\n    Returns:\n        top border style\n    \"\"\"\nreturn gui.textframeformat.BORDER_STYLES.inverse[self.topBorderStyle()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_border_style","title":"<code>set_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set border style.\n    Args:\n        style: border style\n    \"\"\"\nself.setBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_bottom_border_style","title":"<code>set_bottom_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set bottom border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>bottom border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_bottom_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set bottom border style.\n    Args:\n        style: bottom border style\n    \"\"\"\nself.setBottomBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_left_border_style","title":"<code>set_left_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set left border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>left border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_left_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set left border style.\n    Args:\n        style: left border style\n    \"\"\"\nself.setLeftBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_right_border_style","title":"<code>set_right_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set right border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>right border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_right_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set right border style.\n    Args:\n        style: right border style\n    \"\"\"\nself.setRightBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#prettyqt.gui.texttablecellformat.TextTableCellFormat.set_top_border_style","title":"<code>set_top_border_style(style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle)</code>","text":"<p>Set top border style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle</code> <p>top border style</p> required Source code in <code>prettyqt\\gui\\texttablecellformat.py</code> <pre><code>def set_top_border_style(\nself, style: gui.textframeformat.BorderStyleStr | gui.QTextFrameFormat.BorderStyle\n):\n\"\"\"Set top border style.\n    Args:\n        style: top border style\n    \"\"\"\nself.setTopBorderStyle(gui.textframeformat.BORDER_STYLES.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/gui/TextTableCellFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256694432[\"gui.TextTableCellFormat\"]\n  2103256700192[\"gui.TextCharFormatMixin\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259422352[\"QtGui.QTextTableCellFormat\"]\n  2103254367248[\"QtGui.QTextCharFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256700192 --&gt; 2103256694432\n  2103256712672 --&gt; 2103256700192\n  140736120080256 --&gt; 2103256712672\n  2103259422352 --&gt; 2103256694432\n  2103254367248 --&gt; 2103259422352\n  2103254313488 --&gt; 2103254367248\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/TextTableFormat.html","title":"TextTableFormat","text":"<p>Qt Base Class: QTextTableFormat</p> <p>Signature: <code>QTextTableFormat(self) -&gt; None QTextTableFormat(self, QTextTableFormat: PySide6.QtGui.QTextTableFormat) -&gt; None QTextTableFormat(self, fmt: PySide6.QtGui.QTextFormat) -&gt; None</code></p>"},{"location":"qt_modules/gui/TextTableFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.textframeformat.TextFrameFormatMixin</code>, <code>gui.QTextTableFormat</code></p> Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>class TextTableFormat(gui.textframeformat.TextFrameFormatMixin, gui.QTextTableFormat):\ndef __bool__(self):\nreturn self.isValid()\ndef set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the format.\n        Args:\n            alignment: alignment for the format\n        \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef get_column_width_constraints(self) -&gt; list[gui.TextLength]:\nreturn [gui.TextLength(i) for i in self.columnWidthConstraints()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableFormat.html#prettyqt.gui.texttableformat.TextTableFormat.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"qt_modules/gui/TextTableFormat.html#prettyqt.gui.texttableformat.TextTableFormat.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the format.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the format</p> required Source code in <code>prettyqt\\gui\\texttableformat.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the format.\n    Args:\n        alignment: alignment for the format\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/gui/TextTableFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256708832[\"gui.TextTableFormat\"]\n  2103256704032[\"gui.TextFrameFormatMixin\"]\n  2103256712672[\"gui.TextFormatMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254357648[\"QtGui.QTextTableFormat\"]\n  2103254353808[\"QtGui.QTextFrameFormat\"]\n  2103254313488[\"QtGui.QTextFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256704032 --&gt; 2103256708832\n  2103256712672 --&gt; 2103256704032\n  140736120080256 --&gt; 2103256712672\n  2103254357648 --&gt; 2103256708832\n  2103254353808 --&gt; 2103254357648\n  2103254313488 --&gt; 2103254353808\n  2103206874128 --&gt; 2103254313488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Transform.html","title":"Transform","text":"<p>Qt Base Class: QTransform</p> <p>Signature: <code>QTransform(self) -&gt; None QTransform(self, h11: float, h12: float, h13: float, h21: float, h22: float, h23: float, h31: float, h32: float, h33: float) -&gt; None QTransform(self, h11: float, h12: float, h21: float, h22: float, dx: float, dy: float) -&gt; None QTransform(self, other: PySide6.QtGui.QTransform) -&gt; None</code></p>"},{"location":"qt_modules/gui/Transform.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtGui.QTransform</code></p> Source code in <code>prettyqt\\gui\\transform.py</code> <pre><code>class Transform(serializemixin.SerializeMixin, QtGui.QTransform):\ndef __repr__(self):\nreturn get_repr(\nself,\nself.m11(),\nself.m12(),\nself.m13(),\nself.m21(),\nself.m22(),\nself.m23(),\nself.m31(),\nself.m32(),\nself.m33(),\n)\ndef __getitem__(self, value: tuple[int, int]) -&gt; float:\nmatch value[0], value[1]:\ncase 0, 0:\nreturn self.m11()\ncase 0, 1:\nreturn self.m12()\ncase 0, 2:\nreturn self.m13()\ncase 1, 0:\nreturn self.m21()\ncase 1, 1:\nreturn self.m22()\ncase 1, 2:\nreturn self.m23()\ncase 2, 0:\nreturn self.m31()\ncase 2, 1:\nreturn self.m32()\ncase 2, 2:\nreturn self.m33()\ncase _:\nraise ValueError(f\"Wrong value {value}\")\n@property\ndef _m11(self) -&gt; float:\nreturn self.m11()\n@property\ndef _m12(self) -&gt; float:\nreturn self.m12()\n@property\ndef _m13(self) -&gt; float:\nreturn self.m13()\n@property\ndef _m21(self) -&gt; float:\nreturn self.m21()\n@property\ndef _m22(self) -&gt; float:\nreturn self.m22()\n@property\ndef _m23(self) -&gt; float:\nreturn self.m23()\n@property\ndef _m31(self) -&gt; float:\nreturn self.m31()\n@property\ndef _m32(self) -&gt; float:\nreturn self.m32()\n@property\ndef _m33(self) -&gt; float:\nreturn self.m33()\n__match_args__ = (\n\"_m11\",\n\"_m12\",\n\"_m13\",\n\"_m21\",\n\"_m22\",\n\"_m23\",\n\"_m31\",\n\"_m32\",\n\"_m33\",\n)\n@classmethod\ndef clone_from(cls, transform: QtGui.QTransform) -&gt; Self:\nreturn cls(\ntransform.m11(),\ntransform.m12(),\ntransform.m13(),\ntransform.m21(),\ntransform.m22(),\ntransform.m23(),\ntransform.m31(),\ntransform.m32(),\ntransform.m33(),\n)\ndef get_type(self) -&gt; TransformationTypeStr:\nreturn TRANSFORMATION_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/gui/Transform.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260761616[\"gui.Transform\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254336528[\"QtGui.QTransform\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103260761616\n  140736120080256 --&gt; 2103255032912\n  2103254336528 --&gt; 2103260761616\n  2103206874128 --&gt; 2103254336528\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/UndoCommand.html","title":"UndoCommand","text":"<p>Qt Base Class: QUndoCommand</p> <p>Signature: <code>QUndoCommand(self, parent: Optional[PySide6.QtGui.QUndoCommand] = None) -&gt; None QUndoCommand(self, text: str, parent: Optional[PySide6.QtGui.QUndoCommand] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/UndoCommand.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QUndoCommand</code></p> Source code in <code>prettyqt\\gui\\undocommand.py</code> <pre><code>class UndoCommand(QtGui.QUndoCommand):\ndef __len__(self) -&gt; int:\nreturn self.childCount()\ndef __getitem__(self, index: int) -&gt; QtGui.QUndoCommand:\nif index &gt;= self.childCount():\nraise IndexError(index)\nreturn self.child(index)\n</code></pre>"},{"location":"qt_modules/gui/UndoCommand.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256725152[\"gui.UndoCommand\"]\n  2103254324048[\"QtGui.QUndoCommand\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254324048 --&gt; 2103256725152\n  2103206874128 --&gt; 2103254324048\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/UndoGroup.html","title":"UndoGroup","text":"<p>Qt Base Class: QUndoGroup</p> <p>Signature: <code>QUndoGroup(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/UndoGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>UndoGroupMixin</code>, <code>QtGui.QUndoGroup</code></p> Source code in <code>prettyqt\\gui\\undogroup.py</code> <pre><code>class UndoGroup(UndoGroupMixin, QtGui.QUndoGroup):\npass\n</code></pre>"},{"location":"qt_modules/gui/UndoGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256726112[\"gui.UndoGroup\"]\n  2103256716512[\"gui.UndoGroupMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260810576[\"QtGui.QUndoGroup\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256716512 --&gt; 2103256726112\n  2103255067472 --&gt; 2103256716512\n  140736120080256 --&gt; 2103255067472\n  2103260810576 --&gt; 2103256726112\n  2103254677056 --&gt; 2103260810576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/UndoGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/UndoStack.html","title":"UndoStack","text":"<p>Qt Base Class: QUndoStack</p> <p>Signature: <code>QUndoStack(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/UndoStack.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>UndoStackMixin</code>, <code>gui.QUndoStack</code></p> Source code in <code>prettyqt\\gui\\undostack.py</code> <pre><code>class UndoStack(UndoStackMixin, gui.QUndoStack):\npass\n</code></pre>"},{"location":"qt_modules/gui/UndoStack.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256697312[\"gui.UndoStack\"]\n  2103256693472[\"gui.UndoStackMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260799056[\"QtGui.QUndoStack\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256693472 --&gt; 2103256697312\n  2103255067472 --&gt; 2103256693472\n  140736120080256 --&gt; 2103255067472\n  2103260799056 --&gt; 2103256697312\n  2103254677056 --&gt; 2103260799056\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/UndoStack.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool <code>undoLimit</code> int <code>canUndo</code> bool <code>canRedo</code> bool <code>undoText</code> QString <code>redoText</code> QString <code>clean</code> bool"},{"location":"qt_modules/gui/Validator.html","title":"Validator","text":"<p>Qt Base Class: QValidator</p> <p>Signature: <code>QValidator(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/Validator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ValidatorMixin</code>, <code>QtGui.QValidator</code></p> Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>class Validator(ValidatorMixin, QtGui.QValidator):\npass\n</code></pre> Name Children Inherits AlphaNumericValidatorprettyqt.validators.alphanumericvalidator <ul><li>Validator</li></ul> BlacklistValidatorprettyqt.validators.blacklistvalidator <ul><li>NotZeroValidator</li><li>NotEmptyValidator</li></ul> <ul><li>Validator</li></ul> ColorValidatorprettyqt.validators.colorvalidator <ul><li>Validator</li></ul> <code>CompositeValidator</code>prettyqt.validators.compositevalidator <ul><li>AndValidator</li><li>OrValidator</li></ul> <ul><li>Validator</li></ul> FunctionValidatorprettyqt.validators.functionvalidator <ul><li>Validator</li></ul> HexValidatorprettyqt.validators.hexvalidator <ul><li>Validator</li></ul> IntegerValidatorprettyqt.validators.integervalidator <ul><li>Validator</li></ul> JsonValidatorprettyqt.validators.jsonvalidator <ul><li>Validator</li></ul> MonotonicListValidatorprettyqt.validators.monotoniclistvalidator <ul><li>Validator</li></ul> NotStrictValidatorprettyqt.validators.notstrictvalidator <ul><li>Validator</li></ul> PathValidatorprettyqt.validators.pathvalidator <ul><li>Validator</li></ul> PythonCodeValidatorprettyqt.validators.pythoncodevalidator <ul><li>Validator</li></ul> QssValidatorprettyqt.validators.qssvalidator <ul><li>Validator</li></ul> RegexPatternValidatorprettyqt.validators.regexpatternvalidator <ul><li>Validator</li></ul> <code>BaseRegexValidator</code>prettyqt.validators.regexvalidators <ul><li>IntListValidator</li><li>FloatListValidator</li></ul> <ul><li>Validator</li></ul> <code>BaseScientificValidator</code>prettyqt.validators.scientificvalidators <ul><li>ScientificIntegerValidator</li><li>ScientificFloatValidator</li></ul> <ul><li>Validator</li></ul> TextLengthValidatorprettyqt.validators.textlengthvalidator <ul><li>Validator</li></ul> WhitelistValidatorprettyqt.validators.whitelistvalidator <ul><li>EmptyValidator</li></ul> <ul><li>Validator</li></ul>"},{"location":"qt_modules/gui/Validator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260959376[\"gui.Validator\"]\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260802896[\"QtGui.QValidator\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260958416 --&gt; 2103260959376\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472\n  2103260802896 --&gt; 2103260959376\n  2103254677056 --&gt; 2103260802896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Validator.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/gui/ValidatorMixin.html","title":"ValidatorMixin","text":""},{"location":"qt_modules/gui/ValidatorMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\gui\\validator.py</code> <pre><code>class ValidatorMixin(core.ObjectMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef __and__(self, other: Validator):\nfrom prettyqt import validators\nreturn validators.AndValidator([self, other])\ndef __or__(self, other: Validator):\nfrom prettyqt import validators\nreturn validators.OrValidator([self, other])\ndef is_valid_value(self, value: str, pos: int = 0) -&gt; bool:\nval = self.validate(value, pos)\nreturn val[0] == self.State.Acceptable  # type: ignore\n</code></pre> Name Children Inherits Validatorprettyqt.gui.validator <ul><li>AlphaNumericValidator</li><li>BlacklistValidator</li><li>ColorValidator</li><li><code>CompositeValidator</code></li><li>FunctionValidator</li><li>HexValidator</li><li>IntegerValidator</li><li>JsonValidator</li><li>MonotonicListValidator</li><li>NotStrictValidator</li><li>...</li></ul> <ul><li>ValidatorMixin</li><li>QValidator</li></ul> RegularExpressionValidatorprettyqt.gui.regularexpressionvalidator <ul><li>ValidatorMixin</li><li>QRegularExpressionValidator</li></ul> IntValidatorprettyqt.gui.intvalidator <ul><li>ValidatorMixin</li><li>QIntValidator</li></ul> DoubleValidatorprettyqt.gui.doublevalidator <ul><li>ValidatorMixin</li><li>QDoubleValidator</li></ul>"},{"location":"qt_modules/gui/ValidatorMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260958416[\"gui.ValidatorMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103260958416\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/gui/Vector3D.html","title":"Vector3D","text":"<p>Qt Base Class: QVector3D</p> <p>Signature: <code>QVector3D(self) -&gt; None QVector3D(self, point: PySide6.QtCore.QPoint) -&gt; None QVector3D(self, point: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -&gt; None QVector3D(self, vector: PySide6.QtGui.QVector2D) -&gt; None QVector3D(self, vector: PySide6.QtGui.QVector2D, zpos: float) -&gt; None QVector3D(self, vector: PySide6.QtGui.QVector4D) -&gt; None QVector3D(self, xpos: float, ypos: float, zpos: float) -&gt; None</code></p>"},{"location":"qt_modules/gui/Vector3D.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QVector3D</code></p> Source code in <code>prettyqt\\gui\\vector3d.py</code> <pre><code>class Vector3D(QtGui.QVector3D):\ndef __bool__(self):\nreturn not self.isNull()\ndef __abs__(self) -&gt; float:\nreturn self.length()\n@property\ndef _x(self) -&gt; float:\nreturn self.x()\n@property\ndef _y(self) -&gt; float:\nreturn self.y()\n@property\ndef _z(self) -&gt; float:\nreturn self.z()\n__match_args__ = (\"_x\", \"_y\", \"z\")\ndef __reduce__(self):\nreturn type(self), (self.x(), self.y(), self.z())\ndef to_point(self) -&gt; core.Point:\nreturn core.Point(self.toPoint())\ndef to_pointf(self) -&gt; core.PointF:\nreturn core.PointF(self.toPointF())\n</code></pre>"},{"location":"qt_modules/gui/Vector3D.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256717472[\"gui.Vector3D\"]\n  2103254322128[\"QtGui.QVector3D\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254322128 --&gt; 2103256717472\n  2103206874128 --&gt; 2103254322128\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Vector4D.html","title":"Vector4D","text":"<p>Qt Base Class: QVector4D</p> <p>Signature: <code>QVector4D(self) -&gt; None QVector4D(self, point: PySide6.QtCore.QPoint) -&gt; None QVector4D(self, point: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -&gt; None QVector4D(self, vector: PySide6.QtGui.QVector2D) -&gt; None QVector4D(self, vector: PySide6.QtGui.QVector2D, zpos: float, wpos: float) -&gt; None QVector4D(self, vector: PySide6.QtGui.QVector3D) -&gt; None QVector4D(self, vector: PySide6.QtGui.QVector3D, wpos: float) -&gt; None QVector4D(self, xpos: float, ypos: float, zpos: float, wpos: float) -&gt; None</code></p>"},{"location":"qt_modules/gui/Vector4D.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtGui.QVector4D</code></p> Source code in <code>prettyqt\\gui\\vector4d.py</code> <pre><code>class Vector4D(QtGui.QVector4D):\ndef __bool__(self):\nreturn not self.isNull()\ndef __abs__(self) -&gt; float:\nreturn self.length()\n@property\ndef _x(self) -&gt; float:\nreturn self.x()\n@property\ndef _y(self) -&gt; float:\nreturn self.y()\n@property\ndef _z(self) -&gt; float:\nreturn self.z()\n@property\ndef _w(self) -&gt; float:\nreturn self.w()\n__match_args__ = (\"_x\", \"_y\", \"z\", \"w\")\ndef __reduce__(self):\nreturn type(self), (self.x(), self.y(), self.z(), self.w())\ndef to_point(self) -&gt; core.Point:\nreturn core.Point(self.toPoint())\ndef to_pointf(self) -&gt; core.PointF:\nreturn core.PointF(self.toPointF())\n</code></pre>"},{"location":"qt_modules/gui/Vector4D.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103256689632[\"gui.Vector4D\"]\n  2103254337488[\"QtGui.QVector4D\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103254337488 --&gt; 2103256689632\n  2103206874128 --&gt; 2103254337488\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/gui/Window.html","title":"Window","text":"<p>Qt Base Class: QWindow</p> <p>Signature: <code>QWindow(self, parent: PySide6.QtGui.QWindow) -&gt; None QWindow(self, screen: Optional[PySide6.QtGui.QScreen] = None) -&gt; None</code></p>"},{"location":"qt_modules/gui/Window.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>WindowMixin</code>, <code>gui.QWindow</code></p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>class Window(WindowMixin, gui.QWindow):\npass\n</code></pre>"},{"location":"qt_modules/gui/Window.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260948816[\"gui.Window\"]\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103260797136[\"QtGui.QWindow\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259447312[\"QtGui.QSurface\"]\n  2103260916176 --&gt; 2103260948816\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096\n  2103260797136 --&gt; 2103260948816\n  2103254677056 --&gt; 2103260797136\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259447312 --&gt; 2103260797136\n  2103206874128 --&gt; 2103259447312</code></pre>"},{"location":"qt_modules/gui/Window.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>title</code> QString <code>modality</code> Qt::WindowModality <code>flags</code> QFlags <code>x</code> int <code>y</code> int <code>width</code> int <code>height</code> int <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>visible</code> bool <code>active</code> bool <code>visibility</code> QWindow::Visibility <code>contentOrientation</code> Qt::ScreenOrientation <code>opacity</code> double <code>transientParent</code> QWindow"},{"location":"qt_modules/gui/WindowMixin.html","title":"WindowMixin","text":""},{"location":"qt_modules/gui/WindowMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>gui.SurfaceMixin</code></p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>class WindowMixin(core.ObjectMixin, gui.SurfaceMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr | constants.ShortcutContext = \"window\",\n) -&gt; gui.Shortcut:\nif not isinstance(keysequence, gui.QKeySequence):\nkeysequence = gui.KeySequence(keysequence)\ncontext = constants.SHORTCUT_CONTEXT.get_enum_value(context)\nreturn gui.Shortcut(keysequence, self, callback, context=context)\ndef set_visibility(self, visibility: VisibilityStr | gui.QWindow.Visibility):\n\"\"\"Set window visibility.\n        Args:\n            visibility: window visibility\n        \"\"\"\nself.setVisibility(VISIBILITY.get_enum_value(visibility))\ndef get_visibility(self) -&gt; VisibilityStr:\n\"\"\"Get the current window visibility.\n        Returns:\n            window visibility\n        \"\"\"\nreturn VISIBILITY.inverse[self.visibility()]\ndef start_system_resize(self, edge: constants.EdgeStr | constants.Edge) -&gt; bool:\n\"\"\"Start system resize.\n        Args:\n            edge: edge to resize\n        \"\"\"\nreturn self.startSystemResize(constants.EDGES.get_enum_value(edge))\ndef get_screen(self) -&gt; gui.Screen:\nreturn gui.Screen(self.screen())\ndef get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_modality(\nself, modality: constants.WindowModalityStr | constants.WindowModality\n) -&gt; None:\n\"\"\"Set modality for the window.\n        Args:\n            modality: modality for the window\n        \"\"\"\nself.setModality(constants.WINDOW_MODALITY.get_enum_value(modality))\ndef get_modality(self) -&gt; constants.WindowModalityStr:\nreturn constants.WINDOW_MODALITY.inverse[self.modality()]\ndef set_file_path(self, file_path: os.PathLike):\npath = os.fspath(file_path)\nself.setFilePath(path)\ndef get_file_path(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.filePath())\ndef get_type(self) -&gt; constants.WindowTypeStr:\nreturn constants.WINDOW_TYPE.inverse[self.type()]\ndef get_window_state(self) -&gt; constants.WindowStateStr:\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\ndef get_window_states(self) -&gt; list[constants.WindowStateStr]:\nreturn constants.WINDOW_STATES.get_list(self.windowStates())\n</code></pre> Name Children Inherits Windowprettyqt.gui.window <ul><li>WindowMixin</li><li>QWindow</li></ul> PaintDeviceWindowMixinprettyqt.gui.paintdevicewindow <ul><li>PaintDeviceWindow</li><li>RasterWindow</li></ul> <ul><li>WindowMixin</li><li>PaintDeviceMixin</li></ul> <code>QuickWindowMixin</code>prettyqt.quick.quickwindow <ul><li>QuickWindow</li><li>QuickView</li></ul> <ul><li>WindowMixin</li></ul>"},{"location":"qt_modules/gui/WindowMixin.html#prettyqt.gui.window.WindowMixin.get_visibility","title":"<code>get_visibility() -&gt; VisibilityStr</code>","text":"<p>Get the current window visibility.</p> Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def get_visibility(self) -&gt; VisibilityStr:\n\"\"\"Get the current window visibility.\n    Returns:\n        window visibility\n    \"\"\"\nreturn VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"qt_modules/gui/WindowMixin.html#prettyqt.gui.window.WindowMixin.set_modality","title":"<code>set_modality(modality: constants.WindowModalityStr | constants.WindowModality) -&gt; None</code>","text":"<p>Set modality for the window.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>constants.WindowModalityStr | constants.WindowModality</code> <p>modality for the window</p> required Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_modality(\nself, modality: constants.WindowModalityStr | constants.WindowModality\n) -&gt; None:\n\"\"\"Set modality for the window.\n    Args:\n        modality: modality for the window\n    \"\"\"\nself.setModality(constants.WINDOW_MODALITY.get_enum_value(modality))\n</code></pre>"},{"location":"qt_modules/gui/WindowMixin.html#prettyqt.gui.window.WindowMixin.set_visibility","title":"<code>set_visibility(visibility: VisibilityStr | gui.QWindow.Visibility)</code>","text":"<p>Set window visibility.</p> <p>Parameters:</p> Name Type Description Default <code>visibility</code> <code>VisibilityStr | gui.QWindow.Visibility</code> <p>window visibility</p> required Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def set_visibility(self, visibility: VisibilityStr | gui.QWindow.Visibility):\n\"\"\"Set window visibility.\n    Args:\n        visibility: window visibility\n    \"\"\"\nself.setVisibility(VISIBILITY.get_enum_value(visibility))\n</code></pre>"},{"location":"qt_modules/gui/WindowMixin.html#prettyqt.gui.window.WindowMixin.start_system_resize","title":"<code>start_system_resize(edge: constants.EdgeStr | constants.Edge) -&gt; bool</code>","text":"<p>Start system resize.</p> <p>Parameters:</p> Name Type Description Default <code>edge</code> <code>constants.EdgeStr | constants.Edge</code> <p>edge to resize</p> required Source code in <code>prettyqt\\gui\\window.py</code> <pre><code>def start_system_resize(self, edge: constants.EdgeStr | constants.Edge) -&gt; bool:\n\"\"\"Start system resize.\n    Args:\n        edge: edge to resize\n    \"\"\"\nreturn self.startSystemResize(constants.EDGES.get_enum_value(edge))\n</code></pre>"},{"location":"qt_modules/gui/WindowMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096</code></pre>"},{"location":"qt_modules/location/index.html","title":"location","text":"<p>Provides interfaces to create location-aware applications.</p> Name Children Inherits PlaceSearchResultprettyqt.location.placesearchresult <ul><li>PlaceSearchResultMixin</li><li>QPlaceSearchResult</li></ul> PlaceManagerprettyqt.location.placemanager <ul><li>Object</li></ul> GeoRoutingManagerprettyqt.location.georoutingmanagerSupport for geographic routing operations. <ul><li>ObjectMixin</li></ul> PlaceContentMixinprettyqt.location.placecontent <ul><li>PlaceContent</li></ul> <ul><li>object</li></ul> PlaceReplyprettyqt.location.placereply <ul><li>PlaceReplyMixin</li><li>QPlaceReply</li></ul> GeoRouteRequestprettyqt.location.georouterequest <ul><li>QGeoRouteRequest</li></ul> GeoCodingManagerprettyqt.location.geocodingmanagerSupport for geocoding operations. <ul><li>ObjectMixin</li></ul> PlaceCategoryprettyqt.location.placecategory <ul><li>QPlaceCategory</li></ul> GeoManeuverprettyqt.location.geomaneuver <ul><li>QGeoManeuver</li></ul> PlaceSearchResultMixinprettyqt.location.placesearchresult <ul><li>PlaceSearchResult</li><li>PlaceResult</li><li>PlaceProposedSearchResult</li></ul> <ul><li>object</li></ul> PlaceRatingsprettyqt.location.placeratings <ul><li>QPlaceRatings</li></ul> PlaceReplyMixinprettyqt.location.placereply <ul><li>PlaceReply</li><li>PlaceSearchReply</li><li>PlaceContentReply</li><li>PlaceDetailsReply</li><li>PlaceMatchReply</li><li>PlaceIdReply</li></ul> <ul><li>ObjectMixin</li></ul> GeoRouteSegmentprettyqt.location.georoutesegment <ul><li>QGeoRouteSegment</li></ul> PlaceResultprettyqt.location.placeresult <ul><li>PlaceSearchResultMixin</li><li>QPlaceResult</li></ul> GeoRouteMixinprettyqt.location.georoute <ul><li>GeoRoute</li></ul> <ul><li>object</li></ul> PlaceIconprettyqt.location.placeicon <ul><li>QPlaceIcon</li></ul> Placeprettyqt.location.place <ul><li>QPlace</li></ul> GeoRouteprettyqt.location.georoute <ul><li>GeoRouteMixin</li><li>QGeoRoute</li></ul> PlaceContentprettyqt.location.placecontent <ul><li>PlaceContentMixin</li><li>QPlaceContent</li></ul> PlaceMatchRequestprettyqt.location.placematchrequest <ul><li>QPlaceMatchRequest</li></ul> PlaceProposedSearchResultprettyqt.location.placeproposedsearchresult <ul><li>PlaceSearchResultMixin</li><li>QPlaceProposedSearchResult</li></ul> PlaceDetailsReplyprettyqt.location.placedetailsreply <ul><li>PlaceReplyMixin</li><li>QPlaceDetailsReply</li></ul> PlaceSupplierprettyqt.location.placesupplier <ul><li>QPlaceSupplier</li></ul> PlaceUserprettyqt.location.placeuser <ul><li>QPlaceUser</li></ul> PlaceMatchReplyprettyqt.location.placematchreply <ul><li>PlaceReplyMixin</li><li>QPlaceMatchReply</li></ul> PlaceContactDetailprettyqt.location.placecontactdetail <ul><li>QPlaceContactDetail</li></ul> GeoServiceProviderprettyqt.location.geoserviceprovider <ul><li>ObjectMixin</li><li>QGeoServiceProvider</li></ul> PlaceAttributeprettyqt.location.placeattribute <ul><li>QPlaceAttribute</li></ul> PlaceContentReplyprettyqt.location.placecontentreply <ul><li>PlaceReplyMixin</li><li>QPlaceContentReply</li></ul> PlaceContentRequestprettyqt.location.placecontentrequest <ul><li>QPlaceContentRequest</li></ul> PlaceIdReplyprettyqt.location.placeidreply <ul><li>PlaceReplyMixin</li><li>QPlaceIdReply</li></ul> PlaceSearchRequestprettyqt.location.placesearchrequest <ul><li>QPlaceSearchRequest</li></ul> PlaceSearchReplyprettyqt.location.placesearchreply <ul><li>PlaceReplyMixin</li><li>QPlaceSearchReply</li></ul>"},{"location":"qt_modules/location/GeoCodingManager.html","title":"GeoCodingManager","text":""},{"location":"qt_modules/location/GeoCodingManager.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>Support for geocoding operations.</p> Source code in <code>prettyqt\\location\\geocodingmanager.py</code> <pre><code>class GeoCodingManager(core.ObjectMixin):\n\"\"\"Support for geocoding operations.\"\"\"\ndef __init__(self, item: QtLocation.QGeoCodingManager):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.item.locale())\n</code></pre>"},{"location":"qt_modules/location/GeoCodingManager.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265372560[\"location.GeoCodingManager\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103265372560\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/location/GeoManeuver.html","title":"GeoManeuver","text":"<p>Qt Base Class: QGeoManeuver</p> <p>Signature: <code>QGeoManeuver(self) -&gt; None QGeoManeuver(self, other: PySide6.QtLocation.QGeoManeuver) -&gt; None</code></p>"},{"location":"qt_modules/location/GeoManeuver.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QGeoManeuver</code></p> <p>Represents info relevant to the point at which two QGeoRouteSegments meet.</p> Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>class GeoManeuver(QtLocation.QGeoManeuver):\n\"\"\"Represents info relevant to the point at which two QGeoRouteSegments meet.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef __str__(self):\nreturn self.instructionText()\ndef __setitem__(self, index: str, val):\nattrs = self.extendedAttributes()\nattrs[index] = val\nself.setExtendedAttributes(attrs)\ndef __getitem__(self, index: str):\nattr = self.extendedAttributes()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\ndef get_position(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.position())\ndef get_waypoint(self) -&gt; positioning.GeoCoordinate | None:\nwp = self.waypoint()\nreturn positioning.GeoCoordinate(wp) if wp.isValid() else None\ndef set_direction(\nself,\ndirection: InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection,\n):\n\"\"\"Set the direction.\n        Args:\n            direction: Direction\n        \"\"\"\nself.setDirection(INSTRUCTION_DIRECTION.get_enum_value(direction))\ndef get_direction(self) -&gt; InstructionDirectionStr:\n\"\"\"Return current direction.\n        Returns:\n            Direction\n        \"\"\"\nreturn INSTRUCTION_DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"qt_modules/location/GeoManeuver.html#prettyqt.location.geomaneuver.GeoManeuver.get_direction","title":"<code>get_direction() -&gt; InstructionDirectionStr</code>","text":"<p>Return current direction.</p> Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def get_direction(self) -&gt; InstructionDirectionStr:\n\"\"\"Return current direction.\n    Returns:\n        Direction\n    \"\"\"\nreturn INSTRUCTION_DIRECTION.inverse[self.direction()]\n</code></pre>"},{"location":"qt_modules/location/GeoManeuver.html#prettyqt.location.geomaneuver.GeoManeuver.set_direction","title":"<code>set_direction(direction: InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection)</code>","text":"<p>Set the direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection</code> <p>Direction</p> required Source code in <code>prettyqt\\location\\geomaneuver.py</code> <pre><code>def set_direction(\nself,\ndirection: InstructionDirectionStr | QtLocation.QGeoManeuver.InstructionDirection,\n):\n\"\"\"Set the direction.\n    Args:\n        direction: Direction\n    \"\"\"\nself.setDirection(INSTRUCTION_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"qt_modules/location/GeoManeuver.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265356240[\"location.GeoManeuver\"]\n  2103265264080[\"QtLocation.QGeoManeuver\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265264080 --&gt; 2103265356240\n  2103206874128 --&gt; 2103265264080\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/GeoRoute.html","title":"GeoRoute","text":"<p>Qt Base Class: QGeoRoute</p> <p>Signature: <code>QGeoRoute(self) -&gt; None QGeoRoute(self, other: PySide6.QtLocation.QGeoRoute) -&gt; None</code></p>"},{"location":"qt_modules/location/GeoRoute.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GeoRouteMixin</code>, <code>location.QGeoRoute</code></p> <p>Represents a route between two points.</p> Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>class GeoRoute(GeoRouteMixin, location.QGeoRoute):\n\"\"\"Represents a route between two points.\"\"\"\n</code></pre>"},{"location":"qt_modules/location/GeoRoute.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265361040[\"location.GeoRoute\"]\n  2103265350480[\"location.GeoRouteMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265280400[\"QtLocation.QGeoRoute\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265350480 --&gt; 2103265361040\n  140736120080256 --&gt; 2103265350480\n  2103265280400 --&gt; 2103265361040\n  2103206874128 --&gt; 2103265280400\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/GeoRouteMixin.html","title":"GeoRouteMixin","text":""},{"location":"qt_modules/location/GeoRouteMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\location\\georoute.py</code> <pre><code>class GeoRouteMixin:\ndef __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.extendedAttributes()\nattrs[index] = val\nself.setExtendedAttributes(attrs)\ndef __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.extendedAttributes()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\ndef __abs__(self) -&gt; float:\nreturn self.distance()\ndef get_bounds(self) -&gt; positioning.GeoRectangle:\nreturn positioning.GeoRectangle(self.bounds())\ndef get_first_route_segment(self) -&gt; location.GeoRouteSegment:\nreturn location.GeoRouteSegment(self.firstRouteSegment())\ndef get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(i) for i in self.path()]\n</code></pre> Name Children Inherits GeoRouteprettyqt.location.georoute <ul><li>GeoRouteMixin</li><li>QGeoRoute</li></ul>"},{"location":"qt_modules/location/GeoRouteMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265350480[\"location.GeoRouteMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103265350480</code></pre>"},{"location":"qt_modules/location/GeoRouteRequest.html","title":"GeoRouteRequest","text":"<p>Qt Base Class: QGeoRouteRequest</p> <p>Signature: <code>QGeoRouteRequest(self, origin: PySide6.QtPositioning.QGeoCoordinate, destination: PySide6.QtPositioning.QGeoCoordinate) -&gt; None QGeoRouteRequest(self, other: PySide6.QtLocation.QGeoRouteRequest) -&gt; None QGeoRouteRequest(self, waypoints: Sequence[PySide6.QtPositioning.QGeoCoordinate] = Default(QList&lt;QGeoCoordinate&gt;)) -&gt; None</code></p>"},{"location":"qt_modules/location/GeoRouteRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QGeoRouteRequest</code></p> <p>Represents the params and restrictions defining a routing information request.</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>class GeoRouteRequest(QtLocation.QGeoRouteRequest):\n\"\"\"Represents the params and restrictions defining a routing information request.\"\"\"\ndef get_waypoints(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(wp) for wp in self.waypoints()]\ndef get_exclude_areas(self) -&gt; list[positioning.GeoRectangle]:\nreturn [positioning.GeoRectangle(wp) for wp in self.excludeAreas()]\ndef get_departure_time(self) -&gt; core.DateTime:\nreturn core.DateTime(self.departureTime())\ndef set_feature_weight(\nself,\nfeature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType,\nweight: FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight,\n):\n\"\"\"Set the feature weight.\n        Args:\n            feature: Feature type\n            weight: Feature weight\n        \"\"\"\nself.setFeatureWeight(\nFEATURE_TYPES.get_enum_value(feature), FEATURE_WEIGHTS.get_enum_value(weight)\n)\ndef get_feature_weight(\nself, feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType\n) -&gt; FeatureWeightStr:\n\"\"\"Return current feature weight.\n        Returns:\n            Feature weight\n        \"\"\"\nreturn FEATURE_WEIGHTS.inverse[\nself.featureWeight(FEATURE_TYPES.get_enum_value(feature))\n]\ndef set_route_optimization(\nself,\noptimization: RouteOptimizationStr\n| QtLocation.QGeoRouteRequest.RouteOptimization,\n):\n\"\"\"Set the route optimization.\n        Args:\n            optimization: Route optimization\n        \"\"\"\nself.setRouteOptimization(ROUTE_OPTIMIZATION.get_enum_value(optimization))\ndef get_route_optimization(self) -&gt; RouteOptimizationStr:\n\"\"\"Return current route optimization.\n        Returns:\n            Route optimization\n        \"\"\"\nreturn ROUTE_OPTIMIZATION.inverse[self.routeOptimization()]\ndef get_travel_modes(self) -&gt; list[TravelModeStr]:\nreturn TRAVEL_MODE.get_list(self.travelModes())\ndef set_travel_modes(self, *mode: TravelModeStr):\nflags = TRAVEL_MODE.merge_flags(mode)\nself.setTravelModes(flags)\ndef get_feature_types(self) -&gt; list[FeatureTypeStr]:\nreturn [k for k, v in FEATURE_TYPES.items() for t in self.featureTypes() if v &amp; t]\n</code></pre>"},{"location":"qt_modules/location/GeoRouteRequest.html#prettyqt.location.georouterequest.GeoRouteRequest.get_feature_weight","title":"<code>get_feature_weight(feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType) -&gt; FeatureWeightStr</code>","text":"<p>Return current feature weight.</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_feature_weight(\nself, feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType\n) -&gt; FeatureWeightStr:\n\"\"\"Return current feature weight.\n    Returns:\n        Feature weight\n    \"\"\"\nreturn FEATURE_WEIGHTS.inverse[\nself.featureWeight(FEATURE_TYPES.get_enum_value(feature))\n]\n</code></pre>"},{"location":"qt_modules/location/GeoRouteRequest.html#prettyqt.location.georouterequest.GeoRouteRequest.get_route_optimization","title":"<code>get_route_optimization() -&gt; RouteOptimizationStr</code>","text":"<p>Return current route optimization.</p> Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def get_route_optimization(self) -&gt; RouteOptimizationStr:\n\"\"\"Return current route optimization.\n    Returns:\n        Route optimization\n    \"\"\"\nreturn ROUTE_OPTIMIZATION.inverse[self.routeOptimization()]\n</code></pre>"},{"location":"qt_modules/location/GeoRouteRequest.html#prettyqt.location.georouterequest.GeoRouteRequest.set_feature_weight","title":"<code>set_feature_weight(feature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType, weight: FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight)</code>","text":"<p>Set the feature weight.</p> <p>Parameters:</p> Name Type Description Default <code>feature</code> <code>FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType</code> <p>Feature type</p> required <code>weight</code> <code>FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight</code> <p>Feature weight</p> required Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_feature_weight(\nself,\nfeature: FeatureTypeStr | QtLocation.QGeoRouteRequest.FeatureType,\nweight: FeatureWeightStr | QtLocation.QGeoRouteRequest.FeatureWeight,\n):\n\"\"\"Set the feature weight.\n    Args:\n        feature: Feature type\n        weight: Feature weight\n    \"\"\"\nself.setFeatureWeight(\nFEATURE_TYPES.get_enum_value(feature), FEATURE_WEIGHTS.get_enum_value(weight)\n)\n</code></pre>"},{"location":"qt_modules/location/GeoRouteRequest.html#prettyqt.location.georouterequest.GeoRouteRequest.set_route_optimization","title":"<code>set_route_optimization(optimization: RouteOptimizationStr | QtLocation.QGeoRouteRequest.RouteOptimization)</code>","text":"<p>Set the route optimization.</p> <p>Parameters:</p> Name Type Description Default <code>optimization</code> <code>RouteOptimizationStr | QtLocation.QGeoRouteRequest.RouteOptimization</code> <p>Route optimization</p> required Source code in <code>prettyqt\\location\\georouterequest.py</code> <pre><code>def set_route_optimization(\nself,\noptimization: RouteOptimizationStr\n| QtLocation.QGeoRouteRequest.RouteOptimization,\n):\n\"\"\"Set the route optimization.\n    Args:\n        optimization: Route optimization\n    \"\"\"\nself.setRouteOptimization(ROUTE_OPTIMIZATION.get_enum_value(optimization))\n</code></pre>"},{"location":"qt_modules/location/GeoRouteRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265341840[\"location.GeoRouteRequest\"]\n  2103265222800[\"QtLocation.QGeoRouteRequest\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265222800 --&gt; 2103265341840\n  2103206874128 --&gt; 2103265222800\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/GeoRouteSegment.html","title":"GeoRouteSegment","text":"<p>Qt Base Class: QGeoRouteSegment</p> <p>Signature: <code>QGeoRouteSegment(self) -&gt; None QGeoRouteSegment(self, other: PySide6.QtLocation.QGeoRouteSegment) -&gt; None</code></p>"},{"location":"qt_modules/location/GeoRouteSegment.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QGeoRouteSegment</code></p> <p>Represents a segment of a route.</p> Source code in <code>prettyqt\\location\\georoutesegment.py</code> <pre><code>class GeoRouteSegment(location.QGeoRouteSegment):\n\"\"\"Represents a segment of a route.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef __abs__(self) -&gt; float:\nreturn self.distance()\ndef get_maneuver(self) -&gt; location.GeoManeuver:\nreturn location.GeoManeuver(self.maneuver())\ndef get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(i) for i in self.path()]\n</code></pre>"},{"location":"qt_modules/location/GeoRouteSegment.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265352400[\"location.GeoRouteSegment\"]\n  2103265227600[\"QtLocation.QGeoRouteSegment\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265227600 --&gt; 2103265352400\n  2103206874128 --&gt; 2103265227600\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/GeoRoutingManager.html","title":"GeoRoutingManager","text":""},{"location":"qt_modules/location/GeoRoutingManager.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>Support for geographic routing operations.</p> Source code in <code>prettyqt\\location\\georoutingmanager.py</code> <pre><code>class GeoRoutingManager(core.ObjectMixin):\n\"\"\"Support for geographic routing operations.\"\"\"\ndef __init__(self, item: location.QGeoRoutingManager):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.item.locale())\ndef get_supported_feature_types(\nself,\n) -&gt; list[location.georouterequest.FeatureTypeStr]:\nreturn location.georouterequest.FEATURE_TYPES.get_list(\nself.item.supportedFeatureTypes()\n)\ndef get_supported_feature_weights(\nself,\n) -&gt; list[location.georouterequest.FeatureWeightStr]:\nreturn location.georouterequest.FEATURE_WEIGHTS.get_list(\nself.item.supportedFeatureWeights()\n)\ndef get_supported_maneuver_details(\nself,\n) -&gt; list[location.georouterequest.ManeuverDetailStr]:\nreturn location.georouterequest.MANEUVER_DETAIL.get_list(\nself.item.supportedManeuverDetails()\n)\ndef get_supported_route_optimizations(\nself,\n) -&gt; list[location.georouterequest.RouteOptimizationStr]:\nreturn location.georouterequest.ROUTE_OPTIMIZATION.get_list(\nself.item.supportedRouteOptimizations()\n)\ndef get_supported_segment_details(\nself,\n) -&gt; list[location.georouterequest.SegmentDetailStr]:\nreturn location.georouterequest.SEGMENT_DETAIL.get_list(\nself.item.supportedSegmentDetails()\n)\ndef get_supported_travel_modes(self) -&gt; list[location.georouterequest.TravelModeStr]:\nreturn location.georouterequest.TRAVEL_MODE.get_list(\nself.item.supportedTravelModes()\n)\n</code></pre>"},{"location":"qt_modules/location/GeoRoutingManager.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265374480[\"location.GeoRoutingManager\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103265374480\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/location/GeoServiceProvider.html","title":"GeoServiceProvider","text":"<p>Qt Base Class: QGeoServiceProvider</p> <p>Signature: <code>QGeoServiceProvider(self, providerName: str, parameters: Dict[str, Any] = Default(QVariantMap), allowExperimental: bool = False) -&gt; None</code></p>"},{"location":"qt_modules/location/GeoServiceProvider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>location.QGeoServiceProvider</code></p> <p>Aggregates access to services which provide geographical information.</p> Source code in <code>prettyqt\\location\\geoserviceprovider.py</code> <pre><code>class GeoServiceProvider(core.ObjectMixin, location.QGeoServiceProvider):\n\"\"\"Aggregates access to services which provide geographical information.\"\"\"\ndef get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\ndef get_geocoding_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.geocodingError()]\ndef get_geocoding_features(self) -&gt; list[GeocodingFeatureStr]:\nreturn GEOCODING_FEATURES.get_list(self.geocodingFeatures())\ndef get_mapping_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.mappingError()]\ndef get_mapping_features(self) -&gt; list[MappingFeatureStr]:\nreturn MAPPING_FEATURES.get_list(self.mappingFeatures())\ndef get_navigation_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.navigationError()]\ndef get_navigation_features(self) -&gt; list[NavigationFeatureStr]:\nreturn NAVIGATION_FEATURES.get_list(self.navigationFeatures())\ndef get_places_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.placesError()]\ndef get_places_features(self) -&gt; list[PlaceFeatureStr]:\nreturn PLACES_FEATURES.get_list(self.placesFeatures())\ndef get_routing_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.routingError()]\ndef get_routing_features(self) -&gt; list[RoutingFeatureStr]:\nreturn ROUTING_FEATURES.get_list(self.routingFeatures())\ndef get_geocoding_manager(self) -&gt; location.GeoCodingManager:\nreturn location.GeoCodingManager(self.geocodingManager())\ndef get_routing_manager(self) -&gt; location.GeoRoutingManager:\nreturn location.GeoRoutingManager(self.routingManager())\ndef get_place_manager(self) -&gt; location.PlaceManager:\nreturn location.PlaceManager(self.placeManager())\n</code></pre>"},{"location":"qt_modules/location/GeoServiceProvider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265369680[\"location.GeoServiceProvider\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265295760[\"QtLocation.QGeoServiceProvider\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103265369680\n  140736120080256 --&gt; 2103255067472\n  2103265295760 --&gt; 2103265369680\n  2103254677056 --&gt; 2103265295760\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/GeoServiceProvider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/Place.html","title":"Place","text":"<p>Qt Base Class: QPlace</p> <p>Signature: <code>QPlace(self) -&gt; None QPlace(self, other: PySide6.QtLocation.QPlace) -&gt; None</code></p>"},{"location":"qt_modules/location/Place.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QPlace</code></p> <p>Represents a set of data about a place.</p> Source code in <code>prettyqt\\location\\place.py</code> <pre><code>class Place(location.QPlace):\n\"\"\"Represents a set of data about a place.\"\"\"\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __setitem__(self, index: str, val: location.QPlaceAttribute | None):\nif val is None:\nval = location.PlaceAttribute()\nself.setExtendedAttribute(index, val)\ndef __getitem__(self, index: str) -&gt; location.PlaceAttribute:\nattr = self.extendedAttribute(index)\nreturn location.PlaceAttribute(attr)\ndef get_categories(self) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.categories()]\ndef get_contact_details(self, contact_type: str) -&gt; list[location.PlaceContactDetail]:\nreturn [location.PlaceContactDetail(i) for i in self.contactDetails(contact_type)]\ndef set_content(self, typ: str, value: dict[int, location.QPlaceContent]):\nself.setContent(location.placecontent.TYPE.get_enum_value(typ), value)\ndef get_content(self, typ: str) -&gt; dict[int, location.QPlaceContent]:\nreturn self.content(location.placecontent.TYPE.get_enum_value(typ))\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef get_location(self) -&gt; positioning.GeoLocation:\nreturn positioning.GeoLocation(self.location())\ndef get_primary_website(self) -&gt; core.Url:\nreturn core.Url(self.primaryWebsite())\ndef get_ratings(self) -&gt; location.PlaceRatings:\nreturn location.PlaceRatings(self.ratings())\ndef get_supplier(self) -&gt; location.PlaceSupplier:\nreturn location.PlaceSupplier(self.supplier())\ndef get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return visibility.\n        Returns:\n            Visibility\n        \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"qt_modules/location/Place.html#prettyqt.location.place.Place.get_visibility","title":"<code>get_visibility() -&gt; location.VisibilityStr</code>","text":"<p>Return visibility.</p> Source code in <code>prettyqt\\location\\place.py</code> <pre><code>def get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return visibility.\n    Returns:\n        Visibility\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"qt_modules/location/Place.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265364880[\"location.Place\"]\n  2103265254480[\"QtLocation.QPlace\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265254480 --&gt; 2103265364880\n  2103206874128 --&gt; 2103265254480\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceAttribute.html","title":"PlaceAttribute","text":"<p>Qt Base Class: QPlaceAttribute</p> <p>Signature: <code>QPlaceAttribute(self) -&gt; None QPlaceAttribute(self, other: PySide6.QtLocation.QPlaceAttribute) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceAttribute.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QPlaceAttribute</code></p> <p>Represents generic attribute information about a place.</p> Source code in <code>prettyqt\\location\\placeattribute.py</code> <pre><code>class PlaceAttribute(QtLocation.QPlaceAttribute):\n\"\"\"Represents generic attribute information about a place.\"\"\"\ndef __init__(\nself,\nother_or_label: None | str | QtLocation.QPlaceAttribute = None,\nvalue: str | None = None,\n):\nif isinstance(other_or_label, QtLocation.QPlaceAttribute):\nsuper().__init__(other_or_label)\nelse:\nsuper().__init__()\nself.setLabel(other_or_label or \"\")\nself.setText(value or \"\")\ndef __repr__(self):\nreturn get_repr(self, self.label(), self.text())\ndef __str__(self):\nreturn f\"{self.label()}: {self.text()}\"\ndef __bool__(self):\nreturn not self.isEmpty()\n</code></pre>"},{"location":"qt_modules/location/PlaceAttribute.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265322640[\"location.PlaceAttribute\"]\n  2103265235280[\"QtLocation.QPlaceAttribute\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265235280 --&gt; 2103265322640\n  2103206874128 --&gt; 2103265235280\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceCategory.html","title":"PlaceCategory","text":"<p>Qt Base Class: QPlaceCategory</p> <p>Signature: <code>QPlaceCategory(self) -&gt; None QPlaceCategory(self, other: PySide6.QtLocation.QPlaceCategory) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceCategory.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QPlaceCategory</code></p> <p>Represents a category that a QPlace can be associated with.</p> Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>class PlaceCategory(location.QPlaceCategory):\n\"\"\"Represents a category that a QPlace can be associated with.\"\"\"\ndef __str__(self):\nreturn self.name()\ndef __bool__(self):\nreturn not self.isEmpty()\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return the visibility of the place.\n        Returns:\n            Visibility\n        \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"qt_modules/location/PlaceCategory.html#prettyqt.location.placecategory.PlaceCategory.get_visibility","title":"<code>get_visibility() -&gt; location.VisibilityStr</code>","text":"<p>Return the visibility of the place.</p> Source code in <code>prettyqt\\location\\placecategory.py</code> <pre><code>def get_visibility(self) -&gt; location.VisibilityStr:\n\"\"\"Return the visibility of the place.\n    Returns:\n        Visibility\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibility()]\n</code></pre>"},{"location":"qt_modules/location/PlaceCategory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265325520[\"location.PlaceCategory\"]\n  2103265253520[\"QtLocation.QPlaceCategory\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265253520 --&gt; 2103265325520\n  2103206874128 --&gt; 2103265253520\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceContactDetail.html","title":"PlaceContactDetail","text":"<p>Qt Base Class: QPlaceContactDetail</p> <p>Signature: <code>QPlaceContactDetail(self) -&gt; None QPlaceContactDetail(self, other: PySide6.QtLocation.QPlaceContactDetail) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceContactDetail.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QPlaceContactDetail</code></p> <p>Represents a contact detail such as a phone number or website url.</p> Source code in <code>prettyqt\\location\\placecontactdetail.py</code> <pre><code>class PlaceContactDetail(QtLocation.QPlaceContactDetail):\n\"\"\"Represents a contact detail such as a phone number or website url.\"\"\"\ndef __init__(\nself,\nother_or_label: None | str | QtLocation.QPlaceAttribute = None,\nvalue: str | None = None,\n):\nif isinstance(other_or_label, QtLocation.QPlaceAttribute):\nsuper().__init__(other_or_label)\nelse:\nsuper().__init__()\nself.setLabel(other_or_label or \"\")\nself.setValue(value or \"\")\ndef __repr__(self):\nreturn get_repr(self, self.label(), self.value())\ndef __str__(self):\nreturn f\"{self.label()}: {self.value()}\"\n</code></pre>"},{"location":"qt_modules/location/PlaceContactDetail.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265324560[\"location.PlaceContactDetail\"]\n  2103265246800[\"QtLocation.QPlaceContactDetail\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265246800 --&gt; 2103265324560\n  2103206874128 --&gt; 2103265246800\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceContent.html","title":"PlaceContent","text":"<p>Qt Base Class: QPlaceContent</p> <p>Signature: <code>QPlaceContent(self, other: Union[PySide6.QtLocation.QPlaceContent, PySide6.QtLocation.QPlaceContent.Type]) -&gt; None QPlaceContent(self, type: PySide6.QtLocation.QPlaceContent.Type = Instance(PySide6.QtLocation.QPlaceContent.Type.NoType)) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceContent.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PlaceContentMixin</code>, <code>location.QPlaceContent</code></p> <p>Holds content about places.</p> Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>class PlaceContent(PlaceContentMixin, location.QPlaceContent):\n\"\"\"Holds content about places.\"\"\"\n</code></pre>"},{"location":"qt_modules/location/PlaceContent.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265344720[\"location.PlaceContent\"]\n  2103265343760[\"location.PlaceContentMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265242000[\"QtLocation.QPlaceContent\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265343760 --&gt; 2103265344720\n  140736120080256 --&gt; 2103265343760\n  2103265242000 --&gt; 2103265344720\n  2103206874128 --&gt; 2103265242000\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceContentMixin.html","title":"PlaceContentMixin","text":""},{"location":"qt_modules/location/PlaceContentMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>class PlaceContentMixin:\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return the visibility of the place.\n        Returns:\n            Place type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\ndef get_user(self) -&gt; location.PlaceUser:\nreturn location.PlaceUser(self.user())\ndef get_supplier(self) -&gt; location.PlaceSupplier:\nreturn location.PlaceSupplier(self.supplier())\n</code></pre> Name Children Inherits PlaceContentprettyqt.location.placecontent <ul><li>PlaceContentMixin</li><li>QPlaceContent</li></ul>"},{"location":"qt_modules/location/PlaceContentMixin.html#prettyqt.location.placecontent.PlaceContentMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return the visibility of the place.</p> Source code in <code>prettyqt\\location\\placecontent.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return the visibility of the place.\n    Returns:\n        Place type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/location/PlaceContentMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265343760[\"location.PlaceContentMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103265343760</code></pre>"},{"location":"qt_modules/location/PlaceContentReply.html","title":"PlaceContentReply","text":"<p>Qt Base Class: QPlaceContentReply</p> <p>Signature: <code>QPlaceContentReply(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceContentReply.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceReplyMixin</code>, <code>location.QPlaceContentReply</code></p> <p>Manages a content retrieval operation started by an instance of QPlaceManager.</p> Source code in <code>prettyqt\\location\\placecontentreply.py</code> <pre><code>class PlaceContentReply(location.PlaceReplyMixin, location.QPlaceContentReply):\n\"\"\"Manages a content retrieval operation started by an instance of QPlaceManager.\"\"\"\ndef __len__(self):\nreturn self.totalCount()\n@classmethod\ndef clone_from(cls, obj: location.QPlaceContentReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setContent(obj.content())\nreply.setTotalCount(obj.totalCount())\nrequest = location.PlaceContentRequest(obj.nextPageRequest())\nreply.setNextPageRequest(request)\nrequest = location.PlaceContentRequest(obj.previousPageRequest())\nreply.setPreviousPageRequest(request)\nrequest = location.PlaceContentRequest(obj.request())\nreply.setRequest(request)\nreturn reply\ndef get_next_page_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.nextPageRequest())\ndef get_previous_page_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.previousPageRequest())\ndef get_request(self) -&gt; location.PlaceContentRequest:\nreturn location.PlaceContentRequest(self.request())\n</code></pre>"},{"location":"qt_modules/location/PlaceContentReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265353360[\"location.PlaceContentReply\"]\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265305360[\"QtLocation.QPlaceContentReply\"]\n  2103265282320[\"QtLocation.QPlaceReply\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265368720 --&gt; 2103265353360\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472\n  2103265305360 --&gt; 2103265353360\n  2103265282320 --&gt; 2103265305360\n  2103254677056 --&gt; 2103265282320\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceContentReply.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceContentRequest.html","title":"PlaceContentRequest","text":"<p>Qt Base Class: QPlaceContentRequest</p> <p>Signature: <code>QPlaceContentRequest(self) -&gt; None QPlaceContentRequest(self, other: PySide6.QtLocation.QPlaceContentRequest) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceContentRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QPlaceContentRequest</code></p> <p>Represents the parameters of a content request.</p> Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>class PlaceContentRequest(location.QPlaceContentRequest):\n\"\"\"Represents the parameters of a content request.\"\"\"\ndef set_content_type(\nself, typ: location.placecontent.TypeStr | location.PlaceContent.Type\n):\n\"\"\"Set the content type.\n        Args:\n            typ: Relevance type\n        \"\"\"\nself.setContentType(location.placecontent.TYPE.get_enum_value(typ))\ndef get_content_type(self) -&gt; location.placecontent.TypeStr:\n\"\"\"Return current content type.\n        Returns:\n            Relevance type\n        \"\"\"\nreturn location.placecontent.TYPE.inverse[self.contentType()]\n</code></pre>"},{"location":"qt_modules/location/PlaceContentRequest.html#prettyqt.location.placecontentrequest.PlaceContentRequest.get_content_type","title":"<code>get_content_type() -&gt; location.placecontent.TypeStr</code>","text":"<p>Return current content type.</p> Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>def get_content_type(self) -&gt; location.placecontent.TypeStr:\n\"\"\"Return current content type.\n    Returns:\n        Relevance type\n    \"\"\"\nreturn location.placecontent.TYPE.inverse[self.contentType()]\n</code></pre>"},{"location":"qt_modules/location/PlaceContentRequest.html#prettyqt.location.placecontentrequest.PlaceContentRequest.set_content_type","title":"<code>set_content_type(typ: location.placecontent.TypeStr | location.PlaceContent.Type)</code>","text":"<p>Set the content type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>location.placecontent.TypeStr | location.PlaceContent.Type</code> <p>Relevance type</p> required Source code in <code>prettyqt\\location\\placecontentrequest.py</code> <pre><code>def set_content_type(\nself, typ: location.placecontent.TypeStr | location.PlaceContent.Type\n):\n\"\"\"Set the content type.\n    Args:\n        typ: Relevance type\n    \"\"\"\nself.setContentType(location.placecontent.TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/location/PlaceContentRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265367760[\"location.PlaceContentRequest\"]\n  2103265234320[\"QtLocation.QPlaceContentRequest\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265234320 --&gt; 2103265367760\n  2103206874128 --&gt; 2103265234320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceDetailsReply.html","title":"PlaceDetailsReply","text":"<p>Qt Base Class: QPlaceDetailsReply</p> <p>Signature: <code>QPlaceDetailsReply(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceDetailsReply.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceReplyMixin</code>, <code>location.QPlaceDetailsReply</code></p> <p>Manages a place details fetch operation started by an instance of QPlaceManager.</p> Source code in <code>prettyqt\\location\\placedetailsreply.py</code> <pre><code>class PlaceDetailsReply(location.PlaceReplyMixin, location.QPlaceDetailsReply):\n\"\"\"Manages a place details fetch operation started by an instance of QPlaceManager.\"\"\"\n@classmethod\ndef clone_from(cls, obj: location.QPlaceDetailsReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setPlace(location.Place(obj.place()))\nreturn reply\ndef get_place(self) -&gt; location.Place:\nreturn location.Place(self.place())\n</code></pre>"},{"location":"qt_modules/location/PlaceDetailsReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265373520[\"location.PlaceDetailsReply\"]\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265293840[\"QtLocation.QPlaceDetailsReply\"]\n  2103265282320[\"QtLocation.QPlaceReply\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265368720 --&gt; 2103265373520\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472\n  2103265293840 --&gt; 2103265373520\n  2103265282320 --&gt; 2103265293840\n  2103254677056 --&gt; 2103265282320\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceDetailsReply.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceIcon.html","title":"PlaceIcon","text":"<p>Qt Base Class: QPlaceIcon</p> <p>Signature: <code>QPlaceIcon(self) -&gt; None QPlaceIcon(self, other: PySide6.QtLocation.QPlaceIcon) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceIcon.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QPlaceIcon</code></p> <p>Represents an icon.</p> Source code in <code>prettyqt\\location\\placeicon.py</code> <pre><code>class PlaceIcon(QtLocation.QPlaceIcon):\n\"\"\"Represents an icon.\"\"\"\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.parameters()\nattrs[index] = val\nself.setParameters(attrs)\ndef __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.parameters()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\n# def get_manager(self) -&gt; location.PlaceManager:\n#     return location.PlaceManager(self.manager())\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"qt_modules/location/PlaceIcon.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265319760[\"location.PlaceIcon\"]\n  2103265275600[\"QtLocation.QPlaceIcon\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265275600 --&gt; 2103265319760\n  2103206874128 --&gt; 2103265275600\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceIdReply.html","title":"PlaceIdReply","text":"<p>Qt Base Class: QPlaceIdReply</p> <p>Signature: <code>QPlaceIdReply(self, operationType: PySide6.QtLocation.QPlaceIdReply.OperationType, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceIdReply.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceReplyMixin</code>, <code>location.QPlaceIdReply</code></p> <p>Manages saving and removal operations of places and categories.</p> Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>class PlaceIdReply(location.PlaceReplyMixin, location.QPlaceIdReply):\n\"\"\"Manages saving and removal operations of places and categories.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.operationType())\n@classmethod\ndef clone_from(cls, obj: location.QPlaceIdReply) -&gt; Self:\nreply = cls(obj.operationType(), obj.parent())\nreply.setId(obj.id())\nreturn reply\ndef get_operation_type(self) -&gt; OperationTypeStr:\n\"\"\"Get current operation_type.\n        Returns:\n            current operation_type\n        \"\"\"\nreturn OPERATION_TYPES.inverse[self.operationType()]\n</code></pre>"},{"location":"qt_modules/location/PlaceIdReply.html#prettyqt.location.placeidreply.PlaceIdReply.get_operation_type","title":"<code>get_operation_type() -&gt; OperationTypeStr</code>","text":"<p>Get current operation_type.</p> Source code in <code>prettyqt\\location\\placeidreply.py</code> <pre><code>def get_operation_type(self) -&gt; OperationTypeStr:\n\"\"\"Get current operation_type.\n    Returns:\n        current operation_type\n    \"\"\"\nreturn OPERATION_TYPES.inverse[self.operationType()]\n</code></pre>"},{"location":"qt_modules/location/PlaceIdReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265351440[\"location.PlaceIdReply\"]\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265286160[\"QtLocation.QPlaceIdReply\"]\n  2103265282320[\"QtLocation.QPlaceReply\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265368720 --&gt; 2103265351440\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472\n  2103265286160 --&gt; 2103265351440\n  2103265282320 --&gt; 2103265286160\n  2103254677056 --&gt; 2103265282320\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceIdReply.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceManager.html","title":"PlaceManager","text":"<p>Qt Base Class: QObject</p> <p>Signature: <code>QObject(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceManager.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.Object</code></p> <p>An interface allowing clients to access places stored in a particular backend.</p> Source code in <code>prettyqt\\location\\placemanager.py</code> <pre><code>class PlaceManager(core.Object):\n\"\"\"An interface allowing clients to access places stored in a particular backend.\"\"\"\non_finished = core.Signal(location.PlaceSearchReply)\ndef __init__(self, item: location.QPlaceManager):\nsuper().__init__()\nself.item = item\nself.finished.connect(self._on_finished)\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef _on_finished(self, reply: location.QPlaceSearchReply):\nreply = location.PlaceSearchReply.clone_from(reply)\nself.on_finished.emit(reply)\ndef get_category(self, cat_id: str) -&gt; location.PlaceCategory:\nreturn location.PlaceCategory(self.item.category(cat_id))\ndef get_child_categories(self, cat_id: str) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.item.childCategories(cat_id)]\ndef get_locales(self) -&gt; list[core.Locale]:\nreturn [core.Locale(i) for i in self.locales()]\ndef search_place(\nself,\nsearch_term: str,\ncoord: tuple[float, float] | positioning.QGeoCoordinate,\nradius: float | None = None,\nlimit: int | None = None,\nrelevance: location.placesearchrequest.RelevanceHintStr | None = None,\ncategories: list[str] | None = None,\n):\nrequest = location.PlaceSearchRequest()\nrequest.setSearchTerm(search_term)\nif radius is None:\nradius = -1\nif isinstance(coord, tuple):\ncoord = positioning.GeoCoordinate(*coord)\ncircle = positioning.GeoCircle(coord, radius)\nrequest.setSearchArea(circle)\nif limit is not None:\nrequest.setLimit(limit)\nif relevance is not None:\nrequest.set_relevance_hint(relevance)\nif categories is not None:\nself.setCategories(categories)\nreturn self.search(request)\n</code></pre>"},{"location":"qt_modules/location/PlaceManager.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265360080[\"location.PlaceManager\"]\n  2103255068432[\"core.Object\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255068432 --&gt; 2103265360080\n  2103255067472 --&gt; 2103255068432\n  140736120080256 --&gt; 2103255067472\n  2103254677056 --&gt; 2103255068432\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceManager.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceMatchReply.html","title":"PlaceMatchReply","text":"<p>Qt Base Class: QPlaceMatchReply</p> <p>Signature: <code>QPlaceMatchReply(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceMatchReply.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceReplyMixin</code>, <code>location.QPlaceMatchReply</code></p> <p>Manages a place matching operation started by an instance of QPlaceManager.</p> Source code in <code>prettyqt\\location\\placematchreply.py</code> <pre><code>class PlaceMatchReply(location.PlaceReplyMixin, location.QPlaceMatchReply):\n\"\"\"Manages a place matching operation started by an instance of QPlaceManager.\"\"\"\ndef __iter__(self) -&gt; Iterator[location.Place]:\nreturn iter(self.get_places())\ndef __getitem__(self, index: int) -&gt; location.Place:\nreturn self.get_places()[index]\ndef __len__(self):\nreturn len(self.get_places())\n@classmethod\ndef clone_from(cls, obj: location.QPlaceMatchReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setPlaces([location.Place(i) for i in obj.places()])\nrequest = location.PlaceMatchRequest(obj.request())\nreply.setRequest(request)\nreturn reply\ndef get_places(self) -&gt; list[location.Place]:\nreturn [location.Place(i) for i in self.places()]\ndef get_request(self) -&gt; location.PlaceMatchRequest:\nreturn location.PlaceMatchRequest(self.request())\n</code></pre>"},{"location":"qt_modules/location/PlaceMatchReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265371600[\"location.PlaceMatchReply\"]\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265285200[\"QtLocation.QPlaceMatchReply\"]\n  2103265282320[\"QtLocation.QPlaceReply\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265368720 --&gt; 2103265371600\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472\n  2103265285200 --&gt; 2103265371600\n  2103265282320 --&gt; 2103265285200\n  2103254677056 --&gt; 2103265282320\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceMatchReply.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceMatchRequest.html","title":"PlaceMatchRequest","text":"<p>Qt Base Class: QPlaceMatchRequest</p> <p>Signature: <code>QPlaceMatchRequest(self) -&gt; None QPlaceMatchRequest(self, other: PySide6.QtLocation.QPlaceMatchRequest) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceMatchRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QPlaceMatchRequest</code></p> Source code in <code>prettyqt\\location\\placematchrequest.py</code> <pre><code>class PlaceMatchRequest(location.QPlaceMatchRequest):\ndef __setitem__(self, index: str, val: datatypes.Variant):\nattrs = self.parameters()\nattrs[index] = val\nself.setParameters(attrs)\ndef __getitem__(self, index: str) -&gt; datatypes.Variant:\nattr = self.parameters()\nif index not in attr:\nraise KeyError(f\"Key {index!r} does not exist.\")\nreturn attr[index]\ndef get_places(self) -&gt; list[location.Place]:\nreturn [location.Place(i) for i in self.places()]\n</code></pre>"},{"location":"qt_modules/location/PlaceMatchRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265375440[\"location.PlaceMatchRequest\"]\n  2103265230480[\"QtLocation.QPlaceMatchRequest\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265230480 --&gt; 2103265375440\n  2103206874128 --&gt; 2103265230480\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceProposedSearchResult.html","title":"PlaceProposedSearchResult","text":"<p>Qt Base Class: QPlaceProposedSearchResult</p> <p>Signature: <code>QPlaceProposedSearchResult(self) -&gt; None QPlaceProposedSearchResult(self, other: PySide6.QtLocation.QPlaceSearchResult) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceProposedSearchResult.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceSearchResultMixin</code>, <code>location.QPlaceProposedSearchResult</code></p> <p>Represents a search result containing a proposed search.</p> Source code in <code>prettyqt\\location\\placeproposedsearchresult.py</code> <pre><code>class PlaceProposedSearchResult(\nlocation.PlaceSearchResultMixin, location.QPlaceProposedSearchResult\n):\n\"\"\"Represents a search result containing a proposed search.\"\"\"\n</code></pre>"},{"location":"qt_modules/location/PlaceProposedSearchResult.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265359120[\"location.PlaceProposedSearchResult\"]\n  2103265370640[\"location.PlaceSearchResultMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265224720[\"QtLocation.QPlaceProposedSearchResult\"]\n  2103265250640[\"QtLocation.QPlaceSearchResult\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265370640 --&gt; 2103265359120\n  140736120080256 --&gt; 2103265370640\n  2103265224720 --&gt; 2103265359120\n  2103265250640 --&gt; 2103265224720\n  2103206874128 --&gt; 2103265250640\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceRatings.html","title":"PlaceRatings","text":"<p>Qt Base Class: QPlaceRatings</p> <p>Signature: <code>QPlaceRatings(self) -&gt; None QPlaceRatings(self, other: PySide6.QtLocation.QPlaceRatings) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceRatings.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QPlaceRatings</code></p> <p>Holds rating information about a place.</p> Source code in <code>prettyqt\\location\\placeratings.py</code> <pre><code>class PlaceRatings(QtLocation.QPlaceRatings):\n\"\"\"Holds rating information about a place.\"\"\"\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __float__(self):\nreturn self.average()\n</code></pre>"},{"location":"qt_modules/location/PlaceRatings.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265323600[\"location.PlaceRatings\"]\n  2103265233360[\"QtLocation.QPlaceRatings\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265233360 --&gt; 2103265323600\n  2103206874128 --&gt; 2103265233360\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceReply.html","title":"PlaceReply","text":"<p>Qt Base Class: QPlaceReply</p> <p>Signature: <code>QPlaceReply(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceReply.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PlaceReplyMixin</code>, <code>QtLocation.QPlaceReply</code></p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>class PlaceReply(PlaceReplyMixin, QtLocation.QPlaceReply):\npass\n</code></pre>"},{"location":"qt_modules/location/PlaceReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265358160[\"location.PlaceReply\"]\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265282320[\"QtLocation.QPlaceReply\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265368720 --&gt; 2103265358160\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472\n  2103265282320 --&gt; 2103265358160\n  2103254677056 --&gt; 2103265282320\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceReply.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceReplyMixin.html","title":"PlaceReplyMixin","text":""},{"location":"qt_modules/location/PlaceReplyMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>class PlaceReplyMixin(core.ObjectMixin):\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            Error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return type.\n        Returns:\n            Type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre> Name Children Inherits PlaceReplyprettyqt.location.placereply <ul><li>PlaceReplyMixin</li><li>QPlaceReply</li></ul> PlaceSearchReplyprettyqt.location.placesearchreply <ul><li>PlaceReplyMixin</li><li>QPlaceSearchReply</li></ul> PlaceContentReplyprettyqt.location.placecontentreply <ul><li>PlaceReplyMixin</li><li>QPlaceContentReply</li></ul> PlaceDetailsReplyprettyqt.location.placedetailsreply <ul><li>PlaceReplyMixin</li><li>QPlaceDetailsReply</li></ul> PlaceMatchReplyprettyqt.location.placematchreply <ul><li>PlaceReplyMixin</li><li>QPlaceMatchReply</li></ul> PlaceIdReplyprettyqt.location.placeidreply <ul><li>PlaceReplyMixin</li><li>QPlaceIdReply</li></ul>"},{"location":"qt_modules/location/PlaceReplyMixin.html#prettyqt.location.placereply.PlaceReplyMixin.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        Error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/location/PlaceReplyMixin.html#prettyqt.location.placereply.PlaceReplyMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return type.</p> Source code in <code>prettyqt\\location\\placereply.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return type.\n    Returns:\n        Type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/location/PlaceReplyMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/location/PlaceResult.html","title":"PlaceResult","text":"<p>Qt Base Class: QPlaceResult</p> <p>Signature: <code>QPlaceResult(self) -&gt; None QPlaceResult(self, other: PySide6.QtLocation.QPlaceSearchResult) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceResult.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceSearchResultMixin</code>, <code>location.QPlaceResult</code></p> <p>Represents a search result containing a place.</p> Source code in <code>prettyqt\\location\\placeresult.py</code> <pre><code>class PlaceResult(location.PlaceSearchResultMixin, location.QPlaceResult):\n\"\"\"Represents a search result containing a place.\"\"\"\ndef get_place(self) -&gt; location.Place:\nreturn location.Place(self.place())\n</code></pre>"},{"location":"qt_modules/location/PlaceResult.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265366800[\"location.PlaceResult\"]\n  2103265370640[\"location.PlaceSearchResultMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265241040[\"QtLocation.QPlaceResult\"]\n  2103265250640[\"QtLocation.QPlaceSearchResult\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265370640 --&gt; 2103265366800\n  140736120080256 --&gt; 2103265370640\n  2103265241040 --&gt; 2103265366800\n  2103265250640 --&gt; 2103265241040\n  2103206874128 --&gt; 2103265250640\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceSearchReply.html","title":"PlaceSearchReply","text":"<p>Qt Base Class: QPlaceSearchReply</p> <p>Signature: <code>QPlaceSearchReply(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceSearchReply.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.PlaceReplyMixin</code>, <code>location.QPlaceSearchReply</code></p> <p>Manages a place search operation started by an instance of QPlaceManager.</p> Source code in <code>prettyqt\\location\\placesearchreply.py</code> <pre><code>class PlaceSearchReply(location.PlaceReplyMixin, location.QPlaceSearchReply):\n\"\"\"Manages a place search operation started by an instance of QPlaceManager.\"\"\"\ndef __iter__(self) -&gt; Iterator[location.PlaceSearchResult]:\nreturn iter(self.get_results())\ndef __getitem__(self, index: int) -&gt; location.PlaceSearchResult:\nreturn self.get_results()[index]\ndef __len__(self):\nreturn len(self.get_results())\n@classmethod\ndef clone_from(cls, obj: location.QPlaceSearchReply) -&gt; Self:\nreply = cls(obj.parent())\nreply.setResults([location.PlaceSearchResult(i) for i in obj.results()])\nrequest = location.PlaceSearchRequest(obj.nextPageRequest())\nreply.setNextPageRequest(request)\nrequest = location.PlaceSearchRequest(obj.previousPageRequest())\nreply.setPreviousPageRequest(request)\nrequest = location.PlaceSearchRequest(obj.request())\nreply.setRequest(request)\nreturn reply\ndef get_results(self) -&gt; list[location.PlaceSearchResult]:\nreturn [location.PlaceSearchResult(i) for i in self.results()]\ndef get_next_page_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.nextPageRequest())\ndef get_previous_page_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.previousPageRequest())\ndef get_request(self) -&gt; location.PlaceSearchRequest:\nreturn location.PlaceSearchRequest(self.request())\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265363920[\"location.PlaceSearchReply\"]\n  2103265368720[\"location.PlaceReplyMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265270800[\"QtLocation.QPlaceSearchReply\"]\n  2103265282320[\"QtLocation.QPlaceReply\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265368720 --&gt; 2103265363920\n  2103255067472 --&gt; 2103265368720\n  140736120080256 --&gt; 2103255067472\n  2103265270800 --&gt; 2103265363920\n  2103265282320 --&gt; 2103265270800\n  2103254677056 --&gt; 2103265282320\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceSearchReply.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/location/PlaceSearchRequest.html","title":"PlaceSearchRequest","text":"<p>Qt Base Class: QPlaceSearchRequest</p> <p>Signature: <code>QPlaceSearchRequest(self) -&gt; None QPlaceSearchRequest(self, other: PySide6.QtLocation.QPlaceSearchRequest) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceSearchRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QPlaceSearchRequest</code></p> <p>Represents the set of parameters for a search request.</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>class PlaceSearchRequest(location.QPlaceSearchRequest):\n\"\"\"Represents the set of parameters for a search request.\"\"\"\ndef get_visibility_scope(self) -&gt; location.VisibilityStr:\n\"\"\"Return the scope of the visibility.\n        Returns:\n            Visibility scope\n        \"\"\"\nreturn location.VISIBILITY.inverse[self.visibilityScope()]\ndef get_categories(self) -&gt; list[location.PlaceCategory]:\nreturn [location.PlaceCategory(i) for i in self.categories()]\ndef get_search_area(self) -&gt; positioning.GeoShape:\narea = self.searchArea()\nmatch area:\ncase positioning.QGeoCircle():\nreturn positioning.GeoCircle(area)\ncase positioning.QGeoPath():\nreturn positioning.GeoPath(area)\ncase positioning.QGeoPolygon():\nreturn positioning.GeoPolygon(area)\ncase positioning.QGeoRectangle():\nreturn positioning.GeoRectangle(area)\ncase _:\nreturn positioning.GeoShape(area)\ndef set_relevance_hint(\nself, hint: RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint\n):\n\"\"\"Set the relevance hint.\n        Args:\n            hint: Relevance hint\n        \"\"\"\nself.setRelevanceHint(RELEVANCE_HINT.get_enum_value(hint))\ndef get_relevance_hint(self) -&gt; RelevanceHintStr:\n\"\"\"Return current relevance hint.\n        Returns:\n            Relevance hint\n        \"\"\"\nreturn RELEVANCE_HINT.inverse[self.relevanceHint()]\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchRequest.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_relevance_hint","title":"<code>get_relevance_hint() -&gt; RelevanceHintStr</code>","text":"<p>Return current relevance hint.</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_relevance_hint(self) -&gt; RelevanceHintStr:\n\"\"\"Return current relevance hint.\n    Returns:\n        Relevance hint\n    \"\"\"\nreturn RELEVANCE_HINT.inverse[self.relevanceHint()]\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchRequest.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.get_visibility_scope","title":"<code>get_visibility_scope() -&gt; location.VisibilityStr</code>","text":"<p>Return the scope of the visibility.</p> Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def get_visibility_scope(self) -&gt; location.VisibilityStr:\n\"\"\"Return the scope of the visibility.\n    Returns:\n        Visibility scope\n    \"\"\"\nreturn location.VISIBILITY.inverse[self.visibilityScope()]\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchRequest.html#prettyqt.location.placesearchrequest.PlaceSearchRequest.set_relevance_hint","title":"<code>set_relevance_hint(hint: RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint)</code>","text":"<p>Set the relevance hint.</p> <p>Parameters:</p> Name Type Description Default <code>hint</code> <code>RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint</code> <p>Relevance hint</p> required Source code in <code>prettyqt\\location\\placesearchrequest.py</code> <pre><code>def set_relevance_hint(\nself, hint: RelevanceHintStr | location.QPlaceSearchRequest.RelevanceHint\n):\n\"\"\"Set the relevance hint.\n    Args:\n        hint: Relevance hint\n    \"\"\"\nself.setRelevanceHint(RELEVANCE_HINT.get_enum_value(hint))\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265365840[\"location.PlaceSearchRequest\"]\n  2103265236240[\"QtLocation.QPlaceSearchRequest\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265236240 --&gt; 2103265365840\n  2103206874128 --&gt; 2103265236240\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceSearchResult.html","title":"PlaceSearchResult","text":"<p>Qt Base Class: QPlaceSearchResult</p> <p>Signature: <code>QPlaceSearchResult(self) -&gt; None QPlaceSearchResult(self, other: PySide6.QtLocation.QPlaceSearchResult) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceSearchResult.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PlaceSearchResultMixin</code>, <code>location.QPlaceSearchResult</code></p> <p>The base class for search results.</p> Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>class PlaceSearchResult(PlaceSearchResultMixin, location.QPlaceSearchResult):\n\"\"\"The base class for search results.\"\"\"\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchResult.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265376400[\"location.PlaceSearchResult\"]\n  2103265370640[\"location.PlaceSearchResultMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265250640[\"QtLocation.QPlaceSearchResult\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265370640 --&gt; 2103265376400\n  140736120080256 --&gt; 2103265370640\n  2103265250640 --&gt; 2103265376400\n  2103206874128 --&gt; 2103265250640\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceSearchResultMixin.html","title":"PlaceSearchResultMixin","text":""},{"location":"qt_modules/location/PlaceSearchResultMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>class PlaceSearchResultMixin:\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef get_type(self) -&gt; TypeStr:\n\"\"\"Return result type.\n        Returns:\n            Result type\n        \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre> Name Children Inherits PlaceSearchResultprettyqt.location.placesearchresult <ul><li>PlaceSearchResultMixin</li><li>QPlaceSearchResult</li></ul> PlaceResultprettyqt.location.placeresult <ul><li>PlaceSearchResultMixin</li><li>QPlaceResult</li></ul> PlaceProposedSearchResultprettyqt.location.placeproposedsearchresult <ul><li>PlaceSearchResultMixin</li><li>QPlaceProposedSearchResult</li></ul>"},{"location":"qt_modules/location/PlaceSearchResultMixin.html#prettyqt.location.placesearchresult.PlaceSearchResultMixin.get_type","title":"<code>get_type() -&gt; TypeStr</code>","text":"<p>Return result type.</p> Source code in <code>prettyqt\\location\\placesearchresult.py</code> <pre><code>def get_type(self) -&gt; TypeStr:\n\"\"\"Return result type.\n    Returns:\n        Result type\n    \"\"\"\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/location/PlaceSearchResultMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265370640[\"location.PlaceSearchResultMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103265370640</code></pre>"},{"location":"qt_modules/location/PlaceSupplier.html","title":"PlaceSupplier","text":"<p>Qt Base Class: QPlaceSupplier</p> <p>Signature: <code>QPlaceSupplier(self) -&gt; None QPlaceSupplier(self, other: PySide6.QtLocation.QPlaceSupplier) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceSupplier.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>location.QPlaceSupplier</code></p> Source code in <code>prettyqt\\location\\placesupplier.py</code> <pre><code>class PlaceSupplier(location.QPlaceSupplier):\ndef __bool__(self):\nreturn not self.isEmpty()\ndef get_icon(self) -&gt; location.PlaceIcon | None:\nicon = self.icon()\nreturn None if icon.isEmpty() else location.PlaceIcon(icon)\ndef set_url(self, url: datatypes.UrlType):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"qt_modules/location/PlaceSupplier.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265342800[\"location.PlaceSupplier\"]\n  2103265249680[\"QtLocation.QPlaceSupplier\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265249680 --&gt; 2103265342800\n  2103206874128 --&gt; 2103265249680\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/PlaceUser.html","title":"PlaceUser","text":"<p>Qt Base Class: QPlaceUser</p> <p>Signature: <code>QPlaceUser(self) -&gt; None QPlaceUser(self, other: PySide6.QtLocation.QPlaceUser) -&gt; None</code></p>"},{"location":"qt_modules/location/PlaceUser.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtLocation.QPlaceUser</code></p> <p>Represents an individual user.</p> Source code in <code>prettyqt\\location\\placeuser.py</code> <pre><code>class PlaceUser(QtLocation.QPlaceUser):\n\"\"\"Represents an individual user.\"\"\"\ndef __str__(self):\nreturn self.name()\n</code></pre>"},{"location":"qt_modules/location/PlaceUser.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265326480[\"location.PlaceUser\"]\n  2103265238160[\"QtLocation.QPlaceUser\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265238160 --&gt; 2103265326480\n  2103206874128 --&gt; 2103265238160\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/location/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>location</li> <li>PlaceSearchResult</li> <li>PlaceManager</li> <li>GeoRoutingManager</li> <li>PlaceContentMixin</li> <li>PlaceReply</li> <li>GeoRouteRequest</li> <li>GeoCodingManager</li> <li>PlaceCategory</li> <li>GeoManeuver</li> <li>PlaceSearchResultMixin</li> <li>PlaceRatings</li> <li>PlaceReplyMixin</li> <li>GeoRouteSegment</li> <li>PlaceResult</li> <li>GeoRouteMixin</li> <li>PlaceIcon</li> <li>Place</li> <li>GeoRoute</li> <li>PlaceContent</li> <li>PlaceMatchRequest</li> <li>PlaceProposedSearchResult</li> <li>PlaceDetailsReply</li> <li>PlaceSupplier</li> <li>PlaceUser</li> <li>PlaceMatchReply</li> <li>PlaceContactDetail</li> <li>GeoServiceProvider</li> <li>PlaceAttribute</li> <li>PlaceContentReply</li> <li>PlaceContentRequest</li> <li>PlaceIdReply</li> <li>PlaceSearchRequest</li> <li>PlaceSearchReply</li> </ul>"},{"location":"qt_modules/multimedia/index.html","title":"multimedia","text":"<p>A rich set of classes to handle multimedia content.</p> Name Children Inherits AudioFormatprettyqt.multimedia.audioformat <ul><li>QAudioFormat</li></ul> ScreenCaptureprettyqt.multimedia.screencapture <ul><li>ObjectMixin</li><li>QScreenCapture</li></ul> MediaMetaDataprettyqt.multimedia.mediametadata <ul><li>QMediaMetaData</li><li><code>MutableMapping</code></li></ul> MediaRecorderprettyqt.multimedia.mediarecorder <ul><li>ObjectMixin</li><li>QMediaRecorder</li></ul> MediaPlayerprettyqt.multimedia.mediaplayer <ul><li>ObjectMixin</li><li>QMediaPlayer</li></ul> Cameraprettyqt.multimedia.camera <ul><li>ObjectMixin</li><li>QCamera</li></ul> AudioDeviceprettyqt.multimedia.audiodevice <ul><li>QAudioDevice</li></ul> CameraDeviceprettyqt.multimedia.cameradevice <ul><li>QCameraDevice</li></ul> CameraFormatprettyqt.multimedia.cameraformat <ul><li>QCameraFormat</li></ul>"},{"location":"qt_modules/multimedia/AudioDevice.html","title":"AudioDevice","text":"<p>Qt Base Class: QAudioDevice</p> <p>Signature: <code>QAudioDevice(self) -&gt; None QAudioDevice(self, other: PySide6.QtMultimedia.QAudioDevice) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/AudioDevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>multimedia.QAudioDevice</code></p> Source code in <code>prettyqt\\multimedia\\audiodevice.py</code> <pre><code>class AudioDevice(multimedia.QAudioDevice):\ndef get_mode(self) -&gt; ModeStr:\nreturn MODE.inverse[self.mode()]\ndef get_supported_sample_formats(\nself,\n) -&gt; list[multimedia.audioformat.SampleFormatStr]:\nreturn multimedia.audioformat.SAMPLE_FORMAT.get_list(\nself.supportedSampleFormats()\n)\ndef get_channel_config(self) -&gt; multimedia.audioformat.ChannelConfigStr:\nreturn multimedia.audioformat.CHANNEL_CONFIG.inverse[self.channelConfiguration()]\ndef get_id(self) -&gt; str:\nreturn self.id().data().decode()\n</code></pre>"},{"location":"qt_modules/multimedia/AudioDevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500765520[\"multimedia.AudioDevice\"]\n  2103500664720[\"QtMultimedia.QAudioDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500664720 --&gt; 2103500765520\n  2103206874128 --&gt; 2103500664720\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/AudioFormat.html","title":"AudioFormat","text":"<p>Qt Base Class: QAudioFormat</p> <p>Signature: <code>QAudioFormat(self) -&gt; None QAudioFormat(self, QAudioFormat: PySide6.QtMultimedia.QAudioFormat) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/AudioFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtMultimedia.QAudioFormat</code></p> Source code in <code>prettyqt\\multimedia\\audioformat.py</code> <pre><code>class AudioFormat(QtMultimedia.QAudioFormat):\ndef set_sample_format(\nself, mode: SampleFormatStr | QtMultimedia.QAudioFormat.SampleFormat\n):\nself.setSampleFormat(SAMPLE_FORMAT.get_enum_value(mode))\ndef get_sample_format(self) -&gt; SampleFormatStr:\nreturn SAMPLE_FORMAT.inverse[self.sampleFormat()]\ndef set_channel_config(\nself, config: ChannelConfigStr | QtMultimedia.QAudioFormat.ChannelConfig\n):\nself.setChannelConfig(CHANNEL_CONFIG.get_enum_value(config))\ndef get_channel_config(self) -&gt; ChannelConfigStr:\nreturn CHANNEL_CONFIG.inverse[self.channelConfig()]\n</code></pre>"},{"location":"qt_modules/multimedia/AudioFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500762640[\"multimedia.AudioFormat\"]\n  2103500694480[\"QtMultimedia.QAudioFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500694480 --&gt; 2103500762640\n  2103206874128 --&gt; 2103500694480\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/Camera.html","title":"Camera","text":"<p>Qt Base Class: QCamera</p> <p>Signature: <code>QCamera(self, cameraDevice: PySide6.QtMultimedia.QCameraDevice, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCamera(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCamera(self, position: PySide6.QtMultimedia.QCameraDevice.Position, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/Camera.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>multimedia.QCamera</code></p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>class Camera(core.ObjectMixin, multimedia.QCamera):\ndef set_exposure_mode(self, mode: ExposureModeStr | multimedia.QCamera.ExposureMode):\n\"\"\"Set the exposure mode.\n        Args:\n            mode: exposure mode\n        \"\"\"\nself.setExposureMode(EXPOSURE_MODE.get_enum_value(mode))\ndef get_exposure_mode(self) -&gt; ExposureModeStr:\n\"\"\"Return current exposure mode.\n        Returns:\n            exposure mode\n        \"\"\"\nreturn EXPOSURE_MODE.inverse[self.exposureMode()]\ndef set_torch_mode(self, mode: TorchModeStr | multimedia.QCamera.TorchMode):\n\"\"\"Set the torch mode.\n        Args:\n            mode: torch mode\n        \"\"\"\nself.setTorchMode(TORCH_MODE.get_enum_value(mode))\ndef get_torch_mode(self) -&gt; TorchModeStr:\n\"\"\"Return current torch mode.\n        Returns:\n            torch mode\n        \"\"\"\nreturn TORCH_MODE.inverse[self.torchMode()]\ndef set_flash_mode(self, mode: FlashModeStr | multimedia.QCamera.FlashMode):\n\"\"\"Set the flash mode.\n        Args:\n            mode: flash mode\n        \"\"\"\nself.setFlashMode(FLASH_MODE.get_enum_value(mode))\ndef get_flash_mode(self) -&gt; FlashModeStr:\n\"\"\"Return current flash mode.\n        Returns:\n            flash mode\n        \"\"\"\nreturn FLASH_MODE.inverse[self.flashMode()]\ndef set_white_balance_mode(\nself, mode: WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode\n):\n\"\"\"Set the white balance mode.\n        Args:\n            mode: white balance mode\n        \"\"\"\nself.setWhiteBalanceMode(WHITE_BALANCE.get_enum_value(mode))\ndef get_white_balance_mode(self) -&gt; WhiteBalanceModeStr:\n\"\"\"Return current white balance mode.\n        Returns:\n            white balance mode\n        \"\"\"\nreturn WHITE_BALANCE.inverse[self.whiteBalanceMode()]\ndef get_supported_features(self) -&gt; list[FeatureStr]:\nreturn FEATURE.get_list(self.supportedFeatures())\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error state.\n        Returns:\n            error state\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_camera_format(self) -&gt; multimedia.CameraFormat:\nreturn multimedia.CameraFormat(self.cameraFormat())\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return current error state.</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error state.\n    Returns:\n        error state\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.get_exposure_mode","title":"<code>get_exposure_mode() -&gt; ExposureModeStr</code>","text":"<p>Return current exposure mode.</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_exposure_mode(self) -&gt; ExposureModeStr:\n\"\"\"Return current exposure mode.\n    Returns:\n        exposure mode\n    \"\"\"\nreturn EXPOSURE_MODE.inverse[self.exposureMode()]\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.get_flash_mode","title":"<code>get_flash_mode() -&gt; FlashModeStr</code>","text":"<p>Return current flash mode.</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_flash_mode(self) -&gt; FlashModeStr:\n\"\"\"Return current flash mode.\n    Returns:\n        flash mode\n    \"\"\"\nreturn FLASH_MODE.inverse[self.flashMode()]\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.get_torch_mode","title":"<code>get_torch_mode() -&gt; TorchModeStr</code>","text":"<p>Return current torch mode.</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_torch_mode(self) -&gt; TorchModeStr:\n\"\"\"Return current torch mode.\n    Returns:\n        torch mode\n    \"\"\"\nreturn TORCH_MODE.inverse[self.torchMode()]\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.get_white_balance_mode","title":"<code>get_white_balance_mode() -&gt; WhiteBalanceModeStr</code>","text":"<p>Return current white balance mode.</p> Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def get_white_balance_mode(self) -&gt; WhiteBalanceModeStr:\n\"\"\"Return current white balance mode.\n    Returns:\n        white balance mode\n    \"\"\"\nreturn WHITE_BALANCE.inverse[self.whiteBalanceMode()]\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.set_exposure_mode","title":"<code>set_exposure_mode(mode: ExposureModeStr | multimedia.QCamera.ExposureMode)</code>","text":"<p>Set the exposure mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ExposureModeStr | multimedia.QCamera.ExposureMode</code> <p>exposure mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_exposure_mode(self, mode: ExposureModeStr | multimedia.QCamera.ExposureMode):\n\"\"\"Set the exposure mode.\n    Args:\n        mode: exposure mode\n    \"\"\"\nself.setExposureMode(EXPOSURE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.set_flash_mode","title":"<code>set_flash_mode(mode: FlashModeStr | multimedia.QCamera.FlashMode)</code>","text":"<p>Set the flash mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FlashModeStr | multimedia.QCamera.FlashMode</code> <p>flash mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_flash_mode(self, mode: FlashModeStr | multimedia.QCamera.FlashMode):\n\"\"\"Set the flash mode.\n    Args:\n        mode: flash mode\n    \"\"\"\nself.setFlashMode(FLASH_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.set_torch_mode","title":"<code>set_torch_mode(mode: TorchModeStr | multimedia.QCamera.TorchMode)</code>","text":"<p>Set the torch mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>TorchModeStr | multimedia.QCamera.TorchMode</code> <p>torch mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_torch_mode(self, mode: TorchModeStr | multimedia.QCamera.TorchMode):\n\"\"\"Set the torch mode.\n    Args:\n        mode: torch mode\n    \"\"\"\nself.setTorchMode(TORCH_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#prettyqt.multimedia.camera.Camera.set_white_balance_mode","title":"<code>set_white_balance_mode(mode: WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode)</code>","text":"<p>Set the white balance mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode</code> <p>white balance mode</p> required Source code in <code>prettyqt\\multimedia\\camera.py</code> <pre><code>def set_white_balance_mode(\nself, mode: WhiteBalanceModeStr | multimedia.QCamera.WhiteBalanceMode\n):\n\"\"\"Set the white balance mode.\n    Args:\n        mode: white balance mode\n    \"\"\"\nself.setWhiteBalanceMode(WHITE_BALANCE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500773200[\"multimedia.Camera\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500752080[\"QtMultimedia.QCamera\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500773200\n  140736120080256 --&gt; 2103255067472\n  2103500752080 --&gt; 2103500773200\n  2103254677056 --&gt; 2103500752080\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/Camera.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool <code>cameraDevice</code> QCameraDevice <code>error</code> QCamera::Error <code>errorString</code> QString <code>cameraFormat</code> QCameraFormat <code>focusMode</code> QCamera::FocusMode <code>focusPoint</code> QPointF <code>customFocusPoint</code> QPointF <code>focusDistance</code> float <code>minimumZoomFactor</code> float <code>maximumZoomFactor</code> float <code>zoomFactor</code> float <code>exposureTime</code> float <code>manualExposureTime</code> int <code>isoSensitivity</code> int <code>manualIsoSensitivity</code> int <code>exposureCompensation</code> float <code>exposureMode</code> QCamera::ExposureMode <code>flashReady</code> bool <code>flashMode</code> QCamera::FlashMode <code>torchMode</code> QCamera::TorchMode <code>whiteBalanceMode</code> QCamera::WhiteBalanceMode <code>colorTemperature</code> int <code>supportedFeatures</code> QFlags"},{"location":"qt_modules/multimedia/CameraDevice.html","title":"CameraDevice","text":"<p>Qt Base Class: QCameraDevice</p> <p>Signature: <code>QCameraDevice(self) -&gt; None QCameraDevice(self, other: PySide6.QtMultimedia.QCameraDevice) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/CameraDevice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>multimedia.QCameraDevice</code></p> Source code in <code>prettyqt\\multimedia\\cameradevice.py</code> <pre><code>class CameraDevice(multimedia.QCameraDevice):\ndef get_position(self) -&gt; PositionStr:\nreturn POSITION.inverse[self.position()]\ndef get_video_formats(self) -&gt; list[multimedia.CameraFormat]:\nreturn [multimedia.CameraFormat(i) for i in self.videoFormats()]\n</code></pre>"},{"location":"qt_modules/multimedia/CameraDevice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500764560[\"multimedia.CameraDevice\"]\n  2103500682000[\"QtMultimedia.QCameraDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500682000 --&gt; 2103500764560\n  2103206874128 --&gt; 2103500682000\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/CameraFormat.html","title":"CameraFormat","text":"<p>Qt Base Class: QCameraFormat</p> <p>Signature: <code>QCameraFormat(self) -&gt; None QCameraFormat(self, other: PySide6.QtMultimedia.QCameraFormat) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/CameraFormat.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtMultimedia.QCameraFormat</code></p> Source code in <code>prettyqt\\multimedia\\cameraformat.py</code> <pre><code>class CameraFormat(QtMultimedia.QCameraFormat):\ndef __bool__(self):\nreturn not self.isNull()\n</code></pre>"},{"location":"qt_modules/multimedia/CameraFormat.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500763600[\"multimedia.CameraFormat\"]\n  2103500660880[\"QtMultimedia.QCameraFormat\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500660880 --&gt; 2103500763600\n  2103206874128 --&gt; 2103500660880\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/MediaMetaData.html","title":"MediaMetaData","text":"<p>Qt Base Class: QMediaMetaData</p> <p>Signature: <code>QMediaMetaData(self) -&gt; None QMediaMetaData(self, QMediaMetaData: PySide6.QtMultimedia.QMediaMetaData) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/MediaMetaData.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtMultimedia.QMediaMetaData</code>, <code>MutableMapping</code></p> Source code in <code>prettyqt\\multimedia\\mediametadata.py</code> <pre><code>class MediaMetaData(\nQtMultimedia.QMediaMetaData,\nMutableMapping,\nmetaclass=datatypes.QABCMeta,\n):\ndef __repr__(self):\nreturn get_repr(self, dict(self))\ndef __setitem__(self, key: KeyStr, value: datatypes.Variant):\nif isinstance(key, str):\nkey = KEY[key]\nself.insert(key, value)\ndef __getitem__(self, key: KeyStr) -&gt; datatypes.Variant:\nif isinstance(key, str):\nkey = KEY[key]\nif key not in self.keys():\nraise KeyError(key)\nreturn self.value(key)\ndef __delitem__(self, key: KeyStr):\nif isinstance(key, str):\nkey = KEY[key]\nself.remove(key)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __iter__(self):\nreturn iter(self.keys())\n</code></pre>"},{"location":"qt_modules/multimedia/MediaMetaData.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500776080[\"multimedia.MediaMetaData\"]\n  2103500671440[\"QtMultimedia.QMediaMetaData\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103500671440 --&gt; 2103500776080\n  2103206874128 --&gt; 2103500671440\n  140736120080256 --&gt; 2103206874128\n  2103189029904 --&gt; 2103500776080\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/multimedia/MediaPlayer.html","title":"MediaPlayer","text":"<p>Qt Base Class: QMediaPlayer</p> <p>Signature: <code>QMediaPlayer(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/MediaPlayer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QMediaPlayer</code></p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>class MediaPlayer(core.ObjectMixin, QtMultimedia.QMediaPlayer):\ndef set_source_device(\nself, device: core.QIODevice, url: datatypes.UrlType | None = None\n):\nurl = datatypes.to_local_url(url)\nself.setSourceDevice(device, url)\ndef set_source(self, url: datatypes.UrlType):\nurl = datatypes.to_local_url(url)\nself.setSource(url)\ndef get_source(self) -&gt; core.Url | None:\nurl = self.source()\nreturn core.Url(url) if url.isValid() else None\ndef get_playback_state(self) -&gt; PlaybackStateStr:\n\"\"\"Return current playback state.\n        Returns:\n            playback state\n        \"\"\"\nreturn PLAYBACK_STATE.inverse[self.playbackState()]\ndef get_media_status(self) -&gt; MediaStatusStr:\n\"\"\"Return current media status.\n        Returns:\n            media status\n        \"\"\"\nreturn MEDIA_STATUS.inverse[self.mediaStatus()]\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaPlayer.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaPlayer.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_media_status","title":"<code>get_media_status() -&gt; MediaStatusStr</code>","text":"<p>Return current media status.</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_media_status(self) -&gt; MediaStatusStr:\n\"\"\"Return current media status.\n    Returns:\n        media status\n    \"\"\"\nreturn MEDIA_STATUS.inverse[self.mediaStatus()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaPlayer.html#prettyqt.multimedia.mediaplayer.MediaPlayer.get_playback_state","title":"<code>get_playback_state() -&gt; PlaybackStateStr</code>","text":"<p>Return current playback state.</p> Source code in <code>prettyqt\\multimedia\\mediaplayer.py</code> <pre><code>def get_playback_state(self) -&gt; PlaybackStateStr:\n\"\"\"Return current playback state.\n    Returns:\n        playback state\n    \"\"\"\nreturn PLAYBACK_STATE.inverse[self.playbackState()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaPlayer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500766480[\"multimedia.MediaPlayer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500735760[\"QtMultimedia.QMediaPlayer\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500766480\n  140736120080256 --&gt; 2103255067472\n  2103500735760 --&gt; 2103500766480\n  2103254677056 --&gt; 2103500735760\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/MediaPlayer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>source</code> QUrl <code>duration</code> qlonglong <code>position</code> qlonglong <code>bufferProgress</code> float <code>hasAudio</code> bool <code>hasVideo</code> bool <code>seekable</code> bool <code>playing</code> bool <code>playbackRate</code> double <code>loops</code> int <code>playbackState</code> QMediaPlayer::PlaybackState <code>mediaStatus</code> QMediaPlayer::MediaStatus <code>metaData</code> QMediaMetaData <code>error</code> QMediaPlayer::Error <code>errorString</code> QString <code>videoOutput</code> QObject <code>audioOutput</code> QAudioOutput <code>audioTracks</code> QList <code>videoTracks</code> QList <code>subtitleTracks</code> QList <code>activeAudioTrack</code> int <code>activeVideoTrack</code> int <code>activeSubtitleTrack</code> int"},{"location":"qt_modules/multimedia/MediaRecorder.html","title":"MediaRecorder","text":"<p>Qt Base Class: QMediaRecorder</p> <p>Signature: <code>QMediaRecorder(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/MediaRecorder.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QMediaRecorder</code></p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>class MediaRecorder(core.ObjectMixin, QtMultimedia.QMediaRecorder):\ndef set_output_location(self, url: datatypes.UrlType | os.PathLike | None = None):\nurl = datatypes.to_local_url(url)\nself.setOutputLocation(url)\ndef get_recorder_state(self) -&gt; RecorderStateStr:\n\"\"\"Return current recorder state.\n        Returns:\n            recorder state\n        \"\"\"\nreturn RECORDER_STATE.inverse[self.recorderState()]\ndef get_encoding_mode(self) -&gt; EncodingModeStr:\n\"\"\"Return current encoding mode.\n        Returns:\n            encoding mode\n        \"\"\"\nreturn ENCODING_MODE.inverse[self.encodingMode()]\ndef set_encoding_mode(self, mode: EncodingModeStr):\n\"\"\"Set encoding mode.\n        Args:\n            mode: encoding mode to use\n        \"\"\"\nself.setEncodingMode(ENCODING_MODE[mode])\ndef get_quality(self) -&gt; QualityStr:\n\"\"\"Return current quality setting.\n        Returns:\n            quality setting\n        \"\"\"\nreturn QUALITY.inverse[self.quality()]\ndef set_quality(self, quality: QualityStr):\n\"\"\"Set quality.\n        Args:\n            quality: quality to use\n        \"\"\"\nself.setQuality(QUALITY[quality])\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_encoding_mode","title":"<code>get_encoding_mode() -&gt; EncodingModeStr</code>","text":"<p>Return current encoding mode.</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_encoding_mode(self) -&gt; EncodingModeStr:\n\"\"\"Return current encoding mode.\n    Returns:\n        encoding mode\n    \"\"\"\nreturn ENCODING_MODE.inverse[self.encodingMode()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_quality","title":"<code>get_quality() -&gt; QualityStr</code>","text":"<p>Return current quality setting.</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_quality(self) -&gt; QualityStr:\n\"\"\"Return current quality setting.\n    Returns:\n        quality setting\n    \"\"\"\nreturn QUALITY.inverse[self.quality()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#prettyqt.multimedia.mediarecorder.MediaRecorder.get_recorder_state","title":"<code>get_recorder_state() -&gt; RecorderStateStr</code>","text":"<p>Return current recorder state.</p> Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def get_recorder_state(self) -&gt; RecorderStateStr:\n\"\"\"Return current recorder state.\n    Returns:\n        recorder state\n    \"\"\"\nreturn RECORDER_STATE.inverse[self.recorderState()]\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#prettyqt.multimedia.mediarecorder.MediaRecorder.set_encoding_mode","title":"<code>set_encoding_mode(mode: EncodingModeStr)</code>","text":"<p>Set encoding mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>EncodingModeStr</code> <p>encoding mode to use</p> required Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def set_encoding_mode(self, mode: EncodingModeStr):\n\"\"\"Set encoding mode.\n    Args:\n        mode: encoding mode to use\n    \"\"\"\nself.setEncodingMode(ENCODING_MODE[mode])\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#prettyqt.multimedia.mediarecorder.MediaRecorder.set_quality","title":"<code>set_quality(quality: QualityStr)</code>","text":"<p>Set quality.</p> <p>Parameters:</p> Name Type Description Default <code>quality</code> <code>QualityStr</code> <p>quality to use</p> required Source code in <code>prettyqt\\multimedia\\mediarecorder.py</code> <pre><code>def set_quality(self, quality: QualityStr):\n\"\"\"Set quality.\n    Args:\n        quality: quality to use\n    \"\"\"\nself.setQuality(QUALITY[quality])\n</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500768400[\"multimedia.MediaRecorder\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500721360[\"QtMultimedia.QMediaRecorder\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500768400\n  140736120080256 --&gt; 2103255067472\n  2103500721360 --&gt; 2103500768400\n  2103254677056 --&gt; 2103500721360\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/MediaRecorder.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>recorderState</code> QMediaRecorder::RecorderState <code>duration</code> qlonglong <code>outputLocation</code> QUrl <code>actualLocation</code> QUrl <code>metaData</code> QMediaMetaData <code>error</code> QMediaRecorder::Error <code>errorString</code> QString <code>mediaFormat</code> QMediaFormat <code>quality</code> QMediaRecorder::Quality"},{"location":"qt_modules/multimedia/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>multimedia</li> <li>AudioFormat</li> <li>ScreenCapture</li> <li>MediaMetaData</li> <li>MediaRecorder</li> <li>MediaPlayer</li> <li>Camera</li> <li>AudioDevice</li> <li>CameraDevice</li> <li>CameraFormat</li> </ul>"},{"location":"qt_modules/multimedia/ScreenCapture.html","title":"ScreenCapture","text":"<p>Qt Base Class: QScreenCapture</p> <p>Signature: <code>QScreenCapture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/multimedia/ScreenCapture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtMultimedia.QScreenCapture</code></p> Source code in <code>prettyqt\\multimedia\\screencapture.py</code> <pre><code>class ScreenCapture(core.ObjectMixin, QtMultimedia.QScreenCapture):\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef set_screen(self, screen: int | gui.QScreen | Literal[\"primary\"]):\nmatch screen:\ncase int():\nscreen = gui.GuiApplication.screens()[screen]\ncase gui.QScreen():\npass\ncase \"primary\":\nscreen = gui.GuiApplication.primaryScreen()\ncase _:\nraise TypeError(screen)\nself.setScreen(screen)\n</code></pre>"},{"location":"qt_modules/multimedia/ScreenCapture.html#prettyqt.multimedia.screencapture.ScreenCapture.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\multimedia\\screencapture.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/multimedia/ScreenCapture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500769360[\"multimedia.ScreenCapture\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500704080[\"QtMultimedia.QScreenCapture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500769360\n  140736120080256 --&gt; 2103255067472\n  2103500704080 --&gt; 2103500769360\n  2103254677056 --&gt; 2103500704080\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/multimedia/ScreenCapture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool <code>screen</code> QScreen <code>error</code> QScreenCapture::Error <code>errorString</code> QString"},{"location":"qt_modules/multimediawidgets/index.html","title":"multimediawidgets","text":"Name Children Inherits GraphicsVideoItemprettyqt.multimediawidgets.graphicsvideoitem <ul><li>GraphicsObjectMixin</li><li>QGraphicsVideoItem</li></ul> VideoWidgetprettyqt.multimediawidgets.videowidget <ul><li>WidgetMixin</li><li>QVideoWidget</li></ul>"},{"location":"qt_modules/multimediawidgets/GraphicsVideoItem.html","title":"GraphicsVideoItem","text":"<p>Qt Base Class: QGraphicsVideoItem</p> <p>Signature: <code>QGraphicsVideoItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/multimediawidgets/GraphicsVideoItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsObjectMixin</code>, <code>QtMultimediaWidgets.QGraphicsVideoItem</code></p> Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>class GraphicsVideoItem(\nwidgets.GraphicsObjectMixin, QtMultimediaWidgets.QGraphicsVideoItem\n):\ndef get_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.offset())\ndef get_native_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.nativeSize())\ndef get_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.size())\ndef set_aspect_ratio_mode(\nself, mode: constants.AspectRatioModeStr | constants.AspectRatioMode\n):\n\"\"\"Set the aspect ratio mode.\n        Args:\n            mode: aspect ratio mode\n        \"\"\"\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE.get_enum_value(mode))\ndef get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n        Returns:\n            aspect ratio mode\n        \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"qt_modules/multimediawidgets/GraphicsVideoItem.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.get_aspect_ratio_mode","title":"<code>get_aspect_ratio_mode() -&gt; constants.AspectRatioModeStr</code>","text":"<p>Return current aspect ratio mode.</p> Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n    Returns:\n        aspect ratio mode\n    \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"qt_modules/multimediawidgets/GraphicsVideoItem.html#prettyqt.multimediawidgets.graphicsvideoitem.GraphicsVideoItem.set_aspect_ratio_mode","title":"<code>set_aspect_ratio_mode(mode: constants.AspectRatioModeStr | constants.AspectRatioMode)</code>","text":"<p>Set the aspect ratio mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.AspectRatioModeStr | constants.AspectRatioMode</code> <p>aspect ratio mode</p> required Source code in <code>prettyqt\\multimediawidgets\\graphicsvideoitem.py</code> <pre><code>def set_aspect_ratio_mode(\nself, mode: constants.AspectRatioModeStr | constants.AspectRatioMode\n):\n\"\"\"Set the aspect ratio mode.\n    Args:\n        mode: aspect ratio mode\n    \"\"\"\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/multimediawidgets/GraphicsVideoItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500772240[\"multimediawidgets.GraphicsVideoItem\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103500771280[\"QtMultimediaWidgets.QGraphicsVideoItem\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103261145600 --&gt; 2103500772240\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103500771280 --&gt; 2103500772240\n  2103260155536 --&gt; 2103500771280\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056</code></pre>"},{"location":"qt_modules/multimediawidgets/GraphicsVideoItem.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double <code>aspectRatioMode</code> Qt::AspectRatioMode <code>offset</code> QPointF <code>size</code> QSizeF <code>nativeSize</code> QSizeF <code>videoSink</code> QVideoSink"},{"location":"qt_modules/multimediawidgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>multimediawidgets</li> <li>GraphicsVideoItem</li> <li>VideoWidget</li> </ul>"},{"location":"qt_modules/multimediawidgets/VideoWidget.html","title":"VideoWidget","text":"<p>Qt Base Class: QVideoWidget</p> <p>Signature: <code>QVideoWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/multimediawidgets/VideoWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtMultimediaWidgets.QVideoWidget</code></p> Source code in <code>prettyqt\\multimediawidgets\\videowidget.py</code> <pre><code>class VideoWidget(widgets.WidgetMixin, QtMultimediaWidgets.QVideoWidget):\ndef __init__(self, *args, **kwargs):\nself.doubleclick_for_fullscreen = False\nsuper().__init__(*args, **kwargs)\ndef set_doubleclick_for_fullscreen(self, value: bool = True):\nself.doubleclick_for_fullscreen = value\ndef mouseDoubleClickEvent(self, event):\nif (\nevent.button() == constants.MouseButton.LeftButton\nand self.doubleclick_for_fullscreen\n):\nself.setFullScreen(not self.isFullScreen())\nevent.accept()\nreturn super().mouseDoubleClickEvent(event)\n</code></pre>"},{"location":"qt_modules/multimediawidgets/VideoWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500774160[\"multimediawidgets.VideoWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103500770320[\"QtMultimediaWidgets.QVideoWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103500774160\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103500770320 --&gt; 2103500774160\n  2103259691120 --&gt; 2103500770320\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/multimediawidgets/VideoWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>fullScreen</code> bool <code>aspectRatioMode</code> Qt::AspectRatioMode"},{"location":"qt_modules/network/index.html","title":"network","text":"<p>Classes to make network programming easier and more portable.</p> Name Children Inherits LocalSocketprettyqt.network.localsocket <ul><li>IODeviceMixin</li><li>QLocalSocket</li></ul> TcpServerprettyqt.network.tcpserver <ul><li>ObjectMixin</li><li>QTcpServer</li></ul> AbstractSocketMixinprettyqt.network.abstractsocket <ul><li>AbstractSocket</li><li>TcpSocket</li><li>UdpSocket</li></ul> <ul><li>IODeviceMixin</li></ul> LocalServerprettyqt.network.localserver <ul><li>ObjectMixin</li><li>QLocalServer</li></ul> NetworkRequestprettyqt.network.networkrequest <ul><li>QNetworkRequest</li></ul> NetworkDatagramprettyqt.network.networkdatagram <ul><li>QNetworkDatagram</li></ul> NetworkReplyprettyqt.network.networkreplyContains the data and headers for a request sent with QNetworkAccessManager. <ul><li>object</li></ul> NetworkCookieJarprettyqt.network.networkcookiejar <ul><li>ObjectMixin</li><li>QNetworkCookieJar</li></ul> HttpPartprettyqt.network.httppart <ul><li>QHttpPart</li></ul> NetworkInterfaceprettyqt.network.networkinterface <ul><li>QNetworkInterface</li></ul> HostAddressprettyqt.network.hostaddress <ul><li>QHostAddress</li></ul> NetworkAddressEntryprettyqt.network.networkaddressentry <ul><li>QNetworkAddressEntry</li></ul> AbstractSocketprettyqt.network.abstractsocket <ul><li>AbstractSocketMixin</li><li>QAbstractSocket</li></ul> NetworkProxyprettyqt.network.networkproxy <ul><li>QNetworkProxy</li></ul> TcpSocketprettyqt.network.tcpsocket <ul><li>AbstractSocketMixin</li><li>QTcpSocket</li></ul> NetworkCookieprettyqt.network.networkcookie <ul><li>QNetworkCookie</li></ul> NetworkAccessManagerprettyqt.network.networkaccessmanager <ul><li>ObjectMixin</li><li>QNetworkAccessManager</li></ul> HttpMultiPartprettyqt.network.httpmultipart <ul><li>ObjectMixin</li><li>QHttpMultiPart</li></ul> UdpSocketprettyqt.network.udpsocket <ul><li>AbstractSocketMixin</li><li>QUdpSocket</li></ul>"},{"location":"qt_modules/network/AbstractSocket.html","title":"AbstractSocket","text":"<p>Qt Base Class: QAbstractSocket</p> <p>Signature: <code>QAbstractSocket(self, socketType: PySide6.QtNetwork.QAbstractSocket.SocketType, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/network/AbstractSocket.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractSocketMixin</code>, <code>network.QAbstractSocket</code></p> <p>The base functionality common to all socket types.</p> Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>class AbstractSocket(AbstractSocketMixin, network.QAbstractSocket):\n\"\"\"The base functionality common to all socket types.\"\"\"\n</code></pre>"},{"location":"qt_modules/network/AbstractSocket.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500799120[\"network.AbstractSocket\"]\n  2103500783760[\"network.AbstractSocketMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500619600[\"QtNetwork.QAbstractSocket\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103500783760 --&gt; 2103500799120\n  2103255106832 --&gt; 2103500783760\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103500619600 --&gt; 2103500799120\n  2103254728896 --&gt; 2103500619600\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/network/AbstractSocket.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/network/AbstractSocketMixin.html","title":"AbstractSocketMixin","text":""},{"location":"qt_modules/network/AbstractSocketMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IODeviceMixin</code></p> Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>class AbstractSocketMixin(core.IODeviceMixin):\ndef __repr__(self):\nreturn get_repr(self)\ndef bind_to(\nself,\naddress: str | network.QHostAddress,\nport: int = 0,\nbind_mode: (\nnetwork.QAbstractSocket.BindFlag | BindModeStr\n) = \"default_for_platform\",\n) -&gt; bool:\nif isinstance(address, str):\naddress = network.QHostAddress(address)\nmode = BIND_MODE.get_enum_value(bind_mode)\nreturn self.bind(address, port, mode)\ndef connect_to_host(\nself,\nhostname: str,\nport: int,\nopen_mode: core.QIODevice.OpenModeFlag | core.iodevice.OpenModeStr = \"read_write\",\nprotocol: (\nnetwork.QAbstractSocket.NetworkLayerProtocol | NetworkLayerProtocolStr\n) = \"any_ip\",\n):\nmode = core.iodevice.OPEN_MODES.get_enum_value(open_mode)\nprot = NETWORK_LAYER_PROTOCOL.get_enum_value(protocol)\nself.connectToHost(hostname, port, mode, prot)\ndef get_error(self) -&gt; SocketErrorStr:\nreturn SOCKET_ERROR.inverse[self.error()]\ndef set_pause_mode(self, mode: PauseModeStr | mod.PauseMode):\n\"\"\"Set pause mode.\n        Args:\n            mode: pause mode\n        \"\"\"\nself.setPauseMode(PAUSE_MODES.get_enum_value(mode))\ndef get_pause_mode(self) -&gt; PauseModeStr:\nreturn PAUSE_MODES.inverse[self.pauseMode()]\ndef get_proxy(self) -&gt; network.NetworkProxy:\nreturn network.NetworkProxy(self.proxy())\n# def set_socket_option(self, name: str, value):\n#     self.setSocketOption(SOCKET_OPTION.get_enum_value(name), value)\n# def get_socket_option(self, name: str):\n#     return self.socketOption(SOCKET_OPTION.get_enum_value(name))\n# def set_type_of_service(self, typ: str):\n#     self.set_socket_option(\"type_of_service\", TYPE_OF_SERVICE.get_enum_value(typ))\n# def get_type_of_service(self):\n#     opt = self.get_socket_option(\"type_of_service\")\n#     return TYPE_OF_SERVICE.inverse[opt]\ndef get_socket_type(self) -&gt; SocketTypeStr:\nreturn SOCKET_TYPE.inverse[self.socketType()]\ndef get_state(self) -&gt; SocketStateStr:\nreturn SOCKET_STATE.inverse[self.state()]\ndef get_local_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.localAddress())\n</code></pre> Name Children Inherits AbstractSocketprettyqt.network.abstractsocket <ul><li>AbstractSocketMixin</li><li>QAbstractSocket</li></ul> TcpSocketprettyqt.network.tcpsocket <ul><li>AbstractSocketMixin</li><li>QTcpSocket</li></ul> UdpSocketprettyqt.network.udpsocket <ul><li>AbstractSocketMixin</li><li>QUdpSocket</li></ul>"},{"location":"qt_modules/network/AbstractSocketMixin.html#prettyqt.network.abstractsocket.AbstractSocketMixin.set_pause_mode","title":"<code>set_pause_mode(mode: PauseModeStr | mod.PauseMode)</code>","text":"<p>Set pause mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PauseModeStr | mod.PauseMode</code> <p>pause mode</p> required Source code in <code>prettyqt\\network\\abstractsocket.py</code> <pre><code>def set_pause_mode(self, mode: PauseModeStr | mod.PauseMode):\n\"\"\"Set pause mode.\n    Args:\n        mode: pause mode\n    \"\"\"\nself.setPauseMode(PAUSE_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/network/AbstractSocketMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500783760[\"network.AbstractSocketMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255106832 --&gt; 2103500783760\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/network/HostAddress.html","title":"HostAddress","text":"<p>Qt Base Class: QHostAddress</p> <p>Signature: <code>QHostAddress(self) -&gt; None QHostAddress(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress) -&gt; None QHostAddress(self, address: str) -&gt; None QHostAddress(self, copy: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -&gt; None QHostAddress(self, ip4Addr: int) -&gt; None QHostAddress(self, ip6Addr: PySide6.QtNetwork.QIPv6Address) -&gt; None</code></p>"},{"location":"qt_modules/network/HostAddress.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.QHostAddress</code></p> <p>IP address.</p> Source code in <code>prettyqt\\network\\hostaddress.py</code> <pre><code>class HostAddress(network.QHostAddress):\n\"\"\"IP address.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef __str__(self):\nreturn self.toString()\ndef __bool__(self):\nreturn not self.isNull()\ndef get_protocol(self) -&gt; NetworkLayerProtocolStr:\nreturn network.abstractsocket.NETWORK_LAYER_PROTOCOL.inverse[self.protocol()]\ndef set_address(self, address: int | str):\nif address in SPECIAL_ADDRESS:\naddress = SPECIAL_ADDRESS[address]\nret = self.setAddress(address)\nif ret is False:\nraise ValueError(\"invalid address\")\n</code></pre>"},{"location":"qt_modules/network/HostAddress.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500801040[\"network.HostAddress\"]\n  2103500605200[\"QtNetwork.QHostAddress\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500605200 --&gt; 2103500801040\n  2103206874128 --&gt; 2103500605200\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/HttpMultiPart.html","title":"HttpMultiPart","text":"<p>Qt Base Class: QHttpMultiPart</p> <p>Signature: <code>QHttpMultiPart(self, contentType: PySide6.QtNetwork.QHttpMultiPart.ContentType, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QHttpMultiPart(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/HttpMultiPart.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QHttpMultiPart</code></p> <p>Resembles a MIME multipart message to be sent over HTTP.</p> Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>class HttpMultiPart(core.ObjectMixin, QtNetwork.QHttpMultiPart):\n\"\"\"Resembles a MIME multipart message to be sent over HTTP.\"\"\"\ndef __add__(self, other: QtNetwork.QHttpPart):\nself.append(other)\nreturn self\ndef set_content_type(\nself, typ: ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType\n):\n\"\"\"Set content type.\n        Args:\n            typ: content type\n        \"\"\"\nself.setContentType(CONTENT_TYPES.get_enum_value(typ))\ndef set_boundary(self, boundary: datatypes.ByteArrayType):\nboundary = datatypes.to_bytearray(boundary)\nself.setBoundary(boundary)\ndef get_boundary(self) -&gt; str:\nreturn self.boundary().data().decode()\n</code></pre>"},{"location":"qt_modules/network/HttpMultiPart.html#prettyqt.network.httpmultipart.HttpMultiPart.set_content_type","title":"<code>set_content_type(typ: ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType)</code>","text":"<p>Set content type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType</code> <p>content type</p> required Source code in <code>prettyqt\\network\\httpmultipart.py</code> <pre><code>def set_content_type(\nself, typ: ContentTypeStr | QtNetwork.QHttpMultiPart.ContentType\n):\n\"\"\"Set content type.\n    Args:\n        typ: content type\n    \"\"\"\nself.setContentType(CONTENT_TYPES.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/network/HttpMultiPart.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500787600[\"network.HttpMultiPart\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265197840[\"QtNetwork.QHttpMultiPart\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500787600\n  140736120080256 --&gt; 2103255067472\n  2103265197840 --&gt; 2103500787600\n  2103254677056 --&gt; 2103265197840\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/HttpMultiPart.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/network/HttpPart.html","title":"HttpPart","text":"<p>Qt Base Class: QHttpPart</p> <p>Signature: <code>QHttpPart(self) -&gt; None QHttpPart(self, other: PySide6.QtNetwork.QHttpPart) -&gt; None</code></p>"},{"location":"qt_modules/network/HttpPart.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.QHttpPart</code></p> <p>Holds a body part to be used inside a HTTP multipart MIME message.</p> Source code in <code>prettyqt\\network\\httppart.py</code> <pre><code>class HttpPart(network.QHttpPart):\n\"\"\"Holds a body part to be used inside a HTTP multipart MIME message.\"\"\"\ndef set_body(self, body: datatypes.ByteArrayType):\nbody = datatypes.to_bytearray(body)\nself.setBody(body)\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef set_header(self, name: str, value: network.networkrequest.KnownHeaderStr):\nself.setHeader(network.networkrequest.KNOWN_HEADER[name], value)\n</code></pre>"},{"location":"qt_modules/network/HttpPart.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500802960[\"network.HttpPart\"]\n  2103265175760[\"QtNetwork.QHttpPart\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265175760 --&gt; 2103500802960\n  2103206874128 --&gt; 2103265175760\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/LocalServer.html","title":"LocalServer","text":"<p>Qt Base Class: QLocalServer</p> <p>Signature: <code>QLocalServer(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/LocalServer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>network.QLocalServer</code></p> <p>Local socket based server.</p> Source code in <code>prettyqt\\network\\localserver.py</code> <pre><code>class LocalServer(core.ObjectMixin, network.QLocalServer):\n\"\"\"Local socket based server.\"\"\"\ndef get_server_error(self) -&gt; network.abstractsocket.SocketErrorStr:\nreturn network.abstractsocket.SOCKET_ERROR.inverse[self.serverError()]\ndef set_socket_options(self, *name: SocketOptionStr):\nflags = SOCKET_OPTION.merge_flags(name)\nself.setSocketOptions(flags)\ndef get_socket_options(self) -&gt; list[SocketOptionStr]:\nreturn SOCKET_OPTION.get_list(self.socketOptions())\n</code></pre>"},{"location":"qt_modules/network/LocalServer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500798160[\"network.LocalServer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265206480[\"QtNetwork.QLocalServer\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500798160\n  140736120080256 --&gt; 2103255067472\n  2103265206480 --&gt; 2103500798160\n  2103254677056 --&gt; 2103265206480\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/LocalServer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>socketOptions</code> QFlags"},{"location":"qt_modules/network/LocalSocket.html","title":"LocalSocket","text":"<p>Qt Base Class: QLocalSocket</p> <p>Signature: <code>QLocalSocket(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/LocalSocket.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.IODeviceMixin</code>, <code>QtNetwork.QLocalSocket</code></p> <p>Local socket.</p> Source code in <code>prettyqt\\network\\localsocket.py</code> <pre><code>class LocalSocket(core.IODeviceMixin, QtNetwork.QLocalSocket):\n\"\"\"Local socket.\"\"\"\ndef __bool__(self):\nreturn self.isValid()\ndef get_error(self) -&gt; LocalSocketErrorStr:\nreturn LOCAL_SOCKET_ERROR.inverse[self.error()]\ndef get_state(self) -&gt; LocalSocketStateStr:\nreturn LOCAL_SOCKET_STATE.inverse[self.state()]\ndef connect_to_server(\nself,\nserver_name: str | None = None,\nmode: core.iodevice.OpenModeStr | core.QIODevice.OpenModeFlag = \"read_write\",\n):\nopen_mode = core.iodevice.OPEN_MODES.get_enum_value(mode)\nif server_name is not None:\nself.connectToServer(server_name, open_mode)\nelse:\nself.connectToServer(open_mode)\n</code></pre>"},{"location":"qt_modules/network/LocalSocket.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500785680[\"network.LocalSocket\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265208400[\"QtNetwork.QLocalSocket\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103255106832 --&gt; 2103500785680\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103265208400 --&gt; 2103500785680\n  2103254728896 --&gt; 2103265208400\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/network/LocalSocket.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>socketOptions</code> QFlags"},{"location":"qt_modules/network/NetworkAccessManager.html","title":"NetworkAccessManager","text":"<p>Qt Base Class: QNetworkAccessManager</p> <p>Signature: <code>QNetworkAccessManager(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkAccessManager.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>network.QNetworkAccessManager</code></p> <p>Allows the application to send network requests and receive replies.</p> Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>class NetworkAccessManager(core.ObjectMixin, network.QNetworkAccessManager):\n\"\"\"Allows the application to send network requests and receive replies.\"\"\"\n# def request(\n#     self,\n#     method,\n#     url,\n#     headers=None,\n#     cookies=None,\n#     files=None,\n#     auth=None,\n#     timeout=None,\n#     allow_redirects=True,\n# ):\n#     req = network.NetworkRequest()\n#     if allow_redirects:\n#         pass\ndef get(self, request: datatypes.UrlType | network.QNetworkRequest):\nif isinstance(request, str):\nrequest = core.Url(request)\nrequest = network.NetworkRequest(request)\nreturn super().get(request)\n# def post(self, url, data=None, json=None):\n#     pass\n# def put(self, url, data=None, json=None):\n#     pass\n# def patch(self, url, data=None):\n#     pass\n# def delete(self, url):\n#     pass\ndef set_redirect_policy(\nself,\npolicy: network.networkrequest.RedirectPolicyStr\n| network.NetworkRequest.RedirectPolicy,\n):\n\"\"\"Set redirect policy.\n        Args:\n            policy: redirect policy\n        \"\"\"\nself.setRedirectPolicy(\nnetwork.networkrequest.REDIRECT_POLICIES.get_enum_value(policy)\n)\ndef get_redirect_policy(self) -&gt; network.networkrequest.RedirectPolicyStr:\n\"\"\"Get the current redirect policy.\n        Returns:\n            redirect policy\n        \"\"\"\nreturn network.networkrequest.REDIRECT_POLICIES.inverse[self.redirectPolicy()]\n</code></pre>"},{"location":"qt_modules/network/NetworkAccessManager.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.get_redirect_policy","title":"<code>get_redirect_policy() -&gt; network.networkrequest.RedirectPolicyStr</code>","text":"<p>Get the current redirect policy.</p> Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def get_redirect_policy(self) -&gt; network.networkrequest.RedirectPolicyStr:\n\"\"\"Get the current redirect policy.\n    Returns:\n        redirect policy\n    \"\"\"\nreturn network.networkrequest.REDIRECT_POLICIES.inverse[self.redirectPolicy()]\n</code></pre>"},{"location":"qt_modules/network/NetworkAccessManager.html#prettyqt.network.networkaccessmanager.NetworkAccessManager.set_redirect_policy","title":"<code>set_redirect_policy(policy: network.networkrequest.RedirectPolicyStr | network.NetworkRequest.RedirectPolicy)</code>","text":"<p>Set redirect policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>network.networkrequest.RedirectPolicyStr | network.NetworkRequest.RedirectPolicy</code> <p>redirect policy</p> required Source code in <code>prettyqt\\network\\networkaccessmanager.py</code> <pre><code>def set_redirect_policy(\nself,\npolicy: network.networkrequest.RedirectPolicyStr\n| network.NetworkRequest.RedirectPolicy,\n):\n\"\"\"Set redirect policy.\n    Args:\n        policy: redirect policy\n    \"\"\"\nself.setRedirectPolicy(\nnetwork.networkrequest.REDIRECT_POLICIES.get_enum_value(policy)\n)\n</code></pre>"},{"location":"qt_modules/network/NetworkAccessManager.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500789520[\"network.NetworkAccessManager\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265163280[\"QtNetwork.QNetworkAccessManager\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500789520\n  140736120080256 --&gt; 2103255067472\n  2103265163280 --&gt; 2103500789520\n  2103254677056 --&gt; 2103265163280\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkAccessManager.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/network/NetworkAddressEntry.html","title":"NetworkAddressEntry","text":"<p>Qt Base Class: QNetworkAddressEntry</p> <p>Signature: <code>QNetworkAddressEntry(self) -&gt; None QNetworkAddressEntry(self, other: PySide6.QtNetwork.QNetworkAddressEntry) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkAddressEntry.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.QNetworkAddressEntry</code></p> <p>Stores one IP address supported by a network interface.</p> Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>class NetworkAddressEntry(network.QNetworkAddressEntry):\n\"\"\"Stores one IP address supported by a network interface.\"\"\"\ndef get_dns_eligibility(self) -&gt; DnsEligibilityStatusStr:\n\"\"\"Return whether this address is eligible for publication in the DNS.\n        Returns:\n            DNS eligibility\n        \"\"\"\nreturn DNS_ELIGIBILITY_STATUS.inverse[self.dnsEligibility()]\ndef set_dns_eligibility(\nself,\nstatus: DnsEligibilityStatusStr\n| network.QNetworkAddressEntry.DnsEligibilityStatus,\n):\n\"\"\"Set the DNS eligibility flag for this address to status.\n        Args:\n            status: DNS eligibility status\n        \"\"\"\nself.setDnsEligibility(DNS_ELIGIBILITY_STATUS.get_enum_value(status))\ndef get_ip(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.ip())\ndef set_ip(self, ip: network.QHostAddress | str):\nself.setIp(network.HostAddress(ip))\ndef get_netmask(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.netmask())\ndef set_netmask(self, netmask: network.QHostAddress | str):\nself.setNetmask(network.HostAddress(netmask))\ndef get_preferred_lifetime(self) -&gt; core.DeadlineTimer:\nreturn core.DeadlineTimer(self.preferredLifetime())\ndef get_validity_lifetime(self) -&gt; core.DeadlineTimer:\nreturn core.DeadlineTimer(self.validityLifetime())\n</code></pre>"},{"location":"qt_modules/network/NetworkAddressEntry.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.get_dns_eligibility","title":"<code>get_dns_eligibility() -&gt; DnsEligibilityStatusStr</code>","text":"<p>Return whether this address is eligible for publication in the DNS.</p> Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def get_dns_eligibility(self) -&gt; DnsEligibilityStatusStr:\n\"\"\"Return whether this address is eligible for publication in the DNS.\n    Returns:\n        DNS eligibility\n    \"\"\"\nreturn DNS_ELIGIBILITY_STATUS.inverse[self.dnsEligibility()]\n</code></pre>"},{"location":"qt_modules/network/NetworkAddressEntry.html#prettyqt.network.networkaddressentry.NetworkAddressEntry.set_dns_eligibility","title":"<code>set_dns_eligibility(status: DnsEligibilityStatusStr | network.QNetworkAddressEntry.DnsEligibilityStatus)</code>","text":"<p>Set the DNS eligibility flag for this address to status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>DnsEligibilityStatusStr | network.QNetworkAddressEntry.DnsEligibilityStatus</code> <p>DNS eligibility status</p> required Source code in <code>prettyqt\\network\\networkaddressentry.py</code> <pre><code>def set_dns_eligibility(\nself,\nstatus: DnsEligibilityStatusStr\n| network.QNetworkAddressEntry.DnsEligibilityStatus,\n):\n\"\"\"Set the DNS eligibility flag for this address to status.\n    Args:\n        status: DNS eligibility status\n    \"\"\"\nself.setDnsEligibility(DNS_ELIGIBILITY_STATUS.get_enum_value(status))\n</code></pre>"},{"location":"qt_modules/network/NetworkAddressEntry.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500784720[\"network.NetworkAddressEntry\"]\n  2103265185360[\"QtNetwork.QNetworkAddressEntry\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265185360 --&gt; 2103500784720\n  2103206874128 --&gt; 2103265185360\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkCookie.html","title":"NetworkCookie","text":"<p>Qt Base Class: QNetworkCookie</p> <p>Signature: <code>QNetworkCookie(self, name: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray), value: Union[PySide6.QtCore.QByteArray, bytes] = Default(QByteArray)) -&gt; None QNetworkCookie(self, other: PySide6.QtNetwork.QNetworkCookie) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkCookie.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtNetwork.QNetworkCookie</code></p> <p>Holds one network cookie.</p> Source code in <code>prettyqt\\network\\networkcookie.py</code> <pre><code>class NetworkCookie(QtNetwork.QNetworkCookie):\n\"\"\"Holds one network cookie.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.name(), self.value())\ndef to_raw_form(self, full: bool = True):\nform = RAW_FORMS[\"full\"] if full else RAW_FORMS[\"name_and_value_only\"]\nself.toRawForm(form)\ndef set_name(self, name: datatypes.ByteArrayType):\nname = datatypes.to_bytearray(name)\nself.setName(name)\ndef get_name(self) -&gt; str:\nreturn self.name().data().decode()\ndef set_value(self, value: datatypes.ByteArrayType):\nvalue = datatypes.to_bytearray(value)\nself.setValue(value)\ndef get_value(self) -&gt; str:\nreturn self.value().data().decode()\ndef set_expiration_date(self, date: datatypes.DateTimeType | None):\ndate = datatypes.to_datetime(date)\nself.setExpirationDate(date)  # type: ignore\n</code></pre>"},{"location":"qt_modules/network/NetworkCookie.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500775120[\"network.NetworkCookie\"]\n  2103500607120[\"QtNetwork.QNetworkCookie\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500607120 --&gt; 2103500775120\n  2103206874128 --&gt; 2103500607120\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkCookieJar.html","title":"NetworkCookieJar","text":"<p>Qt Base Class: QNetworkCookieJar</p> <p>Signature: <code>QNetworkCookieJar(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkCookieJar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtNetwork.QNetworkCookieJar</code></p> <p>Implements a simple jar of QNetworkCookie objects.</p> Source code in <code>prettyqt\\network\\networkcookiejar.py</code> <pre><code>class NetworkCookieJar(core.ObjectMixin, QtNetwork.QNetworkCookieJar):\n\"\"\"Implements a simple jar of QNetworkCookie objects.\"\"\"\ndef __add__(self, other: QtNetwork.QNetworkCookie):\nself.insertCookie(other)\nreturn self\ndef __getitem__(self, url: datatypes.UrlType) -&gt; list[QtNetwork.QNetworkCookie]:\nurl = core.Url(url)\nreturn self.cookiesForUrl(url)\ndef __repr__(self):\nreturn get_repr(self)\ndef __iter__(self) -&gt; Iterator[QtNetwork.QNetworkCookie]:\nreturn iter(self.allCookies())\ndef set_cookies_from_url(\nself, cookies: list[QtNetwork.QNetworkCookie], url: datatypes.UrlType\n) -&gt; bool:\nreturn self.setCookiesFromUrl(cookies, core.QUrl(url))\n</code></pre>"},{"location":"qt_modules/network/NetworkCookieJar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500778000[\"network.NetworkCookieJar\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265194960[\"QtNetwork.QNetworkCookieJar\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500778000\n  140736120080256 --&gt; 2103255067472\n  2103265194960 --&gt; 2103500778000\n  2103254677056 --&gt; 2103265194960\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkCookieJar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/network/NetworkDatagram.html","title":"NetworkDatagram","text":"<p>Qt Base Class: QNetworkDatagram</p> <p>Signature: <code>QNetworkDatagram(self) -&gt; None QNetworkDatagram(self, data: Union[PySide6.QtCore.QByteArray, bytes], destinationAddress: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress] = Default(QHostAddress), port: int = 0) -&gt; None QNetworkDatagram(self, other: Union[PySide6.QtNetwork.QNetworkDatagram, PySide6.QtCore.QByteArray]) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkDatagram.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.QNetworkDatagram</code></p> <p>The data and metadata of a UDP datagram.</p> Source code in <code>prettyqt\\network\\networkdatagram.py</code> <pre><code>class NetworkDatagram(network.QNetworkDatagram):\n\"\"\"The data and metadata of a UDP datagram.\"\"\"\ndef get_destination_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.destinationAddress())\ndef get_sender_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.senderAddress())\ndef set_data(self, data: str):\nself.setData(QtCore.QByteArray(data.encode()))\ndef get_data(self) -&gt; str:\nreturn self.data().data().decode()\n</code></pre>"},{"location":"qt_modules/network/NetworkDatagram.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500796240[\"network.NetworkDatagram\"]\n  2103500618640[\"QtNetwork.QNetworkDatagram\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500618640 --&gt; 2103500796240\n  2103206874128 --&gt; 2103500618640\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkInterface.html","title":"NetworkInterface","text":"<p>Qt Base Class: QNetworkInterface</p> <p>Signature: <code>QNetworkInterface(self) -&gt; None QNetworkInterface(self, other: PySide6.QtNetwork.QNetworkInterface) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkInterface.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.QNetworkInterface</code></p> <p>Listing of the host's IP addresses and network interfaces.</p> Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>class NetworkInterface(network.QNetworkInterface):\n\"\"\"Listing of the host's IP addresses and network interfaces.\"\"\"\n# def __bool__(self):\n#     return self.isValid()\ndef get_type(self) -&gt; InterfaceTypeStr:\n\"\"\"Get the interface type.\n        Returns:\n            interface type\n        \"\"\"\nreturn INTERFACE_TYPE.inverse[self.type()]\ndef get_address_entries(self) -&gt; list[network.NetworkAddressEntry]:\nreturn [network.NetworkAddressEntry(i) for i in self.addressEntries()]\n@staticmethod\ndef get_all_addresses() -&gt; list[network.HostAddress]:\nreturn [network.HostAddress(i) for i in NetworkInterface.allAddresses()]\n@staticmethod\ndef get_all_interfaces() -&gt; list[network.HostAddress]:\nreturn [network.NetworkInterface(i) for i in NetworkInterface.allInterfaces()]\n@staticmethod\ndef get_interface_from_name(name: str) -&gt; NetworkInterface:\ninterface = NetworkInterface.interfaceFromName(name)\n# if not interface:\n#     return None\nreturn NetworkInterface(interface)\n</code></pre>"},{"location":"qt_modules/network/NetworkInterface.html#prettyqt.network.networkinterface.NetworkInterface.get_type","title":"<code>get_type() -&gt; InterfaceTypeStr</code>","text":"<p>Get the interface type.</p> Source code in <code>prettyqt\\network\\networkinterface.py</code> <pre><code>def get_type(self) -&gt; InterfaceTypeStr:\n\"\"\"Get the interface type.\n    Returns:\n        interface type\n    \"\"\"\nreturn INTERFACE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/network/NetworkInterface.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500786640[\"network.NetworkInterface\"]\n  2103265171920[\"QtNetwork.QNetworkInterface\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265171920 --&gt; 2103500786640\n  2103206874128 --&gt; 2103265171920\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkProxy.html","title":"NetworkProxy","text":"<p>Qt Base Class: QNetworkProxy</p> <p>Signature: <code>QNetworkProxy(self) -&gt; None QNetworkProxy(self, other: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -&gt; None QNetworkProxy(self, type: PySide6.QtNetwork.QNetworkProxy.ProxyType, hostName: str = '', port: int = 0, user: str = '', password: str = '') -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkProxy.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.QNetworkProxy</code></p> <p>Network layer proxy.</p> Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>class NetworkProxy(network.QNetworkProxy):\n\"\"\"Network layer proxy.\"\"\"\ndef get_capabilities(self) -&gt; list[CapabilityStr]:\nreturn CAPABILITIES.get_list(self.capabilities())\ndef set_capabilities(self, *capability: CapabilityStr):\nflags = CAPABILITIES.merge_flags(capability)\nself.setCapabilities(flags)\ndef get_header(\nself,\nname: network.networkrequest.KnownHeaderStr | network.NetworkRequest.KnownHeaders,\n) -&gt; str:\nreturn self.header(network.networkrequest.KNOWN_HEADER.get_enum_value(name))\ndef set_header(\nself,\nname: network.networkrequest.KnownHeaderStr | network.NetworkRequest.KnownHeaders,\nvalue: str,\n):\nself.setHeader(network.networkrequest.KNOWN_HEADER.get_enum_value(name), value)\ndef get_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef set_type(self, typ: ProxyTypeStr | network.QNetworkProxy.ProxyType):\n\"\"\"Set proxy type.\n        Args:\n            typ: proxy type\n        \"\"\"\nself.setType(PROXY_TYPES.get_enum_value(typ))\ndef get_type(self) -&gt; ProxyTypeStr:\n\"\"\"Get the proxy type.\n        Returns:\n            type\n        \"\"\"\nreturn PROXY_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/network/NetworkProxy.html#prettyqt.network.networkproxy.NetworkProxy.get_type","title":"<code>get_type() -&gt; ProxyTypeStr</code>","text":"<p>Get the proxy type.</p> Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def get_type(self) -&gt; ProxyTypeStr:\n\"\"\"Get the proxy type.\n    Returns:\n        type\n    \"\"\"\nreturn PROXY_TYPES.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/network/NetworkProxy.html#prettyqt.network.networkproxy.NetworkProxy.set_type","title":"<code>set_type(typ: ProxyTypeStr | network.QNetworkProxy.ProxyType)</code>","text":"<p>Set proxy type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ProxyTypeStr | network.QNetworkProxy.ProxyType</code> <p>proxy type</p> required Source code in <code>prettyqt\\network\\networkproxy.py</code> <pre><code>def set_type(self, typ: ProxyTypeStr | network.QNetworkProxy.ProxyType):\n\"\"\"Set proxy type.\n    Args:\n        typ: proxy type\n    \"\"\"\nself.setType(PROXY_TYPES.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/network/NetworkProxy.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500782800[\"network.NetworkProxy\"]\n  2103265411920[\"QtNetwork.QNetworkProxy\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265411920 --&gt; 2103500782800\n  2103206874128 --&gt; 2103265411920\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/NetworkReply.html","title":"NetworkReply","text":""},{"location":"qt_modules/network/NetworkReply.html#docstrings","title":"DocStrings","text":"<p>Contains the data and headers for a request sent with QNetworkAccessManager.</p> Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>class NetworkReply:\n\"\"\"Contains the data and headers for a request sent with QNetworkAccessManager.\"\"\"\ndef __init__(self, reply: QtNetwork.QNetworkReply):\nself.item = reply\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_error(self) -&gt; NetworkErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn NETWORK_ERROR.inverse[self.error()]\ndef set_raw_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(\nQtCore.QByteArray(k.encode()), QtCore.QByteArray(v.encode())\n)\ndef get_raw_headers(self) -&gt; dict[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\n</code></pre>"},{"location":"qt_modules/network/NetworkReply.html#prettyqt.network.networkreply.NetworkReply.get_error","title":"<code>get_error() -&gt; NetworkErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\network\\networkreply.py</code> <pre><code>def get_error(self) -&gt; NetworkErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn NETWORK_ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/network/NetworkReply.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500779920[\"network.NetworkReply\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103500779920</code></pre>"},{"location":"qt_modules/network/NetworkRequest.html","title":"NetworkRequest","text":"<p>Qt Base Class: QNetworkRequest</p> <p>Signature: <code>QNetworkRequest(self) -&gt; None QNetworkRequest(self, other: PySide6.QtNetwork.QNetworkRequest) -&gt; None QNetworkRequest(self, url: Union[PySide6.QtCore.QUrl, str]) -&gt; None</code></p>"},{"location":"qt_modules/network/NetworkRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtNetwork.QNetworkRequest</code></p> <p>Holds a request to be sent with QNetworkAccessManager.</p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>class NetworkRequest(QtNetwork.QNetworkRequest):\n\"\"\"Holds a request to be sent with QNetworkAccessManager.\"\"\"\ndef __init__(self, obj: datatypes.UrlType | QtNetwork.QNetworkRequest | None = None):\nif isinstance(obj, QtNetwork.QNetworkRequest):\nsuper().__init__(obj)\nelse:\nsuper().__init__()\nif obj is not None:\nself.set_url(obj)\ndef __repr__(self):\nreturn get_repr(self, self.get_url())\ndef set_header(self, name: KnownHeaderStr | Req.KnownHeaders, value: str):\nself.setHeader(KNOWN_HEADER.get_enum_value(name), value)\ndef get_header(self, name: KnownHeaderStr | Req.KnownHeaders) -&gt; str:\nreturn self.header(KNOWN_HEADER.get_enum_value(name))\ndef set_headers(self, headers: Mapping[str, str]):\nfor k, v in headers.items():\nself.setRawHeader(core.QByteArray(k.encode()), core.QByteArray(v.encode()))\ndef get_headers(self) -&gt; Mapping[str, str]:\nreturn {\nh.data().decode(): self.rawHeader(h).data().decode()\nfor h in self.rawHeaderList()\n}\ndef set_url(self, url: str | core.QUrl):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef set_priority(self, priority: PriorityStr | Req.Priority):\n\"\"\"Set priority.\n        Args:\n            priority: priority\n        \"\"\"\nself.setPriority(PRIORITY.get_enum_value(priority))\ndef get_priority(self) -&gt; PriorityStr:\n\"\"\"Get the current priority.\n        Returns:\n            priority\n        \"\"\"\nreturn PRIORITY.inverse[self.priority()]\ndef set_attribute(\nself, attribute: AttributeStr | Req.Attribute, value: datatypes.Variant\n):\nself.setAttribute(ATTRIBUTE.get_enum_value(attribute), value)\ndef set_attributes(self, **kwargs):\nfor k, v in kwargs.items():\nself.set_attribute(k, v)\n</code></pre>"},{"location":"qt_modules/network/NetworkRequest.html#prettyqt.network.networkrequest.NetworkRequest.get_priority","title":"<code>get_priority() -&gt; PriorityStr</code>","text":"<p>Get the current priority.</p> Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def get_priority(self) -&gt; PriorityStr:\n\"\"\"Get the current priority.\n    Returns:\n        priority\n    \"\"\"\nreturn PRIORITY.inverse[self.priority()]\n</code></pre>"},{"location":"qt_modules/network/NetworkRequest.html#prettyqt.network.networkrequest.NetworkRequest.set_priority","title":"<code>set_priority(priority: PriorityStr | Req.Priority)</code>","text":"<p>Set priority.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>PriorityStr | Req.Priority</code> <p>priority</p> required Source code in <code>prettyqt\\network\\networkrequest.py</code> <pre><code>def set_priority(self, priority: PriorityStr | Req.Priority):\n\"\"\"Set priority.\n    Args:\n        priority: priority\n    \"\"\"\nself.setPriority(PRIORITY.get_enum_value(priority))\n</code></pre>"},{"location":"qt_modules/network/NetworkRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500781840[\"network.NetworkRequest\"]\n  2103265400400[\"QtNetwork.QNetworkRequest\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103265400400 --&gt; 2103500781840\n  2103206874128 --&gt; 2103265400400\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>network</li> <li>LocalSocket</li> <li>TcpServer</li> <li>AbstractSocketMixin</li> <li>LocalServer</li> <li>NetworkRequest</li> <li>NetworkDatagram</li> <li>NetworkReply</li> <li>NetworkCookieJar</li> <li>HttpPart</li> <li>NetworkInterface</li> <li>HostAddress</li> <li>NetworkAddressEntry</li> <li>AbstractSocket</li> <li>NetworkProxy</li> <li>TcpSocket</li> <li>NetworkCookie</li> <li>NetworkAccessManager</li> <li>HttpMultiPart</li> <li>UdpSocket</li> </ul>"},{"location":"qt_modules/network/TcpServer.html","title":"TcpServer","text":"<p>Qt Base Class: QTcpServer</p> <p>Signature: <code>QTcpServer(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/TcpServer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>network.QTcpServer</code></p> <p>TCP-based server.</p> Source code in <code>prettyqt\\network\\tcpserver.py</code> <pre><code>class TcpServer(core.ObjectMixin, network.QTcpServer):\n\"\"\"TCP-based server.\"\"\"\ndef listen(  # type: ignore\nself, address: str | network.QHostAddress, port: int = 0\n) -&gt; bool:\nif isinstance(address, str):\naddress = network.HostAddress(address)\nreturn super().listen(address, port)\ndef get_server_address(self) -&gt; network.HostAddress:\nreturn network.HostAddress(self.serverAddress())\ndef get_proxy(self) -&gt; network.NetworkProxy:\nreturn network.NetworkProxy(self.proxy())\ndef get_server_error(self) -&gt; network.abstractsocket.SocketErrorStr:\nreturn network.abstractsocket.SOCKET_ERROR.inverse[self.serverError()]\n</code></pre>"},{"location":"qt_modules/network/TcpServer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500800080[\"network.TcpServer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500631120[\"QtNetwork.QTcpServer\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500800080\n  140736120080256 --&gt; 2103255067472\n  2103500631120 --&gt; 2103500800080\n  2103254677056 --&gt; 2103500631120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/network/TcpServer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/network/TcpSocket.html","title":"TcpSocket","text":"<p>Qt Base Class: QTcpSocket</p> <p>Signature: <code>QTcpSocket(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/TcpSocket.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.AbstractSocketMixin</code>, <code>network.QTcpSocket</code></p> <p>TCP Socket.</p> Source code in <code>prettyqt\\network\\tcpsocket.py</code> <pre><code>class TcpSocket(network.AbstractSocketMixin, network.QTcpSocket):\n\"\"\"TCP Socket.\"\"\"\n</code></pre>"},{"location":"qt_modules/network/TcpSocket.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500797200[\"network.TcpSocket\"]\n  2103500783760[\"network.AbstractSocketMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500627280[\"QtNetwork.QTcpSocket\"]\n  2103500619600[\"QtNetwork.QAbstractSocket\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103500783760 --&gt; 2103500797200\n  2103255106832 --&gt; 2103500783760\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103500627280 --&gt; 2103500797200\n  2103500619600 --&gt; 2103500627280\n  2103254728896 --&gt; 2103500619600\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/network/TcpSocket.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/network/UdpSocket.html","title":"UdpSocket","text":"<p>Qt Base Class: QUdpSocket</p> <p>Signature: <code>QUdpSocket(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/network/UdpSocket.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>network.AbstractSocketMixin</code>, <code>network.QUdpSocket</code></p> <p>UDP Socket.</p> Source code in <code>prettyqt\\network\\udpsocket.py</code> <pre><code>class UdpSocket(network.AbstractSocketMixin, network.QUdpSocket):\n\"\"\"UDP Socket.\"\"\"\ndef get_multicast_interface(self) -&gt; network.NetworkInterface:\nreturn network.NetworkInterface(self.multicastInterface())\ndef receive_datagram(self, max_size: int | None = None) -&gt; network.NetworkDatagram:\nif max_size is None:\nmax_size = -1\nreturn network.NetworkDatagram(self.receiveDatagram(max_size))\n</code></pre>"},{"location":"qt_modules/network/UdpSocket.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500802000[\"network.UdpSocket\"]\n  2103500783760[\"network.AbstractSocketMixin\"]\n  2103255106832[\"core.IODeviceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500626320[\"QtNetwork.QUdpSocket\"]\n  2103500619600[\"QtNetwork.QAbstractSocket\"]\n  2103254728896[\"QtCore.QIODevice\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254651136[\"QtCore.QIODeviceBase\"]\n  2103500783760 --&gt; 2103500802000\n  2103255106832 --&gt; 2103500783760\n  2103255067472 --&gt; 2103255106832\n  140736120080256 --&gt; 2103255067472\n  2103500626320 --&gt; 2103500802000\n  2103500619600 --&gt; 2103500626320\n  2103254728896 --&gt; 2103500619600\n  2103254677056 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103254651136 --&gt; 2103254728896\n  2103206874128 --&gt; 2103254651136</code></pre>"},{"location":"qt_modules/network/UdpSocket.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/openglwidgets/index.html","title":"openglwidgets","text":"Name Children Inherits OpenGLWidgetprettyqt.openglwidgets.openglwidget <ul><li>WidgetMixin</li><li>QOpenGLWidget</li></ul>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html","title":"OpenGLWidget","text":"<p>Qt Base Class: QOpenGLWidget</p> <p>Signature: <code>QOpenGLWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtOpenGLWidgets.QOpenGLWidget</code></p> <p>Widget for rendering OpenGL graphics.</p> Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>class OpenGLWidget(widgets.WidgetMixin, QtOpenGLWidgets.QOpenGLWidget):\n\"\"\"Widget for rendering OpenGL graphics.\"\"\"\ndef set_update_behavior(\nself, behavior: UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior\n):\n\"\"\"Set update behavior.\n        Args:\n            behavior: update behavior to use\n        \"\"\"\nself.setUpdateBehavior(UPDATE_BEHAVIOR.get_enum_value(behavior))\ndef get_update_behavior(self) -&gt; UpdateBehaviorStr | None:\n\"\"\"Return current update behavior.\n        Returns:\n            update behavior\n        \"\"\"\nreturn UPDATE_BEHAVIOR.inverse[self.updateBehavior()]\ndef get_current_target_buffer(self) -&gt; TargetBufferStr:\n\"\"\"Return current target buffer.\n        Returns:\n            target buffer\n        \"\"\"\nreturn TARGET_BUFFER.inverse[self.currentTargetBuffer()]\n</code></pre>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html#prettyqt.openglwidgets.openglwidget.OpenGLWidget.get_current_target_buffer","title":"<code>get_current_target_buffer() -&gt; TargetBufferStr</code>","text":"<p>Return current target buffer.</p> Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>def get_current_target_buffer(self) -&gt; TargetBufferStr:\n\"\"\"Return current target buffer.\n    Returns:\n        target buffer\n    \"\"\"\nreturn TARGET_BUFFER.inverse[self.currentTargetBuffer()]\n</code></pre>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html#prettyqt.openglwidgets.openglwidget.OpenGLWidget.get_update_behavior","title":"<code>get_update_behavior() -&gt; UpdateBehaviorStr | None</code>","text":"<p>Return current update behavior.</p> Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>def get_update_behavior(self) -&gt; UpdateBehaviorStr | None:\n\"\"\"Return current update behavior.\n    Returns:\n        update behavior\n    \"\"\"\nreturn UPDATE_BEHAVIOR.inverse[self.updateBehavior()]\n</code></pre>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html#prettyqt.openglwidgets.openglwidget.OpenGLWidget.set_update_behavior","title":"<code>set_update_behavior(behavior: UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior)</code>","text":"<p>Set update behavior.</p> <p>Parameters:</p> Name Type Description Default <code>behavior</code> <code>UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior</code> <p>update behavior to use</p> required Source code in <code>prettyqt\\openglwidgets\\openglwidget.py</code> <pre><code>def set_update_behavior(\nself, behavior: UpdateBehaviorStr | QtOpenGLWidgets.QOpenGLWidget.UpdateBehavior\n):\n\"\"\"Set update behavior.\n    Args:\n        behavior: update behavior to use\n    \"\"\"\nself.setUpdateBehavior(UPDATE_BEHAVIOR.get_enum_value(behavior))\n</code></pre>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500788560[\"openglwidgets.OpenGLWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103264116256[\"QtOpenGLWidgets.QOpenGLWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103500788560\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103264116256 --&gt; 2103500788560\n  2103259691120 --&gt; 2103264116256\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/openglwidgets/OpenGLWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/openglwidgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>openglwidgets</li> <li>OpenGLWidget</li> </ul>"},{"location":"qt_modules/pdf/index.html","title":"pdf","text":"<p>Classes and functions for rendering PDF documents.</p> Name Children Inherits PdfDocumentprettyqt.pdf.pdfdocument <ul><li>ObjectMixin</li><li>QPdfDocument</li></ul> PdfBookmarkModelprettyqt.pdf.pdfbookmarkmodel <ul><li>AbstractItemModelMixin</li><li>QPdfBookmarkModel</li></ul> PdfSearchModelprettyqt.pdf.pdfsearchmodel <ul><li>AbstractItemModelMixin</li><li>QPdfSearchModel</li></ul>"},{"location":"qt_modules/pdf/PdfBookmarkModel.html","title":"PdfBookmarkModel","text":"<p>Qt Base Class: QPdfBookmarkModel</p> <p>Signature: <code>QPdfBookmarkModel(self) -&gt; None QPdfBookmarkModel(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/pdf/PdfBookmarkModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code>, <code>pdf.QPdfBookmarkModel</code></p> <p>Holds a tree of of links within a PDF document, such as the table of contents.</p> Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>class PdfBookmarkModel(core.AbstractItemModelMixin, pdf.QPdfBookmarkModel):\n\"\"\"Holds a tree of of links within a PDF document, such as the table of contents.\"\"\"\ndef __init__(self, parent: core.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\ndef set_document(self, document: datatypes.PathType | pdf.QPdfDocument):\n\"\"\"Set document for model.\"\"\"\nif not isinstance(document, pdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"qt_modules/pdf/PdfBookmarkModel.html#prettyqt.pdf.pdfbookmarkmodel.PdfBookmarkModel.set_document","title":"<code>set_document(document: datatypes.PathType | pdf.QPdfDocument)</code>","text":"<p>Set document for model.</p> Source code in <code>prettyqt\\pdf\\pdfbookmarkmodel.py</code> <pre><code>def set_document(self, document: datatypes.PathType | pdf.QPdfDocument):\n\"\"\"Set document for model.\"\"\"\nif not isinstance(document, pdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"qt_modules/pdf/PdfBookmarkModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500563920[\"pdf.PdfBookmarkModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500543760[\"QtPdf.QPdfBookmarkModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254372048 --&gt; 2103500563920\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103500543760 --&gt; 2103500563920\n  2103254592576 --&gt; 2103500543760\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/pdf/PdfBookmarkModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>document</code> QPdfDocument"},{"location":"qt_modules/pdf/PdfDocument.html","title":"PdfDocument","text":"<p>Qt Base Class: QPdfDocument</p> <p>Signature: <code>QPdfDocument(self) -&gt; None QPdfDocument(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/pdf/PdfDocument.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtPdf.QPdfDocument</code></p> <p>Loads a PDF document and renders pages from it.</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>class PdfDocument(core.ObjectMixin, QtPdf.QPdfDocument):\n\"\"\"Loads a PDF document and renders pages from it.\"\"\"\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error.\n        Returns:\n            page mode\n        \"\"\"\nreturn ERROR.inverse[self.error()]\ndef get_status(self) -&gt; StatusStr:\n\"\"\"Return current status.\n        Returns:\n            zoom mode\n        \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"qt_modules/pdf/PdfDocument.html#prettyqt.pdf.pdfdocument.PdfDocument.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return current error.</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return current error.\n    Returns:\n        page mode\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/pdf/PdfDocument.html#prettyqt.pdf.pdfdocument.PdfDocument.get_status","title":"<code>get_status() -&gt; StatusStr</code>","text":"<p>Return current status.</p> Source code in <code>prettyqt\\pdf\\pdfdocument.py</code> <pre><code>def get_status(self) -&gt; StatusStr:\n\"\"\"Return current status.\n    Returns:\n        zoom mode\n    \"\"\"\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"qt_modules/pdf/PdfDocument.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500565840[\"pdf.PdfDocument\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500562000[\"QtPdf.QPdfDocument\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103500565840\n  140736120080256 --&gt; 2103255067472\n  2103500562000 --&gt; 2103500565840\n  2103254677056 --&gt; 2103500562000\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/pdf/PdfDocument.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>pageCount</code> int <code>password</code> QString <code>status</code> QPdfDocument::Status <code>pageModel</code> QAbstractListModel"},{"location":"qt_modules/pdf/PdfSearchModel.html","title":"PdfSearchModel","text":"<p>Qt Base Class: QPdfSearchModel</p> <p>Signature: <code>QPdfSearchModel(self) -&gt; None QPdfSearchModel(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/pdf/PdfSearchModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code>, <code>pdf.QPdfSearchModel</code></p> <p>Searches for a string in a PDF document and holds the results.</p> Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>class PdfSearchModel(core.AbstractItemModelMixin, pdf.QPdfSearchModel):\n\"\"\"Searches for a string in a PDF document and holds the results.\"\"\"\ndef __init__(self, parent: core.QObject | None = None):\nsuper().__init__(parent)\nself.setDocument(pdf.PdfDocument(self))\ndef set_document(self, document: datatypes.PathType | pdf.QPdfDocument):\n\"\"\"Set document for model.\"\"\"\nif not isinstance(document, pdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"qt_modules/pdf/PdfSearchModel.html#prettyqt.pdf.pdfsearchmodel.PdfSearchModel.set_document","title":"<code>set_document(document: datatypes.PathType | pdf.QPdfDocument)</code>","text":"<p>Set document for model.</p> Source code in <code>prettyqt\\pdf\\pdfsearchmodel.py</code> <pre><code>def set_document(self, document: datatypes.PathType | pdf.QPdfDocument):\n\"\"\"Set document for model.\"\"\"\nif not isinstance(document, pdf.QPdfDocument):\npath = os.fspath(document)\ndocument = pdf.PdfDocument(self)\ndocument.load(path)\nself.setDocument(document)\n</code></pre>"},{"location":"qt_modules/pdf/PdfSearchModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500556240[\"pdf.PdfSearchModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500542800[\"QtPdf.QPdfSearchModel\"]\n  2103254590656[\"QtCore.QAbstractListModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254372048 --&gt; 2103500556240\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103500542800 --&gt; 2103500556240\n  2103254590656 --&gt; 2103500542800\n  2103254592576 --&gt; 2103254590656\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/pdf/PdfSearchModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>document</code> QPdfDocument <code>searchString</code> QString"},{"location":"qt_modules/pdf/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pdf</li> <li>PdfDocument</li> <li>PdfBookmarkModel</li> <li>PdfSearchModel</li> </ul>"},{"location":"qt_modules/pdfwidgets/index.html","title":"pdfwidgets","text":"Name Children Inherits PdfViewprettyqt.pdfwidgets.pdfview <ul><li>AbstractScrollAreaMixin</li><li>QPdfView</li></ul>"},{"location":"qt_modules/pdfwidgets/PdfView.html","title":"PdfView","text":"<p>Qt Base Class: QPdfView</p> <p>Signature: <code>QPdfView(self) -&gt; None QPdfView(self, parent: PySide6.QtWidgets.QWidget) -&gt; None</code></p>"},{"location":"qt_modules/pdfwidgets/PdfView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>QtPdfWidgets.QPdfView</code></p> <p>PDF viewer widget .</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>class PdfView(widgets.AbstractScrollAreaMixin, QtPdfWidgets.QPdfView):\n\"\"\"PDF viewer widget .\"\"\"\ndef __init__(self, parent: widgets.QWidget | None = None, **kwargs):\nsuper().__init__(parent, **kwargs)\nself.setDocument(pdf.PdfDocument(self))\ndef get_document_margins(self) -&gt; core.Margins:\nreturn core.Margins(self.documentMargins())\ndef set_file(self, path: datatypes.PathType):\ndoc = pdf.PdfDocument(self)\ndoc.load(os.fspath(path))\nself.setDocument(doc)\ndef set_page_mode(self, mode: PageModeStr | QtPdfWidgets.QPdfView.PageMode):\n\"\"\"Set the page mode.\n        Args:\n            mode: page mode\n        \"\"\"\nself.setPageMode(PAGE_MODE.get_enum_value(mode))\ndef get_page_mode(self) -&gt; PageModeStr:\n\"\"\"Return current page mode.\n        Returns:\n            page mode\n        \"\"\"\nreturn PAGE_MODE.inverse[self.pageMode()]\ndef set_zoom_mode(self, mode: ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode):\n\"\"\"Set the zoom mode.\n        Args:\n            mode: zoom mode\n        \"\"\"\nself.setZoomMode(ZOOM_MODE.get_enum_value(mode))\ndef get_zoom_mode(self) -&gt; ZoomModeStr:\n\"\"\"Return current zoom mode.\n        Returns:\n            zoom mode\n        \"\"\"\nreturn ZOOM_MODE.inverse[self.zoomMode()]\n</code></pre>"},{"location":"qt_modules/pdfwidgets/PdfView.html#prettyqt.pdfwidgets.pdfview.PdfView.get_page_mode","title":"<code>get_page_mode() -&gt; PageModeStr</code>","text":"<p>Return current page mode.</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_page_mode(self) -&gt; PageModeStr:\n\"\"\"Return current page mode.\n    Returns:\n        page mode\n    \"\"\"\nreturn PAGE_MODE.inverse[self.pageMode()]\n</code></pre>"},{"location":"qt_modules/pdfwidgets/PdfView.html#prettyqt.pdfwidgets.pdfview.PdfView.get_zoom_mode","title":"<code>get_zoom_mode() -&gt; ZoomModeStr</code>","text":"<p>Return current zoom mode.</p> Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def get_zoom_mode(self) -&gt; ZoomModeStr:\n\"\"\"Return current zoom mode.\n    Returns:\n        zoom mode\n    \"\"\"\nreturn ZOOM_MODE.inverse[self.zoomMode()]\n</code></pre>"},{"location":"qt_modules/pdfwidgets/PdfView.html#prettyqt.pdfwidgets.pdfview.PdfView.set_page_mode","title":"<code>set_page_mode(mode: PageModeStr | QtPdfWidgets.QPdfView.PageMode)</code>","text":"<p>Set the page mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PageModeStr | QtPdfWidgets.QPdfView.PageMode</code> <p>page mode</p> required Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_page_mode(self, mode: PageModeStr | QtPdfWidgets.QPdfView.PageMode):\n\"\"\"Set the page mode.\n    Args:\n        mode: page mode\n    \"\"\"\nself.setPageMode(PAGE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/pdfwidgets/PdfView.html#prettyqt.pdfwidgets.pdfview.PdfView.set_zoom_mode","title":"<code>set_zoom_mode(mode: ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode)</code>","text":"<p>Set the zoom mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode</code> <p>zoom mode</p> required Source code in <code>prettyqt\\pdfwidgets\\pdfview.py</code> <pre><code>def set_zoom_mode(self, mode: ZoomModeStr | QtPdfWidgets.QPdfView.ZoomMode):\n\"\"\"Set the zoom mode.\n    Args:\n        mode: zoom mode\n    \"\"\"\nself.setZoomMode(ZOOM_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/pdfwidgets/PdfView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500540880[\"pdfwidgets.PdfView\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103500567760[\"QtPdfWidgets.QPdfView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261131200 --&gt; 2103500540880\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103500567760 --&gt; 2103500540880\n  2103259751600 --&gt; 2103500567760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/pdfwidgets/PdfView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>document</code> QPdfDocument <code>pageMode</code> QPdfView::PageMode <code>zoomMode</code> QPdfView::ZoomMode <code>zoomFactor</code> double <code>pageSpacing</code> int <code>documentMargins</code> QMargins"},{"location":"qt_modules/pdfwidgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pdfwidgets</li> <li>PdfView</li> </ul>"},{"location":"qt_modules/positioning/index.html","title":"positioning","text":"<p>Provides access to position, satellite info and area monitoring classes.</p> Name Children Inherits GeoCircleprettyqt.positioning.geocircle <ul><li>GeoShapeMixin</li><li>QGeoCircle</li></ul> GeoRectangleprettyqt.positioning.georectangle <ul><li>GeoShapeMixin</li><li>QGeoRectangle</li></ul> GeoShapeMixinprettyqt.positioning.geoshape <ul><li>GeoShape</li><li>GeoRectangle</li><li>GeoCircle</li><li>GeoPath</li><li>GeoPolygon</li></ul> <ul><li>object</li></ul> GeoLocationprettyqt.positioning.geolocation <ul><li>QGeoLocation</li></ul> GeoPositionInfoprettyqt.positioning.geopositioninfo <ul><li>QGeoPositionInfo</li></ul> GeoShapeprettyqt.positioning.geoshape <ul><li>GeoShapeMixin</li><li>QGeoShape</li></ul> GeoPositionInfoSourceprettyqt.positioning.geopositioninfosource <ul><li>GeoPositionInfoSourceMixin</li><li>QGeoPositionInfoSource</li></ul> GeoAddressprettyqt.positioning.geoaddress <ul><li>QGeoAddress</li></ul> GeoCoordinateprettyqt.positioning.geocoordinate <ul><li>QGeoCoordinate</li></ul> NmeaPositionInfoSourceprettyqt.positioning.nmeapositioninginfosource <ul><li>GeoPositionInfoSourceMixin</li><li>QNmeaPositionInfoSource</li></ul> GeoPositionInfoSourceMixinprettyqt.positioning.geopositioninfosource <ul><li>GeoPositionInfoSource</li><li>NmeaPositionInfoSource</li></ul> <ul><li>ObjectMixin</li></ul> GeoSatelliteInfoSourceprettyqt.positioning.geosatelliteinfosource <ul><li>ObjectMixin</li><li>QGeoSatelliteInfoSource</li></ul> GeoPathprettyqt.positioning.geopath <ul><li>GeoShapeMixin</li><li>QGeoPath</li></ul> GeoSatelliteInfoprettyqt.positioning.geosatelliteinfo <ul><li>QGeoSatelliteInfo</li></ul> GeoAreaMonitorSourceprettyqt.positioning.geoareamonitorsource <ul><li>ObjectMixin</li><li>QGeoAreaMonitorSource</li></ul> GeoPolygonprettyqt.positioning.geopolygon <ul><li>GeoShapeMixin</li><li>QGeoPolygon</li></ul> GeoAreaMonitorInfoprettyqt.positioning.geoareamonitorinfo <ul><li>QGeoAreaMonitorInfo</li></ul>"},{"location":"qt_modules/positioning/GeoAddress.html","title":"GeoAddress","text":"<p>Qt Base Class: QGeoAddress</p> <p>Signature: <code>QGeoAddress(self) -&gt; None QGeoAddress(self, other: PySide6.QtPositioning.QGeoAddress) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoAddress.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtPositioning.QGeoAddress</code></p> Source code in <code>prettyqt\\positioning\\geoaddress.py</code> <pre><code>class GeoAddress(QtPositioning.QGeoAddress):\ndef __str__(self):\nreturn self.text()\n</code></pre>"},{"location":"qt_modules/positioning/GeoAddress.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265330320[\"positioning.GeoAddress\"]\n  2103499442272[\"QtPositioning.QGeoAddress\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499442272 --&gt; 2103265330320\n  2103206874128 --&gt; 2103499442272\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoAreaMonitorInfo.html","title":"GeoAreaMonitorInfo","text":"<p>Qt Base Class: QGeoAreaMonitorInfo</p> <p>Signature: <code>QGeoAreaMonitorInfo(self, name: str = '') -&gt; None QGeoAreaMonitorInfo(self, other: Union[PySide6.QtPositioning.QGeoAreaMonitorInfo, str]) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoAreaMonitorInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtPositioning.QGeoAreaMonitorInfo</code></p> Source code in <code>prettyqt\\positioning\\geoareamonitorinfo.py</code> <pre><code>class GeoAreaMonitorInfo(QtPositioning.QGeoAreaMonitorInfo):\ndef __str__(self):\nreturn self.name()\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef get_area(self) -&gt; QtPositioning.QGeoShape:\narea = self.area()\nmatch area:\ncase QtPositioning.QGeoCircle():\nreturn positioning.GeoCircle(area)\ncase QtPositioning.QGeoRectangle():\nreturn positioning.GeoRectangle(area)\ncase QtPositioning.QGeoPath():\nreturn positioning.GeoPath(area)\ncase QtPositioning.QGeoPolygon():\nreturn positioning.GeoPolygon(area)\ncase QtPositioning.QGeoShape():\nreturn positioning.GeoShape(area)\ncase _:\nraise RuntimeError\ndef get_expiration(self) -&gt; core.DateTime:\nreturn core.DateTime(self.expiration())\n</code></pre>"},{"location":"qt_modules/positioning/GeoAreaMonitorInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265317840[\"positioning.GeoAreaMonitorInfo\"]\n  2103499438432[\"QtPositioning.QGeoAreaMonitorInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499438432 --&gt; 2103265317840\n  2103206874128 --&gt; 2103499438432\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoAreaMonitorSource.html","title":"GeoAreaMonitorSource","text":"<p>Qt Base Class: QGeoAreaMonitorSource</p> <p>Signature: <code>QGeoAreaMonitorSource(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoAreaMonitorSource.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtPositioning.QGeoAreaMonitorSource</code></p> Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>class GeoAreaMonitorSource(core.ObjectMixin, QtPositioning.QGeoAreaMonitorSource):\ndef __str__(self):\nreturn self.sourceName()\ndef __repr__(self):\nreturn get_repr(self, self.name())\ndef get_error(self) -&gt; AreaMonitorFeatureStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoAreaMonitorSource.html#prettyqt.positioning.geoareamonitorsource.GeoAreaMonitorSource.get_error","title":"<code>get_error() -&gt; AreaMonitorFeatureStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\positioning\\geoareamonitorsource.py</code> <pre><code>def get_error(self) -&gt; AreaMonitorFeatureStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoAreaMonitorSource.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265327440[\"positioning.GeoAreaMonitorSource\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103265244880[\"QtPositioning.QGeoAreaMonitorSource\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103265327440\n  140736120080256 --&gt; 2103255067472\n  2103265244880 --&gt; 2103265327440\n  2103254677056 --&gt; 2103265244880\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoAreaMonitorSource.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/positioning/GeoCircle.html","title":"GeoCircle","text":"<p>Qt Base Class: QGeoCircle</p> <p>Signature: <code>QGeoCircle(self) -&gt; None QGeoCircle(self, center: PySide6.QtPositioning.QGeoCoordinate, radius: float = -1.0) -&gt; None QGeoCircle(self, other: PySide6.QtPositioning.QGeoShape) -&gt; None QGeoCircle(self, other: Union[PySide6.QtPositioning.QGeoCircle, PySide6.QtPositioning.QGeoCoordinate, PySide6.QtPositioning.QGeoShape]) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoCircle.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoCircle</code></p> Source code in <code>prettyqt\\positioning\\geocircle.py</code> <pre><code>class GeoCircle(positioning.GeoShapeMixin, QtPositioning.QGeoCircle):\ndef __init__(\nself,\ncenter_or_other: None\n| (\nQtPositioning.QGeoShape | QtPositioning.QGeoCoordinate | tuple[float, float]\n) = None,\nradius: float | None = None,\n):\nif center_or_other is None:\nsuper().__init__()\nelse:\nif radius is None:\nradius = -1\nif isinstance(center_or_other, tuple):\ncenter_or_other = QtPositioning.QGeoCoordinate(*center_or_other)\nsuper().__init__(center_or_other, radius)\ndef __repr__(self):\nreturn get_repr(self, self.get_center(), self.radius())\ndef get_center(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.center())\n</code></pre>"},{"location":"qt_modules/positioning/GeoCircle.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265316880[\"positioning.GeoCircle\"]\n  2103265332240[\"positioning.GeoShapeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499449952[\"QtPositioning.QGeoCircle\"]\n  2103499413472[\"QtPositioning.QGeoShape\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265332240 --&gt; 2103265316880\n  140736120080256 --&gt; 2103265332240\n  2103499449952 --&gt; 2103265316880\n  2103499413472 --&gt; 2103499449952\n  2103206874128 --&gt; 2103499413472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoCoordinate.html","title":"GeoCoordinate","text":"<p>Qt Base Class: QGeoCoordinate</p> <p>Signature: <code>QGeoCoordinate(self) -&gt; None QGeoCoordinate(self, latitude: float, longitude: float) -&gt; None QGeoCoordinate(self, latitude: float, longitude: float, altitude: float) -&gt; None QGeoCoordinate(self, other: PySide6.QtPositioning.QGeoCoordinate) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoCoordinate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtPositioning.QGeoCoordinate</code></p> Source code in <code>prettyqt\\positioning\\geocoordinate.py</code> <pre><code>class GeoCoordinate(QtPositioning.QGeoCoordinate):\ndef __str__(self):\nreturn self.toString()\ndef __format__(self, format_spec: CoordinateFormatStr):\nreturn self.toString(COORDINATE_FORMAT[format_spec])\ndef __repr__(self):\nreturn get_repr(self, self.latitude(), self.longitude())\ndef __bool__(self):\nreturn self.isValid()\ndef get_type(self) -&gt; str:\nreturn COORDINATE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoCoordinate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265338000[\"positioning.GeoCoordinate\"]\n  2103499447072[\"QtPositioning.QGeoCoordinate\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499447072 --&gt; 2103265338000\n  2103206874128 --&gt; 2103499447072\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoLocation.html","title":"GeoLocation","text":"<p>Qt Base Class: QGeoLocation</p> <p>Signature: <code>QGeoLocation(self) -&gt; None QGeoLocation(self, other: PySide6.QtPositioning.QGeoLocation) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoLocation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtPositioning.QGeoLocation</code></p> Source code in <code>prettyqt\\positioning\\geolocation.py</code> <pre><code>class GeoLocation(QtPositioning.QGeoLocation):\ndef get_address(self) -&gt; positioning.GeoAddress:\nreturn positioning.GeoAddress(self.address())\ndef get_coordinate(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinate())\ndef get_bounding_shape(self) -&gt; positioning.GeoShape:\nreturn positioning.GeoShape(self.boundingShape())\n</code></pre>"},{"location":"qt_modules/positioning/GeoLocation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265338960[\"positioning.GeoLocation\"]\n  2103499434592[\"QtPositioning.QGeoLocation\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499434592 --&gt; 2103265338960\n  2103206874128 --&gt; 2103499434592\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoPath.html","title":"GeoPath","text":"<p>Qt Base Class: QGeoPath</p> <p>Signature: <code>QGeoPath(self) -&gt; None QGeoPath(self, other: PySide6.QtPositioning.QGeoShape) -&gt; None QGeoPath(self, other: Union[PySide6.QtPositioning.QGeoPath, PySide6.QtPositioning.QGeoShape, Sequence[PySide6.QtPositioning.QGeoCoordinate]]) -&gt; None QGeoPath(self, path: Sequence[PySide6.QtPositioning.QGeoCoordinate], width: float = 0.0) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoPath.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoPath</code></p> Source code in <code>prettyqt\\positioning\\geopath.py</code> <pre><code>class GeoPath(positioning.GeoShapeMixin, QtPositioning.QGeoPath):\ndef __len__(self):\nreturn self.size()\ndef __getitem__(self, index: int) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinateAt(index))\ndef __setitem__(self, index: int, value: QtPositioning.QGeoCoordinate):\nself.replaceCoordinate(index, value)\ndef __delitem__(self, index: int):\nself.removeCoordinate(index)\ndef __add__(self, other: QtPositioning.QGeoCoordinate):\nself.addCoordinate(other)\nreturn self\ndef __repr__(self):\n# p = \", \".join([f\"{p!r}\" for p in self.get_path()])\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef get_path(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.path()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoPath.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265336080[\"positioning.GeoPath\"]\n  2103265332240[\"positioning.GeoShapeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499435552[\"QtPositioning.QGeoPath\"]\n  2103499413472[\"QtPositioning.QGeoShape\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265332240 --&gt; 2103265336080\n  140736120080256 --&gt; 2103265332240\n  2103499435552 --&gt; 2103265336080\n  2103499413472 --&gt; 2103499435552\n  2103206874128 --&gt; 2103499413472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoPolygon.html","title":"GeoPolygon","text":"<p>Qt Base Class: QGeoPolygon</p> <p>Signature: <code>QGeoPolygon(self) -&gt; None QGeoPolygon(self, other: PySide6.QtPositioning.QGeoShape) -&gt; None QGeoPolygon(self, other: Union[PySide6.QtPositioning.QGeoPolygon, PySide6.QtPositioning.QGeoShape, Sequence[PySide6.QtPositioning.QGeoCoordinate]]) -&gt; None QGeoPolygon(self, path: Sequence[PySide6.QtPositioning.QGeoCoordinate]) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoPolygon.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoPolygon</code></p> Source code in <code>prettyqt\\positioning\\geopolygon.py</code> <pre><code>class GeoPolygon(positioning.GeoShapeMixin, QtPositioning.QGeoPolygon):\ndef __len__(self):\nreturn self.size()\ndef __repr__(self):\n# p = \", \".join([f\"{p!r}\" for p in self.get_path()])\nreturn f\"{type(self).__name__}(&lt;{len(self)} points&gt;)\"\ndef __getitem__(self, index: int) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinateAt(index))\ndef __setitem__(self, index: int, value: QtPositioning.QGeoCoordinate):\nself.replaceCoordinate(index, value)\ndef __delitem__(self, index: int):\nself.removeCoordinate(index)\ndef __add__(self, other: QtPositioning.QGeoCoordinate):\nself.addCoordinate(other)\nreturn self\ndef get_hole_path(self, index: int) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.holePath(index)]\ndef get_perimeter(self) -&gt; list[positioning.GeoCoordinate]:\nreturn [positioning.GeoCoordinate(p) for p in self.perimeter()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoPolygon.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265318800[\"positioning.GeoPolygon\"]\n  2103265332240[\"positioning.GeoShapeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499427872[\"QtPositioning.QGeoPolygon\"]\n  2103499413472[\"QtPositioning.QGeoShape\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265332240 --&gt; 2103265318800\n  140736120080256 --&gt; 2103265332240\n  2103499427872 --&gt; 2103265318800\n  2103499413472 --&gt; 2103499427872\n  2103206874128 --&gt; 2103499413472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfo.html","title":"GeoPositionInfo","text":"<p>Qt Base Class: QGeoPositionInfo</p> <p>Signature: <code>QGeoPositionInfo(self) -&gt; None QGeoPositionInfo(self, coordinate: PySide6.QtPositioning.QGeoCoordinate, updateTime: PySide6.QtCore.QDateTime) -&gt; None QGeoPositionInfo(self, other: PySide6.QtPositioning.QGeoPositionInfo) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoPositionInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtPositioning.QGeoPositionInfo</code></p> Source code in <code>prettyqt\\positioning\\geopositioninfo.py</code> <pre><code>class GeoPositionInfo(QtPositioning.QGeoPositionInfo):\ndef __repr__(self):\nreturn get_repr(self, self.get_coordinate(), self.get_timestamp())\ndef __contains__(self, index: AttributeStr):\nreturn self.hasAttribute(ATTRIBUTE[index])\ndef __getitem__(self, index: AttributeStr) -&gt; float:\nreturn self.attribute(ATTRIBUTE[index])\ndef __setitem__(self, index: AttributeStr, value: float):\nself.setAttribute(ATTRIBUTE[index], value)\ndef __delitem__(self, index: AttributeStr):\nreturn self.removeAttribute(ATTRIBUTE[index])\ndef __bool__(self):\nreturn self.isValid()\ndef get_coordinate(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.coordinate())\ndef get_timestamp(self) -&gt; core.DateTime:\nreturn core.DateTime(self.timestamp())\ndef set_timestamp(self, timestamp: datatypes.DateTimeType):\nself.setTimestamp(datatypes.to_datetime(timestamp))\n</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265333200[\"positioning.GeoPositionInfo\"]\n  2103499421152[\"QtPositioning.QGeoPositionInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499421152 --&gt; 2103265333200\n  2103206874128 --&gt; 2103499421152\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSource.html","title":"GeoPositionInfoSource","text":"<p>Qt Base Class: QGeoPositionInfoSource</p> <p>Signature: <code>QGeoPositionInfoSource(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoPositionInfoSource.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GeoPositionInfoSourceMixin</code>, <code>QtPositioning.QGeoPositionInfoSource</code></p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>class GeoPositionInfoSource(\nGeoPositionInfoSourceMixin, QtPositioning.QGeoPositionInfoSource\n):\npass\n</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSource.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265340880[\"positioning.GeoPositionInfoSource\"]\n  2103265329360[\"positioning.GeoPositionInfoSourceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499439392[\"QtPositioning.QGeoPositionInfoSource\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265329360 --&gt; 2103265340880\n  2103255067472 --&gt; 2103265329360\n  140736120080256 --&gt; 2103255067472\n  2103499439392 --&gt; 2103265340880\n  2103254677056 --&gt; 2103499439392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSource.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>updateInterval</code> int <code>minimumUpdateInterval</code> int <code>sourceName</code> QString <code>preferredPositioningMethods</code> QFlags"},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html","title":"GeoPositionInfoSourceMixin","text":""},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>class GeoPositionInfoSourceMixin(core.ObjectMixin):\ndef __str__(self):\nreturn self.sourceName()\ndef __repr__(self):\nreturn get_repr(self)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERRORS.inverse[self.error()]\ndef set_preferred_positioning_methods(self, *methods: PositioningMethodStr):\n\"\"\"Set preferred positioning methods.\n        Args:\n            methods: positioning methods to use\n        \"\"\"\nflags = POSITIONING_METHODS.merge_flags(methods)\nself.setPreferredPositioningMethods(flags)\ndef get_preferred_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of preferred positioning methods.\n        Returns:\n            list of preferred positioning methods\n        \"\"\"\nreturn POSITIONING_METHODS.get_list(self.preferredPositioningMethods())\ndef get_supported_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of supported positioning methods.\n        Returns:\n            list of supported positioning methods\n        \"\"\"\nreturn POSITIONING_METHODS.get_list(self.supportedPositioningMethods())\n</code></pre> Name Children Inherits GeoPositionInfoSourceprettyqt.positioning.geopositioninfosource <ul><li>GeoPositionInfoSourceMixin</li><li>QGeoPositionInfoSource</li></ul> NmeaPositionInfoSourceprettyqt.positioning.nmeapositioninginfosource <ul><li>GeoPositionInfoSourceMixin</li><li>QNmeaPositionInfoSource</li></ul>"},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERRORS.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_preferred_positioning_methods","title":"<code>get_preferred_positioning_methods() -&gt; list[PositioningMethodStr]</code>","text":"<p>Return list of preferred positioning methods.</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_preferred_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of preferred positioning methods.\n    Returns:\n        list of preferred positioning methods\n    \"\"\"\nreturn POSITIONING_METHODS.get_list(self.preferredPositioningMethods())\n</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.get_supported_positioning_methods","title":"<code>get_supported_positioning_methods() -&gt; list[PositioningMethodStr]</code>","text":"<p>Return list of supported positioning methods.</p> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def get_supported_positioning_methods(self) -&gt; list[PositioningMethodStr]:\n\"\"\"Return list of supported positioning methods.\n    Returns:\n        list of supported positioning methods\n    \"\"\"\nreturn POSITIONING_METHODS.get_list(self.supportedPositioningMethods())\n</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html#prettyqt.positioning.geopositioninfosource.GeoPositionInfoSourceMixin.set_preferred_positioning_methods","title":"<code>set_preferred_positioning_methods(*methods: PositioningMethodStr)</code>","text":"<p>Set preferred positioning methods.</p> <p>Parameters:</p> Name Type Description Default <code>methods</code> <code>PositioningMethodStr</code> <p>positioning methods to use</p> <code>()</code> Source code in <code>prettyqt\\positioning\\geopositioninfosource.py</code> <pre><code>def set_preferred_positioning_methods(self, *methods: PositioningMethodStr):\n\"\"\"Set preferred positioning methods.\n    Args:\n        methods: positioning methods to use\n    \"\"\"\nflags = POSITIONING_METHODS.merge_flags(methods)\nself.setPreferredPositioningMethods(flags)\n</code></pre>"},{"location":"qt_modules/positioning/GeoPositionInfoSourceMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265329360[\"positioning.GeoPositionInfoSourceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103265329360\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/positioning/GeoRectangle.html","title":"GeoRectangle","text":"<p>Qt Base Class: QGeoRectangle</p> <p>Signature: <code>QGeoRectangle(self) -&gt; None QGeoRectangle(self, center: PySide6.QtPositioning.QGeoCoordinate, degreesWidth: float, degreesHeight: float) -&gt; None QGeoRectangle(self, coordinates: Sequence[PySide6.QtPositioning.QGeoCoordinate]) -&gt; None QGeoRectangle(self, other: PySide6.QtPositioning.QGeoShape) -&gt; None QGeoRectangle(self, other: Union[PySide6.QtPositioning.QGeoRectangle, PySide6.QtPositioning.QGeoShape, Sequence[PySide6.QtPositioning.QGeoCoordinate]]) -&gt; None QGeoRectangle(self, topLeft: PySide6.QtPositioning.QGeoCoordinate, bottomRight: PySide6.QtPositioning.QGeoCoordinate) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoRectangle.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>positioning.GeoShapeMixin</code>, <code>QtPositioning.QGeoRectangle</code></p> Source code in <code>prettyqt\\positioning\\georectangle.py</code> <pre><code>class GeoRectangle(positioning.GeoShapeMixin, QtPositioning.QGeoRectangle):\ndef __repr__(self):\nreturn get_repr(self, self.get_top_left(), self.get_bottom_right())\ndef get_top_left(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.topLeft())\ndef get_bottom_right(self) -&gt; positioning.GeoCoordinate:\nreturn positioning.GeoCoordinate(self.bottomRight())\n</code></pre>"},{"location":"qt_modules/positioning/GeoRectangle.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265339920[\"positioning.GeoRectangle\"]\n  2103265332240[\"positioning.GeoShapeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499416352[\"QtPositioning.QGeoRectangle\"]\n  2103499413472[\"QtPositioning.QGeoShape\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265332240 --&gt; 2103265339920\n  140736120080256 --&gt; 2103265332240\n  2103499416352 --&gt; 2103265339920\n  2103499413472 --&gt; 2103499416352\n  2103206874128 --&gt; 2103499413472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfo.html","title":"GeoSatelliteInfo","text":"<p>Qt Base Class: QGeoSatelliteInfo</p> <p>Signature: <code>QGeoSatelliteInfo(self) -&gt; None QGeoSatelliteInfo(self, other: PySide6.QtPositioning.QGeoSatelliteInfo) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoSatelliteInfo.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtPositioning.QGeoSatelliteInfo</code></p> Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>class GeoSatelliteInfo(QtPositioning.QGeoSatelliteInfo):\ndef __getitem__(self, index: AttributeStr):\nreturn self.attribute(ATTRIBUTE[index])\ndef __setitem__(self, index: AttributeStr, value: float):\nself.setAttribute(ATTRIBUTE[index], value)\ndef __delitem__(self, index: AttributeStr):\nself.removeAttribute(ATTRIBUTE[index])\ndef __contains__(self, value: AttributeStr):\nreturn self.hasAttribute(ATTRIBUTE[value])\ndef __int__(self):\nreturn self.satelliteIdentifier()\ndef set_satellite_system(\nself, system: SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem\n):\n\"\"\"Set satellite system.\n        Args:\n            system: satellite system to use\n        \"\"\"\nself.setSatelliteSystem(SATELLITE_SYSTEMS.get_enum_value(system))\ndef get_satellite_system(self) -&gt; SatelliteSystemStr:\n\"\"\"Return satellite system.\n        Returns:\n            satellite system\n        \"\"\"\nreturn SATELLITE_SYSTEMS.inverse[self.satelliteSystem()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfo.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.get_satellite_system","title":"<code>get_satellite_system() -&gt; SatelliteSystemStr</code>","text":"<p>Return satellite system.</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def get_satellite_system(self) -&gt; SatelliteSystemStr:\n\"\"\"Return satellite system.\n    Returns:\n        satellite system\n    \"\"\"\nreturn SATELLITE_SYSTEMS.inverse[self.satelliteSystem()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfo.html#prettyqt.positioning.geosatelliteinfo.GeoSatelliteInfo.set_satellite_system","title":"<code>set_satellite_system(system: SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem)</code>","text":"<p>Set satellite system.</p> <p>Parameters:</p> Name Type Description Default <code>system</code> <code>SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem</code> <p>satellite system to use</p> required Source code in <code>prettyqt\\positioning\\geosatelliteinfo.py</code> <pre><code>def set_satellite_system(\nself, system: SatelliteSystemStr | QtPositioning.QGeoSatelliteInfo.SatelliteSystem\n):\n\"\"\"Set satellite system.\n    Args:\n        system: satellite system to use\n    \"\"\"\nself.setSatelliteSystem(SATELLITE_SYSTEMS.get_enum_value(system))\n</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfo.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265328400[\"positioning.GeoSatelliteInfo\"]\n  2103499415392[\"QtPositioning.QGeoSatelliteInfo\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499415392 --&gt; 2103265328400\n  2103206874128 --&gt; 2103499415392\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfoSource.html","title":"GeoSatelliteInfoSource","text":"<p>Qt Base Class: QGeoSatelliteInfoSource</p> <p>Signature: <code>QGeoSatelliteInfoSource(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoSatelliteInfoSource.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtPositioning.QGeoSatelliteInfoSource</code></p> Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>class GeoSatelliteInfoSource(core.ObjectMixin, QtPositioning.QGeoSatelliteInfoSource):\ndef __str__(self):\nreturn self.sourceName()\ndef __repr__(self):\nreturn get_repr(self)\ndef get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n        Returns:\n            error type\n        \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfoSource.html#prettyqt.positioning.geosatelliteinfosource.GeoSatelliteInfoSource.get_error","title":"<code>get_error() -&gt; ErrorStr</code>","text":"<p>Return error type.</p> Source code in <code>prettyqt\\positioning\\geosatelliteinfosource.py</code> <pre><code>def get_error(self) -&gt; ErrorStr:\n\"\"\"Return error type.\n    Returns:\n        error type\n    \"\"\"\nreturn ERROR.inverse[self.error()]\n</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfoSource.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265321680[\"positioning.GeoSatelliteInfoSource\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499436512[\"QtPositioning.QGeoSatelliteInfoSource\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103265321680\n  140736120080256 --&gt; 2103255067472\n  2103499436512 --&gt; 2103265321680\n  2103254677056 --&gt; 2103499436512\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoSatelliteInfoSource.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>updateInterval</code> int <code>minimumUpdateInterval</code> int"},{"location":"qt_modules/positioning/GeoShape.html","title":"GeoShape","text":"<p>Qt Base Class: QGeoShape</p> <p>Signature: <code>QGeoShape(self) -&gt; None QGeoShape(self, other: PySide6.QtPositioning.QGeoShape) -&gt; None</code></p>"},{"location":"qt_modules/positioning/GeoShape.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GeoShapeMixin</code>, <code>QtPositioning.QGeoShape</code></p> Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>class GeoShape(GeoShapeMixin, QtPositioning.QGeoShape):\npass\n</code></pre>"},{"location":"qt_modules/positioning/GeoShape.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265334160[\"positioning.GeoShape\"]\n  2103265332240[\"positioning.GeoShapeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499413472[\"QtPositioning.QGeoShape\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265332240 --&gt; 2103265334160\n  140736120080256 --&gt; 2103265332240\n  2103499413472 --&gt; 2103265334160\n  2103206874128 --&gt; 2103499413472\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/GeoShapeMixin.html","title":"GeoShapeMixin","text":""},{"location":"qt_modules/positioning/GeoShapeMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\positioning\\geoshape.py</code> <pre><code>class GeoShapeMixin:\ndef __contains__(self, other: QtPositioning.QGeoCoordinate):\nreturn self.contains(other)\ndef __str__(self):\nreturn self.toString()[1:]\ndef get_type(self) -&gt; str:\nreturn SHAPE_TYPES.inverse[self.type()]\n</code></pre> Name Children Inherits GeoShapeprettyqt.positioning.geoshape <ul><li>GeoShapeMixin</li><li>QGeoShape</li></ul> GeoRectangleprettyqt.positioning.georectangle <ul><li>GeoShapeMixin</li><li>QGeoRectangle</li></ul> GeoCircleprettyqt.positioning.geocircle <ul><li>GeoShapeMixin</li><li>QGeoCircle</li></ul> GeoPathprettyqt.positioning.geopath <ul><li>GeoShapeMixin</li><li>QGeoPath</li></ul> GeoPolygonprettyqt.positioning.geopolygon <ul><li>GeoShapeMixin</li><li>QGeoPolygon</li></ul>"},{"location":"qt_modules/positioning/GeoShapeMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265332240[\"positioning.GeoShapeMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103265332240</code></pre>"},{"location":"qt_modules/positioning/NmeaPositionInfoSource.html","title":"NmeaPositionInfoSource","text":"<p>Qt Base Class: QNmeaPositionInfoSource</p> <p>Signature: <code>QNmeaPositionInfoSource(self, updateMode: PySide6.QtPositioning.QNmeaPositionInfoSource.UpdateMode, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/positioning/NmeaPositionInfoSource.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>positioning.GeoPositionInfoSourceMixin</code>, <code>QtPositioning.QNmeaPositionInfoSource</code></p> Source code in <code>prettyqt\\positioning\\nmeapositioninginfosource.py</code> <pre><code>class NmeaPositionInfoSource(\npositioning.GeoPositionInfoSourceMixin, QtPositioning.QNmeaPositionInfoSource\n):\ndef __init__(\nself,\nupdate_mode: QtPositioning.QNmeaPositionInfoSource.UpdateMode | str,\nparent: QtCore.QObject,\n):\nif isinstance(update_mode, QtPositioning.QNmeaPositionInfoSource.UpdateMode):\nmode = update_mode\nelse:\nmode = UPDATE_MODES[update_mode]\nsuper().__init__(mode, parent)\ndef __repr__(self):\nreturn get_repr(self)\ndef get_update_mode(self) -&gt; str:\nreturn UPDATE_MODES.inverse[self.updateMode()]\n</code></pre>"},{"location":"qt_modules/positioning/NmeaPositionInfoSource.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103265331280[\"positioning.NmeaPositionInfoSource\"]\n  2103265329360[\"positioning.GeoPositionInfoSourceMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499031712[\"QtPositioning.QNmeaPositionInfoSource\"]\n  2103499439392[\"QtPositioning.QGeoPositionInfoSource\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103265329360 --&gt; 2103265331280\n  2103255067472 --&gt; 2103265329360\n  140736120080256 --&gt; 2103255067472\n  2103499031712 --&gt; 2103265331280\n  2103499439392 --&gt; 2103499031712\n  2103254677056 --&gt; 2103499439392\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/positioning/NmeaPositionInfoSource.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>updateInterval</code> int <code>minimumUpdateInterval</code> int <code>sourceName</code> QString <code>preferredPositioningMethods</code> QFlags"},{"location":"qt_modules/positioning/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>positioning</li> <li>GeoCircle</li> <li>GeoRectangle</li> <li>GeoShapeMixin</li> <li>GeoLocation</li> <li>GeoPositionInfo</li> <li>GeoShape</li> <li>GeoPositionInfoSource</li> <li>GeoAddress</li> <li>GeoCoordinate</li> <li>NmeaPositionInfoSource</li> <li>GeoPositionInfoSourceMixin</li> <li>GeoSatelliteInfoSource</li> <li>GeoPath</li> <li>GeoSatelliteInfo</li> <li>GeoAreaMonitorSource</li> <li>GeoPolygon</li> <li>GeoAreaMonitorInfo</li> </ul>"},{"location":"qt_modules/printsupport/index.html","title":"printsupport","text":"<p>Classes to make printing easier and more portable.</p> Name Children Inherits PrintPreviewDialogprettyqt.printsupport.printpreviewdialog <ul><li>DialogMixin</li><li>QPrintPreviewDialog</li></ul> PrintEngineprettyqt.printsupport.printengine <ul><li>QPrintEngine</li></ul> PrintDialogprettyqt.printsupport.printdialog <ul><li>AbstractPrintDialogMixin</li><li>QPrintDialog</li></ul> AbstractPrintDialogprettyqt.printsupport.abstractprintdialog <ul><li>AbstractPrintDialogMixin</li><li>QAbstractPrintDialog</li></ul> AbstractPrintDialogMixinprettyqt.printsupport.abstractprintdialog <ul><li>AbstractPrintDialog</li><li>PrintDialog</li></ul> <ul><li>DialogMixin</li></ul> PrintPreviewWidgetprettyqt.printsupport.printpreviewwidget <ul><li>WidgetMixin</li><li>QPrintPreviewWidget</li></ul> Printerprettyqt.printsupport.printer <ul><li>PagedPaintDeviceMixin</li><li>QPrinter</li></ul> PageSetupDialogprettyqt.printsupport.pagesetupdialog <ul><li>DialogMixin</li><li>QPageSetupDialog</li></ul>"},{"location":"qt_modules/printsupport/AbstractPrintDialog.html","title":"AbstractPrintDialog","text":"<p>Qt Base Class: QAbstractPrintDialog</p> <p>Signature: <code>QAbstractPrintDialog(self, printer: PySide6.QtPrintSupport.QPrinter, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/AbstractPrintDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractPrintDialogMixin</code>, <code>QtPrintSupport.QAbstractPrintDialog</code></p> <p>Base implementation for print dialogs used to configure printers.</p> Source code in <code>prettyqt\\printsupport\\abstractprintdialog.py</code> <pre><code>class AbstractPrintDialog(AbstractPrintDialogMixin, QtPrintSupport.QAbstractPrintDialog):\n\"\"\"Base implementation for print dialogs used to configure printers.\"\"\"\n</code></pre>"},{"location":"qt_modules/printsupport/AbstractPrintDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500575440[\"printsupport.AbstractPrintDialog\"]\n  2103500574480[\"printsupport.AbstractPrintDialogMixin\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499061472[\"QtPrintSupport.QAbstractPrintDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103500574480 --&gt; 2103500575440\n  2103261212800 --&gt; 2103500574480\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103499061472 --&gt; 2103500575440\n  2103259840880 --&gt; 2103499061472\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/printsupport/AbstractPrintDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"qt_modules/printsupport/AbstractPrintDialogMixin.html","title":"AbstractPrintDialogMixin","text":""},{"location":"qt_modules/printsupport/AbstractPrintDialogMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code></p> Source code in <code>prettyqt\\printsupport\\abstractprintdialog.py</code> <pre><code>class AbstractPrintDialogMixin(widgets.DialogMixin):\ndef get_print_range(self) -&gt; PrintRangeStr:\nreturn PRINT_RANGE.inverse[self.printRange()]\ndef set_print_range(\nself, print_range: PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange\n):\n\"\"\"Set print range.\n        Args:\n            print_range: print range\n        \"\"\"\nself.setPrintRange(PRINT_RANGE.get_enum_value(print_range))\n</code></pre> Name Children Inherits AbstractPrintDialogprettyqt.printsupport.abstractprintdialog <ul><li>AbstractPrintDialogMixin</li><li>QAbstractPrintDialog</li></ul> PrintDialogprettyqt.printsupport.printdialog <ul><li>AbstractPrintDialogMixin</li><li>QPrintDialog</li></ul>"},{"location":"qt_modules/printsupport/AbstractPrintDialogMixin.html#prettyqt.printsupport.abstractprintdialog.AbstractPrintDialogMixin.set_print_range","title":"<code>set_print_range(print_range: PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange)</code>","text":"<p>Set print range.</p> <p>Parameters:</p> Name Type Description Default <code>print_range</code> <code>PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange</code> <p>print range</p> required Source code in <code>prettyqt\\printsupport\\abstractprintdialog.py</code> <pre><code>def set_print_range(\nself, print_range: PrintRangeStr | QtPrintSupport.QAbstractPrintDialog.PrintRange\n):\n\"\"\"Set print range.\n    Args:\n        print_range: print range\n    \"\"\"\nself.setPrintRange(PRINT_RANGE.get_enum_value(print_range))\n</code></pre>"},{"location":"qt_modules/printsupport/AbstractPrintDialogMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500574480[\"printsupport.AbstractPrintDialogMixin\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261212800 --&gt; 2103500574480\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/printsupport/PageSetupDialog.html","title":"PageSetupDialog","text":"<p>Qt Base Class: QPageSetupDialog</p> <p>Signature: <code>QPageSetupDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPageSetupDialog(self, printer: PySide6.QtPrintSupport.QPrinter, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/PageSetupDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>QtPrintSupport.QPageSetupDialog</code></p> <p>Configuration dialog for the page-related options on a printer.</p> Source code in <code>prettyqt\\printsupport\\pagesetupdialog.py</code> <pre><code>class PageSetupDialog(widgets.DialogMixin, QtPrintSupport.QPageSetupDialog):\n\"\"\"Configuration dialog for the page-related options on a printer.\"\"\"\n@classmethod\ndef setup_example(cls):\nreturn None\n</code></pre>"},{"location":"qt_modules/printsupport/PageSetupDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500557200[\"printsupport.PageSetupDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499051872[\"QtPrintSupport.QPageSetupDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103500557200\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103499051872 --&gt; 2103500557200\n  2103259840880 --&gt; 2103499051872\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/printsupport/PageSetupDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"qt_modules/printsupport/PrintDialog.html","title":"PrintDialog","text":"<p>Qt Base Class: QPrintDialog</p> <p>Signature: <code>QPrintDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPrintDialog(self, printer: PySide6.QtPrintSupport.QPrinter, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/PrintDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>printsupport.AbstractPrintDialogMixin</code>, <code>printsupport.QPrintDialog</code></p> <p>Dialog for specifying the printer's configuration.</p> Source code in <code>prettyqt\\printsupport\\printdialog.py</code> <pre><code>class PrintDialog(printsupport.AbstractPrintDialogMixin, printsupport.QPrintDialog):\n\"\"\"Dialog for specifying the printer's configuration.\"\"\"\n@classmethod\ndef setup_example(cls):\nreturn None\n</code></pre>"},{"location":"qt_modules/printsupport/PrintDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500576400[\"printsupport.PrintDialog\"]\n  2103500574480[\"printsupport.AbstractPrintDialogMixin\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499063392[\"QtPrintSupport.QPrintDialog\"]\n  2103499061472[\"QtPrintSupport.QAbstractPrintDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103500574480 --&gt; 2103500576400\n  2103261212800 --&gt; 2103500574480\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103499063392 --&gt; 2103500576400\n  2103499061472 --&gt; 2103499063392\n  2103259840880 --&gt; 2103499061472\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/printsupport/PrintDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>options</code> QFlags"},{"location":"qt_modules/printsupport/PrintEngine.html","title":"PrintEngine","text":"<p>Qt Base Class: QPrintEngine</p> <p>Signature: <code>QPrintEngine(self) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/PrintEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>printsupport.QPrintEngine</code></p> <p>Defines an interface for how QPrinter interacts with a given printing subsystem.</p> Source code in <code>prettyqt\\printsupport\\printengine.py</code> <pre><code>class PrintEngine(printsupport.QPrintEngine):\n\"\"\"Defines an interface for how QPrinter interacts with a given printing subsystem.\"\"\"\ndef get_printer_state(self) -&gt; PrintEnginePropertyKeyStr:\nreturn printsupport.printer.PRINTER_STATE.inverse[self.printerState()]\n</code></pre>"},{"location":"qt_modules/printsupport/PrintEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500577360[\"printsupport.PrintEngine\"]\n  2103499008672[\"QtPrintSupport.QPrintEngine\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103499008672 --&gt; 2103500577360\n  2103206874128 --&gt; 2103499008672\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewDialog.html","title":"PrintPreviewDialog","text":"<p>Qt Base Class: QPrintPreviewDialog</p> <p>Signature: <code>QPrintPreviewDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QPrintPreviewDialog(self, printer: PySide6.QtPrintSupport.QPrinter, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/PrintPreviewDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>QtPrintSupport.QPrintPreviewDialog</code></p> <p>Dialog for previewing and configuring page layouts for printer output.</p> Source code in <code>prettyqt\\printsupport\\printpreviewdialog.py</code> <pre><code>class PrintPreviewDialog(widgets.DialogMixin, QtPrintSupport.QPrintPreviewDialog):\n\"\"\"Dialog for previewing and configuring page layouts for printer output.\"\"\"\n@classmethod\ndef setup_example(cls):\nreturn None\n</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500578320[\"printsupport.PrintPreviewDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499066272[\"QtPrintSupport.QPrintPreviewDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103500578320\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103499066272 --&gt; 2103500578320\n  2103259840880 --&gt; 2103499066272\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"qt_modules/printsupport/PrintPreviewWidget.html","title":"PrintPreviewWidget","text":"<p>Qt Base Class: QPrintPreviewWidget</p> <p>Signature: <code>QPrintPreviewWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QPrintPreviewWidget(self, printer: PySide6.QtPrintSupport.QPrinter, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/PrintPreviewWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtPrintSupport.QPrintPreviewWidget</code></p> <p>Widget for previewing page layouts for printer output.</p> Source code in <code>prettyqt\\printsupport\\printpreviewwidget.py</code> <pre><code>class PrintPreviewWidget(widgets.WidgetMixin, QtPrintSupport.QPrintPreviewWidget):\n\"\"\"Widget for previewing page layouts for printer output.\"\"\"\ndef get_view_mode(self) -&gt; ViewModeStr:\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_view_mode(\nself, mode: ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode\n):\n\"\"\"Set view mode.\n        Args:\n            mode: view mode\n        \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\ndef get_zoom_mode(self) -&gt; ZoomModeStr:\nreturn ZOOM_MODE.inverse[self.zoomMode()]\ndef set_zoom_mode(\nself, mode: ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode\n):\n\"\"\"Set zoom mode.\n        Args:\n            mode: zoom mode\n        \"\"\"\nself.setZoomMode(ZOOM_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewWidget.html#prettyqt.printsupport.printpreviewwidget.PrintPreviewWidget.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode</code> <p>view mode</p> required Source code in <code>prettyqt\\printsupport\\printpreviewwidget.py</code> <pre><code>def set_view_mode(\nself, mode: ViewModeStr | QtPrintSupport.QPrintPreviewWidget.ViewMode\n):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewWidget.html#prettyqt.printsupport.printpreviewwidget.PrintPreviewWidget.set_zoom_mode","title":"<code>set_zoom_mode(mode: ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode)</code>","text":"<p>Set zoom mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode</code> <p>zoom mode</p> required Source code in <code>prettyqt\\printsupport\\printpreviewwidget.py</code> <pre><code>def set_zoom_mode(\nself, mode: ZoomModeStr | QtPrintSupport.QPrintPreviewWidget.ZoomMode\n):\n\"\"\"Set zoom mode.\n    Args:\n        mode: zoom mode\n    \"\"\"\nself.setZoomMode(ZOOM_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500558160[\"printsupport.PrintPreviewWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103499057632[\"QtPrintSupport.QPrintPreviewWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103500558160\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103499057632 --&gt; 2103500558160\n  2103259691120 --&gt; 2103499057632\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/printsupport/PrintPreviewWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/printsupport/Printer.html","title":"Printer","text":"<p>Qt Base Class: QPrinter</p> <p>Signature: <code>QPrinter(self, mode: PySide6.QtPrintSupport.QPrinter.PrinterMode = Instance(PySide6.QtPrintSupport.QPrinter.PrinterMode.ScreenResolution)) -&gt; None QPrinter(self, printer: PySide6.QtPrintSupport.QPrinterInfo, mode: PySide6.QtPrintSupport.QPrinter.PrinterMode = Instance(PySide6.QtPrintSupport.QPrinter.PrinterMode.ScreenResolution)) -&gt; None</code></p>"},{"location":"qt_modules/printsupport/Printer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.PagedPaintDeviceMixin</code>, <code>QtPrintSupport.QPrinter</code></p> <p>Paint device that paints on a printer.</p> Source code in <code>prettyqt\\printsupport\\printer.py</code> <pre><code>class Printer(gui.PagedPaintDeviceMixin, QtPrintSupport.QPrinter):\n\"\"\"Paint device that paints on a printer.\"\"\"\n# def get_source(self) -&gt; pathlib.Path:\n#     return pathlib.Path(self.source().toLocalFile())\ndef get_duplex(self) -&gt; DuplexModeStr:\nreturn DUPLEX_MODE.inverse[self.duplex()]\ndef get_pdf_version(self) -&gt; gui.pagedpaintdevice.PdfVersionStr:\nreturn gui.pagedpaintdevice.PDF_VERSION.inverse[self.pdfVersion()]\ndef set_pdf_version(\nself,\nversion: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion,\n):\n\"\"\"Set pdf version.\n        Args:\n            version: pdf version\n        \"\"\"\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION.get_enum_value(version))\n</code></pre>"},{"location":"qt_modules/printsupport/Printer.html#prettyqt.printsupport.printer.Printer.set_pdf_version","title":"<code>set_pdf_version(version: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion)</code>","text":"<p>Set pdf version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion</code> <p>pdf version</p> required Source code in <code>prettyqt\\printsupport\\printer.py</code> <pre><code>def set_pdf_version(\nself,\nversion: gui.pagedpaintdevice.PdfVersionStr | gui.PagedPaintDevice.PdfVersion,\n):\n\"\"\"Set pdf version.\n    Args:\n        version: pdf version\n    \"\"\"\nself.setPdfVersion(gui.pagedpaintdevice.PDF_VERSION.get_enum_value(version))\n</code></pre>"},{"location":"qt_modules/printsupport/Printer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103500573520[\"printsupport.Printer\"]\n  2103260762576[\"gui.PagedPaintDeviceMixin\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103499035552[\"QtPrintSupport.QPrinter\"]\n  2103259479952[\"QtGui.QPagedPaintDevice\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260762576 --&gt; 2103500573520\n  2103260963216 --&gt; 2103260762576\n  140736120080256 --&gt; 2103260963216\n  2103499035552 --&gt; 2103500573520\n  2103259479952 --&gt; 2103499035552\n  2103259509712 --&gt; 2103259479952\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/printsupport/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>printsupport</li> <li>PrintPreviewDialog</li> <li>PrintEngine</li> <li>PrintDialog</li> <li>AbstractPrintDialog</li> <li>AbstractPrintDialogMixin</li> <li>PrintPreviewWidget</li> <li>Printer</li> <li>PageSetupDialog</li> </ul>"},{"location":"qt_modules/qml/index.html","title":"qml","text":"<p>Classes for QML and JavaScript languages.</p> Name Children Inherits QmlPropertyprettyqt.qml.qmlproperty <ul><li>QQmlProperty</li></ul> QmlEngineMixinprettyqt.qml.qmlengine <ul><li>QmlEngine</li><li>QmlApplicationEngine</li></ul> <ul><li>JSEngineMixin</li></ul> QmlExpressionprettyqt.qml.qmlexpression <ul><li>ObjectMixin</li><li>QQmlExpression</li></ul> JSValueIteratorprettyqt.qml.jsvalueiterator <ul><li>QJSValueIterator</li></ul> QmlComponentprettyqt.qml.qmlcomponent <ul><li>ObjectMixin</li><li>QQmlComponent</li></ul> QmlErrorprettyqt.qml.qmlerror <ul><li>QQmlError</li></ul> JSEngineprettyqt.qml.jsengine <ul><li>JSEngineMixin</li><li>QJSEngine</li></ul> JSValueprettyqt.qml.jsvalue <ul><li>QJSValue</li></ul> QmlParserStatusprettyqt.qml.qmlparserstatus <ul><li>QmlParserStatusMixin</li><li>QQmlParserStatus</li></ul> QmlApplicationEngineprettyqt.qml.qmlapplicationengine <ul><li>QmlEngineMixin</li><li>QQmlApplicationEngine</li></ul> QmlImageProviderBaseprettyqt.qml.qmlimageproviderbase <ul><li>QmlImageProviderBaseMixin</li><li>QQmlImageProviderBase</li></ul> QmlParserStatusMixinprettyqt.qml.qmlparserstatus <ul><li>QmlParserStatus</li><li>QuickItemMixin</li></ul> <ul><li>object</li></ul> QmlPropertyMapprettyqt.qml.qmlpropertymapAllows you to set key-value pairs that can be used in QML bindings. <ul><li><code>QmlPropertyMapMixin</code></li><li>QQmlPropertyMap</li><li><code>MutableMapping</code></li></ul> QmlImageProviderBaseMixinprettyqt.qml.qmlimageproviderbase <ul><li>QmlImageProviderBase</li><li>QuickImageProviderMixin</li></ul> <ul><li>object</li></ul> JSEngineMixinprettyqt.qml.jsengine <ul><li>JSEngine</li><li>QmlEngineMixin</li></ul> <ul><li>ObjectMixin</li></ul> QmlEngineprettyqt.qml.qmlengine <ul><li>QmlEngineMixin</li><li>QQmlEngine</li></ul>"},{"location":"qt_modules/qml/JSEngine.html","title":"JSEngine","text":"<p>Qt Base Class: QJSEngine</p> <p>Signature: <code>QJSEngine(self) -&gt; None QJSEngine(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/qml/JSEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>JSEngineMixin</code>, <code>qml.QJSEngine</code></p> <p>Environment for evaluating JavaScript code.</p> Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>class JSEngine(JSEngineMixin, qml.QJSEngine):\n\"\"\"Environment for evaluating JavaScript code.\"\"\"\n</code></pre>"},{"location":"qt_modules/qml/JSEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494149392[\"qml.JSEngine\"]\n  2103494161872[\"qml.JSEngineMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494092752[\"QtQml.QJSEngine\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494161872 --&gt; 2103494149392\n  2103255067472 --&gt; 2103494161872\n  140736120080256 --&gt; 2103255067472\n  2103494092752 --&gt; 2103494149392\n  2103254677056 --&gt; 2103494092752\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/JSEngine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>uiLanguage</code> QString"},{"location":"qt_modules/qml/JSEngineMixin.html","title":"JSEngineMixin","text":""},{"location":"qt_modules/qml/JSEngineMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\qml\\jsengine.py</code> <pre><code>class JSEngineMixin(core.ObjectMixin):\ndef install_extensions(self, extension: str, obj: qml.QJSValue | None = None):\nif obj is None:\nobj = qml.QJSValue()\nself.installExtensions(EXTENSIONS[extension], obj)\ndef new_array(self, length: int = 0) -&gt; qml.JSValue:\nreturn qml.JSValue(self.newArray(length))\ndef eval(self, program: str) -&gt; qml.JSValue:\nresult = self.evaluate(program)\nreturn qml.JSValue(result)  # type: ignore\n</code></pre> Name Children Inherits JSEngineprettyqt.qml.jsengine <ul><li>JSEngineMixin</li><li>QJSEngine</li></ul> QmlEngineMixinprettyqt.qml.qmlengine <ul><li>QmlEngine</li><li>QmlApplicationEngine</li></ul> <ul><li>JSEngineMixin</li></ul>"},{"location":"qt_modules/qml/JSEngineMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494161872[\"qml.JSEngineMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103494161872\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/qml/JSValue.html","title":"JSValue","text":"<p>Qt Base Class: QJSValue</p> <p>Signature: <code>QJSValue(self, other: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -&gt; None QJSValue(self, str: bytes) -&gt; None QJSValue(self, value: PySide6.QtQml.QJSValue.SpecialValue = Instance(PySide6.QtQml.QJSValue.SpecialValue.UndefinedValue)) -&gt; None QJSValue(self, value: str) -&gt; None QJSValue(self, value: bool) -&gt; None QJSValue(self, value: float) -&gt; None QJSValue(self, value: int) -&gt; None QJSValue(self, value: int) -&gt; None</code></p>"},{"location":"qt_modules/qml/JSValue.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>qml.QJSValue</code></p> <p>Acts as a container for Qt/JavaScript data types.</p> Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>class JSValue(qml.QJSValue):\n\"\"\"Acts as a container for Qt/JavaScript data types.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.toVariant())\ndef __len__(self):\nreturn self.property(\"length\").toVariant()\ndef __getitem__(self, index: int | str):\nreturn self.property(index).toVariant()\ndef __delitem__(self, index: str):\nself.deleteProperty(index)\ndef __setitem__(self, index: int | str, value):\nself.setProperty(index, value)\ndef __iter__(self):\niterator = qml.JSValueIterator(self)\nreturn iter(list(iterator))\ndef __contains__(self, index: str):\nreturn self.hasProperty(index)\ndef __call__(self, *args) -&gt; JSValue:\nresult = self.call(args)\nreturn JSValue(result)\ndef get_value(self):\nreturn self.toVariant()\ndef get_error_type(self) -&gt; ErrorTypeStr | None:\nif (error_type := self.errorType()) == qml.QJSValue.ErrorType(0):\nreturn None\nelse:\nreturn ERROR_TYPES.inverse[error_type]\n@classmethod\ndef from_object(cls, obj, jsengine: qml.QJSEngine) -&gt; Self:\n\"\"\"Convert any python object into a QJSValue (must happen in GUI thread).\"\"\"\nmatch obj:\ncase None:\nreturn cls()\ncase list() | tuple():\nlength = len(obj)\narray = cls(jsengine.newArray(length))\nfor i, v in enumerate(obj):\narray.setProperty(i, cls.from_object(v, jsengine))\nreturn array\ncase dict():\narray = cls(jsengine.newArray())\nfor k, v in obj.items():\narray.setProperty(k, cls.from_object(v, jsengine))\nreturn array\ncase _:\ntry:\nreturn cls(obj)\nexcept TypeError:\nlogger.debug(f\"unknown type: {obj}\")\nreturn cls()\n</code></pre>"},{"location":"qt_modules/qml/JSValue.html#prettyqt.qml.jsvalue.JSValue.from_object","title":"<code>from_object(obj, jsengine: qml.QJSEngine) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert any python object into a QJSValue (must happen in GUI thread).</p> Source code in <code>prettyqt\\qml\\jsvalue.py</code> <pre><code>@classmethod\ndef from_object(cls, obj, jsengine: qml.QJSEngine) -&gt; Self:\n\"\"\"Convert any python object into a QJSValue (must happen in GUI thread).\"\"\"\nmatch obj:\ncase None:\nreturn cls()\ncase list() | tuple():\nlength = len(obj)\narray = cls(jsengine.newArray(length))\nfor i, v in enumerate(obj):\narray.setProperty(i, cls.from_object(v, jsengine))\nreturn array\ncase dict():\narray = cls(jsengine.newArray())\nfor k, v in obj.items():\narray.setProperty(k, cls.from_object(v, jsengine))\nreturn array\ncase _:\ntry:\nreturn cls(obj)\nexcept TypeError:\nlogger.debug(f\"unknown type: {obj}\")\nreturn cls()\n</code></pre>"},{"location":"qt_modules/qml/JSValue.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494134032[\"qml.JSValue\"]\n  2103494100432[\"QtQml.QJSValue\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494100432 --&gt; 2103494134032\n  2103206874128 --&gt; 2103494100432\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/JSValueIterator.html","title":"JSValueIterator","text":"<p>Qt Base Class: QJSValueIterator</p> <p>Signature: <code>QJSValueIterator(self, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -&gt; None</code></p>"},{"location":"qt_modules/qml/JSValueIterator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtQml.QJSValueIterator</code></p> <p>Java-style iterator for JSValue.</p> Source code in <code>prettyqt\\qml\\jsvalueiterator.py</code> <pre><code>class JSValueIterator(QtQml.QJSValueIterator):\n\"\"\"Java-style iterator for JSValue.\"\"\"\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.next():\nreturn (self.name(), self.value().toVariant())\nraise StopIteration\n</code></pre>"},{"location":"qt_modules/qml/JSValueIterator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494134992[\"qml.JSValueIterator\"]\n  2103494089872[\"QtQml.QJSValueIterator\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494089872 --&gt; 2103494134992\n  2103206874128 --&gt; 2103494089872\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlApplicationEngine.html","title":"QmlApplicationEngine","text":"<p>Qt Base Class: QQmlApplicationEngine</p> <p>Signature: <code>QQmlApplicationEngine(self, filePath: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlApplicationEngine(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlApplicationEngine(self, uri: str, typeName: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlApplicationEngine(self, url: Union[PySide6.QtCore.QUrl, str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlApplicationEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>qml.QmlEngineMixin</code>, <code>qml.QQmlApplicationEngine</code></p> <p>Convenient way to load an application from a single QML file.</p> Source code in <code>prettyqt\\qml\\qmlapplicationengine.py</code> <pre><code>class QmlApplicationEngine(qml.QmlEngineMixin, qml.QQmlApplicationEngine):\n\"\"\"Convenient way to load an application from a single QML file.\"\"\"\ndef __iter__(self) -&gt; Iterator[QtCore.QObject]:\nreturn iter(self.rootObjects())\ndef load_data(\nself,\ndata: datatypes.ByteArrayType,\nurl: datatypes.UrlType | os.PathLike | None = None,\n):\ndata = datatypes.to_bytearray(data)\nurl = datatypes.to_local_url(url)\nself.loadData(data, url)\ndef load_file(self, file: datatypes.UrlType | datatypes.PathType):\nif isinstance(file, os.PathLike):\nfile = os.fspath(file)\nself.load(file)\n</code></pre>"},{"location":"qt_modules/qml/QmlApplicationEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494163792[\"qml.QmlApplicationEngine\"]\n  2103494167632[\"qml.QmlEngineMixin\"]\n  2103494161872[\"qml.JSEngineMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494085072[\"QtQml.QQmlApplicationEngine\"]\n  2103494116752[\"QtQml.QQmlEngine\"]\n  2103494092752[\"QtQml.QJSEngine\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494167632 --&gt; 2103494163792\n  2103494161872 --&gt; 2103494167632\n  2103255067472 --&gt; 2103494161872\n  140736120080256 --&gt; 2103255067472\n  2103494085072 --&gt; 2103494163792\n  2103494116752 --&gt; 2103494085072\n  2103494092752 --&gt; 2103494116752\n  2103254677056 --&gt; 2103494092752\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlApplicationEngine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>uiLanguage</code> QString <code>offlineStoragePath</code> QString"},{"location":"qt_modules/qml/QmlComponent.html","title":"QmlComponent","text":"<p>Qt Base Class: QQmlComponent</p> <p>Signature: <code>QQmlComponent(self, arg__1: PySide6.QtQml.QQmlEngine, fileName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, arg__1: PySide6.QtQml.QQmlEngine, fileName: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, arg__1: PySide6.QtQml.QQmlEngine, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, arg__1: PySide6.QtQml.QQmlEngine, url: Union[PySide6.QtCore.QUrl, str], mode: PySide6.QtQml.QQmlComponent.CompilationMode, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, arg__1: PySide6.QtQml.QQmlEngine, url: Union[PySide6.QtCore.QUrl, str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, engine: PySide6.QtQml.QQmlEngine, uri: str, typeName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, engine: PySide6.QtQml.QQmlEngine, uri: str, typeName: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlComponent(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlComponent.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtQml.QQmlComponent</code></p> <p>Encapsulates a QML component definition.</p> Source code in <code>prettyqt\\qml\\qmlcomponent.py</code> <pre><code>class QmlComponent(core.ObjectMixin, QtQml.QQmlComponent):\n\"\"\"Encapsulates a QML component definition.\"\"\"\ndef get_status(self) -&gt; str:\nreturn STATUS.inverse[self.status()]\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef load_url(self, url: datatypes.UrlType, mode: str):\nif isinstance(url, str):\nurl = core.Url.from_user_input(url)\nself.loadUrl(url, COMPILATION_MODES[mode])\n</code></pre>"},{"location":"qt_modules/qml/QmlComponent.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494150352[\"qml.QmlComponent\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494110992[\"QtQml.QQmlComponent\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494150352\n  140736120080256 --&gt; 2103255067472\n  2103494110992 --&gt; 2103494150352\n  2103254677056 --&gt; 2103494110992\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlComponent.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>progress</code> double <code>status</code> QQmlComponent::Status <code>url</code> QUrl"},{"location":"qt_modules/qml/QmlEngine.html","title":"QmlEngine","text":"<p>Qt Base Class: QQmlEngine</p> <p>Signature: <code>QQmlEngine(self, p: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QmlEngineMixin</code>, <code>qml.QQmlEngine</code></p> <p>Environment for instantiating QML components.</p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>class QmlEngine(QmlEngineMixin, qml.QQmlEngine):\n\"\"\"Environment for instantiating QML components.\"\"\"\n</code></pre>"},{"location":"qt_modules/qml/QmlEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494138832[\"qml.QmlEngine\"]\n  2103494167632[\"qml.QmlEngineMixin\"]\n  2103494161872[\"qml.JSEngineMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494116752[\"QtQml.QQmlEngine\"]\n  2103494092752[\"QtQml.QJSEngine\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494167632 --&gt; 2103494138832\n  2103494161872 --&gt; 2103494167632\n  2103255067472 --&gt; 2103494161872\n  140736120080256 --&gt; 2103255067472\n  2103494116752 --&gt; 2103494138832\n  2103494092752 --&gt; 2103494116752\n  2103254677056 --&gt; 2103494092752\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlEngine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>uiLanguage</code> QString <code>offlineStoragePath</code> QString"},{"location":"qt_modules/qml/QmlEngineMixin.html","title":"QmlEngineMixin","text":""},{"location":"qt_modules/qml/QmlEngineMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>qml.JSEngineMixin</code></p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>class QmlEngineMixin(qml.JSEngineMixin):\ndef set_object_ownership(\nself,\nobj: core.QObject,\nmode: ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership,\n):\n\"\"\"Set the object ownership.\n        Args:\n            obj: object to set ownership for\n            mode: object ownership to use\n        \"\"\"\nself.setObjectOwnership(obj, OBJECT_OWNERSHIP.get_enum_value(mode))\ndef get_object_ownership(self, obj: core.QObject) -&gt; ObjectOwnershipStr:\n\"\"\"Return object ownership.\n        Returns:\n            object ownership\n        \"\"\"\nreturn OBJECT_OWNERSHIP.inverse[self.objectOwnership(obj)]\ndef add_import_path(self, path: datatypes.PathType):\nself.addImportPath(os.fspath(path))\ndef add_plugin_path(self, path: datatypes.PathType):\nself.addPluginPath(os.fspath(path))\ndef get_plugin_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.pluginPathList()]\ndef get_import_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.importPathList()]\ndef set_base_url(self, url: str | core.QUrl):\nif isinstance(url, str):\nurl = core.QUrl(url)\nself.setBaseUrl(url)\ndef get_base_url(self) -&gt; core.Url:\nreturn core.Url(self.baseUrl())\ndef set_offline_storage_path(self, path: datatypes.PathType):\nself.setOfflineStoragePath(os.fspath(path))\n</code></pre> Name Children Inherits QmlEngineprettyqt.qml.qmlengine <ul><li>QmlEngineMixin</li><li>QQmlEngine</li></ul> QmlApplicationEngineprettyqt.qml.qmlapplicationengine <ul><li>QmlEngineMixin</li><li>QQmlApplicationEngine</li></ul>"},{"location":"qt_modules/qml/QmlEngineMixin.html#prettyqt.qml.qmlengine.QmlEngineMixin.get_object_ownership","title":"<code>get_object_ownership(obj: core.QObject) -&gt; ObjectOwnershipStr</code>","text":"<p>Return object ownership.</p> Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def get_object_ownership(self, obj: core.QObject) -&gt; ObjectOwnershipStr:\n\"\"\"Return object ownership.\n    Returns:\n        object ownership\n    \"\"\"\nreturn OBJECT_OWNERSHIP.inverse[self.objectOwnership(obj)]\n</code></pre>"},{"location":"qt_modules/qml/QmlEngineMixin.html#prettyqt.qml.qmlengine.QmlEngineMixin.set_object_ownership","title":"<code>set_object_ownership(obj: core.QObject, mode: ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership)</code>","text":"<p>Set the object ownership.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>core.QObject</code> <p>object to set ownership for</p> required <code>mode</code> <code>ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership</code> <p>object ownership to use</p> required Source code in <code>prettyqt\\qml\\qmlengine.py</code> <pre><code>def set_object_ownership(\nself,\nobj: core.QObject,\nmode: ObjectOwnershipStr | qml.QQmlEngine.ObjectOwnership,\n):\n\"\"\"Set the object ownership.\n    Args:\n        obj: object to set ownership for\n        mode: object ownership to use\n    \"\"\"\nself.setObjectOwnership(obj, OBJECT_OWNERSHIP.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/qml/QmlEngineMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494167632[\"qml.QmlEngineMixin\"]\n  2103494161872[\"qml.JSEngineMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494161872 --&gt; 2103494167632\n  2103255067472 --&gt; 2103494161872\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/qml/QmlError.html","title":"QmlError","text":"<p>Qt Base Class: QQmlError</p> <p>Signature: <code>QQmlError(self) -&gt; None QQmlError(self, arg__1: PySide6.QtQml.QQmlError) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlError.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtQml.QQmlError</code></p> <p>Encapsulates a QML error.</p> Source code in <code>prettyqt\\qml\\qmlerror.py</code> <pre><code>class QmlError(QtQml.QQmlError):\n\"\"\"Encapsulates a QML error.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.toString())\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_property(self) -&gt; core.MetaProperty:\nreturn core.MetaProperty(self.property())\ndef __str__(self):\nreturn self.toString()\n</code></pre>"},{"location":"qt_modules/qml/QmlError.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494127312[\"qml.QmlError\"]\n  2103500596560[\"QtQml.QQmlError\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500596560 --&gt; 2103494127312\n  2103206874128 --&gt; 2103500596560\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlExpression.html","title":"QmlExpression","text":"<p>Qt Base Class: QQmlExpression</p> <p>Signature: <code>QQmlExpression(self) -&gt; None QQmlExpression(self, arg__1: PySide6.QtQml.QQmlContext, arg__2: PySide6.QtCore.QObject, arg__3: str, arg__4: Optional[PySide6.QtCore.QObject] = None) -&gt; None QQmlExpression(self, arg__1: PySide6.QtQml.QQmlScriptString, arg__2: Optional[PySide6.QtQml.QQmlContext] = None, arg__3: Optional[PySide6.QtCore.QObject] = None, arg__4: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlExpression.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>qml.QQmlExpression</code></p> <p>Evaluates JavaScript in a QML context.</p> Source code in <code>prettyqt\\qml\\qmlexpression.py</code> <pre><code>class QmlExpression(core.ObjectMixin, qml.QQmlExpression):\n\"\"\"Evaluates JavaScript in a QML context.\"\"\"\ndef get_source_file(self) -&gt; pathlib.Path | None:\nreturn pathlib.Path(source) if (source := self.sourceFile()) else None\ndef get_error(self) -&gt; qml.QmlError:\nreturn qml.QmlError(self.error())\n</code></pre>"},{"location":"qt_modules/qml/QmlExpression.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494128272[\"qml.QmlExpression\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494109072[\"QtQml.QQmlExpression\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494128272\n  140736120080256 --&gt; 2103255067472\n  2103494109072 --&gt; 2103494128272\n  2103254677056 --&gt; 2103494109072\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlExpression.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/qml/QmlImageProviderBase.html","title":"QmlImageProviderBase","text":"<p>Qt Base Class: QQmlImageProviderBase</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/qml/QmlImageProviderBase.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QmlImageProviderBaseMixin</code>, <code>QtQml.QQmlImageProviderBase</code></p> <p>Used to register image providers in the QML engine.</p> Source code in <code>prettyqt\\qml\\qmlimageproviderbase.py</code> <pre><code>class QmlImageProviderBase(QmlImageProviderBaseMixin, QtQml.QQmlImageProviderBase):\n\"\"\"Used to register image providers in the QML engine.\"\"\"\n</code></pre>"},{"location":"qt_modules/qml/QmlImageProviderBase.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494156112[\"qml.QmlImageProviderBase\"]\n  2103494139792[\"qml.QmlImageProviderBaseMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494104272[\"QtQml.QQmlImageProviderBase\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494139792 --&gt; 2103494156112\n  140736120080256 --&gt; 2103494139792\n  2103494104272 --&gt; 2103494156112\n  2103254677056 --&gt; 2103494104272\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlImageProviderBase.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/qml/QmlImageProviderBaseMixin.html","title":"QmlImageProviderBaseMixin","text":""},{"location":"qt_modules/qml/QmlImageProviderBaseMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\qml\\qmlimageproviderbase.py</code> <pre><code>class QmlImageProviderBaseMixin:\npass\n</code></pre> Name Children Inherits QmlImageProviderBaseprettyqt.qml.qmlimageproviderbase <ul><li>QmlImageProviderBaseMixin</li><li>QQmlImageProviderBase</li></ul> QuickImageProviderMixinprettyqt.quick.quickimageprovider <ul><li>QuickImageProvider</li><li>QuickAsyncImageProvider</li></ul> <ul><li>QmlImageProviderBaseMixin</li></ul>"},{"location":"qt_modules/qml/QmlImageProviderBaseMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494139792[\"qml.QmlImageProviderBaseMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494139792</code></pre>"},{"location":"qt_modules/qml/QmlParserStatus.html","title":"QmlParserStatus","text":"<p>Qt Base Class: QQmlParserStatus</p> <p>Signature: <code>QQmlParserStatus(self) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlParserStatus.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QmlParserStatusMixin</code>, <code>QtQml.QQmlParserStatus</code></p> <p>Updates on the QML parser state.</p> Source code in <code>prettyqt\\qml\\qmlparserstatus.py</code> <pre><code>class QmlParserStatus(QmlParserStatusMixin, QtQml.QQmlParserStatus):\n\"\"\"Updates on the QML parser state.\"\"\"\n</code></pre>"},{"location":"qt_modules/qml/QmlParserStatus.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494126352[\"qml.QmlParserStatus\"]\n  2103494125392[\"qml.QmlParserStatusMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103500582160[\"QtQml.QQmlParserStatus\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494125392 --&gt; 2103494126352\n  140736120080256 --&gt; 2103494125392\n  2103500582160 --&gt; 2103494126352\n  2103206874128 --&gt; 2103500582160\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlParserStatusMixin.html","title":"QmlParserStatusMixin","text":""},{"location":"qt_modules/qml/QmlParserStatusMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\qml\\qmlparserstatus.py</code> <pre><code>class QmlParserStatusMixin:\npass\n</code></pre> Name Children Inherits QmlParserStatusprettyqt.qml.qmlparserstatus <ul><li>QmlParserStatusMixin</li><li>QQmlParserStatus</li></ul> QuickItemMixinprettyqt.quick.quickitem <ul><li>QuickItem</li><li>QuickPaintedItem</li></ul> <ul><li>ObjectMixin</li><li>QmlParserStatusMixin</li></ul>"},{"location":"qt_modules/qml/QmlParserStatusMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494125392[\"qml.QmlParserStatusMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494125392</code></pre>"},{"location":"qt_modules/qml/QmlProperty.html","title":"QmlProperty","text":"<p>Qt Base Class: QQmlProperty</p> <p>Signature: <code>QQmlProperty(self) -&gt; None QQmlProperty(self, arg__1: PySide6.QtCore.QObject) -&gt; None QQmlProperty(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlContext) -&gt; None QQmlProperty(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlEngine) -&gt; None QQmlProperty(self, arg__1: PySide6.QtCore.QObject, arg__2: str) -&gt; None QQmlProperty(self, arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlContext) -&gt; None QQmlProperty(self, arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlEngine) -&gt; None QQmlProperty(self, arg__1: Union[PySide6.QtQml.QQmlProperty, PySide6.QtCore.QObject]) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlProperty.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtQml.QQmlProperty</code></p> <p>Abstracts accessing properties on objects created from QML.</p> Source code in <code>prettyqt\\qml\\qmlproperty.py</code> <pre><code>class QmlProperty(QtQml.QQmlProperty):\n\"\"\"Abstracts accessing properties on objects created from QML.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.object())\ndef get_method(self) -&gt; core.MetaMethod:\nreturn core.MetaMethod(self.method())\ndef get_property(self) -&gt; core.MetaProperty:\nreturn core.MetaProperty(self.property())\ndef get_property_type_category(self) -&gt; PropertyTypeCategoryStr:\nreturn PROPERTY_TYPE_CATEGORY.inverse[self.propertyTypeCategory()]\ndef get_type(self) -&gt; TypeStr:\nreturn TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/qml/QmlProperty.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494130192[\"qml.QmlProperty\"]\n  2103500580240[\"QtQml.QQmlProperty\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103500580240 --&gt; 2103494130192\n  2103206874128 --&gt; 2103500580240\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qml/QmlPropertyMap.html","title":"QmlPropertyMap","text":"<p>Qt Base Class: QQmlPropertyMap</p> <p>Signature: <code>QQmlPropertyMap(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qml/QmlPropertyMap.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QmlPropertyMapMixin</code>, <code>QtQml.QQmlPropertyMap</code>, <code>MutableMapping</code></p> <p>Allows you to set key-value pairs that can be used in QML bindings.</p> Source code in <code>prettyqt\\qml\\qmlpropertymap.py</code> <pre><code>class QmlPropertyMap(\nQmlPropertyMapMixin,\nQtQml.QQmlPropertyMap,\nMutableMapping,\nmetaclass=datatypes.QABCMeta,\n):\n\"\"\"Allows you to set key-value pairs that can be used in QML bindings.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, dict(self))\ndef __setitem__(self, key: str, value: datatypes.Variant):\nself.insert(key, value)\ndef __getitem__(self, key: str) -&gt; datatypes.Variant:\nif not self.contains(key):\nraise KeyError(key)\nreturn self.value(key)\ndef __delitem__(self, key: str):\nself.clear(key)\ndef __contains__(self, key):\nreturn self.contains(key)\ndef __bool__(self):\nreturn not self.isEmpty()\ndef __iter__(self):\nreturn iter(self.keys())\n</code></pre>"},{"location":"qt_modules/qml/QmlPropertyMap.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494133072[\"qml.QmlPropertyMap\"]\n  2103494131152[\"qml.QmlPropertyMapMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494098512[\"QtQml.QQmlPropertyMap\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103494131152 --&gt; 2103494133072\n  2103255067472 --&gt; 2103494131152\n  140736120080256 --&gt; 2103255067472\n  2103494098512 --&gt; 2103494133072\n  2103254677056 --&gt; 2103494098512\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103189029904 --&gt; 2103494133072\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/qml/QmlPropertyMap.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/qml/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>qml</li> <li>QmlProperty</li> <li>QmlEngineMixin</li> <li>QmlExpression</li> <li>JSValueIterator</li> <li>QmlComponent</li> <li>QmlError</li> <li>JSEngine</li> <li>JSValue</li> <li>QmlParserStatus</li> <li>QmlApplicationEngine</li> <li>QmlImageProviderBase</li> <li>QmlParserStatusMixin</li> <li>QmlPropertyMap</li> <li>QmlImageProviderBaseMixin</li> <li>JSEngineMixin</li> <li>QmlEngine</li> </ul>"},{"location":"qt_modules/qthelp/index.html","title":"qthelp","text":"<p>Classes for integrating documentation into applications.</p> Name Children Inherits HelpEngineprettyqt.qthelp.helpengine <ul><li>HelpEngineCoreMixin</li><li>QHelpEngine</li></ul> HelpIndexModelprettyqt.qthelp.helpindexmodel <ul><li>StringListModelMixin</li><li>QHelpIndexModel</li></ul> HelpSearchEngineprettyqt.qthelp.helpsearchengine <ul><li>ObjectMixin</li><li>QHelpSearchEngine</li></ul> HelpEngineCoreprettyqt.qthelp.helpenginecore <ul><li>HelpEngineCoreMixin</li><li>QHelpEngineCore</li></ul> HelpContentItemprettyqt.qthelp.helpcontentitemItem for use with QHelpContentModel. <ul><li>object</li></ul> HelpEngineCoreMixinprettyqt.qthelp.helpenginecoreThe core functionality of the help system. <ul><li>HelpEngineCore</li><li>HelpEngine</li></ul> <ul><li>ObjectMixin</li></ul> HelpLinkprettyqt.qthelp.helplinkStruct provides the data associated with a help link. <ul><li>object</li></ul> HelpSearchResultWidgetprettyqt.qthelp.helpsearchresultwidgetText browser to display search results. <ul><li>WidgetMixin</li></ul> HelpFilterSettingsWidgetprettyqt.qthelp.helpfiltersettingswidget <ul><li>Widget</li><li>QHelpFilterSettingsWidget</li></ul> HelpSearchQueryWidgetprettyqt.qthelp.helpsearchquerywidget <ul><li>WidgetMixin</li><li>QHelpSearchQueryWidget</li></ul> HelpIndexWidgetprettyqt.qthelp.helpindexwidget <ul><li>ListViewMixin</li><li>QHelpIndexWidget</li></ul> HelpContentModelprettyqt.qthelp.helpcontentmodelModel that supplies content to views. <ul><li>AbstractItemModelMixin</li></ul> HelpFilterDataprettyqt.qthelp.helpfilterdataDetails for the filters used by QHelpFilterEngine. <ul><li><code>HelpFilterDataMixin</code></li></ul> HelpFilterEngineprettyqt.qthelp.helpfilterengineFiltered view of the help contents. <ul><li>ObjectMixin</li></ul> HelpContentWidgetprettyqt.qthelp.helpcontentwidget <ul><li>TreeViewMixin</li><li>QHelpContentWidget</li></ul> HelpSearchResultprettyqt.qthelp.helpsearchresult <ul><li>QHelpSearchResult</li></ul>"},{"location":"qt_modules/qthelp/HelpContentItem.html","title":"HelpContentItem","text":""},{"location":"qt_modules/qthelp/HelpContentItem.html#docstrings","title":"DocStrings","text":"<p>Item for use with QHelpContentModel.</p> Source code in <code>prettyqt\\qthelp\\helpcontentitem.py</code> <pre><code>class HelpContentItem:\n\"\"\"Item for use with QHelpContentModel.\"\"\"\ndef __init__(self, item: QtHelp.QHelpContentItem):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __len__(self):\nreturn self.childCount()\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"qt_modules/qthelp/HelpContentItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494151312[\"qthelp.HelpContentItem\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494151312</code></pre>"},{"location":"qt_modules/qthelp/HelpContentModel.html","title":"HelpContentModel","text":""},{"location":"qt_modules/qthelp/HelpContentModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.AbstractItemModelMixin</code></p> <p>Model that supplies content to views.</p> Source code in <code>prettyqt\\qthelp\\helpcontentmodel.py</code> <pre><code>class HelpContentModel(core.AbstractItemModelMixin):\n\"\"\"Model that supplies content to views.\"\"\"\ndef __init__(self, item: qthelp.QHelpContentModel):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_content_item_at(self, index) -&gt; qthelp.HelpContentItem:\nreturn qthelp.HelpContentItem(self.contentItemAt(index))\n</code></pre>"},{"location":"qt_modules/qthelp/HelpContentModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494140752[\"qthelp.HelpContentModel\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254372048 --&gt; 2103494140752\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/qthelp/HelpContentWidget.html","title":"HelpContentWidget","text":"<p>Qt Base Class: QHelpContentWidget</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/qthelp/HelpContentWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TreeViewMixin</code>, <code>QtHelp.QHelpContentWidget</code></p> <p>Tree view for displaying help content model items.</p> Source code in <code>prettyqt\\qthelp\\helpcontentwidget.py</code> <pre><code>class HelpContentWidget(widgets.TreeViewMixin, QtHelp.QHelpContentWidget):\n\"\"\"Tree view for displaying help content model items.\"\"\"\ndef index_of(self, url: datatypes.UrlType) -&gt; QtCore.QModelIndex | None:\nif isinstance(url, str):\nurl = QtCore.QUrl(url)\nidx = self.indexOf(url)\nreturn idx if idx.isValid() else None\n@classmethod\ndef setup_example(cls):\nreturn None\n</code></pre>"},{"location":"qt_modules/qthelp/HelpContentWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494162832[\"qthelp.HelpContentWidget\"]\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103494168592[\"QtHelp.QHelpContentWidget\"]\n  2103259814960[\"QtWidgets.QTreeView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261405648 --&gt; 2103494162832\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103494168592 --&gt; 2103494162832\n  2103259814960 --&gt; 2103494168592\n  2103259770800 --&gt; 2103259814960\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/qthelp/HelpContentWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>autoExpandDelay</code> int <code>indentation</code> int <code>rootIsDecorated</code> bool <code>uniformRowHeights</code> bool <code>itemsExpandable</code> bool <code>sortingEnabled</code> bool <code>animated</code> bool <code>allColumnsShowFocus</code> bool <code>wordWrap</code> bool <code>headerHidden</code> bool <code>expandsOnDoubleClick</code> bool"},{"location":"qt_modules/qthelp/HelpEngine.html","title":"HelpEngine","text":"<p>Qt Base Class: QHelpEngine</p> <p>Signature: <code>QHelpEngine(self, collectionFile: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qthelp/HelpEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>qthelp.HelpEngineCoreMixin</code>, <code>qthelp.QHelpEngine</code></p> <p>Access to contents and indices of the help engine.</p> Source code in <code>prettyqt\\qthelp\\helpengine.py</code> <pre><code>class HelpEngine(qthelp.HelpEngineCoreMixin, qthelp.QHelpEngine):\n\"\"\"Access to contents and indices of the help engine.\"\"\"\ndef get_content_model(self) -&gt; qthelp.HelpContentModel:\nreturn qthelp.HelpContentModel(self.contentModel())\n</code></pre>"},{"location":"qt_modules/qthelp/HelpEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494176272[\"qthelp.HelpEngine\"]\n  2103494174352[\"qthelp.HelpEngineCoreMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494154192[\"QtHelp.QHelpEngine\"]\n  2103494171472[\"QtHelp.QHelpEngineCore\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494174352 --&gt; 2103494176272\n  2103255067472 --&gt; 2103494174352\n  140736120080256 --&gt; 2103255067472\n  2103494154192 --&gt; 2103494176272\n  2103494171472 --&gt; 2103494154192\n  2103254677056 --&gt; 2103494171472\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qthelp/HelpEngine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>autoSaveFilter</code> bool <code>collectionFile</code> QString <code>readOnly</code> bool <code>currentFilter</code> QString"},{"location":"qt_modules/qthelp/HelpEngineCore.html","title":"HelpEngineCore","text":"<p>Qt Base Class: QHelpEngineCore</p> <p>Signature: <code>QHelpEngineCore(self, collectionFile: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qthelp/HelpEngineCore.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>HelpEngineCoreMixin</code>, <code>qthelp.QHelpEngineCore</code></p> Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>class HelpEngineCore(HelpEngineCoreMixin, qthelp.QHelpEngineCore):\npass\n</code></pre>"},{"location":"qt_modules/qthelp/HelpEngineCore.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494175312[\"qthelp.HelpEngineCore\"]\n  2103494174352[\"qthelp.HelpEngineCoreMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494171472[\"QtHelp.QHelpEngineCore\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494174352 --&gt; 2103494175312\n  2103255067472 --&gt; 2103494174352\n  140736120080256 --&gt; 2103255067472\n  2103494171472 --&gt; 2103494175312\n  2103254677056 --&gt; 2103494171472\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qthelp/HelpEngineCore.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>autoSaveFilter</code> bool <code>collectionFile</code> QString <code>readOnly</code> bool <code>currentFilter</code> QString"},{"location":"qt_modules/qthelp/HelpEngineCoreMixin.html","title":"HelpEngineCoreMixin","text":""},{"location":"qt_modules/qthelp/HelpEngineCoreMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>The core functionality of the help system.</p> Source code in <code>prettyqt\\qthelp\\helpenginecore.py</code> <pre><code>class HelpEngineCoreMixin(core.ObjectMixin):\n\"\"\"The core functionality of the help system.\"\"\"\ndef get_file_data(self, url: core.QUrl) -&gt; bytes:\nreturn self.fileData(url).data()\ndef get_files(\nself,\nnamespace_name: str,\nfilter_name: str,\nextension_filter: str | None = None,\n) -&gt; list[core.Url]:\nif extension_filter is None:\nextension_filter = \"\"\nreturn [\ncore.Url(i) for i in self.files(namespace_name, filter_name, extension_filter)\n]\ndef find_file(self, url: datatypes.UrlType) -&gt; core.Url:\nif not isinstance(url, core.QUrl):\nurl = core.QUrl(url)\nreturn core.Url(self.findFile(url))\ndef get_filter_engine(self) -&gt; qthelp.HelpFilterEngine:\nreturn qthelp.HelpFilterEngine(self.filterEngine())\n</code></pre> Name Children Inherits HelpEngineCoreprettyqt.qthelp.helpenginecore <ul><li>HelpEngineCoreMixin</li><li>QHelpEngineCore</li></ul> HelpEngineprettyqt.qthelp.helpengine <ul><li>HelpEngineCoreMixin</li><li>QHelpEngine</li></ul>"},{"location":"qt_modules/qthelp/HelpEngineCoreMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494174352[\"qthelp.HelpEngineCoreMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103494174352\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterData.html","title":"HelpFilterData","text":""},{"location":"qt_modules/qthelp/HelpFilterData.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>HelpFilterDataMixin</code></p> <p>Details for the filters used by QHelpFilterEngine.</p> Source code in <code>prettyqt\\qthelp\\helpfilterdata.py</code> <pre><code>class HelpFilterData(HelpFilterDataMixin):\n\"\"\"Details for the filters used by QHelpFilterEngine.\"\"\"\ndef __init__(self, item: QtHelp.QHelpFilterData):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\n</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterData.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494148432[\"qthelp.HelpFilterData\"]\n  2103494144592[\"qthelp.HelpFilterDataMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494144592 --&gt; 2103494148432\n  140736120080256 --&gt; 2103494144592</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterEngine.html","title":"HelpFilterEngine","text":""},{"location":"qt_modules/qthelp/HelpFilterEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>Filtered view of the help contents.</p> Source code in <code>prettyqt\\qthelp\\helpfilterengine.py</code> <pre><code>class HelpFilterEngine(core.ObjectMixin):\n\"\"\"Filtered view of the help contents.\"\"\"\ndef __init__(self, item: qthelp.QHelpFilterEngine):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_available_versions(self) -&gt; list[core.VersionNumber]:\nreturn [core.VersionNumber(i) for i in self.availableVersions()]\ndef get_filter_data(self, filter_name: str) -&gt; qthelp.HelpFilterData:\nreturn qthelp.HelpFilterData(self.filterData(filter_name))\n</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494186832[\"qthelp.HelpFilterEngine\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103494186832\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterSettingsWidget.html","title":"HelpFilterSettingsWidget","text":"<p>Qt Base Class: QHelpFilterSettingsWidget</p> <p>Signature: <code>QHelpFilterSettingsWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/qthelp/HelpFilterSettingsWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.Widget</code>, <code>QtHelp.QHelpFilterSettingsWidget</code></p> <p>Widget that allows for creating, editing and removing filters.</p> Source code in <code>prettyqt\\qthelp\\helpfiltersettingswidget.py</code> <pre><code>class HelpFilterSettingsWidget(widgets.Widget, QtHelp.QHelpFilterSettingsWidget):\n\"\"\"Widget that allows for creating, editing and removing filters.\"\"\"\n</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterSettingsWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494173392[\"qthelp.HelpFilterSettingsWidget\"]\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103494143632[\"QtHelp.QHelpFilterSettingsWidget\"]\n  2103261115840 --&gt; 2103494173392\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712\n  2103494143632 --&gt; 2103494173392\n  2103259691120 --&gt; 2103494143632</code></pre>"},{"location":"qt_modules/qthelp/HelpFilterSettingsWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/qthelp/HelpIndexModel.html","title":"HelpIndexModel","text":"<p>Qt Base Class: QHelpIndexModel</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/qthelp/HelpIndexModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.StringListModelMixin</code>, <code>QtHelp.QHelpIndexModel</code></p> <p>Model that supplies index keywords to views.</p> Source code in <code>prettyqt\\qthelp\\helpindexmodel.py</code> <pre><code>class HelpIndexModel(core.StringListModelMixin, QtHelp.QHelpIndexModel):\n\"\"\"Model that supplies index keywords to views.\"\"\"\n</code></pre>"},{"location":"qt_modules/qthelp/HelpIndexModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494160912[\"qthelp.HelpIndexModel\"]\n  2103254428688[\"core.StringListModelMixin\"]\n  2103254407568[\"core.AbstractListModelMixin\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494172432[\"QtHelp.QHelpIndexModel\"]\n  2103254623296[\"QtCore.QStringListModel\"]\n  2103254590656[\"QtCore.QAbstractListModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254428688 --&gt; 2103494160912\n  2103254407568 --&gt; 2103254428688\n  2103254372048 --&gt; 2103254407568\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103494172432 --&gt; 2103494160912\n  2103254623296 --&gt; 2103494172432\n  2103254590656 --&gt; 2103254623296\n  2103254592576 --&gt; 2103254590656\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qthelp/HelpIndexModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/qthelp/HelpIndexWidget.html","title":"HelpIndexWidget","text":"<p>Qt Base Class: QHelpIndexWidget</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/qthelp/HelpIndexWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ListViewMixin</code>, <code>QtHelp.QHelpIndexWidget</code></p> <p>List view displaying the QHelpIndexModel.</p> Source code in <code>prettyqt\\qthelp\\helpindexwidget.py</code> <pre><code>class HelpIndexWidget(widgets.ListViewMixin, QtHelp.QHelpIndexWidget):\n\"\"\"List view displaying the QHelpIndexModel.\"\"\"\n@classmethod\ndef setup_example(cls):\nreturn None\n</code></pre>"},{"location":"qt_modules/qthelp/HelpIndexWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494164752[\"qthelp.HelpIndexWidget\"]\n  2103261403728[\"widgets.ListViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103494169552[\"QtHelp.QHelpIndexWidget\"]\n  2103259805360[\"QtWidgets.QListView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261403728 --&gt; 2103494164752\n  2103261136960 --&gt; 2103261403728\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103494169552 --&gt; 2103494164752\n  2103259805360 --&gt; 2103494169552\n  2103259770800 --&gt; 2103259805360\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/qthelp/HelpIndexWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>movement</code> QListView::Movement <code>flow</code> QListView::Flow <code>isWrapping</code> bool <code>resizeMode</code> QListView::ResizeMode <code>layoutMode</code> QListView::LayoutMode <code>spacing</code> int <code>gridSize</code> QSize <code>viewMode</code> QListView::ViewMode <code>modelColumn</code> int <code>uniformItemSizes</code> bool <code>batchSize</code> int <code>wordWrap</code> bool <code>selectionRectVisible</code> bool <code>itemAlignment</code> QFlags"},{"location":"qt_modules/qthelp/HelpLink.html","title":"HelpLink","text":""},{"location":"qt_modules/qthelp/HelpLink.html#docstrings","title":"DocStrings","text":"<p>Struct provides the data associated with a help link.</p> Source code in <code>prettyqt\\qthelp\\helplink.py</code> <pre><code>class HelpLink:\n\"\"\"Struct provides the data associated with a help link.\"\"\"\ndef __init__(self, item: QtHelp.QHelpLink):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url)\n</code></pre>"},{"location":"qt_modules/qthelp/HelpLink.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494166672[\"qthelp.HelpLink\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494166672</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchEngine.html","title":"HelpSearchEngine","text":"<p>Qt Base Class: QHelpSearchEngine</p> <p>Signature: <code>QHelpSearchEngine(self, helpEngine: PySide6.QtHelp.QHelpEngineCore, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/qthelp/HelpSearchEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>qthelp.QHelpSearchEngine</code></p> <p>Access to widgets reusable to integrate fulltext search.</p> Source code in <code>prettyqt\\qthelp\\helpsearchengine.py</code> <pre><code>class HelpSearchEngine(core.ObjectMixin, qthelp.QHelpSearchEngine):\n\"\"\"Access to widgets reusable to integrate fulltext search.\"\"\"\ndef search_results(self, start: int, end: int) -&gt; list[qthelp.HelpSearchResult]:\nreturn [qthelp.HelpSearchResult(i) for i in self.searchResults(start, end)]\ndef get_result_widget(self) -&gt; qthelp.HelpSearchResultWidget:\nreturn qthelp.HelpSearchResultWidget(self.resultWidget())\n</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494145552[\"qthelp.HelpSearchEngine\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494159952[\"QtHelp.QHelpSearchEngine\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494145552\n  140736120080256 --&gt; 2103255067472\n  2103494159952 --&gt; 2103494145552\n  2103254677056 --&gt; 2103494159952\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchEngine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/qthelp/HelpSearchQueryWidget.html","title":"HelpSearchQueryWidget","text":"<p>Qt Base Class: QHelpSearchQueryWidget</p> <p>Signature: <code>QHelpSearchQueryWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/qthelp/HelpSearchQueryWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtHelp.QHelpSearchQueryWidget</code></p> <p>Widget to enable the user to input a search term in a standardized input mask.</p> Source code in <code>prettyqt\\qthelp\\helpsearchquerywidget.py</code> <pre><code>class HelpSearchQueryWidget(widgets.WidgetMixin, QtHelp.QHelpSearchQueryWidget):\n\"\"\"Widget to enable the user to input a search term in a standardized input mask.\"\"\"\n</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchQueryWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494165712[\"qthelp.HelpSearchQueryWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103494142672[\"QtHelp.QHelpSearchQueryWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103494165712\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103494142672 --&gt; 2103494165712\n  2103259691120 --&gt; 2103494142672\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchQueryWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/qthelp/HelpSearchResult.html","title":"HelpSearchResult","text":"<p>Qt Base Class: QHelpSearchResult</p> <p>Signature: <code>QHelpSearchResult(self) -&gt; None QHelpSearchResult(self, other: PySide6.QtHelp.QHelpSearchResult) -&gt; None QHelpSearchResult(self, url: Union[PySide6.QtCore.QUrl, str], title: str, snippet: str) -&gt; None</code></p>"},{"location":"qt_modules/qthelp/HelpSearchResult.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtHelp.QHelpSearchResult</code></p> <p>The data associated with the search result.</p> Source code in <code>prettyqt\\qthelp\\helpsearchresult.py</code> <pre><code>class HelpSearchResult(QtHelp.QHelpSearchResult):\n\"\"\"The data associated with the search result.\"\"\"\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchResult.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494146512[\"qthelp.HelpSearchResult\"]\n  2103494153232[\"QtHelp.QHelpSearchResult\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494153232 --&gt; 2103494146512\n  2103206874128 --&gt; 2103494153232\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchResultWidget.html","title":"HelpSearchResultWidget","text":""},{"location":"qt_modules/qthelp/HelpSearchResultWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> <p>Text browser to display search results.</p> Source code in <code>prettyqt\\qthelp\\helpsearchresultwidget.py</code> <pre><code>class HelpSearchResultWidget(widgets.WidgetMixin):  # , qthelp.QHelpSearchResultWidget):\n\"\"\"Text browser to display search results.\"\"\"\ndef __init__(self, item: qthelp.QHelpSearchResultWidget):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\n@classmethod\ndef setup_example(self):\ncore_engine = qthelp.HelpEngineCore(\"test\")\nengine = qthelp.HelpSearchEngine(core_engine)\nwidget = engine.get_result_widget()\nreturn widget\ndef get_link_at(self, point: datatypes.PointType) -&gt; core.Url:\nif isinstance(point, tuple):\npoint = core.Point(*point)\nreturn core.Url(self.linkAt(point))\n</code></pre>"},{"location":"qt_modules/qthelp/HelpSearchResultWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494177232[\"qthelp.HelpSearchResultWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103494177232\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/qthelp/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>qthelp</li> <li>HelpEngine</li> <li>HelpIndexModel</li> <li>HelpSearchEngine</li> <li>HelpEngineCore</li> <li>HelpContentItem</li> <li>HelpEngineCoreMixin</li> <li>HelpLink</li> <li>HelpSearchResultWidget</li> <li>HelpFilterSettingsWidget</li> <li>HelpSearchQueryWidget</li> <li>HelpIndexWidget</li> <li>HelpContentModel</li> <li>HelpFilterData</li> <li>HelpFilterEngine</li> <li>HelpContentWidget</li> <li>HelpSearchResult</li> </ul>"},{"location":"qt_modules/quick/index.html","title":"quick","text":"<p>A declarative framework for building dynamic apps with custom user interfaces.</p> Name Children Inherits SGNodeprettyqt.quick.sgnode <ul><li>QSGNode</li></ul> QuickImageResponseprettyqt.quick.quickimageresponse <ul><li>ObjectMixin</li><li>QQuickImageResponse</li></ul> QuickViewprettyqt.quick.quickview <ul><li><code>QuickWindowMixin</code></li><li>QQuickView</li></ul> QuickImageProviderMixinprettyqt.quick.quickimageprovider <ul><li>QuickImageProvider</li><li>QuickAsyncImageProvider</li></ul> <ul><li>QmlImageProviderBaseMixin</li></ul> QuickItemMixinprettyqt.quick.quickitem <ul><li>QuickItem</li><li>QuickPaintedItem</li></ul> <ul><li>ObjectMixin</li><li>QmlParserStatusMixin</li></ul> QuickImageProviderprettyqt.quick.quickimageprovider <ul><li>QuickImageProviderMixin</li><li>QQuickImageProvider</li></ul> QuickItemprettyqt.quick.quickitem <ul><li>QuickItemMixin</li><li>QQuickItem</li></ul> QuickItemGrabResultprettyqt.quick.quickitemgrabresultContains the result from QQuickItem::grabToImage(). <ul><li>ObjectMixin</li></ul> QuickPaintedItemprettyqt.quick.quickpainteditem <ul><li>QuickItemMixin</li><li>QQuickPaintedItem</li></ul> QuickAsyncImageProviderprettyqt.quick.quickasyncimageprovider <ul><li>QuickImageProviderMixin</li><li>QQuickAsyncImageProvider</li></ul> QuickWindowprettyqt.quick.quickwindow <ul><li><code>QuickWindowMixin</code></li><li>QQuickWindow</li></ul> QuickRenderControlprettyqt.quick.quickrendercontrol <ul><li>ObjectMixin</li><li>QQuickRenderControl</li></ul> QuickTextDocumentprettyqt.quick.quicktextdocument <ul><li>ObjectMixin</li><li>QQuickTextDocument</li></ul>"},{"location":"qt_modules/quick/QuickAsyncImageProvider.html","title":"QuickAsyncImageProvider","text":"<p>Qt Base Class: QQuickAsyncImageProvider</p> <p>Signature: <code>QQuickAsyncImageProvider(self) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickAsyncImageProvider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>quick.QuickImageProviderMixin</code>, <code>QtQuick.QQuickAsyncImageProvider</code></p> <p>Interface for asynchronous control of QML image requests.</p> Source code in <code>prettyqt\\quick\\quickasyncimageprovider.py</code> <pre><code>class QuickAsyncImageProvider(\nquick.QuickImageProviderMixin, QtQuick.QQuickAsyncImageProvider\n):\n\"\"\"Interface for asynchronous control of QML image requests.\"\"\"\n</code></pre>"},{"location":"qt_modules/quick/QuickAsyncImageProvider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494039952[\"quick.QuickAsyncImageProvider\"]\n  2103494024592[\"quick.QuickImageProviderMixin\"]\n  2103494139792[\"qml.QmlImageProviderBaseMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494023632[\"QtQuick.QQuickAsyncImageProvider\"]\n  2103494027472[\"QtQuick.QQuickImageProvider\"]\n  2103494104272[\"QtQml.QQmlImageProviderBase\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494024592 --&gt; 2103494039952\n  2103494139792 --&gt; 2103494024592\n  140736120080256 --&gt; 2103494139792\n  2103494023632 --&gt; 2103494039952\n  2103494027472 --&gt; 2103494023632\n  2103494104272 --&gt; 2103494027472\n  2103254677056 --&gt; 2103494104272\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/quick/QuickAsyncImageProvider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/quick/QuickImageProvider.html","title":"QuickImageProvider","text":"<p>Qt Base Class: QQuickImageProvider</p> <p>Signature: <code>QQuickImageProvider(self, type: PySide6.QtQml.QQmlImageProviderBase.ImageType, flags: PySide6.QtQml.QQmlImageProviderBase.Flag = Default(QQmlImageProviderBase.Flags)) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickImageProvider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QuickImageProviderMixin</code>, <code>QtQuick.QQuickImageProvider</code></p> <p>Interface for supporting pixmaps and threaded image requests in QML.</p> Source code in <code>prettyqt\\quick\\quickimageprovider.py</code> <pre><code>class QuickImageProvider(QuickImageProviderMixin, QtQuick.QQuickImageProvider):\n\"\"\"Interface for supporting pixmaps and threaded image requests in QML.\"\"\"\n</code></pre>"},{"location":"qt_modules/quick/QuickImageProvider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494026512[\"quick.QuickImageProvider\"]\n  2103494024592[\"quick.QuickImageProviderMixin\"]\n  2103494139792[\"qml.QmlImageProviderBaseMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494027472[\"QtQuick.QQuickImageProvider\"]\n  2103494104272[\"QtQml.QQmlImageProviderBase\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494024592 --&gt; 2103494026512\n  2103494139792 --&gt; 2103494024592\n  140736120080256 --&gt; 2103494139792\n  2103494027472 --&gt; 2103494026512\n  2103494104272 --&gt; 2103494027472\n  2103254677056 --&gt; 2103494104272\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/quick/QuickImageProvider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/quick/QuickImageProviderMixin.html","title":"QuickImageProviderMixin","text":""},{"location":"qt_modules/quick/QuickImageProviderMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>qml.QmlImageProviderBaseMixin</code></p> Source code in <code>prettyqt\\quick\\quickimageprovider.py</code> <pre><code>class QuickImageProviderMixin(qml.QmlImageProviderBaseMixin):\npass\n</code></pre> Name Children Inherits QuickImageProviderprettyqt.quick.quickimageprovider <ul><li>QuickImageProviderMixin</li><li>QQuickImageProvider</li></ul> QuickAsyncImageProviderprettyqt.quick.quickasyncimageprovider <ul><li>QuickImageProviderMixin</li><li>QQuickAsyncImageProvider</li></ul>"},{"location":"qt_modules/quick/QuickImageProviderMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494024592[\"quick.QuickImageProviderMixin\"]\n  2103494139792[\"qml.QmlImageProviderBaseMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494139792 --&gt; 2103494024592\n  140736120080256 --&gt; 2103494139792</code></pre>"},{"location":"qt_modules/quick/QuickImageResponse.html","title":"QuickImageResponse","text":"<p>Qt Base Class: QQuickImageResponse</p> <p>Signature: <code>QQuickImageResponse(self) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickImageResponse.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtQuick.QQuickImageResponse</code></p> <p>Interface for asynchronous image loading in QQuickAsyncImageProvider.</p> Source code in <code>prettyqt\\quick\\quickimageresponse.py</code> <pre><code>class QuickImageResponse(core.ObjectMixin, QtQuick.QQuickImageResponse):\n\"\"\"Interface for asynchronous image loading in QQuickAsyncImageProvider.\"\"\"\n</code></pre>"},{"location":"qt_modules/quick/QuickImageResponse.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494020752[\"quick.QuickImageResponse\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494044752[\"QtQuick.QQuickImageResponse\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494020752\n  140736120080256 --&gt; 2103255067472\n  2103494044752 --&gt; 2103494020752\n  2103254677056 --&gt; 2103494044752\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/quick/QuickImageResponse.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/quick/QuickItem.html","title":"QuickItem","text":"<p>Qt Base Class: QQuickItem</p> <p>Signature: <code>QQuickItem(self, parent: Optional[PySide6.QtQuick.QQuickItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QuickItemMixin</code>, <code>QtQuick.QQuickItem</code></p> <p>The most basic of all visual items in Qt Quick.</p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>class QuickItem(QuickItemMixin, QtQuick.QQuickItem):\n\"\"\"The most basic of all visual items in Qt Quick.\"\"\"\n</code></pre>"},{"location":"qt_modules/quick/QuickItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494049552[\"quick.QuickItem\"]\n  2103494035152[\"quick.QuickItemMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494125392[\"qml.QmlParserStatusMixin\"]\n  2103494265552[\"QtQuick.QQuickItem\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103500582160[\"QtQml.QQmlParserStatus\"]\n  2103494035152 --&gt; 2103494049552\n  2103255067472 --&gt; 2103494035152\n  140736120080256 --&gt; 2103255067472\n  2103494125392 --&gt; 2103494035152\n  140736120080256 --&gt; 2103494125392\n  2103494265552 --&gt; 2103494049552\n  2103254677056 --&gt; 2103494265552\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103500582160 --&gt; 2103494265552\n  2103206874128 --&gt; 2103500582160</code></pre>"},{"location":"qt_modules/quick/QuickItem.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QQuickItem <code>data</code> QQmlListProperty <code>resources</code> QQmlListProperty <code>children</code> QQmlListProperty <code>x</code> double <code>y</code> double <code>z</code> double <code>width</code> double <code>height</code> double <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>palette</code> QQuickPalette <code>visibleChildren</code> QQmlListProperty <code>states</code> QQmlListProperty <code>transitions</code> QQmlListProperty <code>state</code> QString <code>childrenRect</code> QRectF <code>anchors</code> QQuickAnchors <code>left</code> QQuickAnchorLine <code>right</code> QQuickAnchorLine <code>horizontalCenter</code> QQuickAnchorLine <code>top</code> QQuickAnchorLine <code>bottom</code> QQuickAnchorLine <code>verticalCenter</code> QQuickAnchorLine <code>baseline</code> QQuickAnchorLine <code>baselineOffset</code> double <code>clip</code> bool <code>focus</code> bool <code>activeFocus</code> bool <code>activeFocusOnTab</code> bool <code>rotation</code> double <code>scale</code> double <code>transformOrigin</code> QQuickItem::TransformOrigin <code>transformOriginPoint</code> QPointF <code>transform</code> QQmlListProperty <code>smooth</code> bool <code>antialiasing</code> bool <code>implicitWidth</code> double <code>implicitHeight</code> double <code>containmentMask</code> QObject <code>layer</code> QQuickItemLayer"},{"location":"qt_modules/quick/QuickItemGrabResult.html","title":"QuickItemGrabResult","text":""},{"location":"qt_modules/quick/QuickItemGrabResult.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>Contains the result from QQuickItem::grabToImage().</p> Source code in <code>prettyqt\\quick\\quickitemgrabresult.py</code> <pre><code>class QuickItemGrabResult(core.ObjectMixin):\n\"\"\"Contains the result from QQuickItem::grabToImage().\"\"\"\ndef __init__(self, item: QtQuick.QQuickItemGrabResult):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_image(self) -&gt; gui.Image:\nreturn gui.Image(self.image())\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\n</code></pre>"},{"location":"qt_modules/quick/QuickItemGrabResult.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494048592[\"quick.QuickItemGrabResult\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103494048592\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/quick/QuickItemMixin.html","title":"QuickItemMixin","text":""},{"location":"qt_modules/quick/QuickItemMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>qml.QmlParserStatusMixin</code></p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>class QuickItemMixin(core.ObjectMixin, qml.QmlParserStatusMixin):\ndef __getitem__(self, index: tuple[int, int]) -&gt; QtQuick.QQuickItem:\nreturn self.childAt(*index)\ndef __contains__(self, item: core.QPointF):\nreturn self.contains(item)\ndef get_children_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.childrenRect())\ndef get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\ndef get_flags(self):\npass\ndef set_transform_origin(\nself, origin: TransformOriginStr | QtQuick.QQuickItem.TransformOrigin\n):\n\"\"\"Set the origin point around which scale and rotation transform.\n        The default is \"center\".\n        Args:\n            origin: transform origin to use\n        \"\"\"\nself.setTransformOrigin(TRANSFORM_ORIGIN.get_enum_value(origin))\ndef get_transform_origin(self) -&gt; TransformOriginStr:\n\"\"\"Return the render type of text-like elements in Qt Quick.\n        Returns:\n            transform origin\n        \"\"\"\nreturn TRANSFORM_ORIGIN.inverse[self.transformOrigin()]\ndef set_size(self, size: core.QSize | datatypes.SizeFType):\nself.setSize(datatypes.to_sizef(size))\n</code></pre> Name Children Inherits QuickItemprettyqt.quick.quickitem <ul><li>QuickItemMixin</li><li>QQuickItem</li></ul> QuickPaintedItemprettyqt.quick.quickpainteditem <ul><li>QuickItemMixin</li><li>QQuickPaintedItem</li></ul>"},{"location":"qt_modules/quick/QuickItemMixin.html#prettyqt.quick.quickitem.QuickItemMixin.get_transform_origin","title":"<code>get_transform_origin() -&gt; TransformOriginStr</code>","text":"<p>Return the render type of text-like elements in Qt Quick.</p> Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def get_transform_origin(self) -&gt; TransformOriginStr:\n\"\"\"Return the render type of text-like elements in Qt Quick.\n    Returns:\n        transform origin\n    \"\"\"\nreturn TRANSFORM_ORIGIN.inverse[self.transformOrigin()]\n</code></pre>"},{"location":"qt_modules/quick/QuickItemMixin.html#prettyqt.quick.quickitem.QuickItemMixin.set_transform_origin","title":"<code>set_transform_origin(origin: TransformOriginStr | QtQuick.QQuickItem.TransformOrigin)</code>","text":"<p>Set the origin point around which scale and rotation transform.</p> <p>The default is \"center\".</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>TransformOriginStr | QtQuick.QQuickItem.TransformOrigin</code> <p>transform origin to use</p> required Source code in <code>prettyqt\\quick\\quickitem.py</code> <pre><code>def set_transform_origin(\nself, origin: TransformOriginStr | QtQuick.QQuickItem.TransformOrigin\n):\n\"\"\"Set the origin point around which scale and rotation transform.\n    The default is \"center\".\n    Args:\n        origin: transform origin to use\n    \"\"\"\nself.setTransformOrigin(TRANSFORM_ORIGIN.get_enum_value(origin))\n</code></pre>"},{"location":"qt_modules/quick/QuickItemMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494035152[\"quick.QuickItemMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494125392[\"qml.QmlParserStatusMixin\"]\n  2103255067472 --&gt; 2103494035152\n  140736120080256 --&gt; 2103255067472\n  2103494125392 --&gt; 2103494035152\n  140736120080256 --&gt; 2103494125392</code></pre>"},{"location":"qt_modules/quick/QuickPaintedItem.html","title":"QuickPaintedItem","text":"<p>Qt Base Class: QQuickPaintedItem</p> <p>Signature: <code>QQuickPaintedItem(self, parent: Optional[PySide6.QtQuick.QQuickItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickPaintedItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>quick.QuickItemMixin</code>, <code>quick.QQuickPaintedItem</code></p> <p>Way to use the QPainter API in the QML Scene Graph.</p> Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>class QuickPaintedItem(quick.QuickItemMixin, quick.QQuickPaintedItem):\n\"\"\"Way to use the QPainter API in the QML Scene Graph.\"\"\"\ndef get_fill_color(self) -&gt; gui.Color:\nreturn gui.Color(self.fillColor())\ndef get_texture_size(self) -&gt; core.Size:\nreturn core.Size(self.textureSize())\ndef set_render_target(self, target: RenderTargetStr | mod.RenderTarget):\n\"\"\"Set the render target.\n        Args:\n            target: render target to use\n        \"\"\"\nself.setRenderTarget(RENDER_TARGET[target])\ndef get_render_target(self) -&gt; RenderTargetStr:\n\"\"\"Return the render target.\n        Returns:\n            render target\n        \"\"\"\nreturn RENDER_TARGET.inverse[self.renderTarget()]\n</code></pre>"},{"location":"qt_modules/quick/QuickPaintedItem.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.get_render_target","title":"<code>get_render_target() -&gt; RenderTargetStr</code>","text":"<p>Return the render target.</p> Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def get_render_target(self) -&gt; RenderTargetStr:\n\"\"\"Return the render target.\n    Returns:\n        render target\n    \"\"\"\nreturn RENDER_TARGET.inverse[self.renderTarget()]\n</code></pre>"},{"location":"qt_modules/quick/QuickPaintedItem.html#prettyqt.quick.quickpainteditem.QuickPaintedItem.set_render_target","title":"<code>set_render_target(target: RenderTargetStr | mod.RenderTarget)</code>","text":"<p>Set the render target.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>RenderTargetStr | mod.RenderTarget</code> <p>render target to use</p> required Source code in <code>prettyqt\\quick\\quickpainteditem.py</code> <pre><code>def set_render_target(self, target: RenderTargetStr | mod.RenderTarget):\n\"\"\"Set the render target.\n    Args:\n        target: render target to use\n    \"\"\"\nself.setRenderTarget(RENDER_TARGET[target])\n</code></pre>"},{"location":"qt_modules/quick/QuickPaintedItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494017872[\"quick.QuickPaintedItem\"]\n  2103494035152[\"quick.QuickItemMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494125392[\"qml.QmlParserStatusMixin\"]\n  2103494271312[\"QtQuick.QQuickPaintedItem\"]\n  2103494265552[\"QtQuick.QQuickItem\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103500582160[\"QtQml.QQmlParserStatus\"]\n  2103494035152 --&gt; 2103494017872\n  2103255067472 --&gt; 2103494035152\n  140736120080256 --&gt; 2103255067472\n  2103494125392 --&gt; 2103494035152\n  140736120080256 --&gt; 2103494125392\n  2103494271312 --&gt; 2103494017872\n  2103494265552 --&gt; 2103494271312\n  2103254677056 --&gt; 2103494265552\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103500582160 --&gt; 2103494265552\n  2103206874128 --&gt; 2103500582160</code></pre>"},{"location":"qt_modules/quick/QuickPaintedItem.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QQuickItem <code>data</code> QQmlListProperty <code>resources</code> QQmlListProperty <code>children</code> QQmlListProperty <code>x</code> double <code>y</code> double <code>z</code> double <code>width</code> double <code>height</code> double <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>palette</code> QQuickPalette <code>visibleChildren</code> QQmlListProperty <code>states</code> QQmlListProperty <code>transitions</code> QQmlListProperty <code>state</code> QString <code>childrenRect</code> QRectF <code>anchors</code> QQuickAnchors <code>left</code> QQuickAnchorLine <code>right</code> QQuickAnchorLine <code>horizontalCenter</code> QQuickAnchorLine <code>top</code> QQuickAnchorLine <code>bottom</code> QQuickAnchorLine <code>verticalCenter</code> QQuickAnchorLine <code>baseline</code> QQuickAnchorLine <code>baselineOffset</code> double <code>clip</code> bool <code>focus</code> bool <code>activeFocus</code> bool <code>activeFocusOnTab</code> bool <code>rotation</code> double <code>scale</code> double <code>transformOrigin</code> QQuickItem::TransformOrigin <code>transformOriginPoint</code> QPointF <code>transform</code> QQmlListProperty <code>smooth</code> bool <code>antialiasing</code> bool <code>implicitWidth</code> double <code>implicitHeight</code> double <code>containmentMask</code> QObject <code>layer</code> QQuickItemLayer <code>contentsSize</code> QSize <code>fillColor</code> QColor <code>contentsScale</code> double <code>renderTarget</code> QQuickPaintedItem::RenderTarget <code>textureSize</code> QSize"},{"location":"qt_modules/quick/QuickRenderControl.html","title":"QuickRenderControl","text":"<p>Qt Base Class: QQuickRenderControl</p> <p>Signature: <code>QQuickRenderControl(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickRenderControl.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtQuick.QQuickRenderControl</code></p> <p>Mechanism for rendering the Qt Quick scenegraph onto an offscreen render target.</p> Source code in <code>prettyqt\\quick\\quickrendercontrol.py</code> <pre><code>class QuickRenderControl(core.ObjectMixin, QtQuick.QQuickRenderControl):\n\"\"\"Mechanism for rendering the Qt Quick scenegraph onto an offscreen render target.\"\"\"\n@contextlib.contextmanager\ndef edit_frame(self):\nself.beginFrame()\nyield None\nself.endFrame()\n</code></pre>"},{"location":"qt_modules/quick/QuickRenderControl.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494015952[\"quick.QuickRenderControl\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494273232[\"QtQuick.QQuickRenderControl\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494015952\n  140736120080256 --&gt; 2103255067472\n  2103494273232 --&gt; 2103494015952\n  2103254677056 --&gt; 2103494273232\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/quick/QuickRenderControl.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/quick/QuickTextDocument.html","title":"QuickTextDocument","text":"<p>Qt Base Class: QQuickTextDocument</p> <p>Signature: <code>QQuickTextDocument(self, parent: PySide6.QtQuick.QQuickItem) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickTextDocument.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtQuick.QQuickTextDocument</code></p> <p>Access to the QTextDocument of QQuickTextEdit.</p> Source code in <code>prettyqt\\quick\\quicktextdocument.py</code> <pre><code>class QuickTextDocument(core.ObjectMixin, QtQuick.QQuickTextDocument):\n\"\"\"Access to the QTextDocument of QQuickTextEdit.\"\"\"\n</code></pre>"},{"location":"qt_modules/quick/QuickTextDocument.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494016912[\"quick.QuickTextDocument\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494274192[\"QtQuick.QQuickTextDocument\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494016912\n  140736120080256 --&gt; 2103255067472\n  2103494274192 --&gt; 2103494016912\n  2103254677056 --&gt; 2103494274192\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/quick/QuickTextDocument.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/quick/QuickView.html","title":"QuickView","text":"<p>Qt Base Class: QQuickView</p> <p>Signature: <code>QQuickView(self, engine: PySide6.QtQml.QQmlEngine, parent: PySide6.QtGui.QWindow) -&gt; None QQuickView(self, parent: Optional[PySide6.QtGui.QWindow] = None) -&gt; None QQuickView(self, source: Union[PySide6.QtCore.QUrl, str], parent: Optional[PySide6.QtGui.QWindow] = None) -&gt; None QQuickView(self, source: Union[PySide6.QtCore.QUrl, str], renderControl: PySide6.QtQuick.QQuickRenderControl) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>quick.quickwindow.QuickWindowMixin</code>, <code>quick.QQuickView</code></p> <p>Window for displaying a Qt Quick user interface.</p> Source code in <code>prettyqt\\quick\\quickview.py</code> <pre><code>class QuickView(quick.quickwindow.QuickWindowMixin, quick.QQuickView):\n\"\"\"Window for displaying a Qt Quick user interface.\"\"\"\ndef set_source(self, source: datatypes.UrlType | datatypes.PathType):\nself.setSource(datatypes.to_local_url(source))\ndef get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toLocalFile())\ndef get_status(self) -&gt; StatusStr:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"qt_modules/quick/QuickView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494051472[\"quick.QuickView\"]\n  2103494050512[\"quick.QuickWindowMixin\"]\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103494047632[\"QtQuick.QQuickView\"]\n  2103494045712[\"QtQuick.QQuickWindow\"]\n  2103260797136[\"QtGui.QWindow\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259447312[\"QtGui.QSurface\"]\n  2103494050512 --&gt; 2103494051472\n  2103260916176 --&gt; 2103494050512\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096\n  2103494047632 --&gt; 2103494051472\n  2103494045712 --&gt; 2103494047632\n  2103260797136 --&gt; 2103494045712\n  2103254677056 --&gt; 2103260797136\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259447312 --&gt; 2103260797136\n  2103206874128 --&gt; 2103259447312</code></pre>"},{"location":"qt_modules/quick/QuickView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>title</code> QString <code>modality</code> Qt::WindowModality <code>flags</code> QFlags <code>x</code> int <code>y</code> int <code>width</code> int <code>height</code> int <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>visible</code> bool <code>active</code> bool <code>visibility</code> QWindow::Visibility <code>contentOrientation</code> Qt::ScreenOrientation <code>opacity</code> double <code>transientParent</code> QWindow <code>data</code> QQmlListProperty <code>color</code> QColor <code>contentItem</code> QQuickItem <code>activeFocusItem</code> QQuickItem <code>palette</code> QQuickPalette <code>resizeMode</code> QQuickView::ResizeMode <code>status</code> QQuickView::Status <code>source</code> QUrl"},{"location":"qt_modules/quick/QuickWindow.html","title":"QuickWindow","text":"<p>Qt Base Class: QQuickWindow</p> <p>Signature: <code>QQuickWindow(self, parent: Optional[PySide6.QtGui.QWindow] = None) -&gt; None QQuickWindow(self, renderControl: PySide6.QtQuick.QQuickRenderControl) -&gt; None</code></p>"},{"location":"qt_modules/quick/QuickWindow.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QuickWindowMixin</code>, <code>QtQuick.QQuickWindow</code></p> <p>The window for displaying a graphical QML scene.</p> Source code in <code>prettyqt\\quick\\quickwindow.py</code> <pre><code>class QuickWindow(QuickWindowMixin, QtQuick.QQuickWindow):\n\"\"\"The window for displaying a graphical QML scene.\"\"\"\n</code></pre>"},{"location":"qt_modules/quick/QuickWindow.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494032272[\"quick.QuickWindow\"]\n  2103494050512[\"quick.QuickWindowMixin\"]\n  2103260916176[\"gui.WindowMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260918096[\"gui.SurfaceMixin\"]\n  2103494045712[\"QtQuick.QQuickWindow\"]\n  2103260797136[\"QtGui.QWindow\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259447312[\"QtGui.QSurface\"]\n  2103494050512 --&gt; 2103494032272\n  2103260916176 --&gt; 2103494050512\n  2103255067472 --&gt; 2103260916176\n  140736120080256 --&gt; 2103255067472\n  2103260918096 --&gt; 2103260916176\n  140736120080256 --&gt; 2103260918096\n  2103494045712 --&gt; 2103494032272\n  2103260797136 --&gt; 2103494045712\n  2103254677056 --&gt; 2103260797136\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259447312 --&gt; 2103260797136\n  2103206874128 --&gt; 2103259447312</code></pre>"},{"location":"qt_modules/quick/QuickWindow.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>title</code> QString <code>modality</code> Qt::WindowModality <code>flags</code> QFlags <code>x</code> int <code>y</code> int <code>width</code> int <code>height</code> int <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>visible</code> bool <code>active</code> bool <code>visibility</code> QWindow::Visibility <code>contentOrientation</code> Qt::ScreenOrientation <code>opacity</code> double <code>transientParent</code> QWindow <code>data</code> QQmlListProperty <code>color</code> QColor <code>contentItem</code> QQuickItem <code>activeFocusItem</code> QQuickItem <code>palette</code> QQuickPalette"},{"location":"qt_modules/quick/SGNode.html","title":"SGNode","text":"<p>Qt Base Class: QSGNode</p> <p>Signature: <code>QSGNode(self) -&gt; None QSGNode(self, type: PySide6.QtQuick.QSGNode.NodeType) -&gt; None</code></p>"},{"location":"qt_modules/quick/SGNode.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtQuick.QSGNode</code></p> <p>The base class for all nodes in the scene graph.</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>class SGNode(QtQuick.QSGNode):\n\"\"\"The base class for all nodes in the scene graph.\"\"\"\ndef __getitem__(self, index: int) -&gt; QtQuick.QSGNode:\nreturn self.childAtIndex(index)\ndef __delitem__(self, item: int | QtQuick.QSGNode):\nif isinstance(item, int):\nitem = self.childAtIndex(item)\nself.removeChildNode(item)\ndef get_type(self) -&gt; NodeTypeStr:\n\"\"\"Get the type of the node.\n        Returns:\n            Node type\n        \"\"\"\nreturn NODE_TYPE.inverse[self.type()]\ndef get_flags(self) -&gt; list[FlagStr]:\nreturn FLAG.get_list(self.flags())\ndef get_children(self, recursive: bool = False) -&gt; list[SGNode]:\n\"\"\"Get children of this item.\n        recursive option is written iteratively to also support original QTreeWidgetItems.\n        \"\"\"\nif not recursive:\nreturn [self.childAtIndex(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.childAtIndex(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\n</code></pre>"},{"location":"qt_modules/quick/SGNode.html#prettyqt.quick.sgnode.SGNode.get_children","title":"<code>get_children(recursive: bool = False) -&gt; list[SGNode]</code>","text":"<p>Get children of this item.</p> <p>recursive option is written iteratively to also support original QTreeWidgetItems.</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_children(self, recursive: bool = False) -&gt; list[SGNode]:\n\"\"\"Get children of this item.\n    recursive option is written iteratively to also support original QTreeWidgetItems.\n    \"\"\"\nif not recursive:\nreturn [self.childAtIndex(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.childAtIndex(i) for i in range(node.childCount()))\nnodes = items\nreturn results[1:]\n</code></pre>"},{"location":"qt_modules/quick/SGNode.html#prettyqt.quick.sgnode.SGNode.get_type","title":"<code>get_type() -&gt; NodeTypeStr</code>","text":"<p>Get the type of the node.</p> Source code in <code>prettyqt\\quick\\sgnode.py</code> <pre><code>def get_type(self) -&gt; NodeTypeStr:\n\"\"\"Get the type of the node.\n    Returns:\n        Node type\n    \"\"\"\nreturn NODE_TYPE.inverse[self.type()]\n</code></pre>"},{"location":"qt_modules/quick/SGNode.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494052432[\"quick.SGNode\"]\n  2103494187792[\"QtQuick.QSGNode\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494187792 --&gt; 2103494052432\n  2103206874128 --&gt; 2103494187792\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/quick/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>quick</li> <li>SGNode</li> <li>QuickImageResponse</li> <li>QuickView</li> <li>QuickImageProviderMixin</li> <li>QuickItemMixin</li> <li>QuickImageProvider</li> <li>QuickItem</li> <li>QuickItemGrabResult</li> <li>QuickPaintedItem</li> <li>QuickAsyncImageProvider</li> <li>QuickWindow</li> <li>QuickRenderControl</li> <li>QuickTextDocument</li> </ul>"},{"location":"qt_modules/quickwidgets/index.html","title":"quickwidgets","text":"<p>Provides a widget class for displaying a Qt Quick user interface.</p> Name Children Inherits QuickWidgetprettyqt.quickwidgets.quickwidget <ul><li>WidgetMixin</li><li>QQuickWidget</li></ul>"},{"location":"qt_modules/quickwidgets/QuickWidget.html","title":"QuickWidget","text":"<p>Qt Base Class: QQuickWidget</p> <p>Signature: <code>QQuickWidget(self, engine: PySide6.QtQml.QQmlEngine, parent: PySide6.QtWidgets.QWidget) -&gt; None QQuickWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QQuickWidget(self, source: Union[PySide6.QtCore.QUrl, str], parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/quickwidgets/QuickWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtQuickWidgets.QQuickWidget</code></p> <p>Class providing a widget for displaying a Qt Quick user interface.</p> Source code in <code>prettyqt\\quickwidgets\\quickwidget.py</code> <pre><code>class QuickWidget(widgets.WidgetMixin, QtQuickWidgets.QQuickWidget):\n\"\"\"Class providing a widget for displaying a Qt Quick user interface.\"\"\"\ndef set_source(self, source: datatypes.UrlType | datatypes.PathType):\nif isinstance(source, os.PathLike):\nsource = os.fspath(source)\nif isinstance(source, str):\nsource = core.Url.fromLocalFile(source)\nself.setSource(source)\ndef get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toLocalFile())\ndef get_status(self) -&gt; StatusStr:\nreturn STATUS.inverse[self.status()]\n</code></pre>"},{"location":"qt_modules/quickwidgets/QuickWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494025552[\"quickwidgets.QuickWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103494053392[\"QtQuickWidgets.QQuickWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103494025552\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103494053392 --&gt; 2103494025552\n  2103259691120 --&gt; 2103494053392\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/quickwidgets/QuickWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>resizeMode</code> QQuickWidget::ResizeMode <code>status</code> QQuickWidget::Status <code>source</code> QUrl"},{"location":"qt_modules/quickwidgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>quickwidgets</li> <li>QuickWidget</li> </ul>"},{"location":"qt_modules/spatialaudio/index.html","title":"spatialaudio","text":"<p>Create sound scenes in 3D space containing different sound sources.</p> Name Children Inherits AudioRoomprettyqt.spatialaudio.audioroom <ul><li>ObjectMixin</li><li>QAudioRoom</li></ul> AudioListenerprettyqt.spatialaudio.audiolistener <ul><li>ObjectMixin</li><li>QAudioListener</li></ul> AudioEngineprettyqt.spatialaudio.audioengine <ul><li>ObjectMixin</li><li>QAudioEngine</li></ul> AmbientSoundprettyqt.spatialaudio.ambientsound <ul><li>ObjectMixin</li><li>QAmbientSound</li></ul> SpatialSoundprettyqt.spatialaudio.spatialsound <ul><li>ObjectMixin</li><li>QSpatialSound</li></ul>"},{"location":"qt_modules/spatialaudio/AmbientSound.html","title":"AmbientSound","text":"<p>Qt Base Class: QAmbientSound</p> <p>Signature: <code>QAmbientSound(self, engine: PySide6.QtSpatialAudio.QAudioEngine) -&gt; None</code></p>"},{"location":"qt_modules/spatialaudio/AmbientSound.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QAmbientSound</code></p> <p>A stereo overlay sound.</p> Source code in <code>prettyqt\\spatialaudio\\ambientsound.py</code> <pre><code>class AmbientSound(core.ObjectMixin, QtSpatialAudio.QAmbientSound):\n\"\"\"A stereo overlay sound.\"\"\"\ndef set_source(self, source: datatypes.UrlType):\nself.setSource(datatypes.to_local_url(source))\ndef get_source(self) -&gt; pathlib.Path:\nreturn pathlib.Path(self.source().toString())\n</code></pre>"},{"location":"qt_modules/spatialaudio/AmbientSound.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494643984[\"spatialaudio.AmbientSound\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494637264[\"QtSpatialAudio.QAmbientSound\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494643984\n  140736120080256 --&gt; 2103255067472\n  2103494637264 --&gt; 2103494643984\n  2103254677056 --&gt; 2103494637264\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/spatialaudio/AmbientSound.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>source</code> QUrl <code>volume</code> float <code>loops</code> int <code>autoPlay</code> bool"},{"location":"qt_modules/spatialaudio/AudioEngine.html","title":"AudioEngine","text":"<p>Qt Base Class: QAudioEngine</p> <p>Signature: <code>QAudioEngine(self) -&gt; None QAudioEngine(self, parent: PySide6.QtCore.QObject) -&gt; None QAudioEngine(self, sampleRate: int, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/spatialaudio/AudioEngine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QAudioEngine</code></p> <p>Manages a three dimensional sound field.</p> Source code in <code>prettyqt\\spatialaudio\\audioengine.py</code> <pre><code>class AudioEngine(core.ObjectMixin, QtSpatialAudio.QAudioEngine):\n\"\"\"Manages a three dimensional sound field.\"\"\"\ndef set_output_mode(\nself, mode: OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode\n):\n\"\"\"Set the output mode.\n        Args:\n            mode: output mode\n        \"\"\"\nself.setOutputMode(OUTPUT_MODE.get_enum_value(mode))\ndef get_output_mode(self) -&gt; OutputModeStr:\n\"\"\"Return current output mode.\n        Returns:\n            output mode\n        \"\"\"\nreturn OUTPUT_MODE.inverse[self.outputMode()]\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioEngine.html#prettyqt.spatialaudio.audioengine.AudioEngine.get_output_mode","title":"<code>get_output_mode() -&gt; OutputModeStr</code>","text":"<p>Return current output mode.</p> Source code in <code>prettyqt\\spatialaudio\\audioengine.py</code> <pre><code>def get_output_mode(self) -&gt; OutputModeStr:\n\"\"\"Return current output mode.\n    Returns:\n        output mode\n    \"\"\"\nreturn OUTPUT_MODE.inverse[self.outputMode()]\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioEngine.html#prettyqt.spatialaudio.audioengine.AudioEngine.set_output_mode","title":"<code>set_output_mode(mode: OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode)</code>","text":"<p>Set the output mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode</code> <p>output mode</p> required Source code in <code>prettyqt\\spatialaudio\\audioengine.py</code> <pre><code>def set_output_mode(\nself, mode: OutputModeStr | QtSpatialAudio.QAudioEngine.OutputMode\n):\n\"\"\"Set the output mode.\n    Args:\n        mode: output mode\n    \"\"\"\nself.setOutputMode(OUTPUT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioEngine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494615184[\"spatialaudio.AudioEngine\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494622864[\"QtSpatialAudio.QAudioEngine\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494615184\n  140736120080256 --&gt; 2103255067472\n  2103494622864 --&gt; 2103494615184\n  2103254677056 --&gt; 2103494622864\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/spatialaudio/AudioEngine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>outputMode</code> QAudioEngine::OutputMode <code>outputDevice</code> QAudioDevice <code>masterVolume</code> float <code>paused</code> bool <code>distanceScale</code> float"},{"location":"qt_modules/spatialaudio/AudioListener.html","title":"AudioListener","text":"<p>Qt Base Class: QAudioListener</p> <p>Signature: <code>QAudioListener(self, engine: PySide6.QtSpatialAudio.QAudioEngine) -&gt; None</code></p>"},{"location":"qt_modules/spatialaudio/AudioListener.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QAudioListener</code></p> <p>Defines the position and orientation of the person listening to a sound field.</p> Source code in <code>prettyqt\\spatialaudio\\audiolistener.py</code> <pre><code>class AudioListener(core.ObjectMixin, QtSpatialAudio.QAudioListener):\n\"\"\"Defines the position and orientation of the person listening to a sound field.\"\"\"\ndef set_position(self, position: datatypes.Vector3DType):\nself.setPosition(datatypes.to_vector3d(position))\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioListener.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494630544[\"spatialaudio.AudioListener\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494623824[\"QtSpatialAudio.QAudioListener\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494630544\n  140736120080256 --&gt; 2103255067472\n  2103494623824 --&gt; 2103494630544\n  2103254677056 --&gt; 2103494623824\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/spatialaudio/AudioListener.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/spatialaudio/AudioRoom.html","title":"AudioRoom","text":"<p>Qt Base Class: QAudioRoom</p> <p>Signature: <code>QAudioRoom(self, engine: PySide6.QtSpatialAudio.QAudioEngine) -&gt; None</code></p>"},{"location":"qt_modules/spatialaudio/AudioRoom.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QAudioRoom</code></p> <p>Represents a room with its acoustic properties.</p> Source code in <code>prettyqt\\spatialaudio\\audioroom.py</code> <pre><code>class AudioRoom(core.ObjectMixin, QtSpatialAudio.QAudioRoom):\n\"\"\"Represents a room with its acoustic properties.\"\"\"\ndef set_wall_material(\nself,\nwall: WallStr | QtSpatialAudio.QAudioRoom.Wall,\nmaterial: MaterialStr | QtSpatialAudio.QAudioRoom.Material,\n):\n\"\"\"Set the wall material.\n        Args:\n            wall: Wall to set\n            material: material type\n        \"\"\"\nself.setWallMaterial(WALL.get_enum_value(wall), MATERIAL.get_enum_value(material))\ndef get_wall_material(\nself, wall: WallStr | QtSpatialAudio.QAudioRoom.Wall\n) -&gt; MaterialStr:\n\"\"\"Return wall material.\n        Arguments:\n            wall: wall to get material for\n        \"\"\"\nreturn MATERIAL.inverse[self.wallMaterial(WALL.get_enum_value(wall))]\ndef set_dimensions(self, dimensions: datatypes.Vector3DType):\nself.setDimensions(datatypes.to_vector3d(dimensions))\ndef set_position(self, position: datatypes.Vector3DType):\nself.setPosition(datatypes.to_vector3d(position))\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioRoom.html#prettyqt.spatialaudio.audioroom.AudioRoom.get_wall_material","title":"<code>get_wall_material(wall: WallStr | QtSpatialAudio.QAudioRoom.Wall) -&gt; MaterialStr</code>","text":"<p>Return wall material.</p> <p>Parameters:</p> Name Type Description Default <code>wall</code> <code>WallStr | QtSpatialAudio.QAudioRoom.Wall</code> <p>wall to get material for</p> required Source code in <code>prettyqt\\spatialaudio\\audioroom.py</code> <pre><code>def get_wall_material(\nself, wall: WallStr | QtSpatialAudio.QAudioRoom.Wall\n) -&gt; MaterialStr:\n\"\"\"Return wall material.\n    Arguments:\n        wall: wall to get material for\n    \"\"\"\nreturn MATERIAL.inverse[self.wallMaterial(WALL.get_enum_value(wall))]\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioRoom.html#prettyqt.spatialaudio.audioroom.AudioRoom.set_wall_material","title":"<code>set_wall_material(wall: WallStr | QtSpatialAudio.QAudioRoom.Wall, material: MaterialStr | QtSpatialAudio.QAudioRoom.Material)</code>","text":"<p>Set the wall material.</p> <p>Parameters:</p> Name Type Description Default <code>wall</code> <code>WallStr | QtSpatialAudio.QAudioRoom.Wall</code> <p>Wall to set</p> required <code>material</code> <code>MaterialStr | QtSpatialAudio.QAudioRoom.Material</code> <p>material type</p> required Source code in <code>prettyqt\\spatialaudio\\audioroom.py</code> <pre><code>def set_wall_material(\nself,\nwall: WallStr | QtSpatialAudio.QAudioRoom.Wall,\nmaterial: MaterialStr | QtSpatialAudio.QAudioRoom.Material,\n):\n\"\"\"Set the wall material.\n    Args:\n        wall: Wall to set\n        material: material type\n    \"\"\"\nself.setWallMaterial(WALL.get_enum_value(wall), MATERIAL.get_enum_value(material))\n</code></pre>"},{"location":"qt_modules/spatialaudio/AudioRoom.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494639184[\"spatialaudio.AudioRoom\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494625744[\"QtSpatialAudio.QAudioRoom\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494639184\n  140736120080256 --&gt; 2103255067472\n  2103494625744 --&gt; 2103494639184\n  2103254677056 --&gt; 2103494625744\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/spatialaudio/AudioRoom.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>position</code> QVector3D <code>dimensions</code> QVector3D <code>rotation</code> QQuaternion <code>reflectionGain</code> float <code>reverbGain</code> float <code>reverbTime</code> float <code>reverbBrightness</code> float"},{"location":"qt_modules/spatialaudio/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>spatialaudio</li> <li>AudioRoom</li> <li>AudioListener</li> <li>AudioEngine</li> <li>AmbientSound</li> <li>SpatialSound</li> </ul>"},{"location":"qt_modules/spatialaudio/SpatialSound.html","title":"SpatialSound","text":"<p>Qt Base Class: QSpatialSound</p> <p>Signature: <code>QSpatialSound(self, engine: PySide6.QtSpatialAudio.QAudioEngine) -&gt; None</code></p>"},{"location":"qt_modules/spatialaudio/SpatialSound.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtSpatialAudio.QSpatialSound</code></p> <p>A sound object in 3D space.</p> Source code in <code>prettyqt\\spatialaudio\\spatialsound.py</code> <pre><code>class SpatialSound(core.ObjectMixin, QtSpatialAudio.QSpatialSound):\n\"\"\"A sound object in 3D space.\"\"\"\ndef set_distance_model(\nself, model: DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel\n):\n\"\"\"Set the distance model.\n        Args:\n            model: distance model\n        \"\"\"\nself.setDistanceModel(DISTANCE_MODEL.get_enum_value(model))\ndef get_distance_model(self) -&gt; DistanceModelStr:\n\"\"\"Return current distance model.\n        Returns:\n            distance model\n        \"\"\"\nreturn DISTANCE_MODEL.inverse[self.distanceModel()]\ndef set_position(self, position: datatypes.Vector3DType):\nself.setPosition(datatypes.to_vector3d(position))\n</code></pre>"},{"location":"qt_modules/spatialaudio/SpatialSound.html#prettyqt.spatialaudio.spatialsound.SpatialSound.get_distance_model","title":"<code>get_distance_model() -&gt; DistanceModelStr</code>","text":"<p>Return current distance model.</p> Source code in <code>prettyqt\\spatialaudio\\spatialsound.py</code> <pre><code>def get_distance_model(self) -&gt; DistanceModelStr:\n\"\"\"Return current distance model.\n    Returns:\n        distance model\n    \"\"\"\nreturn DISTANCE_MODEL.inverse[self.distanceModel()]\n</code></pre>"},{"location":"qt_modules/spatialaudio/SpatialSound.html#prettyqt.spatialaudio.spatialsound.SpatialSound.set_distance_model","title":"<code>set_distance_model(model: DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel)</code>","text":"<p>Set the distance model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel</code> <p>distance model</p> required Source code in <code>prettyqt\\spatialaudio\\spatialsound.py</code> <pre><code>def set_distance_model(\nself, model: DistanceModelStr | QtSpatialAudio.QSpatialSound.DistanceModel\n):\n\"\"\"Set the distance model.\n    Args:\n        model: distance model\n    \"\"\"\nself.setDistanceModel(DISTANCE_MODEL.get_enum_value(model))\n</code></pre>"},{"location":"qt_modules/spatialaudio/SpatialSound.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494642064[\"spatialaudio.SpatialSound\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494627664[\"QtSpatialAudio.QSpatialSound\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494642064\n  140736120080256 --&gt; 2103255067472\n  2103494627664 --&gt; 2103494642064\n  2103254677056 --&gt; 2103494627664\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/spatialaudio/SpatialSound.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>source</code> QUrl <code>position</code> QVector3D <code>rotation</code> QQuaternion <code>volume</code> float <code>distanceModel</code> QSpatialSound::DistanceModel <code>size</code> float <code>distanceCutoff</code> float <code>manualAttenuation</code> float <code>occlusionIntensity</code> float <code>directivity</code> float <code>directivityOrder</code> float <code>nearFieldGain</code> float <code>loops</code> int <code>autoPlay</code> bool"},{"location":"qt_modules/statemachine/index.html","title":"statemachine","text":"<p>Provides classes for creating and executing state graphs.</p> Name Children Inherits AbstractStateMixinprettyqt.statemachine.abstractstate <ul><li>AbstractState</li><li>FinalState</li><li>HistoryState</li><li><code>StateMixin</code></li></ul> <ul><li>ObjectMixin</li></ul> EventTransitionprettyqt.statemachine.eventtransition <ul><li>AbstractTransitionMixin</li><li>QEventTransition</li></ul> HistoryStateprettyqt.statemachine.historystate <ul><li>AbstractStateMixin</li><li>QHistoryState</li></ul> AbstractTransitionprettyqt.statemachine.abstracttransition <ul><li>AbstractTransitionMixin</li><li>QAbstractTransition</li></ul> StateMachineprettyqt.statemachine.statemachine <ul><li><code>StateMixin</code></li><li>QStateMachine</li></ul> Stateprettyqt.statemachine.state <ul><li><code>StateMixin</code></li><li>QState</li></ul> FinalStateprettyqt.statemachine.finalstate <ul><li>AbstractStateMixin</li><li>QFinalState</li></ul> AbstractTransitionMixinprettyqt.statemachine.abstracttransition <ul><li>AbstractTransition</li><li>EventTransition</li><li>SignalTransition</li></ul> <ul><li>ObjectMixin</li></ul> SignalTransitionprettyqt.statemachine.signaltransition <ul><li>AbstractTransitionMixin</li><li>QSignalTransition</li></ul> AbstractStateprettyqt.statemachine.abstractstate <ul><li>AbstractStateMixin</li><li>QAbstractState</li></ul>"},{"location":"qt_modules/statemachine/AbstractState.html","title":"AbstractState","text":"<p>Qt Base Class: QAbstractState</p> <p>Signature: <code>QAbstractState(self, parent: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/AbstractState.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractStateMixin</code>, <code>QtStateMachine.QAbstractState</code></p> Source code in <code>prettyqt\\statemachine\\abstractstate.py</code> <pre><code>class AbstractState(AbstractStateMixin, QtStateMachine.QAbstractState):\npass\n</code></pre>"},{"location":"qt_modules/statemachine/AbstractState.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494587344[\"statemachine.AbstractState\"]\n  2103494554704[\"statemachine.AbstractStateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494567184[\"QtStateMachine.QAbstractState\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494554704 --&gt; 2103494587344\n  2103255067472 --&gt; 2103494554704\n  140736120080256 --&gt; 2103255067472\n  2103494567184 --&gt; 2103494587344\n  2103254677056 --&gt; 2103494567184\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/AbstractState.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool"},{"location":"qt_modules/statemachine/AbstractStateMixin.html","title":"AbstractStateMixin","text":""},{"location":"qt_modules/statemachine/AbstractStateMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\statemachine\\abstractstate.py</code> <pre><code>class AbstractStateMixin(core.ObjectMixin):\npass\n</code></pre> Name Children Inherits AbstractStateprettyqt.statemachine.abstractstate <ul><li>AbstractStateMixin</li><li>QAbstractState</li></ul> FinalStateprettyqt.statemachine.finalstate <ul><li>AbstractStateMixin</li><li>QFinalState</li></ul> HistoryStateprettyqt.statemachine.historystate <ul><li>AbstractStateMixin</li><li>QHistoryState</li></ul> <code>StateMixin</code>prettyqt.statemachine.state <ul><li>State</li><li>StateMachine</li></ul> <ul><li>AbstractStateMixin</li></ul>"},{"location":"qt_modules/statemachine/AbstractStateMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494554704[\"statemachine.AbstractStateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103494554704\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/statemachine/AbstractTransition.html","title":"AbstractTransition","text":"<p>Qt Base Class: QAbstractTransition</p> <p>Signature: <code>QAbstractTransition(self, sourceState: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/AbstractTransition.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractTransitionMixin</code>, <code>QtStateMachine.QAbstractTransition</code></p> Source code in <code>prettyqt\\statemachine\\abstracttransition.py</code> <pre><code>class AbstractTransition(AbstractTransitionMixin, QtStateMachine.QAbstractTransition):\npass\n</code></pre>"},{"location":"qt_modules/statemachine/AbstractTransition.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494598864[\"statemachine.AbstractTransition\"]\n  2103494588304[\"statemachine.AbstractTransitionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494566224[\"QtStateMachine.QAbstractTransition\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494588304 --&gt; 2103494598864\n  2103255067472 --&gt; 2103494588304\n  140736120080256 --&gt; 2103255067472\n  2103494566224 --&gt; 2103494598864\n  2103254677056 --&gt; 2103494566224\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/AbstractTransition.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceState</code> QState <code>targetState</code> QAbstractState <code>targetStates</code> QList <code>transitionType</code> QAbstractTransition::TransitionType"},{"location":"qt_modules/statemachine/AbstractTransitionMixin.html","title":"AbstractTransitionMixin","text":""},{"location":"qt_modules/statemachine/AbstractTransitionMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\statemachine\\abstracttransition.py</code> <pre><code>class AbstractTransitionMixin(core.ObjectMixin):\ndef set_transition_type(\nself, typ: TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType\n):\n\"\"\"Set transition type.\n        Args:\n            typ: transition type to use\n        \"\"\"\nself.setTransitionType(TRANSITION_TYPE.get_enum_value(typ))\ndef get_transition_type(self) -&gt; TransitionTypeStr:\n\"\"\"Return current transition type.\n        Returns:\n            transition type\n        \"\"\"\nreturn TRANSITION_TYPE.inverse[self.transitionType()]\n</code></pre> Name Children Inherits AbstractTransitionprettyqt.statemachine.abstracttransition <ul><li>AbstractTransitionMixin</li><li>QAbstractTransition</li></ul> EventTransitionprettyqt.statemachine.eventtransition <ul><li>AbstractTransitionMixin</li><li>QEventTransition</li></ul> SignalTransitionprettyqt.statemachine.signaltransition <ul><li>AbstractTransitionMixin</li><li>QSignalTransition</li></ul>"},{"location":"qt_modules/statemachine/AbstractTransitionMixin.html#prettyqt.statemachine.abstracttransition.AbstractTransitionMixin.get_transition_type","title":"<code>get_transition_type() -&gt; TransitionTypeStr</code>","text":"<p>Return current transition type.</p> Source code in <code>prettyqt\\statemachine\\abstracttransition.py</code> <pre><code>def get_transition_type(self) -&gt; TransitionTypeStr:\n\"\"\"Return current transition type.\n    Returns:\n        transition type\n    \"\"\"\nreturn TRANSITION_TYPE.inverse[self.transitionType()]\n</code></pre>"},{"location":"qt_modules/statemachine/AbstractTransitionMixin.html#prettyqt.statemachine.abstracttransition.AbstractTransitionMixin.set_transition_type","title":"<code>set_transition_type(typ: TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType)</code>","text":"<p>Set transition type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType</code> <p>transition type to use</p> required Source code in <code>prettyqt\\statemachine\\abstracttransition.py</code> <pre><code>def set_transition_type(\nself, typ: TransitionTypeStr | QtStateMachine.QAbstractTransition.TransitionType\n):\n\"\"\"Set transition type.\n    Args:\n        typ: transition type to use\n    \"\"\"\nself.setTransitionType(TRANSITION_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/statemachine/AbstractTransitionMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494588304[\"statemachine.AbstractTransitionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103494588304\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/statemachine/EventTransition.html","title":"EventTransition","text":"<p>Qt Base Class: QEventTransition</p> <p>Signature: <code>QEventTransition(self, object: PySide6.QtCore.QObject, type: PySide6.QtCore.QEvent.Type, sourceState: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None QEventTransition(self, sourceState: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/EventTransition.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>statemachine.AbstractTransitionMixin</code>, <code>statemachine.QEventTransition</code></p> Source code in <code>prettyqt\\statemachine\\eventtransition.py</code> <pre><code>class EventTransition(\nstatemachine.AbstractTransitionMixin, statemachine.QEventTransition\n):\npass\n</code></pre>"},{"location":"qt_modules/statemachine/EventTransition.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494592144[\"statemachine.EventTransition\"]\n  2103494588304[\"statemachine.AbstractTransitionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494573904[\"QtStateMachine.QEventTransition\"]\n  2103494566224[\"QtStateMachine.QAbstractTransition\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494588304 --&gt; 2103494592144\n  2103255067472 --&gt; 2103494588304\n  140736120080256 --&gt; 2103255067472\n  2103494573904 --&gt; 2103494592144\n  2103494566224 --&gt; 2103494573904\n  2103254677056 --&gt; 2103494566224\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/EventTransition.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceState</code> QState <code>targetState</code> QAbstractState <code>targetStates</code> QList <code>transitionType</code> QAbstractTransition::TransitionType <code>eventSource</code> QObject <code>eventType</code> QEvent::Type"},{"location":"qt_modules/statemachine/FinalState.html","title":"FinalState","text":"<p>Qt Base Class: QFinalState</p> <p>Signature: <code>QFinalState(self, parent: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/FinalState.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>statemachine.AbstractStateMixin</code>, <code>statemachine.QFinalState</code></p> Source code in <code>prettyqt\\statemachine\\finalstate.py</code> <pre><code>class FinalState(statemachine.AbstractStateMixin, statemachine.QFinalState):\npass\n</code></pre>"},{"location":"qt_modules/statemachine/FinalState.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494589264[\"statemachine.FinalState\"]\n  2103494554704[\"statemachine.AbstractStateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494580624[\"QtStateMachine.QFinalState\"]\n  2103494567184[\"QtStateMachine.QAbstractState\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494554704 --&gt; 2103494589264\n  2103255067472 --&gt; 2103494554704\n  140736120080256 --&gt; 2103255067472\n  2103494580624 --&gt; 2103494589264\n  2103494567184 --&gt; 2103494580624\n  2103254677056 --&gt; 2103494567184\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/FinalState.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool"},{"location":"qt_modules/statemachine/HistoryState.html","title":"HistoryState","text":"<p>Qt Base Class: QHistoryState</p> <p>Signature: <code>QHistoryState(self, parent: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None QHistoryState(self, type: PySide6.QtStateMachine.QHistoryState.HistoryType, parent: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/HistoryState.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>statemachine.AbstractStateMixin</code>, <code>statemachine.QHistoryState</code></p> Source code in <code>prettyqt\\statemachine\\historystate.py</code> <pre><code>class HistoryState(statemachine.AbstractStateMixin, statemachine.QHistoryState):\ndef set_history_type(\nself, typ: HistoryTypeStr | statemachine.QHistoryState.HistoryType\n):\n\"\"\"Set history type to use.\n        Args:\n            typ: history type to use\n        \"\"\"\nself.setHistoryType(HISTORY_TYPE.get_enum_value(typ))\ndef get_history_type(self) -&gt; HistoryTypeStr:\n\"\"\"Return current history type.\n        Returns:\n            history type\n        \"\"\"\nreturn HISTORY_TYPE.inverse[self.historyType()]\n</code></pre>"},{"location":"qt_modules/statemachine/HistoryState.html#prettyqt.statemachine.historystate.HistoryState.get_history_type","title":"<code>get_history_type() -&gt; HistoryTypeStr</code>","text":"<p>Return current history type.</p> Source code in <code>prettyqt\\statemachine\\historystate.py</code> <pre><code>def get_history_type(self) -&gt; HistoryTypeStr:\n\"\"\"Return current history type.\n    Returns:\n        history type\n    \"\"\"\nreturn HISTORY_TYPE.inverse[self.historyType()]\n</code></pre>"},{"location":"qt_modules/statemachine/HistoryState.html#prettyqt.statemachine.historystate.HistoryState.set_history_type","title":"<code>set_history_type(typ: HistoryTypeStr | statemachine.QHistoryState.HistoryType)</code>","text":"<p>Set history type to use.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>HistoryTypeStr | statemachine.QHistoryState.HistoryType</code> <p>history type to use</p> required Source code in <code>prettyqt\\statemachine\\historystate.py</code> <pre><code>def set_history_type(\nself, typ: HistoryTypeStr | statemachine.QHistoryState.HistoryType\n):\n\"\"\"Set history type to use.\n    Args:\n        typ: history type to use\n    \"\"\"\nself.setHistoryType(HISTORY_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/statemachine/HistoryState.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494599824[\"statemachine.HistoryState\"]\n  2103494554704[\"statemachine.AbstractStateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494574864[\"QtStateMachine.QHistoryState\"]\n  2103494567184[\"QtStateMachine.QAbstractState\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494554704 --&gt; 2103494599824\n  2103255067472 --&gt; 2103494554704\n  140736120080256 --&gt; 2103255067472\n  2103494574864 --&gt; 2103494599824\n  2103494567184 --&gt; 2103494574864\n  2103254677056 --&gt; 2103494567184\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/HistoryState.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool <code>defaultState</code> QAbstractState <code>defaultTransition</code> QAbstractTransition <code>historyType</code> QHistoryState::HistoryType"},{"location":"qt_modules/statemachine/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>statemachine</li> <li>AbstractStateMixin</li> <li>EventTransition</li> <li>HistoryState</li> <li>AbstractTransition</li> <li>StateMachine</li> <li>State</li> <li>FinalState</li> <li>AbstractTransitionMixin</li> <li>SignalTransition</li> <li>AbstractState</li> </ul>"},{"location":"qt_modules/statemachine/SignalTransition.html","title":"SignalTransition","text":"<p>Qt Base Class: QSignalTransition</p> <p>Signature: <code>QSignalTransition(self, arg__1: object, arg__2: Optional[PySide6.QtStateMachine.QState] = None) -&gt; PySide6.QtStateMachine.QSignalTransition QSignalTransition(self, sender: PySide6.QtCore.QObject, signal: bytes, sourceState: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None QSignalTransition(self, sourceState: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/SignalTransition.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>statemachine.AbstractTransitionMixin</code>, <code>statemachine.QSignalTransition</code></p> Source code in <code>prettyqt\\statemachine\\signaltransition.py</code> <pre><code>class SignalTransition(\nstatemachine.AbstractTransitionMixin, statemachine.QSignalTransition\n):\npass\n</code></pre>"},{"location":"qt_modules/statemachine/SignalTransition.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494595024[\"statemachine.SignalTransition\"]\n  2103494588304[\"statemachine.AbstractTransitionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494557584[\"QtStateMachine.QSignalTransition\"]\n  2103494566224[\"QtStateMachine.QAbstractTransition\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494588304 --&gt; 2103494595024\n  2103255067472 --&gt; 2103494588304\n  140736120080256 --&gt; 2103255067472\n  2103494557584 --&gt; 2103494595024\n  2103494566224 --&gt; 2103494557584\n  2103254677056 --&gt; 2103494566224\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/SignalTransition.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>sourceState</code> QState <code>targetState</code> QAbstractState <code>targetStates</code> QList <code>transitionType</code> QAbstractTransition::TransitionType <code>senderObject</code> const QObject <code>signal</code> QByteArray"},{"location":"qt_modules/statemachine/State.html","title":"State","text":"<p>Qt Base Class: QState</p> <p>Signature: <code>QState(self, childMode: PySide6.QtStateMachine.QState.ChildMode, parent: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None QState(self, parent: Optional[PySide6.QtStateMachine.QState] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/State.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>StateMixin</code>, <code>statemachine.QState</code></p> Source code in <code>prettyqt\\statemachine\\state.py</code> <pre><code>class State(StateMixin, statemachine.QState):\npass\n</code></pre>"},{"location":"qt_modules/statemachine/State.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494590224[\"statemachine.State\"]\n  2103494596944[\"statemachine.StateMixin\"]\n  2103494554704[\"statemachine.AbstractStateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494568144[\"QtStateMachine.QState\"]\n  2103494567184[\"QtStateMachine.QAbstractState\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494596944 --&gt; 2103494590224\n  2103494554704 --&gt; 2103494596944\n  2103255067472 --&gt; 2103494554704\n  140736120080256 --&gt; 2103255067472\n  2103494568144 --&gt; 2103494590224\n  2103494567184 --&gt; 2103494568144\n  2103254677056 --&gt; 2103494567184\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/State.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool <code>initialState</code> QAbstractState <code>errorState</code> QAbstractState <code>childMode</code> QState::ChildMode"},{"location":"qt_modules/statemachine/StateMachine.html","title":"StateMachine","text":"<p>Qt Base Class: QStateMachine</p> <p>Signature: <code>QStateMachine(self, childMode: PySide6.QtStateMachine.QState.ChildMode, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QStateMachine(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/statemachine/StateMachine.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>statemachine.state.StateMixin</code>, <code>statemachine.QStateMachine</code></p> Source code in <code>prettyqt\\statemachine\\statemachine.py</code> <pre><code>class StateMachine(statemachine.state.StateMixin, statemachine.QStateMachine):\ndef __add__(self, other: statemachine.QAbstractState) -&gt; StateMachine:\nself.addState(other)\nreturn self\ndef get_error(self) -&gt; ErrorStr:\nreturn ERROR.inverse[self.error()]\ndef post_event(\nself,\nevent: QtCore.QEvent,\npriority: PriorityStr | statemachine.QStateMachine.EventPriority = \"normal\",\n):\nself.postEvent(event, PRIORITY.get_enum_value(priority))\ndef set_global_restore_policy(\nself,\npolicy: statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy,\n):\n\"\"\"Set restore policy to use.\n        Args:\n            policy: restore policy to use\n        \"\"\"\nself.setGlobalRestorePolicy(\nstatemachine.state.RESTORE_POLICY.get_enum_value(policy)\n)\ndef get_global_restore_policy(self) -&gt; statemachine.state.RestorePolicyStr:\n\"\"\"Return current restore policy.\n        Returns:\n            restore policy\n        \"\"\"\nreturn statemachine.state.RESTORE_POLICY.inverse[self.globalRestorePolicy()]\n</code></pre>"},{"location":"qt_modules/statemachine/StateMachine.html#prettyqt.statemachine.statemachine.StateMachine.get_global_restore_policy","title":"<code>get_global_restore_policy() -&gt; statemachine.state.RestorePolicyStr</code>","text":"<p>Return current restore policy.</p> Source code in <code>prettyqt\\statemachine\\statemachine.py</code> <pre><code>def get_global_restore_policy(self) -&gt; statemachine.state.RestorePolicyStr:\n\"\"\"Return current restore policy.\n    Returns:\n        restore policy\n    \"\"\"\nreturn statemachine.state.RESTORE_POLICY.inverse[self.globalRestorePolicy()]\n</code></pre>"},{"location":"qt_modules/statemachine/StateMachine.html#prettyqt.statemachine.statemachine.StateMachine.set_global_restore_policy","title":"<code>set_global_restore_policy(policy: statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy)</code>","text":"<p>Set restore policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy</code> <p>restore policy to use</p> required Source code in <code>prettyqt\\statemachine\\statemachine.py</code> <pre><code>def set_global_restore_policy(\nself,\npolicy: statemachine.state.RestorePolicyStr | statemachine.State.RestorePolicy,\n):\n\"\"\"Set restore policy to use.\n    Args:\n        policy: restore policy to use\n    \"\"\"\nself.setGlobalRestorePolicy(\nstatemachine.state.RESTORE_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"qt_modules/statemachine/StateMachine.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494591184[\"statemachine.StateMachine\"]\n  2103494596944[\"statemachine.StateMixin\"]\n  2103494554704[\"statemachine.AbstractStateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494585424[\"QtStateMachine.QStateMachine\"]\n  2103494568144[\"QtStateMachine.QState\"]\n  2103494567184[\"QtStateMachine.QAbstractState\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103494596944 --&gt; 2103494591184\n  2103494554704 --&gt; 2103494596944\n  2103255067472 --&gt; 2103494554704\n  140736120080256 --&gt; 2103255067472\n  2103494585424 --&gt; 2103494591184\n  2103494568144 --&gt; 2103494585424\n  2103494567184 --&gt; 2103494568144\n  2103254677056 --&gt; 2103494567184\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/statemachine/StateMachine.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>active</code> bool <code>initialState</code> QAbstractState <code>errorState</code> QAbstractState <code>childMode</code> QState::ChildMode <code>errorString</code> QString <code>globalRestorePolicy</code> QState::RestorePolicy <code>running</code> bool <code>animated</code> bool"},{"location":"qt_modules/svg/index.html","title":"svg","text":"<p>Classes for displaying the contents of SVG files.</p> Name Children Inherits SvgGeneratorprettyqt.svg.svggenerator <ul><li>PaintDeviceMixin</li><li>QSvgGenerator</li></ul> SvgRendererprettyqt.svg.svgrenderer <ul><li>ObjectMixin</li><li>QSvgRenderer</li></ul>"},{"location":"qt_modules/svg/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>svg</li> <li>SvgGenerator</li> <li>SvgRenderer</li> </ul>"},{"location":"qt_modules/svg/SvgGenerator.html","title":"SvgGenerator","text":"<p>Qt Base Class: QSvgGenerator</p> <p>Signature: <code>QSvgGenerator(self) -&gt; None QSvgGenerator(self, version: PySide6.QtSvg.QSvgGenerator.SvgVersion) -&gt; None</code></p>"},{"location":"qt_modules/svg/SvgGenerator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.PaintDeviceMixin</code>, <code>QtSvg.QSvgGenerator</code></p> Source code in <code>prettyqt\\svg\\svggenerator.py</code> <pre><code>class SvgGenerator(gui.PaintDeviceMixin, QtSvg.QSvgGenerator):\ndef get_viewbox(self) -&gt; core.Rect:\nreturn core.Rect(self.viewBox())\ndef get_viewboxf(self) -&gt; core.RectF:\nreturn core.RectF(self.viewBoxF())\ndef get_size(self) -&gt; core.Size:\nreturn core.Size(self.size())\ndef set_size(self, size: datatypes.SizeType | core.QSizeF):\nself.setSize(datatypes.to_size(size))\n</code></pre>"},{"location":"qt_modules/svg/SvgGenerator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494595984[\"svg.SvgGenerator\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103264183456[\"QtSvg.QSvgGenerator\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260963216 --&gt; 2103494595984\n  140736120080256 --&gt; 2103260963216\n  2103264183456 --&gt; 2103494595984\n  2103259509712 --&gt; 2103264183456\n  2103206874128 --&gt; 2103259509712\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/svg/SvgRenderer.html","title":"SvgRenderer","text":"<p>Qt Base Class: QSvgRenderer</p> <p>Signature: <code>QSvgRenderer(self, contents: PySide6.QtCore.QXmlStreamReader, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSvgRenderer(self, contents: Union[PySide6.QtCore.QByteArray, bytes], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSvgRenderer(self, filename: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSvgRenderer(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/svg/SvgRenderer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtSvg.QSvgRenderer</code></p> Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>class SvgRenderer(core.ObjectMixin, QtSvg.QSvgRenderer):\ndef load_file(self, path: datatypes.PathType):\nresult = self.load(os.fspath(path))\nif not result:\nraise ValueError(\"invalid path\")\ndef set_aspect_ratio_mode(\nself, mode: constants.AspectRatioModeStr | constants.AspectRatioMode\n):\n\"\"\"Set the aspect ratio mode.\n        Args:\n            mode: aspect ratio mode\n        \"\"\"\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE.get_enum_value(mode))\ndef get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n        Returns:\n            aspect ratio mode\n        \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"qt_modules/svg/SvgRenderer.html#prettyqt.svg.svgrenderer.SvgRenderer.get_aspect_ratio_mode","title":"<code>get_aspect_ratio_mode() -&gt; constants.AspectRatioModeStr</code>","text":"<p>Return current aspect ratio mode.</p> Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def get_aspect_ratio_mode(self) -&gt; constants.AspectRatioModeStr:\n\"\"\"Return current aspect ratio mode.\n    Returns:\n        aspect ratio mode\n    \"\"\"\nreturn constants.ASPECT_RATIO_MODE.inverse[self.aspectRatioMode()]\n</code></pre>"},{"location":"qt_modules/svg/SvgRenderer.html#prettyqt.svg.svgrenderer.SvgRenderer.set_aspect_ratio_mode","title":"<code>set_aspect_ratio_mode(mode: constants.AspectRatioModeStr | constants.AspectRatioMode)</code>","text":"<p>Set the aspect ratio mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.AspectRatioModeStr | constants.AspectRatioMode</code> <p>aspect ratio mode</p> required Source code in <code>prettyqt\\svg\\svgrenderer.py</code> <pre><code>def set_aspect_ratio_mode(\nself, mode: constants.AspectRatioModeStr | constants.AspectRatioMode\n):\n\"\"\"Set the aspect ratio mode.\n    Args:\n        mode: aspect ratio mode\n    \"\"\"\nself.setAspectRatioMode(constants.ASPECT_RATIO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/svg/SvgRenderer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494597904[\"svg.SvgRenderer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103264186336[\"QtSvg.QSvgRenderer\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494597904\n  140736120080256 --&gt; 2103255067472\n  2103264186336 --&gt; 2103494597904\n  2103254677056 --&gt; 2103264186336\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/svg/SvgRenderer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>viewBox</code> QRectF <code>framesPerSecond</code> int <code>currentFrame</code> int <code>aspectRatioMode</code> Qt::AspectRatioMode"},{"location":"qt_modules/svgwidgets/index.html","title":"svgwidgets","text":"<p>Widgets for displaying SVG files.</p> Name Children Inherits GraphicsSvgItemprettyqt.svgwidgets.graphicssvgitem <ul><li>GraphicsObjectMixin</li><li>QGraphicsSvgItem</li></ul> SvgWidgetprettyqt.svgwidgets.svgwidget <ul><li>WidgetMixin</li><li>QSvgWidget</li></ul>"},{"location":"qt_modules/svgwidgets/GraphicsSvgItem.html","title":"GraphicsSvgItem","text":"<p>Qt Base Class: QGraphicsSvgItem</p> <p>Signature: <code>QGraphicsSvgItem(self, fileName: str, parentItem: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsSvgItem(self, parentItem: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/svgwidgets/GraphicsSvgItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsObjectMixin</code>, <code>QtSvgWidgets.QGraphicsSvgItem</code></p> Source code in <code>prettyqt\\svgwidgets\\graphicssvgitem.py</code> <pre><code>class GraphicsSvgItem(widgets.GraphicsObjectMixin, QtSvgWidgets.QGraphicsSvgItem):\npass\n</code></pre>"},{"location":"qt_modules/svgwidgets/GraphicsSvgItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494569104[\"svgwidgets.GraphicsSvgItem\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103494593104[\"QtSvgWidgets.QGraphicsSvgItem\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103261145600 --&gt; 2103494569104\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103494593104 --&gt; 2103494569104\n  2103260155536 --&gt; 2103494593104\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056</code></pre>"},{"location":"qt_modules/svgwidgets/GraphicsSvgItem.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double <code>elementId</code> QString <code>maximumCacheSize</code> QSize"},{"location":"qt_modules/svgwidgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>svgwidgets</li> <li>GraphicsSvgItem</li> <li>SvgWidget</li> </ul>"},{"location":"qt_modules/svgwidgets/SvgWidget.html","title":"SvgWidget","text":"<p>Qt Base Class: QSvgWidget</p> <p>Signature: <code>QSvgWidget(self, file: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSvgWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/svgwidgets/SvgWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtSvgWidgets.QSvgWidget</code></p> Source code in <code>prettyqt\\svgwidgets\\svgwidget.py</code> <pre><code>class SvgWidget(widgets.WidgetMixin, QtSvgWidgets.QSvgWidget):\ndef load_file(self, path: datatypes.PathType):\nself.load(os.fspath(path))\n</code></pre>"},{"location":"qt_modules/svgwidgets/SvgWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494601744[\"svgwidgets.SvgWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103494600784[\"QtSvgWidgets.QSvgWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103494601744\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103494600784 --&gt; 2103494601744\n  2103259691120 --&gt; 2103494600784\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/svgwidgets/SvgWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/texttospeech/index.html","title":"texttospeech","text":"<p>TextToSpeech module.</p> <p>Contains QtTextToSpeech-based classes</p> Name Children Inherits Voiceprettyqt.texttospeech.voice <ul><li>QVoice</li></ul> TextToSpeechprettyqt.texttospeech.texttospeech <ul><li>ObjectMixin</li><li>QTextToSpeech</li></ul>"},{"location":"qt_modules/texttospeech/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>texttospeech</li> <li>Voice</li> <li>TextToSpeech</li> </ul>"},{"location":"qt_modules/texttospeech/TextToSpeech.html","title":"TextToSpeech","text":"<p>Qt Base Class: QTextToSpeech</p> <p>Signature: <code>QTextToSpeech(self, engine: str, params: Dict[str, Any], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QTextToSpeech(self, engine: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QTextToSpeech(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/texttospeech/TextToSpeech.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>texttospeech.QTextToSpeech</code></p> Source code in <code>prettyqt\\texttospeech\\texttospeech.py</code> <pre><code>class TextToSpeech(core.ObjectMixin, texttospeech.QTextToSpeech):\ndef get_state(self) -&gt; StateStr:\nreturn STATE.inverse[self.state()]\ndef get_locale(self) -&gt; core.Locale:\nreturn core.Locale(self.locale())\ndef get_available_locales(self) -&gt; list[core.Locale]:\nreturn [core.Locale(locale) for locale in self.availableLocales()]\ndef get_voice(self) -&gt; texttospeech.Voice:\nreturn texttospeech.Voice(self.voice())\ndef get_available_voices(self) -&gt; list[texttospeech.Voice]:\nreturn [texttospeech.Voice(voice) for voice in self.availableVoices()]\n</code></pre>"},{"location":"qt_modules/texttospeech/TextToSpeech.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494635344[\"texttospeech.TextToSpeech\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494610384[\"QtTextToSpeech.QTextToSpeech\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494635344\n  140736120080256 --&gt; 2103255067472\n  2103494610384 --&gt; 2103494635344\n  2103254677056 --&gt; 2103494610384\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/texttospeech/TextToSpeech.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>engine</code> QString <code>state</code> QTextToSpeech::State <code>volume</code> double <code>rate</code> double <code>pitch</code> double <code>locale</code> QLocale <code>voice</code> QVoice"},{"location":"qt_modules/texttospeech/Voice.html","title":"Voice","text":"<p>Qt Base Class: QVoice</p> <p>Signature: <code>QVoice(self) -&gt; None QVoice(self, other: PySide6.QtTextToSpeech.QVoice) -&gt; None</code></p>"},{"location":"qt_modules/texttospeech/Voice.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtTextToSpeech.QVoice</code></p> Source code in <code>prettyqt\\texttospeech\\voice.py</code> <pre><code>class Voice(QtTextToSpeech.QVoice):\ndef get_age(self) -&gt; AgeStr:\nreturn AGE.inverse[self.age()]\ndef get_gender(self) -&gt; GenderStr:\nreturn GENDER.inverse[self.gender()]\n</code></pre>"},{"location":"qt_modules/texttospeech/Voice.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494626704[\"texttospeech.Voice\"]\n  2103494570064[\"QtTextToSpeech.QVoice\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494570064 --&gt; 2103494626704\n  2103206874128 --&gt; 2103494570064\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webchannel/index.html","title":"webchannel","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineCore-based classes</p> Name Children Inherits WebChannelprettyqt.webchannel.webchannel <ul><li>ObjectMixin</li><li>QWebChannel</li></ul>"},{"location":"qt_modules/webchannel/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>webchannel</li> <li>WebChannel</li> </ul>"},{"location":"qt_modules/webchannel/WebChannel.html","title":"WebChannel","text":"<p>Qt Base Class: QWebChannel</p> <p>Signature: <code>QWebChannel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/webchannel/WebChannel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtWebChannel.QWebChannel</code></p> Source code in <code>prettyqt\\webchannel\\webchannel.py</code> <pre><code>class WebChannel(core.ObjectMixin, QtWebChannel.QWebChannel):\npass\n</code></pre>"},{"location":"qt_modules/webchannel/WebChannel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494640144[\"webchannel.WebChannel\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494620944[\"QtWebChannel.QWebChannel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494640144\n  140736120080256 --&gt; 2103255067472\n  2103494620944 --&gt; 2103494640144\n  2103254677056 --&gt; 2103494620944\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webchannel/WebChannel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>blockUpdates</code> bool <code>propertyUpdateInterval</code> int"},{"location":"qt_modules/webenginecore/index.html","title":"webenginecore","text":"<p>Classes and functions for embedding web content in applications.</p> Name Children Inherits WebEngineUrlSchemeprettyqt.webenginecore.webengineurlscheme <ul><li>QWebEngineUrlScheme</li></ul> WebEngineHistoryItemprettyqt.webenginecore.webenginehistoryitem <ul><li>QWebEngineHistoryItem</li></ul> WebEngineProfileprettyqt.webenginecore.webengineprofile <ul><li>ObjectMixin</li><li>QWebEngineProfile</li></ul> WebEngineScriptprettyqt.webenginecore.webenginescript <ul><li>QWebEngineScript</li></ul> WebEngineUrlSchemeHandlerprettyqt.webenginecore.webengineurlschemehandler <ul><li>ObjectMixin</li><li>QWebEngineUrlSchemeHandler</li></ul> WebEngineHistoryprettyqt.webenginecore.webenginehistory <ul><li>object</li></ul> WebEngineScriptCollectionprettyqt.webenginecore.webenginescriptcollection <ul><li>object</li></ul> WebEnginePageprettyqt.webenginecore.webenginepage <ul><li>ObjectMixin</li><li>QWebEnginePage</li></ul> WebEngineDownloadRequestprettyqt.webenginecore.webenginedownloadrequest <ul><li>object</li></ul> WebEngineHttpRequestprettyqt.webenginecore.webenginehttprequest <ul><li>QWebEngineHttpRequest</li></ul> WebEngineSettingsprettyqt.webenginecore.webenginesettings <ul><li><code>MutableMapping</code></li></ul> WebEngineContextMenuRequestprettyqt.webenginecore.webenginecontextmenurequest <ul><li>QWebEngineContextMenuRequest</li></ul>"},{"location":"qt_modules/webenginecore/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>webenginecore</li> <li>WebEngineUrlScheme</li> <li>WebEngineHistoryItem</li> <li>WebEngineProfile</li> <li>WebEngineScript</li> <li>WebEngineUrlSchemeHandler</li> <li>WebEngineHistory</li> <li>WebEngineScriptCollection</li> <li>WebEnginePage</li> <li>WebEngineDownloadRequest</li> <li>WebEngineHttpRequest</li> <li>WebEngineSettings</li> <li>WebEngineContextMenuRequest</li> </ul>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html","title":"WebEngineContextMenuRequest","text":"<p>Qt Base Class: QWebEngineContextMenuRequest</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWebEngineCore.QWebEngineContextMenuRequest</code></p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>class WebEngineContextMenuRequest(QtWebEngineCore.QWebEngineContextMenuRequest):\ndef get_media_url(self) -&gt; core.Url:\nreturn core.Url(self.mediaUrl())\ndef get_link_url(self) -&gt; core.Url:\nreturn core.Url(self.linkUrl())\ndef get_media_type(self) -&gt; MediaTypeStr:\n\"\"\"Get media type.\"\"\"\nreturn MEDIA_TYPES.inverse[self.mediaType()]\ndef get_media_flags(self) -&gt; list[MediaFlagStr]:\n\"\"\"Get media flags.\"\"\"\nreturn MEDIA_FLAGS.get_list(self.mediaFlags())\ndef get_edit_flags(self) -&gt; list[MediaFlagStr]:\n\"\"\"Get edit flags.\"\"\"\nreturn EDIT_FLAGS.get_list(self.editFlags())\ndef can_undo(self) -&gt; bool:\n\"\"\"Returns whether undo is possible.\"\"\"\nreturn bool(mod.EditFlag.CanUndo &amp; self.editFlags())\ndef can_redo(self) -&gt; bool:\n\"\"\"Returns whether redo is possible.\"\"\"\nreturn bool(mod.EditFlag.CanRedo &amp; self.editFlags())\ndef can_cut(self) -&gt; bool:\n\"\"\"Returns whether cut is possible.\"\"\"\nreturn bool(mod.EditFlag.CanCut &amp; self.editFlags())\ndef can_copy(self) -&gt; bool:\n\"\"\"Returns whether copy is possible.\"\"\"\nreturn bool(mod.EditFlag.CanCopy &amp; self.editFlags())\ndef can_paste(self) -&gt; bool:\n\"\"\"Returns whether paste is possible.\"\"\"\nreturn bool(mod.EditFlag.CanPaste &amp; self.editFlags())\ndef can_delete(self) -&gt; bool:\n\"\"\"Returns whether delete is possible.\"\"\"\nreturn bool(mod.EditFlag.CanDelete &amp; self.editFlags())\ndef can_select_all(self) -&gt; bool:\n\"\"\"Returns whether select_all is possible.\"\"\"\nreturn bool(mod.EditFlag.CanSelectAll &amp; self.editFlags())\ndef can_translate(self) -&gt; bool:\n\"\"\"Returns whether translate is possible.\"\"\"\nreturn bool(mod.EditFlag.CanTranslate &amp; self.editFlags())\ndef can_edit_richly(self) -&gt; bool:\n\"\"\"Returns whether edit_richly is possible.\"\"\"\nreturn bool(mod.EditFlag.CanEditRichly &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_copy","title":"<code>can_copy() -&gt; bool</code>","text":"<p>Returns whether copy is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_copy(self) -&gt; bool:\n\"\"\"Returns whether copy is possible.\"\"\"\nreturn bool(mod.EditFlag.CanCopy &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_cut","title":"<code>can_cut() -&gt; bool</code>","text":"<p>Returns whether cut is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_cut(self) -&gt; bool:\n\"\"\"Returns whether cut is possible.\"\"\"\nreturn bool(mod.EditFlag.CanCut &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_delete","title":"<code>can_delete() -&gt; bool</code>","text":"<p>Returns whether delete is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_delete(self) -&gt; bool:\n\"\"\"Returns whether delete is possible.\"\"\"\nreturn bool(mod.EditFlag.CanDelete &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_edit_richly","title":"<code>can_edit_richly() -&gt; bool</code>","text":"<p>Returns whether edit_richly is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_edit_richly(self) -&gt; bool:\n\"\"\"Returns whether edit_richly is possible.\"\"\"\nreturn bool(mod.EditFlag.CanEditRichly &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_paste","title":"<code>can_paste() -&gt; bool</code>","text":"<p>Returns whether paste is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_paste(self) -&gt; bool:\n\"\"\"Returns whether paste is possible.\"\"\"\nreturn bool(mod.EditFlag.CanPaste &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_redo","title":"<code>can_redo() -&gt; bool</code>","text":"<p>Returns whether redo is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_redo(self) -&gt; bool:\n\"\"\"Returns whether redo is possible.\"\"\"\nreturn bool(mod.EditFlag.CanRedo &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_select_all","title":"<code>can_select_all() -&gt; bool</code>","text":"<p>Returns whether select_all is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_select_all(self) -&gt; bool:\n\"\"\"Returns whether select_all is possible.\"\"\"\nreturn bool(mod.EditFlag.CanSelectAll &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_translate","title":"<code>can_translate() -&gt; bool</code>","text":"<p>Returns whether translate is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_translate(self) -&gt; bool:\n\"\"\"Returns whether translate is possible.\"\"\"\nreturn bool(mod.EditFlag.CanTranslate &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.can_undo","title":"<code>can_undo() -&gt; bool</code>","text":"<p>Returns whether undo is possible.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def can_undo(self) -&gt; bool:\n\"\"\"Returns whether undo is possible.\"\"\"\nreturn bool(mod.EditFlag.CanUndo &amp; self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_edit_flags","title":"<code>get_edit_flags() -&gt; list[MediaFlagStr]</code>","text":"<p>Get edit flags.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_edit_flags(self) -&gt; list[MediaFlagStr]:\n\"\"\"Get edit flags.\"\"\"\nreturn EDIT_FLAGS.get_list(self.editFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_flags","title":"<code>get_media_flags() -&gt; list[MediaFlagStr]</code>","text":"<p>Get media flags.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_flags(self) -&gt; list[MediaFlagStr]:\n\"\"\"Get media flags.\"\"\"\nreturn MEDIA_FLAGS.get_list(self.mediaFlags())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#prettyqt.webenginecore.webenginecontextmenurequest.WebEngineContextMenuRequest.get_media_type","title":"<code>get_media_type() -&gt; MediaTypeStr</code>","text":"<p>Get media type.</p> Source code in <code>prettyqt\\webenginecore\\webenginecontextmenurequest.py</code> <pre><code>def get_media_type(self) -&gt; MediaTypeStr:\n\"\"\"Get media type.\"\"\"\nreturn MEDIA_TYPES.inverse[self.mediaType()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494756304[\"webenginecore.WebEngineContextMenuRequest\"]\n  2103494726544[\"QtWebEngineCore.QWebEngineContextMenuRequest\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494726544 --&gt; 2103494756304\n  2103254677056 --&gt; 2103494726544\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineContextMenuRequest.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>position</code> QPoint <code>selectedText</code> QString <code>linkText</code> QString <code>linkUrl</code> QUrl <code>mediaUrl</code> QUrl <code>mediaType</code> QWebEngineContextMenuRequest::MediaType <code>isContentEditable</code> bool <code>misspelledWord</code> QString <code>spellCheckerSuggestions</code> QStringList <code>accepted</code> bool <code>mediaFlags</code> QFlags <code>editFlags</code> QFlags"},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html","title":"WebEngineDownloadRequest","text":""},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>class WebEngineDownloadRequest:\ndef __init__(self, item: QtWebEngineCore.QWebEngineDownloadRequest):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_interrupt_reason(self) -&gt; DownloadInterruptReasonStr:\n\"\"\"Get reason for download interruption.\"\"\"\nreturn DOWNLOAD_INTERRUPT_REASONS.inverse[self.item.interruptReason()]\ndef get_state(self) -&gt; DownloadStateStr:\n\"\"\"Get current state.\"\"\"\nreturn DOWNLOAD_STATE.inverse[self.item.state()]\ndef set_save_page_format(self, fmt: SavePageFormatStr | Item.SavePageFormat):\n\"\"\"Set the save page format.\n        Args:\n            fmt: save page format for the layout\n        \"\"\"\nself.item.setSavePageFormat(SAVE_PAGE_FORMAT.get_enum_value(fmt))\ndef get_save_page_format(self) -&gt; SavePageFormatStr:\n\"\"\"Return current save page format.\n        Returns:\n            Save page format\n        \"\"\"\nreturn SAVE_PAGE_FORMAT.inverse[self.item.savePageFormat()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_interrupt_reason","title":"<code>get_interrupt_reason() -&gt; DownloadInterruptReasonStr</code>","text":"<p>Get reason for download interruption.</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_interrupt_reason(self) -&gt; DownloadInterruptReasonStr:\n\"\"\"Get reason for download interruption.\"\"\"\nreturn DOWNLOAD_INTERRUPT_REASONS.inverse[self.item.interruptReason()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_save_page_format","title":"<code>get_save_page_format() -&gt; SavePageFormatStr</code>","text":"<p>Return current save page format.</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_save_page_format(self) -&gt; SavePageFormatStr:\n\"\"\"Return current save page format.\n    Returns:\n        Save page format\n    \"\"\"\nreturn SAVE_PAGE_FORMAT.inverse[self.item.savePageFormat()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.get_state","title":"<code>get_state() -&gt; DownloadStateStr</code>","text":"<p>Get current state.</p> Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def get_state(self) -&gt; DownloadStateStr:\n\"\"\"Get current state.\"\"\"\nreturn DOWNLOAD_STATE.inverse[self.item.state()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html#prettyqt.webenginecore.webenginedownloadrequest.WebEngineDownloadRequest.set_save_page_format","title":"<code>set_save_page_format(fmt: SavePageFormatStr | Item.SavePageFormat)</code>","text":"<p>Set the save page format.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>SavePageFormatStr | Item.SavePageFormat</code> <p>save page format for the layout</p> required Source code in <code>prettyqt\\webenginecore\\webenginedownloadrequest.py</code> <pre><code>def set_save_page_format(self, fmt: SavePageFormatStr | Item.SavePageFormat):\n\"\"\"Set the save page format.\n    Args:\n        fmt: save page format for the layout\n    \"\"\"\nself.item.setSavePageFormat(SAVE_PAGE_FORMAT.get_enum_value(fmt))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineDownloadRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494765904[\"webenginecore.WebEngineDownloadRequest\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494765904</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHistory.html","title":"WebEngineHistory","text":""},{"location":"qt_modules/webenginecore/WebEngineHistory.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>class WebEngineHistory:\ndef __init__(self, history: webenginecore.QWebEngineHistory):\nself.history = history\ndef __getattr__(self, val):\nreturn getattr(self.history, val)\ndef __len__(self):\n# pyside2 does not support len(self.history)\nreturn self.history.count()\ndef __getitem__(self, index: int) -&gt; webenginecore.WebEngineHistoryItem:\nitem = self.history.itemAt(index)\nreturn webenginecore.WebEngineHistoryItem(item)\ndef __iter__(self) -&gt; Iterator[webenginecore.WebEngineHistoryItem]:\nitems = [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\nreturn iter(items)\ndef get_items(self) -&gt; list[webenginecore.WebEngineHistoryItem]:\n\"\"\"Get history items.\"\"\"\nreturn [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHistory.html#prettyqt.webenginecore.webenginehistory.WebEngineHistory.get_items","title":"<code>get_items() -&gt; list[webenginecore.WebEngineHistoryItem]</code>","text":"<p>Get history items.</p> Source code in <code>prettyqt\\webenginecore\\webenginehistory.py</code> <pre><code>def get_items(self) -&gt; list[webenginecore.WebEngineHistoryItem]:\n\"\"\"Get history items.\"\"\"\nreturn [webenginecore.WebEngineHistoryItem(i) for i in self.history.items()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHistory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494760144[\"webenginecore.WebEngineHistory\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494760144</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHistoryItem.html","title":"WebEngineHistoryItem","text":"<p>Qt Base Class: QWebEngineHistoryItem</p> <p>Signature: <code>QWebEngineHistoryItem(self, other: PySide6.QtWebEngineCore.QWebEngineHistoryItem) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineHistoryItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWebEngineCore.QWebEngineHistoryItem</code></p> Source code in <code>prettyqt\\webenginecore\\webenginehistoryitem.py</code> <pre><code>class WebEngineHistoryItem(QtWebEngineCore.QWebEngineHistoryItem):\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_icon_url(self) -&gt; core.Url:\nreturn core.Url(self.iconUrl())\ndef get_last_visited(self) -&gt; core.DateTime:\nreturn core.DateTime(self.lastVisited())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHistoryItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494738064[\"webenginecore.WebEngineHistoryItem\"]\n  2103494688144[\"QtWebEngineCore.QWebEngineHistoryItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494688144 --&gt; 2103494738064\n  2103206874128 --&gt; 2103494688144\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHttpRequest.html","title":"WebEngineHttpRequest","text":"<p>Qt Base Class: QWebEngineHttpRequest</p> <p>Signature: <code>QWebEngineHttpRequest(self, other: PySide6.QtWebEngineCore.QWebEngineHttpRequest) -&gt; None QWebEngineHttpRequest(self, url: Union[PySide6.QtCore.QUrl, str] = Default(QUrl), method: PySide6.QtWebEngineCore.QWebEngineHttpRequest.Method = Instance(PySide6.QtWebEngineCore.QWebEngineHttpRequest.Get)) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineHttpRequest.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWebEngineCore.QWebEngineHttpRequest</code></p> Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>class WebEngineHttpRequest(QtWebEngineCore.QWebEngineHttpRequest):\ndef __repr__(self):\nreturn f\"{type(self).__name__}({self.get_url()})\"\ndef set_headers(self, headers: dict[str, str]):\nfor k, v in headers.items():\nself.setHeader(core.QByteArray(k.encode()), core.QByteArray(v.encode()))\ndef get_headers(self) -&gt; dict[str, str]:\nreturn {h.data().decode(): self.header(h).data().decode() for h in self.headers()}\ndef set_url(self, url: datatypes.UrlType):\nurl = core.Url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_post_data(self) -&gt; str:\nreturn self.postData().data().decode()\ndef set_method(\nself, method: MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method\n):\n\"\"\"Set method this WebEngine request is using.\n        Args:\n            method: method\n        \"\"\"\nself.setMethod(METHODS.get_enum_value(method))\ndef get_method(self) -&gt; MethodStr:\n\"\"\"Get the method this WebEngine request is using.\n        Returns:\n            method\n        \"\"\"\nreturn METHODS.inverse[self.method()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHttpRequest.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.get_method","title":"<code>get_method() -&gt; MethodStr</code>","text":"<p>Get the method this WebEngine request is using.</p> Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def get_method(self) -&gt; MethodStr:\n\"\"\"Get the method this WebEngine request is using.\n    Returns:\n        method\n    \"\"\"\nreturn METHODS.inverse[self.method()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHttpRequest.html#prettyqt.webenginecore.webenginehttprequest.WebEngineHttpRequest.set_method","title":"<code>set_method(method: MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method)</code>","text":"<p>Set method this WebEngine request is using.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method</code> <p>method</p> required Source code in <code>prettyqt\\webenginecore\\webenginehttprequest.py</code> <pre><code>def set_method(\nself, method: MethodStr | QtWebEngineCore.QWebEngineHttpRequest.Method\n):\n\"\"\"Set method this WebEngine request is using.\n    Args:\n        method: method\n    \"\"\"\nself.setMethod(METHODS.get_enum_value(method))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineHttpRequest.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494740944[\"webenginecore.WebEngineHttpRequest\"]\n  2103494744784[\"QtWebEngineCore.QWebEngineHttpRequest\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494744784 --&gt; 2103494740944\n  2103206874128 --&gt; 2103494744784\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html","title":"WebEnginePage","text":"<p>Qt Base Class: QWebEnginePage</p> <p>Signature: <code>QWebEnginePage(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QWebEnginePage(self, profile: PySide6.QtWebEngineCore.QWebEngineProfile, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>webenginecore.QWebEnginePage</code></p> <p>A web engine page holds the HTML document contents, link history + actions.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>class WebEnginePage(core.ObjectMixin, webenginecore.QWebEnginePage):\n\"\"\"A web engine page holds the HTML document contents, link history + actions.\"\"\"\ndef get_icon(self) -&gt; gui.Icon | None:\n\"\"\"Return icon. If icon is Null, return None.\"\"\"\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_url(self, url: datatypes.PathType | datatypes.UrlType):\n\"\"\"Set the url of the WebEnginePage.\n        Clears the Page and loads the URL.\n        Args:\n            url: URL to set\n        \"\"\"\nself.setUrl(datatypes.to_url(url))\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef get_icon_url(self) -&gt; core.Url:\nreturn core.Url(self.iconUrl())\ndef get_requested_url(self) -&gt; core.Url:\nreturn core.Url(self.requestedUrl())\ndef get_scroll_position(self) -&gt; core.PointF:\nreturn core.PointF(self.scrollPosition())\ndef get_contents_size(self) -&gt; core.SizeF:\nreturn core.SizeF(self.contentsSize())\ndef load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n        Loads the specified url and displays it.\n        Note: The Page remains the same until enough data has arrived\n        to display the new URL.\n        Args:\n            url: URL to load\n        \"\"\"\nself.load(datatypes.to_url(url))\ndef set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the Page.\n        Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n        Args:\n            zoom: Zoom factor\n        \"\"\"\nself.setZoomFactor(zoom)\ndef find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n        Finds the specified string, subString, in the page, using the given options.\n        The findTextFinished() signal is emitted when a string search is completed.\n        To clear the search highlight, just pass an empty string.\n        The resultCallback must take a boolean parameter.\n        It will be called with a value of true if the subString was found;\n        otherwise the callback value will be false.\n        Warning: It is guaranteed that the callback is always called,\n        but it might be done during page destruction. When WebEnginePage is deleted,\n        the callback is triggered with an invalid value and it is not safe to use\n        the corresponding QWebEnginePage or QWebEnginePage instance inside it.\n        Args:\n            string: string to search for\n            backward: search backwards\n            case_sensitive: case-sensitive search\n            callback: result callback\n        \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.QWebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= self.FindFlag.FindCaseSensitively\nif backward:\nflag |= self.FindFlag.FindBackward\nself.findText(string, flag, callback)\ndef set_lifecycle_state(self, state: LifecycleStateStr | mod.LifecycleState):\n\"\"\"Set lifecycle state.\n        Args:\n            state: lifecycle state\n        \"\"\"\nself.setLifecycleState(LIFECYCLE_STATE.get_enum_value(state))\ndef get_lifecycle_state(self) -&gt; LifecycleStateStr:\n\"\"\"Get the current lifecycle state.\n        Returns:\n            lifecycle state\n        \"\"\"\nreturn LIFECYCLE_STATE.inverse[self.lifecycleState()]\ndef trigger_action(self, action: WebActionStr | mod.WebAction, checked: bool = False):\n\"\"\"Trigger action.\"\"\"\nself.triggerAction(WEB_ACTION.get_enum_value(action), checked)\ndef set_feature_permission(\nself,\nurl: datatypes.UrlType,\nfeature: FeatureStr | mod.Feature,\npolicy: PermissionPolicyStr | mod.PermissionPolicy,\n):\n\"\"\"Set permission of feature for given URL.\"\"\"\nurl = core.Url(url)\nself.setFeaturePermission(\nurl, FEATURE.get_enum_value(feature), PERMISSION_POLICY.get_enum_value(policy)\n)\ndef get_history(self) -&gt; webenginecore.WebEngineHistory:\nhist = self.history()\nreturn webenginecore.WebEngineHistory(hist)\ndef get_settings(self) -&gt; webenginecore.WebEngineSettings:\n\"\"\"Get WebEngineSettings (a MutableMapping).\"\"\"\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\ndef set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\n\"\"\"Set WebEngine setting to value.\"\"\"\nself.get_settings()[setting_name] = value\ndef get_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\n) -&gt; bool:\n\"\"\"Return value of given WebEngine setting.\"\"\"\nreturn self.get_settings()[setting_name]\ndef get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\n\"\"\"Get script collection.\"\"\"\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\ndef open_in_browser(self):\n\"\"\"Open page URL in default system browser.\"\"\"\ntry:\nwebbrowser.open(self.getUrl().toString())\nexcept ValueError as e:\nlogger.exception(e)\ndef insert_stylesheet(\nself, name: str, css: str | os.PathLike, immediately: bool = True\n):\n\"\"\"Load css using JavaScript.\n        Arguments:\n            name: CSS id\n            css: CSS stylesheet, either a string or a PathLike object.\n            immediately: whther to run javascript immediately\n        \"\"\"\nif isinstance(css, os.PathLike):\npath = core.File(os.fspath(css))\nif not path.open(\ncore.File.OpenModeFlag.ReadOnly | core.File.OpenModeFlag.Text\n):\nreturn\ncss = path.readAll().data().decode(\"utf-8\")\nscript = webenginecore.WebEngineScript()\ns = \"\"\"\n        (function() {\n        css = document.createElement('style');\n        css.type = 'text/css';\n        css.id = \"%s\";\n        document.head.appendChild(css);\n        css.innerText = `%s`;\n        })()\n        \"\"\"\ns = s % (name, css)\nscript = webenginecore.WebEngineScript()\nif immediately:\nself.runJavaScript(s, script.ScriptWorldId.ApplicationWorld)\nscript.setName(name)\nscript.setSourceCode(s)\nscript.setInjectionPoint(script.InjectionPoint.DocumentReady)\nscript.setRunsOnSubFrames(True)\nscript.setWorldId(script.ScriptWorldId.ApplicationWorld)\nself.scripts().insert(script)\ndef mousedown(self, selector: str, btn: Literal[\"left\", \"middle\", \"right\"]):\n\"\"\"Simulate a mousedown event on the targeted element.\n        Arguments:\n            selector: A CSS3 selector to targeted element\n            btn: Mouse button\n        \"\"\"\nbtn_id = dict(left=0, middle=1, right=2)[btn]\nreturn self.runJavaScript(f\"\"\"\n            (function () {{\n                var element = document.querySelector({selector!r});\n                var evt = document.createEvent(\"MouseEvents\");\n                evt.initMouseEvent(\"mousedown\", true, true, window,\n                                   1, 1, 1, 1, 1, false, false, false, false,\n{btn_id!r}, element);\n                return element.dispatchEvent(evt);\n}})();\n        \"\"\")\ndef set_input_value(self, selector: str, value):\n\"\"\"Set the value of the input matched by given selector.\"\"\"\nscript = f'document.querySelector({selector!r}).setAttribute(\"value\", \"{value}\")'\nself.runJavaScript(script)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.find_text","title":"<code>find_text(string: str, backward: bool = False, case_sensitive: bool = False, callback: Callable[[bool], None] | None = None)</code>","text":"<p>Find text in the current page.</p> <p>Finds the specified string, subString, in the page, using the given options. The findTextFinished() signal is emitted when a string search is completed.</p> <p>To clear the search highlight, just pass an empty string.</p> <p>The resultCallback must take a boolean parameter. It will be called with a value of true if the subString was found; otherwise the callback value will be false.</p> <p>Warning: It is guaranteed that the callback is always called, but it might be done during page destruction. When WebEnginePage is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding QWebEnginePage or QWebEnginePage instance inside it.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string to search for</p> required <code>backward</code> <code>bool</code> <p>search backwards</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>case-sensitive search</p> <code>False</code> <code>callback</code> <code>Callable[[bool], None] | None</code> <p>result callback</p> <code>None</code> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n    Finds the specified string, subString, in the page, using the given options.\n    The findTextFinished() signal is emitted when a string search is completed.\n    To clear the search highlight, just pass an empty string.\n    The resultCallback must take a boolean parameter.\n    It will be called with a value of true if the subString was found;\n    otherwise the callback value will be false.\n    Warning: It is guaranteed that the callback is always called,\n    but it might be done during page destruction. When WebEnginePage is deleted,\n    the callback is triggered with an invalid value and it is not safe to use\n    the corresponding QWebEnginePage or QWebEnginePage instance inside it.\n    Args:\n        string: string to search for\n        backward: search backwards\n        case_sensitive: case-sensitive search\n        callback: result callback\n    \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.QWebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= self.FindFlag.FindCaseSensitively\nif backward:\nflag |= self.FindFlag.FindBackward\nself.findText(string, flag, callback)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"<p>Return icon. If icon is Null, return None.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\n\"\"\"Return icon. If icon is Null, return None.\"\"\"\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_lifecycle_state","title":"<code>get_lifecycle_state() -&gt; LifecycleStateStr</code>","text":"<p>Get the current lifecycle state.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_lifecycle_state(self) -&gt; LifecycleStateStr:\n\"\"\"Get the current lifecycle state.\n    Returns:\n        lifecycle state\n    \"\"\"\nreturn LIFECYCLE_STATE.inverse[self.lifecycleState()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_scripts","title":"<code>get_scripts() -&gt; webenginecore.WebEngineScriptCollection</code>","text":"<p>Get script collection.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\n\"\"\"Get script collection.\"\"\"\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_setting","title":"<code>get_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr) -&gt; bool</code>","text":"<p>Return value of given WebEngine setting.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\n) -&gt; bool:\n\"\"\"Return value of given WebEngine setting.\"\"\"\nreturn self.get_settings()[setting_name]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.get_settings","title":"<code>get_settings() -&gt; webenginecore.WebEngineSettings</code>","text":"<p>Get WebEngineSettings (a MutableMapping).</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def get_settings(self) -&gt; webenginecore.WebEngineSettings:\n\"\"\"Get WebEngineSettings (a MutableMapping).\"\"\"\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.insert_stylesheet","title":"<code>insert_stylesheet(name: str, css: str | os.PathLike, immediately: bool = True)</code>","text":"<p>Load css using JavaScript.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>CSS id</p> required <code>css</code> <code>str | os.PathLike</code> <p>CSS stylesheet, either a string or a PathLike object.</p> required <code>immediately</code> <code>bool</code> <p>whther to run javascript immediately</p> <code>True</code> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def insert_stylesheet(\nself, name: str, css: str | os.PathLike, immediately: bool = True\n):\n\"\"\"Load css using JavaScript.\n    Arguments:\n        name: CSS id\n        css: CSS stylesheet, either a string or a PathLike object.\n        immediately: whther to run javascript immediately\n    \"\"\"\nif isinstance(css, os.PathLike):\npath = core.File(os.fspath(css))\nif not path.open(\ncore.File.OpenModeFlag.ReadOnly | core.File.OpenModeFlag.Text\n):\nreturn\ncss = path.readAll().data().decode(\"utf-8\")\nscript = webenginecore.WebEngineScript()\ns = \"\"\"\n    (function() {\n    css = document.createElement('style');\n    css.type = 'text/css';\n    css.id = \"%s\";\n    document.head.appendChild(css);\n    css.innerText = `%s`;\n    })()\n    \"\"\"\ns = s % (name, css)\nscript = webenginecore.WebEngineScript()\nif immediately:\nself.runJavaScript(s, script.ScriptWorldId.ApplicationWorld)\nscript.setName(name)\nscript.setSourceCode(s)\nscript.setInjectionPoint(script.InjectionPoint.DocumentReady)\nscript.setRunsOnSubFrames(True)\nscript.setWorldId(script.ScriptWorldId.ApplicationWorld)\nself.scripts().insert(script)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.load_url","title":"<code>load_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Load the URL.</p> <p>Loads the specified url and displays it.</p> <p>Note: The Page remains the same until enough data has arrived to display the new URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to load</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n    Loads the specified url and displays it.\n    Note: The Page remains the same until enough data has arrived\n    to display the new URL.\n    Args:\n        url: URL to load\n    \"\"\"\nself.load(datatypes.to_url(url))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.mousedown","title":"<code>mousedown(selector: str, btn: Literal['left', 'middle', 'right'])</code>","text":"<p>Simulate a mousedown event on the targeted element.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str</code> <p>A CSS3 selector to targeted element</p> required <code>btn</code> <code>Literal['left', 'middle', 'right']</code> <p>Mouse button</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def mousedown(self, selector: str, btn: Literal[\"left\", \"middle\", \"right\"]):\n\"\"\"Simulate a mousedown event on the targeted element.\n    Arguments:\n        selector: A CSS3 selector to targeted element\n        btn: Mouse button\n    \"\"\"\nbtn_id = dict(left=0, middle=1, right=2)[btn]\nreturn self.runJavaScript(f\"\"\"\n        (function () {{\n            var element = document.querySelector({selector!r});\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"mousedown\", true, true, window,\n                               1, 1, 1, 1, 1, false, false, false, false,\n{btn_id!r}, element);\n            return element.dispatchEvent(evt);\n}})();\n    \"\"\")\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.open_in_browser","title":"<code>open_in_browser()</code>","text":"<p>Open page URL in default system browser.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def open_in_browser(self):\n\"\"\"Open page URL in default system browser.\"\"\"\ntry:\nwebbrowser.open(self.getUrl().toString())\nexcept ValueError as e:\nlogger.exception(e)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_feature_permission","title":"<code>set_feature_permission(url: datatypes.UrlType, feature: FeatureStr | mod.Feature, policy: PermissionPolicyStr | mod.PermissionPolicy)</code>","text":"<p>Set permission of feature for given URL.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_feature_permission(\nself,\nurl: datatypes.UrlType,\nfeature: FeatureStr | mod.Feature,\npolicy: PermissionPolicyStr | mod.PermissionPolicy,\n):\n\"\"\"Set permission of feature for given URL.\"\"\"\nurl = core.Url(url)\nself.setFeaturePermission(\nurl, FEATURE.get_enum_value(feature), PERMISSION_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_input_value","title":"<code>set_input_value(selector: str, value: str)</code>","text":"<p>Set the value of the input matched by given selector.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_input_value(self, selector: str, value):\n\"\"\"Set the value of the input matched by given selector.\"\"\"\nscript = f'document.querySelector({selector!r}).setAttribute(\"value\", \"{value}\")'\nself.runJavaScript(script)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_lifecycle_state","title":"<code>set_lifecycle_state(state: LifecycleStateStr | mod.LifecycleState)</code>","text":"<p>Set lifecycle state.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>LifecycleStateStr | mod.LifecycleState</code> <p>lifecycle state</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_lifecycle_state(self, state: LifecycleStateStr | mod.LifecycleState):\n\"\"\"Set lifecycle state.\n    Args:\n        state: lifecycle state\n    \"\"\"\nself.setLifecycleState(LIFECYCLE_STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_setting","title":"<code>set_setting(setting_name: webenginecore.webenginesettings.WebAttributeStr, value: bool)</code>","text":"<p>Set WebEngine setting to value.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\n\"\"\"Set WebEngine setting to value.\"\"\"\nself.get_settings()[setting_name] = value\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_url","title":"<code>set_url(url: datatypes.PathType | datatypes.UrlType)</code>","text":"<p>Set the url of the WebEnginePage.</p> <p>Clears the Page and loads the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.PathType | datatypes.UrlType</code> <p>URL to set</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_url(self, url: datatypes.PathType | datatypes.UrlType):\n\"\"\"Set the url of the WebEnginePage.\n    Clears the Page and loads the URL.\n    Args:\n        url: URL to set\n    \"\"\"\nself.setUrl(datatypes.to_url(url))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.set_zoom","title":"<code>set_zoom(zoom: float)</code>","text":"<p>Set the zoom factor for the Page.</p> <p>Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom factor</p> required Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the Page.\n    Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n    Args:\n        zoom: Zoom factor\n    \"\"\"\nself.setZoomFactor(zoom)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#prettyqt.webenginecore.webenginepage.WebEnginePage.trigger_action","title":"<code>trigger_action(action: WebActionStr | mod.WebAction, checked: bool = False)</code>","text":"<p>Trigger action.</p> Source code in <code>prettyqt\\webenginecore\\webenginepage.py</code> <pre><code>def trigger_action(self, action: WebActionStr | mod.WebAction, checked: bool = False):\n\"\"\"Trigger action.\"\"\"\nself.triggerAction(WEB_ACTION.get_enum_value(action), checked)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494771664[\"webenginecore.WebEnginePage\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494732304[\"QtWebEngineCore.QWebEnginePage\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494771664\n  140736120080256 --&gt; 2103255067472\n  2103494732304 --&gt; 2103494771664\n  2103254677056 --&gt; 2103494732304\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEnginePage.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>selectedText</code> QString <code>hasSelection</code> bool <code>requestedUrl</code> QUrl <code>zoomFactor</code> double <code>title</code> QString <code>url</code> QUrl <code>iconUrl</code> QUrl <code>icon</code> QIcon <code>backgroundColor</code> QColor <code>contentsSize</code> QSizeF <code>scrollPosition</code> QPointF <code>audioMuted</code> bool <code>recentlyAudible</code> bool <code>visible</code> bool <code>lifecycleState</code> QWebEnginePage::LifecycleState <code>recommendedState</code> QWebEnginePage::LifecycleState <code>renderProcessPid</code> qlonglong <code>loading</code> bool"},{"location":"qt_modules/webenginecore/WebEngineProfile.html","title":"WebEngineProfile","text":"<p>Qt Base Class: QWebEngineProfile</p> <p>Signature: <code>QWebEngineProfile(self, name: str, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QWebEngineProfile(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>webenginecore.QWebEngineProfile</code></p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>class WebEngineProfile(core.ObjectMixin, webenginecore.QWebEngineProfile):\ndef set_persistent_cookie_policy(\nself, policy: PersistentCookiePolicyStr | mod.PersistentCookiesPolicy\n):\n\"\"\"Set the persistent cookie policy.\n        Args:\n            policy: persistent cookie policy\n        \"\"\"\nself.setPersistentCookiesPolicy(PERSISTENT_COOKIE_POLICY.get_enum_value(policy))\ndef get_persistent_cookie_policy(self) -&gt; PersistentCookiePolicyStr:\n\"\"\"Return current persistent cookie policy.\n        Returns:\n            Persistent cookie policy\n        \"\"\"\nreturn PERSISTENT_COOKIE_POLICY.inverse[self.persistentCookiesPolicy()]\ndef set_http_cache_type(self, typ: HttpCacheTypeStr | mod.PersistentCookiesPolicy):\n\"\"\"Set the http cache type.\n        Args:\n            typ: http cache type\n        \"\"\"\nself.setHttpCacheType(HTTP_CACHE_TYPE.get_enum_value(typ))\ndef get_http_cache_type(self) -&gt; HttpCacheTypeStr:\n\"\"\"Return current http cache type.\n        Returns:\n            Http cache type\n        \"\"\"\nreturn HTTP_CACHE_TYPE.inverse[self.httpCacheType()]\ndef get_scripts(self) -&gt; webenginecore.WebEngineScriptCollection:\nreturn webenginecore.WebEngineScriptCollection(self.scripts())\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_http_cache_type","title":"<code>get_http_cache_type() -&gt; HttpCacheTypeStr</code>","text":"<p>Return current http cache type.</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_http_cache_type(self) -&gt; HttpCacheTypeStr:\n\"\"\"Return current http cache type.\n    Returns:\n        Http cache type\n    \"\"\"\nreturn HTTP_CACHE_TYPE.inverse[self.httpCacheType()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.get_persistent_cookie_policy","title":"<code>get_persistent_cookie_policy() -&gt; PersistentCookiePolicyStr</code>","text":"<p>Return current persistent cookie policy.</p> Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def get_persistent_cookie_policy(self) -&gt; PersistentCookiePolicyStr:\n\"\"\"Return current persistent cookie policy.\n    Returns:\n        Persistent cookie policy\n    \"\"\"\nreturn PERSISTENT_COOKIE_POLICY.inverse[self.persistentCookiesPolicy()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.set_http_cache_type","title":"<code>set_http_cache_type(typ: HttpCacheTypeStr | mod.PersistentCookiesPolicy)</code>","text":"<p>Set the http cache type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>HttpCacheTypeStr | mod.PersistentCookiesPolicy</code> <p>http cache type</p> required Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def set_http_cache_type(self, typ: HttpCacheTypeStr | mod.PersistentCookiesPolicy):\n\"\"\"Set the http cache type.\n    Args:\n        typ: http cache type\n    \"\"\"\nself.setHttpCacheType(HTTP_CACHE_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#prettyqt.webenginecore.webengineprofile.WebEngineProfile.set_persistent_cookie_policy","title":"<code>set_persistent_cookie_policy(policy: PersistentCookiePolicyStr | mod.PersistentCookiesPolicy)</code>","text":"<p>Set the persistent cookie policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>PersistentCookiePolicyStr | mod.PersistentCookiesPolicy</code> <p>persistent cookie policy</p> required Source code in <code>prettyqt\\webenginecore\\webengineprofile.py</code> <pre><code>def set_persistent_cookie_policy(\nself, policy: PersistentCookiePolicyStr | mod.PersistentCookiesPolicy\n):\n\"\"\"Set the persistent cookie policy.\n    Args:\n        policy: persistent cookie policy\n    \"\"\"\nself.setPersistentCookiesPolicy(PERSISTENT_COOKIE_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494761104[\"webenginecore.WebEngineProfile\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494696784[\"QtWebEngineCore.QWebEngineProfile\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494761104\n  140736120080256 --&gt; 2103255067472\n  2103494696784 --&gt; 2103494761104\n  2103254677056 --&gt; 2103494696784\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineProfile.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/webenginecore/WebEngineScript.html","title":"WebEngineScript","text":"<p>Qt Base Class: QWebEngineScript</p> <p>Signature: <code>QWebEngineScript(self) -&gt; None QWebEngineScript(self, other: PySide6.QtWebEngineCore.QWebEngineScript) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineScript.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWebEngineCore.QWebEngineScript</code></p> Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>class WebEngineScript(QtWebEngineCore.QWebEngineScript):\ndef set_injection_point(\nself, point: InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint\n):\n\"\"\"Set injection point.\n        Args:\n            point: injection point to use\n        \"\"\"\nself.setInjectionPoint(INJECTION_POINT.get_enum_value(point))\ndef get_injection_point(self) -&gt; InjectionPointStr:\n\"\"\"Return injection point.\n        Returns:\n            injection point\n        \"\"\"\nreturn INJECTION_POINT.inverse[self.injectionPoint()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineScript.html#prettyqt.webenginecore.webenginescript.WebEngineScript.get_injection_point","title":"<code>get_injection_point() -&gt; InjectionPointStr</code>","text":"<p>Return injection point.</p> Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>def get_injection_point(self) -&gt; InjectionPointStr:\n\"\"\"Return injection point.\n    Returns:\n        injection point\n    \"\"\"\nreturn INJECTION_POINT.inverse[self.injectionPoint()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineScript.html#prettyqt.webenginecore.webenginescript.WebEngineScript.set_injection_point","title":"<code>set_injection_point(point: InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint)</code>","text":"<p>Set injection point.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint</code> <p>injection point to use</p> required Source code in <code>prettyqt\\webenginecore\\webenginescript.py</code> <pre><code>def set_injection_point(\nself, point: InjectionPointStr | QtWebEngineCore.QWebEngineScript.InjectionPoint\n):\n\"\"\"Set injection point.\n    Args:\n        point: injection point to use\n    \"\"\"\nself.setInjectionPoint(INJECTION_POINT.get_enum_value(point))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineScript.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494745744[\"webenginecore.WebEngineScript\"]\n  2103494663184[\"QtWebEngineCore.QWebEngineScript\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494663184 --&gt; 2103494745744\n  2103206874128 --&gt; 2103494663184\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineScriptCollection.html","title":"WebEngineScriptCollection","text":""},{"location":"qt_modules/webenginecore/WebEngineScriptCollection.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\webenginecore\\webenginescriptcollection.py</code> <pre><code>class WebEngineScriptCollection:\ndef __init__(self, item: QtWebEngineCore.QWebEngineScriptCollection):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __getitem__(self, index: str) -&gt; QtWebEngineCore.QWebEngineScript:\nreturn self.item.find(index)[0]\ndef __len__(self):\nreturn self.item.count()\ndef __iter__(self) -&gt; Iterator[QtWebEngineCore.QWebEngineScript]:\nreturn iter(self.item.toList())\ndef __contains__(self, other: QtWebEngineCore.QWebEngineScript):\nreturn self.item.contains(other)\ndef __add__(\nself,\nother: (\nQtWebEngineCore.QWebEngineScript | list[QtWebEngineCore.QWebEngineScript]\n),\n):\nself.item.insert(other)\nreturn self\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineScriptCollection.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494743824[\"webenginecore.WebEngineScriptCollection\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103494743824</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html","title":"WebEngineSettings","text":""},{"location":"qt_modules/webenginecore/WebEngineSettings.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>MutableMapping</code></p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>class WebEngineSettings(MutableMapping):\ndef __init__(self, item: QtWebEngineCore.QWebEngineSettings):\nself.item = item\ndef __repr__(self):\nreturn get_repr(self, dict(self))\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef __setitem__(self, index: WebAttributeStr, value: bool):\nself.item.setAttribute(WEB_ATTRIBUTES[index], value)\ndef __getitem__(self, index: WebAttributeStr) -&gt; bool:\nif index not in WEB_ATTRIBUTES:\nraise KeyError(index)\nreturn self.item.testAttribute(WEB_ATTRIBUTES[index])\ndef __delitem__(self, index: WebAttributeStr):\nreturn self.item.resetAttribute(WEB_ATTRIBUTES[index])\ndef __iter__(self):\nreturn iter(WEB_ATTRIBUTES.keys())\ndef __len__(self):\nreturn len(WEB_ATTRIBUTES)\ndef set_unknown_url_scheme_policy(self, policy: UnknownUrlSchemePolicyStr | pol):\n\"\"\"Set the unknown url scheme policy.\n        Args:\n            policy: unknown url scheme policy\n        \"\"\"\nself.item.setUnknownUrlSchemePolicy(\nUNKNOWN_URL_SCHEME_POLICY.get_enum_value(policy)\n)\ndef get_unknown_url_scheme_policy(self) -&gt; UnknownUrlSchemePolicyStr:\n\"\"\"Return current unknown url scheme policy.\n        Returns:\n            Unknown url scheme policy\n        \"\"\"\nreturn UNKNOWN_URL_SCHEME_POLICY.inverse[self.item.unknownUrlSchemePolicy()]\ndef set_font_family(\nself,\nwhich: FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily,\nfamily: str,\n):\n\"\"\"Set the actual font family to family for the specified generic family, which.\n        Args:\n            which: family to set\n            family: generic family\n        \"\"\"\nself.item.setFontFamily(FONT_FAMILY.get_enum_value(which), family)\ndef get_font_family(self, family: FontFamilyStr) -&gt; str:\n\"\"\"Return the actual font family for the specified generic font family.\n        Args:\n            family: generic font family\n        Returns:\n            Font family\n        \"\"\"\nreturn self.item.fontFamily(FONT_FAMILY[family])\ndef set_font_size(\nself, typ: FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize, size: int\n):\n\"\"\"Set the font size for type to size in pixels.\n        Args:\n            typ: font size type\n            size: size in pixels\n        \"\"\"\nself.item.setFontSize(FONT_SIZE.get_enum_value(typ), size)\ndef get_font_size(self, typ: FontSizeStr) -&gt; int:\n\"\"\"Return the default font size for type in pixels.\n        Args:\n            typ: font size type\n        Returns:\n            Font size\n        \"\"\"\nreturn self.item.fontSize(FONT_SIZE[typ])\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_font_family","title":"<code>get_font_family(family: FontFamilyStr) -&gt; str</code>","text":"<p>Return the actual font family for the specified generic font family.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>FontFamilyStr</code> <p>generic font family</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_font_family(self, family: FontFamilyStr) -&gt; str:\n\"\"\"Return the actual font family for the specified generic font family.\n    Args:\n        family: generic font family\n    Returns:\n        Font family\n    \"\"\"\nreturn self.item.fontFamily(FONT_FAMILY[family])\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_font_size","title":"<code>get_font_size(typ: FontSizeStr) -&gt; int</code>","text":"<p>Return the default font size for type in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>FontSizeStr</code> <p>font size type</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_font_size(self, typ: FontSizeStr) -&gt; int:\n\"\"\"Return the default font size for type in pixels.\n    Args:\n        typ: font size type\n    Returns:\n        Font size\n    \"\"\"\nreturn self.item.fontSize(FONT_SIZE[typ])\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.get_unknown_url_scheme_policy","title":"<code>get_unknown_url_scheme_policy() -&gt; UnknownUrlSchemePolicyStr</code>","text":"<p>Return current unknown url scheme policy.</p> Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def get_unknown_url_scheme_policy(self) -&gt; UnknownUrlSchemePolicyStr:\n\"\"\"Return current unknown url scheme policy.\n    Returns:\n        Unknown url scheme policy\n    \"\"\"\nreturn UNKNOWN_URL_SCHEME_POLICY.inverse[self.item.unknownUrlSchemePolicy()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_font_family","title":"<code>set_font_family(which: FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily, family: str)</code>","text":"<p>Set the actual font family to family for the specified generic family, which.</p> <p>Parameters:</p> Name Type Description Default <code>which</code> <code>FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily</code> <p>family to set</p> required <code>family</code> <code>str</code> <p>generic family</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_font_family(\nself,\nwhich: FontFamilyStr | QtWebEngineCore.QWebEngineSettings.FontFamily,\nfamily: str,\n):\n\"\"\"Set the actual font family to family for the specified generic family, which.\n    Args:\n        which: family to set\n        family: generic family\n    \"\"\"\nself.item.setFontFamily(FONT_FAMILY.get_enum_value(which), family)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_font_size","title":"<code>set_font_size(typ: FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize, size: int)</code>","text":"<p>Set the font size for type to size in pixels.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize</code> <p>font size type</p> required <code>size</code> <code>int</code> <p>size in pixels</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_font_size(\nself, typ: FontSizeStr | QtWebEngineCore.QWebEngineSettings.FontSize, size: int\n):\n\"\"\"Set the font size for type to size in pixels.\n    Args:\n        typ: font size type\n        size: size in pixels\n    \"\"\"\nself.item.setFontSize(FONT_SIZE.get_enum_value(typ), size)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#prettyqt.webenginecore.webenginesettings.WebEngineSettings.set_unknown_url_scheme_policy","title":"<code>set_unknown_url_scheme_policy(policy: UnknownUrlSchemePolicyStr | pol)</code>","text":"<p>Set the unknown url scheme policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>UnknownUrlSchemePolicyStr | pol</code> <p>unknown url scheme policy</p> required Source code in <code>prettyqt\\webenginecore\\webenginesettings.py</code> <pre><code>def set_unknown_url_scheme_policy(self, policy: UnknownUrlSchemePolicyStr | pol):\n\"\"\"Set the unknown url scheme policy.\n    Args:\n        policy: unknown url scheme policy\n    \"\"\"\nself.item.setUnknownUrlSchemePolicy(\nUNKNOWN_URL_SCHEME_POLICY.get_enum_value(policy)\n)\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineSettings.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494741904[\"webenginecore.WebEngineSettings\"]\n  2103189029904[\"abc.MutableMapping\"]\n  2103189039504[\"abc.Mapping\"]\n  2103188971120[\"abc.Collection\"]\n  2103188981680[\"abc.Sized\"]\n  140736120080256[\"builtins.object\"]\n  2103188975920[\"abc.Iterable\"]\n  2103188982640[\"abc.Container\"]\n  2103189029904 --&gt; 2103494741904\n  2103189039504 --&gt; 2103189029904\n  2103188971120 --&gt; 2103189039504\n  2103188981680 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188981680\n  2103188975920 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188975920\n  2103188982640 --&gt; 2103188971120\n  140736120080256 --&gt; 2103188982640</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlScheme.html","title":"WebEngineUrlScheme","text":"<p>Qt Base Class: QWebEngineUrlScheme</p> <p>Signature: <code>QWebEngineUrlScheme(self) -&gt; None QWebEngineUrlScheme(self, name: Union[PySide6.QtCore.QByteArray, bytes]) -&gt; None QWebEngineUrlScheme(self, that: PySide6.QtWebEngineCore.QWebEngineUrlScheme) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineUrlScheme.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWebEngineCore.QWebEngineUrlScheme</code></p> Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>class WebEngineUrlScheme(QtWebEngineCore.QWebEngineUrlScheme):\ndef get_name(self) -&gt; str:\nreturn self.name().data().decode()\n@classmethod\ndef get_scheme_by_name(cls, name: datatypes.ByteArrayType) -&gt; Self:\nscheme = cls.schemeByName(datatypes.to_bytearray(name))\nreturn cls(scheme)\ndef set_name(self, name: datatypes.ByteArrayType):\nself.setName(datatypes.to_bytearray(name))\ndef set_syntax(self, syntax: SyntaxStr | QWebEngineUrlScheme.Syntax):\n\"\"\"Set syntax.\n        Args:\n            syntax: syntax to use\n        \"\"\"\nself.setSyntax(SYNTAX.get_enum_value(syntax))\ndef get_syntax(self) -&gt; SyntaxStr:\n\"\"\"Return syntax.\n        Returns:\n            syntax\n        \"\"\"\nreturn SYNTAX.inverse[self.syntax()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlScheme.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.get_syntax","title":"<code>get_syntax() -&gt; SyntaxStr</code>","text":"<p>Return syntax.</p> Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def get_syntax(self) -&gt; SyntaxStr:\n\"\"\"Return syntax.\n    Returns:\n        syntax\n    \"\"\"\nreturn SYNTAX.inverse[self.syntax()]\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlScheme.html#prettyqt.webenginecore.webengineurlscheme.WebEngineUrlScheme.set_syntax","title":"<code>set_syntax(syntax: SyntaxStr | QWebEngineUrlScheme.Syntax)</code>","text":"<p>Set syntax.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>SyntaxStr | QWebEngineUrlScheme.Syntax</code> <p>syntax to use</p> required Source code in <code>prettyqt\\webenginecore\\webengineurlscheme.py</code> <pre><code>def set_syntax(self, syntax: SyntaxStr | QWebEngineUrlScheme.Syntax):\n\"\"\"Set syntax.\n    Args:\n        syntax: syntax to use\n    \"\"\"\nself.setSyntax(SYNTAX.get_enum_value(syntax))\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlScheme.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494746704[\"webenginecore.WebEngineUrlScheme\"]\n  2103494632464[\"QtWebEngineCore.QWebEngineUrlScheme\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103494632464 --&gt; 2103494746704\n  2103206874128 --&gt; 2103494632464\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlSchemeHandler.html","title":"WebEngineUrlSchemeHandler","text":"<p>Qt Base Class: QWebEngineUrlSchemeHandler</p> <p>Signature: <code>QWebEngineUrlSchemeHandler(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/webenginecore/WebEngineUrlSchemeHandler.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtWebEngineCore.QWebEngineUrlSchemeHandler</code></p> Source code in <code>prettyqt\\webenginecore\\webengineurlschemehandler.py</code> <pre><code>class WebEngineUrlSchemeHandler(\ncore.ObjectMixin, QtWebEngineCore.QWebEngineUrlSchemeHandler\n):\npass\n</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlSchemeHandler.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494768784[\"webenginecore.WebEngineUrlSchemeHandler\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103494693904[\"QtWebEngineCore.QWebEngineUrlSchemeHandler\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103494768784\n  140736120080256 --&gt; 2103255067472\n  2103494693904 --&gt; 2103494768784\n  2103254677056 --&gt; 2103494693904\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/webenginecore/WebEngineUrlSchemeHandler.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/webenginewidgets/index.html","title":"webenginewidgets","text":"<p>Webenginewidgets module.</p> <p>contains QtWebEngineWidgets-based classes</p> Name Children Inherits WebEngineViewprettyqt.webenginewidgets.webengineview <ul><li>WidgetMixin</li><li>QWebEngineView</li></ul>"},{"location":"qt_modules/webenginewidgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>webenginewidgets</li> <li>WebEngineView</li> </ul>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html","title":"WebEngineView","text":"<p>Qt Base Class: QWebEngineView</p> <p>Signature: <code>QWebEngineView(self, page: PySide6.QtWebEngineCore.QWebEnginePage, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QWebEngineView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QWebEngineView(self, profile: PySide6.QtWebEngineCore.QWebEngineProfile, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>QtWebEngineWidgets.QWebEngineView</code></p> Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>class WebEngineView(widgets.WidgetMixin, QtWebEngineWidgets.QWebEngineView):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setPage(webenginecore.WebEnginePage(self))\ndef set_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Set the url of the WebEngineView.\n        Clears the view and loads the URL.\n        Args:\n            url: URL to set\n        \"\"\"\nurl = datatypes.to_url(url)\nself.setUrl(url)\ndef get_url(self) -&gt; core.Url:\nreturn core.Url(self.url())\ndef load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n        Loads the specified url and displays it.\n        Note: The view remains the same until enough data has arrived\n        to display the new URL.\n        Args:\n            url: URL to load\n        \"\"\"\nurl = datatypes.to_url(url)\nself.load(url)\ndef set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the view.\n        Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n        Args:\n            zoom: Zoom factor\n        \"\"\"\nself.setZoomFactor(zoom)\ndef find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n        Finds the specified string, subString, in the page, using the given options.\n        The findTextFinished() signal is emitted when a string search is completed.\n        To clear the search highlight, just pass an empty string.\n        The resultCallback must take a boolean parameter.\n        It will be called with a value of true if the subString was found;\n        otherwise the callback value will be false.\n        Warning: It is guaranteed that the callback is always called,\n        but it might be done during page destruction. When WebEnginePage is deleted,\n        the callback is triggered with an invalid value and it is not safe to use\n        the corresponding QWebEnginePage or QWebEngineView instance inside it.\n        Args:\n            string: string to search for\n            backward: search backwards\n            case_sensitive: case-sensitive search\n            callback: result callback\n        \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.WebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= webenginecore.WebEnginePage.FindFlag.FindCaseSensitively\nif backward:\nflag |= webenginecore.WebEnginePage.FindFlag.FindBackward\nself.findText(string, flag, callback)\ndef get_settings(self) -&gt; webenginecore.WebEngineSettings:\nsettings = self.settings()\nreturn webenginecore.WebEngineSettings(settings)\ndef set_setting(\nself,\nsetting_name: webenginecore.webenginesettings.WebAttributeStr,\nvalue: bool,\n):\nself.get_settings()[setting_name] = value\ndef get_setting(\nself, setting_name: webenginecore.webenginesettings.WebAttributeStr\n) -&gt; bool:\nreturn self.get_settings()[setting_name]\n@classmethod\ndef register_as_browser(cls, tabwidget: widgets.TabWidget):\nclass BuiltInBrowser(webbrowser.BaseBrowser):\ndef open(self, url: str, new: int = 0, autoraise: bool = True):\n# logger.info(f\"opening {url} with builtin browser..\")\nwebview = cls()\nwebview.load_url(url)\nif new == 1:\nwebview.show()\nelse:\ntabwidget.add_tab(webview, url, show=autoraise)\nwebbrowser.register(\"BuiltInBrowser\", BuiltInBrowser)\ndef last_context_menu_request(\nself,\n) -&gt; webenginecore.WebEngineContextMenuRequest | None:\nreq = self.lastContextMenuRequest()\nreturn webenginecore.WebEngineContextMenuRequest(req) if req else None\n</code></pre>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#prettyqt.webenginewidgets.webengineview.WebEngineView.find_text","title":"<code>find_text(string: str, backward: bool = False, case_sensitive: bool = False, callback: Callable[[bool], None] | None = None)</code>","text":"<p>Find text in the current page.</p> <p>Finds the specified string, subString, in the page, using the given options. The findTextFinished() signal is emitted when a string search is completed.</p> <p>To clear the search highlight, just pass an empty string.</p> <p>The resultCallback must take a boolean parameter. It will be called with a value of true if the subString was found; otherwise the callback value will be false.</p> <p>Warning: It is guaranteed that the callback is always called, but it might be done during page destruction. When WebEnginePage is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding QWebEnginePage or QWebEngineView instance inside it.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>string to search for</p> required <code>backward</code> <code>bool</code> <p>search backwards</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>case-sensitive search</p> <code>False</code> <code>callback</code> <code>Callable[[bool], None] | None</code> <p>result callback</p> <code>None</code> Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def find_text(\nself,\nstring: str,\nbackward: bool = False,\ncase_sensitive: bool = False,\ncallback: Callable[[bool], None] | None = None,\n):\n\"\"\"Find text in the current page.\n    Finds the specified string, subString, in the page, using the given options.\n    The findTextFinished() signal is emitted when a string search is completed.\n    To clear the search highlight, just pass an empty string.\n    The resultCallback must take a boolean parameter.\n    It will be called with a value of true if the subString was found;\n    otherwise the callback value will be false.\n    Warning: It is guaranteed that the callback is always called,\n    but it might be done during page destruction. When WebEnginePage is deleted,\n    the callback is triggered with an invalid value and it is not safe to use\n    the corresponding QWebEnginePage or QWebEngineView instance inside it.\n    Args:\n        string: string to search for\n        backward: search backwards\n        case_sensitive: case-sensitive search\n        callback: result callback\n    \"\"\"\nif callback is None:\ndef do_nothing(x):\npass\ncallback = do_nothing\nflag = webenginecore.WebEnginePage.FindFlag(0)\nif case_sensitive:\nflag |= webenginecore.WebEnginePage.FindFlag.FindCaseSensitively\nif backward:\nflag |= webenginecore.WebEnginePage.FindFlag.FindBackward\nself.findText(string, flag, callback)\n</code></pre>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#prettyqt.webenginewidgets.webengineview.WebEngineView.load_url","title":"<code>load_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Load the URL.</p> <p>Loads the specified url and displays it.</p> <p>Note: The view remains the same until enough data has arrived to display the new URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to load</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def load_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Load the URL.\n    Loads the specified url and displays it.\n    Note: The view remains the same until enough data has arrived\n    to display the new URL.\n    Args:\n        url: URL to load\n    \"\"\"\nurl = datatypes.to_url(url)\nself.load(url)\n</code></pre>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_url","title":"<code>set_url(url: datatypes.UrlType | datatypes.PathType)</code>","text":"<p>Set the url of the WebEngineView.</p> <p>Clears the view and loads the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>datatypes.UrlType | datatypes.PathType</code> <p>URL to set</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_url(self, url: datatypes.UrlType | datatypes.PathType):\n\"\"\"Set the url of the WebEngineView.\n    Clears the view and loads the URL.\n    Args:\n        url: URL to set\n    \"\"\"\nurl = datatypes.to_url(url)\nself.setUrl(url)\n</code></pre>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#prettyqt.webenginewidgets.webengineview.WebEngineView.set_zoom","title":"<code>set_zoom(zoom: float)</code>","text":"<p>Set the zoom factor for the view.</p> <p>Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>float</code> <p>Zoom factor</p> required Source code in <code>prettyqt\\webenginewidgets\\webengineview.py</code> <pre><code>def set_zoom(self, zoom: float):\n\"\"\"Set the zoom factor for the view.\n    Valid values are within the range from 0.25 to 5.0. The default factor is 1.0.\n    Args:\n        zoom: Zoom factor\n    \"\"\"\nself.setZoomFactor(zoom)\n</code></pre>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103494763024[\"webenginewidgets.WebEngineView\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103494762064[\"QtWebEngineWidgets.QWebEngineView\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103494763024\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103494762064 --&gt; 2103494763024\n  2103259691120 --&gt; 2103494762064\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/webenginewidgets/WebEngineView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>url</code> QUrl <code>iconUrl</code> QUrl <code>icon</code> QIcon <code>selectedText</code> QString <code>hasSelection</code> bool <code>zoomFactor</code> double"},{"location":"qt_modules/widgets/index.html","title":"widgets","text":"<p>Classes to extend Qt GUI with widgets.</p> Name Children Inherits GraphicsLineItemprettyqt.widgets.graphicslineitem <ul><li>GraphicsItemMixin</li><li>QGraphicsLineItem</li></ul> GraphicsOpacityEffectprettyqt.widgets.graphicsopacityeffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsOpacityEffect</li></ul> GraphicsGridLayoutprettyqt.widgets.graphicsgridlayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsGridLayout</li></ul> AbstractSpinBoxMixinprettyqt.widgets.abstractspinbox <ul><li>AbstractSpinBox</li><li>SpinBox</li><li>DoubleSpinBox</li><li>DateTimeEditMixin</li></ul> <ul><li>WidgetMixin</li></ul> UndoViewprettyqt.widgets.undoview <ul><li>ListViewMixin</li><li>QUndoView</li></ul> KeySequenceEditprettyqt.widgets.keysequenceedit <ul><li>WidgetMixin</li><li>QKeySequenceEdit</li></ul> InputDialogprettyqt.widgets.inputdialog <ul><li>DialogMixin</li><li>QInputDialog</li></ul> StylePainterprettyqt.widgets.stylepainter <ul><li>PainterMixin</li><li>QStylePainter</li></ul> SystemTrayIconprettyqt.widgets.systemtrayicon <ul><li>ObjectMixin</li><li>QSystemTrayIcon</li></ul> StyleOptionTabprettyqt.widgets.styleoptiontab <ul><li>StyleOptionMixin</li><li>QStyleOptionTab</li></ul> TreeViewMixinprettyqt.widgets.treeview <ul><li>TreeView</li><li><code>TreeWidgetMixin</code></li><li>HelpContentWidget</li></ul> <ul><li>AbstractItemViewMixin</li></ul> StyleOptionComplexMixinprettyqt.widgets.styleoptioncomplex <ul><li>StyleOptionComplex</li><li>StyleOptionComboBox</li><li>StyleOptionSizeGrip</li><li>StyleOptionSlider</li></ul> <ul><li>StyleOptionMixin</li></ul> GraphicsBlurEffectprettyqt.widgets.graphicsblureffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsBlurEffect</li></ul> AbstractGraphicsShapeItemprettyqt.widgets.abstractgraphicsshapeitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QAbstractGraphicsShapeItem</li></ul> PinchGestureprettyqt.widgets.pinchgesture <ul><li>GestureMixin</li><li>QPinchGesture</li></ul> CommandLinkButtonprettyqt.widgets.commandlinkbutton <ul><li>PushButtonMixin</li><li>QCommandLinkButton</li></ul> WidgetMixinprettyqt.widgets.widget <ul><li>Widget</li><li>FrameMixin</li><li>FocusFrame</li><li>AbstractSliderMixin</li><li>AbstractButtonMixin</li><li>LineEdit</li><li>AbstractSpinBoxMixin</li><li><code>RubberBandMixin</code></li><li>DialogButtonBox</li><li>DialogMixin</li><li>...</li></ul> <ul><li>ObjectMixin</li><li>PaintDeviceMixin</li></ul> Splitterprettyqt.widgets.splitter <ul><li>AstViewer</li><li>ProxyComparerWidget</li></ul> <ul><li><code>SplitterMixin</code></li><li>QSplitter</li></ul> FileSystemModelprettyqt.widgets.filesystemmodel <ul><li><code>FileSystemModelMixin</code></li><li>AbstractItemModelMixin</li><li>QFileSystemModel</li></ul> TableWidgetSelectionRangeprettyqt.widgets.tablewidgetselectionrange <ul><li>QTableWidgetSelectionRange</li></ul> StyleOptionGraphicsItemprettyqt.widgets.styleoptiongraphicsitem <ul><li>StyleOptionMixin</li><li>QStyleOptionGraphicsItem</li></ul> PlainTextEditMixinprettyqt.widgets.plaintextedit <ul><li>PlainTextEdit</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> GraphicsSceneprettyqt.widgets.graphicsscene <ul><li>ObjectMixin</li><li>QGraphicsScene</li></ul> GraphicsTransformprettyqt.widgets.graphicstransform <ul><li>GraphicsTransformMixin</li><li>QGraphicsTransform</li></ul> AbstractSpinBoxprettyqt.widgets.abstractspinbox <ul><li>AbstractSpinBoxMixin</li><li>QAbstractSpinBox</li></ul> DateTimeEditMixinprettyqt.widgets.datetimeeditWidget for editing dates and times. <ul><li>DateTimeEdit</li><li>DateEdit</li><li>TimeEdit</li></ul> <ul><li>AbstractSpinBoxMixin</li></ul> HeaderViewprettyqt.widgets.headerview <ul><li>HierarchicalHeaderView</li><li>FilterHeader</li></ul> <ul><li><code>HeaderViewMixin</code></li><li>QHeaderView</li></ul> HBoxLayoutprettyqt.widgets.hboxlayout <ul><li><code>BoxLayoutMixin</code></li><li>QHBoxLayout</li></ul> TextEditprettyqt.widgets.textedit <ul><li>AutoResizeTextEdit</li></ul> <ul><li>TextEditMixin</li><li>QTextEdit</li></ul> LayoutMixinprettyqt.widgets.layout <ul><li>Layout</li><li>FormLayout</li><li><code>BoxLayoutMixin</code></li><li>StackedLayout</li><li>GridLayout</li></ul> <ul><li>ObjectMixin</li><li>LayoutItemMixin</li></ul> DialogButtonBoxprettyqt.widgets.dialogbuttonbox <ul><li>WidgetMixin</li><li>QDialogButtonBox</li></ul> LayoutItemMixinprettyqt.widgets.layoutitem <ul><li>LayoutItem</li><li>WidgetItem</li><li>LayoutMixin</li><li>SpacerItem</li></ul> <ul><li>object</li></ul> StyleOptionTabBarBaseprettyqt.widgets.styleoptiontabbarbase <ul><li>StyleOptionMixin</li><li>QStyleOptionTabBarBase</li></ul> TableViewprettyqt.widgets.tableview <ul><li>OrientedTableView</li><li>QObjectPropertiesTableView</li><li>LogRecordTableView</li><li><code>CommandTable</code></li></ul> <ul><li>TableViewMixin</li><li>QTableView</li></ul> StyleOptionButtonprettyqt.widgets.styleoptionbutton <ul><li>StyleOptionMixin</li><li>QStyleOptionButton</li></ul> GraphicsColorizeEffectprettyqt.widgets.graphicscolorizeeffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsColorizeEffect</li></ul> GraphicsPixmapItemprettyqt.widgets.graphicspixmapitem <ul><li>GraphicsItemMixin</li><li>QGraphicsPixmapItem</li></ul> MenuBarprettyqt.widgets.menubar <ul><li>WidgetMixin</li><li>QMenuBar</li></ul> AbstractSliderMixinprettyqt.widgets.abstractslider <ul><li>AbstractSlider</li><li><code>ScrollBarMixin</code></li><li>Slider</li><li>Dial</li></ul> <ul><li>WidgetMixin</li></ul> Menuprettyqt.widgets.menu <ul><li><code>MenuMixin</code></li><li>QMenu</li></ul> StyleOptionGroupBoxprettyqt.widgets.styleoptiongroupbox <ul><li>StyleOptionComplex</li><li>QStyleOptionGroupBox</li></ul> ScrollerPropertiesprettyqt.widgets.scrollerproperties <ul><li>QScrollerProperties</li></ul> GraphicsPolygonItemprettyqt.widgets.graphicspolygonitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsPolygonItem</li></ul> StyleOptionMixinprettyqt.widgets.styleoption <ul><li>StyleOption</li><li>StyleOptionButton</li><li>StyleOptionComplexMixin</li><li>StyleOptionDockWidget</li><li>StyleOptionFocusRect</li><li>StyleOptionFrame</li><li>StyleOptionGraphicsItem</li><li>StyleOptionHeader</li><li>StyleOptionMenuItem</li><li>StyleOptionProgressBar</li><li>...</li></ul> <ul><li>object</li></ul> GraphicsItemMixinprettyqt.widgets.graphicsitem <ul><li>GraphicsItem</li><li>GraphicsItemGroup</li><li>AbstractGraphicsShapeItemMixin</li><li>GraphicsPixmapItem</li><li>GraphicsObjectMixin</li><li>GraphicsLineItem</li></ul> <ul><li>object</li></ul> AbstractItemViewMixinprettyqt.widgets.abstractitemview <ul><li>AbstractItemView</li><li><code>HeaderViewMixin</code></li><li>ColumnView</li><li>ListViewMixin</li><li>TreeViewMixin</li><li>TableViewMixin</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> DateTimeEditprettyqt.widgets.datetimeedit <ul><li>DateTimeEditMixin</li><li>QDateTimeEdit</li></ul> SizePolicyprettyqt.widgets.sizepolicy <ul><li>QSizePolicy</li></ul> ItemEditorFactoryprettyqt.widgets.itemeditorfactory <ul><li>QItemEditorFactory</li></ul> TreeWidgetItemprettyqt.widgets.treewidgetitem <ul><li><code>SerializeMixin</code></li><li>QTreeWidgetItem</li></ul> FocusFrameprettyqt.widgets.focusframe <ul><li>WidgetMixin</li><li>QFocusFrame</li></ul> ProgressDialogprettyqt.widgets.progressdialog <ul><li>DialogMixin</li><li>QProgressDialog</li></ul> TextEditMixinprettyqt.widgets.textedit <ul><li>TextEdit</li><li>TextBrowser</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> StyleOptionViewItemprettyqt.widgets.styleoptionviewitem <ul><li>StyleOptionMixin</li><li>QStyleOptionViewItem</li></ul> LayoutItemprettyqt.widgets.layoutitem <ul><li>LayoutItemMixin</li><li>QLayoutItem</li></ul> StyleOptionTitleBarprettyqt.widgets.styleoptiontitlebar <ul><li>StyleOptionComplex</li><li>QStyleOptionTitleBar</li></ul> ListWidgetprettyqt.widgets.listwidget <ul><li>ListViewMixin</li><li>QListWidget</li></ul> GraphicsProxyWidgetprettyqt.widgets.graphicsproxywidget <ul><li>GraphicsWidgetMixin</li><li>QGraphicsProxyWidget</li></ul> StyleOptionTabWidgetFrameprettyqt.widgets.styleoptiontabwidgetframe <ul><li>StyleOptionMixin</li><li>QStyleOptionTabWidgetFrame</li></ul> GraphicsObjectMixinprettyqt.widgets.graphicsobject <ul><li>GraphicsObject</li><li>GraphicsTextItem</li><li>GraphicsWidgetMixin</li><li>GraphicsVideoItem</li><li>GraphicsSvgItem</li></ul> <ul><li>ObjectMixin</li><li>GraphicsItemMixin</li></ul> CommonStyleprettyqt.widgets.commonstyle <ul><li>CommonStyleMixin</li><li>QCommonStyle</li></ul> WidgetActionprettyqt.widgets.widgetaction <ul><li>ActionMixin</li><li>QWidgetAction</li></ul> CommonStyleMixinprettyqt.widgets.commonstyle <ul><li>CommonStyle</li><li>ProxyStyle</li></ul> <ul><li>StyleMixin</li></ul> SplitterHandleprettyqt.widgets.splitterhandle <ul><li>WidgetMixin</li><li>QSplitterHandle</li></ul> Sliderprettyqt.widgets.slider <ul><li>SpanSlider</li></ul> <ul><li>AbstractSliderMixin</li><li>QSlider</li></ul> StackedWidgetprettyqt.widgets.stackedwidget <ul><li>FrameMixin</li><li>QStackedWidget</li></ul> StyleOptionSizeGripprettyqt.widgets.styleoptionsizegrip <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionSizeGrip</li></ul> AbstractItemDelegateMixinprettyqt.widgets.abstractitemdelegate <ul><li>AbstractItemDelegate</li><li>ItemDelegate</li><li>StyledItemDelegate</li></ul> <ul><li>ObjectMixin</li></ul> GraphicsDropShadowEffectprettyqt.widgets.graphicsdropshadoweffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsDropShadowEffect</li></ul> TextBrowserprettyqt.widgets.textbrowser <ul><li>TextEditMixin</li><li>QTextBrowser</li></ul> GraphicsWidgetMixinprettyqt.widgets.graphicswidget <ul><li>GraphicsWidget</li><li>GraphicsProxyWidget</li><li>Legend</li><li>ChartMixin</li></ul> <ul><li>GraphicsObjectMixin</li><li>GraphicsLayoutItemMixin</li></ul> GraphicsLayoutprettyqt.widgets.graphicslayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsLayout</li></ul> PlainTextEditprettyqt.widgets.plaintextedit <ul><li>AutoResizePlainTextEdit</li><li>SingleLineTextEdit</li><li>LogTextEdit</li><li>CodeEditor</li></ul> <ul><li>PlainTextEditMixin</li><li>QPlainTextEdit</li></ul> RubberBandprettyqt.widgets.rubberband <ul><li><code>RubberBandMixin</code></li><li>QRubberBand</li></ul> SizeGripprettyqt.widgets.sizegrip <ul><li>WidgetMixin</li><li>QSizeGrip</li></ul> TimeEditprettyqt.widgets.timeedit <ul><li>DateTimeEditMixin</li><li>QTimeEdit</li></ul> MdiSubWindowprettyqt.widgets.mdisubwindow <ul><li>WidgetMixin</li><li>QMdiSubWindow</li></ul> SwipeGestureprettyqt.widgets.swipegesture <ul><li><code>SwipeGestureMixin</code></li><li>QSwipeGesture</li></ul> DateEditprettyqt.widgets.dateedit <ul><li>DateTimeEditMixin</li><li>QDateEdit</li></ul> FontDialogprettyqt.widgets.fontdialog <ul><li>DialogMixin</li><li>QFontDialog</li></ul> StyleOptionToolBarprettyqt.widgets.styleoptiontoolbar <ul><li>StyleOptionMixin</li><li>QStyleOptionToolBar</li></ul> StyleFactoryprettyqt.widgets.stylefactory <ul><li>QStyleFactory</li></ul> TableWidgetItemprettyqt.widgets.tablewidgetitem <ul><li>QTableWidgetItem</li></ul> StyleOptionRubberBandprettyqt.widgets.styleoptionrubberband <ul><li>StyleOptionMixin</li><li>QStyleOptionRubberBand</li></ul> GraphicsViewprettyqt.widgets.graphicsview <ul><li>GraphicsViewMixin</li><li>QGraphicsView</li></ul> GraphicsObjectprettyqt.widgets.graphicsobject <ul><li>GraphicsObjectMixin</li><li>QGraphicsObject</li></ul> Frameprettyqt.widgets.frame <ul><li>ElidedLabel</li><li>CollapsibleFrame</li></ul> <ul><li>FrameMixin</li><li>QFrame</li></ul> MdiAreaprettyqt.widgets.mdiarea <ul><li>AbstractScrollAreaMixin</li><li>QMdiArea</li></ul> PanGestureprettyqt.widgets.pangesture <ul><li>GestureMixin</li><li>QPanGesture</li></ul> Styleprettyqt.widgets.style <ul><li>StyleMixin</li><li>QStyle</li></ul> ToolTipprettyqt.widgets.tooltip <ul><li>QToolTip</li></ul> SplashScreenprettyqt.widgets.splashscreen <ul><li><code>SplashScreenMixin</code></li><li>QSplashScreen</li></ul> Dialprettyqt.widgets.dial <ul><li>AbstractSliderMixin</li><li>QDial</li></ul> ItemDelegateprettyqt.widgets.itemdelegate <ul><li>AbstractItemDelegateMixin</li><li>QItemDelegate</li></ul> StyleOptionprettyqt.widgets.styleoption <ul><li>StyleOptionMixin</li><li>QStyleOption</li></ul> Completerprettyqt.widgets.completer <ul><li>SubsequenceCompleter</li></ul> <ul><li>ObjectMixin</li><li>QCompleter</li></ul> GraphicsEffectprettyqt.widgets.graphicseffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsEffect</li></ul> ScrollAreaprettyqt.widgets.scrollarea <ul><li>AbstractScrollAreaMixin</li><li>QScrollArea</li></ul> CalendarWidgetprettyqt.widgets.calendarwidget <ul><li>WidgetMixin</li><li>QCalendarWidget</li></ul> GraphicsTransformMixinprettyqt.widgets.graphicstransform <ul><li>GraphicsTransform</li><li>GraphicsRotation</li><li>GraphicsScale</li></ul> <ul><li>ObjectMixin</li></ul> MainWindowprettyqt.widgets.mainwindow <ul><li><code>DetachedTab</code></li><li>IconBrowser</li><li>ObjectBrowser</li><li>SidebarWidget</li><li>QObjectDetailsDialog</li></ul> <ul><li>WidgetMixin</li><li>QMainWindow</li></ul> PlainTextDocumentLayoutprettyqt.widgets.plaintextdocumentlayout <ul><li>AbstractTextDocumentLayoutMixin</li><li>QPlainTextDocumentLayout</li></ul> AbstractItemViewprettyqt.widgets.abstractitemview <ul><li>AbstractItemViewMixin</li><li>QAbstractItemView</li></ul> FileDialogprettyqt.widgets.filedialog <ul><li>DialogMixin</li><li>QFileDialog</li></ul> ToolBarprettyqt.widgets.toolbar <ul><li><code>BreadCrumbsToolBar</code></li></ul> <ul><li><code>ToolBarMixin</code></li><li>QToolBar</li></ul> DialogMixinprettyqt.widgets.dialog <ul><li>Dialog</li><li>MessageBox</li><li>ErrorMessage</li><li>ProgressDialog</li><li>FontDialog</li><li>FileDialog</li><li>ColorDialog</li><li>InputDialog</li><li><code>WizardMixin</code></li><li>AbstractPrintDialogMixin</li><li>...</li></ul> <ul><li>WidgetMixin</li></ul> GridLayoutprettyqt.widgets.gridlayout <ul><li>LayoutMixin</li><li>QGridLayout</li></ul> StyleOptionSliderprettyqt.widgets.styleoptionslider <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionSlider</li></ul> TreeWidgetItemIteratorprettyqt.widgets.treewidgetitemiterator <ul><li>QTreeWidgetItemIterator</li></ul> GraphicsLinearLayoutprettyqt.widgets.graphicslinearlayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsLinearLayout</li></ul> StyleOptionProgressBarprettyqt.widgets.styleoptionprogressbar <ul><li>StyleOptionMixin</li><li>QStyleOptionProgressBar</li></ul> GraphicsTextItemprettyqt.widgets.graphicstextitem <ul><li>GraphicsObjectMixin</li><li>QGraphicsTextItem</li></ul> AbstractScrollAreaMixinprettyqt.widgets.abstractscrollarea <ul><li>AbstractScrollArea</li><li>AbstractItemViewMixin</li><li>ScrollArea</li><li>GraphicsViewMixin</li><li>MdiArea</li><li>TextEditMixin</li><li>PlainTextEditMixin</li><li>PdfView</li></ul> <ul><li>FrameMixin</li></ul> StatusBarprettyqt.widgets.statusbar <ul><li>WidgetMixin</li><li>QStatusBar</li></ul> VBoxLayoutprettyqt.widgets.vboxlayout <ul><li><code>BoxLayoutMixin</code></li><li>QVBoxLayout</li></ul> TabBarprettyqt.widgets.tabbar <ul><li><code>TabBarMixin</code></li><li>QTabBar</li></ul> WidgetItemprettyqt.widgets.widgetitem <ul><li>LayoutItemMixin</li><li>QWidgetItem</li></ul> StyledItemDelegateprettyqt.widgets.styleditemdelegate <ul><li>ButtonDelegate</li><li><code>BaseMarkupDelegate</code></li><li>IconDelegate</li><li>NoFocusDelegate</li><li>ProgressBarDelegate</li><li>RadioDelegate</li><li>RenderLinkDelegate</li><li>StarDelegate</li><li>EditorDelegate</li><li>WidgetDelegate</li><li>...</li></ul> <ul><li>AbstractItemDelegateMixin</li><li>QStyledItemDelegate</li></ul> GraphicsRectItemprettyqt.widgets.graphicsrectitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsRectItem</li></ul> LCDNumberprettyqt.widgets.lcdnumber <ul><li>FrameMixin</li><li>QLCDNumber</li></ul> StyleOptionDockWidgetprettyqt.widgets.styleoptiondockwidget <ul><li>StyleOptionMixin</li><li>QStyleOptionDockWidget</li></ul> GraphicsLayoutMixinprettyqt.widgets.graphicslayout <ul><li>GraphicsLayout</li><li>GraphicsGridLayout</li><li>GraphicsLinearLayout</li><li>GraphicsAnchorLayout</li></ul> <ul><li>GraphicsLayoutItemMixin</li></ul> ProgressBarprettyqt.widgets.progressbar <ul><li>WidgetMixin</li><li>QProgressBar</li></ul> GraphicsItemprettyqt.widgets.graphicsitem <ul><li>GraphicsItemMixin</li><li>QGraphicsItem</li></ul> ListWidgetItemprettyqt.widgets.listwidgetitem <ul><li><code>SerializeMixin</code></li><li>QListWidgetItem</li></ul> TapAndHoldGestureprettyqt.widgets.tapandholdgesture <ul><li>GestureMixin</li><li>QTapAndHoldGesture</li></ul> SpinBoxprettyqt.widgets.spinbox <ul><li>AbstractSpinBoxMixin</li><li>QSpinBox</li></ul> Layoutprettyqt.widgets.layout <ul><li>FlowLayout</li><li>BorderLayout</li></ul> <ul><li>LayoutMixin</li><li>QLayout</li></ul> PushButtonprettyqt.widgets.pushbutton <ul><li>PushButtonMixin</li><li>QPushButton</li></ul> FormLayoutprettyqt.widgets.formlayout <ul><li>LayoutMixin</li><li>QFormLayout</li></ul> StyleOptionSpinBoxprettyqt.widgets.styleoptionspinbox <ul><li>StyleOptionComplex</li><li>QStyleOptionSpinBox</li></ul> GraphicsWidgetprettyqt.widgets.graphicswidget <ul><li>GraphicsWidgetMixin</li><li>QGraphicsWidget</li></ul> StyleOptionHeaderprettyqt.widgets.styleoptionheader <ul><li>StyleOptionMixin</li><li>QStyleOptionHeader</li></ul> AbstractScrollAreaprettyqt.widgets.abstractscrollarea <ul><li>AbstractScrollAreaMixin</li><li>QAbstractScrollArea</li></ul> ComboBoxMixinprettyqt.widgets.comboboxCombobox that lets the user select a font family. <ul><li>ComboBox</li><li>FontComboBox</li></ul> <ul><li>WidgetMixin</li></ul> TabWidgetprettyqt.widgets.tabwidget <ul><li>WidgetMixin</li><li>QTabWidget</li></ul> Widgetprettyqt.widgets.widget <ul><li><code>CustomTitleBar</code></li><li><code>StarEditor</code></li><li><code>Separator</code></li><li>IconLabel</li><li>CrossFadeWidget</li><li>FaderWidget</li><li>ImageViewer</li><li>WidgetEditor</li><li>CommandPalette</li><li>BrushEdit</li><li>...</li></ul> <ul><li>WidgetMixin</li><li>QWidget</li></ul> Wizardprettyqt.widgets.wizard <ul><li><code>WizardMixin</code></li><li>QWizard</li></ul> ProxyStyleprettyqt.widgets.proxystyle <ul><li><code>HollowHandleStyle</code></li></ul> <ul><li>CommonStyleMixin</li><li>QProxyStyle</li></ul> RadioButtonprettyqt.widgets.radiobutton <ul><li>AbstractButtonMixin</li><li>QRadioButton</li></ul> StackedLayoutprettyqt.widgets.stackedlayout <ul><li>LayoutMixin</li><li>QStackedLayout</li></ul> DockWidgetprettyqt.widgets.dockwidget <ul><li>WidgetMixin</li><li>QDockWidget</li></ul> GraphicsSimpleTextItemprettyqt.widgets.graphicssimpletextitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsSimpleTextItem</li></ul> ColumnViewprettyqt.widgets.columnview <ul><li>AbstractItemViewMixin</li><li>QColumnView</li></ul> StyleOptionFocusRectprettyqt.widgets.styleoptionfocusrect <ul><li>StyleOptionMixin</li><li>QStyleOptionFocusRect</li></ul> GraphicsRotationprettyqt.widgets.graphicsrotation <ul><li>GraphicsTransformMixin</li><li>QGraphicsRotation</li></ul> GraphicsItemGroupprettyqt.widgets.graphicsitemgroup <ul><li>GraphicsItemMixin</li><li>QGraphicsItemGroup</li></ul> ButtonGroupprettyqt.widgets.buttongroup <ul><li>ObjectMixin</li><li>QButtonGroup</li></ul> Dialogprettyqt.widgets.dialog <ul><li>PopupInfo</li><li>TracebackDialog</li></ul> <ul><li>DialogMixin</li><li>QDialog</li></ul> DataWidgetMapperprettyqt.widgets.datawidgetmapper <ul><li>ObjectMixin</li><li>QDataWidgetMapper</li></ul> MessageBoxprettyqt.widgets.messagebox <ul><li>ErrorMessageBox</li></ul> <ul><li>DialogMixin</li><li>QMessageBox</li></ul> TableViewMixinprettyqt.widgets.tableview <ul><li>TableView</li><li><code>TableWidgetMixin</code></li></ul> <ul><li>AbstractItemViewMixin</li></ul> GraphicsEllipseItemprettyqt.widgets.graphicsellipseitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsEllipseItem</li></ul> GraphicsLayoutItemMixinprettyqt.widgets.graphicslayoutitem <ul><li>GraphicsLayoutItem</li><li>GraphicsLayoutMixin</li><li>GraphicsWidgetMixin</li></ul> <ul><li>object</li></ul> AbstractButtonprettyqt.widgets.abstractbutton <ul><li>AbstractButtonMixin</li><li>QAbstractButton</li></ul> FontComboBoxprettyqt.widgets.fontcombobox <ul><li>ComboBoxMixin</li><li>QFontComboBox</li></ul> BoxLayoutprettyqt.widgets.boxlayout <ul><li>MultiLineLayout</li></ul> <ul><li><code>BoxLayoutMixin</code></li><li>QBoxLayout</li></ul> AbstractButtonMixinprettyqt.widgets.abstractbuttonAbstract button widget base class, providing functionality common to buttons. <ul><li>AbstractButton</li><li>PushButtonMixin</li><li>ToolButton</li><li>RadioButton</li><li>CheckBox</li></ul> <ul><li>WidgetMixin</li></ul> ComboBoxprettyqt.widgets.combobox <ul><li>EnumComboBox</li><li>LocaleEdit</li><li>ColorComboBox</li><li>MultiComboBox</li></ul> <ul><li>ComboBoxMixin</li><li>QComboBox</li></ul> SpacerItemprettyqt.widgets.spaceritem <ul><li>LayoutItemMixin</li><li>QSpacerItem</li></ul> StyleOptionToolBoxprettyqt.widgets.styleoptiontoolbox <ul><li>StyleOptionMixin</li><li>QStyleOptionToolBox</li></ul> Scrollerprettyqt.widgets.scrollerEnables kinetic scrolling for any scrolling widget or graphics item. <ul><li>ObjectMixin</li></ul> GraphicsAnchorLayoutprettyqt.widgets.graphicsanchorlayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsAnchorLayout</li></ul> ListViewMixinprettyqt.widgets.listview <ul><li>ListView</li><li>ListWidget</li><li>UndoView</li><li>HelpIndexWidget</li></ul> <ul><li>AbstractItemViewMixin</li></ul> StyleOptionFrameprettyqt.widgets.styleoptionframe <ul><li>StyleOptionMixin</li><li>QStyleOptionFrame</li></ul> AbstractGraphicsShapeItemMixinprettyqt.widgets.abstractgraphicsshapeitem <ul><li>AbstractGraphicsShapeItem</li><li>GraphicsRectItem</li><li>GraphicsSimpleTextItem</li><li>GraphicsPolygonItem</li><li>GraphicsEllipseItem</li><li>GraphicsPathItem</li></ul> <ul><li>GraphicsItemMixin</li></ul> GraphicsScaleprettyqt.widgets.graphicsscale <ul><li>GraphicsTransformMixin</li><li>QGraphicsScale</li></ul> TapGestureprettyqt.widgets.tapgesture <ul><li>GestureMixin</li><li>QTapGesture</li></ul> WhatsThisprettyqt.widgets.whatsthis <ul><li>QWhatsThis</li></ul> GestureMixinprettyqt.widgets.gesture <ul><li>Gesture</li><li>TapGesture</li><li>TapAndHoldGesture</li><li>PanGesture</li><li>PinchGesture</li><li><code>SwipeGestureMixin</code></li></ul> <ul><li>ObjectMixin</li></ul> AbstractSliderprettyqt.widgets.abstractslider <ul><li>AbstractSliderMixin</li><li>QAbstractSlider</li></ul> GroupBoxprettyqt.widgets.groupbox <ul><li>OptionalWidget</li><li>FlagSelectionWidget</li><li>StringOrNumberWidget</li><li>SelectionWidget</li></ul> <ul><li>WidgetMixin</li><li>QGroupBox</li></ul> ToolButtonprettyqt.widgets.toolbutton <ul><li>BoolDictToolButton</li><li>EnumFlagWidget</li></ul> <ul><li>AbstractButtonMixin</li><li>QToolButton</li></ul> ErrorMessageprettyqt.widgets.errormessage <ul><li>DialogMixin</li><li>QErrorMessage</li></ul> ColorDialogprettyqt.widgets.colordialog <ul><li>DialogMixin</li><li>QColorDialog</li></ul> FileIconProviderprettyqt.widgets.fileiconprovider <ul><li>AbstractFileIconProviderMixin</li><li>QFileIconProvider</li></ul> TableWidgetprettyqt.widgets.tablewidget <ul><li><code>TableWidgetMixin</code></li><li>QTableWidget</li></ul> StyleOptionComplexprettyqt.widgets.styleoptioncomplex <ul><li>StyleOptionGroupBox</li><li>StyleOptionSpinBox</li><li>StyleOptionTitleBar</li><li>StyleOptionToolButton</li></ul> <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionComplex</li></ul> GraphicsEffectMixinprettyqt.widgets.graphicseffect <ul><li>GraphicsEffect</li><li>GraphicsBlurEffect</li><li>GraphicsColorizeEffect</li><li>GraphicsDropShadowEffect</li><li>GraphicsOpacityEffect</li></ul> <ul><li>ObjectMixin</li></ul> GraphicsLayoutItemprettyqt.widgets.graphicslayoutitem <ul><li>GraphicsLayoutItemMixin</li><li>QGraphicsLayoutItem</li></ul> CheckBoxprettyqt.widgets.checkbox <ul><li>MappedCheckBox</li></ul> <ul><li>AbstractButtonMixin</li><li>QCheckBox</li></ul> LineEditprettyqt.widgets.lineedit <ul><li>ListInput</li><li>IntLineEdit</li><li>FloatLineEdit</li><li>UrlLineEdit</li><li>StringListEdit</li></ul> <ul><li>WidgetMixin</li><li>QLineEdit</li></ul> WizardPageprettyqt.widgets.wizardpage <ul><li><code>WizardPageMixin</code></li><li>QWizardPage</li></ul> DoubleSpinBoxprettyqt.widgets.doublespinbox <ul><li>AbstractSpinBoxMixin</li><li>QDoubleSpinBox</li></ul> StyleMixinprettyqt.widgets.style <ul><li>Style</li><li>CommonStyleMixin</li></ul> <ul><li>ObjectMixin</li></ul> ToolBoxprettyqt.widgets.toolbox <ul><li>FrameMixin</li><li>QToolBox</li></ul> PushButtonMixinprettyqt.widgets.pushbutton <ul><li>PushButton</li><li>CommandLinkButton</li></ul> <ul><li>AbstractButtonMixin</li></ul> AbstractItemDelegateprettyqt.widgets.abstractitemdelegate <ul><li>AbstractItemDelegateMixin</li><li>QAbstractItemDelegate</li></ul> StyleOptionMenuItemprettyqt.widgets.styleoptionmenuitem <ul><li>StyleOptionMixin</li><li>QStyleOptionMenuItem</li></ul> TreeWidgetprettyqt.widgets.treewidget <ul><li><code>TreeWidgetMixin</code></li><li>QTreeWidget</li></ul> GraphicsPathItemprettyqt.widgets.graphicspathitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsPathItem</li></ul> GraphicsViewMixinprettyqt.widgets.graphicsview <ul><li>GraphicsView</li><li>ChartView</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> ListViewprettyqt.widgets.listview <ul><li>ListViewMixin</li><li>QListView</li></ul> ScrollBarprettyqt.widgets.scrollbar <ul><li>AnnotatedScrollBar</li><li>PreviewScrollBar</li><li>SmoothScrollBar</li></ul> <ul><li><code>ScrollBarMixin</code></li><li>QScrollBar</li></ul> Gestureprettyqt.widgets.gesture <ul><li>GestureMixin</li><li>QGesture</li></ul> Applicationprettyqt.widgets.application <ul><li><code>ApplicationMixin</code></li><li>QApplication</li></ul> ItemEditorCreatorBaseprettyqt.widgets.itemeditorcreatorbase <ul><li>QItemEditorCreatorBase</li></ul> Labelprettyqt.widgets.label <ul><li><code>CPAlphaShowLabel</code></li><li>ClickableLabel</li><li>IconWidget</li></ul> <ul><li>FrameMixin</li><li>QLabel</li></ul> FrameMixinprettyqt.widgets.frame <ul><li>Frame</li><li>AbstractScrollAreaMixin</li><li>Label</li><li>LCDNumber</li><li>ToolBox</li><li><code>SplitterMixin</code></li><li>StackedWidget</li></ul> <ul><li>WidgetMixin</li></ul> StyleOptionToolButtonprettyqt.widgets.styleoptiontoolbutton <ul><li>StyleOptionComplex</li><li>QStyleOptionToolButton</li></ul> StyleOptionComboBoxprettyqt.widgets.styleoptioncombobox <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionComboBox</li></ul> TreeViewprettyqt.widgets.treeview <ul><li>QObjectHierarchyTreeView</li><li>ScrollAreaTocWidget</li><li>FileTree</li></ul> <ul><li>TreeViewMixin</li><li>QTreeView</li></ul>"},{"location":"qt_modules/widgets/AbstractButton.html","title":"AbstractButton","text":"<p>Qt Base Class: QAbstractButton</p> <p>Signature: <code>QAbstractButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractButtonMixin</code>, <code>widgets.QAbstractButton</code></p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>class AbstractButton(AbstractButtonMixin, widgets.QAbstractButton):\npass\n</code></pre>"},{"location":"qt_modules/widgets/AbstractButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261133120[\"widgets.AbstractButton\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261100480 --&gt; 2103261133120\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259928016 --&gt; 2103261133120\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/AbstractButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool"},{"location":"qt_modules/widgets/AbstractButtonMixin.html","title":"AbstractButtonMixin","text":""},{"location":"qt_modules/widgets/AbstractButtonMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> <p>Abstract button widget base class, providing functionality common to buttons.</p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>class AbstractButtonMixin(widgets.WidgetMixin):\n\"\"\"Abstract button widget base class, providing functionality common to buttons.\"\"\"\ndef __bool__(self):\nreturn self.isChecked()\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the button.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef get_icon(self) -&gt; gui.Icon | None:\nicon = self.icon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_style_icon(\nself,\nicon: widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap,\nsize: datatypes.SizeType = 15,\n):\n\"\"\"Set theme icon for the button.\n        Args:\n            icon: icon to use\n            size: icon size\n        \"\"\"\nqicon = self.style().standardIcon(\nwidgets.style.STANDARD_PIXMAP.get_enum_value(icon), None, self\n)\nself.set_icon(qicon)\nself.setIconSize(datatypes.to_size(size))\ndef set_shortcut(self, shortcut: datatypes.KeySequenceType):\nself.setShortcut(datatypes.to_keysequence(shortcut))\ndef get_shortcut(self) -&gt; gui.KeySequence:\nreturn gui.KeySequence(\nself.shortcut().toString(), gui.KeySequence.SequenceFormat.PortableText\n)\ndef setText(self, text: str):\nif not self.objectName() and widgets.app().is_debug():\nself.setObjectName(text)\nsuper().setText(text)\ndef set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icon.\"\"\"\nself.setIconSize(datatypes.to_size(size))\ndef get_icon_size(self) -&gt; core.Size:\nreturn core.Size(self.iconSize())\ndef get_value(self) -&gt; bool:\nreturn self.isChecked()\ndef set_value(self, value: bool):\nself.setChecked(value)\n</code></pre> Name Children Inherits AbstractButtonprettyqt.widgets.abstractbutton <ul><li>AbstractButtonMixin</li><li>QAbstractButton</li></ul> PushButtonMixinprettyqt.widgets.pushbutton <ul><li>PushButton</li><li>CommandLinkButton</li></ul> <ul><li>AbstractButtonMixin</li></ul> ToolButtonprettyqt.widgets.toolbutton <ul><li>BoolDictToolButton</li><li>EnumFlagWidget</li></ul> <ul><li>AbstractButtonMixin</li><li>QToolButton</li></ul> RadioButtonprettyqt.widgets.radiobutton <ul><li>AbstractButtonMixin</li><li>QRadioButton</li></ul> CheckBoxprettyqt.widgets.checkbox <ul><li>MappedCheckBox</li></ul> <ul><li>AbstractButtonMixin</li><li>QCheckBox</li></ul>"},{"location":"qt_modules/widgets/AbstractButtonMixin.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the button.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractButtonMixin.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_icon_size","title":"<code>set_icon_size(size: datatypes.SizeType)</code>","text":"<p>Set size of the icon.</p> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icon.\"\"\"\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractButtonMixin.html#prettyqt.widgets.abstractbutton.AbstractButtonMixin.set_style_icon","title":"<code>set_style_icon(icon: widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap, size: datatypes.SizeType = 15)</code>","text":"<p>Set theme icon for the button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap</code> <p>icon to use</p> required <code>size</code> <code>datatypes.SizeType</code> <p>icon size</p> <code>15</code> Source code in <code>prettyqt\\widgets\\abstractbutton.py</code> <pre><code>def set_style_icon(\nself,\nicon: widgets.style.StandardPixmapStr | widgets.QStyle.StandardPixmap,\nsize: datatypes.SizeType = 15,\n):\n\"\"\"Set theme icon for the button.\n    Args:\n        icon: icon to use\n        size: icon size\n    \"\"\"\nqicon = self.style().standardIcon(\nwidgets.style.STANDARD_PIXMAP.get_enum_value(icon), None, self\n)\nself.set_icon(qicon)\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractButtonMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/AbstractGraphicsShapeItem.html","title":"AbstractGraphicsShapeItem","text":"<p>Qt Base Class: QAbstractGraphicsShapeItem</p> <p>Signature: <code>QAbstractGraphicsShapeItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractGraphicsShapeItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractGraphicsShapeItemMixin</code>, <code>widgets.QAbstractGraphicsShapeItem</code></p> <p>Common base for all path items.</p> Source code in <code>prettyqt\\widgets\\abstractgraphicsshapeitem.py</code> <pre><code>class AbstractGraphicsShapeItem(\nAbstractGraphicsShapeItemMixin, widgets.QAbstractGraphicsShapeItem\n):\n\"\"\"Common base for all path items.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/AbstractGraphicsShapeItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261143680[\"widgets.AbstractGraphicsShapeItem\"]\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259687280[\"QtWidgets.QAbstractGraphicsShapeItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261158080 --&gt; 2103261143680\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280\n  2103259687280 --&gt; 2103261143680\n  2103259670960 --&gt; 2103259687280\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/AbstractGraphicsShapeItemMixin.html","title":"AbstractGraphicsShapeItemMixin","text":""},{"location":"qt_modules/widgets/AbstractGraphicsShapeItemMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsItemMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractgraphicsshapeitem.py</code> <pre><code>class AbstractGraphicsShapeItemMixin(widgets.GraphicsItemMixin):\npass\n</code></pre> Name Children Inherits AbstractGraphicsShapeItemprettyqt.widgets.abstractgraphicsshapeitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QAbstractGraphicsShapeItem</li></ul> GraphicsRectItemprettyqt.widgets.graphicsrectitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsRectItem</li></ul> GraphicsSimpleTextItemprettyqt.widgets.graphicssimpletextitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsSimpleTextItem</li></ul> GraphicsPolygonItemprettyqt.widgets.graphicspolygonitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsPolygonItem</li></ul> GraphicsEllipseItemprettyqt.widgets.graphicsellipseitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsEllipseItem</li></ul> GraphicsPathItemprettyqt.widgets.graphicspathitem <ul><li>AbstractGraphicsShapeItemMixin</li><li>QGraphicsPathItem</li></ul>"},{"location":"qt_modules/widgets/AbstractGraphicsShapeItemMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280</code></pre>"},{"location":"qt_modules/widgets/AbstractItemDelegate.html","title":"AbstractItemDelegate","text":"<p>Qt Base Class: QAbstractItemDelegate</p> <p>Signature: <code>QAbstractItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractItemDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractItemDelegateMixin</code>, <code>QtWidgets.QAbstractItemDelegate</code></p> <p>Used to display and edit data items from a model.</p> Source code in <code>prettyqt\\widgets\\abstractitemdelegate.py</code> <pre><code>class AbstractItemDelegate(AbstractItemDelegateMixin, QtWidgets.QAbstractItemDelegate):\n\"\"\"Used to display and edit data items from a model.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261421008[\"widgets.AbstractItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261416208 --&gt; 2103261421008\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261070720 --&gt; 2103261421008\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/AbstractItemDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/widgets/AbstractItemDelegateMixin.html","title":"AbstractItemDelegateMixin","text":""},{"location":"qt_modules/widgets/AbstractItemDelegateMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractitemdelegate.py</code> <pre><code>class AbstractItemDelegateMixin(core.ObjectMixin):\npass\n# this pattern doesnt work for PySide6 yet (cant pass kwargs for class definition)\n# _registry = {}\n# def __init_subclass__(cls, identifier=None, **kwargs):\n#     super().__init_subclass__(**kwargs)\n#     if identifier is not None:\n#         logger.debug(f\"registering delegate {cls} {identifier!r}\")\n#         if (\n#             identifier in cls._registry\n#             and cls._registry[identifier].__name__ != cls.__name__\n#         ):\n#             raise NameError(f\"Delegate with id {identifier!r} already registered.\")\n#         cls._registry[identifier] = cls\n@staticmethod\ndef _data_for_index(\nindex: core.ModelIndex, role: constants.ItemDataRole = constants.USER_ROLE\n):\n# using index.data() sometimes casts stuff in PyQt6\nmodel = index.model()\ndata = model.data(index, role)\nreturn data\n</code></pre> Name Children Inherits AbstractItemDelegateprettyqt.widgets.abstractitemdelegate <ul><li>AbstractItemDelegateMixin</li><li>QAbstractItemDelegate</li></ul> ItemDelegateprettyqt.widgets.itemdelegate <ul><li>AbstractItemDelegateMixin</li><li>QItemDelegate</li></ul> StyledItemDelegateprettyqt.widgets.styleditemdelegate <ul><li>ButtonDelegate</li><li><code>BaseMarkupDelegate</code></li><li>IconDelegate</li><li>NoFocusDelegate</li><li>ProgressBarDelegate</li><li>RadioDelegate</li><li>RenderLinkDelegate</li><li>StarDelegate</li><li>EditorDelegate</li><li>WidgetDelegate</li><li>...</li></ul> <ul><li>AbstractItemDelegateMixin</li><li>QStyledItemDelegate</li></ul>"},{"location":"qt_modules/widgets/AbstractItemDelegateMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/AbstractItemView.html","title":"AbstractItemView","text":"<p>Qt Base Class: QAbstractItemView</p> <p>Signature: <code>QAbstractItemView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractItemView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractItemViewMixin</code>, <code>widgets.QAbstractItemView</code></p> <p>The basic functionality for item view classes.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>class AbstractItemView(AbstractItemViewMixin, widgets.QAbstractItemView):\n\"\"\"The basic functionality for item view classes.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261106240[\"widgets.AbstractItemView\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261136960 --&gt; 2103261106240\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259770800 --&gt; 2103261106240\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/AbstractItemView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html","title":"AbstractItemViewMixin","text":""},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>class AbstractItemViewMixin(widgets.AbstractScrollAreaMixin):\nmodel_changed = core.Signal(core.QAbstractItemModel)\ndef __init__(\nself,\n*args,\nhorizontal_scroll_mode=\"pixel\",\nvertical_scroll_mode=\"pixel\",\n**kwargs,\n):\nsuper().__init__(\n*args,\nhorizontal_scroll_mode=horizontal_scroll_mode,\nvertical_scroll_mode=vertical_scroll_mode,\n**kwargs,\n)\nfrom prettyqt.utils import proxifier\nself.proxifier = proxifier.Proxifier(self)\ndef __len__(self) -&gt; int:\nreturn model.rowCount() if (model := self.model()) is not None else 0\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"dragDropMode\": DRAG_DROP_MODE,\n\"horizontalScrollMode\": SCROLL_MODE,\n\"verticalScrollMode\": SCROLL_MODE,\n\"selectionMode\": SELECTION_MODE,\n\"selectionBehavior\": SELECTION_BEHAVIOR,\n\"defaultDropAction\": constants.DROP_ACTION,\n\"textElideMode\": constants.TEXT_ELIDE_MODE,\n\"editTriggers\": EDIT_TRIGGERS,\n}\nreturn maps\ndef selectAll(self):\n\"\"\"Override, we dont want to selectAll for too many items bc of performance.\"\"\"\nif self.model() is None:\nreturn\nif self.model().rowCount() * self.model().columnCount() &gt; 1_000_000:\nlogger.warning(\"Too many cells to select.\")\nreturn\nsuper().selectAll()\ndef set_model(self, model: core.QAbstractItemModel | None):\n\"\"\"Set the model of this View.\"\"\"\n# Delete old selection model explicitely, seems to help with memory usage.\nold_model = self.model()\nold_sel_model = self.selectionModel()\nif old_model is not None or model is not None:\nself.setModel(model)\nif model is not None:\n# always set a parent. PySide6 needs one for proxying.\nmodel.setParent(self)\nself.setSelectionModel(core.ItemSelectionModel(model))\nself.model_changed.emit(model)\n# if old_model:\n#     old_model.deleteLater()\n#     del old_model\nif old_sel_model:\nold_sel_model.deleteLater()\ndel old_sel_model\nreturn model\ndef set_model_for(self, data: Any):\n\"\"\"Set model for given data type.\n        Pass any data structure and an appropriate model will be chosen automatically.\n        Args:\n            data: data to choose model for.\n        \"\"\"\n# we import to collect the models\nfrom prettyqt import itemmodels  # noqa: F401\n# TODO: probably better to check models from external modules later\n# so we dont have to import everything even if not needed.\nif importlib.util.find_spec(\"pandas\") is not None:\nfrom prettyqt.qtpandas import pandasmodels  # noqa: F401\nfor Klass in classhelpers.get_subclasses(core.QAbstractItemModel):\nif (\n\"supports\" in Klass.__dict__\nand callable(Klass.supports)\nand Klass.supports(data)\nand Klass.__name__ != \"PythonObjectTreeModel\"\n):\nlogger.debug(f\"found model for data structure {data!r}\")\nbreak\nelse:\nraise TypeError(\"No suiting model found.\")\nmodel = Klass(data, parent=self)\nself.set_model(model)\ndef get_model(self, skip_proxies: bool = False) -&gt; core.QAbstractItemModel:\n\"\"\"Get current model of the ItemView.\n        Arguments:\n            skip_proxies: Whether to get current model or the non-proxy sourceModel.\n        \"\"\"\nmodel = self.model()\nif skip_proxies:\nwhile isinstance(model, core.QAbstractProxyModel):\nmodel = model.sourceModel()\nreturn model\ndef get_models(\nself, proxies_only: bool = False\n) -&gt; listdelegators.ListDelegator[core.QAbstractProxyModel]:\n\"\"\"Get a list of all (proxy) models connected to this view.\n        Arguments:\n            proxies_only: whether the non-proxy sourceModel should be included.\n        \"\"\"\nmodel = self.model()\nmodels = []\nwhile isinstance(model, core.QAbstractProxyModel):\nmodels.append(model)\nmodel = model.sourceModel()\nif (not proxies_only) and model is not None:\nmodels.append(model)\nreturn listdelegators.ListDelegator(models)\ndef set_current_index(\nself,\nindex: core.QModelIndex | tuple | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\n*,\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n\"\"\"Set current index.\n        Arguments:\n            index: Index to set.\n            operation: Whether to select, deselect or toggle the current state.\n            clear: Clear Whether to clear previously selected indexes.\n            current: Current selection will be updated.\n            expand: Whether to expand selection to whole column / row.\n        \"\"\"\nmatch index:\ncase None:\nself.selectionModel().setCurrentIndex(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\ncase tuple():\nindex = self.model().index(*index)\ncase core.QModelIndex():\npass\ncase _:\nraise ValueError(index)\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().setCurrentIndex(index, flag)\ndef select_index(\nself,\nindex: core.QModelIndex | tuple | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\n*,\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n# index = self.model().index(self._selected_index)\nmatch index:\ncase None:\nself.selectionModel().setCurrentIndex(\ncore.ModelIndex(), core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\ncase tuple():\nindex = self.model().index(*index)\ncase core.QModelIndex():\npass\ncase _:\nraise ValueError(index)\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().select(index, flag)\n# def move_selection(self, row_offset: int = 0, column_offset: int = 0):\n#     \"\"\"Move selection by an offset.\"\"\"\n#     for index in self.selectedIndexes():\n#         new_idx = self.model().index(\n#             index.row() + row_offset, index.column() + column_offset, index.parent()\n#         )\n#         if new_idx.isValid():\n#             self.set_current_index(new_idx, current=True, expand=\"rows\")\ndef move_row_selection(self, dy: int):\nfor row in self.selected_rows():\nnew_idx = self.model().index(row + dy, 0)\nif new_idx.isValid():\nself.set_current_index(new_idx, current=True, expand=\"rows\")\ndef set_delegate(\nself,\ndelegate: widgets.QAbstractItemDelegate | DelegateStr | None,\n*,\ncolumn: int | Sequence | None = None,\nrow: int | Sequence | None = None,\npersistent: bool = False,\n**kwargs: Any,\n):\n\"\"\"Set a item delegate for the view.\n        Arguments:\n            delegate: Delegate to set. Can also be the id of the delegate.\n            column: Column the delegate should be set for.\n            row: Row the column should be set for.\n            persistent: If True, open persistent editors for given area.\n            kwargs: Keyword args to pass to the Delegate ctor if delegate is set by id.\n        \"\"\"\nmatch delegate:\ncase widgets.QAbstractItemDelegate():\ndlg = delegate\n# case \"editor\":\n#     delegate = itemdelegates.EditorDelegate(parent=self, **kwargs)\n# case \"widget\":\n#     delegate = itemdelegates.WidgetDelegate(parent=self, **kwargs)\n# case \"html\":\n#     delegate = itemdelegates.HtmlItemDelegate(parent=self, **kwargs)\n# case \"button\":\n#     delegate = itemdelegates.ButtonDelegate(parent=self, **kwargs)\ncase str():\nKlass = classhelpers.get_class_for_id(\nwidgets.StyledItemDelegate, delegate\n)\ndlg = Klass(parent=self, **kwargs)\ncase None:\ndlg = widgets.StyledItemDelegate()\ncase _:\nraise ValueError(delegate)\nmatch column, row:\ncase int(), int():\nraise ValueError(\"Only set column or row, not both.\")\ncase Sequence(), None:\nfor i in column:\nself.set_delegate(delegate, column=i, row=row, persistent=persistent)\ncase int(), None:\nself.setItemDelegateForColumn(column, dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nindex = model.index(i, column)\nself.openPersistentEditor(index)\ncase None, Sequence():\nfor i in row:\nself.set_delegate(\ndelegate, column=column, row=i, persistent=persistent\n)\ncase None, int():\nself.setItemDelegateForRow(row, dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.columnCount()):\nself.openPersistentEditor(model.index(row, i))\ncase None, None:\nself.setItemDelegate(dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nfor j in range(model.columnCount()):\nself.openPersistentEditor(model.index(i, j))\nreturn dlg\ndef toggle_select_all(self):\n\"\"\"Select all items from list (deselect when all selected).\"\"\"\nif self.selectionModel() is None:\nreturn\nif self.selectionModel().hasSelection():\nself.clearSelection()\nelse:\nself.selectAll()\ndef set_table_color(self, color: str):\nwith self.edit_stylesheet() as ss:\nss.QHeaderView.section.backgroundColor.setValue(color)\ndef current_index(self) -&gt; core.QModelIndex | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex()\nreturn None\ndef current_data(self, role=constants.USER_ROLE):\nif (model := self.selectionModel()) is not None:\nidx = model.currentIndex()\nreturn idx.data(role)\ndef current_row(self) -&gt; int | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex().row()\nreturn None\ndef current_column(self) -&gt; int | None:\nif (model := self.selectionModel()) is not None:\nreturn model.currentIndex().column()\nreturn None\ndef selected_indexes(self) -&gt; listdelegators.ListDelegator[core.QModelIndex]:\n\"\"\"Return list of selected indexes in first row.\"\"\"\nindexes = (x for x in self.selectedIndexes() if x.column() == 0)\nindexes = sorted(indexes, key=lambda x: x.row())\nreturn listdelegators.ListDelegator(indexes)\ndef selected_names(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding item names.\"\"\"\nreturn (x.data(constants.NAME_ROLE) for x in self.selected_indexes())\ndef selected_rows(self) -&gt; Generator[int, None, None]:\n\"\"\"Return generator yielding row nums.\"\"\"\nreturn (x.row() for x in self.selected_indexes())\ndef selected_data(\nself, role: constants.ItemDataRole = constants.USER_ROLE\n) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding selected userData.\n        Arguments:\n            role: ItemRole to return data for.\n        \"\"\"\nreturn (x.data(role) for x in self.selected_indexes())\ndef setup_dragdrop_move(self):\nself.setDragEnabled(True)\nself.setAcceptDrops(True)\nself.setDragDropMode(self.DragDropMode.DragDrop)\nself.setDefaultDropAction(constants.MOVE_ACTION)\nself.setDropIndicatorShown(True)\ndef set_edit_triggers(self, *triggers: EditTriggerStr | None):\nitems = [\"none\" if t is None else t for t in triggers]\nflags = EDIT_TRIGGERS.merge_flags(items)\nself.setEditTriggers(flags)\ndef get_edit_triggers(self) -&gt; list[EditTriggerStr]:\nreturn EDIT_TRIGGERS.get_list(self.editTriggers())\ndef set_selection_behavior(\nself,\nbehavior: SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior,\n):\n\"\"\"Set selection behavior for given item view.\n        Arguments:\n            behavior: Selection behavior\n        \"\"\"\nself.setSelectionBehavior(SELECTION_BEHAVIOR.get_enum_value(behavior))\ndef get_selection_behavior(self) -&gt; SelectionBehaviourStr:\n\"\"\"Return current selection behavior.\n        Returns:\n            selection behavior\n        \"\"\"\nreturn SELECTION_BEHAVIOR.inverse[self.selectionBehavior()]\ndef get_drop_indicator_position(self) -&gt; DropIndicatorPositionStr:\n\"\"\"Return position of the drop indicator in relation to the closest item.\"\"\"\nreturn DROP_INDICATOR_POSITION.inverse[self.dropIndicatorPosition()]\ndef set_drag_drop_mode(\nself, mode: DragDropModeStr | widgets.QAbstractItemView.DragDropMode\n):\n\"\"\"Set drag-drop mode for given item view.\n        Args:\n            mode: drag-drop mode to use\n        \"\"\"\nself.setDragDropMode(DRAG_DROP_MODE.get_enum_value(mode))\ndef get_drag_drop_mode(self) -&gt; DragDropModeStr:\n\"\"\"Return current drag-drop mode.\"\"\"\nreturn DRAG_DROP_MODE.inverse[self.dragDropMode()]\ndef set_state(self, state: StateStr | widgets.QAbstractItemView.State):\n\"\"\"Set state for given item view.\n        Args:\n            state: state to use\n        \"\"\"\nself.setState(STATE.get_enum_value(state))\ndef get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\"\"\"\nreturn STATE.inverse[self.state()]\ndef set_selection_mode(\nself, mode: SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None\n):\n\"\"\"Set selection mode for given item view.\n        Args:\n            mode: selection mode to use\n        \"\"\"\nif mode is None:\nmode = \"none\"\nself.setSelectionMode(SELECTION_MODE.get_enum_value(mode))\ndef get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\ndef set_scroll_mode(self, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode):\n\"\"\"Set the scroll mode for both directions.\n        Args:\n            mode: mode to set\n        \"\"\"\nself.setHorizontalScrollMode(SCROLL_MODE.get_enum_value(mode))\nself.setVerticalScrollMode(SCROLL_MODE.get_enum_value(mode))\ndef set_horizontal_scroll_mode(\nself, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode\n):\n\"\"\"Set the horizontal scroll mode.\n        Args:\n            mode: mode to set\n        \"\"\"\nself.setHorizontalScrollMode(SCROLL_MODE.get_enum_value(mode))\ndef get_horizontal_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current horizontal scroll mode.\"\"\"\nreturn SCROLL_MODE.inverse[self.horizontalScrollMode()]\ndef set_vertical_scroll_mode(\nself, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode\n):\n\"\"\"Set the vertical scroll mode.\n        Args:\n            mode: mode to set\n        \"\"\"\nself.setVerticalScrollMode(SCROLL_MODE.get_enum_value(mode))\ndef get_vertical_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current vertical scroll mode.\"\"\"\nreturn SCROLL_MODE.inverse[self.verticalScrollMode()]\ndef num_selected(self) -&gt; int:\n\"\"\"Return amount of selected rows.\n        Returns:\n            amount of selected rows\n        \"\"\"\nif (model := self.selectionModel()) is not None:\nreturn len(model.selectedRows())\nreturn 0\ndef jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n        scrolls to column at given index\n        Args:\n            col_num: column to scroll to\n        \"\"\"\nif (model := self.model()) is not None:\nidx = model.index(0, col_num)\nself.scrollTo(idx)\ndef scroll_to_top(self):\n\"\"\"Override to use abstractitemview-way of scrolling to top.\"\"\"\nself.scrollToTop()\ndef scroll_to_bottom(self):\n\"\"\"Override to use abstractitemview-way of scrolling to bottom.\"\"\"\nself.scrollToBottom()\ndef select_last_row(self):\nidx = self.model().createIndex(self.model().rowCount() - 1, 0)\nself.setCurrentIndex(idx)\ndef select_first_row(self):\nidx = self.model().index(0, 0)\nself.set_current_index(idx, current=True, expand=\"rows\")\ndef scroll_to(\nself,\nindex: core.QModelIndex,\nmode: ScrollHintStr | widgets.QAbstractItemView.ScrollHint = \"ensure_visible\",\n):\nself.scrollTo(index, SCROLL_HINT.get_enum_value(mode))\ndef highlight_when_inactive(self):\n\"\"\"Highlight items when widget does not have focus.\"\"\"\np = self.get_palette()\np.highlight_inactive()\nself.setPalette(p)\ndef set_icon_size(self, size: datatypes.SizeType):\nself.setIconSize(datatypes.to_size(size))\ndef get_size_hint_for_column(self, col: int, row_limit: int = 25) -&gt; int:\n\"\"\"Get a size hint for given column by finding widest cell.\n        Arguments:\n            col: columnt to get size hint for.\n            row_limit: number of rows to check.\n        \"\"\"\nto_check = min(row_limit, self.model().rowCount())\nreturn max(\nself.sizeHintForIndex(self.model().index(row, col)).width()\nfor row in range(to_check)\n)\ndef sync_with(\nself,\ntable_to_sync: widgets.QAbstractItemView,\norientation: constants.OrientationStr | constants.Orientation,\n) -&gt; list[core.QMetaObject.Connection]:\norientation = constants.ORIENTATION.get_enum_value(orientation)\n\"\"\"Sync ItemView cell widths and scrollbars with another ItemView.\n        Arguments:\n            table_to_sync: Table to sync with\n            orientation: Whether to sync horizontal or vertical orientation.\n        \"\"\"\ndef _table_resized(col, _, new_size, table, orientation):\nif orientation == constants.HORIZONTAL:\ntable.setColumnWidth(col, new_size)\nelse:\ntable.setRowHeight(col, new_size)\n_table_1_resized = functools.partial(\n_table_resized, table=self, orientation=orientation\n)\n_table_2_resized = functools.partial(\n_table_resized, table=table_to_sync, orientation=orientation\n)\nif orientation == constants.VERTICAL:\nh1 = self.v_scrollbar.valueChanged.connect(table_to_sync.v_scrollbar.setValue)\nh2 = table_to_sync.v_scrollbar.valueChanged.connect(self.v_scrollbar.setValue)\nh3 = self.v_header.sectionResized.connect(_table_2_resized)\nh4 = table_to_sync.v_header.sectionResized.connect(_table_1_resized)\nelse:\nh1 = self.h_scrollbar.valueChanged.connect(table_to_sync.h_scrollbar.setValue)\nh2 = table_to_sync.h_scrollbar.valueChanged.connect(self.h_scrollbar.setValue)\nh3 = self.h_header.sectionResized.connect(_table_2_resized)\nh4 = table_to_sync.h_header.sectionResized.connect(_table_1_resized)\nreturn [h1, h2, h3, h4]\ndef get_visible_section_span(\nself, orientation: constants.OrientationStr | constants.Orientation\n) -&gt; tuple[int, int]:\n\"\"\"Get range of visible sections.\n        Arguments:\n            orientation: Whether to get section span for horizontal or vertical header.\n        \"\"\"\norientation = constants.ORIENTATION.get_enum_value(orientation)\ntop_left = core.QPoint(0, 0)\nbottom_right = self.viewport().rect().bottomRight()\nif orientation == constants.HORIZONTAL:\nstart = self.indexAt(top_left).column()\ncount = self.model().columnCount()\nend = self.indexAt(bottom_right).column()\nelse:\nstart = self.indexAt(top_left).row()\ncount = self.model().rowCount()\nend = self.indexAt(bottom_right).row()\nif count == 0:\nreturn (-1, -1)\nend = count if end == -1 else end + 1\nreturn (start, end)\n</code></pre> Name Children Inherits AbstractItemViewprettyqt.widgets.abstractitemview <ul><li>AbstractItemViewMixin</li><li>QAbstractItemView</li></ul> <code>HeaderViewMixin</code>prettyqt.widgets.headerview <ul><li>HeaderView</li></ul> <ul><li>AbstractItemViewMixin</li></ul> ColumnViewprettyqt.widgets.columnview <ul><li>AbstractItemViewMixin</li><li>QColumnView</li></ul> ListViewMixinprettyqt.widgets.listview <ul><li>ListView</li><li>ListWidget</li><li>UndoView</li><li>HelpIndexWidget</li></ul> <ul><li>AbstractItemViewMixin</li></ul> TreeViewMixinprettyqt.widgets.treeview <ul><li>TreeView</li><li><code>TreeWidgetMixin</code></li><li>HelpContentWidget</li></ul> <ul><li>AbstractItemViewMixin</li></ul> TableViewMixinprettyqt.widgets.tableview <ul><li>TableView</li><li><code>TableWidgetMixin</code></li></ul> <ul><li>AbstractItemViewMixin</li></ul>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.__init__","title":"<code>__init__(*args, horizontal_scroll_mode = 'pixel', vertical_scroll_mode = 'pixel', **kwargs)</code>","text":"Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def __init__(\nself,\n*args,\nhorizontal_scroll_mode=\"pixel\",\nvertical_scroll_mode=\"pixel\",\n**kwargs,\n):\nsuper().__init__(\n*args,\nhorizontal_scroll_mode=horizontal_scroll_mode,\nvertical_scroll_mode=vertical_scroll_mode,\n**kwargs,\n)\nfrom prettyqt.utils import proxifier\nself.proxifier = proxifier.Proxifier(self)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_drag_drop_mode","title":"<code>get_drag_drop_mode() -&gt; DragDropModeStr</code>","text":"<p>Return current drag-drop mode.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_drag_drop_mode(self) -&gt; DragDropModeStr:\n\"\"\"Return current drag-drop mode.\"\"\"\nreturn DRAG_DROP_MODE.inverse[self.dragDropMode()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_drop_indicator_position","title":"<code>get_drop_indicator_position() -&gt; DropIndicatorPositionStr</code>","text":"<p>Return position of the drop indicator in relation to the closest item.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_drop_indicator_position(self) -&gt; DropIndicatorPositionStr:\n\"\"\"Return position of the drop indicator in relation to the closest item.\"\"\"\nreturn DROP_INDICATOR_POSITION.inverse[self.dropIndicatorPosition()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_horizontal_scroll_mode","title":"<code>get_horizontal_scroll_mode() -&gt; ScrollModeStr</code>","text":"<p>Return current horizontal scroll mode.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_horizontal_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current horizontal scroll mode.\"\"\"\nreturn SCROLL_MODE.inverse[self.horizontalScrollMode()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_model","title":"<code>get_model(skip_proxies: bool = False) -&gt; core.QAbstractItemModel</code>","text":"<p>Get current model of the ItemView.</p> <p>Parameters:</p> Name Type Description Default <code>skip_proxies</code> <code>bool</code> <p>Whether to get current model or the non-proxy sourceModel.</p> <code>False</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_model(self, skip_proxies: bool = False) -&gt; core.QAbstractItemModel:\n\"\"\"Get current model of the ItemView.\n    Arguments:\n        skip_proxies: Whether to get current model or the non-proxy sourceModel.\n    \"\"\"\nmodel = self.model()\nif skip_proxies:\nwhile isinstance(model, core.QAbstractProxyModel):\nmodel = model.sourceModel()\nreturn model\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_models","title":"<code>get_models(proxies_only: bool = False) -&gt; listdelegators.ListDelegator[core.QAbstractProxyModel]</code>","text":"<p>Get a list of all (proxy) models connected to this view.</p> <p>Parameters:</p> Name Type Description Default <code>proxies_only</code> <code>bool</code> <p>whether the non-proxy sourceModel should be included.</p> <code>False</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_models(\nself, proxies_only: bool = False\n) -&gt; listdelegators.ListDelegator[core.QAbstractProxyModel]:\n\"\"\"Get a list of all (proxy) models connected to this view.\n    Arguments:\n        proxies_only: whether the non-proxy sourceModel should be included.\n    \"\"\"\nmodel = self.model()\nmodels = []\nwhile isinstance(model, core.QAbstractProxyModel):\nmodels.append(model)\nmodel = model.sourceModel()\nif (not proxies_only) and model is not None:\nmodels.append(model)\nreturn listdelegators.ListDelegator(models)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_selection_behavior","title":"<code>get_selection_behavior() -&gt; SelectionBehaviourStr</code>","text":"<p>Return current selection behavior.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_selection_behavior(self) -&gt; SelectionBehaviourStr:\n\"\"\"Return current selection behavior.\n    Returns:\n        selection behavior\n    \"\"\"\nreturn SELECTION_BEHAVIOR.inverse[self.selectionBehavior()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_selection_mode","title":"<code>get_selection_mode() -&gt; SelectionModeStr</code>","text":"<p>Return current selection mode.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_size_hint_for_column","title":"<code>get_size_hint_for_column(col: int, row_limit: int = 25) -&gt; int</code>","text":"<p>Get a size hint for given column by finding widest cell.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>columnt to get size hint for.</p> required <code>row_limit</code> <code>int</code> <p>number of rows to check.</p> <code>25</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_size_hint_for_column(self, col: int, row_limit: int = 25) -&gt; int:\n\"\"\"Get a size hint for given column by finding widest cell.\n    Arguments:\n        col: columnt to get size hint for.\n        row_limit: number of rows to check.\n    \"\"\"\nto_check = min(row_limit, self.model().rowCount())\nreturn max(\nself.sizeHintForIndex(self.model().index(row, col)).width()\nfor row in range(to_check)\n)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_vertical_scroll_mode","title":"<code>get_vertical_scroll_mode() -&gt; ScrollModeStr</code>","text":"<p>Return current vertical scroll mode.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_vertical_scroll_mode(self) -&gt; ScrollModeStr:\n\"\"\"Return current vertical scroll mode.\"\"\"\nreturn SCROLL_MODE.inverse[self.verticalScrollMode()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.get_visible_section_span","title":"<code>get_visible_section_span(orientation: constants.OrientationStr | constants.Orientation) -&gt; tuple[int, int]</code>","text":"<p>Get range of visible sections.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>Whether to get section span for horizontal or vertical header.</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def get_visible_section_span(\nself, orientation: constants.OrientationStr | constants.Orientation\n) -&gt; tuple[int, int]:\n\"\"\"Get range of visible sections.\n    Arguments:\n        orientation: Whether to get section span for horizontal or vertical header.\n    \"\"\"\norientation = constants.ORIENTATION.get_enum_value(orientation)\ntop_left = core.QPoint(0, 0)\nbottom_right = self.viewport().rect().bottomRight()\nif orientation == constants.HORIZONTAL:\nstart = self.indexAt(top_left).column()\ncount = self.model().columnCount()\nend = self.indexAt(bottom_right).column()\nelse:\nstart = self.indexAt(top_left).row()\ncount = self.model().rowCount()\nend = self.indexAt(bottom_right).row()\nif count == 0:\nreturn (-1, -1)\nend = count if end == -1 else end + 1\nreturn (start, end)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.highlight_when_inactive","title":"<code>highlight_when_inactive()</code>","text":"<p>Highlight items when widget does not have focus.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def highlight_when_inactive(self):\n\"\"\"Highlight items when widget does not have focus.\"\"\"\np = self.get_palette()\np.highlight_inactive()\nself.setPalette(p)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.jump_to_column","title":"<code>jump_to_column(col_num: int)</code>","text":"<p>Make sure column at given index is visible.</p> <p>scrolls to column at given index</p> <p>Parameters:</p> Name Type Description Default <code>col_num</code> <code>int</code> <p>column to scroll to</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def jump_to_column(self, col_num: int):\n\"\"\"Make sure column at given index is visible.\n    scrolls to column at given index\n    Args:\n        col_num: column to scroll to\n    \"\"\"\nif (model := self.model()) is not None:\nidx = model.index(0, col_num)\nself.scrollTo(idx)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.num_selected","title":"<code>num_selected() -&gt; int</code>","text":"<p>Return amount of selected rows.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def num_selected(self) -&gt; int:\n\"\"\"Return amount of selected rows.\n    Returns:\n        amount of selected rows\n    \"\"\"\nif (model := self.selectionModel()) is not None:\nreturn len(model.selectedRows())\nreturn 0\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to_bottom","title":"<code>scroll_to_bottom()</code>","text":"<p>Override to use abstractitemview-way of scrolling to bottom.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to_bottom(self):\n\"\"\"Override to use abstractitemview-way of scrolling to bottom.\"\"\"\nself.scrollToBottom()\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.scroll_to_top","title":"<code>scroll_to_top()</code>","text":"<p>Override to use abstractitemview-way of scrolling to top.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def scroll_to_top(self):\n\"\"\"Override to use abstractitemview-way of scrolling to top.\"\"\"\nself.scrollToTop()\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selectAll","title":"<code>selectAll()</code>","text":"<p>Override, we dont want to selectAll for too many items bc of performance.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selectAll(self):\n\"\"\"Override, we dont want to selectAll for too many items bc of performance.\"\"\"\nif self.model() is None:\nreturn\nif self.model().rowCount() * self.model().columnCount() &gt; 1_000_000:\nlogger.warning(\"Too many cells to select.\")\nreturn\nsuper().selectAll()\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_data","title":"<code>selected_data(role: constants.ItemDataRole = constants.USER_ROLE) -&gt; Generator[Any, None, None]</code>","text":"<p>Return generator yielding selected userData.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>constants.ItemDataRole</code> <p>ItemRole to return data for.</p> <code>constants.USER_ROLE</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_data(\nself, role: constants.ItemDataRole = constants.USER_ROLE\n) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding selected userData.\n    Arguments:\n        role: ItemRole to return data for.\n    \"\"\"\nreturn (x.data(role) for x in self.selected_indexes())\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_indexes","title":"<code>selected_indexes() -&gt; listdelegators.ListDelegator[core.QModelIndex]</code>","text":"<p>Return list of selected indexes in first row.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_indexes(self) -&gt; listdelegators.ListDelegator[core.QModelIndex]:\n\"\"\"Return list of selected indexes in first row.\"\"\"\nindexes = (x for x in self.selectedIndexes() if x.column() == 0)\nindexes = sorted(indexes, key=lambda x: x.row())\nreturn listdelegators.ListDelegator(indexes)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_names","title":"<code>selected_names() -&gt; Generator[Any, None, None]</code>","text":"<p>Return generator yielding item names.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_names(self) -&gt; Generator[Any, None, None]:\n\"\"\"Return generator yielding item names.\"\"\"\nreturn (x.data(constants.NAME_ROLE) for x in self.selected_indexes())\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.selected_rows","title":"<code>selected_rows() -&gt; Generator[int, None, None]</code>","text":"<p>Return generator yielding row nums.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def selected_rows(self) -&gt; Generator[int, None, None]:\n\"\"\"Return generator yielding row nums.\"\"\"\nreturn (x.row() for x in self.selected_indexes())\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_current_index","title":"<code>set_current_index(index: core.QModelIndex | tuple | None, operation: Literal['select', 'deselect', 'toggle'] = 'select', *, clear: bool = True, current: bool = False, expand: Literal['rows', 'columns'] | None = None)</code>","text":"<p>Set current index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>core.QModelIndex | tuple | None</code> <p>Index to set.</p> required <code>operation</code> <code>Literal['select', 'deselect', 'toggle']</code> <p>Whether to select, deselect or toggle the current state.</p> <code>'select'</code> <code>clear</code> <code>bool</code> <p>Clear Whether to clear previously selected indexes.</p> <code>True</code> <code>current</code> <code>bool</code> <p>Current selection will be updated.</p> <code>False</code> <code>expand</code> <code>Literal['rows', 'columns'] | None</code> <p>Whether to expand selection to whole column / row.</p> <code>None</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_current_index(\nself,\nindex: core.QModelIndex | tuple | None,\noperation: Literal[\"select\", \"deselect\", \"toggle\"] = \"select\",\n*,\nclear: bool = True,\ncurrent: bool = False,\nexpand: Literal[\"rows\", \"columns\"] | None = None,\n):\n\"\"\"Set current index.\n    Arguments:\n        index: Index to set.\n        operation: Whether to select, deselect or toggle the current state.\n        clear: Clear Whether to clear previously selected indexes.\n        current: Current selection will be updated.\n        expand: Whether to expand selection to whole column / row.\n    \"\"\"\nmatch index:\ncase None:\nself.selectionModel().setCurrentIndex(\nindex, core.ItemSelectionModel.SelectionFlag.Clear\n)\nreturn\ncase tuple():\nindex = self.model().index(*index)\ncase core.QModelIndex():\npass\ncase _:\nraise ValueError(index)\nmatch operation:\ncase \"select\":\nflag = core.ItemSelectionModel.SelectionFlag.Select\ncase \"deselect\":\nflag = core.ItemSelectionModel.SelectionFlag.Deselect\ncase \"toggle\":\nflag = core.ItemSelectionModel.SelectionFlag.Toggle\ncase _:\nraise ValueError(operation)\nif clear:\nflag |= core.ItemSelectionModel.SelectionFlag.Clear\nif current:\nflag |= core.ItemSelectionModel.SelectionFlag.Current\nmatch expand:\ncase \"rows\":\nflag |= core.ItemSelectionModel.SelectionFlag.Rows\ncase \"columns\":\nflag |= core.ItemSelectionModel.SelectionFlag.Columns\ncase None:\npass\ncase _:\nraise ValueError(expand)\nself.selectionModel().setCurrentIndex(index, flag)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_delegate","title":"<code>set_delegate(delegate: widgets.QAbstractItemDelegate | DelegateStr | None, *, column: int | Sequence | None = None, row: int | Sequence | None = None, persistent: bool = False, **kwargs: Any)</code>","text":"<p>Set a item delegate for the view.</p> <p>Parameters:</p> Name Type Description Default <code>delegate</code> <code>widgets.QAbstractItemDelegate | DelegateStr | None</code> <p>Delegate to set. Can also be the id of the delegate.</p> required <code>column</code> <code>int | Sequence | None</code> <p>Column the delegate should be set for.</p> <code>None</code> <code>row</code> <code>int | Sequence | None</code> <p>Row the column should be set for.</p> <code>None</code> <code>persistent</code> <code>bool</code> <p>If True, open persistent editors for given area.</p> <code>False</code> <code>kwargs</code> <code>Any</code> <p>Keyword args to pass to the Delegate ctor if delegate is set by id.</p> <code>{}</code> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_delegate(\nself,\ndelegate: widgets.QAbstractItemDelegate | DelegateStr | None,\n*,\ncolumn: int | Sequence | None = None,\nrow: int | Sequence | None = None,\npersistent: bool = False,\n**kwargs: Any,\n):\n\"\"\"Set a item delegate for the view.\n    Arguments:\n        delegate: Delegate to set. Can also be the id of the delegate.\n        column: Column the delegate should be set for.\n        row: Row the column should be set for.\n        persistent: If True, open persistent editors for given area.\n        kwargs: Keyword args to pass to the Delegate ctor if delegate is set by id.\n    \"\"\"\nmatch delegate:\ncase widgets.QAbstractItemDelegate():\ndlg = delegate\n# case \"editor\":\n#     delegate = itemdelegates.EditorDelegate(parent=self, **kwargs)\n# case \"widget\":\n#     delegate = itemdelegates.WidgetDelegate(parent=self, **kwargs)\n# case \"html\":\n#     delegate = itemdelegates.HtmlItemDelegate(parent=self, **kwargs)\n# case \"button\":\n#     delegate = itemdelegates.ButtonDelegate(parent=self, **kwargs)\ncase str():\nKlass = classhelpers.get_class_for_id(\nwidgets.StyledItemDelegate, delegate\n)\ndlg = Klass(parent=self, **kwargs)\ncase None:\ndlg = widgets.StyledItemDelegate()\ncase _:\nraise ValueError(delegate)\nmatch column, row:\ncase int(), int():\nraise ValueError(\"Only set column or row, not both.\")\ncase Sequence(), None:\nfor i in column:\nself.set_delegate(delegate, column=i, row=row, persistent=persistent)\ncase int(), None:\nself.setItemDelegateForColumn(column, dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nindex = model.index(i, column)\nself.openPersistentEditor(index)\ncase None, Sequence():\nfor i in row:\nself.set_delegate(\ndelegate, column=column, row=i, persistent=persistent\n)\ncase None, int():\nself.setItemDelegateForRow(row, dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.columnCount()):\nself.openPersistentEditor(model.index(row, i))\ncase None, None:\nself.setItemDelegate(dlg)\nif persistent:\nmodel = self.model()\nfor i in range(model.rowCount()):\nfor j in range(model.columnCount()):\nself.openPersistentEditor(model.index(i, j))\nreturn dlg\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_drag_drop_mode","title":"<code>set_drag_drop_mode(mode: DragDropModeStr | widgets.QAbstractItemView.DragDropMode)</code>","text":"<p>Set drag-drop mode for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>DragDropModeStr | widgets.QAbstractItemView.DragDropMode</code> <p>drag-drop mode to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_drag_drop_mode(\nself, mode: DragDropModeStr | widgets.QAbstractItemView.DragDropMode\n):\n\"\"\"Set drag-drop mode for given item view.\n    Args:\n        mode: drag-drop mode to use\n    \"\"\"\nself.setDragDropMode(DRAG_DROP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_horizontal_scroll_mode","title":"<code>set_horizontal_scroll_mode(mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode)</code>","text":"<p>Set the horizontal scroll mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr | widgets.QAbstractItemView.ScrollMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_horizontal_scroll_mode(\nself, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode\n):\n\"\"\"Set the horizontal scroll mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setHorizontalScrollMode(SCROLL_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_model","title":"<code>set_model(model: core.QAbstractItemModel | None)</code>","text":"<p>Set the model of this View.</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_model(self, model: core.QAbstractItemModel | None):\n\"\"\"Set the model of this View.\"\"\"\n# Delete old selection model explicitely, seems to help with memory usage.\nold_model = self.model()\nold_sel_model = self.selectionModel()\nif old_model is not None or model is not None:\nself.setModel(model)\nif model is not None:\n# always set a parent. PySide6 needs one for proxying.\nmodel.setParent(self)\nself.setSelectionModel(core.ItemSelectionModel(model))\nself.model_changed.emit(model)\n# if old_model:\n#     old_model.deleteLater()\n#     del old_model\nif old_sel_model:\nold_sel_model.deleteLater()\ndel old_sel_model\nreturn model\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_model_for","title":"<code>set_model_for(data: Any)</code>","text":"<p>Set model for given data type.</p> <p>Pass any data structure and an appropriate model will be chosen automatically.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>data to choose model for.</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_model_for(self, data: Any):\n\"\"\"Set model for given data type.\n    Pass any data structure and an appropriate model will be chosen automatically.\n    Args:\n        data: data to choose model for.\n    \"\"\"\n# we import to collect the models\nfrom prettyqt import itemmodels  # noqa: F401\n# TODO: probably better to check models from external modules later\n# so we dont have to import everything even if not needed.\nif importlib.util.find_spec(\"pandas\") is not None:\nfrom prettyqt.qtpandas import pandasmodels  # noqa: F401\nfor Klass in classhelpers.get_subclasses(core.QAbstractItemModel):\nif (\n\"supports\" in Klass.__dict__\nand callable(Klass.supports)\nand Klass.supports(data)\nand Klass.__name__ != \"PythonObjectTreeModel\"\n):\nlogger.debug(f\"found model for data structure {data!r}\")\nbreak\nelse:\nraise TypeError(\"No suiting model found.\")\nmodel = Klass(data, parent=self)\nself.set_model(model)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_scroll_mode","title":"<code>set_scroll_mode(mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode)</code>","text":"<p>Set the scroll mode for both directions.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr | widgets.QAbstractItemView.ScrollMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_scroll_mode(self, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode):\n\"\"\"Set the scroll mode for both directions.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setHorizontalScrollMode(SCROLL_MODE.get_enum_value(mode))\nself.setVerticalScrollMode(SCROLL_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_selection_behavior","title":"<code>set_selection_behavior(behavior: SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior)</code>","text":"<p>Set selection behavior for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>behavior</code> <code>SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior</code> <p>Selection behavior</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_selection_behavior(\nself,\nbehavior: SelectionBehaviourStr | widgets.QAbstractItemView.SelectionBehavior,\n):\n\"\"\"Set selection behavior for given item view.\n    Arguments:\n        behavior: Selection behavior\n    \"\"\"\nself.setSelectionBehavior(SELECTION_BEHAVIOR.get_enum_value(behavior))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_selection_mode","title":"<code>set_selection_mode(mode: SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None)</code>","text":"<p>Set selection mode for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None</code> <p>selection mode to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_selection_mode(\nself, mode: SelectionModeStr | widgets.QAbstractItemView.SelectionMode | None\n):\n\"\"\"Set selection mode for given item view.\n    Args:\n        mode: selection mode to use\n    \"\"\"\nif mode is None:\nmode = \"none\"\nself.setSelectionMode(SELECTION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_state","title":"<code>set_state(state: StateStr | widgets.QAbstractItemView.State)</code>","text":"<p>Set state for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>StateStr | widgets.QAbstractItemView.State</code> <p>state to use</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_state(self, state: StateStr | widgets.QAbstractItemView.State):\n\"\"\"Set state for given item view.\n    Args:\n        state: state to use\n    \"\"\"\nself.setState(STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.set_vertical_scroll_mode","title":"<code>set_vertical_scroll_mode(mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode)</code>","text":"<p>Set the vertical scroll mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ScrollModeStr | widgets.QAbstractItemView.ScrollMode</code> <p>mode to set</p> required Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def set_vertical_scroll_mode(\nself, mode: ScrollModeStr | widgets.QAbstractItemView.ScrollMode\n):\n\"\"\"Set the vertical scroll mode.\n    Args:\n        mode: mode to set\n    \"\"\"\nself.setVerticalScrollMode(SCROLL_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#prettyqt.widgets.abstractitemview.AbstractItemViewMixin.toggle_select_all","title":"<code>toggle_select_all()</code>","text":"<p>Select all items from list (deselect when all selected).</p> Source code in <code>prettyqt\\widgets\\abstractitemview.py</code> <pre><code>def toggle_select_all(self):\n\"\"\"Select all items from list (deselect when all selected).\"\"\"\nif self.selectionModel() is None:\nreturn\nif self.selectionModel().hasSelection():\nself.clearSelection()\nelse:\nself.selectAll()\n</code></pre>"},{"location":"qt_modules/widgets/AbstractItemViewMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollArea.html","title":"AbstractScrollArea","text":"<p>Qt Base Class: QAbstractScrollArea</p> <p>Signature: <code>QAbstractScrollArea(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractScrollArea.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractScrollAreaMixin</code>, <code>widgets.QAbstractScrollArea</code></p> <p>Scrolling area with on-demand scroll bars.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>class AbstractScrollArea(AbstractScrollAreaMixin, widgets.QAbstractScrollArea):\n\"\"\"Scrolling area with on-demand scroll bars.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollArea.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261132160[\"widgets.AbstractScrollArea\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261131200 --&gt; 2103261132160\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259751600 --&gt; 2103261132160\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollArea.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html","title":"AbstractScrollAreaMixin","text":""},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.FrameMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>class AbstractScrollAreaMixin(widgets.FrameMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setHorizontalScrollBar(widgets.ScrollBar(parent=self))\nself.setVerticalScrollBar(widgets.ScrollBar(parent=self))\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"horizontalScrollBarPolicy\": constants.SCROLLBAR_POLICY,\n\"sizeAdjustPolicy\": SIZE_ADJUST_POLICY,\n\"verticalScrollBarPolicy\": constants.SCROLLBAR_POLICY,\n}\nreturn maps\n@property\ndef h_scrollbar(self) -&gt; widgets.ScrollBar:\nreturn self.horizontalScrollBar()\n@h_scrollbar.setter\ndef h_scrollbar(self, scrollbar: widgets.ScrollBar):\nself.setHorizontalScrollBar(scrollbar)\n@property\ndef v_scrollbar(self) -&gt; widgets.ScrollBar:\nreturn self.verticalScrollBar()\n@v_scrollbar.setter\ndef v_scrollbar(self, scrollbar: widgets.ScrollBar):\nself.setVerticalScrollBar(scrollbar)\ndef scroll_by_pixels(self, x: int = 0, y: int = 0):\nnew_x = self.h_scrollbar.value() + x\nx_val = max(min(new_x, self.h_scrollbar.maximum()), self.h_scrollbar.minimum())\nnew_y = self.h_scrollbar.value() + y\ny_val = max(min(new_y, self.v_scrollbar.maximum()), self.v_scrollbar.minimum())\nself.h_scrollbar.setValue(x_val)\nself.v_scrollbar.setValue(y_val)\ndef set_size_adjust_policy(self, policy: SizeAdjustPolicyStr | area.SizeAdjustPolicy):\n\"\"\"Set size adjust policy.\n        Args:\n            policy: size adjust policy to use\n        \"\"\"\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY.get_enum_value(policy))\ndef get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n        Returns:\n            size adjust policy\n        \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\ndef set_scrollbar_smooth(\nself,\nvalue: bool = True,\nanimation_duration: int = 500,\neasing: core.easingcurve.TypeStr | core.QEasingCurve.Type = \"out_cubic\",\n):\nfrom prettyqt import custom_widgets\nif value:\nself.h_scrollbar = custom_widgets.SmoothScrollBar(\n\"horizontal\",\nparent=self,\nanimation_duration=animation_duration,\neasing=easing,\n)\nself.v_scrollbar = custom_widgets.SmoothScrollBar(\n\"vertical\",\nparent=self,\nanimation_duration=animation_duration,\neasing=easing,\n)\nelse:\nself.h_scrollbar = widgets.ScrollBar(parent=self)\nself.v_scrollbar = widgets.ScrollBar(parent=self)\ndef set_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the policy for both scrollbars.\n        Args:\n            mode: visibilty to set\n        \"\"\"\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\ndef set_horizontal_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the horizontal scrollbar visibility.\n        Args:\n            mode: visibilty to set\n        \"\"\"\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\ndef get_horizontal_scrollbar_policy(self) -&gt; constants.ScrollBarPolicyStr:\nreturn constants.SCROLLBAR_POLICY.inverse[self.horizontalScrollBarPolicy()]\ndef set_vertical_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the vertical scrollbar visibility.\n        Args:\n            mode: visibilty to set\n        \"\"\"\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\ndef get_vertical_scrollbar_policy(self) -&gt; constants.ScrollBarPolicyStr:\nreturn constants.SCROLLBAR_POLICY.inverse[self.verticalScrollBarPolicy()]\ndef set_scrollbar_width(self, width: int):\n\"\"\"Set the width for both scrollbars.\n        Args:\n            width: width in pixels\n        \"\"\"\nself.set_horizontal_scrollbar_width(width)\nself.set_vertical_scrollbar_width(width)\ndef set_horizontal_scrollbar_width(self, width: int):\n\"\"\"Set the horizontal scrollbar width.\n        Args:\n            width: width in pixels\n        \"\"\"\nwith self.h_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\ndef set_vertical_scrollbar_width(self, width: int):\n\"\"\"Set the vertical scrollbar width.\n        Args:\n            width: width in pixels\n        \"\"\"\nwith self.v_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\ndef scroll_to_top(self):\n\"\"\"Scroll to the top of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_min()\ndef scroll_to_bottom(self):\n\"\"\"Scroll to the bottom of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_max()\ndef set_viewport_margins(self, margins: int):\nself.setViewportMargins(margins, margins, margins, margins)\ndef add_scrollbar_widget(\nself,\nwidget: widgets.QWidget,\nalignment: constants.AlignmentStr | constants.AlignmentFlag,\n):\nalignment = constants.ALIGNMENTS.get_enum_value(alignment)\nself.addScrollBarWidget(widget, alignment)\n</code></pre> Name Children Inherits AbstractScrollAreaprettyqt.widgets.abstractscrollarea <ul><li>AbstractScrollAreaMixin</li><li>QAbstractScrollArea</li></ul> AbstractItemViewMixinprettyqt.widgets.abstractitemview <ul><li>AbstractItemView</li><li><code>HeaderViewMixin</code></li><li>ColumnView</li><li>ListViewMixin</li><li>TreeViewMixin</li><li>TableViewMixin</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> ScrollAreaprettyqt.widgets.scrollarea <ul><li>AbstractScrollAreaMixin</li><li>QScrollArea</li></ul> GraphicsViewMixinprettyqt.widgets.graphicsview <ul><li>GraphicsView</li><li>ChartView</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> MdiAreaprettyqt.widgets.mdiarea <ul><li>AbstractScrollAreaMixin</li><li>QMdiArea</li></ul> TextEditMixinprettyqt.widgets.textedit <ul><li>TextEdit</li><li>TextBrowser</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> PlainTextEditMixinprettyqt.widgets.plaintextedit <ul><li>PlainTextEdit</li></ul> <ul><li>AbstractScrollAreaMixin</li></ul> PdfViewprettyqt.pdfwidgets.pdfview <ul><li>AbstractScrollAreaMixin</li><li>QPdfView</li></ul>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.get_size_adjust_policy","title":"<code>get_size_adjust_policy() -&gt; SizeAdjustPolicyStr</code>","text":"<p>Return size adjust policy.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n    Returns:\n        size adjust policy\n    \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_to_bottom","title":"<code>scroll_to_bottom()</code>","text":"<p>Scroll to the bottom of the scroll area.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_to_bottom(self):\n\"\"\"Scroll to the bottom of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_max()\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.scroll_to_top","title":"<code>scroll_to_top()</code>","text":"<p>Scroll to the top of the scroll area.</p> Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def scroll_to_top(self):\n\"\"\"Scroll to the top of the scroll area.\"\"\"\nself.verticalScrollBar().scroll_to_min()\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_horizontal_scrollbar_policy","title":"<code>set_horizontal_scrollbar_policy(mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy)</code>","text":"<p>Set the horizontal scrollbar visibility.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr | constants.ScrollBarPolicy</code> <p>visibilty to set</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_horizontal_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the horizontal scrollbar visibility.\n    Args:\n        mode: visibilty to set\n    \"\"\"\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY[mode])\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_horizontal_scrollbar_width","title":"<code>set_horizontal_scrollbar_width(width: int)</code>","text":"<p>Set the horizontal scrollbar width.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_horizontal_scrollbar_width(self, width: int):\n\"\"\"Set the horizontal scrollbar width.\n    Args:\n        width: width in pixels\n    \"\"\"\nwith self.h_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_policy","title":"<code>set_scrollbar_policy(mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy)</code>","text":"<p>Set the policy for both scrollbars.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr | constants.ScrollBarPolicy</code> <p>visibilty to set</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the policy for both scrollbars.\n    Args:\n        mode: visibilty to set\n    \"\"\"\nself.setHorizontalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_scrollbar_width","title":"<code>set_scrollbar_width(width: int)</code>","text":"<p>Set the width for both scrollbars.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_scrollbar_width(self, width: int):\n\"\"\"Set the width for both scrollbars.\n    Args:\n        width: width in pixels\n    \"\"\"\nself.set_horizontal_scrollbar_width(width)\nself.set_vertical_scrollbar_width(width)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_size_adjust_policy","title":"<code>set_size_adjust_policy(policy: SizeAdjustPolicyStr | area.SizeAdjustPolicy)</code>","text":"<p>Set size adjust policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizeAdjustPolicyStr | area.SizeAdjustPolicy</code> <p>size adjust policy to use</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_size_adjust_policy(self, policy: SizeAdjustPolicyStr | area.SizeAdjustPolicy):\n\"\"\"Set size adjust policy.\n    Args:\n        policy: size adjust policy to use\n    \"\"\"\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_vertical_scrollbar_policy","title":"<code>set_vertical_scrollbar_policy(mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy)</code>","text":"<p>Set the vertical scrollbar visibility.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ScrollBarPolicyStr | constants.ScrollBarPolicy</code> <p>visibilty to set</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_vertical_scrollbar_policy(\nself, mode: constants.ScrollBarPolicyStr | constants.ScrollBarPolicy\n):\n\"\"\"Set the vertical scrollbar visibility.\n    Args:\n        mode: visibilty to set\n    \"\"\"\nself.setVerticalScrollBarPolicy(constants.SCROLLBAR_POLICY.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#prettyqt.widgets.abstractscrollarea.AbstractScrollAreaMixin.set_vertical_scrollbar_width","title":"<code>set_vertical_scrollbar_width(width: int)</code>","text":"<p>Set the vertical scrollbar width.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>width in pixels</p> required Source code in <code>prettyqt\\widgets\\abstractscrollarea.py</code> <pre><code>def set_vertical_scrollbar_width(self, width: int):\n\"\"\"Set the vertical scrollbar width.\n    Args:\n        width: width in pixels\n    \"\"\"\nwith self.v_scrollbar.edit_stylesheet() as ss:\nss.QScrollBar.horizontal.height.setValue(f\"{width}px\")\n</code></pre>"},{"location":"qt_modules/widgets/AbstractScrollAreaMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/AbstractSlider.html","title":"AbstractSlider","text":"<p>Qt Base Class: QAbstractSlider</p> <p>Signature: <code>QAbstractSlider(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractSlider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractSliderMixin</code>, <code>widgets.QAbstractSlider</code></p> <p>Integer value within a range.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>class AbstractSlider(AbstractSliderMixin, widgets.QAbstractSlider):\n\"\"\"Integer value within a range.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSlider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261109120[\"widgets.AbstractSlider\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261112000 --&gt; 2103261109120\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259932816 --&gt; 2103261109120\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/AbstractSlider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool"},{"location":"qt_modules/widgets/AbstractSliderMixin.html","title":"AbstractSliderMixin","text":""},{"location":"qt_modules/widgets/AbstractSliderMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>class AbstractSliderMixin(widgets.WidgetMixin):\nvalue_changed = core.Signal(int)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"orientation\": constants.ORIENTATION,\n}\nreturn maps\ndef on_value_change(self):\nself.value_changed.emit(self.value())\ndef is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n        Returns:\n            True if horizontal, else False\n        \"\"\"\nreturn self.orientation() == constants.HORIZONTAL\ndef is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n        Returns:\n            True if vertical, else False\n        \"\"\"\nreturn self.orientation() == constants.VERTICAL\ndef set_horizontal(self):\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.setOrientation(constants.HORIZONTAL)\ndef set_vertical(self):\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.setOrientation(constants.VERTICAL)\ndef set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the slider.\n        Args:\n            orientation: orientation for the slider\n        \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef scroll_to_min(self):\n\"\"\"Scroll to the minimum value of the slider.\"\"\"\nself.setValue(self.minimum())\ndef scroll_to_max(self):\n\"\"\"Scroll to the maximum value of the slider.\"\"\"\nself.setValue(self.maximum())\ndef set_range(self, min_val: int, max_val: int):\nself.setRange(min_val, max_val)\ndef set_step_size(self, step_size: int):\nself.setSingleStep(step_size)\ndef set_repeat_action(\nself,\naction: SliderActionStr | widgets.QAbstractSlider.SliderAction,\nthreshold: int = 500,\nrepeat_time: int = 50,\n):\n\"\"\"Set the repeat action.\n        Args:\n            action: repeat action\n            threshold: initial delay in ms\n            repeat_time: repeat time in ms\n        \"\"\"\nself.setRepeatAction(SLIDER_ACTION.get_enum_value(action), threshold, repeat_time)\ndef get_repeat_action(self) -&gt; SliderActionStr:\n\"\"\"Get current repeat action.\n        Returns:\n            current repeat action\n        \"\"\"\nreturn SLIDER_ACTION.inverse[self.repeatAction()]\ndef trigger_action(\nself, action: SliderActionStr | widgets.QAbstractSlider.SliderAction\n):\n\"\"\"Trigger slider action.\"\"\"\nself.triggerAction(SLIDER_ACTION.get_enum_value(action))\ndef get_value(self) -&gt; int:\nreturn self.value()\ndef set_value(self, value: int):\nself.setValue(value)\ndef on_scrollbar_range_changed(self, minval: int, maxval: int):\nif self.value() &gt;= self.maximum() - 1:\nself.setValue(maxval)\ndef set_auto_scroll_to_end(self, scroll: bool = True):\n\"\"\"Set to always scroll to the end when range changes.\"\"\"\nif scroll:\nself.rangeChanged.connect(self.on_scrollbar_range_changed)\nelse:\nself.rangeChanged.disconnect(self.on_scrollbar_range_changed)\n</code></pre> Name Children Inherits AbstractSliderprettyqt.widgets.abstractslider <ul><li>AbstractSliderMixin</li><li>QAbstractSlider</li></ul> <code>ScrollBarMixin</code>prettyqt.widgets.scrollbar <ul><li>ScrollBar</li></ul> <ul><li>AbstractSliderMixin</li></ul> Sliderprettyqt.widgets.slider <ul><li>SpanSlider</li></ul> <ul><li>AbstractSliderMixin</li><li>QSlider</li></ul> Dialprettyqt.widgets.dial <ul><li>AbstractSliderMixin</li><li>QDial</li></ul>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.get_repeat_action","title":"<code>get_repeat_action() -&gt; SliderActionStr</code>","text":"<p>Get current repeat action.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def get_repeat_action(self) -&gt; SliderActionStr:\n\"\"\"Get current repeat action.\n    Returns:\n        current repeat action\n    \"\"\"\nreturn SLIDER_ACTION.inverse[self.repeatAction()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.is_horizontal","title":"<code>is_horizontal() -&gt; bool</code>","text":"<p>Check if silder is horizontal.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n    Returns:\n        True if horizontal, else False\n    \"\"\"\nreturn self.orientation() == constants.HORIZONTAL\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.is_vertical","title":"<code>is_vertical() -&gt; bool</code>","text":"<p>Check if silder is vertical.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n    Returns:\n        True if vertical, else False\n    \"\"\"\nreturn self.orientation() == constants.VERTICAL\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.scroll_to_max","title":"<code>scroll_to_max()</code>","text":"<p>Scroll to the maximum value of the slider.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def scroll_to_max(self):\n\"\"\"Scroll to the maximum value of the slider.\"\"\"\nself.setValue(self.maximum())\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.scroll_to_min","title":"<code>scroll_to_min()</code>","text":"<p>Scroll to the minimum value of the slider.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def scroll_to_min(self):\n\"\"\"Scroll to the minimum value of the slider.\"\"\"\nself.setValue(self.minimum())\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_auto_scroll_to_end","title":"<code>set_auto_scroll_to_end(scroll: bool = True)</code>","text":"<p>Set to always scroll to the end when range changes.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_auto_scroll_to_end(self, scroll: bool = True):\n\"\"\"Set to always scroll to the end when range changes.\"\"\"\nif scroll:\nself.rangeChanged.connect(self.on_scrollbar_range_changed)\nelse:\nself.rangeChanged.disconnect(self.on_scrollbar_range_changed)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_horizontal","title":"<code>set_horizontal()</code>","text":"<p>Set slider orientation to horizontal.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_horizontal(self):\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.setOrientation(constants.HORIZONTAL)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the slider.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the slider</p> required Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the slider.\n    Args:\n        orientation: orientation for the slider\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_repeat_action","title":"<code>set_repeat_action(action: SliderActionStr | widgets.QAbstractSlider.SliderAction, threshold: int = 500, repeat_time: int = 50)</code>","text":"<p>Set the repeat action.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>SliderActionStr | widgets.QAbstractSlider.SliderAction</code> <p>repeat action</p> required <code>threshold</code> <code>int</code> <p>initial delay in ms</p> <code>500</code> <code>repeat_time</code> <code>int</code> <p>repeat time in ms</p> <code>50</code> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_repeat_action(\nself,\naction: SliderActionStr | widgets.QAbstractSlider.SliderAction,\nthreshold: int = 500,\nrepeat_time: int = 50,\n):\n\"\"\"Set the repeat action.\n    Args:\n        action: repeat action\n        threshold: initial delay in ms\n        repeat_time: repeat time in ms\n    \"\"\"\nself.setRepeatAction(SLIDER_ACTION.get_enum_value(action), threshold, repeat_time)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.set_vertical","title":"<code>set_vertical()</code>","text":"<p>Set slider orientation to vertical.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def set_vertical(self):\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.setOrientation(constants.VERTICAL)\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#prettyqt.widgets.abstractslider.AbstractSliderMixin.trigger_action","title":"<code>trigger_action(action: SliderActionStr | widgets.QAbstractSlider.SliderAction)</code>","text":"<p>Trigger slider action.</p> Source code in <code>prettyqt\\widgets\\abstractslider.py</code> <pre><code>def trigger_action(\nself, action: SliderActionStr | widgets.QAbstractSlider.SliderAction\n):\n\"\"\"Trigger slider action.\"\"\"\nself.triggerAction(SLIDER_ACTION.get_enum_value(action))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSliderMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBox.html","title":"AbstractSpinBox","text":"<p>Qt Base Class: QAbstractSpinBox</p> <p>Signature: <code>QAbstractSpinBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/AbstractSpinBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>AbstractSpinBoxMixin</code>, <code>QtWidgets.QAbstractSpinBox</code></p> <p>Spinbox and a line edit to display values.</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>class AbstractSpinBox(AbstractSpinBoxMixin, QtWidgets.QAbstractSpinBox):\n\"\"\"Spinbox and a line edit to display values.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261136000[\"widgets.AbstractSpinBox\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259895600[\"QtWidgets.QAbstractSpinBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261135040 --&gt; 2103261136000\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259895600 --&gt; 2103261136000\n  2103259691120 --&gt; 2103259895600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>wrapping</code> bool <code>frame</code> bool <code>alignment</code> QFlags <code>readOnly</code> bool <code>buttonSymbols</code> QAbstractSpinBox::ButtonSymbols <code>specialValueText</code> QString <code>text</code> QString <code>accelerated</code> bool <code>correctionMode</code> QAbstractSpinBox::CorrectionMode <code>acceptableInput</code> bool <code>keyboardTracking</code> bool <code>showGroupSeparator</code> bool"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html","title":"AbstractSpinBoxMixin","text":""},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>class AbstractSpinBoxMixin(widgets.WidgetMixin):\ndef __init__(self, *args, show_group_separator: bool = True, **kwargs):\nsuper().__init__(*args, show_group_separator=show_group_separator, **kwargs)\nself.setLineEdit(widgets.LineEdit(parent=self))\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"alignment\": constants.ALIGNMENTS,\n\"buttonSymbols\": SYMBOLS,\n\"correctionMode\": CORRECTION_MODES,\n}\nreturn maps\ndef is_valid(self) -&gt; bool:\nreturn self.hasAcceptableInput()\ndef set_validator(\nself, validator: QtGui.QValidator | widgets.lineedit.ValidatorStr | None, **kwargs\n) -&gt; QtGui.QValidator:\nreturn self.lineEdit().set_validator(validator)\ndef get_button_symbols(self) -&gt; SymbolStr:\n\"\"\"Return button symbol type.\n        Returns:\n            button symbol type\n        \"\"\"\nreturn SYMBOLS.inverse[self.buttonSymbols()]\ndef set_button_symbols(self, mode: SymbolStr | QtWidgets.QSpinBox.ButtonSymbols):\n\"\"\"Set button symbol type.\n        Args:\n            mode: button symbol type to use\n        \"\"\"\nself.setButtonSymbols(SYMBOLS.get_enum_value(mode))\ndef set_correction_mode(\nself, mode: CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode\n):\n\"\"\"Set correction mode.\n        Args:\n            mode: correction mode to use\n        \"\"\"\nself.setCorrectionMode(CORRECTION_MODES.get_enum_value(mode))\ndef get_correction_mode(self) -&gt; CorrectionModeStr:\n\"\"\"Return correction mode.\n        Returns:\n            correction mode\n        \"\"\"\nreturn CORRECTION_MODES.inverse[self.correctionMode()]\ndef set_step_type(self, mode: StepTypeStr | QtWidgets.QSpinBox.StepType):\n\"\"\"Set step type.\n        Args:\n            mode: step type to use\n        \"\"\"\nself.setStepType(STEP_TYPES.get_enum_value(mode))\ndef get_step_type(self) -&gt; StepTypeStr:\n\"\"\"Return step type.\n        Returns:\n            step type\n        \"\"\"\nreturn STEP_TYPES.inverse[self.stepType()]\ndef set_special_value(self, value: str):\nself.setSpecialValueText(value)\ndef get_value(self) -&gt; int:\nreturn self.value()\ndef set_value(self, value: int | float):\nself.setValue(value)\n</code></pre> Name Children Inherits AbstractSpinBoxprettyqt.widgets.abstractspinbox <ul><li>AbstractSpinBoxMixin</li><li>QAbstractSpinBox</li></ul> SpinBoxprettyqt.widgets.spinbox <ul><li>AbstractSpinBoxMixin</li><li>QSpinBox</li></ul> DoubleSpinBoxprettyqt.widgets.doublespinbox <ul><li>AbstractSpinBoxMixin</li><li>QDoubleSpinBox</li></ul> DateTimeEditMixinprettyqt.widgets.datetimeeditWidget for editing dates and times. <ul><li>DateTimeEdit</li><li>DateEdit</li><li>TimeEdit</li></ul> <ul><li>AbstractSpinBoxMixin</li></ul>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_button_symbols","title":"<code>get_button_symbols() -&gt; SymbolStr</code>","text":"<p>Return button symbol type.</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_button_symbols(self) -&gt; SymbolStr:\n\"\"\"Return button symbol type.\n    Returns:\n        button symbol type\n    \"\"\"\nreturn SYMBOLS.inverse[self.buttonSymbols()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_correction_mode","title":"<code>get_correction_mode() -&gt; CorrectionModeStr</code>","text":"<p>Return correction mode.</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_correction_mode(self) -&gt; CorrectionModeStr:\n\"\"\"Return correction mode.\n    Returns:\n        correction mode\n    \"\"\"\nreturn CORRECTION_MODES.inverse[self.correctionMode()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.get_step_type","title":"<code>get_step_type() -&gt; StepTypeStr</code>","text":"<p>Return step type.</p> Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def get_step_type(self) -&gt; StepTypeStr:\n\"\"\"Return step type.\n    Returns:\n        step type\n    \"\"\"\nreturn STEP_TYPES.inverse[self.stepType()]\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_button_symbols","title":"<code>set_button_symbols(mode: SymbolStr | QtWidgets.QSpinBox.ButtonSymbols)</code>","text":"<p>Set button symbol type.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SymbolStr | QtWidgets.QSpinBox.ButtonSymbols</code> <p>button symbol type to use</p> required Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_button_symbols(self, mode: SymbolStr | QtWidgets.QSpinBox.ButtonSymbols):\n\"\"\"Set button symbol type.\n    Args:\n        mode: button symbol type to use\n    \"\"\"\nself.setButtonSymbols(SYMBOLS.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_correction_mode","title":"<code>set_correction_mode(mode: CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode)</code>","text":"<p>Set correction mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode</code> <p>correction mode to use</p> required Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_correction_mode(\nself, mode: CorrectionModeStr | QtWidgets.QSpinBox.CorrectionMode\n):\n\"\"\"Set correction mode.\n    Args:\n        mode: correction mode to use\n    \"\"\"\nself.setCorrectionMode(CORRECTION_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#prettyqt.widgets.abstractspinbox.AbstractSpinBoxMixin.set_step_type","title":"<code>set_step_type(mode: StepTypeStr | QtWidgets.QSpinBox.StepType)</code>","text":"<p>Set step type.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>StepTypeStr | QtWidgets.QSpinBox.StepType</code> <p>step type to use</p> required Source code in <code>prettyqt\\widgets\\abstractspinbox.py</code> <pre><code>def set_step_type(self, mode: StepTypeStr | QtWidgets.QSpinBox.StepType):\n\"\"\"Set step type.\n    Args:\n        mode: step type to use\n    \"\"\"\nself.setStepType(STEP_TYPES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/AbstractSpinBoxMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/Application.html","title":"Application","text":"<p>Qt Base Class: QApplication</p> <p>Signature: <code>QApplication(self) -&gt; None QApplication(self, arg__1: Sequence[str]) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Application.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ApplicationMixin</code>, <code>widgets.QApplication</code></p> <p>Manages the GUI application's control flow and main settings.</p> Source code in <code>prettyqt\\widgets\\application.py</code> <pre><code>class Application(ApplicationMixin, widgets.QApplication):\n\"\"\"Manages the GUI application's control flow and main settings.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/Application.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261126400[\"widgets.Application\"]\n  2103261103360[\"widgets.ApplicationMixin\"]\n  2103260776976[\"gui.GuiApplicationMixin\"]\n  2103255110672[\"core.CoreApplicationMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261084160[\"QtWidgets.QApplication\"]\n  2103260919056[\"QtGui.QGuiApplication\"]\n  2103254798976[\"QtCore.QCoreApplication\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261103360 --&gt; 2103261126400\n  2103260776976 --&gt; 2103261103360\n  2103255110672 --&gt; 2103260776976\n  2103255067472 --&gt; 2103255110672\n  140736120080256 --&gt; 2103255067472\n  2103261084160 --&gt; 2103261126400\n  2103260919056 --&gt; 2103261084160\n  2103254798976 --&gt; 2103260919056\n  2103254677056 --&gt; 2103254798976\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/Application.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>applicationName</code> QString <code>applicationVersion</code> QString <code>organizationName</code> QString <code>organizationDomain</code> QString <code>quitLockEnabled</code> bool <code>windowIcon</code> QIcon <code>applicationDisplayName</code> QString <code>desktopFileName</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>platformName</code> QString <code>quitOnLastWindowClosed</code> bool <code>primaryScreen</code> QScreen <code>cursorFlashTime</code> int <code>doubleClickInterval</code> int <code>keyboardInputInterval</code> int <code>wheelScrollLines</code> int <code>startDragTime</code> int <code>startDragDistance</code> int <code>styleSheet</code> QString <code>autoSipEnabled</code> bool <code>window_icon_color</code> QString Global window icon color"},{"location":"qt_modules/widgets/BoxLayout.html","title":"BoxLayout","text":"<p>Qt Base Class: QBoxLayout</p> <p>Signature: <code>QBoxLayout(self, arg__1: PySide6.QtWidgets.QBoxLayout.Direction, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/BoxLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>BoxLayoutMixin</code>, <code>widgets.QBoxLayout</code></p> <p>Lines up child widgets horizontally or vertically.</p> Source code in <code>prettyqt\\widgets\\boxlayout.py</code> <pre><code>class BoxLayout(BoxLayoutMixin, widgets.QBoxLayout):\n\"\"\"Lines up child widgets horizontally or vertically.\"\"\"\nID = \"box\"\npass\n</code></pre> Name Children Inherits MultiLineLayoutprettyqt.custom_widgets.layouts.multilinelayout <ul><li>BoxLayout</li></ul>"},{"location":"qt_modules/widgets/BoxLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261452688[\"widgets.BoxLayout\"]\n  2103261430608[\"widgets.BoxLayoutMixin\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260142096[\"QtWidgets.QBoxLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261430608 --&gt; 2103261452688\n  2103261439248 --&gt; 2103261430608\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260142096 --&gt; 2103261452688\n  2103260125776 --&gt; 2103260142096\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/BoxLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"qt_modules/widgets/ButtonGroup.html","title":"ButtonGroup","text":"<p>Qt Base Class: QButtonGroup</p> <p>Signature: <code>QButtonGroup(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ButtonGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QButtonGroup</code></p> <p>Container to organize groups of button widgets.</p> Source code in <code>prettyqt\\widgets\\buttongroup.py</code> <pre><code>class ButtonGroup(core.ObjectMixin, QtWidgets.QButtonGroup):\n\"\"\"Container to organize groups of button widgets.\"\"\"\ndef __getitem__(self, index: int) -&gt; QtWidgets.QAbstractButton:\nreturn self.button(index)\n</code></pre>"},{"location":"qt_modules/widgets/ButtonGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261444048[\"widgets.ButtonGroup\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261038080[\"QtWidgets.QButtonGroup\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261444048\n  140736120080256 --&gt; 2103255067472\n  2103261038080 --&gt; 2103261444048\n  2103254677056 --&gt; 2103261038080\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/ButtonGroup.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>exclusive</code> bool"},{"location":"qt_modules/widgets/CalendarWidget.html","title":"CalendarWidget","text":"<p>Qt Base Class: QCalendarWidget</p> <p>Signature: <code>QCalendarWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/CalendarWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QCalendarWidget</code></p> <p>Monthly based calendar widget allowing the user to select a date.</p> Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>class CalendarWidget(widgets.WidgetMixin, widgets.QCalendarWidget):\n\"\"\"Monthly based calendar widget allowing the user to select a date.\"\"\"\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"firstDayOfWeek\": constants.DAY_OF_WEEK,\n\"horizontalHeaderFormat\": HORIZONTAL_HEADER_FORMAT,\n\"verticalHeaderFormat\": VERTICAL_HEADER_FORMAT,\n\"selectionMode\": SELECTION_MODE,\n}\nreturn maps\ndef get_date(self) -&gt; datetime.date:\nreturn self.selectedDate().toPython()\ndef get_value(self) -&gt; datetime.date:\nreturn self.get_date()\ndef set_value(self, value: datatypes.DateType):\nself.setSelectedDate(datatypes.to_date(value))\ndef set_range(\nself,\nlower: datatypes.DateType,\nupper: datatypes.DateType,\n):\nself.setMinimumDate(datatypes.to_date(lower))\nself.setMaximumDate(datatypes.to_date(upper))\ndef set_selection_mode(\nself, mode: SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None\n):\n\"\"\"Set selection mode for given calendar widget.\n        Args:\n            mode: selection mode to use\n        \"\"\"\nif mode is None:\nmode = \"none\"\nself.setSelectionMode(SELECTION_MODE.get_enum_value(mode))\ndef get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n        Returns:\n            selection mode\n        \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"qt_modules/widgets/CalendarWidget.html#prettyqt.widgets.calendarwidget.CalendarWidget.get_selection_mode","title":"<code>get_selection_mode() -&gt; SelectionModeStr</code>","text":"<p>Return current selection mode.</p> Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def get_selection_mode(self) -&gt; SelectionModeStr:\n\"\"\"Return current selection mode.\n    Returns:\n        selection mode\n    \"\"\"\nreturn SELECTION_MODE.inverse[self.selectionMode()]\n</code></pre>"},{"location":"qt_modules/widgets/CalendarWidget.html#prettyqt.widgets.calendarwidget.CalendarWidget.set_selection_mode","title":"<code>set_selection_mode(mode: SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None)</code>","text":"<p>Set selection mode for given calendar widget.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None</code> <p>selection mode to use</p> required Source code in <code>prettyqt\\widgets\\calendarwidget.py</code> <pre><code>def set_selection_mode(\nself, mode: SelectionModeStr | widgets.QCalendarWidget.SelectionMode | None\n):\n\"\"\"Set selection mode for given calendar widget.\n    Args:\n        mode: selection mode to use\n    \"\"\"\nif mode is None:\nmode = \"none\"\nself.setSelectionMode(SELECTION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/CalendarWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261261760[\"widgets.CalendarWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259886000[\"QtWidgets.QCalendarWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261261760\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259886000 --&gt; 2103261261760\n  2103259691120 --&gt; 2103259886000\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/CalendarWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>selectedDate</code> QDate <code>minimumDate</code> QDate <code>maximumDate</code> QDate <code>firstDayOfWeek</code> Qt::DayOfWeek <code>gridVisible</code> bool <code>selectionMode</code> QCalendarWidget::SelectionMode <code>horizontalHeaderFormat</code> QCalendarWidget::HorizontalHeaderFormat <code>verticalHeaderFormat</code> QCalendarWidget::VerticalHeaderFormat <code>navigationBarVisible</code> bool <code>dateEditEnabled</code> bool <code>dateEditAcceptDelay</code> int"},{"location":"qt_modules/widgets/CheckBox.html","title":"CheckBox","text":"<p>Qt Base Class: QCheckBox</p> <p>Signature: <code>QCheckBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QCheckBox(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/CheckBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractButtonMixin</code>, <code>widgets.QCheckBox</code></p> <p>Checkbox with a text label.</p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>class CheckBox(widgets.AbstractButtonMixin, widgets.QCheckBox):\n\"\"\"Checkbox with a text label.\"\"\"\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.stateChanged.connect(self.value_changed)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, bool)\ndef set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\ndef get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre> Name Children Inherits MappedCheckBoxprettyqt.custom_widgets.editors.mappedcheckbox <ul><li>CheckBox</li></ul>"},{"location":"qt_modules/widgets/CheckBox.html#prettyqt.widgets.checkbox.CheckBox.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"qt_modules/widgets/CheckBox.html#prettyqt.widgets.checkbox.CheckBox.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\widgets\\checkbox.py</code> <pre><code>def set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/widgets/CheckBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261256960[\"widgets.CheckBox\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259903056[\"QtWidgets.QCheckBox\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261100480 --&gt; 2103261256960\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259903056 --&gt; 2103261256960\n  2103259928016 --&gt; 2103259903056\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/CheckBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>tristate</code> bool"},{"location":"qt_modules/widgets/ColorDialog.html","title":"ColorDialog","text":"<p>Qt Base Class: QColorDialog</p> <p>Signature: <code>QColorDialog(self, initial: Union[PySide6.QtGui.QColor, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, str, int], parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QColorDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ColorDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QColorDialog</code></p> <p>Dialog widget for specifying colors.</p> Source code in <code>prettyqt\\widgets\\colordialog.py</code> <pre><code>class ColorDialog(widgets.DialogMixin, widgets.QColorDialog):\n\"\"\"Dialog widget for specifying colors.\"\"\"\n@classmethod\ndef get_color(\ncls,\npreset: datatypes.ColorType = None,\nallow_alpha: bool = False,\nparent: widgets.QWidget | None = None,\n) -&gt; gui.Color:\npreset = colors.get_color(preset)\nkwargs = (\ndict(options=cls.ColorDialogOption.ShowAlphaChannel) if allow_alpha else {}\n)\ncolor = cls.getColor(preset, parent, **kwargs)  # type: ignore\nreturn gui.Color(color)\ndef current_color(self) -&gt; gui.Color:\nreturn gui.Color(self.currentColor())\ndef get_qcolorshower(self) -&gt; widgets.QWidget:\nreturn [\na\nfor a in self.children()\nif hasattr(a, \"metaObject\")\nand a.metaObject().className() == \"QtPrivate::QColorShower\"\n][0]\ndef get_qcolorshowlabel(self) -&gt; widgets.QFrame:\nqcs = self.get_qcolorshower()\nreturn [\nb\nfor b in qcs.children()\nif hasattr(b, \"metaObject\")\nand b.metaObject().className() == \"QtPrivate::QColorShowLabel\"\n][0]\ndef replace_qcolorshowlabel(self, widget: widgets.QWidget):\n# Find the dialog widget used to display the current\n# color, so we can replace it with our implementation\nqcs = self.get_qcolorshower()\nqcsl = self.get_qcolorshowlabel()\nqcs.layout().replaceWidget(qcsl, widget)\n# Make sure it doesn't receive signals while hidden\nqcsl.blockSignals(True)\nqcsl.hide()\nwidget.show()\ndef use_alpha_channel(self, value: bool = True):\nself.setOption(self.ColorDialogOption.ShowAlphaChannel, value)\ndef hide_buttons(self, value: bool = True):\nself.setOption(self.ColorDialogOption.NoButtons, value)\ndef use_native_dialog(self, value: bool = True):\nself.setOption(self.ColorDialogOption.DontUseNativeDialog, not value)\n@classmethod\ndef get_custom_colors(cls) -&gt; list[gui.Color]:\nreturn [gui.Color(cls.customColor(i)) for i in range(cls.customCount())]\n@classmethod\ndef set_custom_colors(cls, colors_: list[datatypes.ColorType]):\nnum = min(len(colors_), cls.customCount())\nfor i in range(num):\ncolor = colors.get_color(colors_[i])\ncls.setCustomColor(i, color)\n</code></pre>"},{"location":"qt_modules/widgets/ColorDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261428688[\"widgets.ColorDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259866800[\"QtWidgets.QColorDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261428688\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259866800 --&gt; 2103261428688\n  2103259840880 --&gt; 2103259866800\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ColorDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>currentColor</code> QColor <code>options</code> QFlags"},{"location":"qt_modules/widgets/ColumnView.html","title":"ColumnView","text":"<p>Qt Base Class: QColumnView</p> <p>Signature: <code>QColumnView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ColumnView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractItemViewMixin</code>, <code>widgets.QColumnView</code></p> <p>Model/view implementation of a column view.</p> Source code in <code>prettyqt\\widgets\\columnview.py</code> <pre><code>class ColumnView(widgets.AbstractItemViewMixin, widgets.QColumnView):\n\"\"\"Model/view implementation of a column view.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/ColumnView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261402768[\"widgets.ColumnView\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259847600[\"QtWidgets.QColumnView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261136960 --&gt; 2103261402768\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259847600 --&gt; 2103261402768\n  2103259770800 --&gt; 2103259847600\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ColumnView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>resizeGripsVisible</code> bool"},{"location":"qt_modules/widgets/ComboBox.html","title":"ComboBox","text":"<p>Qt Base Class: QComboBox</p> <p>Signature: <code>QComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ComboBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ComboBoxMixin</code>, <code>widgets.QComboBox</code></p> <p>Combined button and popup list.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>class ComboBox(ComboBoxMixin, widgets.QComboBox):\n\"\"\"Combined button and popup list.\"\"\"\n</code></pre> Name Children Inherits EnumComboBoxprettyqt.custom_widgets.editors.enumcombobox <ul><li>CursorEdit</li></ul> <ul><li>ComboBox</li></ul> LocaleEditprettyqt.custom_widgets.editors.localeedit <ul><li>ComboBox</li></ul> ColorComboBoxprettyqt.custom_widgets.editors.colorcombobox <ul><li>ComboBox</li></ul> MultiComboBoxprettyqt.custom_widgets.multicombobox <ul><li>ComboBox</li></ul>"},{"location":"qt_modules/widgets/ComboBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261223360[\"widgets.ComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261255040 --&gt; 2103261223360\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259869680 --&gt; 2103261223360\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ComboBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int"},{"location":"qt_modules/widgets/ComboBoxMixin.html","title":"ComboBoxMixin","text":""},{"location":"qt_modules/widgets/ComboBoxMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> <p>Combobox that lets the user select a font family.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>class ComboBoxMixin(widgets.WidgetMixin):\n\"\"\"Combobox that lets the user select a font family.\"\"\"\nvalue_changed = core.Signal(object)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.currentIndexChanged.connect(self._index_changed)\ndef __len__(self) -&gt; int:\nreturn self.count()\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"insertPolicy\": INSERT_POLICY,\n\"sizeAdjustPolicy\": SIZE_ADJUST_POLICY,\n}\nreturn maps\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef _index_changed(self, index: int):\n# data = self.itemData(index)\ndata = self.get_value()\nself.value_changed.emit(data)\ndef add_items(\nself, items: Iterable[str | tuple | list] | Mapping[Any, str], default=...\n):\nif isinstance(items, Mapping):\nfor k, v in items.items():\nself.addItem(v, userData=k)\nelse:\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.addItem(i, i)\nif default is not ...:\nself.set_value(default)\ndef add(self, label: str, data=..., icon: datatypes.IconType = None):\nif data is ...:\ndata = label\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nself.addItem(gui.Icon(icon), label, userData=data)\nelse:\nself.addItem(label, userData=data)\ndef get_item_icon(self, index: int) -&gt; gui.Icon | None:\nicon = self.itemIcon(index)\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_editable(self, editable: bool):\nself.setEditable(editable)\nif self.completer() is None and editable:\nself.setCompleter(widgets.Completer(self))\ndef set_insert_policy(self, policy: InsertPolicyStr | mod.InsertPolicy):\n\"\"\"Set insert policy.\n        Args:\n            policy: insert policy to use\n        \"\"\"\nself.setInsertPolicy(INSERT_POLICY.get_enum_value(policy))\ndef get_insert_policy(self) -&gt; InsertPolicyStr:\n\"\"\"Return insert policy.\n        Returns:\n            insert policy\n        \"\"\"\nreturn INSERT_POLICY.inverse[self.insertPolicy()]\ndef set_size_adjust_policy(self, policy: SizeAdjustPolicyStr | mod.SizeAdjustPolicy):\n\"\"\"Set size adjust policy.\n        Args:\n            policy: size adjust policy to use\n        \"\"\"\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY.get_enum_value(policy))\ndef get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n        Returns:\n            size adjust policy\n        \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\ndef set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nself.setIconSize(datatypes.to_size(size))\ndef get_icon_size(self) -&gt; core.Size:\nreturn core.Size(self.iconSize())\ndef set_min_char_length(self, chars: int):\nself.setMinimumContentsLength(chars)\ndef get_value(self) -&gt; Any:\n# if all(self.itemData(i) is None for i in range(self.count())):\n#     return self.currentText()\n# else:\n#     return self.currentData()\nreturn self.currentData()\ndef set_value(self, value: Any):\nself.set_data(value)\ndef set_text(self, text: str):\nself.setCurrentText(text)\ndef set_data(self, data: Any):\nidx = self.findData(data)\nif idx == -1:\nraise ValueError(\"invalid data\")\nself.setCurrentIndex(idx)\ndef text(self) -&gt; str:\nreturn self.currentText()\ndef hide_completer(self):\n\"\"\"Hides the completion widget.\"\"\"\ncompleter = widgets.Completer(self)\nself.setCompleter(completer)\n</code></pre> Name Children Inherits ComboBoxprettyqt.widgets.combobox <ul><li>EnumComboBox</li><li>LocaleEdit</li><li>ColorComboBox</li><li>MultiComboBox</li></ul> <ul><li>ComboBoxMixin</li><li>QComboBox</li></ul> FontComboBoxprettyqt.widgets.fontcombobox <ul><li>ComboBoxMixin</li><li>QFontComboBox</li></ul>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#prettyqt.widgets.combobox.ComboBoxMixin.get_insert_policy","title":"<code>get_insert_policy() -&gt; InsertPolicyStr</code>","text":"<p>Return insert policy.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_insert_policy(self) -&gt; InsertPolicyStr:\n\"\"\"Return insert policy.\n    Returns:\n        insert policy\n    \"\"\"\nreturn INSERT_POLICY.inverse[self.insertPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#prettyqt.widgets.combobox.ComboBoxMixin.get_size_adjust_policy","title":"<code>get_size_adjust_policy() -&gt; SizeAdjustPolicyStr</code>","text":"<p>Return size adjust policy.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def get_size_adjust_policy(self) -&gt; SizeAdjustPolicyStr:\n\"\"\"Return size adjust policy.\n    Returns:\n        size adjust policy\n    \"\"\"\nreturn SIZE_ADJUST_POLICY.inverse[self.sizeAdjustPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#prettyqt.widgets.combobox.ComboBoxMixin.hide_completer","title":"<code>hide_completer()</code>","text":"<p>Hides the completion widget.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def hide_completer(self):\n\"\"\"Hides the completion widget.\"\"\"\ncompleter = widgets.Completer(self)\nself.setCompleter(completer)\n</code></pre>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#prettyqt.widgets.combobox.ComboBoxMixin.set_icon_size","title":"<code>set_icon_size(size: datatypes.SizeType)</code>","text":"<p>Set size of the icons.</p> Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#prettyqt.widgets.combobox.ComboBoxMixin.set_insert_policy","title":"<code>set_insert_policy(policy: InsertPolicyStr | mod.InsertPolicy)</code>","text":"<p>Set insert policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>InsertPolicyStr | mod.InsertPolicy</code> <p>insert policy to use</p> required Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_insert_policy(self, policy: InsertPolicyStr | mod.InsertPolicy):\n\"\"\"Set insert policy.\n    Args:\n        policy: insert policy to use\n    \"\"\"\nself.setInsertPolicy(INSERT_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#prettyqt.widgets.combobox.ComboBoxMixin.set_size_adjust_policy","title":"<code>set_size_adjust_policy(policy: SizeAdjustPolicyStr | mod.SizeAdjustPolicy)</code>","text":"<p>Set size adjust policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizeAdjustPolicyStr | mod.SizeAdjustPolicy</code> <p>size adjust policy to use</p> required Source code in <code>prettyqt\\widgets\\combobox.py</code> <pre><code>def set_size_adjust_policy(self, policy: SizeAdjustPolicyStr | mod.SizeAdjustPolicy):\n\"\"\"Set size adjust policy.\n    Args:\n        policy: size adjust policy to use\n    \"\"\"\nself.setSizeAdjustPolicy(SIZE_ADJUST_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/ComboBoxMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/CommandLinkButton.html","title":"CommandLinkButton","text":"<p>Qt Base Class: QCommandLinkButton</p> <p>Signature: <code>QCommandLinkButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QCommandLinkButton(self, text: str, description: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QCommandLinkButton(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/CommandLinkButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.PushButtonMixin</code>, <code>widgets.QCommandLinkButton</code></p> <p>Vista style command link button.</p> Source code in <code>prettyqt\\widgets\\commandlinkbutton.py</code> <pre><code>class CommandLinkButton(widgets.PushButtonMixin, widgets.QCommandLinkButton):\n\"\"\"Vista style command link button.\"\"\"\nvalue_changed = core.Signal(bool)\n</code></pre>"},{"location":"qt_modules/widgets/CommandLinkButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261250240[\"widgets.CommandLinkButton\"]\n  2103261208000[\"widgets.PushButtonMixin\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259916496[\"QtWidgets.QCommandLinkButton\"]\n  2103259910736[\"QtWidgets.QPushButton\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261208000 --&gt; 2103261250240\n  2103261100480 --&gt; 2103261208000\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259916496 --&gt; 2103261250240\n  2103259910736 --&gt; 2103259916496\n  2103259928016 --&gt; 2103259910736\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/CommandLinkButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>autoDefault</code> bool <code>default</code> bool <code>flat</code> bool <code>description</code> QString <code>flat</code> bool"},{"location":"qt_modules/widgets/CommonStyle.html","title":"CommonStyle","text":"<p>Qt Base Class: QCommonStyle</p> <p>Signature: <code>QCommonStyle(self) -&gt; None</code></p>"},{"location":"qt_modules/widgets/CommonStyle.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>CommonStyleMixin</code>, <code>widgets.QCommonStyle</code></p> <p>Encapsulates the common Look and Feel of a GUI.</p> Source code in <code>prettyqt\\widgets\\commonstyle.py</code> <pre><code>class CommonStyle(CommonStyleMixin, widgets.QCommonStyle):\n\"\"\"Encapsulates the common Look and Feel of a GUI.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/CommonStyle.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261129280[\"widgets.CommonStyle\"]\n  2103261112960[\"widgets.CommonStyleMixin\"]\n  2103261101440[\"widgets.StyleMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260120016[\"QtWidgets.QCommonStyle\"]\n  2103260098896[\"QtWidgets.QStyle\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261112960 --&gt; 2103261129280\n  2103261101440 --&gt; 2103261112960\n  2103255067472 --&gt; 2103261101440\n  140736120080256 --&gt; 2103255067472\n  2103260120016 --&gt; 2103261129280\n  2103260098896 --&gt; 2103260120016\n  2103254677056 --&gt; 2103260098896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/CommonStyle.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/widgets/CommonStyleMixin.html","title":"CommonStyleMixin","text":""},{"location":"qt_modules/widgets/CommonStyleMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleMixin</code></p> Source code in <code>prettyqt\\widgets\\commonstyle.py</code> <pre><code>class CommonStyleMixin(widgets.StyleMixin):\npass\n</code></pre> Name Children Inherits CommonStyleprettyqt.widgets.commonstyle <ul><li>CommonStyleMixin</li><li>QCommonStyle</li></ul> ProxyStyleprettyqt.widgets.proxystyle <ul><li><code>HollowHandleStyle</code></li></ul> <ul><li>CommonStyleMixin</li><li>QProxyStyle</li></ul>"},{"location":"qt_modules/widgets/CommonStyleMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261112960[\"widgets.CommonStyleMixin\"]\n  2103261101440[\"widgets.StyleMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261101440 --&gt; 2103261112960\n  2103255067472 --&gt; 2103261101440\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/Completer.html","title":"Completer","text":"<p>Qt Base Class: QCompleter</p> <p>Signature: <code>QCompleter(self, completions: Sequence[str], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCompleter(self, model: PySide6.QtCore.QAbstractItemModel, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QCompleter(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Completer.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>widgets.QCompleter</code></p> <p>Completions based on an item model.</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>class Completer(core.ObjectMixin, widgets.QCompleter):\n\"\"\"Completions based on an item model.\"\"\"\npath_updated = core.Signal(str)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"caseSensitivity\": constants.CASE_SENSITIVITY,\n\"completionMode\": COMPLETION_MODE,\n\"modelSorting\": SORT_MODE,\n\"filterMode\": constants.MATCH_FLAGS,\n}\nreturn maps\ndef splitPath(self, path: str) -&gt; list[str]:\nself.path_updated.emit(path)\nreturn super().splitPath(path)\ndef get_completions(self) -&gt; list[str]:\ncompletions = []\n# count = self.completionCount()\n# for i in range(count):\n#     self.setCurrentRow(i)\n#     completions.append(self.currentCompletion())\n# according to docs, completionCount should be avoided. Not sure if thats true.\ni = 0\nwhile self.setCurrentRow(i):\ncompletions.append(self.currentCompletion())\ni += 1\nreturn completions\ndef set_strings(self, strings: list[str]):\nmodel = core.StringListModel(strings)\nself.setModel(model)\ndef set_sort_mode(self, mode: SortModeStr | widgets.QCompleter.ModelSorting | None):\n\"\"\"Set sort mode to use.\n        Args:\n            mode: sort mode to use\n        \"\"\"\nif mode is None:\nmode = \"unsorted\"\nself.setModelSorting(SORT_MODE.get_enum_value(mode))\ndef get_sort_mode(self) -&gt; SortModeStr:\n\"\"\"Return current sort mode.\n        Returns:\n            sort mode\n        \"\"\"\nreturn SORT_MODE.inverse[self.modelSorting()]\ndef set_completion_mode(\nself, mode: CompletionModeStr | widgets.QCompleter.CompletionMode\n):\n\"\"\"Set completion mode to use.\n        Args:\n            mode: completion mode to use\n        \"\"\"\nself.setCompletionMode(COMPLETION_MODE.get_enum_value(mode))\ndef get_completion_mode(self) -&gt; CompletionModeStr:\n\"\"\"Return current completion mode.\n        Returns:\n            completion mode\n        \"\"\"\nreturn COMPLETION_MODE.inverse[self.completionMode()]\ndef set_filter_mode(self, mode: constants.FilterModeStr | constants.MatchFlag):\n\"\"\"Set filter mode to use.\n        Args:\n            mode: filter mode to use\n        \"\"\"\nself.setFilterMode(constants.FILTER_MODES.get_enum_value(mode))\ndef get_filter_mode(self) -&gt; constants.FilterModeStr:\n\"\"\"Return current filter mode.\n        Returns:\n            filter mode\n        \"\"\"\nreturn constants.FILTER_MODES.inverse[self.filterMode()]\ndef set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n        Args:\n            state: case sensitive\n        \"\"\"\nsensitivity = (\nconstants.CaseSensitivity.CaseSensitive\nif state\nelse constants.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\ndef is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n        Returns:\n            case sensitivity\n        \"\"\"\nreturn self.caseSensitivity() == constants.CaseSensitivity.CaseSensitive\ndef set_completion_role(\nself, role: constants.ItemDataRoleStr | constants.ItemDataRole | int\n):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nself.setCompletionRole(role)\n</code></pre> Name Children Inherits SubsequenceCompleterprettyqt.custom_widgets.subsequencecompleter <ul><li>Completer</li></ul>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.get_completion_mode","title":"<code>get_completion_mode() -&gt; CompletionModeStr</code>","text":"<p>Return current completion mode.</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_completion_mode(self) -&gt; CompletionModeStr:\n\"\"\"Return current completion mode.\n    Returns:\n        completion mode\n    \"\"\"\nreturn COMPLETION_MODE.inverse[self.completionMode()]\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.get_filter_mode","title":"<code>get_filter_mode() -&gt; constants.FilterModeStr</code>","text":"<p>Return current filter mode.</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_filter_mode(self) -&gt; constants.FilterModeStr:\n\"\"\"Return current filter mode.\n    Returns:\n        filter mode\n    \"\"\"\nreturn constants.FILTER_MODES.inverse[self.filterMode()]\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.get_sort_mode","title":"<code>get_sort_mode() -&gt; SortModeStr</code>","text":"<p>Return current sort mode.</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def get_sort_mode(self) -&gt; SortModeStr:\n\"\"\"Return current sort mode.\n    Returns:\n        sort mode\n    \"\"\"\nreturn SORT_MODE.inverse[self.modelSorting()]\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.is_case_sensitive","title":"<code>is_case_sensitive() -&gt; bool</code>","text":"<p>Return case sensitivity.</p> Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def is_case_sensitive(self) -&gt; bool:\n\"\"\"Return case sensitivity.\n    Returns:\n        case sensitivity\n    \"\"\"\nreturn self.caseSensitivity() == constants.CaseSensitivity.CaseSensitive\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.set_case_sensitive","title":"<code>set_case_sensitive(state: bool)</code>","text":"<p>Set case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>bool</code> <p>case sensitive</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_case_sensitive(self, state: bool):\n\"\"\"Set case sensitivity.\n    Args:\n        state: case sensitive\n    \"\"\"\nsensitivity = (\nconstants.CaseSensitivity.CaseSensitive\nif state\nelse constants.CaseSensitivity.CaseInsensitive\n)\nself.setCaseSensitivity(sensitivity)\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.set_completion_mode","title":"<code>set_completion_mode(mode: CompletionModeStr | widgets.QCompleter.CompletionMode)</code>","text":"<p>Set completion mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CompletionModeStr | widgets.QCompleter.CompletionMode</code> <p>completion mode to use</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_completion_mode(\nself, mode: CompletionModeStr | widgets.QCompleter.CompletionMode\n):\n\"\"\"Set completion mode to use.\n    Args:\n        mode: completion mode to use\n    \"\"\"\nself.setCompletionMode(COMPLETION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.set_filter_mode","title":"<code>set_filter_mode(mode: constants.FilterModeStr | constants.MatchFlag)</code>","text":"<p>Set filter mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.FilterModeStr | constants.MatchFlag</code> <p>filter mode to use</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_filter_mode(self, mode: constants.FilterModeStr | constants.MatchFlag):\n\"\"\"Set filter mode to use.\n    Args:\n        mode: filter mode to use\n    \"\"\"\nself.setFilterMode(constants.FILTER_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#prettyqt.widgets.completer.Completer.set_sort_mode","title":"<code>set_sort_mode(mode: SortModeStr | widgets.QCompleter.ModelSorting | None)</code>","text":"<p>Set sort mode to use.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SortModeStr | widgets.QCompleter.ModelSorting | None</code> <p>sort mode to use</p> required Source code in <code>prettyqt\\widgets\\completer.py</code> <pre><code>def set_sort_mode(self, mode: SortModeStr | widgets.QCompleter.ModelSorting | None):\n\"\"\"Set sort mode to use.\n    Args:\n        mode: sort mode to use\n    \"\"\"\nif mode is None:\nmode = \"unsorted\"\nself.setModelSorting(SORT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/Completer.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261400848[\"widgets.Completer\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261044800[\"QtWidgets.QCompleter\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261400848\n  140736120080256 --&gt; 2103255067472\n  2103261044800 --&gt; 2103261400848\n  2103254677056 --&gt; 2103261044800\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/Completer.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>completionPrefix</code> QString <code>modelSorting</code> QCompleter::ModelSorting <code>filterMode</code> QFlags <code>completionMode</code> QCompleter::CompletionMode <code>completionColumn</code> int <code>completionRole</code> int <code>maxVisibleItems</code> int <code>caseSensitivity</code> Qt::CaseSensitivity <code>wrapAround</code> bool"},{"location":"qt_modules/widgets/DataWidgetMapper.html","title":"DataWidgetMapper","text":"<p>Qt Base Class: QDataWidgetMapper</p> <p>Signature: <code>QDataWidgetMapper(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>widgets.QDataWidgetMapper</code></p> <p>Mapping between a section of a data model to widgets.</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>class DataWidgetMapper(core.ObjectMixin, widgets.QDataWidgetMapper):\n\"\"\"Mapping between a section of a data model to widgets.\"\"\"\ndef __setitem__(self, key: int, value: widgets.QWidget):\nself.addMapping(value, key)\ndef __getitem__(self, key: int) -&gt; widgets.QWidget:\nreturn self.mappedWidgetAt(key)\ndef __delitem__(self, key_or_widget: int | widgets.QWidget):\nwidget = (\nself.mappedWidgetAt(key_or_widget)\nif isinstance(key_or_widget, int)\nelse key_or_widget\n)\nself.removeMapping(widget)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"submitPolicy\": SUBMIT_POLICY, \"orientation\": constants.ORIENTATION}\nreturn maps\ndef set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the data widget mapper.\n        Args:\n            orientation: orientation for the data widget mapper\n        \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef set_submit_policy(\nself, policy: SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy\n):\n\"\"\"Set the submit policy of the mapper.\n        Args:\n            policy: submit_policy for the data widget mapper\n        \"\"\"\nself.setSubmitPolicy(SUBMIT_POLICY.get_enum_value(policy))\ndef get_submit_policy(self) -&gt; SubmitPolicyStr:\n\"\"\"Return current submit policy.\n        Returns:\n            submit policy\n        \"\"\"\nreturn SUBMIT_POLICY.inverse[self.submitPolicy()]\ndef add_mapping(\nself, widget: widgets.QWidget, section: int, property_name: str | None = None\n):\nif property_name is None:\nself.addMapping(widget, section)\nelse:\nba = core.QByteArray(property_name.encode())\nself.addMapping(widget, section, ba)\ndef get_mapped_property_name(self, widget: widgets.QWidget) -&gt; str:\nreturn self.mappedPropertyName(widget).data().decode()\n</code></pre>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.get_submit_policy","title":"<code>get_submit_policy() -&gt; SubmitPolicyStr</code>","text":"<p>Return current submit policy.</p> Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def get_submit_policy(self) -&gt; SubmitPolicyStr:\n\"\"\"Return current submit policy.\n    Returns:\n        submit policy\n    \"\"\"\nreturn SUBMIT_POLICY.inverse[self.submitPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the data widget mapper.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the data widget mapper</p> required Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the data widget mapper.\n    Args:\n        orientation: orientation for the data widget mapper\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#prettyqt.widgets.datawidgetmapper.DataWidgetMapper.set_submit_policy","title":"<code>set_submit_policy(policy: SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy)</code>","text":"<p>Set the submit policy of the mapper.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy</code> <p>submit_policy for the data widget mapper</p> required Source code in <code>prettyqt\\widgets\\datawidgetmapper.py</code> <pre><code>def set_submit_policy(\nself, policy: SubmitPolicyStr | widgets.QDataWidgetMapper.SubmitPolicy\n):\n\"\"\"Set the submit policy of the mapper.\n    Args:\n        policy: submit_policy for the data widget mapper\n    \"\"\"\nself.setSubmitPolicy(SUBMIT_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261427728[\"widgets.DataWidgetMapper\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261062080[\"QtWidgets.QDataWidgetMapper\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261427728\n  140736120080256 --&gt; 2103255067472\n  2103261062080 --&gt; 2103261427728\n  2103254677056 --&gt; 2103261062080\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/DataWidgetMapper.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>currentIndex</code> int <code>orientation</code> Qt::Orientation <code>submitPolicy</code> QDataWidgetMapper::SubmitPolicy"},{"location":"qt_modules/widgets/DateEdit.html","title":"DateEdit","text":"<p>Qt Base Class: QDateEdit</p> <p>Signature: <code>QDateEdit(self, date: PySide6.QtCore.QDate, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDateEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/DateEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DateTimeEditMixin</code>, <code>widgets.QDateEdit</code></p> <p>Widget for editing dates based on the QDateTimeEdit widget.</p> Source code in <code>prettyqt\\widgets\\dateedit.py</code> <pre><code>class DateEdit(widgets.DateTimeEditMixin, widgets.QDateEdit):\n\"\"\"Widget for editing dates based on the QDateTimeEdit widget.\"\"\"\nvalue_changed = core.Signal(datetime.datetime)\ndef set_value(self, value: datatypes.DateType):\nself.setDate(datatypes.to_date(value))\ndef set_range(self, lower: datatypes.DateType, upper: datatypes.DateType):\nself.setToolTip(f\"{lower} &lt;= x &lt;= {upper}\")\nself.setDateRange(datatypes.to_date(lower), datatypes.to_date(upper))\ndef get_value(self) -&gt; datetime.date:\nreturn self.get_date()\n</code></pre>"},{"location":"qt_modules/widgets/DateEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261228160[\"widgets.DateEdit\"]\n  2103261258880[\"widgets.DateTimeEditMixin\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259902096[\"QtWidgets.QDateEdit\"]\n  2103259923216[\"QtWidgets.QDateTimeEdit\"]\n  2103259895600[\"QtWidgets.QAbstractSpinBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261258880 --&gt; 2103261228160\n  2103261135040 --&gt; 2103261258880\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259902096 --&gt; 2103261228160\n  2103259923216 --&gt; 2103259902096\n  2103259895600 --&gt; 2103259923216\n  2103259691120 --&gt; 2103259895600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/DateEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>wrapping</code> bool <code>frame</code> bool <code>alignment</code> QFlags <code>readOnly</code> bool <code>buttonSymbols</code> QAbstractSpinBox::ButtonSymbols <code>specialValueText</code> QString <code>text</code> QString <code>accelerated</code> bool <code>correctionMode</code> QAbstractSpinBox::CorrectionMode <code>acceptableInput</code> bool <code>keyboardTracking</code> bool <code>showGroupSeparator</code> bool <code>dateTime</code> QDateTime <code>date</code> QDate <code>time</code> QTime <code>maximumDateTime</code> QDateTime <code>minimumDateTime</code> QDateTime <code>maximumDate</code> QDate <code>minimumDate</code> QDate <code>maximumTime</code> QTime <code>minimumTime</code> QTime <code>currentSection</code> QDateTimeEdit::Section <code>displayedSections</code> QFlags <code>displayFormat</code> QString <code>calendarPopup</code> bool <code>currentSectionIndex</code> int <code>sectionCount</code> int <code>timeSpec</code> Qt::TimeSpec <code>date</code> QDate"},{"location":"qt_modules/widgets/DateTimeEdit.html","title":"DateTimeEdit","text":"<p>Qt Base Class: QDateTimeEdit</p> <p>Signature: <code>QDateTimeEdit(self, d: PySide6.QtCore.QDate, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDateTimeEdit(self, dt: PySide6.QtCore.QDateTime, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDateTimeEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDateTimeEdit(self, t: PySide6.QtCore.QTime, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDateTimeEdit(self, val: Any, parserType: PySide6.QtCore.QMetaType.Type, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/DateTimeEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>DateTimeEditMixin</code>, <code>widgets.QDateTimeEdit</code></p> Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>class DateTimeEdit(DateTimeEditMixin, widgets.QDateTimeEdit):\npass\n</code></pre>"},{"location":"qt_modules/widgets/DateTimeEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261259840[\"widgets.DateTimeEdit\"]\n  2103261258880[\"widgets.DateTimeEditMixin\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259923216[\"QtWidgets.QDateTimeEdit\"]\n  2103259895600[\"QtWidgets.QAbstractSpinBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261258880 --&gt; 2103261259840\n  2103261135040 --&gt; 2103261258880\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259923216 --&gt; 2103261259840\n  2103259895600 --&gt; 2103259923216\n  2103259691120 --&gt; 2103259895600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/DateTimeEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>wrapping</code> bool <code>frame</code> bool <code>alignment</code> QFlags <code>readOnly</code> bool <code>buttonSymbols</code> QAbstractSpinBox::ButtonSymbols <code>specialValueText</code> QString <code>text</code> QString <code>accelerated</code> bool <code>correctionMode</code> QAbstractSpinBox::CorrectionMode <code>acceptableInput</code> bool <code>keyboardTracking</code> bool <code>showGroupSeparator</code> bool <code>dateTime</code> QDateTime <code>date</code> QDate <code>time</code> QTime <code>maximumDateTime</code> QDateTime <code>minimumDateTime</code> QDateTime <code>maximumDate</code> QDate <code>minimumDate</code> QDate <code>maximumTime</code> QTime <code>minimumTime</code> QTime <code>currentSection</code> QDateTimeEdit::Section <code>displayedSections</code> QFlags <code>displayFormat</code> QString <code>calendarPopup</code> bool <code>currentSectionIndex</code> int <code>sectionCount</code> int <code>timeSpec</code> Qt::TimeSpec"},{"location":"qt_modules/widgets/DateTimeEditMixin.html","title":"DateTimeEditMixin","text":""},{"location":"qt_modules/widgets/DateTimeEditMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractSpinBoxMixin</code></p> <p>Widget for editing dates and times.</p> Source code in <code>prettyqt\\widgets\\datetimeedit.py</code> <pre><code>class DateTimeEditMixin(widgets.AbstractSpinBoxMixin):\n\"\"\"Widget for editing dates and times.\"\"\"\nvalue_changed = core.Signal(datetime.datetime)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setCalendarPopup(True)\nself.dateTimeChanged.connect(self.datetime_changed)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"timeSpec\": constants.TIME_SPEC,\n\"currentSection\": SECTIONS,\n}\nreturn maps\ndef datetime_changed(self, date):\ndt = self.get_datetime()\nself.value_changed.emit(dt)\ndef set_to_today(self):\nself.setDateTime(core.DateTime.currentDateTime())\ndef get_section_text(\nself, section: SectionStr | widgets.QDateTimeEdit.Section\n) -&gt; str:\nreturn self.sectionText(SECTIONS.get_enum_value(section))\ndef get_current_section(self) -&gt; SectionStr:\nreturn SECTIONS.inverse[self.currentSection()]\ndef set_current_section(self, section: SectionStr | widgets.QDateTimeEdit.Section):\nself.setCurrentSection(SECTIONS.get_enum_value(section))\ndef get_displayed_sections(self) -&gt; list[SectionStr]:\nreturn SECTIONS.get_list(self.displayedSections())\ndef set_range(\nself,\nlower: datatypes.DateTimeType,\nupper: datatypes.DateTimeType,\n):\nlower = datatypes.to_datetime(lower)\nupper = datatypes.to_datetime(upper)\nself.setToolTip(f\"{lower} &lt;= x &lt;= {upper}\")\nself.setDateTimeRange(lower, upper)\ndef set_format(self, fmt: str):\nself.setDisplayFormat(fmt)\ndef get_value(self) -&gt; datetime.datetime:\nreturn self.get_datetime()\ndef set_value(self, value: datetime.datetime | core.DateTime):\nself.setDateTime(value)\ndef get_datetime(self) -&gt; datetime.datetime:\nreturn self.dateTime().toPython()  # type: ignore\ndef min_datetime(self) -&gt; datetime.datetime:\nreturn self.minimumDateTime().toPython()  # type: ignore\ndef max_datetime(self) -&gt; datetime.datetime:\nreturn self.maximumDateTime().toPython()  # type: ignore\ndef min_date(self) -&gt; datetime.date:\nreturn self.minimumDate().toPython()  # type: ignore\ndef max_date(self) -&gt; datetime.date:\nreturn self.maximumDate().toPython()  # type: ignore\ndef get_date(self) -&gt; datetime.date:\nreturn self.date().toPython()  # type: ignore\ndef min_time(self) -&gt; datetime.time:\nreturn self.minimumTime().toPython()  # type: ignore\ndef max_time(self) -&gt; datetime.time:\nreturn self.maximumTime().toPython()  # type: ignore\ndef get_time(self) -&gt; datetime.time:\nreturn self.time().toPython()  # type: ignore\n</code></pre> Name Children Inherits DateTimeEditprettyqt.widgets.datetimeedit <ul><li>DateTimeEditMixin</li><li>QDateTimeEdit</li></ul> DateEditprettyqt.widgets.dateedit <ul><li>DateTimeEditMixin</li><li>QDateEdit</li></ul> TimeEditprettyqt.widgets.timeedit <ul><li>DateTimeEditMixin</li><li>QTimeEdit</li></ul>"},{"location":"qt_modules/widgets/DateTimeEditMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261258880[\"widgets.DateTimeEditMixin\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261135040 --&gt; 2103261258880\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/Dial.html","title":"Dial","text":"<p>Qt Base Class: QDial</p> <p>Signature: <code>QDial(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Dial.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractSliderMixin</code>, <code>widgets.QDial</code></p> <p>Rounded range control (like a speedometer or potentiometer).</p> Source code in <code>prettyqt\\widgets\\dial.py</code> <pre><code>class Dial(widgets.AbstractSliderMixin, widgets.QDial):\n\"\"\"Rounded range control (like a speedometer or potentiometer).\"\"\"\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\n</code></pre>"},{"location":"qt_modules/widgets/Dial.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261204160[\"widgets.Dial\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259926096[\"QtWidgets.QDial\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261112000 --&gt; 2103261204160\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259926096 --&gt; 2103261204160\n  2103259932816 --&gt; 2103259926096\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Dial.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool <code>wrapping</code> bool <code>notchSize</code> int <code>notchTarget</code> double <code>notchesVisible</code> bool"},{"location":"qt_modules/widgets/Dialog.html","title":"Dialog","text":"<p>Qt Base Class: QDialog</p> <p>Signature: <code>QDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Dialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>DialogMixin</code>, <code>widgets.QDialog</code></p> <p>The base class of dialog windows.</p> Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>class Dialog(DialogMixin, widgets.QDialog):\n\"\"\"The base class of dialog windows.\"\"\"\n</code></pre> Name Children Inherits PopupInfoprettyqt.custom_widgets.popupinfo <ul><li>Dialog</li></ul> TracebackDialogprettyqt.debugging.tracebackdialog <ul><li>Dialog</li></ul>"},{"location":"qt_modules/widgets/Dialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261214720[\"widgets.Dialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261214720\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259840880 --&gt; 2103261214720\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Dialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"qt_modules/widgets/DialogButtonBox.html","title":"DialogButtonBox","text":"<p>Qt Base Class: QDialogButtonBox</p> <p>Signature: <code>QDialogButtonBox(self, buttons: PySide6.QtWidgets.QDialogButtonBox.StandardButton, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDialogButtonBox(self, buttons: PySide6.QtWidgets.QDialogButtonBox.StandardButton, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDialogButtonBox(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QDialogButtonBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/DialogButtonBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QDialogButtonBox</code></p> <p>Widget presenting buttons in a layout that is appropriate to the widget style.</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>class DialogButtonBox(widgets.WidgetMixin, widgets.QDialogButtonBox):\n\"\"\"Widget presenting buttons in a layout that is appropriate to the widget style.\"\"\"\nbutton_clicked = core.Signal(str)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.clicked.connect(self.on_click)\ndef __len__(self) -&gt; int:\nreturn len(self.buttons())\ndef __getitem__(self, index: StandardButtonStr) -&gt; widgets.QPushButton:\nreturn self.button(STANDARD_BUTTON[index])\ndef __iter__(self) -&gt; Iterator[widgets.QAbstractButton]:\nreturn iter(self.buttons())\ndef __contains__(self, index: StandardButtonStr):\nreturn self.button(STANDARD_BUTTON[index]) is not None\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"orientation\": constants.ORIENTATION,\n\"standardButtons\": STANDARD_BUTTON,\n}\nreturn maps\n@classmethod\ndef create(cls, **kwargs) -&gt; Self:\nbox = cls()\nfor k, v in kwargs.items():\nbox.add_default_button(k, callback=v)  # type: ignore\nreturn box\ndef on_click(self, button: core.QObject):\nself.button_clicked.emit(button.objectName())\ndef set_horizontal(self):\nself.setOrientation(constants.HORIZONTAL)\ndef set_vertical(self):\nself.setOrientation(constants.VERTICAL)\ndef set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the button box.\n        Args:\n            orientation: orientation for the button box\n        \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef add_default_buttons(\nself, buttons: Sequence[StandardButtonStr]\n) -&gt; listdelegators.ListDelegator[widgets.QPushButton]:\nreturn [self.add_default_button(btn) for btn in buttons]\ndef add_default_button(\nself,\nbutton: StandardButtonStr | widgets.QDialogButtonBox.StandardButton,\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\n\"\"\"Add a default button.\n        Args:\n            button: button to add\n            callback: function to call when button gets clicked\n        Returns:\n            created button\n        \"\"\"\nbtn = super().addButton(STANDARD_BUTTON.get_enum_value(button))\nbtn.setObjectName(button)\nif callback:\nbtn.clicked.connect(callback)\nreturn btn\ndef add_button(\nself,\nbutton: widgets.QPushButton | str,\nrole: RoleStr | widgets.QDialogButtonBox.ButtonRole = \"accept\",\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\n\"\"\"Add a button.\n        Args:\n            button: button to add\n            role: role of the button\n            callback: function to call when button gets clicked\n        Returns:\n            created button\n        \"\"\"\nif isinstance(button, str):\nbutton = widgets.PushButton(button)\nself.addButton(button, ROLES.get_enum_value(role))\nif callback:\nbutton.clicked.connect(callback)\nreturn button\n</code></pre>"},{"location":"qt_modules/widgets/DialogButtonBox.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_button","title":"<code>add_button(button: widgets.QPushButton | str, role: RoleStr | widgets.QDialogButtonBox.ButtonRole = 'accept', callback: Callable | None = None) -&gt; widgets.QPushButton</code>","text":"<p>Add a button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>widgets.QPushButton | str</code> <p>button to add</p> required <code>role</code> <code>RoleStr | widgets.QDialogButtonBox.ButtonRole</code> <p>role of the button</p> <code>'accept'</code> <code>callback</code> <code>Callable | None</code> <p>function to call when button gets clicked</p> <code>None</code> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_button(\nself,\nbutton: widgets.QPushButton | str,\nrole: RoleStr | widgets.QDialogButtonBox.ButtonRole = \"accept\",\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\n\"\"\"Add a button.\n    Args:\n        button: button to add\n        role: role of the button\n        callback: function to call when button gets clicked\n    Returns:\n        created button\n    \"\"\"\nif isinstance(button, str):\nbutton = widgets.PushButton(button)\nself.addButton(button, ROLES.get_enum_value(role))\nif callback:\nbutton.clicked.connect(callback)\nreturn button\n</code></pre>"},{"location":"qt_modules/widgets/DialogButtonBox.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.add_default_button","title":"<code>add_default_button(button: StandardButtonStr | widgets.QDialogButtonBox.StandardButton, callback: Callable | None = None) -&gt; widgets.QPushButton</code>","text":"<p>Add a default button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>StandardButtonStr | widgets.QDialogButtonBox.StandardButton</code> <p>button to add</p> required <code>callback</code> <code>Callable | None</code> <p>function to call when button gets clicked</p> <code>None</code> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def add_default_button(\nself,\nbutton: StandardButtonStr | widgets.QDialogButtonBox.StandardButton,\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\n\"\"\"Add a default button.\n    Args:\n        button: button to add\n        callback: function to call when button gets clicked\n    Returns:\n        created button\n    \"\"\"\nbtn = super().addButton(STANDARD_BUTTON.get_enum_value(button))\nbtn.setObjectName(button)\nif callback:\nbtn.clicked.connect(callback)\nreturn btn\n</code></pre>"},{"location":"qt_modules/widgets/DialogButtonBox.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/widgets/DialogButtonBox.html#prettyqt.widgets.dialogbuttonbox.DialogButtonBox.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the button box.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the button box</p> required Source code in <code>prettyqt\\widgets\\dialogbuttonbox.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the button box.\n    Args:\n        orientation: orientation for the button box\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/widgets/DialogButtonBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261209920[\"widgets.DialogButtonBox\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259829360[\"QtWidgets.QDialogButtonBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261209920\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259829360 --&gt; 2103261209920\n  2103259691120 --&gt; 2103259829360\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/DialogButtonBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>orientation</code> Qt::Orientation <code>standardButtons</code> QFlags <code>centerButtons</code> bool"},{"location":"qt_modules/widgets/DialogMixin.html","title":"DialogMixin","text":""},{"location":"qt_modules/widgets/DialogMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\dialog.py</code> <pre><code>class DialogMixin(widgets.WidgetMixin):\ndef __init__(\nself,\n*args,\ndelete_on_close: bool = False,\n**kwargs,\n):\nsuper().__init__(*args, **kwargs)\nif delete_on_close:\nself.delete_on_close()\ndef keyPressEvent(self, e):\nmatch e.key():\ncase constants.Key.Key_Escape:\nself.close()\ncase constants.Key.Key_F11 if self.isMaximized():\nself.showNormal()\ncase constants.Key.Key_F11:\nself.showMaximized()\ncase _:\nsuper().keyPressEvent(e)\ndef delete_on_close(self):\nself.setAttribute(constants.WidgetAttribute.WA_DeleteOnClose)\ndef add_buttonbox(self) -&gt; widgets.DialogButtonBox:\nbutton_box = widgets.DialogButtonBox.create(ok=self.accept, cancel=self.reject)\nself.box.add(button_box)\nreturn button_box\ndef show_blocking(self) -&gt; bool:\nself.show()\nreturn bool(self.exec())\ndef is_accepted(self) -&gt; bool:\nreturn self.result() == widgets.QDialog.DialogCode.Accepted\ndef main_loop(self) -&gt; int:\nreturn self.exec()\n</code></pre> Name Children Inherits Dialogprettyqt.widgets.dialog <ul><li>PopupInfo</li><li>TracebackDialog</li></ul> <ul><li>DialogMixin</li><li>QDialog</li></ul> MessageBoxprettyqt.widgets.messagebox <ul><li>ErrorMessageBox</li></ul> <ul><li>DialogMixin</li><li>QMessageBox</li></ul> ErrorMessageprettyqt.widgets.errormessage <ul><li>DialogMixin</li><li>QErrorMessage</li></ul> ProgressDialogprettyqt.widgets.progressdialog <ul><li>DialogMixin</li><li>QProgressDialog</li></ul> FontDialogprettyqt.widgets.fontdialog <ul><li>DialogMixin</li><li>QFontDialog</li></ul> FileDialogprettyqt.widgets.filedialog <ul><li>DialogMixin</li><li>QFileDialog</li></ul> ColorDialogprettyqt.widgets.colordialog <ul><li>DialogMixin</li><li>QColorDialog</li></ul> InputDialogprettyqt.widgets.inputdialog <ul><li>DialogMixin</li><li>QInputDialog</li></ul> <code>WizardMixin</code>prettyqt.widgets.wizard <ul><li>Wizard</li></ul> <ul><li>DialogMixin</li></ul> AbstractPrintDialogMixinprettyqt.printsupport.abstractprintdialog <ul><li>AbstractPrintDialog</li><li>PrintDialog</li></ul> <ul><li>DialogMixin</li></ul> PageSetupDialogprettyqt.printsupport.pagesetupdialog <ul><li>DialogMixin</li><li>QPageSetupDialog</li></ul> PrintPreviewDialogprettyqt.printsupport.printpreviewdialog <ul><li>DialogMixin</li><li>QPrintPreviewDialog</li></ul>"},{"location":"qt_modules/widgets/DialogMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/DockWidget.html","title":"DockWidget","text":"<p>Qt Base Class: QDockWidget</p> <p>Signature: <code>QDockWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QDockWidget(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/DockWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QDockWidget</code></p> <p>Widget that can be docked inside a QMainWindow .</p> Source code in <code>prettyqt\\widgets\\dockwidget.py</code> <pre><code>class DockWidget(widgets.WidgetMixin, widgets.QDockWidget):\n\"\"\"Widget that can be docked inside a QMainWindow .\"\"\"\ndef __init__(self, *args, allowed_areas=\"all\", **kwargs):\nsuper().__init__(*args, allowed_areas=allowed_areas, **kwargs)\nself._area: constants.DockWidgetAreasStr = \"none\"\nself.dockLocationChanged.connect(self._on_location_change)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"allowedAreas\": constants.DOCK_WIDGET_AREAS}\nreturn maps\ndef set_widget(self, widget: widgets.QWidget):\nself.setWidget(widget)\ndef set_allowed_areas(self, area: constants.DockWidgetAreasStr):\nself.setAllowedAreas(constants.DOCK_WIDGET_AREAS[area])\ndef _on_location_change(self, area: constants.DockWidgetArea):\nself._area = constants.DOCK_WIDGET_AREAS.inverse[area]\ndef get_current_area(self) -&gt; constants.DockWidgetAreasStr:\nreturn self._area\ndef setup_title_bar(self):\ntitle_bar = CustomTitleBar(parent=self)\nself.setTitleBarWidget(title_bar)\ndef maximize(self):\nif not self.isFloating():\nself.setFloating(True)\nif not self.isMaximized():\nself.showMaximized()\nelse:\nself.showMinimized()\n</code></pre>"},{"location":"qt_modules/widgets/DockWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261206080[\"widgets.DockWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259845680[\"QtWidgets.QDockWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261206080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259845680 --&gt; 2103261206080\n  2103259691120 --&gt; 2103259845680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/DockWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>floating</code> bool <code>features</code> QFlags <code>allowedAreas</code> QFlags <code>windowTitle</code> QString"},{"location":"qt_modules/widgets/DoubleSpinBox.html","title":"DoubleSpinBox","text":"<p>Qt Base Class: QDoubleSpinBox</p> <p>Signature: <code>QDoubleSpinBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/DoubleSpinBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractSpinBoxMixin</code>, <code>widgets.QDoubleSpinBox</code></p> <p>Spin box widget that takes doubles.</p> Source code in <code>prettyqt\\widgets\\doublespinbox.py</code> <pre><code>class DoubleSpinBox(widgets.AbstractSpinBoxMixin, widgets.QDoubleSpinBox):\n\"\"\"Spin box widget that takes doubles.\"\"\"\nvalue_changed = core.Signal(float)\ndef __init__(self, *args, maximum: float = float(\"inf\"), **kwargs):\nsuper().__init__(*args, maximum=maximum, **kwargs)\nself.valueChanged.connect(self.value_changed)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, float)\ndef set_range(self, start: float | None, end: float | None):\nself.set_minimum(start)\nself.set_maximum(end)\nsetRange = set_range\ndef set_minimum(self, value: float | None):\nif value is None:\nvalue = -float(\"inf\")\nsuper().setMinimum(value)\nsetMinimum = set_minimum\ndef set_maximum(self, value: float | None):\nif value is None:\nvalue = float(\"inf\")\nsuper().setMaximum(value)\nsetMaximum = set_maximum\n</code></pre>"},{"location":"qt_modules/widgets/DoubleSpinBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261224320[\"widgets.DoubleSpinBox\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259927056[\"QtWidgets.QDoubleSpinBox\"]\n  2103259895600[\"QtWidgets.QAbstractSpinBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261135040 --&gt; 2103261224320\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259927056 --&gt; 2103261224320\n  2103259895600 --&gt; 2103259927056\n  2103259691120 --&gt; 2103259895600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/DoubleSpinBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>wrapping</code> bool <code>frame</code> bool <code>alignment</code> QFlags <code>readOnly</code> bool <code>buttonSymbols</code> QAbstractSpinBox::ButtonSymbols <code>specialValueText</code> QString <code>text</code> QString <code>accelerated</code> bool <code>correctionMode</code> QAbstractSpinBox::CorrectionMode <code>acceptableInput</code> bool <code>keyboardTracking</code> bool <code>showGroupSeparator</code> bool <code>prefix</code> QString <code>suffix</code> QString <code>cleanText</code> QString <code>decimals</code> int <code>minimum</code> double <code>maximum</code> double <code>singleStep</code> double <code>stepType</code> QAbstractSpinBox::StepType <code>value</code> double"},{"location":"qt_modules/widgets/ErrorMessage.html","title":"ErrorMessage","text":"<p>Qt Base Class: QErrorMessage</p> <p>Signature: <code>QErrorMessage(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ErrorMessage.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QErrorMessage</code></p> <p>Error message display dialog.</p> Source code in <code>prettyqt\\widgets\\errormessage.py</code> <pre><code>class ErrorMessage(widgets.DialogMixin, widgets.QErrorMessage):\n\"\"\"Error message display dialog.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/ErrorMessage.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261215680[\"widgets.ErrorMessage\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259871600[\"QtWidgets.QErrorMessage\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261215680\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259871600 --&gt; 2103261215680\n  2103259840880 --&gt; 2103259871600\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ErrorMessage.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"qt_modules/widgets/FileDialog.html","title":"FileDialog","text":"<p>Qt Base Class: QFileDialog</p> <p>Signature: <code>QFileDialog(self, parent: PySide6.QtWidgets.QWidget, f: PySide6.QtCore.Qt.WindowType) -&gt; None QFileDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, caption: str = '', directory: str = '', filter: str = '') -&gt; None</code></p>"},{"location":"qt_modules/widgets/FileDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QFileDialog</code></p> <p>Dialog that allow users to select files or directories.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>class FileDialog(widgets.DialogMixin, widgets.QFileDialog):\n\"\"\"Dialog that allow users to select files or directories.\"\"\"\ndef __init__(\nself,\npath: None | datatypes.PathType = None,\nmode: AcceptModeStr = \"open\",\ncaption: str | None = None,\npath_id: str | None = None,\nextension_filter: dict | None = None,\nfile_mode: FileModeStr = \"existing_files\",\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_title(caption)\nself.path_id = path_id\nif extension_filter:\nself.set_extension_filter(extension_filter)\nif path_id is not None and path is None:\nsettings = core.Settings()\npath = settings.get(path_id, \"\")\nif path is not None:\nself.set_directory(path)\nself.set_file_mode(file_mode)\nself.set_accept_mode(mode)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"acceptMode\": ACCEPT_MODE,\n\"fileMode\": FILE_MODE,\n\"viewMode\": VIEW_MODE,\n}\nreturn maps\ndef set_accept_mode(self, mode: AcceptModeStr | widgets.QFileDialog.AcceptMode):\n\"\"\"Set accept mode.\n        Args:\n            mode: accept mode to use\n        \"\"\"\nself.setAcceptMode(ACCEPT_MODE.get_enum_value(mode))\ndef get_accept_mode(self) -&gt; AcceptModeStr:\n\"\"\"Return accept mode.\n        Returns:\n            accept mode\n        \"\"\"\nreturn ACCEPT_MODE.inverse[self.acceptMode()]\ndef set_view_mode(self, mode: ViewModeStr | widgets.QFileDialog.ViewMode):\n\"\"\"Set view mode.\n        Args:\n            mode: view mode to use\n        \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\ndef get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n        Returns:\n            view mode\n        \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_label_text(\nself, label: LabelStr | widgets.QFileDialog.DialogLabel, text: str\n):\n\"\"\"Set the label text for button label.\n        Args:\n            label: button to set text for\n            text: text to use\n        \"\"\"\nself.setLabelText(LABEL.get_enum_value(label), text)\ndef get_label_text(self, label: LabelStr | widgets.QFileDialog.DialogLabel) -&gt; str:\n\"\"\"Return label text.\n        Returns:\n            label text\n        \"\"\"\nreturn self.labelText(LABEL.get_enum_value(label))\ndef get_file_mode(self) -&gt; FileModeStr:\n\"\"\"Return file mode.\n        Returns:\n            file mode\n        \"\"\"\nreturn FILE_MODE.inverse[self.fileMode()]\ndef set_file_mode(self, mode: FileModeStr | widgets.QFileDialog.FileMode):\n\"\"\"Set the file mode of the dialog.\n        Args:\n            mode: mode to use\n        \"\"\"\nself.setFileMode(FILE_MODE.get_enum_value(mode))\ndef selected_files(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.selectedFiles()]\ndef selected_file(self) -&gt; pathlib.Path | None:\nselected = self.selectedFiles()\nreturn pathlib.Path(selected[0]) if selected else None\ndef choose_folder(self) -&gt; list[pathlib.Path] | None:\nself.set_file_mode(\"directory\")\nreturn self.choose()\ndef open_file(self) -&gt; list[pathlib.Path] | None:\nself.set_file_mode(\"existing_file\")\nreturn self.choose()\ndef choose(self) -&gt; list[pathlib.Path] | None:\nresult = self.exec()\nif result != self.DialogCode.Accepted:\nreturn None\npaths = self.selected_files()\nif self.path_id:\nsettings = core.Settings()\nfolder_path = paths[0].parent\nsettings.setValue(self.path_id, str(folder_path))\nreturn paths\ndef set_extension_filter(self, extension_dict: dict[str, list[str]]):\n\"\"\"Set filter based on given dictionary.\n        dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs\n        Args:\n            extension_dict: filter dictionary\n        \"\"\"\nitems = [\nf\"{k} ({' '.join(f'*{ext}' for ext in v)})\" for k, v in extension_dict.items()\n]\nfilter_str = \";;\".join(items)\nself.setNameFilter(filter_str)\ndef get_directory(self) -&gt; pathlib.Path:\n\"\"\"Return current directory.\n        returns current directory level as a Pathlib object\n        Returns:\n            Pathlib object\n        \"\"\"\nreturn pathlib.Path(self.directory().absolutePath())\ndef set_directory(self, path: datatypes.PathType):\n\"\"\"Set start directory.\"\"\"\npath = os.fspath(path)\nself.setDirectory(path)\ndef set_filter(self, *filters: core.dir.FilterStr):\nflags = core.dir.FILTERS.merge_flags(filters)\nself.setFilter(flags)\ndef get_filter(self) -&gt; list[core.dir.FilterStr]:\nreturn core.dir.FILTERS.get_list(self.filter())\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.get_accept_mode","title":"<code>get_accept_mode() -&gt; AcceptModeStr</code>","text":"<p>Return accept mode.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_accept_mode(self) -&gt; AcceptModeStr:\n\"\"\"Return accept mode.\n    Returns:\n        accept mode\n    \"\"\"\nreturn ACCEPT_MODE.inverse[self.acceptMode()]\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.get_directory","title":"<code>get_directory() -&gt; pathlib.Path</code>","text":"<p>Return current directory.</p> <p>returns current directory level as a Pathlib object</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_directory(self) -&gt; pathlib.Path:\n\"\"\"Return current directory.\n    returns current directory level as a Pathlib object\n    Returns:\n        Pathlib object\n    \"\"\"\nreturn pathlib.Path(self.directory().absolutePath())\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.get_file_mode","title":"<code>get_file_mode() -&gt; FileModeStr</code>","text":"<p>Return file mode.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_file_mode(self) -&gt; FileModeStr:\n\"\"\"Return file mode.\n    Returns:\n        file mode\n    \"\"\"\nreturn FILE_MODE.inverse[self.fileMode()]\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.get_label_text","title":"<code>get_label_text(label: LabelStr | widgets.QFileDialog.DialogLabel) -&gt; str</code>","text":"<p>Return label text.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_label_text(self, label: LabelStr | widgets.QFileDialog.DialogLabel) -&gt; str:\n\"\"\"Return label text.\n    Returns:\n        label text\n    \"\"\"\nreturn self.labelText(LABEL.get_enum_value(label))\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return view mode.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.set_accept_mode","title":"<code>set_accept_mode(mode: AcceptModeStr | widgets.QFileDialog.AcceptMode)</code>","text":"<p>Set accept mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AcceptModeStr | widgets.QFileDialog.AcceptMode</code> <p>accept mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_accept_mode(self, mode: AcceptModeStr | widgets.QFileDialog.AcceptMode):\n\"\"\"Set accept mode.\n    Args:\n        mode: accept mode to use\n    \"\"\"\nself.setAcceptMode(ACCEPT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.set_directory","title":"<code>set_directory(path: datatypes.PathType)</code>","text":"<p>Set start directory.</p> Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_directory(self, path: datatypes.PathType):\n\"\"\"Set start directory.\"\"\"\npath = os.fspath(path)\nself.setDirectory(path)\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.set_extension_filter","title":"<code>set_extension_filter(extension_dict: dict[str, list[str]])</code>","text":"<p>Set filter based on given dictionary.</p> <p>dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs</p> <p>Parameters:</p> Name Type Description Default <code>extension_dict</code> <code>dict[str, list[str]]</code> <p>filter dictionary</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_extension_filter(self, extension_dict: dict[str, list[str]]):\n\"\"\"Set filter based on given dictionary.\n    dict must contain \"'name': ['.ext1', '.ext2']\" as key-value pairs\n    Args:\n        extension_dict: filter dictionary\n    \"\"\"\nitems = [\nf\"{k} ({' '.join(f'*{ext}' for ext in v)})\" for k, v in extension_dict.items()\n]\nfilter_str = \";;\".join(items)\nself.setNameFilter(filter_str)\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.set_file_mode","title":"<code>set_file_mode(mode: FileModeStr | widgets.QFileDialog.FileMode)</code>","text":"<p>Set the file mode of the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FileModeStr | widgets.QFileDialog.FileMode</code> <p>mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_file_mode(self, mode: FileModeStr | widgets.QFileDialog.FileMode):\n\"\"\"Set the file mode of the dialog.\n    Args:\n        mode: mode to use\n    \"\"\"\nself.setFileMode(FILE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.set_label_text","title":"<code>set_label_text(label: LabelStr | widgets.QFileDialog.DialogLabel, text: str)</code>","text":"<p>Set the label text for button label.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>LabelStr | widgets.QFileDialog.DialogLabel</code> <p>button to set text for</p> required <code>text</code> <code>str</code> <p>text to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_label_text(\nself, label: LabelStr | widgets.QFileDialog.DialogLabel, text: str\n):\n\"\"\"Set the label text for button label.\n    Args:\n        label: button to set text for\n        text: text to use\n    \"\"\"\nself.setLabelText(LABEL.get_enum_value(label), text)\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#prettyqt.widgets.filedialog.FileDialog.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | widgets.QFileDialog.ViewMode)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | widgets.QFileDialog.ViewMode</code> <p>view mode to use</p> required Source code in <code>prettyqt\\widgets\\filedialog.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr | widgets.QFileDialog.ViewMode):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode to use\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261442128[\"widgets.FileDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261094720[\"QtWidgets.QFileDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261442128\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103261094720 --&gt; 2103261442128\n  2103259840880 --&gt; 2103261094720\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/FileDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>viewMode</code> QFileDialog::ViewMode <code>fileMode</code> QFileDialog::FileMode <code>acceptMode</code> QFileDialog::AcceptMode <code>defaultSuffix</code> QString <code>options</code> QFlags <code>supportedSchemes</code> QStringList"},{"location":"qt_modules/widgets/FileIconProvider.html","title":"FileIconProvider","text":"<p>Qt Base Class: QFileIconProvider</p> <p>Signature: <code>QFileIconProvider(self) -&gt; None</code></p>"},{"location":"qt_modules/widgets/FileIconProvider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.AbstractFileIconProviderMixin</code>, <code>QtWidgets.QFileIconProvider</code></p> <p>File icons for the QFileSystemModel class.</p> Source code in <code>prettyqt\\widgets\\fileiconprovider.py</code> <pre><code>class FileIconProvider(gui.AbstractFileIconProviderMixin, QtWidgets.QFileIconProvider):\n\"\"\"File icons for the QFileSystemModel class.\"\"\"\ndef get_icon(\nself,\ntyp: gui.abstractfileiconprovider.IconTypeStr\n| core.QFileInfo\n| datatypes.PathType,\n) -&gt; gui.QIcon:\nif isinstance(typ, os.PathLike | core.QFileInfo):\nparam = core.FileInfo(typ)\nelse:\nparam = gui.abstractfileiconprovider.ICON_TYPE[typ]\nreturn self.icon(param)\ndef use_custom_directory_icons(self, state: bool = True):\nopt = self.Option(0) if state else self.Option.DontUseCustomDirectoryIcons\nself.setOptions(opt)\ndef uses_custom_directory_icons(self) -&gt; bool:\nreturn self.options() == self.Option(0)\n</code></pre>"},{"location":"qt_modules/widgets/FileIconProvider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261199360[\"widgets.FileIconProvider\"]\n  2103256704992[\"gui.AbstractFileIconProviderMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259671920[\"QtWidgets.QFileIconProvider\"]\n  2103259368592[\"QtGui.QAbstractFileIconProvider\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256704992 --&gt; 2103261199360\n  140736120080256 --&gt; 2103256704992\n  2103259671920 --&gt; 2103261199360\n  2103259368592 --&gt; 2103259671920\n  2103206874128 --&gt; 2103259368592\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/FileSystemModel.html","title":"FileSystemModel","text":"<p>Qt Base Class: QFileSystemModel</p> <p>Signature: <code>QFileSystemModel(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/FileSystemModel.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>FileSystemModelMixin</code>, <code>core.AbstractItemModelMixin</code>, <code>widgets.QFileSystemModel</code></p> Source code in <code>prettyqt\\widgets\\filesystemmodel.py</code> <pre><code>class FileSystemModel(\nFileSystemModelMixin, core.AbstractItemModelMixin, widgets.QFileSystemModel\n):\npass\n</code></pre>"},{"location":"qt_modules/widgets/FileSystemModel.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261201280[\"widgets.FileSystemModel\"]\n  2103261217600[\"widgets.FileSystemModelMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103254372048[\"core.AbstractItemModelMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  2103261093760[\"QtWidgets.QFileSystemModel\"]\n  2103254592576[\"QtCore.QAbstractItemModel\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261217600 --&gt; 2103261201280\n  140736120080256 --&gt; 2103261217600\n  2103254372048 --&gt; 2103261201280\n  2103255067472 --&gt; 2103254372048\n  140736120080256 --&gt; 2103255067472\n  2103261093760 --&gt; 2103261201280\n  2103254592576 --&gt; 2103261093760\n  2103254677056 --&gt; 2103254592576\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/FileSystemModel.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>resolveSymlinks</code> bool <code>readOnly</code> bool <code>nameFilterDisables</code> bool <code>options</code> QFlags"},{"location":"qt_modules/widgets/FocusFrame.html","title":"FocusFrame","text":"<p>Qt Base Class: QFocusFrame</p> <p>Signature: <code>QFocusFrame(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/FocusFrame.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QFocusFrame</code></p> <p>Focus frame which can be outside of a widget's normal paintable area.</p> Source code in <code>prettyqt\\widgets\\focusframe.py</code> <pre><code>class FocusFrame(widgets.WidgetMixin, widgets.QFocusFrame):\n\"\"\"Focus frame which can be outside of a widget's normal paintable area.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/FocusFrame.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261104320[\"widgets.FocusFrame\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259850480[\"QtWidgets.QFocusFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261104320\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259850480 --&gt; 2103261104320\n  2103259691120 --&gt; 2103259850480\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/FocusFrame.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/widgets/FontComboBox.html","title":"FontComboBox","text":"<p>Qt Base Class: QFontComboBox</p> <p>Signature: <code>QFontComboBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/FontComboBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ComboBoxMixin</code>, <code>widgets.QFontComboBox</code></p> <p>Combobox that lets the user select a font family.</p> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>class FontComboBox(widgets.ComboBoxMixin, widgets.QFontComboBox):\n\"\"\"Combobox that lets the user select a font family.\"\"\"\nvalue_changed = core.Signal(gui.QFont)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"fontFilters\": FONT_FILTERS,\n\"writingSystem\": gui.fontdatabase.WRITING_SYSTEM,\n}\nreturn maps\ndef set_font_filters(self, *filters: FontFilterStr):\n\"\"\"Set font filters.\n        Args:\n            filters: font filters to use\n        \"\"\"\nif not filters:\nfilters = (\"all\",)\nflags = FONT_FILTERS.merge_flags(filters)\nself.setFontFilters(flags)\ndef get_font_filters(self) -&gt; list[FontFilterStr]:\n\"\"\"Return list of font filters.\n        Returns:\n            font filter list\n        \"\"\"\nreturn FONT_FILTERS.get_list(self.fontFilters())\ndef set_value(self, value: gui.QFont):\nself.setCurrentFont(value)\ndef get_value(self) -&gt; gui.QFont:\nreturn gui.QFont(self.get_current_font())\ndef get_current_font(self) -&gt; gui.Font:\nreturn gui.Font(self.currentFont())\n# without this, the user property would be currentText, which is not what we want.\n# PyQt6 doesnt like gui.Font here.\nvalue = core.Property(\ngui.QFont,\nget_value,\nset_value,\nuser=True,\ndoc=\"Currently chosen font\",\n)\n</code></pre>"},{"location":"qt_modules/widgets/FontComboBox.html#prettyqt.widgets.fontcombobox.FontComboBox.get_font_filters","title":"<code>get_font_filters() -&gt; list[FontFilterStr]</code>","text":"<p>Return list of font filters.</p> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def get_font_filters(self) -&gt; list[FontFilterStr]:\n\"\"\"Return list of font filters.\n    Returns:\n        font filter list\n    \"\"\"\nreturn FONT_FILTERS.get_list(self.fontFilters())\n</code></pre>"},{"location":"qt_modules/widgets/FontComboBox.html#prettyqt.widgets.fontcombobox.FontComboBox.set_font_filters","title":"<code>set_font_filters(*filters: FontFilterStr)</code>","text":"<p>Set font filters.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>FontFilterStr</code> <p>font filters to use</p> <code>()</code> Source code in <code>prettyqt\\widgets\\fontcombobox.py</code> <pre><code>def set_font_filters(self, *filters: FontFilterStr):\n\"\"\"Set font filters.\n    Args:\n        filters: font filters to use\n    \"\"\"\nif not filters:\nfilters = (\"all\",)\nflags = FONT_FILTERS.merge_flags(filters)\nself.setFontFilters(flags)\n</code></pre>"},{"location":"qt_modules/widgets/FontComboBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261256000[\"widgets.FontComboBox\"]\n  2103261255040[\"widgets.ComboBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259876400[\"QtWidgets.QFontComboBox\"]\n  2103259869680[\"QtWidgets.QComboBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261255040 --&gt; 2103261256000\n  2103261127360 --&gt; 2103261255040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259876400 --&gt; 2103261256000\n  2103259869680 --&gt; 2103259876400\n  2103259691120 --&gt; 2103259869680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/FontComboBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>editable</code> bool <code>count</code> int <code>currentText</code> QString <code>currentIndex</code> int <code>currentData</code> QVariant <code>maxVisibleItems</code> int <code>maxCount</code> int <code>insertPolicy</code> QComboBox::InsertPolicy <code>sizeAdjustPolicy</code> QComboBox::SizeAdjustPolicy <code>minimumContentsLength</code> int <code>iconSize</code> QSize <code>placeholderText</code> QString <code>duplicatesEnabled</code> bool <code>frame</code> bool <code>modelColumn</code> int <code>writingSystem</code> QFontDatabase::WritingSystem <code>fontFilters</code> QFlags <code>currentFont</code> QFont <code>value</code> QFont Currently chosen font"},{"location":"qt_modules/widgets/FontDialog.html","title":"FontDialog","text":"<p>Qt Base Class: QFontDialog</p> <p>Signature: <code>QFontDialog(self, initial: Union[PySide6.QtGui.QFont, str, Sequence[str]], parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QFontDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/FontDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QFontDialog</code></p> <p>Dialog widget for selecting a font.</p> Source code in <code>prettyqt\\widgets\\fontdialog.py</code> <pre><code>class FontDialog(widgets.DialogMixin, widgets.QFontDialog):\n\"\"\"Dialog widget for selecting a font.\"\"\"\ndef get_current_font(self) -&gt; gui.Font:\nreturn gui.Font(self.currentFont())\n</code></pre>"},{"location":"qt_modules/widgets/FontDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261441168[\"widgets.FontDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259864880[\"QtWidgets.QFontDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261441168\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259864880 --&gt; 2103261441168\n  2103259840880 --&gt; 2103259864880\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/FontDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>currentFont</code> QFont <code>options</code> QFlags"},{"location":"qt_modules/widgets/FormLayout.html","title":"FormLayout","text":"<p>Qt Base Class: QFormLayout</p> <p>Signature: <code>QFormLayout(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/FormLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LayoutMixin</code>, <code>widgets.QFormLayout</code></p> <p>Manages forms of input widgets and their associated labels.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>class FormLayout(widgets.LayoutMixin, widgets.QFormLayout):\n\"\"\"Manages forms of input widgets and their associated labels.\"\"\"\nID = \"form\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.set_size_constraint(\"maximum\")\nself.setVerticalSpacing(8)\ndef __setitem__(\nself, index: int | tuple[int, ItemRoleStr], value: str | widgets.QWidget\n):\nmatch index:\ncase (int() as row, str() as role):\nself.set_widget(value, row, role)\ncase int() as row:\nself.set_widget(value, row, \"both\")\ncase _:\nraise TypeError(index)\ndef __delitem__(self, index: int):\nself.removeRow(index)\ndef __iter__(self) -&gt; Iterator[widgets.QWidget | widgets.QLayout]:\nreturn iter(self[i] for i in range(self.count()) if self[i] is not None)\ndef __len__(self) -&gt; int:\n\"\"\"Needed for PySide2.\"\"\"\nreturn self.rowCount()\ndef __add__(self, other: widgets.QWidget | widgets.QLayout | tuple):\nself.add(other)\nreturn self\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"FieldGrowthPolicy\": FIELD_GROWTH_POLICY,\n\"formAlignment\": constants.ALIGNMENTS,\n\"labelAlignment\": constants.ALIGNMENTS,\n\"rowWrapPolicy\": ROW_WRAP_POLICY,\n}\nreturn maps\ndef set_form_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the form.\n        Args:\n            alignment: alignment for the form\n        \"\"\"\nself.setFormAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_form_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current form alignment.\n        Returns:\n            form alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.formAlignment()]\ndef set_label_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the label.\n        Args:\n            alignment: alignment for the label\n        \"\"\"\nself.setFormAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_label_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current label alignment.\n        Returns:\n            label alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.labelAlignment()]\ndef set_widget(\nself,\nwidget: str | widgets.QWidget,\nrow: int,\nrole: ItemRoleStr | mod.ItemRole = \"both\",\n):\nwidget = widgets.Label(widget) if isinstance(widget, str) else widget\nself.setWidget(row, ITEM_ROLE.get_enum_value(role), widget)\ndef get_widget(\nself, row: int, role: ItemRoleStr | mod.ItemRole = \"both\"\n) -&gt; widgets.QLayout | widgets.QWidget:\nitem = self.itemAt(row, ITEM_ROLE.get_enum_value(role))\nreturn i if (i := item.widget()) is not None else item.layout()\ndef get_item_position(self, index: int) -&gt; tuple[int, ItemRoleStr] | None:\nrow, role = self.getItemPosition(index)  # type: ignore\nreturn None if row == -1 else (row, ITEM_ROLE.inverse[role])\ndef add(self, *items):\nfor i in items:\nmatch i:\ncase widgets.QWidget() | widgets.QLayout():\nself.addRow(i)\ncase tuple():\nself.addRow(*i)\ncase _:\nraise TypeError(i)\ndef set_row_wrap_policy(self, policy: RowWrapPolicyStr | mod.RowWrapPolicy):\n\"\"\"Set row wrap policy to use.\n        Args:\n            policy: row wrap policy to use\n        \"\"\"\nself.setRowWrapPolicy(ROW_WRAP_POLICY.get_enum_value(policy))\ndef get_row_wrap_policy(self) -&gt; RowWrapPolicyStr:\n\"\"\"Return current row wrap policy.\n        Returns:\n            row wrap policy\n        \"\"\"\nreturn ROW_WRAP_POLICY.inverse[self.rowWrapPolicy()]\ndef set_field_growth_policy(\nself, policy: FieldGrowthPolicyStr | mod.FieldGrowthPolicy\n):\n\"\"\"Set field growth policy to use.\n        Args:\n            policy: field growth policy to use\n        \"\"\"\nself.setFieldGrowthPolicy(FIELD_GROWTH_POLICY.get_enum_value(policy))\ndef get_field_growth_policy(self) -&gt; FieldGrowthPolicyStr:\n\"\"\"Return current field growth policy.\n        Returns:\n            field growth policy\n        \"\"\"\nreturn FIELD_GROWTH_POLICY.inverse[self.fieldGrowthPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Needed for PySide2.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def __len__(self) -&gt; int:\n\"\"\"Needed for PySide2.\"\"\"\nreturn self.rowCount()\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.get_field_growth_policy","title":"<code>get_field_growth_policy() -&gt; FieldGrowthPolicyStr</code>","text":"<p>Return current field growth policy.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_field_growth_policy(self) -&gt; FieldGrowthPolicyStr:\n\"\"\"Return current field growth policy.\n    Returns:\n        field growth policy\n    \"\"\"\nreturn FIELD_GROWTH_POLICY.inverse[self.fieldGrowthPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.get_form_alignment","title":"<code>get_form_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current form alignment.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_form_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current form alignment.\n    Returns:\n        form alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.formAlignment()]\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.get_label_alignment","title":"<code>get_label_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current label alignment.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_label_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current label alignment.\n    Returns:\n        label alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.labelAlignment()]\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.get_row_wrap_policy","title":"<code>get_row_wrap_policy() -&gt; RowWrapPolicyStr</code>","text":"<p>Return current row wrap policy.</p> Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def get_row_wrap_policy(self) -&gt; RowWrapPolicyStr:\n\"\"\"Return current row wrap policy.\n    Returns:\n        row wrap policy\n    \"\"\"\nreturn ROW_WRAP_POLICY.inverse[self.rowWrapPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.set_field_growth_policy","title":"<code>set_field_growth_policy(policy: FieldGrowthPolicyStr | mod.FieldGrowthPolicy)</code>","text":"<p>Set field growth policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>FieldGrowthPolicyStr | mod.FieldGrowthPolicy</code> <p>field growth policy to use</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_field_growth_policy(\nself, policy: FieldGrowthPolicyStr | mod.FieldGrowthPolicy\n):\n\"\"\"Set field growth policy to use.\n    Args:\n        policy: field growth policy to use\n    \"\"\"\nself.setFieldGrowthPolicy(FIELD_GROWTH_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.set_form_alignment","title":"<code>set_form_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the form.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the form</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_form_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the form.\n    Args:\n        alignment: alignment for the form\n    \"\"\"\nself.setFormAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.set_label_alignment","title":"<code>set_label_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the label.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the label</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_label_alignment(\nself, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the alignment of the label.\n    Args:\n        alignment: alignment for the label\n    \"\"\"\nself.setFormAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#prettyqt.widgets.formlayout.FormLayout.set_row_wrap_policy","title":"<code>set_row_wrap_policy(policy: RowWrapPolicyStr | mod.RowWrapPolicy)</code>","text":"<p>Set row wrap policy to use.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>RowWrapPolicyStr | mod.RowWrapPolicy</code> <p>row wrap policy to use</p> required Source code in <code>prettyqt\\widgets\\formlayout.py</code> <pre><code>def set_row_wrap_policy(self, policy: RowWrapPolicyStr | mod.RowWrapPolicy):\n\"\"\"Set row wrap policy to use.\n    Args:\n        policy: row wrap policy to use\n    \"\"\"\nself.setRowWrapPolicy(ROW_WRAP_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261426768[\"widgets.FormLayout\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260130576[\"QtWidgets.QFormLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261439248 --&gt; 2103261426768\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260130576 --&gt; 2103261426768\n  2103260125776 --&gt; 2103260130576\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/FormLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint <code>fieldGrowthPolicy</code> QFormLayout::FieldGrowthPolicy <code>rowWrapPolicy</code> QFormLayout::RowWrapPolicy <code>labelAlignment</code> QFlags <code>formAlignment</code> QFlags <code>horizontalSpacing</code> int <code>verticalSpacing</code> int"},{"location":"qt_modules/widgets/Frame.html","title":"Frame","text":"<p>Qt Base Class: QFrame</p> <p>Signature: <code>QFrame(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Frame.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>FrameMixin</code>, <code>widgets.QFrame</code></p> <p>The base class of widgets that can have a frame.</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>class Frame(FrameMixin, widgets.QFrame):\n\"\"\"The base class of widgets that can have a frame.\"\"\"\n</code></pre> Name Children Inherits ElidedLabelprettyqt.custom_widgets.labels.elidedlabel <ul><li>Frame</li></ul> CollapsibleFrameprettyqt.custom_widgets.collapsibleframe <ul><li>Frame</li></ul>"},{"location":"qt_modules/widgets/Frame.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261130240[\"widgets.Frame\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261110080 --&gt; 2103261130240\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259737200 --&gt; 2103261130240\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Frame.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect"},{"location":"qt_modules/widgets/FrameMixin.html","title":"FrameMixin","text":""},{"location":"qt_modules/widgets/FrameMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code></p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>class FrameMixin(widgets.WidgetMixin):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"frameShape\": FRAME_SHAPE, \"frameShadow\": SHADOW}\nreturn maps\ndef set_frame_shadow(self, style: ShadowStr | widgets.QFrame.Shadow):\n\"\"\"Set frame shadow.\n        Args:\n            style: frame style to use\n        \"\"\"\nself.setFrameShadow(SHADOW.get_enum_value(style))\ndef get_frame_shadow(self) -&gt; ShadowStr | None:\n\"\"\"Return current frame shadow.\n        Returns:\n            frame style\n        \"\"\"\nif (frame_shadow := self.frameShadow()) == 0:\nreturn None\nreturn SHADOW.inverse[frame_shadow]\ndef set_frame_shape(self, shape: FrameShapeStr | widgets.QFrame.Shape):\n\"\"\"Set frame shape.\n        Args:\n            shape: frame shape to use\n        \"\"\"\nself.setFrameShape(FRAME_SHAPE.get_enum_value(shape))\ndef get_frame_shape(self) -&gt; FrameShapeStr:\n\"\"\"Return current frame shape.\n        Returns:\n            frame shape\n        \"\"\"\nreturn FRAME_SHAPE.inverse[self.frameShape()]\ndef set_frame_rect(self, rect: datatypes.RectType):\nself.setFrameRect(datatypes.to_rect(rect))\n</code></pre> Name Children Inherits Frameprettyqt.widgets.frame <ul><li>ElidedLabel</li><li>CollapsibleFrame</li></ul> <ul><li>FrameMixin</li><li>QFrame</li></ul> AbstractScrollAreaMixinprettyqt.widgets.abstractscrollarea <ul><li>AbstractScrollArea</li><li>AbstractItemViewMixin</li><li>ScrollArea</li><li>GraphicsViewMixin</li><li>MdiArea</li><li>TextEditMixin</li><li>PlainTextEditMixin</li><li>PdfView</li></ul> <ul><li>FrameMixin</li></ul> Labelprettyqt.widgets.label <ul><li><code>CPAlphaShowLabel</code></li><li>ClickableLabel</li><li>IconWidget</li></ul> <ul><li>FrameMixin</li><li>QLabel</li></ul> LCDNumberprettyqt.widgets.lcdnumber <ul><li>FrameMixin</li><li>QLCDNumber</li></ul> ToolBoxprettyqt.widgets.toolbox <ul><li>FrameMixin</li><li>QToolBox</li></ul> <code>SplitterMixin</code>prettyqt.widgets.splitter <ul><li>Splitter</li></ul> <ul><li>FrameMixin</li></ul> StackedWidgetprettyqt.widgets.stackedwidget <ul><li>FrameMixin</li><li>QStackedWidget</li></ul>"},{"location":"qt_modules/widgets/FrameMixin.html#prettyqt.widgets.frame.FrameMixin.get_frame_shadow","title":"<code>get_frame_shadow() -&gt; ShadowStr | None</code>","text":"<p>Return current frame shadow.</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def get_frame_shadow(self) -&gt; ShadowStr | None:\n\"\"\"Return current frame shadow.\n    Returns:\n        frame style\n    \"\"\"\nif (frame_shadow := self.frameShadow()) == 0:\nreturn None\nreturn SHADOW.inverse[frame_shadow]\n</code></pre>"},{"location":"qt_modules/widgets/FrameMixin.html#prettyqt.widgets.frame.FrameMixin.get_frame_shape","title":"<code>get_frame_shape() -&gt; FrameShapeStr</code>","text":"<p>Return current frame shape.</p> Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def get_frame_shape(self) -&gt; FrameShapeStr:\n\"\"\"Return current frame shape.\n    Returns:\n        frame shape\n    \"\"\"\nreturn FRAME_SHAPE.inverse[self.frameShape()]\n</code></pre>"},{"location":"qt_modules/widgets/FrameMixin.html#prettyqt.widgets.frame.FrameMixin.set_frame_shadow","title":"<code>set_frame_shadow(style: ShadowStr | widgets.QFrame.Shadow)</code>","text":"<p>Set frame shadow.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>ShadowStr | widgets.QFrame.Shadow</code> <p>frame style to use</p> required Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_shadow(self, style: ShadowStr | widgets.QFrame.Shadow):\n\"\"\"Set frame shadow.\n    Args:\n        style: frame style to use\n    \"\"\"\nself.setFrameShadow(SHADOW.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/widgets/FrameMixin.html#prettyqt.widgets.frame.FrameMixin.set_frame_shape","title":"<code>set_frame_shape(shape: FrameShapeStr | widgets.QFrame.Shape)</code>","text":"<p>Set frame shape.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>FrameShapeStr | widgets.QFrame.Shape</code> <p>frame shape to use</p> required Source code in <code>prettyqt\\widgets\\frame.py</code> <pre><code>def set_frame_shape(self, shape: FrameShapeStr | widgets.QFrame.Shape):\n\"\"\"Set frame shape.\n    Args:\n        shape: frame shape to use\n    \"\"\"\nself.setFrameShape(FRAME_SHAPE.get_enum_value(shape))\n</code></pre>"},{"location":"qt_modules/widgets/FrameMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/Gesture.html","title":"Gesture","text":"<p>Qt Base Class: QGesture</p> <p>Signature: <code>QGesture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Gesture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GestureMixin</code>, <code>widgets.QGesture</code></p> <p>A gesture, containing properties that describe the corresponding user input.</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>class Gesture(GestureMixin, widgets.QGesture):\n\"\"\"A gesture, containing properties that describe the corresponding user input.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/Gesture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261478608[\"widgets.Gesture\"]\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261050560[\"QtWidgets.QGesture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261461328 --&gt; 2103261478608\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472\n  2103261050560 --&gt; 2103261478608\n  2103254677056 --&gt; 2103261050560\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/Gesture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> Qt::GestureState <code>gestureType</code> Qt::GestureType <code>gestureCancelPolicy</code> QGesture::GestureCancelPolicy <code>hotSpot</code> QPointF <code>hasHotSpot</code> bool"},{"location":"qt_modules/widgets/GestureMixin.html","title":"GestureMixin","text":""},{"location":"qt_modules/widgets/GestureMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>class GestureMixin(core.ObjectMixin):\ndef get_state(self) -&gt; constants.GestureStateStr:\n\"\"\"Return current state.\n        Returns:\n            state\n        \"\"\"\nreturn constants.GESTURE_STATE.inverse[self.state()]\ndef get_gesture_type(self) -&gt; constants.GestureTypeStr:\n\"\"\"Return current gesture type.\n        Returns:\n            gesture type\n        \"\"\"\nreturn constants.GESTURE_TYPE.inverse[self.gestureType()]\ndef get_hot_spot(self) -&gt; core.PointF:\nreturn core.PointF(self.hotSpot())\ndef set_gesture_cancel_policy(\nself, policy: GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy\n):\n\"\"\"Set gesture cancel policy.\n        Args:\n            policy: gesture cancel policy to use\n        \"\"\"\nself.setGestureCancelPolicy(GESTURE_CANCEL_POLICY.get_enum_value(policy))\ndef get_gesture_cancel_policy(self) -&gt; GestureCancelPolicyStr:\n\"\"\"Return current gesture cancel policy.\n        Returns:\n            gesture cancel policy\n        \"\"\"\nreturn GESTURE_CANCEL_POLICY.inverse[self.gestureCancelPolicy()]\n</code></pre> Name Children Inherits Gestureprettyqt.widgets.gesture <ul><li>GestureMixin</li><li>QGesture</li></ul> TapGestureprettyqt.widgets.tapgesture <ul><li>GestureMixin</li><li>QTapGesture</li></ul> TapAndHoldGestureprettyqt.widgets.tapandholdgesture <ul><li>GestureMixin</li><li>QTapAndHoldGesture</li></ul> PanGestureprettyqt.widgets.pangesture <ul><li>GestureMixin</li><li>QPanGesture</li></ul> PinchGestureprettyqt.widgets.pinchgesture <ul><li>GestureMixin</li><li>QPinchGesture</li></ul> <code>SwipeGestureMixin</code>prettyqt.widgets.swipegesture <ul><li>SwipeGesture</li></ul> <ul><li>GestureMixin</li></ul>"},{"location":"qt_modules/widgets/GestureMixin.html#prettyqt.widgets.gesture.GestureMixin.get_gesture_cancel_policy","title":"<code>get_gesture_cancel_policy() -&gt; GestureCancelPolicyStr</code>","text":"<p>Return current gesture cancel policy.</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_gesture_cancel_policy(self) -&gt; GestureCancelPolicyStr:\n\"\"\"Return current gesture cancel policy.\n    Returns:\n        gesture cancel policy\n    \"\"\"\nreturn GESTURE_CANCEL_POLICY.inverse[self.gestureCancelPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/GestureMixin.html#prettyqt.widgets.gesture.GestureMixin.get_gesture_type","title":"<code>get_gesture_type() -&gt; constants.GestureTypeStr</code>","text":"<p>Return current gesture type.</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_gesture_type(self) -&gt; constants.GestureTypeStr:\n\"\"\"Return current gesture type.\n    Returns:\n        gesture type\n    \"\"\"\nreturn constants.GESTURE_TYPE.inverse[self.gestureType()]\n</code></pre>"},{"location":"qt_modules/widgets/GestureMixin.html#prettyqt.widgets.gesture.GestureMixin.get_state","title":"<code>get_state() -&gt; constants.GestureStateStr</code>","text":"<p>Return current state.</p> Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def get_state(self) -&gt; constants.GestureStateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn constants.GESTURE_STATE.inverse[self.state()]\n</code></pre>"},{"location":"qt_modules/widgets/GestureMixin.html#prettyqt.widgets.gesture.GestureMixin.set_gesture_cancel_policy","title":"<code>set_gesture_cancel_policy(policy: GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy)</code>","text":"<p>Set gesture cancel policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy</code> <p>gesture cancel policy to use</p> required Source code in <code>prettyqt\\widgets\\gesture.py</code> <pre><code>def set_gesture_cancel_policy(\nself, policy: GestureCancelPolicyStr | widgets.QGesture.GestureCancelPolicy\n):\n\"\"\"Set gesture cancel policy.\n    Args:\n        policy: gesture cancel policy to use\n    \"\"\"\nself.setGestureCancelPolicy(GESTURE_CANCEL_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/GestureMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/GraphicsAnchorLayout.html","title":"GraphicsAnchorLayout","text":"<p>Qt Base Class: QGraphicsAnchorLayout</p> <p>Signature: <code>QGraphicsAnchorLayout(self, parent: Optional[PySide6.QtWidgets.QGraphicsLayoutItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsAnchorLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsLayoutMixin</code>, <code>widgets.QGraphicsAnchorLayout</code></p> Source code in <code>prettyqt\\widgets\\graphicsanchorlayout.py</code> <pre><code>class GraphicsAnchorLayout(widgets.GraphicsLayoutMixin, widgets.QGraphicsAnchorLayout):\ndef add_anchor(\nself,\nfirst_item: widgets.QGraphicsLayoutItem,\nfirst_edge: constants.AnchorPointStr,\nsecond_item: widgets.QGraphicsLayoutItem,\nsecond_edge: constants.AnchorPointStr,\n) -&gt; widgets.QGraphicsAnchor:\nreturn self.addAnchor(\nfirst_item,\nconstants.ANCHOR_POINT[first_edge],\nsecond_item,\nconstants.ANCHOR_POINT[second_edge],\n)\ndef get_anchor(\nself,\nfirst_item: widgets.QGraphicsLayoutItem,\nfirst_edge: constants.AnchorPointStr,\nsecond_item: widgets.QGraphicsLayoutItem,\nsecond_edge: constants.AnchorPointStr,\n) -&gt; widgets.QGraphicsAnchor:\nreturn self.anchor(\nfirst_item,\nconstants.ANCHOR_POINT[first_edge],\nsecond_item,\nconstants.ANCHOR_POINT[second_edge],\n)\ndef add_anchors(\nself,\nfirst_item: widgets.QGraphicsLayoutItem,\nsecond_item: widgets.QGraphicsLayoutItem,\norientation: constants.OrientationStr | constants.Orientation,\n):\nself.addAnchors(\nfirst_item, second_item, constants.ORIENTATION.get_enum_value(orientation)\n)\ndef add_corner_anchors(\nself,\nfirst_item: widgets.QGraphicsLayoutItem,\nfirst_corner: constants.CornerStr,\nsecond_item: widgets.QGraphicsLayoutItem,\nsecond_corner: constants.CornerStr,\n):\nself.addCornerAnchors(\nfirst_item,\nconstants.CORNER[first_corner],\nsecond_item,\nconstants.CORNER[second_corner],\n)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsAnchorLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261190720[\"widgets.GraphicsAnchorLayout\"]\n  2103261156160[\"widgets.GraphicsLayoutMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259670000[\"QtWidgets.QGraphicsAnchorLayout\"]\n  2103259669040[\"QtWidgets.QGraphicsLayout\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261156160 --&gt; 2103261190720\n  2103261149440 --&gt; 2103261156160\n  140736120080256 --&gt; 2103261149440\n  2103259670000 --&gt; 2103261190720\n  2103259669040 --&gt; 2103259670000\n  2103259646960 --&gt; 2103259669040\n  2103206874128 --&gt; 2103259646960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsBlurEffect.html","title":"GraphicsBlurEffect","text":"<p>Qt Base Class: QGraphicsBlurEffect</p> <p>Signature: <code>QGraphicsBlurEffect(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsBlurEffect.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsEffectMixin</code>, <code>widgets.QGraphicsBlurEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicsblureffect.py</code> <pre><code>class GraphicsBlurEffect(widgets.GraphicsEffectMixin, widgets.QGraphicsBlurEffect):\ndef set_blur_hints(self, *hints: BlurHintStr):\nif hints:\nflags = BLUR_HINTS.merge_flags(hints)\nelse:\nflags = widgets.QGraphicsBlurEffect.BlurHint(0)  # type: ignore\nself.setBlurHints(flags)\ndef get_blur_hints(self) -&gt; list[BlurHintStr]:\nreturn BLUR_HINTS.get_list(self.blurHints())\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsBlurEffect.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261160000[\"widgets.GraphicsBlurEffect\"]\n  2103261166720[\"widgets.GraphicsEffectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261065920[\"QtWidgets.QGraphicsBlurEffect\"]\n  2103260150736[\"QtWidgets.QGraphicsEffect\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261166720 --&gt; 2103261160000\n  2103255067472 --&gt; 2103261166720\n  140736120080256 --&gt; 2103255067472\n  2103261065920 --&gt; 2103261160000\n  2103260150736 --&gt; 2103261065920\n  2103254677056 --&gt; 2103260150736\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsBlurEffect.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>enabled</code> bool <code>blurRadius</code> double <code>blurHints</code> QFlags"},{"location":"qt_modules/widgets/GraphicsColorizeEffect.html","title":"GraphicsColorizeEffect","text":"<p>Qt Base Class: QGraphicsColorizeEffect</p> <p>Signature: <code>QGraphicsColorizeEffect(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsColorizeEffect.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsEffectMixin</code>, <code>widgets.QGraphicsColorizeEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicscolorizeeffect.py</code> <pre><code>class GraphicsColorizeEffect(\nwidgets.GraphicsEffectMixin, widgets.QGraphicsColorizeEffect\n):\ndef set_color(self, color: datatypes.ColorType):\ncolor = colors.get_color(color)\nsuper().setColor(color)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsColorizeEffect.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261160960[\"widgets.GraphicsColorizeEffect\"]\n  2103261166720[\"widgets.GraphicsEffectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261041920[\"QtWidgets.QGraphicsColorizeEffect\"]\n  2103260150736[\"QtWidgets.QGraphicsEffect\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261166720 --&gt; 2103261160960\n  2103255067472 --&gt; 2103261166720\n  140736120080256 --&gt; 2103255067472\n  2103261041920 --&gt; 2103261160960\n  2103260150736 --&gt; 2103261041920\n  2103254677056 --&gt; 2103260150736\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsColorizeEffect.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>enabled</code> bool <code>color</code> QColor <code>strength</code> double"},{"location":"qt_modules/widgets/GraphicsDropShadowEffect.html","title":"GraphicsDropShadowEffect","text":"<p>Qt Base Class: QGraphicsDropShadowEffect</p> <p>Signature: <code>QGraphicsDropShadowEffect(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsDropShadowEffect.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsEffectMixin</code>, <code>widgets.QGraphicsDropShadowEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicsdropshadoweffect.py</code> <pre><code>class GraphicsDropShadowEffect(\nwidgets.GraphicsEffectMixin, widgets.QGraphicsDropShadowEffect\n):\npass\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsDropShadowEffect.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261186880[\"widgets.GraphicsDropShadowEffect\"]\n  2103261166720[\"widgets.GraphicsEffectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261064000[\"QtWidgets.QGraphicsDropShadowEffect\"]\n  2103260150736[\"QtWidgets.QGraphicsEffect\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261166720 --&gt; 2103261186880\n  2103255067472 --&gt; 2103261166720\n  140736120080256 --&gt; 2103255067472\n  2103261064000 --&gt; 2103261186880\n  2103260150736 --&gt; 2103261064000\n  2103254677056 --&gt; 2103260150736\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsDropShadowEffect.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>enabled</code> bool <code>offset</code> QPointF <code>xOffset</code> double <code>yOffset</code> double <code>blurRadius</code> double <code>color</code> QColor"},{"location":"qt_modules/widgets/GraphicsEffect.html","title":"GraphicsEffect","text":"<p>Qt Base Class: QGraphicsEffect</p> <p>Signature: <code>QGraphicsEffect(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsEffect.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsEffectMixin</code>, <code>QtWidgets.QGraphicsEffect</code></p> <p>The base class for all graphics effects.</p> Source code in <code>prettyqt\\widgets\\graphicseffect.py</code> <pre><code>class GraphicsEffect(GraphicsEffectMixin, QtWidgets.QGraphicsEffect):\n\"\"\"The base class for all graphics effects.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsEffect.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261171520[\"widgets.GraphicsEffect\"]\n  2103261166720[\"widgets.GraphicsEffectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260150736[\"QtWidgets.QGraphicsEffect\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261166720 --&gt; 2103261171520\n  2103255067472 --&gt; 2103261166720\n  140736120080256 --&gt; 2103255067472\n  2103260150736 --&gt; 2103261171520\n  2103254677056 --&gt; 2103260150736\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsEffect.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>enabled</code> bool"},{"location":"qt_modules/widgets/GraphicsEffectMixin.html","title":"GraphicsEffectMixin","text":""},{"location":"qt_modules/widgets/GraphicsEffectMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicseffect.py</code> <pre><code>class GraphicsEffectMixin(core.ObjectMixin):\npass\n</code></pre> Name Children Inherits GraphicsEffectprettyqt.widgets.graphicseffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsEffect</li></ul> GraphicsBlurEffectprettyqt.widgets.graphicsblureffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsBlurEffect</li></ul> GraphicsColorizeEffectprettyqt.widgets.graphicscolorizeeffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsColorizeEffect</li></ul> GraphicsDropShadowEffectprettyqt.widgets.graphicsdropshadoweffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsDropShadowEffect</li></ul> GraphicsOpacityEffectprettyqt.widgets.graphicsopacityeffect <ul><li>GraphicsEffectMixin</li><li>QGraphicsOpacityEffect</li></ul>"},{"location":"qt_modules/widgets/GraphicsEffectMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261166720[\"widgets.GraphicsEffectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261166720\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/GraphicsEllipseItem.html","title":"GraphicsEllipseItem","text":"<p>Qt Base Class: QGraphicsEllipseItem</p> <p>Signature: <code>QGraphicsEllipseItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsEllipseItem(self, rect: Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect], parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsEllipseItem(self, x: float, y: float, w: float, h: float, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsEllipseItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>widgets.QGraphicsEllipseItem</code></p> <p>Ellipse item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicsellipseitem.py</code> <pre><code>class GraphicsEllipseItem(\nwidgets.AbstractGraphicsShapeItemMixin, widgets.QGraphicsEllipseItem\n):\n\"\"\"Ellipse item that you can add to a QGraphicsScene.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_rect())\ndef get_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.rect())\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsEllipseItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261165760[\"widgets.GraphicsEllipseItem\"]\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259685360[\"QtWidgets.QGraphicsEllipseItem\"]\n  2103259687280[\"QtWidgets.QAbstractGraphicsShapeItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261158080 --&gt; 2103261165760\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280\n  2103259685360 --&gt; 2103261165760\n  2103259687280 --&gt; 2103259685360\n  2103259670960 --&gt; 2103259687280\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsGridLayout.html","title":"GraphicsGridLayout","text":"<p>Qt Base Class: QGraphicsGridLayout</p> <p>Signature: <code>QGraphicsGridLayout(self, parent: Optional[PySide6.QtWidgets.QGraphicsLayoutItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsGridLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsLayoutMixin</code>, <code>widgets.QGraphicsGridLayout</code></p> <p>Grid layout for managing widgets in Graphics View.</p> Source code in <code>prettyqt\\widgets\\graphicsgridlayout.py</code> <pre><code>class GraphicsGridLayout(widgets.GraphicsLayoutMixin, widgets.QGraphicsGridLayout):\n\"\"\"Grid layout for managing widgets in Graphics View.\"\"\"\ndef __getitem__(\nself, index: tuple[int | slice, int | slice] | int\n) -&gt; widgets.QGraphicsLayoutItem | None:\nrowcount = self.rowCount()\ncolcount = self.columnCount()\nmatch index:\ncase int() as row, int() as col:\nif row &gt;= rowcount or col &gt;= rowcount:\nraise IndexError(index)\nreturn self.itemAt(row, col)\ncase (row, col):\nitems = [\nitem\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount)\nif (item := self.itemAt(i, j)) is not None\n]\nreturn listdelegators.ListDelegator(list(set(items)))\ncase int() as row:\nif row &gt;= rowcount:\nraise IndexError(index)\nreturn self.itemAt(row)\ncase slice() as rowslice:\ncount = rowcount if rowslice.stop is None else rowslice.stop\nitems = [self.itemAt(i) for i in range(count)[rowslice]]\nreturn listdelegators.ListDelegator(list(set(item)))\ncase str():\nreturn self.find_child(widgets.QGraphicsWidget, index)\ncase _:\nraise TypeError(index)\ndef __setitem__(\nself,\nidx: tuple[int | slice, int | slice],\nvalue: widgets.QGraphicsLayoutItem,\n):\nrow, col = idx\nrowspan = row.stop - row.start + 1 if isinstance(row, slice) else 1\ncolspan = col.stop - col.start + 1 if isinstance(col, slice) else 1\nrowstart = row.start if isinstance(row, slice) else row\ncolstart = col.start if isinstance(col, slice) else col\nself.add(value, rowstart, colstart, rowspan, colspan)\ndef serialize_fields(self):\nitems = []\npositions = []\nfor row in range(self.rowCount()):\nfor col in range(self.columnCount()):\nitem = self.itemAt(row, col)\nif item is not None:\nitems.append(item)\npositions.append((row, col))\nreturn dict(widgets=items, positions=positions)\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef __setstate__(self, state):\nfor item, pos in zip(state[\"widgets\"], state[\"positions\"]):\nx, y, w, h = pos\nself[x : x + w - 1, y : y + h - 1] = item\ndef __iter__(self) -&gt; Iterator[widgets.QWidget | widgets.QLayout]:\nreturn iter(self[i] for i in range(self.count()) if self[i] is not None)\ndef __add__(\nself,\nother: (Iterable[widgets.QGraphicsLayoutItem] | widgets.QGraphicsLayoutItem),\n):\nif isinstance(other, Iterable):\nfor i, control in enumerate(other):\nself[self.rowCount(), i] = control\nelse:\nself[self.rowCount(), 0 : self.columnCount() - 1] = other\nreturn self\ndef add(\nself,\nitem: widgets.QGraphicsLayoutItem,\nrowstart: int,\ncolstart: int,\nrowspan: int = 1,\ncolspan: int = 1,\n):\nself.addItem(item, rowstart, colstart, rowspan, colspan)\ndef append(self, item: widgets.QGraphicsLayoutItem):\nself[self.rowCount(), 0 : self.columnCount() - 1] = item\ndef set_column_alignment(\nself, column: int, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\nself.setColumnAlignment(column, constants.ALIGNMENTS.get_enum_value(alignment))\ndef set_row_alignment(\nself, row: int, alignment: constants.AlignmentStr | constants.AlignmentFlag\n):\nself.setRowAlignment(row, constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsGridLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261151360[\"widgets.GraphicsGridLayout\"]\n  2103261156160[\"widgets.GraphicsLayoutMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259660400[\"QtWidgets.QGraphicsGridLayout\"]\n  2103259669040[\"QtWidgets.QGraphicsLayout\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261156160 --&gt; 2103261151360\n  2103261149440 --&gt; 2103261156160\n  140736120080256 --&gt; 2103261149440\n  2103259660400 --&gt; 2103261151360\n  2103259669040 --&gt; 2103259660400\n  2103259646960 --&gt; 2103259669040\n  2103206874128 --&gt; 2103259646960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsItem.html","title":"GraphicsItem","text":"<p>Qt Base Class: QGraphicsItem</p> <p>Signature: <code>QGraphicsItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsItemMixin</code>, <code>QtWidgets.QGraphicsItem</code></p> <p>The base class for all graphical items in a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>class GraphicsItem(GraphicsItemMixin, QtWidgets.QGraphicsItem):\n\"\"\"The base class for all graphical items in a QGraphicsScene.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261139840[\"widgets.GraphicsItem\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261153280 --&gt; 2103261139840\n  140736120080256 --&gt; 2103261153280\n  2103259670960 --&gt; 2103261139840\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemGroup.html","title":"GraphicsItemGroup","text":"<p>Qt Base Class: QGraphicsItemGroup</p> <p>Signature: <code>QGraphicsItemGroup(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsItemGroup.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsItemMixin</code>, <code>widgets.QGraphicsItemGroup</code></p> <p>Container that treats a group of items as a single item.</p> Source code in <code>prettyqt\\widgets\\graphicsitemgroup.py</code> <pre><code>class GraphicsItemGroup(widgets.GraphicsItemMixin, widgets.QGraphicsItemGroup):\n\"\"\"Container that treats a group of items as a single item.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemGroup.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261140800[\"widgets.GraphicsItemGroup\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259682480[\"QtWidgets.QGraphicsItemGroup\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261153280 --&gt; 2103261140800\n  140736120080256 --&gt; 2103261153280\n  2103259682480 --&gt; 2103261140800\n  2103259670960 --&gt; 2103259682480\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemMixin.html","title":"GraphicsItemMixin","text":""},{"location":"qt_modules/widgets/GraphicsItemMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>class GraphicsItemMixin:\ndef __repr__(self):\nreturn get_repr(self)\ndef __contains__(self, value: QtCore.QPointF) -&gt; bool:\nreturn self.contains(value)\ndef __getitem__(self, key: int):\nreturn self.data(key)\ndef __setitem__(self, key: int, value):\nself.setData(key, value)\ndef set_focus(\nself, reason: constants.FocusReasonStr | constants.FocusReason = \"other\"\n):\nself.setFocus(constants.FOCUS_REASONS.get_enum_value(reason))\ndef colliding_items(\nself,\nmode: constants.ItemSelectionModeStr\n| constants.ItemSelectionMode = \"intersects_shape\",\n) -&gt; listdelegators.ListDelegator[QtWidgets.QGraphicsItem]:\nitems = self.collidingItems(constants.ITEM_SELECTION_MODE.get_enum_value(mode))\nreturn listdelegators.ListDelegator(items)\ndef collides_with(\nself,\nitem: gui.QPainterPath | QtWidgets.QGraphicsItem,\nmode: constants.ItemSelectionModeStr\n| constants.ItemSelectionMode = \"intersects_shape\",\n) -&gt; bool:\nif isinstance(item, gui.QPainterPath):\nreturn self.collidesWithPath(\nitem, constants.ITEM_SELECTION_MODE.get_enum_value(mode)\n)\nelse:\nreturn self.collidesWithItem(\nitem, constants.ITEM_SELECTION_MODE.get_enum_value(mode)\n)\ndef set_panel_modality(\nself, modality: PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality\n):\n\"\"\"Set panel modality.\n        Args:\n            modality: panel modality\n        \"\"\"\nself.setPanelModality(PANEL_MODALITY.get_enum_value(modality))\ndef get_panel_modality(self) -&gt; PanelModalityStr:\n\"\"\"Get the current modality modes as a string.\n        Returns:\n            panel modality\n        \"\"\"\nreturn PANEL_MODALITY.inverse[self.panelModality()]\ndef set_cache_mode(self, mode: CacheModeStr | QtWidgets.QGraphicsItem.CacheMode):\n\"\"\"Set cache mode.\n        Args:\n            mode: cache mode\n        \"\"\"\nself.setCacheMode(CACHE_MODE.get_enum_value(mode))\ndef get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current mode modes as a string.\n        Returns:\n            cache mode\n        \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\ndef get_shape(self) -&gt; gui.PainterPath:\nreturn gui.PainterPath(self.shape())\ndef set_scale(self, scale: tuple[float, float] | float):\nif isinstance(scale, float):\nself.setScale(scale)\nelse:\nself.setTransform(gui.Transform.fromScale(scale[0], scale[1]), True)\ndef set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nif isinstance(transform, tuple):\ntransform = gui.Transform(*transform)\nself.setTransform(transform, combine)\n</code></pre> Name Children Inherits GraphicsItemprettyqt.widgets.graphicsitem <ul><li>GraphicsItemMixin</li><li>QGraphicsItem</li></ul> GraphicsItemGroupprettyqt.widgets.graphicsitemgroup <ul><li>GraphicsItemMixin</li><li>QGraphicsItemGroup</li></ul> AbstractGraphicsShapeItemMixinprettyqt.widgets.abstractgraphicsshapeitem <ul><li>AbstractGraphicsShapeItem</li><li>GraphicsRectItem</li><li>GraphicsSimpleTextItem</li><li>GraphicsPolygonItem</li><li>GraphicsEllipseItem</li><li>GraphicsPathItem</li></ul> <ul><li>GraphicsItemMixin</li></ul> GraphicsPixmapItemprettyqt.widgets.graphicspixmapitem <ul><li>GraphicsItemMixin</li><li>QGraphicsPixmapItem</li></ul> GraphicsObjectMixinprettyqt.widgets.graphicsobject <ul><li>GraphicsObject</li><li>GraphicsTextItem</li><li>GraphicsWidgetMixin</li><li>GraphicsVideoItem</li><li>GraphicsSvgItem</li></ul> <ul><li>ObjectMixin</li><li>GraphicsItemMixin</li></ul> GraphicsLineItemprettyqt.widgets.graphicslineitem <ul><li>GraphicsItemMixin</li><li>QGraphicsLineItem</li></ul>"},{"location":"qt_modules/widgets/GraphicsItemMixin.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Get the current mode modes as a string.</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Get the current mode modes as a string.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODE.inverse[self.cacheMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemMixin.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.get_panel_modality","title":"<code>get_panel_modality() -&gt; PanelModalityStr</code>","text":"<p>Get the current modality modes as a string.</p> Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def get_panel_modality(self) -&gt; PanelModalityStr:\n\"\"\"Get the current modality modes as a string.\n    Returns:\n        panel modality\n    \"\"\"\nreturn PANEL_MODALITY.inverse[self.panelModality()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemMixin.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr | QtWidgets.QGraphicsItem.CacheMode)</code>","text":"<p>Set cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr | QtWidgets.QGraphicsItem.CacheMode</code> <p>cache mode</p> required Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr | QtWidgets.QGraphicsItem.CacheMode):\n\"\"\"Set cache mode.\n    Args:\n        mode: cache mode\n    \"\"\"\nself.setCacheMode(CACHE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemMixin.html#prettyqt.widgets.graphicsitem.GraphicsItemMixin.set_panel_modality","title":"<code>set_panel_modality(modality: PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality)</code>","text":"<p>Set panel modality.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality</code> <p>panel modality</p> required Source code in <code>prettyqt\\widgets\\graphicsitem.py</code> <pre><code>def set_panel_modality(\nself, modality: PanelModalityStr | QtWidgets.QGraphicsItem.PanelModality\n):\n\"\"\"Set panel modality.\n    Args:\n        modality: panel modality\n    \"\"\"\nself.setPanelModality(PANEL_MODALITY.get_enum_value(modality))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsItemMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261153280</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayout.html","title":"GraphicsLayout","text":"<p>Qt Base Class: QGraphicsLayout</p> <p>Signature: <code>QGraphicsLayout(self, parent: Optional[PySide6.QtWidgets.QGraphicsLayoutItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsLayoutMixin</code>, <code>widgets.QGraphicsLayout</code></p> <p>The base class for all layouts in Graphics View.</p> Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>class GraphicsLayout(GraphicsLayoutMixin, widgets.QGraphicsLayout):\n\"\"\"The base class for all layouts in Graphics View.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261154240[\"widgets.GraphicsLayout\"]\n  2103261156160[\"widgets.GraphicsLayoutMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259669040[\"QtWidgets.QGraphicsLayout\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261156160 --&gt; 2103261154240\n  2103261149440 --&gt; 2103261156160\n  140736120080256 --&gt; 2103261149440\n  2103259669040 --&gt; 2103261154240\n  2103259646960 --&gt; 2103259669040\n  2103206874128 --&gt; 2103259646960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayoutItem.html","title":"GraphicsLayoutItem","text":"<p>Qt Base Class: QGraphicsLayoutItem</p> <p>Signature: <code>QGraphicsLayoutItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsLayoutItem] = None, isLayout: bool = False) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsLayoutItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsLayoutItemMixin</code>, <code>widgets.QGraphicsLayoutItem</code></p> <p>Can be inherited to allow your custom items to be managed by layouts.</p> Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>class GraphicsLayoutItem(GraphicsLayoutItemMixin, widgets.QGraphicsLayoutItem):\n\"\"\"Can be inherited to allow your custom items to be managed by layouts.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayoutItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261150400[\"widgets.GraphicsLayoutItem\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261149440 --&gt; 2103261150400\n  140736120080256 --&gt; 2103261149440\n  2103259646960 --&gt; 2103261150400\n  2103206874128 --&gt; 2103259646960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayoutItemMixin.html","title":"GraphicsLayoutItemMixin","text":""},{"location":"qt_modules/widgets/GraphicsLayoutItemMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>class GraphicsLayoutItemMixin:\ndef __repr__(self):\nreturn get_repr(self)\ndef __bool__(self):\nreturn not self.isEmpty()\n@functools.singledispatchmethod\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr,\nvertical: widgets.sizepolicy.SizePolicyStr,\ncontrol_type: widgets.sizepolicy.ControlTypeStr = \"default\",\n):\n\"\"\"Set the size policy.\n        Args:\n            horizontal: horizontal size policy\n            vertical: vertical size policy\n            control_type: control type associated with the widget\n        \"\"\"\nh_policy = widgets.sizepolicy.SIZE_POLICY[horizontal]\nv_policy = widgets.sizepolicy.SIZE_POLICY[vertical]\nc = widgets.sizepolicy.CONTROL_TYPE[control_type]\nself.setSizePolicy(h_policy, v_policy, c)\n@set_size_policy.register\ndef _(self, policy: widgets.QSizePolicy):\nself.setSizePolicy(policy)\ndef get_size_policy(self) -&gt; widgets.SizePolicy:\nqpol = self.sizePolicy()\nreturn widgets.SizePolicy.clone(qpol)\n</code></pre> Name Children Inherits GraphicsLayoutItemprettyqt.widgets.graphicslayoutitem <ul><li>GraphicsLayoutItemMixin</li><li>QGraphicsLayoutItem</li></ul> GraphicsLayoutMixinprettyqt.widgets.graphicslayout <ul><li>GraphicsLayout</li><li>GraphicsGridLayout</li><li>GraphicsLinearLayout</li><li>GraphicsAnchorLayout</li></ul> <ul><li>GraphicsLayoutItemMixin</li></ul> GraphicsWidgetMixinprettyqt.widgets.graphicswidget <ul><li>GraphicsWidget</li><li>GraphicsProxyWidget</li><li>Legend</li><li>ChartMixin</li></ul> <ul><li>GraphicsObjectMixin</li><li>GraphicsLayoutItemMixin</li></ul>"},{"location":"qt_modules/widgets/GraphicsLayoutItemMixin.html#prettyqt.widgets.graphicslayoutitem.GraphicsLayoutItemMixin.set_size_policy","title":"<code>set_size_policy(horizontal: widgets.sizepolicy.SizePolicyStr, vertical: widgets.sizepolicy.SizePolicyStr, control_type: widgets.sizepolicy.ControlTypeStr = 'default')</code>","text":"<p>Set the size policy.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>widgets.sizepolicy.SizePolicyStr</code> <p>horizontal size policy</p> required <code>vertical</code> <code>widgets.sizepolicy.SizePolicyStr</code> <p>vertical size policy</p> required <code>control_type</code> <code>widgets.sizepolicy.ControlTypeStr</code> <p>control type associated with the widget</p> <code>'default'</code> Source code in <code>prettyqt\\widgets\\graphicslayoutitem.py</code> <pre><code>@functools.singledispatchmethod\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr,\nvertical: widgets.sizepolicy.SizePolicyStr,\ncontrol_type: widgets.sizepolicy.ControlTypeStr = \"default\",\n):\n\"\"\"Set the size policy.\n    Args:\n        horizontal: horizontal size policy\n        vertical: vertical size policy\n        control_type: control type associated with the widget\n    \"\"\"\nh_policy = widgets.sizepolicy.SIZE_POLICY[horizontal]\nv_policy = widgets.sizepolicy.SIZE_POLICY[vertical]\nc = widgets.sizepolicy.CONTROL_TYPE[control_type]\nself.setSizePolicy(h_policy, v_policy, c)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayoutItemMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261149440</code></pre>"},{"location":"qt_modules/widgets/GraphicsLayoutMixin.html","title":"GraphicsLayoutMixin","text":""},{"location":"qt_modules/widgets/GraphicsLayoutMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsLayoutItemMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicslayout.py</code> <pre><code>class GraphicsLayoutMixin(widgets.GraphicsLayoutItemMixin):\ndef __getitem__(\nself, index: int | slice\n) -&gt; widgets.QGraphicsItem | listdelegators.ListDelegator[widgets.QGraphicsItem]:\nmatch index:\ncase int():\nif index &gt;= self.count():\nraise IndexError(index)\nlayoutitem = self.itemAt(index)\nreturn layoutitem.graphicsItem()\ncase slice():\nstop = index.stop or self.count()\nrng = range(index.start or 0, stop, index.step or 1)\nitems = [self.itemAt(i).graphicsItem() for i in rng]\nreturn listdelegators.ListDelegator(items)\ncase _:\nraise TypeError(index)\ndef __setitem__(self, index: int, value: widgets.QGraphicsItem):\nlayoutitem = self.itemAt(index)\nlayoutitem.setGraphicsItem(value)\ndef __delitem__(self, index: int):\nself.removeAt(index)\ndef __iter__(self) -&gt; Iterator[widgets.QGraphicsItem]:\nreturn iter(self[i] for i in range(self.count()))\ndef __contains__(self, item):\nreturn item in self.get_children()\ndef __len__(self):\n# for PySide2\nreturn self.count()\ndef get_children(self) -&gt; listdelegators.ListDelegator[widgets.QGraphicsItem]:\nitems = [self.itemAt(i).graphicsItem() for i in range(self.count())]\nreturn listdelegators.ListDelegator(items)\ndef set_margin(self, margin: datatypes.MarginsType):\nm = datatypes.to_margins(margin)\nself.setContentsMargins(m.left(), m.top(), m.right(), m.bottom())\n</code></pre> Name Children Inherits GraphicsLayoutprettyqt.widgets.graphicslayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsLayout</li></ul> GraphicsGridLayoutprettyqt.widgets.graphicsgridlayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsGridLayout</li></ul> GraphicsLinearLayoutprettyqt.widgets.graphicslinearlayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsLinearLayout</li></ul> GraphicsAnchorLayoutprettyqt.widgets.graphicsanchorlayout <ul><li>GraphicsLayoutMixin</li><li>QGraphicsAnchorLayout</li></ul>"},{"location":"qt_modules/widgets/GraphicsLayoutMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261156160[\"widgets.GraphicsLayoutMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261149440 --&gt; 2103261156160\n  140736120080256 --&gt; 2103261149440</code></pre>"},{"location":"qt_modules/widgets/GraphicsLineItem.html","title":"GraphicsLineItem","text":"<p>Qt Base Class: QGraphicsLineItem</p> <p>Signature: <code>QGraphicsLineItem(self, line: Union[PySide6.QtCore.QLineF, PySide6.QtCore.QLine], parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsLineItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsLineItem(self, x1: float, y1: float, x2: float, y2: float, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsLineItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsItemMixin</code>, <code>widgets.QGraphicsLineItem</code></p> <p>Line item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicslineitem.py</code> <pre><code>class GraphicsLineItem(widgets.GraphicsItemMixin, widgets.QGraphicsLineItem):\n\"\"\"Line item that you can add to a QGraphicsScene.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_line())\ndef get_line(self) -&gt; core.LineF:\nreturn core.LineF(self.line())\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsLineItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261184000[\"widgets.GraphicsLineItem\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259681520[\"QtWidgets.QGraphicsLineItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261153280 --&gt; 2103261184000\n  140736120080256 --&gt; 2103261153280\n  2103259681520 --&gt; 2103261184000\n  2103259670960 --&gt; 2103259681520\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsLinearLayout.html","title":"GraphicsLinearLayout","text":"<p>Qt Base Class: QGraphicsLinearLayout</p> <p>Signature: <code>QGraphicsLinearLayout(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QGraphicsLayoutItem] = None) -&gt; None QGraphicsLinearLayout(self, parent: Optional[PySide6.QtWidgets.QGraphicsLayoutItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsLinearLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsLayoutMixin</code>, <code>widgets.QGraphicsLinearLayout</code></p> <p>Horizontal or vertical layout for managing widgets in Graphics View.</p> Source code in <code>prettyqt\\widgets\\graphicslinearlayout.py</code> <pre><code>class GraphicsLinearLayout(widgets.GraphicsLayoutMixin, widgets.QGraphicsLinearLayout):\n\"\"\"Horizontal or vertical layout for managing widgets in Graphics View.\"\"\"\ndef __init__(\nself,\norientation: constants.OrientationStr | constants.Orientation = \"horizontal\",\nparent: widgets.QGraphicsLayoutItem | None = None,\n):\nori = constants.ORIENTATION.get_enum_value(orientation)\nsuper().__init__(ori, parent)\ndef __add__(self, other):\nself[self.count()] = other\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsLinearLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261180160[\"widgets.GraphicsLinearLayout\"]\n  2103261156160[\"widgets.GraphicsLayoutMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259659440[\"QtWidgets.QGraphicsLinearLayout\"]\n  2103259669040[\"QtWidgets.QGraphicsLayout\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261156160 --&gt; 2103261180160\n  2103261149440 --&gt; 2103261156160\n  140736120080256 --&gt; 2103261149440\n  2103259659440 --&gt; 2103261180160\n  2103259669040 --&gt; 2103259659440\n  2103259646960 --&gt; 2103259669040\n  2103206874128 --&gt; 2103259646960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsObject.html","title":"GraphicsObject","text":"<p>Qt Base Class: QGraphicsObject</p> <p>Signature: <code>QGraphicsObject(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsObject.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsObjectMixin</code>, <code>widgets.QGraphicsObject</code></p> <p>Base class for all graphics items that require signals, slots and properties.</p> Source code in <code>prettyqt\\widgets\\graphicsobject.py</code> <pre><code>class GraphicsObject(GraphicsObjectMixin, widgets.QGraphicsObject):\n\"\"\"Base class for all graphics items that require signals, slots and properties.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsObject.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261146560[\"widgets.GraphicsObject\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103261145600 --&gt; 2103261146560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103260155536 --&gt; 2103261146560\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056</code></pre>"},{"location":"qt_modules/widgets/GraphicsObject.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double"},{"location":"qt_modules/widgets/GraphicsObjectMixin.html","title":"GraphicsObjectMixin","text":""},{"location":"qt_modules/widgets/GraphicsObjectMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>widgets.GraphicsItemMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicsobject.py</code> <pre><code>class GraphicsObjectMixin(core.ObjectMixin, widgets.GraphicsItemMixin):\npass\n</code></pre> Name Children Inherits GraphicsObjectprettyqt.widgets.graphicsobject <ul><li>GraphicsObjectMixin</li><li>QGraphicsObject</li></ul> GraphicsTextItemprettyqt.widgets.graphicstextitem <ul><li>GraphicsObjectMixin</li><li>QGraphicsTextItem</li></ul> GraphicsWidgetMixinprettyqt.widgets.graphicswidget <ul><li>GraphicsWidget</li><li>GraphicsProxyWidget</li><li>Legend</li><li>ChartMixin</li></ul> <ul><li>GraphicsObjectMixin</li><li>GraphicsLayoutItemMixin</li></ul> GraphicsVideoItemprettyqt.multimediawidgets.graphicsvideoitem <ul><li>GraphicsObjectMixin</li><li>QGraphicsVideoItem</li></ul> GraphicsSvgItemprettyqt.svgwidgets.graphicssvgitem <ul><li>GraphicsObjectMixin</li><li>QGraphicsSvgItem</li></ul>"},{"location":"qt_modules/widgets/GraphicsObjectMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280</code></pre>"},{"location":"qt_modules/widgets/GraphicsOpacityEffect.html","title":"GraphicsOpacityEffect","text":"<p>Qt Base Class: QGraphicsOpacityEffect</p> <p>Signature: <code>QGraphicsOpacityEffect(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsOpacityEffect.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsEffectMixin</code>, <code>widgets.QGraphicsOpacityEffect</code></p> Source code in <code>prettyqt\\widgets\\graphicsopacityeffect.py</code> <pre><code>class GraphicsOpacityEffect(widgets.GraphicsEffectMixin, widgets.QGraphicsOpacityEffect):\ndef get_opacity_mask(self) -&gt; gui.Brush:\nreturn gui.Brush(self.opacityMask())\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsOpacityEffect.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261167680[\"widgets.GraphicsOpacityEffect\"]\n  2103261166720[\"widgets.GraphicsEffectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261049600[\"QtWidgets.QGraphicsOpacityEffect\"]\n  2103260150736[\"QtWidgets.QGraphicsEffect\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261166720 --&gt; 2103261167680\n  2103255067472 --&gt; 2103261166720\n  140736120080256 --&gt; 2103255067472\n  2103261049600 --&gt; 2103261167680\n  2103260150736 --&gt; 2103261049600\n  2103254677056 --&gt; 2103260150736\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsOpacityEffect.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>enabled</code> bool <code>opacity</code> double <code>opacityMask</code> QBrush"},{"location":"qt_modules/widgets/GraphicsPathItem.html","title":"GraphicsPathItem","text":"<p>Qt Base Class: QGraphicsPathItem</p> <p>Signature: <code>QGraphicsPathItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsPathItem(self, path: PySide6.QtGui.QPainterPath, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsPathItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>widgets.QGraphicsPathItem</code></p> <p>Path item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicspathitem.py</code> <pre><code>class GraphicsPathItem(widgets.AbstractGraphicsShapeItemMixin, widgets.QGraphicsPathItem):\n\"\"\"Path item that you can add to a QGraphicsScene.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPathItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261175360[\"widgets.GraphicsPathItem\"]\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259689200[\"QtWidgets.QGraphicsPathItem\"]\n  2103259687280[\"QtWidgets.QAbstractGraphicsShapeItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261158080 --&gt; 2103261175360\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280\n  2103259689200 --&gt; 2103261175360\n  2103259687280 --&gt; 2103259689200\n  2103259670960 --&gt; 2103259687280\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html","title":"GraphicsPixmapItem","text":"<p>Qt Base Class: QGraphicsPixmapItem</p> <p>Signature: <code>QGraphicsPixmapItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsPixmapItem(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str], parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsItemMixin</code>, <code>widgets.QGraphicsPixmapItem</code></p> <p>Pixmap item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>class GraphicsPixmapItem(widgets.GraphicsItemMixin, widgets.QGraphicsPixmapItem):\n\"\"\"Pixmap item that you can add to a QGraphicsScene.\"\"\"\ndef set_transformation_mode(\nself, mode: constants.TransformationModeStr | constants.TransformationMode\n):\n\"\"\"Set transformation mode.\n        Args:\n            mode: transformation mode to use\n        \"\"\"\nself.setTransformationMode(constants.TRANSFORMATION_MODE.get_enum_value(mode))\ndef get_transformation_mode(self) -&gt; constants.TransformationModeStr:\n\"\"\"Return current transformation mode.\n        Returns:\n            transformation mode\n        \"\"\"\nreturn constants.TRANSFORMATION_MODE.inverse[self.transformationMode()]\ndef set_shape_mode(self, mode: ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode):\n\"\"\"Set shape mode.\n        Args:\n            mode: shape mode to use\n        \"\"\"\nself.setShapeMode(SHAPE_MODE.get_enum_value(mode))\ndef get_shape_mode(self) -&gt; ShapeModeStr:\n\"\"\"Return current shape mode.\n        Returns:\n            shape mode\n        \"\"\"\nreturn SHAPE_MODE.inverse[self.shapeMode()]\ndef get_pixmap(self) -&gt; gui.Pixmap | None:\npix = self.pixmap()\nreturn None if pix.isNull() else gui.Pixmap(pix)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_shape_mode","title":"<code>get_shape_mode() -&gt; ShapeModeStr</code>","text":"<p>Return current shape mode.</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_shape_mode(self) -&gt; ShapeModeStr:\n\"\"\"Return current shape mode.\n    Returns:\n        shape mode\n    \"\"\"\nreturn SHAPE_MODE.inverse[self.shapeMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.get_transformation_mode","title":"<code>get_transformation_mode() -&gt; constants.TransformationModeStr</code>","text":"<p>Return current transformation mode.</p> Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def get_transformation_mode(self) -&gt; constants.TransformationModeStr:\n\"\"\"Return current transformation mode.\n    Returns:\n        transformation mode\n    \"\"\"\nreturn constants.TRANSFORMATION_MODE.inverse[self.transformationMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.set_shape_mode","title":"<code>set_shape_mode(mode: ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode)</code>","text":"<p>Set shape mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode</code> <p>shape mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def set_shape_mode(self, mode: ShapeModeStr | widgets.QGraphicsPixmapItem.ShapeMode):\n\"\"\"Set shape mode.\n    Args:\n        mode: shape mode to use\n    \"\"\"\nself.setShapeMode(SHAPE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html#prettyqt.widgets.graphicspixmapitem.GraphicsPixmapItem.set_transformation_mode","title":"<code>set_transformation_mode(mode: constants.TransformationModeStr | constants.TransformationMode)</code>","text":"<p>Set transformation mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.TransformationModeStr | constants.TransformationMode</code> <p>transformation mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicspixmapitem.py</code> <pre><code>def set_transformation_mode(\nself, mode: constants.TransformationModeStr | constants.TransformationMode\n):\n\"\"\"Set transformation mode.\n    Args:\n        mode: transformation mode to use\n    \"\"\"\nself.setTransformationMode(constants.TRANSFORMATION_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPixmapItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261144640[\"widgets.GraphicsPixmapItem\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259677680[\"QtWidgets.QGraphicsPixmapItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261153280 --&gt; 2103261144640\n  140736120080256 --&gt; 2103261153280\n  2103259677680 --&gt; 2103261144640\n  2103259670960 --&gt; 2103259677680\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsPolygonItem.html","title":"GraphicsPolygonItem","text":"<p>Qt Base Class: QGraphicsPolygonItem</p> <p>Signature: <code>QGraphicsPolygonItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsPolygonItem(self, polygon: Union[PySide6.QtGui.QPolygonF, Sequence[PySide6.QtCore.QPointF], PySide6.QtGui.QPolygon, PySide6.QtCore.QRectF], parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsPolygonItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>widgets.QGraphicsPolygonItem</code></p> <p>Polygon item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicspolygonitem.py</code> <pre><code>class GraphicsPolygonItem(\nwidgets.AbstractGraphicsShapeItemMixin, widgets.QGraphicsPolygonItem\n):\n\"\"\"Polygon item that you can add to a QGraphicsScene.\"\"\"\ndef get_polygon(self) -&gt; gui.PolygonF:\nreturn gui.PolygonF(self.polygon())\ndef set_fill_rule(self, rule: constants.FillRuleStr | constants.FillRule):\nself.setFillRule(constants.FILL_RULE.get_enum_value(rule))\ndef get_fill_rule(self) -&gt; constants.FillRuleStr:\nreturn constants.FILL_RULE.inverse[self.fillRule()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsPolygonItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261185920[\"widgets.GraphicsPolygonItem\"]\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259684400[\"QtWidgets.QGraphicsPolygonItem\"]\n  2103259687280[\"QtWidgets.QAbstractGraphicsShapeItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261158080 --&gt; 2103261185920\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280\n  2103259684400 --&gt; 2103261185920\n  2103259687280 --&gt; 2103259684400\n  2103259670960 --&gt; 2103259687280\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsProxyWidget.html","title":"GraphicsProxyWidget","text":"<p>Qt Base Class: QGraphicsProxyWidget</p> <p>Signature: <code>QGraphicsProxyWidget(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None, wFlags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsProxyWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsWidgetMixin</code>, <code>widgets.QGraphicsProxyWidget</code></p> <p>Proxy layer for embedding a QWidget in a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicsproxywidget.py</code> <pre><code>class GraphicsProxyWidget(widgets.GraphicsWidgetMixin, widgets.QGraphicsProxyWidget):\n\"\"\"Proxy layer for embedding a QWidget in a QGraphicsScene.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsProxyWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261178240[\"widgets.GraphicsProxyWidget\"]\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103260152656[\"QtWidgets.QGraphicsProxyWidget\"]\n  2103260153616[\"QtWidgets.QGraphicsWidget\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103261170560 --&gt; 2103261178240\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440\n  2103260152656 --&gt; 2103261178240\n  2103260153616 --&gt; 2103260152656\n  2103260155536 --&gt; 2103260153616\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056\n  2103259646960 --&gt; 2103260153616\n  2103206874128 --&gt; 2103259646960</code></pre>"},{"location":"qt_modules/widgets/GraphicsProxyWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double <code>palette</code> QPalette <code>font</code> QFont <code>layoutDirection</code> Qt::LayoutDirection <code>size</code> QSizeF <code>minimumSize</code> QSizeF <code>preferredSize</code> QSizeF <code>maximumSize</code> QSizeF <code>sizePolicy</code> QSizePolicy <code>focusPolicy</code> Qt::FocusPolicy <code>windowFlags</code> QFlags <code>windowTitle</code> QString <code>geometry</code> QRectF <code>autoFillBackground</code> bool <code>layout</code> QGraphicsLayout"},{"location":"qt_modules/widgets/GraphicsRectItem.html","title":"GraphicsRectItem","text":"<p>Qt Base Class: QGraphicsRectItem</p> <p>Signature: <code>QGraphicsRectItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsRectItem(self, rect: Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect], parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsRectItem(self, x: float, y: float, w: float, h: float, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsRectItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>widgets.QGraphicsRectItem</code></p> <p>Rectangle item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicsrectitem.py</code> <pre><code>class GraphicsRectItem(widgets.AbstractGraphicsShapeItemMixin, widgets.QGraphicsRectItem):\n\"\"\"Rectangle item that you can add to a QGraphicsScene.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.get_rect())\ndef get_rect(self) -&gt; core.RectF:\nreturn core.RectF(self.rect())\ndef serialize_fields(self):\nreturn dict(rect=self.get_rect())\ndef __setstate__(self, state):\nsuper().__setstate__(state)\nself.setRect(state[\"rect\"])\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsRectItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261188800[\"widgets.GraphicsRectItem\"]\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259694960[\"QtWidgets.QGraphicsRectItem\"]\n  2103259687280[\"QtWidgets.QAbstractGraphicsShapeItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261158080 --&gt; 2103261188800\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280\n  2103259694960 --&gt; 2103261188800\n  2103259687280 --&gt; 2103259694960\n  2103259670960 --&gt; 2103259687280\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsRotation.html","title":"GraphicsRotation","text":"<p>Qt Base Class: QGraphicsRotation</p> <p>Signature: <code>QGraphicsRotation(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsRotation.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsTransformMixin</code>, <code>widgets.QGraphicsRotation</code></p> <p>Rotation transformation around a given axis.</p> Source code in <code>prettyqt\\widgets\\graphicsrotation.py</code> <pre><code>class GraphicsRotation(widgets.GraphicsTransformMixin, widgets.QGraphicsRotation):\n\"\"\"Rotation transformation around a given axis.\"\"\"\ndef set_axis(self, axis: constants.AxisStr | constants.Axis):\nself.setAxis(constants.AXIS.get_enum_value(axis))\ndef set_origin(self, origin: datatypes.Vector3DType):\nself.setOrigin(datatypes.to_vector3d(origin))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsRotation.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261157120[\"widgets.GraphicsRotation\"]\n  2103261138880[\"widgets.GraphicsTransformMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260165136[\"QtWidgets.QGraphicsRotation\"]\n  2103260156496[\"QtWidgets.QGraphicsTransform\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261138880 --&gt; 2103261157120\n  2103255067472 --&gt; 2103261138880\n  140736120080256 --&gt; 2103255067472\n  2103260165136 --&gt; 2103261157120\n  2103260156496 --&gt; 2103260165136\n  2103254677056 --&gt; 2103260156496\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsRotation.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>origin</code> QVector3D <code>angle</code> double <code>axis</code> QVector3D"},{"location":"qt_modules/widgets/GraphicsScale.html","title":"GraphicsScale","text":"<p>Qt Base Class: QGraphicsScale</p> <p>Signature: <code>QGraphicsScale(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsScale.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsTransformMixin</code>, <code>widgets.QGraphicsScale</code></p> Source code in <code>prettyqt\\widgets\\graphicsscale.py</code> <pre><code>class GraphicsScale(widgets.GraphicsTransformMixin, widgets.QGraphicsScale):\ndef set_origin(self, origin: datatypes.Vector3DType):\nself.setOrigin(datatypes.to_vector3d(origin))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsScale.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261141760[\"widgets.GraphicsScale\"]\n  2103261138880[\"widgets.GraphicsTransformMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260166096[\"QtWidgets.QGraphicsScale\"]\n  2103260156496[\"QtWidgets.QGraphicsTransform\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261138880 --&gt; 2103261141760\n  2103255067472 --&gt; 2103261138880\n  140736120080256 --&gt; 2103255067472\n  2103260166096 --&gt; 2103261141760\n  2103260156496 --&gt; 2103260166096\n  2103254677056 --&gt; 2103260156496\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsScale.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>origin</code> QVector3D <code>xScale</code> double <code>yScale</code> double <code>zScale</code> double"},{"location":"qt_modules/widgets/GraphicsScene.html","title":"GraphicsScene","text":"<p>Qt Base Class: QGraphicsScene</p> <p>Signature: <code>QGraphicsScene(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QGraphicsScene(self, sceneRect: Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QGraphicsScene(self, x: float, y: float, width: float, height: float, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsScene.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>widgets.QGraphicsScene</code></p> <p>Surface for managing a large number of 2D graphical items.</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>class GraphicsScene(core.ObjectMixin, widgets.QGraphicsScene):\n\"\"\"Surface for managing a large number of 2D graphical items.\"\"\"\nclass GridType(enum.IntEnum):\n\"\"\"Grid type for background.\"\"\"\nNoGrid = 0\nDotGrid = 1\nLineGrid = 2\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself._grid_mode = self.GridType.LineGrid\nself._grid_size = 50\nself._pen_width = 0.65\nself._grid_color = self.get_palette().get_color(\"text\")\nself._bg_color = self.get_palette().get_color(\"window\")\n# self.setBackgroundBrush(self._bg_color)\ndef __repr__(self):\ncls_name = str(self.__class__.__name__)\nreturn f'&lt;{cls_name}(\"{self.viewer()}\") object at {hex(id(self))}&gt;'\ndef __getitem__(self, index: int) -&gt; widgets.QGraphicsItem:\nreturn self.items()[index]\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"itemIndexMethod\": ITEM_INDEX_METHOD}\nreturn maps\ndef get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_background_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.backgroundBrush())\ndef get_foreground_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foregroundBrush())\ndef add(self, item) -&gt; widgets.QGraphicsItem:\nmatch item:\ncase widgets.QGraphicsItem():\nself.addItem(item)\nreturn item\ncase gui.QPixmap():\nreturn self.add_pixmap(item)\ncase gui.QPainterPath():\nreturn self.add_path(item)\ncase gui.QPolygonF():\nreturn self.add_polygon(item)\ncase core.QRectF():\nreturn self.add_rect(item)\ncase core.QLine():\nreturn self.add_line(item)\ncase str():\nreturn self.add_text(item)\ncase widgets.QWidget():\nreturn self.add_widget(item)\ncase _:\nraise TypeError(item)\ndef add_pixmap(self, pixmap: gui.QPixmap) -&gt; widgets.GraphicsPixmapItem:\ng_item = widgets.GraphicsPixmapItem(pixmap)\nself.addItem(g_item)\nreturn g_item\ndef add_polygon(\nself,\npolygon: gui.QPolygonF | gui.QPolygon,\npen: gui.QPen | None = None,\nbrush: gui.QBrush | None = None,\n) -&gt; widgets.GraphicsPolygonItem:\nif isinstance(polygon, gui.QPolygon):\npolygon = gui.PolygonF(polygon)\ng_item = widgets.GraphicsPolygonItem(polygon)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_path(\nself,\npath: gui.QPainterPath,\npen: gui.QPen | None = None,\nbrush: gui.QBrush | None = None,\n) -&gt; widgets.GraphicsPathItem:\ng_item = widgets.GraphicsPathItem(path)\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_rect(\nself,\nrect: datatypes.RectType | datatypes.RectFType,\npen: gui.QPen | None = None,\nbrush: gui.QBrush | None = None,\n) -&gt; widgets.GraphicsRectItem:\ng_item = widgets.GraphicsRectItem(datatypes.to_rectf(rect))\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_line(\nself,\nline: core.QLineF | core.QLine | tuple[float, float, float, float],\npen: gui.QPen | None = None,\n) -&gt; widgets.GraphicsLineItem:\ng_item = widgets.GraphicsLineItem(datatypes.to_linef(line))\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_ellipse(\nself,\nellipse: datatypes.RectType | datatypes.RectFType,\npen: gui.QPen | None = None,\nbrush: gui.QBrush | None = None,\n) -&gt; widgets.GraphicsEllipseItem:\ng_item = widgets.GraphicsEllipseItem(datatypes.to_rectf(ellipse))\nif brush is not None:\ng_item.setBrush(brush)\nif pen is not None:\ng_item.setPen(pen)\nself.addItem(g_item)\nreturn g_item\ndef add_text(\nself, text: str, font: gui.QFont | None = None\n) -&gt; widgets.GraphicsTextItem:\ng_item = widgets.GraphicsTextItem(text)\nif font is not None:\ng_item.setFont(font)\nself.addItem(g_item)\nreturn g_item\ndef add_simple_text(\nself, text: str, font: gui.QFont | None = None\n) -&gt; widgets.GraphicsSimpleTextItem:\ng_item = widgets.GraphicsSimpleTextItem(text)\nif font is not None:\ng_item.setFont(font)\nself.addItem(g_item)\nreturn g_item\ndef add_widget(self, widget: widgets.QWidget) -&gt; widgets.GraphicsProxyWidget:\ng_item = widgets.GraphicsProxyWidget()\ng_item.setWidget(widget)\nself.addItem(g_item)\nreturn g_item\ndef colliding_items(\nself,\nitem: widgets.QGraphicsItem,\nmode: constants.ItemSelectionModeStr\n| constants.ItemSelectionMode = \"intersects_shape\",\n) -&gt; listdelegators.ListDelegator[widgets.QGraphicsItem]:\nitems = self.collidingItems(item, constants.ITEM_SELECTION_MODE[mode])\nreturn listdelegators.ListDelegator(items)\ndef add_item_group(self, *items: widgets.QGraphicsItem) -&gt; widgets.GraphicsItemGroup:\ngroup = widgets.GraphicsItemGroup()\nfor item in items:\ngroup.addToGroup(item)\nreturn group\ndef _draw_grid(\nself,\npainter: gui.QPainter,\nrect: core.QRectF,\npen: gui.QPen,\ngrid_size: int,\n):\nleft = int(rect.left())\nright = int(rect.right())\ntop = int(rect.top())\nbottom = int(rect.bottom())\nfirst_left = left - (left % grid_size)\nfirst_top = top - (top % grid_size)\nlines = [\ncore.QLineF(x, top, x, bottom) for x in range(first_left, right, grid_size)\n]\nlines.extend(\n[core.QLineF(left, y, right, y) for y in range(first_top, bottom, grid_size)]\n)\npainter.setPen(pen)\npainter.drawLines(lines)\ndef _draw_dots(\nself,\npainter: gui.QPainter,\nrect: core.QRectF,\npen: gui.QPen,\ngrid_size: int,\n):\nif (zoom := self._get_viewer_zoom()) &lt; 0:\ngrid_size *= int(abs(zoom) / 0.3 + 1)\nleft = int(rect.left())\nright = int(rect.right())\ntop = int(rect.top())\nbottom = int(rect.bottom())\nfirst_left = left - (left % grid_size)\nfirst_top = top - (top % grid_size)\npen.setWidth(grid_size / 10)\npainter.setPen(pen)\n[\npainter.drawPoint(int(x), int(y))\nfor x in range(first_left, right, grid_size)\nfor y in range(first_top, bottom, grid_size)\n]\ndef drawBackground(self, painter: gui.QPainter, rect: core.QRect):\nsuper().drawBackground(painter, rect)\npainter.save()\npainter.setRenderHint(gui.QPainter.RenderHint.Antialiasing, False)\npainter.setBrush(self.backgroundBrush())\nif self._grid_mode == self.GridType.DotGrid:\npen = gui.QPen(self.grid_color, self._pen_width)\nself._draw_dots(painter, rect, pen, self._grid_size)\nelif self._grid_mode == self.GridType.LineGrid:\nzoom = self._get_viewer_zoom()\nif zoom &gt; -0.5:\npen = gui.QPen(self.grid_color, self._pen_width)\nself._draw_grid(painter, rect, pen, self._grid_size)\ncolor = self._bg_color.darker(150)\nif zoom &lt; -0.0:\ncolor = color.darker(100 - int(zoom * 110))\npen = gui.QPen(color, self._pen_width)\nself._draw_grid(painter, rect, pen, self._grid_size * 8)\npainter.restore()\ndef _get_viewer_zoom(self):\nviewer = self.viewer()\nif viewer is None:\nreturn 1.0\ntransform = viewer.transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\n# def mousePressEvent(self, event):\n#     selected = self.viewer().selectedItems()\n#     if viewer := self.viewer():\n#         viewer.sceneMousePressEvent(event)\n#     super().mousePressEvent(event)\n#     keep_selection = any(\n#         [\n#             event.button() == core.Qt.MiddleButton,\n#             event.button() == core.Qt.RightButton,\n#             event.modifiers() == core.Qt.AltModifier,\n#         ]\n#     )\n#     if keep_selection:\n#         for node in selected:\n#             node.setSelected(True)\n# def mouseMoveEvent(self, event):\n#     if viewer := self.viewer():\n#         viewer.sceneMouseMoveEvent(event)\n#     super().mouseMoveEvent(event)\n# def mouseReleaseEvent(self, event):\n#     if viewer := self.viewer():\n#         viewer.sceneMouseReleaseEvent(event)\n#     super().mouseReleaseEvent(event)\ndef viewer(self):\nreturn self.views()[0] if self.views() else None\ndef get_grid_mode(self) -&gt; GridType:\nreturn self._grid_mode\ndef set_grid_mode(self, mode: GridType | None = None):\n# alternative?\n# brush = gui.Brush()\n# brush.set_style(\"cross\")\n# scene.setBackgroundBrush(brush)\nif mode is None:\nmode = self.GridType.NoGrid\nself._grid_mode = mode\ndef get_grid_color(self) -&gt; gui.Color:\nreturn self._grid_color\ndef set_grid_color(self, color: datatypes.ColorType):\nself._grid_color = colors.get_color(color)\ndef get_background_color(self) -&gt; gui.Color:\nreturn self._bg_color\ndef set_background_color(self, color: datatypes.ColorType):\nself._bg_color = colors.get_color(color)\nself.setBackgroundBrush(self._bg_color)\ndef set_item_index_method(\nself, method: ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod\n):\n\"\"\"Set item index method.\n        Args:\n            method: item index method to use\n        \"\"\"\nself.setItemIndexMethod(ITEM_INDEX_METHOD.get_enum_value(method))\ndef get_item_index_method(self) -&gt; ItemIndexMethodStr:\n\"\"\"Return item index method.\n        Returns:\n            item index method\n        \"\"\"\nreturn ITEM_INDEX_METHOD.inverse[self.itemIndexMethod()]\nbg_color = core.Property(\ngui.QColor,\nget_background_color,\nset_background_color,\ndoc=\"Color for the scene background\",\n)\ngrid_color = core.Property(\ngui.QColor,\nget_grid_color,\nset_grid_color,\ndoc=\"Color for the grid\",\n)\ngrid_mode = core.Property(\nint,\nget_grid_mode,\nset_grid_mode,\ndoc=\"Grid mode\",\n)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsScene.html#prettyqt.widgets.graphicsscene.GraphicsScene.GridType","title":"<code>GridType</code>","text":"<p>             Bases: <code>enum.IntEnum</code></p> <p>Grid type for background.</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>class GridType(enum.IntEnum):\n\"\"\"Grid type for background.\"\"\"\nNoGrid = 0\nDotGrid = 1\nLineGrid = 2\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsScene.html#prettyqt.widgets.graphicsscene.GraphicsScene.get_item_index_method","title":"<code>get_item_index_method() -&gt; ItemIndexMethodStr</code>","text":"<p>Return item index method.</p> Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def get_item_index_method(self) -&gt; ItemIndexMethodStr:\n\"\"\"Return item index method.\n    Returns:\n        item index method\n    \"\"\"\nreturn ITEM_INDEX_METHOD.inverse[self.itemIndexMethod()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsScene.html#prettyqt.widgets.graphicsscene.GraphicsScene.set_item_index_method","title":"<code>set_item_index_method(method: ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod)</code>","text":"<p>Set item index method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod</code> <p>item index method to use</p> required Source code in <code>prettyqt\\widgets\\graphicsscene.py</code> <pre><code>def set_item_index_method(\nself, method: ItemIndexMethodStr | widgets.QGraphicsScene.ItemIndexMethod\n):\n\"\"\"Set item index method.\n    Args:\n        method: item index method to use\n    \"\"\"\nself.setItemIndexMethod(ITEM_INDEX_METHOD.get_enum_value(method))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsScene.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261168640[\"widgets.GraphicsScene\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260151696[\"QtWidgets.QGraphicsScene\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261168640\n  140736120080256 --&gt; 2103255067472\n  2103260151696 --&gt; 2103261168640\n  2103254677056 --&gt; 2103260151696\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsScene.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>backgroundBrush</code> QBrush <code>foregroundBrush</code> QBrush <code>itemIndexMethod</code> QGraphicsScene::ItemIndexMethod <code>sceneRect</code> QRectF <code>bspTreeDepth</code> int <code>palette</code> QPalette <code>font</code> QFont <code>stickyFocus</code> bool <code>minimumRenderSize</code> double <code>focusOnTouch</code> bool <code>bg_color</code> QColor Color for the scene background <code>grid_color</code> QColor Color for the grid <code>grid_mode</code> int Grid mode"},{"location":"qt_modules/widgets/GraphicsSimpleTextItem.html","title":"GraphicsSimpleTextItem","text":"<p>Qt Base Class: QGraphicsSimpleTextItem</p> <p>Signature: <code>QGraphicsSimpleTextItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsSimpleTextItem(self, text: str, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsSimpleTextItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractGraphicsShapeItemMixin</code>, <code>widgets.QGraphicsSimpleTextItem</code></p> <p>Simple text path item that you can add to a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicssimpletextitem.py</code> <pre><code>class GraphicsSimpleTextItem(\nwidgets.AbstractGraphicsShapeItemMixin, widgets.QGraphicsSimpleTextItem\n):\n\"\"\"Simple text path item that you can add to a QGraphicsScene.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.text())\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsSimpleTextItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261189760[\"widgets.GraphicsSimpleTextItem\"]\n  2103261158080[\"widgets.AbstractGraphicsShapeItemMixin\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259683440[\"QtWidgets.QGraphicsSimpleTextItem\"]\n  2103259687280[\"QtWidgets.QAbstractGraphicsShapeItem\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261158080 --&gt; 2103261189760\n  2103261153280 --&gt; 2103261158080\n  140736120080256 --&gt; 2103261153280\n  2103259683440 --&gt; 2103261189760\n  2103259687280 --&gt; 2103259683440\n  2103259670960 --&gt; 2103259687280\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsTextItem.html","title":"GraphicsTextItem","text":"<p>Qt Base Class: QGraphicsTextItem</p> <p>Signature: <code>QGraphicsTextItem(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None QGraphicsTextItem(self, text: str, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsTextItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsObjectMixin</code>, <code>widgets.QGraphicsTextItem</code></p> <p>Text item that you can add to a QGraphicsScene to display formatted text.</p> Source code in <code>prettyqt\\widgets\\graphicstextitem.py</code> <pre><code>class GraphicsTextItem(widgets.GraphicsObjectMixin, widgets.QGraphicsTextItem):\n\"\"\"Text item that you can add to a QGraphicsScene to display formatted text.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.toPlainText())\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsTextItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261147520[\"widgets.GraphicsTextItem\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103260157456[\"QtWidgets.QGraphicsTextItem\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103261145600 --&gt; 2103261147520\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103260157456 --&gt; 2103261147520\n  2103260155536 --&gt; 2103260157456\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056</code></pre>"},{"location":"qt_modules/widgets/GraphicsTextItem.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double"},{"location":"qt_modules/widgets/GraphicsTransform.html","title":"GraphicsTransform","text":"<p>Qt Base Class: QGraphicsTransform</p> <p>Signature: <code>QGraphicsTransform(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsTransform.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsTransformMixin</code>, <code>QtWidgets.QGraphicsTransform</code></p> <p>Abstract base class for building advanced transformations on QGraphicsItems.</p> Source code in <code>prettyqt\\widgets\\graphicstransform.py</code> <pre><code>class GraphicsTransform(GraphicsTransformMixin, QtWidgets.QGraphicsTransform):\n\"\"\"Abstract base class for building advanced transformations on QGraphicsItems.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsTransform.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261152320[\"widgets.GraphicsTransform\"]\n  2103261138880[\"widgets.GraphicsTransformMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260156496[\"QtWidgets.QGraphicsTransform\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261138880 --&gt; 2103261152320\n  2103255067472 --&gt; 2103261138880\n  140736120080256 --&gt; 2103255067472\n  2103260156496 --&gt; 2103261152320\n  2103254677056 --&gt; 2103260156496\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/GraphicsTransform.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/widgets/GraphicsTransformMixin.html","title":"GraphicsTransformMixin","text":""},{"location":"qt_modules/widgets/GraphicsTransformMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicstransform.py</code> <pre><code>class GraphicsTransformMixin(core.ObjectMixin):\npass\n</code></pre> Name Children Inherits GraphicsTransformprettyqt.widgets.graphicstransform <ul><li>GraphicsTransformMixin</li><li>QGraphicsTransform</li></ul> GraphicsRotationprettyqt.widgets.graphicsrotation <ul><li>GraphicsTransformMixin</li><li>QGraphicsRotation</li></ul> GraphicsScaleprettyqt.widgets.graphicsscale <ul><li>GraphicsTransformMixin</li><li>QGraphicsScale</li></ul>"},{"location":"qt_modules/widgets/GraphicsTransformMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261138880[\"widgets.GraphicsTransformMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261138880\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/GraphicsView.html","title":"GraphicsView","text":"<p>Qt Base Class: QGraphicsView</p> <p>Signature: <code>QGraphicsView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QGraphicsView(self, scene: PySide6.QtWidgets.QGraphicsScene, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsViewMixin</code>, <code>widgets.QGraphicsView</code></p> <p>Widget for displaying the contents of a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>class GraphicsView(GraphicsViewMixin, widgets.QGraphicsView):\n\"\"\"Widget for displaying the contents of a QGraphicsScene.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261162880[\"widgets.GraphicsView\"]\n  2103261159040[\"widgets.GraphicsViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259783280[\"QtWidgets.QGraphicsView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261159040 --&gt; 2103261162880\n  2103261131200 --&gt; 2103261159040\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259783280 --&gt; 2103261162880\n  2103259751600 --&gt; 2103259783280\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/GraphicsView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>backgroundBrush</code> QBrush <code>foregroundBrush</code> QBrush <code>interactive</code> bool <code>sceneRect</code> QRectF <code>alignment</code> QFlags <code>renderHints</code> QFlags <code>dragMode</code> QGraphicsView::DragMode <code>cacheMode</code> QFlags <code>transformationAnchor</code> QGraphicsView::ViewportAnchor <code>resizeAnchor</code> QGraphicsView::ViewportAnchor <code>viewportUpdateMode</code> QGraphicsView::ViewportUpdateMode <code>rubberBandSelectionMode</code> Qt::ItemSelectionMode <code>optimizationFlags</code> QFlags"},{"location":"qt_modules/widgets/GraphicsViewMixin.html","title":"GraphicsViewMixin","text":""},{"location":"qt_modules/widgets/GraphicsViewMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>class GraphicsViewMixin(widgets.AbstractScrollAreaMixin):\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nif not args or not isinstance(args[0], widgets.QGraphicsScene):\nself.setScene(widgets.GraphicsScene())\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"alignment\": constants.ALIGNMENTS,\n\"resizeAnchor\": VIEWPORT_ANCHOR,\n\"transformationAnchor\": VIEWPORT_ANCHOR,\n\"cacheMode\": CACHE_MODES,\n\"dragMode\": DRAG_MODE,\n\"viewportUpdateMode\": VIEWPORT_UPDATE_MODE,\n\"rubberBandSelectionMode\": constants.ITEM_SELECTION_MODE,\n\"renderHints\": gui.painter.RENDER_HINTS,\n\"optimizationFlags\": OPTIMIZATION_FLAGS,\n}\nreturn maps\ndef enable_mousewheel_zoom(self, state: bool = True):\nif state:\nself.viewport().installEventFilter(self)\nelse:\nself.viewport().removeEventFilter(self)\ndef __getitem__(self, index: int) -&gt; widgets.QGraphicsItem:\nreturn self.items()[index]\ndef eventFilter(self, source, event) -&gt; bool:\nif source is not self.viewport() or event.type() != event.Type.Wheel:\nreturn super().eventFilter(source, event)\n# Zoom Factor\nzoom_in_factor = 1.25\nzoom_out_factor = 1 / zoom_in_factor\n# Set Anchors\nself.setTransformationAnchor(self.ViewportAnchor.NoAnchor)\nself.setResizeAnchor(self.ViewportAnchor.NoAnchor)\n# Save the scene pos\nold_pos = self.mapToScene(event.position().toPoint())\n# Zoom\nzoom_factor = zoom_in_factor if event.angleDelta().y() &gt; 0 else zoom_out_factor\nself.scale(zoom_factor, zoom_factor)\n# # Get the new position\nnew_pos = self.mapToScene(event.position().toPoint())\n# Move scene to old position\ndelta = new_pos - old_pos\nself.translate(delta.x(), delta.y())\nreturn True\ndef get_zoom(self) -&gt; float:\n\"\"\"Return the viewer zoom level.\n        Returns:\n            float: zoom level.\n        \"\"\"\ntransform = self.transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\ndef add_item(self, *args):\nreturn self.scene().addItem(*args)\ndef remove_item(self, *args):\nreturn self.scene().removeItem(*args)\ndef get_view_rect(self) -&gt; core.QRect:\n\"\"\"Return the boundaries of the view in scene coordinates.\"\"\"\nr = core.QRectF(self.rect())\nreturn self.viewportTransform().inverted()[0].mapRect(r)\ndef get_pixel_size(self):\n\"\"\"Return vector with length and width of one view pixel in scene coordinates.\"\"\"\np0 = core.PointF(0, 0)\np1 = core.PointF(1, 1)\ntr = self.transform().inverted()[0]\np01 = tr.map(p0)\np11 = tr.map(p1)\nreturn core.PointF(p11 - p01)\ndef get_background_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.backgroundBrush())\ndef get_foreground_brush(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foregroundBrush())\ndef invalidate_scene(\nself,\nrect: core.QRectF,\nlayer: widgets.graphicsscene.SceneLayerStr\n| widgets.QGraphicsScene.SceneLayer = \"all\",\n):\nself.invalidateScene(\nrect, widgets.graphicsscene.SCENE_LAYER.get_enum_value(layer)\n)\ndef set_transformation_anchor(self, mode: ViewportAnchorStr | mod.ViewportAnchor):\n\"\"\"Set how the view should position the scene during transformations.\n        Args:\n            mode: transformation anchor to use\n        \"\"\"\nself.setTransformationAnchor(VIEWPORT_ANCHOR.get_enum_value(mode))\ndef get_transformation_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current transformation anchor.\n        Returns:\n            viewport anchor\n        \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.transformationAnchor()]\ndef set_transform(self, transform: datatypes.TransformType, combine: bool = False):\nself.setTransform(datatypes.to_transform(transform), combine)\ndef set_resize_anchor(self, mode: ViewportAnchorStr | mod.ViewportAnchor):\n\"\"\"Set how the view should position the scene during resizes.\n        Args:\n            mode: resize anchor to use\n        \"\"\"\nself.setResizeAnchor(VIEWPORT_ANCHOR.get_enum_value(mode))\ndef get_resize_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current resize anchor.\n        Returns:\n            resize anchor\n        \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.resizeAnchor()]\ndef set_viewport_update_mode(\nself, mode: ViewportUpdateModeStr | mod.ViewportUpdateMode\n):\n\"\"\"Set how the viewport should update its contents.\n        Args:\n            mode: viewport update mode to use\n        \"\"\"\nself.setViewportUpdateMode(VIEWPORT_UPDATE_MODE.get_enum_value(mode))\ndef get_viewport_update_mode(self) -&gt; ViewportUpdateModeStr:\n\"\"\"Return current viewport update mode.\n        Returns:\n            viewport update mode\n        \"\"\"\nreturn VIEWPORT_UPDATE_MODE.inverse[self.viewportUpdateMode()]\ndef set_drag_mode(self, mode: DragModeStr | mod.DragMode):\n\"\"\"Set the behavior for dragging the mouse while the left mouse button is pressed.\n        Args:\n            mode: drag mode to use\n        \"\"\"\nself.setDragMode(DRAG_MODE.get_enum_value(mode))\ndef get_drag_mode(self) -&gt; DragModeStr:\n\"\"\"Return current drag mode.\n        Returns:\n            drag mode\n        \"\"\"\nreturn DRAG_MODE.inverse[self.dragMode()]\ndef set_rubberband_selection_mode(\nself, mode: constants.ItemSelectionModeStr | constants.ItemSelectionMode\n):\n\"\"\"Set the behavior for selecting items with a rubber band selection rectangle.\n        Args:\n            mode: rubberband selection mode to use\n        \"\"\"\nself.setRubberBandSelectionMode(\nconstants.ITEM_SELECTION_MODE.get_enum_value(mode)\n)\ndef get_rubberband_selection_mode(self) -&gt; constants.ItemSelectionModeStr:\n\"\"\"Return current rubberband selection mode.\n        Returns:\n            rubberband selection mode\n        \"\"\"\nreturn constants.ITEM_SELECTION_MODE.inverse[self.rubberBandSelectionMode()]\ndef set_cache_mode(self, mode: CacheModeStr | mod.CacheModeFlag):\n\"\"\"Set the cache mode.\n        Args:\n            mode: cache mode to use\n        \"\"\"\nself.setCacheMode(CACHE_MODES.get_enum_value(mode))\ndef get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Return current cache mode.\n        Returns:\n            cache mode\n        \"\"\"\nreturn CACHE_MODES.inverse[self.cacheMode()]\ndef set_optimization_flags(self, *items: OptimizationFlagStr):\nflags = OPTIMIZATION_FLAGS.merge_flags(items)\nself.setOptimizationFlags(flags)\ndef get_optimization_flags(self) -&gt; list[OptimizationFlagStr]:\nreturn OPTIMIZATION_FLAGS.get_list(self.optimizationFlags())\n</code></pre> Name Children Inherits GraphicsViewprettyqt.widgets.graphicsview <ul><li>GraphicsViewMixin</li><li>QGraphicsView</li></ul> ChartViewprettyqt.charts.chartview <ul><li>GraphicsViewMixin</li><li>QChartView</li></ul>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_cache_mode","title":"<code>get_cache_mode() -&gt; CacheModeStr</code>","text":"<p>Return current cache mode.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_cache_mode(self) -&gt; CacheModeStr:\n\"\"\"Return current cache mode.\n    Returns:\n        cache mode\n    \"\"\"\nreturn CACHE_MODES.inverse[self.cacheMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_drag_mode","title":"<code>get_drag_mode() -&gt; DragModeStr</code>","text":"<p>Return current drag mode.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_drag_mode(self) -&gt; DragModeStr:\n\"\"\"Return current drag mode.\n    Returns:\n        drag mode\n    \"\"\"\nreturn DRAG_MODE.inverse[self.dragMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_pixel_size","title":"<code>get_pixel_size()</code>","text":"<p>Return vector with length and width of one view pixel in scene coordinates.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_pixel_size(self):\n\"\"\"Return vector with length and width of one view pixel in scene coordinates.\"\"\"\np0 = core.PointF(0, 0)\np1 = core.PointF(1, 1)\ntr = self.transform().inverted()[0]\np01 = tr.map(p0)\np11 = tr.map(p1)\nreturn core.PointF(p11 - p01)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_resize_anchor","title":"<code>get_resize_anchor() -&gt; ViewportAnchorStr</code>","text":"<p>Return current resize anchor.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_resize_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current resize anchor.\n    Returns:\n        resize anchor\n    \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.resizeAnchor()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_rubberband_selection_mode","title":"<code>get_rubberband_selection_mode() -&gt; constants.ItemSelectionModeStr</code>","text":"<p>Return current rubberband selection mode.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_rubberband_selection_mode(self) -&gt; constants.ItemSelectionModeStr:\n\"\"\"Return current rubberband selection mode.\n    Returns:\n        rubberband selection mode\n    \"\"\"\nreturn constants.ITEM_SELECTION_MODE.inverse[self.rubberBandSelectionMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_transformation_anchor","title":"<code>get_transformation_anchor() -&gt; ViewportAnchorStr</code>","text":"<p>Return current transformation anchor.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_transformation_anchor(self) -&gt; ViewportAnchorStr:\n\"\"\"Return current transformation anchor.\n    Returns:\n        viewport anchor\n    \"\"\"\nreturn VIEWPORT_ANCHOR.inverse[self.transformationAnchor()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_view_rect","title":"<code>get_view_rect() -&gt; core.QRect</code>","text":"<p>Return the boundaries of the view in scene coordinates.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_view_rect(self) -&gt; core.QRect:\n\"\"\"Return the boundaries of the view in scene coordinates.\"\"\"\nr = core.QRectF(self.rect())\nreturn self.viewportTransform().inverted()[0].mapRect(r)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_viewport_update_mode","title":"<code>get_viewport_update_mode() -&gt; ViewportUpdateModeStr</code>","text":"<p>Return current viewport update mode.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_viewport_update_mode(self) -&gt; ViewportUpdateModeStr:\n\"\"\"Return current viewport update mode.\n    Returns:\n        viewport update mode\n    \"\"\"\nreturn VIEWPORT_UPDATE_MODE.inverse[self.viewportUpdateMode()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.get_zoom","title":"<code>get_zoom() -&gt; float</code>","text":"<p>Return the viewer zoom level.</p> Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def get_zoom(self) -&gt; float:\n\"\"\"Return the viewer zoom level.\n    Returns:\n        float: zoom level.\n    \"\"\"\ntransform = self.transform()\ncur_scale = (transform.m11(), transform.m22())\nreturn float(f\"{cur_scale[0] - 1.0:0.2f}\")\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_cache_mode","title":"<code>set_cache_mode(mode: CacheModeStr | mod.CacheModeFlag)</code>","text":"<p>Set the cache mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>CacheModeStr | mod.CacheModeFlag</code> <p>cache mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_cache_mode(self, mode: CacheModeStr | mod.CacheModeFlag):\n\"\"\"Set the cache mode.\n    Args:\n        mode: cache mode to use\n    \"\"\"\nself.setCacheMode(CACHE_MODES.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_drag_mode","title":"<code>set_drag_mode(mode: DragModeStr | mod.DragMode)</code>","text":"<p>Set the behavior for dragging the mouse while the left mouse button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>DragModeStr | mod.DragMode</code> <p>drag mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_drag_mode(self, mode: DragModeStr | mod.DragMode):\n\"\"\"Set the behavior for dragging the mouse while the left mouse button is pressed.\n    Args:\n        mode: drag mode to use\n    \"\"\"\nself.setDragMode(DRAG_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_resize_anchor","title":"<code>set_resize_anchor(mode: ViewportAnchorStr | mod.ViewportAnchor)</code>","text":"<p>Set how the view should position the scene during resizes.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportAnchorStr | mod.ViewportAnchor</code> <p>resize anchor to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_resize_anchor(self, mode: ViewportAnchorStr | mod.ViewportAnchor):\n\"\"\"Set how the view should position the scene during resizes.\n    Args:\n        mode: resize anchor to use\n    \"\"\"\nself.setResizeAnchor(VIEWPORT_ANCHOR.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_rubberband_selection_mode","title":"<code>set_rubberband_selection_mode(mode: constants.ItemSelectionModeStr | constants.ItemSelectionMode)</code>","text":"<p>Set the behavior for selecting items with a rubber band selection rectangle.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ItemSelectionModeStr | constants.ItemSelectionMode</code> <p>rubberband selection mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_rubberband_selection_mode(\nself, mode: constants.ItemSelectionModeStr | constants.ItemSelectionMode\n):\n\"\"\"Set the behavior for selecting items with a rubber band selection rectangle.\n    Args:\n        mode: rubberband selection mode to use\n    \"\"\"\nself.setRubberBandSelectionMode(\nconstants.ITEM_SELECTION_MODE.get_enum_value(mode)\n)\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_transformation_anchor","title":"<code>set_transformation_anchor(mode: ViewportAnchorStr | mod.ViewportAnchor)</code>","text":"<p>Set how the view should position the scene during transformations.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportAnchorStr | mod.ViewportAnchor</code> <p>transformation anchor to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_transformation_anchor(self, mode: ViewportAnchorStr | mod.ViewportAnchor):\n\"\"\"Set how the view should position the scene during transformations.\n    Args:\n        mode: transformation anchor to use\n    \"\"\"\nself.setTransformationAnchor(VIEWPORT_ANCHOR.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#prettyqt.widgets.graphicsview.GraphicsViewMixin.set_viewport_update_mode","title":"<code>set_viewport_update_mode(mode: ViewportUpdateModeStr | mod.ViewportUpdateMode)</code>","text":"<p>Set how the viewport should update its contents.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewportUpdateModeStr | mod.ViewportUpdateMode</code> <p>viewport update mode to use</p> required Source code in <code>prettyqt\\widgets\\graphicsview.py</code> <pre><code>def set_viewport_update_mode(\nself, mode: ViewportUpdateModeStr | mod.ViewportUpdateMode\n):\n\"\"\"Set how the viewport should update its contents.\n    Args:\n        mode: viewport update mode to use\n    \"\"\"\nself.setViewportUpdateMode(VIEWPORT_UPDATE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsViewMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261159040[\"widgets.GraphicsViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261131200 --&gt; 2103261159040\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/GraphicsWidget.html","title":"GraphicsWidget","text":"<p>Qt Base Class: QGraphicsWidget</p> <p>Signature: <code>QGraphicsWidget(self, parent: Optional[PySide6.QtWidgets.QGraphicsItem] = None, wFlags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GraphicsWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>GraphicsWidgetMixin</code>, <code>widgets.QGraphicsWidget</code></p> <p>The base class for all widget items in a QGraphicsScene.</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>class GraphicsWidget(GraphicsWidgetMixin, widgets.QGraphicsWidget):\n\"\"\"The base class for all widget items in a QGraphicsScene.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261181120[\"widgets.GraphicsWidget\"]\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103260153616[\"QtWidgets.QGraphicsWidget\"]\n  2103260155536[\"QtWidgets.QGraphicsObject\"]\n  2103259670960[\"QtWidgets.QGraphicsItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103259646960[\"QtWidgets.QGraphicsLayoutItem\"]\n  2103261170560 --&gt; 2103261181120\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440\n  2103260153616 --&gt; 2103261181120\n  2103260155536 --&gt; 2103260153616\n  2103259670960 --&gt; 2103260155536\n  2103206874128 --&gt; 2103259670960\n  140736120080256 --&gt; 2103206874128\n  2103254677056 --&gt; 2103260155536\n  2103206874128 --&gt; 2103254677056\n  2103259646960 --&gt; 2103260153616\n  2103206874128 --&gt; 2103259646960</code></pre>"},{"location":"qt_modules/widgets/GraphicsWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>parent</code> QGraphicsObject <code>opacity</code> double <code>enabled</code> bool <code>visible</code> bool <code>pos</code> QPointF <code>x</code> double <code>y</code> double <code>z</code> double <code>rotation</code> double <code>scale</code> double <code>transformOriginPoint</code> QPointF <code>effect</code> QGraphicsEffect <code>children</code> QDeclarativeListProperty <code>width</code> double <code>height</code> double <code>palette</code> QPalette <code>font</code> QFont <code>layoutDirection</code> Qt::LayoutDirection <code>size</code> QSizeF <code>minimumSize</code> QSizeF <code>preferredSize</code> QSizeF <code>maximumSize</code> QSizeF <code>sizePolicy</code> QSizePolicy <code>focusPolicy</code> Qt::FocusPolicy <code>windowFlags</code> QFlags <code>windowTitle</code> QString <code>geometry</code> QRectF <code>autoFillBackground</code> bool <code>layout</code> QGraphicsLayout"},{"location":"qt_modules/widgets/GraphicsWidgetMixin.html","title":"GraphicsWidgetMixin","text":""},{"location":"qt_modules/widgets/GraphicsWidgetMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GraphicsObjectMixin</code>, <code>widgets.GraphicsLayoutItemMixin</code></p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>class GraphicsWidgetMixin(widgets.GraphicsObjectMixin, widgets.GraphicsLayoutItemMixin):\n@property\ndef box(self):\nreturn self.layout()\n@box.setter\ndef box(self, layout):\nself.set_layout(layout)\ndef set_layout(\nself, layout: LayoutStr | widgets.QGraphicsLayout\n) -&gt; widgets.QGraphicsLayout:\nmatch layout:\ncase widgets.QGraphicsLayout():\nlayout = layout\ncase \"grid\":\nlayout = widgets.GraphicsGridLayout()\ncase \"anchor\":\nlayout = widgets.GraphicsAnchorLayout()\ncase \"horizontal\" | \"vertical\":\nlayout = widgets.GraphicsLinearLayout(layout)\ncase _:\nraise ValueError(f\"Invalid Layout {layout}\")\nself.setLayout(layout)\nreturn layout\ndef set_focus_policy(self, policy: constants.FocusPolicyStr | constants.FocusPolicy):\n\"\"\"Set the way the widget accepts keyboard focus.\n        Args:\n            policy: Focus policy\n        \"\"\"\nself.setFocusPolicy(constants.FOCUS_POLICY.get_enum_value(policy))\ndef get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return way the widget accepts keyboard focus.\n        Returns:\n            str: Focus policy\n        \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\ndef window_frame_section_at(\nself, point: datatypes.PointType\n) -&gt; constants.WindowFrameSectionStr:\n\"\"\"Return the window frame section at given position.\n        Returns:\n            str: Window frame section\n        \"\"\"\nsection = self.windowFrameSectionAt(datatypes.to_point(point))\nreturn constants.WINDOW_FRAME_SECTION.inverse[section]\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\n</code></pre> Name Children Inherits GraphicsWidgetprettyqt.widgets.graphicswidget <ul><li>GraphicsWidgetMixin</li><li>QGraphicsWidget</li></ul> GraphicsProxyWidgetprettyqt.widgets.graphicsproxywidget <ul><li>GraphicsWidgetMixin</li><li>QGraphicsProxyWidget</li></ul> Legendprettyqt.charts.legend <ul><li>GraphicsWidgetMixin</li></ul> ChartMixinprettyqt.charts.chart <ul><li>Chart</li><li>PolarChart</li></ul> <ul><li>GraphicsWidgetMixin</li></ul>"},{"location":"qt_modules/widgets/GraphicsWidgetMixin.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.get_focus_policy","title":"<code>get_focus_policy() -&gt; constants.FocusPolicyStr</code>","text":"<p>Return way the widget accepts keyboard focus.</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return way the widget accepts keyboard focus.\n    Returns:\n        str: Focus policy\n    \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsWidgetMixin.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.set_focus_policy","title":"<code>set_focus_policy(policy: constants.FocusPolicyStr | constants.FocusPolicy)</code>","text":"<p>Set the way the widget accepts keyboard focus.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.FocusPolicyStr | constants.FocusPolicy</code> <p>Focus policy</p> required Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def set_focus_policy(self, policy: constants.FocusPolicyStr | constants.FocusPolicy):\n\"\"\"Set the way the widget accepts keyboard focus.\n    Args:\n        policy: Focus policy\n    \"\"\"\nself.setFocusPolicy(constants.FOCUS_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsWidgetMixin.html#prettyqt.widgets.graphicswidget.GraphicsWidgetMixin.window_frame_section_at","title":"<code>window_frame_section_at(point: datatypes.PointType) -&gt; constants.WindowFrameSectionStr</code>","text":"<p>Return the window frame section at given position.</p> Source code in <code>prettyqt\\widgets\\graphicswidget.py</code> <pre><code>def window_frame_section_at(\nself, point: datatypes.PointType\n) -&gt; constants.WindowFrameSectionStr:\n\"\"\"Return the window frame section at given position.\n    Returns:\n        str: Window frame section\n    \"\"\"\nsection = self.windowFrameSectionAt(datatypes.to_point(point))\nreturn constants.WINDOW_FRAME_SECTION.inverse[section]\n</code></pre>"},{"location":"qt_modules/widgets/GraphicsWidgetMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261170560[\"widgets.GraphicsWidgetMixin\"]\n  2103261145600[\"widgets.GraphicsObjectMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261153280[\"widgets.GraphicsItemMixin\"]\n  2103261149440[\"widgets.GraphicsLayoutItemMixin\"]\n  2103261145600 --&gt; 2103261170560\n  2103255067472 --&gt; 2103261145600\n  140736120080256 --&gt; 2103255067472\n  2103261153280 --&gt; 2103261145600\n  140736120080256 --&gt; 2103261153280\n  2103261149440 --&gt; 2103261170560\n  140736120080256 --&gt; 2103261149440</code></pre>"},{"location":"qt_modules/widgets/GridLayout.html","title":"GridLayout","text":"<p>Qt Base Class: QGridLayout</p> <p>Signature: <code>QGridLayout(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GridLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LayoutMixin</code>, <code>widgets.QGridLayout</code></p> <p>Lays out widgets in a grid.</p> Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>class GridLayout(widgets.LayoutMixin, widgets.QGridLayout):\n\"\"\"Lays out widgets in a grid.\"\"\"\nID = \"grid\"\ndef __getitem__(\nself, index: tuple[int | slice, int | slice] | int | str\n) -&gt; (\nwidgets.QWidget\n| widgets.QLayout\n| listdelegators.ListDelegator[widgets.QWidget | widgets.QLayout]\n| None\n):\nrowcount = self.rowCount()\ncolcount = self.columnCount()\nmatch index:\ncase int() as row, int() as col:\nif row &lt; 0:\nrow = rowcount + row\nif col &lt; 0:\ncol = colcount + col\nif row &gt;= rowcount or row &lt; 0 or col &gt;= colcount or col &lt; 0:\nraise IndexError(index)\nitem = self.itemAtPosition(row, col)\nreturn i if (i := item.widget()) is not None else item.layout()\ncase (row, col):\nitems = [\nitem\nfor i, j in helpers.iter_positions(row, col, rowcount, colcount)\nif (item := self.itemAtPosition(i, j)) is not None\n]\nitems = [\nw if (w := i.widget()) is not None else i.layout() for i in items\n]\nreturn listdelegators.ListDelegator(list(set(items)))\ncase int() as row:\nif row &lt; 0:\nrow = rowcount + row\nif row &gt;= rowcount or row &lt; 0:\nraise IndexError(index)\nitem = self.itemAt(row)\nreturn i if (i := item.widget()) is not None else item.layout()\ncase slice() as rowslice:\ncount = rowcount if rowslice.stop is None else rowslice.stop\nitems = [self.itemAt(i) for i in range(count)[rowslice]]\nitems = [\nw if (w := i.widget()) is not None else i.layout() for i in items\n]\nreturn listdelegators.ListDelegator(list(set(items)))\ncase str():\nreturn self.find_child(widgets.QWidget | widgets.QLayout, index)\ncase _:\nraise TypeError(index)\ndef __setitem__(\nself,\nidx: tuple[int | slice, int | slice],\nvalue: widgets.QWidget | widgets.QLayout | widgets.QLayoutItem,\n):\nrow, col = idx\nrowspan = row.stop - row.start + 1 if isinstance(row, slice) else 1\ncolspan = col.stop - col.start + 1 if isinstance(col, slice) else 1\nrowstart = row.start if isinstance(row, slice) else row\ncolstart = col.start if isinstance(col, slice) else col\nself.add(value, rowstart, colstart, rowspan, colspan)\n# def __setstate__(self, state):\n#     for item, pos in zip(state[\"widgets\"], state[\"positions\"]):\n#         x, y, w, h = pos\n#         self[x : x + w - 1, y : y + h - 1] = item\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __iter__(self) -&gt; Iterator[widgets.QWidget | widgets.QLayout]:\nreturn iter(\nitem for i in range(self.count()) if (item := self.itemAt(i)) is not None\n)\ndef __add__(\nself,\nother: (tuple | list | widgets.QWidget | widgets.QLayout | widgets.QLayoutItem),\n):\nif isinstance(other, tuple | list):\nfor i, _control in enumerate(other):\nself[self.rowCount(), i] = other  # type: ignore\nelse:\nself[self.rowCount(), 0 : self.columnCount() - 1] = other\nreturn self\ndef __iadd__(self, item, *args, **kwargs):\nself.__add__(item, *args, **kwargs)\nreturn self\ndef add(\nself,\nitem: widgets.QWidget | widgets.QLayout | widgets.QLayoutItem,\nrowstart: int,\ncolstart: int,\nrowspan: int = 1,\ncolspan: int = 1,\nalignment: constants.AlignmentStr | constants.AlignmentFlag | None = None,\n):\nif alignment is None:\nalignment = \"none\"\nflag = constants.ALIGNMENTS.get_enum_value(alignment)\nmatch item:\ncase widgets.QWidget():\nself.addWidget(item, rowstart, colstart, rowspan, colspan, flag)\ncase widgets.QLayout():\nself.addLayout(item, rowstart, colstart, rowspan, colspan, flag)\ncase widgets.QLayoutItem():\nself.addItem(item, rowstart, colstart, rowspan, colspan, flag)\ndef append(self, item: widgets.QWidget | widgets.QLayout | widgets.QLayoutItem):\nself[self.rowCount(), 0 : self.columnCount() - 1] = item\ndef set_origin_corner(self, corner: constants.CornerStr | constants.Corner):\n\"\"\"Set the origin corner.\n        Args:\n            corner: origin corner\n        \"\"\"\nself.setOriginCorner(constants.CORNER.get_enum_value(corner))\ndef get_origin_corner(self) -&gt; constants.CornerStr:\n\"\"\"Return current origin corner.\n        Returns:\n            origin corner\n        \"\"\"\nreturn constants.CORNER.inverse[self.originCorner()]\n</code></pre>"},{"location":"qt_modules/widgets/GridLayout.html#prettyqt.widgets.gridlayout.GridLayout.get_origin_corner","title":"<code>get_origin_corner() -&gt; constants.CornerStr</code>","text":"<p>Return current origin corner.</p> Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def get_origin_corner(self) -&gt; constants.CornerStr:\n\"\"\"Return current origin corner.\n    Returns:\n        origin corner\n    \"\"\"\nreturn constants.CORNER.inverse[self.originCorner()]\n</code></pre>"},{"location":"qt_modules/widgets/GridLayout.html#prettyqt.widgets.gridlayout.GridLayout.set_origin_corner","title":"<code>set_origin_corner(corner: constants.CornerStr | constants.Corner)</code>","text":"<p>Set the origin corner.</p> <p>Parameters:</p> Name Type Description Default <code>corner</code> <code>constants.CornerStr | constants.Corner</code> <p>origin corner</p> required Source code in <code>prettyqt\\widgets\\gridlayout.py</code> <pre><code>def set_origin_corner(self, corner: constants.CornerStr | constants.Corner):\n\"\"\"Set the origin corner.\n    Args:\n        corner: origin corner\n    \"\"\"\nself.setOriginCorner(constants.CORNER.get_enum_value(corner))\n</code></pre>"},{"location":"qt_modules/widgets/GridLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261425808[\"widgets.GridLayout\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260129616[\"QtWidgets.QGridLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261439248 --&gt; 2103261425808\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260129616 --&gt; 2103261425808\n  2103260125776 --&gt; 2103260129616\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/GridLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"qt_modules/widgets/GroupBox.html","title":"GroupBox","text":"<p>Qt Base Class: QGroupBox</p> <p>Signature: <code>QGroupBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QGroupBox(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/GroupBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QGroupBox</code></p> <p>Group box frame with a title.</p> <p>A group box provides a frame, a title on top, a keyboard shortcut, and displays various other widgets inside itself. The keyboard shortcut moves keyboard focus to one of the group box's child widgets.</p> Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>class GroupBox(widgets.WidgetMixin, widgets.QGroupBox):\n\"\"\"Group box frame with a title.\n    A group box provides a frame, a title on top, a keyboard shortcut,\n    and displays various other widgets inside itself.\n    The keyboard shortcut moves keyboard focus to one of the group box's child widgets.\n    \"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.title())\ndef set_title(self, title: str):\nself.setTitle(title)\ndef set_alignment(\nself, alignment: constants.HorizontalAlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the title alignment of the groupbox.\n        Args:\n            alignment: title alignment for the groupbox\n        \"\"\"\nself.setAlignment(constants.H_ALIGNMENT.get_enum_value(alignment))\ndef get_alignment(self) -&gt; constants.HorizontalAlignmentStr:\n\"\"\"Return current title alignment.\n        Returns:\n            title alignment\n        \"\"\"\nreturn constants.H_ALIGNMENT.inverse[self.alignment()]\ndef set_enabled(self, state):\nfor widget in self.layout():\nwidget.setEnabled(state)\n</code></pre> Name Children Inherits OptionalWidgetprettyqt.custom_widgets.optionalwidget <ul><li>GroupBox</li></ul> FlagSelectionWidgetprettyqt.custom_widgets.editors.flagselectionwidget <ul><li>GroupBox</li></ul> StringOrNumberWidgetprettyqt.custom_widgets.editors.stringornumberwidget <ul><li>GroupBox</li></ul> SelectionWidgetprettyqt.custom_widgets.editors.selectionwidget <ul><li>GroupBox</li></ul>"},{"location":"qt_modules/widgets/GroupBox.html#prettyqt.widgets.groupbox.GroupBox.get_alignment","title":"<code>get_alignment() -&gt; constants.HorizontalAlignmentStr</code>","text":"<p>Return current title alignment.</p> Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def get_alignment(self) -&gt; constants.HorizontalAlignmentStr:\n\"\"\"Return current title alignment.\n    Returns:\n        title alignment\n    \"\"\"\nreturn constants.H_ALIGNMENT.inverse[self.alignment()]\n</code></pre>"},{"location":"qt_modules/widgets/GroupBox.html#prettyqt.widgets.groupbox.GroupBox.set_alignment","title":"<code>set_alignment(alignment: constants.HorizontalAlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the title alignment of the groupbox.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.HorizontalAlignmentStr | constants.AlignmentFlag</code> <p>title alignment for the groupbox</p> required Source code in <code>prettyqt\\widgets\\groupbox.py</code> <pre><code>def set_alignment(\nself, alignment: constants.HorizontalAlignmentStr | constants.AlignmentFlag\n):\n\"\"\"Set the title alignment of the groupbox.\n    Args:\n        alignment: title alignment for the groupbox\n    \"\"\"\nself.setAlignment(constants.H_ALIGNMENT.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/GroupBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261445008[\"widgets.GroupBox\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259738160[\"QtWidgets.QGroupBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261445008\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259738160 --&gt; 2103261445008\n  2103259691120 --&gt; 2103259738160\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/GroupBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>alignment</code> QFlags <code>flat</code> bool <code>checkable</code> bool <code>checked</code> bool"},{"location":"qt_modules/widgets/HBoxLayout.html","title":"HBoxLayout","text":"<p>Qt Base Class: QHBoxLayout</p> <p>Signature: <code>QHBoxLayout(self) -&gt; None QHBoxLayout(self, parent: PySide6.QtWidgets.QWidget) -&gt; None</code></p>"},{"location":"qt_modules/widgets/HBoxLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.boxlayout.BoxLayoutMixin</code>, <code>widgets.QHBoxLayout</code></p> <p>Lines up widgets horizontally.</p> Source code in <code>prettyqt\\widgets\\hboxlayout.py</code> <pre><code>class HBoxLayout(widgets.boxlayout.BoxLayoutMixin, widgets.QHBoxLayout):\n\"\"\"Lines up widgets horizontally.\"\"\"\nID = \"horizontal\"\n</code></pre>"},{"location":"qt_modules/widgets/HBoxLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261455568[\"widgets.HBoxLayout\"]\n  2103261430608[\"widgets.BoxLayoutMixin\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260147856[\"QtWidgets.QHBoxLayout\"]\n  2103260142096[\"QtWidgets.QBoxLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261430608 --&gt; 2103261455568\n  2103261439248 --&gt; 2103261430608\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260147856 --&gt; 2103261455568\n  2103260142096 --&gt; 2103260147856\n  2103260125776 --&gt; 2103260142096\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/HBoxLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"qt_modules/widgets/HeaderView.html","title":"HeaderView","text":"<p>Qt Base Class: QHeaderView</p> <p>Signature: <code>QHeaderView(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/HeaderView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>HeaderViewMixin</code>, <code>widgets.QHeaderView</code></p> <p>Header row or header column for item views.</p> Source code in <code>prettyqt\\widgets\\headerview.py</code> <pre><code>class HeaderView(HeaderViewMixin, widgets.QHeaderView):\n\"\"\"Header row or header column for item views.\"\"\"\n</code></pre> Name Children Inherits HierarchicalHeaderViewprettyqt.custom_widgets.itemviews.hierarchicalheaderview <ul><li>HeaderView</li></ul> FilterHeaderprettyqt.custom_widgets.itemviews.filterheader <ul><li>HeaderView</li></ul>"},{"location":"qt_modules/widgets/HeaderView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261242560[\"widgets.HeaderView\"]\n  2103261240640[\"widgets.HeaderViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259838000[\"QtWidgets.QHeaderView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261240640 --&gt; 2103261242560\n  2103261136960 --&gt; 2103261240640\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259838000 --&gt; 2103261242560\n  2103259770800 --&gt; 2103259838000\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/HeaderView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>firstSectionMovable</code> bool <code>showSortIndicator</code> bool <code>highlightSections</code> bool <code>stretchLastSection</code> bool <code>cascadingSectionResizes</code> bool <code>defaultSectionSize</code> int <code>minimumSectionSize</code> int <code>maximumSectionSize</code> int <code>defaultAlignment</code> QFlags <code>sortIndicatorClearable</code> bool"},{"location":"qt_modules/widgets/InputDialog.html","title":"InputDialog","text":"<p>Qt Base Class: QInputDialog</p> <p>Signature: <code>QInputDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/InputDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QInputDialog</code></p> <p>Simple convenience dialog to get a single value from the user.</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>class InputDialog(widgets.DialogMixin, widgets.QInputDialog):\n\"\"\"Simple convenience dialog to get a single value from the user.\"\"\"\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"textEchoMode\": widgets.lineedit.ECHO_MODE,\n\"inputMode\": INPUT_MODE,\n\"options\": INPUT_DIALOG_OPTION,\n}\nreturn maps\n@classmethod\ndef get_int(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\n) -&gt; int | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getInt(par, title, label, value=0)\nreturn v[0] if v[1] else None\n@classmethod\ndef get_float(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\n) -&gt; float | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getDouble(par, title, label, value=0.0)\nreturn v[0] if v[1] else None\n@classmethod\ndef get_text(\ncls,\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\nvalue: str = \"\",\necho_mode: widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode = \"normal\",\n) -&gt; str | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getText(\npar, title, label, widgets.lineedit.ECHO_MODE.get_enum_value(echo_mode), value\n)\nreturn v[0] if v[1] else None\n@classmethod\ndef get_item(\ncls,\nitems: list[str],\ntitle: str = \"\",\nlabel: str = \"\",\nicon: datatypes.IconType = None,\neditable: bool = False,\n) -&gt; str | None:\npar = widgets.Dialog()\npar.set_icon(icon)\nv = cls.getItem(par, title, label, items, editable=editable, current=0)\nreturn v[0] if v[1] else None\ndef set_text_echo_mode(\nself, mode: widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode\n):\n\"\"\"Set text echo mode.\n        Args:\n            mode: echo mode to use\n        \"\"\"\nself.setTextEchoMode(widgets.lineedit.ECHO_MODE.get_enum_value(mode))\ndef get_text_echo_mode(self) -&gt; widgets.lineedit.EchoModeStr:\n\"\"\"Return text echo mode.\n        Returns:\n            echo mode\n        \"\"\"\nreturn widgets.lineedit.ECHO_MODE.inverse[self.textEchoMode()]\ndef set_input_mode(self, mode: InputModeStr | mod.InputMode):\n\"\"\"Set input mode.\n        Args:\n            mode: input mode to use\n        \"\"\"\nself.setInputMode(INPUT_MODE.get_enum_value(mode))\ndef get_input_mode(self) -&gt; InputModeStr:\n\"\"\"Return input mode.\n        Returns:\n            input mode\n        \"\"\"\nreturn INPUT_MODE.inverse[self.inputMode()]\n</code></pre>"},{"location":"qt_modules/widgets/InputDialog.html#prettyqt.widgets.inputdialog.InputDialog.get_input_mode","title":"<code>get_input_mode() -&gt; InputModeStr</code>","text":"<p>Return input mode.</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def get_input_mode(self) -&gt; InputModeStr:\n\"\"\"Return input mode.\n    Returns:\n        input mode\n    \"\"\"\nreturn INPUT_MODE.inverse[self.inputMode()]\n</code></pre>"},{"location":"qt_modules/widgets/InputDialog.html#prettyqt.widgets.inputdialog.InputDialog.get_text_echo_mode","title":"<code>get_text_echo_mode() -&gt; widgets.lineedit.EchoModeStr</code>","text":"<p>Return text echo mode.</p> Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def get_text_echo_mode(self) -&gt; widgets.lineedit.EchoModeStr:\n\"\"\"Return text echo mode.\n    Returns:\n        echo mode\n    \"\"\"\nreturn widgets.lineedit.ECHO_MODE.inverse[self.textEchoMode()]\n</code></pre>"},{"location":"qt_modules/widgets/InputDialog.html#prettyqt.widgets.inputdialog.InputDialog.set_input_mode","title":"<code>set_input_mode(mode: InputModeStr | mod.InputMode)</code>","text":"<p>Set input mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InputModeStr | mod.InputMode</code> <p>input mode to use</p> required Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def set_input_mode(self, mode: InputModeStr | mod.InputMode):\n\"\"\"Set input mode.\n    Args:\n        mode: input mode to use\n    \"\"\"\nself.setInputMode(INPUT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/InputDialog.html#prettyqt.widgets.inputdialog.InputDialog.set_text_echo_mode","title":"<code>set_text_echo_mode(mode: widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode)</code>","text":"<p>Set text echo mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode</code> <p>echo mode to use</p> required Source code in <code>prettyqt\\widgets\\inputdialog.py</code> <pre><code>def set_text_echo_mode(\nself, mode: widgets.lineedit.EchoModeStr | widgets.QLineEdit.EchoMode\n):\n\"\"\"Set text echo mode.\n    Args:\n        mode: echo mode to use\n    \"\"\"\nself.setTextEchoMode(widgets.lineedit.ECHO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/InputDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261438288[\"widgets.InputDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259861040[\"QtWidgets.QInputDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261438288\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259861040 --&gt; 2103261438288\n  2103259840880 --&gt; 2103259861040\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/InputDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool"},{"location":"qt_modules/widgets/ItemDelegate.html","title":"ItemDelegate","text":"<p>Qt Base Class: QItemDelegate</p> <p>Signature: <code>QItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ItemDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractItemDelegateMixin</code>, <code>widgets.QItemDelegate</code></p> <p>Display and editing facilities for data items from a model.</p> Source code in <code>prettyqt\\widgets\\itemdelegate.py</code> <pre><code>class ItemDelegate(widgets.AbstractItemDelegateMixin, widgets.QItemDelegate):\n\"\"\"Display and editing facilities for data items from a model.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/ItemDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261417168[\"widgets.ItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261072640[\"QtWidgets.QItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261416208 --&gt; 2103261417168\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261072640 --&gt; 2103261417168\n  2103261070720 --&gt; 2103261072640\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/ItemDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>clipping</code> bool"},{"location":"qt_modules/widgets/ItemEditorCreatorBase.html","title":"ItemEditorCreatorBase","text":"<p>Qt Base Class: QItemEditorCreatorBase</p> <p>Signature: <code>QItemEditorCreatorBase(self) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ItemEditorCreatorBase.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QItemEditorCreatorBase</code></p> <p>Abstract base class for implementing new item editor creators.</p> Source code in <code>prettyqt\\widgets\\itemeditorcreatorbase.py</code> <pre><code>class ItemEditorCreatorBase(QtWidgets.QItemEditorCreatorBase):\n\"\"\"Abstract base class for implementing new item editor creators.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/ItemEditorCreatorBase.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261462288[\"widgets.ItemEditorCreatorBase\"]\n  2103259649840[\"QtWidgets.QItemEditorCreatorBase\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259649840 --&gt; 2103261462288\n  2103206874128 --&gt; 2103259649840\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/ItemEditorFactory.html","title":"ItemEditorFactory","text":"<p>Qt Base Class: QItemEditorFactory</p> <p>Signature: <code>QItemEditorFactory(self) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ItemEditorFactory.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.QItemEditorFactory</code></p> <p>Widgets for editing item data in views and delegates.</p> Source code in <code>prettyqt\\widgets\\itemeditorfactory.py</code> <pre><code>class ItemEditorFactory(widgets.QItemEditorFactory):\n\"\"\"Widgets for editing item data in views and delegates.\"\"\"\ncreators = []\n@classmethod\ndef register_default_editor(\ncls,\neditor_cls: type[widgets.QWidget],\ntyp: int | None | type = None,\nproperty_name: str = \"\",\n):\nfactory = cls.defaultFactory()\ncreator = get_creator_class(editor_cls, property_name)()\ncls.creators.append(creator)\nmatch typ:\ncase None:\ntyp = editor_cls.staticMetaObject.userProperty().userType()\ncase type() if typ in TYPES:\ntyp = TYPES[typ].value\ncase int():\npass\ncase _:\nraise TypeError(typ)\nfactory.registerEditor(typ, creator)\ncls.setDefaultFactory(factory)\ndef register_editor(\nself,\neditor_cls: type[widgets.QWidget],\ntyp: int | None | type = None,\nproperty_name: str = \"\",\n):\ncreator = get_creator_class(editor_cls, property_name)()\nself.creators.append(creator)\nmatch typ:\ncase None:\ntyp = editor_cls.staticMetaObject.userProperty().userType()\ncase type() if typ in TYPES:\ntyp = TYPES[typ].value\ncase int():\npass\ncase _:\nraise TypeError(typ)\nself.registerEditor(typ, creator)\n@classmethod\ndef create_extended(cls) -&gt; Self:\nfactory = cls()\nfactory.register_editor(widgets.CheckBox, bool, \"\")\nfactory.register_editor(widgets.SpinBox, int, \"value\")\nfactory.register_editor(widgets.LineEdit, str, \"text\")\nfactory.register_editor(widgets.DoubleSpinBox, float, \"value\")\nfactory.register_editor(widgets.DateEdit, QtCore.QDate, \"date\")\nfactory.register_editor(widgets.TimeEdit, QtCore.QTime, \"time\")\nfactory.register_editor(widgets.DateTimeEdit, QtCore.QDateTime, \"dateTime\")\nfactory.register_editor(custom_widgets.PointEdit, QtCore.QPoint, \"value\")\nfactory.register_editor(custom_widgets.SizeEdit, QtCore.QSize, \"value\")\nfactory.register_editor(custom_widgets.RectEdit, QtCore.QRect, \"value\")\n# factory.register_editor(custom_widgets.EnumFlagWidget, 66231, \"value\")\n# factory.register_editor(custom_widgets.EnumComboBox, 20001, \"value\")\nfactory.register_editor(custom_widgets.RegionEdit, QtGui.QRegion, \"value\")\nfactory.register_editor(\ncustom_widgets.SizePolicyEdit, widgets.QSizePolicy, \"value\"\n)\nfactory.register_editor(\nwidgets.KeySequenceEdit, QtGui.QKeySequence, \"keySequence\"\n)\nfactory.register_editor(\ncustom_widgets.ColorComboBox, QtGui.QColor, \"current_color\"\n)\nfactory.register_editor(widgets.FontComboBox, QtGui.QFont, \"currentFont\")\nfactory.register_editor(widgets.LineEdit, QtCore.QUrl, \"text\")\nfactory.register_editor(widgets.LineEdit, QtCore.QRegularExpression, \"text\")\nreturn factory\n</code></pre>"},{"location":"qt_modules/widgets/ItemEditorFactory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261456528[\"widgets.ItemEditorFactory\"]\n  2103259663280[\"QtWidgets.QItemEditorFactory\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259663280 --&gt; 2103261456528\n  2103206874128 --&gt; 2103259663280\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/KeySequenceEdit.html","title":"KeySequenceEdit","text":"<p>Qt Base Class: QKeySequenceEdit</p> <p>Signature: <code>QKeySequenceEdit(self, keySequence: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int], parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QKeySequenceEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/KeySequenceEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QKeySequenceEdit</code></p> <p>Allows to input a QKeySequence.</p> Source code in <code>prettyqt\\widgets\\keysequenceedit.py</code> <pre><code>class KeySequenceEdit(widgets.WidgetMixin, widgets.QKeySequenceEdit):\n\"\"\"Allows to input a QKeySequence.\"\"\"\nvalue_changed = core.Signal(gui.QKeySequence)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.keySequenceChanged.connect(self._on_value_change)\nself.setClearButtonEnabled(True)\ndef __repr__(self):\nreturn get_repr(self, self.get_value())\ndef _on_value_change(self, val):\nself.value_changed.emit(val)\ndef set_value(self, value: str | gui.QKeySequence):\nif isinstance(value, str):\nvalue = gui.KeySequence.fromString(value)\nself.setKeySequence(value)\ndef get_value(self) -&gt; gui.QKeySequence:\nreturn self.keySequence()\ndef is_valid(self) -&gt; bool:\nreturn True\ndef get_finishing_key_combinations(self) -&gt; list[core.KeyCombination]:\nreturn [core.KeyCombination(i) for i in self.finishingKeyCombinations()]\ndef get_key_combinations(self) -&gt; list[core.KeyCombination]:\nreturn [core.KeyCombination(i) for i in self.keySequence()]\n</code></pre>"},{"location":"qt_modules/widgets/KeySequenceEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261225280[\"widgets.KeySequenceEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259736240[\"QtWidgets.QKeySequenceEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261225280\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259736240 --&gt; 2103261225280\n  2103259691120 --&gt; 2103259736240\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/KeySequenceEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>keySequence</code> QKeySequence <code>clearButtonEnabled</code> bool <code>maximumSequenceLength</code> qlonglong <code>finishingKeyCombinations</code> QList"},{"location":"qt_modules/widgets/LCDNumber.html","title":"LCDNumber","text":"<p>Qt Base Class: QLCDNumber</p> <p>Signature: <code>QLCDNumber(self, numDigits: int, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLCDNumber(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/LCDNumber.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.FrameMixin</code>, <code>widgets.QLCDNumber</code></p> <p>Displays a number with LCD-like digits.</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>class LCDNumber(widgets.FrameMixin, widgets.QLCDNumber):\n\"\"\"Displays a number with LCD-like digits.\"\"\"\nvalue_changed = core.Signal(float)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"segmentStyle\": SEGMENT_STYLE, \"mode\": MODE}\nreturn maps\ndef set_mode(self, mode: ModeStr | widgets.QLCDNumber.Mode):\n\"\"\"Set the lcd mode.\n        Args:\n            mode: lcd mode to use\n        \"\"\"\nself.setMode(MODE.get_enum_value(mode))\ndef get_mode(self) -&gt; ModeStr:\n\"\"\"Return current lcd mode.\n        Returns:\n            lcd mode\n        \"\"\"\nreturn MODE.inverse[self.mode()]\ndef set_segment_style(self, style: SegmentStyleStr | widgets.QLCDNumber.SegmentStyle):\n\"\"\"Set the segment style.\n        Args:\n            style: segment style to use\n        \"\"\"\nself.setSegmentStyle(SEGMENT_STYLE.get_enum_value(style))\ndef get_segment_style(self) -&gt; SegmentStyleStr:\n\"\"\"Return current segment style.\n        Returns:\n            segment style\n        \"\"\"\nreturn SEGMENT_STYLE.inverse[self.segmentStyle()]\ndef set_value(self, value: float | str):\nif value != self.value():\nself.value_changed.emit(float(value))\nself.display(value)\ndef get_value(self) -&gt; float:\nreturn self.value()\n</code></pre>"},{"location":"qt_modules/widgets/LCDNumber.html#prettyqt.widgets.lcdnumber.LCDNumber.get_mode","title":"<code>get_mode() -&gt; ModeStr</code>","text":"<p>Return current lcd mode.</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_mode(self) -&gt; ModeStr:\n\"\"\"Return current lcd mode.\n    Returns:\n        lcd mode\n    \"\"\"\nreturn MODE.inverse[self.mode()]\n</code></pre>"},{"location":"qt_modules/widgets/LCDNumber.html#prettyqt.widgets.lcdnumber.LCDNumber.get_segment_style","title":"<code>get_segment_style() -&gt; SegmentStyleStr</code>","text":"<p>Return current segment style.</p> Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def get_segment_style(self) -&gt; SegmentStyleStr:\n\"\"\"Return current segment style.\n    Returns:\n        segment style\n    \"\"\"\nreturn SEGMENT_STYLE.inverse[self.segmentStyle()]\n</code></pre>"},{"location":"qt_modules/widgets/LCDNumber.html#prettyqt.widgets.lcdnumber.LCDNumber.set_mode","title":"<code>set_mode(mode: ModeStr | widgets.QLCDNumber.Mode)</code>","text":"<p>Set the lcd mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ModeStr | widgets.QLCDNumber.Mode</code> <p>lcd mode to use</p> required Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_mode(self, mode: ModeStr | widgets.QLCDNumber.Mode):\n\"\"\"Set the lcd mode.\n    Args:\n        mode: lcd mode to use\n    \"\"\"\nself.setMode(MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/LCDNumber.html#prettyqt.widgets.lcdnumber.LCDNumber.set_segment_style","title":"<code>set_segment_style(style: SegmentStyleStr | widgets.QLCDNumber.SegmentStyle)</code>","text":"<p>Set the segment style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>SegmentStyleStr | widgets.QLCDNumber.SegmentStyle</code> <p>segment style to use</p> required Source code in <code>prettyqt\\widgets\\lcdnumber.py</code> <pre><code>def set_segment_style(self, style: SegmentStyleStr | widgets.QLCDNumber.SegmentStyle):\n\"\"\"Set the segment style.\n    Args:\n        style: segment style to use\n    \"\"\"\nself.setSegmentStyle(SEGMENT_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/widgets/LCDNumber.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261401808[\"widgets.LCDNumber\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259746800[\"QtWidgets.QLCDNumber\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261110080 --&gt; 2103261401808\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259746800 --&gt; 2103261401808\n  2103259737200 --&gt; 2103259746800\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/LCDNumber.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>smallDecimalPoint</code> bool <code>digitCount</code> int <code>mode</code> QLCDNumber::Mode <code>segmentStyle</code> QLCDNumber::SegmentStyle <code>value</code> double <code>intValue</code> int"},{"location":"qt_modules/widgets/Label.html","title":"Label","text":"<p>Qt Base Class: QLabel</p> <p>Signature: <code>QLabel(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QLabel(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Label.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.FrameMixin</code>, <code>widgets.QLabel</code></p> <p>Text or image display.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>class Label(widgets.FrameMixin, widgets.QLabel):\n\"\"\"Text or image display.\"\"\"\nelision_changed = core.Signal(bool)\nclicked = core.Signal()\ndef __init__(self, *args, **kwargs):\nself._elide_mode = constants.TextElideMode.ElideNone\nsuper().__init__(*args, **kwargs)\nself.openExternalLinks()\nself._is_elided = False\ndef mouseReleaseEvent(self, ev: gui.QMouseEvent):\nif ev.button() == constants.MouseButton.LeftButton:\nself.clicked.emit()\nreturn super().mouseReleaseEvent(ev)\ndef set_elide_mode(self, mode: constants.TextElideModeStr):\nself._elide_mode = constants.TEXT_ELIDE_MODE[mode]\nself.update()\ndef get_elide_mode(self) -&gt; constants.TextElideModeStr:\nreturn constants.TEXT_ELIDE_MODE.inverse[self._elide_mode]\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"textFormat\": constants.TEXT_FORMAT, \"alignment\": constants.ALIGNMENTS}\nreturn maps\ndef __repr__(self):\nreturn get_repr(self, self.text())\n# # adapted from https://forum.qt.io/topic/24530/solved-shortening-a-label/3\n# def minimumSizeHint(self):\n#     if self._elide_mode != constants.TextElideMode.ElideNone:\n#         # TODO: tweak sizeHint\n#         # -&gt; text should expand if user increases window size,\n#         #    but don't automatically adapt window size to label width on UI update!\n#         #    (somehow calculate minimumSizeHint + sizeHint with font metrics???)\n#         fm = self.fontMetrics()\n#         size = core.QSize(fm.width(\"...\"), fm.height())\n#         return size\n#     else:\n#         size = self.minimumSizeHint()\n#         return core.QSize(size.width() + 13, size.height())\n# # adapted from https://www.mimec.org/blog/status-bar-and-elided-label\n# def paintEvent(self, event):\n#     with gui.Painter(self) as painter:\n#         self.drawFrame(painter)\n#         rect = self.contentsRect()\n#         rect.adjust(self.margin(), self.margin(), -self.margin(), -self.margin())\n#         elided_text = painter.fontMetrics().elidedText(\n#             self.text(), self._elide_mode, rect.width()\n#         )\n#         style_option = widgets.QStyleOption()\n#         style_option.initFrom(self)\n#         self.style().drawItemText(\n#             painter,\n#             rect,\n#             self.alignment(),\n#             style_option.palette,\n#             self.isEnabled(),\n#             elided_text,\n#             self.foregroundRole(),\n#         )\ndef paintEvent(self, event):\nif self._elide_mode == constants.TextElideMode.ElideNone:\nsuper().paintEvent(event)\nreturn\ndid_elide = False\nwith gui.Painter(self) as painter:\nfont_metrics = painter.fontMetrics()\ntext_lines = self.text().split(\"\\n\")\ntext_width = font_metrics.horizontalAdvance(self.text())\nline_spacing = font_metrics.lineSpacing()\n# layout phase\ntext_layout = gui.TextLayout(self.text(), painter.font())\ncurrent_y = 0\nwith text_layout.process_layout():\nfor line in text_lines:\ntext_width = font_metrics.horizontalAdvance(line)\n# if self.height() &gt;= next_line_y + line_spacing:\n#     line.draw(painter, core.PointF(0, y))\n#     y = next_line_y\n# else:\n#     last_line = self._text[line.textStart() :]\n#     elided_line = metrics.elided_text(\n#         last_line, \"right\", self.width()\n#     )\n#     painter.drawText(0, y + metrics.ascent(), elided_line)\n#     line = layout.createLine()\n#     did_elide = line.isValid()\n#     break\nif text_width &gt;= self.width():\nelided_line = font_metrics.elidedText(\nline, self._elide_mode, self.width()\n)\npainter.drawText(\ncore.QRect(0, current_y, self.width(), self.height()),\nint(self.alignment()),\nelided_line,\n)\ndid_elide = True\nelse:\npainter.drawText(\ncore.QRect(0, current_y, self.width(), self.height()),\nint(self.alignment()),\nline,\n)\ncurrent_y += line_spacing\nif did_elide != self._is_elided:\nself._is_elided = did_elide\nself.elision_changed.emit(did_elide)\ndef allow_links(self) -&gt; Label:\n# self.setText(\"&lt;a href=\\\"http://example.com/\\\"&gt;Click Here!&lt;/a&gt;\")\nself.setTextFormat(constants.TextFormat.RichText)\nself.setTextInteractionFlags(constants.TextInteractionFlag.TextBrowserInteraction)\nself.setOpenExternalLinks(True)\nreturn self\ndef set_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set the alignment of the label's contents.\"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn self\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setAlignment(flag)\nreturn self\ndef get_horizontal_alignment(self) -&gt; constants.HorizontalAlignmentStr:\nalign = self.alignment()\nif align &amp; constants.ALIGN_RIGHT:  # type: ignore\nreturn \"right\"\nelif align &amp; constants.ALIGN_H_CENTER:  # type: ignore\nreturn \"center\"\nelif align &amp; constants.ALIGN_JUSTIFY:  # type: ignore\nreturn \"justify\"\nelse:\nreturn \"left\"\ndef get_vertical_alignment(self) -&gt; constants.VerticalAlignmentStr:\nalign = self.alignment()\nif align &amp; constants.ALIGN_TOP:  # type: ignore\nreturn \"top\"\nelif align &amp; constants.ALIGN_BOTTOM:  # type: ignore\nreturn \"bottom\"\nelif align &amp; constants.ALIGN_BASELINE:  # type: ignore\nreturn \"baseline\"\nelse:\nreturn \"center\"\ndef set_indent(self, indent: int) -&gt; Label:\n\"\"\"Set the label's text indent in pixels.\"\"\"\nself.setIndent(indent)\nreturn self\ndef set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n) -&gt; Label:\n\"\"\"Set the text format.\n        Args:\n            text_format: text format to use\n        \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\nreturn self\ndef get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n        Returns:\n            text format\n        \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\ndef set_text_interaction(self, *types: constants.TextInteractionStr) -&gt; Label:\n\"\"\"Set the text interaction mode.\n        Args:\n            types: text interaction mode to use\n        \"\"\"\nflags = constants.TEXT_INTERACTION.merge_flags(types)\nself.setTextInteractionFlags(flags)\nreturn self\ndef get_text_interaction(self) -&gt; list[constants.TextInteractionStr]:\n\"\"\"Return current text interaction mode.\n        Returns:\n            list of text interaction modes\n        \"\"\"\nreturn constants.TEXT_INTERACTION.get_list(self.textInteractionFlags())\ndef set_text(self, text: str) -&gt; Label:\n\"\"\"Set the label's text.\"\"\"\nself.setText(text)\nreturn self\ndef set_bold(self, bold: bool = True) -&gt; Label:\nfont = self.font()\nfont.setBold(bold)\nself.setFont(font)\nreturn self\ndef set_italic(self, italic: bool = True) -&gt; Label:\nfont = self.font()\nfont.setItalic(italic)\nself.setFont(font)\nreturn self\ndef set_point_size(self, size: int) -&gt; Label:\nfont = self.font()\nfont.setPointSize(size)\nself.setFont(font)\nreturn self\ndef set_weight(self, weight: gui.font.WeightStr | gui.QFont.Weight) -&gt; Label:\n\"\"\"Set the font weight.\n        Args:\n            weight: font weight\n        \"\"\"\nfont = self.font()\nfont.setWeight(gui.font.WEIGHT.get_enum_value(weight))\nself.setFont(font)\nreturn self\ndef set_color(self, color: datatypes.ColorType) -&gt; Label:\nwith self.edit_stylesheet() as ss:\nif color is None:\nss.color.setValue(\"\")\nelse:\ncolor = colors.get_color(color)\nss.color.setValue(color.name())\nreturn self\ndef set_image(self, path: datatypes.PathType, width: int = 300) -&gt; Label:\nself.setScaledContents(True)\nself.set_alignment(horizontal=\"center\")\nself.setText(\n\"&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;\"\nf\"&lt;img src={os.fspath(path)!r} width={str(width)!r}/&gt;\"\n\"&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"\n)\nreturn self\n@classmethod\ndef image_from_path(\ncls, path: datatypes.PathType, parent: widgets.QWidget | None = None\n) -&gt; Self:\npixmap = gui.Pixmap.from_file(path)\nlabel = cls(parent=parent)\nlabel.setPixmap(pixmap)\nlabel.resize(pixmap.width(), pixmap.height())\nreturn label\nelideMode = core.Property(\nstr,\nget_elide_mode,\nset_elide_mode,\ndoc=\"Text Elide style\",\n)\n</code></pre> Name Children Inherits <code>CPAlphaShowLabel</code>prettyqt.widgets.colordialog <ul><li>Label</li></ul> ClickableLabelprettyqt.custom_widgets.labels.clickablelabel <ul><li>Label</li></ul> IconWidgetprettyqt.custom_widgets.labels.iconwidget <ul><li>Label</li></ul>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.get_text_format","title":"<code>get_text_format() -&gt; constants.TextFormatStr</code>","text":"<p>Return current text format.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n    Returns:\n        text format\n    \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.get_text_interaction","title":"<code>get_text_interaction() -&gt; list[constants.TextInteractionStr]</code>","text":"<p>Return current text interaction mode.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def get_text_interaction(self) -&gt; list[constants.TextInteractionStr]:\n\"\"\"Return current text interaction mode.\n    Returns:\n        list of text interaction modes\n    \"\"\"\nreturn constants.TEXT_INTERACTION.get_list(self.textInteractionFlags())\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.set_alignment","title":"<code>set_alignment(horizontal: constants.HorizontalAlignmentStr | None = None, vertical: constants.VerticalAlignmentStr | None = None)</code>","text":"<p>Set the alignment of the label's contents.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr | None = None,\nvertical: constants.VerticalAlignmentStr | None = None,\n):\n\"\"\"Set the alignment of the label's contents.\"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn self\ncase None, _:\nflag = constants.V_ALIGNMENT[vertical]\ncase _, None:\nflag = constants.H_ALIGNMENT[horizontal]\ncase _, _:\nflag = constants.V_ALIGNMENT[vertical] | constants.H_ALIGNMENT[horizontal]\nself.setAlignment(flag)\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.set_indent","title":"<code>set_indent(indent: int) -&gt; Label</code>","text":"<p>Set the label's text indent in pixels.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_indent(self, indent: int) -&gt; Label:\n\"\"\"Set the label's text indent in pixels.\"\"\"\nself.setIndent(indent)\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.set_text","title":"<code>set_text(text: str) -&gt; Label</code>","text":"<p>Set the label's text.</p> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text(self, text: str) -&gt; Label:\n\"\"\"Set the label's text.\"\"\"\nself.setText(text)\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.set_text_format","title":"<code>set_text_format(text_format: constants.TextFormatStr | constants.TextFormat) -&gt; Label</code>","text":"<p>Set the text format.</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>constants.TextFormatStr | constants.TextFormat</code> <p>text format to use</p> required Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n) -&gt; Label:\n\"\"\"Set the text format.\n    Args:\n        text_format: text format to use\n    \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.set_text_interaction","title":"<code>set_text_interaction(*types: constants.TextInteractionStr) -&gt; Label</code>","text":"<p>Set the text interaction mode.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>constants.TextInteractionStr</code> <p>text interaction mode to use</p> <code>()</code> Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_text_interaction(self, *types: constants.TextInteractionStr) -&gt; Label:\n\"\"\"Set the text interaction mode.\n    Args:\n        types: text interaction mode to use\n    \"\"\"\nflags = constants.TEXT_INTERACTION.merge_flags(types)\nself.setTextInteractionFlags(flags)\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#prettyqt.widgets.label.Label.set_weight","title":"<code>set_weight(weight: gui.font.WeightStr | gui.QFont.Weight) -&gt; Label</code>","text":"<p>Set the font weight.</p> <p>Parameters:</p> Name Type Description Default <code>weight</code> <code>gui.font.WeightStr | gui.QFont.Weight</code> <p>font weight</p> required Source code in <code>prettyqt\\widgets\\label.py</code> <pre><code>def set_weight(self, weight: gui.font.WeightStr | gui.QFont.Weight) -&gt; Label:\n\"\"\"Set the font weight.\n    Args:\n        weight: font weight\n    \"\"\"\nfont = self.font()\nfont.setWeight(gui.font.WEIGHT.get_enum_value(weight))\nself.setFont(font)\nreturn self\n</code></pre>"},{"location":"qt_modules/widgets/Label.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261249280[\"widgets.Label\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259742960[\"QtWidgets.QLabel\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261110080 --&gt; 2103261249280\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259742960 --&gt; 2103261249280\n  2103259737200 --&gt; 2103259742960\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Label.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>text</code> QString <code>textFormat</code> Qt::TextFormat <code>pixmap</code> QPixmap <code>scaledContents</code> bool <code>alignment</code> QFlags <code>wordWrap</code> bool <code>margin</code> int <code>indent</code> int <code>openExternalLinks</code> bool <code>textInteractionFlags</code> QFlags <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>elideMode</code> QString Text Elide style"},{"location":"qt_modules/widgets/Layout.html","title":"Layout","text":"<p>Qt Base Class: QLayout</p> <p>Signature: <code>QLayout(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Layout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>LayoutMixin</code>, <code>widgets.QLayout</code></p> <p>The base class of geometry managers.</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>class Layout(LayoutMixin, widgets.QLayout):\n\"\"\"The base class of geometry managers.\"\"\"\n</code></pre> Name Children Inherits FlowLayoutprettyqt.custom_widgets.layouts.flowlayout <ul><li>Layout</li></ul> BorderLayoutprettyqt.custom_widgets.layouts.borderlayout <ul><li>Layout</li></ul>"},{"location":"qt_modules/widgets/Layout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261443088[\"widgets.Layout\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261439248 --&gt; 2103261443088\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260125776 --&gt; 2103261443088\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/Layout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"qt_modules/widgets/LayoutItem.html","title":"LayoutItem","text":"<p>Qt Base Class: QLayoutItem</p> <p>Signature: <code>QLayoutItem(self, alignment: PySide6.QtCore.Qt.AlignmentFlag = Default(Qt.Alignment)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/LayoutItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>LayoutItemMixin</code>, <code>widgets.QLayoutItem</code></p> <p>Abstract item that a QLayout manipulates.</p> Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>class LayoutItem(LayoutItemMixin, widgets.QLayoutItem):\n\"\"\"Abstract item that a QLayout manipulates.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/LayoutItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261423888[\"widgets.LayoutItem\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261422928 --&gt; 2103261423888\n  140736120080256 --&gt; 2103261422928\n  2103259638320 --&gt; 2103261423888\n  2103206874128 --&gt; 2103259638320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/LayoutItemMixin.html","title":"LayoutItemMixin","text":""},{"location":"qt_modules/widgets/LayoutItemMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>class LayoutItemMixin:\ndef __bool__(self):\nreturn not self.isEmpty()\ndef set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n        Args:\n            alignment: alignment for the layout\n        \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef get_item(\nself,\n) -&gt; widgets.QWidget | widgets.QLayout | widgets.QSpacerItem | None:\nif content := self.widget():\nreturn content\nif content := self.layout():\nreturn content\nreturn content if (content := self.spacerItem()) else None\ndef get_control_types(self) -&gt; list[widgets.sizepolicy.ControlTypeStr]:\nreturn widgets.sizepolicy.CONTROL_TYPE.get_list(self.controlTypes())\ndef get_expanding_directions(self) -&gt; list[constants.OrientationStr]:\nreturn constants.ORIENTATION.get_list(self.expandingDirections())\n</code></pre> Name Children Inherits LayoutItemprettyqt.widgets.layoutitem <ul><li>LayoutItemMixin</li><li>QLayoutItem</li></ul> WidgetItemprettyqt.widgets.widgetitem <ul><li>LayoutItemMixin</li><li>QWidgetItem</li></ul> LayoutMixinprettyqt.widgets.layout <ul><li>Layout</li><li>FormLayout</li><li><code>BoxLayoutMixin</code></li><li>StackedLayout</li><li>GridLayout</li></ul> <ul><li>ObjectMixin</li><li>LayoutItemMixin</li></ul> SpacerItemprettyqt.widgets.spaceritem <ul><li>LayoutItemMixin</li><li>QSpacerItem</li></ul>"},{"location":"qt_modules/widgets/LayoutItemMixin.html#prettyqt.widgets.layoutitem.LayoutItemMixin.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"qt_modules/widgets/LayoutItemMixin.html#prettyqt.widgets.layoutitem.LayoutItemMixin.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr)</code>","text":"<p>Set the alignment of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr</code> <p>alignment for the layout</p> required Source code in <code>prettyqt\\widgets\\layoutitem.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr):\n\"\"\"Set the alignment of the layout.\n    Args:\n        alignment: alignment for the layout\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/LayoutItemMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261422928</code></pre>"},{"location":"qt_modules/widgets/LayoutMixin.html","title":"LayoutMixin","text":""},{"location":"qt_modules/widgets/LayoutMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>widgets.LayoutItemMixin</code></p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>class LayoutMixin(core.ObjectMixin, widgets.LayoutItemMixin):\ndef __init__(self, *args, margin=None, **kwargs):\nself._next_container = None\nself._stack = []\nsuper().__init__(*args, **kwargs)\nif margin is not None:\nself.set_margin(margin)\n@overload\ndef __getitem__(\nself, index: slice\n) -&gt; listdelegators.ListDelegator[widgets.QWidget | widgets.QLayout]:\n...\n@overload\ndef __getitem__(self, index: int | str) -&gt; widgets.QWidget | widgets.QLayout:\n...\ndef __getitem__(\nself, index: str | int | slice\n) -&gt; (\nwidgets.QWidget\n| widgets.QLayout\n| listdelegators.ListDelegator[widgets.QWidget | widgets.QLayout]\n):\nmatch index:\ncase int():\nif index &lt; 0:\nindex + self.count()\nif index &lt; 0 or index &gt;= self.count():\nraise IndexError(index)\nitem = self.itemAt(index)\nreturn i if (i := item.widget()) is not None else item.layout()\ncase str():\nif (item := self.find_child(typ=core.QObject, name=index)) is not None:\nreturn item\nraise KeyError(index)\ncase slice():\nstop = index.stop or self.count()\nrng = range(index.start or 0, stop, index.step or 1)\nwidgets = [self[i] for i in rng]\nreturn listdelegators.ListDelegator(widgets, parent=self)\ncase _:\nraise TypeError(index)\ndef __setitem__(self, key, value):\nif self._container != self:\nself._container.__setitem__(key, value)\ndef __delitem__(self, item: int | widgets.QLayoutItem):\nif isinstance(item, int):\nitem = self.itemAt(item)\nself.removeItem(item)\nitem.deleteLater()\ndef __len__(self) -&gt; int:\nreturn self.count()\ndef __iter__(self) -&gt; Iterator[widgets.QWidget | widgets.QLayout | None]:\nreturn iter(self[i] for i in range(self.count()))\ndef __contains__(self, item: widgets.QWidget | widgets.QLayoutItem):\nreturn self.indexOf(item) &gt;= 0\ndef __iadd__(self, item, *args, **kwargs):\nself.add(item, *args, **kwargs)\nreturn self\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"sizeConstraint\": SIZE_CONSTRAINT}\nreturn maps\ndef add(self, item, *args, **kwargs):\nmatch item:\ncase widgets.QWidget():\nself._container.addWidget(item, *args, **kwargs)\ncase widgets.QLayout():\nself._container.addLayout(item, *args, **kwargs)\ncase widgets.QLayoutItem():\nself._container.addItem(item, *args, **kwargs)\ncase list():\nfor i in item:\nself._container.add(i, *args, **kwargs)\nreturn item\ndef __enter__(self):\ndef enter(item):\nif item._next_container is not None:\nenter(item._next_container)\nitem._stack.append(item._next_container)\nitem._next_container = None\nreturn item\nreturn enter(self)\ndef __exit__(self, *_):\ndef exit(item):\nif item._stack:\nitem = item._stack.pop()\nexit(item)\nexit(self)\n@property\ndef _container(self):\nreturn self._stack[-1] if self._stack else self\ndef get_sub_layout(\nself,\nlayout: str,\norientation: constants.OrientationStr | None = None,\nstretch: int | None = None,\n**kwargs,\n) -&gt; Self:\nfrom prettyqt import custom_widgets\nCONTEXT_LAYOUTS = dict(\nhorizontal=widgets.HBoxLayout,\nvertical=widgets.VBoxLayout,\ngrid=widgets.GridLayout,\nform=widgets.FormLayout,\nstacked=widgets.StackedLayout,\nflow=custom_widgets.FlowLayout,\nsplitter=widgets.Splitter,\nscroll=widgets.ScrollArea,\nframe=widgets.GroupBox,\n)\nKlass = CONTEXT_LAYOUTS[layout]\nmatch self._container:\ncase widgets.QWidget() if layout == \"scroll\":\nscroller = Klass(parent=self._container)\nscroller.setWidgetResizable(True)\nwidget = widgets.Widget()\nscroller.set_widget(widget)\nnew = widget.set_layout(orientation, **kwargs)\ncase widgets.QLayout() if layout == \"scroll\":\nscroller = Klass(parent=self._container)\nscroller.setWidgetResizable(True)\nwidget = widgets.Widget()\nscroller.set_widget(widget)\nnew = widget.set_layout(orientation, **kwargs)\nself._container.add(new)\ncase widgets.QWidget() if layout == \"splitter\":\nnew = Klass(orientation=orientation, parent=self._container, **kwargs)\ncase widgets.QLayout() if layout == \"splitter\":\nnew = Klass(orientation=orientation, **kwargs)\nself._container.add(new)\ncase widgets.QWidget() if layout == \"frame\":\nframe = Klass(parent=self._container, **kwargs)\nwidget = widgets.Widget()\nnew = widget.set_layout(orientation or \"horizontal\")\nframe.set_layout(new)\ncase widgets.QLayout() if layout == \"frame\":\nframe = Klass(**kwargs)\nwidget = widgets.Widget()\nnew = widget.set_layout(orientation or \"horizontal\")\nframe.set_layout(new)\nself._container.add(new)\ncase widgets.QMainWindow():\nwidget = widgets.Widget(parent=self._container)\nself._container.setCentralWidget(widget)\nnew = Klass(widget, **kwargs)\ncase widgets.QScrollArea():\nwidget = widgets.Widget(parent=self._container)\nself._container.setWidget(widget)\nself._container.setWidgetResizable(True)\nnew = widget.set_layout(\"vertical\", **kwargs)\ncase widgets.QSplitter():\nwidget = widgets.Widget(parent=self._container)\nself._container.addWidget(widget)\nnew = Klass(widget, **kwargs)\ncase None | widgets.QWidget():\nnew = Klass(self._container, **kwargs)\ncase widgets.QLayout():\nnew = Klass(**kwargs)\nif stretch:\nself._container.add(new, stretch)\nelse:\nself._container.add(new)\nnew._stack = []\nnew._next_container = None\nself._next_container = new\nreturn self\ndef item_at(self, pos_or_index: int | core.Point) -&gt; widgets.QLayoutItem:\nmatch pos_or_index:\ncase int():\nreturn super().itemAt(pos_or_index)\ncase core.QPoint():\nfor i in range(self.count()):\nitem = self.itemAt(i)\nif item.geometry().contains(pos_or_index):\nreturn item\ncase _:\nraise ValueError(pos_or_index)\ndef clear(self):\nfor i in reversed(range(self.count())):\nself.takeAt(i)\n# def takeAt(self, index: int):\n#     if index &lt; 0:\n#         index = self.count() + index\n#     return super().takeAt(index)\ndef get_items(self):\nreturn [self.itemAt(i) for i in range(self.count())]\ndef get_children(\nself,\n) -&gt; listdelegators.ListDelegator[widgets.QWidget | widgets.QLayout]:\nreturn listdelegators.ListDelegator(self)\ndef set_margin(self, margin: datatypes.MarginsType | None):\nmatch margin:\ncase None:\nself.unsetContentsMargins()\ncase _:\nmargin = datatypes.to_margins(margin)\nself.setContentsMargins(margin)\ndef set_spacing(self, pixels: int):\nself.setSpacing(pixels)\ndef set_size_constraint(\nself, mode: SizeConstraintStr | widgets.QLayout.SizeConstraint\n):\n\"\"\"Set the size mode of the layout.\n        Args:\n            mode: size mode for the layout\n        \"\"\"\nself.setSizeConstraint(SIZE_CONSTRAINT.get_enum_value(mode))\ndef get_size_constraint(self) -&gt; SizeConstraintStr:\n\"\"\"Return current size mode.\n        Returns:\n            size mode\n        \"\"\"\nreturn SIZE_CONSTRAINT.inverse[self.sizeConstraint()]\ndef set_alignment(\nself,\nalignment: constants.AlignmentStr | constants.AlignmentFlag,\nitem: widgets.QWidget | widgets.QLayout | None = None,\n) -&gt; bool:\n\"\"\"Set the alignment for widget / layout to alignment.\n        Returns true if w is found in this layout (not including child layouts).\n        Args:\n            alignment: alignment for the layout\n            item: set alignment for specific child only\n        \"\"\"\nif item is not None:\nreturn self.setAlignment(item, constants.ALIGNMENTS.get_enum_value(alignment))\nelse:\nreturn self.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre> Name Children Inherits Layoutprettyqt.widgets.layout <ul><li>FlowLayout</li><li>BorderLayout</li></ul> <ul><li>LayoutMixin</li><li>QLayout</li></ul> FormLayoutprettyqt.widgets.formlayout <ul><li>LayoutMixin</li><li>QFormLayout</li></ul> <code>BoxLayoutMixin</code>prettyqt.widgets.boxlayout <ul><li>BoxLayout</li><li>HBoxLayout</li><li>VBoxLayout</li></ul> <ul><li>LayoutMixin</li></ul> StackedLayoutprettyqt.widgets.stackedlayout <ul><li>LayoutMixin</li><li>QStackedLayout</li></ul> GridLayoutprettyqt.widgets.gridlayout <ul><li>LayoutMixin</li><li>QGridLayout</li></ul>"},{"location":"qt_modules/widgets/LayoutMixin.html#prettyqt.widgets.layout.LayoutMixin.get_size_constraint","title":"<code>get_size_constraint() -&gt; SizeConstraintStr</code>","text":"<p>Return current size mode.</p> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def get_size_constraint(self) -&gt; SizeConstraintStr:\n\"\"\"Return current size mode.\n    Returns:\n        size mode\n    \"\"\"\nreturn SIZE_CONSTRAINT.inverse[self.sizeConstraint()]\n</code></pre>"},{"location":"qt_modules/widgets/LayoutMixin.html#prettyqt.widgets.layout.LayoutMixin.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag, item: widgets.QWidget | widgets.QLayout | None = None) -&gt; bool</code>","text":"<p>Set the alignment for widget / layout to alignment.</p> <p>Returns true if w is found in this layout (not including child layouts).</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the layout</p> required <code>item</code> <code>widgets.QWidget | widgets.QLayout | None</code> <p>set alignment for specific child only</p> <code>None</code> Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_alignment(\nself,\nalignment: constants.AlignmentStr | constants.AlignmentFlag,\nitem: widgets.QWidget | widgets.QLayout | None = None,\n) -&gt; bool:\n\"\"\"Set the alignment for widget / layout to alignment.\n    Returns true if w is found in this layout (not including child layouts).\n    Args:\n        alignment: alignment for the layout\n        item: set alignment for specific child only\n    \"\"\"\nif item is not None:\nreturn self.setAlignment(item, constants.ALIGNMENTS.get_enum_value(alignment))\nelse:\nreturn self.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/LayoutMixin.html#prettyqt.widgets.layout.LayoutMixin.set_size_constraint","title":"<code>set_size_constraint(mode: SizeConstraintStr | widgets.QLayout.SizeConstraint)</code>","text":"<p>Set the size mode of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SizeConstraintStr | widgets.QLayout.SizeConstraint</code> <p>size mode for the layout</p> required Source code in <code>prettyqt\\widgets\\layout.py</code> <pre><code>def set_size_constraint(\nself, mode: SizeConstraintStr | widgets.QLayout.SizeConstraint\n):\n\"\"\"Set the size mode of the layout.\n    Args:\n        mode: size mode for the layout\n    \"\"\"\nself.setSizeConstraint(SIZE_CONSTRAINT.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/LayoutMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html","title":"LineEdit","text":"<p>Qt Base Class: QLineEdit</p> <p>Signature: <code>QLineEdit(self, arg__1: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QLineEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/LineEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QLineEdit</code></p> <p>One-line text editor.</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>class LineEdit(widgets.WidgetMixin, widgets.QLineEdit):\n\"\"\"One-line text editor.\"\"\"\nvalue_changed = core.Signal(str)\ntab_pressed = core.Signal()\ndef __init__(self, *args, **kwargs):\nself._validation_color = gui.Color(\"orange\")\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self._on_value_change)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, str)\ndef _on_value_change(self):\nval = self.get_value()\nself._update_background()\nself.value_changed.emit(val)\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef __add__(self, other: str):\nself.append_text(other)\nreturn self\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"echoMode\": ECHO_MODE,\n\"cursorMoveStyle\": constants.CURSOR_MOVE_STYLE,\n\"alignment\": constants.ALIGNMENTS,\n}\nreturn maps\ndef font(self) -&gt; gui.Font:\nreturn gui.Font(super().font())\ndef keyPressEvent(self, event):\nsuper().keyPressEvent(event)\nif event.key() == constants.Key.Key_Tab:\nself.tab_pressed.emit()\ndef append_text(self, text: str):\nself.set_text(self.text() + text)\ndef set_text(self, text: str):\nself.setText(text)\ndef set_completer(self, completer: widgets.QCompleter | Literal[\"files\"]):\nmatch completer:\ncase widgets.QCompleter():\nself.setCompleter(completer)\ncase \"files\":\nmodel = widgets.FileSystemModel()\nmodel.set_root_path(\"\")\ncompleter = widgets.Completer(self)\ncompleter.setModel(model)\nself.setCompleter(completer)\ndef set_read_only(self, value: bool = True):\n\"\"\"Set text to read-only.\n        Args:\n            value: True, for read-only, otherwise False\n        \"\"\"\nself.setReadOnly(value)\ndef set_regex_validator(\nself, regex: str, flags: int = 0\n) -&gt; gui.RegularExpressionValidator:\nvalidator = gui.RegularExpressionValidator(self)\nvalidator.set_regex(regex, flags)\nself.set_validator(validator)\nreturn validator\ndef set_range(self, lower: int | None, upper: int | None):\nval = gui.IntValidator()\nval.set_range(lower, upper)\nself.set_validator(val)\ndef set_validator(\nself,\nvalidator: gui.QValidator\n| ValidatorStr\n| datatypes.PatternType\n| Callable\n| None,\nstrict: bool = True,\nempty_allowed: bool | None = None,\nappend: bool = False,\n**kwargs,\n) -&gt; gui.QValidator:\nfrom prettyqt import validators\nmatch validator:\ncase str() if \"|\" in validator:\nvals = [get_validator(i, **kwargs) for i in validator.split(\"|\")]\nvalidator: widgets.QValidator = validators.AndValidator(vals)\ncase str() | re.Pattern() | core.QRegularExpression() | Callable():\nvalidator = get_validator(validator, **kwargs)\ncase None | gui.QValidator():\npass\ncase _:\nraise ValueError(validator)\nif empty_allowed is False:\nvalidator = validators.AndValidator(\n[validator, validators.NotEmptyValidator()]\n)\nelif empty_allowed is True:\nvalidator = validators.OrValidator([validator, validators.EmptyValidator()])\nif not strict:\nvalidator = validators.NotStrictValidator(validator)\nif append and (prev := widget.validator()) is not None:\nvalidator = validators.AndValidator([prev, validator])\nself.setValidator(validator)\nself._update_background()\nreturn validator\ndef set_input_mask(self, mask: str):\nmatch mask:\ncase \"ip_address\":\nmask = \"000.000.000.000;_\"\ncase \"mac_address\":\nmask = \"HH:HH:HH:HH:HH:HH;_\"\ncase \"iso_date\":\nmask = \"0000-00-00\"\nself.setInputMask(mask)\ndef _update_background(self):\ncolor = None if self.hasAcceptableInput() else self._validation_color\nself.set_background_color(color)\ndef set_validation_color(self, color: datatypes.ColorType):\nself._validation_color = colors.get_color(color).as_qt()\ndef get_validation_color(self) -&gt; gui.QColor:\nreturn self._validation_color\ndef set_echo_mode(self, mode: EchoModeStr | widgets.QLineEdit.EchoMode):\n\"\"\"Set echo mode.\n        Args:\n            mode: echo mode to use\n        \"\"\"\nself.setEchoMode(ECHO_MODE.get_enum_value(mode))\ndef get_echo_mode(self) -&gt; EchoModeStr:\n\"\"\"Return echo mode.\n        Returns:\n            echo mode\n        \"\"\"\nreturn ECHO_MODE.inverse[self.echoMode()]\ndef set_cursor_move_style(\nself, style: constants.CursorMoveStyleStr | constants.CursorMoveStyle\n):\n\"\"\"Set cursor move style.\n        Args:\n            style: cursor move style to use\n        \"\"\"\nself.setCursorMoveStyle(constants.CURSOR_MOVE_STYLE.get_enum_value(style))\ndef get_cursor_move_style(self) -&gt; constants.CursorMoveStyleStr:\n\"\"\"Return cursor move style.\n        Returns:\n            cursor move style\n        \"\"\"\nreturn constants.CURSOR_MOVE_STYLE.inverse[self.cursorMoveStyle()]\ndef add_action(\nself,\naction: gui.QAction,\nposition: ActionPositionStr | widgets.QLineEdit.ActionPosition = \"trailing\",\n):\nself.addAction(action, ACTION_POSITION.get_enum_value(position))\ndef set_value(self, value: str):\nself.setText(value)\ndef get_value(self) -&gt; str:\nreturn self.text()\ndef is_valid(self) -&gt; bool:\nreturn self.hasAcceptableInput()\n</code></pre> Name Children Inherits ListInputprettyqt.custom_widgets.editors.listinput <ul><li>LineEdit</li></ul> IntLineEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> FloatLineEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> UrlLineEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul> StringListEditprettyqt.custom_widgets.editors.lineedits <ul><li>LineEdit</li></ul>"},{"location":"qt_modules/widgets/LineEdit.html#prettyqt.widgets.lineedit.LineEdit.get_cursor_move_style","title":"<code>get_cursor_move_style() -&gt; constants.CursorMoveStyleStr</code>","text":"<p>Return cursor move style.</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_cursor_move_style(self) -&gt; constants.CursorMoveStyleStr:\n\"\"\"Return cursor move style.\n    Returns:\n        cursor move style\n    \"\"\"\nreturn constants.CURSOR_MOVE_STYLE.inverse[self.cursorMoveStyle()]\n</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html#prettyqt.widgets.lineedit.LineEdit.get_echo_mode","title":"<code>get_echo_mode() -&gt; EchoModeStr</code>","text":"<p>Return echo mode.</p> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def get_echo_mode(self) -&gt; EchoModeStr:\n\"\"\"Return echo mode.\n    Returns:\n        echo mode\n    \"\"\"\nreturn ECHO_MODE.inverse[self.echoMode()]\n</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html#prettyqt.widgets.lineedit.LineEdit.set_cursor_move_style","title":"<code>set_cursor_move_style(style: constants.CursorMoveStyleStr | constants.CursorMoveStyle)</code>","text":"<p>Set cursor move style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.CursorMoveStyleStr | constants.CursorMoveStyle</code> <p>cursor move style to use</p> required Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_cursor_move_style(\nself, style: constants.CursorMoveStyleStr | constants.CursorMoveStyle\n):\n\"\"\"Set cursor move style.\n    Args:\n        style: cursor move style to use\n    \"\"\"\nself.setCursorMoveStyle(constants.CURSOR_MOVE_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html#prettyqt.widgets.lineedit.LineEdit.set_echo_mode","title":"<code>set_echo_mode(mode: EchoModeStr | widgets.QLineEdit.EchoMode)</code>","text":"<p>Set echo mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>EchoModeStr | widgets.QLineEdit.EchoMode</code> <p>echo mode to use</p> required Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_echo_mode(self, mode: EchoModeStr | widgets.QLineEdit.EchoMode):\n\"\"\"Set echo mode.\n    Args:\n        mode: echo mode to use\n    \"\"\"\nself.setEchoMode(ECHO_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html#prettyqt.widgets.lineedit.LineEdit.set_read_only","title":"<code>set_read_only(value: bool = True)</code>","text":"<p>Set text to read-only.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True, for read-only, otherwise False</p> <code>True</code> Source code in <code>prettyqt\\widgets\\lineedit.py</code> <pre><code>def set_read_only(self, value: bool = True):\n\"\"\"Set text to read-only.\n    Args:\n        value: True, for read-only, otherwise False\n    \"\"\"\nself.setReadOnly(value)\n</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261134080[\"widgets.LineEdit\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259700720[\"QtWidgets.QLineEdit\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261134080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259700720 --&gt; 2103261134080\n  2103259691120 --&gt; 2103259700720\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/LineEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>inputMask</code> QString <code>text</code> QString <code>maxLength</code> int <code>frame</code> bool <code>echoMode</code> QLineEdit::EchoMode <code>displayText</code> QString <code>cursorPosition</code> int <code>alignment</code> QFlags <code>modified</code> bool <code>hasSelectedText</code> bool <code>selectedText</code> QString <code>dragEnabled</code> bool <code>readOnly</code> bool <code>undoAvailable</code> bool <code>redoAvailable</code> bool <code>acceptableInput</code> bool <code>placeholderText</code> QString <code>cursorMoveStyle</code> Qt::CursorMoveStyle <code>clearButtonEnabled</code> bool"},{"location":"qt_modules/widgets/ListView.html","title":"ListView","text":"<p>Qt Base Class: QListView</p> <p>Signature: <code>QListView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ListView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ListViewMixin</code>, <code>widgets.QListView</code></p> <p>List or icon view onto a model.</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>class ListView(ListViewMixin, widgets.QListView):\n\"\"\"List or icon view onto a model.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/ListView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261372048[\"widgets.ListView\"]\n  2103261403728[\"widgets.ListViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259805360[\"QtWidgets.QListView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261403728 --&gt; 2103261372048\n  2103261136960 --&gt; 2103261403728\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259805360 --&gt; 2103261372048\n  2103259770800 --&gt; 2103259805360\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ListView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>movement</code> QListView::Movement <code>flow</code> QListView::Flow <code>isWrapping</code> bool <code>resizeMode</code> QListView::ResizeMode <code>layoutMode</code> QListView::LayoutMode <code>spacing</code> int <code>gridSize</code> QSize <code>viewMode</code> QListView::ViewMode <code>modelColumn</code> int <code>uniformItemSizes</code> bool <code>batchSize</code> int <code>wordWrap</code> bool <code>selectionRectVisible</code> bool <code>itemAlignment</code> QFlags"},{"location":"qt_modules/widgets/ListViewMixin.html","title":"ListViewMixin","text":""},{"location":"qt_modules/widgets/ListViewMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>class ListViewMixin(widgets.AbstractItemViewMixin):\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"viewMode\": VIEW_MODE,\n\"resizeMode\": RESIZE_MODE,\n\"layoutMode\": LAYOUT_MODE,\n\"movement\": MOVEMENT,\n\"flow\": FLOW,\n}\nreturn maps\ndef set_view_mode(self, mode: ViewModeStr | widgets.QListView.ViewMode):\n\"\"\"Set view mode.\n        Args:\n            mode: view mode to use\n        \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\ndef get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n        Returns:\n            view mode\n        \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_resize_mode(self, mode: ResizeModeStr | widgets.QListView.ResizeMode):\n\"\"\"Set resize mode.\n        Args:\n            mode: resize mode to use\n        \"\"\"\nself.setResizeMode(RESIZE_MODE.get_enum_value(mode))\ndef get_resize_mode(self) -&gt; ResizeModeStr:\n\"\"\"Return resize mode.\n        Returns:\n            resize mode\n        \"\"\"\nreturn RESIZE_MODE.inverse[self.resizeMode()]\ndef set_layout_mode(self, mode: LayoutModeStr | widgets.QListView.LayoutMode):\n\"\"\"Set layout mode.\n        Args:\n            mode: layout mode to use\n        \"\"\"\nself.setLayoutMode(LAYOUT_MODE.get_enum_value(mode))\ndef get_layout_mode(self) -&gt; LayoutModeStr:\n\"\"\"Return layout mode.\n        Returns:\n            layout mode\n        \"\"\"\nreturn LAYOUT_MODE.inverse[self.layoutMode()]\ndef set_movement(self, mode: MovementStr | widgets.QListView.Movement):\n\"\"\"Set movement mode.\n        Args:\n            mode: movement mode to use\n        \"\"\"\nself.setMovement(MOVEMENT.get_enum_value(mode))\ndef get_movement(self) -&gt; MovementStr:\n\"\"\"Return movement mode.\n        Returns:\n            movement mode\n        \"\"\"\nreturn MOVEMENT.inverse[self.movement()]\ndef set_flow(self, mode: FlowStr | widgets.QListView.Flow):\n\"\"\"Set flow mode.\n        Args:\n            mode: flow mode to use\n        \"\"\"\nself.setFlow(FLOW.get_enum_value(mode))\ndef get_flow(self) -&gt; FlowStr:\n\"\"\"Return flow mode.\n        Returns:\n            flow mode\n        \"\"\"\nreturn FLOW.inverse[self.flow()]\ndef set_grid_size(self, size: datatypes.SizeType):\nself.setGridSize(datatypes.to_size(size))\ndef get_grid_size(self) -&gt; core.Size:\nreturn core.Size(self.gridSize())\n</code></pre> Name Children Inherits ListViewprettyqt.widgets.listview <ul><li>ListViewMixin</li><li>QListView</li></ul> ListWidgetprettyqt.widgets.listwidget <ul><li>ListViewMixin</li><li>QListWidget</li></ul> UndoViewprettyqt.widgets.undoview <ul><li>ListViewMixin</li><li>QUndoView</li></ul> HelpIndexWidgetprettyqt.qthelp.helpindexwidget <ul><li>ListViewMixin</li><li>QHelpIndexWidget</li></ul>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.get_flow","title":"<code>get_flow() -&gt; FlowStr</code>","text":"<p>Return flow mode.</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_flow(self) -&gt; FlowStr:\n\"\"\"Return flow mode.\n    Returns:\n        flow mode\n    \"\"\"\nreturn FLOW.inverse[self.flow()]\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.get_layout_mode","title":"<code>get_layout_mode() -&gt; LayoutModeStr</code>","text":"<p>Return layout mode.</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_layout_mode(self) -&gt; LayoutModeStr:\n\"\"\"Return layout mode.\n    Returns:\n        layout mode\n    \"\"\"\nreturn LAYOUT_MODE.inverse[self.layoutMode()]\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.get_movement","title":"<code>get_movement() -&gt; MovementStr</code>","text":"<p>Return movement mode.</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_movement(self) -&gt; MovementStr:\n\"\"\"Return movement mode.\n    Returns:\n        movement mode\n    \"\"\"\nreturn MOVEMENT.inverse[self.movement()]\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.get_resize_mode","title":"<code>get_resize_mode() -&gt; ResizeModeStr</code>","text":"<p>Return resize mode.</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_resize_mode(self) -&gt; ResizeModeStr:\n\"\"\"Return resize mode.\n    Returns:\n        resize mode\n    \"\"\"\nreturn RESIZE_MODE.inverse[self.resizeMode()]\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return view mode.</p> Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.set_flow","title":"<code>set_flow(mode: FlowStr | widgets.QListView.Flow)</code>","text":"<p>Set flow mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>FlowStr | widgets.QListView.Flow</code> <p>flow mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_flow(self, mode: FlowStr | widgets.QListView.Flow):\n\"\"\"Set flow mode.\n    Args:\n        mode: flow mode to use\n    \"\"\"\nself.setFlow(FLOW.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.set_layout_mode","title":"<code>set_layout_mode(mode: LayoutModeStr | widgets.QListView.LayoutMode)</code>","text":"<p>Set layout mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LayoutModeStr | widgets.QListView.LayoutMode</code> <p>layout mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_layout_mode(self, mode: LayoutModeStr | widgets.QListView.LayoutMode):\n\"\"\"Set layout mode.\n    Args:\n        mode: layout mode to use\n    \"\"\"\nself.setLayoutMode(LAYOUT_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.set_movement","title":"<code>set_movement(mode: MovementStr | widgets.QListView.Movement)</code>","text":"<p>Set movement mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>MovementStr | widgets.QListView.Movement</code> <p>movement mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_movement(self, mode: MovementStr | widgets.QListView.Movement):\n\"\"\"Set movement mode.\n    Args:\n        mode: movement mode to use\n    \"\"\"\nself.setMovement(MOVEMENT.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.set_resize_mode","title":"<code>set_resize_mode(mode: ResizeModeStr | widgets.QListView.ResizeMode)</code>","text":"<p>Set resize mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ResizeModeStr | widgets.QListView.ResizeMode</code> <p>resize mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_resize_mode(self, mode: ResizeModeStr | widgets.QListView.ResizeMode):\n\"\"\"Set resize mode.\n    Args:\n        mode: resize mode to use\n    \"\"\"\nself.setResizeMode(RESIZE_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#prettyqt.widgets.listview.ListViewMixin.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | widgets.QListView.ViewMode)</code>","text":"<p>Set view mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | widgets.QListView.ViewMode</code> <p>view mode to use</p> required Source code in <code>prettyqt\\widgets\\listview.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr | widgets.QListView.ViewMode):\n\"\"\"Set view mode.\n    Args:\n        mode: view mode to use\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ListViewMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261403728[\"widgets.ListViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261136960 --&gt; 2103261403728\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/ListWidget.html","title":"ListWidget","text":"<p>Qt Base Class: QListWidget</p> <p>Signature: <code>QListWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ListWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ListViewMixin</code>, <code>widgets.QListWidget</code></p> <p>Item-based list widget.</p> Source code in <code>prettyqt\\widgets\\listwidget.py</code> <pre><code>class ListWidget(widgets.ListViewMixin, widgets.QListWidget):\n\"\"\"Item-based list widget.\"\"\"\nvalue_changed = core.Signal(object)\ndef __init__(self, *args, selection_mode: str = \"single\", **kwargs):\nsuper().__init__(*args, selection_mode=selection_mode, **kwargs)\nself.itemSelectionChanged.connect(self.on_index_change)\ndef __repr__(self):\nreturn f\"{type(self).__name__}: {self.count()} items\"\ndef __getitem__(\nself, row: int | slice\n) -&gt; widgets.QListWidgetItem | listdelegators.ListDelegator[widgets.QListWidgetItem]:\nmatch row:\ncase int():\nitem = self.item(row)\nif item is None:\nraise KeyError(row)\nreturn item\ncase slice():\ncount = self.itemCount() if row.stop is None else row.stop\nvalues = list(range(count)[row])\nls = [self.item(i) for i in values]\nreturn listdelegators.ListDelegator(ls)\ncase _:\nraise TypeError(row)\ndef __delitem__(self, row: int):\nself.takeItem(row)\ndef __add__(self, other: widgets.QListWidgetItem):\nself.addItem(other)\nreturn self\ndef __iter__(self) -&gt; Iterator[widgets.QListWidgetItem]:\nreturn iter(self.get_children())\ndef __len__(self) -&gt; int:\nreturn self.count()\ndef sort(self, reverse: bool = False):\norder = constants.DESCENDING if reverse else constants.ASCENDING\nself.sortItems(order)\ndef on_index_change(self):\ndata = self.get_value()\nself.value_changed.emit(data)\ndef get_children(self) -&gt; listdelegators.ListDelegator[widgets.QListWidgetItem]:\nitems = [self.item(row) for row in range(self.count())]\nreturn listdelegators.ListDelegator(items)\ndef add_items(self, items: Iterable | Mapping):\nmatch items:\ncase Mapping():\nfor k, v in items.items():\nself.add(v, k)\ncase Iterable():\nfor i in items:\nif isinstance(i, tuple | list):\nself.add(*i)\nelse:\nself.add(i)\ncase _:\nraise TypeError(items)\n@functools.singledispatchmethod\ndef add_item(\nself,\nname: str = \"\",\nicon: datatypes.IconType = None,\ndata: dict | None = None,\nforeground: QtGui.QBrush | None = None,\nbackground: QtGui.QBrush | None = None,\nfont: QtGui.QFont | None = None,\nselected: bool = None,\nstatus_tip: str = \"\",\ntool_tip: str = \"\",\nwhats_this: str | None = None,\n# text_alignment: Optional[str] = None,\ncheckstate: constants.StateStr | constants.CheckState | None = None,\nflags: constants.ItemFlag | None = None,\nsize_hint: datatypes.SizeType | None = None,\nis_user_type: bool = False,\n) -&gt; widgets.ListWidgetItem:\ntyp = 1 if is_user_type else 0\nitem = widgets.ListWidgetItem(name, self, typ)\nif icon is not None:\nicon = iconprovider.get_icon(icon)\nitem.setIcon(icon)\nif data is not None:\nfor k, v in data.items():\nitem.set_data(k, v)\nif foreground is not None:\nitem.setForeground(foreground)\nif background is not None:\nitem.setBackground(background)\nif font is not None:\nitem.setFont(font)\nif flags is not None:\nitem.setFlags(flags)\nif selected:\nitem.setSelected(selected)\nif status_tip:\nitem.setStatusTip(status_tip)\nif tool_tip:\nitem.setToolTip(tool_tip)\nif whats_this:\nitem.setWhatsThis(whats_this)\nif size_hint is not None:\nitem.set_size_hint(size_hint)\nif checkstate is not None:\nitem.set_checkstate(checkstate)\nself.addItem(item)\nreturn item\n@add_item.register\ndef _(self, listitem: widgets.QListWidgetItem):\nself.addItem(listitem)\ndef add(self, label: str, data=NoData, icon: datatypes.IconType = None):\nif data is NoData:\ndata = label\nitem = widgets.ListWidgetItem(label)\nitem.set_icon(icon)\nitem.setData(constants.USER_ROLE, data)  # type: ignore\nself.addItem(item)\ndef get_value(self) -&gt; list[Any]:\nreturn [i.data(constants.USER_ROLE) for i in self.selectedItems()]  # type: ignore\ndef set_value(self, value):\nfor i in self.get_children():\nif i.data(constants.USER_ROLE) in value:  # type: ignore\nself.setCurrentItem(i)\nbreak\ndef scroll_to_item(\nself,\nitem: widgets.QListWidgetItem,\nmode: widgets.abstractitemview.ScrollHintStr\n| widgets.QAbstractItemView.ScrollHint = \"ensure_visible\",\n):\nself.scrollToItem(item, widgets.abstractitemview.SCROLL_HINT.get_enum_value(mode))\ndef find_items(\nself,\ntext: str,\ncolumn: int = 0,\nmode: constants.MatchFlagStr | constants.MatchFlag = \"exact\",\nrecursive: bool = False,\ncase_sensitive: bool = False,\n) -&gt; listdelegators.ListDelegator[widgets.QListWidgetItem]:\nflag = constants.MATCH_FLAGS.get_enum_value(mode)\nif recursive:\nflag |= constants.MatchFlag.MatchRecursive\nif case_sensitive:\nflag |= constants.MatchFlag.MatchCaseSensitive\nitems = self.findItems(text, flag, column)  # type: ignore\nreturn listdelegators.ListDelegator(items)\n</code></pre>"},{"location":"qt_modules/widgets/ListWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261407568[\"widgets.ListWidget\"]\n  2103261403728[\"widgets.ListViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259831280[\"QtWidgets.QListWidget\"]\n  2103259805360[\"QtWidgets.QListView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261403728 --&gt; 2103261407568\n  2103261136960 --&gt; 2103261403728\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259831280 --&gt; 2103261407568\n  2103259805360 --&gt; 2103259831280\n  2103259770800 --&gt; 2103259805360\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ListWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>movement</code> QListView::Movement <code>flow</code> QListView::Flow <code>isWrapping</code> bool <code>resizeMode</code> QListView::ResizeMode <code>layoutMode</code> QListView::LayoutMode <code>spacing</code> int <code>gridSize</code> QSize <code>viewMode</code> QListView::ViewMode <code>modelColumn</code> int <code>uniformItemSizes</code> bool <code>batchSize</code> int <code>wordWrap</code> bool <code>selectionRectVisible</code> bool <code>itemAlignment</code> QFlags <code>count</code> int <code>currentRow</code> int <code>sortingEnabled</code> bool"},{"location":"qt_modules/widgets/ListWidgetItem.html","title":"ListWidgetItem","text":"<p>Qt Base Class: QListWidgetItem</p> <p>Signature: <code>QListWidgetItem(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, listview: Optional[PySide6.QtWidgets.QListWidget] = None, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QListWidgetItem(self, listview: Optional[PySide6.QtWidgets.QListWidget] = None, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QListWidgetItem(self, other: PySide6.QtWidgets.QListWidgetItem) -&gt; None QListWidgetItem(self, text: str, listview: Optional[PySide6.QtWidgets.QListWidget] = None, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ListWidgetItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtWidgets.QListWidgetItem</code></p> <p>Item for use with the QListWidget item view class.</p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>class ListWidgetItem(serializemixin.SerializeMixin, QtWidgets.QListWidgetItem):\n\"\"\"Item for use with the QListWidget item view class.\"\"\"\ndef __repr__(self):\nreturn get_repr(self, self.icon(), self.text())\ndef __setitem__(self, index: int | constants.ItemDataRoleStr, value):\nself.set_data(index, value)\ndef __getitem__(self, index: int | constants.ItemDataRoleStr):\nreturn self.get_data(index)\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\ndef get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_icon(self) -&gt; gui.Icon | None:\nreturn None if (icon := super().icon()).isNull() else gui.Icon(icon)\ndef set_data(self, role: constants.ItemDataRoleStr | int, data: Any):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nsuper().setData(role, data)\ndef get_data(self, role: constants.ItemDataRoleStr | int):\nrole = constants.ITEM_DATA_ROLE[role] if isinstance(role, str) else role\nreturn super().data(role)\ndef set_size_hint(self, hint: datatypes.SizeType):\nsuper().setSizeHint(datatypes.to_size(hint))\ndef set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr\n| constants.AlignmentFlag\n| None = None,\nvertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n        Args:\n            horizontal: horizontal text alignment to use\n            vertical: vertical text alignment to use\n        \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT.get_enum_value(vertical)\ncase _, None:\nflag = constants.H_ALIGNMENT.get_enum_value(horizontal)\ncase _, _:\nflag = constants.V_ALIGNMENT.get_enum_value(\nvertical\n) | constants.H_ALIGNMENT.get_enum_value(horizontal)\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"qt_modules/widgets/ListWidgetItem.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"qt_modules/widgets/ListWidgetItem.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/widgets/ListWidgetItem.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/ListWidgetItem.html#prettyqt.widgets.listwidgetitem.ListWidgetItem.set_text_alignment","title":"<code>set_text_alignment(horizontal: constants.HorizontalAlignmentStr | constants.AlignmentFlag | None = None, vertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None)</code>","text":"<p>Set text alignment of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>constants.HorizontalAlignmentStr | constants.AlignmentFlag | None</code> <p>horizontal text alignment to use</p> <code>None</code> <code>vertical</code> <code>constants.VerticalAlignmentStr | constants.AlignmentFlag | None</code> <p>vertical text alignment to use</p> <code>None</code> Source code in <code>prettyqt\\widgets\\listwidgetitem.py</code> <pre><code>def set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr\n| constants.AlignmentFlag\n| None = None,\nvertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n    Args:\n        horizontal: horizontal text alignment to use\n        vertical: vertical text alignment to use\n    \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT.get_enum_value(vertical)\ncase _, None:\nflag = constants.H_ALIGNMENT.get_enum_value(horizontal)\ncase _, _:\nflag = constants.V_ALIGNMENT.get_enum_value(\nvertical\n) | constants.H_ALIGNMENT.get_enum_value(horizontal)\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"qt_modules/widgets/ListWidgetItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261246400[\"widgets.ListWidgetItem\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259645040[\"QtWidgets.QListWidgetItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103261246400\n  140736120080256 --&gt; 2103255032912\n  2103259645040 --&gt; 2103261246400\n  2103206874128 --&gt; 2103259645040\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html","title":"MainWindow","text":"<p>Qt Base Class: QMainWindow</p> <p>Signature: <code>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/MainWindow.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QMainWindow</code></p> <p>Main application window.</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>class MainWindow(widgets.WidgetMixin, widgets.QMainWindow):\n\"\"\"Main application window.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, dock_options=DEFAULT_OPTS, **kwargs)\nself.setMenuBar(widgets.MenuBar())\ndef __getitem__(self, index: str) -&gt; widgets.QWidget:\nresult = self.find_child(widgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"toolButtonStyle\": constants.TOOLBUTTON_STYLE,\n\"tabShape\": widgets.tabwidget.TAB_SHAPES,\n}\nreturn maps\ndef set_widget(self, widget: widgets.QWidget | None) -&gt; widgets.QWidget | None:\n\"\"\"Set widget and return previous one if existing.\"\"\"\nprevious = self.takeCentralWidget()\nif widget:\nself.setCentralWidget(widget)\nreturn previous\ndef createPopupMenu(self) -&gt; widgets.Menu:\nmenu = widgets.Menu(parent=self, title=\"Window\")\nfor i, item in enumerate(self.get_docks()):\naction = gui.Action(\ntext=item.windowTitle(),\nparent=self,\ncheckable=True,\nchecked=item.isVisible(),\nshortcut=f\"Ctrl+Shift+{i}\",\nshortcut_context=\"application\",\ntoggled=item.setVisible,\n)\nmenu.add(action)\nmenu.add_separator()\nfor tb in self.get_toolbars():\naction = gui.Action(\ntext=tb.windowTitle(),\nparent=self,\ncheckable=True,\ntoggled=tb.setVisible,\nchecked=tb.isVisible(),\n)\nmenu.add(action)\nreturn menu\ndef add(self, widget: widgets.QWidget, **kwargs):\nmatch widget:\ncase widgets.QToolBar():\nself.add_toolbar(widget, **kwargs)\ncase widgets.QDockWidget():\nself.add_dockwidget(widget, **kwargs)\ncase widgets.QWidget():\nself.centralWidget().layout().add(widget, **kwargs)\ndef get_corner(\nself, corner: constants.CornerStr | constants.Corner\n) -&gt; constants.DockWidgetAreaStr:\ncorner_flag = constants.CORNER.get_enum_value(corner)\narea = self.corner(corner_flag)\nreturn constants.DOCK_WIDGET_AREAS.inverse[area]\ndef set_corner(\nself,\ncorner: constants.CornerStr | constants.Corner,\narea: constants.DockWidgetAreaStr | constants.DockWidgetArea,\n):\ncorner_flag = constants.CORNER.get_enum_value(corner)\narea_flag = constants.DOCK_WIDGET_AREAS.get_enum_value(area)\nself.setCorner(corner_flag, area_flag)\ndef add_toolbar(\nself,\ntoolbar: widgets.QToolBar,\narea: constants.ToolbarAreaStr | constants.ToolBarArea | Literal[\"auto\"] = \"auto\",\n):\n\"\"\"Adds a toolbar to the mainmenu at specified area.\n        Args:\n            toolbar: toolbar to use\n            area: area of the toolbar\n        \"\"\"\nif area == \"auto\":\narea = self._get_preferred_toolbar_position()\nself.addToolBar(constants.TOOLBAR_AREA.get_enum_value(area), toolbar)\ndef add_toolbar_break(\nself, position: constants.ToolbarAreaStr | constants.ToolBarArea = \"top\"\n):\n\"\"\"Adds a toolbar break to the given area behind the last item.\n        Args:\n            position: position of the toolbar\n        \"\"\"\nself.addToolBarBreak(constants.TOOLBAR_AREA.get_enum_value(position))\ndef load_window_state(self, recursive: bool = False) -&gt; bool:\nsettings = core.Settings()\nname = self.objectName()\ngeom = settings.get(f\"{name}.geometry\")\nstate = settings.get(f\"{name}.state\")\nrestored = False\nif geom is not None and state is not None:\ntry:\nlogger.debug(f\"Loading window state for {self.windowTitle()!r}...\")\nself.restoreGeometry(geom)\nif isinstance(state, str):\nstate = state.encode()\nself.restoreState(state)\nrestored = True\nexcept TypeError:\nlogger.error(\"Wrong type for window state. Probably Qt binding switch?\")\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.objectName():\nwindow.load_window_state()\nreturn restored\ndef save_window_state(self, recursive: bool = False):\n\"\"\"Save current window state as QSetting.\n        Args:\n            recursive (bool, optional): Description\n        \"\"\"\nsettings = core.Settings()\nname = self.objectName()\nlogger.debug(f\"Saving window state for {self.windowTitle()!r}...\")\nsettings[f\"{name}.geometry\"] = self.saveGeometry()\nsettings[f\"{name}.state\"] = self.saveState()\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.objectName():\nwindow.save_window_state()\ndef add_widget_as_dock(\nself,\nname: str,\ntitle: str,\nlayout: widgets.layout.LayoutTypeStr | widgets.QLayout = \"horizontal\",\nposition: constants.DockWidgetAreaStr | constants.DockWidgetArea = \"left\",\n) -&gt; widgets.DockWidget:\ndock_widget = widgets.DockWidget(self, object_name=name, window_title=title)\nwidget = widgets.Widget()\nwidget.setObjectName(f\"{name}.widget\")\nwidget.set_layout(layout, margin=0)\ndock_widget.setWidget(widget)\nself.add_dockwidget(dock_widget, position)\nreturn dock_widget\ndef add_dockwidget(\nself,\nwidget: widgets.QWidget,\nposition: constants.DockWidgetAreaStr\n| constants.DockWidgetArea\n| Literal[\"auto\"] = \"auto\",\n**kwargs,\n):\nif position == \"auto\":\nposition = self._get_preferred_dock_position()\nif not isinstance(widget, widgets.QDockWidget):\ndock_widget = widgets.DockWidget(self, **kwargs)\ndock_widget.set_widget(widget)\nself.addDockWidget(\nconstants.DOCK_WIDGET_AREA.get_enum_value(position), dock_widget\n)\nreturn dock_widget\nelse:\nself.addDockWidget(\nconstants.DOCK_WIDGET_AREA.get_enum_value(position), widget\n)\ndef remove(\nself,\nitems: Sequence[widgets.QDockWidget | widgets.QToolBar | gui.QAction]\n| widgets.QDockWidget\n| widgets.QToolBar\n| gui.QAction,\n):\nwidget_list = items if isinstance(items, list) else [items]\nfor i in widget_list:\nmatch i:\ncase widgets.QDockWidget():\nself.removeDockWidget(i)\ncase widgets.QToolBar():\nself.removeToolBar(i)\ncase gui.QAction():\nself.removeAction(i)\ndef show_blocking(self):\nself.set_modality(\"application\")\nself.show()\ndef get_dock_area(self, widget: widgets.QDockWidget) -&gt; constants.DockWidgetAreaStr:\narea = self.dockWidgetArea(widget)\nreturn constants.DOCK_WIDGET_AREAS.inverse[area]\ndef get_toolbar_area(self, widget: widgets.QToolBar) -&gt; constants.ToolbarAreaStr:\narea = self.toolBarArea(widget)\nreturn constants.TOOLBAR_AREA.inverse[area]\ndef set_tool_button_style(\nself, style: constants.ToolButtonStyleStr | constants.ToolButtonStyle\n):\nself.setToolButtonStyle(constants.TOOLBUTTON_STYLE.get_enum_value(style))\ndef get_tool_button_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return current tool button style.\n        Returns:\n            tool button style\n        \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\ndef set_tab_shape(\nself, shape: widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape\n):\n\"\"\"Set tab shape for the tabwidget.\n        Args:\n            shape: tab shape to use\n        \"\"\"\nself.setTabShape(widgets.tabwidget.TAB_SHAPES.get_enum_value(shape))\ndef get_tab_shape(self) -&gt; widgets.tabwidget.TabShapeStr:\n\"\"\"Return tab shape.\n        Returns:\n            tab shape\n        \"\"\"\nreturn widgets.tabwidget.TAB_SHAPES.inverse[self.tabShape()]\ndef get_docks(\nself, position: constants.DockWidgetAreaStr | None = None\n) -&gt; listdelegators.ListDelegator[widgets.QDockWidget]:\ndocks = self.find_children(widgets.QDockWidget, recursive=False)\nif position is None:\nreturn docks\nelse:\nreturn [i for i in docks if self.get_dock_area(i) == position]\ndef _get_preferred_dock_position(\nself,\npreference: constants.DockWidgetAreaStr = \"left\",\n) -&gt; constants.DockWidgetAreaStr:\n\"\"\"Get location with least amount of docks. If same score, use preference.\"\"\"\nareas = [self.get_dock_area(i) for i in self.get_docks()]\n# by prepending the prio order, we can choose order because\n# collections.Counter takes insertion order into account.\npositions = [\"bottom\", \"top\", \"right\", \"left\"]\npositions.remove(preference)\npositions.append(preference)\ncounter = collections.Counter(positions + areas)  # type: ignore[operator]\nreturn counter.most_common()[-1][0]  # type: ignore[return-value]\ndef _get_preferred_toolbar_position(\nself,\npreference: constants.ToolbarAreaStr = \"top\",\n) -&gt; constants.ToolbarAreaStr:\n\"\"\"See _get_preferred_dock_position.\"\"\"\nareas = [self.get_toolbar_area(i) for i in self.get_toolbars()]\npositions = [\"right\", \"left\", \"bottom\", \"top\"]\npositions.remove(preference)\npositions.append(preference)\ncounter = collections.Counter(positions + areas)  # type: ignore[operator]\nreturn counter.most_common()[-1][0]  # type: ignore[return-value]\ndef get_toolbars(\nself, position: constants.ToolbarAreaStr | None = None\n) -&gt; listdelegators.ListDelegator[widgets.QToolBar]:\ntoolbars = self.find_children(widgets.QToolBar, recursive=False)\nif position is None:\nreturn toolbars\nelse:\nreturn [i for i in toolbars if self.get_toolbar_area(i) == position]\n</code></pre> Name Children Inherits <code>DetachedTab</code>prettyqt.widgets.tabwidget <ul><li>MainWindow</li></ul> IconBrowserprettyqt.custom_widgets.iconbrowser <ul><li>MainWindow</li></ul> ObjectBrowserprettyqt.custom_widgets.objectbrowser <ul><li>MainWindow</li></ul> SidebarWidgetprettyqt.custom_widgets.sidebarwidget <ul><li>MainWindow</li></ul> QObjectDetailsDialogprettyqt.debugging.qobjectdetailsdialog <ul><li>MainWindow</li></ul>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.add_toolbar","title":"<code>add_toolbar(toolbar: widgets.QToolBar, area: constants.ToolbarAreaStr | constants.ToolBarArea | Literal['auto'] = 'auto')</code>","text":"<p>Adds a toolbar to the mainmenu at specified area.</p> <p>Parameters:</p> Name Type Description Default <code>toolbar</code> <code>widgets.QToolBar</code> <p>toolbar to use</p> required <code>area</code> <code>constants.ToolbarAreaStr | constants.ToolBarArea | Literal['auto']</code> <p>area of the toolbar</p> <code>'auto'</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_toolbar(\nself,\ntoolbar: widgets.QToolBar,\narea: constants.ToolbarAreaStr | constants.ToolBarArea | Literal[\"auto\"] = \"auto\",\n):\n\"\"\"Adds a toolbar to the mainmenu at specified area.\n    Args:\n        toolbar: toolbar to use\n        area: area of the toolbar\n    \"\"\"\nif area == \"auto\":\narea = self._get_preferred_toolbar_position()\nself.addToolBar(constants.TOOLBAR_AREA.get_enum_value(area), toolbar)\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.add_toolbar_break","title":"<code>add_toolbar_break(position: constants.ToolbarAreaStr | constants.ToolBarArea = 'top')</code>","text":"<p>Adds a toolbar break to the given area behind the last item.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>constants.ToolbarAreaStr | constants.ToolBarArea</code> <p>position of the toolbar</p> <code>'top'</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def add_toolbar_break(\nself, position: constants.ToolbarAreaStr | constants.ToolBarArea = \"top\"\n):\n\"\"\"Adds a toolbar break to the given area behind the last item.\n    Args:\n        position: position of the toolbar\n    \"\"\"\nself.addToolBarBreak(constants.TOOLBAR_AREA.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.get_tab_shape","title":"<code>get_tab_shape() -&gt; widgets.tabwidget.TabShapeStr</code>","text":"<p>Return tab shape.</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def get_tab_shape(self) -&gt; widgets.tabwidget.TabShapeStr:\n\"\"\"Return tab shape.\n    Returns:\n        tab shape\n    \"\"\"\nreturn widgets.tabwidget.TAB_SHAPES.inverse[self.tabShape()]\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.get_tool_button_style","title":"<code>get_tool_button_style() -&gt; constants.ToolButtonStyleStr</code>","text":"<p>Return current tool button style.</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def get_tool_button_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return current tool button style.\n    Returns:\n        tool button style\n    \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.save_window_state","title":"<code>save_window_state(recursive: bool = False)</code>","text":"<p>Save current window state as QSetting.</p> <p>Parameters:</p> Name Type Description Default <code>recursive</code> <code>bool</code> <p>Description</p> <code>False</code> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def save_window_state(self, recursive: bool = False):\n\"\"\"Save current window state as QSetting.\n    Args:\n        recursive (bool, optional): Description\n    \"\"\"\nsettings = core.Settings()\nname = self.objectName()\nlogger.debug(f\"Saving window state for {self.windowTitle()!r}...\")\nsettings[f\"{name}.geometry\"] = self.saveGeometry()\nsettings[f\"{name}.state\"] = self.saveState()\nif recursive:\nfor window in self.find_children(MainWindow, recursive=True):\nif window.objectName():\nwindow.save_window_state()\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.set_tab_shape","title":"<code>set_tab_shape(shape: widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape)</code>","text":"<p>Set tab shape for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape</code> <p>tab shape to use</p> required Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def set_tab_shape(\nself, shape: widgets.tabwidget.TabShapeStr | widgets.QTabWidget.TabShape\n):\n\"\"\"Set tab shape for the tabwidget.\n    Args:\n        shape: tab shape to use\n    \"\"\"\nself.setTabShape(widgets.tabwidget.TAB_SHAPES.get_enum_value(shape))\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#prettyqt.widgets.mainwindow.MainWindow.set_widget","title":"<code>set_widget(widget: widgets.QWidget | None) -&gt; widgets.QWidget | None</code>","text":"<p>Set widget and return previous one if existing.</p> Source code in <code>prettyqt\\widgets\\mainwindow.py</code> <pre><code>def set_widget(self, widget: widgets.QWidget | None) -&gt; widgets.QWidget | None:\n\"\"\"Set widget and return previous one if existing.\"\"\"\nprevious = self.takeCentralWidget()\nif widget:\nself.setCentralWidget(widget)\nreturn previous\n</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261245440[\"widgets.MainWindow\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259730480[\"QtWidgets.QMainWindow\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261245440\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259730480 --&gt; 2103261245440\n  2103259691120 --&gt; 2103259730480\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/MainWindow.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>animated</code> bool <code>documentMode</code> bool <code>tabShape</code> QTabWidget::TabShape <code>dockNestingEnabled</code> bool <code>dockOptions</code> QFlags <code>unifiedTitleAndToolBarOnMac</code> bool"},{"location":"qt_modules/widgets/MdiArea.html","title":"MdiArea","text":"<p>Qt Base Class: QMdiArea</p> <p>Signature: <code>QMdiArea(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/MdiArea.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>widgets.QMdiArea</code></p> <p>Area in which MDI windows are displayed.</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>class MdiArea(widgets.AbstractScrollAreaMixin, widgets.QMdiArea):\n\"\"\"Area in which MDI windows are displayed.\"\"\"\ndef __add__(self, other: widgets.QWidget):\nself.add(other)\nreturn self\ndef set_view_mode(self, mode: ViewModeStr | widgets.QMdiArea.ViewMode):\n\"\"\"Set view mode for the MDI area.\n        Args:\n            mode: view mode to use\n        \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\ndef get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return current view mode.\n        Returns:\n            view mode\n        \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\ndef set_window_order(self, mode: WindowOrderStr | widgets.QMdiArea.WindowOrder):\n\"\"\"Set the window order behaviour for the MDI area.\n        Args:\n            mode: window order behaviour to use\n        \"\"\"\nself.setActivationOrder(WINDOW_ORDER.get_enum_value(mode))\ndef get_window_order(self) -&gt; WindowOrderStr:\n\"\"\"Return current window order.\n        Returns:\n            view mode\n        \"\"\"\nreturn WINDOW_ORDER.inverse[self.activationOrder()]\ndef set_tab_position(self, position: TabPositionStr | widgets.QTabWidget.TabPosition):\n\"\"\"Set tab position for the MDI area.\n        Args:\n            position: tabs position to use\n        \"\"\"\nself.setTabPosition(TAB_POSITION.get_enum_value(position))\ndef get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return current tab position.\n        Returns:\n            tab position\n        \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\ndef set_background(\nself,\nbrush_or_color: datatypes.ColorAndBrushType,\npattern: constants.BrushStyleStr = \"solid\",\n):\nif isinstance(brush_or_color, gui.QBrush):\nbrush = brush_or_color\nelse:\ncolor = colors.get_color(brush_or_color)\nbrush = gui.Brush(color, constants.BRUSH_STYLE[pattern])\nself.setBackground(brush)\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef add(self, *item: widgets.QWidget):\nfor i in item:\nself.add_subwindow(i)\ndef add_subwindow(self, widget: widgets.QWidget) -&gt; widgets.QMdiSubWindow:\nif not isinstance(widget, widgets.QMdiSubWindow):\nwindow = widgets.MdiSubWindow()\nwindow.setWidget(widget)\nself.addSubWindow(window)\nreturn window\nelse:\nreturn self.addSubWindow(widget)\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#prettyqt.widgets.mdiarea.MdiArea.get_tab_position","title":"<code>get_tab_position() -&gt; TabPositionStr</code>","text":"<p>Return current tab position.</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return current tab position.\n    Returns:\n        tab position\n    \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#prettyqt.widgets.mdiarea.MdiArea.get_view_mode","title":"<code>get_view_mode() -&gt; ViewModeStr</code>","text":"<p>Return current view mode.</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_view_mode(self) -&gt; ViewModeStr:\n\"\"\"Return current view mode.\n    Returns:\n        view mode\n    \"\"\"\nreturn VIEW_MODE.inverse[self.viewMode()]\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#prettyqt.widgets.mdiarea.MdiArea.get_window_order","title":"<code>get_window_order() -&gt; WindowOrderStr</code>","text":"<p>Return current window order.</p> Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def get_window_order(self) -&gt; WindowOrderStr:\n\"\"\"Return current window order.\n    Returns:\n        view mode\n    \"\"\"\nreturn WINDOW_ORDER.inverse[self.activationOrder()]\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#prettyqt.widgets.mdiarea.MdiArea.set_tab_position","title":"<code>set_tab_position(position: TabPositionStr | widgets.QTabWidget.TabPosition)</code>","text":"<p>Set tab position for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TabPositionStr | widgets.QTabWidget.TabPosition</code> <p>tabs position to use</p> required Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_tab_position(self, position: TabPositionStr | widgets.QTabWidget.TabPosition):\n\"\"\"Set tab position for the MDI area.\n    Args:\n        position: tabs position to use\n    \"\"\"\nself.setTabPosition(TAB_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#prettyqt.widgets.mdiarea.MdiArea.set_view_mode","title":"<code>set_view_mode(mode: ViewModeStr | widgets.QMdiArea.ViewMode)</code>","text":"<p>Set view mode for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>ViewModeStr | widgets.QMdiArea.ViewMode</code> <p>view mode to use</p> required Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_view_mode(self, mode: ViewModeStr | widgets.QMdiArea.ViewMode):\n\"\"\"Set view mode for the MDI area.\n    Args:\n        mode: view mode to use\n    \"\"\"\nself.setViewMode(VIEW_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#prettyqt.widgets.mdiarea.MdiArea.set_window_order","title":"<code>set_window_order(mode: WindowOrderStr | widgets.QMdiArea.WindowOrder)</code>","text":"<p>Set the window order behaviour for the MDI area.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>WindowOrderStr | widgets.QMdiArea.WindowOrder</code> <p>window order behaviour to use</p> required Source code in <code>prettyqt\\widgets\\mdiarea.py</code> <pre><code>def set_window_order(self, mode: WindowOrderStr | widgets.QMdiArea.WindowOrder):\n\"\"\"Set the window order behaviour for the MDI area.\n    Args:\n        mode: window order behaviour to use\n    \"\"\"\nself.setActivationOrder(WINDOW_ORDER.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261253120[\"widgets.MdiArea\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259779440[\"QtWidgets.QMdiArea\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261131200 --&gt; 2103261253120\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259779440 --&gt; 2103261253120\n  2103259751600 --&gt; 2103259779440\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/MdiArea.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>background</code> QBrush <code>activationOrder</code> QMdiArea::WindowOrder <code>viewMode</code> QMdiArea::ViewMode <code>documentMode</code> bool <code>tabsClosable</code> bool <code>tabsMovable</code> bool <code>tabShape</code> QTabWidget::TabShape <code>tabPosition</code> QTabWidget::TabPosition"},{"location":"qt_modules/widgets/MdiSubWindow.html","title":"MdiSubWindow","text":"<p>Qt Base Class: QMdiSubWindow</p> <p>Signature: <code>QMdiSubWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/MdiSubWindow.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QMdiSubWindow</code></p> <p>Subwindow class for QMdiArea.</p> Source code in <code>prettyqt\\widgets\\mdisubwindow.py</code> <pre><code>class MdiSubWindow(widgets.WidgetMixin, widgets.QMdiSubWindow):\n\"\"\"Subwindow class for QMdiArea.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/MdiSubWindow.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261244480[\"widgets.MdiSubWindow\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259696880[\"QtWidgets.QMdiSubWindow\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261244480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259696880 --&gt; 2103261244480\n  2103259691120 --&gt; 2103259696880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/MdiSubWindow.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>keyboardSingleStep</code> int <code>keyboardPageStep</code> int"},{"location":"qt_modules/widgets/Menu.html","title":"Menu","text":"<p>Qt Base Class: QMenu</p> <p>Signature: <code>QMenu(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QMenu(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Menu.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>MenuMixin</code>, <code>widgets.QMenu</code></p> <p>Menu widget for use in menu bars, context menus, and other popup menus.</p> Source code in <code>prettyqt\\widgets\\menu.py</code> <pre><code>class Menu(MenuMixin, widgets.QMenu):\n\"\"\"Menu widget for use in menu bars, context menus, and other popup menus.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/Menu.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261234880[\"widgets.Menu\"]\n  2103261235840[\"widgets.MenuMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259726640[\"QtWidgets.QMenu\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261235840 --&gt; 2103261234880\n  2103261127360 --&gt; 2103261235840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259726640 --&gt; 2103261234880\n  2103259691120 --&gt; 2103259726640\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Menu.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>tearOffEnabled</code> bool <code>title</code> QString <code>icon</code> QIcon <code>separatorsCollapsible</code> bool <code>toolTipsVisible</code> bool"},{"location":"qt_modules/widgets/MenuBar.html","title":"MenuBar","text":"<p>Qt Base Class: QMenuBar</p> <p>Signature: <code>QMenuBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/MenuBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QMenuBar</code></p> <p>Horizontal menu bar.</p> Source code in <code>prettyqt\\widgets\\menubar.py</code> <pre><code>class MenuBar(widgets.WidgetMixin, widgets.QMenuBar):\n\"\"\"Horizontal menu bar.\"\"\"\ndef __add__(self, other: gui.QAction | widgets.QMenu):\nself.add(other)\nreturn self\ndef serialize_fields(self):\nreturn dict(\ndefault_up=self.isDefaultUp(),\nnative_menu_bar=self.isNativeMenuBar(),\n)\n@overload\ndef add_menu(self, menu_or_str: str) -&gt; widgets.Menu:\n...\n@overload\ndef add_menu(self, menu_or_str: widgets.QMenu) -&gt; gui.Action:\n...\n@functools.singledispatchmethod\ndef add_menu(self, title: str) -&gt; widgets.Menu:\naction = gui.Action(parent=self, text=title)\nmenu = widgets.Menu(title=title, parent=self)\naction.set_menu(menu)\nself.addAction(action)\nreturn menu\n@add_menu.register\ndef _(self, menu: widgets.QMenu) -&gt; gui.Action:\naction = gui.Action(parent=self, text=menu.title())\naction.set_menu(menu)\nself.addAction(action)\nreturn action\ndef add_separator(self):\nself.addSeparator()\ndef add(self, *items: widgets.QMenu | gui.QAction):\nfor i in items:\nif isinstance(i, widgets.QMenu):\naction = gui.Action(self)\naction.set_text(i.title())\naction.set_menu(i)\nself.addAction(action)\nelse:\nself.addAction(i)\ndef set_corner_widget(\nself,\nwidget: widgets.QWidget,\ncorner: Literal[\"top_right\", \"top_left\"] = \"top_right\",\n):\nmatch corner:\ncase \"top_left\":\nself.setCornerWidget(widget, constants.Corner.TopLeftCorner)\ncase \"top_right\":\nself.setCornerWidget(widget, constants.Corner.TopRightCorner)\ncase _:\nraise ValueError(corner)\ndef get_corner_widget(\nself,\ncorner: Literal[\"top_right\", \"top_left\"] = \"top_right\",\n) -&gt; widgets.QWidget:\nmatch corner:\ncase \"top_left\":\nreturn self.cornerWidget(constants.Corner.TopLeftCorner)\ncase \"top_right\":\nreturn self.cornerWidget(constants.Corner.TopRightCorner)\ncase _:\nraise ValueError(corner)\n</code></pre>"},{"location":"qt_modules/widgets/MenuBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261251200[\"widgets.MenuBar\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259723760[\"QtWidgets.QMenuBar\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261251200\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259723760 --&gt; 2103261251200\n  2103259691120 --&gt; 2103259723760\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/MenuBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>defaultUp</code> bool <code>nativeMenuBar</code> bool"},{"location":"qt_modules/widgets/MessageBox.html","title":"MessageBox","text":"<p>Qt Base Class: QMessageBox</p> <p>Signature: <code>QMessageBox(self, icon: PySide6.QtWidgets.QMessageBox.Icon, title: str, text: str, buttons: PySide6.QtWidgets.QMessageBox.StandardButton = Instance(QMessageBox.StandardButton.NoButton), parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Instance(Qt.Dialog | Qt.MSWindowsFixedSizeDialogHint)) -&gt; None QMessageBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/MessageBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QMessageBox</code></p> <p>Modal dialog for informing the user (and for receiving an answer).</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>class MessageBox(widgets.DialogMixin, widgets.QMessageBox):\n\"\"\"Modal dialog for informing the user (and for receiving an answer).\"\"\"\ndef __init__(\nself,\nicon: datatypes.IconType | IconStr = None,\nbuttons: list[StandardButtonStr | widgets.QMessageBox.StandardButton]\n| None = None,\n**kwargs,\n):\nsuper().__init__(**kwargs)\nself.set_icon(icon)\nself.setWindowFlags(\nconstants.WindowType.Dialog\n| constants.WindowType.WindowTitleHint\n| constants.WindowType.CustomizeWindowHint\n)\nif isinstance(buttons, list):\nfor b in buttons:\nself.add_button(b)\ndef get_button(\nself, button: widgets.QMessageBox.StandardButton | StandardButtonStr\n) -&gt; widgets.QAbstractButton:\nreturn self.button(STANDARD_BUTTON.get_enum_value(button))\n@classmethod\ndef message(\ncls,\ntext: str,\ntitle: str = \"\",\nicon: datatypes.IconType = None,\ndetail_text: str | None = None,\n) -&gt; str:\nm = cls(\"none\", title, text)\nm.set_icon(icon)\nif detail_text is not None:\nm.setDetailedText(detail_text)\nreturn m.show_blocking()\n@classmethod\ndef show_exception(cls, exception: Exception):\nexctype, value = sys.exc_info()[:2]\ntb = traceback.format_exc()\ndlg = cls(text=str(value), title=str(exctype), icon=\"critical\", details=tb)\ndlg.show_blocking()\ndef set_icon(self, icon: datatypes.IconType | IconStr):\nif icon in ICONS:\nself.setIcon(ICONS[icon])\nelse:\nico = iconprovider.get_icon(icon)\nself.setIconPixmap(ico.get_pixmap(size=64))\ndef show_blocking(self) -&gt; StandardButtonStr:\nreturn STANDARD_BUTTON.inverse[self.exec()]\ndef get_icon_pixmap(self) -&gt; gui.Pixmap | None:\npix = self.iconPixmap()\nreturn None if pix.isNull() else gui.Pixmap(pix)\ndef set_standard_buttons(\nself, buttons: list[StandardButtonStr | widgets.QMessageBox.StandardButton]\n):\nflag = self.StandardButton.NoButton\nfor val in buttons:\nflag |= STANDARD_BUTTON.get_enum_value(val)\nself.setStandardButtons(flag)\ndef get_standard_buttons(self) -&gt; list[StandardButtonStr]:\nreturn STANDARD_BUTTON.get_list(self.standardButtons())\ndef add_button(\nself, button: StandardButtonStr | widgets.QMessageBox.StandardButton\n) -&gt; widgets.QPushButton:\n\"\"\"Add a default button.\n        Args:\n            button: button to add\n        Returns:\n            created button\n        \"\"\"\nreturn self.addButton(STANDARD_BUTTON.get_enum_value(button))\ndef add_custom_button(\nself,\nbutton: str,\nrole: ButtonRoleStr | widgets.QMessageBox.ButtonRole,\ncallback: Callable | None = None,\n) -&gt; widgets.QPushButton:\nbtn = self.addButton(button, BUTTON_ROLE.get_enum_value(role))\nif callback:\nbtn.clicked.connect(callback)\n# @classmethod\n# def show_exception(cls, exception):\n#     header = str(exception[0])\n#     error_text = str(exception[1])\n#     widgets.MessageBox.message(error_text, header, \"mdi.exclamation\")\ndef set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n):\n\"\"\"Set the text format.\n        Args:\n            text_format: text format to use\n        \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\ndef get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n        Returns:\n            text format\n        \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\ndef set_escape_button(self, button: StandardButtonStr | widgets.QAbstractButton):\nif isinstance(button, widgets.QAbstractButton):\nself.setEscapeButton(button)\nelse:\nself.setEscapeButton(STANDARD_BUTTON.get_enum_value(button))\ndef set_default_button(self, button: StandardButtonStr | widgets.QPushButton):\nif isinstance(button, widgets.QPushButton):\nself.setDefaultButton(button)\nelse:\nself.setDefaultButton(STANDARD_BUTTON.get_enum_value(button))\n</code></pre> Name Children Inherits ErrorMessageBoxprettyqt.debugging.errormessagebox <ul><li>MessageBox</li></ul>"},{"location":"qt_modules/widgets/MessageBox.html#prettyqt.widgets.messagebox.MessageBox.add_button","title":"<code>add_button(button: StandardButtonStr | widgets.QMessageBox.StandardButton) -&gt; widgets.QPushButton</code>","text":"<p>Add a default button.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>StandardButtonStr | widgets.QMessageBox.StandardButton</code> <p>button to add</p> required Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def add_button(\nself, button: StandardButtonStr | widgets.QMessageBox.StandardButton\n) -&gt; widgets.QPushButton:\n\"\"\"Add a default button.\n    Args:\n        button: button to add\n    Returns:\n        created button\n    \"\"\"\nreturn self.addButton(STANDARD_BUTTON.get_enum_value(button))\n</code></pre>"},{"location":"qt_modules/widgets/MessageBox.html#prettyqt.widgets.messagebox.MessageBox.get_text_format","title":"<code>get_text_format() -&gt; constants.TextFormatStr</code>","text":"<p>Return current text format.</p> Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def get_text_format(self) -&gt; constants.TextFormatStr:\n\"\"\"Return current text format.\n    Returns:\n        text format\n    \"\"\"\nreturn constants.TEXT_FORMAT.inverse[self.textFormat()]\n</code></pre>"},{"location":"qt_modules/widgets/MessageBox.html#prettyqt.widgets.messagebox.MessageBox.set_text_format","title":"<code>set_text_format(text_format: constants.TextFormatStr | constants.TextFormat)</code>","text":"<p>Set the text format.</p> <p>Parameters:</p> Name Type Description Default <code>text_format</code> <code>constants.TextFormatStr | constants.TextFormat</code> <p>text format to use</p> required Source code in <code>prettyqt\\widgets\\messagebox.py</code> <pre><code>def set_text_format(\nself, text_format: constants.TextFormatStr | constants.TextFormat\n):\n\"\"\"Set the text format.\n    Args:\n        text_format: text format to use\n    \"\"\"\nself.setTextFormat(constants.TEXT_FORMAT.get_enum_value(text_format))\n</code></pre>"},{"location":"qt_modules/widgets/MessageBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261198400[\"widgets.MessageBox\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259821680[\"QtWidgets.QMessageBox\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261198400\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259821680 --&gt; 2103261198400\n  2103259840880 --&gt; 2103259821680\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/MessageBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>text</code> QString <code>icon</code> QMessageBox::Icon <code>iconPixmap</code> QPixmap <code>textFormat</code> Qt::TextFormat <code>standardButtons</code> QFlags <code>detailedText</code> QString <code>informativeText</code> QString <code>textInteractionFlags</code> QFlags"},{"location":"qt_modules/widgets/PanGesture.html","title":"PanGesture","text":"<p>Qt Base Class: QPanGesture</p> <p>Signature: <code>QPanGesture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/PanGesture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GestureMixin</code>, <code>widgets.QPanGesture</code></p> <p>Describes a panning gesture made by the user.</p> Source code in <code>prettyqt\\widgets\\pangesture.py</code> <pre><code>class PanGesture(widgets.GestureMixin, widgets.QPanGesture):\n\"\"\"Describes a panning gesture made by the user.\"\"\"\ndef get_delta(self) -&gt; core.PointF:\nreturn core.PointF(self.delta())\ndef get_last_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.lastOffset())\ndef get_offset(self) -&gt; core.PointF:\nreturn core.PointF(self.offset())\n</code></pre>"},{"location":"qt_modules/widgets/PanGesture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261466128[\"widgets.PanGesture\"]\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261048640[\"QtWidgets.QPanGesture\"]\n  2103261050560[\"QtWidgets.QGesture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261461328 --&gt; 2103261466128\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472\n  2103261048640 --&gt; 2103261466128\n  2103261050560 --&gt; 2103261048640\n  2103254677056 --&gt; 2103261050560\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/PanGesture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> Qt::GestureState <code>gestureType</code> Qt::GestureType <code>gestureCancelPolicy</code> QGesture::GestureCancelPolicy <code>hotSpot</code> QPointF <code>hasHotSpot</code> bool <code>lastOffset</code> QPointF <code>offset</code> QPointF <code>delta</code> QPointF <code>acceleration</code> double <code>horizontalVelocity</code> double <code>verticalVelocity</code> double"},{"location":"qt_modules/widgets/PinchGesture.html","title":"PinchGesture","text":"<p>Qt Base Class: QPinchGesture</p> <p>Signature: <code>QPinchGesture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/PinchGesture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GestureMixin</code>, <code>widgets.QPinchGesture</code></p> <p>Describes a pinch gesture made by the user.</p> Source code in <code>prettyqt\\widgets\\pinchgesture.py</code> <pre><code>class PinchGesture(widgets.GestureMixin, widgets.QPinchGesture):\n\"\"\"Describes a pinch gesture made by the user.\"\"\"\ndef get_start_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.startCenterPoint())\ndef get_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.centerPoint())\ndef get_last_center_point(self) -&gt; core.PointF:\nreturn core.PointF(self.lastCenterPoint())\ndef get_change_flags(self) -&gt; list[ChangeFlagStr]:\nreturn CHANGE_FLAGS.get_list(self.changeFlags())\ndef set_change_flags(self, **kwargs):\nval = widgets.QPinchGesture.ChangeFlag(0)\nfor k, v in kwargs.items():\nif v is True:\nval |= CHANGE_FLAGS[k]\nflag = widgets.QPinchGesture.ChangeFlag(val)  # type: ignore\nself.setChangeFlags(flag)  # type: ignore\ndef get_total_change_flags(self) -&gt; list[ChangeFlagStr]:\nreturn CHANGE_FLAGS.get_list(self.totalChangeFlags())\ndef set_total_change_flags(self, **kwargs):\nval = widgets.QPinchGesture.ChangeFlag(0)\nfor k, v in kwargs.items():\nif v is True:\nval |= CHANGE_FLAGS[k]\nflag = widgets.QPinchGesture.ChangeFlag(val)  # type: ignore\nself.setTotalChangeFlags(flag)  # type: ignore\n</code></pre>"},{"location":"qt_modules/widgets/PinchGesture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261479568[\"widgets.PinchGesture\"]\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261053440[\"QtWidgets.QPinchGesture\"]\n  2103261050560[\"QtWidgets.QGesture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261461328 --&gt; 2103261479568\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472\n  2103261053440 --&gt; 2103261479568\n  2103261050560 --&gt; 2103261053440\n  2103254677056 --&gt; 2103261050560\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/PinchGesture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> Qt::GestureState <code>gestureType</code> Qt::GestureType <code>gestureCancelPolicy</code> QGesture::GestureCancelPolicy <code>hotSpot</code> QPointF <code>hasHotSpot</code> bool <code>totalChangeFlags</code> QFlags <code>changeFlags</code> QFlags <code>totalScaleFactor</code> double <code>lastScaleFactor</code> double <code>scaleFactor</code> double <code>totalRotationAngle</code> double <code>lastRotationAngle</code> double <code>rotationAngle</code> double <code>startCenterPoint</code> QPointF <code>lastCenterPoint</code> QPointF <code>centerPoint</code> QPointF"},{"location":"qt_modules/widgets/PlainTextDocumentLayout.html","title":"PlainTextDocumentLayout","text":"<p>Qt Base Class: QPlainTextDocumentLayout</p> <p>Signature: <code>QPlainTextDocumentLayout(self, document: PySide6.QtGui.QTextDocument) -&gt; None</code></p>"},{"location":"qt_modules/widgets/PlainTextDocumentLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.AbstractTextDocumentLayoutMixin</code>, <code>QtWidgets.QPlainTextDocumentLayout</code></p> <p>Implements a plain text layout for QTextDocument.</p> Source code in <code>prettyqt\\widgets\\plaintextdocumentlayout.py</code> <pre><code>class PlainTextDocumentLayout(\ngui.AbstractTextDocumentLayoutMixin, QtWidgets.QPlainTextDocumentLayout\n):\n\"\"\"Implements a plain text layout for QTextDocument.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextDocumentLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261458448[\"widgets.PlainTextDocumentLayout\"]\n  2103256719392[\"gui.AbstractTextDocumentLayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261073600[\"QtWidgets.QPlainTextDocumentLayout\"]\n  2103260872016[\"QtGui.QAbstractTextDocumentLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256719392 --&gt; 2103261458448\n  2103255067472 --&gt; 2103256719392\n  140736120080256 --&gt; 2103255067472\n  2103261073600 --&gt; 2103261458448\n  2103260872016 --&gt; 2103261073600\n  2103254677056 --&gt; 2103260872016\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/PlainTextDocumentLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>cursorWidth</code> int"},{"location":"qt_modules/widgets/PlainTextEdit.html","title":"PlainTextEdit","text":"<p>Qt Base Class: QPlainTextEdit</p> <p>Signature: <code>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/PlainTextEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PlainTextEditMixin</code>, <code>widgets.QPlainTextEdit</code></p> <p>Widget that is used to edit and display plain text.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>class PlainTextEdit(PlainTextEditMixin, widgets.QPlainTextEdit):\n\"\"\"Widget that is used to edit and display plain text.\"\"\"\n</code></pre> Name Children Inherits AutoResizePlainTextEditprettyqt.custom_widgets.autoresizingtextedit <ul><li><code>AutoResizeTextEditMixin</code></li><li>PlainTextEdit</li></ul> SingleLineTextEditprettyqt.custom_widgets.editors.singlelinetextedit <ul><li>RegexLineEdit</li></ul> <ul><li>PlainTextEdit</li></ul> LogTextEditprettyqt.custom_widgets.logtextedit <ul><li>PlainTextEdit</li></ul> CodeEditorprettyqt.custom_widgets.codeeditor <ul><li>PlainTextEdit</li></ul>"},{"location":"qt_modules/widgets/PlainTextEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261367248[\"widgets.PlainTextEdit\"]\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259771760[\"QtWidgets.QPlainTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261397968 --&gt; 2103261367248\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259771760 --&gt; 2103261367248\n  2103259751600 --&gt; 2103259771760\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/PlainTextEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QPlainTextEdit::LineWrapMode <code>readOnly</code> bool <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>blockCount</code> int <code>maximumBlockCount</code> int <code>backgroundVisible</code> bool <code>centerOnScroll</code> bool <code>placeholderText</code> QString <code>current_line_color</code> QColor Color to use for current line highlighting <code>validation_color</code> QColor Color to use for invalid text"},{"location":"qt_modules/widgets/PlainTextEditMixin.html","title":"PlainTextEditMixin","text":""},{"location":"qt_modules/widgets/PlainTextEditMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>class PlainTextEditMixin(widgets.AbstractScrollAreaMixin):\nvalue_changed = core.Signal(str)\ndef __init__(self, text: str = \"\", **kwargs):\nsuper().__init__(**kwargs)\nself._allow_wheel_zoom = False\nself._hl = None\nself._current_line_color = gui.Color(0, 0, 0, 0)\nself._validation_color = gui.Color(\"orange\")\nself.selecter = texteditselecter.TextEditSelecter(self)\nself.validator: gui.QValidator | None = None\nself.textChanged.connect(self._on_value_change)\ndoc = gui.TextDocument(self)\nlayout = widgets.PlainTextDocumentLayout(doc)\ndoc.setDocumentLayout(layout)\nself.setDocument(doc)\nself.set_text(text)\ndef __add__(self, other: str):\nself.append_text(other)\nreturn self\ndef wheelEvent(self, event):\n\"\"\"Handle wheel event for zooming.\"\"\"\nif not self._allow_wheel_zoom:\nreturn super().wheelEvent(event)\nif event.modifiers() &amp; constants.CTRL_MOD:\nself.zoomIn() if event.angleDelta().y() &gt; 0 else self.zoomOut()\nevent.accept()\nelse:\nsuper().wheelEvent(event)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"lineWrapMode\": LINE_WRAP_MODE,\n\"wordWrapMode\": gui.textoption.WORD_WRAP_MODE,\n}\nreturn maps\ndef allow_wheel_zoom(self, do_zoom: bool = True):\nself._allow_wheel_zoom = do_zoom\ndef append_text(\nself,\ntext: str,\nnewline: bool = True,\nensure_visible: Literal[\"always\", \"when_bottom\", \"never\"] = \"always\",\n):\nscrollbar = self.verticalScrollBar()\nat_bottom = scrollbar.value() &gt;= (scrollbar.maximum() - 4)\nprev_val = scrollbar.value()\nif newline:\nself.appendPlainText(text)\nelse:\nself.selecter.move_cursor(\"end\")\nself.insertPlainText(text)\nself.selecter.move_cursor(\"end\")\nmatch ensure_visible:\ncase \"always\":\nself.ensureCursorVisible()\ncase \"when_bottom\":\nif at_bottom:\nself.ensureCursorVisible()\ncase \"never\":\nscrollbar.setValue(prev_val)\ndef set_text(self, text: str):\nself.setPlainText(text)\ndef set_syntaxhighlighter(\nself, syntax: str | gui.QSyntaxHighlighter, style: str | None = None\n):\nif isinstance(syntax, gui.QSyntaxHighlighter):\nself._hl = syntax\nelse:\nself._hl = syntaxhighlighters.PygmentsHighlighter(\nself.document(), syntax, style\n)\ndef text(self) -&gt; str:\nreturn self.toPlainText()\ndef set_read_only(self, value: bool = True):\n\"\"\"Make the PlainTextEdit read-only.\n        Args:\n            value: True, for read-only, otherwise False\n        \"\"\"\nself.setReadOnly(value)\ndef show_whitespace_and_tabs(self, show: bool):\n\"\"\"Set show white spaces flag.\"\"\"\ndoc = self.document()\noptions = doc.defaultTextOption()\nflag = gui.QTextOption.Flag.ShowTabsAndSpaces\nif show:\noptions.setFlags(options.flags() | flag)  # type: ignore\nelse:\noptions.setFlags(options.flags() &amp; ~flag)  # type: ignore\ndoc.setDefaultTextOption(options)\ndef paintEvent(self, event: gui.QPaintEvent):\nif self._current_line_color:\nwith gui.Painter(self.viewport()) as painter:\ncursor_rect = self.cursorRect()\nr = core.QRect(0, cursor_rect.top(), self.width(), cursor_rect.height())\npainter.set_pen(None)\npainter.setBrush(gui.Color(self._current_line_color))\npainter.drawRect(r)\nsuper().paintEvent(event)\ndef set_word_wrap_mode(\nself, mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode\n):\n\"\"\"Set word wrap mode.\n        Args:\n            mode: word wrap mode to use\n        \"\"\"\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE.get_enum_value(mode))\ndef get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n        Returns:\n            Word wrap mode\n        \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\ndef set_line_wrap_mode(\nself, mode: LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode\n):\n\"\"\"Set line wrap mode.\n        Args:\n            mode: line wrap mode to use\n        \"\"\"\nself.setLineWrapMode(LINE_WRAP_MODE.get_enum_value(mode))\ndef get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n        Returns:\n            Wrap mode\n        \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\ndef _on_value_change(self):\nself.value_changed.emit(self.text())\nif self.validator is not None:\nself._update_background()\ndef _update_background(self):\ncolor = None if self.is_valid() else self._validation_color\nself.set_background_color(color)\ndef set_validation_color(self, color: datatypes.ColorType):\nself._validation_color = colors.get_color(color).as_qt()\ndef get_validation_color(self) -&gt; gui.QColor:\nreturn self._validation_color\ndef set_validator(\nself, validator: gui.QValidator | widgets.lineedit.ValidatorStr | None, **kwargs\n) -&gt; gui.QValidator:\nif isinstance(validator, str):\nValidatorClass = classhelpers.get_class_for_id(gui.ValidatorMixin, validator)\nvalidator = ValidatorClass(**kwargs)\nself.validator = validator\nself._update_background()\nreturn validator\ndef set_regex_validator(self, regex: str, flags=0) -&gt; gui.RegularExpressionValidator:\nvalidator = gui.RegularExpressionValidator(self)\nvalidator.set_regex(regex, flags)\nself.set_validator(validator)\nreturn validator\ndef is_valid(self) -&gt; bool:\nif self.validator is None:\nreturn True\nval = self.validator.validate(self.text(), 0)\nreturn val[0] == self.validator.State.Acceptable\ndef set_value(self, value: str):\nself.setPlainText(value)\ndef get_value(self) -&gt; str:\nreturn self.text()\ndef set_current_line_color(self, color: datatypes.ColorType):\nif self._current_line_color is None:\nself.cursorPositionChanged.connect(self.selecter._update_on_block_change)\nif color is None:\nself.cursorPositionChanged.disconnect(self.selecter._update_on_block_change)\nself._current_line_color = colors.get_color(color) if color else None\ndef get_current_line_color(self) -&gt; gui.Color:\nreturn self._current_line_color\ncurrent_line_color = core.Property(\ngui.QColor,\nget_current_line_color,\nset_current_line_color,\ndoc=\"Color to use for current line highlighting\",\n)\ndef get_visible_line_span(self) -&gt; tuple[int, int]:\nblock = self.firstVisibleBlock()\nstart = block.blockNumber()\npage_step = self.v_scrollbar.pageStep()\nend = min(start + page_step, self.blockCount())\nreturn (start, end)\ndef get_pixel_height(self, exact: bool = True) -&gt; int:\n\"\"\"Returns the pixel height of the text area.\"\"\"\nwidget_margins = self.contentsMargins()\ndoc_height = self.document().get_pixel_height(exact=exact)\nreturn widget_margins.top() + doc_height + widget_margins.bottom()\nvalidation_color = core.Property(\ngui.QColor,\nget_validation_color,\nset_validation_color,\ndoc=\"Color to use for invalid text\",\n)\n</code></pre> Name Children Inherits PlainTextEditprettyqt.widgets.plaintextedit <ul><li>AutoResizePlainTextEdit</li><li>SingleLineTextEdit</li><li>LogTextEdit</li><li>CodeEditor</li></ul> <ul><li>PlainTextEditMixin</li><li>QPlainTextEdit</li></ul>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_line_wrap_mode","title":"<code>get_line_wrap_mode() -&gt; LineWrapModeStr</code>","text":"<p>Get the current wrap mode.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n    Returns:\n        Wrap mode\n    \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_pixel_height","title":"<code>get_pixel_height(exact: bool = True) -&gt; int</code>","text":"<p>Returns the pixel height of the text area.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_pixel_height(self, exact: bool = True) -&gt; int:\n\"\"\"Returns the pixel height of the text area.\"\"\"\nwidget_margins = self.contentsMargins()\ndoc_height = self.document().get_pixel_height(exact=exact)\nreturn widget_margins.top() + doc_height + widget_margins.bottom()\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.get_word_wrap_mode","title":"<code>get_word_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"<p>Get the current word wrap mode.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n    Returns:\n        Word wrap mode\n    \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_line_wrap_mode","title":"<code>set_line_wrap_mode(mode: LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode)</code>","text":"<p>Set line wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode</code> <p>line wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_line_wrap_mode(\nself, mode: LineWrapModeStr | widgets.QPlainTextEdit.LineWrapMode\n):\n\"\"\"Set line wrap mode.\n    Args:\n        mode: line wrap mode to use\n    \"\"\"\nself.setLineWrapMode(LINE_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_read_only","title":"<code>set_read_only(value: bool = True)</code>","text":"<p>Make the PlainTextEdit read-only.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>True, for read-only, otherwise False</p> <code>True</code> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_read_only(self, value: bool = True):\n\"\"\"Make the PlainTextEdit read-only.\n    Args:\n        value: True, for read-only, otherwise False\n    \"\"\"\nself.setReadOnly(value)\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.set_word_wrap_mode","title":"<code>set_word_wrap_mode(mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode)</code>","text":"<p>Set word wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode</code> <p>word wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def set_word_wrap_mode(\nself, mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode\n):\n\"\"\"Set word wrap mode.\n    Args:\n        mode: word wrap mode to use\n    \"\"\"\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.show_whitespace_and_tabs","title":"<code>show_whitespace_and_tabs(show: bool)</code>","text":"<p>Set show white spaces flag.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def show_whitespace_and_tabs(self, show: bool):\n\"\"\"Set show white spaces flag.\"\"\"\ndoc = self.document()\noptions = doc.defaultTextOption()\nflag = gui.QTextOption.Flag.ShowTabsAndSpaces\nif show:\noptions.setFlags(options.flags() | flag)  # type: ignore\nelse:\noptions.setFlags(options.flags() &amp; ~flag)  # type: ignore\ndoc.setDefaultTextOption(options)\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#prettyqt.widgets.plaintextedit.PlainTextEditMixin.wheelEvent","title":"<code>wheelEvent(event)</code>","text":"<p>Handle wheel event for zooming.</p> Source code in <code>prettyqt\\widgets\\plaintextedit.py</code> <pre><code>def wheelEvent(self, event):\n\"\"\"Handle wheel event for zooming.\"\"\"\nif not self._allow_wheel_zoom:\nreturn super().wheelEvent(event)\nif event.modifiers() &amp; constants.CTRL_MOD:\nself.zoomIn() if event.angleDelta().y() &gt; 0 else self.zoomOut()\nevent.accept()\nelse:\nsuper().wheelEvent(event)\n</code></pre>"},{"location":"qt_modules/widgets/PlainTextEditMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261397968[\"widgets.PlainTextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261131200 --&gt; 2103261397968\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html","title":"ProgressBar","text":"<p>Qt Base Class: QProgressBar</p> <p>Signature: <code>QProgressBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ProgressBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QProgressBar</code></p> <p>Horizontal or vertical progress bar.</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>class ProgressBar(widgets.WidgetMixin, widgets.QProgressBar):\n\"\"\"Horizontal or vertical progress bar.\"\"\"\ndef __init__(self, *args, text_visible: bool = True, **kwargs):\nsuper().__init__(*args, text_visible=text_visible, **kwargs)\ndef set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the layout.\n        Args:\n            alignment: alignment for the layout\n        \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\ndef get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n        Returns:\n            alignment\n        \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\ndef set_text_direction(\nself, text_direction: TextDirectionStr | widgets.QProgressBar.Direction\n):\n\"\"\"Set the text direction of the layout.\n        Args:\n            text_direction: text direction for the layout\n        \"\"\"\nself.setTextDirection(TEXT_DIRECTIONS.get_enum_value(text_direction))\ndef get_text_direction(self) -&gt; TextDirectionStr:\n\"\"\"Return current text direction.\n        Returns:\n            Text direction\n        \"\"\"\nreturn TEXT_DIRECTIONS.inverse[self.textDirection()]\ndef set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the progress bar.\n        Args:\n            orientation: orientation for the progress bar\n        \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\ndef set_range(self, start: int, end: int):\nself.setRange(start, end)\ndef set_value(self, value: int):\nself.setValue(value)\ndef get_value(self) -&gt; int:\nreturn self.value()\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#prettyqt.widgets.progressbar.ProgressBar.get_alignment","title":"<code>get_alignment() -&gt; constants.AlignmentStr</code>","text":"<p>Return current alignment.</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_alignment(self) -&gt; constants.AlignmentStr:\n\"\"\"Return current alignment.\n    Returns:\n        alignment\n    \"\"\"\nreturn constants.ALIGNMENTS.inverse[self.alignment()]\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#prettyqt.widgets.progressbar.ProgressBar.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#prettyqt.widgets.progressbar.ProgressBar.get_text_direction","title":"<code>get_text_direction() -&gt; TextDirectionStr</code>","text":"<p>Return current text direction.</p> Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def get_text_direction(self) -&gt; TextDirectionStr:\n\"\"\"Return current text direction.\n    Returns:\n        Text direction\n    \"\"\"\nreturn TEXT_DIRECTIONS.inverse[self.textDirection()]\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#prettyqt.widgets.progressbar.ProgressBar.set_alignment","title":"<code>set_alignment(alignment: constants.AlignmentStr | constants.AlignmentFlag)</code>","text":"<p>Set the alignment of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>alignment</code> <code>constants.AlignmentStr | constants.AlignmentFlag</code> <p>alignment for the layout</p> required Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_alignment(self, alignment: constants.AlignmentStr | constants.AlignmentFlag):\n\"\"\"Set the alignment of the layout.\n    Args:\n        alignment: alignment for the layout\n    \"\"\"\nself.setAlignment(constants.ALIGNMENTS.get_enum_value(alignment))\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#prettyqt.widgets.progressbar.ProgressBar.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the progress bar.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the progress bar</p> required Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the progress bar.\n    Args:\n        orientation: orientation for the progress bar\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#prettyqt.widgets.progressbar.ProgressBar.set_text_direction","title":"<code>set_text_direction(text_direction: TextDirectionStr | widgets.QProgressBar.Direction)</code>","text":"<p>Set the text direction of the layout.</p> <p>Parameters:</p> Name Type Description Default <code>text_direction</code> <code>TextDirectionStr | widgets.QProgressBar.Direction</code> <p>text direction for the layout</p> required Source code in <code>prettyqt\\widgets\\progressbar.py</code> <pre><code>def set_text_direction(\nself, text_direction: TextDirectionStr | widgets.QProgressBar.Direction\n):\n\"\"\"Set the text direction of the layout.\n    Args:\n        text_direction: text direction for the layout\n    \"\"\"\nself.setTextDirection(TEXT_DIRECTIONS.get_enum_value(text_direction))\n</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261369168[\"widgets.ProgressBar\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259719920[\"QtWidgets.QProgressBar\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261369168\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259719920 --&gt; 2103261369168\n  2103259691120 --&gt; 2103259719920\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ProgressBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>text</code> QString <code>value</code> int <code>alignment</code> QFlags <code>textVisible</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>textDirection</code> QProgressBar::Direction <code>format</code> QString"},{"location":"qt_modules/widgets/ProgressDialog.html","title":"ProgressDialog","text":"<p>Qt Base Class: QProgressDialog</p> <p>Signature: <code>QProgressDialog(self, labelText: str, cancelButtonText: str, minimum: int, maximum: int, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QProgressDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ProgressDialog.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DialogMixin</code>, <code>widgets.QProgressDialog</code></p> <p>Feedback on the progress of a slow operation.</p> Source code in <code>prettyqt\\widgets\\progressdialog.py</code> <pre><code>class ProgressDialog(widgets.DialogMixin, widgets.QProgressDialog):\n\"\"\"Feedback on the progress of a slow operation.\"\"\"\ndef __init__(self, parent: widgets.QWidget | None = None):\nsuper().__init__(parent=parent)\nprogress_bar = widgets.ProgressBar()\nprogress_bar.setRange(0, 0)\nprogress_bar.setTextVisible(False)\nself.setBar(progress_bar)\nself.set_icon(\"mdi.timer-sand-empty\")\nself.set_modality(\"application\")\nself.set_flags(\nminimize=False, maximize=False, close=False, stay_on_top=True, window=True\n)\nself.setCancelButton(None)  # type: ignore\nself.cancel()\ndef show_message(self, message: str):\nself.setLabelText(message)\nself.show()\n</code></pre>"},{"location":"qt_modules/widgets/ProgressDialog.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261440208[\"widgets.ProgressDialog\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259853360[\"QtWidgets.QProgressDialog\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261212800 --&gt; 2103261440208\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259853360 --&gt; 2103261440208\n  2103259840880 --&gt; 2103259853360\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ProgressDialog.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>wasCanceled</code> bool <code>minimum</code> int <code>maximum</code> int <code>value</code> int <code>autoReset</code> bool <code>autoClose</code> bool <code>minimumDuration</code> int <code>labelText</code> QString"},{"location":"qt_modules/widgets/ProxyStyle.html","title":"ProxyStyle","text":"<p>Qt Base Class: QProxyStyle</p> <p>Signature: <code>QProxyStyle(self, key: str) -&gt; None QProxyStyle(self, style: Optional[PySide6.QtWidgets.QStyle] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ProxyStyle.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.CommonStyleMixin</code>, <code>widgets.QProxyStyle</code></p> <p>Convenience class that simplifies dynamically overriding QStyle elements.</p> Source code in <code>prettyqt\\widgets\\proxystyle.py</code> <pre><code>class ProxyStyle(widgets.CommonStyleMixin, widgets.QProxyStyle):\n\"\"\"Convenience class that simplifies dynamically overriding QStyle elements.\"\"\"\n</code></pre> Name Children Inherits <code>HollowHandleStyle</code>prettyqt.widgets.slider <ul><li>ProxyStyle</li></ul>"},{"location":"qt_modules/widgets/ProxyStyle.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261099520[\"widgets.ProxyStyle\"]\n  2103261112960[\"widgets.CommonStyleMixin\"]\n  2103261101440[\"widgets.StyleMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260120976[\"QtWidgets.QProxyStyle\"]\n  2103260120016[\"QtWidgets.QCommonStyle\"]\n  2103260098896[\"QtWidgets.QStyle\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261112960 --&gt; 2103261099520\n  2103261101440 --&gt; 2103261112960\n  2103255067472 --&gt; 2103261101440\n  140736120080256 --&gt; 2103255067472\n  2103260120976 --&gt; 2103261099520\n  2103260120016 --&gt; 2103260120976\n  2103260098896 --&gt; 2103260120016\n  2103254677056 --&gt; 2103260098896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/ProxyStyle.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/widgets/PushButton.html","title":"PushButton","text":"<p>Qt Base Class: QPushButton</p> <p>Signature: <code>QPushButton(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPushButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QPushButton(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/PushButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>PushButtonMixin</code>, <code>widgets.QPushButton</code></p> <p>Command button.</p> Source code in <code>prettyqt\\widgets\\pushbutton.py</code> <pre><code>class PushButton(PushButtonMixin, widgets.QPushButton):\n\"\"\"Command button.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/PushButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261213760[\"widgets.PushButton\"]\n  2103261208000[\"widgets.PushButtonMixin\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259910736[\"QtWidgets.QPushButton\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261208000 --&gt; 2103261213760\n  2103261100480 --&gt; 2103261208000\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259910736 --&gt; 2103261213760\n  2103259928016 --&gt; 2103259910736\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/PushButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>autoDefault</code> bool <code>default</code> bool <code>flat</code> bool"},{"location":"qt_modules/widgets/PushButtonMixin.html","title":"PushButtonMixin","text":""},{"location":"qt_modules/widgets/PushButtonMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractButtonMixin</code></p> Source code in <code>prettyqt\\widgets\\pushbutton.py</code> <pre><code>class PushButtonMixin(widgets.AbstractButtonMixin):\nvalue_changed = core.Signal(bool)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.toggled.connect(self.value_changed)\nself._action = None\ndef __repr__(self):\nreturn get_repr(self, self.text())\ndef set_action(self, action: gui.QAction):\nif self._action == action:\nreturn\nif self._action:\nself._action.changed.disconnect(self._update_button_for_action)\nself.clicked.disconnect(self._action.trigger)\nself._action = action\nself.clicked.connect(action.trigger)\naction.changed.connect(self._update_button_for_action)\nself._update_button_for_action()\n@core.Slot()\ndef _update_button_for_action(self):\nself.setText(self._action.text())\nself.setIcon(self._action.icon())\nself.setStatusTip(self._action.statusTip())\nself.setToolTip(self._action.toolTip())\nself.setEnabled(self._action.isEnabled())\nself.setCheckable(self._action.isCheckable())\nself.setChecked(self._action.isChecked())\n</code></pre> Name Children Inherits PushButtonprettyqt.widgets.pushbutton <ul><li>PushButtonMixin</li><li>QPushButton</li></ul> CommandLinkButtonprettyqt.widgets.commandlinkbutton <ul><li>PushButtonMixin</li><li>QCommandLinkButton</li></ul>"},{"location":"qt_modules/widgets/PushButtonMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261208000[\"widgets.PushButtonMixin\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261100480 --&gt; 2103261208000\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/RadioButton.html","title":"RadioButton","text":"<p>Qt Base Class: QRadioButton</p> <p>Signature: <code>QRadioButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QRadioButton(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/RadioButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractButtonMixin</code>, <code>widgets.QRadioButton</code></p> <p>Radio button with a text label.</p> Source code in <code>prettyqt\\widgets\\radiobutton.py</code> <pre><code>class RadioButton(widgets.AbstractButtonMixin, widgets.QRadioButton):\n\"\"\"Radio button with a text label.\"\"\"\nvalue_changed = core.Signal(bool)\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.toggled.connect(self.value_changed)\n</code></pre>"},{"location":"qt_modules/widgets/RadioButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261222400[\"widgets.RadioButton\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259934736[\"QtWidgets.QRadioButton\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261100480 --&gt; 2103261222400\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259934736 --&gt; 2103261222400\n  2103259928016 --&gt; 2103259934736\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/RadioButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool"},{"location":"qt_modules/widgets/RubberBand.html","title":"RubberBand","text":"<p>Qt Base Class: QRubberBand</p> <p>Signature: <code>QRubberBand(self, arg__1: PySide6.QtWidgets.QRubberBand.Shape, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/RubberBand.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>RubberBandMixin</code>, <code>widgets.QRubberBand</code></p> <p>Rectangle or line that can indicate a selection or a boundary.</p> Source code in <code>prettyqt\\widgets\\rubberband.py</code> <pre><code>class RubberBand(RubberBandMixin, widgets.QRubberBand):\n\"\"\"Rectangle or line that can indicate a selection or a boundary.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/RubberBand.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261137920[\"widgets.RubberBand\"]\n  2103261148480[\"widgets.RubberBandMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259705520[\"QtWidgets.QRubberBand\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261148480 --&gt; 2103261137920\n  2103261127360 --&gt; 2103261148480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259705520 --&gt; 2103261137920\n  2103259691120 --&gt; 2103259705520\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/RubberBand.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/widgets/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>widgets</li> <li>GraphicsLineItem</li> <li>GraphicsOpacityEffect</li> <li>GraphicsGridLayout</li> <li>AbstractSpinBoxMixin</li> <li>UndoView</li> <li>KeySequenceEdit</li> <li>InputDialog</li> <li>StylePainter</li> <li>SystemTrayIcon</li> <li>StyleOptionTab</li> <li>TreeViewMixin</li> <li>StyleOptionComplexMixin</li> <li>GraphicsBlurEffect</li> <li>AbstractGraphicsShapeItem</li> <li>PinchGesture</li> <li>CommandLinkButton</li> <li>WidgetMixin</li> <li>Splitter</li> <li>FileSystemModel</li> <li>TableWidgetSelectionRange</li> <li>StyleOptionGraphicsItem</li> <li>PlainTextEditMixin</li> <li>GraphicsScene</li> <li>GraphicsTransform</li> <li>AbstractSpinBox</li> <li>DateTimeEditMixin</li> <li>HeaderView</li> <li>HBoxLayout</li> <li>TextEdit</li> <li>LayoutMixin</li> <li>DialogButtonBox</li> <li>LayoutItemMixin</li> <li>StyleOptionTabBarBase</li> <li>TableView</li> <li>StyleOptionButton</li> <li>GraphicsColorizeEffect</li> <li>GraphicsPixmapItem</li> <li>MenuBar</li> <li>AbstractSliderMixin</li> <li>Menu</li> <li>StyleOptionGroupBox</li> <li>ScrollerProperties</li> <li>GraphicsPolygonItem</li> <li>StyleOptionMixin</li> <li>GraphicsItemMixin</li> <li>AbstractItemViewMixin</li> <li>DateTimeEdit</li> <li>SizePolicy</li> <li>ItemEditorFactory</li> <li>TreeWidgetItem</li> <li>FocusFrame</li> <li>ProgressDialog</li> <li>TextEditMixin</li> <li>StyleOptionViewItem</li> <li>LayoutItem</li> <li>StyleOptionTitleBar</li> <li>ListWidget</li> <li>GraphicsProxyWidget</li> <li>StyleOptionTabWidgetFrame</li> <li>GraphicsObjectMixin</li> <li>CommonStyle</li> <li>WidgetAction</li> <li>CommonStyleMixin</li> <li>SplitterHandle</li> <li>Slider</li> <li>StackedWidget</li> <li>StyleOptionSizeGrip</li> <li>AbstractItemDelegateMixin</li> <li>GraphicsDropShadowEffect</li> <li>TextBrowser</li> <li>GraphicsWidgetMixin</li> <li>GraphicsLayout</li> <li>PlainTextEdit</li> <li>RubberBand</li> <li>SizeGrip</li> <li>TimeEdit</li> <li>MdiSubWindow</li> <li>SwipeGesture</li> <li>DateEdit</li> <li>FontDialog</li> <li>StyleOptionToolBar</li> <li>StyleFactory</li> <li>TableWidgetItem</li> <li>StyleOptionRubberBand</li> <li>GraphicsView</li> <li>GraphicsObject</li> <li>Frame</li> <li>MdiArea</li> <li>PanGesture</li> <li>Style</li> <li>ToolTip</li> <li>SplashScreen</li> <li>Dial</li> <li>ItemDelegate</li> <li>StyleOption</li> <li>Completer</li> <li>GraphicsEffect</li> <li>ScrollArea</li> <li>CalendarWidget</li> <li>GraphicsTransformMixin</li> <li>MainWindow</li> <li>PlainTextDocumentLayout</li> <li>AbstractItemView</li> <li>FileDialog</li> <li>ToolBar</li> <li>DialogMixin</li> <li>GridLayout</li> <li>StyleOptionSlider</li> <li>TreeWidgetItemIterator</li> <li>GraphicsLinearLayout</li> <li>StyleOptionProgressBar</li> <li>GraphicsTextItem</li> <li>AbstractScrollAreaMixin</li> <li>StatusBar</li> <li>VBoxLayout</li> <li>TabBar</li> <li>WidgetItem</li> <li>StyledItemDelegate</li> <li>GraphicsRectItem</li> <li>LCDNumber</li> <li>StyleOptionDockWidget</li> <li>GraphicsLayoutMixin</li> <li>ProgressBar</li> <li>GraphicsItem</li> <li>ListWidgetItem</li> <li>TapAndHoldGesture</li> <li>SpinBox</li> <li>Layout</li> <li>PushButton</li> <li>FormLayout</li> <li>StyleOptionSpinBox</li> <li>GraphicsWidget</li> <li>StyleOptionHeader</li> <li>AbstractScrollArea</li> <li>ComboBoxMixin</li> <li>TabWidget</li> <li>Widget</li> <li>Wizard</li> <li>ProxyStyle</li> <li>RadioButton</li> <li>StackedLayout</li> <li>DockWidget</li> <li>GraphicsSimpleTextItem</li> <li>ColumnView</li> <li>StyleOptionFocusRect</li> <li>GraphicsRotation</li> <li>GraphicsItemGroup</li> <li>ButtonGroup</li> <li>Dialog</li> <li>DataWidgetMapper</li> <li>MessageBox</li> <li>TableViewMixin</li> <li>GraphicsEllipseItem</li> <li>GraphicsLayoutItemMixin</li> <li>AbstractButton</li> <li>FontComboBox</li> <li>BoxLayout</li> <li>AbstractButtonMixin</li> <li>ComboBox</li> <li>SpacerItem</li> <li>StyleOptionToolBox</li> <li>Scroller</li> <li>GraphicsAnchorLayout</li> <li>ListViewMixin</li> <li>StyleOptionFrame</li> <li>AbstractGraphicsShapeItemMixin</li> <li>GraphicsScale</li> <li>TapGesture</li> <li>WhatsThis</li> <li>GestureMixin</li> <li>AbstractSlider</li> <li>GroupBox</li> <li>ToolButton</li> <li>ErrorMessage</li> <li>ColorDialog</li> <li>FileIconProvider</li> <li>TableWidget</li> <li>StyleOptionComplex</li> <li>GraphicsEffectMixin</li> <li>GraphicsLayoutItem</li> <li>CheckBox</li> <li>LineEdit</li> <li>WizardPage</li> <li>DoubleSpinBox</li> <li>StyleMixin</li> <li>ToolBox</li> <li>PushButtonMixin</li> <li>AbstractItemDelegate</li> <li>StyleOptionMenuItem</li> <li>TreeWidget</li> <li>GraphicsPathItem</li> <li>GraphicsViewMixin</li> <li>ListView</li> <li>ScrollBar</li> <li>Gesture</li> <li>Application</li> <li>ItemEditorCreatorBase</li> <li>Label</li> <li>FrameMixin</li> <li>StyleOptionToolButton</li> <li>StyleOptionComboBox</li> <li>TreeView</li> </ul>"},{"location":"qt_modules/widgets/ScrollArea.html","title":"ScrollArea","text":"<p>Qt Base Class: QScrollArea</p> <p>Signature: <code>QScrollArea(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ScrollArea.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code>, <code>widgets.QScrollArea</code></p> <p>Scrolling view onto another widget.</p> Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>class ScrollArea(widgets.AbstractScrollAreaMixin, widgets.QScrollArea):\n\"\"\"Scrolling view onto another widget.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nviewport = widgets.Widget(self, object_name=f\"{type(self).__name__}_viewport\")\nself.setViewport(viewport)\ndef __add__(self, other: widgets.QWidget | widgets.QLayout | list):\nself.add(other)\nreturn self\ndef get_visible_widgets(\nself,\ntyp: type[T] = widgets.QWidget,\npartial_allowed: bool = True,\nmargin: int = 10,\nrecursive: bool = True,\n) -&gt; listdelegators.ListDelegator[T]:\n\"\"\"Return all widgets which are visible in the viewport.\n        Results can be filtered by type and whether widget is fully or partially visible.\n        A positive margin increases the area to search for widgets, a negative margin\n        decreases it.\n        \"\"\"\nwidget = self.widget()\nviewport = self.viewport()\nrect = viewport.rect().adjusted(-margin, -margin, margin, margin)\nfound = []\nfor w in widget.find_children(typ, recursive=recursive):\ntop_left = w.mapTo(viewport, w.rect().topLeft())\nbottom_right = w.mapTo(viewport, w.rect().bottomRight())\nmapped = core.Rect(top_left, bottom_right)\nif partial_allowed and rect.intersects(mapped):\nfound.append(w)\nelif not partial_allowed and rect.contains(mapped):\nfound.append(w)\nreturn listdelegators.ListDelegator(found)\ndef get_children(self) -&gt; listdelegators.ListDelegator[widgets.QWidget]:\nreturn self.widget().layout().get_children()\ndef set_widget(self, widget: widgets.QWidget):\nself.setWidget(widget)\ndef add_widget(self, *args, **kwargs):\nself.widget().layout().addWidget(*args, **kwargs)\ndef add_layout(self, *args, **kwargs):\nself.widget().layout().addLayout(*args, **kwargs)\ndef add(\nself,\nitem: widgets.QWidget | widgets.QLayout | list,\nstretch: float | None = None,\n):\nmatch item:\ncase widgets.QWidget():\nself.add_widget(item)\nif stretch:\nself.widget().layout().setStretchFactor(self.count() - 1, stretch)\ncase widgets.QLayout():\nwidget = widgets.Widget(self)\nwidget.set_layout(item)\nself.add_widget(widget)\nif stretch:\nself.setStretchFactor(self.count() - 1, stretch)\ncase list():\nfor i in item:\nself.add(i, stretch)\nreturn item\n</code></pre>"},{"location":"qt_modules/widgets/ScrollArea.html#prettyqt.widgets.scrollarea.ScrollArea.get_visible_widgets","title":"<code>get_visible_widgets(typ: type[T] = widgets.QWidget, partial_allowed: bool = True, margin: int = 10, recursive: bool = True) -&gt; listdelegators.ListDelegator[T]</code>","text":"<p>Return all widgets which are visible in the viewport.</p> <p>Results can be filtered by type and whether widget is fully or partially visible. A positive margin increases the area to search for widgets, a negative margin decreases it.</p> Source code in <code>prettyqt\\widgets\\scrollarea.py</code> <pre><code>def get_visible_widgets(\nself,\ntyp: type[T] = widgets.QWidget,\npartial_allowed: bool = True,\nmargin: int = 10,\nrecursive: bool = True,\n) -&gt; listdelegators.ListDelegator[T]:\n\"\"\"Return all widgets which are visible in the viewport.\n    Results can be filtered by type and whether widget is fully or partially visible.\n    A positive margin increases the area to search for widgets, a negative margin\n    decreases it.\n    \"\"\"\nwidget = self.widget()\nviewport = self.viewport()\nrect = viewport.rect().adjusted(-margin, -margin, margin, margin)\nfound = []\nfor w in widget.find_children(typ, recursive=recursive):\ntop_left = w.mapTo(viewport, w.rect().topLeft())\nbottom_right = w.mapTo(viewport, w.rect().bottomRight())\nmapped = core.Rect(top_left, bottom_right)\nif partial_allowed and rect.intersects(mapped):\nfound.append(w)\nelif not partial_allowed and rect.contains(mapped):\nfound.append(w)\nreturn listdelegators.ListDelegator(found)\n</code></pre>"},{"location":"qt_modules/widgets/ScrollArea.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261155200[\"widgets.ScrollArea\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259768880[\"QtWidgets.QScrollArea\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261131200 --&gt; 2103261155200\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259768880 --&gt; 2103261155200\n  2103259751600 --&gt; 2103259768880\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ScrollArea.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>widgetResizable</code> bool <code>alignment</code> QFlags"},{"location":"qt_modules/widgets/ScrollBar.html","title":"ScrollBar","text":"<p>Qt Base Class: QScrollBar</p> <p>Signature: <code>QScrollBar(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QScrollBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ScrollBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ScrollBarMixin</code>, <code>widgets.QScrollBar</code></p> <p>Vertical or horizontal scroll bar.</p> Source code in <code>prettyqt\\widgets\\scrollbar.py</code> <pre><code>class ScrollBar(ScrollBarMixin, widgets.QScrollBar):\n\"\"\"Vertical or horizontal scroll bar.\"\"\"\n</code></pre> Name Children Inherits AnnotatedScrollBarprettyqt.custom_widgets.scrollbars.annotatedscrollbar <ul><li>ScrollBar</li></ul> PreviewScrollBarprettyqt.custom_widgets.scrollbars.previewscrollbar <ul><li>ScrollBar</li></ul> SmoothScrollBarprettyqt.custom_widgets.scrollbars.smoothscrollbar <ul><li>ScrollBar</li></ul>"},{"location":"qt_modules/widgets/ScrollBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261142720[\"widgets.ScrollBar\"]\n  2103261105280[\"widgets.ScrollBarMixin\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259913616[\"QtWidgets.QScrollBar\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261105280 --&gt; 2103261142720\n  2103261112000 --&gt; 2103261105280\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259913616 --&gt; 2103261142720\n  2103259932816 --&gt; 2103259913616\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ScrollBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool"},{"location":"qt_modules/widgets/Scroller.html","title":"Scroller","text":""},{"location":"qt_modules/widgets/Scroller.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> <p>Enables kinetic scrolling for any scrolling widget or graphics item.</p> Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>class Scroller(core.ObjectMixin):\n\"\"\"Enables kinetic scrolling for any scrolling widget or graphics item.\"\"\"\ndef __init__(self, item: widgets.QScroller):\nself.item = item\ndef __getattr__(self, val):\nreturn getattr(self.item, val)\ndef get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n        Returns:\n            state\n        \"\"\"\nreturn STATE.inverse[self.state()]\ndef get_velocity(self) -&gt; core.PointF:\nreturn core.PointF(self.velocity())\ndef get_pixel_per_meter(self) -&gt; core.PointF:\nreturn core.PointF(self.pixelPerMeter())\ndef get_final_position(self) -&gt; core.PointF:\nreturn core.PointF(self.finalPosition())\ndef handle_input(\nself,\ninput_type: InputStr | widgets.QScroller.Input,\nposition: datatypes.PointFType,\ntimestamp: int = 0,\n) -&gt; bool:\nreturn self.handleInput(\nINPUT.get_enum_value(input_type), datatypes.to_pointf(position), timestamp\n)\ndef get_scroller_properties(self) -&gt; widgets.ScrollerProperties:\nreturn widgets.ScrollerProperties(self.scrollerProperties())\n@classmethod\ndef get_scroller(cls, obj: core.QObject) -&gt; Self:\nreturn cls(widgets.QScroller.scroller(obj))\n@staticmethod\ndef grab_gesture(\ntarget: core.QObject,\ngesture_type: ScrollGestureTypeStr\n| widgets.QScroller.ScrollerGestureType = \"touch\",\n) -&gt; constants.GestureTypeStr:\ngesture = widgets.QScroller.grabGesture(\ntarget, SCROLLER_GESTURE_TYPE.get_enum_value(gesture_type)\n)\nif gesture &gt;= 256:\ngesture -= 256\nreturn constants.GESTURE_TYPE.inverse[gesture]\n@staticmethod\ndef grabbed_gesture(target: core.QObject) -&gt; constants.GestureTypeStr:\nreturn constants.GESTURE_TYPE.inverse[widgets.QScroller.grabbedGesture(target)]\n</code></pre>"},{"location":"qt_modules/widgets/Scroller.html#prettyqt.widgets.scroller.Scroller.get_state","title":"<code>get_state() -&gt; StateStr</code>","text":"<p>Return current state.</p> Source code in <code>prettyqt\\widgets\\scroller.py</code> <pre><code>def get_state(self) -&gt; StateStr:\n\"\"\"Return current state.\n    Returns:\n        state\n    \"\"\"\nreturn STATE.inverse[self.state()]\n</code></pre>"},{"location":"qt_modules/widgets/Scroller.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261420048[\"widgets.Scroller\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261420048\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/ScrollerProperties.html","title":"ScrollerProperties","text":"<p>Qt Base Class: QScrollerProperties</p> <p>Signature: <code>QScrollerProperties(self) -&gt; None QScrollerProperties(self, sp: PySide6.QtWidgets.QScrollerProperties) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ScrollerProperties.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QScrollerProperties</code></p> <p>Stores the settings for a QScroller.</p> Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>class ScrollerProperties(QtWidgets.QScrollerProperties):\n\"\"\"Stores the settings for a QScroller.\"\"\"\ndef __getitem__(self, metric: ScrollmetricStr | mod.ScrollMetric):\nreturn self.get_scroll_metric(metric)\ndef __setitem__(self, metric: ScrollmetricStr | mod.ScrollMetric, value: Any):\nself.set_scroll_metric(metric, value)\ndef keys(self) -&gt; ScrollmetricStr:\nreturn SCROLL_METRIC.keys()\ndef __iter__(self) -&gt; Iterator[ScrollmetricStr]:\nreturn iter(SCROLL_METRIC.keys())\ndef set_scroll_metric(self, metric: ScrollmetricStr | mod.ScrollMetric, value: Any):\n\"\"\"Set scroll metric.\n        Args:\n            metric: Scroll metric to set\n            value: Value to set\n        \"\"\"\nself.setScrollMetric(SCROLL_METRIC.get_enum_value(metric), value)\ndef get_scroll_metric(self, metric: ScrollmetricStr | mod.ScrollMetric) -&gt; Any:\n\"\"\"Return scroll metric.\n        Args:\n            metric: Scroll metric to get\n        Returns:\n            state\n        \"\"\"\nreturn self.scrollMetric(SCROLL_METRIC.get_enum_value(metric))\ndef get_scroll_metrics(self) -&gt; dict[ScrollmetricStr, Any]:\nreturn {i: self.get_scroll_metric(i) for i in SCROLL_METRIC}\n</code></pre>"},{"location":"qt_modules/widgets/ScrollerProperties.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.get_scroll_metric","title":"<code>get_scroll_metric(metric: ScrollmetricStr | mod.ScrollMetric) -&gt; Any</code>","text":"<p>Return scroll metric.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>ScrollmetricStr | mod.ScrollMetric</code> <p>Scroll metric to get</p> required Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def get_scroll_metric(self, metric: ScrollmetricStr | mod.ScrollMetric) -&gt; Any:\n\"\"\"Return scroll metric.\n    Args:\n        metric: Scroll metric to get\n    Returns:\n        state\n    \"\"\"\nreturn self.scrollMetric(SCROLL_METRIC.get_enum_value(metric))\n</code></pre>"},{"location":"qt_modules/widgets/ScrollerProperties.html#prettyqt.widgets.scrollerproperties.ScrollerProperties.set_scroll_metric","title":"<code>set_scroll_metric(metric: ScrollmetricStr | mod.ScrollMetric, value: Any)</code>","text":"<p>Set scroll metric.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>ScrollmetricStr | mod.ScrollMetric</code> <p>Scroll metric to set</p> required <code>value</code> <code>Any</code> <p>Value to set</p> required Source code in <code>prettyqt\\widgets\\scrollerproperties.py</code> <pre><code>def set_scroll_metric(self, metric: ScrollmetricStr | mod.ScrollMetric, value: Any):\n\"\"\"Set scroll metric.\n    Args:\n        metric: Scroll metric to set\n        value: Value to set\n    \"\"\"\nself.setScrollMetric(SCROLL_METRIC.get_enum_value(metric), value)\n</code></pre>"},{"location":"qt_modules/widgets/ScrollerProperties.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261415248[\"widgets.ScrollerProperties\"]\n  2103259647920[\"QtWidgets.QScrollerProperties\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259647920 --&gt; 2103261415248\n  2103206874128 --&gt; 2103259647920\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/SizeGrip.html","title":"SizeGrip","text":"<p>Qt Base Class: QSizeGrip</p> <p>Signature: <code>QSizeGrip(self, parent: PySide6.QtWidgets.QWidget) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SizeGrip.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QSizeGrip</code></p> <p>Resize handle for resizing top-level windows.</p> Source code in <code>prettyqt\\widgets\\sizegrip.py</code> <pre><code>class SizeGrip(widgets.WidgetMixin, widgets.QSizeGrip):\n\"\"\"Resize handle for resizing top-level windows.\"\"\"\n@classmethod\ndef setup_example(cls):\nw = widgets.Widget()\nreturn cls(w)\n</code></pre>"},{"location":"qt_modules/widgets/SizeGrip.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261473808[\"widgets.SizeGrip\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259725680[\"QtWidgets.QSizeGrip\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261473808\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259725680 --&gt; 2103261473808\n  2103259691120 --&gt; 2103259725680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/SizeGrip.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/widgets/SizePolicy.html","title":"SizePolicy","text":"<p>Qt Base Class: QSizePolicy</p> <p>Signature: <code>QSizePolicy(self) -&gt; None QSizePolicy(self, horizontal: PySide6.QtWidgets.QSizePolicy.Policy, vertical: PySide6.QtWidgets.QSizePolicy.Policy, type: PySide6.QtWidgets.QSizePolicy.ControlType = Instance(PySide6.QtWidgets.QSizePolicy.ControlType.DefaultType)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SizePolicy.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QSizePolicy</code></p> <p>Layout attribute describing horizontal and vertical resizing policy.</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>class SizePolicy(QtWidgets.QSizePolicy):\n\"\"\"Layout attribute describing horizontal and vertical resizing policy.\"\"\"\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), str()):\nsuper().__init__(SIZE_POLICY[args[0]], SIZE_POLICY[args[1]])\ncase (str(), str(), str()):\nsuper().__init__(\nSIZE_POLICY[args[0]], SIZE_POLICY[args[1]], CONTROL_TYPE[args[2]]\n)\ncase _:\nsuper().__init__(*args, **kwargs)\ndef __repr__(self) -&gt; str:\nreturn get_repr(\nself,\nself.get_horizontal_policy(),\nself.get_vertical_policy(),\nself.get_control_type(),\n)\ndef __getstate__(self):\nreturn dict(\nhas_height_for_width=self.hasHeightForWidth(),\nhas_width_for_height=self.hasWidthForHeight(),\nhorizontal_stretch=self.horizontalStretch(),\nvertical_stretch=self.verticalStretch(),\nhorizontal_policy=self.get_horizontal_policy(),\nvertical_policy=self.get_vertical_policy(),\nretain_size_when_hidden=self.retainSizeWhenHidden(),\ncontrol_type=self.get_control_type(),\n)\ndef __setstate__(self, state: dict[str, Any]):\nself.setHeightForWidth(state[\"has_height_for_width\"])\nself.setWidthForHeight(state[\"has_width_for_height\"])\nself.setHorizontalStretch(state[\"horizontal_stretch\"])\nself.setVerticalStretch(state[\"vertical_stretch\"])\nself.set_horizontal_policy(state[\"horizontal_policy\"])\nself.set_vertical_policy(state[\"vertical_policy\"])\nself.setRetainSizeWhenHidden(state[\"retain_size_when_hidden\"])\nself.set_control_type(state[\"control_type\"])\ndef __reduce__(self):\nreturn type(self), (), self.__getstate__()\ndef serialize(self) -&gt; dict[str, Any]:\nreturn self.__getstate__()\n@classmethod\ndef clone(cls, qpol: QtWidgets.QSizePolicy) -&gt; Self:\npol = cls(qpol.horizontalPolicy(), qpol.verticalPolicy(), qpol.controlType())\npol.setHeightForWidth(qpol.hasHeightForWidth())\npol.setWidthForHeight(qpol.hasWidthForHeight())\npol.setHorizontalStretch(qpol.horizontalStretch())\npol.setVerticalStretch(qpol.verticalStretch())\npol.setRetainSizeWhenHidden(qpol.retainSizeWhenHidden())\nreturn pol\ndef get_horizontal_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n        Returns:\n            horizontal size policy\n        \"\"\"\nreturn SIZE_POLICY.inverse[self.horizontalPolicy()]\ndef set_horizontal_policy(self, policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy):\n\"\"\"Set the horizontal policy.\n        Args:\n            policy: policy to set\n        \"\"\"\nself.setHorizontalPolicy(SIZE_POLICY.get_enum_value(policy))\ndef get_vertical_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n        Returns:\n            vertical size policy\n        \"\"\"\nreturn SIZE_POLICY.inverse[self.verticalPolicy()]\ndef set_vertical_policy(self, policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy):\n\"\"\"Set the horizontal policy.\n        Args:\n            policy: policy to set\n        \"\"\"\nself.setVerticalPolicy(SIZE_POLICY.get_enum_value(policy))\ndef get_control_type(self) -&gt; ControlTypeStr:\n\"\"\"Return control type.\n        Returns:\n            control type\n        \"\"\"\nreturn CONTROL_TYPE.inverse[self.controlType()]\ndef set_control_type(self, typ: ControlTypeStr | QtWidgets.QSizePolicy.ControlType):\n\"\"\"Set the control type.\n        Args:\n            typ: control type to set\n        \"\"\"\nself.setControlType(CONTROL_TYPE.get_enum_value(typ))\ndef get_transposed(self) -&gt; Self:\ntransposed = self.transposed()\nreturn type(self).clone(transposed)\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#prettyqt.widgets.sizepolicy.SizePolicy.get_control_type","title":"<code>get_control_type() -&gt; ControlTypeStr</code>","text":"<p>Return control type.</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_control_type(self) -&gt; ControlTypeStr:\n\"\"\"Return control type.\n    Returns:\n        control type\n    \"\"\"\nreturn CONTROL_TYPE.inverse[self.controlType()]\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#prettyqt.widgets.sizepolicy.SizePolicy.get_horizontal_policy","title":"<code>get_horizontal_policy() -&gt; SizePolicyStr</code>","text":"<p>Return size policy.</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_horizontal_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n    Returns:\n        horizontal size policy\n    \"\"\"\nreturn SIZE_POLICY.inverse[self.horizontalPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#prettyqt.widgets.sizepolicy.SizePolicy.get_vertical_policy","title":"<code>get_vertical_policy() -&gt; SizePolicyStr</code>","text":"<p>Return size policy.</p> Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def get_vertical_policy(self) -&gt; SizePolicyStr:\n\"\"\"Return size policy.\n    Returns:\n        vertical size policy\n    \"\"\"\nreturn SIZE_POLICY.inverse[self.verticalPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#prettyqt.widgets.sizepolicy.SizePolicy.set_control_type","title":"<code>set_control_type(typ: ControlTypeStr | QtWidgets.QSizePolicy.ControlType)</code>","text":"<p>Set the control type.</p> <p>Parameters:</p> Name Type Description Default <code>typ</code> <code>ControlTypeStr | QtWidgets.QSizePolicy.ControlType</code> <p>control type to set</p> required Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_control_type(self, typ: ControlTypeStr | QtWidgets.QSizePolicy.ControlType):\n\"\"\"Set the control type.\n    Args:\n        typ: control type to set\n    \"\"\"\nself.setControlType(CONTROL_TYPE.get_enum_value(typ))\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#prettyqt.widgets.sizepolicy.SizePolicy.set_horizontal_policy","title":"<code>set_horizontal_policy(policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy)</code>","text":"<p>Set the horizontal policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizePolicyStr | QtWidgets.QSizePolicy.Policy</code> <p>policy to set</p> required Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_horizontal_policy(self, policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy):\n\"\"\"Set the horizontal policy.\n    Args:\n        policy: policy to set\n    \"\"\"\nself.setHorizontalPolicy(SIZE_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#prettyqt.widgets.sizepolicy.SizePolicy.set_vertical_policy","title":"<code>set_vertical_policy(policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy)</code>","text":"<p>Set the horizontal policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>SizePolicyStr | QtWidgets.QSizePolicy.Policy</code> <p>policy to set</p> required Source code in <code>prettyqt\\widgets\\sizepolicy.py</code> <pre><code>def set_vertical_policy(self, policy: SizePolicyStr | QtWidgets.QSizePolicy.Policy):\n\"\"\"Set the horizontal policy.\n    Args:\n        policy: policy to set\n    \"\"\"\nself.setVerticalPolicy(SIZE_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/SizePolicy.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261120640[\"widgets.SizePolicy\"]\n  2103256674272[\"QtWidgets.QSizePolicy\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103256674272 --&gt; 2103261120640\n  2103206874128 --&gt; 2103256674272\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/Slider.html","title":"Slider","text":"<p>Qt Base Class: QSlider</p> <p>Signature: <code>QSlider(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSlider(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Slider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractSliderMixin</code>, <code>widgets.QSlider</code></p> <p>Vertical or horizontal slider.</p> Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>class Slider(widgets.AbstractSliderMixin, widgets.QSlider):\n\"\"\"Vertical or horizontal slider.\"\"\"\nvalue_changed = core.Signal(int)\nclicked = core.Signal(int)\ndef __init__(self, *args, **kwargs):\nmatch args:\ncase (str(), *rest):\nsuper().__init__(constants.ORIENTATION[args[0]], *rest, **kwargs)\ncase _:\nsuper().__init__(*args, **kwargs)\nself.valueChanged.connect(self.on_value_change)\n# style = HollowHandleStyle(\n#     {\n#         \"groove.height\": 4,\n#         \"sub-page.color\": gui.QColor(72, 210, 242),\n#         \"add-page.color\": gui.QColor(255, 255, 255, 50),\n#         \"handle.color\": gui.QColor(72, 210, 242),\n#         \"handle.ring-width\": 2,\n#         \"handle.hollow-radius\": 10,\n#         \"handle.margin\": 0,\n#     }\n# )\n# self.setStyle(style)\ndef mousePressEvent(self, e: gui.QMouseEvent):\nself.clicked.emit(self.value())\nif self.orientation() == constants.Orientation.Horizontal:\nvalue = e.pos().x() / self.width() * self.maximum()\nelse:\nvalue = (self.height() - e.pos().y()) / self.height() * self.maximum()\nself.setValue(int(value))\nsuper().mousePressEvent(e)\ndef set_tick_position(\nself, position: TickPositionAllStr | widgets.QSlider.TickPosition\n):\n\"\"\"Set the tick position for the slider.\n        For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".\n        Args:\n            position: position for the ticks\n        \"\"\"\nif position == \"left\":\nposition = \"above\"\nelif position == \"right\":\nposition = \"below\"\nself.setTickPosition(TICK_POSITION.get_enum_value(position))\ndef get_tick_position(self) -&gt; TickPositionStr:\n\"\"\"Return tick position.\n        Returns:\n            tick position\n        \"\"\"\nreturn TICK_POSITION.inverse[self.tickPosition()]\n</code></pre> Name Children Inherits SpanSliderprettyqt.custom_widgets.editors.spanslider <ul><li>Slider</li></ul>"},{"location":"qt_modules/widgets/Slider.html#prettyqt.widgets.slider.Slider.get_tick_position","title":"<code>get_tick_position() -&gt; TickPositionStr</code>","text":"<p>Return tick position.</p> Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def get_tick_position(self) -&gt; TickPositionStr:\n\"\"\"Return tick position.\n    Returns:\n        tick position\n    \"\"\"\nreturn TICK_POSITION.inverse[self.tickPosition()]\n</code></pre>"},{"location":"qt_modules/widgets/Slider.html#prettyqt.widgets.slider.Slider.set_tick_position","title":"<code>set_tick_position(position: TickPositionAllStr | widgets.QSlider.TickPosition)</code>","text":"<p>Set the tick position for the slider.</p> <p>For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TickPositionAllStr | widgets.QSlider.TickPosition</code> <p>position for the ticks</p> required Source code in <code>prettyqt\\widgets\\slider.py</code> <pre><code>def set_tick_position(\nself, position: TickPositionAllStr | widgets.QSlider.TickPosition\n):\n\"\"\"Set the tick position for the slider.\n    For vertical orientation, \"above\" equals to \"left\" and \"below\" to \"right\".\n    Args:\n        position: position for the ticks\n    \"\"\"\nif position == \"left\":\nposition = \"above\"\nelif position == \"right\":\nposition = \"below\"\nself.setTickPosition(TICK_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/widgets/Slider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261219520[\"widgets.Slider\"]\n  2103261112000[\"widgets.AbstractSliderMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259931856[\"QtWidgets.QSlider\"]\n  2103259932816[\"QtWidgets.QAbstractSlider\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261112000 --&gt; 2103261219520\n  2103261127360 --&gt; 2103261112000\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259931856 --&gt; 2103261219520\n  2103259932816 --&gt; 2103259931856\n  2103259691120 --&gt; 2103259932816\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Slider.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>pageStep</code> int <code>value</code> int <code>sliderPosition</code> int <code>tracking</code> bool <code>orientation</code> Qt::Orientation <code>invertedAppearance</code> bool <code>invertedControls</code> bool <code>sliderDown</code> bool <code>tickPosition</code> QSlider::TickPosition <code>tickInterval</code> int"},{"location":"qt_modules/widgets/SpacerItem.html","title":"SpacerItem","text":"<p>Qt Base Class: QSpacerItem</p> <p>Signature: <code>QSpacerItem(self, w: int, h: int, hData: PySide6.QtWidgets.QSizePolicy.Policy = Instance(PySide6.QtWidgets.QSizePolicy.Minimum), vData: PySide6.QtWidgets.QSizePolicy.Policy = Instance(PySide6.QtWidgets.QSizePolicy.Minimum)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SpacerItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LayoutItemMixin</code>, <code>widgets.QSpacerItem</code></p> <p>Blank space in a layout.</p> Source code in <code>prettyqt\\widgets\\spaceritem.py</code> <pre><code>class SpacerItem(widgets.LayoutItemMixin, widgets.QSpacerItem):\n\"\"\"Blank space in a layout.\"\"\"\ndef __init__(\nself,\nw: int,\nh: int,\nh_policy: widgets.QSizePolicy.Policy\n| widgets.sizepolicy.SizePolicyStr = \"minimum\",\nv_policy: widgets.QSizePolicy.Policy\n| widgets.sizepolicy.SizePolicyStr = \"minimum\",\n):\nif isinstance(h_policy, widgets.QSizePolicy.Policy):\nh_pol = h_policy\nelse:\nh_pol = widgets.sizepolicy.SIZE_POLICY[h_policy]\nif isinstance(v_policy, widgets.QSizePolicy.Policy):\nv_pol = v_policy\nelse:\nv_pol = widgets.sizepolicy.SIZE_POLICY[v_policy]\nsuper().__init__(w, h, h_pol, v_pol)\ndef change_size(\nself,\nw: int,\nh: int,\nh_policy: widgets.sizepolicy.SizePolicyStr = \"minimum\",\nv_policy: widgets.sizepolicy.SizePolicyStr = \"minimum\",\n):\nh_pol = widgets.sizepolicy.SIZE_POLICY[h_policy]\nv_pol = widgets.sizepolicy.SIZE_POLICY[v_policy]\nself.changeSize(w, h, h_pol, v_pol)\ndef get_size_policy(self) -&gt; widgets.SizePolicy:\nreturn widgets.SizePolicy.clone(self.sizePolicy())\n</code></pre>"},{"location":"qt_modules/widgets/SpacerItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261436368[\"widgets.SpacerItem\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259653680[\"QtWidgets.QSpacerItem\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261422928 --&gt; 2103261436368\n  140736120080256 --&gt; 2103261422928\n  2103259653680 --&gt; 2103261436368\n  2103259638320 --&gt; 2103259653680\n  2103206874128 --&gt; 2103259638320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/SpinBox.html","title":"SpinBox","text":"<p>Qt Base Class: QSpinBox</p> <p>Signature: <code>QSpinBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SpinBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractSpinBoxMixin</code>, <code>widgets.QSpinBox</code></p> Source code in <code>prettyqt\\widgets\\spinbox.py</code> <pre><code>class SpinBox(widgets.AbstractSpinBoxMixin, widgets.QSpinBox):\nvalue_changed = core.Signal(int)\ndef __init__(self, *args, maximum: int = MAX_VAL, **kwargs):\nsuper().__init__(*args, maximum=maximum, **kwargs)\nself.valueChanged.connect(self.value_changed)\n@classmethod\ndef supports(cls, instance) -&gt; bool:\nreturn isinstance(instance, int)\ndef set_range(self, start: int | None, end: int | None):\nself.setMinimum(start)\nself.setMaximum(end)\nsetRange = set_range\ndef set_minimum(self, value: int | None):\nif value is None:\nvalue = -MAX_VAL\nsuper().setMinimum(value)\nsetMinimum = set_minimum\ndef set_maximum(self, value: int | None):\nif value is None:\nvalue = MAX_VAL\nsuper().setMaximum(value)\nsetMaximum = set_maximum\ndef set_step_size(self, step_size):\nself.setSingleStep(step_size)\n</code></pre>"},{"location":"qt_modules/widgets/SpinBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261230080[\"widgets.SpinBox\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259905936[\"QtWidgets.QSpinBox\"]\n  2103259895600[\"QtWidgets.QAbstractSpinBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261135040 --&gt; 2103261230080\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259905936 --&gt; 2103261230080\n  2103259895600 --&gt; 2103259905936\n  2103259691120 --&gt; 2103259895600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/SpinBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>wrapping</code> bool <code>frame</code> bool <code>alignment</code> QFlags <code>readOnly</code> bool <code>buttonSymbols</code> QAbstractSpinBox::ButtonSymbols <code>specialValueText</code> QString <code>text</code> QString <code>accelerated</code> bool <code>correctionMode</code> QAbstractSpinBox::CorrectionMode <code>acceptableInput</code> bool <code>keyboardTracking</code> bool <code>showGroupSeparator</code> bool <code>suffix</code> QString <code>prefix</code> QString <code>cleanText</code> QString <code>minimum</code> int <code>maximum</code> int <code>singleStep</code> int <code>stepType</code> QAbstractSpinBox::StepType <code>value</code> int <code>displayIntegerBase</code> int"},{"location":"qt_modules/widgets/SplashScreen.html","title":"SplashScreen","text":"<p>Qt Base Class: QSplashScreen</p> <p>Signature: <code>QSplashScreen(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str] = Default(PySide6.QtGui.QPixmap), f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None QSplashScreen(self, screen: PySide6.QtGui.QScreen, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str] = Default(PySide6.QtGui.QPixmap), f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SplashScreen.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>SplashScreenMixin</code>, <code>widgets.QSplashScreen</code></p> <p>Splash screen that can be shown during application startup.</p> Source code in <code>prettyqt\\widgets\\splashscreen.py</code> <pre><code>class SplashScreen(SplashScreenMixin, widgets.QSplashScreen):\n\"\"\"Splash screen that can be shown during application startup.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/SplashScreen.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261433488[\"widgets.SplashScreen\"]\n  2103261429648[\"widgets.SplashScreenMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259710320[\"QtWidgets.QSplashScreen\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261429648 --&gt; 2103261433488\n  2103261127360 --&gt; 2103261429648\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259710320 --&gt; 2103261433488\n  2103259691120 --&gt; 2103259710320\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/SplashScreen.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/widgets/Splitter.html","title":"Splitter","text":"<p>Qt Base Class: QSplitter</p> <p>Signature: <code>QSplitter(self, arg__1: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QSplitter(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Splitter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>SplitterMixin</code>, <code>widgets.QSplitter</code></p> <p>Implements a splitter widget.</p> Source code in <code>prettyqt\\widgets\\splitter.py</code> <pre><code>class Splitter(SplitterMixin, widgets.QSplitter):\n\"\"\"Implements a splitter widget.\"\"\"\n</code></pre> Name Children Inherits AstViewerprettyqt.custom_widgets.astviewer <ul><li>Splitter</li></ul> ProxyComparerWidgetprettyqt.debugging.proxycomparerwidget <ul><li>Splitter</li></ul>"},{"location":"qt_modules/widgets/Splitter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261446928[\"widgets.Splitter\"]\n  2103261445968[\"widgets.SplitterMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259742000[\"QtWidgets.QSplitter\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261445968 --&gt; 2103261446928\n  2103261110080 --&gt; 2103261445968\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259742000 --&gt; 2103261446928\n  2103259737200 --&gt; 2103259742000\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Splitter.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>orientation</code> Qt::Orientation <code>opaqueResize</code> bool <code>handleWidth</code> int <code>childrenCollapsible</code> bool"},{"location":"qt_modules/widgets/SplitterHandle.html","title":"SplitterHandle","text":"<p>Qt Base Class: QSplitterHandle</p> <p>Signature: <code>QSplitterHandle(self, o: PySide6.QtCore.Qt.Orientation, parent: PySide6.QtWidgets.QSplitter) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SplitterHandle.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QSplitterHandle</code></p> <p>Handle functionality for the splitter.</p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>class SplitterHandle(widgets.WidgetMixin, widgets.QSplitterHandle):\n\"\"\"Handle functionality for the splitter.\"\"\"\ndouble_clicked = core.Signal(object)\ndef __init__(\nself,\norientation: constants.OrientationStr | constants.Orientation,\nparent: widgets.QSplitter,\n**kwargs,\n):\nori = constants.ORIENTATION.get_enum_value(orientation)\nsuper().__init__(ori, parent, **kwargs)\n@classmethod\ndef setup_example(cls):\nw = widgets.Splitter(\"horizontal\")\nreturn cls(\"horizontal\", w)\ndef mouseDoubleClickEvent(self, ev):\nself.double_clicked.emit(self)\ndef set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the slider.\n        Args:\n            orientation: orientation for the slider\n        \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\ndef get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n        Returns:\n            orientation\n        \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/widgets/SplitterHandle.html#prettyqt.widgets.splitterhandle.SplitterHandle.get_orientation","title":"<code>get_orientation() -&gt; constants.OrientationStr</code>","text":"<p>Return current orientation.</p> Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def get_orientation(self) -&gt; constants.OrientationStr:\n\"\"\"Return current orientation.\n    Returns:\n        orientation\n    \"\"\"\nreturn constants.ORIENTATION.inverse[self.orientation()]\n</code></pre>"},{"location":"qt_modules/widgets/SplitterHandle.html#prettyqt.widgets.splitterhandle.SplitterHandle.set_orientation","title":"<code>set_orientation(orientation: constants.OrientationStr | constants.Orientation)</code>","text":"<p>Set the orientation of the slider.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>constants.OrientationStr | constants.Orientation</code> <p>orientation for the slider</p> required Source code in <code>prettyqt\\widgets\\splitterhandle.py</code> <pre><code>def set_orientation(\nself, orientation: constants.OrientationStr | constants.Orientation\n):\n\"\"\"Set the orientation of the slider.\n    Args:\n        orientation: orientation for the slider\n    \"\"\"\nself.setOrientation(constants.ORIENTATION.get_enum_value(orientation))\n</code></pre>"},{"location":"qt_modules/widgets/SplitterHandle.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261448848[\"widgets.SplitterHandle\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259728560[\"QtWidgets.QSplitterHandle\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261448848\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259728560 --&gt; 2103261448848\n  2103259691120 --&gt; 2103259728560\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/SplitterHandle.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/widgets/StackedLayout.html","title":"StackedLayout","text":"<p>Qt Base Class: QStackedLayout</p> <p>Signature: <code>QStackedLayout(self) -&gt; None QStackedLayout(self, parent: PySide6.QtWidgets.QWidget) -&gt; None QStackedLayout(self, parentLayout: PySide6.QtWidgets.QLayout) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StackedLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LayoutMixin</code>, <code>widgets.QStackedLayout</code></p> <p>Layout containing stack of widgets where only one widget is visible at a time.</p> Source code in <code>prettyqt\\widgets\\stackedlayout.py</code> <pre><code>class StackedLayout(widgets.LayoutMixin, widgets.QStackedLayout):\n\"\"\"Layout containing stack of widgets where only one widget is visible at a time.\"\"\"\nID = \"stacked\"\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"stackingMode\": STACKING_MODE}\nreturn maps\ndef set_stacking_mode(self, mode: StackingModeStr):\nself.setStackingMode(STACKING_MODE[mode])\ndef get_stacking_mode(self) -&gt; StackingModeStr:\nreturn STACKING_MODE.inverse[self.stackingMode()]\ndef __add__(self, other: widgets.QWidget | widgets.QLayout):\nself.add(other)\nreturn self\ndef set_current_widget(self, widget: widgets.QWidget):\nself.setCurrentWidget(widget)\n</code></pre>"},{"location":"qt_modules/widgets/StackedLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261435408[\"widgets.StackedLayout\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260128656[\"QtWidgets.QStackedLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261439248 --&gt; 2103261435408\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260128656 --&gt; 2103261435408\n  2103260125776 --&gt; 2103260128656\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/StackedLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint <code>currentIndex</code> int <code>stackingMode</code> QStackedLayout::StackingMode"},{"location":"qt_modules/widgets/StackedWidget.html","title":"StackedWidget","text":"<p>Qt Base Class: QStackedWidget</p> <p>Signature: <code>QStackedWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StackedWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.FrameMixin</code>, <code>widgets.QStackedWidget</code></p> <p>Widget containing stack of widgets where only one widget is visible at a time.</p> Source code in <code>prettyqt\\widgets\\stackedwidget.py</code> <pre><code>class StackedWidget(widgets.FrameMixin, widgets.QStackedWidget):\n\"\"\"Widget containing stack of widgets where only one widget is visible at a time.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.animator = animations.Animator(self)\ndef __add__(self, other: widgets.QWidget) -&gt; StackedWidget:\nself.addWidget(other)\nreturn self\n@overload\ndef __getitem__(self, index: int) -&gt; widgets.QWidget:\n...\n@overload\ndef __getitem__(self, index: slice) -&gt; listdelegators.ListDelegator[widgets.QWidget]:\n...\ndef __getitem__(\nself, index: int | slice\n) -&gt; widgets.QWidget | listdelegators.ListDelegator[widgets.QWidget]:\nmatch index:\ncase int():\nif index &gt;= self.count():\nraise IndexError(index)\nreturn self.widget(index)\ncase slice():\nrng = range(index.start or 0, index.stop or self.count(), index.step or 1)\nreturn listdelegators.ListDelegator(self.widget(i) for i in rng)\ncase _:\nraise TypeError(index)\ndef __delitem__(self, item: int | widgets.QWidget):\nif isinstance(item, int):\nitem = self.widget(item)\nself.removeWidget(item)\ndef __len__(self):\n# needed for PySide6\nreturn self.count()\ndef __contains__(self, item: widgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\n</code></pre>"},{"location":"qt_modules/widgets/StackedWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261432528[\"widgets.StackedWidget\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259741040[\"QtWidgets.QStackedWidget\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261110080 --&gt; 2103261432528\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259741040 --&gt; 2103261432528\n  2103259737200 --&gt; 2103259741040\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/StackedWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>currentIndex</code> int <code>count</code> int"},{"location":"qt_modules/widgets/StatusBar.html","title":"StatusBar","text":"<p>Qt Base Class: QStatusBar</p> <p>Signature: <code>QStatusBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StatusBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QStatusBar</code></p> <p>Horizontal bar suitable for presenting status information.</p> Source code in <code>prettyqt\\widgets\\statusbar.py</code> <pre><code>class StatusBar(widgets.WidgetMixin, widgets.QStatusBar):\n\"\"\"Horizontal bar suitable for presenting status information.\"\"\"\ndef __add__(self, other: QtGui.QAction | widgets.QWidget) -&gt; StatusBar:\nmatch other:\ncase QtGui.QAction():\nself.addAction(other)\nreturn self\ncase widgets.QWidget():\nself.addWidget(other)\nreturn self\ncase _:\nraise TypeError(other)\ndef add_threadpool_info(self, threadpool: core.ThreadPool):\nclass ThreadPoolLabel(widgets.Label):\ndef update_job_count(self, num_jobs: int):\ntext = f\"Running jobs: {num_jobs}\" if num_jobs &gt; 0 else \"No running jobs\"\nself.set_text(text)\nstatus_label = ThreadPoolLabel(self)\nthreadpool.job_num_updated.connect(status_label.update_job_count)\nstatus_label.update_job_count(threadpool.activeThreadCount())\nprogress_bar = widgets.ProgressBar(self, text_visible=False)\nprogress_bar.hide()\nprogress_bar.setRange(0, 0)\nprogress_bar.setFixedSize(200, 20)\nthreadpool.busy_state_changed.connect(progress_bar.setVisible)\nself.addPermanentWidget(status_label)\nself.addPermanentWidget(progress_bar)\ndef add_widget(self, widget: widgets.QWidget, permanent: bool = False) -&gt; None:\nif permanent:\nself.addPermanentWidget(widget)\nelse:\nself.addWidget(widget)\ndef show_message(self, message: str, timeout: int = 0) -&gt; None:\nself.showMessage(message, timeout)\n</code></pre>"},{"location":"qt_modules/widgets/StatusBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261237760[\"widgets.StatusBar\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259727600[\"QtWidgets.QStatusBar\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261237760\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259727600 --&gt; 2103261237760\n  2103259691120 --&gt; 2103259727600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/StatusBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool"},{"location":"qt_modules/widgets/Style.html","title":"Style","text":"<p>Qt Base Class: QStyle</p> <p>Signature: <code>QStyle(self) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Style.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>StyleMixin</code>, <code>widgets.QStyle</code></p> <p>Abstract base class that encapsulates the look and feel of a GUI.</p> Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>class Style(StyleMixin, widgets.QStyle):\n\"\"\"Abstract base class that encapsulates the look and feel of a GUI.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/Style.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261113920[\"widgets.Style\"]\n  2103261101440[\"widgets.StyleMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260098896[\"QtWidgets.QStyle\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261101440 --&gt; 2103261113920\n  2103255067472 --&gt; 2103261101440\n  140736120080256 --&gt; 2103255067472\n  2103260098896 --&gt; 2103261113920\n  2103254677056 --&gt; 2103260098896\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/Style.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/widgets/StyleFactory.html","title":"StyleFactory","text":"<p>Qt Base Class: QStyleFactory</p> <p>Signature: <code>QStyleFactory(self) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleFactory.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QStyleFactory</code></p> Source code in <code>prettyqt\\widgets\\stylefactory.py</code> <pre><code>class StyleFactory(QtWidgets.QStyleFactory):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleFactory.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261195520[\"widgets.StyleFactory\"]\n  2103256673312[\"QtWidgets.QStyleFactory\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103256673312 --&gt; 2103261195520\n  2103206874128 --&gt; 2103256673312\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleMixin.html","title":"StyleMixin","text":""},{"location":"qt_modules/widgets/StyleMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code></p> Source code in <code>prettyqt\\widgets\\style.py</code> <pre><code>class StyleMixin(core.ObjectMixin):\ndef draw_primitive(\nself,\nelement: SubControlStr | mod.SubControl,\noption: widgets.QStyleOption,\npainter: QtGui.QPainter,\nwidget: widgets.QWidget | None = None,\n):\nself.drawPrimitive(\nPRIMITIVE_ELEMENT.get_enum_value(element), option, painter, widget\n)\ndef draw_control(\nself,\ncontrol: ControlElementStr | mod.ControlElement,\noption: widgets.QStyleOption,\npainter: QtGui.QPainter,\nwidget: widgets.QWidget | None = None,\n):\nself.drawPrimitive(\nCONTROL_ELEMENT.get_enum_value(control), option, painter, widget\n)\ndef get_layout_spacing(\nself,\ncontrol_1: widgets.sizepolicy.ControlTypeStr | widgets.QSizePolicy.ControlType,\ncontrol_2: widgets.sizepolicy.ControlTypeStr | widgets.QSizePolicy.ControlType,\norientation: constants.OrientationStr | constants.Orientation,\noption_or_widget: widgets.QStyleOption | widgets.QWidget | None = None,\n):\nc1 = widgets.sizepolicy.CONTROL_TYPE.get_enum_value(control_1)\nc2 = widgets.sizepolicy.CONTROL_TYPE.get_enum_value(control_2)\no = constants.ORIENTATION.get_enum_value(orientation)\nmatch option_or_widget:\ncase widgets.QWidget():\nreturn self.layoutSpacing(c1, c2, o, None, option_or_widget)\ncase widgets.QStyleOption() | None:\nreturn self.layoutSpacing(c1, c2, o, option_or_widget)\ncase _:\nraise ValueError(option_or_widget)\n</code></pre> Name Children Inherits Styleprettyqt.widgets.style <ul><li>StyleMixin</li><li>QStyle</li></ul> CommonStyleMixinprettyqt.widgets.commonstyle <ul><li>CommonStyle</li><li>ProxyStyle</li></ul> <ul><li>StyleMixin</li></ul>"},{"location":"qt_modules/widgets/StyleMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261101440[\"widgets.StyleMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103255067472 --&gt; 2103261101440\n  140736120080256 --&gt; 2103255067472</code></pre>"},{"location":"qt_modules/widgets/StyleOption.html","title":"StyleOption","text":"<p>Qt Base Class: QStyleOption</p> <p>Signature: <code>QStyleOption(self, other: PySide6.QtWidgets.QStyleOption) -&gt; None QStyleOption(self, version: int = Instance(QStyleOption.StyleOptionVersion.Version), type: int = Instance(QStyleOption.OptionType.SO_Default)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOption.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>StyleOptionMixin</code>, <code>QtWidgets.QStyleOption</code></p> Source code in <code>prettyqt\\widgets\\styleoption.py</code> <pre><code>class StyleOption(StyleOptionMixin, QtWidgets.QStyleOption):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOption.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261187840[\"widgets.StyleOption\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261187840\n  140736120080256 --&gt; 2103261169600\n  2103259936656 --&gt; 2103261187840\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionButton.html","title":"StyleOptionButton","text":"<p>Qt Base Class: QStyleOptionButton</p> <p>Signature: <code>QStyleOptionButton(self) -&gt; None QStyleOptionButton(self, other: PySide6.QtWidgets.QStyleOptionButton) -&gt; None QStyleOptionButton(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionButton</code></p> Source code in <code>prettyqt\\widgets\\styleoptionbutton.py</code> <pre><code>class StyleOptionButton(widgets.StyleOptionMixin, widgets.QStyleOptionButton):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261177280[\"widgets.StyleOptionButton\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260108496[\"QtWidgets.QStyleOptionButton\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261177280\n  140736120080256 --&gt; 2103261169600\n  2103260108496 --&gt; 2103261177280\n  2103259936656 --&gt; 2103260108496\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionComboBox.html","title":"StyleOptionComboBox","text":"<p>Qt Base Class: QStyleOptionComboBox</p> <p>Signature: <code>QStyleOptionComboBox(self) -&gt; None QStyleOptionComboBox(self, other: PySide6.QtWidgets.QStyleOptionComboBox) -&gt; None QStyleOptionComboBox(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionComboBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>widgets.QStyleOptionComboBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptioncombobox.py</code> <pre><code>class StyleOptionComboBox(widgets.StyleOptionComplexMixin, widgets.QStyleOptionComboBox):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionComboBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261200320[\"widgets.StyleOptionComboBox\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260085456[\"QtWidgets.QStyleOptionComboBox\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261176320 --&gt; 2103261200320\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260085456 --&gt; 2103261200320\n  2103260038416 --&gt; 2103260085456\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionComplex.html","title":"StyleOptionComplex","text":"<p>Qt Base Class: QStyleOptionComplex</p> <p>Signature: <code>QStyleOptionComplex(self, other: PySide6.QtWidgets.QStyleOptionComplex) -&gt; None QStyleOptionComplex(self, version: int = Instance(QStyleOptionComplex.StyleOptionVersion.Version), type: int = Instance(QStyleOption.OptionType.SO_Complex)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionComplex.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>StyleOptionComplexMixin</code>, <code>widgets.QStyleOptionComplex</code></p> Source code in <code>prettyqt\\widgets\\styleoptioncomplex.py</code> <pre><code>class StyleOptionComplex(StyleOptionComplexMixin, widgets.QStyleOptionComplex):\npass\n</code></pre> Name Children Inherits StyleOptionGroupBoxprettyqt.widgets.styleoptiongroupbox <ul><li>StyleOptionComplex</li><li>QStyleOptionGroupBox</li></ul> StyleOptionSpinBoxprettyqt.widgets.styleoptionspinbox <ul><li>StyleOptionComplex</li><li>QStyleOptionSpinBox</li></ul> StyleOptionTitleBarprettyqt.widgets.styleoptiontitlebar <ul><li>StyleOptionComplex</li><li>QStyleOptionTitleBar</li></ul> StyleOptionToolButtonprettyqt.widgets.styleoptiontoolbutton <ul><li>StyleOptionComplex</li><li>QStyleOptionToolButton</li></ul>"},{"location":"qt_modules/widgets/StyleOptionComplex.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261183040[\"widgets.StyleOptionComplex\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261176320 --&gt; 2103261183040\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260038416 --&gt; 2103261183040\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionComplexMixin.html","title":"StyleOptionComplexMixin","text":""},{"location":"qt_modules/widgets/StyleOptionComplexMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code></p> Source code in <code>prettyqt\\widgets\\styleoptioncomplex.py</code> <pre><code>class StyleOptionComplexMixin(widgets.StyleOptionMixin):\npass\n</code></pre> Name Children Inherits StyleOptionComplexprettyqt.widgets.styleoptioncomplex <ul><li>StyleOptionGroupBox</li><li>StyleOptionSpinBox</li><li>StyleOptionTitleBar</li><li>StyleOptionToolButton</li></ul> <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionComplex</li></ul> StyleOptionComboBoxprettyqt.widgets.styleoptioncombobox <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionComboBox</li></ul> StyleOptionSizeGripprettyqt.widgets.styleoptionsizegrip <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionSizeGrip</li></ul> StyleOptionSliderprettyqt.widgets.styleoptionslider <ul><li>StyleOptionComplexMixin</li><li>QStyleOptionSlider</li></ul>"},{"location":"qt_modules/widgets/StyleOptionComplexMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600</code></pre>"},{"location":"qt_modules/widgets/StyleOptionDockWidget.html","title":"StyleOptionDockWidget","text":"<p>Qt Base Class: QStyleOptionDockWidget</p> <p>Signature: <code>QStyleOptionDockWidget(self) -&gt; None QStyleOptionDockWidget(self, other: PySide6.QtWidgets.QStyleOptionDockWidget) -&gt; None QStyleOptionDockWidget(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionDockWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionDockWidget</code></p> Source code in <code>prettyqt\\widgets\\styleoptiondockwidget.py</code> <pre><code>class StyleOptionDockWidget(widgets.StyleOptionMixin, widgets.QStyleOptionDockWidget):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionDockWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261172480[\"widgets.StyleOptionDockWidget\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260036496[\"QtWidgets.QStyleOptionDockWidget\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261172480\n  140736120080256 --&gt; 2103261169600\n  2103260036496 --&gt; 2103261172480\n  2103259936656 --&gt; 2103260036496\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionFocusRect.html","title":"StyleOptionFocusRect","text":"<p>Qt Base Class: QStyleOptionFocusRect</p> <p>Signature: <code>QStyleOptionFocusRect(self) -&gt; None QStyleOptionFocusRect(self, other: PySide6.QtWidgets.QStyleOptionFocusRect) -&gt; None QStyleOptionFocusRect(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionFocusRect.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionFocusRect</code></p> Source code in <code>prettyqt\\widgets\\styleoptionfocusrect.py</code> <pre><code>class StyleOptionFocusRect(widgets.StyleOptionMixin, widgets.QStyleOptionFocusRect):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionFocusRect.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261173440[\"widgets.StyleOptionFocusRect\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260049936[\"QtWidgets.QStyleOptionFocusRect\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261173440\n  140736120080256 --&gt; 2103261169600\n  2103260049936 --&gt; 2103261173440\n  2103259936656 --&gt; 2103260049936\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionFrame.html","title":"StyleOptionFrame","text":"<p>Qt Base Class: QStyleOptionFrame</p> <p>Signature: <code>QStyleOptionFrame(self) -&gt; None QStyleOptionFrame(self, other: PySide6.QtWidgets.QStyleOptionFrame) -&gt; None QStyleOptionFrame(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionFrame.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionFrame</code></p> Source code in <code>prettyqt\\widgets\\styleoptionframe.py</code> <pre><code>class StyleOptionFrame(widgets.StyleOptionMixin, widgets.QStyleOptionFrame):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionFrame.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261174400[\"widgets.StyleOptionFrame\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260043216[\"QtWidgets.QStyleOptionFrame\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261174400\n  140736120080256 --&gt; 2103261169600\n  2103260043216 --&gt; 2103261174400\n  2103259936656 --&gt; 2103260043216\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionGraphicsItem.html","title":"StyleOptionGraphicsItem","text":"<p>Qt Base Class: QStyleOptionGraphicsItem</p> <p>Signature: <code>QStyleOptionGraphicsItem(self) -&gt; None QStyleOptionGraphicsItem(self, other: PySide6.QtWidgets.QStyleOptionGraphicsItem) -&gt; None QStyleOptionGraphicsItem(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionGraphicsItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionGraphicsItem</code></p> Source code in <code>prettyqt\\widgets\\styleoptiongraphicsitem.py</code> <pre><code>class StyleOptionGraphicsItem(widgets.StyleOptionMixin, widgets.QStyleOptionGraphicsItem):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionGraphicsItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261184960[\"widgets.StyleOptionGraphicsItem\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260041296[\"QtWidgets.QStyleOptionGraphicsItem\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261184960\n  140736120080256 --&gt; 2103261169600\n  2103260041296 --&gt; 2103261184960\n  2103259936656 --&gt; 2103260041296\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionGroupBox.html","title":"StyleOptionGroupBox","text":"<p>Qt Base Class: QStyleOptionGroupBox</p> <p>Signature: <code>QStyleOptionGroupBox(self) -&gt; None QStyleOptionGroupBox(self, other: PySide6.QtWidgets.QStyleOptionGroupBox) -&gt; None QStyleOptionGroupBox(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionGroupBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplex</code>, <code>widgets.QStyleOptionGroupBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptiongroupbox.py</code> <pre><code>class StyleOptionGroupBox(widgets.StyleOptionComplex, widgets.QStyleOptionGroupBox):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionGroupBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261202240[\"widgets.StyleOptionGroupBox\"]\n  2103261183040[\"widgets.StyleOptionComplex\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260070096[\"QtWidgets.QStyleOptionGroupBox\"]\n  2103261183040 --&gt; 2103261202240\n  2103261176320 --&gt; 2103261183040\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260038416 --&gt; 2103261183040\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128\n  2103260070096 --&gt; 2103261202240\n  2103260038416 --&gt; 2103260070096</code></pre>"},{"location":"qt_modules/widgets/StyleOptionHeader.html","title":"StyleOptionHeader","text":"<p>Qt Base Class: QStyleOptionHeader</p> <p>Signature: <code>QStyleOptionHeader(self) -&gt; None QStyleOptionHeader(self, other: PySide6.QtWidgets.QStyleOptionHeader) -&gt; None QStyleOptionHeader(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionHeader.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionHeader</code></p> Source code in <code>prettyqt\\widgets\\styleoptionheader.py</code> <pre><code>class StyleOptionHeader(widgets.StyleOptionMixin, widgets.QStyleOptionHeader):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionHeader.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261164800[\"widgets.StyleOptionHeader\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260007696[\"QtWidgets.QStyleOptionHeader\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261164800\n  140736120080256 --&gt; 2103261169600\n  2103260007696 --&gt; 2103261164800\n  2103259936656 --&gt; 2103260007696\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionMenuItem.html","title":"StyleOptionMenuItem","text":"<p>Qt Base Class: QStyleOptionMenuItem</p> <p>Signature: <code>QStyleOptionMenuItem(self) -&gt; None QStyleOptionMenuItem(self, other: PySide6.QtWidgets.QStyleOptionMenuItem) -&gt; None QStyleOptionMenuItem(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionMenuItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionMenuItem</code></p> Source code in <code>prettyqt\\widgets\\styleoptionmenuitem.py</code> <pre><code>class StyleOptionMenuItem(widgets.StyleOptionMixin, widgets.QStyleOptionMenuItem):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionMenuItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261191680[\"widgets.StyleOptionMenuItem\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259972176[\"QtWidgets.QStyleOptionMenuItem\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261191680\n  140736120080256 --&gt; 2103261169600\n  2103259972176 --&gt; 2103261191680\n  2103259936656 --&gt; 2103259972176\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionMixin.html","title":"StyleOptionMixin","text":""},{"location":"qt_modules/widgets/StyleOptionMixin.html#docstrings","title":"DocStrings","text":"Source code in <code>prettyqt\\widgets\\styleoption.py</code> <pre><code>class StyleOptionMixin:\n@classmethod\ndef based_on(cls, widget: QtWidgets.QWidget) -&gt; Self:\nopt = cls()\nopt.initFrom(widget)\nreturn opt\n</code></pre> Name Children Inherits StyleOptionprettyqt.widgets.styleoption <ul><li>StyleOptionMixin</li><li>QStyleOption</li></ul> StyleOptionButtonprettyqt.widgets.styleoptionbutton <ul><li>StyleOptionMixin</li><li>QStyleOptionButton</li></ul> StyleOptionComplexMixinprettyqt.widgets.styleoptioncomplex <ul><li>StyleOptionComplex</li><li>StyleOptionComboBox</li><li>StyleOptionSizeGrip</li><li>StyleOptionSlider</li></ul> <ul><li>StyleOptionMixin</li></ul> StyleOptionDockWidgetprettyqt.widgets.styleoptiondockwidget <ul><li>StyleOptionMixin</li><li>QStyleOptionDockWidget</li></ul> StyleOptionFocusRectprettyqt.widgets.styleoptionfocusrect <ul><li>StyleOptionMixin</li><li>QStyleOptionFocusRect</li></ul> StyleOptionFrameprettyqt.widgets.styleoptionframe <ul><li>StyleOptionMixin</li><li>QStyleOptionFrame</li></ul> StyleOptionGraphicsItemprettyqt.widgets.styleoptiongraphicsitem <ul><li>StyleOptionMixin</li><li>QStyleOptionGraphicsItem</li></ul> StyleOptionHeaderprettyqt.widgets.styleoptionheader <ul><li>StyleOptionMixin</li><li>QStyleOptionHeader</li></ul> StyleOptionMenuItemprettyqt.widgets.styleoptionmenuitem <ul><li>StyleOptionMixin</li><li>QStyleOptionMenuItem</li></ul> StyleOptionProgressBarprettyqt.widgets.styleoptionprogressbar <ul><li>StyleOptionMixin</li><li>QStyleOptionProgressBar</li></ul> StyleOptionRubberBandprettyqt.widgets.styleoptionrubberband <ul><li>StyleOptionMixin</li><li>QStyleOptionRubberBand</li></ul> StyleOptionTabprettyqt.widgets.styleoptiontab <ul><li>StyleOptionMixin</li><li>QStyleOptionTab</li></ul> StyleOptionTabBarBaseprettyqt.widgets.styleoptiontabbarbase <ul><li>StyleOptionMixin</li><li>QStyleOptionTabBarBase</li></ul> StyleOptionTabWidgetFrameprettyqt.widgets.styleoptiontabwidgetframe <ul><li>StyleOptionMixin</li><li>QStyleOptionTabWidgetFrame</li></ul> StyleOptionToolBarprettyqt.widgets.styleoptiontoolbar <ul><li>StyleOptionMixin</li><li>QStyleOptionToolBar</li></ul> StyleOptionToolBoxprettyqt.widgets.styleoptiontoolbox <ul><li>StyleOptionMixin</li><li>QStyleOptionToolBox</li></ul> StyleOptionViewItemprettyqt.widgets.styleoptionviewitem <ul><li>StyleOptionMixin</li><li>QStyleOptionViewItem</li></ul>"},{"location":"qt_modules/widgets/StyleOptionMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  140736120080256 --&gt; 2103261169600</code></pre>"},{"location":"qt_modules/widgets/StyleOptionProgressBar.html","title":"StyleOptionProgressBar","text":"<p>Qt Base Class: QStyleOptionProgressBar</p> <p>Signature: <code>QStyleOptionProgressBar(self) -&gt; None QStyleOptionProgressBar(self, other: PySide6.QtWidgets.QStyleOptionProgressBar) -&gt; None QStyleOptionProgressBar(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionProgressBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionProgressBar</code></p> Source code in <code>prettyqt\\widgets\\styleoptionprogressbar.py</code> <pre><code>class StyleOptionProgressBar(widgets.StyleOptionMixin, widgets.QStyleOptionProgressBar):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionProgressBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261163840[\"widgets.StyleOptionProgressBar\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260000976[\"QtWidgets.QStyleOptionProgressBar\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261163840\n  140736120080256 --&gt; 2103261169600\n  2103260000976 --&gt; 2103261163840\n  2103259936656 --&gt; 2103260000976\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionRubberBand.html","title":"StyleOptionRubberBand","text":"<p>Qt Base Class: QStyleOptionRubberBand</p> <p>Signature: <code>QStyleOptionRubberBand(self) -&gt; None QStyleOptionRubberBand(self, other: PySide6.QtWidgets.QStyleOptionRubberBand) -&gt; None QStyleOptionRubberBand(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionRubberBand.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionRubberBand</code></p> Source code in <code>prettyqt\\widgets\\styleoptionrubberband.py</code> <pre><code>class StyleOptionRubberBand(widgets.StyleOptionMixin, widgets.QStyleOptionRubberBand):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionRubberBand.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261179200[\"widgets.StyleOptionRubberBand\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259998096[\"QtWidgets.QStyleOptionRubberBand\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261179200\n  140736120080256 --&gt; 2103261169600\n  2103259998096 --&gt; 2103261179200\n  2103259936656 --&gt; 2103259998096\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSizeGrip.html","title":"StyleOptionSizeGrip","text":"<p>Qt Base Class: QStyleOptionSizeGrip</p> <p>Signature: <code>QStyleOptionSizeGrip(self) -&gt; None QStyleOptionSizeGrip(self, other: PySide6.QtWidgets.QStyleOptionSizeGrip) -&gt; None QStyleOptionSizeGrip(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionSizeGrip.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>widgets.QStyleOptionSizeGrip</code></p> Source code in <code>prettyqt\\widgets\\styleoptionsizegrip.py</code> <pre><code>class StyleOptionSizeGrip(widgets.StyleOptionComplexMixin, widgets.QStyleOptionSizeGrip):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSizeGrip.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261203200[\"widgets.StyleOptionSizeGrip\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260081616[\"QtWidgets.QStyleOptionSizeGrip\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261176320 --&gt; 2103261203200\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260081616 --&gt; 2103261203200\n  2103260038416 --&gt; 2103260081616\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSlider.html","title":"StyleOptionSlider","text":"<p>Qt Base Class: QStyleOptionSlider</p> <p>Signature: <code>QStyleOptionSlider(self) -&gt; None QStyleOptionSlider(self, other: PySide6.QtWidgets.QStyleOptionSlider) -&gt; None QStyleOptionSlider(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionSlider.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplexMixin</code>, <code>widgets.QStyleOptionSlider</code></p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>class StyleOptionSlider(widgets.StyleOptionComplexMixin, widgets.QStyleOptionSlider):\ndef is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n        Returns:\n            True if horizontal, else False\n        \"\"\"\nreturn self.orientation == constants.HORIZONTAL\ndef is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n        Returns:\n            True if vertical, else False\n        \"\"\"\nreturn self.orientation == constants.VERTICAL\ndef set_horizontal(self) -&gt; None:\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.orientation = constants.HORIZONTAL\ndef set_vertical(self) -&gt; None:\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.orientation = constants.VERTICAL\ndef get_orientation(self) -&gt; Literal[\"horizontal\", \"vertical\"]:\nreturn \"horizontal\" if self.is_horizontal() else \"vertical\"\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSlider.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.is_horizontal","title":"<code>is_horizontal() -&gt; bool</code>","text":"<p>Check if silder is horizontal.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def is_horizontal(self) -&gt; bool:\n\"\"\"Check if silder is horizontal.\n    Returns:\n        True if horizontal, else False\n    \"\"\"\nreturn self.orientation == constants.HORIZONTAL\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSlider.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.is_vertical","title":"<code>is_vertical() -&gt; bool</code>","text":"<p>Check if silder is vertical.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def is_vertical(self) -&gt; bool:\n\"\"\"Check if silder is vertical.\n    Returns:\n        True if vertical, else False\n    \"\"\"\nreturn self.orientation == constants.VERTICAL\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSlider.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.set_horizontal","title":"<code>set_horizontal() -&gt; None</code>","text":"<p>Set slider orientation to horizontal.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def set_horizontal(self) -&gt; None:\n\"\"\"Set slider orientation to horizontal.\"\"\"\nself.orientation = constants.HORIZONTAL\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSlider.html#prettyqt.widgets.styleoptionslider.StyleOptionSlider.set_vertical","title":"<code>set_vertical() -&gt; None</code>","text":"<p>Set slider orientation to vertical.</p> Source code in <code>prettyqt\\widgets\\styleoptionslider.py</code> <pre><code>def set_vertical(self) -&gt; None:\n\"\"\"Set slider orientation to vertical.\"\"\"\nself.orientation = constants.VERTICAL\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSlider.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261196480[\"widgets.StyleOptionSlider\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260072016[\"QtWidgets.QStyleOptionSlider\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261176320 --&gt; 2103261196480\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260072016 --&gt; 2103261196480\n  2103260038416 --&gt; 2103260072016\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSpinBox.html","title":"StyleOptionSpinBox","text":"<p>Qt Base Class: QStyleOptionSpinBox</p> <p>Signature: <code>QStyleOptionSpinBox(self) -&gt; None QStyleOptionSpinBox(self, other: PySide6.QtWidgets.QStyleOptionSpinBox) -&gt; None QStyleOptionSpinBox(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionSpinBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplex</code>, <code>widgets.QStyleOptionSpinBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptionspinbox.py</code> <pre><code>class StyleOptionSpinBox(widgets.StyleOptionComplex, widgets.QStyleOptionSpinBox):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionSpinBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261197440[\"widgets.StyleOptionSpinBox\"]\n  2103261183040[\"widgets.StyleOptionComplex\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260067216[\"QtWidgets.QStyleOptionSpinBox\"]\n  2103261183040 --&gt; 2103261197440\n  2103261176320 --&gt; 2103261183040\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260038416 --&gt; 2103261183040\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128\n  2103260067216 --&gt; 2103261197440\n  2103260038416 --&gt; 2103260067216</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTab.html","title":"StyleOptionTab","text":"<p>Qt Base Class: QStyleOptionTab</p> <p>Signature: <code>QStyleOptionTab(self) -&gt; None QStyleOptionTab(self, other: PySide6.QtWidgets.QStyleOptionTab) -&gt; None QStyleOptionTab(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionTab.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionTab</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontab.py</code> <pre><code>class StyleOptionTab(widgets.StyleOptionMixin, widgets.QStyleOptionTab):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTab.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261192640[\"widgets.StyleOptionTab\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259977936[\"QtWidgets.QStyleOptionTab\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261192640\n  140736120080256 --&gt; 2103261169600\n  2103259977936 --&gt; 2103261192640\n  2103259936656 --&gt; 2103259977936\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTabBarBase.html","title":"StyleOptionTabBarBase","text":"<p>Qt Base Class: QStyleOptionTabBarBase</p> <p>Signature: <code>QStyleOptionTabBarBase(self) -&gt; None QStyleOptionTabBarBase(self, other: PySide6.QtWidgets.QStyleOptionTabBarBase) -&gt; None QStyleOptionTabBarBase(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionTabBarBase.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionTabBarBase</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontabbarbase.py</code> <pre><code>class StyleOptionTabBarBase(widgets.StyleOptionMixin, widgets.QStyleOptionTabBarBase):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTabBarBase.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261193600[\"widgets.StyleOptionTabBarBase\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259976976[\"QtWidgets.QStyleOptionTabBarBase\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261193600\n  140736120080256 --&gt; 2103261169600\n  2103259976976 --&gt; 2103261193600\n  2103259936656 --&gt; 2103259976976\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTabWidgetFrame.html","title":"StyleOptionTabWidgetFrame","text":"<p>Qt Base Class: QStyleOptionTabWidgetFrame</p> <p>Signature: <code>QStyleOptionTabWidgetFrame(self) -&gt; None QStyleOptionTabWidgetFrame(self, other: PySide6.QtWidgets.QStyleOptionTabWidgetFrame) -&gt; None QStyleOptionTabWidgetFrame(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionTabWidgetFrame.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionTabWidgetFrame</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontabwidgetframe.py</code> <pre><code>class StyleOptionTabWidgetFrame(\nwidgets.StyleOptionMixin, widgets.QStyleOptionTabWidgetFrame\n):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTabWidgetFrame.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261161920[\"widgets.StyleOptionTabWidgetFrame\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259994256[\"QtWidgets.QStyleOptionTabWidgetFrame\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261161920\n  140736120080256 --&gt; 2103261169600\n  2103259994256 --&gt; 2103261161920\n  2103259936656 --&gt; 2103259994256\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTitleBar.html","title":"StyleOptionTitleBar","text":"<p>Qt Base Class: QStyleOptionTitleBar</p> <p>Signature: <code>QStyleOptionTitleBar(self) -&gt; None QStyleOptionTitleBar(self, other: PySide6.QtWidgets.QStyleOptionTitleBar) -&gt; None QStyleOptionTitleBar(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionTitleBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplex</code>, <code>widgets.QStyleOptionTitleBar</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontitlebar.py</code> <pre><code>class StyleOptionTitleBar(widgets.StyleOptionComplex, widgets.QStyleOptionTitleBar):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionTitleBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261194560[\"widgets.StyleOptionTitleBar\"]\n  2103261183040[\"widgets.StyleOptionComplex\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260072976[\"QtWidgets.QStyleOptionTitleBar\"]\n  2103261183040 --&gt; 2103261194560\n  2103261176320 --&gt; 2103261183040\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260038416 --&gt; 2103261183040\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128\n  2103260072976 --&gt; 2103261194560\n  2103260038416 --&gt; 2103260072976</code></pre>"},{"location":"qt_modules/widgets/StyleOptionToolBar.html","title":"StyleOptionToolBar","text":"<p>Qt Base Class: QStyleOptionToolBar</p> <p>Signature: <code>QStyleOptionToolBar(self) -&gt; None QStyleOptionToolBar(self, other: PySide6.QtWidgets.QStyleOptionToolBar) -&gt; None QStyleOptionToolBar(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionToolBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionToolBar</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontoolbar.py</code> <pre><code>class StyleOptionToolBar(widgets.StyleOptionMixin, widgets.QStyleOptionToolBar):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionToolBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261211840[\"widgets.StyleOptionToolBar\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259959696[\"QtWidgets.QStyleOptionToolBar\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261211840\n  140736120080256 --&gt; 2103261169600\n  2103259959696 --&gt; 2103261211840\n  2103259936656 --&gt; 2103259959696\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionToolBox.html","title":"StyleOptionToolBox","text":"<p>Qt Base Class: QStyleOptionToolBox</p> <p>Signature: <code>QStyleOptionToolBox(self) -&gt; None QStyleOptionToolBox(self, other: PySide6.QtWidgets.QStyleOptionToolBox) -&gt; None QStyleOptionToolBox(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionToolBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionToolBox</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontoolbox.py</code> <pre><code>class StyleOptionToolBox(widgets.StyleOptionMixin, widgets.QStyleOptionToolBox):\ndef set_selected_position(self, position: SelectedPositionStr):\nself.selectedPosition = SELECTED_POSITION[position]\ndef get_selected_position(self) -&gt; SelectedPositionStr:\nreturn SELECTED_POSITION.inverse[self.selectedPosition]\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionToolBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261207040[\"widgets.StyleOptionToolBox\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259919376[\"QtWidgets.QStyleOptionToolBox\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261207040\n  140736120080256 --&gt; 2103261169600\n  2103259919376 --&gt; 2103261207040\n  2103259936656 --&gt; 2103259919376\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyleOptionToolButton.html","title":"StyleOptionToolButton","text":"<p>Qt Base Class: QStyleOptionToolButton</p> <p>Signature: <code>QStyleOptionToolButton(self) -&gt; None QStyleOptionToolButton(self, other: PySide6.QtWidgets.QStyleOptionToolButton) -&gt; None QStyleOptionToolButton(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionToolButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionComplex</code>, <code>widgets.QStyleOptionToolButton</code></p> Source code in <code>prettyqt\\widgets\\styleoptiontoolbutton.py</code> <pre><code>class StyleOptionToolButton(widgets.StyleOptionComplex, widgets.QStyleOptionToolButton):\npass\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionToolButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261216640[\"widgets.StyleOptionToolButton\"]\n  2103261183040[\"widgets.StyleOptionComplex\"]\n  2103261176320[\"widgets.StyleOptionComplexMixin\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260038416[\"QtWidgets.QStyleOptionComplex\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260050896[\"QtWidgets.QStyleOptionToolButton\"]\n  2103261183040 --&gt; 2103261216640\n  2103261176320 --&gt; 2103261183040\n  2103261169600 --&gt; 2103261176320\n  140736120080256 --&gt; 2103261169600\n  2103260038416 --&gt; 2103261183040\n  2103259936656 --&gt; 2103260038416\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128\n  2103260050896 --&gt; 2103261216640\n  2103260038416 --&gt; 2103260050896</code></pre>"},{"location":"qt_modules/widgets/StyleOptionViewItem.html","title":"StyleOptionViewItem","text":"<p>Qt Base Class: QStyleOptionViewItem</p> <p>Signature: <code>QStyleOptionViewItem(self) -&gt; None QStyleOptionViewItem(self, other: PySide6.QtWidgets.QStyleOptionViewItem) -&gt; None QStyleOptionViewItem(self, version: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyleOptionViewItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.StyleOptionMixin</code>, <code>widgets.QStyleOptionViewItem</code></p> Source code in <code>prettyqt\\widgets\\styleoptionviewitem.py</code> <pre><code>class StyleOptionViewItem(widgets.StyleOptionMixin, widgets.QStyleOptionViewItem):\ndef get_view_item_position(self) -&gt; ViewItemPositionStr:\nreturn VIEW_ITEM_POSITION.inverse[self.viewItemPosition]\ndef get_features(self) -&gt; ViewItemFeatureStr:\nreturn VIEW_ITEM_FEATURE.get_list(self.features)\ndef get_decoration_position(self) -&gt; PositionStr:\nreturn POSITION.inverse[self.decorationPosition]\ndef get_checkstate(self) -&gt; constants.StateStr:\nreturn constants.STATE.inverse[self.checkState]\ndef get_decoration_alignment(self) -&gt; constants.AlignmentStr:\nreturn constants.ALIGNMENTS.inverse[self.decorationAlignment]\n</code></pre>"},{"location":"qt_modules/widgets/StyleOptionViewItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261210880[\"widgets.StyleOptionViewItem\"]\n  2103261169600[\"widgets.StyleOptionMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259943376[\"QtWidgets.QStyleOptionViewItem\"]\n  2103259936656[\"QtWidgets.QStyleOption\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261169600 --&gt; 2103261210880\n  140736120080256 --&gt; 2103261169600\n  2103259943376 --&gt; 2103261210880\n  2103259936656 --&gt; 2103259943376\n  2103206874128 --&gt; 2103259936656\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StylePainter.html","title":"StylePainter","text":"<p>Qt Base Class: QStylePainter</p> <p>Signature: <code>QStylePainter(self) -&gt; None QStylePainter(self, pd: PySide6.QtGui.QPaintDevice, w: PySide6.QtWidgets.QWidget) -&gt; None QStylePainter(self, w: PySide6.QtWidgets.QWidget) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StylePainter.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.PainterMixin</code>, <code>widgets.QStylePainter</code></p> <p>Convenience class for drawing QStyle elements inside a widget.</p> Source code in <code>prettyqt\\widgets\\stylepainter.py</code> <pre><code>class StylePainter(gui.PainterMixin, widgets.QStylePainter):\n\"\"\"Convenience class for drawing QStyle elements inside a widget.\"\"\"\ndef draw_complex_control(\nself,\ncontrol: widgets.style.ComplexControlStr,\noption: widgets.QStyleOptionComplex,\n):\nself.drawComplexControl(widgets.style.COMPLEX_CONTROL[control], option)\n</code></pre>"},{"location":"qt_modules/widgets/StylePainter.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261208960[\"widgets.StylePainter\"]\n  2103260766416[\"gui.PainterMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259688240[\"QtWidgets.QStylePainter\"]\n  2103259397392[\"QtGui.QPainter\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103260766416 --&gt; 2103261208960\n  140736120080256 --&gt; 2103260766416\n  2103259688240 --&gt; 2103261208960\n  2103259397392 --&gt; 2103259688240\n  2103206874128 --&gt; 2103259397392\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyledItemDelegate.html","title":"StyledItemDelegate","text":"<p>Qt Base Class: QStyledItemDelegate</p> <p>Signature: <code>QStyledItemDelegate(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/StyledItemDelegate.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractItemDelegateMixin</code>, <code>widgets.QStyledItemDelegate</code></p> Source code in <code>prettyqt\\widgets\\styleditemdelegate.py</code> <pre><code>class StyledItemDelegate(widgets.AbstractItemDelegateMixin, widgets.QStyledItemDelegate):\npass\n</code></pre> Name Children Inherits ButtonDelegateprettyqt.itemdelegates.buttondelegate <ul><li>StyledItemDelegate</li></ul> <code>BaseMarkupDelegate</code>prettyqt.itemdelegates.htmlitemdelegate <ul><li>HtmlItemDelegate</li><li>MarkdownItemDelegate</li></ul> <ul><li>StyledItemDelegate</li></ul> IconDelegateprettyqt.itemdelegates.icondelegate <ul><li>StyledItemDelegate</li></ul> NoFocusDelegateprettyqt.itemdelegates.nofocusdelegate <ul><li>StyledItemDelegate</li></ul> ProgressBarDelegateprettyqt.itemdelegates.progressbardelegate <ul><li>StyledItemDelegate</li></ul> RadioDelegateprettyqt.itemdelegates.radiodelegate <ul><li>StyledItemDelegate</li></ul> RenderLinkDelegateprettyqt.itemdelegates.renderlinkdelegate <ul><li>StyledItemDelegate</li></ul> StarDelegateprettyqt.itemdelegates.stardelegate <ul><li>StyledItemDelegate</li></ul> EditorDelegateprettyqt.itemdelegates.editordelegate <ul><li>StyledItemDelegate</li></ul> WidgetDelegateprettyqt.itemdelegates.widgetdelegate <ul><li>StyledItemDelegate</li></ul> <code>SizeHintDelegate</code>prettyqt.custom_widgets.multicombobox <ul><li>StyledItemDelegate</li></ul>"},{"location":"qt_modules/widgets/StyledItemDelegate.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261418128[\"widgets.StyledItemDelegate\"]\n  2103261416208[\"widgets.AbstractItemDelegateMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261046720[\"QtWidgets.QStyledItemDelegate\"]\n  2103261070720[\"QtWidgets.QAbstractItemDelegate\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261416208 --&gt; 2103261418128\n  2103255067472 --&gt; 2103261416208\n  140736120080256 --&gt; 2103255067472\n  2103261046720 --&gt; 2103261418128\n  2103261070720 --&gt; 2103261046720\n  2103254677056 --&gt; 2103261070720\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/StyledItemDelegate.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString"},{"location":"qt_modules/widgets/SwipeGesture.html","title":"SwipeGesture","text":"<p>Qt Base Class: QSwipeGesture</p> <p>Signature: <code>QSwipeGesture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SwipeGesture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>SwipeGestureMixin</code>, <code>widgets.QSwipeGesture</code></p> Source code in <code>prettyqt\\widgets\\swipegesture.py</code> <pre><code>class SwipeGesture(SwipeGestureMixin, widgets.QSwipeGesture):\npass\n</code></pre>"},{"location":"qt_modules/widgets/SwipeGesture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261457488[\"widgets.SwipeGesture\"]\n  2103261465168[\"widgets.SwipeGestureMixin\"]\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261067840[\"QtWidgets.QSwipeGesture\"]\n  2103261050560[\"QtWidgets.QGesture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261465168 --&gt; 2103261457488\n  2103261461328 --&gt; 2103261465168\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472\n  2103261067840 --&gt; 2103261457488\n  2103261050560 --&gt; 2103261067840\n  2103254677056 --&gt; 2103261050560\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/SwipeGesture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> Qt::GestureState <code>gestureType</code> Qt::GestureType <code>gestureCancelPolicy</code> QGesture::GestureCancelPolicy <code>hotSpot</code> QPointF <code>hasHotSpot</code> bool <code>horizontalDirection</code> QSwipeGesture::SwipeDirection <code>verticalDirection</code> QSwipeGesture::SwipeDirection <code>swipeAngle</code> double <code>velocity</code> double"},{"location":"qt_modules/widgets/SystemTrayIcon.html","title":"SystemTrayIcon","text":"<p>Qt Base Class: QSystemTrayIcon</p> <p>Signature: <code>QSystemTrayIcon(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None QSystemTrayIcon(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/SystemTrayIcon.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>QtWidgets.QSystemTrayIcon</code></p> <p>Icon for an application in the system tray.</p> Source code in <code>prettyqt\\widgets\\systemtrayicon.py</code> <pre><code>class SystemTrayIcon(core.ObjectMixin, QtWidgets.QSystemTrayIcon):\n\"\"\"Icon for an application in the system tray.\"\"\"\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the system tray icon.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef show_message(\nself,\ntitle: str,\nmessage: str = \"\",\nicon: datatypes.IconType = None,\ntimeout: int = 10,\n):\nif icon is None:\nico = gui.Icon()\nif icon in MESSAGE_ICONS:\nico = MESSAGE_ICONS[icon]\nelse:\nico = iconprovider.get_icon(icon)\nself.showMessage(title, message, ico, timeout * 1000)\n</code></pre>"},{"location":"qt_modules/widgets/SystemTrayIcon.html#prettyqt.widgets.systemtrayicon.SystemTrayIcon.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the system tray icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\systemtrayicon.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the system tray icon.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/SystemTrayIcon.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261421968[\"widgets.SystemTrayIcon\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259935696[\"QtWidgets.QSystemTrayIcon\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255067472 --&gt; 2103261421968\n  140736120080256 --&gt; 2103255067472\n  2103259935696 --&gt; 2103261421968\n  2103254677056 --&gt; 2103259935696\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/SystemTrayIcon.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>toolTip</code> QString <code>icon</code> QIcon <code>visible</code> bool"},{"location":"qt_modules/widgets/TabBar.html","title":"TabBar","text":"<p>Qt Base Class: QTabBar</p> <p>Signature: <code>QTabBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TabBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TabBarMixin</code>, <code>widgets.QTabBar</code></p> <p>Tab bar, e.g. for use in tabbed dialogs.</p> Source code in <code>prettyqt\\widgets\\tabbar.py</code> <pre><code>class TabBar(TabBarMixin, widgets.QTabBar):\n\"\"\"Tab bar, e.g. for use in tabbed dialogs.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/TabBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261221440[\"widgets.TabBar\"]\n  2103261236800[\"widgets.TabBarMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259701680[\"QtWidgets.QTabBar\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261236800 --&gt; 2103261221440\n  2103261127360 --&gt; 2103261236800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259701680 --&gt; 2103261221440\n  2103259691120 --&gt; 2103259701680\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TabBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>shape</code> QTabBar::Shape <code>currentIndex</code> int <code>count</code> int <code>drawBase</code> bool <code>iconSize</code> QSize <code>elideMode</code> Qt::TextElideMode <code>usesScrollButtons</code> bool <code>tabsClosable</code> bool <code>selectionBehaviorOnRemove</code> QTabBar::SelectionBehavior <code>expanding</code> bool <code>movable</code> bool <code>documentMode</code> bool <code>autoHide</code> bool <code>changeCurrentOnDrag</code> bool"},{"location":"qt_modules/widgets/TabWidget.html","title":"TabWidget","text":"<p>Qt Base Class: QTabWidget</p> <p>Signature: <code>QTabWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TabWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.WidgetMixin</code>, <code>widgets.QTabWidget</code></p> <p>Stack of tabbed widgets.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>class TabWidget(widgets.WidgetMixin, widgets.QTabWidget):\n\"\"\"Stack of tabbed widgets.\"\"\"\ndef __init__(\nself, closable: bool = False, detachable: bool = False, **kwargs\n) -&gt; None:\n# Basic initalization\nsuper().__init__(**kwargs)\nself.animator = animations.Animator(self)\nself.tabCloseRequested.connect(self.remove_tab)\nself.tab_bar = widgets.TabBar(self)\nself.setTabBar(self.tab_bar)\n# Used to keep a reference to detached tabs since their QMainWindow\n# does not have a parent\nself.detached_tabs: dict[str, DetachedTab] = {}\nif detachable:\nself.set_detachable()\nself.set_closable(closable)\ndef __len__(self) -&gt; int:\nreturn self.count()\n@overload\ndef __getitem__(self, index: int) -&gt; widgets.QWidget:\n...\n@overload\ndef __getitem__(self, index: slice) -&gt; listdelegators.ListDelegator[widgets.QWidget]:\n...\ndef __getitem__(\nself, index: int | slice\n) -&gt; widgets.QWidget | listdelegators.ListDelegator[widgets.QWidget]:\nmatch index:\ncase int():\nif index &gt;= self.count():\nraise IndexError(index)\nreturn self.widget(index)\ncase slice():\nrng = range(index.start or 0, index.stop or self.count(), index.step or 1)\nreturn listdelegators.ListDelegator(self.widget(i) for i in rng)\ncase _:\nraise TypeError(index)\ndef __contains__(self, item: widgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\ndef update_tab_bar_visibility(self):\n\"\"\"Update visibility of the tabBar depending of the number of tabs.\n        0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible\n        need to be called explicitly, or be connected to tabInserted/tabRemoved\n        \"\"\"\nself.tabBar().setVisible(self.count() &gt; 1)\ndef set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nself.setIconSize(datatypes.to_size(size))\ndef set_document_mode(self, state: bool = True) -&gt; None:\nself.setDocumentMode(state)\ndef set_tab_shape(self, shape: TabShapeStr | widgets.QTabWidget.TabShape):\n\"\"\"Set tab shape for the tabwidget.\n        Args:\n            shape: tab shape to use\n        \"\"\"\nself.setTabShape(TAB_SHAPES.get_enum_value(shape))\ndef get_tab_shape(self) -&gt; TabShapeStr:\n\"\"\"Return tab shape.\n        Returns:\n            tab shape\n        \"\"\"\nreturn TAB_SHAPES.inverse[self.tabShape()]\ndef set_tab_position(self, position: TabPositionStr | widgets.QTabWidget.TabPosition):\n\"\"\"Set tab position for the tabwidget.\n        Args:\n            position: tab position to use\n        \"\"\"\nself.setTabPosition(TAB_POSITION.get_enum_value(position))\ndef get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return tab position.\n        Returns:\n            tab position\n        \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\ndef get_children(self) -&gt; list[tuple]:\nreturn [\n(\nself.widget(i),\nself.tabText(i),\nself.tab_icon(i),\nself.tabToolTip(i),\nself.tabWhatsThis(i),\n)\nfor i in range(self.count())\n]\ndef tab_icon(self, i: int) -&gt; gui.Icon | None:\nicon = self.tabIcon(i)\nreturn None if icon.isNull() else gui.Icon(icon)\ndef set_detachable(self):\nself.tab_bar.tab_doubleclicked.connect(self.detach_tab)\ncore.CoreApplication.call_on_exit(self.close_detached_tabs)\nself.setMovable(True)\ndef set_closable(self, closable: bool = True):\nself.setTabsClosable(closable)\n@core.Slot(int, core.QPoint)\ndef detach_tab(self, index: int, point: datatypes.PointType):\n\"\"\"Detach tab by removing its contents and placing them in a DetachedTab window.\n        Args:\n            index (int): index location of the tab to be detached\n            point (core.QPoint): screen pos for creating the new DetachedTab window\n        \"\"\"\n# Get the tab content\nname = self.tabText(index)\nicon = self.tab_icon(index) or self.window().windowIcon()\nwidget = self.widget(index)\ntry:\nwidget_rect = widget.frameGeometry()\nexcept AttributeError:\nreturn\n# Create a new detached tab window\ndetached_tab = DetachedTab(name, widget)\ndetached_tab.set_modality(\"none\")\ndetached_tab.set_icon(icon)\ndetached_tab.setGeometry(widget_rect)\ndetached_tab.on_close.connect(self.attach_tab)\ndetached_tab.move(datatypes.to_point(point))\ndetached_tab.show()\n# Create a reference to maintain access to the detached tab\nself.detached_tabs[name] = detached_tab\ndef add(self, widget: widgets.QWidget | widgets.QLayout):\n\"\"\"Add widget / layout to TabWidget.\n        Tab label is chosen based on following order:\n        windowTitle -&gt; objectName -&gt; className\n        \"\"\"\nlabel = (widget.windowTitle() if isinstance(widget, widgets.QWidget) else \"\") or (\nwidget.objectName() or type(widget).__name__\n)\nself.add_tab(widget, label)\ndef add_tab(\nself,\nitem: widgets.QWidget | widgets.QLayout,\nlabel: str,\nicon: datatypes.IconType = None,\nposition: int | None = None,\nshow: bool = False,\n) -&gt; int:\nif isinstance(item, widgets.QLayout):\nwidget = widgets.Widget()\nwidget.set_layout(item)\nelse:\nwidget = item\nif position is None:\nposition = len(self)\nif not icon:\nindex = self.insertTab(position, widget, label)\nelse:\nicon = iconprovider.get_icon(icon)\nindex = self.insertTab(position, widget, icon, label)\nif show:\nself.setCurrentIndex(index)\nreturn index\ndef attach_tab(\nself,\nwidget: widgets.QWidget | widgets.QLayout,\nname: str,\nicon: datatypes.IconType = None,\ninsert_at: int | None = None,\n):\n\"\"\"Re-attach tab.\n        Re-attach the tab by removing the content from the DetachedTab window,\n        closing it, and placing the content back into the DetachableTabWidget.\n        Args:\n            widget (Union[widgets.QWidget, widgets.QLayout]): the content widget\n                from the DetachedTab window\n            name (str): the name of the detached tab\n            icon (datatypes.IconType, optional): the window icon for the detached tab\n            insert_at (Optional[int], optional): insert the re-attached tab at the\n                given index\n        \"\"\"\nwidget.setParent(self)\n# Remove the reference\ndel self.detached_tabs[name]\n# Determine if the given image and the main window icon are the same.\n# If they are, then do not add the icon to the tab\nself.add_tab(widget, name, icon=icon, position=insert_at, show=True)\ndef close_detached_tabs(self):\n\"\"\"Close all tabs that are currently detached.\"\"\"\ntabs = list(self.detached_tabs.values())\nfor tab in tabs:\ntab.close()\n@core.Slot(int)\ndef remove_tab(self, index_or_widget: int | widgets.QWidget):\nindex = (\nself.indexOf(index_or_widget)\nif isinstance(index_or_widget, widgets.QWidget)\nelse index_or_widget\n)\nwidget = (\nself.widget(index_or_widget)\nif isinstance(index_or_widget, int)\nelse index_or_widget\n)\nself.removeTab(index)\nif widget is not None:\nwidget.deleteLater()\n@core.Slot(widgets.QWidget, str)\ndef open_widget(self, widget: widgets.QWidget, title: str = \"Unnamed\"):\n\"\"\"Create a tab containing delivered widget.\"\"\"\nself.add_tab(widget, title, icon=\"mdi.widgets\", show=True)\ndef set_tab(self, index: int, position: str, widget: widgets.QWidget | None = None):\nself.tabBar().set_tab(index, position, widget)\ndef create_tab_preview(self, index: int, width: int = 200) -&gt; widgets.Label:\nwidget = widgets.Label(self)\nwidget.setScaledContents(True)\npx = self.widget(index).grab().scaledToWidth(width)\nwidget.setPixmap(px)\nwidget.resize(width, width)\nreturn widget\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.add","title":"<code>add(widget: widgets.QWidget | widgets.QLayout)</code>","text":"<p>Add widget / layout to TabWidget.</p> <p>Tab label is chosen based on following order: windowTitle -&gt; objectName -&gt; className</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def add(self, widget: widgets.QWidget | widgets.QLayout):\n\"\"\"Add widget / layout to TabWidget.\n    Tab label is chosen based on following order:\n    windowTitle -&gt; objectName -&gt; className\n    \"\"\"\nlabel = (widget.windowTitle() if isinstance(widget, widgets.QWidget) else \"\") or (\nwidget.objectName() or type(widget).__name__\n)\nself.add_tab(widget, label)\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.attach_tab","title":"<code>attach_tab(widget: widgets.QWidget | widgets.QLayout, name: str, icon: datatypes.IconType = None, insert_at: int | None = None)</code>","text":"<p>Re-attach tab.</p> <p>Re-attach the tab by removing the content from the DetachedTab window, closing it, and placing the content back into the DetachableTabWidget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Union[widgets.QWidget, widgets.QLayout]</code> <p>the content widget from the DetachedTab window</p> required <code>name</code> <code>str</code> <p>the name of the detached tab</p> required <code>icon</code> <code>datatypes.IconType</code> <p>the window icon for the detached tab</p> <code>None</code> <code>insert_at</code> <code>Optional[int]</code> <p>insert the re-attached tab at the given index</p> <code>None</code> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def attach_tab(\nself,\nwidget: widgets.QWidget | widgets.QLayout,\nname: str,\nicon: datatypes.IconType = None,\ninsert_at: int | None = None,\n):\n\"\"\"Re-attach tab.\n    Re-attach the tab by removing the content from the DetachedTab window,\n    closing it, and placing the content back into the DetachableTabWidget.\n    Args:\n        widget (Union[widgets.QWidget, widgets.QLayout]): the content widget\n            from the DetachedTab window\n        name (str): the name of the detached tab\n        icon (datatypes.IconType, optional): the window icon for the detached tab\n        insert_at (Optional[int], optional): insert the re-attached tab at the\n            given index\n    \"\"\"\nwidget.setParent(self)\n# Remove the reference\ndel self.detached_tabs[name]\n# Determine if the given image and the main window icon are the same.\n# If they are, then do not add the icon to the tab\nself.add_tab(widget, name, icon=icon, position=insert_at, show=True)\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.close_detached_tabs","title":"<code>close_detached_tabs()</code>","text":"<p>Close all tabs that are currently detached.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def close_detached_tabs(self):\n\"\"\"Close all tabs that are currently detached.\"\"\"\ntabs = list(self.detached_tabs.values())\nfor tab in tabs:\ntab.close()\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.detach_tab","title":"<code>detach_tab(index: int, point: datatypes.PointType)</code>","text":"<p>Detach tab by removing its contents and placing them in a DetachedTab window.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index location of the tab to be detached</p> required <code>point</code> <code>core.QPoint</code> <p>screen pos for creating the new DetachedTab window</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(int, core.QPoint)\ndef detach_tab(self, index: int, point: datatypes.PointType):\n\"\"\"Detach tab by removing its contents and placing them in a DetachedTab window.\n    Args:\n        index (int): index location of the tab to be detached\n        point (core.QPoint): screen pos for creating the new DetachedTab window\n    \"\"\"\n# Get the tab content\nname = self.tabText(index)\nicon = self.tab_icon(index) or self.window().windowIcon()\nwidget = self.widget(index)\ntry:\nwidget_rect = widget.frameGeometry()\nexcept AttributeError:\nreturn\n# Create a new detached tab window\ndetached_tab = DetachedTab(name, widget)\ndetached_tab.set_modality(\"none\")\ndetached_tab.set_icon(icon)\ndetached_tab.setGeometry(widget_rect)\ndetached_tab.on_close.connect(self.attach_tab)\ndetached_tab.move(datatypes.to_point(point))\ndetached_tab.show()\n# Create a reference to maintain access to the detached tab\nself.detached_tabs[name] = detached_tab\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.get_tab_position","title":"<code>get_tab_position() -&gt; TabPositionStr</code>","text":"<p>Return tab position.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_tab_position(self) -&gt; TabPositionStr:\n\"\"\"Return tab position.\n    Returns:\n        tab position\n    \"\"\"\nreturn TAB_POSITION.inverse[self.tabPosition()]\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.get_tab_shape","title":"<code>get_tab_shape() -&gt; TabShapeStr</code>","text":"<p>Return tab shape.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def get_tab_shape(self) -&gt; TabShapeStr:\n\"\"\"Return tab shape.\n    Returns:\n        tab shape\n    \"\"\"\nreturn TAB_SHAPES.inverse[self.tabShape()]\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.open_widget","title":"<code>open_widget(widget: widgets.QWidget, title: str = 'Unnamed')</code>","text":"<p>Create a tab containing delivered widget.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>@core.Slot(widgets.QWidget, str)\ndef open_widget(self, widget: widgets.QWidget, title: str = \"Unnamed\"):\n\"\"\"Create a tab containing delivered widget.\"\"\"\nself.add_tab(widget, title, icon=\"mdi.widgets\", show=True)\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.set_icon_size","title":"<code>set_icon_size(size: datatypes.SizeType)</code>","text":"<p>Set size of the icons.</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_icon_size(self, size: datatypes.SizeType):\n\"\"\"Set size of the icons.\"\"\"\nself.setIconSize(datatypes.to_size(size))\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.set_tab_position","title":"<code>set_tab_position(position: TabPositionStr | widgets.QTabWidget.TabPosition)</code>","text":"<p>Set tab position for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>TabPositionStr | widgets.QTabWidget.TabPosition</code> <p>tab position to use</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab_position(self, position: TabPositionStr | widgets.QTabWidget.TabPosition):\n\"\"\"Set tab position for the tabwidget.\n    Args:\n        position: tab position to use\n    \"\"\"\nself.setTabPosition(TAB_POSITION.get_enum_value(position))\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.set_tab_shape","title":"<code>set_tab_shape(shape: TabShapeStr | widgets.QTabWidget.TabShape)</code>","text":"<p>Set tab shape for the tabwidget.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>TabShapeStr | widgets.QTabWidget.TabShape</code> <p>tab shape to use</p> required Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def set_tab_shape(self, shape: TabShapeStr | widgets.QTabWidget.TabShape):\n\"\"\"Set tab shape for the tabwidget.\n    Args:\n        shape: tab shape to use\n    \"\"\"\nself.setTabShape(TAB_SHAPES.get_enum_value(shape))\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#prettyqt.widgets.tabwidget.TabWidget.update_tab_bar_visibility","title":"<code>update_tab_bar_visibility()</code>","text":"<p>Update visibility of the tabBar depending of the number of tabs.</p> <p>0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible need to be called explicitly, or be connected to tabInserted/tabRemoved</p> Source code in <code>prettyqt\\widgets\\tabwidget.py</code> <pre><code>def update_tab_bar_visibility(self):\n\"\"\"Update visibility of the tabBar depending of the number of tabs.\n    0 or 1 tab -&gt; tabBar hidden, 2+ tabs - &gt;tabBar visible\n    need to be called explicitly, or be connected to tabInserted/tabRemoved\n    \"\"\"\nself.tabBar().setVisible(self.count() &gt; 1)\n</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261238720[\"widgets.TabWidget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259708400[\"QtWidgets.QTabWidget\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261238720\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259708400 --&gt; 2103261238720\n  2103259691120 --&gt; 2103259708400\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TabWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>tabPosition</code> QTabWidget::TabPosition <code>tabShape</code> QTabWidget::TabShape <code>currentIndex</code> int <code>count</code> int <code>iconSize</code> QSize <code>elideMode</code> Qt::TextElideMode <code>usesScrollButtons</code> bool <code>documentMode</code> bool <code>tabsClosable</code> bool <code>movable</code> bool <code>tabBarAutoHide</code> bool"},{"location":"qt_modules/widgets/TableView.html","title":"TableView","text":"<p>Qt Base Class: QTableView</p> <p>Signature: <code>QTableView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TableView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TableViewMixin</code>, <code>widgets.QTableView</code></p> <p>Default model/view implementation of a table view.</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>class TableView(TableViewMixin, widgets.QTableView):\n\"\"\"Default model/view implementation of a table view.\"\"\"\n</code></pre> Name Children Inherits OrientedTableViewprettyqt.custom_widgets.orientedtableview <ul><li>TableView</li></ul> QObjectPropertiesTableViewprettyqt.custom_widgets.qobjectpropertiestableview <ul><li>TableView</li></ul> LogRecordTableViewprettyqt.custom_widgets.logrecordtableview <ul><li>TableView</li></ul> <code>CommandTable</code>prettyqt.custom_widgets.commandpalette <ul><li>TableView</li></ul>"},{"location":"qt_modules/widgets/TableView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261406608[\"widgets.TableView\"]\n  2103261411408[\"widgets.TableViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259816880[\"QtWidgets.QTableView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261411408 --&gt; 2103261406608\n  2103261136960 --&gt; 2103261411408\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259816880 --&gt; 2103261406608\n  2103259770800 --&gt; 2103259816880\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TableView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>showGrid</code> bool <code>gridStyle</code> Qt::PenStyle <code>sortingEnabled</code> bool <code>wordWrap</code> bool <code>cornerButtonEnabled</code> bool"},{"location":"qt_modules/widgets/TableViewMixin.html","title":"TableViewMixin","text":""},{"location":"qt_modules/widgets/TableViewMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>class TableViewMixin(widgets.AbstractItemViewMixin):\ndef __init__(\nself,\n*args,\nalternating_row_colors: bool = True,\nword_wrap: bool = False,\n**kwargs,\n):\nsuper().__init__(\n*args,\nalternating_row_colors=alternating_row_colors,\nword_wrap=word_wrap,\n**kwargs,\n)\nclass_name = type(self).__name__\nself.setObjectName(class_name)\nself.setHorizontalHeader(widgets.HeaderView(\"horizontal\", parent=self))\nself.setVerticalHeader(widgets.HeaderView(\"vertical\", parent=self))\nself.setAlternatingRowColors(True)\nself.setWordWrap(False)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\"gridStyle\": constants.PEN_STYLE}\nreturn maps\n@property\ndef h_header(self) -&gt; widgets.HeaderView:\nreturn self.horizontalHeader()\n@h_header.setter\ndef h_header(self, header: widgets.QHeaderView):\nself.setHorizontalHeader(header)\n@property\ndef v_header(self) -&gt; widgets.HeaderView:\nreturn self.verticalHeader()\n@v_header.setter\ndef v_header(self, header: widgets.QHeaderView):\nself.setVerticalHeader(header)\ndef is_cell_visible(self, row: int, column: int) -&gt; bool:\nis_in_horizontal = self.h_header.is_in_visual_range(column)\nis_in_vertical = self.v_header.is_in_visual_range(row)\nreturn is_in_horizontal and is_in_vertical\ndef set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\n\"\"\"Hack to avoid direct sort when setting sorting enabled.\"\"\"\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\ndef setup_list_style(self):\nself.set_selection_behavior(\"rows\")\nself.h_header.setStretchLastSection(True)\nself.v_header.set_resize_mode(\"fixed\")\nself.v_header.set_default_section_size(28)\ndef adapt_sizes(self):\nmodel = self.model()\nif model is not None and (model.rowCount() * model.columnCount()) &lt; 1000:\nself.resizeColumnsToContents()\nelse:\nself.h_header.resize_sections(\"interactive\")\ndef sort_by_column(self, column: int | None, ascending: bool = True):\ncolumn = -1 if column is None else column\norder = constants.ASCENDING if ascending else constants.DESCENDING\nself.sortByColumn(column, order)\ndef set_grid_style(self, style: constants.PenStyleStr | constants.PenStyle):\n\"\"\"Set grid style.\n        Args:\n            style: grid style to use\n        \"\"\"\nself.setGridStyle(constants.PEN_STYLE.get_enum_value(style))\ndef get_grid_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return grid style.\n        Returns:\n            grid style\n        \"\"\"\nreturn constants.PEN_STYLE.inverse[self.gridStyle()]\ndef get_visible_section_span(\nself,\norientation: constants.OrientationStr | constants.Orientation,\nmargin: int = 0,\n) -&gt; tuple[int, int]:\n\"\"\"Get a tuple containing the visible start/end indexes.\n        if there are no items visible, return -1, -1\n        \"\"\"\nrect = self.viewport().rect()\nif orientation in [\"horizontal\", constants.HORIZONTAL]:\nstart = self.columnAt(rect.left())\ncount = self.model().columnCount()\nend = self.columnAt(rect.right())\nelse:\nstart = self.rowAt(rect.top())\ncount = self.model().rowCount()\nend = self.rowAt(rect.bottom())\nif count == 0:\nreturn (-1, -1)\nstart = max(0, start - margin)\nend = count if end == -1 else min(end + margin, count)\nreturn (start, end)\ndef resizeColumnsToContents(self, max_columns: int | None = 500):\ncolcount = self.model().columnCount()\nif max_columns is None or colcount &gt; max_columns:\nsuper().resizeColumnsToContents()\nreturn\nto_check = min(colcount, max_columns)\nfor i in range(to_check):\nself.resizeColumnToContents(i)\ndef resize_visible_columns_to_contents(self, margin: int = 0):\nif not self.isVisible():\nlogger.warning(\"trying resize_visible_columns_to_contents while not visible.\")\ncolcount = self.model().columnCount()\nautosized_cols = set()\ncol, end = self.get_visible_section_span(\"horizontal\", margin=margin)\nwidth = self.viewport().width()\nwhile col &lt;= end:\nif col not in autosized_cols:\nautosized_cols.add(col)\nself.resizeColumnToContents(col)\ncol += 1\n#  end may change during resize\nend = self.columnAt(width)\nend = colcount if end == -1 else end\ndef auto_span(\nself,\norientation: constants.OrientationStr\n| constants.Orientation = constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE,\nstart: tuple[int, int] = (0, 0),\nend: tuple[int, int] | None = None,\n) -&gt; list[tuple[int, int, int, int]]:\n\"\"\"Set spans in given direction based on same content in given role.\"\"\"\nis_horizontal = orientation in [constants.HORIZONTAL, \"horizontal\"]\nmodel = self.model()\nspans = []\n# figure out the ranges\nif is_horizontal:\nstart_level = max(0, start[0])\nstart_section = max(0, start[1])\nend_level = model.rowCount()\nend_section = model.columnCount()\nif end:\nend_level = min(max(0, end[0]), end_level)\nend_section = min(max(0, end[1]), end_section)\nelse:\nstart_level = max(0, start[1])\nstart_section = max(0, start[0])\nend_level = model.columnCount()\nend_section = model.rowCount()\nif end:\nend_level = min(max(0, end[1]), end_level)\nend_section = min(max(0, end[0]), end_section)\n# adjust the spans.\nfor level in range(start_level, end_level):\nmatch_start = None\nif is_horizontal:\narr = [\nmodel.index(level, i).data(role)\nfor i in range(start_section, end_section + 1)\n]\nlogger.debug(f\"{type(self).__name__}: spanning horizontal {arr}\")\nelse:\narr = [\nmodel.index(i, level).data(role)\nfor i in range(start_section, end_section + 1)\n]\nlogger.debug(f\"{type(self).__name__}: spanning vertical {arr}\")\nfor section in range(1, len(arr)):\nif arr[section] == arr[section - 1]:\nif match_start is None:\nmatch_start = section - 1\n# If this is the last cell, need to end it\nif section == end_section - start_section:\nmatch_end = section\nspan_size = match_end - match_start + 1\nbegin = match_start + start_section\nif is_horizontal:\nself.setSpan(level, begin, 1, span_size)\nspans.append((level, begin, 1, span_size))\nelse:\nspans.append((begin, level, span_size, 1))\nself.setSpan(begin, level, span_size, 1)\nelif match_start is not None:\nmatch_end = section - 1\nspan_size = match_end - match_start + 1\nbegin = match_start + start_section\nif is_horizontal:\nself.setSpan(level, begin, 1, span_size)\nspans.append((level, begin, 1, span_size))\nelse:\nself.setSpan(begin, level, span_size, 1)\nspans.append((begin, level, span_size, 1))\nmatch_start = None\nreturn spans\n</code></pre> Name Children Inherits TableViewprettyqt.widgets.tableview <ul><li>OrientedTableView</li><li>QObjectPropertiesTableView</li><li>LogRecordTableView</li><li><code>CommandTable</code></li></ul> <ul><li>TableViewMixin</li><li>QTableView</li></ul> <code>TableWidgetMixin</code>prettyqt.widgets.tablewidget <ul><li>TableWidget</li></ul> <ul><li>TableViewMixin</li></ul>"},{"location":"qt_modules/widgets/TableViewMixin.html#prettyqt.widgets.tableview.TableViewMixin.auto_span","title":"<code>auto_span(orientation: constants.OrientationStr | constants.Orientation = constants.HORIZONTAL, role: constants.OrientationStr | constants.Orientation = constants.DISPLAY_ROLE, start: tuple[int, int] = (0, 0), end: tuple[int, int] | None = None) -&gt; list[tuple[int, int, int, int]]</code>","text":"<p>Set spans in given direction based on same content in given role.</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def auto_span(\nself,\norientation: constants.OrientationStr\n| constants.Orientation = constants.HORIZONTAL,\nrole=constants.DISPLAY_ROLE,\nstart: tuple[int, int] = (0, 0),\nend: tuple[int, int] | None = None,\n) -&gt; list[tuple[int, int, int, int]]:\n\"\"\"Set spans in given direction based on same content in given role.\"\"\"\nis_horizontal = orientation in [constants.HORIZONTAL, \"horizontal\"]\nmodel = self.model()\nspans = []\n# figure out the ranges\nif is_horizontal:\nstart_level = max(0, start[0])\nstart_section = max(0, start[1])\nend_level = model.rowCount()\nend_section = model.columnCount()\nif end:\nend_level = min(max(0, end[0]), end_level)\nend_section = min(max(0, end[1]), end_section)\nelse:\nstart_level = max(0, start[1])\nstart_section = max(0, start[0])\nend_level = model.columnCount()\nend_section = model.rowCount()\nif end:\nend_level = min(max(0, end[1]), end_level)\nend_section = min(max(0, end[0]), end_section)\n# adjust the spans.\nfor level in range(start_level, end_level):\nmatch_start = None\nif is_horizontal:\narr = [\nmodel.index(level, i).data(role)\nfor i in range(start_section, end_section + 1)\n]\nlogger.debug(f\"{type(self).__name__}: spanning horizontal {arr}\")\nelse:\narr = [\nmodel.index(i, level).data(role)\nfor i in range(start_section, end_section + 1)\n]\nlogger.debug(f\"{type(self).__name__}: spanning vertical {arr}\")\nfor section in range(1, len(arr)):\nif arr[section] == arr[section - 1]:\nif match_start is None:\nmatch_start = section - 1\n# If this is the last cell, need to end it\nif section == end_section - start_section:\nmatch_end = section\nspan_size = match_end - match_start + 1\nbegin = match_start + start_section\nif is_horizontal:\nself.setSpan(level, begin, 1, span_size)\nspans.append((level, begin, 1, span_size))\nelse:\nspans.append((begin, level, span_size, 1))\nself.setSpan(begin, level, span_size, 1)\nelif match_start is not None:\nmatch_end = section - 1\nspan_size = match_end - match_start + 1\nbegin = match_start + start_section\nif is_horizontal:\nself.setSpan(level, begin, 1, span_size)\nspans.append((level, begin, 1, span_size))\nelse:\nself.setSpan(begin, level, span_size, 1)\nspans.append((begin, level, span_size, 1))\nmatch_start = None\nreturn spans\n</code></pre>"},{"location":"qt_modules/widgets/TableViewMixin.html#prettyqt.widgets.tableview.TableViewMixin.get_grid_style","title":"<code>get_grid_style() -&gt; constants.PenStyleStr</code>","text":"<p>Return grid style.</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def get_grid_style(self) -&gt; constants.PenStyleStr:\n\"\"\"Return grid style.\n    Returns:\n        grid style\n    \"\"\"\nreturn constants.PEN_STYLE.inverse[self.gridStyle()]\n</code></pre>"},{"location":"qt_modules/widgets/TableViewMixin.html#prettyqt.widgets.tableview.TableViewMixin.get_visible_section_span","title":"<code>get_visible_section_span(orientation: constants.OrientationStr | constants.Orientation, margin: int = 0) -&gt; tuple[int, int]</code>","text":"<p>Get a tuple containing the visible start/end indexes.</p> <p>if there are no items visible, return -1, -1</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def get_visible_section_span(\nself,\norientation: constants.OrientationStr | constants.Orientation,\nmargin: int = 0,\n) -&gt; tuple[int, int]:\n\"\"\"Get a tuple containing the visible start/end indexes.\n    if there are no items visible, return -1, -1\n    \"\"\"\nrect = self.viewport().rect()\nif orientation in [\"horizontal\", constants.HORIZONTAL]:\nstart = self.columnAt(rect.left())\ncount = self.model().columnCount()\nend = self.columnAt(rect.right())\nelse:\nstart = self.rowAt(rect.top())\ncount = self.model().rowCount()\nend = self.rowAt(rect.bottom())\nif count == 0:\nreturn (-1, -1)\nstart = max(0, start - margin)\nend = count if end == -1 else min(end + margin, count)\nreturn (start, end)\n</code></pre>"},{"location":"qt_modules/widgets/TableViewMixin.html#prettyqt.widgets.tableview.TableViewMixin.set_grid_style","title":"<code>set_grid_style(style: constants.PenStyleStr | constants.PenStyle)</code>","text":"<p>Set grid style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.PenStyleStr | constants.PenStyle</code> <p>grid style to use</p> required Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def set_grid_style(self, style: constants.PenStyleStr | constants.PenStyle):\n\"\"\"Set grid style.\n    Args:\n        style: grid style to use\n    \"\"\"\nself.setGridStyle(constants.PEN_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/widgets/TableViewMixin.html#prettyqt.widgets.tableview.TableViewMixin.set_sorting_enabled","title":"<code>set_sorting_enabled(enabled: bool, do_sort: bool = False)</code>","text":"<p>Hack to avoid direct sort when setting sorting enabled.</p> Source code in <code>prettyqt\\widgets\\tableview.py</code> <pre><code>def set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\n\"\"\"Hack to avoid direct sort when setting sorting enabled.\"\"\"\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\n</code></pre>"},{"location":"qt_modules/widgets/TableViewMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261411408[\"widgets.TableViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261136960 --&gt; 2103261411408\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/TableWidget.html","title":"TableWidget","text":"<p>Qt Base Class: QTableWidget</p> <p>Signature: <code>QTableWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QTableWidget(self, rows: int, columns: int, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TableWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TableWidgetMixin</code>, <code>widgets.QTableWidget</code></p> Source code in <code>prettyqt\\widgets\\tablewidget.py</code> <pre><code>class TableWidget(TableWidgetMixin, widgets.QTableWidget):\npass\n</code></pre>"},{"location":"qt_modules/widgets/TableWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261412368[\"widgets.TableWidget\"]\n  2103261410448[\"widgets.TableWidgetMixin\"]\n  2103261411408[\"widgets.TableViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259804400[\"QtWidgets.QTableWidget\"]\n  2103259816880[\"QtWidgets.QTableView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261410448 --&gt; 2103261412368\n  2103261411408 --&gt; 2103261410448\n  2103261136960 --&gt; 2103261411408\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259804400 --&gt; 2103261412368\n  2103259816880 --&gt; 2103259804400\n  2103259770800 --&gt; 2103259816880\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TableWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>showGrid</code> bool <code>gridStyle</code> Qt::PenStyle <code>sortingEnabled</code> bool <code>wordWrap</code> bool <code>cornerButtonEnabled</code> bool <code>rowCount</code> int <code>columnCount</code> int"},{"location":"qt_modules/widgets/TableWidgetItem.html","title":"TableWidgetItem","text":"<p>Qt Base Class: QTableWidgetItem</p> <p>Signature: <code>QTableWidgetItem(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTableWidgetItem(self, other: PySide6.QtWidgets.QTableWidgetItem) -&gt; None QTableWidgetItem(self, text: str, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTableWidgetItem(self, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TableWidgetItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QTableWidgetItem</code></p> <p>Item for use with the QTableWidget class.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>class TableWidgetItem(QtWidgets.QTableWidgetItem):\n\"\"\"Item for use with the QTableWidget class.\"\"\"\ndef __setitem__(self, index: int | constants.ItemDataRoleStr, value):\nself.set_data(index, value)\ndef __getitem__(self, index: int | constants.ItemDataRoleStr):\nreturn self.get_data(index)\ndef set_flag(\nself, flag_name: constants.ItemFlagStr | constants.ItemFlag, value: bool\n):\n\"\"\"Set a flag based on str name.\"\"\"\nflag = constants.ITEM_FLAG.get_enum_value(flag_name)\nif value:\nself.setFlags(self.flags() | flag)\nelse:\nself.setFlags(self.flags() &amp; ~flag)\ndef set_editable(self, editable: bool):\n\"\"\"Set whether this item is user-editable.\"\"\"\nself.set_flag(\"editable\", editable)\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\ndef set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n        \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\ndef get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\ndef set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr\n| constants.AlignmentFlag\n| None = None,\nvertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n        Args:\n            horizontal: horizontal text alignment to use\n            vertical: vertical text alignment to use\n        \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT.get_enum_value(vertical)\ncase _, None:\nflag = constants.H_ALIGNMENT.get_enum_value(horizontal)\ncase _, _:\nflag = constants.V_ALIGNMENT.get_enum_value(\nvertical\n) | constants.H_ALIGNMENT.get_enum_value(horizontal)\nself.setTextAlignment(flag)\ndef get_background(self) -&gt; gui.Brush:\nreturn gui.Brush(self.background())\ndef get_foreground(self) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground())\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_icon(self) -&gt; gui.Icon | None:\nreturn None if (icon := self.icon()).isNull() else gui.Icon(icon)\ndef set_data(self, role: constants.ItemDataRoleStr | int, data: Any):\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nsuper().setData(role, data)\ndef get_data(self, role: constants.ItemDataRoleStr | int) -&gt; Any:\nif isinstance(role, str):\nrole = constants.ITEM_DATA_ROLE[role]\nreturn super().data(role)\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\nsize: datatypes.SizeType | None = None,\nrich_text: bool = False,\n):\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, QtCore.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\nif rich_text:\ntooltip = f\"&lt;html&gt;{html.escape(tooltip)}&lt;/html&gt;\"\nsuper().setToolTip(tooltip)\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.get_checkstate","title":"<code>get_checkstate() -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def get_checkstate(self) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState()]\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_checkstate(self, state: constants.CheckStateStr | constants.CheckState):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n    \"\"\"\nself.setCheckState(constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_editable","title":"<code>set_editable(editable: bool)</code>","text":"<p>Set whether this item is user-editable.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_editable(self, editable: bool):\n\"\"\"Set whether this item is user-editable.\"\"\"\nself.set_flag(\"editable\", editable)\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_flag","title":"<code>set_flag(flag_name: constants.ItemFlagStr | constants.ItemFlag, value: bool)</code>","text":"<p>Set a flag based on str name.</p> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_flag(\nself, flag_name: constants.ItemFlagStr | constants.ItemFlag, value: bool\n):\n\"\"\"Set a flag based on str name.\"\"\"\nflag = constants.ITEM_FLAG.get_enum_value(flag_name)\nif value:\nself.setFlags(self.flags() | flag)\nelse:\nself.setFlags(self.flags() &amp; ~flag)\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#prettyqt.widgets.tablewidgetitem.TableWidgetItem.set_text_alignment","title":"<code>set_text_alignment(horizontal: constants.HorizontalAlignmentStr | constants.AlignmentFlag | None = None, vertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None)</code>","text":"<p>Set text alignment of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>constants.HorizontalAlignmentStr | constants.AlignmentFlag | None</code> <p>horizontal text alignment to use</p> <code>None</code> <code>vertical</code> <code>constants.VerticalAlignmentStr | constants.AlignmentFlag | None</code> <p>vertical text alignment to use</p> <code>None</code> Source code in <code>prettyqt\\widgets\\tablewidgetitem.py</code> <pre><code>def set_text_alignment(\nself,\nhorizontal: constants.HorizontalAlignmentStr\n| constants.AlignmentFlag\n| None = None,\nvertical: constants.VerticalAlignmentStr | constants.AlignmentFlag | None = None,\n):\n\"\"\"Set text alignment of the checkbox.\n    Args:\n        horizontal: horizontal text alignment to use\n        vertical: vertical text alignment to use\n    \"\"\"\nmatch horizontal, vertical:\ncase None, None:\nreturn\ncase None, _:\nflag = constants.V_ALIGNMENT.get_enum_value(vertical)\ncase _, None:\nflag = constants.H_ALIGNMENT.get_enum_value(horizontal)\ncase _, _:\nflag = constants.V_ALIGNMENT.get_enum_value(\nvertical\n) | constants.H_ALIGNMENT.get_enum_value(horizontal)\nself.setTextAlignment(flag)\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261408528[\"widgets.TableWidgetItem\"]\n  2103256678112[\"QtWidgets.QTableWidgetItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103256678112 --&gt; 2103261408528\n  2103206874128 --&gt; 2103256678112\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/TableWidgetSelectionRange.html","title":"TableWidgetSelectionRange","text":"<p>Qt Base Class: QTableWidgetSelectionRange</p> <p>Signature: <code>QTableWidgetSelectionRange(self) -&gt; None QTableWidgetSelectionRange(self, QTableWidgetSelectionRange: PySide6.QtWidgets.QTableWidgetSelectionRange) -&gt; None QTableWidgetSelectionRange(self, top: int, left: int, bottom: int, right: int) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TableWidgetSelectionRange.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QTableWidgetSelectionRange</code></p> Source code in <code>prettyqt\\widgets\\tablewidgetselectionrange.py</code> <pre><code>class TableWidgetSelectionRange(QtWidgets.QTableWidgetSelectionRange):\ndef __repr__(self):\nreturn get_repr(\nself, self.topRow(), self.leftColumn(), self.bottomRow(), self.rightColumn()\n)\ndef __eq__(self, other: object):\nreturn (\n(\nself.topRow() == other.topRow()\nand self.bottomRow() == other.bottomRow()\nand self.leftColumn() == other.leftColumn()\nand self.rightColumn() == other.rightColumn()\n)\nif isinstance(other, TableWidgetSelectionRange)\nelse False\n)\ndef __or__(\nself, other: QtWidgets.QTableWidgetSelectionRange\n) -&gt; TableWidgetSelectionRange:\nreturn TableWidgetSelectionRange(\nmin(self.topRow(), other.topRow()),\nmin(self.leftColumn(), other.leftColumn()),\nmax(self.bottomRow(), other.bottomRow()),\nmax(self.rightColumn(), other.rightColumn()),\n)\ndef __and__(\nself, other: QtWidgets.QTableWidgetSelectionRange\n) -&gt; TableWidgetSelectionRange:\nreturn (\nTableWidgetSelectionRange()\nif other.topRow() &gt; self.bottomRow()\nand other.bottomRow() &lt; self.topRow()\nand other.leftColumn() &gt; self.rightColumn()\nand other.rightColumn() &lt; self.leftColumn()\nelse TableWidgetSelectionRange(\nmax(self.topRow(), other.topRow()),\nmax(self.leftColumn(), other.leftColumn()),\nmin(self.bottomRow(), other.bottomRow()),\nmin(self.rightColumn(), other.rightColumn()),\n)\n)\n</code></pre>"},{"location":"qt_modules/widgets/TableWidgetSelectionRange.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261414288[\"widgets.TableWidgetSelectionRange\"]\n  2103256683872[\"QtWidgets.QTableWidgetSelectionRange\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103256683872 --&gt; 2103261414288\n  2103206874128 --&gt; 2103256683872\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/TapAndHoldGesture.html","title":"TapAndHoldGesture","text":"<p>Qt Base Class: QTapAndHoldGesture</p> <p>Signature: <code>QTapAndHoldGesture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TapAndHoldGesture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GestureMixin</code>, <code>widgets.QTapAndHoldGesture</code></p> Source code in <code>prettyqt\\widgets\\tapandholdgesture.py</code> <pre><code>class TapAndHoldGesture(widgets.GestureMixin, widgets.QTapAndHoldGesture):\ndef get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"qt_modules/widgets/TapAndHoldGesture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261459408[\"widgets.TapAndHoldGesture\"]\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261036160[\"QtWidgets.QTapAndHoldGesture\"]\n  2103261050560[\"QtWidgets.QGesture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261461328 --&gt; 2103261459408\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472\n  2103261036160 --&gt; 2103261459408\n  2103261050560 --&gt; 2103261036160\n  2103254677056 --&gt; 2103261050560\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/TapAndHoldGesture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> Qt::GestureState <code>gestureType</code> Qt::GestureType <code>gestureCancelPolicy</code> QGesture::GestureCancelPolicy <code>hotSpot</code> QPointF <code>hasHotSpot</code> bool <code>position</code> QPointF"},{"location":"qt_modules/widgets/TapGesture.html","title":"TapGesture","text":"<p>Qt Base Class: QTapGesture</p> <p>Signature: <code>QTapGesture(self, parent: Optional[PySide6.QtCore.QObject] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TapGesture.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.GestureMixin</code>, <code>widgets.QTapGesture</code></p> <p>Describes a tap gesture made by the user.</p> Source code in <code>prettyqt\\widgets\\tapgesture.py</code> <pre><code>class TapGesture(widgets.GestureMixin, widgets.QTapGesture):\n\"\"\"Describes a tap gesture made by the user.\"\"\"\ndef get_position(self) -&gt; core.PointF:\nreturn core.PointF(self.position())\n</code></pre>"},{"location":"qt_modules/widgets/TapGesture.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261477648[\"widgets.TapGesture\"]\n  2103261461328[\"widgets.GestureMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261061120[\"QtWidgets.QTapGesture\"]\n  2103261050560[\"QtWidgets.QGesture\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261461328 --&gt; 2103261477648\n  2103255067472 --&gt; 2103261461328\n  140736120080256 --&gt; 2103255067472\n  2103261061120 --&gt; 2103261477648\n  2103261050560 --&gt; 2103261061120\n  2103254677056 --&gt; 2103261050560\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/TapGesture.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>state</code> Qt::GestureState <code>gestureType</code> Qt::GestureType <code>gestureCancelPolicy</code> QGesture::GestureCancelPolicy <code>hotSpot</code> QPointF <code>hasHotSpot</code> bool <code>position</code> QPointF"},{"location":"qt_modules/widgets/TextBrowser.html","title":"TextBrowser","text":"<p>Qt Base Class: QTextBrowser</p> <p>Signature: <code>QTextBrowser(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TextBrowser.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.TextEditMixin</code>, <code>widgets.QTextBrowser</code></p> <p>Rich text browser with hypertext navigation.</p> Source code in <code>prettyqt\\widgets\\textbrowser.py</code> <pre><code>class TextBrowser(widgets.TextEditMixin, widgets.QTextBrowser):\n\"\"\"Rich text browser with hypertext navigation.\"\"\"\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.setOpenExternalLinks(True)\n# def dragEnterEvent(self, event):\n#     u = event.mimeData().urls()\n#     for url in u:\n#         file_path = os.path.abspath(url.toLocalFile())\n#         ext = file_path.split(\".\")[-1]\n#         if ext in [\"txt\", \"md\", \"markdown\"]:\n#             event.accept()\n#         else:\n#             event.ignore()\n# def dropEvent(self, event):\n#     event.accept()\n#     self.show_markdown_file(self.filePath)\ndef set_markdown_file(self, file_path: datatypes.PathType):\nfile_path = pathlib.Path(file_path)\nwith file_path.open() as f:\nfile_content = f.read()\nself.setMarkdown(file_content)\ndef get_search_paths(self) -&gt; list[pathlib.Path]:\nreturn [pathlib.Path(p) for p in self.searchPaths()]\ndef set_search_paths(self, paths: Iterable[datatypes.PathType]):\nself.setSearchPaths([os.fspath(p) for p in paths])\ndef get_source_type(self) -&gt; gui.textdocument.ResourceTypeStr:\nreturn gui.textdocument.RESOURCE_TYPES.inverse[self.sourceType()]\n</code></pre>"},{"location":"qt_modules/widgets/TextBrowser.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261399888[\"widgets.TextBrowser\"]\n  2103261227200[\"widgets.TextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259777520[\"QtWidgets.QTextBrowser\"]\n  2103259755440[\"QtWidgets.QTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261227200 --&gt; 2103261399888\n  2103261131200 --&gt; 2103261227200\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259777520 --&gt; 2103261399888\n  2103259755440 --&gt; 2103259777520\n  2103259751600 --&gt; 2103259755440\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TextBrowser.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoFormatting</code> QFlags <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QTextEdit::LineWrapMode <code>lineWrapColumnOrWidth</code> int <code>readOnly</code> bool <code>markdown</code> QString <code>html</code> QString <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>acceptRichText</code> bool <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>document</code> QTextDocument <code>placeholderText</code> QString <code>source</code> QUrl <code>sourceType</code> QTextDocument::ResourceType <code>searchPaths</code> QStringList <code>openExternalLinks</code> bool <code>openLinks</code> bool"},{"location":"qt_modules/widgets/TextEdit.html","title":"TextEdit","text":"<p>Qt Base Class: QTextEdit</p> <p>Signature: <code>QTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TextEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TextEditMixin</code>, <code>widgets.QTextEdit</code></p> <p>Widget that is used to edit and display both plain and rich text.</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>class TextEdit(TextEditMixin, widgets.QTextEdit):\n\"\"\"Widget that is used to edit and display both plain and rich text.\"\"\"\n</code></pre> Name Children Inherits AutoResizeTextEditprettyqt.custom_widgets.autoresizingtextedit <ul><li><code>AutoResizeTextEditMixin</code></li><li>TextEdit</li></ul>"},{"location":"qt_modules/widgets/TextEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261226240[\"widgets.TextEdit\"]\n  2103261227200[\"widgets.TextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259755440[\"QtWidgets.QTextEdit\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261227200 --&gt; 2103261226240\n  2103261131200 --&gt; 2103261227200\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259755440 --&gt; 2103261226240\n  2103259751600 --&gt; 2103259755440\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TextEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoFormatting</code> QFlags <code>tabChangesFocus</code> bool <code>documentTitle</code> QString <code>undoRedoEnabled</code> bool <code>lineWrapMode</code> QTextEdit::LineWrapMode <code>lineWrapColumnOrWidth</code> int <code>readOnly</code> bool <code>markdown</code> QString <code>html</code> QString <code>plainText</code> QString <code>overwriteMode</code> bool <code>tabStopDistance</code> double <code>acceptRichText</code> bool <code>cursorWidth</code> int <code>textInteractionFlags</code> QFlags <code>document</code> QTextDocument <code>placeholderText</code> QString"},{"location":"qt_modules/widgets/TextEditMixin.html","title":"TextEditMixin","text":""},{"location":"qt_modules/widgets/TextEditMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractScrollAreaMixin</code></p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>class TextEditMixin(widgets.AbstractScrollAreaMixin):\nvalue_changed = core.Signal(str)\ndef __init__(self, *args, **kwargs) -&gt; None:\nsuper().__init__(*args, **kwargs)\nself.textChanged.connect(self.on_value_change)\nself.selecter = texteditselecter.TextEditSelecter(self)\ndef __add__(self, other: str) -&gt; TextEdit:\nself.append_text(other)\nreturn self\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"autoFormatting\": AUTO_FORMATTING,\n\"lineWrapMode\": LINE_WRAP_MODE,\n\"wordWrapMode\": gui.textoption.WORD_WRAP_MODE,\n}\nreturn maps\ndef on_value_change(self) -&gt; None:\nself.value_changed.emit(self.text())\ndef set_text(self, text: str) -&gt; None:\nself.setPlainText(text)\ndef append_text(\nself,\ntext: str,\nnewline: bool = True,\nensure_visible: Literal[\"always\", \"when_bottom\", \"never\"] = \"always\",\n):\nscrollbar = self.verticalScrollBar()\nat_bottom = scrollbar.value() &gt;= (scrollbar.maximum() - 4)\nprev_val = scrollbar.value()\nif newline:\nself.append(text)\nelse:\nself.selecter.move_cursor(\"end\")\nself.insertHtml(text)\nself.selecter.move_cursor(\"end\")\nmatch ensure_visible:\ncase \"always\":\nself.ensureCursorVisible()\ncase \"when_bottom\":\nif at_bottom:\nself.ensureCursorVisible()\ncase \"never\":\nscrollbar.setValue(prev_val)\ndef text(self) -&gt; str:\nreturn self.toPlainText()\ndef set_read_only(self, value: bool = True) -&gt; None:\nself.setReadOnly(value)\ndef set_text_color(self, color: datatypes.ColorType) -&gt; None:\ncolor = colors.get_color(color)\nself.setTextColor(color)\ndef set_line_wrap_mode(self, mode: LineWrapModeStr | widgets.QTextEdit.LineWrapMode):\n\"\"\"Set line wrap mode.\n        Args:\n            mode: line wrap mode to use\n        \"\"\"\nself.setLineWrapMode(LINE_WRAP_MODE.get_enum_value(mode))\ndef get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n        Returns:\n            Wrap mode\n        \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\ndef set_auto_formatting(\nself, mode: AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag\n):\n\"\"\"Set auto formatting mode.\n        Args:\n            mode: auto formatting mode to use\n        \"\"\"\nself.setAutoFormatting(AUTO_FORMATTING.get_enum_value(mode))\ndef get_auto_formatting(self) -&gt; AutoFormattingStr:\n\"\"\"Get the current auto formatting mode.\n        Returns:\n            Auto formatting mode\n        \"\"\"\nreturn AUTO_FORMATTING.inverse[self.autoFormatting()]\ndef set_word_wrap_mode(\nself, mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode\n):\n\"\"\"Set word wrap mode.\n        Args:\n            mode: word wrap mode to use\n        \"\"\"\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE.get_enum_value(mode))\ndef get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n        Returns:\n            Word wrap mode\n        \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre> Name Children Inherits TextEditprettyqt.widgets.textedit <ul><li>AutoResizeTextEdit</li></ul> <ul><li>TextEditMixin</li><li>QTextEdit</li></ul> TextBrowserprettyqt.widgets.textbrowser <ul><li>TextEditMixin</li><li>QTextBrowser</li></ul>"},{"location":"qt_modules/widgets/TextEditMixin.html#prettyqt.widgets.textedit.TextEditMixin.get_auto_formatting","title":"<code>get_auto_formatting() -&gt; AutoFormattingStr</code>","text":"<p>Get the current auto formatting mode.</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_auto_formatting(self) -&gt; AutoFormattingStr:\n\"\"\"Get the current auto formatting mode.\n    Returns:\n        Auto formatting mode\n    \"\"\"\nreturn AUTO_FORMATTING.inverse[self.autoFormatting()]\n</code></pre>"},{"location":"qt_modules/widgets/TextEditMixin.html#prettyqt.widgets.textedit.TextEditMixin.get_line_wrap_mode","title":"<code>get_line_wrap_mode() -&gt; LineWrapModeStr</code>","text":"<p>Get the current wrap mode.</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_line_wrap_mode(self) -&gt; LineWrapModeStr:\n\"\"\"Get the current wrap mode.\n    Returns:\n        Wrap mode\n    \"\"\"\nreturn LINE_WRAP_MODE.inverse[self.lineWrapMode()]\n</code></pre>"},{"location":"qt_modules/widgets/TextEditMixin.html#prettyqt.widgets.textedit.TextEditMixin.get_word_wrap_mode","title":"<code>get_word_wrap_mode() -&gt; gui.textoption.WordWrapModeStr</code>","text":"<p>Get the current word wrap mode.</p> Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def get_word_wrap_mode(self) -&gt; gui.textoption.WordWrapModeStr:\n\"\"\"Get the current word wrap mode.\n    Returns:\n        Word wrap mode\n    \"\"\"\nreturn gui.textoption.WORD_WRAP_MODE.inverse[self.wordWrapMode()]\n</code></pre>"},{"location":"qt_modules/widgets/TextEditMixin.html#prettyqt.widgets.textedit.TextEditMixin.set_auto_formatting","title":"<code>set_auto_formatting(mode: AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag)</code>","text":"<p>Set auto formatting mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag</code> <p>auto formatting mode to use</p> required Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_auto_formatting(\nself, mode: AutoFormattingStr | widgets.QTextEdit.AutoFormattingFlag\n):\n\"\"\"Set auto formatting mode.\n    Args:\n        mode: auto formatting mode to use\n    \"\"\"\nself.setAutoFormatting(AUTO_FORMATTING.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/TextEditMixin.html#prettyqt.widgets.textedit.TextEditMixin.set_line_wrap_mode","title":"<code>set_line_wrap_mode(mode: LineWrapModeStr | widgets.QTextEdit.LineWrapMode)</code>","text":"<p>Set line wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>LineWrapModeStr | widgets.QTextEdit.LineWrapMode</code> <p>line wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_line_wrap_mode(self, mode: LineWrapModeStr | widgets.QTextEdit.LineWrapMode):\n\"\"\"Set line wrap mode.\n    Args:\n        mode: line wrap mode to use\n    \"\"\"\nself.setLineWrapMode(LINE_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/TextEditMixin.html#prettyqt.widgets.textedit.TextEditMixin.set_word_wrap_mode","title":"<code>set_word_wrap_mode(mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode)</code>","text":"<p>Set word wrap mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode</code> <p>word wrap mode to use</p> required Source code in <code>prettyqt\\widgets\\textedit.py</code> <pre><code>def set_word_wrap_mode(\nself, mode: gui.textoption.WordWrapModeStr | gui.QTextOption.WrapMode\n):\n\"\"\"Set word wrap mode.\n    Args:\n        mode: word wrap mode to use\n    \"\"\"\nself.setWordWrapMode(gui.textoption.WORD_WRAP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/TextEditMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261227200[\"widgets.TextEditMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261131200 --&gt; 2103261227200\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/TimeEdit.html","title":"TimeEdit","text":"<p>Qt Base Class: QTimeEdit</p> <p>Signature: <code>QTimeEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QTimeEdit(self, time: PySide6.QtCore.QTime, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TimeEdit.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.DateTimeEditMixin</code>, <code>widgets.QTimeEdit</code></p> <p>Widget for editing times based on the QDateTimeEdit widget.</p> Source code in <code>prettyqt\\widgets\\timeedit.py</code> <pre><code>class TimeEdit(widgets.DateTimeEditMixin, widgets.QTimeEdit):\n\"\"\"Widget for editing times based on the QDateTimeEdit widget.\"\"\"\nvalue_changed = core.Signal(datetime.datetime)\ndef set_range(self, lower: datatypes.TimeType, upper: datatypes.TimeType):\n# self.setToolTip(f\"{lower.toString()} &lt;= x &lt;= {upper.toString()}\")\nself.setTimeRange(datatypes.to_time(lower), datatypes.to_time(upper))\ndef get_value(self) -&gt; datetime.time:\nreturn self.get_time()\ndef set_value(self, value: datatypes.TimeType):\nself.set_time(value)\ndef set_time(self, value: datatypes.TimeType):\nsuper().setTime(datatypes.to_time(value))\n</code></pre>"},{"location":"qt_modules/widgets/TimeEdit.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261260800[\"widgets.TimeEdit\"]\n  2103261258880[\"widgets.DateTimeEditMixin\"]\n  2103261135040[\"widgets.AbstractSpinBoxMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259925136[\"QtWidgets.QTimeEdit\"]\n  2103259923216[\"QtWidgets.QDateTimeEdit\"]\n  2103259895600[\"QtWidgets.QAbstractSpinBox\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261258880 --&gt; 2103261260800\n  2103261135040 --&gt; 2103261258880\n  2103261127360 --&gt; 2103261135040\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259925136 --&gt; 2103261260800\n  2103259923216 --&gt; 2103259925136\n  2103259895600 --&gt; 2103259923216\n  2103259691120 --&gt; 2103259895600\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TimeEdit.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>wrapping</code> bool <code>frame</code> bool <code>alignment</code> QFlags <code>readOnly</code> bool <code>buttonSymbols</code> QAbstractSpinBox::ButtonSymbols <code>specialValueText</code> QString <code>text</code> QString <code>accelerated</code> bool <code>correctionMode</code> QAbstractSpinBox::CorrectionMode <code>acceptableInput</code> bool <code>keyboardTracking</code> bool <code>showGroupSeparator</code> bool <code>dateTime</code> QDateTime <code>date</code> QDate <code>time</code> QTime <code>maximumDateTime</code> QDateTime <code>minimumDateTime</code> QDateTime <code>maximumDate</code> QDate <code>minimumDate</code> QDate <code>maximumTime</code> QTime <code>minimumTime</code> QTime <code>currentSection</code> QDateTimeEdit::Section <code>displayedSections</code> QFlags <code>displayFormat</code> QString <code>calendarPopup</code> bool <code>currentSectionIndex</code> int <code>sectionCount</code> int <code>timeSpec</code> Qt::TimeSpec <code>time</code> QTime"},{"location":"qt_modules/widgets/ToolBar.html","title":"ToolBar","text":"<p>Qt Base Class: QToolBar</p> <p>Signature: <code>QToolBar(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QToolBar(self, title: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ToolBar.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>ToolBarMixin</code>, <code>widgets.QToolBar</code></p> <p>Movable panel that contains a set of controls.</p> Source code in <code>prettyqt\\widgets\\toolbar.py</code> <pre><code>class ToolBar(ToolBarMixin, widgets.QToolBar):\n\"\"\"Movable panel that contains a set of controls.\"\"\"\n</code></pre> Name Children Inherits <code>BreadCrumbsToolBar</code>prettyqt.custom_widgets.itemviews.filetree <ul><li>ToolBar</li></ul>"},{"location":"qt_modules/widgets/ToolBar.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261229120[\"widgets.ToolBar\"]\n  2103261239680[\"widgets.ToolBarMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259713200[\"QtWidgets.QToolBar\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261239680 --&gt; 2103261229120\n  2103261127360 --&gt; 2103261239680\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259713200 --&gt; 2103261229120\n  2103259691120 --&gt; 2103259713200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ToolBar.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>movable</code> bool <code>allowedAreas</code> QFlags <code>orientation</code> Qt::Orientation <code>iconSize</code> QSize <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>floating</code> bool <code>floatable</code> bool"},{"location":"qt_modules/widgets/ToolBox.html","title":"ToolBox","text":"<p>Qt Base Class: QToolBox</p> <p>Signature: <code>QToolBox(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ToolBox.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.FrameMixin</code>, <code>widgets.QToolBox</code></p> <p>Column of tabbed widget items.</p> Source code in <code>prettyqt\\widgets\\toolbox.py</code> <pre><code>class ToolBox(widgets.FrameMixin, widgets.QToolBox):\n\"\"\"Column of tabbed widget items.\"\"\"\ndef __getitem__(\nself, index: int | str\n) -&gt; widgets.QWidget | listdelegators.ListDelegator[widgets.QWidget]:\nmatch index:\ncase int():\nreturn self.widget(index)\ncase str():\nresult = self.find_child(widgets.QWidget, index)\nif result is None:\nraise KeyError(\"Widget not found\")\nreturn result\ncase slice():\nstop = index.stop or self.count()\nrng = range(index.start or 0, stop, index.step or 1)\nwdgs = [self.widget(i) for i in rng]\nreturn listdelegators.ListDelegator(wdgs)\ncase _:\nraise TypeError(index)\ndef __delitem__(self, index: int):\nself.removeItem(index)\n# def __setstate__(self, state):\n#     for i, item in enumerate(state[\"items\"]):\n#         self.addItem(item[\"widget\"], item[\"icon\"], item[\"text\"])\n#         self.setItemEnabled(i, item[\"enabled\"])\n#         self.setItemToolTip(i, item[\"tool_tip\"])\n#     self.setCurrentIndex(state[\"current_index\"])\n# def __reduce__(self):\n#     return type(self), (), self.__getstate__()\ndef __iter__(self) -&gt; Iterator[widgets.QWidget]:\nreturn iter(self.get_children())\ndef __contains__(self, item: widgets.QWidget):\nreturn self.indexOf(item) &gt;= 0\ndef get_children(self) -&gt; listdelegators.ListDelegator[widgets.QWidget]:\nwidgets = [self.widget(i) for i in range(self.count())]\nreturn listdelegators.ListDelegator(widgets)\ndef add_widget(\nself,\nwidget: widgets.QWidget,\ntitle: str | None = None,\nicon: datatypes.IconType = None,\ntooltip: str = \"\",\nenabled: bool = True,\n):\ntitle = widget.objectName() if title is None else title\nicon = iconprovider.get_icon(icon) if icon else gui.Icon()\nself.addItem(widget, icon, title)\nindex = self.indexOf(widget)\nif tooltip:\nself.setItemToolTip(index, tooltip)\nself.setItemEnabled(index, enabled)\ndef get_item_icon(self, index: int) -&gt; gui.Icon | None:\nicon = self.itemIcon(index)\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/ToolBox.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261437328[\"widgets.ToolBox\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259740080[\"QtWidgets.QToolBox\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261110080 --&gt; 2103261437328\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259740080 --&gt; 2103261437328\n  2103259737200 --&gt; 2103259740080\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ToolBox.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>currentIndex</code> int <code>count</code> int"},{"location":"qt_modules/widgets/ToolButton.html","title":"ToolButton","text":"<p>Qt Base Class: QToolButton</p> <p>Signature: <code>QToolButton(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/ToolButton.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractButtonMixin</code>, <code>widgets.QToolButton</code></p> <p>Quick-access button to commands or options, usually used inside a QToolBar.</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>class ToolButton(widgets.AbstractButtonMixin, widgets.QToolButton):\n\"\"\"Quick-access button to commands or options, usually used inside a QToolBar.\"\"\"\ndef __getitem__(self, item: str) -&gt; QtGui.QAction:\nmenu = self.menu()\nreturn menu[item]\n# def set_menu(self, menu: widgets.QMenu):\n#     menu.setParent(self)\n#     self.setMenu(menu)\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"toolButtonStyle\": constants.TOOLBUTTON_STYLE,\n\"arrowType\": constants.ARROW_TYPE,\n\"popupMode\": POPUP_MODE,\n}\nreturn maps\n@classmethod\ndef for_menu(cls, menu: widgets.QMenu, icon: datatypes.IconType = None) -&gt; Self:\nbtn = cls()\nbtn.setMenu(menu)\n# btn.set_title(menu.title())\nbtn.set_popup_mode(\"instant\")\nbtn.set_icon(icon)\nreturn btn\ndef set_default_action(self, action: QtGui.QAction):\nself.setDefaultAction(action)\ndef set_popup_mode(\nself, mode: PopupModeStr | widgets.QToolButton.ToolButtonPopupMode\n):\n\"\"\"Set the popup mode of the toolbutton.\n        Args:\n            mode: popup mode to use\n        \"\"\"\nself.setPopupMode(POPUP_MODE.get_enum_value(mode))\ndef get_popup_mode(self) -&gt; PopupModeStr:\n\"\"\"Return popup mode.\n        Returns:\n            popup mode\n        \"\"\"\nreturn POPUP_MODE.inverse[self.popupMode()]\ndef set_arrow_type(self, mode: constants.ArrowTypeStr | constants.ArrowType):\n\"\"\"Set the arrow type of the toolbutton.\n        Args:\n            mode: arrow type to use\n        \"\"\"\nself.setArrowType(constants.ARROW_TYPE.get_enum_value(mode))\ndef get_arrow_type(self) -&gt; constants.ArrowTypeStr:\n\"\"\"Return arrow type.\n        Returns:\n            arrow type\n        \"\"\"\nreturn constants.ARROW_TYPE.inverse[self.arrowType()]\ndef set_style(self, style: constants.ToolButtonStyleStr | constants.ToolButtonStyle):\n\"\"\"Set the toolbutton style.\n        Args:\n            style: style to use\n        \"\"\"\nself.setToolButtonStyle(constants.TOOLBUTTON_STYLE.get_enum_value(style))\ndef get_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return toolbutton style.\n        Returns:\n            toolbutton style\n        \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre> Name Children Inherits BoolDictToolButtonprettyqt.custom_widgets.booldicttoolbutton <ul><li>ToolButton</li></ul> EnumFlagWidgetprettyqt.custom_widgets.editors.enumflagwidget <ul><li>ToolButton</li></ul>"},{"location":"qt_modules/widgets/ToolButton.html#prettyqt.widgets.toolbutton.ToolButton.get_arrow_type","title":"<code>get_arrow_type() -&gt; constants.ArrowTypeStr</code>","text":"<p>Return arrow type.</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_arrow_type(self) -&gt; constants.ArrowTypeStr:\n\"\"\"Return arrow type.\n    Returns:\n        arrow type\n    \"\"\"\nreturn constants.ARROW_TYPE.inverse[self.arrowType()]\n</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#prettyqt.widgets.toolbutton.ToolButton.get_popup_mode","title":"<code>get_popup_mode() -&gt; PopupModeStr</code>","text":"<p>Return popup mode.</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_popup_mode(self) -&gt; PopupModeStr:\n\"\"\"Return popup mode.\n    Returns:\n        popup mode\n    \"\"\"\nreturn POPUP_MODE.inverse[self.popupMode()]\n</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#prettyqt.widgets.toolbutton.ToolButton.get_style","title":"<code>get_style() -&gt; constants.ToolButtonStyleStr</code>","text":"<p>Return toolbutton style.</p> Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def get_style(self) -&gt; constants.ToolButtonStyleStr:\n\"\"\"Return toolbutton style.\n    Returns:\n        toolbutton style\n    \"\"\"\nreturn constants.TOOLBUTTON_STYLE.inverse[self.toolButtonStyle()]\n</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#prettyqt.widgets.toolbutton.ToolButton.set_arrow_type","title":"<code>set_arrow_type(mode: constants.ArrowTypeStr | constants.ArrowType)</code>","text":"<p>Set the arrow type of the toolbutton.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>constants.ArrowTypeStr | constants.ArrowType</code> <p>arrow type to use</p> required Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_arrow_type(self, mode: constants.ArrowTypeStr | constants.ArrowType):\n\"\"\"Set the arrow type of the toolbutton.\n    Args:\n        mode: arrow type to use\n    \"\"\"\nself.setArrowType(constants.ARROW_TYPE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#prettyqt.widgets.toolbutton.ToolButton.set_popup_mode","title":"<code>set_popup_mode(mode: PopupModeStr | widgets.QToolButton.ToolButtonPopupMode)</code>","text":"<p>Set the popup mode of the toolbutton.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>PopupModeStr | widgets.QToolButton.ToolButtonPopupMode</code> <p>popup mode to use</p> required Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_popup_mode(\nself, mode: PopupModeStr | widgets.QToolButton.ToolButtonPopupMode\n):\n\"\"\"Set the popup mode of the toolbutton.\n    Args:\n        mode: popup mode to use\n    \"\"\"\nself.setPopupMode(POPUP_MODE.get_enum_value(mode))\n</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#prettyqt.widgets.toolbutton.ToolButton.set_style","title":"<code>set_style(style: constants.ToolButtonStyleStr | constants.ToolButtonStyle)</code>","text":"<p>Set the toolbutton style.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>constants.ToolButtonStyleStr | constants.ToolButtonStyle</code> <p>style to use</p> required Source code in <code>prettyqt\\widgets\\toolbutton.py</code> <pre><code>def set_style(self, style: constants.ToolButtonStyleStr | constants.ToolButtonStyle):\n\"\"\"Set the toolbutton style.\n    Args:\n        style: style to use\n    \"\"\"\nself.setToolButtonStyle(constants.TOOLBUTTON_STYLE.get_enum_value(style))\n</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261232000[\"widgets.ToolButton\"]\n  2103261100480[\"widgets.AbstractButtonMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259904976[\"QtWidgets.QToolButton\"]\n  2103259928016[\"QtWidgets.QAbstractButton\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261100480 --&gt; 2103261232000\n  2103261127360 --&gt; 2103261100480\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259904976 --&gt; 2103261232000\n  2103259928016 --&gt; 2103259904976\n  2103259691120 --&gt; 2103259928016\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/ToolButton.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>text</code> QString <code>icon</code> QIcon <code>iconSize</code> QSize <code>shortcut</code> QKeySequence <code>checkable</code> bool <code>checked</code> bool <code>autoRepeat</code> bool <code>autoExclusive</code> bool <code>autoRepeatDelay</code> int <code>autoRepeatInterval</code> int <code>down</code> bool <code>popupMode</code> QToolButton::ToolButtonPopupMode <code>toolButtonStyle</code> Qt::ToolButtonStyle <code>autoRaise</code> bool <code>arrowType</code> Qt::ArrowType"},{"location":"qt_modules/widgets/ToolTip.html","title":"ToolTip","text":"<p>Qt Base Class: QToolTip</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/widgets/ToolTip.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QToolTip</code></p> <p>Tool tips (balloon help) for any widget.</p> Source code in <code>prettyqt\\widgets\\tooltip.py</code> <pre><code>class ToolTip(QtWidgets.QToolTip):\n\"\"\"Tool tips (balloon help) for any widget.\"\"\"\n@classmethod\ndef show_text(\ncls,\nposition: datatypes.PointType | None = None,\ntext: str = \"\",\nlinebreak_px: int = 400,\n):\ncls.showText(\nQtGui.QCursor.pos() if position is None else datatypes.to_point(position),\nf'&lt;div style=\"max-width: {linebreak_px}px\"&gt;{text}&lt;/div&gt;',\n)\n</code></pre>"},{"location":"qt_modules/widgets/ToolTip.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261220480[\"widgets.ToolTip\"]\n  2103259686320[\"QtWidgets.QToolTip\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103259686320 --&gt; 2103261220480\n  2103206874128 --&gt; 2103259686320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/TreeView.html","title":"TreeView","text":"<p>Qt Base Class: QTreeView</p> <p>Signature: <code>QTreeView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TreeView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TreeViewMixin</code>, <code>widgets.QTreeView</code></p> <p>Default model/view implementation of a tree view.</p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>class TreeView(TreeViewMixin, widgets.QTreeView):\n\"\"\"Default model/view implementation of a tree view.\"\"\"\n</code></pre> Name Children Inherits QObjectHierarchyTreeViewprettyqt.custom_widgets.qobjecthierarchytreeview <ul><li>TreeView</li></ul> ScrollAreaTocWidgetprettyqt.custom_widgets.scrollareatocwidget <ul><li>TreeView</li></ul> FileTreeprettyqt.custom_widgets.itemviews.filetree <ul><li>TreeView</li></ul>"},{"location":"qt_modules/widgets/TreeView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261413328[\"widgets.TreeView\"]\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259814960[\"QtWidgets.QTreeView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261405648 --&gt; 2103261413328\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259814960 --&gt; 2103261413328\n  2103259770800 --&gt; 2103259814960\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TreeView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>autoExpandDelay</code> int <code>indentation</code> int <code>rootIsDecorated</code> bool <code>uniformRowHeights</code> bool <code>itemsExpandable</code> bool <code>sortingEnabled</code> bool <code>animated</code> bool <code>allColumnsShowFocus</code> bool <code>wordWrap</code> bool <code>headerHidden</code> bool <code>expandsOnDoubleClick</code> bool"},{"location":"qt_modules/widgets/TreeViewMixin.html","title":"TreeViewMixin","text":""},{"location":"qt_modules/widgets/TreeViewMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.AbstractItemViewMixin</code></p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>class TreeViewMixin(widgets.AbstractItemViewMixin):\ndef __init__(\nself,\n*args,\nroot_is_decorated: bool = True,\nall_columns_show_focus: bool = True,\nuniform_row_heights: bool = True,\nalternating_row_colors: bool = True,\nselection_mode: str = \"extended\",\n**kwargs,\n):\nsuper().__init__(\n*args,\nroot_is_decorated=root_is_decorated,\nall_columns_show_focus=all_columns_show_focus,\nuniform_row_heights=uniform_row_heights,\nalternating_row_colors=alternating_row_colors,\nselection_mode=selection_mode,\n**kwargs,\n)\nself.setStyleSheet(\"QTreeView::item { padding: 5px }\")\nself.h_header = widgets.HeaderView(\"horizontal\", parent=self)\n@property\ndef h_header(self) -&gt; widgets.HeaderView:\nreturn self.header()\n@h_header.setter\ndef h_header(self, header: widgets.QHeaderView):\nself.setHeader(header)\ndef show_root(self, value: bool):\nself.setRootIndex(core.QModelIndex())\nif not value:\nself.setRootIndex(self.model().index(0, 0))\ndef set_expanded(\nself, index: core.ModelIndex | Iterable[core.ModelIndex], expanded: bool = True\n):\n\"\"\"Set expaned state of an index or an Iterable of indexes.\"\"\"\nmatch index:\ncase Iterable():\nfor idx in index:\nself.setExpanded(idx, expanded)\ncase _:\nself.setExpanded(index, expanded)\ndef expand_all(self, depth: int | None = None):\nif depth is None:\nsuper().expandAll()\nelse:\nfor idx in self.model().iter_tree(parent_index=self.rootIndex(), depth=depth):\nself.setExpanded(idx, True)\ndef set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\n\"\"\"Hack to avoid direct sort when setting sorting enabled.\"\"\"\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\ndef set_indentation(self, indentation: int):\nself.setIndentation(indentation)\ndef setup_list_style(self):\nself.setSelectionBehavior(self.SelectionBehavior.SelectRows)\nself.h_header.setStretchLastSection(True)\ndef adapt_sizes(self):\nmodel = self.model()\nif model is not None and (model.rowCount() * model.columnCount()) &lt; 1000:\nself.h_header.resizeSections(self.h_header.ResizeMode.ResizeToContents)\nelse:\nself.h_header.resize_sections(\"interactive\")\ndef sort_by_column(self, column: int | None, ascending: bool = True):\ncolumn = -1 if column is None else column\norder = constants.ASCENDING if ascending else constants.DESCENDING\nself.sortByColumn(column, order)\n</code></pre> Name Children Inherits TreeViewprettyqt.widgets.treeview <ul><li>QObjectHierarchyTreeView</li><li>ScrollAreaTocWidget</li><li>FileTree</li></ul> <ul><li>TreeViewMixin</li><li>QTreeView</li></ul> <code>TreeWidgetMixin</code>prettyqt.widgets.treewidget <ul><li>TreeWidget</li></ul> <ul><li>TreeViewMixin</li></ul> HelpContentWidgetprettyqt.qthelp.helpcontentwidget <ul><li>TreeViewMixin</li><li>QHelpContentWidget</li></ul>"},{"location":"qt_modules/widgets/TreeViewMixin.html#prettyqt.widgets.treeview.TreeViewMixin.set_expanded","title":"<code>set_expanded(index: core.ModelIndex | Iterable[core.ModelIndex], expanded: bool = True)</code>","text":"<p>Set expaned state of an index or an Iterable of indexes.</p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def set_expanded(\nself, index: core.ModelIndex | Iterable[core.ModelIndex], expanded: bool = True\n):\n\"\"\"Set expaned state of an index or an Iterable of indexes.\"\"\"\nmatch index:\ncase Iterable():\nfor idx in index:\nself.setExpanded(idx, expanded)\ncase _:\nself.setExpanded(index, expanded)\n</code></pre>"},{"location":"qt_modules/widgets/TreeViewMixin.html#prettyqt.widgets.treeview.TreeViewMixin.set_sorting_enabled","title":"<code>set_sorting_enabled(enabled: bool, do_sort: bool = False)</code>","text":"<p>Hack to avoid direct sort when setting sorting enabled.</p> Source code in <code>prettyqt\\widgets\\treeview.py</code> <pre><code>def set_sorting_enabled(self, enabled: bool, do_sort: bool = False):\n\"\"\"Hack to avoid direct sort when setting sorting enabled.\"\"\"\nmodel = self.model()\nif not do_sort and model is not None:\nbackup = model.sort\nmodel.sort = lambda x, y: None\nself.setSortingEnabled(enabled)\nif not do_sort and model is not None:\nmodel.sort = backup\n</code></pre>"},{"location":"qt_modules/widgets/TreeViewMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/TreeWidget.html","title":"TreeWidget","text":"<p>Qt Base Class: QTreeWidget</p> <p>Signature: <code>QTreeWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TreeWidget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>TreeWidgetMixin</code>, <code>widgets.QTreeWidget</code></p> <p>Tree view that uses a predefined tree model.</p> Source code in <code>prettyqt\\widgets\\treewidget.py</code> <pre><code>class TreeWidget(TreeWidgetMixin, widgets.QTreeWidget):\n\"\"\"Tree view that uses a predefined tree model.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261404688[\"widgets.TreeWidget\"]\n  2103261424848[\"widgets.TreeWidgetMixin\"]\n  2103261405648[\"widgets.TreeViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259815920[\"QtWidgets.QTreeWidget\"]\n  2103259814960[\"QtWidgets.QTreeView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261424848 --&gt; 2103261404688\n  2103261405648 --&gt; 2103261424848\n  2103261136960 --&gt; 2103261405648\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259815920 --&gt; 2103261404688\n  2103259814960 --&gt; 2103259815920\n  2103259770800 --&gt; 2103259814960\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/TreeWidget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>autoExpandDelay</code> int <code>indentation</code> int <code>rootIsDecorated</code> bool <code>uniformRowHeights</code> bool <code>itemsExpandable</code> bool <code>sortingEnabled</code> bool <code>animated</code> bool <code>allColumnsShowFocus</code> bool <code>wordWrap</code> bool <code>headerHidden</code> bool <code>expandsOnDoubleClick</code> bool <code>columnCount</code> int <code>topLevelItemCount</code> int"},{"location":"qt_modules/widgets/TreeWidgetItem.html","title":"TreeWidgetItem","text":"<p>Qt Base Class: QTreeWidgetItem</p> <p>Signature: <code>QTreeWidgetItem(self, other: PySide6.QtWidgets.QTreeWidgetItem) -&gt; None QTreeWidgetItem(self, parent: PySide6.QtWidgets.QTreeWidgetItem, after: PySide6.QtWidgets.QTreeWidgetItem, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, parent: PySide6.QtWidgets.QTreeWidgetItem, strings: Sequence[str], type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, parent: PySide6.QtWidgets.QTreeWidgetItem, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, strings: Sequence[str], type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, treeview: PySide6.QtWidgets.QTreeWidget, after: PySide6.QtWidgets.QTreeWidgetItem, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, treeview: PySide6.QtWidgets.QTreeWidget, strings: Sequence[str], type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, treeview: PySide6.QtWidgets.QTreeWidget, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None QTreeWidgetItem(self, type: int = &lt;ItemType.Type: 0&gt;) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>serializemixin.SerializeMixin</code>, <code>QtWidgets.QTreeWidgetItem</code></p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>class TreeWidgetItem(serializemixin.SerializeMixin, QtWidgets.QTreeWidgetItem):\ndef __repr__(self):\nreturn get_repr(self)\ndef serialize_fields(self):\ndata = [\nself.data(i, constants.USER_ROLE)  # type: ignore\nfor i in range(self.columnCount())\n]\nreturn dict(\ntext=[self.text(i) for i in range(self.columnCount())],\ntool_tip=[self.toolTip(i) for i in range(self.columnCount())],\nstatus_tip=[self.statusTip(i) for i in range(self.columnCount())],\ncheckstate=[self.get_checkstate(i) for i in range(self.columnCount())],\nicon=[self.get_icon(i) for i in range(self.columnCount())],\ndata=data,\n)\ndef __iter__(self) -&gt; Iterator[QtWidgets.QTreeWidgetItem]:\nreturn iter(self.child(i) for i in range(self.childCount()))\ndef __len__(self):\nreturn self.childCount()\ndef __getitem__(\nself, index: int | slice\n) -&gt; (\nQtWidgets.QTreeWidgetItem\n| listdelegators.ListDelegator[QtWidgets.QTreeWidgetItem]\n):\nmatch index:\ncase int():\nitem = self.child(index)\nif item is None:\nraise KeyError(index)\nreturn item\ncase slice():\ncount = self.childCount() if index.stop is None else index.stop\nvalues = list(range(count)[index])\nls = [self.child(i) for i in values]\nreturn listdelegators.ListDelegator(ls)\ncase _:\nraise TypeError(index)\ndef __delitem__(self, index: int):\nself.takeChild(index)\ndef __add__(self, other: QtWidgets.QTreeWidgetItem) -&gt; TreeWidgetItem:\nself.addChild(other)\nreturn self\ndef setChecked(self, column: int, checked: bool):\nself.setCheckState(\ncolumn,\nconstants.CheckState.Checked if checked else constants.CheckState.Unchecked,\n)\ndef isChecked(self, col: int) -&gt; bool:\nreturn self.checkState(col) == constants.CheckState.Checked\ndef get_children(\nself, recursive: bool = False\n) -&gt; listdelegators.ListDelegator[QtWidgets.QTreeWidgetItem]:\n\"\"\"Get children of this item.\n        recursive option is written iteratively to also support original QTreeWidgetItems.\n        \"\"\"\nif not recursive:\nreturn [self.child(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.child(i) for i in range(node.childCount()))\nnodes = items\nreturn listdelegators.ListDelegator(results[1:])\ndef get_top_level_items(\nself,\n) -&gt; listdelegators.ListDelegator[QtWidgets.QTreeWidgetItem]:\nitems = [self.topLevelItem(i) for i in range(self.topLevelItemCount())]\nreturn listdelegators.ListDelegator(items)\ndef collapse(self, recursive: bool = False):\nif recursive:\nfor i in range(self.childCount()):\nself.child(i).collapse(True)\nself.setExpanded(False)\ndef expand(self, recursive: bool = False):\nself.setExpanded(True)\nif recursive:\nfor i in range(self.childCount()):\nself.child(i).expand(True)\ndef set_size_hint(self, hint: datatypes.SizeType, column: int = 0):\nself.setSizeHint(column, datatypes.to_size(hint))\ndef sort_children(self, column: int, descending: bool = False):\norder = constants.DESCENDING if descending else constants.ASCENDING\nself.sortChildren(column, order)\ndef set_data(\nself, data: Any, role: constants.ItemDataRoleStr | constants.ItemDataRole | int\n):\nif not isinstance(role, int):\nrole = constants.ITEM_DATA_ROLE.get_enum_value(role)\nsuper().setData(data, role)\ndef get_data(\nself, role: constants.ItemDataRoleStr | constants.ItemDataRole | int\n) -&gt; Any:\nif not isinstance(role, int):\nrole = constants.ITEM_DATA_ROLE.get_enum_value(role)\nreturn super().data(role)\ndef set_icon(self, icon: datatypes.IconType, column: int = 0):\n\"\"\"Set the icon for the action.\n        Args:\n            icon: icon to use\n            column: column\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(column, icon)\ndef get_background(self, column: int = 0) -&gt; gui.Brush:\nreturn gui.Brush(self.background(column))\ndef get_foreground(self, column: int = 0) -&gt; gui.Brush:\nreturn gui.Brush(self.foreground(column))\ndef get_font(self, column: int = 0) -&gt; gui.Font:\nreturn gui.Font(self.font(column))\ndef get_icon(self, column: int = 0) -&gt; gui.Icon | None:\nreturn None if (icon := self.icon(column)).isNull() else gui.Icon(icon)\ndef set_checkstate(\nself, state: constants.CheckStateStr | constants.CheckState, column: int = 0\n):\n\"\"\"Set checkstate of the checkbox.\n        Args:\n            state: checkstate to use\n            column: column\n        \"\"\"\nself.setCheckState(column, constants.CHECK_STATE.get_enum_value(state))\ndef get_checkstate(self, column: int = 0) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n        Args:\n            column: column\n        Returns:\n            checkstate\n        \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState(column)]\ndef set_child_indicator_policy(\nself, policy: ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy\n):\n\"\"\"Set the child indicator policy.\n        Args:\n            policy: child indicator policy\n        \"\"\"\nself.setChildIndicatorPolicy(CHILD_INDICATOR_POLICY.get_enum_value(policy))\ndef get_child_indicator_policy(self) -&gt; ChildIndicatorPolicyStr:\n\"\"\"Return current child indicator policy.\n        Returns:\n            child indicator policy\n        \"\"\"\nreturn CHILD_INDICATOR_POLICY.inverse[self.childIndicatorPolicy()]\ndef get_text_alignment(self, column: int) -&gt; constants.AlignmentStr:\nreturn constants.ALIGNMENTS.inverse[self.textAlignment(column)]\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_checkstate","title":"<code>get_checkstate(column: int = 0) -&gt; constants.CheckStateStr</code>","text":"<p>Return checkstate.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>int</code> <p>column</p> <code>0</code> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_checkstate(self, column: int = 0) -&gt; constants.CheckStateStr:\n\"\"\"Return checkstate.\n    Args:\n        column: column\n    Returns:\n        checkstate\n    \"\"\"\nreturn constants.CHECK_STATE.inverse[self.checkState(column)]\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_child_indicator_policy","title":"<code>get_child_indicator_policy() -&gt; ChildIndicatorPolicyStr</code>","text":"<p>Return current child indicator policy.</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_child_indicator_policy(self) -&gt; ChildIndicatorPolicyStr:\n\"\"\"Return current child indicator policy.\n    Returns:\n        child indicator policy\n    \"\"\"\nreturn CHILD_INDICATOR_POLICY.inverse[self.childIndicatorPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.get_children","title":"<code>get_children(recursive: bool = False) -&gt; listdelegators.ListDelegator[QtWidgets.QTreeWidgetItem]</code>","text":"<p>Get children of this item.</p> <p>recursive option is written iteratively to also support original QTreeWidgetItems.</p> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def get_children(\nself, recursive: bool = False\n) -&gt; listdelegators.ListDelegator[QtWidgets.QTreeWidgetItem]:\n\"\"\"Get children of this item.\n    recursive option is written iteratively to also support original QTreeWidgetItems.\n    \"\"\"\nif not recursive:\nreturn [self.child(i) for i in range(self.childCount())]\nresults = []\nnodes = [self]\nwhile nodes:\nitems = []\nfor node in nodes:\nresults.append(node)\nitems.extend(node.child(i) for i in range(node.childCount()))\nnodes = items\nreturn listdelegators.ListDelegator(results[1:])\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_checkstate","title":"<code>set_checkstate(state: constants.CheckStateStr | constants.CheckState, column: int = 0)</code>","text":"<p>Set checkstate of the checkbox.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.CheckStateStr | constants.CheckState</code> <p>checkstate to use</p> required <code>column</code> <code>int</code> <p>column</p> <code>0</code> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_checkstate(\nself, state: constants.CheckStateStr | constants.CheckState, column: int = 0\n):\n\"\"\"Set checkstate of the checkbox.\n    Args:\n        state: checkstate to use\n        column: column\n    \"\"\"\nself.setCheckState(column, constants.CHECK_STATE.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_child_indicator_policy","title":"<code>set_child_indicator_policy(policy: ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy)</code>","text":"<p>Set the child indicator policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy</code> <p>child indicator policy</p> required Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_child_indicator_policy(\nself, policy: ChildIndicatorPolicyStr | mod.ChildIndicatorPolicy\n):\n\"\"\"Set the child indicator policy.\n    Args:\n        policy: child indicator policy\n    \"\"\"\nself.setChildIndicatorPolicy(CHILD_INDICATOR_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#prettyqt.widgets.treewidgetitem.TreeWidgetItem.set_icon","title":"<code>set_icon(icon: datatypes.IconType, column: int = 0)</code>","text":"<p>Set the icon for the action.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required <code>column</code> <code>int</code> <p>column</p> <code>0</code> Source code in <code>prettyqt\\widgets\\treewidgetitem.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType, column: int = 0):\n\"\"\"Set the icon for the action.\n    Args:\n        icon: icon to use\n        column: column\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setIcon(column, icon)\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261243520[\"widgets.TreeWidgetItem\"]\n  2103255032912[\"utils.SerializeMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103256682912[\"QtWidgets.QTreeWidgetItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103255032912 --&gt; 2103261243520\n  140736120080256 --&gt; 2103255032912\n  2103256682912 --&gt; 2103261243520\n  2103206874128 --&gt; 2103256682912\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItemIterator.html","title":"TreeWidgetItemIterator","text":"<p>Qt Base Class: QTreeWidgetItemIterator</p> <p>Signature: <code>QTreeWidgetItemIterator(self, it: Union[PySide6.QtWidgets.QTreeWidgetItemIterator, PySide6.QtWidgets.QTreeWidget, PySide6.QtWidgets.QTreeWidgetItem]) -&gt; None QTreeWidgetItemIterator(self, item: PySide6.QtWidgets.QTreeWidgetItem, flags: PySide6.QtWidgets.QTreeWidgetItemIterator.IteratorFlag = Instance(PySide6.QtWidgets.QTreeWidgetItemIterator.IteratorFlag.All)) -&gt; None QTreeWidgetItemIterator(self, widget: PySide6.QtWidgets.QTreeWidget, flags: PySide6.QtWidgets.QTreeWidgetItemIterator.IteratorFlag = Instance(PySide6.QtWidgets.QTreeWidgetItemIterator.IteratorFlag.All)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/TreeWidgetItemIterator.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QTreeWidgetItemIterator</code></p> Source code in <code>prettyqt\\widgets\\treewidgetitemiterator.py</code> <pre><code>class TreeWidgetItemIterator(QtWidgets.QTreeWidgetItemIterator):\ndef __init__(\nself,\nother: (\nQtWidgets.QTreeWidget\n| QtWidgets.QTreeWidgetItem\n| QtWidgets.QTreeWidgetItemIterator\n),\nflags: QtWidgets.QTreeWidgetItemIterator.IteratorFlag | None = None,\nhidden: bool | None = None,\nselected: bool | None = None,\nselectable: bool | None = None,\ndraggable: bool | None = None,\ndroppable: bool | None = None,\nhas_children: bool | None = None,\nchecked: bool | None = None,\nenabled: bool | None = None,\neditable: bool | None = None,\nuser_flag: bool = False,\n):\nif isinstance(other, QtWidgets.QTreeWidgetItemIterator):\nsuper().__init__(other)\nelse:\nif flags is None:\nflags = mod.IteratorFlag.All  # type: ignore\nif hidden is True:\nflags |= mod.IteratorFlag.Hidden  # type: ignore\nelif hidden is False:\nflags |= mod.IteratorFlag.NotHidden  # type: ignore\nif selected is True:\nflags |= mod.IteratorFlag.Selected  # type: ignore\nelif selected is False:\nflags |= mod.IteratorFlag.Unselected  # type: ignore\nif selectable is True:\nflags |= mod.IteratorFlag.Selectable  # type: ignore\nelif selectable is False:\nflags |= mod.IteratorFlag.NotSelectable  # type: ignore\nif draggable is True:\nflags |= mod.IteratorFlag.DragEnabled  # type: ignore\nelif draggable is False:\nflags |= mod.IteratorFlag.DragDisabled  # type: ignore\nif droppable is True:\nflags |= mod.IteratorFlag.DropEnabled  # type: ignore\nelif droppable is False:\nflags |= mod.IteratorFlag.DropDisabled  # type: ignore\nif has_children is True:\nflags |= mod.IteratorFlag.HasChildren  # type: ignore\nelif has_children is False:\nflags |= mod.IteratorFlag.NoChildren  # type: ignore\nif checked is True:\nflags |= mod.IteratorFlag.Checked  # type: ignore\nelif checked is False:\nflags |= mod.IteratorFlag.NotChecked  # type: ignore\nif enabled is True:\nflags |= mod.IteratorFlag.Enabled  # type: ignore\nelif enabled is False:\nflags |= mod.IteratorFlag.Disabled  # type: ignore\nif editable is True:\nflags |= mod.IteratorFlag.Editable  # type: ignore\nelif editable is False:\nflags |= mod.IteratorFlag.NotEditable  # type: ignore\nif user_flag:\nflags |= mod.IteratorFlag.UserFlag  # type: ignore\nsuper().__init__(other, flags)  # type: ignore\n</code></pre>"},{"location":"qt_modules/widgets/TreeWidgetItemIterator.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261409488[\"widgets.TreeWidgetItemIterator\"]\n  2103256658912[\"QtWidgets.QTreeWidgetItemIterator\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103256658912 --&gt; 2103261409488\n  2103206874128 --&gt; 2103256658912\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/UndoView.html","title":"UndoView","text":"<p>Qt Base Class: QUndoView</p> <p>Signature: <code>QUndoView(self, group: PySide6.QtGui.QUndoGroup, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QUndoView(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None QUndoView(self, stack: PySide6.QtGui.QUndoStack, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/UndoView.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.ListViewMixin</code>, <code>widgets.QUndoView</code></p> <p>Displays the contents of a QUndoStack.</p> Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>class UndoView(widgets.ListViewMixin, widgets.QUndoView):\n\"\"\"Displays the contents of a QUndoStack.\"\"\"\ndef __getitem__(self, index: int) -&gt; gui.QUndoCommand:\nreturn self.stack().command(index)\ndef set_clean_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the clean button.\n        Args:\n            icon: icon to use\n        \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setCleanIcon(icon)\ndef set_value(self, value: gui.QUndoGroup | gui.QUndoStack):\nif isinstance(value, gui.QUndoGroup):\nself.setGroup(value)\nelse:\nself.setStack(value)\n</code></pre>"},{"location":"qt_modules/widgets/UndoView.html#prettyqt.widgets.undoview.UndoView.set_clean_icon","title":"<code>set_clean_icon(icon: datatypes.IconType)</code>","text":"<p>Set the icon for the clean button.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\undoview.py</code> <pre><code>def set_clean_icon(self, icon: datatypes.IconType):\n\"\"\"Set the icon for the clean button.\n    Args:\n        icon: icon to use\n    \"\"\"\nicon = iconprovider.get_icon(icon)\nself.setCleanIcon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/UndoView.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261454608[\"widgets.UndoView\"]\n  2103261403728[\"widgets.ListViewMixin\"]\n  2103261136960[\"widgets.AbstractItemViewMixin\"]\n  2103261131200[\"widgets.AbstractScrollAreaMixin\"]\n  2103261110080[\"widgets.FrameMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259826480[\"QtWidgets.QUndoView\"]\n  2103259805360[\"QtWidgets.QListView\"]\n  2103259770800[\"QtWidgets.QAbstractItemView\"]\n  2103259751600[\"QtWidgets.QAbstractScrollArea\"]\n  2103259737200[\"QtWidgets.QFrame\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261403728 --&gt; 2103261454608\n  2103261136960 --&gt; 2103261403728\n  2103261131200 --&gt; 2103261136960\n  2103261110080 --&gt; 2103261131200\n  2103261127360 --&gt; 2103261110080\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259826480 --&gt; 2103261454608\n  2103259805360 --&gt; 2103259826480\n  2103259770800 --&gt; 2103259805360\n  2103259751600 --&gt; 2103259770800\n  2103259737200 --&gt; 2103259751600\n  2103259691120 --&gt; 2103259737200\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/UndoView.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>frameShape</code> QFrame::Shape <code>frameShadow</code> QFrame::Shadow <code>lineWidth</code> int <code>midLineWidth</code> int <code>frameWidth</code> int <code>frameRect</code> QRect <code>verticalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>horizontalScrollBarPolicy</code> Qt::ScrollBarPolicy <code>sizeAdjustPolicy</code> QAbstractScrollArea::SizeAdjustPolicy <code>autoScroll</code> bool <code>autoScrollMargin</code> int <code>editTriggers</code> QFlags <code>tabKeyNavigation</code> bool <code>showDropIndicator</code> bool <code>dragEnabled</code> bool <code>dragDropOverwriteMode</code> bool <code>dragDropMode</code> QAbstractItemView::DragDropMode <code>defaultDropAction</code> Qt::DropAction <code>alternatingRowColors</code> bool <code>selectionMode</code> QAbstractItemView::SelectionMode <code>selectionBehavior</code> QAbstractItemView::SelectionBehavior <code>iconSize</code> QSize <code>textElideMode</code> Qt::TextElideMode <code>verticalScrollMode</code> QAbstractItemView::ScrollMode <code>horizontalScrollMode</code> QAbstractItemView::ScrollMode <code>movement</code> QListView::Movement <code>flow</code> QListView::Flow <code>isWrapping</code> bool <code>resizeMode</code> QListView::ResizeMode <code>layoutMode</code> QListView::LayoutMode <code>spacing</code> int <code>gridSize</code> QSize <code>viewMode</code> QListView::ViewMode <code>modelColumn</code> int <code>uniformItemSizes</code> bool <code>batchSize</code> int <code>wordWrap</code> bool <code>selectionRectVisible</code> bool <code>itemAlignment</code> QFlags <code>emptyLabel</code> QString <code>cleanIcon</code> QIcon"},{"location":"qt_modules/widgets/VBoxLayout.html","title":"VBoxLayout","text":"<p>Qt Base Class: QVBoxLayout</p> <p>Signature: <code>QVBoxLayout(self) -&gt; None QVBoxLayout(self, parent: PySide6.QtWidgets.QWidget) -&gt; None</code></p>"},{"location":"qt_modules/widgets/VBoxLayout.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.boxlayout.BoxLayoutMixin</code>, <code>widgets.QVBoxLayout</code></p> <p>Lines up widgets vertically.</p> Source code in <code>prettyqt\\widgets\\vboxlayout.py</code> <pre><code>class VBoxLayout(widgets.boxlayout.BoxLayoutMixin, widgets.QVBoxLayout):\n\"\"\"Lines up widgets vertically.\"\"\"\nID = \"vertical\"\n</code></pre>"},{"location":"qt_modules/widgets/VBoxLayout.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261450768[\"widgets.VBoxLayout\"]\n  2103261430608[\"widgets.BoxLayoutMixin\"]\n  2103261439248[\"widgets.LayoutMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  2103260163216[\"QtWidgets.QVBoxLayout\"]\n  2103260142096[\"QtWidgets.QBoxLayout\"]\n  2103260125776[\"QtWidgets.QLayout\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103261430608 --&gt; 2103261450768\n  2103261439248 --&gt; 2103261430608\n  2103255067472 --&gt; 2103261439248\n  140736120080256 --&gt; 2103255067472\n  2103261422928 --&gt; 2103261439248\n  140736120080256 --&gt; 2103261422928\n  2103260163216 --&gt; 2103261450768\n  2103260142096 --&gt; 2103260163216\n  2103260125776 --&gt; 2103260142096\n  2103254677056 --&gt; 2103260125776\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259638320 --&gt; 2103260125776\n  2103206874128 --&gt; 2103259638320</code></pre>"},{"location":"qt_modules/widgets/VBoxLayout.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>spacing</code> int <code>contentsMargins</code> QMargins <code>sizeConstraint</code> QLayout::SizeConstraint"},{"location":"qt_modules/widgets/WhatsThis.html","title":"WhatsThis","text":"<p>Qt Base Class: QWhatsThis</p> <p>Signature: <code>None</code></p>"},{"location":"qt_modules/widgets/WhatsThis.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>QtWidgets.QWhatsThis</code></p> <p>Simple description of any widget, i.e. answering the question \"What's This?\".</p> Source code in <code>prettyqt\\widgets\\whatsthis.py</code> <pre><code>class WhatsThis(QtWidgets.QWhatsThis):\n\"\"\"Simple description of any widget, i.e. answering the question \"What's This?\".\"\"\"\n@classmethod\n@contextlib.contextmanager\ndef enter_mode(cls):\ncls.enterWhatsThisMode()\nyield cls\ncls.leaveWhatsThisMode()\n</code></pre>"},{"location":"qt_modules/widgets/WhatsThis.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261248320[\"widgets.WhatsThis\"]\n  2103256629152[\"QtWidgets.QWhatsThis\"]\n  2103206874128[\"Shiboken.Object\"]\n  140736120080256[\"builtins.object\"]\n  2103256629152 --&gt; 2103261248320\n  2103206874128 --&gt; 2103256629152\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/Widget.html","title":"Widget","text":"<p>Qt Base Class: QWidget</p> <p>Signature: <code>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Widget.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>WidgetMixin</code>, <code>widgets.QWidget</code></p> <p>The base class of all user interface objects.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>class Widget(WidgetMixin, widgets.QWidget):\n\"\"\"The base class of all user interface objects.\"\"\"\n</code></pre> Name Children Inherits <code>CustomTitleBar</code>prettyqt.widgets.dockwidget <ul><li>Widget</li></ul> <code>StarEditor</code>prettyqt.itemdelegates.stardelegate <ul><li>Widget</li></ul> <code>Separator</code>prettyqt.custom_widgets.layouts.flowlayout <ul><li>Widget</li></ul> IconLabelprettyqt.custom_widgets.labels.iconlabel <ul><li>Widget</li></ul> CrossFadeWidgetprettyqt.custom_widgets.crossfadewidget <ul><li>Widget</li></ul> FaderWidgetprettyqt.custom_widgets.faderwidget <ul><li>Widget</li></ul> ImageViewerprettyqt.custom_widgets.imageviewer <ul><li>Widget</li></ul> WidgetEditorprettyqt.custom_widgets.widgeteditor <ul><li>Widget</li></ul> CommandPaletteprettyqt.custom_widgets.commandpalette <ul><li>Widget</li></ul> BrushEditprettyqt.custom_widgets.editors.brushedit <ul><li>Widget</li></ul> <code>BaseRectEdit</code>prettyqt.custom_widgets.editors.rectedit <ul><li>RectEdit</li><li>RectFEdit</li><li>RegionEdit</li></ul> <ul><li>Widget</li></ul> PaletteEditprettyqt.custom_widgets.editors.paletteedit <ul><li>Widget</li></ul> IconEditprettyqt.custom_widgets.editors.iconedit <ul><li>Widget</li></ul> PointEditprettyqt.custom_widgets.editors.pointedit <ul><li>Widget</li></ul> SizeEditprettyqt.custom_widgets.editors.sizeedit <ul><li>Widget</li></ul> SizePolicyEditprettyqt.custom_widgets.editors.sizepolicyedit <ul><li>Widget</li></ul> RegexInputprettyqt.custom_widgets.editors.regexinput <ul><li>Widget</li></ul> SliceEditprettyqt.custom_widgets.editors.sliceedit <ul><li>Widget</li></ul> RangeEditprettyqt.custom_widgets.editors.rangeedit <ul><li>Widget</li></ul> ColorChooserButtonprettyqt.custom_widgets.editors.colorchooserbutton <ul><li>Widget</li></ul> FileChooserButtonprettyqt.custom_widgets.editors.filechooserbutton <ul><li>Widget</li></ul> FontChooserButtonprettyqt.custom_widgets.editors.fontchooserbutton <ul><li>Widget</li></ul> InputAndSliderprettyqt.custom_widgets.editors.inputandslider <ul><li>Widget</li></ul> SpanSliderWidgetprettyqt.custom_widgets.editors.spanslider <ul><li>Widget</li></ul> LabeledSliderprettyqt.custom_widgets.labeledslider <ul><li>Widget</li></ul> <code>BaseWaitingSpinner</code>prettyqt.custom_widgets.waitingspinner <ul><li>WaitingSpinner</li></ul> <ul><li>Widget</li></ul> NumFilterWidgetprettyqt.custom_widgets.numfilterwidget <ul><li>Widget</li></ul> <code>LineNumberArea</code>prettyqt.custom_widgets.codeeditor <ul><li>Widget</li></ul> RoundProgressBarprettyqt.custom_widgets.roundprogressbar <ul><li>Widget</li></ul> <code>SectionWidget</code>prettyqt.custom_widgets.scrollareatocwidget <ul><li>Widget</li></ul> Timelineprettyqt.custom_widgets.timeline <ul><li>Widget</li></ul> StandardIconsWidgetprettyqt.custom_widgets.standardiconswidget <ul><li>Widget</li></ul> <code>FileExplorer</code>prettyqt.custom_widgets.itemviews.filetree <ul><li>Widget</li></ul> MarkdownWidgetprettyqt.prettyqtmarkdown.markdownwidget <ul><li>Widget</li></ul> HelpFilterSettingsWidgetprettyqt.qthelp.helpfiltersettingswidget <ul><li>Widget</li><li>QHelpFilterSettingsWidget</li></ul>"},{"location":"qt_modules/widgets/Widget.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261115840[\"widgets.Widget\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261127360 --&gt; 2103261115840\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259691120 --&gt; 2103261115840\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Widget.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags"},{"location":"qt_modules/widgets/WidgetAction.html","title":"WidgetAction","text":"<p>Qt Base Class: QWidgetAction</p> <p>Signature: <code>QWidgetAction(self, parent: PySide6.QtCore.QObject) -&gt; None</code></p>"},{"location":"qt_modules/widgets/WidgetAction.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>gui.ActionMixin</code>, <code>QtWidgets.QWidgetAction</code></p> Source code in <code>prettyqt\\widgets\\widgetaction.py</code> <pre><code>class WidgetAction(gui.ActionMixin, QtWidgets.QWidgetAction):\npass\n</code></pre>"},{"location":"qt_modules/widgets/WidgetAction.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261252160[\"widgets.WidgetAction\"]\n  2103256695392[\"gui.ActionMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103261040960[\"QtWidgets.QWidgetAction\"]\n  2103260873936[\"QtGui.QAction\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103256695392 --&gt; 2103261252160\n  2103255067472 --&gt; 2103256695392\n  140736120080256 --&gt; 2103255067472\n  2103261040960 --&gt; 2103261252160\n  2103260873936 --&gt; 2103261040960\n  2103254677056 --&gt; 2103260873936\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/WidgetAction.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>checkable</code> bool <code>checked</code> bool <code>enabled</code> bool <code>icon</code> QIcon <code>text</code> QString <code>iconText</code> QString <code>toolTip</code> QString <code>statusTip</code> QString <code>whatsThis</code> QString <code>font</code> QFont <code>shortcut</code> QKeySequence <code>shortcutContext</code> Qt::ShortcutContext <code>autoRepeat</code> bool <code>visible</code> bool <code>menuRole</code> QAction::MenuRole <code>iconVisibleInMenu</code> bool <code>shortcutVisibleInContextMenu</code> bool <code>priority</code> QAction::Priority <code>usage_count</code> int How often the action was triggered"},{"location":"qt_modules/widgets/WidgetItem.html","title":"WidgetItem","text":"<p>Qt Base Class: QWidgetItem</p> <p>Signature: <code>QWidgetItem(self, w: PySide6.QtWidgets.QWidget) -&gt; None</code></p>"},{"location":"qt_modules/widgets/WidgetItem.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>widgets.LayoutItemMixin</code>, <code>widgets.QWidgetItem</code></p> <p>Layout item that represents a widget.</p> Source code in <code>prettyqt\\widgets\\widgetitem.py</code> <pre><code>class WidgetItem(widgets.LayoutItemMixin, widgets.QWidgetItem):\n\"\"\"Layout item that represents a widget.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/WidgetItem.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261434448[\"widgets.WidgetItem\"]\n  2103261422928[\"widgets.LayoutItemMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103259718960[\"QtWidgets.QWidgetItem\"]\n  2103259638320[\"QtWidgets.QLayoutItem\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103261422928 --&gt; 2103261434448\n  140736120080256 --&gt; 2103261422928\n  2103259718960 --&gt; 2103261434448\n  2103259638320 --&gt; 2103259718960\n  2103206874128 --&gt; 2103259638320\n  140736120080256 --&gt; 2103206874128</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html","title":"WidgetMixin","text":""},{"location":"qt_modules/widgets/WidgetMixin.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>core.ObjectMixin</code>, <code>gui.PaintDeviceMixin</code></p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>class WidgetMixin(core.ObjectMixin, gui.PaintDeviceMixin):\ndef __init__(self, *args, margin: int | None = None, **kwargs):\nsuper().__init__(*args, **kwargs)\nself.fx = animations.Fx(self)\nif margin is not None:\nself.set_margin(margin)\n@classmethod\ndef setup_example(cls):\nreturn cls()\ndef _get_map(self):\nmaps = super()._get_map()\nmaps |= {\n\"contextMenuPolicy\": constants.CONTEXT_POLICY,\n\"focusPolicy\": constants.FOCUS_POLICY,\n\"layoutDirection\": constants.LAYOUT_DIRECTION,\n\"windowModality\": constants.WINDOW_MODALITY,\n}\nreturn maps\ndef add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\n*,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\n\"\"\"Add shortcut to widget.\n        Adds as shortcut for given callback and context to this widget.\n        Args:\n            keysequence: Key sequence\n            callback: Callback for the shortcut\n            context: context for this shortcut\n        Returns:\n            shortcut object\n        \"\"\"\nreturn gui.Shortcut(\ndatatypes.to_keysequence(keysequence),\nself,\ncallback,\ncontext=constants.SHORTCUT_CONTEXT.get_enum_value(context),\n)\ndef get_win_id(self) -&gt; int:\nreturn int(self.winId())\ndef resize(self, *size):\nif isinstance(size[0], tuple):\nsuper().resize(*size[0])\nelse:\nsuper().resize(*size)\ndef set_width(self, width: int):\nself.resize(width, self.height())\ndef set_height(self, height: int):\nself.resize(self.width(), height)\ndef set_enabled(self, enabled: bool = True) -&gt; None:\nself.setEnabled(enabled)\ndef set_disabled(self) -&gt; None:\nself.setEnabled(False)\ndef insertAction(self, position_or_action: int | gui.QAction, action: gui.QAction):\n\"\"\"Extend insertAction to also allow int index.\"\"\"\nif isinstance(position_or_action, int):\nactions = self.actions()\nif len(actions) == 0 or position_or_action &gt;= len(actions):\n# Insert as the first action or the last action.\nreturn super().addAction(action)\nposition_or_action = actions[position_or_action]\nsuper().insertAction(position_or_action, action)\ndef add_action(\nself,\ntext: str | gui.Action,\n*,\nparent: widgets.QWidget | None = None,\ndata: Any = None,\n**kwargs: datatypes.VariantType,\n) -&gt; gui.Action:\n\"\"\"Add an action to the menu.\n        Args:\n            text: Label for the action\n            parent: parent\n            data: data for the Action\n            kwargs: kwargs passed to action ctor\n        Returns:\n            Action added to menu\n        \"\"\"\nif isinstance(text, str):\naction = gui.Action(parent=parent or self, text=text, **kwargs)\nelse:\naction = text\naction.setParent(self)\nself.addAction(action)\naction.setData(data)\nreturn action\ndef add_actions(self, actions: Sequence[gui.QAction]):\nfor i in actions:\ni.setParent(self)\nself.addActions(actions)\ndef toggle_fullscreen(self) -&gt; bool:\n\"\"\"Toggle between fullscreen and regular size.\"\"\"\nif self.isFullScreen():\nself.showNormal()\nreturn False\nelse:\nself.showFullScreen()\nreturn True\ndef toggle_maximized(self) -&gt; bool:\n\"\"\"Toggle between maximized and regular size.\"\"\"\nif self.isMaximized():\nself.showNormal()\nreturn False\nelse:\nself.showMaximized()\nreturn True\ndef map_to(\nself,\nwidget: widgets.QWidget | Literal[\"global\", \"parent\", \"window\"],\npos_or_rect: datatypes.PointType\n| datatypes.RectType\n| datatypes.PointFType\n| datatypes.RectFType,\n) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF:\n\"\"\"Map a point or rect to a widget, global position or parent.\n        Arguments:\n            widget: What to map to.\n            pos_or_rect: Point or rect to map.\n        \"\"\"\nmatch pos_or_rect:\ncase int(), int():\npos_or_rect = core.QPoint(*pos_or_rect)\ncase float(), float():\npos_or_rect = core.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\npos_or_rect = core.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\npos_or_rect = core.QRectF(*pos_or_rect)\nmatch pos_or_rect, widget:\ncase core.QRect() | core.QRectF(), widgets.QWidget():\ntop_left = super().mapTo(widget, pos_or_rect.topLeft())\nbottom_right = super().mapTo(widget, pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), widgets.QWidget():\nreturn super().mapTo(widget, pos_or_rect)\ncase core.QRect() | core.QRectF(), \"parent\":\ntop_left = super().mapToParent(pos_or_rect.topLeft())\nbottom_right = super().mapToParent(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"parent\":\nreturn super().mapToParent(pos_or_rect)\ncase core.QRect() | core.QRectF(), \"window\":\ntop_left = super().mapTo(self.window(), pos_or_rect.topLeft())\nbottom_right = super().mapTo(self.window(), pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"window\":\nreturn super().mapTo(self.window(), pos_or_rect)\ncase core.QRect() | core.QRectF(), \"global\":\ntop_left = super().mapToGlobal(pos_or_rect.topLeft())\nbottom_right = super().mapToGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"global\":\nreturn super().mapToGlobal(pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\ndef map_from(\nself,\nwidget: widgets.QWidget | Literal[\"global\", \"parent\", \"window\"],\npos_or_rect: datatypes.PointType\n| datatypes.RectType\n| datatypes.PointFType\n| datatypes.RectFType,\n) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF:\n\"\"\"Map a point or rect from a widget, global position or parent.\n        Arguments:\n            widget: What to map from.\n            pos_or_rect: Point or rect to map.\n        \"\"\"\nmatch pos_or_rect:\ncase int(), int():\npos_or_rect = core.QPoint(*pos_or_rect)\ncase float(), float():\npos_or_rect = core.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\npos_or_rect = core.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\npos_or_rect = core.QRectF(*pos_or_rect)\nmatch pos_or_rect, widget:\ncase core.QRect() | core.QRectF(), widgets.QWidget():\ntop_left = super().mapFrom(widget, pos_or_rect.topLeft())\nbottom_right = super().mapFrom(widget, pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), widgets.QWidget():\nreturn super().mapFrom(widget, pos_or_rect)\ncase core.QRect() | core.QRectF(), \"parent\":\ntop_left = super().mapFromParent(pos_or_rect.topLeft())\nbottom_right = super().mapFromParent(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"parent\":\nreturn super().mapFromParent(pos_or_rect)\ncase core.QRect() | core.QRectF(), \"window\":\ntop_left = super().mapFrom(self.window(), pos_or_rect.topLeft())\nbottom_right = super().mapFrom(self.window(), pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"window\":\nreturn super().mapFrom(self.window(), pos_or_rect)\ncase core.QRect() | core.QRectF(), \"global\":\ntop_left = super().mapFromGlobal(pos_or_rect.topLeft())\nbottom_right = super().mapFromGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"global\":\nreturn super().mapFromGlobal(pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\ndef raise_to_top(self):\n\"\"\"Brings a widget to top with all means available.\"\"\"\nif sys.platform.startswith(\"win\"):\nfrom prettyqt.utils.platforms.windows import misc\nmisc.raise_to_top()\n# state = (self.windowState() &amp; ~Qt.WindowMinimized) | Qt.WindowActive\n# self.setWindowState(state)\nself.raise_()\nself.show()\nself.activateWindow()\ndef set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the window icon.\n        Args:\n            icon: icon to use\n        \"\"\"\ncolor = widgets.app().get_window_icon_color()\nicon = iconprovider.get_icon(icon, color=color)\nsuper().setWindowIcon(icon)\nsetWindowIcon = set_icon\ndef get_icon(self) -&gt; gui.Icon | None:\n\"\"\"Get the window icon (returns None if not existing).\"\"\"\nicon = super().windowIcon()\nreturn None if icon.isNull() else gui.Icon(icon)\ndef show_tooltip(self, duration: int | None = None):\n\"\"\"Show the tooltip of this widget for given time.\n        When no duration is given, it will get calculated based on length.\n        \"\"\"\nif duration is None:\nduration = -1  # automatic\npos = self.map_to(\"global\", (0, 0))\nwidgets.ToolTip.showText(pos, self.toolTip(), msecShowTime=duration)\n# lets be gentle and allow all reasonable signatures for the size setters.\n# tuples as well as passing two args is possible.\n@functools.singledispatchmethod\ndef set_min_size(self, size: core.QSize | tuple[int | None, int | None]):\nmatch size:\ncase int() | None as x, int() | None as y:\nsuper().setMinimumSize(x or 0, y or 0)\ncase core.QSize():\nsuper().setMinimumSize(size)\ncase _:\nraise TypeError(size)\nsetMinimumSize = set_min_size\n@set_min_size.register\ndef _(self, x: int, y: int | None):\nself.set_min_size((x, y))\n@set_min_size.register  # these can be merged when min py version is 3.11\ndef _(self, x: None, y: int | None):\nself.set_min_size((x, y))\n@functools.singledispatchmethod\ndef set_max_size(self, size: core.QSize | tuple[int | None, int | None]):\nmatch size:\ncase int() | None as x, int() | None as y:\nx = QWIDGETSIZE_MAX if x is None else x\ny = QWIDGETSIZE_MAX if y is None else y\nsuper().setMaximumSize(x, y)\ncase _:\nsuper().setMaximumSize(size)\nsetMaximumSize = set_min_size\n@set_max_size.register\ndef _(self, x: int, y: int | None):\nself.set_max_size((x, y))\n@set_max_size.register  # these can be merged when min py version is 3.11\ndef _(self, x: None, y: int | None):\nself.set_max_size((x, y))\ndef set_min_width(self, width: int | None):\nsuper().setMinimumWidth(width or 0)\nsetMinimumWidth = set_min_width\ndef set_max_width(self, width: int | None):\nif width is None:\nwidth = QWIDGETSIZE_MAX\nsuper().setMaximumWidth(width)\nsetMaximumWidth = set_max_width\ndef set_min_height(self, height: int | None):\nsuper().setMinimumHeight(height or 0)\nsetMinimumHeight = set_min_height\ndef set_max_height(self, height: int | None):\nif height is None:\nheight = QWIDGETSIZE_MAX\nsuper().setMaximumHeight(height)\nsetMaximumHeight = set_max_height\ndef setWindowTitle(self, title: str):\nif not self.objectName() and widgets.app().is_debug():\nself.setObjectName(title)\nsuper().setWindowTitle(title)\ndef set_title(self, title: str):\nself.setWindowTitle(title)\ndef get_title(self) -&gt; str:\nreturn self.windowTitle()\ndef set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\n*,\nsize: datatypes.SizeType | None = None,\nrich_text: bool = False,\n):\n\"\"\"Set a tooltip for this widget.\n        In image can get displayed by passing a PathLike object.\n        \"\"\"\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, core.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nif rich_text:\ntooltip = f\"&lt;html&gt;{html.escape(tooltip)}&lt;/html&gt;\"\nsuper().setToolTip(tooltip)\ndef set_font(\nself,\nfont_name: gui.QFont | str | None = None,\n*,\nfont_size: int | None = None,\nweight: int | None = None,\nitalic: bool = False,\n) -&gt; gui.QFont:\n\"\"\"Set the font for this widget.\"\"\"\nif isinstance(font_name, gui.QFont):\nsuper().setFont(font_name)\nreturn font_name\nif font_size is None:\nfont_size = -1\nif weight is None:\nweight = -1\nif font_name is None:\nfont_name = self.font().family()\nfont = gui.Font(font_name, font_size, weight, italic)\nsuper().setFont(font)\nreturn font\ndef get_font(self) -&gt; gui.Font:\nreturn gui.Font(self.font())\ndef get_foreground_role(self) -&gt; gui.palette.RoleStr:\n\"\"\"Set foreground role for this widget.\"\"\"\nreturn gui.palette.ROLE.inverse[self.foregroundRole()]\ndef set_foreground_role(self, role: gui.palette.RoleStr | gui.Palette.ColorRole):\n\"\"\"Set foreground role for this widget.\"\"\"\nself.setForegroundRole(gui.palette.ROLE.get_enum_value(role))\ndef get_background_role(self) -&gt; gui.palette.RoleStr:\n\"\"\"Get background role for this widget.\"\"\"\nreturn gui.palette.ROLE.inverse[self.backgroundRole()]\ndef set_background_role(self, role: gui.palette.RoleStr | gui.Palette.ColorRole):\n\"\"\"Get foreground role for this widget.\"\"\"\nself.setBackgroundRole(gui.palette.ROLE.get_enum_value(role))\ndef set_window_flags(self, *flags: constants.WindowTypeStr, append: bool = False):\nresult = constants.WINDOW_TYPE.merge_flags(flags)\nif append:\nresult = result | self.windowFlags()\nself.setWindowFlags(result)\ndef set_flags(\nself,\n*,\nminimize: bool | None = None,\nmaximize: bool | None = None,\nclose: bool | None = None,\nstay_on_top: bool | None = None,\nframeless: bool | None = None,\nwindow: bool | None = None,\ndialog: bool | None = None,\ntooltip: bool | None = None,\ntool: bool | None = None,\ncustomize: bool | None = None,\ncover: bool | None = None,\nwindow_title: bool | None = None,\n):\n\"\"\"Set window flags.\n        Arguments:\n            minimize: set WindowMinimizeButtonHint flag\n            maximize: set WindowMaximizeButtonHint flag\n            close: set WindowCloseButtonHint flag\n            stay_on_top: set WindowStaysOnTopHint flag\n            frameless: set FramelessWindowHint flag\n            window: set Window flag\n            dialog: set Dialog flag\n            tooltip: set ToolTip flag\n            tool: set Tool flag\n            customize: set CustomizeWindowHint flag\n            cover: set CoverWindow flag\n            window_title: set WindowTitleHint flag\n        \"\"\"\nflags = {\nconstants.WindowType.WindowMinimizeButtonHint: minimize,\nconstants.WindowType.WindowMaximizeButtonHint: maximize,\nconstants.WindowType.WindowCloseButtonHint: close,\nconstants.WindowType.WindowStaysOnTopHint: stay_on_top,\nconstants.WindowType.FramelessWindowHint: frameless,\nconstants.WindowType.Window: window,\nconstants.WindowType.Dialog: dialog,\nconstants.WindowType.ToolTip: tooltip,\nconstants.WindowType.Tool: tool,\nconstants.WindowType.CustomizeWindowHint: customize,\nconstants.WindowType.CoverWindow: cover,\nconstants.WindowType.WindowTitleHint: window_title,\n}\nfor k, v in flags.items():\nif v is not None:\nself.setWindowFlag(k, v)\ndef set_attributes(\nself,\n*,\naccept_drops: bool | None = None,\nalways_show_tooltips: bool | None = None,\ncustom_whats_this: bool | None = None,\ndelete_on_close: bool | None = None,\ndisabled: bool | None = None,\ndont_show_on_screen: bool | None = None,\nforce_disabled: bool | None = None,\nforce_updates_disabled: bool | None = None,\nhover: bool | None = None,\ninput_method_enabled: bool | None = None,\nkeyboard_focus_change: bool | None = None,\nkey_compression: bool | None = None,\nlayout_on_entire_rect: bool | None = None,\nlayout_uses_widget_rect: bool | None = None,\nmapped: bool | None = None,\nmouse_no_mask: bool | None = None,\nmouse_tracking: bool | None = None,\nmoved: bool | None = None,\nno_child_events_for_parent: bool | None = None,\nno_child_events_from_children: bool | None = None,\nno_mouse_replay: bool | None = None,\nno_mouse_propagation: bool | None = None,\ntransparent_for_mouse_events: bool | None = None,\nno_system_background: bool | None = None,\nopaque_paint_event: bool | None = None,\noutside_ws_range: bool | None = None,\npaint_on_screen: bool | None = None,\npaint_unclipped: bool | None = None,\npending_move_event: bool | None = None,\npending_resize_egent: bool | None = None,\nquit_on_close: bool | None = None,\nresized: bool | None = None,\nright_to_left: bool | None = None,\nset_cursor: bool | None = None,\nset_font: bool | None = None,\nset_palette: bool | None = None,\nset_style: bool | None = None,\nstatic_contents: bool | None = None,\nstyle_sheet: bool | None = None,\nstyle_sheet_target: bool | None = None,\ntablet_tracking: bool | None = None,\ntranslucent_background: bool | None = None,\nunder_mouse: bool | None = None,\nupdates_disabled: bool | None = None,\nwindow_modified: bool | None = None,\nwindow_propagation: bool | None = None,\nmac_always_show_tool_window: bool | None = None,\nset_locale: bool | None = None,\nstyled_background: bool | None = None,\nshow_without_activating: bool | None = None,\nnative_window: bool | None = None,\ndont_create_native_ancestors: bool | None = None,\naccept_touch_events: bool | None = None,\ntouch_pad_single_touch_events: bool | None = None,\nalways_stack_on_top: bool | None = None,\ncontents_margins_respects_safe_area: bool | None = None,\n):\n\"\"\"Set window attributes.\n        Attributes:\n            accept_drops: set AcceptDrops attribute\n            always_show_tooltips: set AlwaysShowToolTips attribute\n            custom_whats_this: set CustomWhatsThis attribute\n            delete_on_close: set DeleteOnClose attribute\n            disabled: set Disabled attribute\n            dont_show_on_screen: set DontShowOnScreen attribute\n            force_disabled: set ForceDisabled attribute\n            force_updates_disabled: set ForceUpdatesDisabled attribute\n            hover: set Hover attribute\n            input_method_enabled: set InputMethodEnabled attribute\n            keyboard_focus_change: set KeyboardFocusChange attribute\n            key_compression: set KeyCompression attribute\n            layout_on_entire_rect: set LayoutOnEntireRect attribute\n            layout_uses_widget_rect: set LayoutUsesWidgetRect attribute\n            mapped: set Mapped attribute\n            mouse_no_mask: set MouseNoMask attribute\n            mouse_tracking: set MouseTracking attribute\n            moved: set Moved attribute\n            no_child_events_for_parent: set NoChildEventsForParent attribute\n            no_child_events_from_children: set NoChildEventsFromChildren attribute\n            no_mouse_replay: set NoMouseReplay attribute\n            no_mouse_propagation: set NoMousePropagation attribute\n            transparent_for_mouse_events: set TransparentForMouseEvents attribute\n            no_system_background: set NoSystemBackground attribute\n            opaque_paint_event: set OpaquePaintEvent attribute\n            outside_ws_range: set OutsideWSRange attribute\n            paint_on_screen: set PaintOnScreen attribute\n            paint_unclipped: set PaintUnclipped attribute\n            pending_move_event: set PendingMoveEvent attribute\n            pending_resize_egent: set PendingResizeEvent attribute\n            quit_on_close: set QuitOnClose attribute\n            resized: set Resized attribute\n            right_to_left: set RightToLeft attribute\n            set_cursor: set SetCursor attribute\n            set_font: set SetFont attribute\n            set_palette: set SetPalette attribute\n            set_style: set SetStyle attribute\n            static_contents: set StaticContents attribute\n            style_sheet: set StyleSheet attribute\n            style_sheet_target: set StyleSheetTarget attribute\n            tablet_tracking: set TabletTracking attribute\n            translucent_background: set TranslucentBackground attribute\n            under_mouse: set UnderMouse attribute\n            updates_disabled: set UpdatesDisabled attribute\n            window_modified: set WindowModified attribute\n            window_propagation: set WindowPropagation attribute\n            mac_always_show_tool_window: set MacAlwaysShowToolWindow attribute\n            set_locale: set SetLocale attribute\n            styled_background: set StyledBackground attribute\n            show_without_activating: set ShowWithoutActivating attribute\n            native_window: set NativeWindow attribute\n            dont_create_native_ancestors: set DontCreateNativeAncestors attribute\n            accept_touch_events: set AcceptTouchEvents attribute\n            touch_pad_single_touch_events: set TouchPadAcceptSingleTouchEvents attribute\n            always_stack_on_top: set AlwaysStackOnTop attribute\n            contents_margins_respects_safe_area: set ContentsMarginsRespectsSafeArea\n                                                 attribute\n        \"\"\"\nAttr = constants.WidgetAttribute\nflags = {\nAttr.WA_AcceptDrops: accept_drops,\nAttr.WA_AlwaysShowToolTips: always_show_tooltips,\nAttr.WA_CustomWhatsThis: custom_whats_this,\nAttr.WA_DeleteOnClose: delete_on_close,\nAttr.WA_Disabled: disabled,\nAttr.WA_DontShowOnScreen: dont_show_on_screen,\nAttr.WA_ForceDisabled: force_disabled,\nAttr.WA_ForceUpdatesDisabled: force_updates_disabled,\nAttr.WA_Hover: hover,\nAttr.WA_InputMethodEnabled: input_method_enabled,\nAttr.WA_KeyboardFocusChange: keyboard_focus_change,\nAttr.WA_KeyCompression: key_compression,\nAttr.WA_LayoutOnEntireRect: layout_on_entire_rect,\nAttr.WA_LayoutUsesWidgetRect: layout_uses_widget_rect,\nAttr.WA_Mapped: mapped,\nAttr.WA_MouseNoMask: mouse_no_mask,\nAttr.WA_MouseTracking: mouse_tracking,\nAttr.WA_Moved: moved,\nAttr.WA_NoChildEventsForParent: no_child_events_for_parent,\nAttr.WA_NoChildEventsFromChildren: no_child_events_from_children,\nAttr.WA_NoMouseReplay: no_mouse_replay,\nAttr.WA_NoMousePropagation: no_mouse_propagation,\nAttr.WA_TransparentForMouseEvents: transparent_for_mouse_events,\nAttr.WA_NoSystemBackground: no_system_background,\nAttr.WA_OpaquePaintEvent: opaque_paint_event,\nAttr.WA_OutsideWSRange: outside_ws_range,\nAttr.WA_PaintOnScreen: paint_on_screen,\nAttr.WA_PaintUnclipped: paint_unclipped,\nAttr.WA_PendingMoveEvent: pending_move_event,\nAttr.WA_PendingResizeEvent: pending_resize_egent,\nAttr.WA_QuitOnClose: quit_on_close,\nAttr.WA_Resized: resized,\nAttr.WA_RightToLeft: right_to_left,\nAttr.WA_SetCursor: set_cursor,\nAttr.WA_SetFont: set_font,\nAttr.WA_SetPalette: set_palette,\nAttr.WA_SetStyle: set_style,\nAttr.WA_StaticContents: static_contents,\nAttr.WA_StyleSheet: style_sheet,\nAttr.WA_StyleSheetTarget: style_sheet_target,\nAttr.WA_TabletTracking: tablet_tracking,\nAttr.WA_TranslucentBackground: translucent_background,\nAttr.WA_UnderMouse: under_mouse,\nAttr.WA_UpdatesDisabled: updates_disabled,\nAttr.WA_WindowModified: window_modified,\nAttr.WA_WindowPropagation: window_propagation,\nAttr.WA_MacAlwaysShowToolWindow: mac_always_show_tool_window,\nAttr.WA_SetLocale: set_locale,\nAttr.WA_StyledBackground: styled_background,\nAttr.WA_ShowWithoutActivating: show_without_activating,\nAttr.WA_NativeWindow: native_window,\nAttr.WA_DontCreateNativeAncestors: dont_create_native_ancestors,\nAttr.WA_AcceptTouchEvents: accept_touch_events,\nAttr.WA_TouchPadAcceptSingleTouchEvents: touch_pad_single_touch_events,\nAttr.WA_AlwaysStackOnTop: always_stack_on_top,\nAttr.WA_ContentsMarginsRespectsSafeArea: contents_margins_respects_safe_area,\n}\nfor k, v in flags.items():\nif v is not None:\nself.setAttribute(k, v)\ndef set_modality(\nself, modality: constants.WindowModalityStr | constants.WindowModality\n):\n\"\"\"Set modality for the dialog.\n        Args:\n            modality: modality for the main window\n        \"\"\"\nself.setWindowModality(constants.WINDOW_MODALITY.get_enum_value(modality))\ndef get_modality(self) -&gt; constants.WindowModalityStr:\n\"\"\"Get the current modality modes as a string.\n        Returns:\n            modality mode\n        \"\"\"\nreturn constants.WINDOW_MODALITY.inverse[self.windowModality()]\ndef set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr\n| widgets.QSizePolicy.Policy\n| None = None,\nvertical: widgets.sizepolicy.SizePolicyStr\n| widgets.QSizePolicy.Policy\n| None = None,\n):\n\"\"\"Set the size policy.\n        Args:\n            horizontal: horizontal size policy\n            vertical: vertical size policy\n        \"\"\"\nsp = self.get_size_policy()\nif horizontal is not None:\nsp.set_horizontal_policy(horizontal)\nif vertical is not None:\nsp.set_vertical_policy(vertical)\nself.setSizePolicy(sp)\ndef get_size_policy(self) -&gt; widgets.SizePolicy:\n\"\"\"Get size policy.\"\"\"\nqpol = self.sizePolicy()\nif isinstance(qpol, widgets.SizePolicy):\nreturn qpol\nreturn widgets.SizePolicy.clone(qpol)\ndef get_palette(self) -&gt; gui.Palette:\nreturn gui.Palette(self.palette())\ndef set_background_color(self, color: datatypes.ColorType):\ncol_str = \"\" if color is None else colors.get_color(color).name()\nwith self.edit_stylesheet() as ss:\nss.backgroundColor.setValue(col_str)\n@contextlib.contextmanager\ndef grab_mouse_events(\nself, cursor_shape: constants.CursorShapeStr | None = None\n) -&gt; Iterator[None]:\n\"\"\"Context manager to grab mouse events.\"\"\"\nif cursor_shape is not None:\nself.grabMouse(constants.CURSOR_SHAPE[cursor_shape])\nelse:\nself.grabMouse()\nyield None\nself.releaseMouse()\n@contextlib.contextmanager\ndef grab_keyboard_events(self) -&gt; Iterator[None]:\n\"\"\"Context manager to grab keyboard events.\"\"\"\nself.grabKeyboard()\nyield None\nself.releaseKeyboard()\n@contextlib.contextmanager\ndef updates_off(self) -&gt; Iterator[None]:\n\"\"\"Context manager to turn off updates for this widget.\"\"\"\nupdates = self.updatesEnabled()\nself.setUpdatesEnabled(False)\nyield None\nself.setUpdatesEnabled(updates)\n@contextlib.contextmanager\ndef edit_stylesheet(self) -&gt; Iterator[qstylizer.style.StyleSheet]:\n\"\"\"Context manager to edit the stylesheet (using qstylizer).\"\"\"\nss = self.get_stylesheet()\nyield ss\nself.set_stylesheet(ss)\ndef set_stylesheet(\nself, ss: None | str | qstylizer.style.StyleSheet | datatypes.PathType\n):\n\"\"\"Set stylesheet for this widget.\"\"\"\nmatch ss:\ncase None:\nss = \"\"\ncase str():\npass\ncase os.PathLike():\nss = pathlib.Path(ss).read_text()\ncase qstylizer.style.StyleSheet():\nss = str(ss)\nself.setStyleSheet(ss)\ndef get_stylesheet(self) -&gt; qstylizer.style.StyleSheet:\n\"\"\"Get current stylesheet.\"\"\"\ntry:\nreturn qstylizer.parser.parse(self.styleSheet())\nexcept ValueError:\nreturn qstylizer.style.StyleSheet()\n@contextlib.contextmanager\ndef edit_palette(self) -&gt; Iterator[gui.Palette]:\n\"\"\"Context manager to edit the palette of the widget.\"\"\"\npalette = gui.Palette(self.palette())\nyield palette\nself.setPalette(palette)\n@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\n\"\"\"Context manager to edit the font of the widget.\"\"\"\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\ndef set_context_menu_policy(\nself, policy: constants.ContextPolicyStr | constants.ContextMenuPolicy\n):\n\"\"\"Set contextmenu policy for given item view.\n        Args:\n            policy: contextmenu policy to use\n        \"\"\"\nself.setContextMenuPolicy(constants.CONTEXT_POLICY.get_enum_value(policy))\ndef get_context_menu_policy(self) -&gt; constants.ContextPolicyStr:\n\"\"\"Return current contextmenu policy.\n        Returns:\n            contextmenu policy\n        \"\"\"\nreturn constants.CONTEXT_POLICY.inverse[self.contextMenuPolicy()]\ndef set_window_state(self, state: constants.WindowStateStr | constants.WindowState):\n\"\"\"Set window state for given item view.\n        Args:\n            state: window state to use\n        \"\"\"\nself.setWindowState(constants.WINDOW_STATES.get_enum_value(state))\ndef get_window_state(self) -&gt; constants.WindowStateStr:\n\"\"\"Return current window state.\n        Returns:\n            window state\n        \"\"\"\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\ndef set_custom_menu(self, method: Callable):\nself.set_context_menu_policy(\"custom\")\nself.customContextMenuRequested.connect(method)\n@property\ndef box(self) -&gt; widgets.Layout:\nreturn self.layout()\n@box.setter\ndef box(self, layout: widgets.Layout):\nself.set_layout(layout)\n@overload\ndef set_layout(\nself, layout: Literal[\"horizontal\"], margin: int | None = None, **kwargs\n) -&gt; widgets.HBoxLayout:\npass\n@overload\ndef set_layout(\nself, layout: Literal[\"vertical\"], margin: int | None = None, **kwargs\n) -&gt; widgets.VBoxLayout:\npass\n@overload\ndef set_layout(\nself, layout: Literal[\"grid\"], margin: int | None = None, **kwargs\n) -&gt; widgets.GridLayout:\npass\n@overload\ndef set_layout(\nself, layout: Literal[\"border\"], margin: int | None = None, **kwargs\n) -&gt; custom_widgets.BorderLayout:\npass\n@overload\ndef set_layout(\nself, layout: Literal[\"flow\"], margin: int | None = None, **kwargs\n) -&gt; custom_widgets.FlowLayout:\npass\n@overload\ndef set_layout(\nself, layout: Literal[\"form\"], margin: int | None = None, **kwargs\n) -&gt; widgets.FormLayout:\npass\n@overload\ndef set_layout(\nself, layout: Literal[\"stacked\"], margin: int | None = None, **kwargs\n) -&gt; widgets.StackedLayout:\npass\ndef set_layout(\nself,\nlayout: LayoutStr | widgets.QLayout,\n*,\nmargin: int | None = None,\n**kwargs: datatypes.VariantType,\n) -&gt; widgets.QLayout:\n\"\"\"Quick way to set a layout.\n        Sets layout to given layout, also allows setting margin and spacing.\n        Args:\n            layout: Layout to set\n            margin: margin to use in pixels\n            kwargs: keyword arguments passed to layout\n        Returns:\n            Layout\n        \"\"\"\nfrom prettyqt import custom_widgets\nmatch layout:\ncase \"horizontal\":\nlayout = widgets.HBoxLayout(**kwargs)\ncase \"vertical\":\nlayout = widgets.VBoxLayout(**kwargs)\ncase \"grid\":\nlayout = widgets.GridLayout(**kwargs)\ncase \"form\":\nlayout = widgets.FormLayout(**kwargs)\ncase \"stacked\":\nlayout = widgets.StackedLayout(**kwargs)\ncase \"flow\":\nlayout = custom_widgets.FlowLayout(**kwargs)\ncase \"border\":\nlayout = custom_widgets.BorderLayout(**kwargs)\ncase widgets.QLayout():\nlayout = layout\ncase _:\nraise ValueError(f\"Invalid Layout {layout}\")\nself.setLayout(layout)\nif margin is not None:\nlayout.set_margin(margin)\nreturn layout\ndef position_on(\nself,\nwhere: PositionPossibilityType,\nhow: Literal[\n\"center\",\n\"top\",\n\"left\",\n\"bottom\",\n\"right\",\n\"top_left\",\n\"top_right\",\n\"bottom_left\",\n\"bottom_right\",\n] = \"center\",\n*,\nscale_ratio: int | None = None,\nx_offset: int = 0,\ny_offset: int = 0,\n):\n\"\"\"Position widget on another widget / window / screen.\n        Arguments:\n            where: where to positin on\n            how: How to align\n            scale_ratio: Resize to scale_ratio * target size\n            x_offset: additional x offset for final position\n            y_offset: additional y offset for final position\n        \"\"\"\ndo_scale = True\nmatch where:\ncase \"mouse\":\ngeom = core.Rect(gui.Cursor.pos(), gui.Cursor.pos())\ndo_scale = False\ncase core.QPoint():\ngeom = core.Rect(where, where)\ndo_scale = False\ncase (int(), int()):\np = core.Point(*where)\ngeom = core.Rect(p, p)\ndo_scale = False\ncase (int(), int(), int(), int()):\ngeom = core.Rect(*where)\ncase \"parent\":\ngeom = self.parent().frameGeometry()\ncase \"window\":\ngeom = self.window().frameGeometry()\ncase widgets.QWidget():\ngeom = where.frameGeometry()\ncase core.QRect():\ngeom = where\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\ncase _:\nraise ValueError(where)\nif scale_ratio is not None and do_scale:\nself.resize(\nint(geom.width() * scale_ratio),\nint(geom.height() * scale_ratio),\n)\nown_geo = self.frameGeometry()\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top() + own_geo.height() // 2)\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom() - own_geo.height() // 2)\ncase \"left\":\nnew = core.Point(geom.left() + own_geo.width() // 2, geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right() - own_geo.width() // 2, geom.center().y())\ncase \"top_right\":\nnew = core.Point(\ngeom.right() - own_geo.width() // 2,\ngeom.top() + own_geo.height() // 2,\n)\ncase \"top_left\":\nnew = core.Point(\ngeom.left() + own_geo.width() // 2,\ngeom.top() + own_geo.height() // 2,\n)\ncase \"bottom_right\":\nnew = core.Point(\ngeom.right() - own_geo.width() // 2,\ngeom.bottom() - own_geo.height() // 2,\n)\ncase \"bottom_left\":\nnew = core.Point(\ngeom.left() + own_geo.width() // 2,\ngeom.bottom() - own_geo.height() // 2,\n)\ncase _:\nraise ValueError(how)\nnew = core.Point(new.x() + x_offset, new.y() + y_offset)\nown_geo.moveCenter(new)\nself.move(own_geo.topLeft())\ndef set_cursor(\nself, cursor: constants.CursorShapeStr | constants.CursorShape | gui.QCursor\n):\n\"\"\"Set the cursor for this widget.\"\"\"\nif isinstance(cursor, gui.QCursor):\ncurs = cursor\nelse:\ncurs = gui.Cursor(constants.CURSOR_SHAPE.get_enum_value(cursor))\nself.setCursor(curs)\ndef set_focus_policy(self, policy: constants.FocusPolicyStr | constants.FocusPolicy):\n\"\"\"Set the way the widget accepts keyboard focus.\n        Args:\n            policy (str): Focus policy\n        \"\"\"\nself.setFocusPolicy(constants.FOCUS_POLICY.get_enum_value(policy))\ndef get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return waay the widget accepts keyboard focus.\n        Returns:\n            str: Focus policy\n        \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\ndef set_focus(self, reason: constants.FocusReasonStr | None = None):\nif reason is None:\nself.setFocus()\nelse:\nself.setFocus(constants.FOCUS_REASONS[reason])\ndef set_font_size(self, size: int):\nfont = self.font()\nfont.setPointSize(size)\nself.setFont(font)\ndef get_font_metrics(self) -&gt; gui.FontMetrics:\nreturn gui.FontMetrics(self.fontMetrics())\ndef get_font_info(self) -&gt; gui.FontInfo:\nreturn gui.FontInfo(self.fontInfo())\ndef set_margin(self, margin: datatypes.MarginsType):\n\"\"\"Set content margins for the widget.\n        Arguments:\n            margin: margins to use\n        \"\"\"\nself.setContentsMargins(datatypes.to_margins(margin))\ndef raise_dock(self) -&gt; bool:\nw = self.find_parent(widgets.QDockWidget)\nif w is None:\nreturn False\nw.setVisible(True)\nw.raise_()\nreturn True\ndef set_mask(\nself,\narea: datatypes.RectType | gui.QRegion | gui.QBitmap | None,\ntyp: gui.region.RegionTypeStr = \"rectangle\",\n):\n\"\"\"Set mask of the widget.\n        Arguments:\n            area: Mask area\n            typ: type of region (only used if area is a QRegion)\n        \"\"\"\nmatch area:\ncase None:\nself.clearMask()\nreturn\ncase (int(), int(), int(), int()):\narea = gui.Region(*area, gui.region.REGION_TYPE[typ])\ncase core.QRect():\narea = gui.Region(area, gui.region.REGION_TYPE[typ])\nself.setMask(area)\ndef set_window_file_path(self, path: datatypes.PathType):\nself.setWindowFilePath(os.fspath(path))\ndef get_window_file_path(self) -&gt; pathlib.Path | None:\npath = self.windowFilePath()\nreturn pathlib.Path(path) if path else None\ndef get_image(self) -&gt; gui.QPixmap:\n\"\"\"Get a pixmap for the widget.\n        Implements a workaround to also include QOpenGlWidgets.\n        \"\"\"\nfrom prettyqt.qt import QtOpenGLWidgets\nimage = self.grab()\nwith gui.Painter(image) as painter:\npainter.set_composition_mode(\"source_atop\")\nfor gl_widget in self.find_children(QtOpenGLWidgets.QOpenGLWidget):\nd = gl_widget.mapToGlobal(core.Point()) - self.mapToGlobal(core.Point())\npainter.drawImage(d, gl_widget.grabFramebuffer())\nreturn image\ndef get_screen(self) -&gt; gui.Screen | None:\nwindow = self.window().windowHandle()\nreturn None if window is None else gui.Screen(window.screen())\ndef delete_children(self):\n\"\"\"Delete all children of the specified QObject.\"\"\"\nif hasattr(self, \"clear\"):\nreturn self.clear()\nlayout = self.layout()\nwhile layout.count():\nitem = layout.takeAt(0)\nif widget := item.widget():\nwidget.deleteLater()\ndef get_cursor(self) -&gt; gui.Cursor:\nreturn gui.Cursor(self.cursor())\ndef set_style(self, style: str | widgets.QStyle):\n\"\"\"Set widget style.\"\"\"\nif isinstance(style, str):\nstyle = widgets.QStyleFactory.create(style)\nself.setStyle(style)\ndef child_at(self, *args, typ: type[widgets.QWidget] | None = None):\n\"\"\"Get child widget at position. If type is given, search parents recursively.\"\"\"\nchild = super().childAt(*args)\nif typ is None or isinstance(child, typ):\nreturn child\nwhile child := child.parent():\nif isinstance(child, typ):\nreturn child\ndef set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection | None\n):\n\"\"\"Set layout direction.\n        Args:\n            direction: layout direction\n        \"\"\"\nif direction is None:\nself.unsetLayoutDirection()\nelse:\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\ndef get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n        Returns:\n            layout direction\n        \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre> Name Children Inherits Widgetprettyqt.widgets.widget <ul><li><code>CustomTitleBar</code></li><li><code>StarEditor</code></li><li><code>Separator</code></li><li>IconLabel</li><li>CrossFadeWidget</li><li>FaderWidget</li><li>ImageViewer</li><li>WidgetEditor</li><li>CommandPalette</li><li>BrushEdit</li><li>...</li></ul> <ul><li>WidgetMixin</li><li>QWidget</li></ul> FrameMixinprettyqt.widgets.frame <ul><li>Frame</li><li>AbstractScrollAreaMixin</li><li>Label</li><li>LCDNumber</li><li>ToolBox</li><li><code>SplitterMixin</code></li><li>StackedWidget</li></ul> <ul><li>WidgetMixin</li></ul> FocusFrameprettyqt.widgets.focusframe <ul><li>WidgetMixin</li><li>QFocusFrame</li></ul> AbstractSliderMixinprettyqt.widgets.abstractslider <ul><li>AbstractSlider</li><li><code>ScrollBarMixin</code></li><li>Slider</li><li>Dial</li></ul> <ul><li>WidgetMixin</li></ul> AbstractButtonMixinprettyqt.widgets.abstractbuttonAbstract button widget base class, providing functionality common to buttons. <ul><li>AbstractButton</li><li>PushButtonMixin</li><li>ToolButton</li><li>RadioButton</li><li>CheckBox</li></ul> <ul><li>WidgetMixin</li></ul> LineEditprettyqt.widgets.lineedit <ul><li>ListInput</li><li>IntLineEdit</li><li>FloatLineEdit</li><li>UrlLineEdit</li><li>StringListEdit</li></ul> <ul><li>WidgetMixin</li><li>QLineEdit</li></ul> AbstractSpinBoxMixinprettyqt.widgets.abstractspinbox <ul><li>AbstractSpinBox</li><li>SpinBox</li><li>DoubleSpinBox</li><li>DateTimeEditMixin</li></ul> <ul><li>WidgetMixin</li></ul> <code>RubberBandMixin</code>prettyqt.widgets.rubberband <ul><li>RubberBand</li></ul> <ul><li>WidgetMixin</li></ul> DialogButtonBoxprettyqt.widgets.dialogbuttonbox <ul><li>WidgetMixin</li><li>QDialogButtonBox</li></ul> DialogMixinprettyqt.widgets.dialog <ul><li>Dialog</li><li>MessageBox</li><li>ErrorMessage</li><li>ProgressDialog</li><li>FontDialog</li><li>FileDialog</li><li>ColorDialog</li><li>InputDialog</li><li><code>WizardMixin</code></li><li>AbstractPrintDialogMixin</li><li>...</li></ul> <ul><li>WidgetMixin</li></ul> DockWidgetprettyqt.widgets.dockwidget <ul><li>WidgetMixin</li><li>QDockWidget</li></ul> <code>MenuMixin</code>prettyqt.widgets.menu <ul><li>Menu</li></ul> <ul><li>WidgetMixin</li></ul> MainWindowprettyqt.widgets.mainwindow <ul><li><code>DetachedTab</code></li><li>IconBrowser</li><li>ObjectBrowser</li><li>SidebarWidget</li><li>QObjectDetailsDialog</li></ul> <ul><li>WidgetMixin</li><li>QMainWindow</li></ul> MenuBarprettyqt.widgets.menubar <ul><li>WidgetMixin</li><li>QMenuBar</li></ul> StatusBarprettyqt.widgets.statusbar <ul><li>WidgetMixin</li><li>QStatusBar</li></ul> <code>TabBarMixin</code>prettyqt.widgets.tabbar <ul><li>TabBar</li></ul> <ul><li>WidgetMixin</li></ul> TabWidgetprettyqt.widgets.tabwidget <ul><li>WidgetMixin</li><li>QTabWidget</li></ul> MdiSubWindowprettyqt.widgets.mdisubwindow <ul><li>WidgetMixin</li><li>QMdiSubWindow</li></ul> <code>ToolBarMixin</code>prettyqt.widgets.toolbar <ul><li>ToolBar</li></ul> <ul><li>WidgetMixin</li></ul> ComboBoxMixinprettyqt.widgets.comboboxCombobox that lets the user select a font family. <ul><li>ComboBox</li><li>FontComboBox</li></ul> <ul><li>WidgetMixin</li></ul> KeySequenceEditprettyqt.widgets.keysequenceedit <ul><li>WidgetMixin</li><li>QKeySequenceEdit</li></ul> CalendarWidgetprettyqt.widgets.calendarwidget <ul><li>WidgetMixin</li><li>QCalendarWidget</li></ul> ProgressBarprettyqt.widgets.progressbar <ul><li>WidgetMixin</li><li>QProgressBar</li></ul> <code>SplashScreenMixin</code>prettyqt.widgets.splashscreen <ul><li>SplashScreen</li></ul> <ul><li>WidgetMixin</li></ul> GroupBoxprettyqt.widgets.groupbox <ul><li>OptionalWidget</li><li>FlagSelectionWidget</li><li>StringOrNumberWidget</li><li>SelectionWidget</li></ul> <ul><li>WidgetMixin</li><li>QGroupBox</li></ul> SplitterHandleprettyqt.widgets.splitterhandle <ul><li>WidgetMixin</li><li>QSplitterHandle</li></ul> <code>WizardPageMixin</code>prettyqt.widgets.wizardpage <ul><li>WizardPage</li></ul> <ul><li>WidgetMixin</li></ul> SizeGripprettyqt.widgets.sizegrip <ul><li>WidgetMixin</li><li>QSizeGrip</li></ul> KeyCombinationEditprettyqt.custom_widgets.editors.keycombinationedit <ul><li>WidgetMixin</li><li>QKeySequenceEdit</li></ul> BaseIPythonWidgetprettyqt.ipython.baseipythonwidgetConvenience class for a live IPython console widget running out-of-process. <ul><li>InProcessIPythonWidget</li><li>OutOfProcessIPythonWidget</li></ul> <ul><li>RichJupyterWidget</li><li>WidgetMixin</li></ul> VideoWidgetprettyqt.multimediawidgets.videowidget <ul><li>WidgetMixin</li><li>QVideoWidget</li></ul> OpenGLWidgetprettyqt.openglwidgets.openglwidget <ul><li>WidgetMixin</li><li>QOpenGLWidget</li></ul> PrintPreviewWidgetprettyqt.printsupport.printpreviewwidget <ul><li>WidgetMixin</li><li>QPrintPreviewWidget</li></ul> HelpSearchResultWidgetprettyqt.qthelp.helpsearchresultwidgetText browser to display search results. <ul><li>WidgetMixin</li></ul> HelpSearchQueryWidgetprettyqt.qthelp.helpsearchquerywidget <ul><li>WidgetMixin</li><li>QHelpSearchQueryWidget</li></ul> QuickWidgetprettyqt.quickwidgets.quickwidget <ul><li>WidgetMixin</li><li>QQuickWidget</li></ul> SvgWidgetprettyqt.svgwidgets.svgwidget <ul><li>WidgetMixin</li><li>QSvgWidget</li></ul> WebEngineViewprettyqt.webenginewidgets.webengineview <ul><li>WidgetMixin</li><li>QWebEngineView</li></ul>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.add_action","title":"<code>add_action(text: str | gui.Action, *, parent: widgets.QWidget | None = None, data: Any = None, **kwargs: datatypes.VariantType) -&gt; gui.Action</code>","text":"<p>Add an action to the menu.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | gui.Action</code> <p>Label for the action</p> required <code>parent</code> <code>widgets.QWidget | None</code> <p>parent</p> <code>None</code> <code>data</code> <code>Any</code> <p>data for the Action</p> <code>None</code> <code>kwargs</code> <code>datatypes.VariantType</code> <p>kwargs passed to action ctor</p> <code>{}</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_action(\nself,\ntext: str | gui.Action,\n*,\nparent: widgets.QWidget | None = None,\ndata: Any = None,\n**kwargs: datatypes.VariantType,\n) -&gt; gui.Action:\n\"\"\"Add an action to the menu.\n    Args:\n        text: Label for the action\n        parent: parent\n        data: data for the Action\n        kwargs: kwargs passed to action ctor\n    Returns:\n        Action added to menu\n    \"\"\"\nif isinstance(text, str):\naction = gui.Action(parent=parent or self, text=text, **kwargs)\nelse:\naction = text\naction.setParent(self)\nself.addAction(action)\naction.setData(data)\nreturn action\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.add_shortcut","title":"<code>add_shortcut(keysequence: datatypes.KeyCombinationType, *, callback: Callable | None = None, context: constants.ShortcutContextStr = 'window') -&gt; gui.Shortcut</code>","text":"<p>Add shortcut to widget.</p> <p>Adds as shortcut for given callback and context to this widget.</p> <p>Parameters:</p> Name Type Description Default <code>keysequence</code> <code>datatypes.KeyCombinationType</code> <p>Key sequence</p> required <code>callback</code> <code>Callable | None</code> <p>Callback for the shortcut</p> <code>None</code> <code>context</code> <code>constants.ShortcutContextStr</code> <p>context for this shortcut</p> <code>'window'</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def add_shortcut(\nself,\nkeysequence: datatypes.KeyCombinationType,\n*,\ncallback: Callable | None = None,\ncontext: constants.ShortcutContextStr = \"window\",\n) -&gt; gui.Shortcut:\n\"\"\"Add shortcut to widget.\n    Adds as shortcut for given callback and context to this widget.\n    Args:\n        keysequence: Key sequence\n        callback: Callback for the shortcut\n        context: context for this shortcut\n    Returns:\n        shortcut object\n    \"\"\"\nreturn gui.Shortcut(\ndatatypes.to_keysequence(keysequence),\nself,\ncallback,\ncontext=constants.SHORTCUT_CONTEXT.get_enum_value(context),\n)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.child_at","title":"<code>child_at(*args, typ: type[widgets.QWidget] | None = None)</code>","text":"<p>Get child widget at position. If type is given, search parents recursively.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def child_at(self, *args, typ: type[widgets.QWidget] | None = None):\n\"\"\"Get child widget at position. If type is given, search parents recursively.\"\"\"\nchild = super().childAt(*args)\nif typ is None or isinstance(child, typ):\nreturn child\nwhile child := child.parent():\nif isinstance(child, typ):\nreturn child\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.delete_children","title":"<code>delete_children()</code>","text":"<p>Delete all children of the specified QObject.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def delete_children(self):\n\"\"\"Delete all children of the specified QObject.\"\"\"\nif hasattr(self, \"clear\"):\nreturn self.clear()\nlayout = self.layout()\nwhile layout.count():\nitem = layout.takeAt(0)\nif widget := item.widget():\nwidget.deleteLater()\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.edit_font","title":"<code>edit_font() -&gt; Iterator[gui.Font]</code>","text":"<p>Context manager to edit the font of the widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef edit_font(self) -&gt; Iterator[gui.Font]:\n\"\"\"Context manager to edit the font of the widget.\"\"\"\nfont = gui.Font(self.font())\nyield font\nself.setFont(font)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.edit_palette","title":"<code>edit_palette() -&gt; Iterator[gui.Palette]</code>","text":"<p>Context manager to edit the palette of the widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef edit_palette(self) -&gt; Iterator[gui.Palette]:\n\"\"\"Context manager to edit the palette of the widget.\"\"\"\npalette = gui.Palette(self.palette())\nyield palette\nself.setPalette(palette)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.edit_stylesheet","title":"<code>edit_stylesheet() -&gt; Iterator[qstylizer.style.StyleSheet]</code>","text":"<p>Context manager to edit the stylesheet (using qstylizer).</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef edit_stylesheet(self) -&gt; Iterator[qstylizer.style.StyleSheet]:\n\"\"\"Context manager to edit the stylesheet (using qstylizer).\"\"\"\nss = self.get_stylesheet()\nyield ss\nself.set_stylesheet(ss)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_background_role","title":"<code>get_background_role() -&gt; gui.palette.RoleStr</code>","text":"<p>Get background role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_background_role(self) -&gt; gui.palette.RoleStr:\n\"\"\"Get background role for this widget.\"\"\"\nreturn gui.palette.ROLE.inverse[self.backgroundRole()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_context_menu_policy","title":"<code>get_context_menu_policy() -&gt; constants.ContextPolicyStr</code>","text":"<p>Return current contextmenu policy.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_context_menu_policy(self) -&gt; constants.ContextPolicyStr:\n\"\"\"Return current contextmenu policy.\n    Returns:\n        contextmenu policy\n    \"\"\"\nreturn constants.CONTEXT_POLICY.inverse[self.contextMenuPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_focus_policy","title":"<code>get_focus_policy() -&gt; constants.FocusPolicyStr</code>","text":"<p>Return waay the widget accepts keyboard focus.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_focus_policy(self) -&gt; constants.FocusPolicyStr:\n\"\"\"Return waay the widget accepts keyboard focus.\n    Returns:\n        str: Focus policy\n    \"\"\"\nreturn constants.FOCUS_POLICY.inverse[self.focusPolicy()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_foreground_role","title":"<code>get_foreground_role() -&gt; gui.palette.RoleStr</code>","text":"<p>Set foreground role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_foreground_role(self) -&gt; gui.palette.RoleStr:\n\"\"\"Set foreground role for this widget.\"\"\"\nreturn gui.palette.ROLE.inverse[self.foregroundRole()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_icon","title":"<code>get_icon() -&gt; gui.Icon | None</code>","text":"<p>Get the window icon (returns None if not existing).</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_icon(self) -&gt; gui.Icon | None:\n\"\"\"Get the window icon (returns None if not existing).\"\"\"\nicon = super().windowIcon()\nreturn None if icon.isNull() else gui.Icon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_image","title":"<code>get_image() -&gt; gui.QPixmap</code>","text":"<p>Get a pixmap for the widget.</p> <p>Implements a workaround to also include QOpenGlWidgets.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_image(self) -&gt; gui.QPixmap:\n\"\"\"Get a pixmap for the widget.\n    Implements a workaround to also include QOpenGlWidgets.\n    \"\"\"\nfrom prettyqt.qt import QtOpenGLWidgets\nimage = self.grab()\nwith gui.Painter(image) as painter:\npainter.set_composition_mode(\"source_atop\")\nfor gl_widget in self.find_children(QtOpenGLWidgets.QOpenGLWidget):\nd = gl_widget.mapToGlobal(core.Point()) - self.mapToGlobal(core.Point())\npainter.drawImage(d, gl_widget.grabFramebuffer())\nreturn image\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_layout_direction","title":"<code>get_layout_direction() -&gt; constants.LayoutDirectionStr</code>","text":"<p>Get the current layout direction.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_layout_direction(self) -&gt; constants.LayoutDirectionStr:\n\"\"\"Get the current layout direction.\n    Returns:\n        layout direction\n    \"\"\"\nreturn constants.LAYOUT_DIRECTION.inverse[self.layoutDirection()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_modality","title":"<code>get_modality() -&gt; constants.WindowModalityStr</code>","text":"<p>Get the current modality modes as a string.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_modality(self) -&gt; constants.WindowModalityStr:\n\"\"\"Get the current modality modes as a string.\n    Returns:\n        modality mode\n    \"\"\"\nreturn constants.WINDOW_MODALITY.inverse[self.windowModality()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_size_policy","title":"<code>get_size_policy() -&gt; widgets.SizePolicy</code>","text":"<p>Get size policy.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_size_policy(self) -&gt; widgets.SizePolicy:\n\"\"\"Get size policy.\"\"\"\nqpol = self.sizePolicy()\nif isinstance(qpol, widgets.SizePolicy):\nreturn qpol\nreturn widgets.SizePolicy.clone(qpol)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_stylesheet","title":"<code>get_stylesheet() -&gt; qstylizer.style.StyleSheet</code>","text":"<p>Get current stylesheet.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_stylesheet(self) -&gt; qstylizer.style.StyleSheet:\n\"\"\"Get current stylesheet.\"\"\"\ntry:\nreturn qstylizer.parser.parse(self.styleSheet())\nexcept ValueError:\nreturn qstylizer.style.StyleSheet()\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.get_window_state","title":"<code>get_window_state() -&gt; constants.WindowStateStr</code>","text":"<p>Return current window state.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def get_window_state(self) -&gt; constants.WindowStateStr:\n\"\"\"Return current window state.\n    Returns:\n        window state\n    \"\"\"\nreturn constants.WINDOW_STATES.inverse[self.windowState()]\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.grab_keyboard_events","title":"<code>grab_keyboard_events() -&gt; Iterator[None]</code>","text":"<p>Context manager to grab keyboard events.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef grab_keyboard_events(self) -&gt; Iterator[None]:\n\"\"\"Context manager to grab keyboard events.\"\"\"\nself.grabKeyboard()\nyield None\nself.releaseKeyboard()\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.grab_mouse_events","title":"<code>grab_mouse_events(cursor_shape: constants.CursorShapeStr | None = None) -&gt; Iterator[None]</code>","text":"<p>Context manager to grab mouse events.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef grab_mouse_events(\nself, cursor_shape: constants.CursorShapeStr | None = None\n) -&gt; Iterator[None]:\n\"\"\"Context manager to grab mouse events.\"\"\"\nif cursor_shape is not None:\nself.grabMouse(constants.CURSOR_SHAPE[cursor_shape])\nelse:\nself.grabMouse()\nyield None\nself.releaseMouse()\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.insertAction","title":"<code>insertAction(position_or_action: int | gui.QAction, action: gui.QAction)</code>","text":"<p>Extend insertAction to also allow int index.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def insertAction(self, position_or_action: int | gui.QAction, action: gui.QAction):\n\"\"\"Extend insertAction to also allow int index.\"\"\"\nif isinstance(position_or_action, int):\nactions = self.actions()\nif len(actions) == 0 or position_or_action &gt;= len(actions):\n# Insert as the first action or the last action.\nreturn super().addAction(action)\nposition_or_action = actions[position_or_action]\nsuper().insertAction(position_or_action, action)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.map_from","title":"<code>map_from(widget: widgets.QWidget | Literal['global', 'parent', 'window'], pos_or_rect: datatypes.PointType | datatypes.RectType | datatypes.PointFType | datatypes.RectFType) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF</code>","text":"<p>Map a point or rect from a widget, global position or parent.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>widgets.QWidget | Literal['global', 'parent', 'window']</code> <p>What to map from.</p> required <code>pos_or_rect</code> <code>datatypes.PointType | datatypes.RectType | datatypes.PointFType | datatypes.RectFType</code> <p>Point or rect to map.</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def map_from(\nself,\nwidget: widgets.QWidget | Literal[\"global\", \"parent\", \"window\"],\npos_or_rect: datatypes.PointType\n| datatypes.RectType\n| datatypes.PointFType\n| datatypes.RectFType,\n) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF:\n\"\"\"Map a point or rect from a widget, global position or parent.\n    Arguments:\n        widget: What to map from.\n        pos_or_rect: Point or rect to map.\n    \"\"\"\nmatch pos_or_rect:\ncase int(), int():\npos_or_rect = core.QPoint(*pos_or_rect)\ncase float(), float():\npos_or_rect = core.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\npos_or_rect = core.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\npos_or_rect = core.QRectF(*pos_or_rect)\nmatch pos_or_rect, widget:\ncase core.QRect() | core.QRectF(), widgets.QWidget():\ntop_left = super().mapFrom(widget, pos_or_rect.topLeft())\nbottom_right = super().mapFrom(widget, pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), widgets.QWidget():\nreturn super().mapFrom(widget, pos_or_rect)\ncase core.QRect() | core.QRectF(), \"parent\":\ntop_left = super().mapFromParent(pos_or_rect.topLeft())\nbottom_right = super().mapFromParent(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"parent\":\nreturn super().mapFromParent(pos_or_rect)\ncase core.QRect() | core.QRectF(), \"window\":\ntop_left = super().mapFrom(self.window(), pos_or_rect.topLeft())\nbottom_right = super().mapFrom(self.window(), pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"window\":\nreturn super().mapFrom(self.window(), pos_or_rect)\ncase core.QRect() | core.QRectF(), \"global\":\ntop_left = super().mapFromGlobal(pos_or_rect.topLeft())\nbottom_right = super().mapFromGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"global\":\nreturn super().mapFromGlobal(pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.map_to","title":"<code>map_to(widget: widgets.QWidget | Literal['global', 'parent', 'window'], pos_or_rect: datatypes.PointType | datatypes.RectType | datatypes.PointFType | datatypes.RectFType) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF</code>","text":"<p>Map a point or rect to a widget, global position or parent.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>widgets.QWidget | Literal['global', 'parent', 'window']</code> <p>What to map to.</p> required <code>pos_or_rect</code> <code>datatypes.PointType | datatypes.RectType | datatypes.PointFType | datatypes.RectFType</code> <p>Point or rect to map.</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def map_to(\nself,\nwidget: widgets.QWidget | Literal[\"global\", \"parent\", \"window\"],\npos_or_rect: datatypes.PointType\n| datatypes.RectType\n| datatypes.PointFType\n| datatypes.RectFType,\n) -&gt; core.QRect | core.QRectF | core.QPoint | core.QPointF:\n\"\"\"Map a point or rect to a widget, global position or parent.\n    Arguments:\n        widget: What to map to.\n        pos_or_rect: Point or rect to map.\n    \"\"\"\nmatch pos_or_rect:\ncase int(), int():\npos_or_rect = core.QPoint(*pos_or_rect)\ncase float(), float():\npos_or_rect = core.QPointF(*pos_or_rect)\ncase int(), int(), int(), int():\npos_or_rect = core.QRect(*pos_or_rect)\ncase float(), float(), float(), float():\npos_or_rect = core.QRectF(*pos_or_rect)\nmatch pos_or_rect, widget:\ncase core.QRect() | core.QRectF(), widgets.QWidget():\ntop_left = super().mapTo(widget, pos_or_rect.topLeft())\nbottom_right = super().mapTo(widget, pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), widgets.QWidget():\nreturn super().mapTo(widget, pos_or_rect)\ncase core.QRect() | core.QRectF(), \"parent\":\ntop_left = super().mapToParent(pos_or_rect.topLeft())\nbottom_right = super().mapToParent(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"parent\":\nreturn super().mapToParent(pos_or_rect)\ncase core.QRect() | core.QRectF(), \"window\":\ntop_left = super().mapTo(self.window(), pos_or_rect.topLeft())\nbottom_right = super().mapTo(self.window(), pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"window\":\nreturn super().mapTo(self.window(), pos_or_rect)\ncase core.QRect() | core.QRectF(), \"global\":\ntop_left = super().mapToGlobal(pos_or_rect.topLeft())\nbottom_right = super().mapToGlobal(pos_or_rect.bottomRight())\nreturn type(pos_or_rect)(top_left, bottom_right)\ncase core.QPoint() | core.QPointF(), \"global\":\nreturn super().mapToGlobal(pos_or_rect)\ncase _:\nraise ValueError(pos_or_rect)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.position_on","title":"<code>position_on(where: PositionPossibilityType, how: Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right'] = 'center', *, scale_ratio: int | None = None, x_offset: int = 0, y_offset: int = 0)</code>","text":"<p>Position widget on another widget / window / screen.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>PositionPossibilityType</code> <p>where to positin on</p> required <code>how</code> <code>Literal['center', 'top', 'left', 'bottom', 'right', 'top_left', 'top_right', 'bottom_left', 'bottom_right']</code> <p>How to align</p> <code>'center'</code> <code>scale_ratio</code> <code>int | None</code> <p>Resize to scale_ratio * target size</p> <code>None</code> <code>x_offset</code> <code>int</code> <p>additional x offset for final position</p> <code>0</code> <code>y_offset</code> <code>int</code> <p>additional y offset for final position</p> <code>0</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def position_on(\nself,\nwhere: PositionPossibilityType,\nhow: Literal[\n\"center\",\n\"top\",\n\"left\",\n\"bottom\",\n\"right\",\n\"top_left\",\n\"top_right\",\n\"bottom_left\",\n\"bottom_right\",\n] = \"center\",\n*,\nscale_ratio: int | None = None,\nx_offset: int = 0,\ny_offset: int = 0,\n):\n\"\"\"Position widget on another widget / window / screen.\n    Arguments:\n        where: where to positin on\n        how: How to align\n        scale_ratio: Resize to scale_ratio * target size\n        x_offset: additional x offset for final position\n        y_offset: additional y offset for final position\n    \"\"\"\ndo_scale = True\nmatch where:\ncase \"mouse\":\ngeom = core.Rect(gui.Cursor.pos(), gui.Cursor.pos())\ndo_scale = False\ncase core.QPoint():\ngeom = core.Rect(where, where)\ndo_scale = False\ncase (int(), int()):\np = core.Point(*where)\ngeom = core.Rect(p, p)\ndo_scale = False\ncase (int(), int(), int(), int()):\ngeom = core.Rect(*where)\ncase \"parent\":\ngeom = self.parent().frameGeometry()\ncase \"window\":\ngeom = self.window().frameGeometry()\ncase widgets.QWidget():\ngeom = where.frameGeometry()\ncase core.QRect():\ngeom = where\ncase \"screen\":\ngeom = gui.GuiApplication.primaryScreen().geometry()\ncase _:\nraise ValueError(where)\nif scale_ratio is not None and do_scale:\nself.resize(\nint(geom.width() * scale_ratio),\nint(geom.height() * scale_ratio),\n)\nown_geo = self.frameGeometry()\nmatch how:\ncase \"center\":\nnew = geom.center()\ncase \"top\":\nnew = core.Point(geom.center().x(), geom.top() + own_geo.height() // 2)\ncase \"bottom\":\nnew = core.Point(geom.center().x(), geom.bottom() - own_geo.height() // 2)\ncase \"left\":\nnew = core.Point(geom.left() + own_geo.width() // 2, geom.center().y())\ncase \"right\":\nnew = core.Point(geom.right() - own_geo.width() // 2, geom.center().y())\ncase \"top_right\":\nnew = core.Point(\ngeom.right() - own_geo.width() // 2,\ngeom.top() + own_geo.height() // 2,\n)\ncase \"top_left\":\nnew = core.Point(\ngeom.left() + own_geo.width() // 2,\ngeom.top() + own_geo.height() // 2,\n)\ncase \"bottom_right\":\nnew = core.Point(\ngeom.right() - own_geo.width() // 2,\ngeom.bottom() - own_geo.height() // 2,\n)\ncase \"bottom_left\":\nnew = core.Point(\ngeom.left() + own_geo.width() // 2,\ngeom.bottom() - own_geo.height() // 2,\n)\ncase _:\nraise ValueError(how)\nnew = core.Point(new.x() + x_offset, new.y() + y_offset)\nown_geo.moveCenter(new)\nself.move(own_geo.topLeft())\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.raise_to_top","title":"<code>raise_to_top()</code>","text":"<p>Brings a widget to top with all means available.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def raise_to_top(self):\n\"\"\"Brings a widget to top with all means available.\"\"\"\nif sys.platform.startswith(\"win\"):\nfrom prettyqt.utils.platforms.windows import misc\nmisc.raise_to_top()\n# state = (self.windowState() &amp; ~Qt.WindowMinimized) | Qt.WindowActive\n# self.setWindowState(state)\nself.raise_()\nself.show()\nself.activateWindow()\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_attributes","title":"<code>set_attributes(*, accept_drops: bool | None = None, always_show_tooltips: bool | None = None, custom_whats_this: bool | None = None, delete_on_close: bool | None = None, disabled: bool | None = None, dont_show_on_screen: bool | None = None, force_disabled: bool | None = None, force_updates_disabled: bool | None = None, hover: bool | None = None, input_method_enabled: bool | None = None, keyboard_focus_change: bool | None = None, key_compression: bool | None = None, layout_on_entire_rect: bool | None = None, layout_uses_widget_rect: bool | None = None, mapped: bool | None = None, mouse_no_mask: bool | None = None, mouse_tracking: bool | None = None, moved: bool | None = None, no_child_events_for_parent: bool | None = None, no_child_events_from_children: bool | None = None, no_mouse_replay: bool | None = None, no_mouse_propagation: bool | None = None, transparent_for_mouse_events: bool | None = None, no_system_background: bool | None = None, opaque_paint_event: bool | None = None, outside_ws_range: bool | None = None, paint_on_screen: bool | None = None, paint_unclipped: bool | None = None, pending_move_event: bool | None = None, pending_resize_egent: bool | None = None, quit_on_close: bool | None = None, resized: bool | None = None, right_to_left: bool | None = None, set_cursor: bool | None = None, set_font: bool | None = None, set_palette: bool | None = None, set_style: bool | None = None, static_contents: bool | None = None, style_sheet: bool | None = None, style_sheet_target: bool | None = None, tablet_tracking: bool | None = None, translucent_background: bool | None = None, under_mouse: bool | None = None, updates_disabled: bool | None = None, window_modified: bool | None = None, window_propagation: bool | None = None, mac_always_show_tool_window: bool | None = None, set_locale: bool | None = None, styled_background: bool | None = None, show_without_activating: bool | None = None, native_window: bool | None = None, dont_create_native_ancestors: bool | None = None, accept_touch_events: bool | None = None, touch_pad_single_touch_events: bool | None = None, always_stack_on_top: bool | None = None, contents_margins_respects_safe_area: bool | None = None)</code>","text":"<p>Set window attributes.</p> <p>Attributes:</p> Name Type Description <code>accept_drops</code> <p>set AcceptDrops attribute</p> <code>always_show_tooltips</code> <p>set AlwaysShowToolTips attribute</p> <code>custom_whats_this</code> <p>set CustomWhatsThis attribute</p> <code>delete_on_close</code> <p>set DeleteOnClose attribute</p> <code>disabled</code> <p>set Disabled attribute</p> <code>dont_show_on_screen</code> <p>set DontShowOnScreen attribute</p> <code>force_disabled</code> <p>set ForceDisabled attribute</p> <code>force_updates_disabled</code> <p>set ForceUpdatesDisabled attribute</p> <code>hover</code> <p>set Hover attribute</p> <code>input_method_enabled</code> <p>set InputMethodEnabled attribute</p> <code>keyboard_focus_change</code> <p>set KeyboardFocusChange attribute</p> <code>key_compression</code> <p>set KeyCompression attribute</p> <code>layout_on_entire_rect</code> <p>set LayoutOnEntireRect attribute</p> <code>layout_uses_widget_rect</code> <p>set LayoutUsesWidgetRect attribute</p> <code>mapped</code> <p>set Mapped attribute</p> <code>mouse_no_mask</code> <p>set MouseNoMask attribute</p> <code>mouse_tracking</code> <p>set MouseTracking attribute</p> <code>moved</code> <p>set Moved attribute</p> <code>no_child_events_for_parent</code> <p>set NoChildEventsForParent attribute</p> <code>no_child_events_from_children</code> <p>set NoChildEventsFromChildren attribute</p> <code>no_mouse_replay</code> <p>set NoMouseReplay attribute</p> <code>no_mouse_propagation</code> <p>set NoMousePropagation attribute</p> <code>transparent_for_mouse_events</code> <p>set TransparentForMouseEvents attribute</p> <code>no_system_background</code> <p>set NoSystemBackground attribute</p> <code>opaque_paint_event</code> <p>set OpaquePaintEvent attribute</p> <code>outside_ws_range</code> <p>set OutsideWSRange attribute</p> <code>paint_on_screen</code> <p>set PaintOnScreen attribute</p> <code>paint_unclipped</code> <p>set PaintUnclipped attribute</p> <code>pending_move_event</code> <p>set PendingMoveEvent attribute</p> <code>pending_resize_egent</code> <p>set PendingResizeEvent attribute</p> <code>quit_on_close</code> <p>set QuitOnClose attribute</p> <code>resized</code> <p>set Resized attribute</p> <code>right_to_left</code> <p>set RightToLeft attribute</p> <code>set_cursor</code> <p>set SetCursor attribute</p> <code>set_font</code> <p>set SetFont attribute</p> <code>set_palette</code> <p>set SetPalette attribute</p> <code>set_style</code> <p>set SetStyle attribute</p> <code>static_contents</code> <p>set StaticContents attribute</p> <code>style_sheet</code> <p>set StyleSheet attribute</p> <code>style_sheet_target</code> <p>set StyleSheetTarget attribute</p> <code>tablet_tracking</code> <p>set TabletTracking attribute</p> <code>translucent_background</code> <p>set TranslucentBackground attribute</p> <code>under_mouse</code> <p>set UnderMouse attribute</p> <code>updates_disabled</code> <p>set UpdatesDisabled attribute</p> <code>window_modified</code> <p>set WindowModified attribute</p> <code>window_propagation</code> <p>set WindowPropagation attribute</p> <code>mac_always_show_tool_window</code> <p>set MacAlwaysShowToolWindow attribute</p> <code>set_locale</code> <p>set SetLocale attribute</p> <code>styled_background</code> <p>set StyledBackground attribute</p> <code>show_without_activating</code> <p>set ShowWithoutActivating attribute</p> <code>native_window</code> <p>set NativeWindow attribute</p> <code>dont_create_native_ancestors</code> <p>set DontCreateNativeAncestors attribute</p> <code>accept_touch_events</code> <p>set AcceptTouchEvents attribute</p> <code>touch_pad_single_touch_events</code> <p>set TouchPadAcceptSingleTouchEvents attribute</p> <code>always_stack_on_top</code> <p>set AlwaysStackOnTop attribute</p> <code>contents_margins_respects_safe_area</code> <p>set ContentsMarginsRespectsSafeArea                                  attribute</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_attributes(\nself,\n*,\naccept_drops: bool | None = None,\nalways_show_tooltips: bool | None = None,\ncustom_whats_this: bool | None = None,\ndelete_on_close: bool | None = None,\ndisabled: bool | None = None,\ndont_show_on_screen: bool | None = None,\nforce_disabled: bool | None = None,\nforce_updates_disabled: bool | None = None,\nhover: bool | None = None,\ninput_method_enabled: bool | None = None,\nkeyboard_focus_change: bool | None = None,\nkey_compression: bool | None = None,\nlayout_on_entire_rect: bool | None = None,\nlayout_uses_widget_rect: bool | None = None,\nmapped: bool | None = None,\nmouse_no_mask: bool | None = None,\nmouse_tracking: bool | None = None,\nmoved: bool | None = None,\nno_child_events_for_parent: bool | None = None,\nno_child_events_from_children: bool | None = None,\nno_mouse_replay: bool | None = None,\nno_mouse_propagation: bool | None = None,\ntransparent_for_mouse_events: bool | None = None,\nno_system_background: bool | None = None,\nopaque_paint_event: bool | None = None,\noutside_ws_range: bool | None = None,\npaint_on_screen: bool | None = None,\npaint_unclipped: bool | None = None,\npending_move_event: bool | None = None,\npending_resize_egent: bool | None = None,\nquit_on_close: bool | None = None,\nresized: bool | None = None,\nright_to_left: bool | None = None,\nset_cursor: bool | None = None,\nset_font: bool | None = None,\nset_palette: bool | None = None,\nset_style: bool | None = None,\nstatic_contents: bool | None = None,\nstyle_sheet: bool | None = None,\nstyle_sheet_target: bool | None = None,\ntablet_tracking: bool | None = None,\ntranslucent_background: bool | None = None,\nunder_mouse: bool | None = None,\nupdates_disabled: bool | None = None,\nwindow_modified: bool | None = None,\nwindow_propagation: bool | None = None,\nmac_always_show_tool_window: bool | None = None,\nset_locale: bool | None = None,\nstyled_background: bool | None = None,\nshow_without_activating: bool | None = None,\nnative_window: bool | None = None,\ndont_create_native_ancestors: bool | None = None,\naccept_touch_events: bool | None = None,\ntouch_pad_single_touch_events: bool | None = None,\nalways_stack_on_top: bool | None = None,\ncontents_margins_respects_safe_area: bool | None = None,\n):\n\"\"\"Set window attributes.\n    Attributes:\n        accept_drops: set AcceptDrops attribute\n        always_show_tooltips: set AlwaysShowToolTips attribute\n        custom_whats_this: set CustomWhatsThis attribute\n        delete_on_close: set DeleteOnClose attribute\n        disabled: set Disabled attribute\n        dont_show_on_screen: set DontShowOnScreen attribute\n        force_disabled: set ForceDisabled attribute\n        force_updates_disabled: set ForceUpdatesDisabled attribute\n        hover: set Hover attribute\n        input_method_enabled: set InputMethodEnabled attribute\n        keyboard_focus_change: set KeyboardFocusChange attribute\n        key_compression: set KeyCompression attribute\n        layout_on_entire_rect: set LayoutOnEntireRect attribute\n        layout_uses_widget_rect: set LayoutUsesWidgetRect attribute\n        mapped: set Mapped attribute\n        mouse_no_mask: set MouseNoMask attribute\n        mouse_tracking: set MouseTracking attribute\n        moved: set Moved attribute\n        no_child_events_for_parent: set NoChildEventsForParent attribute\n        no_child_events_from_children: set NoChildEventsFromChildren attribute\n        no_mouse_replay: set NoMouseReplay attribute\n        no_mouse_propagation: set NoMousePropagation attribute\n        transparent_for_mouse_events: set TransparentForMouseEvents attribute\n        no_system_background: set NoSystemBackground attribute\n        opaque_paint_event: set OpaquePaintEvent attribute\n        outside_ws_range: set OutsideWSRange attribute\n        paint_on_screen: set PaintOnScreen attribute\n        paint_unclipped: set PaintUnclipped attribute\n        pending_move_event: set PendingMoveEvent attribute\n        pending_resize_egent: set PendingResizeEvent attribute\n        quit_on_close: set QuitOnClose attribute\n        resized: set Resized attribute\n        right_to_left: set RightToLeft attribute\n        set_cursor: set SetCursor attribute\n        set_font: set SetFont attribute\n        set_palette: set SetPalette attribute\n        set_style: set SetStyle attribute\n        static_contents: set StaticContents attribute\n        style_sheet: set StyleSheet attribute\n        style_sheet_target: set StyleSheetTarget attribute\n        tablet_tracking: set TabletTracking attribute\n        translucent_background: set TranslucentBackground attribute\n        under_mouse: set UnderMouse attribute\n        updates_disabled: set UpdatesDisabled attribute\n        window_modified: set WindowModified attribute\n        window_propagation: set WindowPropagation attribute\n        mac_always_show_tool_window: set MacAlwaysShowToolWindow attribute\n        set_locale: set SetLocale attribute\n        styled_background: set StyledBackground attribute\n        show_without_activating: set ShowWithoutActivating attribute\n        native_window: set NativeWindow attribute\n        dont_create_native_ancestors: set DontCreateNativeAncestors attribute\n        accept_touch_events: set AcceptTouchEvents attribute\n        touch_pad_single_touch_events: set TouchPadAcceptSingleTouchEvents attribute\n        always_stack_on_top: set AlwaysStackOnTop attribute\n        contents_margins_respects_safe_area: set ContentsMarginsRespectsSafeArea\n                                             attribute\n    \"\"\"\nAttr = constants.WidgetAttribute\nflags = {\nAttr.WA_AcceptDrops: accept_drops,\nAttr.WA_AlwaysShowToolTips: always_show_tooltips,\nAttr.WA_CustomWhatsThis: custom_whats_this,\nAttr.WA_DeleteOnClose: delete_on_close,\nAttr.WA_Disabled: disabled,\nAttr.WA_DontShowOnScreen: dont_show_on_screen,\nAttr.WA_ForceDisabled: force_disabled,\nAttr.WA_ForceUpdatesDisabled: force_updates_disabled,\nAttr.WA_Hover: hover,\nAttr.WA_InputMethodEnabled: input_method_enabled,\nAttr.WA_KeyboardFocusChange: keyboard_focus_change,\nAttr.WA_KeyCompression: key_compression,\nAttr.WA_LayoutOnEntireRect: layout_on_entire_rect,\nAttr.WA_LayoutUsesWidgetRect: layout_uses_widget_rect,\nAttr.WA_Mapped: mapped,\nAttr.WA_MouseNoMask: mouse_no_mask,\nAttr.WA_MouseTracking: mouse_tracking,\nAttr.WA_Moved: moved,\nAttr.WA_NoChildEventsForParent: no_child_events_for_parent,\nAttr.WA_NoChildEventsFromChildren: no_child_events_from_children,\nAttr.WA_NoMouseReplay: no_mouse_replay,\nAttr.WA_NoMousePropagation: no_mouse_propagation,\nAttr.WA_TransparentForMouseEvents: transparent_for_mouse_events,\nAttr.WA_NoSystemBackground: no_system_background,\nAttr.WA_OpaquePaintEvent: opaque_paint_event,\nAttr.WA_OutsideWSRange: outside_ws_range,\nAttr.WA_PaintOnScreen: paint_on_screen,\nAttr.WA_PaintUnclipped: paint_unclipped,\nAttr.WA_PendingMoveEvent: pending_move_event,\nAttr.WA_PendingResizeEvent: pending_resize_egent,\nAttr.WA_QuitOnClose: quit_on_close,\nAttr.WA_Resized: resized,\nAttr.WA_RightToLeft: right_to_left,\nAttr.WA_SetCursor: set_cursor,\nAttr.WA_SetFont: set_font,\nAttr.WA_SetPalette: set_palette,\nAttr.WA_SetStyle: set_style,\nAttr.WA_StaticContents: static_contents,\nAttr.WA_StyleSheet: style_sheet,\nAttr.WA_StyleSheetTarget: style_sheet_target,\nAttr.WA_TabletTracking: tablet_tracking,\nAttr.WA_TranslucentBackground: translucent_background,\nAttr.WA_UnderMouse: under_mouse,\nAttr.WA_UpdatesDisabled: updates_disabled,\nAttr.WA_WindowModified: window_modified,\nAttr.WA_WindowPropagation: window_propagation,\nAttr.WA_MacAlwaysShowToolWindow: mac_always_show_tool_window,\nAttr.WA_SetLocale: set_locale,\nAttr.WA_StyledBackground: styled_background,\nAttr.WA_ShowWithoutActivating: show_without_activating,\nAttr.WA_NativeWindow: native_window,\nAttr.WA_DontCreateNativeAncestors: dont_create_native_ancestors,\nAttr.WA_AcceptTouchEvents: accept_touch_events,\nAttr.WA_TouchPadAcceptSingleTouchEvents: touch_pad_single_touch_events,\nAttr.WA_AlwaysStackOnTop: always_stack_on_top,\nAttr.WA_ContentsMarginsRespectsSafeArea: contents_margins_respects_safe_area,\n}\nfor k, v in flags.items():\nif v is not None:\nself.setAttribute(k, v)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_background_role","title":"<code>set_background_role(role: gui.palette.RoleStr | gui.Palette.ColorRole)</code>","text":"<p>Get foreground role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_background_role(self, role: gui.palette.RoleStr | gui.Palette.ColorRole):\n\"\"\"Get foreground role for this widget.\"\"\"\nself.setBackgroundRole(gui.palette.ROLE.get_enum_value(role))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_context_menu_policy","title":"<code>set_context_menu_policy(policy: constants.ContextPolicyStr | constants.ContextMenuPolicy)</code>","text":"<p>Set contextmenu policy for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>constants.ContextPolicyStr | constants.ContextMenuPolicy</code> <p>contextmenu policy to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_context_menu_policy(\nself, policy: constants.ContextPolicyStr | constants.ContextMenuPolicy\n):\n\"\"\"Set contextmenu policy for given item view.\n    Args:\n        policy: contextmenu policy to use\n    \"\"\"\nself.setContextMenuPolicy(constants.CONTEXT_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_cursor","title":"<code>set_cursor(cursor: constants.CursorShapeStr | constants.CursorShape | gui.QCursor)</code>","text":"<p>Set the cursor for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_cursor(\nself, cursor: constants.CursorShapeStr | constants.CursorShape | gui.QCursor\n):\n\"\"\"Set the cursor for this widget.\"\"\"\nif isinstance(cursor, gui.QCursor):\ncurs = cursor\nelse:\ncurs = gui.Cursor(constants.CURSOR_SHAPE.get_enum_value(cursor))\nself.setCursor(curs)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_flags","title":"<code>set_flags(*, minimize: bool | None = None, maximize: bool | None = None, close: bool | None = None, stay_on_top: bool | None = None, frameless: bool | None = None, window: bool | None = None, dialog: bool | None = None, tooltip: bool | None = None, tool: bool | None = None, customize: bool | None = None, cover: bool | None = None, window_title: bool | None = None)</code>","text":"<p>Set window flags.</p> <p>Parameters:</p> Name Type Description Default <code>minimize</code> <code>bool | None</code> <p>set WindowMinimizeButtonHint flag</p> <code>None</code> <code>maximize</code> <code>bool | None</code> <p>set WindowMaximizeButtonHint flag</p> <code>None</code> <code>close</code> <code>bool | None</code> <p>set WindowCloseButtonHint flag</p> <code>None</code> <code>stay_on_top</code> <code>bool | None</code> <p>set WindowStaysOnTopHint flag</p> <code>None</code> <code>frameless</code> <code>bool | None</code> <p>set FramelessWindowHint flag</p> <code>None</code> <code>window</code> <code>bool | None</code> <p>set Window flag</p> <code>None</code> <code>dialog</code> <code>bool | None</code> <p>set Dialog flag</p> <code>None</code> <code>tooltip</code> <code>bool | None</code> <p>set ToolTip flag</p> <code>None</code> <code>tool</code> <code>bool | None</code> <p>set Tool flag</p> <code>None</code> <code>customize</code> <code>bool | None</code> <p>set CustomizeWindowHint flag</p> <code>None</code> <code>cover</code> <code>bool | None</code> <p>set CoverWindow flag</p> <code>None</code> <code>window_title</code> <code>bool | None</code> <p>set WindowTitleHint flag</p> <code>None</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_flags(\nself,\n*,\nminimize: bool | None = None,\nmaximize: bool | None = None,\nclose: bool | None = None,\nstay_on_top: bool | None = None,\nframeless: bool | None = None,\nwindow: bool | None = None,\ndialog: bool | None = None,\ntooltip: bool | None = None,\ntool: bool | None = None,\ncustomize: bool | None = None,\ncover: bool | None = None,\nwindow_title: bool | None = None,\n):\n\"\"\"Set window flags.\n    Arguments:\n        minimize: set WindowMinimizeButtonHint flag\n        maximize: set WindowMaximizeButtonHint flag\n        close: set WindowCloseButtonHint flag\n        stay_on_top: set WindowStaysOnTopHint flag\n        frameless: set FramelessWindowHint flag\n        window: set Window flag\n        dialog: set Dialog flag\n        tooltip: set ToolTip flag\n        tool: set Tool flag\n        customize: set CustomizeWindowHint flag\n        cover: set CoverWindow flag\n        window_title: set WindowTitleHint flag\n    \"\"\"\nflags = {\nconstants.WindowType.WindowMinimizeButtonHint: minimize,\nconstants.WindowType.WindowMaximizeButtonHint: maximize,\nconstants.WindowType.WindowCloseButtonHint: close,\nconstants.WindowType.WindowStaysOnTopHint: stay_on_top,\nconstants.WindowType.FramelessWindowHint: frameless,\nconstants.WindowType.Window: window,\nconstants.WindowType.Dialog: dialog,\nconstants.WindowType.ToolTip: tooltip,\nconstants.WindowType.Tool: tool,\nconstants.WindowType.CustomizeWindowHint: customize,\nconstants.WindowType.CoverWindow: cover,\nconstants.WindowType.WindowTitleHint: window_title,\n}\nfor k, v in flags.items():\nif v is not None:\nself.setWindowFlag(k, v)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_focus_policy","title":"<code>set_focus_policy(policy: constants.FocusPolicyStr | constants.FocusPolicy)</code>","text":"<p>Set the way the widget accepts keyboard focus.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>str</code> <p>Focus policy</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_focus_policy(self, policy: constants.FocusPolicyStr | constants.FocusPolicy):\n\"\"\"Set the way the widget accepts keyboard focus.\n    Args:\n        policy (str): Focus policy\n    \"\"\"\nself.setFocusPolicy(constants.FOCUS_POLICY.get_enum_value(policy))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_font","title":"<code>set_font(font_name: gui.QFont | str | None = None, *, font_size: int | None = None, weight: int | None = None, italic: bool = False) -&gt; gui.QFont</code>","text":"<p>Set the font for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_font(\nself,\nfont_name: gui.QFont | str | None = None,\n*,\nfont_size: int | None = None,\nweight: int | None = None,\nitalic: bool = False,\n) -&gt; gui.QFont:\n\"\"\"Set the font for this widget.\"\"\"\nif isinstance(font_name, gui.QFont):\nsuper().setFont(font_name)\nreturn font_name\nif font_size is None:\nfont_size = -1\nif weight is None:\nweight = -1\nif font_name is None:\nfont_name = self.font().family()\nfont = gui.Font(font_name, font_size, weight, italic)\nsuper().setFont(font)\nreturn font\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_foreground_role","title":"<code>set_foreground_role(role: gui.palette.RoleStr | gui.Palette.ColorRole)</code>","text":"<p>Set foreground role for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_foreground_role(self, role: gui.palette.RoleStr | gui.Palette.ColorRole):\n\"\"\"Set foreground role for this widget.\"\"\"\nself.setForegroundRole(gui.palette.ROLE.get_enum_value(role))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_icon","title":"<code>set_icon(icon: datatypes.IconType)</code>","text":"<p>Set the window icon.</p> <p>Parameters:</p> Name Type Description Default <code>icon</code> <code>datatypes.IconType</code> <p>icon to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_icon(self, icon: datatypes.IconType):\n\"\"\"Set the window icon.\n    Args:\n        icon: icon to use\n    \"\"\"\ncolor = widgets.app().get_window_icon_color()\nicon = iconprovider.get_icon(icon, color=color)\nsuper().setWindowIcon(icon)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_layout","title":"<code>set_layout(layout: LayoutStr | widgets.QLayout, *, margin: int | None = None, **kwargs: datatypes.VariantType) -&gt; widgets.QLayout</code>","text":"<p>Quick way to set a layout.</p> <p>Sets layout to given layout, also allows setting margin and spacing.</p> <p>Parameters:</p> Name Type Description Default <code>layout</code> <code>LayoutStr | widgets.QLayout</code> <p>Layout to set</p> required <code>margin</code> <code>int | None</code> <p>margin to use in pixels</p> <code>None</code> <code>kwargs</code> <code>datatypes.VariantType</code> <p>keyword arguments passed to layout</p> <code>{}</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_layout(\nself,\nlayout: LayoutStr | widgets.QLayout,\n*,\nmargin: int | None = None,\n**kwargs: datatypes.VariantType,\n) -&gt; widgets.QLayout:\n\"\"\"Quick way to set a layout.\n    Sets layout to given layout, also allows setting margin and spacing.\n    Args:\n        layout: Layout to set\n        margin: margin to use in pixels\n        kwargs: keyword arguments passed to layout\n    Returns:\n        Layout\n    \"\"\"\nfrom prettyqt import custom_widgets\nmatch layout:\ncase \"horizontal\":\nlayout = widgets.HBoxLayout(**kwargs)\ncase \"vertical\":\nlayout = widgets.VBoxLayout(**kwargs)\ncase \"grid\":\nlayout = widgets.GridLayout(**kwargs)\ncase \"form\":\nlayout = widgets.FormLayout(**kwargs)\ncase \"stacked\":\nlayout = widgets.StackedLayout(**kwargs)\ncase \"flow\":\nlayout = custom_widgets.FlowLayout(**kwargs)\ncase \"border\":\nlayout = custom_widgets.BorderLayout(**kwargs)\ncase widgets.QLayout():\nlayout = layout\ncase _:\nraise ValueError(f\"Invalid Layout {layout}\")\nself.setLayout(layout)\nif margin is not None:\nlayout.set_margin(margin)\nreturn layout\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_layout_direction","title":"<code>set_layout_direction(direction: constants.LayoutDirectionStr | constants.LayoutDirection | None)</code>","text":"<p>Set layout direction.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>constants.LayoutDirectionStr | constants.LayoutDirection | None</code> <p>layout direction</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_layout_direction(\nself, direction: constants.LayoutDirectionStr | constants.LayoutDirection | None\n):\n\"\"\"Set layout direction.\n    Args:\n        direction: layout direction\n    \"\"\"\nif direction is None:\nself.unsetLayoutDirection()\nelse:\nself.setLayoutDirection(constants.LAYOUT_DIRECTION.get_enum_value(direction))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_margin","title":"<code>set_margin(margin: datatypes.MarginsType)</code>","text":"<p>Set content margins for the widget.</p> <p>Parameters:</p> Name Type Description Default <code>margin</code> <code>datatypes.MarginsType</code> <p>margins to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_margin(self, margin: datatypes.MarginsType):\n\"\"\"Set content margins for the widget.\n    Arguments:\n        margin: margins to use\n    \"\"\"\nself.setContentsMargins(datatypes.to_margins(margin))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_mask","title":"<code>set_mask(area: datatypes.RectType | gui.QRegion | gui.QBitmap | None, typ: gui.region.RegionTypeStr = 'rectangle')</code>","text":"<p>Set mask of the widget.</p> <p>Parameters:</p> Name Type Description Default <code>area</code> <code>datatypes.RectType | gui.QRegion | gui.QBitmap | None</code> <p>Mask area</p> required <code>typ</code> <code>gui.region.RegionTypeStr</code> <p>type of region (only used if area is a QRegion)</p> <code>'rectangle'</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_mask(\nself,\narea: datatypes.RectType | gui.QRegion | gui.QBitmap | None,\ntyp: gui.region.RegionTypeStr = \"rectangle\",\n):\n\"\"\"Set mask of the widget.\n    Arguments:\n        area: Mask area\n        typ: type of region (only used if area is a QRegion)\n    \"\"\"\nmatch area:\ncase None:\nself.clearMask()\nreturn\ncase (int(), int(), int(), int()):\narea = gui.Region(*area, gui.region.REGION_TYPE[typ])\ncase core.QRect():\narea = gui.Region(area, gui.region.REGION_TYPE[typ])\nself.setMask(area)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_modality","title":"<code>set_modality(modality: constants.WindowModalityStr | constants.WindowModality)</code>","text":"<p>Set modality for the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>modality</code> <code>constants.WindowModalityStr | constants.WindowModality</code> <p>modality for the main window</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_modality(\nself, modality: constants.WindowModalityStr | constants.WindowModality\n):\n\"\"\"Set modality for the dialog.\n    Args:\n        modality: modality for the main window\n    \"\"\"\nself.setWindowModality(constants.WINDOW_MODALITY.get_enum_value(modality))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_size_policy","title":"<code>set_size_policy(horizontal: widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None = None, vertical: widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None = None)</code>","text":"<p>Set the size policy.</p> <p>Parameters:</p> Name Type Description Default <code>horizontal</code> <code>widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None</code> <p>horizontal size policy</p> <code>None</code> <code>vertical</code> <code>widgets.sizepolicy.SizePolicyStr | widgets.QSizePolicy.Policy | None</code> <p>vertical size policy</p> <code>None</code> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_size_policy(\nself,\nhorizontal: widgets.sizepolicy.SizePolicyStr\n| widgets.QSizePolicy.Policy\n| None = None,\nvertical: widgets.sizepolicy.SizePolicyStr\n| widgets.QSizePolicy.Policy\n| None = None,\n):\n\"\"\"Set the size policy.\n    Args:\n        horizontal: horizontal size policy\n        vertical: vertical size policy\n    \"\"\"\nsp = self.get_size_policy()\nif horizontal is not None:\nsp.set_horizontal_policy(horizontal)\nif vertical is not None:\nsp.set_vertical_policy(vertical)\nself.setSizePolicy(sp)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_style","title":"<code>set_style(style: str | widgets.QStyle)</code>","text":"<p>Set widget style.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_style(self, style: str | widgets.QStyle):\n\"\"\"Set widget style.\"\"\"\nif isinstance(style, str):\nstyle = widgets.QStyleFactory.create(style)\nself.setStyle(style)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_stylesheet","title":"<code>set_stylesheet(ss: None | str | qstylizer.style.StyleSheet | datatypes.PathType)</code>","text":"<p>Set stylesheet for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_stylesheet(\nself, ss: None | str | qstylizer.style.StyleSheet | datatypes.PathType\n):\n\"\"\"Set stylesheet for this widget.\"\"\"\nmatch ss:\ncase None:\nss = \"\"\ncase str():\npass\ncase os.PathLike():\nss = pathlib.Path(ss).read_text()\ncase qstylizer.style.StyleSheet():\nss = str(ss)\nself.setStyleSheet(ss)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_tooltip","title":"<code>set_tooltip(tooltip: str | datatypes.PathType, *, size: datatypes.SizeType | None = None, rich_text: bool = False)</code>","text":"<p>Set a tooltip for this widget.</p> <p>In image can get displayed by passing a PathLike object.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_tooltip(\nself,\ntooltip: str | datatypes.PathType,\n*,\nsize: datatypes.SizeType | None = None,\nrich_text: bool = False,\n):\n\"\"\"Set a tooltip for this widget.\n    In image can get displayed by passing a PathLike object.\n    \"\"\"\nif isinstance(tooltip, os.PathLike):\npath = os.fspath(tooltip)\nif size is None:\ntooltip = f\"&lt;img src={path!r}&gt;\"\nelse:\nif isinstance(size, core.QSize):\nsize = (size.width(), size.height())\ntooltip = f'&lt;img src={path!r} width=\"{size[0]}\" height=\"{size[1]}\"&gt;'\ntooltip = tooltip.replace(\"\\n\", \"&lt;br/&gt;\")\nif rich_text:\ntooltip = f\"&lt;html&gt;{html.escape(tooltip)}&lt;/html&gt;\"\nsuper().setToolTip(tooltip)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.set_window_state","title":"<code>set_window_state(state: constants.WindowStateStr | constants.WindowState)</code>","text":"<p>Set window state for given item view.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>constants.WindowStateStr | constants.WindowState</code> <p>window state to use</p> required Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def set_window_state(self, state: constants.WindowStateStr | constants.WindowState):\n\"\"\"Set window state for given item view.\n    Args:\n        state: window state to use\n    \"\"\"\nself.setWindowState(constants.WINDOW_STATES.get_enum_value(state))\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.show_tooltip","title":"<code>show_tooltip(duration: int | None = None)</code>","text":"<p>Show the tooltip of this widget for given time.</p> <p>When no duration is given, it will get calculated based on length.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def show_tooltip(self, duration: int | None = None):\n\"\"\"Show the tooltip of this widget for given time.\n    When no duration is given, it will get calculated based on length.\n    \"\"\"\nif duration is None:\nduration = -1  # automatic\npos = self.map_to(\"global\", (0, 0))\nwidgets.ToolTip.showText(pos, self.toolTip(), msecShowTime=duration)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.toggle_fullscreen","title":"<code>toggle_fullscreen() -&gt; bool</code>","text":"<p>Toggle between fullscreen and regular size.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def toggle_fullscreen(self) -&gt; bool:\n\"\"\"Toggle between fullscreen and regular size.\"\"\"\nif self.isFullScreen():\nself.showNormal()\nreturn False\nelse:\nself.showFullScreen()\nreturn True\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.toggle_maximized","title":"<code>toggle_maximized() -&gt; bool</code>","text":"<p>Toggle between maximized and regular size.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>def toggle_maximized(self) -&gt; bool:\n\"\"\"Toggle between maximized and regular size.\"\"\"\nif self.isMaximized():\nself.showNormal()\nreturn False\nelse:\nself.showMaximized()\nreturn True\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#prettyqt.widgets.widget.WidgetMixin.updates_off","title":"<code>updates_off() -&gt; Iterator[None]</code>","text":"<p>Context manager to turn off updates for this widget.</p> Source code in <code>prettyqt\\widgets\\widget.py</code> <pre><code>@contextlib.contextmanager\ndef updates_off(self) -&gt; Iterator[None]:\n\"\"\"Context manager to turn off updates for this widget.\"\"\"\nupdates = self.updatesEnabled()\nself.setUpdatesEnabled(False)\nyield None\nself.setUpdatesEnabled(updates)\n</code></pre>"},{"location":"qt_modules/widgets/WidgetMixin.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216</code></pre>"},{"location":"qt_modules/widgets/Wizard.html","title":"Wizard","text":"<p>Qt Base Class: QWizard</p> <p>Signature: <code>QWizard(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -&gt; None</code></p>"},{"location":"qt_modules/widgets/Wizard.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>WizardMixin</code>, <code>widgets.QWizard</code></p> <p>Framework for wizards.</p> Source code in <code>prettyqt\\widgets\\wizard.py</code> <pre><code>class Wizard(WizardMixin, widgets.QWizard):\n\"\"\"Framework for wizards.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/Wizard.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261451728[\"widgets.Wizard\"]\n  2103261449808[\"widgets.WizardMixin\"]\n  2103261212800[\"widgets.DialogMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259842800[\"QtWidgets.QWizard\"]\n  2103259840880[\"QtWidgets.QDialog\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261449808 --&gt; 2103261451728\n  2103261212800 --&gt; 2103261449808\n  2103261127360 --&gt; 2103261212800\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259842800 --&gt; 2103261451728\n  2103259840880 --&gt; 2103259842800\n  2103259691120 --&gt; 2103259840880\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/Wizard.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>sizeGripEnabled</code> bool <code>modal</code> bool <code>wizardStyle</code> QWizard::WizardStyle <code>options</code> QFlags <code>titleFormat</code> Qt::TextFormat <code>subTitleFormat</code> Qt::TextFormat <code>startId</code> int <code>currentId</code> int"},{"location":"qt_modules/widgets/WizardPage.html","title":"WizardPage","text":"<p>Qt Base Class: QWizardPage</p> <p>Signature: <code>QWizardPage(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -&gt; None</code></p>"},{"location":"qt_modules/widgets/WizardPage.html#docstrings","title":"DocStrings","text":"<p>             Bases: <code>WizardPageMixin</code>, <code>widgets.QWizardPage</code></p> <p>The base class for wizard pages.</p> Source code in <code>prettyqt\\widgets\\wizardpage.py</code> <pre><code>class WizardPage(WizardPageMixin, widgets.QWizardPage):\n\"\"\"The base class for wizard pages.\"\"\"\n</code></pre>"},{"location":"qt_modules/widgets/WizardPage.html#inheritance-diagram","title":"Inheritance diagram","text":"<pre><code>graph TD\n  2103261453648[\"widgets.WizardPage\"]\n  2103261447888[\"widgets.WizardPageMixin\"]\n  2103261127360[\"widgets.WidgetMixin\"]\n  2103255067472[\"core.ObjectMixin\"]\n  140736120080256[\"builtins.object\"]\n  2103260963216[\"gui.PaintDeviceMixin\"]\n  2103259711280[\"QtWidgets.QWizardPage\"]\n  2103259691120[\"QtWidgets.QWidget\"]\n  2103254677056[\"QtCore.QObject\"]\n  2103206874128[\"Shiboken.Object\"]\n  2103259509712[\"QtGui.QPaintDevice\"]\n  2103261447888 --&gt; 2103261453648\n  2103261127360 --&gt; 2103261447888\n  2103255067472 --&gt; 2103261127360\n  140736120080256 --&gt; 2103255067472\n  2103260963216 --&gt; 2103261127360\n  140736120080256 --&gt; 2103260963216\n  2103259711280 --&gt; 2103261453648\n  2103259691120 --&gt; 2103259711280\n  2103254677056 --&gt; 2103259691120\n  2103206874128 --&gt; 2103254677056\n  140736120080256 --&gt; 2103206874128\n  2103259509712 --&gt; 2103259691120\n  2103206874128 --&gt; 2103259509712</code></pre>"},{"location":"qt_modules/widgets/WizardPage.html#property-table","title":"Property table","text":"Qt Property Type Doc <code>objectName</code> QString <code>modal</code> bool <code>windowModality</code> Qt::WindowModality <code>enabled</code> bool <code>geometry</code> QRect <code>frameGeometry</code> QRect <code>normalGeometry</code> QRect <code>x</code> int <code>y</code> int <code>pos</code> QPoint <code>frameSize</code> QSize <code>size</code> QSize <code>width</code> int <code>height</code> int <code>rect</code> QRect <code>childrenRect</code> QRect <code>childrenRegion</code> QRegion <code>sizePolicy</code> QSizePolicy <code>minimumSize</code> QSize <code>maximumSize</code> QSize <code>minimumWidth</code> int <code>minimumHeight</code> int <code>maximumWidth</code> int <code>maximumHeight</code> int <code>sizeIncrement</code> QSize <code>baseSize</code> QSize <code>palette</code> QPalette <code>font</code> QFont <code>cursor</code> QCursor <code>mouseTracking</code> bool <code>tabletTracking</code> bool <code>isActiveWindow</code> bool <code>focusPolicy</code> Qt::FocusPolicy <code>focus</code> bool <code>contextMenuPolicy</code> Qt::ContextMenuPolicy <code>updatesEnabled</code> bool <code>visible</code> bool <code>minimized</code> bool <code>maximized</code> bool <code>fullScreen</code> bool <code>sizeHint</code> QSize <code>minimumSizeHint</code> QSize <code>acceptDrops</code> bool <code>windowTitle</code> QString <code>windowIcon</code> QIcon <code>windowIconText</code> QString <code>windowOpacity</code> double <code>windowModified</code> bool <code>toolTip</code> QString <code>toolTipDuration</code> int <code>statusTip</code> QString <code>whatsThis</code> QString <code>accessibleName</code> QString <code>accessibleDescription</code> QString <code>layoutDirection</code> Qt::LayoutDirection <code>autoFillBackground</code> bool <code>styleSheet</code> QString <code>locale</code> QLocale <code>windowFilePath</code> QString <code>inputMethodHints</code> QFlags <code>title</code> QString <code>subTitle</code> QString"}]}