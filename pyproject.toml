[project]
name = "PrettyQt"
version = "1.50.0"
description = "A pythonic layer on top of PyQt6 / PySide6"
readme = 'docs/index.md'
python-requires = ">=3.10"
license = "MIT"
authors = [
  { name = "Philipp Temminghoff", email = "philipptemminghoff@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: X11 Applications :: Qt",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Desktop Environment",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Software Development :: Widget Sets",
]
keywords = [
    "qt",
    "pyqt",
    "pyside",
    "widgets",
    "components",
    "framework",
    "gui",
]
dependencies = [
    "bidict",
    "pywin32;platform_system == 'Windows'",
    "comtypes;platform_system == 'Windows'",
    "pygments",
    "qstylizer",
    "typing-extensions",
]

[project.urls]
Documentation = "https://phil65.github.io/PrettyQt/index.html"
Source = "https://github.com/phil65/prettyqt"
Tracker = "https://github.com/phil65/prettyqt/issues"
Changelog = "https://github.com/phil65/prettyqt/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pip",
    "pyreadline3",
    "pylint",
    "black",
    "devtools",
    "commitizen",
]

typing = [
    "mypy",
    "types-Deprecated",
    "types-docutils",
    "types-orjson",
    "types-python-dateutil",
    "types-requests",
]

test = [
    "pytest",
    "pytest-cov",
    "pytest-qt",
    "pytest-xvfb;platform_system == 'Linux'",
    "coverage",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "pymdown-extensions",
    "mkdocs-literate-nav",
    "mkdocs-autorefs",
    "mkdocs-glightbox",
]

addons = [
    "docutils",
    "orjson",
    "fsspec",
    "pillow",
    "numpy",
    "qtconsole",
    "ipython",
    "pandas",
]

pyqt6 = [
    "PyQt6",
    "PyQt6-Charts",
    "PyQt6-WebEngine",
    "PyQt6-QScintilla",
]

pyside6 = ["pyside6"]

[project.gui-scripts]
regexeditor = "prettyqt.custom_widgets.regexeditor.__main__:run"
iconbrowser = "prettyqt.custom_widgets.iconbrowser:run"

[project.entry-points.pyinstaller40]
hook-dirs = "prettyqt.__pyinstaller:get_hook_dirs"

[tool.hatch.build.targets.wheel.hooks.mypyc]
dependencies = ["hatch-mypyc"]
# [build.targets.wheel.hooks.mypyc]
# include = ["/src/pkg/server"]
# mypy-args = [
#   "--disallow-untyped-defs",
# ]
# [tool.hatch.version]
# path = "src/foo/__about__.py"
[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mkdocs-literate-nav",
    "pymdown-extensions",
    "mkdocs-glightbox",
    "mkdocs-autorefs",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean"
serve = "mkdocs serve --dirtyreload"

[tool.hatch.build]
sources = ["prettyqt"]
include = [
  "/prettyqt",
  "/tests",
]

[tool.hatch.envs.default]
features = [
  "addons",
  "typing",
  "docs",
  "test",
  "pyside6",
  "pyqt6",
  "dev",
]


# [tool.hatch.envs.nightly]
# features = [
#   "addons",
#   "pyside6",
#   "pyqt6",
#   "dev",
# ]

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
  "pytest-qt",
]

[envs.default.scripts]
test = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'

[[envs.default.matrix]]
python = ["3.10", "3.11"]
# version = ["42", "3.14"]

[tool.poetry]
name = "PrettyQt"
version = "1.50.0"
description = "A pythonic layer on top of PyQt6 / PySide6"
readme = 'docs/index.md'
repository = "https://github.com/phil65/prettyqt"
homepage = "https://github.com/phil65/prettyqt"
authors = ["phil65 <philipptemminghoff@googlemail.com>"]
packages = [
    { include = "prettyqt" },
]

[tool.poetry.scripts]
regexeditor = "prettyqt.custom_widgets.regexeditor.__main__:run"
iconbrowser = "prettyqt.custom_widgets.iconbrowser:run"

[tool.poetry.plugins."pyinstaller40"]
hook-dirs = "prettyqt.__pyinstaller:get_hook_dirs"

# [tool.poetry.plugins."pytest11"]
# pytest-qt = "prettyqt.prettyqtest.plugin"

[tool.poetry.dependencies]
python = "^3.10"
bidict = "^0"
pygments = "^2.6"
qstylizer = "^0.2"
typing-extensions = "^4.5.0"

docutils = {version = "^0.19", optional=true}
orjson = {version = "^3", python = "<3.12", optional=true}
fsspec = {version = "^2023.1.0", optional=true}
pillow = {version = "^9.5.0", optional=true}
numpy = {version = "^1", optional=true}
qtconsole = {version = "^5", optional=true}
ipython = {version = "^8", optional=true}
pandas = {version = "^2.0.2", optional = true}

pywin32 = {version = "*", markers = "sys_platform == 'win32'"}
comtypes = {version = "^1.1", markers = "sys_platform == 'win32'"}

PyQt6 = {version = "^6.5", optional=true}
PyQt6-Charts = {version = "^6.5", optional=true}
PyQt6-WebEngine = {version = "^6.5", optional=true}
PyQt6-QScintilla = {version = "^2.0", optional=true}

pyside6 = {version = "^6.5", python = "<3.12", optional=true}


[tool.poetry.extras]
pyside6 = ["pyside6", "PySide6-QtAds"]
pyqt6 = ["pyqt6", "PyQt6-Charts", "PyQt6-WebEngine", "PyQt6-QScintilla", "PyQtAds"]
addons = ["docutils", "orjson", "fsspec", "pillow", "numpy", "qtconsole", "ipython", "pandas"]

[tool.poetry.group.dev.dependencies]
pytest = "^7"
pip = "^23"
pyreadline3 = "^3"
pytest-cov = "^4"
pytest-qt = "^4.1"
mypy = "^1"
types-Deprecated = "^1.2"
types-docutils = "^0"
types-orjson = "^3.6"
types-python-dateutil = "^2"
types-requests = "^2.31.0.1"
pylint = "^2.5"
pytest-xvfb = {version = "^2", markers = "sys_platform == 'linux'"}
coverage = "^7"
mkdocs = "^1"
mkdocs-material = "^9"
mkdocstrings = {version = "^0", extras = ["python"]}
mkdocs-glightbox = "*"

pymdown-extensions = "^10"
black = "^23"
devtools = "^0"
commitizen = "^3"
mkdocs-literate-nav = "^0.6.0"
mkdocs-autorefs = "^0.4.1"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = [
    "tests",
]
junit_family = "xunit2"
qt_qapp_name = "prettyqt-test"
# qt_api = "pyside6"
qt_log_level_fail = "CRITICAL"
log_cli = true
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.mypy]
python_version = "3.10"
disable_error_code = ["assignment", "misc", "attr-defined", "import", "no-any-expr", "misc", "attr-defined"]

[tool.ruff]
line-length = 90
select = [
    # "A",    # Flake8-builtins
    # "ANN",  # Flake8-Annotations
    # "ASYNC",  # Flake8-Async
    # "ARG",  # # Flake8-Unused-Arguments
    "B",    # flake8-bugbear
    # "BLE",  # Flake8-blind-except
    "C",
    "C4",   # flake8-comprehensions
    # "C90",  # MCCable
    # "COM",  #  Flake8-commas
    "CPY",  #  Copyright-related rules
    "D",    # PyDocStyle
    # "DTZ",  # Flake8- Datetimez
    "E",    # PyCodeStyle Error
    # "EM",   # flake8-errmsg
    # "ERA",  #  Eradicate
    "EXE",  # flake8-executable
    "F",    # PyFlakes
    "FA",  # flake8-future-annotations
    # "FBT",  # flake8-boolean-trap
    # "FIX",  # flake8-fixme
    "FLY",  # flynt
    # "G",    #  flake8-logging-format
    "I",    # ISort
    "ICN",  # Flake8-import-conventions
    # "INP",  # flake8-no-pep420
    # "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    # "N",    # pep8-naming
    # "NPY",  # numpy-specific rules
    # "PD",   # pandas-vet
    "PERF", # perflint
    # "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    # "PL",   # PyLint  (PLC, PLE, PLR, PLW)
    # "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    # "Q",    # flake8-quotes
    # "RET",  # flake8-return
    "RSE",  # flake8-raise
    # "RUF",  # ruff-specific rules
    # "S",    # flake8-bandit
    # "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    # "T",
    # "TD",   # flake8-todos
    "T10",  # flake8-debugger
    # "T20",  # flake8-print
    # "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    # "TRY",  # tryceratops
    "UP",   # PyUpgrade
    "W",    # PyCodeStyle warning
    "YTT",  # flake8-2020
]
ignore = [
    "C408",  # Unnecessary {obj_type} call (rewrite as a literal)
    "B905",  # zip() without an explicit strict= parameter
    "C901",  # {name} is too complex ({complexity} > {max_complexity})
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring
    "D204",  # 1 blank line required after class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D215",  # Section underline is over-indented ("{name}")
    "D400",  # First line should end with a period
    "D401",  # First line of docstring should be in imperative mood: "{first_line}"
    "D404",  # First word of the docstring should not be "This"
    "D406",  # Section name should end with a newline ("{name}")
    "D407",  # Missing dashed underline after section ("{name}")
    "D408",  # Section underline should be in the line following the section's name ("{name}")
    "D409",  # Section underline should match the length of its name ("{name}")
    "D413",  # Missing blank line after last section ("{name}")
    "SLF001",# Private member accessed
]
extend-exclude = [
    'docs',
    '__init__.py',
    "prettyqt/qt/",
]
target-version = "py310"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.isort]
lines-after-imports = 2
lines-between-types = 1
# atomic = true
force-sort-within-sections = true
combine-as-imports = true

[tool.black]
line-length = 90
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''
[tool.commitizen]
name = "cz_conventional_commits"
github_repo = "phil65/PrettyQt"
version = "1.50.0"
tag_format = "v$version"
update_changelog_on_bump = true
changelog_start_rev = "v1.40.0"
changelog_file = "docs/changelog.md"
version_files = [
    "prettyqt/__init__.py:__version__",
    "pyproject.toml:version",
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
# requires = ["hatchling"]
# build-backend = "hatchling.build"
